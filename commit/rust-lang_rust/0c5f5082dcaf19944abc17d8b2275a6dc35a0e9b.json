{"sha": "0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNWY1MDgyZGNhZjE5OTQ0YWJjMTdkOGIyMjc1YTZkYzM1YTBlOWI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-23T05:04:07Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-23T05:04:07Z"}, "message": "terminating newline bug", "tree": {"sha": "8822c61e1559a502898ff50aa8f16bf17afcc2d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8822c61e1559a502898ff50aa8f16bf17afcc2d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "html_url": "https://github.com/rust-lang/rust/commit/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2819738ff159eab7cb3a12988f0cdcc4f771e73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2819738ff159eab7cb3a12988f0cdcc4f771e73a", "html_url": "https://github.com/rust-lang/rust/commit/2819738ff159eab7cb3a12988f0cdcc4f771e73a"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "8119dc540ac2191e9720e57dd4fd5cc2e33bfb41", "filename": "src/changes.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b/src%2Fchanges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b/src%2Fchanges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchanges.rs?ref=0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "patch": "@@ -60,6 +60,8 @@ impl<'a> ChangeSet<'a> {\n             return Vec::new();\n         }\n \n+        // idx is the index into file_spans which indicates the current file, we\n+        // with the file start denotes.\n         let mut idx = match self.file_spans.binary_search(&(start.0, ::std::u32::MAX)) {\n             Ok(i) => i,\n             Err(0) => 0,\n@@ -115,6 +117,13 @@ impl<'a> ChangeSet<'a> {\n         }\n     }\n \n+    // Append a newline to the end of each file.\n+    pub fn append_newlines(&mut self) {\n+        for (_, s) in self.file_map.iter_mut() {\n+            s.push_str(\"\\n\");\n+        }\n+    }\n+\n     pub fn write_all_files(&self,\n                            mode: WriteMode)\n                            -> Result<(HashMap<String, String>), ::std::io::Error> {"}, {"sha": "492754a39aaa2516fc74c6a2cddc7931353409bc", "filename": "src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b/src%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b/src%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffunctions.rs?ref=0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "patch": "@@ -372,16 +372,16 @@ impl<'a> FmtVisitor<'a> {\n         result.push_str(&make_indent(indent + 4));\n         result.push_str(\"where \");\n \n+        let comments = vec![String::new(); where_clause.predicates.len()];\n         // TODO uncomment when spans are fixed\n-        //println!(\"{:?} {:?}\", where_clause.predicates.iter().map(|p| self.snippet(span_for_where_pred(p))).collect::<Vec<_>>(), next_span.lo);\n+        // println!(\"{:?} {:?}\", where_clause.predicates.iter().map(|p| self.snippet(span_for_where_pred(p))).collect::<Vec<_>>(), next_span.lo);\n         // let comments = self.make_comments_for_list(Vec::new(),\n         //                                            where_clause.predicates.iter(),\n         //                                            \",\",\n         //                                            \"{\",\n         //                                            |pred| span_for_where_pred(pred).lo,\n         //                                            |pred| span_for_where_pred(pred).hi,\n         //                                            next_span.lo);\n-        let comments = vec![String::new(); where_clause.predicates.len()];\n         let where_strs: Vec<_> = where_clause.predicates.iter()\n                                                         .map(|p| (self.rewrite_pred(p)))\n                                                         .zip(comments.into_iter())"}, {"sha": "4f443475afa4f21ba65f0d7401c80cb06990bfb6", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "patch": "@@ -29,6 +29,7 @@ pub enum SeparatorTactic {\n     Vertical,\n }\n \n+// TODO having some helpful ctors for ListFormatting would be nice.\n pub struct ListFormatting<'a> {\n     pub tactic: ListTactic,\n     pub separator: &'a str,"}, {"sha": "3720eaad192e1dae96d73063658bfb766cbed836", "filename": "src/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=0c5f5082dcaf19944abc17d8b2275a6dc35a0e9b", "patch": "@@ -24,7 +24,6 @@\n //   dead spans (comments) - in where clause (wait for fixed spans, test)\n //\n // Smoke testing till we can use it\n-//   ** no newline at the end of doc.rs\n // take config options from a file\n \n #[macro_use]\n@@ -214,6 +213,9 @@ impl<'a> CompilerCalls<'a> for RustFmtCalls {\n             let krate = state.krate.unwrap();\n             let codemap = state.session.codemap();\n             let mut changes = fmt_ast(krate, codemap);\n+            // For some reason, the codemap does not include terminating newlines\n+            // so we must add one on for each file. This is sad.\n+            changes.append_newlines();\n             fmt_lines(&mut changes);\n \n             // FIXME(#5) Should be user specified whether to show or replace."}]}