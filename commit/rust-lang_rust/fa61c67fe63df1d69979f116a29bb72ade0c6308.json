{"sha": "fa61c67fe63df1d69979f116a29bb72ade0c6308", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNjFjNjdmZTYzZGYxZDY5OTc5ZjExNmEyOWJiNzJhZGUwYzYzMDg=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T09:28:13Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-02T06:48:53Z"}, "message": "hir: HirIdify Impl&TraitItemId", "tree": {"sha": "99c5495c4fa1a05d820e3475422263e9a5267894", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99c5495c4fa1a05d820e3475422263e9a5267894"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa61c67fe63df1d69979f116a29bb72ade0c6308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa61c67fe63df1d69979f116a29bb72ade0c6308", "html_url": "https://github.com/rust-lang/rust/commit/fa61c67fe63df1d69979f116a29bb72ade0c6308", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa61c67fe63df1d69979f116a29bb72ade0c6308/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb22315f0878b432e1e79f9825a4b94651a5d475", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb22315f0878b432e1e79f9825a4b94651a5d475", "html_url": "https://github.com/rust-lang/rust/commit/fb22315f0878b432e1e79f9825a4b94651a5d475"}], "stats": {"total": 128, "additions": 55, "deletions": 73}, "files": [{"sha": "52ad800e81c6abf65e693802bccd980925a6d70f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -469,8 +469,8 @@ impl<'a> LoweringContext<'a> {\n \n             fn visit_trait_item(&mut self, item: &'lcx TraitItem) {\n                 self.lctx.with_hir_id_owner(item.id, |lctx| {\n-                    let id = hir::TraitItemId { node_id: item.id };\n                     let hir_item = lctx.lower_trait_item(item);\n+                    let id = hir::TraitItemId { hir_id: hir_item.hir_id };\n                     lctx.trait_items.insert(id, hir_item);\n                     lctx.modules.get_mut(&lctx.current_module).unwrap().trait_items.insert(id);\n                 });\n@@ -480,8 +480,8 @@ impl<'a> LoweringContext<'a> {\n \n             fn visit_impl_item(&mut self, item: &'lcx ImplItem) {\n                 self.lctx.with_hir_id_owner(item.id, |lctx| {\n-                    let id = hir::ImplItemId { node_id: item.id };\n                     let hir_item = lctx.lower_impl_item(item);\n+                    let id = hir::ImplItemId { hir_id: hir_item.hir_id };\n                     lctx.impl_items.insert(id, hir_item);\n                     lctx.modules.get_mut(&lctx.current_module).unwrap().impl_items.insert(id);\n                 });\n@@ -3363,7 +3363,7 @@ impl<'a> LoweringContext<'a> {\n             TraitItemKind::Macro(..) => unimplemented!(),\n         };\n         hir::TraitItemRef {\n-            id: hir::TraitItemId { node_id: i.id },\n+            id: hir::TraitItemId { hir_id: self.lower_node_id(i.id).hir_id },\n             ident: i.ident,\n             span: i.span,\n             defaultness: self.lower_defaultness(Defaultness::Default, has_default),\n@@ -3427,7 +3427,7 @@ impl<'a> LoweringContext<'a> {\n \n     fn lower_impl_item_ref(&mut self, i: &ImplItem) -> hir::ImplItemRef {\n         hir::ImplItemRef {\n-            id: hir::ImplItemId { node_id: i.id },\n+            id: hir::ImplItemId { hir_id: self.lower_node_id(i.id).hir_id },\n             ident: i.ident,\n             span: i.span,\n             vis: self.lower_visibility(&i.vis, Some(i.id)),"}, {"sha": "21a9ed5ebe03a15d11efec49dc8b6edb23516c16", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -427,15 +427,15 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem {\n-        self.read(id.node_id);\n+        self.read_by_hir_id(id.hir_id);\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here\n         self.forest.krate.trait_item(id)\n     }\n \n     pub fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem {\n-        self.read(id.node_id);\n+        self.read_by_hir_id(id.hir_id);\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we\n         // do not trigger a read of the whole krate here\n@@ -618,11 +618,11 @@ impl<'hir> Map<'hir> {\n         }\n \n         for id in &module.trait_items {\n-            visitor.visit_trait_item(self.expect_trait_item(id.node_id));\n+            visitor.visit_trait_item(self.expect_trait_item_by_hir_id(id.hir_id));\n         }\n \n         for id in &module.impl_items {\n-            visitor.visit_impl_item(self.expect_impl_item(id.node_id));\n+            visitor.visit_impl_item(self.expect_impl_item_by_hir_id(id.hir_id));\n         }\n     }\n "}, {"sha": "2d0296aa38c704e3306cbe6437dffc3d00edded4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -1657,7 +1657,7 @@ pub struct MethodSig {\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Debug)]\n pub struct TraitItemId {\n-    pub node_id: NodeId,\n+    pub hir_id: HirId,\n }\n \n /// Represents an item declaration within a trait declaration,\n@@ -1702,7 +1702,7 @@ pub enum TraitItemKind {\n // so it can fetched later.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Debug)]\n pub struct ImplItemId {\n-    pub node_id: NodeId,\n+    pub hir_id: HirId,\n }\n \n /// Represents anything within an `impl` block"}, {"sha": "0803816fb03f45a13c9741df938445b97682b4de", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -116,11 +116,11 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitItemId {\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         let hir::TraitItemId {\n-            node_id\n+            hir_id\n         } = * self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            node_id.hash_stable(hcx, hasher);\n+            hir_id.hash_stable(hcx, hasher);\n         })\n     }\n }\n@@ -130,11 +130,11 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::ImplItemId {\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n         let hir::ImplItemId {\n-            node_id\n+            hir_id\n         } = * self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            node_id.hash_stable(hcx, hasher);\n+            hir_id.hash_stable(hcx, hasher);\n         })\n     }\n }"}, {"sha": "8ffd119f95c0ba9a2062391b4ea4dedd9b9661dc", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -376,7 +376,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                             has_allow_dead_code_or_lang_attr(self.tcx,\n                                                              impl_item.hir_id,\n                                                              &impl_item.attrs) {\n-                        self.worklist.push(self.tcx.hir().node_to_hir_id(impl_item_ref.id.node_id));\n+                        self.worklist.push(impl_item_ref.id.hir_id);\n                     }\n                 }\n             }"}, {"sha": "086b3a318e6b6e9f004c196da728a895aaeae220", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -355,11 +355,7 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n         if let hir::ItemKind::Impl(.., Some(ref trait_ref), _, ref impl_item_refs) = item.node {\n             let node_id = self.tcx.hir().hir_to_node_id(item.hir_id);\n             if !self.access_levels.is_reachable(node_id) {\n-                // FIXME(@ljedrz): rework back to a nice extend when item Ids contain HirId\n-                for impl_item_ref in impl_item_refs {\n-                    let hir_id = self.tcx.hir().node_to_hir_id(impl_item_ref.id.node_id);\n-                    self.worklist.push(hir_id);\n-                }\n+                self.worklist.extend(impl_item_refs.iter().map(|ii_ref| ii_ref.id.hir_id));\n \n                 let trait_def_id = match trait_ref.path.def {\n                     Def::Trait(def_id) => def_id,"}, {"sha": "2618d0874cbc389cc2f5d8a29b581e0737821e97", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -671,13 +671,14 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                         // In the future, this should be fixed and this error should be removed.\n                         let def = self.map.defs.get(&lifetime.hir_id).cloned();\n                         if let Some(Region::LateBound(_, def_id, _)) = def {\n-                            if let Some(node_id) = self.tcx.hir().as_local_node_id(def_id) {\n+                            if let Some(hir_id) = self.tcx.hir().as_local_hir_id(def_id) {\n                                 // Ensure that the parent of the def is an item, not HRTB\n-                                let parent_id = self.tcx.hir().get_parent_node(node_id);\n-                                let parent_impl_id = hir::ImplItemId { node_id: parent_id };\n-                                let parent_trait_id = hir::TraitItemId { node_id: parent_id };\n+                                let parent_id = self.tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                                let parent_impl_id = hir::ImplItemId { hir_id: parent_id };\n+                                let parent_trait_id = hir::TraitItemId { hir_id: parent_id };\n                                 let krate = self.tcx.hir().forest.krate();\n-                                if !(krate.items.contains_key(&parent_id)\n+                                let parent_node_id = self.tcx.hir().hir_to_node_id(parent_id);\n+                                if !(krate.items.contains_key(&parent_node_id)\n                                     || krate.impl_items.contains_key(&parent_impl_id)\n                                     || krate.trait_items.contains_key(&parent_trait_id))\n                                 {\n@@ -2072,10 +2073,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     .expect_item_by_hir_id(self.tcx.hir().get_parent_item(parent))\n                     .node\n                 {\n-                    let parent_node_id = self.tcx.hir().hir_to_node_id(parent);\n                     assoc_item_kind = trait_items\n                         .iter()\n-                        .find(|ti| ti.id.node_id == parent_node_id)\n+                        .find(|ti| ti.id.hir_id == parent)\n                         .map(|ti| ti.kind);\n                 }\n                 match *m {\n@@ -2094,10 +2094,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                     .node\n                 {\n                     impl_self = Some(self_ty);\n-                    let parent_node_id = self.tcx.hir().hir_to_node_id(parent);\n                     assoc_item_kind = impl_items\n                         .iter()\n-                        .find(|ii| ii.id.node_id == parent_node_id)\n+                        .find(|ii| ii.id.hir_id == parent)\n                         .map(|ii| ii.kind);\n                 }\n                 Some(body)"}, {"sha": "1f897d29a1eb86c3c39c6893e2680c11845d3a72", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -2727,7 +2727,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                            parent_vis: &hir::Visibility,\n                                            trait_item_ref: &hir::TraitItemRef)\n                                            -> AssociatedItem {\n-        let def_id = self.hir().local_def_id(trait_item_ref.id.node_id);\n+        let def_id = self.hir().local_def_id_from_hir_id(trait_item_ref.id.hir_id);\n         let (kind, has_self) = match trait_item_ref.kind {\n             hir::AssociatedItemKind::Const => (ty::AssociatedKind::Const, false),\n             hir::AssociatedItemKind::Method { has_self } => {\n@@ -2737,13 +2737,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir::AssociatedItemKind::Existential => bug!(\"only impls can have existentials\"),\n         };\n \n-        let hir_id = self.hir().node_to_hir_id(trait_item_ref.id.node_id);\n-\n         AssociatedItem {\n             ident: trait_item_ref.ident,\n             kind,\n             // Visibility of trait items is inherited from their traits.\n-            vis: Visibility::from_hir(parent_vis, hir_id, self),\n+            vis: Visibility::from_hir(parent_vis, trait_item_ref.id.hir_id, self),\n             defaultness: trait_item_ref.defaultness,\n             def_id,\n             container: TraitContainer(parent_def_id),\n@@ -2755,7 +2753,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                           parent_def_id: DefId,\n                                           impl_item_ref: &hir::ImplItemRef)\n                                           -> AssociatedItem {\n-        let def_id = self.hir().local_def_id(impl_item_ref.id.node_id);\n+        let def_id = self.hir().local_def_id_from_hir_id(impl_item_ref.id.hir_id);\n         let (kind, has_self) = match impl_item_ref.kind {\n             hir::AssociatedItemKind::Const => (ty::AssociatedKind::Const, false),\n             hir::AssociatedItemKind::Method { has_self } => {\n@@ -2765,13 +2763,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             hir::AssociatedItemKind::Existential => (ty::AssociatedKind::Existential, false),\n         };\n \n-        let hir_id = self.hir().node_to_hir_id(impl_item_ref.id.node_id);\n-\n         AssociatedItem {\n             ident: impl_item_ref.ident,\n             kind,\n             // Visibility of trait impl items doesn't matter.\n-            vis: ty::Visibility::from_hir(&impl_item_ref.vis, hir_id, self),\n+            vis: ty::Visibility::from_hir(&impl_item_ref.vis, impl_item_ref.id.hir_id, self),\n             defaultness: impl_item_ref.defaultness,\n             def_id,\n             container: ImplContainer(parent_def_id),\n@@ -3041,13 +3037,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n }\n \n fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> AssociatedItem {\n-    let id = tcx.hir().as_local_node_id(def_id).unwrap();\n-    let parent_id = tcx.hir().get_parent(id);\n-    let parent_def_id = tcx.hir().local_def_id(parent_id);\n-    let parent_item = tcx.hir().expect_item(parent_id);\n+    let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n+    let parent_id = tcx.hir().get_parent_item(id);\n+    let parent_def_id = tcx.hir().local_def_id_from_hir_id(parent_id);\n+    let parent_item = tcx.hir().expect_item_by_hir_id(parent_id);\n     match parent_item.node {\n         hir::ItemKind::Impl(.., ref impl_item_refs) => {\n-            if let Some(impl_item_ref) = impl_item_refs.iter().find(|i| i.id.node_id == id) {\n+            if let Some(impl_item_ref) = impl_item_refs.iter().find(|i| i.id.hir_id == id) {\n                 let assoc_item = tcx.associated_item_from_impl_item_ref(parent_def_id,\n                                                                         impl_item_ref);\n                 debug_assert_eq!(assoc_item.def_id, def_id);\n@@ -3056,7 +3052,7 @@ fn associated_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Asso\n         }\n \n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n-            if let Some(trait_item_ref) = trait_item_refs.iter().find(|i| i.id.node_id == id) {\n+            if let Some(trait_item_ref) = trait_item_refs.iter().find(|i| i.id.hir_id == id) {\n                 let assoc_item = tcx.associated_item_from_trait_item_ref(parent_def_id,\n                                                                          &parent_item.vis,\n                                                                          trait_item_ref);\n@@ -3110,13 +3106,13 @@ fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n             trait_item_refs.iter()\n                            .map(|trait_item_ref| trait_item_ref.id)\n-                           .map(|id| tcx.hir().local_def_id(id.node_id))\n+                           .map(|id| tcx.hir().local_def_id_from_hir_id(id.hir_id))\n                            .collect()\n         }\n         hir::ItemKind::Impl(.., ref impl_item_refs) => {\n             impl_item_refs.iter()\n                           .map(|impl_item_ref| impl_item_ref.id)\n-                          .map(|id| tcx.hir().local_def_id(id.node_id))\n+                          .map(|id| tcx.hir().local_def_id_from_hir_id(id.hir_id))\n                           .collect()\n         }\n         hir::ItemKind::TraitAlias(..) => vec![],"}, {"sha": "641adec82cdd9e11d3e849445bc1bf43adee7339", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -447,8 +447,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                 if let hir::VisibilityKind::Inherited = it.vis.node {\n                     self.private_traits.insert(it.hir_id);\n                     for trait_item_ref in trait_item_refs {\n-                        let hir_id = cx.tcx.hir().node_to_hir_id(trait_item_ref.id.node_id);\n-                        self.private_traits.insert(hir_id);\n+                        self.private_traits.insert(trait_item_ref.id.hir_id);\n                     }\n                     return;\n                 }\n@@ -464,9 +463,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n                         Some(Node::Item(item)) => {\n                             if let hir::VisibilityKind::Inherited = item.vis.node {\n                                 for impl_item_ref in impl_item_refs {\n-                                    let hir_id = cx.tcx.hir().node_to_hir_id(\n-                                        impl_item_ref.id.node_id);\n-                                    self.private_traits.insert(hir_id);\n+                                    self.private_traits.insert(impl_item_ref.id.hir_id);\n                                 }\n                             }\n                         }"}, {"sha": "550b333700b04939b3f39cc446368bd2ca35694e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -515,15 +515,13 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemKind::Impl(.., ref trait_ref, _, ref impl_item_refs) => {\n                 for impl_item_ref in impl_item_refs {\n                     if trait_ref.is_some() || impl_item_ref.vis.node.is_pub() {\n-                        let hir_id = self.tcx.hir().node_to_hir_id(impl_item_ref.id.node_id);\n-                        self.update(hir_id, item_level);\n+                        self.update(impl_item_ref.id.hir_id, item_level);\n                     }\n                 }\n             }\n             hir::ItemKind::Trait(.., ref trait_item_refs) => {\n                 for trait_item_ref in trait_item_refs {\n-                    let hir_id = self.tcx.hir().node_to_hir_id(trait_item_ref.id.node_id);\n-                    self.update(hir_id, item_level);\n+                    self.update(trait_item_ref.id.hir_id, item_level);\n                 }\n             }\n             hir::ItemKind::Struct(ref def, _) | hir::ItemKind::Union(ref def, _) => {\n@@ -590,8 +588,7 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     self.reach(item.hir_id, item_level).generics().predicates();\n \n                     for trait_item_ref in trait_item_refs {\n-                        let hir_id = self.tcx.hir().node_to_hir_id(trait_item_ref.id.node_id);\n-                        let mut reach = self.reach(hir_id, item_level);\n+                        let mut reach = self.reach(trait_item_ref.id.hir_id, item_level);\n                         reach.generics().predicates();\n \n                         if trait_item_ref.kind == AssociatedItemKind::Type &&\n@@ -614,10 +611,9 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n                     self.reach(item.hir_id, item_level).generics().predicates().ty().trait_ref();\n \n                     for impl_item_ref in impl_item_refs {\n-                        let hir_id = self.tcx.hir().node_to_hir_id(impl_item_ref.id.node_id);\n-                        let impl_item_level = self.get(hir_id);\n+                        let impl_item_level = self.get(impl_item_ref.id.hir_id);\n                         if impl_item_level.is_some() {\n-                            self.reach(hir_id, impl_item_level)\n+                            self.reach(impl_item_ref.id.hir_id, impl_item_level)\n                                 .generics().predicates().ty();\n                         }\n                     }\n@@ -1326,7 +1322,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                                          hir::ImplItemKind::Const(..) |\n                                          hir::ImplItemKind::Method(..) => {\n                                              self.access_levels.is_reachable(\n-                                                impl_item_ref.id.node_id)\n+                                                self.tcx.hir().hir_to_node_id(\n+                                                    impl_item_ref.id.hir_id))\n                                          }\n                                          hir::ImplItemKind::Existential(..) |\n                                          hir::ImplItemKind::Type(_) => false,\n@@ -1392,8 +1389,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n                     // methods will be visible as `Public::foo`.\n                     let mut found_pub_static = false;\n                     for impl_item_ref in impl_item_refs {\n-                        let hir_id = self.tcx.hir().node_to_hir_id(impl_item_ref.id.node_id);\n-                        if self.item_is_public(&hir_id, &impl_item_ref.vis) {\n+                        if self.item_is_public(&impl_item_ref.id.hir_id, &impl_item_ref.vis) {\n                             let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n                             match impl_item_ref.kind {\n                                 AssociatedItemKind::Const => {\n@@ -1704,8 +1700,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                 self.check(item.hir_id, item_visibility).generics().predicates();\n \n                 for trait_item_ref in trait_item_refs {\n-                    let hir_id = tcx.hir().node_to_hir_id(trait_item_ref.id.node_id);\n-                    self.check_trait_or_impl_item(hir_id, trait_item_ref.kind,\n+                    self.check_trait_or_impl_item(trait_item_ref.id.hir_id, trait_item_ref.kind,\n                                                   trait_item_ref.defaultness, item_visibility);\n                 }\n             }\n@@ -1754,8 +1749,7 @@ impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx>\n                     } else {\n                         impl_vis\n                     };\n-                    let hir_id = tcx.hir().node_to_hir_id(impl_item_ref.id.node_id);\n-                    self.check_trait_or_impl_item(hir_id, impl_item_ref.kind,\n+                    self.check_trait_or_impl_item(impl_item_ref.id.hir_id, impl_item_ref.kind,\n                                                   impl_item_ref.defaultness, impl_item_vis);\n                 }\n             }"}, {"sha": "59766e7e47d6aeb3c22f1f264641110088623cf2", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -760,11 +760,11 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             .source_map()\n                             .span_to_snippet(trait_span)\n                             .ok()?;\n-                        let trait_m = tcx.hir().as_local_node_id(trait_m.def_id)?;\n-                        let trait_m = tcx.hir().trait_item(hir::TraitItemId { node_id: trait_m });\n+                        let trait_m = tcx.hir().as_local_hir_id(trait_m.def_id)?;\n+                        let trait_m = tcx.hir().trait_item(hir::TraitItemId { hir_id: trait_m });\n \n-                        let impl_m = tcx.hir().as_local_node_id(impl_m.def_id)?;\n-                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { node_id: impl_m });\n+                        let impl_m = tcx.hir().as_local_hir_id(impl_m.def_id)?;\n+                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { hir_id: impl_m });\n \n                         // in case there are no generics, take the spot between the function name\n                         // and the opening paren of the argument list\n@@ -805,8 +805,8 @@ fn compare_synthetic_generics<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 (None, Some(hir::SyntheticTyParamKind::ImplTrait)) => {\n                     err.span_label(impl_span, \"expected `impl Trait`, found generic parameter\");\n                     (|| {\n-                        let impl_m = tcx.hir().as_local_node_id(impl_m.def_id)?;\n-                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { node_id: impl_m });\n+                        let impl_m = tcx.hir().as_local_hir_id(impl_m.def_id)?;\n+                        let impl_m = tcx.hir().impl_item(hir::ImplItemId { hir_id: impl_m });\n                         let input_tys = match impl_m.node {\n                             hir::ImplItemKind::Method(ref sig, _) => &sig.decl.inputs,\n                             _ => unreachable!(),"}, {"sha": "b79277ffbbce82e97180590604a8cf8300e277be", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa61c67fe63df1d69979f116a29bb72ade0c6308/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=fa61c67fe63df1d69979f116a29bb72ade0c6308", "patch": "@@ -108,7 +108,7 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Disallow unconstrained lifetimes, but only if they appear in assoc types.\n     let lifetimes_in_associated_types: FxHashSet<_> = impl_item_refs.iter()\n-        .map(|item_ref| tcx.hir().local_def_id(item_ref.id.node_id))\n+        .map(|item_ref| tcx.hir().local_def_id_from_hir_id(item_ref.id.hir_id))\n         .filter(|&def_id| {\n             let item = tcx.associated_item(def_id);\n             item.kind == ty::AssociatedKind::Type && item.defaultness.has_value()"}]}