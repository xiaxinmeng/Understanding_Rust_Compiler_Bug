{"sha": "4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "node_id": "C_kwDOAAsO6NoAKDQ0MzViYjA3MDQzZGY1NjdjM2VjZDEyZWJkMjBhZGJkNWQ5YzliMmY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-27T03:36:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-27T03:36:08Z"}, "message": "Rollup merge of #91981 - estebank:tweakaroo, r=lcnr\n\nRecover suggestions and useful information lost in previous PR\n\nFollow up to #91898.", "tree": {"sha": "cc19db378c8c5e4df8460bb3e558111dc0999cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc19db378c8c5e4df8460bb3e558111dc0999cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiP9uoCRBK7hj4Ov3rIwAAbZoIAKgbTDwyiyQPKzdV2YCaHJOg\nhRMgHOLmSsdXDv3D3rhuvq4h30qxuuEbwEwTldc/SR4+tZllwiO7c6Z5fGirH3Mw\nWbazh54cNCSWa33Y7Dv2BlV0eeZ9uxQaAK3Z8Z3BB0DEXwXTjrTH4pghTGib4kwK\n8GvKtc5HiQMYfqzJYYcD677Zv2pqMHtU5tIT1p5JyLU/vrRmg3PdivbF+PTSKo3A\nmyBfBL1QE9N/I21Z80kYxEzjHd6nTM5nzMjZawW1HGs7HVLQhLlSLDVgvcXW0Er+\nzO80uc8sgtAdpit4OeL73t0zSlRxuOwAnwUUQwxCKYcwQkxrHhHhU5XygQNDq8Q=\n=rksA\n-----END PGP SIGNATURE-----\n", "payload": "tree cc19db378c8c5e4df8460bb3e558111dc0999cbf\nparent 551b4fa395fa588d91cbecfb0cdfe1baa02670cf\nparent f479e262d68271c1190dba6560923aff026d32fe\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648352168 +0200\ncommitter GitHub <noreply@github.com> 1648352168 +0200\n\nRollup merge of #91981 - estebank:tweakaroo, r=lcnr\n\nRecover suggestions and useful information lost in previous PR\n\nFollow up to #91898.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "html_url": "https://github.com/rust-lang/rust/commit/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "551b4fa395fa588d91cbecfb0cdfe1baa02670cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/551b4fa395fa588d91cbecfb0cdfe1baa02670cf", "html_url": "https://github.com/rust-lang/rust/commit/551b4fa395fa588d91cbecfb0cdfe1baa02670cf"}, {"sha": "f479e262d68271c1190dba6560923aff026d32fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/f479e262d68271c1190dba6560923aff026d32fe", "html_url": "https://github.com/rust-lang/rust/commit/f479e262d68271c1190dba6560923aff026d32fe"}], "stats": {"total": 269, "additions": 209, "deletions": 60}, "files": [{"sha": "238145c5c6ee4ad3bb55b343d5baed012bb52153", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -333,6 +333,9 @@ pub fn same_type_modulo_infer<'tcx>(a: Ty<'tcx>, b: Ty<'tcx>) -> bool {\n         )\n         | (&ty::Infer(ty::InferTy::TyVar(_)), _)\n         | (_, &ty::Infer(ty::InferTy::TyVar(_))) => true,\n+        (&ty::Ref(reg_a, ty_a, mut_a), &ty::Ref(reg_b, ty_b, mut_b)) => {\n+            reg_a == reg_b && mut_a == mut_b && same_type_modulo_infer(*ty_a, *ty_b)\n+        }\n         _ => a == b,\n     }\n }\n@@ -602,7 +605,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         match *cause.code() {\n             ObligationCauseCode::Pattern { origin_expr: true, span: Some(span), root_ty } => {\n                 let ty = self.resolve_vars_if_possible(root_ty);\n-                if ty.is_suggestable() {\n+                if !matches!(ty.kind(), ty::Infer(ty::InferTy::TyVar(_) | ty::InferTy::FreshTy(_)))\n+                {\n                     // don't show type `_`\n                     err.span_label(span, format!(\"this expression has type `{}`\", ty));\n                 }"}, {"sha": "83ba9c96978d0e7b154310e815cfbd551cfdc20c", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1434,6 +1434,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         value.fold_with(&mut r)\n     }\n \n+    pub fn resolve_numeric_literals_with_default<T>(&self, value: T) -> T\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        if !value.needs_infer() {\n+            return value; // Avoid duplicated subst-folding.\n+        }\n+        let mut r = InferenceLiteralEraser { tcx: self.tcx };\n+        value.fold_with(&mut r)\n+    }\n+\n     /// Returns the first unresolved variable contained in `T`. In the\n     /// process of visiting `T`, this will resolve (where possible)\n     /// type variables in `T`, but it never constructs the final,\n@@ -1785,6 +1796,26 @@ impl<'tcx> TyOrConstInferVar<'tcx> {\n     }\n }\n \n+/// Replace `{integer}` with `i32` and `{float}` with `f64`.\n+/// Used only for diagnostics.\n+struct InferenceLiteralEraser<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> TypeFolder<'tcx> for InferenceLiteralEraser<'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n+        match ty.kind() {\n+            ty::Infer(ty::IntVar(_) | ty::FreshIntTy(_)) => self.tcx.types.i32,\n+            ty::Infer(ty::FloatVar(_) | ty::FreshFloatTy(_)) => self.tcx.types.f64,\n+            _ => ty.super_fold_with(self),\n+        }\n+    }\n+}\n+\n struct ShallowResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }"}, {"sha": "a07700aa9f5b9e85b4198bde98c9c5f13184361e", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -11,6 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::{\n     self, subst, subst::SubstsRef, GenericParamDef, GenericParamDefKind, Ty, TyCtxt,\n };\n@@ -83,7 +84,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     if let Some(param_local_id) = param.def_id.as_local() {\n                         let param_hir_id = tcx.hir().local_def_id_to_hir_id(param_local_id);\n                         let param_name = tcx.hir().ty_param_name(param_hir_id);\n-                        let param_type = tcx.type_of(param.def_id);\n+                        let param_type = tcx.infer_ctxt().enter(|infcx| {\n+                            infcx.resolve_numeric_literals_with_default(tcx.type_of(param.def_id))\n+                        });\n                         if param_type.is_suggestable() {\n                             err.span_suggestion(\n                                 tcx.def_span(src_def_id),"}, {"sha": "e6a98ad6dc051aa8ce3cf97584b60b28db604284", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -521,20 +521,29 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         can_suggest: bool,\n         fn_id: hir::HirId,\n     ) -> bool {\n+        let found =\n+            self.resolve_numeric_literals_with_default(self.resolve_vars_if_possible(found));\n         // Only suggest changing the return type for methods that\n         // haven't set a return type at all (and aren't `fn main()` or an impl).\n         match (&fn_decl.output, found.is_suggestable(), can_suggest, expected.is_unit()) {\n             (&hir::FnRetTy::DefaultReturn(span), true, true, true) => {\n                 err.span_suggestion(\n                     span,\n                     \"try adding a return type\",\n-                    format!(\"-> {} \", self.resolve_vars_with_obligations(found)),\n+                    format!(\"-> {} \", found),\n                     Applicability::MachineApplicable,\n                 );\n                 true\n             }\n             (&hir::FnRetTy::DefaultReturn(span), false, true, true) => {\n-                err.span_label(span, \"possibly return type missing here?\");\n+                // FIXME: if `found` could be `impl Iterator` or `impl Fn*`, we should suggest\n+                // that.\n+                err.span_suggestion(\n+                    span,\n+                    \"a return type might be missing here\",\n+                    \"-> _ \".to_string(),\n+                    Applicability::HasPlaceholders,\n+                );\n                 true\n             }\n             (&hir::FnRetTy::DefaultReturn(span), _, false, true) => {"}, {"sha": "750fad8393bbf1bac8308303eb3da8f4f5d7083d", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -87,6 +87,7 @@ async fn baz() -> Result<(), ()> {\n \n async fn match_() {\n     match tuple() { //~ HELP consider `await`ing on the `Future`\n+        //~^ NOTE this expression has type `impl Future<Output = Tuple>`\n         Tuple(_) => {} //~ ERROR mismatched types\n         //~^ NOTE expected opaque type, found struct `Tuple`\n         //~| NOTE expected opaque type `impl Future<Output = Tuple>`"}, {"sha": "33839ea59392d111fb98292cfef63ddf1346563f", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -56,8 +56,11 @@ LL |     struct_().await.method();\n    |               ++++++\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-61076.rs:90:9\n+  --> $DIR/issue-61076.rs:91:9\n    |\n+LL |     match tuple() {\n+   |           ------- this expression has type `impl Future<Output = Tuple>`\n+LL |\n LL |         Tuple(_) => {}\n    |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n    |"}, {"sha": "76073c4c879967d48a99ac596fc71ef10eb60665", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -91,6 +91,8 @@ LL ~         1 => dummy().await,\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:53:9\n    |\n+LL |     let _x = match dummy() {\n+   |                    ------- this expression has type `impl Future<Output = ()>`\n LL |         () => {}\n    |         ^^ expected opaque type, found `()`\n    |\n@@ -109,6 +111,9 @@ LL |     let _x = match dummy().await {\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:67:9\n    |\n+LL |     match dummy_result() {\n+   |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n+...\n LL |         Ok(_) => {}\n    |         ^^^^^ expected opaque type, found enum `Result`\n    |\n@@ -127,6 +132,9 @@ LL |     match dummy_result().await {\n error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:69:9\n    |\n+LL |     match dummy_result() {\n+   |           -------------- this expression has type `impl Future<Output = Result<(), ()>>`\n+...\n LL |         Err(_) => {}\n    |         ^^^^^^ expected opaque type, found enum `Result`\n    |"}, {"sha": "dd83f6edf62a43e6269af258c25f2e1227c1e2d8", "filename": "src/test/ui/blind/blind-item-block-middle.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-block-middle.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -5,7 +5,7 @@ LL | mod foo { pub struct bar; }\n    |           --------------- unit struct defined here\n ...\n LL |     let bar = 5;\n-   |         ^^^\n+   |         ^^^   - this expression has type `{integer}`\n    |         |\n    |         expected integer, found struct `bar`\n    |         `bar` is interpreted as a unit struct, not a new binding"}, {"sha": "e9ca0ad9029e6e0bdb69f9dbbd4a84c3e00453a2", "filename": "src/test/ui/block-result/issue-20862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-20862.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-20862.rs:2:5\n    |\n LL | fn foo(x: i32) {\n-   |                - possibly return type missing here?\n+   |                - help: a return type might be missing here: `-> _`\n LL |     |y| x + y\n    |     ^^^^^^^^^ expected `()`, found closure\n    |"}, {"sha": "3d472bf63094d90db1d3c17e423876b8b0406690", "filename": "src/test/ui/destructuring-assignment/default-match-bindings-forbidden.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Fdefault-match-bindings-forbidden.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/default-match-bindings-forbidden.rs:4:5\n    |\n LL |     (x, y) = &(1, 2);\n-   |     ^^^^^^ expected reference, found tuple\n+   |     ^^^^^^   ------- this expression has type `&({integer}, {integer})`\n+   |     |\n+   |     expected reference, found tuple\n    |\n    = note: expected type `&({integer}, {integer})`\n              found tuple `(_, _)`"}, {"sha": "55b08b74af0620a0edd598c7aded9e46d23825f1", "filename": "src/test/ui/destructuring-assignment/tuple_destructure_fail.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructuring-assignment%2Ftuple_destructure_fail.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -10,7 +10,9 @@ error[E0308]: mismatched types\n   --> $DIR/tuple_destructure_fail.rs:6:5\n    |\n LL |     (a, a, b) = (1, 2);\n-   |     ^^^^^^^^^ expected a tuple with 2 elements, found one with 3 elements\n+   |     ^^^^^^^^^   ------ this expression has type `({integer}, {integer})`\n+   |     |\n+   |     expected a tuple with 2 elements, found one with 3 elements\n    |\n    = note: expected type `({integer}, {integer})`\n              found tuple `(_, _, _)`\n@@ -27,7 +29,9 @@ error[E0308]: mismatched types\n   --> $DIR/tuple_destructure_fail.rs:8:5\n    |\n LL |     (_,) = (1, 2);\n-   |     ^^^^ expected a tuple with 2 elements, found one with 1 element\n+   |     ^^^^   ------ this expression has type `({integer}, {integer})`\n+   |     |\n+   |     expected a tuple with 2 elements, found one with 1 element\n    |\n    = note: expected type `({integer}, {integer})`\n              found tuple `(_,)`"}, {"sha": "a6f8563a047851e8a0ea337d02ca329895a881d5", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision.rs:6:13\n    |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99.., _] => {},\n    |             ^^ expected struct `std::ops::Range`, found integer\n    |"}, {"sha": "4e0102c930da82b7ab86b7bac25a73033f2fe8f6", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision2.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -7,6 +7,8 @@ LL |         [_, 99..] => {},\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision2.rs:6:13\n    |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [_, 99..] => {},\n    |             ^^ expected struct `std::ops::Range`, found integer\n    |"}, {"sha": "665eef2fcb96c80ea7aff1c1f8ae0dbb3e0b5eb6", "filename": "src/test/ui/half-open-range-patterns/exclusive_range_pattern_syntax_collision3.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fexclusive_range_pattern_syntax_collision3.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:12\n    |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n    |            ^ expected struct `std::ops::Range`, found integer\n    |\n@@ -10,6 +12,8 @@ LL |         [..9, 99..100, _] => {},\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:15\n    |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n    |               ^^  --- this is of type `{integer}`\n    |               |\n@@ -21,6 +25,8 @@ LL |         [..9, 99..100, _] => {},\n error[E0308]: mismatched types\n   --> $DIR/exclusive_range_pattern_syntax_collision3.rs:6:19\n    |\n+LL |     match [5..4, 99..105, 43..44] {\n+   |           ----------------------- this expression has type `[std::ops::Range<{integer}>; 3]`\n LL |         [..9, 99..100, _] => {},\n    |               --  ^^^ expected struct `std::ops::Range`, found integer\n    |               |"}, {"sha": "307ad711b74d9f58c988b557ef799556ed6a1482", "filename": "src/test/ui/half-open-range-patterns/pat-tuple-5.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fpat-tuple-5.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-5.rs:8:10\n    |\n+LL |     match (0, 1) {\n+   |           ------ this expression has type `({integer}, {integer})`\n LL |         (PAT ..) => {}\n    |          ^^^ expected tuple, found `u8`\n    |"}, {"sha": "9d7470e7af9aa9c557edc551e87a9647494c9fc7", "filename": "src/test/ui/issues/issue-11844.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11844.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-11844.rs:6:9\n    |\n+LL |     match a {\n+   |           - this expression has type `Option<Box<{integer}>>`\n LL |         Ok(a) =>\n    |         ^^^^^ expected enum `Option`, found enum `Result`\n    |"}, {"sha": "3d8852ca748af6c296119c129b3d520db51ed72b", "filename": "src/test/ui/issues/issue-12552.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12552.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:6:5\n    |\n+LL |   match t {\n+   |         - this expression has type `Result<_, {integer}>`\n LL |     Some(k) => match k {\n    |     ^^^^^^^ expected enum `Result`, found enum `Option`\n    |\n@@ -10,6 +12,9 @@ LL |     Some(k) => match k {\n error[E0308]: mismatched types\n   --> $DIR/issue-12552.rs:9:5\n    |\n+LL |   match t {\n+   |         - this expression has type `Result<_, {integer}>`\n+...\n LL |     None => ()\n    |     ^^^^ expected enum `Result`, found enum `Option`\n    |"}, {"sha": "c78466f4e8ce1c03322bf9e144b57a4f11ea1ded", "filename": "src/test/ui/issues/issue-13466.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13466.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:8:9\n    |\n+LL |     let _x: usize = match Some(1) {\n+   |                           ------- this expression has type `Option<{integer}>`\n LL |         Ok(u) => u,\n    |         ^^^^^ expected enum `Option`, found enum `Result`\n    |\n@@ -10,6 +12,9 @@ LL |         Ok(u) => u,\n error[E0308]: mismatched types\n   --> $DIR/issue-13466.rs:14:9\n    |\n+LL |     let _x: usize = match Some(1) {\n+   |                           ------- this expression has type `Option<{integer}>`\n+...\n LL |         Err(e) => panic!(e)\n    |         ^^^^^^ expected enum `Option`, found enum `Result`\n    |"}, {"sha": "ec15525ed0601ee8220ab6b08b9cf96e8f2b42ee", "filename": "src/test/ui/issues/issue-33504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33504.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -5,7 +5,7 @@ LL | struct Test;\n    | ------------ unit struct defined here\n ...\n LL |         let Test = 1;\n-   |             ^^^^\n+   |             ^^^^   - this expression has type `{integer}`\n    |             |\n    |             expected integer, found struct `Test`\n    |             `Test` is interpreted as a unit struct, not a new binding"}, {"sha": "e8fafa76b919bbc5d5860ac5075b338f1663f121", "filename": "src/test/ui/issues/issue-3680.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3680.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-3680.rs:3:9\n    |\n+LL |     match None {\n+   |           ---- this expression has type `Option<_>`\n LL |         Err(_) => ()\n    |         ^^^^^^ expected enum `Option`, found enum `Result`\n    |"}, {"sha": "57ff7fe09e5b951ce4d5e24a167befd2e327f1c8", "filename": "src/test/ui/issues/issue-4968.stderr", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4968.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -5,11 +5,12 @@ LL | const A: (isize,isize) = (4,2);\n    | ------------------------------- constant defined here\n LL | fn main() {\n LL |     match 42 { A => () }\n-   |                ^\n-   |                |\n-   |                expected integer, found tuple\n-   |                `A` is interpreted as a constant, not a new binding\n-   |                help: introduce a new binding instead: `other_a`\n+   |           --   ^\n+   |           |    |\n+   |           |    expected integer, found tuple\n+   |           |    `A` is interpreted as a constant, not a new binding\n+   |           |    help: introduce a new binding instead: `other_a`\n+   |           this expression has type `{integer}`\n    |\n    = note: expected type `{integer}`\n              found tuple `(isize, isize)`"}, {"sha": "e8cb18f5c1e62bcc2ef14398a524296ad5f9babc", "filename": "src/test/ui/issues/issue-66706.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -36,23 +36,23 @@ error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:2:5\n    |\n LL | fn a() {\n-   |        - possibly return type missing here?\n+   |        - help: try adding a return type: `-> [i32; _]`\n LL |     [0; [|_: _ &_| ()].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:14:5\n    |\n LL | fn c() {\n-   |        - possibly return type missing here?\n+   |        - help: try adding a return type: `-> [i32; _]`\n LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-66706.rs:20:5\n    |\n LL | fn d() {\n-   |        - possibly return type missing here?\n+   |        - help: try adding a return type: `-> [i32; _]`\n LL |     [0; match [|f @ &ref _| () ] {} ]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n "}, {"sha": "653869a237d88b5d70def281be3e4aec317cad64", "filename": "src/test/ui/issues/issue-72574-1.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72574-1.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -21,6 +21,8 @@ LL |         (_a, _x @ ..) => {}\n error[E0308]: mismatched types\n   --> $DIR/issue-72574-1.rs:4:9\n    |\n+LL |     match x {\n+   |           - this expression has type `({integer}, {integer}, {integer})`\n LL |         (_a, _x @ ..) => {}\n    |         ^^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 2 elements\n    |"}, {"sha": "6dcfa3a48116126ea782e63b0eedc134c3c73ffe", "filename": "src/test/ui/keyword/keyword-false-as-identifier.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-false-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-false-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-false-as-identifier.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/keyword-false-as-identifier.rs:2:9\n    |\n LL |     let false = 22;\n-   |         ^^^^^ expected integer, found `bool`\n+   |         ^^^^^   -- this expression has type `{integer}`\n+   |         |\n+   |         expected integer, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "86f6e00064f7da6def4fc493e064808489416ceb", "filename": "src/test/ui/keyword/keyword-true-as-identifier.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-true-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-true-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkeyword%2Fkeyword-true-as-identifier.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/keyword-true-as-identifier.rs:2:9\n    |\n LL |     let true = 22;\n-   |         ^^^^ expected integer, found `bool`\n+   |         ^^^^   -- this expression has type `{integer}`\n+   |         |\n+   |         expected integer, found `bool`\n \n error: aborting due to previous error\n "}, {"sha": "65db92df19f795b95173bacbd687df575f3ff69c", "filename": "src/test/ui/match/match-range-fail.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -27,6 +27,8 @@ LL |         true ..= \"what\" => {}\n error[E0308]: mismatched types\n   --> $DIR/match-range-fail.rs:18:9\n    |\n+LL |     match 5 {\n+   |           - this expression has type `{integer}`\n LL |         'c' ..= 100 => { }\n    |         ^^^     --- this is of type `{integer}`\n    |         |"}, {"sha": "ef03b67b1b0b19db03bec5b038bdc717c315cb8b", "filename": "src/test/ui/mismatched_types/E0409.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0409.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -9,6 +9,8 @@ LL |         (0, ref y) | (y, 0) => {}\n error[E0308]: mismatched types\n   --> $DIR/E0409.rs:5:23\n    |\n+LL |     match x {\n+   |           - this expression has type `({integer}, {integer})`\n LL |         (0, ref y) | (y, 0) => {}\n    |             -----     ^ expected `&{integer}`, found integer\n    |             |"}, {"sha": "cad1cef5155d5f1ba54e81808a613ebbaa467129", "filename": "src/test/ui/mut/mut-pattern-mismatched.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmut%2Fmut-pattern-mismatched.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -3,6 +3,9 @@ error[E0308]: mismatched types\n    |\n LL |      let &_\n    |          ^^ types differ in mutability\n+...\n+LL |         = foo;\n+   |           --- this expression has type `&mut {integer}`\n    |\n    = note: expected mutable reference `&mut {integer}`\n                       found reference `&_`\n@@ -12,6 +15,9 @@ error[E0308]: mismatched types\n    |\n LL |     let &mut _\n    |         ^^^^^^ types differ in mutability\n+...\n+LL |          = bar;\n+   |            --- this expression has type `&{integer}`\n    |\n    = note:      expected reference `&{integer}`\n            found mutable reference `&mut _`"}, {"sha": "4b5b8c45d5939c0eb5946797a8b8c54b9e6bf553", "filename": "src/test/ui/never_type/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,13 +1,15 @@\n error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:8:5\n    |\n-LL | fn g() {\n-   |        - possibly return type missing here?\n LL |     &panic!()\n    |     ^^^^^^^^^ expected `()`, found reference\n    |\n    = note: expected unit type `()`\n               found reference `&_`\n+help: a return type might be missing here\n+   |\n+LL | fn g() -> _ {\n+   |        ++++\n help: consider removing the borrow\n    |\n LL -     &panic!()"}, {"sha": "66112165622b95ff35a27d74a4fdf908cf172567", "filename": "src/test/ui/or-patterns/already-bound-name.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Falready-bound-name.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -86,8 +86,9 @@ error[E0308]: mismatched types\n   --> $DIR/already-bound-name.rs:30:32\n    |\n LL |     let (B(A(a, _) | B(a)) | A(a, A(a, _) | B(a))) = B(B(1));\n-   |              -                 ^ expected integer, found enum `E`\n-   |              |\n+   |              -                 ^                     ------- this expression has type `E<E<{integer}>>`\n+   |              |                 |\n+   |              |                 expected integer, found enum `E`\n    |              first introduced with type `{integer}` here\n    |\n    = note: expected type `{integer}`"}, {"sha": "dae6bb41e74e296b67127be90a874cbcde098403", "filename": "src/test/ui/or-patterns/inconsistent-modes.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Finconsistent-modes.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -65,8 +65,9 @@ error[E0308]: mismatched types\n   --> $DIR/inconsistent-modes.rs:13:32\n    |\n LL |     let (Ok((ref a, b)) | Err((ref mut a, ref b))) = Ok((0, &0));\n-   |              -----             ^^^^^^^^^ types differ in mutability\n-   |              |\n+   |              -----             ^^^^^^^^^             ----------- this expression has type `Result<({integer}, &{integer}), (_, _)>`\n+   |              |                 |\n+   |              |                 types differ in mutability\n    |              first introduced with type `&{integer}` here\n    |\n    = note: expected type `&{integer}`"}, {"sha": "8063ba8e9f7bdaf80fb202df86c230b8c4ddd41e", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -303,8 +303,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:22:12\n    |\n LL |     if let .0..Y = 0 {}\n-   |            ^^  - this is of type `u8`\n-   |            |\n+   |            ^^  -   - this expression has type `{integer}`\n+   |            |   |\n+   |            |   this is of type `u8`\n    |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n@@ -336,8 +337,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:35:12\n    |\n LL |     if let .0..=Y = 0 {}\n-   |            ^^   - this is of type `u8`\n-   |            |\n+   |            ^^   -   - this expression has type `{integer}`\n+   |            |    |\n+   |            |    this is of type `u8`\n    |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n@@ -369,8 +371,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:60:12\n    |\n LL |     if let .0...Y = 0 {}\n-   |            ^^   - this is of type `u8`\n-   |            |\n+   |            ^^   -   - this expression has type `{integer}`\n+   |            |    |\n+   |            |    this is of type `u8`\n    |            expected integer, found floating-point number\n \n error[E0308]: mismatched types\n@@ -392,7 +395,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:75:12\n    |\n LL |     if let .0.. = 0 {}\n-   |            ^^ expected integer, found floating-point number\n+   |            ^^     - this expression has type `{integer}`\n+   |            |\n+   |            expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:83:12\n@@ -404,7 +409,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:85:12\n    |\n LL |     if let .0..= = 0 {}\n-   |            ^^ expected integer, found floating-point number\n+   |            ^^      - this expression has type `{integer}`\n+   |            |\n+   |            expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:93:12\n@@ -416,7 +423,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:95:12\n    |\n LL |     if let .0... = 0 {}\n-   |            ^^ expected integer, found floating-point number\n+   |            ^^      - this expression has type `{integer}`\n+   |            |\n+   |            expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:103:14\n@@ -428,7 +437,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:105:15\n    |\n LL |     if let .. .0 = 0 {}\n-   |               ^^ expected integer, found floating-point number\n+   |               ^^   - this expression has type `{integer}`\n+   |               |\n+   |               expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:113:15\n@@ -440,7 +451,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:115:15\n    |\n LL |     if let ..=.0 = 0 {}\n-   |               ^^ expected integer, found floating-point number\n+   |               ^^   - this expression has type `{integer}`\n+   |               |\n+   |               expected integer, found floating-point number\n \n error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:125:15\n@@ -452,7 +465,9 @@ error[E0308]: mismatched types\n   --> $DIR/recover-range-pats.rs:128:15\n    |\n LL |     if let ....3 = 0 {}\n-   |               ^^ expected integer, found floating-point number\n+   |               ^^   - this expression has type `{integer}`\n+   |               |\n+   |               expected integer, found floating-point number\n \n error: aborting due to 60 previous errors\n "}, {"sha": "f2e2c8f021badac2c2a555395adb7c74c33c7e19", "filename": "src/test/ui/pattern/issue-74702.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-74702.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -22,7 +22,9 @@ error[E0308]: mismatched types\n   --> $DIR/issue-74702.rs:2:9\n    |\n LL |     let (foo @ ..,) = (0, 0);\n-   |         ^^^^^^^^^^^ expected a tuple with 2 elements, found one with 1 element\n+   |         ^^^^^^^^^^^   ------ this expression has type `({integer}, {integer})`\n+   |         |\n+   |         expected a tuple with 2 elements, found one with 1 element\n    |\n    = note: expected tuple `({integer}, {integer})`\n               found tuple `(_,)`"}, {"sha": "1c44f7e5f6f1fa8e1015628fc662c57ffa388a10", "filename": "src/test/ui/pattern/pat-tuple-overfield.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-overfield.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -150,6 +150,8 @@ LL |         E1::Z0 => {}\n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-overfield.rs:19:9\n    |\n+LL |     match (1, 2, 3) {\n+   |           --------- this expression has type `({integer}, {integer}, {integer})`\n LL |         (1, 2, 3, 4) => {}\n    |         ^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 4 elements\n    |\n@@ -159,6 +161,9 @@ LL |         (1, 2, 3, 4) => {}\n error[E0308]: mismatched types\n   --> $DIR/pat-tuple-overfield.rs:20:9\n    |\n+LL |     match (1, 2, 3) {\n+   |           --------- this expression has type `({integer}, {integer}, {integer})`\n+LL |         (1, 2, 3, 4) => {}\n LL |         (1, 2, .., 3, 4) => {}\n    |         ^^^^^^^^^^^^^^^^ expected a tuple with 3 elements, found one with 4 elements\n    |"}, {"sha": "66c68be2f09de527c94804d60cd9068398959b63", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -38,31 +38,31 @@ error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:39:5\n    |\n LL | extern \"C\" fn bar() {\n-   |                     - possibly return type missing here?\n+   |                     - help: try adding a return type: `-> i32`\n LL |     0\n    |     ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:44:5\n    |\n LL | extern \"C\" fn baz() {\n-   |                     - possibly return type missing here?\n+   |                     - help: try adding a return type: `-> i32`\n LL |     0\n    |     ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:49:5\n    |\n LL | extern \"Rust\" fn rust_abi() {\n-   |                             - possibly return type missing here?\n+   |                             - help: try adding a return type: `-> i32`\n LL |     0\n    |     ^ expected `()`, found integer\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:54:5\n    |\n LL | extern \"\\x43\" fn c_abi_escaped() {\n-   |                                  - possibly return type missing here?\n+   |                                  - help: try adding a return type: `-> i32`\n LL |     0\n    |     ^ expected `()`, found integer\n "}, {"sha": "5af136e6011238497ff2b145661577b7a4ce979f", "filename": "src/test/ui/return/return-type.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-type.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,15 +1,19 @@\n error[E0308]: mismatched types\n   --> $DIR/return-type.rs:10:5\n    |\n-LL | fn bar() {\n-   |          - possibly return type missing here?\n LL |     foo(4 as usize)\n-   |     ^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n-   |     |\n-   |     expected `()`, found struct `S`\n+   |     ^^^^^^^^^^^^^^^ expected `()`, found struct `S`\n    |\n    = note: expected unit type `()`\n                  found struct `S<usize>`\n+help: consider using a semicolon here\n+   |\n+LL |     foo(4 as usize);\n+   |                    +\n+help: try adding a return type\n+   |\n+LL | fn bar() -> S<usize> {\n+   |          +++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "14f01f0ebdf7386055fcdec842f0ddce5d53b26c", "filename": "src/test/ui/slightly-nice-generic-literal-messages.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fslightly-nice-generic-literal-messages.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/slightly-nice-generic-literal-messages.rs:7:9\n    |\n+LL |     match Foo(1.1, marker::PhantomData) {\n+   |           ----------------------------- this expression has type `Foo<{float}, _>`\n LL |         1 => {}\n    |         ^ expected struct `Foo`, found integer\n    |"}, {"sha": "3d64fc601df988f32052207bbcddca2a85ebed28", "filename": "src/test/ui/structs/structure-constructor-type-mismatch.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstructure-constructor-type-mismatch.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -101,6 +101,8 @@ LL | type PointF = Point<f32>;\n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:54:9\n    |\n+LL |     match (Point { x: 1, y: 2 }) {\n+   |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF::<u32> { .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n@@ -110,6 +112,8 @@ LL |         PointF::<u32> { .. } => {}\n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:59:9\n    |\n+LL |     match (Point { x: 1, y: 2 }) {\n+   |           ---------------------- this expression has type `Point<{integer}>`\n LL |         PointF { .. } => {}\n    |         ^^^^^^^^^^^^^ expected integer, found `f32`\n    |\n@@ -119,6 +123,8 @@ LL |         PointF { .. } => {}\n error[E0308]: mismatched types\n   --> $DIR/structure-constructor-type-mismatch.rs:67:9\n    |\n+LL |     match (Pair { x: 1, y: 2 }) {\n+   |           --------------------- this expression has type `Pair<{integer}, {integer}>`\n LL |         PairF::<u32> { .. } => {}\n    |         ^^^^^^^^^^^^^^^^^^^ expected integer, found `f32`\n    |"}, {"sha": "633c7b11aa2f89d6359fcc0cdd48db1d927c9726", "filename": "src/test/ui/typeck/issue-91334.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-91334.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -40,7 +40,7 @@ error[E0308]: mismatched types\n LL | fn f(){||yield(((){),\n    |       -^^^^^^^^^^^^^^^ expected `()`, found generator\n    |       |\n-   |       possibly return type missing here?\n+   |       help: a return type might be missing here: `-> _`\n    |\n    = note: expected unit type `()`\n               found generator `[generator@$DIR/issue-91334.rs:10:8: 10:23]`"}, {"sha": "29624e08a2e805862890a8fae3ec698a3ef099f0", "filename": "src/test/ui/typeck/return_type_containing_closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.rs?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,10 +1,10 @@\n #[allow(unused)]\n-fn foo() {\n-    //~^ NOTE possibly return type missing here?\n+fn foo() { //~ HELP a return type might be missing here\n     vec!['a'].iter().map(|c| c)\n     //~^ ERROR mismatched types [E0308]\n     //~| NOTE expected `()`, found struct `Map`\n     //~| NOTE expected unit type `()`\n+    //~| HELP consider using a semicolon here\n }\n \n fn main() {}"}, {"sha": "ae72b1477c8852954efd44baf880f9179dc266a5", "filename": "src/test/ui/typeck/return_type_containing_closure.stderr", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4435bb07043df567c3ecd12ebd20adbd5d9c9b2f/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Freturn_type_containing_closure.stderr?ref=4435bb07043df567c3ecd12ebd20adbd5d9c9b2f", "patch": "@@ -1,16 +1,19 @@\n error[E0308]: mismatched types\n-  --> $DIR/return_type_containing_closure.rs:4:5\n+  --> $DIR/return_type_containing_closure.rs:3:5\n    |\n-LL | fn foo() {\n-   |          - possibly return type missing here?\n-LL |\n LL |     vec!['a'].iter().map(|c| c)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: consider using a semicolon here: `;`\n-   |     |\n-   |     expected `()`, found struct `Map`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found struct `Map`\n    |\n    = note: expected unit type `()`\n-                 found struct `Map<std::slice::Iter<'_, char>, [closure@$DIR/return_type_containing_closure.rs:4:26: 4:31]>`\n+                 found struct `Map<std::slice::Iter<'_, char>, [closure@$DIR/return_type_containing_closure.rs:3:26: 3:31]>`\n+help: consider using a semicolon here\n+   |\n+LL |     vec!['a'].iter().map(|c| c);\n+   |                                +\n+help: a return type might be missing here\n+   |\n+LL | fn foo() -> _ {\n+   |          ++++\n \n error: aborting due to previous error\n "}]}