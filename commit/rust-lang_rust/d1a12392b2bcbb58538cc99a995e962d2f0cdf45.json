{"sha": "d1a12392b2bcbb58538cc99a995e962d2f0cdf45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYTEyMzkyYjJiY2JiNTg1MzhjYzk5YTk5NWU5NjJkMmYwY2RmNDU=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-02-26T12:12:28Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-02-26T12:15:38Z"}, "message": "Nits and cleanups", "tree": {"sha": "193af0a6937d585aab94de92a5898960896501ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/193af0a6937d585aab94de92a5898960896501ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1a12392b2bcbb58538cc99a995e962d2f0cdf45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a12392b2bcbb58538cc99a995e962d2f0cdf45", "html_url": "https://github.com/rust-lang/rust/commit/d1a12392b2bcbb58538cc99a995e962d2f0cdf45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1a12392b2bcbb58538cc99a995e962d2f0cdf45/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7f53b8aa6bafe0642efda7e387507fdb6be56df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f53b8aa6bafe0642efda7e387507fdb6be56df", "html_url": "https://github.com/rust-lang/rust/commit/b7f53b8aa6bafe0642efda7e387507fdb6be56df"}], "stats": {"total": 78, "additions": 35, "deletions": 43}, "files": [{"sha": "4c80eab102fc5f2ff826d3bf00d6c5660b95080b", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d1a12392b2bcbb58538cc99a995e962d2f0cdf45/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a12392b2bcbb58538cc99a995e962d2f0cdf45/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=d1a12392b2bcbb58538cc99a995e962d2f0cdf45", "patch": "@@ -55,17 +55,11 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                         let_extent_stack.push(remainder_scope);\n                         unpack!(block = this.in_scope(init_scope, block, move |this| {\n                             // FIXME #30046                              ^~~~\n-                            match initializer {\n-                                Some(initializer) => {\n-                                    this.expr_into_pattern(block,\n-                                                           remainder_scope,\n-                                                           pattern,\n-                                                           initializer)\n-                                }\n-                                None => {\n-                                    this.declare_bindings(remainder_scope, &pattern);\n-                                    block.unit()\n-                                }\n+                            if let Some(init) = initializer {\n+                                this.expr_into_pattern(block, remainder_scope, pattern, init)\n+                            } else {\n+                                this.declare_bindings(remainder_scope, &pattern);\n+                                block.unit()\n                             }\n                         }));\n                     }"}, {"sha": "c7af42b776f0c3f93592fe57fcc8f6b1fbba5a7c", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 25, "deletions": 28, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d1a12392b2bcbb58538cc99a995e962d2f0cdf45/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a12392b2bcbb58538cc99a995e962d2f0cdf45/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=d1a12392b2bcbb58538cc99a995e962d2f0cdf45", "patch": "@@ -21,7 +21,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n     fn make_mirror<'a>(self, cx: &mut Cx<'a, 'tcx>) -> Block<'tcx> {\n         // We have to eagerly translate the \"spine\" of the statements\n         // in order to get the lexical scoping correctly.\n-        let stmts = mirror_stmts(cx, self.id, self.stmts.iter().enumerate());\n+        let stmts = mirror_stmts(cx, self.id, &*self.stmts);\n         Block {\n             extent: cx.tcx.region_maps.node_extent(self.id),\n             span: self.span,\n@@ -31,14 +31,13 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n     }\n }\n \n-fn mirror_stmts<'a,'tcx:'a,STMTS>(cx: &mut Cx<'a,'tcx>,\n-                                  block_id: ast::NodeId,\n-                                  mut stmts: STMTS)\n-                                  -> Vec<StmtRef<'tcx>>\n-    where STMTS: Iterator<Item=(usize, &'tcx hir::Stmt)>\n+fn mirror_stmts<'a,'tcx:'a>(cx: &mut Cx<'a,'tcx>,\n+                            block_id: ast::NodeId,\n+                            stmts: &'tcx [hir::Stmt])\n+                            -> Vec<StmtRef<'tcx>>\n {\n     let mut result = vec![];\n-    while let Some((index, stmt)) = stmts.next() {\n+    for (index, stmt) in stmts.iter().enumerate() {\n         match stmt.node {\n             hir::StmtExpr(ref expr, id) | hir::StmtSemi(ref expr, id) =>\n                 result.push(StmtRef::Mirror(Box::new(Stmt {\n@@ -48,28 +47,26 @@ fn mirror_stmts<'a,'tcx:'a,STMTS>(cx: &mut Cx<'a,'tcx>,\n                         expr: expr.to_ref()\n                     }\n                 }))),\n-            hir::StmtDecl(ref decl, id) => {\n-                match decl.node {\n-                    hir::DeclItem(..) => { /* ignore for purposes of the MIR */ }\n-                    hir::DeclLocal(ref local) => {\n-                        let remainder_extent = CodeExtentData::Remainder(BlockRemainder {\n-                            block: block_id,\n-                            first_statement_index: index as u32,\n-                        });\n-                        let remainder_extent =\n-                            cx.tcx.region_maps.lookup_code_extent(remainder_extent);\n+            hir::StmtDecl(ref decl, id) => match decl.node {\n+                hir::DeclItem(..) => { /* ignore for purposes of the MIR */ }\n+                hir::DeclLocal(ref local) => {\n+                    let remainder_extent = CodeExtentData::Remainder(BlockRemainder {\n+                        block: block_id,\n+                        first_statement_index: index as u32,\n+                    });\n+                    let remainder_extent =\n+                        cx.tcx.region_maps.lookup_code_extent(remainder_extent);\n \n-                        let pattern = cx.irrefutable_pat(&local.pat);\n-                        result.push(StmtRef::Mirror(Box::new(Stmt {\n-                            span: stmt.span,\n-                            kind: StmtKind::Let {\n-                                remainder_scope: remainder_extent,\n-                                init_scope: cx.tcx.region_maps.node_extent(id),\n-                                pattern: pattern,\n-                                initializer: local.init.to_ref(),\n-                            },\n-                        })));\n-                    }\n+                    let pattern = cx.irrefutable_pat(&local.pat);\n+                    result.push(StmtRef::Mirror(Box::new(Stmt {\n+                        span: stmt.span,\n+                        kind: StmtKind::Let {\n+                            remainder_scope: remainder_extent,\n+                            init_scope: cx.tcx.region_maps.node_extent(id),\n+                            pattern: pattern,\n+                            initializer: local.init.to_ref(),\n+                        },\n+                    })));\n                 }\n             }\n         }"}, {"sha": "a9fee18ded8f4782be472ecb29501d3d1e4e6b48", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1a12392b2bcbb58538cc99a995e962d2f0cdf45/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a12392b2bcbb58538cc99a995e962d2f0cdf45/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=d1a12392b2bcbb58538cc99a995e962d2f0cdf45", "patch": "@@ -278,7 +278,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             self.set_operand_dropped(bcx, op);\n                         });\n                         landingpad.at_start(|bcx| for op in args {\n-                                self.set_operand_dropped(bcx, op);\n+                            self.set_operand_dropped(bcx, op);\n                         });\n                     },\n                     (false, _, &None) => {"}, {"sha": "541df43b49b9a19f32f0e9aeb95799ff75739def", "filename": "src/librustc_trans/trans/mir/rvalue.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d1a12392b2bcbb58538cc99a995e962d2f0cdf45/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1a12392b2bcbb58538cc99a995e962d2f0cdf45/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Frvalue.rs?ref=d1a12392b2bcbb58538cc99a995e962d2f0cdf45", "patch": "@@ -43,9 +43,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n         match *rvalue {\n            mir::Rvalue::Use(ref operand) => {\n+               let tr_operand = self.trans_operand(&bcx, operand);\n                // FIXME: consider not copying constants through stack. (fixable by translating\n                // constants into OperandValue::Ref, why don\u2019t we do that yet if we don\u2019t?)\n-               let tr_operand = self.trans_operand(&bcx, operand);\n                self.store_operand(&bcx, dest.llval, tr_operand);\n                self.set_operand_dropped(&bcx, operand);\n                bcx\n@@ -563,6 +563,7 @@ pub fn rvalue_creates_operand<'tcx>(rvalue: &mir::Rvalue<'tcx>) -> bool {\n     }\n \n     // (*) this is only true if the type is suitable\n-    // (**) we need to zero-out the old value before moving, so we are restricted to either\n-    // ensuring all users of `Use` set it themselves or not allowing to \u201ccreate\u201d operand for it.\n+    // (**) we need to zero-out the source operand after moving, so we are restricted to either\n+    // ensuring all users of `Use` zero it out themselves or not allowing to \u201ccreate\u201d operand for\n+    // it.\n }"}]}