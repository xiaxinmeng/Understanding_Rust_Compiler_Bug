{"sha": "e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1OGM3ZGQxNjg1Y2IxOWUyZWM4NzU2OGNiYzJjYmQwYWJhM2UyYzc=", "commit": {"author": {"name": "Dobe Peter", "email": "dobepeter@gmail.com", "date": "2020-10-31T19:31:34Z"}, "committer": {"name": "Eduardo Broto", "email": "ebroto@tutanota.com", "date": "2020-12-07T23:10:39Z"}, "message": "panic_in_result_fn: Extend to also check usages of [debug_]assert* macros\n\nAlso, the macro-finding logic has been moved to the util module, for\nuse by future lints.", "tree": {"sha": "c0e357b99aad2e679467b362a56f0775dff8d9fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0e357b99aad2e679467b362a56f0775dff8d9fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "html_url": "https://github.com/rust-lang/rust/commit/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/comments", "author": {"login": "dp304", "id": 34493835, "node_id": "MDQ6VXNlcjM0NDkzODM1", "avatar_url": "https://avatars.githubusercontent.com/u/34493835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dp304", "html_url": "https://github.com/dp304", "followers_url": "https://api.github.com/users/dp304/followers", "following_url": "https://api.github.com/users/dp304/following{/other_user}", "gists_url": "https://api.github.com/users/dp304/gists{/gist_id}", "starred_url": "https://api.github.com/users/dp304/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dp304/subscriptions", "organizations_url": "https://api.github.com/users/dp304/orgs", "repos_url": "https://api.github.com/users/dp304/repos", "events_url": "https://api.github.com/users/dp304/events{/privacy}", "received_events_url": "https://api.github.com/users/dp304/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ebroto", "id": 816908, "node_id": "MDQ6VXNlcjgxNjkwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/816908?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebroto", "html_url": "https://github.com/ebroto", "followers_url": "https://api.github.com/users/ebroto/followers", "following_url": "https://api.github.com/users/ebroto/following{/other_user}", "gists_url": "https://api.github.com/users/ebroto/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebroto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebroto/subscriptions", "organizations_url": "https://api.github.com/users/ebroto/orgs", "repos_url": "https://api.github.com/users/ebroto/repos", "events_url": "https://api.github.com/users/ebroto/events{/privacy}", "received_events_url": "https://api.github.com/users/ebroto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aaed9d99267cccacd99929a0c28c4b0a552cb443", "url": "https://api.github.com/repos/rust-lang/rust/commits/aaed9d99267cccacd99929a0c28c4b0a552cb443", "html_url": "https://github.com/rust-lang/rust/commit/aaed9d99267cccacd99929a0c28c4b0a552cb443"}], "stats": {"total": 335, "additions": 285, "deletions": 50}, "files": [{"sha": "cdabb0d0dd6ef0437c94794165458fa4a7ce23f2", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 31, "deletions": 37, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "patch": "@@ -1,18 +1,16 @@\n-use crate::utils::{is_expn_of, is_type_diagnostic_item, return_ty, span_lint_and_then};\n+use crate::utils::{find_macro_calls, is_type_diagnostic_item, return_ty, span_lint_and_then};\n use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n-use rustc_hir::Expr;\n+use rustc_hir::intravisit::FnKind;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for usage of `panic!`, `unimplemented!`, `todo!` or `unreachable!` in a function of type result.\n+    /// **What it does:** Checks for usage of `panic!`, `unimplemented!`, `todo!`, `unreachable!` or assertions in a function of type result.\n     ///\n-    /// **Why is this bad?** For some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence unimplemented, panic and unreachable should be avoided.\n+    /// **Why is this bad?** For some codebases, it is desirable for functions of type result to return an error instead of crashing. Hence panicking macros should be avoided.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** Functions called from a function returning a `Result` may invoke a panicking macro. This is not checked.\n     ///\n     /// **Example:**\n     ///\n@@ -22,9 +20,15 @@ declare_clippy_lint! {\n     ///     panic!(\"error\");\n     /// }\n     /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// fn result_without_panic() -> Result<bool, String> {\n+    ///     Err(String::from(\"error\"))\n+    /// }\n+    /// ```\n     pub PANIC_IN_RESULT_FN,\n     restriction,\n-    \"functions of type `Result<..>` that contain `panic!()`, `todo!()` or `unreachable()` or `unimplemented()` \"\n+    \"functions of type `Result<..>` that contain `panic!()`, `todo!()`, `unreachable()`, `unimplemented()` or assertion\"\n }\n \n declare_lint_pass!(PanicInResultFn  => [PANIC_IN_RESULT_FN]);\n@@ -47,43 +51,33 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n     }\n }\n \n-struct FindPanicUnimplementedUnreachable {\n-    result: Vec<Span>,\n-}\n-\n-impl<'tcx> Visitor<'tcx> for FindPanicUnimplementedUnreachable {\n-    type Map = Map<'tcx>;\n-\n-    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if [\"unimplemented\", \"unreachable\", \"panic\", \"todo\"]\n-            .iter()\n-            .any(|fun| is_expn_of(expr.span, fun).is_some())\n-        {\n-            self.result.push(expr.span);\n-        }\n-        // and check sub-expressions\n-        intravisit::walk_expr(self, expr);\n-    }\n-\n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n-        NestedVisitorMap::None\n-    }\n-}\n-\n fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir::Body<'tcx>) {\n-    let mut panics = FindPanicUnimplementedUnreachable { result: Vec::new() };\n-    panics.visit_expr(&body.value);\n-    if !panics.result.is_empty() {\n+    let panics = find_macro_calls(\n+        vec![\n+            \"unimplemented\",\n+            \"unreachable\",\n+            \"panic\",\n+            \"todo\",\n+            \"assert\",\n+            \"assert_eq\",\n+            \"assert_ne\",\n+            \"debug_assert\",\n+            \"debug_assert_eq\",\n+            \"debug_assert_ne\",\n+        ],\n+        body,\n+    );\n+    if !panics.is_empty() {\n         span_lint_and_then(\n             cx,\n             PANIC_IN_RESULT_FN,\n             impl_span,\n-            \"used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\",\n+            \"used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\",\n             move |diag| {\n                 diag.help(\n-                    \"`unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\",\n+                    \"`unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\",\n                 );\n-                diag.span_note(panics.result, \"return Err() instead of panicking\");\n+                diag.span_note(panics, \"return Err() instead of panicking\");\n             },\n         );\n     }"}, {"sha": "e47d71aac996e51ecc658f9d92b23815323c3f1f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "patch": "@@ -41,7 +41,7 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n-use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_hir::{\n     def, Arm, Block, Body, Constness, Crate, Expr, ExprKind, FnDecl, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n@@ -603,6 +603,37 @@ pub fn contains_return(expr: &hir::Expr<'_>) -> bool {\n     visitor.found\n }\n \n+struct FindMacroCalls<'a> {\n+    names: Vec<&'a str>,\n+    result: Vec<Span>,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for FindMacroCalls<'a> {\n+    type Map = Map<'tcx>;\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n+        if self.names.iter().any(|fun| is_expn_of(expr.span, fun).is_some()) {\n+            self.result.push(expr.span);\n+        }\n+        // and check sub-expressions\n+        intravisit::walk_expr(self, expr);\n+    }\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+/// Finds calls of the specified macros in a function body.\n+pub fn find_macro_calls(names: Vec<&str>, body: &'tcx Body<'tcx>) -> Vec<Span> {\n+    let mut fmc = FindMacroCalls {\n+        names,\n+        result: Vec::new(),\n+    };\n+    fmc.visit_expr(&body.value);\n+    fmc.result\n+}\n+\n /// Converts a span to a code snippet if available, otherwise use default.\n ///\n /// This is useful if you want to provide suggestions for your lint or more generally, if you want"}, {"sha": "eb744b0c198fabf28dc94e0b387d4d09da513c57", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "patch": "@@ -1,4 +1,4 @@\n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:7:5\n    |\n LL | /     fn result_with_panic() -> Result<bool, String> // should emit lint\n@@ -8,15 +8,15 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:9:9\n    |\n LL |         panic!(\"error\");\n    |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:12:5\n    |\n LL | /     fn result_with_unimplemented() -> Result<bool, String> // should emit lint\n@@ -25,15 +25,15 @@ LL | |         unimplemented!();\n LL | |     }\n    | |_____^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:14:9\n    |\n LL |         unimplemented!();\n    |         ^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:17:5\n    |\n LL | /     fn result_with_unreachable() -> Result<bool, String> // should emit lint\n@@ -42,15 +42,15 @@ LL | |         unreachable!();\n LL | |     }\n    | |_____^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:19:9\n    |\n LL |         unreachable!();\n    |         ^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:22:5\n    |\n LL | /     fn result_with_todo() -> Result<bool, String> // should emit lint\n@@ -59,15 +59,15 @@ LL | |         todo!(\"Finish this\");\n LL | |     }\n    | |_____^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:24:9\n    |\n LL |         todo!(\"Finish this\");\n    |         ^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:53:1\n    |\n LL | / fn function_result_with_panic() -> Result<bool, String> // should emit lint\n@@ -76,15 +76,15 @@ LL | |     panic!(\"error\");\n LL | | }\n    | |_^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:55:5\n    |\n LL |     panic!(\"error\");\n    |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: used `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` in a function that returns `Result`\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n   --> $DIR/panic_in_result_fn.rs:68:1\n    |\n LL | / fn main() -> Result<(), String> {\n@@ -93,7 +93,7 @@ LL | |     Ok(())\n LL | | }\n    | |_^\n    |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()` or `panic!()` should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:69:5\n    |"}, {"sha": "ffdf8288adc709d1808072d082e3325b35c3821f", "filename": "tests/ui/panic_in_result_fn_assertions.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn_assertions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn_assertions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.rs?ref=e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "patch": "@@ -0,0 +1,48 @@\n+#![warn(clippy::panic_in_result_fn)]\n+#![allow(clippy::unnecessary_wraps)]\n+\n+struct A;\n+\n+impl A {\n+    fn result_with_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        assert!(x == 5, \"wrong argument\");\n+        Ok(true)\n+    }\n+\n+    fn result_with_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        assert_eq!(x, 5);\n+        Ok(true)\n+    }\n+\n+    fn result_with_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        assert_ne!(x, 1);\n+        Ok(true)\n+    }\n+\n+    fn other_with_assert_with_message(x: i32) // should not emit lint\n+    {\n+        assert!(x == 5, \"wrong argument\");\n+    }\n+\n+    fn other_with_assert_eq(x: i32) // should not emit lint\n+    {\n+        assert_eq!(x, 5);\n+    }\n+\n+    fn other_with_assert_ne(x: i32) // should not emit lint\n+    {\n+        assert_ne!(x, 1);\n+    }\n+\n+    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n+    {\n+        let assert = \"assert!\";\n+        println!(\"No {}\", assert);\n+        Ok(true)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a17f043737d4e009fae59b46d62399e6c8ae3a5d", "filename": "tests/ui/panic_in_result_fn_assertions.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr?ref=e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "patch": "@@ -0,0 +1,57 @@\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_assertions.rs:7:5\n+   |\n+LL | /     fn result_with_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         assert!(x == 5, \"wrong argument\");\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_assertions.rs:9:9\n+   |\n+LL |         assert!(x == 5, \"wrong argument\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_assertions.rs:13:5\n+   |\n+LL | /     fn result_with_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         assert_eq!(x, 5);\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_assertions.rs:15:9\n+   |\n+LL |         assert_eq!(x, 5);\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_assertions.rs:19:5\n+   |\n+LL | /     fn result_with_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         assert_ne!(x, 1);\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_assertions.rs:21:9\n+   |\n+LL |         assert_ne!(x, 1);\n+   |         ^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "b60c79f97c865935a72e954ad765a6680e5eb4d2", "filename": "tests/ui/panic_in_result_fn_debug_assertions.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.rs?ref=e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "patch": "@@ -0,0 +1,48 @@\n+#![warn(clippy::panic_in_result_fn)]\n+#![allow(clippy::unnecessary_wraps)]\n+\n+struct A;\n+\n+impl A {\n+    fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        debug_assert!(x == 5, \"wrong argument\");\n+        Ok(true)\n+    }\n+\n+    fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        debug_assert_eq!(x, 5);\n+        Ok(true)\n+    }\n+\n+    fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n+    {\n+        debug_assert_ne!(x, 1);\n+        Ok(true)\n+    }\n+\n+    fn other_with_debug_assert_with_message(x: i32) // should not emit lint\n+    {\n+        debug_assert!(x == 5, \"wrong argument\");\n+    }\n+\n+    fn other_with_debug_assert_eq(x: i32) // should not emit lint\n+    {\n+        debug_assert_eq!(x, 5);\n+    }\n+\n+    fn other_with_debug_assert_ne(x: i32) // should not emit lint\n+    {\n+        debug_assert_ne!(x, 1);\n+    }\n+\n+    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n+    {\n+        let debug_assert = \"debug_assert!\";\n+        println!(\"No {}\", debug_assert);\n+        Ok(true)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "ec18e89698c56d6d2cc59a158adcdb3a0053e166", "filename": "tests/ui/panic_in_result_fn_debug_assertions.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.stderr?ref=e58c7dd1685cb19e2ec87568cbc2cbd0aba3e2c7", "patch": "@@ -0,0 +1,57 @@\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:7:5\n+   |\n+LL | /     fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         debug_assert!(x == 5, \"wrong argument\");\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:9:9\n+   |\n+LL |         debug_assert!(x == 5, \"wrong argument\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:13:5\n+   |\n+LL | /     fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         debug_assert_eq!(x, 5);\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:15:9\n+   |\n+LL |         debug_assert_eq!(x, 5);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:19:5\n+   |\n+LL | /     fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n+LL | |     {\n+LL | |         debug_assert_ne!(x, 1);\n+LL | |         Ok(true)\n+LL | |     }\n+   | |_____^\n+   |\n+   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n+note: return Err() instead of panicking\n+  --> $DIR/panic_in_result_fn_debug_assertions.rs:21:9\n+   |\n+LL |         debug_assert_ne!(x, 1);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}]}