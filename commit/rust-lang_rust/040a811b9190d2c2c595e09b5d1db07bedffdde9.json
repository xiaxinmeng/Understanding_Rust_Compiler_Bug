{"sha": "040a811b9190d2c2c595e09b5d1db07bedffdde9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MGE4MTFiOTE5MGQyYzJjNTk1ZTA5YjVkMWRiMDdiZWRmZmRkZTk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-28T08:26:29Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-28T13:49:00Z"}, "message": "Rollup merge of #22884 - japaric:obsolete, r=alexcrichton\n\n This is leftover from #21843\n\nIf you still have `|&:| {}` closures in your code, simply remove the `&:` part.\n\n[breaking-change]", "tree": {"sha": "be5796c6b76fbaf78d79006b8086f7052133a1e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be5796c6b76fbaf78d79006b8086f7052133a1e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/040a811b9190d2c2c595e09b5d1db07bedffdde9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/040a811b9190d2c2c595e09b5d1db07bedffdde9", "html_url": "https://github.com/rust-lang/rust/commit/040a811b9190d2c2c595e09b5d1db07bedffdde9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/040a811b9190d2c2c595e09b5d1db07bedffdde9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37760c1f25fc55814a92cce1c98edefdc0740188", "url": "https://api.github.com/repos/rust-lang/rust/commits/37760c1f25fc55814a92cce1c98edefdc0740188", "html_url": "https://github.com/rust-lang/rust/commit/37760c1f25fc55814a92cce1c98edefdc0740188"}, {"sha": "7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e", "html_url": "https://github.com/rust-lang/rust/commit/7ad2e22e4ee1cfc5c6c4a53a6d19f2b853de1c6e"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "2f047d2c173f82a5d23b93f4cc2c11624f219644", "filename": "src/doc/reference.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=040a811b9190d2c2c595e09b5d1db07bedffdde9", "patch": "@@ -3765,9 +3765,9 @@ An example of creating and calling a closure:\n ```rust\n let captured_var = 10;\n \n-let closure_no_args = |&:| println!(\"captured_var={}\", captured_var);\n+let closure_no_args = || println!(\"captured_var={}\", captured_var);\n \n-let closure_args = |&: arg: i32| -> i32 {\n+let closure_args = |arg: i32| -> i32 {\n   println!(\"captured_var={}, arg={}\", captured_var, arg);\n   arg // Note lack of semicolon after 'arg'\n };"}, {"sha": "0c9f9d2a5301aa2b94caf89aca8fba87f6c10006", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=040a811b9190d2c2c595e09b5d1db07bedffdde9", "patch": "@@ -257,7 +257,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n             }\n           }\n           (Ok(const_int(a)), Ok(const_int(b))) => {\n-            let is_a_min_value = |&:| {\n+            let is_a_min_value = || {\n                 let int_ty = match ty::expr_ty_opt(tcx, e).map(|ty| &ty.sty) {\n                     Some(&ty::ty_int(int_ty)) => int_ty,\n                     _ => return false"}, {"sha": "083523f7ba92f97fce223becfadf59dccc1003e7", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=040a811b9190d2c2c595e09b5d1db07bedffdde9", "patch": "@@ -45,7 +45,7 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n     scope: region::CodeExtent,\n     depth: uint)\n {\n-    let origin = |&:| infer::SubregionOrigin::SafeDestructor(span);\n+    let origin = || infer::SubregionOrigin::SafeDestructor(span);\n     let mut walker = ty_root.walk();\n     let opt_phantom_data_def_id = rcx.tcx().lang_items.phantom_data();\n "}, {"sha": "1ae59139bc413e1aa7db20a1c9f1829a51f49917", "filename": "src/libstd/sys/unix/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess2.rs?ref=040a811b9190d2c2c595e09b5d1db07bedffdde9", "patch": "@@ -274,7 +274,7 @@ impl Process {\n                 // file descriptor. Otherwise, the first file descriptor opened\n                 // up in the child would be numbered as one of the stdio file\n                 // descriptors, which is likely to wreak havoc.\n-                let setup = |&: src: Option<AnonPipe>, dst: c_int| {\n+                let setup = |src: Option<AnonPipe>, dst: c_int| {\n                     let src = match src {\n                         None => {\n                             let flags = if dst == libc::STDIN_FILENO {"}, {"sha": "8a6a485cbbe0f01d060f53c9767e6592fda8ee6a", "filename": "src/libstd/sys/windows/process2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess2.rs?ref=040a811b9190d2c2c595e09b5d1db07bedffdde9", "patch": "@@ -160,7 +160,7 @@ impl Process {\n             // Similarly to unix, we don't actually leave holes for the stdio file\n             // descriptors, but rather open up /dev/null equivalents. These\n             // equivalents are drawn from libuv's windows process spawning.\n-            let set_fd = |&: fd: &Option<AnonPipe>, slot: &mut HANDLE,\n+            let set_fd = |fd: &Option<AnonPipe>, slot: &mut HANDLE,\n                           is_stdin: bool| {\n                 match *fd {\n                     None => {"}, {"sha": "9de7b0ede78a7ef03331577420e04f9628b79d1a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=040a811b9190d2c2c595e09b5d1db07bedffdde9", "patch": "@@ -1163,7 +1163,6 @@ impl<'a> Parser<'a> {\n         {\n             self.bump();\n             self.bump();\n-            return;\n         } else if\n             self.eat(&token::Colon)\n         {"}, {"sha": "89134e806a75cb0c370d8d33e82f2def9140d8c3", "filename": "src/test/parse-fail/obsolete-closure-kind.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Ftest%2Fparse-fail%2Fobsolete-closure-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/040a811b9190d2c2c595e09b5d1db07bedffdde9/src%2Ftest%2Fparse-fail%2Fobsolete-closure-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Fobsolete-closure-kind.rs?ref=040a811b9190d2c2c595e09b5d1db07bedffdde9", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we generate obsolete syntax errors around usages of closure kinds: `|:|`, `|&:|` and\n+// `|&mut:|`.\n+\n+fn main() {\n+    let a = |:| {};  //~ ERROR obsolete syntax: `:`, `&mut:`, or `&:`\n+    let a = |&:| {};  //~ ERROR obsolete syntax: `:`, `&mut:`, or `&:`\n+    let a = |&mut:| {};  //~ ERROR obsolete syntax: `:`, `&mut:`, or `&:`\n+}"}]}