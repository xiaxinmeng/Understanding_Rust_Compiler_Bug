{"sha": "c32090c130273787b8f9fc8290357a6a9d3222b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMjA5MGMxMzAyNzM3ODdiOGY5ZmM4MjkwMzU3YTZhOWQzMjIyYjc=", "commit": {"author": {"name": "Till Arnold", "email": "throwable42@gmail.com", "date": "2020-01-12T11:01:37Z"}, "committer": {"name": "Till Arnold", "email": "throwable42@gmail.com", "date": "2020-01-12T11:01:37Z"}, "message": "Document behavior of set_nonblocking on UnixListener", "tree": {"sha": "5e7c29e3f82f89d242da7782f6e72fdd144de2f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7c29e3f82f89d242da7782f6e72fdd144de2f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c32090c130273787b8f9fc8290357a6a9d3222b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c32090c130273787b8f9fc8290357a6a9d3222b7", "html_url": "https://github.com/rust-lang/rust/commit/c32090c130273787b8f9fc8290357a6a9d3222b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c32090c130273787b8f9fc8290357a6a9d3222b7/comments", "author": {"login": "tillarnold", "id": 5075332, "node_id": "MDQ6VXNlcjUwNzUzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5075332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tillarnold", "html_url": "https://github.com/tillarnold", "followers_url": "https://api.github.com/users/tillarnold/followers", "following_url": "https://api.github.com/users/tillarnold/following{/other_user}", "gists_url": "https://api.github.com/users/tillarnold/gists{/gist_id}", "starred_url": "https://api.github.com/users/tillarnold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tillarnold/subscriptions", "organizations_url": "https://api.github.com/users/tillarnold/orgs", "repos_url": "https://api.github.com/users/tillarnold/repos", "events_url": "https://api.github.com/users/tillarnold/events{/privacy}", "received_events_url": "https://api.github.com/users/tillarnold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tillarnold", "id": 5075332, "node_id": "MDQ6VXNlcjUwNzUzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5075332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tillarnold", "html_url": "https://github.com/tillarnold", "followers_url": "https://api.github.com/users/tillarnold/followers", "following_url": "https://api.github.com/users/tillarnold/following{/other_user}", "gists_url": "https://api.github.com/users/tillarnold/gists{/gist_id}", "starred_url": "https://api.github.com/users/tillarnold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tillarnold/subscriptions", "organizations_url": "https://api.github.com/users/tillarnold/orgs", "repos_url": "https://api.github.com/users/tillarnold/repos", "events_url": "https://api.github.com/users/tillarnold/events{/privacy}", "received_events_url": "https://api.github.com/users/tillarnold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bfd04876b93ad5c013d90bc46937e28b6ee1a3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd04876b93ad5c013d90bc46937e28b6ee1a3f4", "html_url": "https://github.com/rust-lang/rust/commit/bfd04876b93ad5c013d90bc46937e28b6ee1a3f4"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "4c3cb67c9ee0f795eff34a31f57acc960966cf72", "filename": "src/libstd/sys/unix/ext/net.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c32090c130273787b8f9fc8290357a6a9d3222b7/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32090c130273787b8f9fc8290357a6a9d3222b7/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fnet.rs?ref=c32090c130273787b8f9fc8290357a6a9d3222b7", "patch": "@@ -902,6 +902,12 @@ impl UnixListener {\n \n     /// Moves the socket into or out of nonblocking mode.\n     ///\n+    /// This will result in the `accept` operation becoming nonblocking,\n+    /// i.e., immediately returning from their calls. If the IO operation is\n+    /// successful, `Ok` is returned and no further action is required. If the\n+    /// IO operation could not be completed and needs to be retried, an error\n+    /// with kind [`io::ErrorKind::WouldBlock`] is returned.\n+    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -913,6 +919,8 @@ impl UnixListener {\n     ///     Ok(())\n     /// }\n     /// ```\n+    ///\n+    /// [`io::ErrorKind::WouldBlock`]: ../../../io/enum.ErrorKind.html#variant.WouldBlock\n     #[stable(feature = \"unix_socket\", since = \"1.10.0\")]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         self.0.set_nonblocking(nonblocking)"}]}