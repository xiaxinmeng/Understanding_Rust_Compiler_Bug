{"sha": "f6d43ed84207c7e58f363f46e5a438ff40f2b311", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZDQzZWQ4NDIwN2M3ZTU4ZjM2M2Y0NmU1YTQzOGZmNDBmMmIzMTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-10T02:18:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-10T02:18:21Z"}, "message": "Auto merge of #53124 - davidtwco:issue-52742, r=nikomatsakis\n\nregion error messages involving impls are confusing\n\nPart of #52742.\n\nr? @nikomatsakis", "tree": {"sha": "06b2c362ee071fa25d2450a42a246696b56eda11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b2c362ee071fa25d2450a42a246696b56eda11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6d43ed84207c7e58f363f46e5a438ff40f2b311", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d43ed84207c7e58f363f46e5a438ff40f2b311", "html_url": "https://github.com/rust-lang/rust/commit/f6d43ed84207c7e58f363f46e5a438ff40f2b311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6d43ed84207c7e58f363f46e5a438ff40f2b311/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db1acaac7f8c84d8fb46211f5e96f678c28628a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1acaac7f8c84d8fb46211f5e96f678c28628a8", "html_url": "https://github.com/rust-lang/rust/commit/db1acaac7f8c84d8fb46211f5e96f678c28628a8"}, {"sha": "31657c99533f7c5dc44229c709a2ce6ad24908db", "url": "https://api.github.com/repos/rust-lang/rust/commits/31657c99533f7c5dc44229c709a2ce6ad24908db", "html_url": "https://github.com/rust-lang/rust/commit/31657c99533f7c5dc44229c709a2ce6ad24908db"}], "stats": {"total": 153, "additions": 95, "deletions": 58}, "files": [{"sha": "4e26a4178b95d78748bf92ed5364d90f904a3589", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                 ty::BrNamed(..) => true,\n                 _ => false,\n             },\n-            ty::ReEarlyBound(_) => true,\n+            ty::ReEarlyBound(ebr) => ebr.has_name(),\n             _ => false,\n         }\n     }"}, {"sha": "6c27d527ae8916f28600dd427dcb824000e5b719", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -52,7 +52,7 @@ use std::{mem, ptr};\n use syntax::ast::{self, DUMMY_NODE_ID, Name, Ident, NodeId};\n use syntax::attr;\n use syntax::ext::hygiene::Mark;\n-use syntax::symbol::{Symbol, LocalInternedString, InternedString};\n+use syntax::symbol::{keywords, Symbol, LocalInternedString, InternedString};\n use syntax_pos::{DUMMY_SP, Span};\n \n use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n@@ -825,6 +825,12 @@ impl ty::EarlyBoundRegion {\n     pub fn to_bound_region(&self) -> ty::BoundRegion {\n         ty::BoundRegion::BrNamed(self.def_id, self.name)\n     }\n+\n+    /// Does this early bound region have a name? Early bound regions normally\n+    /// always have names except when using anonymous lifetimes (`'_`).\n+    pub fn has_name(&self) -> bool {\n+        self.name != keywords::UnderscoreLifetime.name().as_interned_str()\n+    }\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]"}, {"sha": "6acf3aadf5169b77642a1d8f93c707539b588c2e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -95,8 +95,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"give_region_a_name: error_region = {:?}\", error_region);\n         match error_region {\n             ty::ReEarlyBound(ebr) => {\n-                self.highlight_named_span(tcx, error_region, &ebr.name, diag);\n-                Some(ebr.name)\n+                if ebr.has_name() {\n+                    self.highlight_named_span(tcx, error_region, &ebr.name, diag);\n+                    Some(ebr.name)\n+                } else {\n+                    None\n+                }\n             },\n \n             ty::ReStatic => Some(keywords::StaticLifetime.name().as_interned_str()),\n@@ -238,17 +242,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             return Some(region_name);\n         }\n \n-        let (_argument_name, argument_span) = self.get_argument_name_and_span_for_region(\n-            mir, argument_index);\n-\n-        let region_name = self.synthesize_region_name(counter);\n-\n-        diag.span_label(\n-            argument_span,\n-            format!(\"lifetime `{}` appears in this argument\", region_name,),\n-        );\n-\n-        Some(region_name)\n+        self.give_name_if_we_cannot_match_hir_ty(\n+            infcx,\n+            mir,\n+            fr,\n+            arg_ty,\n+            counter,\n+            diag,\n+        )\n     }\n \n     fn give_name_if_we_can_match_hir_ty_from_argument(\n@@ -366,14 +367,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         search_stack.push((argument_ty, argument_hir_ty));\n \n-        let mut closest_match: &hir::Ty = argument_hir_ty;\n-\n         while let Some((ty, hir_ty)) = search_stack.pop() {\n-            // While we search, also track the closet match.\n-            if tcx.any_free_region_meets(&ty, |r| r.to_region_vid() == needle_fr) {\n-                closest_match = hir_ty;\n-            }\n-\n             match (&ty.sty, &hir_ty.node) {\n                 // Check if the `argument_ty` is `&'X ..` where `'X`\n                 // is the region we are looking for -- if so, and we have a `&T`\n@@ -448,13 +442,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n         }\n \n-        let region_name = self.synthesize_region_name(counter);\n-        diag.span_label(\n-            closest_match.span,\n-            format!(\"lifetime `{}` appears in this type\", region_name),\n-        );\n-\n-        return Some(region_name);\n+        return None;\n     }\n \n     /// We've found an enum/struct/union type with the substitutions"}, {"sha": "b7c252cac9bc7dbf6b5d2823887719d1d5a1913c", "filename": "src/test/ui/lifetime-errors/ex2b-push-no-existing-names.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/ex2b-push-no-existing-names.rs:16:5\n    |\n LL | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n-   |                    --------      -------- lifetime `'1` appears in this type\n-   |                    |\n-   |                    lifetime `'2` appears in this type\n+   |        -                      - has type `Ref<'1, i32>`\n+   |        |\n+   |        has type `&mut std::vec::Vec<Ref<'2, i32>>`\n LL |     x.push(y); //~ ERROR lifetime mismatch\n    |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n "}, {"sha": "618817fd57b31e9cc76e85c4d9e850f95cbcafc2", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:16:5\n    |\n LL | fn foo(mut x: Ref, y: Ref) {\n-   |               ---     --- lifetime `'1` appears in this type\n-   |               |\n-   |               lifetime `'2` appears in this type\n+   |        -----       - has type `Ref<'_, '1>`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n LL |     x.b = y.b; //~ ERROR lifetime mismatch\n    |     ^^^^^^^^^ requires that `'1` must outlive `'2`\n "}, {"sha": "b4767afd4138abadd80eff532f99f614555b50f2", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -8,10 +8,10 @@ error: unsatisfied lifetime constraints\n   --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:16:5\n    |\n LL | fn foo(mut x: Ref) {\n-   |               ---\n-   |               |\n-   |               lifetime `'1` appears in this type\n-   |               lifetime `'2` appears in this type\n+   |        -----\n+   |        |\n+   |        has type `Ref<'_, '1>`\n+   |        has type `Ref<'2, '_>`\n LL |     x.a = x.b; //~ ERROR lifetime mismatch\n    |     ^^^^^^^^^ requires that `'1` must outlive `'2`\n "}, {"sha": "e2fcbaa4c3c5507ab1c13a723012850b7dccbb2d", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs-4.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-4.nll.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -8,10 +8,10 @@ error: unsatisfied lifetime constraints\n   --> $DIR/ex3-both-anon-regions-both-are-structs-4.rs:16:5\n    |\n LL | fn foo(mut x: Ref) {\n-   |               ---\n-   |               |\n-   |               lifetime `'1` appears in this type\n-   |               lifetime `'2` appears in this type\n+   |        -----\n+   |        |\n+   |        has type `Ref<'_, '1>`\n+   |        has type `Ref<'2, '_>`\n LL |     x.a = x.b; //~ ERROR lifetime mismatch\n    |     ^^^^^^^^^ requires that `'1` must outlive `'2`\n "}, {"sha": "79f1a8c0ccf7d559d29b6976123bcc3885abaeeb", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-both-are-structs.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/ex3-both-anon-regions-both-are-structs.rs:15:5\n    |\n LL | fn foo(mut x: Vec<Ref>, y: Ref) {\n-   |                   ---      --- lifetime `'1` appears in this type\n-   |                   |\n-   |                   lifetime `'2` appears in this type\n+   |        -----            - has type `Ref<'1>`\n+   |        |\n+   |        has type `std::vec::Vec<Ref<'2>>`\n LL |     x.push(y); //~ ERROR lifetime mismatch\n    |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n "}, {"sha": "0bacd894e6e9a6c6e73497aae6b2b50b7d7d80cb", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n-   |               ---     - let's call the lifetime of this reference `'2`\n-   |               |\n-   |               lifetime `'1` appears in this type\n+   |        -----          - let's call the lifetime of this reference `'2`\n+   |        |\n+   |        has type `Ref<'_, '1>`\n LL |     y = x.b; //~ ERROR lifetime mismatch\n    |     ^^^^^^^ requires that `'1` must outlive `'2`\n "}, {"sha": "f40c67b8d114c282f3186133714364981ae288eb", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:14:5\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n-   |               ---     - let's call the lifetime of this reference `'1`\n-   |               |\n-   |               lifetime `'2` appears in this type\n+   |        -----          - let's call the lifetime of this reference `'1`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n LL |     y.b = x; //~ ERROR lifetime mismatch\n    |     ^^^^^^^ requires that `'1` must outlive `'2`\n "}, {"sha": "f9168dcf5837bf5dd092b213668dbee1a7ab55eb", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:14:5\n    |\n LL | fn foo(mut y: Ref, x: &u32) {\n-   |               ---     - let's call the lifetime of this reference `'1`\n-   |               |\n-   |               lifetime `'2` appears in this type\n+   |        -----          - let's call the lifetime of this reference `'1`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n LL |     y.b = x; //~ ERROR lifetime mismatch\n    |     ^^^^^^^ requires that `'1` must outlive `'2`\n "}, {"sha": "c43f847723240a593b8c4f77f2c5c183b528abc4", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-one-is-struct.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -8,9 +8,9 @@ error: unsatisfied lifetime constraints\n   --> $DIR/ex3-both-anon-regions-one-is-struct.rs:17:5\n    |\n LL | fn foo(mut x: Ref, y: &u32) {\n-   |               ---     - let's call the lifetime of this reference `'1`\n-   |               |\n-   |               lifetime `'2` appears in this type\n+   |        -----          - let's call the lifetime of this reference `'1`\n+   |        |\n+   |        has type `Ref<'_, '2>`\n LL |     x.b = y; //~ ERROR lifetime mismatch\n    |     ^^^^^^^ requires that `'1` must outlive `'2`\n "}, {"sha": "c36e4cc70fd58abcee5a4fa8c1380785ed09b26f", "filename": "src/test/ui/nll/issue-52742.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.rs?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+#![feature(in_band_lifetimes)]\n+#![feature(impl_header_lifetime_elision)]\n+\n+struct Foo<'a, 'b> {\n+    x: &'a u32,\n+    y: &'b u32,\n+}\n+\n+struct Bar<'b> {\n+    z: &'b u32\n+}\n+\n+impl Foo<'_, '_> {\n+    fn take_bar(&mut self, b: Bar<'_>) {\n+        self.y = b.z\n+        //~^ ERROR unsatisfied lifetime constraints\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "515ba55cf6f5b8f7bbbe951396d0fa39846ca8e9", "filename": "src/test/ui/nll/issue-52742.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6d43ed84207c7e58f363f46e5a438ff40f2b311/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52742.stderr?ref=f6d43ed84207c7e58f363f46e5a438ff40f2b311", "patch": "@@ -0,0 +1,12 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/issue-52742.rs:26:9\n+   |\n+LL |     fn take_bar(&mut self, b: Bar<'_>) {\n+   |                 ---------         -- let's call this `'1`\n+   |                 |\n+   |                 has type `&mut Foo<'_, '2>`\n+LL |         self.y = b.z\n+   |         ^^^^^^^^^^^^ requires that `'1` must outlive `'2`\n+\n+error: aborting due to previous error\n+"}]}