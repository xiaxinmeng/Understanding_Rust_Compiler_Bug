{"sha": "21a46c21c674fc2efa231c246792f672b6481a45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYTQ2YzIxYzY3NGZjMmVmYTIzMWMyNDY3OTJmNjcyYjY0ODFhNDU=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-08-04T08:16:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-04T08:16:52Z"}, "message": "Merge pull request #1913 from rust-lang-nursery/while_let_loop\n\nFind binding or assignment within outer loop", "tree": {"sha": "02e6acbabba1021f9b0864ae55d939902a21fe96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02e6acbabba1021f9b0864ae55d939902a21fe96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21a46c21c674fc2efa231c246792f672b6481a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21a46c21c674fc2efa231c246792f672b6481a45", "html_url": "https://github.com/rust-lang/rust/commit/21a46c21c674fc2efa231c246792f672b6481a45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21a46c21c674fc2efa231c246792f672b6481a45/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75faed13b46d6b79a3116cd6dbd454d5bc3fef05", "url": "https://api.github.com/repos/rust-lang/rust/commits/75faed13b46d6b79a3116cd6dbd454d5bc3fef05", "html_url": "https://github.com/rust-lang/rust/commit/75faed13b46d6b79a3116cd6dbd454d5bc3fef05"}, {"sha": "76ca4dca85a17e8e36dae4edeaaddea0a7c22739", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ca4dca85a17e8e36dae4edeaaddea0a7c22739", "html_url": "https://github.com/rust-lang/rust/commit/76ca4dca85a17e8e36dae4edeaaddea0a7c22739"}], "stats": {"total": 178, "additions": 150, "deletions": 28}, "files": [{"sha": "18759fb0a910b230aab56d07d2ad4fb7249f0f74", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21a46c21c674fc2efa231c246792f672b6481a45/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a46c21c674fc2efa231c246792f672b6481a45/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=21a46c21c674fc2efa231c246792f672b6481a45", "patch": "@@ -253,7 +253,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box shadow::Pass);\n     reg.register_late_lint_pass(box types::LetPass);\n     reg.register_late_lint_pass(box types::UnitCmp);\n-    reg.register_late_lint_pass(box loops::Pass::default());\n+    reg.register_late_lint_pass(box loops::Pass);\n     reg.register_late_lint_pass(box lifetimes::LifetimePass);\n     reg.register_late_lint_pass(box entry::HashMapLint);\n     reg.register_late_lint_pass(box ranges::StepByZero);"}, {"sha": "fc28918ff169d9161cf465d5da83e8aa2f6ff536", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 134, "deletions": 25, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/21a46c21c674fc2efa231c246792f672b6481a45/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a46c21c674fc2efa231c246792f672b6481a45/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=21a46c21c674fc2efa231c246792f672b6481a45", "patch": "@@ -2,8 +2,8 @@ use reexport::*;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::intravisit::{Visitor, walk_expr, walk_block, walk_decl, NestedVisitorMap};\n-use rustc::hir::map::Node::NodeBlock;\n+use rustc::hir::intravisit::{Visitor, walk_expr, walk_block, walk_decl, walk_pat, walk_stmt, NestedVisitorMap};\n+use rustc::hir::map::Node::{NodeBlock, NodeExpr, NodeStmt};\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region::CodeExtent;\n@@ -304,10 +304,8 @@ declare_lint! {\n     \"any loop that will always `break` or `return`\"\n }\n \n-#[derive(Copy, Clone, Default)]\n-pub struct Pass {\n-    loop_count: usize,\n-}\n+#[derive(Copy, Clone)]\n+pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n@@ -329,15 +327,6 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_expr_post(&mut self, _: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        match expr.node {\n-            ExprWhile(..) | ExprLoop(..) => {\n-                self.loop_count -= 1;\n-            },\n-            _ => (),\n-        }\n-    }\n-\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let Some((pat, arg, body)) = higher::for_loop(expr) {\n             check_for_loop(cx, pat, arg, body, expr);\n@@ -347,7 +336,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         match expr.node {\n             ExprWhile(_, ref block, _) |\n             ExprLoop(ref block, _, _) => {\n-                self.loop_count += 1;\n                 if never_loop(block, &expr.id) {\n                     span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n                 }\n@@ -410,10 +398,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     &ExprMethodCall(ref method_path, _, ref method_args)) = (pat, &match_expr.node) {\n                 let iter_expr = &method_args[0];\n                 let lhs_constructor = last_path_segment(qpath);\n-                if self.loop_count < 2 && method_path.name == \"next\" &&\n-                   match_trait_method(cx, match_expr, &paths::ITERATOR) &&\n+                if method_path.name == \"next\" && match_trait_method(cx, match_expr, &paths::ITERATOR) &&\n                    lhs_constructor.name == \"Some\" && !is_refutable(cx, &pat_args[0]) &&\n-                   !is_iterator_used_after_while_let(cx, iter_expr) {\n+                   !is_iterator_used_after_while_let(cx, iter_expr) && !is_nested(cx, expr, &method_args[0]) {\n                     let iterator = snippet(cx, method_args[0].span, \"_\");\n                     let loop_var = snippet(cx, pat_args[0].span, \"_\");\n                     span_lint_and_sugg(cx,\n@@ -939,22 +926,29 @@ fn pat_is_wild<'tcx>(pat: &'tcx PatKind, body: &'tcx Expr) -> bool {\n     }\n }\n \n+fn match_var(expr: &Expr, var: Name) -> bool {\n+    if let ExprPath(QPath::Resolved(None, ref path)) = expr.node {\n+        if path.segments.len() == 1 && path.segments[0].name == var {\n+            return true\n+        }\n+    }\n+    false\n+}\n+\n struct UsedVisitor {\n     var: ast::Name, // var to look for\n     used: bool, // has the var been used otherwise?\n }\n \n impl<'tcx> Visitor<'tcx> for UsedVisitor {\n     fn visit_expr(&mut self, expr: &'tcx Expr) {\n-        if let ExprPath(QPath::Resolved(None, ref path)) = expr.node {\n-            if path.segments.len() == 1 && path.segments[0].name == self.var {\n-                self.used = true;\n-                return;\n-            }\n+        if match_var(expr, self.var) {\n+            self.used = true;\n+            return;\n         }\n-\n         walk_expr(self, expr);\n     }\n+\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None\n     }\n@@ -1328,3 +1322,118 @@ fn is_conditional(expr: &Expr) -> bool {\n         _ => false,\n     }\n }\n+\n+fn is_nested(cx: &LateContext, match_expr: &Expr, iter_expr: &Expr) -> bool {\n+    if_let_chain! {[\n+        let Some(loop_block) = get_enclosing_block(cx, match_expr.id),\n+        let Some(map::Node::NodeExpr(loop_expr)) = cx.tcx.hir.find(cx.tcx.hir.get_parent_node(loop_block.id)),\n+    ], {\n+        return is_loop_nested(cx, loop_expr, iter_expr)\n+    }}\n+    false\n+}\n+\n+fn is_loop_nested(cx: &LateContext, loop_expr: &Expr, iter_expr: &Expr) -> bool {\n+    let mut id = loop_expr.id;\n+    let iter_name = if let Some(name) = path_name(iter_expr) {\n+        name\n+    } else {\n+        return true;\n+    };\n+    loop {\n+        let parent = cx.tcx.hir.get_parent_node(id);\n+        if parent == id {\n+            return false;\n+        }\n+        match cx.tcx.hir.find(parent) {\n+            Some(NodeExpr(expr)) => {\n+                match expr.node {\n+                    ExprLoop(..) |\n+                    ExprWhile(..) => { return true; },\n+                    _ => ()\n+                }\n+            },\n+            Some(NodeBlock(block)) => {\n+                let mut block_visitor = LoopNestVisitor {\n+                                            id: id,\n+                                            iterator: iter_name,\n+                                            nesting: Unknown\n+                                        };\n+                walk_block(&mut block_visitor, block);\n+                if block_visitor.nesting == RuledOut {\n+                    return false;\n+                }\n+            },\n+            Some(NodeStmt(_)) => (),\n+            _ => {\n+                return false;\n+            }\n+        }\n+        id = parent;\n+    }\n+}\n+\n+#[derive(PartialEq, Eq)]\n+enum Nesting {\n+    Unknown, // no nesting detected yet\n+    RuledOut, // the iterator is initialized or assigned within scope\n+    LookFurther // no nesting detected, no further walk required\n+}\n+\n+use self::Nesting::{Unknown, RuledOut, LookFurther};\n+\n+struct LoopNestVisitor {\n+    id: NodeId,\n+    iterator: Name,\n+    nesting: Nesting\n+}\n+\n+impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n+    fn visit_stmt(&mut self, stmt: &'tcx Stmt) {\n+        if stmt.node.id() == self.id {\n+            self.nesting = LookFurther;\n+        } else if self.nesting == Unknown {\n+            walk_stmt(self, stmt);\n+        }\n+    }\n+\n+    fn visit_expr(&mut self, expr: &'tcx Expr) {\n+        if self.nesting != Unknown { return; }\n+        if expr.id == self.id {\n+            self.nesting = LookFurther;\n+            return;\n+        }\n+        match expr.node {\n+            ExprAssign(ref path, _) |\n+            ExprAssignOp(_, ref path, _) => if match_var(path, self.iterator) {\n+                self.nesting = RuledOut;\n+            },\n+            _ => walk_expr(self, expr)\n+        }\n+    }\n+\n+    fn visit_pat(&mut self, pat: &'tcx Pat) {\n+        if self.nesting != Unknown { return; }\n+        if let PatKind::Binding(_, _, span_name, _) = pat.node {\n+            if self.iterator == span_name.node {\n+                self.nesting = RuledOut;\n+                return;\n+            }\n+        }\n+        walk_pat(self, pat)\n+    }\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+fn path_name(e: &Expr) -> Option<Name> {\n+    if let ExprPath(QPath::Resolved(_, ref path)) = e.node {\n+        let segments = &path.segments;\n+        if segments.len() == 1 {\n+            return Some(segments[0].name);\n+        }\n+    };\n+    None\n+}"}, {"sha": "848735826098bc37e6632dfea66f6d1e9ddcdd6e", "filename": "tests/ui/while_loop.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21a46c21c674fc2efa231c246792f672b6481a45/tests%2Fui%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21a46c21c674fc2efa231c246792f672b6481a45/tests%2Fui%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.rs?ref=21a46c21c674fc2efa231c246792f672b6481a45", "patch": "@@ -174,7 +174,13 @@ fn refutable() {\n \n     let mut y = a.iter();\n     for _ in 0..2 {\n-        while let Some(v) = y.next() {\n+        while let Some(v) = y.next() { // y is reused, don't lint\n+        }\n+    }\n+\n+    loop {\n+        let mut y = a.iter();\n+        while let Some(v) = y.next() { // use a for loop here\n         }\n     }\n }"}, {"sha": "689c92d6fb694bd06dcfaa55f0d4045d222c7a32", "filename": "tests/ui/while_loop.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21a46c21c674fc2efa231c246792f672b6481a45/tests%2Fui%2Fwhile_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21a46c21c674fc2efa231c246792f672b6481a45/tests%2Fui%2Fwhile_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.stderr?ref=21a46c21c674fc2efa231c246792f672b6481a45", "patch": "@@ -103,5 +103,12 @@ error: empty `loop {}` detected. You may want to either use `panic!()` or add `s\n     |\n     = note: `-D empty-loop` implied by `-D warnings`\n \n-error: aborting due to 10 previous errors\n+error: this loop could be written as a `for` loop\n+   --> $DIR/while_loop.rs:183:9\n+    |\n+183 | /         while let Some(v) = y.next() { // use a for loop here\n+184 | |         }\n+    | |_________^ help: try: `for v in y { .. }`\n+\n+error: aborting due to 11 previous errors\n "}]}