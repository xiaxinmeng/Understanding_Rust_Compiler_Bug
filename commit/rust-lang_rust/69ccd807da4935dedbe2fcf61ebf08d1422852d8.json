{"sha": "69ccd807da4935dedbe2fcf61ebf08d1422852d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5Y2NkODA3ZGE0OTM1ZGVkYmUyZmNmNjFlYmYwOGQxNDIyODUyZDg=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-14T16:01:05Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-20T09:17:28Z"}, "message": "Gather loans for static items\n\nWe currently gather loans for static items that are defined within\nfunctions. This change enables loan gathering on static items declared\nglobally.", "tree": {"sha": "03b20c1ca4ba0df42bf130de79ed23b9ee2ff62f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03b20c1ca4ba0df42bf130de79ed23b9ee2ff62f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69ccd807da4935dedbe2fcf61ebf08d1422852d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69ccd807da4935dedbe2fcf61ebf08d1422852d8", "html_url": "https://github.com/rust-lang/rust/commit/69ccd807da4935dedbe2fcf61ebf08d1422852d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69ccd807da4935dedbe2fcf61ebf08d1422852d8/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8767c693390c0ad53ce96bf1d00548e1205be01b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8767c693390c0ad53ce96bf1d00548e1205be01b", "html_url": "https://github.com/rust-lang/rust/commit/8767c693390c0ad53ce96bf1d00548e1205be01b"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "b92a23a53ee70b6a3dac6ef7b0bdbc0e6580ccc5", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 40, "deletions": 27, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/69ccd807da4935dedbe2fcf61ebf08d1422852d8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ccd807da4935dedbe2fcf61ebf08d1422852d8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=69ccd807da4935dedbe2fcf61ebf08d1422852d8", "patch": "@@ -82,10 +82,12 @@ impl<'a> visit::Visitor<()> for GatherLoanCtxt<'a> {\n     fn visit_block(&mut self, b: &Block, _: ()) {\n         gather_loans_in_block(self, b);\n     }\n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block,\n-                s: Span, n: NodeId, _: ()) {\n-        gather_loans_in_fn(self, fk, fd, b, s, n);\n-    }\n+\n+    /// Do not visit closures or fn items here, the outer loop in\n+    /// borrowck/mod will visit them for us in turn.\n+    fn visit_fn(&mut self, _: &FnKind, _: &FnDecl, _: &Block,\n+                _: Span, _: NodeId, _: ()) {}\n+\n     fn visit_stmt(&mut self, s: &Stmt, _: ()) {\n         visit::walk_stmt(self, s, ());\n     }\n@@ -99,10 +101,20 @@ impl<'a> visit::Visitor<()> for GatherLoanCtxt<'a> {\n     // #7740: Do not visit items here, not even fn items nor methods\n     // of impl items; the outer loop in borrowck/mod will visit them\n     // for us in turn.  Thus override visit_item's walk with a no-op.\n-    fn visit_item(&mut self, _: &ast::Item, _: ()) { }\n+    fn visit_item(&mut self, _: &ast::Item, _: ()) {}\n }\n \n-pub fn gather_loans(bccx: &BorrowckCtxt, decl: &ast::FnDecl, body: &ast::Block)\n+fn add_pat_to_id_range(this: &mut GatherLoanCtxt,\n+                       p: &ast::Pat) {\n+    // NB: This visitor function just adds the pat ids into the id\n+    // range. We gather loans that occur in patterns using the\n+    // `gather_pat()` method below. Eventually these two should be\n+    // brought together.\n+    this.id_range.add(p.id);\n+    visit::walk_pat(this, p, ());\n+}\n+\n+pub fn gather_loans_in_fn(bccx: &BorrowckCtxt, decl: &ast::FnDecl, body: &ast::Block)\n                     -> (IdRange, Vec<Loan>, move_data::MoveData) {\n     let mut glcx = GatherLoanCtxt {\n         bccx: bccx,\n@@ -119,27 +131,6 @@ pub fn gather_loans(bccx: &BorrowckCtxt, decl: &ast::FnDecl, body: &ast::Block)\n     (id_range, all_loans, move_data)\n }\n \n-fn add_pat_to_id_range(this: &mut GatherLoanCtxt,\n-                       p: &ast::Pat) {\n-    // NB: This visitor function just adds the pat ids into the id\n-    // range. We gather loans that occur in patterns using the\n-    // `gather_pat()` method below. Eventually these two should be\n-    // brought together.\n-    this.id_range.add(p.id);\n-    visit::walk_pat(this, p, ());\n-}\n-\n-fn gather_loans_in_fn(_v: &mut GatherLoanCtxt,\n-                      _fk: &FnKind,\n-                      _decl: &ast::FnDecl,\n-                      _body: &ast::Block,\n-                      _sp: Span,\n-                      _id: ast::NodeId) {\n-    // Do not visit closures or fn items here, the outer loop in\n-    // borrowck/mod will visit them for us in turn.\n-    return;\n-}\n-\n fn gather_loans_in_block(this: &mut GatherLoanCtxt,\n                          blk: &ast::Block) {\n     this.id_range.add(blk.id);\n@@ -171,6 +162,28 @@ fn gather_loans_in_local(this: &mut GatherLoanCtxt,\n     visit::walk_local(this, local, ());\n }\n \n+pub fn gather_loans_in_static_initializer(bccx: &mut BorrowckCtxt, expr: &ast::Expr) {\n+\n+    debug!(\"gather_loans_in_item(expr={})\", expr.repr(bccx.tcx));\n+\n+    let mut glcx = GatherLoanCtxt {\n+        bccx: bccx,\n+        id_range: IdRange::max(),\n+        all_loans: Vec::new(),\n+        item_ub: expr.id,\n+        repeating_ids: vec!(expr.id),\n+        move_data: MoveData::new()\n+    };\n+\n+    match expr.node {\n+        // Just visit the expression if the\n+        // item is taking an address.\n+        ast::ExprAddrOf(..) => {\n+            glcx.visit_expr(expr, ());\n+        }\n+        _ => {}\n+    }\n+}\n \n fn gather_loans_in_expr(this: &mut GatherLoanCtxt,\n                         ex: &ast::Expr) {"}, {"sha": "9657e935873275334bde22d89e103ef0f8a288ae", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/69ccd807da4935dedbe2fcf61ebf08d1422852d8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69ccd807da4935dedbe2fcf61ebf08d1422852d8/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=69ccd807da4935dedbe2fcf61ebf08d1422852d8", "patch": "@@ -69,6 +69,10 @@ impl<'a> Visitor<()> for BorrowckCtxt<'a> {\n                 b: &Block, s: Span, n: NodeId, _: ()) {\n         borrowck_fn(self, fk, fd, b, s, n);\n     }\n+\n+    fn visit_item(&mut self, item: &ast::Item, _: ()) {\n+        borrowck_item(self, item);\n+    }\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n@@ -117,6 +121,20 @@ pub fn check_crate(tcx: &ty::ctxt,\n     }\n }\n \n+fn borrowck_item(this: &mut BorrowckCtxt, item: &ast::Item) {\n+    // Gather loans for items. Note that we don't need\n+    // to check loans for single expressions. The check\n+    // loan step is intended for things that have a data\n+    // flow dependent conditions.\n+    match item.node {\n+        ast::ItemStatic(_, _, ex) => {\n+            gather_loans::gather_loans_in_static_initializer(this, ex);\n+        }\n+        _ => {}\n+    }\n+    visit::walk_item(this, item, ());\n+}\n+\n fn borrowck_fn(this: &mut BorrowckCtxt,\n                fk: &FnKind,\n                decl: &ast::FnDecl,\n@@ -127,7 +145,7 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n \n     // Check the body of fn items.\n     let (id_range, all_loans, move_data) =\n-        gather_loans::gather_loans(this, decl, body);\n+        gather_loans::gather_loans_in_fn(this, decl, body);\n     let mut loan_dfcx =\n         DataFlowContext::new(this.tcx,\n                              this.method_map,"}]}