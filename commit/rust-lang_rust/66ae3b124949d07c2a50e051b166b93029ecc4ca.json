{"sha": "66ae3b124949d07c2a50e051b166b93029ecc4ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YWUzYjEyNDk0OWQwN2MyYTUwZTA1MWIxNjZiOTMwMjllY2M0Y2E=", "commit": {"author": {"name": "CYBAI", "email": "cyb.ai.815@gmail.com", "date": "2018-10-10T15:13:53Z"}, "committer": {"name": "CYBAI", "email": "cyb.ai.815@gmail.com", "date": "2018-10-17T03:20:42Z"}, "message": "Rename if_let_redundant_pattern_matching to redundant_pattern_matching\n\nAlso, making the old one deprecated", "tree": {"sha": "255375c8728ca5ebcd4b5d61b74e809c9791cd6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/255375c8728ca5ebcd4b5d61b74e809c9791cd6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66ae3b124949d07c2a50e051b166b93029ecc4ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66ae3b124949d07c2a50e051b166b93029ecc4ca", "html_url": "https://github.com/rust-lang/rust/commit/66ae3b124949d07c2a50e051b166b93029ecc4ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66ae3b124949d07c2a50e051b166b93029ecc4ca/comments", "author": {"login": "CYBAI", "id": 6782666, "node_id": "MDQ6VXNlcjY3ODI2NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6782666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CYBAI", "html_url": "https://github.com/CYBAI", "followers_url": "https://api.github.com/users/CYBAI/followers", "following_url": "https://api.github.com/users/CYBAI/following{/other_user}", "gists_url": "https://api.github.com/users/CYBAI/gists{/gist_id}", "starred_url": "https://api.github.com/users/CYBAI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CYBAI/subscriptions", "organizations_url": "https://api.github.com/users/CYBAI/orgs", "repos_url": "https://api.github.com/users/CYBAI/repos", "events_url": "https://api.github.com/users/CYBAI/events{/privacy}", "received_events_url": "https://api.github.com/users/CYBAI/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CYBAI", "id": 6782666, "node_id": "MDQ6VXNlcjY3ODI2NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6782666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CYBAI", "html_url": "https://github.com/CYBAI", "followers_url": "https://api.github.com/users/CYBAI/followers", "following_url": "https://api.github.com/users/CYBAI/following{/other_user}", "gists_url": "https://api.github.com/users/CYBAI/gists{/gist_id}", "starred_url": "https://api.github.com/users/CYBAI/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CYBAI/subscriptions", "organizations_url": "https://api.github.com/users/CYBAI/orgs", "repos_url": "https://api.github.com/users/CYBAI/repos", "events_url": "https://api.github.com/users/CYBAI/events{/privacy}", "received_events_url": "https://api.github.com/users/CYBAI/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b7c88888bb9b01eb9ca8f40f59b48006462f2b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7c88888bb9b01eb9ca8f40f59b48006462f2b5", "html_url": "https://github.com/rust-lang/rust/commit/3b7c88888bb9b01eb9ca8f40f59b48006462f2b5"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "626c39457e206fea0b314fb57a0eef6dc7e38d23", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66ae3b124949d07c2a50e051b166b93029ecc4ca/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/66ae3b124949d07c2a50e051b166b93029ecc4ca/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=66ae3b124949d07c2a50e051b166b93029ecc4ca", "patch": "@@ -816,6 +816,7 @@ All notable changes to this project will be documented in this file.\n [`redundant_closure_call`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_closure_call\n [`redundant_field_names`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_field_names\n [`redundant_pattern`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_pattern\n+[`redundant_pattern_matching`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#redundant_pattern_matching\n [`ref_in_deref`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#ref_in_deref\n [`regex_macro`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#regex_macro\n [`replace_consts`]: https://rust-lang-nursery.github.io/rust-clippy/master/index.html#replace_consts"}, {"sha": "904036fe8886b4d4bd2e11dc4e362d9e3c2247f9", "filename": "clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66ae3b124949d07c2a50e051b166b93029ecc4ca/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ae3b124949d07c2a50e051b166b93029ecc4ca/clippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=66ae3b124949d07c2a50e051b166b93029ecc4ca", "patch": "@@ -16,7 +16,7 @@ macro_rules! declare_deprecated_lint {\n \n /// **What it does:** Nothing. This lint has been deprecated.\n ///\n-/// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend \n+/// **Deprecation reason:** This used to check for `assert!(a == b)` and recommend\n /// replacement with `assert_eq!(a, b)`, but this is no longer needed after RFC 2011.\n declare_deprecated_lint! {\n     pub SHOULD_ASSERT_EQ,\n@@ -102,3 +102,13 @@ declare_deprecated_lint! {\n     pub ASSIGN_OPS,\n     \"using compound assignment operators (e.g. `+=`) is harmless\"\n }\n+\n+/// **What it does:** Nothing. This lint has been deprecated.\n+///\n+/// **Deprecation reason:** The original rule will only lint for `if let`. After\n+/// making it support to lint `match`, naming as `if let` is not suitable for it.\n+/// So, this lint is deprecated.\n+declare_deprecated_lint! {\n+    pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n+    \"this lint has been changed to redundant_pattern_matching\"\n+}"}, {"sha": "23bd71a08ab64576212afb06bf090244d621c623", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66ae3b124949d07c2a50e051b166b93029ecc4ca/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ae3b124949d07c2a50e051b166b93029ecc4ca/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=66ae3b124949d07c2a50e051b166b93029ecc4ca", "patch": "@@ -126,7 +126,6 @@ pub mod formatting;\n pub mod functions;\n pub mod identity_conversion;\n pub mod identity_op;\n-pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n pub mod indexing_slicing;\n pub mod infallible_destructuring_match;\n@@ -180,6 +179,7 @@ pub mod ptr_offset_with_cast;\n pub mod question_mark;\n pub mod ranges;\n pub mod redundant_field_names;\n+pub mod redundant_pattern_matching;\n pub mod reference;\n pub mod regex;\n pub mod replace_consts;\n@@ -303,6 +303,10 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         \"assign_ops\",\n         \"using compound assignment operators (e.g. `+=`) is harmless\",\n     );\n+    store.register_removed(\n+        \"if_let_redundant_pattern_matching\",\n+        \"this lint has been changed to redundant_pattern_matching\",\n+    );\n     // end deprecated lints, do not remove this comment, it\u2019s used in `update_lints`\n \n     reg.register_late_lint_pass(box serde_api::Serde);\n@@ -402,7 +406,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n     reg.register_late_lint_pass(box missing_inline::MissingInline);\n     reg.register_late_lint_pass(box ok_if_let::Pass);\n-    reg.register_late_lint_pass(box if_let_redundant_pattern_matching::Pass);\n+    reg.register_late_lint_pass(box redundant_pattern_matching::Pass);\n     reg.register_late_lint_pass(box partialeq_ne_impl::Pass);\n     reg.register_early_lint_pass(box reference::Pass);\n     reg.register_early_lint_pass(box reference::DerefPass);\n@@ -565,7 +569,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         functions::TOO_MANY_ARGUMENTS,\n         identity_conversion::IDENTITY_CONVERSION,\n         identity_op::IDENTITY_OP,\n-        if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n         infinite_iter::INFINITE_ITER,\n@@ -680,6 +683,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         ranges::RANGE_PLUS_ONE,\n         ranges::RANGE_ZIP_WITH_LEN,\n         redundant_field_names::REDUNDANT_FIELD_NAMES,\n+        redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n         reference::DEREF_ADDROF,\n         reference::REF_IN_DEREF,\n         regex::INVALID_REGEX,\n@@ -749,7 +753,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         excessive_precision::EXCESSIVE_PRECISION,\n         formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         formatting::SUSPICIOUS_ELSE_FORMATTING,\n-        if_let_redundant_pattern_matching::IF_LET_REDUNDANT_PATTERN_MATCHING,\n         infallible_destructuring_match::INFALLIBLE_DESTRUCTURING_MATCH,\n         len_zero::LEN_WITHOUT_IS_EMPTY,\n         len_zero::LEN_ZERO,\n@@ -800,6 +803,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n         ptr::PTR_ARG,\n         question_mark::QUESTION_MARK,\n         redundant_field_names::REDUNDANT_FIELD_NAMES,\n+        redundant_pattern_matching::REDUNDANT_PATTERN_MATCHING,\n         regex::REGEX_MACRO,\n         regex::TRIVIAL_REGEX,\n         returns::LET_AND_RETURN,"}, {"sha": "f8c5b29bad16a9f6afcb844fb1cbd4d2f5a1024d", "filename": "clippy_lints/src/redundant_pattern_matching.rs", "status": "renamed", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/66ae3b124949d07c2a50e051b166b93029ecc4ca/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ae3b124949d07c2a50e051b166b93029ecc4ca/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=66ae3b124949d07c2a50e051b166b93029ecc4ca", "patch": "@@ -31,6 +31,10 @@ use crate::rustc_errors::Applicability;\n /// if let Err(_) = Err::<i32, i32>(42) {}\n /// if let None = None::<()> {}\n /// if let Some(_) = Some(42) {}\n+/// match Ok::<i32, i32>(42) {\n+///     Ok(_) => true,\n+///     Err(_) => false,\n+/// };\n /// ```\n ///\n /// The more idiomatic use would be:\n@@ -40,10 +44,11 @@ use crate::rustc_errors::Applicability;\n /// if Err::<i32, i32>(42).is_err() {}\n /// if None::<()>.is_none() {}\n /// if Some(42).is_some() {}\n+/// Ok::<i32, i32>(42).is_ok();\n /// ```\n ///\n declare_clippy_lint! {\n-    pub IF_LET_REDUNDANT_PATTERN_MATCHING,\n+    pub REDUNDANT_PATTERN_MATCHING,\n     style,\n     \"use the proper utility function avoiding an `if let`\"\n }\n@@ -53,7 +58,7 @@ pub struct Pass;\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(IF_LET_REDUNDANT_PATTERN_MATCHING)\n+        lint_array!(REDUNDANT_PATTERN_MATCHING)\n     }\n }\n \n@@ -101,7 +106,7 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n \n         span_lint_and_then(\n             cx,\n-            IF_LET_REDUNDANT_PATTERN_MATCHING,\n+            REDUNDANT_PATTERN_MATCHING,\n             arms[0].pats[0].span,\n             &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n             |db| {\n@@ -174,7 +179,7 @@ fn find_sugg_for_match<'a, 'tcx>(\n         if let Some(good_method) = found_good_method {\n             span_lint_and_then(\n                 cx,\n-                IF_LET_REDUNDANT_PATTERN_MATCHING,\n+                REDUNDANT_PATTERN_MATCHING,\n                 expr.span,\n                 &format!(\"redundant pattern matching, consider using `{}`\", good_method),\n                 |db| {", "previous_filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs"}, {"sha": "d31e97c7959efabc1fe52e83e80decff6a32f55c", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66ae3b124949d07c2a50e051b166b93029ecc4ca/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ae3b124949d07c2a50e051b166b93029ecc4ca/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=66ae3b124949d07c2a50e051b166b93029ecc4ca", "patch": "@@ -13,7 +13,7 @@\n \n \n #![warn(clippy::all)]\n-#![allow(unused, clippy::if_let_redundant_pattern_matching)]\n+#![allow(unused, clippy::redundant_pattern_matching)]\n #![warn(clippy::single_match_else, clippy::match_same_arms)]\n \n enum ExprNode {"}, {"sha": "48b7b42cc8c891b16bfdcbe25f2e659d02e46b83", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66ae3b124949d07c2a50e051b166b93029ecc4ca/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ae3b124949d07c2a50e051b166b93029ecc4ca/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=66ae3b124949d07c2a50e051b166b93029ecc4ca", "patch": "@@ -11,7 +11,7 @@\n \n \n #![warn(clippy::needless_pass_by_value)]\n-#![allow(dead_code, clippy::single_match, clippy::if_let_redundant_pattern_matching, clippy::many_single_char_names, clippy::option_option)]\n+#![allow(dead_code, clippy::single_match, clippy::redundant_pattern_matching, clippy::many_single_char_names, clippy::option_option)]\n \n use std::borrow::Borrow;\n use std::convert::AsRef;"}, {"sha": "50838584f66e7458c2b3640458ea4e2b90ec7a1d", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66ae3b124949d07c2a50e051b166b93029ecc4ca/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66ae3b124949d07c2a50e051b166b93029ecc4ca/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=66ae3b124949d07c2a50e051b166b93029ecc4ca", "patch": "@@ -12,7 +12,7 @@\n \n \n #![warn(clippy::all)]\n-#![warn(clippy::if_let_redundant_pattern_matching)]\n+#![warn(clippy::redundant_pattern_matching)]\n \n \n fn main() {", "previous_filename": "tests/ui/if_let_redundant_pattern_matching.rs"}, {"sha": "a42ac7ba04d635bc98cb2225cad262f1721caba6", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "renamed", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/66ae3b124949d07c2a50e051b166b93029ecc4ca/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66ae3b124949d07c2a50e051b166b93029ecc4ca/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=66ae3b124949d07c2a50e051b166b93029ecc4ca", "patch": "@@ -1,37 +1,37 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:19:12\n+  --> $DIR/redundant_pattern_matching.rs:19:12\n    |\n 19 |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^------------------------ help: try this: `if Ok::<i32, i32>(42).is_ok()`\n    |\n-   = note: `-D clippy::if-let-redundant-pattern-matching` implied by `-D warnings`\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:21:12\n+  --> $DIR/redundant_pattern_matching.rs:21:12\n    |\n 21 |       if let Err(_) = Err::<i32, i32>(42) {\n    |  _____-      ^^^^^^\n 22 | |     }\n    | |_____- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:24:12\n+  --> $DIR/redundant_pattern_matching.rs:24:12\n    |\n 24 |       if let None = None::<()> {\n    |  _____-      ^^^^\n 25 | |     }\n    | |_____- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:27:12\n+  --> $DIR/redundant_pattern_matching.rs:27:12\n    |\n 27 |       if let Some(_) = Some(42) {\n    |  _____-      ^^^^^^^\n 28 | |     }\n    | |_____- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:46:5\n+  --> $DIR/redundant_pattern_matching.rs:46:5\n    |\n 46 | /     match Ok::<i32, i32>(42) {\n 47 | |         Ok(_) => true,\n@@ -40,7 +40,7 @@ error: redundant pattern matching, consider using `is_ok()`\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:51:5\n+  --> $DIR/redundant_pattern_matching.rs:51:5\n    |\n 51 | /     match Ok::<i32, i32>(42) {\n 52 | |         Ok(_) => false,\n@@ -49,7 +49,7 @@ error: redundant pattern matching, consider using `is_err()`\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:56:5\n+  --> $DIR/redundant_pattern_matching.rs:56:5\n    |\n 56 | /     match Err::<i32, i32>(42) {\n 57 | |         Ok(_) => false,\n@@ -58,7 +58,7 @@ error: redundant pattern matching, consider using `is_err()`\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:61:5\n+  --> $DIR/redundant_pattern_matching.rs:61:5\n    |\n 61 | /     match Err::<i32, i32>(42) {\n 62 | |         Ok(_) => true,\n@@ -67,7 +67,7 @@ error: redundant pattern matching, consider using `is_ok()`\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:66:5\n+  --> $DIR/redundant_pattern_matching.rs:66:5\n    |\n 66 | /     match Some(42) {\n 67 | |         Some(_) => true,\n@@ -76,7 +76,7 @@ error: redundant pattern matching, consider using `is_some()`\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/if_let_redundant_pattern_matching.rs:71:5\n+  --> $DIR/redundant_pattern_matching.rs:71:5\n    |\n 71 | /     match None::<()> {\n 72 | |         Some(_) => false,", "previous_filename": "tests/ui/if_let_redundant_pattern_matching.stderr"}]}