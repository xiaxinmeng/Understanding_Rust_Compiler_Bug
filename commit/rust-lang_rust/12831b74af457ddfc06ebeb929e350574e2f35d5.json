{"sha": "12831b74af457ddfc06ebeb929e350574e2f35d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyODMxYjc0YWY0NTdkZGZjMDZlYmViOTI5ZTM1MDU3NGUyZjM1ZDU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T10:02:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-26T10:06:08Z"}, "message": "Cleanup", "tree": {"sha": "c3df9665d7b6e84389d5b1f45413b45c1fc99bb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3df9665d7b6e84389d5b1f45413b45c1fc99bb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12831b74af457ddfc06ebeb929e350574e2f35d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12831b74af457ddfc06ebeb929e350574e2f35d5", "html_url": "https://github.com/rust-lang/rust/commit/12831b74af457ddfc06ebeb929e350574e2f35d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12831b74af457ddfc06ebeb929e350574e2f35d5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b039f0d1baa34b7d53117085438769cc3402e112", "url": "https://api.github.com/repos/rust-lang/rust/commits/b039f0d1baa34b7d53117085438769cc3402e112", "html_url": "https://github.com/rust-lang/rust/commit/b039f0d1baa34b7d53117085438769cc3402e112"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "1cf50b677fc6f997337a434154caafcab0a94a3f", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12831b74af457ddfc06ebeb929e350574e2f35d5/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12831b74af457ddfc06ebeb929e350574e2f35d5/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=12831b74af457ddfc06ebeb929e350574e2f35d5", "patch": "@@ -3,7 +3,6 @@ pub(crate) mod to_proto;\n \n use std::{collections::HashMap, mem, sync::Arc};\n \n-use lsp_types::{Diagnostic, Range};\n use ra_ide::FileId;\n use rustc_hash::FxHashSet;\n \n@@ -19,15 +18,15 @@ pub struct DiagnosticsConfig {\n \n #[derive(Debug, Default, Clone)]\n pub(crate) struct DiagnosticCollection {\n-    pub(crate) native: HashMap<FileId, Vec<Diagnostic>>,\n-    pub(crate) check: HashMap<FileId, Vec<Diagnostic>>,\n+    pub(crate) native: HashMap<FileId, Vec<lsp_types::Diagnostic>>,\n+    pub(crate) check: HashMap<FileId, Vec<lsp_types::Diagnostic>>,\n     pub(crate) check_fixes: CheckFixes,\n     changes: FxHashSet<FileId>,\n }\n \n #[derive(Debug, Clone)]\n pub(crate) struct Fix {\n-    pub(crate) range: Range,\n+    pub(crate) range: lsp_types::Range,\n     pub(crate) action: lsp_ext::CodeAction,\n }\n \n@@ -40,7 +39,7 @@ impl DiagnosticCollection {\n     pub(crate) fn add_check_diagnostic(\n         &mut self,\n         file_id: FileId,\n-        diagnostic: Diagnostic,\n+        diagnostic: lsp_types::Diagnostic,\n         fixes: Vec<lsp_ext::CodeAction>,\n     ) {\n         let diagnostics = self.check.entry(file_id).or_default();\n@@ -59,12 +58,19 @@ impl DiagnosticCollection {\n         self.changes.insert(file_id);\n     }\n \n-    pub(crate) fn set_native_diagnostics(&mut self, file_id: FileId, diagnostics: Vec<Diagnostic>) {\n+    pub(crate) fn set_native_diagnostics(\n+        &mut self,\n+        file_id: FileId,\n+        diagnostics: Vec<lsp_types::Diagnostic>,\n+    ) {\n         self.native.insert(file_id, diagnostics);\n         self.changes.insert(file_id);\n     }\n \n-    pub(crate) fn diagnostics_for(&self, file_id: FileId) -> impl Iterator<Item = &Diagnostic> {\n+    pub(crate) fn diagnostics_for(\n+        &self,\n+        file_id: FileId,\n+    ) -> impl Iterator<Item = &lsp_types::Diagnostic> {\n         let native = self.native.get(&file_id).into_iter().flatten();\n         let check = self.check.get(&file_id).into_iter().flatten();\n         native.chain(check)\n@@ -78,7 +84,7 @@ impl DiagnosticCollection {\n     }\n }\n \n-fn are_diagnostics_equal(left: &Diagnostic, right: &Diagnostic) -> bool {\n+fn are_diagnostics_equal(left: &lsp_types::Diagnostic, right: &lsp_types::Diagnostic) -> bool {\n     left.source == right.source\n         && left.severity == right.severity\n         && left.range == right.range"}, {"sha": "3eed118a9bbb759be5025b023b5ba31333905004", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12831b74af457ddfc06ebeb929e350574e2f35d5/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12831b74af457ddfc06ebeb929e350574e2f35d5/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=12831b74af457ddfc06ebeb929e350574e2f35d5", "patch": "@@ -167,9 +167,9 @@ fn map_rust_child_diagnostic(\n \n #[derive(Debug)]\n pub(crate) struct MappedRustDiagnostic {\n-    pub location: Location,\n-    pub diagnostic: Diagnostic,\n-    pub fixes: Vec<lsp_ext::CodeAction>,\n+    pub(crate) location: Location,\n+    pub(crate) diagnostic: Diagnostic,\n+    pub(crate) fixes: Vec<lsp_ext::CodeAction>,\n }\n \n /// Converts a Rust root diagnostic to LSP form"}, {"sha": "4da09408317cb920cc885bc45da8a6bf513697d2", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12831b74af457ddfc06ebeb929e350574e2f35d5/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12831b74af457ddfc06ebeb929e350574e2f35d5/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=12831b74af457ddfc06ebeb929e350574e2f35d5", "patch": "@@ -195,11 +195,7 @@ impl Drop for GlobalState {\n \n impl GlobalStateSnapshot {\n     pub(crate) fn url_to_file_id(&self, url: &Url) -> Result<FileId> {\n-        let path = from_proto::abs_path(url)?;\n-        let path = path.into();\n-        let res =\n-            self.vfs.read().0.file_id(&path).ok_or_else(|| format!(\"file not found: {}\", path))?;\n-        Ok(res)\n+        url_to_file_id(&self.vfs.read().0, url)\n     }\n \n     pub(crate) fn file_id_to_url(&self, id: FileId) -> Url {\n@@ -239,3 +235,9 @@ pub(crate) fn file_id_to_url(vfs: &vfs::Vfs, id: FileId) -> Url {\n     let path = path.as_path().unwrap();\n     url_from_abs_path(&path)\n }\n+\n+pub(crate) fn url_to_file_id(vfs: &vfs::Vfs, url: &Url) -> Result<FileId> {\n+    let path = from_proto::vfs_path(url)?;\n+    let res = vfs.file_id(&path).ok_or_else(|| format!(\"file not found: {}\", path))?;\n+    Ok(res)\n+}"}, {"sha": "8fc816cbd57bcc86052b0ccf8364bbd6c848554e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12831b74af457ddfc06ebeb929e350574e2f35d5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12831b74af457ddfc06ebeb929e350574e2f35d5/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=12831b74af457ddfc06ebeb929e350574e2f35d5", "patch": "@@ -16,7 +16,7 @@ use crate::{\n     config::Config,\n     dispatch::{NotificationDispatcher, RequestDispatcher},\n     from_proto,\n-    global_state::{file_id_to_url, GlobalState, Status},\n+    global_state::{file_id_to_url, url_to_file_id, GlobalState, Status},\n     handlers, lsp_ext,\n     lsp_utils::{apply_document_changes, is_canceled, notification_is, notification_new},\n     Result,\n@@ -200,18 +200,16 @@ impl GlobalState {\n                         &workspace_root,\n                     );\n                     for diag in diagnostics {\n-                        let path = from_proto::vfs_path(&diag.location.uri)?;\n-                        let file_id = match self.vfs.read().0.file_id(&path) {\n-                            Some(file) => FileId(file.0),\n-                            None => {\n-                                log::error!(\n-                                    \"File with cargo diagnostic not found in VFS: {}\",\n-                                    path\n-                                );\n-                                return Ok(());\n+                        match url_to_file_id(&self.vfs.read().0, &diag.location.uri) {\n+                            Ok(file_id) => self.diagnostics.add_check_diagnostic(\n+                                file_id,\n+                                diag.diagnostic,\n+                                diag.fixes,\n+                            ),\n+                            Err(err) => {\n+                                log::error!(\"File with cargo diagnostic not found in VFS: {}\", err);\n                             }\n                         };\n-                        self.diagnostics.add_check_diagnostic(file_id, diag.diagnostic, diag.fixes)\n                     }\n                 }\n "}]}