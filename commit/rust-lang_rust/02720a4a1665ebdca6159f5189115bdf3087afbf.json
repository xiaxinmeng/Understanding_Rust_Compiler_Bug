{"sha": "02720a4a1665ebdca6159f5189115bdf3087afbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyNzIwYTRhMTY2NWViZGNhNjE1OWY1MTg5MTE1YmRmMzA4N2FmYmY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-23T18:13:17Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-11-23T18:21:24Z"}, "message": "DSTify Str + impl Str for &S where S: Str", "tree": {"sha": "61a4cd8dc87c06073073698e8a5885f82148312e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61a4cd8dc87c06073073698e8a5885f82148312e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02720a4a1665ebdca6159f5189115bdf3087afbf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02720a4a1665ebdca6159f5189115bdf3087afbf", "html_url": "https://github.com/rust-lang/rust/commit/02720a4a1665ebdca6159f5189115bdf3087afbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02720a4a1665ebdca6159f5189115bdf3087afbf/comments", "author": null, "committer": null, "parents": [{"sha": "220b99b148559e8996a1dbd279e8ca190bf94b2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/220b99b148559e8996a1dbd279e8ca190bf94b2e", "html_url": "https://github.com/rust-lang/rust/commit/220b99b148559e8996a1dbd279e8ca190bf94b2e"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "bb7710c2acc1251d876bac215f76f804ddee5180", "filename": "src/libcore/str.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02720a4a1665ebdca6159f5189115bdf3087afbf/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02720a4a1665ebdca6159f5189115bdf3087afbf/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=02720a4a1665ebdca6159f5189115bdf3087afbf", "patch": "@@ -1277,14 +1277,19 @@ pub mod traits {\n }\n \n /// Any string that can be represented as a slice\n-pub trait Str {\n+pub trait Str for Sized? {\n     /// Work with `self` as a slice.\n     fn as_slice<'a>(&'a self) -> &'a str;\n }\n \n-impl<'a> Str for &'a str {\n+impl Str for str {\n     #[inline]\n-    fn as_slice<'a>(&'a self) -> &'a str { *self }\n+    fn as_slice<'a>(&'a self) -> &'a str { self }\n+}\n+\n+impl<'a, Sized? S> Str for &'a S where S: Str {\n+    #[inline]\n+    fn as_slice(&self) -> &str { Str::as_slice(*self) }\n }\n \n /// Methods for string slices"}]}