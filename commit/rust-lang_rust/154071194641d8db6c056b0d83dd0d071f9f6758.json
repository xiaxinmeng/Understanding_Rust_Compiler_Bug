{"sha": "154071194641d8db6c056b0d83dd0d071f9f6758", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NDA3MTE5NDY0MWQ4ZGI2YzA1NmIwZDgzZGQwZDA3MWY5ZjY3NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T01:24:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T01:24:05Z"}, "message": "Auto merge of #85270 - ChrisDenton:win-env-case, r=m-ou-se\n\nWhen using `process::Command` on Windows, environment variable names must be case-preserving but case-insensitive\n\nWhen using `Command` to set the environment variables, the key should be compared as uppercase Unicode but when set it should preserve the original case.\n\nFixes #85242", "tree": {"sha": "cda0c37923b0e157c4b53c1b238cc96c6df4019f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cda0c37923b0e157c4b53c1b238cc96c6df4019f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/154071194641d8db6c056b0d83dd0d071f9f6758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/154071194641d8db6c056b0d83dd0d071f9f6758", "html_url": "https://github.com/rust-lang/rust/commit/154071194641d8db6c056b0d83dd0d071f9f6758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/154071194641d8db6c056b0d83dd0d071f9f6758/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34a3a401b4e44f289a4d5bf53da83367cbb6aa7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34a3a401b4e44f289a4d5bf53da83367cbb6aa7", "html_url": "https://github.com/rust-lang/rust/commit/d34a3a401b4e44f289a4d5bf53da83367cbb6aa7"}, {"sha": "a200c01e4fb32179af1cbbc47a1e5ea7a6394e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a200c01e4fb32179af1cbbc47a1e5ea7a6394e9a", "html_url": "https://github.com/rust-lang/rust/commit/a200c01e4fb32179af1cbbc47a1e5ea7a6394e9a"}], "stats": {"total": 156, "additions": 147, "deletions": 9}, "files": [{"sha": "63f9be7b7e350d18d1e0a546868a19fdb974fe80", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/154071194641d8db6c056b0d83dd0d071f9f6758/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154071194641d8db6c056b0d83dd0d071f9f6758/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=154071194641d8db6c056b0d83dd0d071f9f6758", "patch": "@@ -74,6 +74,10 @@ pub type ADDRESS_FAMILY = USHORT;\n pub const TRUE: BOOL = 1;\n pub const FALSE: BOOL = 0;\n \n+pub const CSTR_LESS_THAN: c_int = 1;\n+pub const CSTR_EQUAL: c_int = 2;\n+pub const CSTR_GREATER_THAN: c_int = 3;\n+\n pub const FILE_ATTRIBUTE_READONLY: DWORD = 0x1;\n pub const FILE_ATTRIBUTE_DIRECTORY: DWORD = 0x10;\n pub const FILE_ATTRIBUTE_REPARSE_POINT: DWORD = 0x400;\n@@ -970,6 +974,14 @@ extern \"system\" {\n     pub fn ReleaseSRWLockShared(SRWLock: PSRWLOCK);\n     pub fn TryAcquireSRWLockExclusive(SRWLock: PSRWLOCK) -> BOOLEAN;\n     pub fn TryAcquireSRWLockShared(SRWLock: PSRWLOCK) -> BOOLEAN;\n+\n+    pub fn CompareStringOrdinal(\n+        lpString1: LPCWSTR,\n+        cchCount1: c_int,\n+        lpString2: LPCWSTR,\n+        cchCount2: c_int,\n+        bIgnoreCase: BOOL,\n+    ) -> c_int;\n }\n \n #[link(name = \"ws2_32\")]"}, {"sha": "b082e21ab3bcc893e8f9ad0d9747e338d33a6439", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 74, "deletions": 9, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/154071194641d8db6c056b0d83dd0d071f9f6758/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154071194641d8db6c056b0d83dd0d071f9f6758/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=154071194641d8db6c056b0d83dd0d071f9f6758", "patch": "@@ -4,6 +4,7 @@\n mod tests;\n \n use crate::borrow::Borrow;\n+use crate::cmp;\n use crate::collections::BTreeMap;\n use crate::convert::{TryFrom, TryInto};\n use crate::env;\n@@ -34,32 +35,95 @@ use libc::{c_void, EXIT_FAILURE, EXIT_SUCCESS};\n // Command\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]\n+#[derive(Clone, Debug, Eq)]\n #[doc(hidden)]\n-pub struct EnvKey(OsString);\n+pub struct EnvKey {\n+    os_string: OsString,\n+    // This stores a UTF-16 encoded string to workaround the mismatch between\n+    // Rust's OsString (WTF-8) and the Windows API string type (UTF-16).\n+    // Normally converting on every API call is acceptable but here\n+    // `c::CompareStringOrdinal` will be called for every use of `==`.\n+    utf16: Vec<u16>,\n+}\n+\n+// Comparing Windows environment variable keys[1] are behaviourally the\n+// composition of two operations[2]:\n+//\n+// 1. Case-fold both strings. This is done using a language-independent\n+// uppercase mapping that's unique to Windows (albeit based on data from an\n+// older Unicode spec). It only operates on individual UTF-16 code units so\n+// surrogates are left unchanged. This uppercase mapping can potentially change\n+// between Windows versions.\n+//\n+// 2. Perform an ordinal comparison of the strings. A comparison using ordinal\n+// is just a comparison based on the numerical value of each UTF-16 code unit[3].\n+//\n+// Because the case-folding mapping is unique to Windows and not guaranteed to\n+// be stable, we ask the OS to compare the strings for us. This is done by\n+// calling `CompareStringOrdinal`[4] with `bIgnoreCase` set to `TRUE`.\n+//\n+// [1] https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings#choosing-a-stringcomparison-member-for-your-method-call\n+// [2] https://docs.microsoft.com/en-us/dotnet/standard/base-types/best-practices-strings#stringtoupper-and-stringtolower\n+// [3] https://docs.microsoft.com/en-us/dotnet/api/system.stringcomparison?view=net-5.0#System_StringComparison_Ordinal\n+// [4] https://docs.microsoft.com/en-us/windows/win32/api/stringapiset/nf-stringapiset-comparestringordinal\n+impl Ord for EnvKey {\n+    fn cmp(&self, other: &Self) -> cmp::Ordering {\n+        unsafe {\n+            let result = c::CompareStringOrdinal(\n+                self.utf16.as_ptr(),\n+                self.utf16.len() as _,\n+                other.utf16.as_ptr(),\n+                other.utf16.len() as _,\n+                c::TRUE,\n+            );\n+            match result {\n+                c::CSTR_LESS_THAN => cmp::Ordering::Less,\n+                c::CSTR_EQUAL => cmp::Ordering::Equal,\n+                c::CSTR_GREATER_THAN => cmp::Ordering::Greater,\n+                // `CompareStringOrdinal` should never fail so long as the parameters are correct.\n+                _ => panic!(\"comparing environment keys failed: {}\", Error::last_os_error()),\n+            }\n+        }\n+    }\n+}\n+impl PartialOrd for EnvKey {\n+    fn partial_cmp(&self, other: &Self) -> Option<cmp::Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+impl PartialEq for EnvKey {\n+    fn eq(&self, other: &Self) -> bool {\n+        if self.utf16.len() != other.utf16.len() {\n+            false\n+        } else {\n+            self.cmp(other) == cmp::Ordering::Equal\n+        }\n+    }\n+}\n \n+// Environment variable keys should preserve their original case even though\n+// they are compared using a caseless string mapping.\n impl From<OsString> for EnvKey {\n-    fn from(mut k: OsString) -> Self {\n-        k.make_ascii_uppercase();\n-        EnvKey(k)\n+    fn from(k: OsString) -> Self {\n+        EnvKey { utf16: k.encode_wide().collect(), os_string: k }\n     }\n }\n \n impl From<EnvKey> for OsString {\n     fn from(k: EnvKey) -> Self {\n-        k.0\n+        k.os_string\n     }\n }\n \n impl Borrow<OsStr> for EnvKey {\n     fn borrow(&self) -> &OsStr {\n-        &self.0\n+        &self.os_string\n     }\n }\n \n impl AsRef<OsStr> for EnvKey {\n     fn as_ref(&self) -> &OsStr {\n-        &self.0\n+        &self.os_string\n     }\n }\n \n@@ -537,7 +601,8 @@ fn make_envp(maybe_env: Option<BTreeMap<EnvKey, OsString>>) -> io::Result<(*mut\n         }\n \n         for (k, v) in env {\n-            blk.extend(ensure_no_nuls(k.0)?.encode_wide());\n+            ensure_no_nuls(k.os_string)?;\n+            blk.extend(k.utf16);\n             blk.push('=' as u16);\n             blk.extend(ensure_no_nuls(v)?.encode_wide());\n             blk.push(0);"}, {"sha": "ff3f9131cc889b3303b9bc6e5dbd552ac433084b", "filename": "library/std/src/sys/windows/process/tests.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/154071194641d8db6c056b0d83dd0d071f9f6758/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154071194641d8db6c056b0d83dd0d071f9f6758/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess%2Ftests.rs?ref=154071194641d8db6c056b0d83dd0d071f9f6758", "patch": "@@ -1,5 +1,7 @@\n use super::make_command_line;\n+use crate::env;\n use crate::ffi::{OsStr, OsString};\n+use crate::process::Command;\n \n #[test]\n fn test_make_command_line() {\n@@ -41,3 +43,62 @@ fn test_make_command_line() {\n         \"\\\"\\u{03c0}\\u{042f}\\u{97f3}\\u{00e6}\\u{221e}\\\"\"\n     );\n }\n+\n+// On Windows, environment args are case preserving but comparisons are case-insensitive.\n+// See: #85242\n+#[test]\n+fn windows_env_unicode_case() {\n+    let test_cases = [\n+        (\"\u00e4\", \"\u00c4\"),\n+        (\"\u00df\", \"SS\"),\n+        (\"\u00c4\", \"\u00d6\"),\n+        (\"\u00c4\", \"\u00d6\"),\n+        (\"I\", \"\u0130\"),\n+        (\"I\", \"i\"),\n+        (\"I\", \"\u0131\"),\n+        (\"i\", \"I\"),\n+        (\"i\", \"\u0130\"),\n+        (\"i\", \"\u0131\"),\n+        (\"\u0130\", \"I\"),\n+        (\"\u0130\", \"i\"),\n+        (\"\u0130\", \"\u0131\"),\n+        (\"\u0131\", \"I\"),\n+        (\"\u0131\", \"i\"),\n+        (\"\u0131\", \"\u0130\"),\n+        (\"\u00e4\", \"\u00c4\"),\n+        (\"\u00df\", \"SS\"),\n+        (\"\u00c4\", \"\u00d6\"),\n+        (\"\u00c4\", \"\u00d6\"),\n+        (\"I\", \"\u0130\"),\n+        (\"I\", \"i\"),\n+        (\"I\", \"\u0131\"),\n+        (\"i\", \"I\"),\n+        (\"i\", \"\u0130\"),\n+        (\"i\", \"\u0131\"),\n+        (\"\u0130\", \"I\"),\n+        (\"\u0130\", \"i\"),\n+        (\"\u0130\", \"\u0131\"),\n+        (\"\u0131\", \"I\"),\n+        (\"\u0131\", \"i\"),\n+        (\"\u0131\", \"\u0130\"),\n+    ];\n+    // Test that `cmd.env` matches `env::set_var` when setting two strings that\n+    // may (or may not) be case-folded when compared.\n+    for (a, b) in test_cases.iter() {\n+        let mut cmd = Command::new(\"cmd\");\n+        cmd.env(a, \"1\");\n+        cmd.env(b, \"2\");\n+        env::set_var(a, \"1\");\n+        env::set_var(b, \"2\");\n+\n+        for (key, value) in cmd.get_envs() {\n+            assert_eq!(\n+                env::var(key).ok(),\n+                value.map(|s| s.to_string_lossy().into_owned()),\n+                \"command environment mismatch: {} {}\",\n+                a,\n+                b\n+            );\n+        }\n+    }\n+}"}]}