{"sha": "0a238288d343fc6323b37aad8678b3ea701fb7e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMjM4Mjg4ZDM0M2ZjNjMyM2IzN2FhZDg2NzhiM2VhNzAxZmI3ZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-18T14:21:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-18T14:21:58Z"}, "message": "auto merge of #8555 : chris-morgan/rust/time-clone, r=huonw\n\nI need `Clone` for `Tm` for my latest work on [rust-http](https://github.com/chris-morgan/rust-http) (static typing for headers, and headers like `Date` are a time), so here it is.\r\n\r\n@huonw recommended deriving DeepClone while I was at it.\r\n\r\nI also had to implement `DeepClone` for `~str` to get a derived implementation of `DeepClone` for `Tm`; I did `@str` while I was at it, for consistency.", "tree": {"sha": "24572525dc26f39ed021633da2756f748c00cafd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24572525dc26f39ed021633da2756f748c00cafd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a238288d343fc6323b37aad8678b3ea701fb7e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a238288d343fc6323b37aad8678b3ea701fb7e3", "html_url": "https://github.com/rust-lang/rust/commit/0a238288d343fc6323b37aad8678b3ea701fb7e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a238288d343fc6323b37aad8678b3ea701fb7e3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bc685842802edfcd2918f911268f8e345cf3c26", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bc685842802edfcd2918f911268f8e345cf3c26", "html_url": "https://github.com/rust-lang/rust/commit/3bc685842802edfcd2918f911268f8e345cf3c26"}, {"sha": "1f41140c22dc36f3ab14fbcb04cc67a4c1224bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f41140c22dc36f3ab14fbcb04cc67a4c1224bb5", "html_url": "https://github.com/rust-lang/rust/commit/1f41140c22dc36f3ab14fbcb04cc67a4c1224bb5"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "1e7b52daab3e4142a37d19d0a39cfc132ec1c422", "filename": "src/libextra/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a238288d343fc6323b37aad8678b3ea701fb7e3/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a238288d343fc6323b37aad8678b3ea701fb7e3/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=0a238288d343fc6323b37aad8678b3ea701fb7e3", "patch": "@@ -34,7 +34,7 @@ pub mod rustrt {\n }\n \n /// A record specifying a time value in seconds and nanoseconds.\n-#[deriving(Eq, Encodable, Decodable)]\n+#[deriving(Clone, DeepClone, Eq, Encodable, Decodable)]\n pub struct Timespec { sec: i64, nsec: i32 }\n \n /*\n@@ -100,7 +100,7 @@ pub fn tzset() {\n     }\n }\n \n-#[deriving(Eq, Encodable, Decodable)]\n+#[deriving(Clone, DeepClone, Eq, Encodable, Decodable)]\n pub struct Tm {\n     tm_sec: i32, // seconds after the minute ~[0-60]\n     tm_min: i32, // minutes after the hour ~[0-59]"}, {"sha": "e4d63da3ee9262672dfbd54f2cdafda41e639176", "filename": "src/libstd/str.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a238288d343fc6323b37aad8678b3ea701fb7e3/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a238288d343fc6323b37aad8678b3ea701fb7e3/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=0a238288d343fc6323b37aad8678b3ea701fb7e3", "patch": "@@ -20,7 +20,7 @@ use at_vec;\n use cast;\n use char;\n use char::Char;\n-use clone::Clone;\n+use clone::{Clone, DeepClone};\n use container::{Container, Mutable};\n use iter::Times;\n use iterator::{Iterator, FromIterator, Extendable};\n@@ -2104,13 +2104,27 @@ impl Clone for ~str {\n     }\n }\n \n+impl DeepClone for ~str {\n+    #[inline]\n+    fn deep_clone(&self) -> ~str {\n+        self.to_owned()\n+    }\n+}\n+\n impl Clone for @str {\n     #[inline]\n     fn clone(&self) -> @str {\n         *self\n     }\n }\n \n+impl DeepClone for @str {\n+    #[inline]\n+    fn deep_clone(&self) -> @str {\n+        *self\n+    }\n+}\n+\n impl FromIterator<char> for ~str {\n     #[inline]\n     fn from_iterator<T: Iterator<char>>(iterator: &mut T) -> ~str {"}]}