{"sha": "258d3672f0a99a766705e11890bcd59079edcc7e", "node_id": "C_kwDOAAsO6NoAKDI1OGQzNjcyZjBhOTlhNzY2NzA1ZTExODkwYmNkNTkwNzllZGNjN2U", "commit": {"author": {"name": "Ellen Arteca", "email": "emarteca@google.com", "date": "2022-08-25T20:19:18Z"}, "committer": {"name": "Ellen Arteca", "email": "emarteca@google.com", "date": "2022-08-25T20:19:49Z"}, "message": "Adding support for rustc_serialize encode and decode for Box and Vec that use a custom allocator", "tree": {"sha": "889bacd292f5ceaa79c02b49f330b51c74175b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/889bacd292f5ceaa79c02b49f330b51c74175b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/258d3672f0a99a766705e11890bcd59079edcc7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/258d3672f0a99a766705e11890bcd59079edcc7e", "html_url": "https://github.com/rust-lang/rust/commit/258d3672f0a99a766705e11890bcd59079edcc7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/258d3672f0a99a766705e11890bcd59079edcc7e/comments", "author": null, "committer": null, "parents": [{"sha": "4d45b0745ab227feb9000bc15713ade4b99241ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d45b0745ab227feb9000bc15713ade4b99241ea", "html_url": "https://github.com/rust-lang/rust/commit/4d45b0745ab227feb9000bc15713ade4b99241ea"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "91f4cfaf5acaae528923df6084c4871229d230d5", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/258d3672f0a99a766705e11890bcd59079edcc7e/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/258d3672f0a99a766705e11890bcd59079edcc7e/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=258d3672f0a99a766705e11890bcd59079edcc7e", "patch": "@@ -16,6 +16,7 @@ Core encoding and decoding interfaces.\n #![feature(maybe_uninit_slice)]\n #![feature(let_else)]\n #![feature(new_uninit)]\n+#![feature(allocator_api)]\n #![cfg_attr(test, feature(test))]\n #![allow(rustc::internal)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "751b209f11a3a899614b80a6e20f7d830f646da1", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/258d3672f0a99a766705e11890bcd59079edcc7e/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/258d3672f0a99a766705e11890bcd59079edcc7e/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=258d3672f0a99a766705e11890bcd59079edcc7e", "patch": "@@ -4,6 +4,7 @@\n Core encoding and decoding interfaces.\n */\n \n+use std::alloc::Allocator;\n use std::borrow::Cow;\n use std::cell::{Cell, RefCell};\n use std::marker::PhantomData;\n@@ -229,9 +230,9 @@ impl<D: Decoder, T> Decodable<D> for PhantomData<T> {\n     }\n }\n \n-impl<D: Decoder, T: Decodable<D>> Decodable<D> for Box<[T]> {\n-    fn decode(d: &mut D) -> Box<[T]> {\n-        let v: Vec<T> = Decodable::decode(d);\n+impl<D: Decoder, A: Allocator + Default, T: Decodable<D>> Decodable<D> for Box<[T], A> {\n+    fn decode(d: &mut D) -> Box<[T], A> {\n+        let v: Vec<T, A> = Decodable::decode(d);\n         v.into_boxed_slice()\n     }\n }\n@@ -264,12 +265,13 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for Vec<T> {\n     }\n }\n \n-impl<D: Decoder, T: Decodable<D>> Decodable<D> for Vec<T> {\n-    default fn decode(d: &mut D) -> Vec<T> {\n+impl<D: Decoder, T: Decodable<D>, A: Allocator + Default> Decodable<D> for Vec<T, A> {\n+    default fn decode(d: &mut D) -> Vec<T, A> {\n         let len = d.read_usize();\n+        let allocator = A::default();\n         // SAFETY: we set the capacity in advance, only write elements, and\n         // only set the length at the end once the writing has succeeded.\n-        let mut vec = Vec::with_capacity(len);\n+        let mut vec = Vec::with_capacity_in(len, allocator);\n         unsafe {\n             let ptr: *mut T = vec.as_mut_ptr();\n             for i in 0..len {\n@@ -457,13 +459,15 @@ impl<D: Decoder, T: Decodable<D>> Decodable<D> for Arc<T> {\n     }\n }\n \n-impl<S: Encoder, T: ?Sized + Encodable<S>> Encodable<S> for Box<T> {\n+impl<S: Encoder, T: ?Sized + Encodable<S>, A: Allocator + Default> Encodable<S> for Box<T, A> {\n     fn encode(&self, s: &mut S) {\n-        (**self).encode(s);\n+        (**self).encode(s)\n     }\n }\n-impl<D: Decoder, T: Decodable<D>> Decodable<D> for Box<T> {\n-    fn decode(d: &mut D) -> Box<T> {\n-        Box::new(Decodable::decode(d))\n+\n+impl<D: Decoder, A: Allocator + Default, T: Decodable<D>> Decodable<D> for Box<T, A> {\n+    fn decode(d: &mut D) -> Box<T, A> {\n+        let allocator = A::default();\n+        Box::new_in(Decodable::decode(d), allocator)\n     }\n }"}]}