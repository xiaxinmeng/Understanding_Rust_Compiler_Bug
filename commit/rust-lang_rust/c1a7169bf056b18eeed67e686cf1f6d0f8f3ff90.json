{"sha": "c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYTcxNjliZjA1NmIxOGVlZWQ2N2U2ODZjZjFmNmQwZjhmM2ZmOTA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-14T15:40:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-14T15:40:20Z"}, "message": "Merge #9892\n\n9892: internal: remove a remnant of old editing infra r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d07944416ef46c39e5548f100ec55430d10b5cec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d07944416ef46c39e5548f100ec55430d10b5cec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhF+PkCRBK7hj4Ov3rIwAAK7YIADL9ZtV/biHDq6X8c6dSJV2y\nc+HEOTUFqIlHd8YzEY2wCj65qYTRLPcBtjT10yuZUqpkxGGS41u8pZdTMp2nkaGm\nF4n42C6ERMJWXIclbBa0f8JTGcomqQ5LSTVEaAneve+8Ba4DqX1YVuVewc2ECjUN\nG3HcDXv2arwuH/vk5Cl9rlGBT77SeQhJ8X22SZlN8scEIHwwY9aPSswkZdt+lDSQ\nLiZV/VfItAwBY7xK1jHCwDCSHzO+5micmDxhZbJRscoTkDGJlmHhkWu0ppP52Ytb\nwW7eSSOJP18HpNqDk9a0ahJv3+zEPoFzvQwS1iQJVgp/gCKRZ5ZNBlCRheRpB6U=\n=5Htw\n-----END PGP SIGNATURE-----\n", "payload": "tree d07944416ef46c39e5548f100ec55430d10b5cec\nparent bd2219bd996697bceacb8a2bff8f2f5d3ec93780\nparent a78decc46619a5ab8a19ac69f68ece2a24ff9046\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628955620 +0000\ncommitter GitHub <noreply@github.com> 1628955620 +0000\n\nMerge #9892\n\n9892: internal: remove a remnant of old editing infra r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "html_url": "https://github.com/rust-lang/rust/commit/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2219bd996697bceacb8a2bff8f2f5d3ec93780", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2219bd996697bceacb8a2bff8f2f5d3ec93780", "html_url": "https://github.com/rust-lang/rust/commit/bd2219bd996697bceacb8a2bff8f2f5d3ec93780"}, {"sha": "a78decc46619a5ab8a19ac69f68ece2a24ff9046", "url": "https://api.github.com/repos/rust-lang/rust/commits/a78decc46619a5ab8a19ac69f68ece2a24ff9046", "html_url": "https://github.com/rust-lang/rust/commit/a78decc46619a5ab8a19ac69f68ece2a24ff9046"}], "stats": {"total": 76, "additions": 26, "deletions": 50}, "files": [{"sha": "1b3fa898bb71491abcf95baca074c67136a3b513", "filename": "crates/ide_assists/src/handlers/convert_to_guarded_return.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs?ref=c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "previous_filename": "crates/ide_assists/src/handlers/early_return.rs"}, {"sha": "98a9085a51edf5b9afb3cce995f414ffcbe4ea71", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "patch": "@@ -61,7 +61,7 @@ mod handlers {\n     mod convert_into_to_from;\n     mod convert_iter_for_each_to_for;\n     mod convert_tuple_struct_to_named_struct;\n-    mod early_return;\n+    mod convert_to_guarded_return;\n     mod expand_glob_import;\n     mod extract_function;\n     mod extract_struct_from_enum_variant;\n@@ -126,14 +126,14 @@ mod handlers {\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n             change_visibility::change_visibility,\n-            convert_bool_then::convert_if_to_bool_then,\n             convert_bool_then::convert_bool_then_to_if,\n+            convert_bool_then::convert_if_to_bool_then,\n             convert_comment_block::convert_comment_block,\n             convert_integer_literal::convert_integer_literal,\n             convert_into_to_from::convert_into_to_from,\n             convert_iter_for_each_to_for::convert_iter_for_each_to_for,\n+            convert_to_guarded_return::convert_to_guarded_return,\n             convert_tuple_struct_to_named_struct::convert_tuple_struct_to_named_struct,\n-            early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,\n             extract_type_alias::extract_type_alias,\n@@ -144,19 +144,16 @@ mod handlers {\n             flip_trait_bound::flip_trait_bound,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n-            generate_is_empty_from_len::generate_is_empty_from_len,\n             generate_deref::generate_deref,\n             generate_derive::generate_derive,\n             generate_enum_is_method::generate_enum_is_method,\n             generate_enum_projection_method::generate_enum_as_method,\n             generate_enum_projection_method::generate_enum_try_into_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n-            generate_getter::generate_getter,\n-            generate_getter::generate_getter_mut,\n             generate_impl::generate_impl,\n+            generate_is_empty_from_len::generate_is_empty_from_len,\n             generate_new::generate_new,\n-            generate_setter::generate_setter,\n             infer_function_return_type::infer_function_return_type,\n             inline_call::inline_call,\n             inline_local_variable::inline_local_variable,\n@@ -204,6 +201,10 @@ mod handlers {\n             //\n             extract_variable::extract_variable,\n             extract_function::extract_function,\n+            //\n+            generate_getter::generate_getter,\n+            generate_getter::generate_getter_mut,\n+            generate_setter::generate_setter,\n             // Are you sure you want to add new assist here, and not to the\n             // sorted list above?\n         ]"}, {"sha": "e59fc6ba4fe63a173851fced371da4335dc49fcf", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "patch": "@@ -209,21 +209,22 @@ pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n \n fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     match expr {\n-        ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n-            ast::BinaryOp::CmpOp(op) => {\n-                let rev_op = match op {\n-                    ast::CmpOp::Eq { negated: false } => T![!=],\n-                    ast::CmpOp::Eq { negated: true } => T![==],\n-                    ast::CmpOp::Ord { ordering: ast::Ordering::Less, strict: true } => T![>=],\n-                    ast::CmpOp::Ord { ordering: ast::Ordering::Less, strict: false } => T![>],\n-                    ast::CmpOp::Ord { ordering: ast::Ordering::Greater, strict: true } => T![<=],\n-                    ast::CmpOp::Ord { ordering: ast::Ordering::Greater, strict: false } => T![<],\n-                };\n-                bin.replace_op(rev_op).map(ast::Expr::from)\n-            }\n-            // Parenthesize other expressions before prefixing `!`\n-            _ => Some(make::expr_prefix(T![!], make::expr_paren(expr.clone()))),\n-        },\n+        ast::Expr::BinExpr(bin) => {\n+            let bin = bin.clone_for_update();\n+            let op_token = bin.op_token()?;\n+            let rev_token = match op_token.kind() {\n+                T![==] => T![!=],\n+                T![!=] => T![==],\n+                T![<] => T![>=],\n+                T![<=] => T![>],\n+                T![>] => T![<=],\n+                T![>=] => T![<],\n+                // Parenthesize other expressions before prefixing `!`\n+                _ => return Some(make::expr_prefix(T![!], make::expr_paren(expr.clone()))),\n+            };\n+            ted::replace(op_token, make::token(rev_token));\n+            Some(bin.into())\n+        }\n         ast::Expr::MethodCallExpr(mce) => {\n             let receiver = mce.receiver()?;\n             let method = mce.name_ref()?;"}, {"sha": "af440426a6694e6fdbdf61f5c072bfae7426f845", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "patch": "@@ -1,28 +1,16 @@\n //! This module contains functions for editing syntax trees. As the trees are\n //! immutable, all function here return a fresh copy of the tree, instead of\n //! doing an in-place modification.\n-use std::{\n-    fmt, iter,\n-    ops::{self, RangeInclusive},\n-};\n+use std::{fmt, iter, ops};\n \n use crate::{\n     algo,\n     ast::{self, make, AstNode},\n-    ted, AstToken, NodeOrToken, SyntaxElement, SyntaxKind,\n+    ted, AstToken, NodeOrToken, SyntaxElement,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n     SyntaxNode, SyntaxToken,\n };\n \n-impl ast::BinExpr {\n-    #[must_use]\n-    pub fn replace_op(&self, op: SyntaxKind) -> Option<ast::BinExpr> {\n-        let op_node: SyntaxElement = self.op_details()?.0.into();\n-        let to_insert: Option<SyntaxElement> = Some(make::token(op).into());\n-        Some(self.replace_children(single_node(op_node), to_insert))\n-    }\n-}\n-\n impl ast::UseTree {\n     /// Splits off the given prefix, making it the path component of the use tree, appending the rest of the path to all UseTreeList items.\n     #[must_use]\n@@ -191,15 +179,6 @@ fn prev_tokens(token: SyntaxToken) -> impl Iterator<Item = SyntaxToken> {\n }\n \n pub trait AstNodeEdit: AstNode + Clone + Sized {\n-    #[must_use]\n-    fn replace_children(\n-        &self,\n-        to_replace: RangeInclusive<SyntaxElement>,\n-        to_insert: impl IntoIterator<Item = SyntaxElement>,\n-    ) -> Self {\n-        let new_syntax = algo::replace_children(self.syntax(), to_replace, to_insert);\n-        Self::cast(new_syntax).unwrap()\n-    }\n     fn indent_level(&self) -> IndentLevel {\n         IndentLevel::from_node(self.syntax())\n     }\n@@ -220,11 +199,6 @@ pub trait AstNodeEdit: AstNode + Clone + Sized {\n \n impl<N: AstNode + Clone> AstNodeEdit for N {}\n \n-fn single_node(element: impl Into<SyntaxElement>) -> RangeInclusive<SyntaxElement> {\n-    let element = element.into();\n-    element.clone()..=element\n-}\n-\n #[test]\n fn test_increase_indent() {\n     let arm_list = {"}]}