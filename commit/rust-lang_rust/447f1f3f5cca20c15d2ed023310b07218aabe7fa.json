{"sha": "447f1f3f5cca20c15d2ed023310b07218aabe7fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0N2YxZjNmNWNjYTIwYzE1ZDJlZDAyMzMxMGIwNzIxOGFhYmU3ZmE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-03T09:16:38Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-03T09:16:38Z"}, "message": "Avoid sorting the item_ids array the StableHash impl of hir::Mod.", "tree": {"sha": "7d73938208feee661a44857b18017c7d47015c93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d73938208feee661a44857b18017c7d47015c93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/447f1f3f5cca20c15d2ed023310b07218aabe7fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/447f1f3f5cca20c15d2ed023310b07218aabe7fa", "html_url": "https://github.com/rust-lang/rust/commit/447f1f3f5cca20c15d2ed023310b07218aabe7fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/447f1f3f5cca20c15d2ed023310b07218aabe7fa/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d8d087a3d911ddcd881e452a7e72a8a7121435", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d8d087a3d911ddcd881e452a7e72a8a7121435", "html_url": "https://github.com/rust-lang/rust/commit/79d8d087a3d911ddcd881e452a7e72a8a7121435"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "328cb8225478bdc159c503a1b678203e580d6aaa", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/447f1f3f5cca20c15d2ed023310b07218aabe7fa/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447f1f3f5cca20c15d2ed023310b07218aabe7fa/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=447f1f3f5cca20c15d2ed023310b07218aabe7fa", "patch": "@@ -23,6 +23,7 @@ use rustc_data_structures::indexed_vec::{IndexVec};\n use rustc_data_structures::stable_hasher::StableHasher;\n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use session::CrateDisambiguator;\n+use std::borrow::Borrow;\n use std::fmt::Write;\n use std::hash::Hash;\n use syntax::ast;\n@@ -389,6 +390,13 @@ pub struct DefPathHash(pub Fingerprint);\n \n impl_stable_hash_for!(tuple_struct DefPathHash { fingerprint });\n \n+impl Borrow<Fingerprint> for DefPathHash {\n+    #[inline]\n+    fn borrow(&self) -> &Fingerprint {\n+        &self.0\n+    }\n+}\n+\n impl Definitions {\n     /// Create new empty definition map.\n     pub fn new() -> Definitions {"}, {"sha": "a6e35d78dcb5aaef76b09a3ed1cb7c9f03cd4b76", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/447f1f3f5cca20c15d2ed023310b07218aabe7fa/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447f1f3f5cca20c15d2ed023310b07218aabe7fa/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=447f1f3f5cca20c15d2ed023310b07218aabe7fa", "patch": "@@ -45,6 +45,18 @@ impl Fingerprint {\n         )\n     }\n \n+    // Combines two hashes in an order independent way. Make sure this is what\n+    // you want.\n+    #[inline]\n+    pub fn combine_commutative(self, other: Fingerprint) -> Fingerprint {\n+        let a = (self.1 as u128) << 64 | self.0 as u128;\n+        let b = (other.1 as u128) << 64 | other.0 as u128;\n+\n+        let c = a.wrapping_add(b);\n+\n+        Fingerprint((c >> 64) as u64, c as u64)\n+    }\n+\n     pub fn to_hex(&self) -> String {\n         format!(\"{:x}{:x}\", self.0, self.1)\n     }"}, {"sha": "70905bf9612f206a42ada11976924fdfa02c5bdf", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/447f1f3f5cca20c15d2ed023310b07218aabe7fa/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/447f1f3f5cca20c15d2ed023310b07218aabe7fa/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=447f1f3f5cca20c15d2ed023310b07218aabe7fa", "patch": "@@ -14,7 +14,7 @@\n use hir;\n use hir::map::DefPathHash;\n use hir::def_id::{DefId, LocalDefId, CrateNum, CRATE_DEF_INDEX};\n-use ich::{StableHashingContext, NodeIdHashingMode};\n+use ich::{StableHashingContext, NodeIdHashingMode, Fingerprint};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n use std::mem;\n@@ -767,15 +767,21 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Mod {\n \n         inner_span.hash_stable(hcx, hasher);\n \n-        let mut item_ids: Vec<DefPathHash> = item_ids.iter().map(|id| {\n-            let (def_path_hash, local_id) = id.id.to_stable_hash_key(hcx);\n-            debug_assert_eq!(local_id, hir::ItemLocalId(0));\n-            def_path_hash\n-        }).collect();\n-\n-        item_ids.sort_unstable();\n-\n-        item_ids.hash_stable(hcx, hasher);\n+        // Combining the DefPathHashes directly is faster than feeding them\n+        // into the hasher. Because we use a commutative combine, we also don't\n+        // have to sort the array.\n+        let item_ids_hash = item_ids\n+            .iter()\n+            .map(|id| {\n+                let (def_path_hash, local_id) = id.id.to_stable_hash_key(hcx);\n+                debug_assert_eq!(local_id, hir::ItemLocalId(0));\n+                def_path_hash.0\n+            }).fold(Fingerprint::ZERO, |a, b| {\n+                a.combine_commutative(b)\n+            });\n+\n+        item_ids.len().hash_stable(hcx, hasher);\n+        item_ids_hash.hash_stable(hcx, hasher);\n     }\n }\n "}]}