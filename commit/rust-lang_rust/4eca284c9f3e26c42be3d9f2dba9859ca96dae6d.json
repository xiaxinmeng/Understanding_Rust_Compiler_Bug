{"sha": "4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlY2EyODRjOWYzZTI2YzQyYmUzZDlmMmRiYTk4NTljYTk2ZGFlNmQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-08-30T21:30:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-30T21:30:44Z"}, "message": "Merge pull request #1933 from topecongiro/attributes-on-stmt\n\nFormat and preserve attributes on `ast::Stmt`", "tree": {"sha": "2788f4918c00f9082baffed6ed36f7aa1d52aaa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2788f4918c00f9082baffed6ed36f7aa1d52aaa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "html_url": "https://github.com/rust-lang/rust/commit/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e780532239b391e19418707bbbc8b79c90bbb055", "url": "https://api.github.com/repos/rust-lang/rust/commits/e780532239b391e19418707bbbc8b79c90bbb055", "html_url": "https://github.com/rust-lang/rust/commit/e780532239b391e19418707bbbc8b79c90bbb055"}, {"sha": "52805833694ebe370f570467577afba23f034e34", "url": "https://api.github.com/repos/rust-lang/rust/commits/52805833694ebe370f570467577afba23f034e34", "html_url": "https://github.com/rust-lang/rust/commit/52805833694ebe370f570467577afba23f034e34"}], "stats": {"total": 265, "additions": 140, "deletions": 125}, "files": [{"sha": "f5275942425969f8b4551c4fbbc74445f8dd4605", "filename": "src/expr.rs", "status": "modified", "additions": 25, "deletions": 35, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "patch": "@@ -130,11 +130,10 @@ pub fn format_expr(\n                 ExprType::Statement => {\n                     if is_unsafe_block(block) {\n                         block.rewrite(context, shape)\n-                    } else {\n+                    } else if let rw @ Some(_) = rewrite_empty_block(context, block, shape) {\n                         // Rewrite block without trying to put it in a single line.\n-                        if let rw @ Some(_) = rewrite_empty_block(context, block, shape) {\n-                            return rw;\n-                        }\n+                        rw\n+                    } else {\n                         let prefix = try_opt!(block_prefix(context, block, shape));\n                         rewrite_block_with_visitor(context, &prefix, block, shape)\n                     }\n@@ -181,17 +180,11 @@ pub fn format_expr(\n                 )\n             }\n         }\n-        ast::ExprKind::Yield(ref opt_expr) => {\n-            if let Some(ref expr) = *opt_expr {\n-                rewrite_unary_prefix(context, \"yield \", &**expr, shape)\n-            } else {\n-                wrap_str(\n-                    \"yield\".to_string(),\n-                    context.config.max_width(),\n-                    shape,\n-                )\n-            }\n-        }\n+        ast::ExprKind::Yield(ref opt_expr) => if let Some(ref expr) = *opt_expr {\n+            rewrite_unary_prefix(context, \"yield \", &**expr, shape)\n+        } else {\n+            wrap_str(\"yield\".to_string(), context.config.max_width(), shape)\n+        },\n         ast::ExprKind::Closure(capture, ref fn_decl, ref body, _) => {\n             rewrite_closure(capture, fn_decl, body, expr.span, context, shape)\n         }\n@@ -293,17 +286,17 @@ pub fn format_expr(\n             shape,\n         ),\n         ast::ExprKind::Catch(ref block) => {\n-            if let rewrite @ Some(_) = rewrite_single_line_block(context, \"do catch \", block, shape)\n-            {\n-                return rewrite;\n+            if let rw @ Some(_) = rewrite_single_line_block(context, \"do catch \", block, shape) {\n+                rw\n+            } else {\n+                // 9 = `do catch `\n+                let budget = shape.width.checked_sub(9).unwrap_or(0);\n+                Some(format!(\n+                    \"{}{}\",\n+                    \"do catch \",\n+                    try_opt!(block.rewrite(&context, Shape::legacy(budget, shape.indent)))\n+                ))\n             }\n-            // 9 = `do catch `\n-            let budget = shape.width.checked_sub(9).unwrap_or(0);\n-            Some(format!(\n-                \"{}{}\",\n-                \"do catch \",\n-                try_opt!(block.rewrite(&context, Shape::legacy(budget, shape.indent)))\n-            ))\n         }\n     };\n \n@@ -883,16 +876,13 @@ impl Rewrite for ast::Stmt {\n                     \"\"\n                 };\n \n-                format_expr(\n-                    ex,\n-                    match self.node {\n-                        ast::StmtKind::Expr(_) => ExprType::SubExpression,\n-                        ast::StmtKind::Semi(_) => ExprType::Statement,\n-                        _ => unreachable!(),\n-                    },\n-                    context,\n-                    try_opt!(shape.sub_width(suffix.len())),\n-                ).map(|s| s + suffix)\n+                let expr_type = match self.node {\n+                    ast::StmtKind::Expr(_) => ExprType::SubExpression,\n+                    ast::StmtKind::Semi(_) => ExprType::Statement,\n+                    _ => unreachable!(),\n+                };\n+                let shape = try_opt!(shape.sub_width(suffix.len()));\n+                format_expr(ex, expr_type, context, shape).map(|s| s + suffix)\n             }\n             ast::StmtKind::Mac(..) | ast::StmtKind::Item(..) => None,\n         };"}, {"sha": "afa81693548fa9b53d0e5d7d4f288a66d9daa6c9", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "patch": "@@ -260,7 +260,7 @@ impl<'a> FmtVisitor<'a> {\n     ) {\n         let vis = utils::format_visibility(vis);\n         // 4 = `use `, 1 = `;`\n-        let rw = Shape::indented(self.block_indent, self.config)\n+        let rw = self.shape()\n             .offset_left(vis.len() + 4)\n             .and_then(|shape| shape.sub_width(1))\n             .and_then(|shape| match vp.node {"}, {"sha": "50efea4044e05b873d4e50be866c3408a3edcdcd", "filename": "src/items.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "patch": "@@ -55,7 +55,23 @@ impl Rewrite for ast::Local {\n \n         skip_out_of_file_lines_range!(context, self.span);\n \n-        let mut result = \"let \".to_owned();\n+        if contains_skip(&self.attrs) {\n+            return None;\n+        }\n+\n+        let attrs_str = try_opt!(self.attrs.rewrite(context, shape));\n+        let mut result = if attrs_str.is_empty() {\n+            \"let \".to_owned()\n+        } else {\n+            try_opt!(combine_strs_with_missing_comments(\n+                context,\n+                &attrs_str,\n+                \"let \",\n+                mk_sp(self.attrs.last().map(|a| a.span.hi).unwrap(), self.span.lo),\n+                shape,\n+                false,\n+            ))\n+        };\n \n         // 4 = \"let \".len()\n         let pat_shape = try_opt!(shape.offset_left(4));\n@@ -187,8 +203,7 @@ impl<'a> FmtVisitor<'a> {\n \n \n     fn format_foreign_item(&mut self, item: &ast::ForeignItem) {\n-        let shape = Shape::indented(self.block_indent, self.config);\n-        let rewrite = item.rewrite(&self.get_context(), shape);\n+        let rewrite = item.rewrite(&self.get_context(), self.shape());\n         self.push_rewrite(item.span(), rewrite);\n         self.last_pos = item.span.hi;\n     }\n@@ -312,18 +327,11 @@ impl<'a> FmtVisitor<'a> {\n                                 \"\"\n                             };\n \n-                            format_expr(\n-                                &e,\n-                                ExprType::Statement,\n-                                &self.get_context(),\n-                                Shape::indented(self.block_indent, self.config),\n-                            ).map(|s| s + suffix)\n+                            format_expr(&e, ExprType::Statement, &self.get_context(), self.shape())\n+                                .map(|s| s + suffix)\n                                 .or_else(|| Some(self.snippet(e.span)))\n                         }\n-                        None => stmt.rewrite(\n-                            &self.get_context(),\n-                            Shape::indented(self.block_indent, self.config),\n-                        ),\n+                        None => stmt.rewrite(&self.get_context(), self.shape()),\n                     }\n                 } else {\n                     None\n@@ -421,9 +429,7 @@ impl<'a> FmtVisitor<'a> {\n             false,\n         );\n \n-        let shape = Shape::indented(self.block_indent, self.config)\n-            .sub_width(2)\n-            .unwrap();\n+        let shape = self.shape().sub_width(2).unwrap();\n         let fmt = ListFormatting {\n             tactic: DefinitiveListTactic::Vertical,\n             separator: \",\",\n@@ -451,7 +457,7 @@ impl<'a> FmtVisitor<'a> {\n \n         let context = self.get_context();\n         let indent = self.block_indent;\n-        let shape = Shape::indented(indent, self.config);\n+        let shape = self.shape();\n         let attrs_str = try_opt!(field.node.attrs.rewrite(&context, shape));\n         let lo = field\n             .node"}, {"sha": "c45110ea06b6156c6032e880faec00764f9c1cb8", "filename": "src/lib.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "patch": "@@ -91,32 +91,46 @@ macro_rules! span_with_attrs_lo_hi {\n         }\n     }\n }\n+\n macro_rules! span_with_attrs {\n     ($this:ident) => {\n         span_with_attrs_lo_hi!($this, $this.span.lo, $this.span.hi)\n     }\n }\n \n-impl Spanned for ast::Expr {\n-    fn span(&self) -> Span {\n-        span_with_attrs!(self)\n+macro_rules! implement_spanned {\n+    ($this:ty) => {\n+        impl Spanned for $this {\n+            fn span(&self) -> Span {\n+                span_with_attrs!(self)\n+            }\n+        }\n     }\n }\n \n-impl Spanned for ast::Item {\n-    fn span(&self) -> Span {\n-        span_with_attrs!(self)\n-    }\n-}\n+// Implement `Spanned` for structs with `attrs` field.\n+implement_spanned!(ast::Expr);\n+implement_spanned!(ast::Field);\n+implement_spanned!(ast::ForeignItem);\n+implement_spanned!(ast::Item);\n+implement_spanned!(ast::Local);\n \n impl Spanned for ast::Stmt {\n     fn span(&self) -> Span {\n         match self.node {\n-            // Cover attributes\n+            ast::StmtKind::Local(ref local) => mk_sp(local.span().lo, self.span.hi),\n+            ast::StmtKind::Item(ref item) => mk_sp(item.span().lo, self.span.hi),\n             ast::StmtKind::Expr(ref expr) | ast::StmtKind::Semi(ref expr) => {\n                 mk_sp(expr.span().lo, self.span.hi)\n             }\n-            _ => self.span,\n+            ast::StmtKind::Mac(ref mac) => {\n+                let (_, _, ref attrs) = **mac;\n+                if attrs.is_empty() {\n+                    self.span\n+                } else {\n+                    mk_sp(attrs[0].span.lo, self.span.hi)\n+                }\n+            }\n         }\n     }\n }\n@@ -155,12 +169,6 @@ impl Spanned for ast::StructField {\n     }\n }\n \n-impl Spanned for ast::Field {\n-    fn span(&self) -> Span {\n-        span_with_attrs!(self)\n-    }\n-}\n-\n impl Spanned for ast::WherePredicate {\n     fn span(&self) -> Span {\n         match *self {\n@@ -208,12 +216,6 @@ impl Spanned for ast::TyParamBound {\n     }\n }\n \n-impl Spanned for ast::ForeignItem {\n-    fn span(&self) -> Span {\n-        span_with_attrs!(self)\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub struct Indent {\n     // Width of the block indent, in characters. Must be a multiple of"}, {"sha": "b4c4bf3553f6dde6c8b1344c35daa69302403c36", "filename": "src/visitor.rs", "status": "modified", "additions": 23, "deletions": 50, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "patch": "@@ -30,7 +30,7 @@ use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, Sepa\n use macros::{rewrite_macro, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{self, contains_skip, mk_sp};\n+use utils::{self, contains_skip, inner_attributes, mk_sp};\n \n fn is_use_item(item: &ast::Item) -> bool {\n     match item.node {\n@@ -58,6 +58,10 @@ pub struct FmtVisitor<'a> {\n }\n \n impl<'a> FmtVisitor<'a> {\n+    pub fn shape(&self) -> Shape {\n+        Shape::indented(self.block_indent, self.config)\n+    }\n+\n     fn visit_stmt(&mut self, stmt: &ast::Stmt) {\n         debug!(\n             \"visit_stmt: {:?} {:?}\",\n@@ -69,47 +73,23 @@ impl<'a> FmtVisitor<'a> {\n             ast::StmtKind::Item(ref item) => {\n                 self.visit_item(item);\n             }\n-            ast::StmtKind::Local(ref local) => {\n-                let rewrite = if contains_skip(&local.attrs) {\n-                    None\n-                } else {\n-                    stmt.rewrite(\n-                        &self.get_context(),\n-                        Shape::indented(self.block_indent, self.config),\n-                    )\n-                };\n-                self.push_rewrite(stmt.span, rewrite);\n+            ast::StmtKind::Local(..) => {\n+                let rewrite = stmt.rewrite(&self.get_context(), self.shape());\n+                self.push_rewrite(stmt.span(), rewrite);\n             }\n             ast::StmtKind::Expr(ref expr) => {\n-                let rewrite = format_expr(\n-                    expr,\n-                    ExprType::Statement,\n-                    &self.get_context(),\n-                    Shape::indented(self.block_indent, self.config),\n-                );\n-                let span = if expr.attrs.is_empty() {\n-                    stmt.span\n-                } else {\n-                    mk_sp(expr.span().lo, stmt.span.hi)\n-                };\n-                self.push_rewrite(span, rewrite)\n+                let rewrite =\n+                    format_expr(expr, ExprType::Statement, &self.get_context(), self.shape());\n+                self.push_rewrite(stmt.span(), rewrite)\n             }\n-            ast::StmtKind::Semi(ref expr) => {\n-                let rewrite = stmt.rewrite(\n-                    &self.get_context(),\n-                    Shape::indented(self.block_indent, self.config),\n-                );\n-                let span = if expr.attrs.is_empty() {\n-                    stmt.span\n-                } else {\n-                    mk_sp(expr.span().lo, stmt.span.hi)\n-                };\n-                self.push_rewrite(span, rewrite)\n+            ast::StmtKind::Semi(..) => {\n+                let rewrite = stmt.rewrite(&self.get_context(), self.shape());\n+                self.push_rewrite(stmt.span(), rewrite)\n             }\n             ast::StmtKind::Mac(ref mac) => {\n                 let (ref mac, _macro_style, ref attrs) = **mac;\n-                if contains_skip(attrs) {\n-                    self.push_rewrite(mac.span, None);\n+                if self.visit_attrs(attrs, ast::AttrStyle::Outer) {\n+                    self.push_rewrite(stmt.span(), None);\n                 } else {\n                     self.visit_mac(mac, None, MacroPosition::Statement);\n                 }\n@@ -138,9 +118,7 @@ impl<'a> FmtVisitor<'a> {\n             if let Some(first_stmt) = b.stmts.first() {\n                 let attr_lo = inner_attrs\n                     .and_then(|attrs| {\n-                        utils::inner_attributes(attrs)\n-                            .first()\n-                            .map(|attr| attr.span.lo)\n+                        inner_attributes(attrs).first().map(|attr| attr.span.lo)\n                     })\n                     .or_else(|| {\n                         // Attributes for an item in a statement position\n@@ -218,7 +196,7 @@ impl<'a> FmtVisitor<'a> {\n         let mut unindent_comment = self.is_if_else_block && !b.stmts.is_empty();\n         if unindent_comment {\n             let end_pos = source!(self, b.span).hi - brace_compensation - remove_len;\n-            let snippet = self.get_context().snippet(mk_sp(self.last_pos, end_pos));\n+            let snippet = self.snippet(mk_sp(self.last_pos, end_pos));\n             unindent_comment = snippet.contains(\"//\") || snippet.contains(\"/*\");\n         }\n         // FIXME: we should compress any newlines here to just one\n@@ -336,7 +314,7 @@ impl<'a> FmtVisitor<'a> {\n                         self.push_rewrite(item.span, None);\n                         return;\n                     }\n-                } else if utils::contains_skip(&item.attrs) {\n+                } else if contains_skip(&item.attrs) {\n                     // Module is not inline, but should be skipped.\n                     return;\n                 } else {\n@@ -371,7 +349,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n             ast::ItemKind::Impl(..) => {\n                 self.format_missing_with_indent(source!(self, item.span).lo);\n-                let snippet = self.get_context().snippet(item.span);\n+                let snippet = self.snippet(item.span);\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n                     .map(|x| (BytePos(x as u32)) + source!(self, item.span).lo);\n@@ -635,9 +613,7 @@ impl<'a> FmtVisitor<'a> {\n         skip_out_of_file_lines_range_visitor!(self, mac.span);\n \n         // 1 = ;\n-        let shape = Shape::indented(self.block_indent, self.config)\n-            .sub_width(1)\n-            .unwrap();\n+        let shape = self.shape().sub_width(1).unwrap();\n         let rewrite = rewrite_macro(mac, ident, &self.get_context(), shape, pos);\n         self.push_rewrite(mac.span, rewrite);\n     }\n@@ -677,7 +653,7 @@ impl<'a> FmtVisitor<'a> {\n \n     // Returns true if we should skip the following item.\n     pub fn visit_attrs(&mut self, attrs: &[ast::Attribute], style: ast::AttrStyle) -> bool {\n-        if utils::contains_skip(attrs) {\n+        if contains_skip(attrs) {\n             return true;\n         }\n \n@@ -686,10 +662,7 @@ impl<'a> FmtVisitor<'a> {\n             return false;\n         }\n \n-        let rewrite = attrs.rewrite(\n-            &self.get_context(),\n-            Shape::indented(self.block_indent, self.config),\n-        );\n+        let rewrite = attrs.rewrite(&self.get_context(), self.shape());\n         let span = mk_sp(attrs[0].span.lo, attrs[attrs.len() - 1].span.hi);\n         self.push_rewrite(span, rewrite);\n "}, {"sha": "4d23d8b79d11a898d8af470f97b4d4fb81e38053", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "patch": "@@ -124,3 +124,25 @@ impl InnerAttributes() {\n mod InnerAttributes {\n     #![ this_is_an_inner_attribute ( foo ) ]\n }\n+\n+fn attributes_on_statements() {\n+    // Local\n+    # [ attr ( on ( local ) ) ]\n+    let x = 3;\n+\n+    // Item\n+    # [ attr ( on ( item ) ) ]\n+    use foo;\n+\n+    // Expr\n+    # [ attr ( on ( expr ) ) ]\n+    {}\n+\n+    // Semi\n+    # [ attr ( on ( semi ) ) ]\n+    foo();\n+\n+    // Mac\n+    # [ attr ( on ( mac ) ) ]\n+    foo!();\n+}"}, {"sha": "467d168ef4f24b5299bb16babdef7458afaf6370", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eca284c9f3e26c42be3d9f2dba9859ca96dae6d/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=4eca284c9f3e26c42be3d9f2dba9859ca96dae6d", "patch": "@@ -124,3 +124,25 @@ impl InnerAttributes() {\n mod InnerAttributes {\n     #![this_is_an_inner_attribute(foo)]\n }\n+\n+fn attributes_on_statements() {\n+    // Local\n+    #[attr(on(local))]\n+    let x = 3;\n+\n+    // Item\n+    #[attr(on(item))]\n+    use foo;\n+\n+    // Expr\n+    #[attr(on(expr))]\n+    {}\n+\n+    // Semi\n+    #[attr(on(semi))]\n+    foo();\n+\n+    // Mac\n+    #[attr(on(mac))]\n+    foo!();\n+}"}]}