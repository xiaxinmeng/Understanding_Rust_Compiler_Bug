{"sha": "55a90f592820572d08dca3475aa6fb3cc190fc29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YTkwZjU5MjgyMDU3MmQwOGRjYTM0NzVhYTZmYjNjYzE5MGZjMjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-30T23:32:56Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-02T22:16:07Z"}, "message": "libsyntax: De-`@mut` `Parser::buffer_start` and `Parser::buffer_end`", "tree": {"sha": "fcc2125ddb8b18b64c3146e633b445da33c1751e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcc2125ddb8b18b64c3146e633b445da33c1751e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55a90f592820572d08dca3475aa6fb3cc190fc29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55a90f592820572d08dca3475aa6fb3cc190fc29", "html_url": "https://github.com/rust-lang/rust/commit/55a90f592820572d08dca3475aa6fb3cc190fc29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55a90f592820572d08dca3475aa6fb3cc190fc29/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c2c670d8fe4e5d0ce0153c6473069f25e01f7fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c2c670d8fe4e5d0ce0153c6473069f25e01f7fa", "html_url": "https://github.com/rust-lang/rust/commit/5c2c670d8fe4e5d0ce0153c6473069f25e01f7fa"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "531823e4da003767d38e915d37cbfbc92df2d343", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/55a90f592820572d08dca3475aa6fb3cc190fc29/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55a90f592820572d08dca3475aa6fb3cc190fc29/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=55a90f592820572d08dca3475aa6fb3cc190fc29", "patch": "@@ -311,8 +311,8 @@ pub fn Parser(sess: @mut ParseSess, cfg: ast::CrateConfig, rdr: @mut reader)\n             placeholder.clone(),\n             placeholder.clone(),\n         ],\n-        buffer_start: @mut 0,\n-        buffer_end: @mut 0,\n+        buffer_start: 0,\n+        buffer_end: 0,\n         tokens_consumed: @mut 0,\n         restriction: @mut UNRESTRICTED,\n         quote_depth: 0,\n@@ -336,8 +336,8 @@ pub struct Parser {\n     // the previous token or None (only stashed sometimes).\n     last_token: Option<~token::Token>,\n     buffer: [TokenAndSpan, ..4],\n-    buffer_start: @mut int,\n-    buffer_end: @mut int,\n+    buffer_start: int,\n+    buffer_end: int,\n     tokens_consumed: @mut uint,\n     restriction: @mut restriction,\n     quote_depth: uint, // not (yet) related to the quasiquoter\n@@ -733,13 +733,13 @@ impl Parser {\n         } else {\n             None\n         };\n-        let next = if *self.buffer_start == *self.buffer_end {\n+        let next = if self.buffer_start == self.buffer_end {\n             self.reader.next_token()\n         } else {\n             // Avoid token copies with `util::replace`.\n-            let buffer_start = *self.buffer_start as uint;\n+            let buffer_start = self.buffer_start as uint;\n             let next_index = (buffer_start + 1) & 3 as uint;\n-            *self.buffer_start = next_index as int;\n+            self.buffer_start = next_index as int;\n \n             let placeholder = TokenAndSpan {\n                 tok: token::UNDERSCORE,\n@@ -768,19 +768,19 @@ impl Parser {\n         self.span = mk_sp(lo, hi);\n     }\n     pub fn buffer_length(&mut self) -> int {\n-        if *self.buffer_start <= *self.buffer_end {\n-            return *self.buffer_end - *self.buffer_start;\n+        if self.buffer_start <= self.buffer_end {\n+            return self.buffer_end - self.buffer_start;\n         }\n-        return (4 - *self.buffer_start) + *self.buffer_end;\n+        return (4 - self.buffer_start) + self.buffer_end;\n     }\n     pub fn look_ahead<R>(&mut self, distance: uint, f: |&token::Token| -> R)\n                       -> R {\n         let dist = distance as int;\n         while self.buffer_length() < dist {\n-            self.buffer[*self.buffer_end] = self.reader.next_token();\n-            *self.buffer_end = (*self.buffer_end + 1) & 3;\n+            self.buffer[self.buffer_end] = self.reader.next_token();\n+            self.buffer_end = (self.buffer_end + 1) & 3;\n         }\n-        f(&self.buffer[(*self.buffer_start + dist - 1) & 3].tok)\n+        f(&self.buffer[(self.buffer_start + dist - 1) & 3].tok)\n     }\n     pub fn fatal(&mut self, m: &str) -> ! {\n         self.sess.span_diagnostic.span_fatal(self.span, m)"}]}