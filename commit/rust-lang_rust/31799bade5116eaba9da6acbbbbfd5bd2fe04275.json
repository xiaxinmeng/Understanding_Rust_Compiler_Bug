{"sha": "31799bade5116eaba9da6acbbbbfd5bd2fe04275", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNzk5YmFkZTUxMTZlYWJhOWRhNmFjYmJiYmZkNWJkMmZlMDQyNzU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-14T00:30:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-14T00:30:44Z"}, "message": "Rollup merge of #77829 - gburgessiv:unused-features-var, r=alexcrichton\n\nbootstrap: only use compiler-builtins-c if they exist\n\nThe assignment of `features` above was added in rust-lang#60981, but\nnever used. Presumably the intent was to replace the string literal here\nwith it.\n\nWhile I'm in the area, `compiler_builtins_c_feature` doesn't need to be\na `String`.\n\nI'm not entirely sure of a great way to locally test this -- `./x.py test`\npassed on my machine, but \ud83e\udd37\u200d\u2642\ufe0f.\n\nr? @alexcrichton", "tree": {"sha": "48e9555753605c8906e50b3c69eb7fe414ac47a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48e9555753605c8906e50b3c69eb7fe414ac47a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31799bade5116eaba9da6acbbbbfd5bd2fe04275", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfhka0CRBK7hj4Ov3rIwAAdHIIAJJf7W8eDViqmxnN0AHrVq/1\n5EcefhDN5ZfqDOkqMC1cI85Kz+E8w4e75ERrPzqMtD+EOfOfDlhXJSG/7Lv/BAm9\nXzYlohd5ph4dc5HVti75IM2569JRSzcG6wB9+gtf6OKYfh9pGvED3V5AE7z9fwR1\nRmmwmpQJHUo646fx/5l8T7E5WOBVssxue7AX2V+aupvBVDxnBj8/GSJ71LaV0eRP\n/I56vk5ch1GZHscE7vy74EazPusCpFvPB4+ZJqJdlUUcVCk8AMuzOhV4c5jQHl6C\nB38Y7P64mrpHqFuuG/JOsahp3RroAzokE2WOCZm3IoGzNsDn0fSKgIHGF3MM96w=\n=2Ib5\n-----END PGP SIGNATURE-----\n", "payload": "tree 48e9555753605c8906e50b3c69eb7fe414ac47a9\nparent 41146c142041d631c24bf77d8ae00e73aebea9d4\nparent ca5478a5dffd322c9b371b44af9b4ea963a0ee47\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602635444 +0200\ncommitter GitHub <noreply@github.com> 1602635444 +0200\n\nRollup merge of #77829 - gburgessiv:unused-features-var, r=alexcrichton\n\nbootstrap: only use compiler-builtins-c if they exist\n\nThe assignment of `features` above was added in rust-lang#60981, but\nnever used. Presumably the intent was to replace the string literal here\nwith it.\n\nWhile I'm in the area, `compiler_builtins_c_feature` doesn't need to be\na `String`.\n\nI'm not entirely sure of a great way to locally test this -- `./x.py test`\npassed on my machine, but \ud83e\udd37\u200d\u2642\ufe0f.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31799bade5116eaba9da6acbbbbfd5bd2fe04275", "html_url": "https://github.com/rust-lang/rust/commit/31799bade5116eaba9da6acbbbbfd5bd2fe04275", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31799bade5116eaba9da6acbbbbfd5bd2fe04275/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41146c142041d631c24bf77d8ae00e73aebea9d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/41146c142041d631c24bf77d8ae00e73aebea9d4", "html_url": "https://github.com/rust-lang/rust/commit/41146c142041d631c24bf77d8ae00e73aebea9d4"}, {"sha": "ca5478a5dffd322c9b371b44af9b4ea963a0ee47", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca5478a5dffd322c9b371b44af9b4ea963a0ee47", "html_url": "https://github.com/rust-lang/rust/commit/ca5478a5dffd322c9b371b44af9b4ea963a0ee47"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "5215ab3dd4f9bbe077f9013ddb8e7967aa31a25e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/31799bade5116eaba9da6acbbbbfd5bd2fe04275/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31799bade5116eaba9da6acbbbbfd5bd2fe04275/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=31799bade5116eaba9da6acbbbbfd5bd2fe04275", "patch": "@@ -234,25 +234,25 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n         // Note that `libprofiler_builtins/build.rs` also computes this so if\n         // you're changing something here please also change that.\n         cargo.env(\"RUST_COMPILER_RT_ROOT\", &compiler_builtins_root);\n-        \" compiler-builtins-c\".to_string()\n+        \" compiler-builtins-c\"\n     } else {\n-        String::new()\n+        \"\"\n     };\n \n     if builder.no_std(target) == Some(true) {\n         let mut features = \"compiler-builtins-mem\".to_string();\n-        features.push_str(&compiler_builtins_c_feature);\n+        features.push_str(compiler_builtins_c_feature);\n \n         // for no-std targets we only compile a few no_std crates\n         cargo\n             .args(&[\"-p\", \"alloc\"])\n             .arg(\"--manifest-path\")\n             .arg(builder.src.join(\"library/alloc/Cargo.toml\"))\n             .arg(\"--features\")\n-            .arg(\"compiler-builtins-mem compiler-builtins-c\");\n+            .arg(features);\n     } else {\n         let mut features = builder.std_features();\n-        features.push_str(&compiler_builtins_c_feature);\n+        features.push_str(compiler_builtins_c_feature);\n \n         cargo\n             .arg(\"--features\")"}]}