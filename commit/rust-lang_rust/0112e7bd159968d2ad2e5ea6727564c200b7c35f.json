{"sha": "0112e7bd159968d2ad2e5ea6727564c200b7c35f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMTJlN2JkMTU5OTY4ZDJhZDJlNWVhNjcyNzU2NGMyMDBiN2MzNWY=", "commit": {"author": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-08-24T15:34:04Z"}, "committer": {"name": "William Throwe", "email": "wtt6@cornell.edu", "date": "2015-08-25T00:28:24Z"}, "message": "Move main removal to its own pass in --test mode\n\nThis handles the case where the #[main] function is buried deeper in\nthe ast than we search for #[test] functions.  I'm not sure why one\nwould want to do that, but since it works in standard compilation it\nshould also work for tests.", "tree": {"sha": "c136db6ea37019146a5a0d3a8b7d16986ec29a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c136db6ea37019146a5a0d3a8b7d16986ec29a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0112e7bd159968d2ad2e5ea6727564c200b7c35f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0112e7bd159968d2ad2e5ea6727564c200b7c35f", "html_url": "https://github.com/rust-lang/rust/commit/0112e7bd159968d2ad2e5ea6727564c200b7c35f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0112e7bd159968d2ad2e5ea6727564c200b7c35f/comments", "author": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wthrowe", "id": 867117, "node_id": "MDQ6VXNlcjg2NzExNw==", "avatar_url": "https://avatars.githubusercontent.com/u/867117?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wthrowe", "html_url": "https://github.com/wthrowe", "followers_url": "https://api.github.com/users/wthrowe/followers", "following_url": "https://api.github.com/users/wthrowe/following{/other_user}", "gists_url": "https://api.github.com/users/wthrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/wthrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wthrowe/subscriptions", "organizations_url": "https://api.github.com/users/wthrowe/orgs", "repos_url": "https://api.github.com/users/wthrowe/repos", "events_url": "https://api.github.com/users/wthrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/wthrowe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15d6837a16d727a3d37a703eaedf48e62c260290", "url": "https://api.github.com/repos/rust-lang/rust/commits/15d6837a16d727a3d37a703eaedf48e62c260290", "html_url": "https://github.com/rust-lang/rust/commit/15d6837a16d727a3d37a703eaedf48e62c260290"}], "stats": {"total": 119, "additions": 80, "deletions": 39}, "files": [{"sha": "9975e25f4930d57b00c1dff165d993e7319639c4", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 56, "deletions": 39, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/0112e7bd159968d2ad2e5ea6727564c200b7c35f/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0112e7bd159968d2ad2e5ea6727564c200b7c35f/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=0112e7bd159968d2ad2e5ea6727564c200b7c35f", "patch": "@@ -175,45 +175,6 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         let tests = mem::replace(&mut self.tests, tests);\n         let tested_submods = mem::replace(&mut self.tested_submods, tested_submods);\n \n-        // Remove any #[main] from the AST so it doesn't clash with\n-        // the one we're going to add. Only if compiling an executable.\n-\n-        mod_folded.items = mem::replace(&mut mod_folded.items, vec![]).move_map(|item| {\n-            match entry::entry_point_type(&item, self.cx.path.len() + 1) {\n-                EntryPointType::MainNamed |\n-                EntryPointType::MainAttr |\n-                EntryPointType::Start =>\n-                    item.map(|ast::Item {id, ident, attrs, node, vis, span}| {\n-                        let allow_str = InternedString::new(\"allow\");\n-                        let dead_code_str = InternedString::new(\"dead_code\");\n-                        let allow_dead_code_item =\n-                            attr::mk_list_item(allow_str,\n-                                               vec![attr::mk_word_item(dead_code_str)]);\n-                        let allow_dead_code = attr::mk_attr_outer(attr::mk_attr_id(),\n-                                                                  allow_dead_code_item);\n-\n-                        ast::Item {\n-                            id: id,\n-                            ident: ident,\n-                            attrs: attrs.into_iter().filter_map(|attr| {\n-                                if !attr.check_name(\"main\") {\n-                                    Some(attr)\n-                                } else {\n-                                    None\n-                                }\n-                            })\n-                                .chain(iter::once(allow_dead_code))\n-                                .collect(),\n-                            node: node,\n-                            vis: vis,\n-                            span: span\n-                        }\n-                    }),\n-                EntryPointType::None |\n-                EntryPointType::OtherMain => item,\n-            }\n-        });\n-\n         if !tests.is_empty() || !tested_submods.is_empty() {\n             let (it, sym) = mk_reexport_mod(&mut self.cx, tests, tested_submods);\n             mod_folded.items.push(it);\n@@ -230,6 +191,58 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n     }\n }\n \n+struct EntryPointCleaner {\n+    // Current depth in the ast\n+    depth: usize,\n+}\n+\n+impl fold::Folder for EntryPointCleaner {\n+    fn fold_item(&mut self, i: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+        self.depth += 1;\n+        let folded = fold::noop_fold_item(i, self).expect_one(\"noop did something\");\n+        self.depth -= 1;\n+\n+        // Remove any #[main] from the AST so it doesn't clash with\n+        // the one we're going to add, but mark it as\n+        // #[allow(dead_code)] to avoid printing warnings.\n+        let folded = match entry::entry_point_type(&*folded, self.depth) {\n+            EntryPointType::MainNamed |\n+            EntryPointType::MainAttr |\n+            EntryPointType::Start =>\n+                folded.map(|ast::Item {id, ident, attrs, node, vis, span}| {\n+                    let allow_str = InternedString::new(\"allow\");\n+                    let dead_code_str = InternedString::new(\"dead_code\");\n+                    let allow_dead_code_item =\n+                        attr::mk_list_item(allow_str,\n+                                           vec![attr::mk_word_item(dead_code_str)]);\n+                    let allow_dead_code = attr::mk_attr_outer(attr::mk_attr_id(),\n+                                                              allow_dead_code_item);\n+\n+                    ast::Item {\n+                        id: id,\n+                        ident: ident,\n+                        attrs: attrs.into_iter().filter_map(|attr| {\n+                            if !attr.check_name(\"main\") {\n+                                Some(attr)\n+                            } else {\n+                                None\n+                            }\n+                        })\n+                            .chain(iter::once(allow_dead_code))\n+                            .collect(),\n+                        node: node,\n+                        vis: vis,\n+                        span: span\n+                    }\n+                }),\n+            EntryPointType::None |\n+            EntryPointType::OtherMain => folded,\n+        };\n+\n+        SmallVector::one(folded)\n+    }\n+}\n+\n fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n                    tested_submods: Vec<(ast::Ident, ast::Ident)>) -> (P<ast::Item>, ast::Ident) {\n     let super_ = token::str_to_ident(\"super\");\n@@ -265,6 +278,10 @@ fn generate_test_harness(sess: &ParseSess,\n                          krate: ast::Crate,\n                          cfg: &ast::CrateConfig,\n                          sd: &diagnostic::SpanHandler) -> ast::Crate {\n+    // Remove the entry points\n+    let mut cleaner = EntryPointCleaner { depth: 0 };\n+    let krate = cleaner.fold_crate(krate);\n+\n     let mut feature_gated_cfgs = vec![];\n     let mut cx: TestCtxt = TestCtxt {\n         sess: sess,"}, {"sha": "7ba10850403e0d689d685468bec07fb96ab79271", "filename": "src/test/run-pass/test-runner-hides-buried-main.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0112e7bd159968d2ad2e5ea6727564c200b7c35f/src%2Ftest%2Frun-pass%2Ftest-runner-hides-buried-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0112e7bd159968d2ad2e5ea6727564c200b7c35f/src%2Ftest%2Frun-pass%2Ftest-runner-hides-buried-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-runner-hides-buried-main.rs?ref=0112e7bd159968d2ad2e5ea6727564c200b7c35f", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![feature(main)]\n+\n+#![allow(dead_code)]\n+\n+mod a {\n+    fn b() {\n+        || {\n+            #[main]\n+            fn c() { panic!(); }\n+        };\n+    }\n+}"}]}