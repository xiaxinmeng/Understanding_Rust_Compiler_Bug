{"sha": "0d0d36991599d230d4781432391608f9821765fa", "node_id": "C_kwDOAAsO6NoAKDBkMGQzNjk5MTU5OWQyMzBkNDc4MTQzMjM5MTYwOGY5ODIxNzY1ZmE", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-12-28T22:21:04Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2023-02-01T20:56:28Z"}, "message": "Make \"use latest edition\" subdiagnostic translatable", "tree": {"sha": "9c43880852c0a5bf7654766a9994d83a122d7fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c43880852c0a5bf7654766a9994d83a122d7fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d0d36991599d230d4781432391608f9821765fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d0d36991599d230d4781432391608f9821765fa", "html_url": "https://github.com/rust-lang/rust/commit/0d0d36991599d230d4781432391608f9821765fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d0d36991599d230d4781432391608f9821765fa/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a476683c8478f548adee406e036328412a0f9d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/a476683c8478f548adee406e036328412a0f9d19", "html_url": "https://github.com/rust-lang/rust/commit/a476683c8478f548adee406e036328412a0f9d19"}], "stats": {"total": 133, "additions": 75, "deletions": 58}, "files": [{"sha": "0f13d29d0fcb6a4d5f5bfdb1dadf0a7bf71b80a3", "filename": "compiler/rustc_error_messages/locales/en-US/hir_typeck.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_typeck.ftl?ref=0d0d36991599d230d4781432391608f9821765fa", "patch": "@@ -57,3 +57,7 @@ hir_typeck_lang_start_incorrect_param = parameter {$param_num} of the `start` la\n \n hir_typeck_lang_start_incorrect_ret_ty = the return type of the `start` lang item is incorrect\n     .suggestion = change the type from `{$found_ty}` to `{$expected_ty}`\n+\n+hir_typeck_help_set_edition_cargo = set `edition = \"{$edition}\"` in `Cargo.toml`\n+hir_typeck_help_set_edition_standalone = pass `--edition {$edition}` to `rustc`\n+hir_typeck_note_edition_guide = for more on editions, read https://doc.rust-lang.org/edition-guide"}, {"sha": "21cf4bd789c7e8ecf3bc4548b77314359a85c6a5", "filename": "compiler/rustc_error_messages/locales/en-US/parse.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparse.ftl?ref=0d0d36991599d230d4781432391608f9821765fa", "patch": "@@ -574,3 +574,7 @@ parse_negative_bounds_not_supported = negative bounds are not supported\n             [one] remove the bound\n            *[other] remove the bounds\n         }\n+\n+parse_help_set_edition_cargo = set `edition = \"{$edition}\"` in `Cargo.toml`\n+parse_help_set_edition_standalone = pass `--edition {$edition}` to `rustc`\n+parse_note_edition_guide = for more on editions, read https://doc.rust-lang.org/edition-guide"}, {"sha": "9ed8ab67431c05b9a51a9bb4fa1f6310b0e2050d", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=0d0d36991599d230d4781432391608f9821765fa", "patch": "@@ -7,7 +7,6 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_error_messages::fluent_value_from_str_list_sep_by_and;\n use rustc_error_messages::FluentValue;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n-use rustc_span::edition::LATEST_STABLE_EDITION;\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n@@ -1071,39 +1070,3 @@ impl PartialEq for Diagnostic {\n         self.keys() == other.keys()\n     }\n }\n-\n-pub enum HelpUseLatestEdition {\n-    Cargo,\n-    Standalone,\n-}\n-\n-impl HelpUseLatestEdition {\n-    pub fn new() -> Self {\n-        if std::env::var_os(\"CARGO\").is_some() { Self::Cargo } else { Self::Standalone }\n-    }\n-}\n-\n-impl AddToDiagnostic for HelpUseLatestEdition {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, f: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        let msg = f(\n-            diag,\n-            match self {\n-                Self::Cargo => {\n-                    format!(\"set `edition = \\\"{}\\\"` in `Cargo.toml`\", LATEST_STABLE_EDITION)\n-                }\n-                Self::Standalone => {\n-                    format!(\"pass `--edition {}` to `rustc`\", LATEST_STABLE_EDITION)\n-                }\n-            }\n-            .into(),\n-        );\n-        diag.help(msg);\n-\n-        let msg =\n-            f(diag, \"for more on editions, read https://doc.rust-lang.org/edition-guide\".into());\n-        diag.note(msg);\n-    }\n-}"}, {"sha": "ec04e865d53b105ae1ddf3101f10c511889e6369", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=0d0d36991599d230d4781432391608f9821765fa", "patch": "@@ -378,7 +378,7 @@ pub struct DelayedBugPanic;\n \n pub use diagnostic::{\n     AddToDiagnostic, DecorateLint, Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId,\n-    DiagnosticStyledString, HelpUseLatestEdition, IntoDiagnosticArg, SubDiagnostic,\n+    DiagnosticStyledString, IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, Noted};\n pub use diagnostic_impls::{DiagnosticArgFromDisplay, DiagnosticSymbolList};"}, {"sha": "2c8979402b654b8fb5f7cdb57d07d6208d42f29f", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=0d0d36991599d230d4781432391608f9821765fa", "patch": "@@ -2,7 +2,11 @@\n use rustc_errors::{AddToDiagnostic, Applicability, Diagnostic, MultiSpan, SubdiagnosticMessage};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_middle::ty::Ty;\n-use rustc_span::{symbol::Ident, Span};\n+use rustc_span::{\n+    edition::{Edition, LATEST_STABLE_EDITION},\n+    symbol::Ident,\n+    Span,\n+};\n \n #[derive(Diagnostic)]\n #[diag(hir_typeck_field_multiply_specified_in_initializer, code = \"E0062\")]\n@@ -205,3 +209,24 @@ pub struct LangStartIncorrectRetTy<'tcx> {\n     pub expected_ty: Ty<'tcx>,\n     pub found_ty: Ty<'tcx>,\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum HelpUseLatestEdition {\n+    #[help(hir_typeck_help_set_edition_cargo)]\n+    #[note(hir_typeck_note_edition_guide)]\n+    Cargo { edition: Edition },\n+    #[help(hir_typeck_help_set_edition_standalone)]\n+    #[note(hir_typeck_note_edition_guide)]\n+    Standalone { edition: Edition },\n+}\n+\n+impl HelpUseLatestEdition {\n+    pub fn new() -> Self {\n+        let edition = LATEST_STABLE_EDITION;\n+        if std::env::var_os(\"CARGO\").is_some() {\n+            Self::Cargo { edition }\n+        } else {\n+            Self::Standalone { edition }\n+        }\n+    }\n+}"}, {"sha": "3561992e86ab4ca41a518f241bc3c2ecd1a4a9e4", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=0d0d36991599d230d4781432391608f9821765fa", "patch": "@@ -8,7 +8,7 @@ use crate::coercion::DynamicCoerceMany;\n use crate::errors::TypeMismatchFruTypo;\n use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructExprNonExhaustive};\n use crate::errors::{\n-    FieldMultiplySpecifiedInInitializer, FunctionalRecordUpdateOnNonStruct,\n+    FieldMultiplySpecifiedInInitializer, FunctionalRecordUpdateOnNonStruct, HelpUseLatestEdition,\n     YieldExprOutsideOfGenerator,\n };\n use crate::fatally_break_rust;\n@@ -24,7 +24,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n     pluralize, struct_span_err, AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder,\n-    DiagnosticId, ErrorGuaranteed, HelpUseLatestEdition, StashKey,\n+    DiagnosticId, ErrorGuaranteed, StashKey,\n };\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};"}, {"sha": "145611923ff16a127f4668b9ce999b542d9eda2b", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=0d0d36991599d230d4781432391608f9821765fa", "patch": "@@ -1,10 +1,9 @@\n use rustc_ast::token::Token;\n use rustc_ast::{Path, Visibility};\n-use rustc_errors::{\n-    fluent, AddToDiagnostic, Applicability, EmissionGuarantee, HelpUseLatestEdition, IntoDiagnostic,\n-};\n+use rustc_errors::{fluent, AddToDiagnostic, Applicability, EmissionGuarantee, IntoDiagnostic};\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_session::errors::ExprParenthesesNeeded;\n+use rustc_span::edition::{Edition, LATEST_STABLE_EDITION};\n use rustc_span::symbol::Ident;\n use rustc_span::{Span, Symbol};\n \n@@ -1916,3 +1915,24 @@ pub(crate) struct NegativeBoundsNotSupportedSugg {\n     pub num_bounds: usize,\n     pub fixed: String,\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum HelpUseLatestEdition {\n+    #[help(parse_help_set_edition_cargo)]\n+    #[note(parse_note_edition_guide)]\n+    Cargo { edition: Edition },\n+    #[help(parse_help_set_edition_standalone)]\n+    #[note(parse_note_edition_guide)]\n+    Standalone { edition: Edition },\n+}\n+\n+impl HelpUseLatestEdition {\n+    pub fn new() -> Self {\n+        let edition = LATEST_STABLE_EDITION;\n+        if std::env::var_os(\"CARGO\").is_some() {\n+            Self::Cargo { edition }\n+        } else {\n+            Self::Standalone { edition }\n+        }\n+    }\n+}"}, {"sha": "b7a023868fced9e84107b4194816a3db53bede7f", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=0d0d36991599d230d4781432391608f9821765fa", "patch": "@@ -11,15 +11,16 @@ use crate::errors::{\n     ComparisonInterpretedAsGeneric, ComparisonOrShiftInterpretedAsGenericSugg,\n     DoCatchSyntaxRemoved, DotDotDot, EqFieldInit, ExpectedElseBlock, ExpectedEqForLetExpr,\n     ExpectedExpressionFoundLet, FieldExpressionWithGeneric, FloatLiteralRequiresIntegerPart,\n-    FoundExprWouldBeStmt, IfExpressionLetSomeSub, IfExpressionMissingCondition,\n-    IfExpressionMissingThenBlock, IfExpressionMissingThenBlockSub, InvalidBlockMacroSegment,\n-    InvalidComparisonOperator, InvalidComparisonOperatorSub, InvalidInterpolatedExpression,\n-    InvalidLiteralSuffixOnTupleIndex, InvalidLogicalOperator, InvalidLogicalOperatorSub,\n-    LabeledLoopInBreak, LeadingPlusNotSupported, LeftArrowOperator, LifetimeInBorrowExpression,\n-    MacroInvocationWithQualifiedPath, MalformedLoopLabel, MatchArmBodyWithoutBraces,\n-    MatchArmBodyWithoutBracesSugg, MissingCommaAfterMatchArm, MissingDotDot, MissingInInForLoop,\n-    MissingInInForLoopSub, MissingSemicolonBeforeArray, NoFieldsForFnCall, NotAsNegationOperator,\n-    NotAsNegationOperatorSub, OuterAttributeNotAllowedOnIfElse, ParenthesesWithStructFields,\n+    FoundExprWouldBeStmt, HelpUseLatestEdition, IfExpressionLetSomeSub,\n+    IfExpressionMissingCondition, IfExpressionMissingThenBlock, IfExpressionMissingThenBlockSub,\n+    InvalidBlockMacroSegment, InvalidComparisonOperator, InvalidComparisonOperatorSub,\n+    InvalidInterpolatedExpression, InvalidLiteralSuffixOnTupleIndex, InvalidLogicalOperator,\n+    InvalidLogicalOperatorSub, LabeledLoopInBreak, LeadingPlusNotSupported, LeftArrowOperator,\n+    LifetimeInBorrowExpression, MacroInvocationWithQualifiedPath, MalformedLoopLabel,\n+    MatchArmBodyWithoutBraces, MatchArmBodyWithoutBracesSugg, MissingCommaAfterMatchArm,\n+    MissingDotDot, MissingInInForLoop, MissingInInForLoopSub, MissingSemicolonBeforeArray,\n+    NoFieldsForFnCall, NotAsNegationOperator, NotAsNegationOperatorSub,\n+    OuterAttributeNotAllowedOnIfElse, ParenthesesWithStructFields,\n     RequireColonAfterLabeledExpression, ShiftInterpretedAsGeneric, StructLiteralNotAllowedHere,\n     StructLiteralNotAllowedHereSugg, TildeAsUnaryOperator, UnexpectedIfWithIf,\n     UnexpectedTokenAfterLabel, UnexpectedTokenAfterLabelSugg, WrapExpressionInParentheses,\n@@ -39,8 +40,8 @@ use rustc_ast::{Arm, Async, BlockCheckMode, Expr, ExprKind, Label, Movability, R\n use rustc_ast::{ClosureBinder, MetaItemLit, StmtKind};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{\n-    AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n-    HelpUseLatestEdition, IntoDiagnostic, PResult, StashKey,\n+    AddToDiagnostic, Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic,\n+    PResult, StashKey,\n };\n use rustc_session::errors::{report_lit_error, ExprParenthesesNeeded};\n use rustc_session::lint::builtin::BREAK_WITH_LABEL_AND_LOOP;"}, {"sha": "81fd084ccb38e25c691e7d72a8e4598ad0b47c15", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d0d36991599d230d4781432391608f9821765fa/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=0d0d36991599d230d4781432391608f9821765fa", "patch": "@@ -3,7 +3,7 @@ use crate::errors::{\n     BoundsNotAllowedOnTraitAliases, ConstGlobalCannotBeMutable, ConstLetMutuallyExclusive,\n     DefaultNotFollowedByItem, DocCommentDoesNotDocumentAnything, EnumStructMutuallyExclusive,\n     ExpectedTraitInTraitImplFoundType, ExternCrateNameWithDashes, ExternCrateNameWithDashesSugg,\n-    ExternItemCannotBeConst, MissingConstType, MissingForInTraitImpl,\n+    ExternItemCannotBeConst, HelpUseLatestEdition, MissingConstType, MissingForInTraitImpl,\n     MissingKeywordForItemDefinition, MissingTraitInTraitImpl, SelfArgumentPointer,\n     TraitAliasCannotBeAuto, TraitAliasCannotBeUnsafe, UnexpectedTokenAfterStructName,\n     UseEmptyBlockNotSemi, VisibilityNotFollowedByItem,\n@@ -26,8 +26,8 @@ use rustc_ast::{FnHeader, ForeignItem, Path, PathSegment, Visibility, Visibility\n use rustc_ast::{MacCall, MacDelimiter};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{\n-    struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, HelpUseLatestEdition,\n-    IntoDiagnostic, PResult, StashKey,\n+    struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed, IntoDiagnostic, PResult,\n+    StashKey,\n };\n use rustc_span::edition::Edition;\n use rustc_span::lev_distance::lev_distance;"}]}