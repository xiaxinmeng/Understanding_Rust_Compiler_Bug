{"sha": "fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkOWMwNGZlMzJkM2I3NzAwZDYwMGFlMWJlNzJkNTc1OGZmZDY2ZmY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-05T18:53:07Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-09-07T17:57:07Z"}, "message": "Move the dataflow framework to its own crate.", "tree": {"sha": "9968ed2ae3ef44610f7669a5221d9a502f33765f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9968ed2ae3ef44610f7669a5221d9a502f33765f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "html_url": "https://github.com/rust-lang/rust/commit/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81a600b6b7db07ebac28c8ddedd357e3c5b9951d", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a600b6b7db07ebac28c8ddedd357e3c5b9951d", "html_url": "https://github.com/rust-lang/rust/commit/81a600b6b7db07ebac28c8ddedd357e3c5b9951d"}], "stats": {"total": 470, "additions": 259, "deletions": 211}, "files": [{"sha": "ab9126fb5f9a5f14c3e81f250a3e162e54b0c0f9", "filename": "Cargo.lock", "status": "modified", "additions": 26, "deletions": 5, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -3614,6 +3614,7 @@ dependencies = [\n  \"rustc_lexer\",\n  \"rustc_middle\",\n  \"rustc_mir\",\n+ \"rustc_mir_dataflow\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n@@ -4047,6 +4048,8 @@ version = \"0.0.0\"\n dependencies = [\n  \"bitflags\",\n  \"chalk-ir\",\n+ \"either\",\n+ \"gsgdt\",\n  \"polonius-engine\",\n  \"rustc-rayon-core\",\n  \"rustc_apfloat\",\n@@ -4056,6 +4059,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_feature\",\n+ \"rustc_graphviz\",\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_macros\",\n@@ -4075,25 +4079,21 @@ version = \"0.0.0\"\n dependencies = [\n  \"either\",\n  \"gsgdt\",\n- \"polonius-engine\",\n- \"regex\",\n  \"rustc_apfloat\",\n  \"rustc_ast\",\n  \"rustc_attr\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n- \"rustc_graphviz\",\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n  \"rustc_macros\",\n  \"rustc_middle\",\n- \"rustc_serialize\",\n+ \"rustc_mir_dataflow\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n- \"smallvec\",\n  \"tracing\",\n ]\n \n@@ -4120,6 +4120,26 @@ dependencies = [\n  \"tracing\",\n ]\n \n+[[package]]\n+name = \"rustc_mir_dataflow\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"polonius-engine\",\n+ \"regex\",\n+ \"rustc_ast\",\n+ \"rustc_data_structures\",\n+ \"rustc_graphviz\",\n+ \"rustc_hir\",\n+ \"rustc_index\",\n+ \"rustc_middle\",\n+ \"rustc_serialize\",\n+ \"rustc_session\",\n+ \"rustc_span\",\n+ \"rustc_target\",\n+ \"smallvec\",\n+ \"tracing\",\n+]\n+\n [[package]]\n name = \"rustc_mir_transform\"\n version = \"0.0.0\"\n@@ -4134,6 +4154,7 @@ dependencies = [\n  \"rustc_index\",\n  \"rustc_middle\",\n  \"rustc_mir\",\n+ \"rustc_mir_dataflow\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\","}, {"sha": "11b3ec28d45ff760cb4aa4a2c23750b444cef98b", "filename": "compiler/rustc_borrowck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2FCargo.toml?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -22,6 +22,7 @@ rustc_infer = { path = \"../rustc_infer\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_mir = { path = \"../rustc_mir\" }\n+rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "ee2ce1d3f74c3035129f153692dcbafeb12740f7", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::mir::traversal;\n use rustc_middle::mir::visit::{MutatingUseContext, NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n-use rustc_mir::dataflow::move_paths::MoveData;\n+use rustc_mir_dataflow::move_paths::MoveData;\n use std::fmt;\n use std::ops::Index;\n "}, {"sha": "1e660ece908683f2d12b728ef68d104bdbb80398", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -3,10 +3,10 @@ use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::{self, BasicBlock, Body, Location, Place};\n use rustc_middle::ty::RegionVid;\n use rustc_middle::ty::TyCtxt;\n-use rustc_mir::dataflow::impls::{EverInitializedPlaces, MaybeUninitializedPlaces};\n-use rustc_mir::dataflow::ResultsVisitable;\n-use rustc_mir::dataflow::{self, fmt::DebugWithContext, GenKill};\n-use rustc_mir::dataflow::{Analysis, Direction, Results};\n+use rustc_mir_dataflow::impls::{EverInitializedPlaces, MaybeUninitializedPlaces};\n+use rustc_mir_dataflow::ResultsVisitable;\n+use rustc_mir_dataflow::{self, fmt::DebugWithContext, GenKill};\n+use rustc_mir_dataflow::{Analysis, Direction, Results};\n use std::fmt;\n use std::iter;\n \n@@ -323,7 +323,7 @@ impl<'a, 'tcx> Borrows<'a, 'tcx> {\n     }\n }\n \n-impl<'tcx> dataflow::AnalysisDomain<'tcx> for Borrows<'_, 'tcx> {\n+impl<'tcx> rustc_mir_dataflow::AnalysisDomain<'tcx> for Borrows<'_, 'tcx> {\n     type Domain = BitSet<BorrowIndex>;\n \n     const NAME: &'static str = \"borrows\";\n@@ -339,7 +339,7 @@ impl<'tcx> dataflow::AnalysisDomain<'tcx> for Borrows<'_, 'tcx> {\n     }\n }\n \n-impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n+impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n     type Idx = BorrowIndex;\n \n     fn before_statement_effect("}, {"sha": "758a660525d7aee2d0f00add60c9278ae337e71f", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -10,14 +10,14 @@ use rustc_middle::mir::{\n     ProjectionElem, Rvalue, Statement, StatementKind, Terminator, TerminatorKind, VarBindingForm,\n };\n use rustc_middle::ty::{self, suggest_constraining_type_param, Ty};\n+use rustc_mir_dataflow::drop_flag_effects;\n+use rustc_mir_dataflow::move_paths::{MoveOutIndex, MovePathIndex};\n use rustc_span::source_map::DesugaringKind;\n use rustc_span::symbol::sym;\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n use crate::borrowck_errors;\n-use rustc_mir::dataflow::drop_flag_effects;\n-use rustc_mir::dataflow::move_paths::{MoveOutIndex, MovePathIndex};\n \n use crate::{\n     borrow_set::BorrowData, diagnostics::Instance, prefixes::IsPrefixOf,"}, {"sha": "cc09db0e3dc20cbbf27602d93f34dc54a8740ad2", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::print::Print;\n use rustc_middle::ty::{self, DefIdTree, Instance, Ty, TyCtxt};\n-use rustc_mir::dataflow::move_paths::{InitLocation, LookupResult};\n+use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult};\n use rustc_span::{\n     hygiene::{DesugaringKind, ForLoopLoc},\n     symbol::sym,"}, {"sha": "3c11408458629dfe84b6bb40ef6e05cfa38f9db7", "filename": "compiler/rustc_borrowck/src/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmove_errors.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -2,7 +2,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::mir::*;\n use rustc_middle::ty;\n-use rustc_mir::dataflow::move_paths::{\n+use rustc_mir_dataflow::move_paths::{\n     IllegalMoveOrigin, IllegalMoveOriginKind, LookupResult, MoveError, MovePathIndex,\n };\n use rustc_span::source_map::DesugaringKind;"}, {"sha": "86b719bdfa0c738cc1326098c28ed57d6cd83ee4", "filename": "compiler/rustc_borrowck/src/facts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ffacts.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -5,7 +5,7 @@ use polonius_engine::Atom;\n use rustc_index::vec::Idx;\n use rustc_middle::mir::Local;\n use rustc_middle::ty::{RegionVid, TyCtxt};\n-use rustc_mir::dataflow::move_paths::MovePathIndex;\n+use rustc_mir_dataflow::move_paths::MovePathIndex;\n use std::error::Error;\n use std::fmt::Debug;\n use std::fs::{self, File};"}, {"sha": "c1aa4df992455152eea665015cc23228033f55f3", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -46,13 +46,13 @@ use std::iter;\n use std::mem;\n use std::rc::Rc;\n \n-use rustc_mir::dataflow::impls::{\n+use rustc_mir_dataflow::impls::{\n     EverInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces,\n };\n-use rustc_mir::dataflow::move_paths::{InitIndex, MoveOutIndex, MovePathIndex};\n-use rustc_mir::dataflow::move_paths::{InitLocation, LookupResult, MoveData, MoveError};\n-use rustc_mir::dataflow::Analysis;\n-use rustc_mir::dataflow::MoveDataParamEnv;\n+use rustc_mir_dataflow::move_paths::{InitIndex, MoveOutIndex, MovePathIndex};\n+use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult, MoveData, MoveError};\n+use rustc_mir_dataflow::Analysis;\n+use rustc_mir_dataflow::MoveDataParamEnv;\n \n use self::diagnostics::{AccessKind, RegionName};\n use self::location::LocationTable;\n@@ -373,7 +373,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     mbcx.report_move_errors(move_errors);\n \n-    rustc_mir::dataflow::visit_results(\n+    rustc_mir_dataflow::visit_results(\n         &body,\n         traversal::reverse_postorder(&body).map(|(bb, _)| bb),\n         &results,\n@@ -615,7 +615,7 @@ struct MirBorrowckCtxt<'cx, 'tcx> {\n // 2. loans made in overlapping scopes do not conflict\n // 3. assignments do not affect things loaned out as immutable\n // 4. moves do not affect things loaned out in any way\n-impl<'cx, 'tcx> rustc_mir::dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {\n+impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx> {\n     type FlowState = Flows<'cx, 'tcx>;\n \n     fn visit_statement_before_primary_effect("}, {"sha": "8b2c0362261ca9ac4e6aacac8c979e221933a203", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::vec_map::VecMap;\n use rustc_errors::Diagnostic;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::InferCtxt;\n+use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n     Promoted,\n@@ -17,14 +18,11 @@ use std::path::PathBuf;\n use std::rc::Rc;\n use std::str::FromStr;\n \n-use self::mir_util::PassWhere;\n use polonius_engine::{Algorithm, Output};\n \n-use rustc_mir::dataflow::impls::MaybeInitializedPlaces;\n-use rustc_mir::dataflow::move_paths::{InitKind, InitLocation, MoveData};\n-use rustc_mir::dataflow::ResultsCursor;\n-use rustc_mir::util as mir_util;\n-use rustc_mir::util::pretty;\n+use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir_dataflow::move_paths::{InitKind, InitLocation, MoveData};\n+use rustc_mir_dataflow::ResultsCursor;\n \n use crate::{\n     borrow_set::BorrowSet,\n@@ -72,7 +70,7 @@ pub(crate) fn replace_regions_in_mir<'cx, 'tcx>(\n     // Replace all remaining regions with fresh inference variables.\n     renumber::renumber_mir(infcx, body, promoted);\n \n-    mir_util::dump_mir(infcx.tcx, None, \"renumber\", &0, body, |_, _| Ok(()));\n+    dump_mir(infcx.tcx, None, \"renumber\", &0, body, |_, _| Ok(()));\n \n     universal_regions\n }\n@@ -322,11 +320,11 @@ pub(super) fn dump_mir_results<'a, 'tcx>(\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n ) {\n-    if !mir_util::dump_enabled(infcx.tcx, \"nll\", body.source.def_id()) {\n+    if !dump_enabled(infcx.tcx, \"nll\", body.source.def_id()) {\n         return;\n     }\n \n-    mir_util::dump_mir(infcx.tcx, None, \"nll\", &0, body, |pass_where, out| {\n+    dump_mir(infcx.tcx, None, \"nll\", &0, body, |pass_where, out| {\n         match pass_where {\n             // Before the CFG, dump out the values for each region variable.\n             PassWhere::BeforeCFG => {\n@@ -354,14 +352,14 @@ pub(super) fn dump_mir_results<'a, 'tcx>(\n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = try {\n         let mut file =\n-            pretty::create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, body.source)?;\n+            create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, body.source)?;\n         regioncx.dump_graphviz_raw_constraints(&mut file)?;\n     };\n \n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = try {\n         let mut file =\n-            pretty::create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, body.source)?;\n+            create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, body.source)?;\n         regioncx.dump_graphviz_scc_constraints(&mut file)?;\n     };\n }"}, {"sha": "1e712354d6a83027be6ab619be6212eec924be90", "filename": "compiler/rustc_borrowck/src/type_check/liveness/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -3,9 +3,9 @@ use rustc_middle::mir::{Body, Local};\n use rustc_middle::ty::{RegionVid, TyCtxt};\n use std::rc::Rc;\n \n-use rustc_mir::dataflow::impls::MaybeInitializedPlaces;\n-use rustc_mir::dataflow::move_paths::MoveData;\n-use rustc_mir::dataflow::ResultsCursor;\n+use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir_dataflow::move_paths::MoveData;\n+use rustc_mir_dataflow::ResultsCursor;\n \n use crate::{\n     constraints::OutlivesConstraintSet,"}, {"sha": "79ab8b713f95d1f646397c40c216edecbea2d730", "filename": "compiler/rustc_borrowck/src/type_check/liveness/polonius.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -3,7 +3,7 @@ use crate::location::{LocationIndex, LocationTable};\n use rustc_middle::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{Body, Local, Location, Place};\n use rustc_middle::ty::subst::GenericArg;\n-use rustc_mir::dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n+use rustc_mir_dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n \n use super::TypeChecker;\n "}, {"sha": "1671c7c627e19d1555daa5c5e3a28f32e9e94249", "filename": "compiler/rustc_borrowck/src/type_check/liveness/trace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Ftrace.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -8,9 +8,9 @@ use rustc_trait_selection::traits::query::type_op::outlives::DropckOutlives;\n use rustc_trait_selection::traits::query::type_op::{TypeOp, TypeOpOutput};\n use std::rc::Rc;\n \n-use rustc_mir::dataflow::impls::MaybeInitializedPlaces;\n-use rustc_mir::dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex};\n-use rustc_mir::dataflow::ResultsCursor;\n+use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir_dataflow::move_paths::{HasMoveData, MoveData, MovePathIndex};\n+use rustc_mir_dataflow::ResultsCursor;\n \n use crate::{\n     region_infer::values::{self, PointIndex, RegionValueElements},"}, {"sha": "19224ca43dd91168a744b19ee07c951acab6524c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -41,12 +41,12 @@ use rustc_trait_selection::traits::query::type_op::custom::CustomTypeOp;\n use rustc_trait_selection::traits::query::Fallible;\n use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligations};\n \n-use rustc_mir::dataflow::impls::MaybeInitializedPlaces;\n-use rustc_mir::dataflow::move_paths::MoveData;\n-use rustc_mir::dataflow::ResultsCursor;\n use rustc_mir::transform::{\n     check_consts::ConstCx, promote_consts::is_const_fn_in_array_repeat_expression,\n };\n+use rustc_mir_dataflow::impls::MaybeInitializedPlaces;\n+use rustc_mir_dataflow::move_paths::MoveData;\n+use rustc_mir_dataflow::ResultsCursor;\n \n use crate::{\n     borrow_set::BorrowSet,"}, {"sha": "46a7485e4ef9ce2e0a7d859a1fa240c17fcaa39f", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn codegen_fn<'tcx>(\n     let mir = tcx.instance_mir(instance.def);\n     let _mir_guard = crate::PrintOnPanic(|| {\n         let mut buf = Vec::new();\n-        rustc_mir::util::write_mir_pretty(tcx, Some(instance.def_id()), &mut buf).unwrap();\n+        rustc_middle::mir::write_mir_pretty(tcx, Some(instance.def_id()), &mut buf).unwrap();\n         String::from_utf8_lossy(&buf).into_owned()\n     });\n "}, {"sha": "87193e3ef5341a060567ac6dac79fce80d6a62a3", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -16,7 +16,6 @@ extern crate rustc_incremental;\n extern crate rustc_index;\n extern crate rustc_interface;\n extern crate rustc_metadata;\n-extern crate rustc_mir;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;"}, {"sha": "a25cc000443c7aa294894ca46a7187af5a1ee6d9", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -6,8 +6,8 @@ use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n+use rustc_middle::mir::{write_mir_graphviz, write_mir_pretty};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n use rustc_session::config::{Input, PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;"}, {"sha": "68b83fccc85fd4dd1f98c49996c1564c91a6732c", "filename": "compiler/rustc_middle/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2FCargo.toml?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -9,6 +9,8 @@ doctest = false\n [dependencies]\n rustc_arena = { path = \"../rustc_arena\" }\n bitflags = \"1.2.1\"\n+either = \"1.5.0\"\n+gsgdt = \"0.1.2\"\n tracing = \"0.1\"\n rustc-rayon-core = \"0.3.1\"\n polonius-engine = \"0.13.0\"\n@@ -21,6 +23,7 @@ rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_query_system = { path = \"../rustc_query_system\" }\n rustc_errors = { path = \"../rustc_errors\" }\n+rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "c7c26cf5990945c20e9ac7fb0d603170966025c1", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -51,6 +51,8 @@\n #![feature(associated_type_defaults)]\n #![feature(iter_zip)]\n #![feature(thread_local_const_init)]\n+#![feature(trusted_step)]\n+#![feature(try_blocks)]\n #![feature(try_reserve)]\n #![feature(try_reserve_kind)]\n #![feature(nonzero_ops)]"}, {"sha": "770b52a4d4b0fbb3ffc26e9bdf3030b23e2d7e4c", "filename": "compiler/rustc_middle/src/mir/generic_graph.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graph.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/util/generic_graph.rs"}, {"sha": "21c18b28e258ba2d389099d61a2100d3f1cf43a5", "filename": "compiler/rustc_middle/src/mir/generic_graphviz.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgeneric_graphviz.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/util/generic_graphviz.rs"}, {"sha": "92c7a358c0a41d59b9552a99ede510c04f0f0f84", "filename": "compiler/rustc_middle/src/mir/graphviz.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fgraphviz.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/util/graphviz.rs"}, {"sha": "ef2154b31f4b3ba16a56198704e36f8dfaa623d4", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -42,18 +42,30 @@ pub use self::query::*;\n \n pub mod abstract_const;\n pub mod coverage;\n+mod generic_graph;\n+pub mod generic_graphviz;\n mod graph_cyclic_cache;\n+pub mod graphviz;\n pub mod interpret;\n pub mod mono;\n+pub mod patch;\n mod predecessors;\n+pub mod pretty;\n mod query;\n+pub mod spanview;\n pub mod tcx;\n pub mod terminator;\n pub use terminator::*;\n pub mod traversal;\n mod type_foldable;\n pub mod visit;\n \n+pub use self::generic_graph::graphviz_safe_def_name;\n+pub use self::graphviz::write_mir_graphviz;\n+pub use self::pretty::{\n+    create_dump_file, display_allocation, dump_enabled, dump_mir, write_mir_pretty, PassWhere,\n+};\n+\n /// Types for locals\n pub type LocalDecls<'tcx> = IndexVec<Local, LocalDecl<'tcx>>;\n \n@@ -75,6 +87,22 @@ impl<'tcx> HasLocalDecls<'tcx> for Body<'tcx> {\n     }\n }\n \n+/// A streamlined trait that you can implement to create a pass; the\n+/// pass will be named after the type, and it will consist of a main\n+/// loop that goes over each available MIR and applies `run_pass`.\n+pub trait MirPass<'tcx> {\n+    fn name(&self) -> Cow<'_, str> {\n+        let name = std::any::type_name::<Self>();\n+        if let Some(tail) = name.rfind(':') {\n+            Cow::from(&name[tail + 1..])\n+        } else {\n+            Cow::from(name)\n+        }\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);\n+}\n+\n /// The various \"big phases\" that MIR goes through.\n ///\n /// These phases all describe dialects of MIR. Since all MIR uses the same datastructures, the"}, {"sha": "1f571a36441be101cd22eed473dd2bac343e488f", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/util/patch.rs"}, {"sha": "db98cb763430f4dc62a0e9f4246192a1ffc2dc88", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/util/pretty.rs"}, {"sha": "42683dac426e3b1fdd5271658149c50ca42bd014", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/util/spanview.rs"}, {"sha": "b187b716199c870285b7ea4c49cc6dbbef27dba5", "filename": "compiler/rustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2FCargo.toml?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -9,22 +9,18 @@ doctest = false\n [dependencies]\n either = \"1.5.0\"\n gsgdt = \"0.1.2\"\n-polonius-engine = \"0.13.0\"\n-regex = \"1\"\n-smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n tracing = \"0.1\"\n rustc_apfloat = { path = \"../rustc_apfloat\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n-rustc_graphviz = { path = \"../rustc_graphviz\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_infer = { path = \"../rustc_infer\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_middle = { path = \"../rustc_middle\" }\n-rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_trait_selection = { path = \"../rustc_trait_selection\" }"}, {"sha": "171fc45ea4696c4ed5b414ff68b3ba15fba522e9", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -5,12 +5,12 @@ use crate::interpret::{\n     Immediate, InternKind, InterpCx, InterpResult, MPlaceTy, MemoryKind, OpTy, RefTracking, Scalar,\n     ScalarMaybeUninit, StackPopCleanup,\n };\n-use crate::util::pretty::display_allocation;\n \n use rustc_errors::ErrorReported;\n use rustc_hir::def::DefKind;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n+use rustc_middle::mir::pretty::display_allocation;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;"}, {"sha": "0521443533b784598e3612d38e0521792685b0da", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -12,6 +12,7 @@ use rustc_middle::ty::layout::{self, LayoutError, LayoutOf, LayoutOfHelpers, TyA\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n+use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n use rustc_session::Limit;\n use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n@@ -22,7 +23,6 @@ use super::{\n     ScalarMaybeUninit, StackPopJump,\n };\n use crate::transform::validate::equal_up_to_regions;\n-use crate::util::storage::AlwaysLiveLocals;\n \n pub struct InterpCx<'mir, 'tcx, M: Machine<'mir, 'tcx>> {\n     /// Stores the `Machine` instance."}, {"sha": "b8b6ff93753f0d0001ca94533ee07a70f70e791e", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -15,6 +15,7 @@ use std::ptr;\n \n use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_middle::mir::display_allocation;\n use rustc_middle::ty::{Instance, ParamEnv, TyCtxt};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n@@ -23,7 +24,6 @@ use super::{\n     InterpResult, Machine, MayLeak, Pointer, PointerArithmetic, Provenance, Scalar,\n     ScalarMaybeUninit,\n };\n-use crate::util::pretty;\n \n #[derive(Debug, PartialEq, Copy, Clone)]\n pub enum MemoryKind<T> {\n@@ -851,7 +851,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> std::fmt::Debug for DumpAllocs<'a,\n             for alloc_id in alloc.relocations().values().map(|tag| tag.get_alloc_id()) {\n                 allocs_to_print.push_back(alloc_id);\n             }\n-            write!(fmt, \"{}\", pretty::display_allocation(tcx, alloc))\n+            write!(fmt, \"{}\", display_allocation(tcx, alloc))\n         }\n \n         let mut allocs_to_print: VecDeque<_> = self.allocs.iter().copied().collect();"}, {"sha": "c24c9a9b5ee2b189e61f4cf5229cab810702fdd8", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -6,7 +6,6 @@ Rust MIR: a lowered representation of Rust.\n \n #![feature(assert_matches)]\n #![cfg_attr(bootstrap, feature(bindings_after_at))]\n-#![feature(associated_type_defaults)]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n@@ -19,9 +18,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(min_specialization)]\n #![feature(slice_ptr_get)]\n #![feature(option_get_or_insert_default)]\n-#![feature(once_cell)]\n #![feature(never_type)]\n-#![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(trusted_len)]\n #![feature(trusted_step)]\n@@ -33,7 +30,6 @@ extern crate tracing;\n extern crate rustc_middle;\n \n pub mod const_eval;\n-pub mod dataflow;\n pub mod interpret;\n pub mod transform;\n pub mod util;"}, {"sha": "d02b4286c175a6396771cdc31e4f7ecebd0c822f", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -12,6 +12,8 @@ use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt};\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n+use rustc_mir_dataflow::impls::MaybeMutBorrowedLocals;\n+use rustc_mir_dataflow::{self, Analysis};\n use rustc_span::{sym, Span, Symbol};\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, SelectionContext, TraitEngine};\n@@ -24,17 +26,15 @@ use super::qualifs::{self, CustomEq, HasMutInterior, NeedsDrop};\n use super::resolver::FlowSensitiveAnalysis;\n use super::{is_lang_panic_fn, ConstCx, Qualif};\n use crate::const_eval::is_unstable_const_fn;\n-use crate::dataflow::impls::MaybeMutBorrowedLocals;\n-use crate::dataflow::{self, Analysis};\n \n // We are using `MaybeMutBorrowedLocals` as a proxy for whether an item may have been mutated\n // through a pointer prior to the given point. This is okay even though `MaybeMutBorrowedLocals`\n // kills locals upon `StorageDead` because a local will never be used after a `StorageDead`.\n type IndirectlyMutableResults<'mir, 'tcx> =\n-    dataflow::ResultsCursor<'mir, 'tcx, MaybeMutBorrowedLocals<'mir, 'tcx>>;\n+    rustc_mir_dataflow::ResultsCursor<'mir, 'tcx, MaybeMutBorrowedLocals<'mir, 'tcx>>;\n \n type QualifResults<'mir, 'tcx, Q> =\n-    dataflow::ResultsCursor<'mir, 'tcx, FlowSensitiveAnalysis<'mir, 'mir, 'tcx, Q>>;\n+    rustc_mir_dataflow::ResultsCursor<'mir, 'tcx, FlowSensitiveAnalysis<'mir, 'mir, 'tcx, Q>>;\n \n #[derive(Default)]\n pub struct Qualifs<'mir, 'tcx> {"}, {"sha": "8e1b69a1d7413e48215c3ddf798f02d1929f501f", "filename": "compiler/rustc_mir/src/transform/check_consts/resolver.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fresolver.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::mir::{self, BasicBlock, Local, Location};\n use std::marker::PhantomData;\n \n use super::{qualifs, ConstCx, Qualif};\n-use crate::dataflow;\n \n /// A `Visitor` that propagates qualifs between locals. This defines the transfer function of\n /// `FlowSensitiveAnalysis`.\n@@ -165,7 +164,7 @@ where\n     }\n }\n \n-impl<Q> dataflow::AnalysisDomain<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n+impl<Q> rustc_mir_dataflow::AnalysisDomain<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n where\n     Q: Qualif,\n {\n@@ -182,7 +181,7 @@ where\n     }\n }\n \n-impl<Q> dataflow::Analysis<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n+impl<Q> rustc_mir_dataflow::Analysis<'tcx> for FlowSensitiveAnalysis<'_, '_, 'tcx, Q>\n where\n     Q: Qualif,\n {"}, {"sha": "38c28f34934a4d01da25fecaec30fe22becf6bbe", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,26 +1,5 @@\n-use rustc_middle::mir::Body;\n-use rustc_middle::ty::TyCtxt;\n-use std::borrow::Cow;\n-\n pub mod check_consts;\n pub mod promote_consts;\n-pub mod rustc_peek;\n pub mod validate;\n \n-/// Generates a default name for the pass based on the name of the\n-/// type `T`.\n-pub fn default_name<T: ?Sized>() -> Cow<'static, str> {\n-    let name = std::any::type_name::<T>();\n-    if let Some(tail) = name.rfind(':') { Cow::from(&name[tail + 1..]) } else { Cow::from(name) }\n-}\n-\n-/// A streamlined trait that you can implement to create a pass; the\n-/// pass will be named after the type, and it will consist of a main\n-/// loop that goes over each available MIR and applies `run_pass`.\n-pub trait MirPass<'tcx> {\n-    fn name(&self) -> Cow<'_, str> {\n-        default_name::<Self>()\n-    }\n-\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>);\n-}\n+pub use rustc_middle::mir::MirPass;"}, {"sha": "40a32a76c9446e49114d4794b0b7f9dfbf2f6f5b", "filename": "compiler/rustc_mir/src/transform/validate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fvalidate.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,9 +1,5 @@\n //! Validates the MIR to ensure that invariants are upheld.\n \n-use crate::dataflow::impls::MaybeStorageLive;\n-use crate::dataflow::{Analysis, ResultsCursor};\n-use crate::util::storage::AlwaysLiveLocals;\n-\n use super::MirPass;\n use rustc_index::bit_set::BitSet;\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -17,6 +13,9 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc_mir_dataflow::impls::MaybeStorageLive;\n+use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n+use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_target::abi::Size;\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "4a406f8bfd08834fc18e66ea987fe261ed636ef9", "filename": "compiler/rustc_mir/src/util/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,20 +1,8 @@\n pub mod aggregate;\n-pub mod elaborate_drops;\n-pub mod patch;\n-pub mod storage;\n-\n mod alignment;\n pub mod collect_writes;\n mod find_self_call;\n-mod generic_graph;\n-pub mod generic_graphviz;\n-mod graphviz;\n-pub mod pretty;\n-pub mod spanview;\n \n pub use self::aggregate::expand_aggregate;\n pub use self::alignment::is_disaligned;\n pub use self::find_self_call::find_self_call;\n-pub use self::generic_graph::graphviz_safe_def_name;\n-pub use self::graphviz::write_mir_graphviz;\n-pub use self::pretty::{dump_enabled, dump_mir, write_mir_fn, write_mir_pretty, PassWhere};"}, {"sha": "adc3882f84325ac1e3d4f6a0f1cf22efa22e0bd6", "filename": "compiler/rustc_mir_dataflow/Cargo.toml", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2FCargo.toml?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -0,0 +1,24 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+name = \"rustc_mir_dataflow\"\n+version = \"0.0.0\"\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+polonius-engine = \"0.13.0\"\n+regex = \"1\"\n+smallvec = { version = \"1.6.1\", features = [\"union\", \"may_dangle\"] }\n+tracing = \"0.1\"\n+rustc_ast = { path = \"../rustc_ast\" }\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_graphviz = { path = \"../rustc_graphviz\" }\n+rustc_hir = { path = \"../rustc_hir\" }\n+rustc_index = { path = \"../rustc_index\" }\n+rustc_middle = { path = \"../rustc_middle\" }\n+rustc_serialize = { path = \"../rustc_serialize\" }\n+rustc_session = { path = \"../rustc_session\" }\n+rustc_target = { path = \"../rustc_target\" }\n+rustc_span = { path = \"../rustc_span\" }"}, {"sha": "e2269562b3d9b4f2fd69cbfdd114d7c211604ace", "filename": "compiler/rustc_mir_dataflow/src/drop_flag_effects.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fdrop_flag_effects.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,4 +1,4 @@\n-use crate::util::elaborate_drops::DropFlagState;\n+use crate::elaborate_drops::DropFlagState;\n use rustc_middle::mir::{self, Body, Location};\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_target::abi::VariantIdx;", "previous_filename": "compiler/rustc_mir/src/dataflow/drop_flag_effects.rs"}, {"sha": "7607ccc3aba83a589fd550db9e1b7359354138aa", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,7 +1,7 @@\n-use crate::util::patch::MirPatch;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::vec::Idx;\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::subst::SubstsRef;", "previous_filename": "compiler/rustc_mir/src/util/elaborate_drops.rs"}, {"sha": "c000e49c14bc1b72483803e310601e420be49193", "filename": "compiler/rustc_mir_dataflow/src/framework/cursor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fcursor.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/cursor.rs"}, {"sha": "8a9ced91eb3763c66d15f6799f6c7a78e1408526", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/direction.rs"}, {"sha": "804abc3b42b53c70af141a7e11b72e238e3dc79f", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -11,6 +11,7 @@ use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::{self, traversal, BasicBlock};\n+use rustc_middle::mir::{create_dump_file, dump_enabled};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n \n@@ -20,7 +21,6 @@ use super::{\n     visit_results, Analysis, Direction, GenKill, GenKillAnalysis, GenKillSet, JoinSemiLattice,\n     ResultsCursor, ResultsVisitor,\n };\n-use crate::util::pretty::{create_dump_file, dump_enabled};\n \n /// A dataflow analysis that has converged to fixpoint.\n pub struct Results<'tcx, A>", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs"}, {"sha": "1d1553bbbd984b69c1869b145b6214e4a1529dac", "filename": "compiler/rustc_mir_dataflow/src/framework/fmt.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ffmt.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -147,18 +147,18 @@ where\n }\n \n impl<C> DebugWithContext<C> for rustc_middle::mir::Local {}\n-impl<C> DebugWithContext<C> for crate::dataflow::move_paths::InitIndex {}\n+impl<C> DebugWithContext<C> for crate::move_paths::InitIndex {}\n \n-impl<'tcx, C> DebugWithContext<C> for crate::dataflow::move_paths::MovePathIndex\n+impl<'tcx, C> DebugWithContext<C> for crate::move_paths::MovePathIndex\n where\n-    C: crate::dataflow::move_paths::HasMoveData<'tcx>,\n+    C: crate::move_paths::HasMoveData<'tcx>,\n {\n     fn fmt_with(&self, ctxt: &C, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", ctxt.move_data().move_paths[*self])\n     }\n }\n \n-impl<T, C> DebugWithContext<C> for crate::dataflow::lattice::Dual<T>\n+impl<T, C> DebugWithContext<C> for crate::lattice::Dual<T>\n where\n     T: DebugWithContext<C>,\n {", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/fmt.rs"}, {"sha": "a370f8e40f9aed237bb23ccca902a51cab82246f", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -6,11 +6,11 @@ use std::{io, ops, str};\n \n use regex::Regex;\n use rustc_graphviz as dot;\n+use rustc_middle::mir::graphviz_safe_def_name;\n use rustc_middle::mir::{self, BasicBlock, Body, Location};\n \n use super::fmt::{DebugDiffWithAdapter, DebugWithAdapter, DebugWithContext};\n use super::{Analysis, Direction, Results, ResultsRefCursor, ResultsVisitor};\n-use crate::util::graphviz_safe_def_name;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum OutputStyle {", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/graphviz.rs"}, {"sha": "f937b31f4cfc9d00afb13f31958ec9ba856e8e4c", "filename": "compiler/rustc_mir_dataflow/src/framework/lattice.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Flattice.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/lattice.rs"}, {"sha": "0bf62db1adac9339af42840e17d841026b438356", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/mod.rs"}, {"sha": "a5989121679c4fa8fb2014cd9910581e30520a48", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/tests.rs"}, {"sha": "84136c4d78cf1e495bd739b48b181a88936d6882", "filename": "compiler/rustc_mir_dataflow/src/framework/visitor.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/dataflow/framework/visitor.rs"}, {"sha": "81d84f80ad4c19a2cf083639abeb7bee435afe49", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,6 +1,6 @@\n-pub use super::*;\n+use super::*;\n \n-use crate::dataflow::{AnalysisDomain, GenKill, GenKillAnalysis};\n+use crate::{AnalysisDomain, GenKill, GenKillAnalysis};\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{ParamEnv, TyCtxt};", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/borrowed_locals.rs"}, {"sha": "07570e764f5e087369b944156429366497d13761", "filename": "compiler/rustc_mir_dataflow/src/impls/init_locals.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -2,15 +2,15 @@\n //!\n //! A local will be maybe initialized if *any* projections of that local might be initialized.\n \n-use crate::dataflow::{self, GenKill};\n+use crate::GenKill;\n \n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{PlaceContext, Visitor};\n use rustc_middle::mir::{self, BasicBlock, Local, Location};\n \n pub struct MaybeInitializedLocals;\n \n-impl dataflow::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n+impl crate::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_init_locals\";\n@@ -28,7 +28,7 @@ impl dataflow::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n     }\n }\n \n-impl dataflow::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n+impl crate::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n     type Idx = Local;\n \n     fn statement_effect(", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/init_locals.rs"}, {"sha": "0039d3188d57acc0317793da5c4a621cb88cb7f6", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -2,7 +2,7 @@ use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Local, Location};\n \n-use crate::dataflow::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n+use crate::{AnalysisDomain, Backward, GenKill, GenKillAnalysis};\n \n /// A [live-variable dataflow analysis][liveness].\n ///", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/liveness.rs"}, {"sha": "771ad90af28d67e08b306a755f4723129f46bca7", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "renamed", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -7,18 +7,15 @@ use rustc_index::vec::Idx;\n use rustc_middle::mir::{self, Body, Location};\n use rustc_middle::ty::{self, TyCtxt};\n \n-use super::MoveDataParamEnv;\n-\n-use crate::util::elaborate_drops::DropFlagState;\n-\n-use super::move_paths::{HasMoveData, InitIndex, InitKind, MoveData, MovePathIndex};\n-use super::{lattice, AnalysisDomain, GenKill, GenKillAnalysis};\n-\n-use super::drop_flag_effects_for_function_entry;\n-use super::drop_flag_effects_for_location;\n-use super::on_lookup_result_bits;\n-use crate::dataflow::drop_flag_effects;\n-use crate::dataflow::framework::SwitchIntEdgeEffects;\n+use crate::drop_flag_effects;\n+use crate::drop_flag_effects_for_function_entry;\n+use crate::drop_flag_effects_for_location;\n+use crate::elaborate_drops::DropFlagState;\n+use crate::framework::SwitchIntEdgeEffects;\n+use crate::move_paths::{HasMoveData, InitIndex, InitKind, MoveData, MovePathIndex};\n+use crate::on_lookup_result_bits;\n+use crate::MoveDataParamEnv;\n+use crate::{lattice, AnalysisDomain, GenKill, GenKillAnalysis};\n \n mod borrowed_locals;\n mod init_locals;", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/mod.rs"}, {"sha": "b468e50b391ca87a0ff39d2c1ad6f61e566e83b8", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,7 +1,7 @@\n pub use super::*;\n \n-use crate::dataflow::{self, GenKill, Results, ResultsRefCursor};\n-use crate::util::storage::AlwaysLiveLocals;\n+use crate::storage::AlwaysLiveLocals;\n+use crate::{GenKill, Results, ResultsRefCursor};\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use std::cell::RefCell;\n@@ -17,7 +17,7 @@ impl MaybeStorageLive {\n     }\n }\n \n-impl dataflow::AnalysisDomain<'tcx> for MaybeStorageLive {\n+impl crate::AnalysisDomain<'tcx> for MaybeStorageLive {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_storage_live\";\n@@ -39,7 +39,7 @@ impl dataflow::AnalysisDomain<'tcx> for MaybeStorageLive {\n     }\n }\n \n-impl dataflow::GenKillAnalysis<'tcx> for MaybeStorageLive {\n+impl crate::GenKillAnalysis<'tcx> for MaybeStorageLive {\n     type Idx = Local;\n \n     fn statement_effect(\n@@ -97,7 +97,7 @@ impl<'mir, 'tcx> MaybeRequiresStorage<'mir, 'tcx> {\n     }\n }\n \n-impl<'mir, 'tcx> dataflow::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n+impl<'mir, 'tcx> crate::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"requires_storage\";\n@@ -116,7 +116,7 @@ impl<'mir, 'tcx> dataflow::AnalysisDomain<'tcx> for MaybeRequiresStorage<'mir, '\n     }\n }\n \n-impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n+impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tcx> {\n     type Idx = Local;\n \n     fn before_statement_effect(", "previous_filename": "compiler/rustc_mir/src/dataflow/impls/storage_liveness.rs"}, {"sha": "282ea8db1bbdc0113b6b9a3deac8413c90e393e4", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "renamed", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,3 +1,21 @@\n+#![feature(associated_type_defaults)]\n+#![feature(bool_to_option)]\n+#![feature(box_patterns)]\n+#![feature(box_syntax)]\n+#![feature(const_panic)]\n+#![feature(exact_size_is_empty)]\n+#![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n+#![feature(min_specialization)]\n+#![feature(once_cell)]\n+#![feature(stmt_expr_attributes)]\n+#![feature(trusted_step)]\n+\n+#[macro_use]\n+extern crate tracing;\n+#[macro_use]\n+extern crate rustc_middle;\n+\n use rustc_ast::{self as ast, MetaItem};\n use rustc_middle::ty;\n use rustc_session::Session;\n@@ -17,9 +35,12 @@ pub use self::framework::{\n use self::move_paths::MoveData;\n \n pub mod drop_flag_effects;\n+pub mod elaborate_drops;\n mod framework;\n pub mod impls;\n pub mod move_paths;\n+pub mod rustc_peek;\n+pub mod storage;\n \n pub(crate) mod indexes {\n     pub(crate) use super::move_paths::MovePathIndex;", "previous_filename": "compiler/rustc_mir/src/dataflow/mod.rs"}, {"sha": "28936274baafa639614b7aa547c37859c8a0b8aa", "filename": "compiler/rustc_mir_dataflow/src/move_paths/abs_domain.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fabs_domain.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/dataflow/move_paths/abs_domain.rs"}, {"sha": "cea465ea1ed9dc423045c5a80d5ffed630310173", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/dataflow/move_paths/builder.rs"}, {"sha": "699ec4bbff80fa788ad305ada8cc0c4c4f25c9ca", "filename": "compiler/rustc_mir_dataflow/src/move_paths/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/dataflow/move_paths/mod.rs"}, {"sha": "29ffed9934421688045467ef07c43ae15376755c", "filename": "compiler/rustc_mir_dataflow/src/rustc_peek.rs", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Frustc_peek.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -5,25 +5,25 @@ use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_target::spec::abi::Abi;\n \n-use crate::transform::MirPass;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::MirPass;\n use rustc_middle::mir::{self, Body, Local, Location};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-use crate::dataflow::impls::{\n+use crate::impls::{\n     DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeLiveLocals, MaybeMutBorrowedLocals,\n     MaybeUninitializedPlaces,\n };\n-use crate::dataflow::move_paths::{HasMoveData, MoveData};\n-use crate::dataflow::move_paths::{LookupResult, MovePathIndex};\n-use crate::dataflow::MoveDataParamEnv;\n-use crate::dataflow::{Analysis, JoinSemiLattice, Results, ResultsCursor};\n+use crate::move_paths::{HasMoveData, MoveData};\n+use crate::move_paths::{LookupResult, MovePathIndex};\n+use crate::MoveDataParamEnv;\n+use crate::{Analysis, JoinSemiLattice, Results, ResultsCursor};\n \n pub struct SanityCheck;\n \n impl<'tcx> MirPass<'tcx> for SanityCheck {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        use crate::dataflow::has_rustc_mir_with;\n+        use crate::has_rustc_mir_with;\n         let def_id = body.source.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));", "previous_filename": "compiler/rustc_mir/src/transform/rustc_peek.rs"}, {"sha": "18b8ef557d6714e315d24c45c86a38fd41048989", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "previous_filename": "compiler/rustc_mir/src/util/storage.rs"}, {"sha": "bc0f69d190cd2e299b20340200f208c7b034db21", "filename": "compiler/rustc_mir_transform/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2FCargo.toml?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -19,6 +19,7 @@ rustc_hir = { path = \"../rustc_hir\" }\n rustc_index = { path = \"../rustc_index\" }\n rustc_middle = { path = \"../rustc_middle\" }\n rustc_mir = { path = \"../rustc_mir\" }\n+rustc_mir_dataflow = { path = \"../rustc_mir_dataflow\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_target = { path = \"../rustc_target\" }"}, {"sha": "9eaf2b6a2111377ff18f25f61e5a66566b072a41", "filename": "compiler/rustc_mir_transform/src/add_moves_for_packed_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_moves_for_packed_drops.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -2,8 +2,8 @@ use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n \n use crate::util;\n-use crate::util::patch::MirPatch;\n use crate::MirPass;\n+use rustc_middle::mir::patch::MirPatch;\n \n // This pass moves values being dropped that are within a packed\n // struct to a separate local before dropping them, to ensure that"}, {"sha": "513a85b591306bec225b4ac706fbe7b3734b7ae9", "filename": "compiler/rustc_mir_transform/src/coverage/debug.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fdebug.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -111,9 +111,9 @@\n use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n use super::spans::CoverageSpan;\n \n-use crate::util::generic_graphviz::GraphvizWriter;\n-use crate::util::pretty;\n-use crate::util::spanview::{self, SpanViewable};\n+use rustc_middle::mir::create_dump_file;\n+use rustc_middle::mir::generic_graphviz::GraphvizWriter;\n+use rustc_middle::mir::spanview::{self, SpanViewable};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_middle::mir::coverage::*;\n@@ -641,7 +641,7 @@ pub(super) fn dump_coverage_spanview(\n     let def_id = mir_source.def_id();\n \n     let span_viewables = span_viewables(tcx, mir_body, basic_coverage_blocks, &coverage_spans);\n-    let mut file = pretty::create_dump_file(tcx, \"html\", None, pass_name, &0, mir_source)\n+    let mut file = create_dump_file(tcx, \"html\", None, pass_name, &0, mir_source)\n         .expect(\"Unexpected error creating MIR spanview HTML file\");\n     let crate_name = tcx.crate_name(def_id.krate);\n     let item_name = tcx.def_path(def_id).to_filename_friendly_no_crate();\n@@ -743,7 +743,7 @@ pub(super) fn dump_coverage_graphviz(\n                 .join(\"\\n  \")\n         ));\n     }\n-    let mut file = pretty::create_dump_file(tcx, \"dot\", None, pass_name, &0, mir_source)\n+    let mut file = create_dump_file(tcx, \"dot\", None, pass_name, &0, mir_source)\n         .expect(\"Unexpected error creating BasicCoverageBlock graphviz DOT file\");\n     graphviz_writer\n         .write_graphviz(tcx, &mut file)"}, {"sha": "6043606c37957da13fb600d9926ccdb49181a21a", "filename": "compiler/rustc_mir_transform/src/coverage/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fmod.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -12,7 +12,6 @@ use counters::CoverageCounters;\n use graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph};\n use spans::{CoverageSpan, CoverageSpans};\n \n-use crate::util::pretty;\n use crate::MirPass;\n \n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -25,6 +24,7 @@ use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::ich::StableHashingContext;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::coverage::*;\n+use rustc_middle::mir::dump_enabled;\n use rustc_middle::mir::{\n     self, BasicBlock, BasicBlockData, Coverage, SourceInfo, Statement, StatementKind, Terminator,\n     TerminatorKind,\n@@ -159,7 +159,7 @@ impl<'a, 'tcx> Instrumentor<'a, 'tcx> {\n         let mut graphviz_data = debug::GraphvizData::new();\n         let mut debug_used_expressions = debug::UsedExpressions::new();\n \n-        let dump_mir = pretty::dump_enabled(tcx, self.pass_name, def_id);\n+        let dump_mir = dump_enabled(tcx, self.pass_name, def_id);\n         let dump_graphviz = dump_mir && tcx.sess.opts.debugging_opts.dump_mir_graphviz;\n         let dump_spanview = dump_mir && tcx.sess.opts.debugging_opts.dump_mir_spanview.is_some();\n "}, {"sha": "2ea2e06029d679176e20719eab21f281c361eaa3", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,15 +1,13 @@\n use super::debug::term_type;\n use super::graph::{BasicCoverageBlock, BasicCoverageBlockData, CoverageGraph, START_BCB};\n \n-use crate::util::spanview::source_range_no_file;\n-\n use rustc_data_structures::graph::WithNumNodes;\n+use rustc_middle::mir::spanview::source_range_no_file;\n use rustc_middle::mir::{\n     self, AggregateKind, BasicBlock, FakeReadCause, Rvalue, Statement, StatementKind, Terminator,\n     TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n-\n use rustc_span::source_map::original_sp;\n use rustc_span::{BytePos, ExpnKind, MacroKind, Span, Symbol};\n "}, {"sha": "dd95f0014230953d1f96c9139c2c4daed42606e3", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -96,10 +96,7 @@\n //! [previous attempt]: https://github.com/rust-lang/rust/pull/47954\n //! [subsequent approach]: https://github.com/rust-lang/rust/pull/71003\n \n-use crate::{\n-    util::{dump_mir, PassWhere},\n-    MirPass,\n-};\n+use crate::MirPass;\n use itertools::Itertools;\n use rustc_data_structures::unify::{InPlaceUnificationTable, UnifyKey};\n use rustc_index::{\n@@ -108,13 +105,14 @@ use rustc_index::{\n };\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n+use rustc_middle::mir::{dump_mir, PassWhere};\n use rustc_middle::mir::{\n     traversal, Body, InlineAsmOperand, Local, LocalKind, Location, Operand, Place, PlaceElem,\n     Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n-use rustc_mir::dataflow::impls::{MaybeInitializedLocals, MaybeLiveLocals};\n-use rustc_mir::dataflow::Analysis;\n+use rustc_mir_dataflow::impls::{MaybeInitializedLocals, MaybeLiveLocals};\n+use rustc_mir_dataflow::Analysis;\n \n // Empirical measurements have resulted in some observations:\n // - Running on a body with a single block and 500 locals takes barely any time"}, {"sha": "2a24e1ea8d7edf968cbb898f958289ccad3eb257", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -5,9 +5,9 @@ use std::fmt;\n use std::fs::File;\n use std::io;\n \n-use crate::util as mir_util;\n use crate::MirPass;\n use rustc_middle::mir::Body;\n+use rustc_middle::mir::{dump_enabled, dump_mir, write_mir_pretty};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OutputFilenames, OutputType};\n \n@@ -39,21 +39,14 @@ pub fn on_mir_pass<'tcx>(\n     body: &Body<'tcx>,\n     is_after: bool,\n ) {\n-    if mir_util::dump_enabled(tcx, pass_name, body.source.def_id()) {\n-        mir_util::dump_mir(\n-            tcx,\n-            Some(pass_num),\n-            pass_name,\n-            &Disambiguator { is_after },\n-            body,\n-            |_, _| Ok(()),\n-        );\n+    if dump_enabled(tcx, pass_name, body.source.def_id()) {\n+        dump_mir(tcx, Some(pass_num), pass_name, &Disambiguator { is_after }, body, |_, _| Ok(()));\n     }\n }\n \n pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n     let path = outputs.path(OutputType::Mir);\n     let mut f = io::BufWriter::new(File::create(&path)?);\n-    mir_util::write_mir_pretty(tcx, None, &mut f)?;\n+    write_mir_pretty(tcx, None, &mut f)?;\n     Ok(())\n }"}, {"sha": "d7f1ad7f696433d109cfb89668bf29a910041459", "filename": "compiler/rustc_mir_transform/src/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fearly_otherwise_branch.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,4 +1,4 @@\n-use crate::{util::patch::MirPatch, MirPass};\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n use std::fmt::Debug;"}, {"sha": "b9a48197a351a65ed9ce6cd0ef0c9708ee2bc252", "filename": "compiler/rustc_mir_transform/src/elaborate_drops.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_drops.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,18 +1,17 @@\n-use crate::util::elaborate_drops::{elaborate_drop, DropFlagState, Unwind};\n-use crate::util::elaborate_drops::{DropElaborator, DropFlagMode, DropStyle};\n-use crate::util::patch::MirPatch;\n use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_mir::dataflow;\n-use rustc_mir::dataflow::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n-use rustc_mir::dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n-use rustc_mir::dataflow::on_lookup_result_bits;\n-use rustc_mir::dataflow::MoveDataParamEnv;\n-use rustc_mir::dataflow::{on_all_children_bits, on_all_drop_children_bits};\n-use rustc_mir::dataflow::{Analysis, ResultsCursor};\n+use rustc_mir_dataflow::elaborate_drops::{elaborate_drop, DropFlagState, Unwind};\n+use rustc_mir_dataflow::elaborate_drops::{DropElaborator, DropFlagMode, DropStyle};\n+use rustc_mir_dataflow::impls::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n+use rustc_mir_dataflow::move_paths::{LookupResult, MoveData, MovePathIndex};\n+use rustc_mir_dataflow::on_lookup_result_bits;\n+use rustc_mir_dataflow::MoveDataParamEnv;\n+use rustc_mir_dataflow::{on_all_children_bits, on_all_drop_children_bits};\n+use rustc_mir_dataflow::{Analysis, ResultsCursor};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use std::fmt;\n@@ -214,14 +213,14 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n     }\n \n     fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path> {\n-        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n+        rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::Field(idx, _) => idx == field,\n             _ => false,\n         })\n     }\n \n     fn array_subpath(&self, path: Self::Path, index: u64, size: u64) -> Option<Self::Path> {\n-        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n+        rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::ConstantIndex { offset, min_length, from_end } => {\n                 debug_assert!(size == min_length, \"min_length should be exact for arrays\");\n                 assert!(!from_end, \"from_end should not be used for array element ConstantIndex\");\n@@ -232,13 +231,13 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n     }\n \n     fn deref_subpath(&self, path: Self::Path) -> Option<Self::Path> {\n-        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| {\n+        rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| {\n             e == ProjectionElem::Deref\n         })\n     }\n \n     fn downcast_subpath(&self, path: Self::Path, variant: VariantIdx) -> Option<Self::Path> {\n-        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n+        rustc_mir_dataflow::move_path_children_matching(self.ctxt.move_data(), path, |e| match e {\n             ProjectionElem::Downcast(_, idx) => idx == variant,\n             _ => false,\n         })\n@@ -513,9 +512,14 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n \n     fn drop_flags_for_args(&mut self) {\n         let loc = Location::START;\n-        dataflow::drop_flag_effects_for_function_entry(self.tcx, self.body, self.env, |path, ds| {\n-            self.set_drop_flag(loc, path, ds);\n-        })\n+        rustc_mir_dataflow::drop_flag_effects_for_function_entry(\n+            self.tcx,\n+            self.body,\n+            self.env,\n+            |path, ds| {\n+                self.set_drop_flag(loc, path, ds);\n+            },\n+        )\n     }\n \n     fn drop_flags_for_locs(&mut self) {\n@@ -556,7 +560,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n                     }\n                 }\n                 let loc = Location { block: bb, statement_index: i };\n-                dataflow::drop_flag_effects_for_location(\n+                rustc_mir_dataflow::drop_flag_effects_for_location(\n                     self.tcx,\n                     self.body,\n                     self.env,"}, {"sha": "06366b6fc31d53e13b7b882f60cfb2bd767cf0f7", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -50,24 +50,24 @@\n //! Otherwise it drops all the values in scope at the last suspension point.\n \n use crate::simplify;\n-use crate::util::dump_mir;\n use crate::util::expand_aggregate;\n-use crate::util::storage;\n use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::{BitMatrix, BitSet};\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_middle::mir::dump_mir;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::{Subst, SubstsRef};\n use rustc_middle::ty::GeneratorSubsts;\n use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n-use rustc_mir::dataflow::impls::{\n+use rustc_mir_dataflow::impls::{\n     MaybeBorrowedLocals, MaybeLiveLocals, MaybeRequiresStorage, MaybeStorageLive,\n };\n-use rustc_mir::dataflow::{self, Analysis};\n+use rustc_mir_dataflow::storage;\n+use rustc_mir_dataflow::{self, Analysis};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::PanicStrategy;\n use std::{iter, ops};\n@@ -468,15 +468,15 @@ fn locals_live_across_suspend_points(\n         .iterate_to_fixpoint();\n \n     let mut borrowed_locals_cursor =\n-        dataflow::ResultsCursor::new(body_ref, &borrowed_locals_results);\n+        rustc_mir_dataflow::ResultsCursor::new(body_ref, &borrowed_locals_results);\n \n     // Calculate the MIR locals that we actually need to keep storage around\n     // for.\n     let requires_storage_results = MaybeRequiresStorage::new(body, &borrowed_locals_results)\n         .into_engine(tcx, body_ref)\n         .iterate_to_fixpoint();\n     let mut requires_storage_cursor =\n-        dataflow::ResultsCursor::new(body_ref, &requires_storage_results);\n+        rustc_mir_dataflow::ResultsCursor::new(body_ref, &requires_storage_results);\n \n     // Calculate the liveness of MIR locals ignoring borrows.\n     let mut liveness = MaybeLiveLocals\n@@ -616,7 +616,7 @@ fn compute_storage_conflicts(\n     body: &'mir Body<'tcx>,\n     saved_locals: &GeneratorSavedLocals,\n     always_live_locals: storage::AlwaysLiveLocals,\n-    requires_storage: dataflow::Results<'tcx, MaybeRequiresStorage<'mir, 'tcx>>,\n+    requires_storage: rustc_mir_dataflow::Results<'tcx, MaybeRequiresStorage<'mir, 'tcx>>,\n ) -> BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal> {\n     assert_eq!(body.local_decls.len(), saved_locals.domain_size());\n \n@@ -671,7 +671,7 @@ struct StorageConflictVisitor<'mir, 'tcx, 's> {\n     local_conflicts: BitMatrix<Local, Local>,\n }\n \n-impl dataflow::ResultsVisitor<'mir, 'tcx> for StorageConflictVisitor<'mir, 'tcx, '_> {\n+impl rustc_mir_dataflow::ResultsVisitor<'mir, 'tcx> for StorageConflictVisitor<'mir, 'tcx, '_> {\n     type FlowState = BitSet<Local>;\n \n     fn visit_statement_before_primary_effect(\n@@ -865,8 +865,8 @@ fn insert_switch<'tcx>(\n \n fn elaborate_generator_drops<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     use crate::shim::DropShimElaborator;\n-    use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n-    use crate::util::patch::MirPatch;\n+    use rustc_middle::mir::patch::MirPatch;\n+    use rustc_mir_dataflow::elaborate_drops::{elaborate_drop, Unwind};\n \n     // Note that `elaborate_drops` only drops the upvars of a generator, and\n     // this is ok because `open_drop` can only be reached within that own"}, {"sha": "2c8bdf4a2075049e75f241d4b7165a95172188b1", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -75,9 +75,9 @@ mod unreachable_prop;\n \n use rustc_mir::transform::check_consts;\n use rustc_mir::transform::promote_consts;\n-use rustc_mir::transform::rustc_peek;\n use rustc_mir::transform::validate;\n use rustc_mir::transform::MirPass;\n+use rustc_mir_dataflow::rustc_peek;\n \n pub fn provide(providers: &mut Providers) {\n     check_unsafety::provide(providers);\n@@ -274,7 +274,7 @@ fn mir_const<'tcx>(\n \n     let mut body = tcx.mir_built(def).steal();\n \n-    util::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n+    rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n \n     run_passes(\n         tcx,"}, {"sha": "298bcd9dc24f98664f981b91e47186d8c0056ca1", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -1,6 +1,6 @@\n-use crate::util::patch::MirPatch;\n use crate::MirPass;\n use rustc_index::bit_set::BitSet;\n+use rustc_middle::mir::patch::MirPatch;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n use rustc_target::spec::PanicStrategy;"}, {"sha": "4d350fc87cb3aebbb3db0c9654af20e3526fbd33", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -15,13 +15,13 @@ use rustc_target::spec::abi::Abi;\n use std::fmt;\n use std::iter;\n \n-use crate::util::elaborate_drops::{self, DropElaborator, DropFlagMode, DropStyle};\n use crate::util::expand_aggregate;\n-use crate::util::patch::MirPatch;\n use crate::{\n     abort_unwinding_calls, add_call_guards, add_moves_for_packed_drops, remove_noop_landing_pads,\n     run_passes, simplify,\n };\n+use rustc_middle::mir::patch::MirPatch;\n+use rustc_mir_dataflow::elaborate_drops::{self, DropElaborator, DropFlagMode, DropStyle};\n \n pub fn provide(providers: &mut Providers) {\n     providers.mir_shims = make_shim;\n@@ -940,7 +940,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n         span,\n     );\n \n-    crate::util::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n+    rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));\n \n     body\n }"}, {"sha": "3c6faf117fde501d38d4fe897f80e0db537658bb", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -31,7 +31,7 @@ extern crate rustc_infer;\n extern crate rustc_lexer;\n extern crate rustc_lint;\n extern crate rustc_middle;\n-extern crate rustc_mir;\n+extern crate rustc_mir_dataflow;\n extern crate rustc_parse;\n extern crate rustc_parse_format;\n extern crate rustc_session;"}, {"sha": "7041e4f980ef435cdecbb8c77675c7b2a08fef1f", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd9c04fe32d3b7700d600ae1be72d5758ffd66ff/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=fd9c04fe32d3b7700d600ae1be72d5758ffd66ff", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::{\n     Mutability,\n };\n use rustc_middle::ty::{self, fold::TypeVisitor, Ty, TyCtxt};\n-use rustc_mir::dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n+use rustc_mir_dataflow::{Analysis, AnalysisDomain, GenKill, GenKillAnalysis, ResultsCursor};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::sym;\n@@ -625,7 +625,10 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                 .flat_map(HybridBitSet::iter)\n                 .collect();\n \n-            if ContainsRegion(self.cx.tcx).visit_ty(self.body.local_decls[*dest].ty).is_break() {\n+            if ContainsRegion(self.cx.tcx)\n+                .visit_ty(self.body.local_decls[*dest].ty)\n+                .is_break()\n+            {\n                 mutable_variables.push(*dest);\n             }\n "}]}