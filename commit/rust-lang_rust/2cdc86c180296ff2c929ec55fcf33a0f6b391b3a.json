{"sha": "2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZGM4NmMxODAyOTZmZjJjOTI5ZWM1NWZjZjMzYTBmNmIzOTFiM2E=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-13T04:02:56Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-15T16:51:14Z"}, "message": "syntax: add fully qualified UFCS expressions.", "tree": {"sha": "1d9e7cc7086adb4c17ba82171d3696ac633a8648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d9e7cc7086adb4c17ba82171d3696ac633a8648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "html_url": "https://github.com/rust-lang/rust/commit/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c78ad937b4da9dd872b0a865025f3e2e885f90d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c78ad937b4da9dd872b0a865025f3e2e885f90d", "html_url": "https://github.com/rust-lang/rust/commit/1c78ad937b4da9dd872b0a865025f3e2e885f90d"}], "stats": {"total": 131, "additions": 89, "deletions": 42}, "files": [{"sha": "59808b302f47dff362678a63eb41cf1b073fffbf", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -1731,7 +1731,7 @@ impl LintPass for Stability {\n         let mut span = e.span;\n \n         let id = match e.node {\n-            ast::ExprPath(..) | ast::ExprStruct(..) => {\n+            ast::ExprPath(..) | ast::ExprQPath(..) | ast::ExprStruct(..) => {\n                 match cx.tcx.def_map.borrow().get(&e.id) {\n                     Some(&def) => def.def_id(),\n                     None => return"}, {"sha": "07b520e5865b233b28e666d4b9dcfe1d32b7d118", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -495,7 +495,8 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             ast::ExprMac(..) |\n             ast::ExprClosure(..) |\n             ast::ExprLit(..) |\n-            ast::ExprPath(..) => {\n+            ast::ExprPath(..) |\n+            ast::ExprQPath(..) => {\n                 self.straightline(expr, pred, None::<ast::Expr>.iter())\n             }\n         }"}, {"sha": "202020a9033ed9ced58f1411ddf0573dbcf9ef5a", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -111,7 +111,7 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &ast::Expr) {\n                            expression\");\n             }\n         }\n-        ast::ExprPath(_) => {\n+        ast::ExprPath(_) | ast::ExprQPath(_) => {\n             match v.tcx.def_map.borrow()[e.id] {\n                 DefStatic(..) | DefConst(..) |\n                 DefFn(..) | DefStaticMethod(..) | DefMethod(..) |"}, {"sha": "026aa3c5ccf837d710b72c5db398759c010aa9c1", "filename": "src/librustc/middle/check_static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckStaticVisitor<'a, 'tcx> {\n                           \"{} are not allowed to have custom pointers\",\n                           self.msg());\n             }\n-            ast::ExprPath(..) => {\n+            ast::ExprPath(_) | ast::ExprQPath(_) => {\n                 match ty::resolve_expr(self.tcx, e) {\n                     def::DefStatic(..) if self.mode == InConstant => {\n                         let msg = \"constants cannot refer to other statics, \\"}, {"sha": "86a58dae45aa4c96676b6df893f1a8a2ba46a0c5", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -93,7 +93,7 @@ impl<'a, 'ast, 'v> Visitor<'v> for CheckItemRecursionVisitor<'a, 'ast> {\n \n     fn visit_expr(&mut self, e: &ast::Expr) {\n         match e.node {\n-            ast::ExprPath(..) => {\n+            ast::ExprPath(_) | ast::ExprQPath(_) => {\n                 match self.def_map.borrow().get(&e.id) {\n                     Some(&DefStatic(def_id, _)) |\n                     Some(&DefConst(def_id)) if"}, {"sha": "c998d178c22459b8c91a898ab4544370eed060d4", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'tcx> ConstEvalVisitor<'a, 'tcx> {\n \n             // FIXME: (#3728) we can probably do something CCI-ish\n             // surrounding nonlocal constants. But we don't yet.\n-            ast::ExprPath(_) => self.lookup_constness(e),\n+            ast::ExprPath(_) | ast::ExprQPath(_) => self.lookup_constness(e),\n \n             ast::ExprRepeat(..) => general_const,\n \n@@ -356,6 +356,13 @@ pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr) -> P<ast::Pat> {\n             }\n         }\n \n+        ast::ExprQPath(_) => {\n+            match lookup_const(tcx, expr) {\n+                Some(actual) => return const_expr_to_pat(tcx, actual),\n+                _ => unreachable!()\n+            }\n+        }\n+\n         _ => ast::PatLit(P(expr.clone()))\n     };\n     P(ast::Pat { id: expr.id, node: pat, span: expr.span })\n@@ -542,7 +549,7 @@ pub fn eval_const_expr_partial(tcx: &ty::ctxt, e: &Expr) -> Result<const_val, St\n                 ty::ty_float(ast::TyF64) => (f64, const_float, f64)\n             }))\n       }\n-      ast::ExprPath(_) => {\n+      ast::ExprPath(_) | ast::ExprQPath(_) => {\n           match lookup_const(tcx, e) {\n               Some(actual_e) => eval_const_expr_partial(tcx, &*actual_e),\n               None => Err(\"non-constant path in constant expr\".to_string())"}, {"sha": "abb8f35f662b5e07604f03d873a7d0861a8b9c99", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -175,7 +175,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n             ast::ExprInlineAsm(..) => {\n                 self.require_unsafe(expr.span, \"use of inline assembly\");\n             }\n-            ast::ExprPath(..) => {\n+            ast::ExprPath(_) | ast::ExprQPath(_) => {\n                 if let def::DefStatic(_, true) = ty::resolve_expr(self.tcx, expr) {\n                     self.require_unsafe(expr.span, \"use of mutable static\");\n                 }"}, {"sha": "a5f2dc398e9e2fddb71b4a1ff81811a591a65d3d", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -424,7 +424,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                 self.walk_expr(&**subexpr)\n             }\n \n-            ast::ExprPath(..) => { }\n+            ast::ExprPath(_) | ast::ExprQPath(_) => { }\n \n             ast::ExprUnary(ast::UnDeref, ref base) => {      // *base\n                 if !self.walk_overloaded_operator(expr, &**base, Vec::new(), PassArgs::ByRef) {"}, {"sha": "6b9e5b2ceea3a6d4ba40df2e5724cc09717f9430", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -447,7 +447,7 @@ fn visit_arm(ir: &mut IrMaps, arm: &ast::Arm) {\n fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n     match expr.node {\n       // live nodes required for uses or definitions of variables:\n-      ast::ExprPath(_) => {\n+      ast::ExprPath(_) | ast::ExprQPath(_) => {\n         let def = ir.tcx.def_map.borrow()[expr.id].clone();\n         debug!(\"expr {}: path that leads to {:?}\", expr.id, def);\n         if let DefLocal(..) = def {\n@@ -960,7 +960,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         match expr.node {\n           // Interesting cases with control flow or which gen/kill\n \n-          ast::ExprPath(_) => {\n+          ast::ExprPath(_) | ast::ExprQPath(_) => {\n               self.access_path(expr, succ, ACC_READ | ACC_USE)\n           }\n \n@@ -1289,7 +1289,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n         // just ignore such cases and treat them as reads.\n \n         match expr.node {\n-            ast::ExprPath(_) => succ,\n+            ast::ExprPath(_) | ast::ExprQPath(_) => succ,\n             ast::ExprField(ref e, _) => self.propagate_through_expr(&**e, succ),\n             ast::ExprTupField(ref e, _) => self.propagate_through_expr(&**e, succ),\n             _ => self.propagate_through_expr(expr, succ)\n@@ -1300,7 +1300,9 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn write_lvalue(&mut self, expr: &Expr, succ: LiveNode, acc: uint)\n                     -> LiveNode {\n         match expr.node {\n-          ast::ExprPath(_) => self.access_path(expr, succ, acc),\n+          ast::ExprPath(_) | ast::ExprQPath(_) => {\n+              self.access_path(expr, succ, acc)\n+          }\n \n           // We do not track other lvalues, so just propagate through\n           // to their subcomponents.  Also, it may happen that\n@@ -1492,7 +1494,7 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       ast::ExprBlock(..) | ast::ExprMac(..) | ast::ExprAddrOf(..) |\n       ast::ExprStruct(..) | ast::ExprRepeat(..) | ast::ExprParen(..) |\n       ast::ExprClosure(..) | ast::ExprPath(..) | ast::ExprBox(..) |\n-      ast::ExprRange(..) => {\n+      ast::ExprRange(..) | ast::ExprQPath(..) => {\n         visit::walk_expr(this, expr);\n       }\n       ast::ExprIfLet(..) => {\n@@ -1583,7 +1585,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn check_lvalue(&mut self, expr: &Expr) {\n         match expr.node {\n-            ast::ExprPath(_) => {\n+            ast::ExprPath(_) | ast::ExprQPath(_) => {\n                 if let DefLocal(nid) = self.ir.tcx.def_map.borrow()[expr.id].clone() {\n                     // Assignment to an immutable variable or argument: only legal\n                     // if there is no later assignment. If this local is actually"}, {"sha": "90fe6b4991138d3fd8b45072efd8cf63f228be30", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -520,7 +520,7 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n             }\n           }\n \n-          ast::ExprPath(_) => {\n+          ast::ExprPath(_) | ast::ExprQPath(_) => {\n             let def = (*self.tcx().def_map.borrow())[expr.id];\n             self.cat_def(expr.id, expr.span, expr_ty, def)\n           }"}, {"sha": "b92870cfa42b0d181ce1e8f3be12771646bd588e", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -920,7 +920,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                                                             struct type?!\"),\n                 }\n             }\n-            ast::ExprPath(..) => {\n+            ast::ExprPath(_) | ast::ExprQPath(_) => {\n                 let guard = |&: did: ast::DefId| {\n                     let fields = ty::lookup_struct_fields(self.tcx, did);\n                     let any_priv = fields.iter().any(|f| {"}, {"sha": "b7e6da8c5f63aa29664cbaa9e7bfcd4a53fd20f4", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ReachableContext<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &ast::Expr) {\n \n         match expr.node {\n-            ast::ExprPath(_) => {\n+            ast::ExprPath(_) | ast::ExprQPath(_) => {\n                 let def = match self.tcx.def_map.borrow().get(&expr.id) {\n                     Some(&def) => def,\n                     None => {"}, {"sha": "525fe86cf24e6a710e712b7fd359d49bbcb42169", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -4515,7 +4515,7 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n     }\n \n     match expr.node {\n-        ast::ExprPath(..) => {\n+        ast::ExprPath(_) | ast::ExprQPath(_) => {\n             match resolve_expr(tcx, expr) {\n                 def::DefVariant(tid, vid, _) => {\n                     let variant_info = enum_variant_with_id(tcx, tid, vid);"}, {"sha": "789a87bbcdafcd63a2f1aca5e8d2df7739e00223", "filename": "src/librustc_back/svh.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_back%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_back%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fsvh.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -252,6 +252,7 @@ mod svh_visitor {\n         SawExprIndex,\n         SawExprRange,\n         SawExprPath,\n+        SawExprQPath,\n         SawExprAddrOf(ast::Mutability),\n         SawExprRet,\n         SawExprInlineAsm(&'a ast::InlineAsm),\n@@ -285,6 +286,7 @@ mod svh_visitor {\n             ExprIndex(..)            => SawExprIndex,\n             ExprRange(..)            => SawExprRange,\n             ExprPath(..)             => SawExprPath,\n+            ExprQPath(..)            => SawExprQPath,\n             ExprAddrOf(m, _)         => SawExprAddrOf(m),\n             ExprBreak(id)            => SawExprBreak(id.map(content)),\n             ExprAgain(id)            => SawExprAgain(id.map(content)),"}, {"sha": "b01604bd397532af2bf893c8caab5890ac287df1", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -1235,7 +1235,7 @@ pub fn trans_match<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n /// Checks whether the binding in `discr` is assigned to anywhere in the expression `body`\n fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool {\n     let (vid, field) = match discr.node {\n-        ast::ExprPath(..) => match bcx.def(discr.id) {\n+        ast::ExprPath(_) | ast::ExprQPath(_) => match bcx.def(discr.id) {\n             def::DefLocal(vid) | def::DefUpvar(vid, _, _) => (vid, None),\n             _ => return false\n         },"}, {"sha": "11006f37531d2b5ebcb90ddfa27c0379b5bcf782", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -91,8 +91,11 @@ fn trans<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, expr: &ast::Expr)\n     debug!(\"callee::trans(expr={})\", expr.repr(bcx.tcx()));\n \n     // pick out special kinds of expressions that can be called:\n-    if let ast::ExprPath(_) = expr.node {\n-        return trans_def(bcx, bcx.def(expr.id), expr);\n+    match expr.node {\n+        ast::ExprPath(_) | ast::ExprQPath(_) => {\n+            return trans_def(bcx, bcx.def(expr.id), expr);\n+        }\n+        _ => {}\n     }\n \n     // any other expressions are closures:"}, {"sha": "29cf9f72ef8e88e6d6f06ce974ece47a272b5428", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -600,7 +600,7 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr) -> ValueRef {\n                 C_array(llunitty, &vs[])\n             }\n           }\n-          ast::ExprPath(_) => {\n+          ast::ExprPath(_) | ast::ExprQPath(_) => {\n             let def = cx.tcx().def_map.borrow()[e.id];\n             match def {\n                 def::DefFn(..) | def::DefStaticMethod(..) | def::DefMethod(..) => {"}, {"sha": "d5416ae0631fcde6dc36d96865031a0d1e4002bf", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -3526,7 +3526,8 @@ fn create_scope_map(cx: &CrateContext,\n             ast::ExprLit(_)   |\n             ast::ExprBreak(_) |\n             ast::ExprAgain(_) |\n-            ast::ExprPath(_)  => {}\n+            ast::ExprPath(_)  |\n+            ast::ExprQPath(_) => {}\n \n             ast::ExprCast(ref sub_exp, _)     |\n             ast::ExprAddrOf(_, ref sub_exp)  |"}, {"sha": "0e921d8e5228373e3bd407c91e86bb0c61760567", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -564,7 +564,7 @@ fn trans_datum_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::ExprParen(ref e) => {\n             trans(bcx, &**e)\n         }\n-        ast::ExprPath(_) => {\n+        ast::ExprPath(_) | ast::ExprQPath(_) => {\n             trans_def(bcx, expr, bcx.def(expr.id))\n         }\n         ast::ExprField(ref base, ident) => {\n@@ -997,7 +997,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         ast::ExprParen(ref e) => {\n             trans_into(bcx, &**e, dest)\n         }\n-        ast::ExprPath(_) => {\n+        ast::ExprPath(_) | ast::ExprQPath(_) => {\n             trans_def_dps_unadjusted(bcx, expr, bcx.def(expr.id), dest)\n         }\n         ast::ExprIf(ref cond, ref thn, ref els) => {"}, {"sha": "27d31a3a2f7288674a4e9a2ae1d174981232e580", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -1001,9 +1001,12 @@ fn qpath_to_ty<'tcx>(this: &AstConv<'tcx>,\n \n     debug!(\"qpath_to_ty: trait_ref={}\", trait_ref.repr(this.tcx()));\n \n+    // `<T as Trait>::U<V>` shouldn't parse right now.\n+    assert!(qpath.item_path.parameters.is_empty());\n+\n     return this.projected_ty(ast_ty.span,\n                              trait_ref,\n-                             qpath.item_name.name);\n+                             qpath.item_path.identifier.name);\n }\n \n // Parses the programmer's textual representation of a type into our"}, {"sha": "8dc3adad3b27a010feae9758f61c427960daaf76", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -1614,7 +1614,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n impl Clean<Type> for ast::QPath {\n     fn clean(&self, cx: &DocContext) -> Type {\n         Type::QPath {\n-            name: self.item_name.clean(cx),\n+            name: self.item_path.identifier.clean(cx),\n             self_type: box self.self_type.clean(cx),\n             trait_: box self.trait_ref.clean(cx)\n         }"}, {"sha": "61bc1865517f6cf5157c557fa7f1d0648e662aaa", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -747,6 +747,8 @@ pub enum Expr_ {\n     /// Variable reference, possibly containing `::` and/or\n     /// type parameters, e.g. foo::bar::<baz>\n     ExprPath(Path),\n+    /// A \"qualified path\", e.g. `<Vec<T> as SomeTrait>::SomeType`\n+    ExprQPath(P<QPath>),\n \n     ExprAddrOf(Mutability, P<Expr>),\n     ExprBreak(Option<Ident>),\n@@ -771,12 +773,12 @@ pub enum Expr_ {\n ///\n ///     <Vec<T> as SomeTrait>::SomeAssociatedItem\n ///      ^~~~~     ^~~~~~~~~   ^~~~~~~~~~~~~~~~~~\n-///      self_type  trait_name  item_name\n+///      self_type  trait_name  item_path\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct QPath {\n     pub self_type: P<Ty>,\n     pub trait_ref: P<TraitRef>,\n-    pub item_name: Ident, // FIXME(#20301) -- should use Name\n+    pub item_path: PathSegment,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]"}, {"sha": "2a7043492959fb925027541dc583a5b478a6e2c2", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -454,7 +454,10 @@ pub fn noop_fold_qpath<T: Folder>(qpath: P<QPath>, fld: &mut T) -> P<QPath> {\n         QPath {\n             self_type: fld.fold_ty(qpath.self_type),\n             trait_ref: qpath.trait_ref.map(|tr| fld.fold_trait_ref(tr)),\n-            item_name: fld.fold_ident(qpath.item_name),\n+            item_path: PathSegment {\n+                identifier: fld.fold_ident(qpath.item_path.identifier),\n+                parameters: fld.fold_path_parameters(qpath.item_path.parameters),\n+            }\n         }\n     })\n }\n@@ -1381,6 +1384,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                           e2.map(|x| folder.fold_expr(x)))\n             }\n             ExprPath(pth) => ExprPath(folder.fold_path(pth)),\n+            ExprQPath(qpath) => ExprQPath(folder.fold_qpath(qpath)),\n             ExprBreak(opt_ident) => ExprBreak(opt_ident.map(|x| folder.fold_ident(x))),\n             ExprAgain(opt_ident) => ExprAgain(opt_ident.map(|x| folder.fold_ident(x))),\n             ExprRet(e) => ExprRet(e.map(|x| folder.fold_expr(x))),"}, {"sha": "ec6672d22a97a3dd9ba1b3f704c043ba99c0c16f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -727,14 +727,7 @@ impl<'a> State<'a> {\n                 try!(self.print_bounds(\"\", &bounds[]));\n             }\n             ast::TyQPath(ref qpath) => {\n-                try!(word(&mut self.s, \"<\"));\n-                try!(self.print_type(&*qpath.self_type));\n-                try!(space(&mut self.s));\n-                try!(self.word_space(\"as\"));\n-                try!(self.print_trait_ref(&*qpath.trait_ref));\n-                try!(word(&mut self.s, \">\"));\n-                try!(word(&mut self.s, \"::\"));\n-                try!(self.print_ident(qpath.item_name));\n+                try!(self.print_qpath(&**qpath, false))\n             }\n             ast::TyFixedLengthVec(ref ty, ref v) => {\n                 try!(word(&mut self.s, \"[\"));\n@@ -1749,6 +1742,7 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ExprPath(ref path) => try!(self.print_path(path, true)),\n+            ast::ExprQPath(ref qpath) => try!(self.print_qpath(&**qpath, true)),\n             ast::ExprBreak(opt_ident) => {\n                 try!(word(&mut self.s, \"break\"));\n                 try!(space(&mut self.s));\n@@ -1933,6 +1927,22 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n+    fn print_qpath(&mut self,\n+                   qpath: &ast::QPath,\n+                   colons_before_params: bool)\n+                   -> IoResult<()>\n+    {\n+        try!(word(&mut self.s, \"<\"));\n+        try!(self.print_type(&*qpath.self_type));\n+        try!(space(&mut self.s));\n+        try!(self.word_space(\"as\"));\n+        try!(self.print_trait_ref(&*qpath.trait_ref));\n+        try!(word(&mut self.s, \">\"));\n+        try!(word(&mut self.s, \"::\"));\n+        try!(self.print_ident(qpath.item_path.identifier));\n+        self.print_path_parameters(&qpath.item_path.parameters, colons_before_params)\n+    }\n+\n     fn print_path_parameters(&mut self,\n                              parameters: &ast::PathParameters,\n                              colons_before_params: bool)"}, {"sha": "7778b4fa34aa1e7c19c258dbba2f10ec30c0cf0b", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cdc86c180296ff2c929ec55fcf33a0f6b391b3a/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=2cdc86c180296ff2c929ec55fcf33a0f6b391b3a", "patch": "@@ -126,6 +126,9 @@ pub trait Visitor<'v> : Sized {\n     fn visit_path(&mut self, path: &'v Path, _id: ast::NodeId) {\n         walk_path(self, path)\n     }\n+    fn visit_qpath(&mut self, qpath_span: Span, qpath: &'v QPath) {\n+        walk_qpath(self, qpath_span, qpath)\n+    }\n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v PathSegment) {\n         walk_path_segment(self, path_span, path_segment)\n     }\n@@ -419,9 +422,7 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             walk_ty_param_bounds_helper(visitor, bounds);\n         }\n         TyQPath(ref qpath) => {\n-            visitor.visit_ty(&*qpath.self_type);\n-            visitor.visit_trait_ref(&*qpath.trait_ref);\n-            visitor.visit_ident(typ.span, qpath.item_name);\n+            visitor.visit_qpath(typ.span, &**qpath);\n         }\n         TyFixedLengthVec(ref ty, ref expression) => {\n             visitor.visit_ty(&**ty);\n@@ -450,6 +451,14 @@ pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n     }\n }\n \n+pub fn walk_qpath<'v, V: Visitor<'v>>(visitor: &mut V,\n+                                      qpath_span: Span,\n+                                      qpath: &'v QPath) {\n+    visitor.visit_ty(&*qpath.self_type);\n+    visitor.visit_trait_ref(&*qpath.trait_ref);\n+    visitor.visit_path_segment(qpath_span, &qpath.item_path);\n+}\n+\n pub fn walk_path_segment<'v, V: Visitor<'v>>(visitor: &mut V,\n                                              path_span: Span,\n                                              segment: &'v PathSegment) {\n@@ -881,6 +890,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprPath(ref path) => {\n             visitor.visit_path(path, expression.id)\n         }\n+        ExprQPath(ref qpath) => {\n+            visitor.visit_qpath(expression.span, &**qpath)\n+        }\n         ExprBreak(_) | ExprAgain(_) => {}\n         ExprRet(ref optional_expression) => {\n             walk_expr_opt(visitor, optional_expression)"}]}