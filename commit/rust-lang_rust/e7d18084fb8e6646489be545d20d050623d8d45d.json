{"sha": "e7d18084fb8e6646489be545d20d050623d8d45d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZDE4MDg0ZmI4ZTY2NDY0ODliZTU0NWQyMGQwNTA2MjNkOGQ0NWQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-10T06:59:21Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-12-10T06:59:21Z"}, "message": "Only check the assignment found at last\n\nIf there are more than one such assignment, the last one may be\nthe one supplied to `clone` method.\nMakes `find_stmt_assigns_to` internally reverses the iterator to make\nthe intent to \"iterate statements backward\" clear.", "tree": {"sha": "50414cc1bc3c925f384f794aac922c4088ae974e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50414cc1bc3c925f384f794aac922c4088ae974e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7d18084fb8e6646489be545d20d050623d8d45d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7d18084fb8e6646489be545d20d050623d8d45d", "html_url": "https://github.com/rust-lang/rust/commit/e7d18084fb8e6646489be545d20d050623d8d45d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7d18084fb8e6646489be545d20d050623d8d45d/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd9f5df36ca934405183ee8e7ba96b46b1f645f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd9f5df36ca934405183ee8e7ba96b46b1f645f2", "html_url": "https://github.com/rust-lang/rust/commit/fd9f5df36ca934405183ee8e7ba96b46b1f645f2"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "0d31129f30a063ea241c4d8dd6402223983614c5", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e7d18084fb8e6646489be545d20d050623d8d45d/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7d18084fb8e6646489be545d20d050623d8d45d/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=e7d18084fb8e6646489be545d20d050623d8d45d", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                 mir,\n                 arg,\n                 from_borrow,\n-                bbdata.statements.iter().rev()\n+                bbdata.statements.iter()\n             ));\n \n             if from_borrow && cannot_move_out {\n@@ -166,7 +166,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n                     mir,\n                     pred_arg,\n                     true,\n-                    mir[ps[0]].statements.iter().rev()\n+                    mir[ps[0]].statements.iter()\n                 ));\n                 if cannot_move_out {\n                     continue;\n@@ -257,23 +257,29 @@ fn find_stmt_assigns_to<'a, 'tcx: 'a>(\n     mir: &mir::Mir<'tcx>,\n     to: mir::Local,\n     by_ref: bool,\n-    mut stmts: impl Iterator<Item = &'a mir::Statement<'tcx>>,\n+    stmts: impl DoubleEndedIterator<Item = &'a mir::Statement<'tcx>>,\n ) -> Option<(mir::Local, CannotMoveOut)> {\n-    stmts.find_map(|stmt| {\n-        if let mir::StatementKind::Assign(mir::Place::Local(local), v) = &stmt.kind {\n-            if *local == to {\n-                if by_ref {\n-                    if let mir::Rvalue::Ref(_, _, ref place) = **v {\n-                        return base_local_and_movability(cx, mir, place);\n-                    }\n-                } else if let mir::Rvalue::Use(mir::Operand::Copy(ref place)) = **v {\n-                    return base_local_and_movability(cx, mir, place);\n+    stmts\n+        .rev()\n+        .find_map(|stmt| {\n+            if let mir::StatementKind::Assign(mir::Place::Local(local), v) = &stmt.kind {\n+                if *local == to {\n+                    return Some(v);\n                 }\n             }\n-        }\n \n-        None\n-    })\n+            None\n+        })\n+        .and_then(|v| {\n+            if by_ref {\n+                if let mir::Rvalue::Ref(_, _, ref place) = **v {\n+                    return base_local_and_movability(cx, mir, place);\n+                }\n+            } else if let mir::Rvalue::Use(mir::Operand::Copy(ref place)) = **v {\n+                return base_local_and_movability(cx, mir, place);\n+            }\n+            None\n+        })\n }\n \n /// Extracts and returns the undermost base `Local` of given `place`. Returns `place` itself"}]}