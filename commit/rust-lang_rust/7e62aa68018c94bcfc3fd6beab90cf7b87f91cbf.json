{"sha": "7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNjJhYTY4MDE4Yzk0YmNmYzNmZDZiZWFiOTBjZjdiODdmOTFjYmY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-16T20:02:46Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-16T20:02:46Z"}, "message": "Absent any deep overhauls to syntax or constant-handling, hack in the ability to project a cexp var binding to a token in the parser. Use it in comp/rustc.rc and comp/lib/llvm.rs.", "tree": {"sha": "ad8091a45871afa2685ec65f6c841fb0c942becf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad8091a45871afa2685ec65f6c841fb0c942becf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "html_url": "https://github.com/rust-lang/rust/commit/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "176899a970b5ccea7aea43bee31c9ee08860ab0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/176899a970b5ccea7aea43bee31c9ee08860ab0f", "html_url": "https://github.com/rust-lang/rust/commit/176899a970b5ccea7aea43bee31c9ee08860ab0f"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "9c1b40e1f215590b5c7ba8707c1d211a91ca823a", "filename": "src/boot/fe/cexp.ml", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fboot%2Ffe%2Fcexp.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fboot%2Ffe%2Fcexp.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fcexp.ml?ref=7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "patch": "@@ -310,7 +310,7 @@ type cdir =\n   | CDIR_mod of (Ast.ident * Ast.mod_item)\n   | CDIR_auth of auth\n \n-type env = { env_bindings: (Ast.ident * pval) list;\n+type env = { env_bindings: ((Ast.ident * pval) list) ref;\n              env_prefix: filename list;\n              env_items: (filename, Ast.mod_items) Hashtbl.t;\n              env_files: (node_id,filename) Hashtbl.t;\n@@ -357,10 +357,11 @@ and eval_cexp (env:env) (exp:cexp) : cdir array =\n     | CEXP_let {node=cl} ->\n         let ident = cl.let_ident in\n         let v = eval_pexp env cl.let_value in\n-        let env = { env with\n-                      env_bindings = ((ident,v)::env.env_bindings ) }\n-        in\n-          eval_cexps env cl.let_body\n+        let old_bindings = !(env.env_bindings) in\n+          env.env_bindings := (ident,v)::old_bindings;\n+          let res = eval_cexps env cl.let_body in\n+            env.env_bindings := old_bindings;\n+            res\n \n     | CEXP_src_mod {node=s; id=id} ->\n         let name = s.src_ident in\n@@ -381,6 +382,7 @@ and eval_cexp (env:env) (exp:cexp) : cdir array =\n             ps.pstate_opaque_id\n             ps.pstate_sess\n             ps.pstate_get_mod\n+            ps.pstate_get_cenv_tok\n             ps.pstate_infer_lib_name\n             env.env_required\n             env.env_required_syms\n@@ -518,7 +520,7 @@ and eval_pexp (env:env) (exp:Pexp.pexp) : pval =\n \n     | Pexp.PEXP_lval (Pexp.PLVAL_ident ident) ->\n         begin\n-          match ltab_search env.env_bindings ident with\n+          match ltab_search !(env.env_bindings) ident with\n               None -> raise (err (Printf.sprintf \"no binding for '%s' found\"\n                                     ident) env.env_ps)\n             | Some v -> v\n@@ -622,11 +624,6 @@ let parse_crate_file\n   let oref = ref (Opaque 0) in\n   let required = Hashtbl.create 4 in\n   let required_syms = Hashtbl.create 4 in\n-  let ps =\n-    make_parser tref nref oref sess get_mod\n-      infer_lib_name required required_syms fname\n-  in\n-\n   let files = Hashtbl.create 0 in\n   let items = Hashtbl.create 4 in\n   let target_bindings =\n@@ -648,11 +645,23 @@ let parse_crate_file\n       (\"build_input\", PVAL_str fname);\n     ]\n   in\n-  let initial_bindings =\n-    target_bindings\n-    @ build_bindings\n+  let bindings =\n+    ref (target_bindings\n+         @ build_bindings)\n   in\n-  let env = { env_bindings = initial_bindings;\n+  let get_cenv_tok ps ident =\n+      match ltab_search (!bindings) ident with\n+          None -> raise (err (Printf.sprintf \"no binding for '%s' found\"\n+                                ident) ps)\n+        | Some (PVAL_bool b) -> LIT_BOOL b\n+        | Some (PVAL_str s) -> LIT_STR s\n+        | Some (PVAL_num n) -> LIT_INT n\n+  in\n+  let ps =\n+    make_parser tref nref oref sess get_mod get_cenv_tok\n+      infer_lib_name required required_syms fname\n+  in\n+  let env = { env_bindings = bindings;\n               env_prefix = [Filename.dirname fname];\n               env_items = Hashtbl.create 0;\n               env_files = files;\n@@ -720,8 +729,12 @@ let parse_src_file\n   let oref = ref (Opaque 0) in\n   let required = Hashtbl.create 0 in\n   let required_syms = Hashtbl.create 0 in\n+  let get_cenv_tok ps ident =\n+    raise (err (Printf.sprintf \"no binding for '%s' found\"\n+                  ident) ps)\n+  in\n   let ps =\n-    make_parser tref nref oref sess get_mod\n+    make_parser tref nref oref sess get_mod get_cenv_tok\n       infer_lib_name required required_syms fname\n   in\n     with_err_handling sess"}, {"sha": "91a0c3dd909358a0f24082eb8c54974af067062a", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "patch": "@@ -786,9 +786,17 @@ and parse_mod_item (ps:pstate) : (Ast.ident * Ast.mod_item) =\n         EQ ->\n           begin\n             bump ps;\n-            match peek ps with\n-                LIT_STR s -> (bump ps; s)\n-              | _ -> raise (unexpected ps)\n+            let do_tok t =\n+              bump ps;\n+              match t with\n+                  LIT_STR s -> s\n+                | _ -> raise (unexpected ps)\n+            in\n+              match peek ps with\n+                  IDENT i ->\n+                    do_tok (ps.pstate_get_cenv_tok ps i)\n+                | t ->\n+                    do_tok t\n           end\n       | _ -> ps.pstate_infer_lib_name ident\n   in"}, {"sha": "4add7b01b0e3832265e931bd265f42ca2f781331", "filename": "src/boot/fe/parser.ml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fboot%2Ffe%2Fparser.ml", "raw_url": "https://github.com/rust-lang/rust/raw/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fboot%2Ffe%2Fparser.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fparser.ml?ref=7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "patch": "@@ -23,6 +23,7 @@ type pstate =\n       pstate_node_id      : node_id ref;\n       pstate_opaque_id    : opaque_id ref;\n       pstate_get_mod      : get_mod_fn;\n+      pstate_get_cenv_tok : pstate -> Ast.ident -> token;\n       pstate_infer_lib_name : (Ast.ident -> filename);\n       pstate_required       : (node_id, (required_lib * nabi_conv)) Hashtbl.t;\n       pstate_required_syms  : (node_id, string) Hashtbl.t; }\n@@ -45,6 +46,7 @@ let make_parser\n     (oref:opaque_id ref)\n     (sess:Session.sess)\n     (get_mod:get_mod_fn)\n+    (get_cenv_tok:pstate -> Ast.ident -> token)\n     (infer_lib_name:Ast.ident -> filename)\n     (required:(node_id, (required_lib * nabi_conv)) Hashtbl.t)\n     (required_syms:(node_id, string) Hashtbl.t)\n@@ -68,6 +70,7 @@ let make_parser\n         pstate_node_id = nref;\n         pstate_opaque_id = oref;\n         pstate_get_mod = get_mod;\n+        pstate_get_cenv_tok = get_cenv_tok;\n         pstate_infer_lib_name = infer_lib_name;\n         pstate_required = required;\n         pstate_required_syms = required_syms; }"}, {"sha": "e12108b68519716caaff00cb7ceb68727405329f", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "patch": "@@ -6,7 +6,7 @@ type LongLong = i64;\n type Long = i32;\n type Bool = int;\n \n-native mod llvm = \"libLLVM-2.7.so\" {\n+native mod llvm = llvm_lib {\n \n   type ModuleRef;\n   type ContextRef;"}, {"sha": "b61b8022d4e33ccd01a8d9a43ae740c2d60f1207", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=7e62aa68018c94bcfc3fd6beab90cf7b87f91cbf", "patch": "@@ -14,7 +14,23 @@ mod driver {\n }\n \n mod lib {\n-    mod llvm;\n+  alt (target_os) {\n+    case (\"win32\") {\n+      let (llvm_lib = \"llvm-2.8svn.dll\") {\n+        mod llvm;\n+      }\n+    }\n+    case (\"macos\") {\n+      let (llvm_lib = \"libllvm-2.8svn.dylib\") {\n+        mod llvm;\n+      }\n+    }\n+    else {\n+      let (llvm_lib = \"libllvm-2.8svn.so\") {\n+        mod llvm;\n+      }\n+    }\n+  }\n }\n \n // Local Variables:"}]}