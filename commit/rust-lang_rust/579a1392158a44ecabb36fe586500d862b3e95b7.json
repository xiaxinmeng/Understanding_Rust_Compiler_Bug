{"sha": "579a1392158a44ecabb36fe586500d862b3e95b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OWExMzkyMTU4YTQ0ZWNhYmIzNmZlNTg2NTAwZDg2MmIzZTk1Yjc=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-06-18T13:16:45Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-06-23T16:38:32Z"}, "message": "rustc: catch non-trait methods before typeck.\n\nCloses #3973.", "tree": {"sha": "0e228f6c1fff163c59b16197926465b6f0963eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e228f6c1fff163c59b16197926465b6f0963eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/579a1392158a44ecabb36fe586500d862b3e95b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/579a1392158a44ecabb36fe586500d862b3e95b7", "html_url": "https://github.com/rust-lang/rust/commit/579a1392158a44ecabb36fe586500d862b3e95b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/579a1392158a44ecabb36fe586500d862b3e95b7/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d77cb22bb6e5852c99d4c8f5d9de4b33b1b9381b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d77cb22bb6e5852c99d4c8f5d9de4b33b1b9381b", "html_url": "https://github.com/rust-lang/rust/commit/d77cb22bb6e5852c99d4c8f5d9de4b33b1b9381b"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "6c916272593dc9f0ff9188c9a65212eaa34f9e40", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/579a1392158a44ecabb36fe586500d862b3e95b7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579a1392158a44ecabb36fe586500d862b3e95b7/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=579a1392158a44ecabb36fe586500d862b3e95b7", "patch": "@@ -4021,6 +4021,9 @@ impl<'a> Resolver<'a> {\n \n                 this.with_current_self_type(self_type, |this| {\n                     for method in methods.iter() {\n+                        // If this is a trait impl, ensure the method exists in trait\n+                        this.check_trait_method(&**method);\n+\n                         // We also need a new scope for the method-specific type parameters.\n                         this.resolve_method(MethodRibKind(id, Provided(method.id)),\n                                             &**method);\n@@ -4030,6 +4033,21 @@ impl<'a> Resolver<'a> {\n         });\n     }\n \n+    fn check_trait_method(&self, method: &Method) {\n+        // If there is a TraitRef in scope for an impl, then the method must be in the trait.\n+        for &(did, ref trait_ref) in self.current_trait_ref.iter() {\n+            let method_name = method.ident.name;\n+\n+            if self.method_map.borrow().find(&(method_name, did)).is_none() {\n+                let path_str = self.path_idents_to_str(&trait_ref.path);\n+                self.resolve_error(method.span,\n+                                    format!(\"method `{}` is not a member of trait `{}`\",\n+                                            token::get_name(method_name),\n+                                            path_str).as_slice());\n+            }\n+        }\n+    }\n+\n     fn resolve_module(&mut self, module: &Mod, _span: Span,\n                       _name: Ident, id: NodeId) {\n         // Write the implementations in scope into the module metadata."}, {"sha": "04db13feff65489ea77c69ca0fba4a4289631f99", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/579a1392158a44ecabb36fe586500d862b3e95b7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579a1392158a44ecabb36fe586500d862b3e95b7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=579a1392158a44ecabb36fe586500d862b3e95b7", "patch": "@@ -784,7 +784,8 @@ fn check_impl_methods_against_trait(ccx: &CrateCtxt,\n                                     &impl_trait_ref.substs);\n             }\n             None => {\n-                tcx.sess.span_err(\n+                // This is span_bug as it should have already been caught in resolve.\n+                tcx.sess.span_bug(\n                     impl_method.span,\n                     format!(\n                         \"method `{}` is not a member of trait `{}`\","}, {"sha": "d2d7625842a07b9d94fb2c070ee21c7aa1806148", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/579a1392158a44ecabb36fe586500d862b3e95b7/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/579a1392158a44ecabb36fe586500d862b3e95b7/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=579a1392158a44ecabb36fe586500d862b3e95b7", "patch": "@@ -8,26 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test\n-\n-use std::io;\n-\n struct Point {\n     x: f64,\n     y: f64,\n }\n \n-impl ToStr for Point { //~ ERROR implements a method not defined in the trait\n+trait NewTrait {\n+    fn a(&self) -> String;\n+}\n+\n+impl NewTrait for Point {\n     fn new(x: f64, y: f64) -> Point {\n+    //~^ ERROR method `new` is not a member of trait `NewTrait`\n         Point { x: x, y: y }\n     }\n \n-    fn to_str(&self) -> String {\n+    fn a(&self) -> String {\n         format!(\"({}, {})\", self.x, self.y)\n     }\n }\n \n fn main() {\n     let p = Point::new(0.0, 0.0);\n-    println!(\"{}\", p.to_str());\n+    //~^ ERROR unresolved name `Point::new`\n+    //~^^ ERROR unresolved name\n+    //~^^^ ERROR use of undeclared module `Point`\n+    println!(\"{}\", p.a());\n }"}]}