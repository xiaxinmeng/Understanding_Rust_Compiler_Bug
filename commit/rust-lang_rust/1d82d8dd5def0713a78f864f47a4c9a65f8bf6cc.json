{"sha": "1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkODJkOGRkNWRlZjA3MTNhNzhmODY0ZjQ3YTRjOWE2NWY4YmY2Y2M=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-12T17:02:17Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-12T17:02:17Z"}, "message": "Revert \"librustc: Make monomorphic newtype structs work cross-crate\"\n\nThis reverts commit a8f039a085c7d7622899b7a4d1bebfe2d7621165.", "tree": {"sha": "dfd18eb18d9a4d7d7cf9a287ac8aa4ee985efe9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfd18eb18d9a4d7d7cf9a287ac8aa4ee985efe9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "html_url": "https://github.com/rust-lang/rust/commit/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8f039a085c7d7622899b7a4d1bebfe2d7621165", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f039a085c7d7622899b7a4d1bebfe2d7621165", "html_url": "https://github.com/rust-lang/rust/commit/a8f039a085c7d7622899b7a4d1bebfe2d7621165"}], "stats": {"total": 146, "additions": 37, "deletions": 109}, "files": [{"sha": "37c19e80600b7f9ddaf4d6debb68afc17cfb6bc1", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "patch": "@@ -153,7 +153,5 @@ pub const tag_lang_items_item: uint = 0x73;\n pub const tag_lang_items_item_id: uint = 0x74;\n pub const tag_lang_items_item_node_id: uint = 0x75;\n \n-pub const tag_item_unnamed_field: uint = 0x76;\n-\n pub type link_meta = {name: @str, vers: @str, extras_hash: @str};\n "}, {"sha": "2cb5cfbddd73015a52fa878d740232ab2f866c24", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "patch": "@@ -166,9 +166,8 @@ pub fn get_item_attrs(cstore: @mut cstore::CStore,\n     decoder::get_item_attrs(cdata, def_id.node, f)\n }\n \n-pub fn get_struct_fields(cstore: @mut cstore::CStore,\n-                         def: ast::def_id)\n-                      -> ~[ty::field_ty] {\n+pub fn get_struct_fields(tcx: ty::ctxt, def: ast::def_id) -> ~[ty::field_ty] {\n+    let cstore = tcx.cstore;\n     let cdata = cstore::get_crate_data(cstore, def.crate);\n     decoder::get_struct_fields(cstore.intr, cdata, def.node)\n }"}, {"sha": "67498ad5aafe6425babdac100d3b1202bbdac88f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "patch": "@@ -42,7 +42,7 @@ use std::serialize::Decodable;\n use syntax::ast_map;\n use syntax::attr;\n use syntax::diagnostic::span_handler;\n-use syntax::parse::token::{ident_interner, special_idents};\n+use syntax::parse::token::ident_interner;\n use syntax::print::pprust;\n use syntax::{ast, ast_util};\n use syntax::codemap;\n@@ -231,9 +231,7 @@ pub fn item_type(item_id: ast::def_id, item: ebml::Doc,\n     let t = doc_type(item, tcx, cdata);\n     if family_names_type(item_family(item)) {\n         ty::mk_with_id(tcx, t, item_id)\n-    } else {\n-        t\n-    }\n+    } else { t }\n }\n \n fn item_impl_traits(item: ebml::Doc, tcx: ty::ctxt, cdata: cmd) -> ~[ty::t] {\n@@ -663,12 +661,11 @@ fn item_impl_methods(intr: @ident_interner, cdata: cmd, item: ebml::Doc,\n     rslt\n }\n \n-pub fn get_impls_for_mod(intr: @ident_interner,\n-                         cdata: cmd,\n-                         m_id: ast::node_id,\n-                         name: Option<ast::ident>,\n-                         get_cdata: &fn(ast::crate_num) -> cmd)\n+pub fn get_impls_for_mod(intr: @ident_interner, cdata: cmd,\n+                         m_id: ast::node_id, name: Option<ast::ident>,\n+                         get_cdata: fn(ast::crate_num) -> cmd)\n                       -> @~[@_impl] {\n+\n     let data = cdata.data;\n     let mod_item = lookup_item(m_id, data);\n     let mut result = ~[];\n@@ -890,15 +887,6 @@ pub fn get_struct_fields(intr: @ident_interner, cdata: cmd, id: ast::node_id)\n             });\n         }\n     }\n-    for reader::tagged_docs(item, tag_item_unnamed_field) |an_item| {\n-        let did = item_def_id(an_item, cdata);\n-        result.push(ty::field_ty {\n-            ident: special_idents::unnamed_field,\n-            id: did,\n-            vis: ast::inherited,\n-            mutability: ast::struct_immutable,\n-        });\n-    }\n     result\n }\n "}, {"sha": "fcc1a4e806dffeefcc309557eba8f0a23b692a90", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 22, "deletions": 47, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "patch": "@@ -46,7 +46,6 @@ use syntax::ast_map;\n use syntax::ast_util::*;\n use syntax::attr;\n use syntax::diagnostic::span_handler;\n-use syntax::parse::token::special_idents;\n use syntax::print::pprust;\n use syntax::{ast_util, visit};\n use syntax;\n@@ -329,7 +328,7 @@ fn encode_info_for_mod(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n     // Encode info about all the module children.\n     for md.items.each |item| {\n         match item.node {\n-            item_impl(*) => {\n+            item_impl(*) | item_struct(*) => {\n                 let (ident, did) = (item.ident, item.id);\n                 debug!(\"(encoding info for module) ... encoding impl %s \\\n                         (%?/%?)\",\n@@ -433,28 +432,25 @@ fn encode_info_for_struct(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n      /* We encode both private and public fields -- need to include\n         private fields to get the offsets right */\n     for fields.each |field| {\n-        let (nm, mt, vis) = match field.node.kind {\n-            named_field(nm, mt, vis) => (nm, mt, vis),\n-            unnamed_field => (\n-                special_idents::unnamed_field,\n-                struct_immutable,\n-                inherited\n-            )\n-        };\n-\n-        let id = field.node.id;\n-        index.push({val: id, pos: ebml_w.writer.tell()});\n-        global_index.push({val: id, pos: ebml_w.writer.tell()});\n-        ebml_w.start_tag(tag_items_data_item);\n-        debug!(\"encode_info_for_struct: doing %s %d\",\n-               tcx.sess.str_of(nm), id);\n-        encode_visibility(ebml_w, vis);\n-        encode_name(ecx, ebml_w, nm);\n-        encode_path(ecx, ebml_w, path, ast_map::path_name(nm));\n-        encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n-        encode_mutability(ebml_w, mt);\n-        encode_def_id(ebml_w, local_def(id));\n-        ebml_w.end_tag();\n+        match field.node.kind {\n+            named_field(nm, mt, vis) => {\n+                let id = field.node.id;\n+                index.push({val: id, pos: ebml_w.writer.tell()});\n+                global_index.push({val: id,\n+                                    pos: ebml_w.writer.tell()});\n+                ebml_w.start_tag(tag_items_data_item);\n+                debug!(\"encode_info_for_struct: doing %s %d\",\n+                       tcx.sess.str_of(nm), id);\n+                encode_visibility(ebml_w, vis);\n+                encode_name(ecx, ebml_w, nm);\n+                encode_path(ecx, ebml_w, path, ast_map::path_name(nm));\n+                encode_type(ecx, ebml_w, node_id_to_type(tcx, id));\n+                encode_mutability(ebml_w, mt);\n+                encode_def_id(ebml_w, local_def(id));\n+                ebml_w.end_tag();\n+            }\n+            unnamed_field => {}\n+        }\n     }\n     /*bad*/copy *index\n }\n@@ -677,24 +673,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n         encode_def_id(ebml_w, local_def(item.id));\n         encode_family(ebml_w, 'S');\n         encode_type_param_bounds(ebml_w, ecx, tps);\n-\n-        // If this is a tuple- or enum-like struct, encode the type of the\n-        // constructor. Otherwise, encode the type of the struct.\n-        if struct_def.fields.len() > 0 &&\n-                struct_def.fields[0].node.kind == ast::unnamed_field {\n-            // Tuple- or enum-like struct.\n-            let ctor_id = match struct_def.ctor_id {\n-                Some(ctor_id) => ctor_id,\n-                None => ecx.tcx.sess.bug(~\"struct def didn't have ctor id\"),\n-            };\n-            encode_type(ecx, ebml_w, node_id_to_type(tcx, ctor_id));\n-\n-            // Also encode the symbol.\n-            encode_symbol(ecx, ebml_w, ctor_id);\n-        } else {\n-            encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n-        }\n-\n+        encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n         encode_name(ecx, ebml_w, item.ident);\n         encode_path(ecx, ebml_w, path, ast_map::path_name(item.ident));\n         encode_region_param(ecx, ebml_w, item);\n@@ -718,11 +697,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: writer::Encoder,\n                    encode_def_id(ebml_w, local_def(f.node.id));\n                    ebml_w.end_tag();\n                 }\n-                unnamed_field => {\n-                    ebml_w.start_tag(tag_item_unnamed_field);\n-                    encode_def_id(ebml_w, local_def(f.node.id));\n-                    ebml_w.end_tag();\n-                }\n+                unnamed_field => {}\n             }\n         }\n "}, {"sha": "ba550dbbde8ed62b266fb685d3ae743e6acd52f1", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "patch": "@@ -13,8 +13,7 @@ use core::prelude::*;\n use driver::session;\n use driver::session::Session;\n use metadata::csearch::{each_path, get_method_names_if_trait};\n-use metadata::csearch::{get_static_methods_if_impl, get_struct_fields};\n-use metadata::csearch::{get_type_name_if_impl};\n+use metadata::csearch::{get_static_methods_if_impl, get_type_name_if_impl};\n use metadata::cstore::find_use_stmt_cnum;\n use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n use middle::lang_items::LanguageItems;\n@@ -1660,14 +1659,6 @@ pub impl Resolver {\n                     crate) building type %s\",\n                    final_ident);\n             child_name_bindings.define_type(Public, def, dummy_sp());\n-\n-            // Define the struct constructor if this is a tuple-like struct.\n-            let fields = get_struct_fields(self.session.cstore, def_id);\n-            if fields.len() != 0 &&\n-                    fields[0].ident == special_idents::unnamed_field {\n-                child_name_bindings.define_value(Public, def, dummy_sp());\n-            }\n-\n             self.structs.insert(def_id, ());\n           }\n           def_self(*) | def_arg(*) | def_local(*) |\n@@ -1754,12 +1745,10 @@ pub impl Resolver {\n                                        OverwriteDuplicates,\n                                        dummy_sp());\n \n-                    self.handle_external_def(def,\n-                                             modules,\n+                    self.handle_external_def(def, modules,\n                                              child_name_bindings,\n                                              self.session.str_of(final_ident),\n-                                             final_ident,\n-                                             new_parent);\n+                                             final_ident, new_parent);\n                 }\n                 dl_impl(def) => {\n                     // We only process static methods of impls here."}, {"sha": "ced47bb5681b16fb366008be3e770e891515562e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "patch": "@@ -1905,13 +1905,8 @@ pub fn trans_tuple_struct(ccx: @crate_ctxt,\n         }\n     };\n \n-    let fcx = new_fn_ctxt_w_id(ccx,\n-                               ~[],\n-                               llfndecl,\n-                               ctor_id,\n-                               None,\n-                               param_substs,\n-                               None);\n+    let fcx = new_fn_ctxt_w_id(ccx, ~[], llfndecl, ctor_id, None,\n+                               param_substs, None);\n \n     // XXX: Bad copy.\n     let raw_llargs = create_llargs_for_fn_args(fcx, no_self, copy fn_args);"}, {"sha": "f77aa33407d105d6a475bb49c4e2aa9f0f620927", "filename": "src/librustc/middle/trans/reachable.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freachable.rs?ref=1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "patch": "@@ -122,9 +122,6 @@ fn traverse_public_item(cx: ctx, item: @item) {\n         }\n       }\n       item_struct(struct_def, tps) => {\n-        for struct_def.ctor_id.each |&ctor_id| {\n-            cx.rmap.insert(ctor_id, ());\n-        }\n         do option::iter(&struct_def.dtor) |dtor| {\n             cx.rmap.insert(dtor.node.id, ());\n             if tps.len() > 0u || attr::find_inline_attr(dtor.node.attrs)"}, {"sha": "4350c62af6fc3155e1ca92a4cb2ab64723b718c4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "patch": "@@ -4011,7 +4011,7 @@ pub fn lookup_struct_fields(cx: ctxt, did: ast::def_id) -> ~[field_ty] {\n     }\n         }\n   else {\n-        return csearch::get_struct_fields(cx.sess.cstore, did);\n+        return csearch::get_struct_fields(cx, did);\n     }\n }\n "}, {"sha": "5e51c216093009e943e42110f8c32e807c599b2e", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=1d82d8dd5def0713a78f864f47a4c9a65f8bf6cc", "patch": "@@ -828,7 +828,7 @@ pub impl CoherenceChecker {\n         let implementations = get_impls_for_mod(crate_store,\n                                                 module_def_id,\n                                                 None);\n-        for implementations.each |implementation| {\n+        for (*implementations).each |implementation| {\n             debug!(\"coherence: adding impl from external crate: %s\",\n                    ty::item_path_str(self.crate_context.tcx,\n                                      implementation.did));"}, {"sha": "90036e0f96cd8610c1dd42daea17006110aaae83", "filename": "src/test/auxiliary/newtype_struct_xc.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8f039a085c7d7622899b7a4d1bebfe2d7621165/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f039a085c7d7622899b7a4d1bebfe2d7621165/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnewtype_struct_xc.rs?ref=a8f039a085c7d7622899b7a4d1bebfe2d7621165", "patch": "@@ -1,4 +0,0 @@\n-#[crate_type=\"lib\"];\n-\n-pub struct Au(int);\n-"}, {"sha": "8b15d73dc933d28d27b163c616bb94afa8e43dba", "filename": "src/test/run-pass/newtype-struct-xc.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8f039a085c7d7622899b7a4d1bebfe2d7621165/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f039a085c7d7622899b7a4d1bebfe2d7621165/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-struct-xc.rs?ref=a8f039a085c7d7622899b7a4d1bebfe2d7621165", "patch": "@@ -1,9 +0,0 @@\n-// xfail-fast\n-// aux-build:newtype_struct_xc.rs\n-\n-extern mod newtype_struct_xc;\n-\n-fn main() {\n-    let _ = newtype_struct_xc::Au(2);\n-}\n-"}]}