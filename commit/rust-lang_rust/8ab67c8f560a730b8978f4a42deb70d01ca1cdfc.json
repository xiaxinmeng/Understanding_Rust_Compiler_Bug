{"sha": "8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYjY3YzhmNTYwYTczMGI4OTc4ZjRhNDJkZWI3MGQwMWNhMWNkZmM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-14T20:17:11Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-09-15T08:15:38Z"}, "message": "Remove `with_legacy_ctxt`", "tree": {"sha": "5b6728330dafce3a7036175624022ec9168e1e05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b6728330dafce3a7036175624022ec9168e1e05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "html_url": "https://github.com/rust-lang/rust/commit/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ae3830d589ec75494ff26bd9c92e9f77e49173f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ae3830d589ec75494ff26bd9c92e9f77e49173f", "html_url": "https://github.com/rust-lang/rust/commit/5ae3830d589ec75494ff26bd9c92e9f77e49173f"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "384c0555c85bd683ed43353f2dfdcacc1003f857", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -977,13 +977,6 @@ impl<'a> ExtCtxt<'a> {\n         span.with_call_site_ctxt(self.current_expansion.id)\n     }\n \n-    /// Span with a context reproducing `macro_rules` hygiene (hygienic locals, unhygienic items).\n-    /// FIXME: This should be eventually replaced either with `with_def_site_ctxt` (preferably),\n-    /// or with `with_call_site_ctxt` (where necessary).\n-    pub fn with_legacy_ctxt(&self, span: Span) -> Span {\n-        span.with_legacy_ctxt(self.current_expansion.id)\n-    }\n-\n     /// Returns span for the macro which originally caused the current expansion to happen.\n     ///\n     /// Stops backtracing at include! boundary."}, {"sha": "75d727b9fb60b5f640fbc3456b0f9a900d45befb", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -62,7 +62,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprKind::InlineAsm(P(inline_asm)),\n-        span: cx.with_legacy_ctxt(sp),\n+        span: cx.with_def_site_ctxt(sp),\n         attrs: ThinVec::new(),\n     }))\n }"}, {"sha": "cbfe14fa439be85152b65d5885ed3131e004dc2c", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -23,7 +23,9 @@ pub fn expand_assert<'cx>(\n         }\n     };\n \n-    let sp = cx.with_legacy_ctxt(sp);\n+    // `core::panic` and `std::panic` are different macros, so we use call-site\n+    // context to pick up whichever is currently in scope.\n+    let sp = cx.with_call_site_ctxt(sp);\n     let panic_call = Mac {\n         path: Path::from_ident(Ident::new(sym::panic, sp)),\n         tts: custom_message.unwrap_or_else(|| {"}, {"sha": "3c33baf95a597705c44abc8f1baf21d82e746b31", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -16,7 +16,7 @@ pub fn expand_cfg(\n     sp: Span,\n     tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n-    let sp = cx.with_legacy_ctxt(sp);\n+    let sp = cx.with_def_site_ctxt(sp);\n \n     match parse_cfg(cx, sp, tts) {\n         Ok(cfg) => {"}, {"sha": "16f016036ea5e5b03361277e8c7b29a8a4230265", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -59,6 +59,6 @@ pub fn expand_concat(\n     } else if has_errors {\n         return DummyResult::any(sp);\n     }\n-    let sp = cx.with_legacy_ctxt(sp);\n+    let sp = cx.with_def_site_ctxt(sp);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&accumulator)))\n }"}, {"sha": "f344706d4ebf5a876420167c861b4fa8d26a4722", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -39,7 +39,7 @@ pub fn expand_concat_idents<'cx>(cx: &'cx mut ExtCtxt<'_>,\n         }\n     }\n \n-    let ident = ast::Ident::new(Symbol::intern(&res_str), cx.with_legacy_ctxt(sp));\n+    let ident = ast::Ident::new(Symbol::intern(&res_str), cx.with_call_site_ctxt(sp));\n \n     struct ConcatIdentsResult { ident: ast::Ident }\n "}, {"sha": "70e1fbe6af78aa8568f6a6f34548fb83fcf8a682", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -20,7 +20,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n         Some(v) => v,\n     };\n \n-    let sp = cx.with_legacy_ctxt(sp);\n+    let sp = cx.with_def_site_ctxt(sp);\n     let e = match env::var(&*var.as_str()) {\n         Err(..) => {\n             let lt = cx.lifetime(sp, Ident::new(kw::StaticLifetime, sp));"}, {"sha": "19a87e6dc6d745e4d471583d2258c107796c1ad5", "filename": "src/libsyntax_ext/global_allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fglobal_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_allocator.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -28,7 +28,7 @@ pub fn expand(\n     };\n \n     // Generate a bunch of new items using the AllocFnFactory\n-    let span = ecx.with_legacy_ctxt(item.span);\n+    let span = ecx.with_def_site_ctxt(item.span);\n     let f = AllocFnFactory {\n         span,\n         kind: AllocatorKind::Global,"}, {"sha": "c56b3f3fc808fc057c55e5fb1221878b61636495", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -30,7 +30,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                 id: ast::DUMMY_NODE_ID,\n                 node: ast::ItemKind::GlobalAsm(P(global_asm)),\n                 vis: respan(sp.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-                span: cx.with_legacy_ctxt(sp),\n+                span: cx.with_def_site_ctxt(sp),\n                 tokens: None,\n             })])\n         }"}, {"sha": "ca177eb4a361654c064e6d137c1d8f939ac3bb3c", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -526,13 +526,6 @@ impl Span {\n         self.with_ctxt_from_mark(expn_id, Transparency::Transparent)\n     }\n \n-    /// Span with a context reproducing `macro_rules` hygiene (hygienic locals, unhygienic items).\n-    /// FIXME: This should be eventually replaced either with `with_def_site_ctxt` (preferably),\n-    /// or with `with_call_site_ctxt` (where necessary).\n-    pub fn with_legacy_ctxt(&self, expn_id: ExpnId) -> Span {\n-        self.with_ctxt_from_mark(expn_id, Transparency::SemiTransparent)\n-    }\n-\n     /// Produces a span with the same location as `self` and context produced by a macro with the\n     /// given ID and transparency, assuming that macro was defined directly and not produced by\n     /// some other macro (which is the case for built-in and procedural macros)."}, {"sha": "9bd8406a27608dd0aa4899fbc1f9ab4c3df5da7d", "filename": "src/test/ui/allocator/hygiene.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Ftest%2Fui%2Fallocator%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Ftest%2Fui%2Fallocator%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fallocator%2Fhygiene.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+// no-prefer-dynamic\n+// aux-build:custom.rs\n+// aux-build:helper.rs\n+\n+#![allow(nonstandard_style)]\n+\n+extern crate custom;\n+extern crate helper;\n+\n+use custom::A;\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+\n+#[allow(dead_code)]\n+struct u8;\n+#[allow(dead_code)]\n+struct usize;\n+#[allow(dead_code)]\n+static arg0: () = ();\n+\n+#[global_allocator]\n+pub static GLOBAL: A = A(AtomicUsize::new(0));\n+\n+fn main() {\n+    let n = GLOBAL.0.load(Ordering::SeqCst);\n+    let s = Box::new(0);\n+    helper::work_with(&s);\n+    assert_eq!(GLOBAL.0.load(Ordering::SeqCst), n + 1);\n+    drop(s);\n+    assert_eq!(GLOBAL.0.load(Ordering::SeqCst), n + 2);\n+}"}, {"sha": "2d6710af392709f5cb3251bbb52193db9f17d294", "filename": "src/test/ui/syntax-extension-minor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Ftest%2Fui%2Fsyntax-extension-minor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab67c8f560a730b8978f4a42deb70d01ca1cdfc/src%2Ftest%2Fui%2Fsyntax-extension-minor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-extension-minor.rs?ref=8ab67c8f560a730b8978f4a42deb70d01ca1cdfc", "patch": "@@ -1,14 +1,14 @@\n+// run-pass\n+\n #![feature(concat_idents)]\n \n pub fn main() {\n     struct Foo;\n     let _: concat_idents!(F, oo) = Foo; // Test that `concat_idents!` can be used in type positions\n \n     let asdf_fdsa = \"<.<\".to_string();\n-    // this now fails (correctly, I claim) because hygiene prevents\n-    // the assembled identifier from being a reference to the binding.\n+    // concat_idents should have call-site hygiene.\n     assert!(concat_idents!(asd, f_f, dsa) == \"<.<\".to_string());\n-    //~^ ERROR cannot find value `asdf_fdsa` in this scope\n \n     assert_eq!(stringify!(use_mention_distinction), \"use_mention_distinction\");\n }"}, {"sha": "2d8056da527c613d562fcd3e3b072d1b8786d865", "filename": "src/test/ui/syntax-extension-minor.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5ae3830d589ec75494ff26bd9c92e9f77e49173f/src%2Ftest%2Fui%2Fsyntax-extension-minor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ae3830d589ec75494ff26bd9c92e9f77e49173f/src%2Ftest%2Fui%2Fsyntax-extension-minor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-extension-minor.stderr?ref=5ae3830d589ec75494ff26bd9c92e9f77e49173f", "patch": "@@ -1,9 +0,0 @@\n-error[E0425]: cannot find value `asdf_fdsa` in this scope\n-  --> $DIR/syntax-extension-minor.rs:10:13\n-   |\n-LL |     assert!(concat_idents!(asd, f_f, dsa) == \"<.<\".to_string());\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0425`."}]}