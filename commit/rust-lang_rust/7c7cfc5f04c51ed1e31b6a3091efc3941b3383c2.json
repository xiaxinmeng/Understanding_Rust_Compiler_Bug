{"sha": "7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjN2NmYzVmMDRjNTFlZDFlMzFiNmEzMDkxZWZjMzk0MWIzMzgzYzI=", "commit": {"author": {"name": "Roberto Vidal", "email": "vidal.roberto.j@gmail.com", "date": "2019-04-13T17:45:21Z"}, "committer": {"name": "Roberto Vidal", "email": "vidal.roberto.j@gmail.com", "date": "2019-04-14T08:04:38Z"}, "message": "Sends cwd info for runnables and code lenses", "tree": {"sha": "0bc4d2f3afefb504509676388016da52598fe1dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bc4d2f3afefb504509676388016da52598fe1dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "html_url": "https://github.com/rust-lang/rust/commit/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/comments", "author": {"login": "jrvidal", "id": 1636604, "node_id": "MDQ6VXNlcjE2MzY2MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1636604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrvidal", "html_url": "https://github.com/jrvidal", "followers_url": "https://api.github.com/users/jrvidal/followers", "following_url": "https://api.github.com/users/jrvidal/following{/other_user}", "gists_url": "https://api.github.com/users/jrvidal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrvidal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrvidal/subscriptions", "organizations_url": "https://api.github.com/users/jrvidal/orgs", "repos_url": "https://api.github.com/users/jrvidal/repos", "events_url": "https://api.github.com/users/jrvidal/events{/privacy}", "received_events_url": "https://api.github.com/users/jrvidal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrvidal", "id": 1636604, "node_id": "MDQ6VXNlcjE2MzY2MDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1636604?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrvidal", "html_url": "https://github.com/jrvidal", "followers_url": "https://api.github.com/users/jrvidal/followers", "following_url": "https://api.github.com/users/jrvidal/following{/other_user}", "gists_url": "https://api.github.com/users/jrvidal/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrvidal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrvidal/subscriptions", "organizations_url": "https://api.github.com/users/jrvidal/orgs", "repos_url": "https://api.github.com/users/jrvidal/repos", "events_url": "https://api.github.com/users/jrvidal/events{/privacy}", "received_events_url": "https://api.github.com/users/jrvidal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3507bcb97aaaafba10d55c101bd295f3ab4fed4f", "html_url": "https://github.com/rust-lang/rust/commit/3507bcb97aaaafba10d55c101bd295f3ab4fed4f"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "41d1f759f5ec66afd3a0e12d59e391b73adbad3b", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "patch": "@@ -263,6 +263,7 @@ pub fn handle_runnables(\n     let line_index = world.analysis().file_line_index(file_id);\n     let offset = params.position.map(|it| it.conv_with(&line_index));\n     let mut res = Vec::new();\n+    let workspace_root = world.workspace_root_for(file_id);\n     for runnable in world.analysis().runnables(file_id)? {\n         if let Some(offset) = offset {\n             if !runnable.range.contains_inclusive(offset) {\n@@ -287,6 +288,7 @@ pub fn handle_runnables(\n                 m.insert(\"RUST_BACKTRACE\".to_string(), \"short\".to_string());\n                 m\n             },\n+            cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n         };\n         res.push(r);\n     }\n@@ -309,6 +311,7 @@ pub fn handle_runnables(\n         bin: \"cargo\".to_string(),\n         args: check_args,\n         env: FxHashMap::default(),\n+        cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n     });\n     Ok(res)\n }\n@@ -627,6 +630,7 @@ pub fn handle_code_lens(\n     let line_index = world.analysis().file_line_index(file_id);\n \n     let mut lenses: Vec<CodeLens> = Default::default();\n+    let workspace_root = world.workspace_root_for(file_id);\n \n     // Gather runnables\n     for runnable in world.analysis().runnables(file_id)? {\n@@ -647,6 +651,7 @@ pub fn handle_code_lens(\n                 bin: \"cargo\".into(),\n                 args,\n                 env: Default::default(),\n+                cwd: workspace_root.map(|root| root.to_string_lossy().to_string()),\n             };\n \n             let lens = CodeLens {"}, {"sha": "4f35ab9b5a10af5a7ae06ad2cbcb6b321065e26f", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "patch": "@@ -163,6 +163,7 @@ pub struct Runnable {\n     pub bin: String,\n     pub args: Vec<String>,\n     pub env: FxHashMap<String, String>,\n+    pub cwd: Option<String>,\n }\n \n #[derive(Serialize, Debug)]"}, {"sha": "b2808b8175bd4a3cfe0b90ed9918a86b68105b98", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "patch": "@@ -1,5 +1,5 @@\n use std::{\n-    path::PathBuf,\n+    path::{Path, PathBuf},\n     sync::Arc,\n };\n \n@@ -195,4 +195,9 @@ impl ServerWorld {\n         res.push_str(&self.analysis.status());\n         res\n     }\n+\n+    pub fn workspace_root_for(&self, file_id: FileId) -> Option<&Path> {\n+        let path = self.vfs.read().file2path(VfsFile(file_id.0.into()));\n+        self.workspaces.iter().find_map(|ws| ws.workspace_root_for(&path))\n+    }\n }"}, {"sha": "e9ce002de1a9a6d387dcaf07b6f59f3ba31f4bff", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "patch": "@@ -62,6 +62,7 @@ fn foo() {\n             \"args\": [ \"test\", \"--\", \"foo\", \"--nocapture\" ],\n             \"bin\": \"cargo\",\n             \"env\": { \"RUST_BACKTRACE\": \"short\" },\n+            \"cwd\": null,\n             \"label\": \"test foo\",\n             \"range\": {\n               \"end\": { \"character\": 1, \"line\": 2 },\n@@ -75,6 +76,7 @@ fn foo() {\n             ],\n             \"bin\": \"cargo\",\n             \"env\": {},\n+            \"cwd\": null,\n             \"label\": \"cargo check --all\",\n             \"range\": {\n               \"end\": {\n@@ -123,7 +125,8 @@ fn test_eggs() {}\n             \"range\": {\n               \"end\": { \"character\": 17, \"line\": 1 },\n               \"start\": { \"character\": 0, \"line\": 0 }\n-            }\n+            },\n+            \"cwd\": server.path()\n           },\n           {\n             \"args\": [\n@@ -135,6 +138,7 @@ fn test_eggs() {}\n             ],\n             \"bin\": \"cargo\",\n             \"env\": {},\n+            \"cwd\": server.path(),\n             \"label\": \"cargo check -p foo\",\n             \"range\": {\n               \"end\": {"}, {"sha": "9e115fb7f7fffa9da5af303f3c89bd7f9517333f", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "patch": "@@ -1,7 +1,7 @@\n use std::{\n     cell::{Cell, RefCell},\n     fs,\n-    path::PathBuf,\n+    path::{Path, PathBuf},\n     sync::Once,\n     time::Duration,\n };\n@@ -177,6 +177,10 @@ impl Server {\n     fn send_notification(&self, not: RawNotification) {\n         self.worker.as_ref().unwrap().sender().send(RawMessage::Notification(not)).unwrap();\n     }\n+\n+    pub fn path(&self) -> &Path {\n+        self.dir.path()\n+    }\n }\n \n impl Drop for Server {"}, {"sha": "71976071fe5a50088e611423e317ddcf9b51ae19", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "patch": "@@ -19,6 +19,7 @@ use crate::Result;\n pub struct CargoWorkspace {\n     packages: Arena<Package, PackageData>,\n     targets: Arena<Target, TargetData>,\n+    pub(crate) workspace_root: PathBuf,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -165,7 +166,7 @@ impl CargoWorkspace {\n             }\n         }\n \n-        Ok(CargoWorkspace { packages, targets })\n+        Ok(CargoWorkspace { packages, targets, workspace_root: meta.workspace_root })\n     }\n \n     pub fn packages<'a>(&'a self) -> impl Iterator<Item = Package> + 'a {"}, {"sha": "63eb7041e18ac1b16e5c8c990df70642844d3644", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "patch": "@@ -255,6 +255,18 @@ impl ProjectWorkspace {\n         }\n         crate_graph\n     }\n+\n+    pub fn workspace_root_for(&self, path: &Path) -> Option<&Path> {\n+        match self {\n+            ProjectWorkspace::Cargo { cargo, .. } => {\n+                Some(cargo.workspace_root.as_ref()).filter(|root| path.starts_with(root))\n+            }\n+            ProjectWorkspace::Json { project: JsonProject { roots, .. } } => roots\n+                .iter()\n+                .find(|root| path.starts_with(&root.path))\n+                .map(|root| root.path.as_ref()),\n+        }\n+    }\n }\n \n fn find_rust_project_json(path: &Path) -> Option<PathBuf> {"}, {"sha": "c4df24c79f673098a2a4a9a5f2335114beee662f", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=7c7cfc5f04c51ed1e31b6a3091efc3941b3383c2", "patch": "@@ -17,6 +17,7 @@ interface Runnable {\n     bin: string;\n     args: string[];\n     env: { [index: string]: string };\n+    cwd?: string;\n }\n \n class RunnableQuickPick implements vscode.QuickPickItem {\n@@ -49,7 +50,7 @@ function createTask(spec: Runnable): vscode.Task {\n     };\n \n     const execOption: vscode.ShellExecutionOptions = {\n-        cwd: '.',\n+        cwd: spec.cwd || '.',\n         env: definition.env\n     };\n     const exec = new vscode.ShellExecution("}]}