{"sha": "9c47afe9fac56b71644c91ec91debd9a1f4424b1", "node_id": "C_kwDOAAsO6NoAKDljNDdhZmU5ZmFjNTZiNzE2NDRjOTFlYzkxZGViZDlhMWY0NDI0YjE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-06T00:37:45Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-11T23:27:01Z"}, "message": "Handle empty where-clause better", "tree": {"sha": "f502ccea3a65640b1b553baa719ed615045e8143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f502ccea3a65640b1b553baa719ed615045e8143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c47afe9fac56b71644c91ec91debd9a1f4424b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c47afe9fac56b71644c91ec91debd9a1f4424b1", "html_url": "https://github.com/rust-lang/rust/commit/9c47afe9fac56b71644c91ec91debd9a1f4424b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c47afe9fac56b71644c91ec91debd9a1f4424b1/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8506b7d4e081cf99751022440147e9ac4845c99d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8506b7d4e081cf99751022440147e9ac4845c99d", "html_url": "https://github.com/rust-lang/rust/commit/8506b7d4e081cf99751022440147e9ac4845c99d"}], "stats": {"total": 137, "additions": 78, "deletions": 59}, "files": [{"sha": "1a3229a0bda2de253b7ca7a34aea2aa6130191fa", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -1377,7 +1377,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         let mut params: SmallVec<[hir::GenericParam<'hir>; 4]> =\n             self.lower_generic_params_mut(&generics.params).collect();\n-        let has_where_clause = !generics.where_clause.predicates.is_empty();\n+        let has_where_clause_predicates = !generics.where_clause.predicates.is_empty();\n+        let has_where_clause_token = generics.where_clause.has_where_token;\n         let where_clause_span = self.lower_span(generics.where_clause.span);\n         let span = self.lower_span(generics.span);\n         let res = f(self);\n@@ -1395,7 +1396,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let lowered_generics = self.arena.alloc(hir::Generics {\n             params: self.arena.alloc_from_iter(params),\n             predicates: self.arena.alloc_from_iter(predicates),\n-            has_where_clause,\n+            has_where_clause_predicates,\n+            has_where_clause_token,\n             where_clause_span,\n             span,\n         });"}, {"sha": "bb34d02f5bc2f7f0e459e592225b40631a9a0c13", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -1315,7 +1315,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 generics: self.arena.alloc(hir::Generics {\n                     params: lifetime_defs,\n                     predicates: &[],\n-                    has_where_clause: false,\n+                    has_where_clause_predicates: false,\n+                    has_where_clause_token: false,\n                     where_clause_span: lctx.lower_span(span),\n                     span: lctx.lower_span(span),\n                 }),\n@@ -1637,7 +1638,8 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 generics: this.arena.alloc(hir::Generics {\n                     params: generic_params,\n                     predicates: &[],\n-                    has_where_clause: false,\n+                    has_where_clause_predicates: false,\n+                    has_where_clause_token: false,\n                     where_clause_span: this.lower_span(span),\n                     span: this.lower_span(span),\n                 }),"}, {"sha": "9d724a17cfcf7e65d25c2f015666b2aaf1b0a028", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -535,7 +535,8 @@ pub struct GenericParamCount {\n pub struct Generics<'hir> {\n     pub params: &'hir [GenericParam<'hir>],\n     pub predicates: &'hir [WherePredicate<'hir>],\n-    pub has_where_clause: bool,\n+    pub has_where_clause_predicates: bool,\n+    pub has_where_clause_token: bool,\n     pub where_clause_span: Span,\n     pub span: Span,\n }\n@@ -545,7 +546,8 @@ impl<'hir> Generics<'hir> {\n         const NOPE: Generics<'_> = Generics {\n             params: &[],\n             predicates: &[],\n-            has_where_clause: false,\n+            has_where_clause_predicates: false,\n+            has_where_clause_token: false,\n             where_clause_span: DUMMY_SP,\n             span: DUMMY_SP,\n         };\n@@ -585,17 +587,11 @@ impl<'hir> Generics<'hir> {\n         if self.predicates.is_empty() { None } else { Some(self.where_clause_span) }\n     }\n \n-    /// The `where_span` under normal circumstances points at either the predicates or the empty\n-    /// space where the `where` clause should be. Only of use for diagnostic suggestions.\n-    pub fn span_for_predicates_or_empty_place(&self) -> Span {\n-        self.where_clause_span\n-    }\n-\n     /// `Span` where further predicates would be suggested, accounting for trailing commas, like\n     ///  in `fn foo<T>(t: T) where T: Foo,` so we don't suggest two trailing commas.\n     pub fn tail_span_for_predicate_suggestion(&self) -> Span {\n-        let end = self.span_for_predicates_or_empty_place().shrink_to_hi();\n-        if self.has_where_clause {\n+        let end = self.where_clause_span.shrink_to_hi();\n+        if self.has_where_clause_predicates {\n             self.predicates\n                 .iter()\n                 .filter(|p| p.in_where_clause())\n@@ -608,6 +604,16 @@ impl<'hir> Generics<'hir> {\n         }\n     }\n \n+    pub fn add_where_or_trailing_comma(&self) -> &'static str {\n+        if self.has_where_clause_predicates {\n+            \",\"\n+        } else if self.has_where_clause_token {\n+            \"\"\n+        } else {\n+            \" where\"\n+        }\n+    }\n+\n     pub fn bounds_for_param(\n         &self,\n         param_def_id: LocalDefId,"}, {"sha": "52ee7e2983c2c55e9c3ea29b6b4e481389b7271b", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -2511,7 +2511,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let pred = format!(\"{}: {}\", bound_kind, sub);\n                 let suggestion = format!(\n                     \"{} {}\",\n-                    if !generics.predicates.is_empty() { \",\" } else { \" where\" },\n+                    generics.add_where_or_trailing_comma(),\n                     pred,\n                 );\n                 err.span_suggestion("}, {"sha": "67bbace39e3ca7392f7fa5cbf041771f2aa3022e", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -367,17 +367,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     .collect();\n \n                 if !clauses.is_empty() {\n-                    let where_clause_span = self\n-                        .tcx\n-                        .hir()\n-                        .get_generics(impl_item_def_id)\n-                        .unwrap()\n-                        .where_clause_span\n-                        .shrink_to_hi();\n+                    let generics = self.tcx.hir().get_generics(impl_item_def_id).unwrap();\n+                    let where_clause_span = generics.tail_span_for_predicate_suggestion();\n \n                     let suggestion = format!(\n                         \"{} {}\",\n-                        if !impl_predicates.is_empty() { \",\" } else { \" where\" },\n+                        generics.add_where_or_trailing_comma(),\n                         clauses.join(\", \"),\n                     );\n                     err.span_suggestion("}, {"sha": "cd6f8055a5cf31f6ec48bb2b4bc490fe7836a93f", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -2293,7 +2293,8 @@ impl<'tcx> LateLintPass<'tcx> for ExplicitOutlivesRequirements {\n \n             // If all predicates are inferable, drop the entire clause\n             // (including the `where`)\n-            if hir_generics.has_where_clause && dropped_predicate_count == num_predicates {\n+            if hir_generics.has_where_clause_predicates && dropped_predicate_count == num_predicates\n+            {\n                 let where_span = hir_generics\n                     .where_clause_span()\n                     .expect(\"span of (nonempty) where clause should exist\");"}, {"sha": "6fbe6b8550ca2aadac285b11b1b58147eef4399d", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -92,19 +92,14 @@ pub fn suggest_arbitrary_trait_bound(\n         _ => {}\n     }\n     // Suggest a where clause bound for a non-type parameter.\n-    let (action, prefix) = if generics.has_where_clause {\n-        (\"extending the\", \", \")\n-    } else {\n-        (\"introducing a\", \" where \")\n-    };\n     err.span_suggestion_verbose(\n         generics.tail_span_for_predicate_suggestion(),\n         &format!(\n-            \"consider {} `where` bound, but there might be an alternative better way to express \\\n+            \"consider {} `where` clause, but there might be an alternative better way to express \\\n              this requirement\",\n-            action,\n+             if generics.has_where_clause_token { \"extending the\" } else { \"introducing a\" },\n         ),\n-        format!(\"{}{}: {}\", prefix, param_name, constraint),\n+        format!(\"{} {}: {}\", generics.add_where_or_trailing_comma(), param_name, constraint),\n         Applicability::MaybeIncorrect,\n     );\n     true\n@@ -257,7 +252,7 @@ pub fn suggest_constraining_type_params<'a>(\n             continue;\n         }\n \n-        if generics.has_where_clause {\n+        if generics.has_where_clause_predicates {\n             // This part is a bit tricky, because using the `where` clause user can\n             // provide zero, one or many bounds for the same type parameter, so we\n             // have following cases to consider:"}, {"sha": "e58451cce82feb6fde6edd9cd5bb76bfda4d8091", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -324,7 +324,7 @@ pub trait InferCtxtExt<'tcx> {\n fn predicate_constraint(generics: &hir::Generics<'_>, pred: String) -> (Span, String) {\n     (\n         generics.tail_span_for_predicate_suggestion(),\n-        format!(\"{} {}\", if generics.has_where_clause { \",\" } else { \" where\" }, pred,),\n+        format!(\"{} {}\", generics.add_where_or_trailing_comma(), pred),\n     )\n }\n \n@@ -339,15 +339,16 @@ fn suggest_restriction<'tcx>(\n     fn_sig: Option<&hir::FnSig<'_>>,\n     projection: Option<&ty::ProjectionTy<'_>>,\n     trait_pred: ty::PolyTraitPredicate<'tcx>,\n-    super_traits: Option<(&Ident, &hir::GenericBounds<'_>)>,\n-) {\n     // When we are dealing with a trait, `super_traits` will be `Some`:\n     // Given `trait T: A + B + C {}`\n     //              -  ^^^^^^^^^ GenericBounds\n     //              |\n     //              &Ident\n-    let span = generics.span_for_predicates_or_empty_place();\n-    if span.from_expansion() || span.desugaring_kind().is_some() {\n+    super_traits: Option<(&Ident, &hir::GenericBounds<'_>)>,\n+) {\n+    if generics.where_clause_span.from_expansion()\n+        || generics.where_clause_span.desugaring_kind().is_some()\n+    {\n         return;\n     }\n     // Given `fn foo(t: impl Trait)` where `Trait` requires assoc type `A`..."}, {"sha": "b65b7458fc171a71120de59fad7f48dc47d33252", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -538,10 +538,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 };\n                                 if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n                                     if let Some(g) = kind.generics() {\n-                                        let key = match g.predicates {\n-                                            [.., pred] => (pred.span().shrink_to_hi(), false),\n-                                            [] => (g.span_for_predicates_or_empty_place(), true),\n-                                        };\n+                                        let key = (\n+                                            g.tail_span_for_predicate_suggestion(),\n+                                            g.add_where_or_trailing_comma(),\n+                                        );\n                                         type_params\n                                             .entry(key)\n                                             .or_insert_with(FxHashSet::default)\n@@ -805,7 +805,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .enumerate()\n                         .collect::<Vec<(usize, String)>>();\n \n-                    for ((span, empty_where), obligations) in type_params.into_iter() {\n+                    for ((span, add_where_or_comma), obligations) in type_params.into_iter() {\n                         restrict_type_params = true;\n                         // #74886: Sort here so that the output is always the same.\n                         let mut obligations = obligations.into_iter().collect::<Vec<_>>();\n@@ -819,7 +819,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             ),\n                             format!(\n                                 \"{} {}\",\n-                                if empty_where { \" where\" } else { \",\" },\n+                                add_where_or_comma,\n                                 obligations.join(\", \")\n                             ),\n                             Applicability::MaybeIncorrect,"}, {"sha": "362e034ba54524549e399bf37dcd683957c4abb5", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -421,7 +421,7 @@ fn check_gat_where_clauses(tcx: TyCtxt<'_>, associated_items: &[hir::TraitItemRe\n \n             let suggestion = format!(\n                 \"{} {}\",\n-                if !gat_item_hir.generics.predicates.is_empty() { \",\" } else { \" where\" },\n+                gat_item_hir.generics.add_where_or_trailing_comma(),\n                 unsatisfied_bounds.join(\", \"),\n             );\n             err.span_suggestion("}, {"sha": "84add5799abaea44f3b2725cbdd720aa1d41ab4a", "filename": "src/test/ui/issues/issue-35668.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35668.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -6,7 +6,7 @@ LL |     a.iter().map(|a| a*a)\n    |                      |\n    |                      &T\n    |\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn func<'a, T>(a: &'a [T]) -> impl Iterator<Item=&'a T> where &T: Mul<&T> {\n    |                                                         +++++++++++++++++"}, {"sha": "34b88b8a866850f8a8af2f79c8500691f52d25e0", "filename": "src/test/ui/partialeq_help.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fpartialeq_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fpartialeq_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpartialeq_help.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -2,6 +2,11 @@ fn foo<T: PartialEq>(a: &T, b: T) {\n     a == b; //~ ERROR E0277\n }\n \n+fn foo2<T: PartialEq>(a: &T, b: T) where {\n+    a == b; //~ ERROR E0277\n+}\n+\n fn main() {\n     foo(&1, 1);\n+    foo2(&1, 1);\n }"}, {"sha": "fdff94f425c8a44dcc9e50772ed3225fbb4e5224", "filename": "src/test/ui/partialeq_help.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fpartialeq_help.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fpartialeq_help.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpartialeq_help.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -5,11 +5,23 @@ LL |     a == b;\n    |       ^^ no implementation for `&T == T`\n    |\n    = help: the trait `PartialEq<T>` is not implemented for `&T`\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn foo<T: PartialEq>(a: &T, b: T) where &T: PartialEq<T> {\n    |                                   ++++++++++++++++++++++\n \n-error: aborting due to previous error\n+error[E0277]: can't compare `&T` with `T`\n+  --> $DIR/partialeq_help.rs:6:7\n+   |\n+LL |     a == b;\n+   |       ^^ no implementation for `&T == T`\n+   |\n+   = help: the trait `PartialEq<T>` is not implemented for `&T`\n+help: consider extending the `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn foo2<T: PartialEq>(a: &T, b: T) where &T: PartialEq<T> {\n+   |                                          ++++++++++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "64501c52374196d38223cae6744befe0bf1ee550", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -15,7 +15,7 @@ note: required by a bound in `Foo::Bar`\n    |\n LL |     type Bar: ~const std::ops::Add;\n    |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | impl const Foo for NonConstAdd where NonConstAdd: ~const Add {\n    |                                +++++++++++++++++++++++++++++"}, {"sha": "7542b81fe2adb0535218acf800dc004f84fd964c", "filename": "src/test/ui/rfc-2632-const-trait-impl/default-method-body-is-const-body-checking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fdefault-method-body-is-const-body-checking.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -14,7 +14,7 @@ note: required by a bound in `foo`\n    |\n LL | const fn foo<T>() where T: ~const Tr {}\n    |                            ^^^^^^^^^ required by this bound in `foo`\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | pub trait Foo where (): ~const Tr {\n    |               +++++++++++++++++++"}, {"sha": "91778ed0f4cde599648f77262260685b17caaffa", "filename": "src/test/ui/specialization/default-associated-type-bound-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefault-associated-type-bound-2.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -20,7 +20,7 @@ note: required by a bound in `X::U`\n    |\n LL |     type U: PartialEq<T>;\n    |             ^^^^^^^^^^^^ required by this bound in `X::U`\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | impl<B: 'static, T> X<B> for T where &'static B: PartialEq<B> {\n    |                                ++++++++++++++++++++++++++++++"}, {"sha": "501d083e2bc608edbdba9a0314a004b4d7fbed26", "filename": "src/test/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -13,7 +13,7 @@ help: consider annotating `a::Inner<T>` with `#[derive(Debug)]`\n    |\n LL |     #[derive(Debug)]\n    |\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL |     struct Outer<T>(Inner<T>) where a::Inner<T>: Debug;\n    |                               ++++++++++++++++++++++++"}, {"sha": "94bd2d41565826bc3576d77ae014067ff055979e", "filename": "src/test/ui/suggestions/invalid-bin-op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fsuggestions%2Finvalid-bin-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fsuggestions%2Finvalid-bin-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Finvalid-bin-op.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -15,7 +15,7 @@ help: consider annotating `S<T>` with `#[derive(PartialEq)]`\n    |\n LL | #[derive(PartialEq)]\n    |\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | pub fn foo<T>(s: S<T>, t: S<T>) where S<T>: PartialEq {\n    |                                 +++++++++++++++++++++"}, {"sha": "47dc7c343daebea6ed4ce2b975843e21c609af25", "filename": "src/test/ui/suggestions/suggest-change-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.rs?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -2,7 +2,7 @@\n \n use std::io::{BufRead, BufReader, Read, Write};\n \n-fn issue_81421<T: Read + Write>(mut stream: T) { //~ HELP consider introducing a `where` bound\n+fn issue_81421<T: Read + Write>(mut stream: T) { //~ HELP consider introducing a `where` clause\n     let initial_message = format!(\"Hello world\");\n     let mut buffer: Vec<u8> = Vec::new();\n     let bytes_written = stream.write_all(initial_message.as_bytes());"}, {"sha": "be549239e36855edd5be8c5a36bfcd7dcf18d6bf", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -16,7 +16,7 @@ help: consider removing the leading `&`-reference\n LL -         let mut stream_reader = BufReader::new(&stream);\n LL +         let mut stream_reader = BufReader::new(stream);\n    | \n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn issue_81421<T: Read + Write>(mut stream: T) where &T: std::io::Read {\n    |                                                +++++++++++++++++++++++"}, {"sha": "34fae64e4d20fe9b2d682c78125d25ec812dab79", "filename": "src/test/ui/traits/resolution-in-overloaded-op.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fresolution-in-overloaded-op.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -6,7 +6,7 @@ LL |     a * b\n    |     |\n    |     &T\n    |\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn foo<T: MyMul<f64, f64>>(a: &T, b: f64) -> f64 where &T: Mul<f64> {\n    |                                                  ++++++++++++++++++"}, {"sha": "520ee0b5ea73376dfeaa1aae7abfd6edaea9ebb9", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -49,7 +49,7 @@ error[E0277]: the trait bound `u64: From<T>` is not satisfied\n LL |     <u64 as From<T>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `u64`\n    |\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn check<T: Iterator, U: ?Sized>() where u64: From<T> {\n    |                                    ++++++++++++++++++\n@@ -60,7 +60,7 @@ error[E0277]: the trait bound `u64: From<<T as Iterator>::Item>` is not satisfie\n LL |     <u64 as From<<T as Iterator>::Item>>::from;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<<T as Iterator>::Item>` is not implemented for `u64`\n    |\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn check<T: Iterator, U: ?Sized>() where u64: From<<T as Iterator>::Item> {\n    |                                    ++++++++++++++++++++++++++++++++++++++"}, {"sha": "198f3e26393d432edde69706efb551918d139701", "filename": "src/test/ui/type-alias-impl-trait/multiple-def-uses-in-one-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c47afe9fac56b71644c91ec91debd9a1f4424b1/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fmultiple-def-uses-in-one-fn.stderr?ref=9c47afe9fac56b71644c91ec91debd9a1f4424b1", "patch": "@@ -5,7 +5,7 @@ LL |     (a, a)\n    |         ^ the trait `From<&A>` is not implemented for `&'static B`\n    |\n    = note: required because of the requirements on the impl of `Into<&'static B>` for `&A`\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn f<A, B: 'static>(a: &'static A, b: B) -> (X<A, B>, X<B, A>) where &'static B: From<&A> {\n    |                                                                ++++++++++++++++++++++++++"}]}