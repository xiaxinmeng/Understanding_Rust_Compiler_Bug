{"sha": "8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "node_id": "C_kwDOAAsO6NoAKDhkNTkwZGMzMDM5ZDQ5Y2I4YjU0ZjNhZWMzODBkNDNiM2VkNWUyZGQ", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2023-01-21T17:55:37Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-02-14T15:31:45Z"}, "message": "Resolve rebase", "tree": {"sha": "8b6dc89f2f9a1940b84b0a4f7170426aebe6c723", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b6dc89f2f9a1940b84b0a4f7170426aebe6c723"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "html_url": "https://github.com/rust-lang/rust/commit/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35dbec338ac837c533843ff7cf0441c3b6052b5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/35dbec338ac837c533843ff7cf0441c3b6052b5e", "html_url": "https://github.com/rust-lang/rust/commit/35dbec338ac837c533843ff7cf0441c3b6052b5e"}], "stats": {"total": 42, "additions": 2, "deletions": 40}, "files": [{"sha": "0398634da021e08c6c172f13af540d511cb6ba3a", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "patch": "@@ -150,8 +150,6 @@ infer_region_explanation = {$pref_kind ->\n     [lf_param_must_outlive] but lifetime parameter must outlive\n     [lf_instantiated_with] lifetime instantiated with\n     [lf_must_outlive] but lifetime must outlive\n-    [type_valid_for] the type is valid for\n-    [borrow_lasts_for] but the borrow lasts for\n     [pointer_valid_for] the pointer is valid for\n     [data_valid_for] but the referenced data is only valid for\n     [empty] {\"\"}"}, {"sha": "49b6a325f68e368ea65780fcb34d4e1ed4d7fd84", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "patch": "@@ -971,16 +971,6 @@ pub struct LfBoundNotSatisfied<'a> {\n     pub notes: Vec<note_and_explain::RegionExplanation<'a>>,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(infer_borrowed_too_long, code = \"E0490\")]\n-pub struct BorrowedTooLong<'a> {\n-    #[primary_span]\n-    pub span: Span,\n-    pub ty: Ty<'a>,\n-    #[subdiagnostic]\n-    pub notes: Vec<note_and_explain::RegionExplanation<'a>>,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(infer_ref_longer_than_data, code = \"E0491\")]\n pub struct RefLongerThanData<'a> {"}, {"sha": "cb96aeec5f34f4c11d83ad3feb83d74d98e9d920", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "patch": "@@ -131,8 +131,6 @@ pub enum PrefixKind {\n     LfParamMustOutlive,\n     LfInstantiatedWith,\n     LfMustOutlive,\n-    TypeValidFor,\n-    BorrowLastsFor,\n     PointerValidFor,\n     DataValidFor,\n }\n@@ -157,8 +155,6 @@ impl IntoDiagnosticArg for PrefixKind {\n             Self::LfParamMustOutlive => \"lf_param_must_outlive\",\n             Self::LfInstantiatedWith => \"lf_instantiated_with\",\n             Self::LfMustOutlive => \"lf_must_outlive\",\n-            Self::TypeValidFor => \"type_valid_for\",\n-            Self::BorrowLastsFor => \"borrow_lasts_for\",\n             Self::PointerValidFor => \"pointer_valid_for\",\n             Self::DataValidFor => \"data_valid_for\",\n         }"}, {"sha": "c43e5713283ad6802e3ca4a4a03d57845efee009", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=8d590dc3039d49cb8b54f3aec380d43b3ed5e2dd", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::{\n-    note_and_explain, BorrowedTooLong, FullfillReqLifetime, LfBoundNotSatisfied, OutlivesBound,\n-    OutlivesContent, RefLongerThanData, RegionOriginNote,\n+    note_and_explain, FullfillReqLifetime, LfBoundNotSatisfied, OutlivesBound, OutlivesContent,\n+    RefLongerThanData, RegionOriginNote,\n };\n use crate::infer::error_reporting::{note_and_explain_region, TypeErrCtxt};\n use crate::infer::{self, SubregionOrigin};\n@@ -200,28 +200,6 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 }\n                 .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n             }\n-            infer::DataBorrowed(ty, span) => {\n-                let type_valid = note_and_explain::RegionExplanation::new(\n-                    self.tcx,\n-                    sub,\n-                    None,\n-                    note_and_explain::PrefixKind::TypeValidFor,\n-                    note_and_explain::SuffixKind::Empty,\n-                );\n-                let borrow_lasts_for = note_and_explain::RegionExplanation::new(\n-                    self.tcx,\n-                    sup,\n-                    None,\n-                    note_and_explain::PrefixKind::BorrowLastsFor,\n-                    note_and_explain::SuffixKind::Empty,\n-                );\n-                BorrowedTooLong {\n-                    span,\n-                    ty: self.resolve_vars_if_possible(ty),\n-                    notes: type_valid.into_iter().chain(borrow_lasts_for).collect(),\n-                }\n-                .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n-            }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n                 let pointer_valid = note_and_explain::RegionExplanation::new(\n                     self.tcx,"}]}