{"sha": "305d63c2a430c5d252c21b51f4d24a4288d08062", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNWQ2M2MyYTQzMGM1ZDI1MmMyMWI1MWY0ZDI0YTQyODhkMDgwNjI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-13T18:21:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-13T18:21:19Z"}, "message": "Rollup merge of #76665 - RalfJung:slice-from-raw, r=sfackler\n\nslice::from_raw_parts: explicitly mention that data must be initialized\n\nThis reflects the status quo, until the discussion in https://github.com/rust-lang/unsafe-code-guidelines/issues/77 reaches a conclusion.", "tree": {"sha": "3d56ec19748e78e7b232364221392bf360f0ca99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d56ec19748e78e7b232364221392bf360f0ca99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/305d63c2a430c5d252c21b51f4d24a4288d08062", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfXmMfCRBK7hj4Ov3rIwAAdHIIAGY6tpVbB8kxHXV6vqx35M9x\n27KbxIc41jNgKblEpJkhePiVWkLW2ZsLo+aWF5vk2d08NnmCGFJBQZLb2MxH+2l6\n+/MNcwKfOMXeFKnLpP5Dm6Z9RuIClEXqp9R9N1ox3MM21KTpwG+XdAnT3z9wRMnN\nUlvr2S8sos9X39pDRB9/3JjWti+hvtFlWmh47YVMYyTHVfZ8AwqE3YKaCwEEINPB\n4fIgXHFg0oFHbvcOOE/YcyfEDcAkVsZyuhVCHbfRNBP2bwXLnWy4opCjR/lVJQ46\njMQgeDgsPyx969Oj5s5LOtioK5cc4e/lnwi2luWWkkHXmGiJUtMG1dtY7HRrVBM=\n=s5ih\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d56ec19748e78e7b232364221392bf360f0ca99\nparent 11a63bcdde74e16c58fad3296d1ed7da06121fc2\nparent 46767b1665245d8efa138f0a79d6ecdc7bfbdb08\nauthor Jonas Schievink <jonasschievink@gmail.com> 1600021279 +0200\ncommitter GitHub <noreply@github.com> 1600021279 +0200\n\nRollup merge of #76665 - RalfJung:slice-from-raw, r=sfackler\n\nslice::from_raw_parts: explicitly mention that data must be initialized\n\nThis reflects the status quo, until the discussion in https://github.com/rust-lang/unsafe-code-guidelines/issues/77 reaches a conclusion.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/305d63c2a430c5d252c21b51f4d24a4288d08062", "html_url": "https://github.com/rust-lang/rust/commit/305d63c2a430c5d252c21b51f4d24a4288d08062", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/305d63c2a430c5d252c21b51f4d24a4288d08062/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a63bcdde74e16c58fad3296d1ed7da06121fc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a63bcdde74e16c58fad3296d1ed7da06121fc2", "html_url": "https://github.com/rust-lang/rust/commit/11a63bcdde74e16c58fad3296d1ed7da06121fc2"}, {"sha": "46767b1665245d8efa138f0a79d6ecdc7bfbdb08", "url": "https://api.github.com/repos/rust-lang/rust/commits/46767b1665245d8efa138f0a79d6ecdc7bfbdb08", "html_url": "https://github.com/rust-lang/rust/commit/46767b1665245d8efa138f0a79d6ecdc7bfbdb08"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "3ff33fab431c4e6953a086787bf8910706e4910b", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/305d63c2a430c5d252c21b51f4d24a4288d08062/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/305d63c2a430c5d252c21b51f4d24a4288d08062/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=305d63c2a430c5d252c21b51f4d24a4288d08062", "patch": "@@ -6680,6 +6680,8 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExactMut<'a, T> {\n ///       them from other data. You can obtain a pointer that is usable as `data`\n ///       for zero-length slices using [`NonNull::dangling()`].\n ///\n+/// * `data` must point to `len` consecutive properly initialized values of type `T`.\n+///\n /// * The memory referenced by the returned slice must not be mutated for the duration\n ///   of lifetime `'a`, except inside an `UnsafeCell`.\n ///\n@@ -6767,6 +6769,8 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n ///       them from other data. You can obtain a pointer that is usable as `data`\n ///       for zero-length slices using [`NonNull::dangling()`].\n ///\n+/// * `data` must point to `len` consecutive properly initialized values of type `T`.\n+///\n /// * The memory referenced by the returned slice must not be accessed through any other pointer\n ///   (not derived from the return value) for the duration of lifetime `'a`.\n ///   Both read and write accesses are forbidden."}]}