{"sha": "a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzODNlMDM0ZGMyZjNkOWNiNTNiZDcxNjQ0NDdmZTdmM2JmYmYwOGM=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T07:11:46Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-09T07:44:44Z"}, "message": "Move cast_possible_wrap to its own module", "tree": {"sha": "e657f262b17f9948e86bd4633635ae03692de8fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e657f262b17f9948e86bd4633635ae03692de8fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c", "html_url": "https://github.com/rust-lang/rust/commit/a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0975031117fc1de35220f0e16d2294acaab154f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0975031117fc1de35220f0e16d2294acaab154f8", "html_url": "https://github.com/rust-lang/rust/commit/0975031117fc1de35220f0e16d2294acaab154f8"}], "stats": {"total": 100, "additions": 48, "deletions": 52}, "files": [{"sha": "56d301ed3e1c55485968c23b4fc5b5459fd6a6a7", "filename": "clippy_lints/src/casts/cast_possible_wrap.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs?ref=a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c", "patch": "@@ -0,0 +1,44 @@\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::Ty;\n+\n+use crate::utils::{is_isize_or_usize, span_lint};\n+\n+use super::{utils, CAST_POSSIBLE_WRAP};\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    if !(cast_from.is_integral() && cast_to.is_integral()) {\n+        return;\n+    }\n+\n+    let arch_64_suffix = \" on targets with 64-bit wide pointers\";\n+    let arch_32_suffix = \" on targets with 32-bit wide pointers\";\n+    let cast_unsigned_to_signed = !cast_from.is_signed() && cast_to.is_signed();\n+    let from_nbits = utils::int_ty_to_nbits(cast_from, cx.tcx);\n+    let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n+\n+    let (should_lint, suffix) = match (is_isize_or_usize(cast_from), is_isize_or_usize(cast_to)) {\n+        (true, true) | (false, false) => (to_nbits == from_nbits && cast_unsigned_to_signed, \"\"),\n+        (true, false) => (to_nbits <= 32 && cast_unsigned_to_signed, arch_32_suffix),\n+        (false, true) => (\n+            cast_unsigned_to_signed,\n+            if from_nbits == 64 {\n+                arch_64_suffix\n+            } else {\n+                arch_32_suffix\n+            },\n+        ),\n+    };\n+\n+    if should_lint {\n+        span_lint(\n+            cx,\n+            CAST_POSSIBLE_WRAP,\n+            expr.span,\n+            &format!(\n+                \"casting `{}` to `{}` may wrap around the value{}\",\n+                cast_from, cast_to, suffix,\n+            ),\n+        );\n+    }\n+}"}, {"sha": "01528a5a16a0c387769c5a48da70b3530582da18", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 4, "deletions": 52, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=a383e034dc2f3d9cb53bd7164447fe7f3bfbf08c", "patch": "@@ -1,5 +1,6 @@\n mod cast_lossless;\n mod cast_possible_truncation;\n+mod cast_possible_wrap;\n mod cast_precision_loss;\n mod cast_sign_loss;\n mod utils;\n@@ -20,8 +21,8 @@ use rustc_target::abi::LayoutOf;\n \n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    is_hir_ty_cfg_dependant, is_isize_or_usize, meets_msrv, numeric_literal::NumericLiteral, snippet_opt,\n-    snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then,\n+    is_hir_ty_cfg_dependant, meets_msrv, numeric_literal::NumericLiteral, snippet_opt, snippet_with_applicability,\n+    span_lint, span_lint_and_sugg, span_lint_and_then,\n };\n \n use utils::int_ty_to_nbits;\n@@ -255,49 +256,6 @@ declare_clippy_lint! {\n     \"casting a function pointer to a numeric type not wide enough to store the address\"\n }\n \n-enum ArchSuffix {\n-    _32,\n-    _64,\n-    None,\n-}\n-\n-fn check_truncation_and_wrapping(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n-    let arch_64_suffix = \" on targets with 64-bit wide pointers\";\n-    let arch_32_suffix = \" on targets with 32-bit wide pointers\";\n-    let cast_unsigned_to_signed = !cast_from.is_signed() && cast_to.is_signed();\n-    let from_nbits = int_ty_to_nbits(cast_from, cx.tcx);\n-    let to_nbits = int_ty_to_nbits(cast_to, cx.tcx);\n-    let (span_wrap, suffix_wrap) = match (is_isize_or_usize(cast_from), is_isize_or_usize(cast_to)) {\n-        (true, true) | (false, false) => (to_nbits == from_nbits && cast_unsigned_to_signed, ArchSuffix::None),\n-        (true, false) => (to_nbits <= 32 && cast_unsigned_to_signed, ArchSuffix::_32),\n-        (false, true) => (\n-            cast_unsigned_to_signed,\n-            if from_nbits == 64 {\n-                ArchSuffix::_64\n-            } else {\n-                ArchSuffix::_32\n-            },\n-        ),\n-    };\n-    if span_wrap {\n-        span_lint(\n-            cx,\n-            CAST_POSSIBLE_WRAP,\n-            expr.span,\n-            &format!(\n-                \"casting `{}` to `{}` may wrap around the value{}\",\n-                cast_from,\n-                cast_to,\n-                match suffix_wrap {\n-                    ArchSuffix::_32 => arch_32_suffix,\n-                    ArchSuffix::_64 => arch_64_suffix,\n-                    ArchSuffix::None => \"\",\n-                }\n-            ),\n-        );\n-    }\n-}\n-\n declare_lint_pass!(Casts => [\n     CAST_PRECISION_LOSS,\n     CAST_SIGN_LOSS,\n@@ -449,16 +407,10 @@ fn lint_numeric_casts<'tcx>(\n     cast_to: Ty<'tcx>,\n ) {\n     cast_possible_truncation::check(cx, expr, cast_from, cast_to);\n+    cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n     cast_lossless::check(cx, expr, cast_op, cast_from, cast_to);\n     cast_sign_loss::check(cx, expr, cast_op, cast_from, cast_to);\n-\n-    match (cast_from.is_integral(), cast_to.is_integral()) {\n-        (true, true) => {\n-            check_truncation_and_wrapping(cx, expr, cast_from, cast_to);\n-        },\n-        (_, _) => {},\n-    }\n }\n \n fn lint_cast_ptr_alignment<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>, cast_from: Ty<'tcx>, cast_to: Ty<'tcx>) {"}]}