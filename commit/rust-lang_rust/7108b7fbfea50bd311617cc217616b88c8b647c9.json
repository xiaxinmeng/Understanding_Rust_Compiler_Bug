{"sha": "7108b7fbfea50bd311617cc217616b88c8b647c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMDhiN2ZiZmVhNTBiZDMxMTYxN2NjMjE3NjE2Yjg4YzhiNjQ3Yzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-07T19:19:52Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T14:08:25Z"}, "message": "extract parse_mod", "tree": {"sha": "daa966e58cc1a4c409df603e7facd4510acadd8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daa966e58cc1a4c409df603e7facd4510acadd8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7108b7fbfea50bd311617cc217616b88c8b647c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7108b7fbfea50bd311617cc217616b88c8b647c9", "html_url": "https://github.com/rust-lang/rust/commit/7108b7fbfea50bd311617cc217616b88c8b647c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7108b7fbfea50bd311617cc217616b88c8b647c9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "803de3188c59ecc782db46e3fc9e9f668e260be9", "url": "https://api.github.com/repos/rust-lang/rust/commits/803de3188c59ecc782db46e3fc9e9f668e260be9", "html_url": "https://github.com/rust-lang/rust/commit/803de3188c59ecc782db46e3fc9e9f668e260be9"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "9ccafd7932ab4c03c0a978345b33a5cba2317d2b", "filename": "src/librustc_parse/parser/module.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7108b7fbfea50bd311617cc217616b88c8b647c9/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7108b7fbfea50bd311617cc217616b88c8b647c9/src%2Flibrustc_parse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fmodule.rs?ref=7108b7fbfea50bd311617cc217616b88c8b647c9", "patch": "@@ -31,14 +31,10 @@ impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser.\n     pub fn parse_crate_mod(&mut self) -> PResult<'a, Crate> {\n         let lo = self.token.span;\n-        let krate = Ok(ast::Crate {\n-            attrs: self.parse_inner_attributes()?,\n-            module: self.parse_mod_items(&token::Eof, lo)?,\n-            span: lo.to(self.token.span),\n-            // Filled in by proc_macro_harness::inject()\n-            proc_macros: Vec::new(),\n-        });\n-        krate\n+        let (module, attrs) = self.parse_mod(&token::Eof)?;\n+        let span = lo.to(self.token.span);\n+        let proc_macros = Vec::new(); // Filled in by `proc_macro_harness::inject()`.\n+        Ok(ast::Crate { attrs, module, span, proc_macros })\n     }\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n@@ -60,17 +56,23 @@ impl<'a> Parser<'a> {\n             self.push_directory(id, &attrs);\n \n             self.expect(&token::OpenDelim(token::Brace))?;\n-            let mod_inner_lo = self.token.span;\n-            let inner_attrs = self.parse_inner_attributes()?;\n-            let module = self.parse_mod_items(&token::CloseDelim(token::Brace), mod_inner_lo)?;\n+            let module = self.parse_mod(&token::CloseDelim(token::Brace))?;\n \n             self.directory = old_directory;\n-            (module, inner_attrs)\n+            module\n         };\n         attrs.append(&mut inner_attrs);\n         Ok((id, ItemKind::Mod(module)))\n     }\n \n+    /// Parses the contents of a module (inner attributes followed by module items).\n+    fn parse_mod(&mut self, term: &TokenKind) -> PResult<'a, (Mod, Vec<Attribute>)> {\n+        let lo = self.token.span;\n+        let attrs = self.parse_inner_attributes()?;\n+        let module = self.parse_mod_items(term, lo)?;\n+        Ok((module, attrs))\n+    }\n+\n     /// Given a termination token, parses all of the items in a module.\n     fn parse_mod_items(&mut self, term: &TokenKind, inner_lo: Span) -> PResult<'a, Mod> {\n         let mut items = vec![];\n@@ -268,12 +270,11 @@ impl<'a> Parser<'a> {\n         let mut p0 =\n             new_sub_parser_from_file(self.sess, &path, directory_ownership, Some(name), id_sp);\n         p0.cfg_mods = self.cfg_mods;\n-        let mod_inner_lo = p0.token.span;\n-        let mod_attrs = p0.parse_inner_attributes()?;\n-        let mut m0 = p0.parse_mod_items(&token::Eof, mod_inner_lo)?;\n-        m0.inline = false;\n+        let mut module = p0.parse_mod(&token::Eof)?;\n+        module.0.inline = false;\n+\n         self.sess.included_mod_stack.borrow_mut().pop();\n-        Ok((m0, mod_attrs))\n+        Ok(module)\n     }\n \n     fn push_directory(&mut self, id: Ident, attrs: &[Attribute]) {"}]}