{"sha": "4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "node_id": "C_kwDOAAsO6NoAKDRkYTg5YTE4MGZhY2RlY2YxNjhjYmUwZGRiYzZiZmJkZDlmNmU2OTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-26T02:31:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-26T02:31:12Z"}, "message": "Auto merge of #89262 - Manishearth:rollup-vtkbetm, r=Manishearth\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #88895 (rustdoc: Cleanup `clean` part 2)\n - #88973 (Expose the std_detect env_override feature)\n - #89010 (Add some intra doc links)\n - #89198 (rustdoc: Don't show hidden trait methods)\n - #89216 (Consistent big O notation)\n - #89224 (Change the order of imports suggestions)\n - #89256 (Fix typo in release notes)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6ca1cabca774e0b9e29a500cc78dfcc979fa9bc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ca1cabca774e0b9e29a500cc78dfcc979fa9bc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "html_url": "https://github.com/rust-lang/rust/commit/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "addb4da686a97da46159f0123cb6cdc2ce3d7fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/addb4da686a97da46159f0123cb6cdc2ce3d7fdb", "html_url": "https://github.com/rust-lang/rust/commit/addb4da686a97da46159f0123cb6cdc2ce3d7fdb"}, {"sha": "7d9a0e5da9a9a4afc3082bff06cf8618da4dabcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d9a0e5da9a9a4afc3082bff06cf8618da4dabcb", "html_url": "https://github.com/rust-lang/rust/commit/7d9a0e5da9a9a4afc3082bff06cf8618da4dabcb"}], "stats": {"total": 324, "additions": 207, "deletions": 117}, "files": [{"sha": "ef1377a4a32dfe8abe45318ad38a563d0133abcf", "filename": "RELEASES.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -17,7 +17,7 @@ Compiler\n \n - [Upgrade to LLVM 13.][rust#87570]\n - [Support memory, address, and thread sanitizers on aarch64-unknown-freebsd.][rust#88023]\n-- [Allow specifying an deployment target version for all iOS targets][rust#87699]\n+- [Allow specifying a deployment target version for all iOS targets][rust#87699]\n - [Warnings can be forced on with `--force-warn`.][rust#87472]\n   This feature is primarily intended for usage by `cargo fix`, rather than end users.\n - [Promote `aarch64-apple-ios-sim` to Tier 2\\*.][rust#87760]\n@@ -5170,7 +5170,7 @@ Libraries\n - [Upgrade to Unicode 10.0.0][42999]\n - [Reimplemented `{f32, f64}::{min, max}` in Rust instead of using CMath.][42430]\n - [Skip the main thread's manual stack guard on Linux][43072]\n-- [Iterator::nth for `ops::{Range, RangeFrom}` is now done in O(1) time][43077]\n+- [Iterator::nth for `ops::{Range, RangeFrom}` is now done in *O*(1) time][43077]\n - [`#[repr(align(N))]` attribute max number is now 2^31 - 1.][43097] This was\n   previously 2^15.\n - [`{OsStr, Path}::Display` now avoids allocations where possible][42613]\n@@ -8473,7 +8473,7 @@ Libraries\n   algorithm][s].\n * [`std::io::copy` allows `?Sized` arguments][cc].\n * The `Windows`, `Chunks`, and `ChunksMut` iterators over slices all\n-  [override `count`, `nth` and `last` with an O(1)\n+  [override `count`, `nth` and `last` with an *O*(1)\n   implementation][it].\n * [`Default` is implemented for arrays up to `[T; 32]`][d].\n * [`IntoRawFd` has been added to the Unix-specific prelude,\n@@ -8995,7 +8995,7 @@ Libraries\n * The `Default` implementation for `Arc` [no longer requires `Sync +\n   Send`][arc].\n * [The `Iterator` methods `count`, `nth`, and `last` have been\n-  overridden for slices to have O(1) performance instead of O(n)][si].\n+  overridden for slices to have *O*(1) performance instead of *O*(*n*)][si].\n * Incorrect handling of paths on Windows has been improved in both the\n   compiler and the standard library.\n * [`AtomicPtr` gained a `Default` implementation][ap]."}, {"sha": "d8ac815a15821c114860dca527a26e9fdd62c87e", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -3,7 +3,7 @@\n //! Also computes as the resulting DAG if each SCC is replaced with a\n //! node in the graph. This uses [Tarjan's algorithm](\n //! https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm)\n-//! that completes in *O(n)* time.\n+//! that completes in *O*(*n*) time.\n \n use crate::fx::FxHashSet;\n use crate::graph::vec_graph::VecGraph;"}, {"sha": "20e2a3b9696e8560cb80d71d50cd9d8d6a0c281d", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -9,7 +9,7 @@ mod index_map;\n pub use index_map::SortedIndexMultiMap;\n \n /// `SortedMap` is a data structure with similar characteristics as BTreeMap but\n-/// slightly different trade-offs: lookup, insertion, and removal are O(log(N))\n+/// slightly different trade-offs: lookup, insertion, and removal are *O*(log(*n*))\n /// and elements can be iterated in order cheaply.\n ///\n /// `SortedMap` can be faster than a `BTreeMap` for small sizes (<50) since it"}, {"sha": "d6ff5a7e90b2173a2d2081a22db86aa7d11c202c", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -1706,6 +1706,9 @@ crate fn show_candidates(\n         candidates.iter().map(|c| path_names_to_string(&c.path)).collect();\n \n     path_strings.sort();\n+    let core_path_strings =\n+        path_strings.drain_filter(|p| p.starts_with(\"core::\")).collect::<Vec<String>>();\n+    path_strings.extend(core_path_strings);\n     path_strings.dedup();\n \n     let (determiner, kind) = if candidates.len() == 1 {"}, {"sha": "1cbe8f41d92b0704714e881bc02613765f9dbffd", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -10,6 +10,7 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n+#![feature(drain_filter)]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]"}, {"sha": "4ed3702f7d22479d8ab1e77be4c49dc139f5b1ec", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -3,7 +3,7 @@\n //! Insertion and popping the largest element have *O*(log(*n*)) time complexity.\n //! Checking the largest element is *O*(1). Converting a vector to a binary heap\n //! can be done in-place, and has *O*(*n*) complexity. A binary heap can also be\n-//! converted to a sorted vector in-place, allowing it to be used for an *O*(*n* \\* log(*n*))\n+//! converted to a sorted vector in-place, allowing it to be used for an *O*(*n* * log(*n*))\n //! in-place heapsort.\n //!\n //! # Examples\n@@ -159,9 +159,9 @@ use super::SpecExtend;\n /// This will be a max-heap.\n ///\n /// It is a logic error for an item to be modified in such a way that the\n-/// item's ordering relative to any other item, as determined by the `Ord`\n+/// item's ordering relative to any other item, as determined by the [`Ord`]\n /// trait, changes while it is in the heap. This is normally only possible\n-/// through `Cell`, `RefCell`, global state, I/O, or unsafe code. The\n+/// through [`Cell`], [`RefCell`], global state, I/O, or unsafe code. The\n /// behavior resulting from such a logic error is not specified, but will\n /// not result in undefined behavior. This could include panics, incorrect\n /// results, aborts, memory leaks, and non-termination.\n@@ -219,7 +219,7 @@ use super::SpecExtend;\n ///\n /// ## Min-heap\n ///\n-/// Either `std::cmp::Reverse` or a custom `Ord` implementation can be used to\n+/// Either [`core::cmp::Reverse`] or a custom [`Ord`] implementation can be used to\n /// make `BinaryHeap` a min-heap. This makes `heap.pop()` return the smallest\n /// value instead of the greatest one.\n ///\n@@ -243,13 +243,17 @@ use super::SpecExtend;\n ///\n /// # Time complexity\n ///\n-/// | [push] | [pop]     | [peek]/[peek\\_mut] |\n-/// |--------|-----------|--------------------|\n-/// | O(1)~  | *O*(log(*n*)) | *O*(1)               |\n+/// | [push]  | [pop]         | [peek]/[peek\\_mut] |\n+/// |---------|---------------|--------------------|\n+/// | *O*(1)~ | *O*(log(*n*)) | *O*(1)             |\n ///\n /// The value for `push` is an expected cost; the method documentation gives a\n /// more detailed analysis.\n ///\n+/// [`core::cmp::Reverse`]: core::cmp::Reverse\n+/// [`Ord`]: core::cmp::Ord\n+/// [`Cell`]: core::cell::Cell\n+/// [`RefCell`]: core::cell::RefCell\n /// [push]: BinaryHeap::push\n /// [pop]: BinaryHeap::pop\n /// [peek]: BinaryHeap::peek\n@@ -1255,9 +1259,10 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// An owning iterator over the elements of a `BinaryHeap`.\n ///\n /// This `struct` is created by [`BinaryHeap::into_iter()`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: BinaryHeap::into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct IntoIter<T> {"}, {"sha": "2a7e1ef351bc6d6887567b9e056942696809c198", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -326,9 +326,10 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IterMut<'_, K, V> {\n /// An owning iterator over the entries of a `BTreeMap`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`BTreeMap`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     range: LazyLeafRange<marker::Dying, K, V>,"}, {"sha": "16150ceeb62c116a3a6e701ef74f0338785fe259", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -107,9 +107,10 @@ impl<T: fmt::Debug> fmt::Debug for Iter<'_, T> {\n /// An owning iterator over the items of a `BTreeSet`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`BTreeSet`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: BTreeSet#method.into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IntoIter<T> {"}, {"sha": "0b60c2aa9f66a6e53fe48e98fd300988f32c6cbb", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -38,9 +38,12 @@ mod tests;\n /// let list = LinkedList::from([1, 2, 3]);\n /// ```\n ///\n-/// NOTE: It is almost always better to use `Vec` or `VecDeque` because\n+/// NOTE: It is almost always better to use [`Vec`] or [`VecDeque`] because\n /// array-based containers are generally faster,\n /// more memory efficient, and make better use of CPU cache.\n+///\n+/// [`Vec`]: crate::vec::Vec\n+/// [`VecDeque`]: super::vec_deque::VecDeque\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"LinkedList\")]\n pub struct LinkedList<T> {\n@@ -121,9 +124,10 @@ impl<T: fmt::Debug> fmt::Debug for IterMut<'_, T> {\n /// An owning iterator over the elements of a `LinkedList`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`LinkedList`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: LinkedList::into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {"}, {"sha": "55f6138cd0f31407217fd4ef17fb391a5f55c80d", "filename": "library/alloc/src/collections/vec_deque/into_iter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Finto_iter.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -8,9 +8,10 @@ use super::VecDeque;\n /// An owning iterator over the elements of a `VecDeque`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`VecDeque`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: VecDeque::into_iter\n+/// [`IntoIterator`]: core::iter::IntoIterator\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<"}, {"sha": "4440b1f599f76862321a8b7d11fbe86e7d6c61d9", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -1,8 +1,8 @@\n //! A contiguous growable array type with heap-allocated contents, written\n //! `Vec<T>`.\n //!\n-//! Vectors have `O(1)` indexing, amortized `O(1)` push (to the end) and\n-//! `O(1)` pop (from the end).\n+//! Vectors have *O*(1) indexing, amortized *O*(1) push (to the end) and\n+//! *O*(1) pop (from the end).\n //!\n //! Vectors ensure they never allocate more than `isize::MAX` bytes.\n //!\n@@ -1270,7 +1270,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     ///\n     /// The removed element is replaced by the last element of the vector.\n     ///\n-    /// This does not preserve ordering, but is O(1).\n+    /// This does not preserve ordering, but is *O*(1).\n     ///\n     /// # Panics\n     ///"}, {"sha": "f2336fb2865b09edba5660d34399d6c3150a2926", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -1795,10 +1795,11 @@ pub trait Iterator {\n     /// The relative order of partitioned items is not maintained.\n     ///\n     /// # Current implementation\n+    ///\n     /// Current algorithms tries finding the first element for which the predicate evaluates\n     /// to false, and the last element for which it evaluates to true and repeatedly swaps them.\n     ///\n-    /// Time Complexity: *O*(*N*)\n+    /// Time complexity: *O*(*n*)\n     ///\n     /// See also [`is_partitioned()`] and [`partition()`].\n     ///"}, {"sha": "2b77dc54ab35cd3ccece5d7f37d2e85632c92177", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -72,6 +72,7 @@ panic_immediate_abort = [\"core/panic_immediate_abort\"]\n # https://github.com/rust-lang/stdarch/blob/master/crates/std_detect/Cargo.toml\n std_detect_file_io = [\"std_detect/std_detect_file_io\"]\n std_detect_dlsym_getauxval = [\"std_detect/std_detect_dlsym_getauxval\"]\n+std_detect_env_override = [\"std_detect/std_detect_env_override\"]\n \n [package.metadata.fortanix-sgx]\n # Maximum possible number of threads when testing"}, {"sha": "862f411ebe058e8e42ae2b0bf88db34cdaea3a14", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -1257,9 +1257,10 @@ impl<'a, K, V> IterMut<'a, K, V> {\n /// An owning iterator over the entries of a `HashMap`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`HashMap`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+/// [`IntoIterator`]: crate::iter::IntoIterator\n ///\n /// # Example\n ///"}, {"sha": "941981e3b00f12d55a5450517f5a3197162b67df", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -1237,9 +1237,10 @@ pub struct Iter<'a, K: 'a> {\n /// An owning iterator over the items of a `HashSet`.\n ///\n /// This `struct` is created by the [`into_iter`] method on [`HashSet`]\n-/// (provided by the `IntoIterator` trait). See its documentation for more.\n+/// (provided by the [`IntoIterator`] trait). See its documentation for more.\n ///\n /// [`into_iter`]: IntoIterator::into_iter\n+/// [`IntoIterator`]: crate::iter::IntoIterator\n ///\n /// # Examples\n ///"}, {"sha": "6ca0525cdbe328de45402ce63fd8c909b19e233b", "filename": "library/std/src/collections/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fmod.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -97,11 +97,11 @@\n //!\n //! ## Sequences\n //!\n-//! |                | get(i)         | insert(i)       | remove(i)      | append | split_off(i)   |\n-//! |----------------|----------------|-----------------|----------------|--------|----------------|\n-//! | [`Vec`]        | O(1)           | O(n-i)*         | O(n-i)         | O(m)*  | O(n-i)         |\n-//! | [`VecDeque`]   | O(1)           | O(min(i, n-i))* | O(min(i, n-i)) | O(m)*  | O(min(i, n-i)) |\n-//! | [`LinkedList`] | O(min(i, n-i)) | O(min(i, n-i))  | O(min(i, n-i)) | O(1)   | O(min(i, n-i)) |\n+//! |                | get(i)                 | insert(i)               | remove(i)              | append    | split_off(i)           |\n+//! |----------------|------------------------|-------------------------|------------------------|-----------|------------------------|\n+//! | [`Vec`]        | *O*(1)                 | *O*(*n*-*i*)*           | *O*(*n*-*i*)           | *O*(*m*)* | *O*(*n*-*i*)           |\n+//! | [`VecDeque`]   | *O*(1)                 | *O*(min(*i*, *n*-*i*))* | *O*(min(*i*, *n*-*i*)) | *O*(*m*)* | *O*(min(*i*, *n*-*i*)) |\n+//! | [`LinkedList`] | *O*(min(*i*, *n*-*i*)) | *O*(min(*i*, *n*-*i*))  | *O*(min(*i*, *n*-*i*)) | *O*(1)    | *O*(min(*i*, *n*-*i*)) |\n //!\n //! Note that where ties occur, [`Vec`] is generally going to be faster than [`VecDeque`], and\n //! [`VecDeque`] is generally going to be faster than [`LinkedList`].\n@@ -110,10 +110,10 @@\n //!\n //! For Sets, all operations have the cost of the equivalent Map operation.\n //!\n-//! |              | get       | insert    | remove    | range     | append |\n-//! |--------------|-----------|-----------|-----------|-----------|--------|\n-//! | [`HashMap`]  | O(1)~     | O(1)~*    | O(1)~     | N/A       | N/A    |\n-//! | [`BTreeMap`] | O(log(n)) | O(log(n)) | O(log(n)) | O(log(n)) | O(n+m) |\n+//! |              | get           | insert        | remove        | range         | append       |\n+//! |--------------|---------------|---------------|---------------|---------------|--------------|\n+//! | [`HashMap`]  | *O*(1)~       | *O*(1)~*      | *O*(1)~       | N/A           | N/A          |\n+//! | [`BTreeMap`] | *O*(log(*n*)) | *O*(log(*n*)) | *O*(log(*n*)) | *O*(log(*n*)) | *O*(*n*+*m*) |\n //!\n //! # Correct and Efficient Usage of Collections\n //!"}, {"sha": "82a76aa73c583fb78ecaea7bb101cca179d71547", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -43,8 +43,8 @@\n //! terminator, so the buffer length is really `len+1` characters.\n //! Rust strings don't have a nul terminator; their length is always\n //! stored and does not need to be calculated. While in Rust\n-//! accessing a string's length is a `O(1)` operation (because the\n-//! length is stored); in C it is an `O(length)` operation because the\n+//! accessing a string's length is an *O*(1) operation (because the\n+//! length is stored); in C it is an *O*(*n*) operation because the\n //! length needs to be computed by scanning the string for the nul\n //! terminator.\n //!"}, {"sha": "04dab6b804acc2e5f2b35556995ad1a318407cf7", "filename": "library/test/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Ftest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/library%2Ftest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2FCargo.toml?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -33,3 +33,4 @@ panic_immediate_abort = [\"std/panic_immediate_abort\"]\n profiler = [\"std/profiler\"]\n std_detect_file_io = [\"std/std_detect_file_io\"]\n std_detect_dlsym_getauxval = [\"std/std_detect_dlsym_getauxval\"]\n+std_detect_env_override = [\"std/std_detect_env_override\"]"}, {"sha": "1436e51f31820b27c11003960e1fae161f9a4bc3", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     let (poly_trait, output) =\n                         (data.0.as_ref().unwrap().clone(), data.1.as_ref().cloned().map(Box::new));\n                     let new_ty = match poly_trait.trait_ {\n-                        Type::ResolvedPath { ref path, ref did, ref is_generic } => {\n+                        Type::ResolvedPath { ref path, ref did } => {\n                             let mut new_path = path.clone();\n                             let last_segment =\n                                 new_path.segments.pop().expect(\"segments were empty\");\n@@ -389,11 +389,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 .segments\n                                 .push(PathSegment { name: last_segment.name, args: new_params });\n \n-                            Type::ResolvedPath {\n-                                path: new_path,\n-                                did: *did,\n-                                is_generic: *is_generic,\n-                            }\n+                            Type::ResolvedPath { path: new_path, did: *did }\n                         }\n                         _ => panic!(\"Unexpected data: {:?}, {:?}\", ty, data),\n                     };\n@@ -563,11 +559,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         Type::QPath { name: left_name, ref self_type, ref trait_, .. } => {\n                             let ty = &*self_type;\n                             match **trait_ {\n-                                Type::ResolvedPath {\n-                                    path: ref trait_path,\n-                                    ref did,\n-                                    ref is_generic,\n-                                } => {\n+                                Type::ResolvedPath { path: ref trait_path, ref did } => {\n                                     let mut new_trait_path = trait_path.clone();\n \n                                     if self.is_fn_ty(trait_) && left_name == sym::Output {\n@@ -612,7 +604,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                             trait_: Type::ResolvedPath {\n                                                 path: new_trait_path,\n                                                 did: *did,\n-                                                is_generic: *is_generic,\n                                             },\n                                             generic_params: Vec::new(),\n                                         },"}, {"sha": "4a888b22332ee98fa18b915f27de6a52ebe0a3ec", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -389,13 +389,45 @@ crate fn build_impl(\n         }\n     }\n \n+    let document_hidden = cx.render_options.document_hidden;\n     let predicates = tcx.explicit_predicates_of(did);\n     let (trait_items, generics) = match impl_item {\n         Some(impl_) => (\n             impl_\n                 .items\n                 .iter()\n-                .map(|item| tcx.hir().impl_item(item.id).clean(cx))\n+                .map(|item| tcx.hir().impl_item(item.id))\n+                .filter(|item| {\n+                    // Filter out impl items whose corresponding trait item has `doc(hidden)`\n+                    // not to document such impl items.\n+                    // For inherent impls, we don't do any filtering, because that's already done in strip_hidden.rs.\n+\n+                    // When `--document-hidden-items` is passed, we don't\n+                    // do any filtering, too.\n+                    if document_hidden {\n+                        return true;\n+                    }\n+                    if let Some(associated_trait) = associated_trait {\n+                        let assoc_kind = match item.kind {\n+                            hir::ImplItemKind::Const(..) => ty::AssocKind::Const,\n+                            hir::ImplItemKind::Fn(..) => ty::AssocKind::Fn,\n+                            hir::ImplItemKind::TyAlias(..) => ty::AssocKind::Type,\n+                        };\n+                        let trait_item = tcx\n+                            .associated_items(associated_trait.def_id)\n+                            .find_by_name_and_kind(\n+                                tcx,\n+                                item.ident,\n+                                assoc_kind,\n+                                associated_trait.def_id,\n+                            )\n+                            .unwrap(); // SAFETY: For all impl items there exists trait item that has the same name.\n+                        !tcx.get_attrs(trait_item.def_id).lists(sym::doc).has_word(sym::hidden)\n+                    } else {\n+                        true\n+                    }\n+                })\n+                .map(|item| item.clean(cx))\n                 .collect::<Vec<_>>(),\n             impl_.generics.clean(cx),\n         ),"}, {"sha": "611a4d08ab2255ee6612a4e81ab583bfd034748d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -168,7 +168,7 @@ impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n-        ResolvedPath { path, did: trait_ref.def_id, is_generic: false }\n+        ResolvedPath { path, did: trait_ref.def_id }\n     }\n }\n \n@@ -1440,12 +1440,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n                 let path = external_path(cx, did, false, vec![], substs);\n-                ResolvedPath { path, did, is_generic: false }\n+                ResolvedPath { path, did }\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n                 let path = external_path(cx, did, false, vec![], InternalSubsts::empty());\n-                ResolvedPath { path, did, is_generic: false }\n+                ResolvedPath { path, did }\n             }\n             ty::Dynamic(ref obj, ref reg) => {\n                 // HACK: pick the first `did` as the `did` of the trait object. Someone\n@@ -1471,7 +1471,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     let path = external_path(cx, did, false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, ItemType::Trait);\n                     let bound = PolyTrait {\n-                        trait_: ResolvedPath { path, did, is_generic: false },\n+                        trait_: ResolvedPath { path, did },\n                         generic_params: Vec::new(),\n                     };\n                     bounds.push(bound);\n@@ -1488,10 +1488,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let path = external_path(cx, did, false, bindings, substs);\n                 bounds.insert(\n                     0,\n-                    PolyTrait {\n-                        trait_: ResolvedPath { path, did, is_generic: false },\n-                        generic_params: Vec::new(),\n-                    },\n+                    PolyTrait { trait_: ResolvedPath { path, did }, generic_params: Vec::new() },\n                 );\n \n                 DynTrait(bounds, lifetime)"}, {"sha": "fb2183ff2291b83707be86454c0ff4e80708e08e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -1114,10 +1114,7 @@ impl GenericBound {\n         let path = external_path(cx, did, false, vec![], empty);\n         inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n-            PolyTrait {\n-                trait_: ResolvedPath { path, did, is_generic: false },\n-                generic_params: Vec::new(),\n-            },\n+            PolyTrait { trait_: ResolvedPath { path, did }, generic_params: Vec::new() },\n             hir::TraitBoundModifier::Maybe,\n         )\n     }\n@@ -1384,8 +1381,6 @@ crate enum Type {\n     ResolvedPath {\n         path: Path,\n         did: DefId,\n-        /// `true` if is a `T::Name` path for associated types.\n-        is_generic: bool,\n     },\n     /// `dyn for<'a> Trait<'a> + Send + 'static`\n     DynTrait(Vec<PolyTrait>, Option<Lifetime>),\n@@ -1503,9 +1498,10 @@ impl Type {\n         }\n     }\n \n-    crate fn is_generic(&self) -> bool {\n-        match *self {\n-            ResolvedPath { is_generic, .. } => is_generic,\n+    /// Checks if this is a `T::Name` path for an associated type.\n+    crate fn is_assoc_ty(&self) -> bool {\n+        match self {\n+            ResolvedPath { path, .. } => path.is_assoc_ty(),\n             _ => false,\n         }\n     }\n@@ -1994,6 +1990,16 @@ impl Path {\n         String::from(if self.global { \"::\" } else { \"\" })\n             + &self.segments.iter().map(|s| s.name.to_string()).collect::<Vec<_>>().join(\"::\")\n     }\n+\n+    /// Checks if this is a `T::Name` path for an associated type.\n+    crate fn is_assoc_ty(&self) -> bool {\n+        match self.res {\n+            Res::SelfTy(..) if self.segments.len() != 1 => true,\n+            Res::Def(DefKind::TyParam, _) if self.segments.len() != 1 => true,\n+            Res::Def(DefKind::AssocTy, _) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]"}, {"sha": "33d460d587a5176e8727c272dd5acdf873d820e7", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -159,9 +159,7 @@ pub(super) fn external_path(\n \n crate fn strip_type(ty: Type) -> Type {\n     match ty {\n-        Type::ResolvedPath { path, did, is_generic } => {\n-            Type::ResolvedPath { path: strip_path(&path), did, is_generic }\n-        }\n+        Type::ResolvedPath { path, did } => Type::ResolvedPath { path: strip_path(&path), did },\n         Type::DynTrait(mut bounds, lt) => {\n             let first = bounds.remove(0);\n             let stripped_trait = strip_type(first.trait_);\n@@ -404,19 +402,15 @@ crate fn print_const_expr(tcx: TyCtxt<'_>, body: hir::BodyId) -> String {\n crate fn resolve_type(cx: &mut DocContext<'_>, path: Path) -> Type {\n     debug!(\"resolve_type({:?})\", path);\n \n-    let is_generic = match path.res {\n-        Res::PrimTy(p) => return Primitive(PrimitiveType::from(p)),\n-        Res::SelfTy(..) if path.segments.len() == 1 => {\n-            return Generic(kw::SelfUpper);\n-        }\n-        Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => {\n-            return Generic(path.segments[0].name);\n+    match path.res {\n+        Res::PrimTy(p) => Primitive(PrimitiveType::from(p)),\n+        Res::SelfTy(..) if path.segments.len() == 1 => Generic(kw::SelfUpper),\n+        Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => Generic(path.segments[0].name),\n+        _ => {\n+            let did = register_res(cx, path.res);\n+            ResolvedPath { path, did }\n         }\n-        Res::SelfTy(..) | Res::Def(DefKind::TyParam | DefKind::AssocTy, _) => true,\n-        _ => false,\n-    };\n-    let did = register_res(cx, path.res);\n-    ResolvedPath { path, did, is_generic }\n+    }\n }\n \n crate fn get_auto_trait_and_blanket_impls("}, {"sha": "d11781581a8df6c61daa151e3d22eb257bd1899f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -752,9 +752,9 @@ fn fmt_type<'cx>(\n \n     match *t {\n         clean::Generic(name) => write!(f, \"{}\", name),\n-        clean::ResolvedPath { did, ref path, is_generic } => {\n+        clean::ResolvedPath { did, ref path } => {\n             // Paths like `T::Output` and `Self::Output` should be rendered with all segments.\n-            resolved_path(f, did, path, is_generic, use_absolute, cx)\n+            resolved_path(f, did, path, path.is_assoc_ty(), use_absolute, cx)\n         }\n         clean::DynTrait(ref bounds, ref lt) => {\n             f.write_str(\"dyn \")?;\n@@ -825,28 +825,17 @@ fn fmt_type<'cx>(\n                 hir::Mutability::Mut => \"mut\",\n                 hir::Mutability::Not => \"const\",\n             };\n-            match **t {\n-                clean::Generic(_) | clean::ResolvedPath { is_generic: true, .. } => {\n-                    if f.alternate() {\n-                        primitive_link(\n-                            f,\n-                            clean::PrimitiveType::RawPointer,\n-                            &format!(\"*{} {:#}\", m, t.print(cx)),\n-                            cx,\n-                        )\n-                    } else {\n-                        primitive_link(\n-                            f,\n-                            clean::PrimitiveType::RawPointer,\n-                            &format!(\"*{} {}\", m, t.print(cx)),\n-                            cx,\n-                        )\n-                    }\n-                }\n-                _ => {\n-                    primitive_link(f, clean::PrimitiveType::RawPointer, &format!(\"*{} \", m), cx)?;\n-                    fmt::Display::fmt(&t.print(cx), f)\n-                }\n+\n+            if matches!(**t, clean::Generic(_)) || t.is_assoc_ty() {\n+                let text = if f.alternate() {\n+                    format!(\"*{} {:#}\", m, t.print(cx))\n+                } else {\n+                    format!(\"*{} {}\", m, t.print(cx))\n+                };\n+                primitive_link(f, clean::PrimitiveType::RawPointer, &text, cx)\n+            } else {\n+                primitive_link(f, clean::PrimitiveType::RawPointer, &format!(\"*{} \", m), cx)?;\n+                fmt::Display::fmt(&t.print(cx), f)\n             }\n         }\n         clean::BorrowedRef { lifetime: ref l, mutability, type_: ref ty } => {"}, {"sha": "8888b42d948cd0bb072c406ac8f5724cf5df304e", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -712,11 +712,10 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         let mut implementor_dups: FxHashMap<Symbol, (DefId, bool)> = FxHashMap::default();\n         for implementor in implementors {\n             match implementor.inner_impl().for_ {\n-                clean::ResolvedPath { ref path, did, is_generic: false, .. }\n+                clean::ResolvedPath { ref path, did, .. }\n                 | clean::BorrowedRef {\n-                    type_: box clean::ResolvedPath { ref path, did, is_generic: false, .. },\n-                    ..\n-                } => {\n+                    type_: box clean::ResolvedPath { ref path, did, .. }, ..\n+                } if !path.is_assoc_ty() => {\n                     let &mut (prev_did, ref mut has_duplicates) =\n                         implementor_dups.entry(path.last()).or_insert((did, false));\n                     if prev_did != did {\n@@ -1410,11 +1409,12 @@ fn render_implementor(\n     // If there's already another implementor that has the same abridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n     let use_absolute = match implementor.inner_impl().for_ {\n-        clean::ResolvedPath { ref path, is_generic: false, .. }\n-        | clean::BorrowedRef {\n-            type_: box clean::ResolvedPath { ref path, is_generic: false, .. },\n-            ..\n-        } => implementor_dups[&path.last()].1,\n+        clean::ResolvedPath { ref path, .. }\n+        | clean::BorrowedRef { type_: box clean::ResolvedPath { ref path, .. }, .. }\n+            if !path.is_assoc_ty() =>\n+        {\n+            implementor_dups[&path.last()].1\n+        }\n         _ => false,\n     };\n     render_impl("}, {"sha": "fda9070305797ad417e811466eb329380b924d27", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -387,7 +387,7 @@ impl FromWithTcx<clean::Type> for Type {\n     fn from_tcx(ty: clean::Type, tcx: TyCtxt<'_>) -> Self {\n         use clean::Type::*;\n         match ty {\n-            ResolvedPath { path, did, is_generic: _ } => Type::ResolvedPath {\n+            ResolvedPath { path, did } => Type::ResolvedPath {\n                 name: path.whole_name(),\n                 id: from_item_id(did.into()),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),"}, {"sha": "90300dbd16b136261991b283abfeda085b8f6578", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -128,7 +128,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n                 return None;\n             }\n             if let Some(did) = imp.for_.def_id() {\n-                if did.is_local() && !imp.for_.is_generic() && !self.retained.contains(&did.into())\n+                if did.is_local() && !imp.for_.is_assoc_ty() && !self.retained.contains(&did.into())\n                 {\n                     debug!(\"ImplStripper: impl item for stripped type; removing\");\n                     return None;"}, {"sha": "95b3e9b652303e2599421f1689847604a92e3821", "filename": "src/test/rustdoc/hidden-trait-methods-with-document-hidden-items.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Ftest%2Frustdoc%2Fhidden-trait-methods-with-document-hidden-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Ftest%2Frustdoc%2Fhidden-trait-methods-with-document-hidden-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-trait-methods-with-document-hidden-items.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -0,0 +1,31 @@\n+// compile-flags: -Z unstable-options --document-hidden-items\n+\n+// test for trait methods with `doc(hidden)` with `--document-hidden-items` passed.\n+#![crate_name = \"foo\"]\n+\n+// @has foo/trait.Trait.html\n+// @has - '//*[@id=\"associatedtype.Foo\"]' 'type Foo'\n+// @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar'\n+// @has - '//*[@id=\"tymethod.f\"]' 'fn f()'\n+// @has - '//*[@id=\"tymethod.g\"]' 'fn g()'\n+pub trait Trait {\n+    #[doc(hidden)]\n+    type Foo;\n+    type Bar;\n+    #[doc(hidden)]\n+    fn f();\n+    fn g();\n+}\n+\n+// @has foo/struct.S.html\n+// @has - '//*[@id=\"associatedtype.Foo\"]' 'type Foo'\n+// @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar'\n+// @has - '//*[@id=\"method.f\"]' 'fn f()'\n+// @has - '//*[@id=\"method.g\"]' 'fn g()'\n+pub struct S;\n+impl Trait for S {\n+    type Foo = ();\n+    type Bar = ();\n+    fn f() {}\n+    fn g() {}\n+}"}, {"sha": "e924ba7d0acded047481a38786c27a0b19671bb2", "filename": "src/test/rustdoc/hidden-trait-methods.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Ftest%2Frustdoc%2Fhidden-trait-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Ftest%2Frustdoc%2Fhidden-trait-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-trait-methods.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -0,0 +1,29 @@\n+// test for trait methods with `doc(hidden)`.\n+#![crate_name = \"foo\"]\n+\n+// @has foo/trait.Trait.html\n+// @!has - '//*[@id=\"associatedtype.Foo\"]' 'type Foo'\n+// @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar'\n+// @!has - '//*[@id=\"tymethod.f\"]' 'fn f()'\n+// @has - '//*[@id=\"tymethod.g\"]' 'fn g()'\n+pub trait Trait {\n+    #[doc(hidden)]\n+    type Foo;\n+    type Bar;\n+    #[doc(hidden)]\n+    fn f();\n+    fn g();\n+}\n+\n+// @has foo/struct.S.html\n+// @!has - '//*[@id=\"associatedtype.Foo\"]' 'type Foo'\n+// @has - '//*[@id=\"associatedtype.Bar\"]' 'type Bar'\n+// @!has - '//*[@id=\"method.f\"]' 'fn f()'\n+// @has - '//*[@id=\"method.g\"]' 'fn g()'\n+pub struct S;\n+impl Trait for S {\n+    type Foo = ();\n+    type Bar = ();\n+    fn f() {}\n+    fn g() {}\n+}"}, {"sha": "8a699f13f2ed267328eeca69fed865048b05225c", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4da89a180facdecf168cbe0ddbc6bfbdd9f6e696/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=4da89a180facdecf168cbe0ddbc6bfbdd9f6e696", "patch": "@@ -995,7 +995,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for use of `.iter().nth()` (and the related\n-    /// `.iter_mut().nth()`) on standard library types with O(1) element access.\n+    /// `.iter_mut().nth()`) on standard library types with *O*(1) element access.\n     ///\n     /// ### Why is this bad?\n     /// `.get()` and `.get_mut()` are more efficient and more"}]}