{"sha": "3dbb741a4b54516e6979f85f4847361413a1b4a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYmI3NDFhNGI1NDUxNmU2OTc5Zjg1ZjQ4NDczNjE0MTNhMWI0YTM=", "commit": {"author": {"name": "Kazuyoshi Kato", "email": "kato.kazuyoshi@gmail.com", "date": "2018-09-04T08:44:19Z"}, "committer": {"name": "Kazuyoshi Kato", "email": "kato.kazuyoshi@gmail.com", "date": "2018-09-13T04:01:14Z"}, "message": "rustdoc: Sort implementors\n\nFixes #53812", "tree": {"sha": "30e90de067abbde85c7f750531901315ebb0fd62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e90de067abbde85c7f750531901315ebb0fd62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dbb741a4b54516e6979f85f4847361413a1b4a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbb741a4b54516e6979f85f4847361413a1b4a3", "html_url": "https://github.com/rust-lang/rust/commit/3dbb741a4b54516e6979f85f4847361413a1b4a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dbb741a4b54516e6979f85f4847361413a1b4a3/comments", "author": {"login": "kzys", "id": 19111, "node_id": "MDQ6VXNlcjE5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/19111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kzys", "html_url": "https://github.com/kzys", "followers_url": "https://api.github.com/users/kzys/followers", "following_url": "https://api.github.com/users/kzys/following{/other_user}", "gists_url": "https://api.github.com/users/kzys/gists{/gist_id}", "starred_url": "https://api.github.com/users/kzys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kzys/subscriptions", "organizations_url": "https://api.github.com/users/kzys/orgs", "repos_url": "https://api.github.com/users/kzys/repos", "events_url": "https://api.github.com/users/kzys/events{/privacy}", "received_events_url": "https://api.github.com/users/kzys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kzys", "id": 19111, "node_id": "MDQ6VXNlcjE5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/19111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kzys", "html_url": "https://github.com/kzys", "followers_url": "https://api.github.com/users/kzys/followers", "following_url": "https://api.github.com/users/kzys/following{/other_user}", "gists_url": "https://api.github.com/users/kzys/gists{/gist_id}", "starred_url": "https://api.github.com/users/kzys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kzys/subscriptions", "organizations_url": "https://api.github.com/users/kzys/orgs", "repos_url": "https://api.github.com/users/kzys/repos", "events_url": "https://api.github.com/users/kzys/events{/privacy}", "received_events_url": "https://api.github.com/users/kzys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2302daef3608c09e2b50193a64611b18ced86f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2302daef3608c09e2b50193a64611b18ced86f3", "html_url": "https://github.com/rust-lang/rust/commit/f2302daef3608c09e2b50193a64611b18ced86f3"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "54c746cae410fcd9f035ecd74ddf627517671819", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3dbb741a4b54516e6979f85f4847361413a1b4a3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dbb741a4b54516e6979f85f4847361413a1b4a3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3dbb741a4b54516e6979f85f4847361413a1b4a3", "patch": "@@ -2300,17 +2300,21 @@ fn document_non_exhaustive(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::R\n }\n \n fn name_key(name: &str) -> (&str, u64, usize) {\n+    let end = name.bytes()\n+        .rposition(|b| b.is_ascii_digit()).map_or(name.len(), |i| i + 1);\n+\n     // find number at end\n-    let split = name.bytes().rposition(|b| b < b'0' || b'9' < b).map_or(0, |s| s + 1);\n+    let split = name[0..end].bytes()\n+        .rposition(|b| !b.is_ascii_digit()).map_or(0, |i| i + 1);\n \n     // count leading zeroes\n     let after_zeroes =\n-        name[split..].bytes().position(|b| b != b'0').map_or(name.len(), |extra| split + extra);\n+        name[split..end].bytes().position(|b| b != b'0').map_or(name.len(), |extra| split + extra);\n \n     // sort leading zeroes last\n     let num_zeroes = after_zeroes - split;\n \n-    match name[split..].parse() {\n+    match name[split..end].parse() {\n         Ok(n) => (&name[..split], n, num_zeroes),\n         Err(_) => (name, 0, num_zeroes),\n     }\n@@ -2701,6 +2705,14 @@ fn bounds(t_bounds: &[clean::GenericBound]) -> String {\n     bounds\n }\n \n+fn compare_impl<'a, 'b>(lhs: &'a &&Impl, rhs: &'b &&Impl) -> Ordering {\n+    let lhs = format!(\"{}\", lhs.inner_impl());\n+    let rhs = format!(\"{}\", rhs.inner_impl());\n+\n+    // lhs and rhs are formatted as HTML, which may be unnecessary\n+    name_key(&lhs).cmp(&name_key(&rhs))\n+}\n+\n fn item_trait(\n     w: &mut fmt::Formatter,\n     cx: &Context,\n@@ -2904,9 +2916,12 @@ fn item_trait(\n                                          .map_or(true, |d| cache.paths.contains_key(&d)));\n \n \n-        let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) = local.iter()\n+        let (mut synthetic, mut concrete): (Vec<&&Impl>, Vec<&&Impl>) = local.iter()\n             .partition(|i| i.inner_impl().synthetic);\n \n+        synthetic.sort_by(compare_impl);\n+        concrete.sort_by(compare_impl);\n+\n         if !foreign.is_empty() {\n             write!(w, \"\n                 <h2 id='foreign-impls' class='small-section-header'>\n@@ -4715,6 +4730,7 @@ fn test_name_sorting() {\n                  \"Fruit1\", \"Fruit01\",\n                  \"Fruit2\", \"Fruit02\",\n                  \"Fruit20\",\n+                 \"Fruit30x\",\n                  \"Fruit100\",\n                  \"Pear\"];\n     let mut sorted = names.to_owned();"}]}