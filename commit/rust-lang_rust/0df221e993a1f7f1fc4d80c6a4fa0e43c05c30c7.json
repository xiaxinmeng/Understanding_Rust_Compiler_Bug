{"sha": "0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZjIyMWU5OTNhMWY3ZjFmYzRkODBjNmE0ZmEwZTQzYzA1YzMwYzc=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-26T12:42:48Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-05-26T23:24:37Z"}, "message": "rustc: provide more precise information about refutable patterns.\n\nThe compiler now points exactly which part(s) of a pattern are\nrefutable, rather than just highlighting the whole pattern.", "tree": {"sha": "70991567ab924e367ad9db9f46191e071ee53514", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70991567ab924e367ad9db9f46191e071ee53514"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7", "html_url": "https://github.com/rust-lang/rust/commit/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2a137829e07505aaaa2be4ae97d6ecfb6ef6823", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823", "html_url": "https://github.com/rust-lang/rust/commit/f2a137829e07505aaaa2be4ae97d6ecfb6ef6823"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "9b751447504efc0ff63960137ba40852857ce29c", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 41, "deletions": 25, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7", "patch": "@@ -863,13 +863,17 @@ fn default(cx: &MatchCheckCtxt, r: &[@Pat]) -> Option<Vec<@Pat> > {\n \n fn check_local(cx: &mut MatchCheckCtxt, loc: &Local) {\n     visit::walk_local(cx, loc, ());\n-    if is_refutable(cx, loc.pat) {\n-        let name = match loc.source {\n-            LocalLet => \"local\",\n-            LocalFor => \"`for` loop\"\n-        };\n \n-        cx.tcx.sess.span_err(loc.pat.span,\n+    let name = match loc.source {\n+        LocalLet => \"local\",\n+        LocalFor => \"`for` loop\"\n+    };\n+\n+    let mut spans = vec![];\n+    find_refutable(cx, loc.pat, &mut spans);\n+\n+    for span in spans.iter() {\n+        cx.tcx.sess.span_err(*span,\n                              format!(\"refutable pattern in {} binding\", name).as_slice());\n     }\n \n@@ -884,53 +888,65 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n             sp: Span) {\n     visit::walk_fn(cx, kind, decl, body, sp, ());\n     for input in decl.inputs.iter() {\n-        if is_refutable(cx, input.pat) {\n-            cx.tcx.sess.span_err(input.pat.span,\n+        let mut spans = vec![];\n+        find_refutable(cx, input.pat, &mut spans);\n+\n+        for span in spans.iter() {\n+            cx.tcx.sess.span_err(*span,\n                                  \"refutable pattern in function argument\");\n         }\n     }\n }\n \n-fn is_refutable(cx: &MatchCheckCtxt, pat: &Pat) -> bool {\n+fn find_refutable(cx: &MatchCheckCtxt, pat: &Pat, spans: &mut Vec<Span>) {\n+    macro_rules! this_pattern {\n+        () => {\n+            {\n+                spans.push(pat.span);\n+                return\n+            }\n+        }\n+    }\n     let opt_def = cx.tcx.def_map.borrow().find_copy(&pat.id);\n     match opt_def {\n       Some(DefVariant(enum_id, _, _)) => {\n         if ty::enum_variants(cx.tcx, enum_id).len() != 1u {\n-            return true;\n+            this_pattern!()\n         }\n       }\n-      Some(DefStatic(..)) => return true,\n+      Some(DefStatic(..)) => this_pattern!(),\n       _ => ()\n     }\n \n     match pat.node {\n       PatUniq(sub) | PatRegion(sub) | PatIdent(_, _, Some(sub)) => {\n-        is_refutable(cx, sub)\n+        find_refutable(cx, sub, spans)\n       }\n-      PatWild | PatWildMulti | PatIdent(_, _, None) => { false }\n+      PatWild | PatWildMulti | PatIdent(_, _, None) => {}\n       PatLit(lit) => {\n           match lit.node {\n             ExprLit(lit) => {\n                 match lit.node {\n-                    LitNil => false,    // `()`\n-                    _ => true,\n+                    LitNil => {}    // `()`\n+                    _ => this_pattern!(),\n                 }\n             }\n-            _ => true,\n+            _ => this_pattern!(),\n           }\n       }\n-      PatRange(_, _) => { true }\n+      PatRange(_, _) => { this_pattern!() }\n       PatStruct(_, ref fields, _) => {\n-        fields.iter().any(|f| is_refutable(cx, f.pat))\n-      }\n-      PatTup(ref elts) => {\n-        elts.iter().any(|elt| is_refutable(cx, *elt))\n+          for f in fields.iter() {\n+              find_refutable(cx, f.pat, spans);\n+          }\n       }\n-      PatEnum(_, Some(ref args)) => {\n-        args.iter().any(|a| is_refutable(cx, *a))\n+      PatTup(ref elts) | PatEnum(_, Some(ref elts))=> {\n+          for elt in elts.iter() {\n+              find_refutable(cx, *elt, spans)\n+          }\n       }\n-      PatEnum(_,_) => { false }\n-      PatVec(..) => { true }\n+      PatEnum(_,_) => {}\n+      PatVec(..) => { this_pattern!() }\n     }\n }\n "}, {"sha": "efa2dbad83fdaa9f65c747fc3f61ad2fea730443", "filename": "src/test/compile-fail/precise-refutable-pattern-errors.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7/src%2Ftest%2Fcompile-fail%2Fprecise-refutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7/src%2Ftest%2Fcompile-fail%2Fprecise-refutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprecise-refutable-pattern-errors.rs?ref=0df221e993a1f7f1fc4d80c6a4fa0e43c05c30c7", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+fn func(\n+    (\n+        1, //~ ERROR refutable pattern in function argument\n+        (\n+            Some( //~ ERROR refutable pattern in function argument\n+                1), // nested, so no warning.\n+            2..3 //~ ERROR refutable pattern in function argument\n+            )\n+        ): (int, (Option<int>, int))\n+        ) {}\n+\n+fn main() {\n+    let (\n+        1, //~ ERROR refutable pattern in local binding\n+        (\n+            Some( //~ ERROR refutable pattern in local binding\n+                1), // nested, so no warning.\n+            2..3 //~ ERROR refutable pattern in local binding\n+            )\n+        ) = (1, (None, 2));\n+}"}]}