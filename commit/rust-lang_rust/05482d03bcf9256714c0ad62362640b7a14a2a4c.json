{"sha": "05482d03bcf9256714c0ad62362640b7a14a2a4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NDgyZDAzYmNmOTI1NjcxNGMwYWQ2MjM2MjY0MGI3YTE0YTJhNGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-17T04:36:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-17T04:36:16Z"}, "message": "Rollup merge of #66395 - jplatte:centralize-panic-docs, r=Dylan-DPC\n\nCentralize panic macro documentation\n\nThis is just the main commit from #61511 (which got closed because the author didn't reply) cherry-picked on the current master. Building `core` and `std` on this branch in stage 1 succeeded, which I thinks means the issues from the previous PR should be gone (but let's see what CI says).", "tree": {"sha": "0fd05906063d37a53e0aaed3c46a8e1759e1fbfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fd05906063d37a53e0aaed3c46a8e1759e1fbfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05482d03bcf9256714c0ad62362640b7a14a2a4c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd0M5BCRBK7hj4Ov3rIwAAdHIIALD4FG61e+/FfaVO4ZqGk1Ug\nf1jhEGrmNj+qZQi4u88ZGLHcRt95SSQjZVg1bO48oQMVWb7ZjnlkS8ioO7XrmwOt\n826Z2ha3ZHtlaDBD9uFOjVAndurXWs1Odc9byF9n8H5a+f3GMK4wt7usq4WGRKqj\nfMV+C6inhNKhErri2DpfMhVeEv0QSLQOoMV/qnvN9yYtzaMSqbX5uiS4OShdYmxC\n9yPZ++tdDHW8V/fM82QnkkPk3PREr/bPrZPAZSP5aRQdOdNMK4curkJm74/n3c07\nn15wzvvMCb9FrIZynNwNp7Lx/ZJ64DJBumeK2H3y/b/x/gCRRGohOv8sikApCJA=\n=fGBu\n-----END PGP SIGNATURE-----\n", "payload": "tree 0fd05906063d37a53e0aaed3c46a8e1759e1fbfd\nparent 842612fcc00a679688bbc1bb74bb7480d12a0ac7\nparent 6fc18a99646ca9228b29903428e2791fd529631d\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573965376 +0900\ncommitter GitHub <noreply@github.com> 1573965376 +0900\n\nRollup merge of #66395 - jplatte:centralize-panic-docs, r=Dylan-DPC\n\nCentralize panic macro documentation\n\nThis is just the main commit from #61511 (which got closed because the author didn't reply) cherry-picked on the current master. Building `core` and `std` on this branch in stage 1 succeeded, which I thinks means the issues from the previous PR should be gone (but let's see what CI says).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05482d03bcf9256714c0ad62362640b7a14a2a4c", "html_url": "https://github.com/rust-lang/rust/commit/05482d03bcf9256714c0ad62362640b7a14a2a4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05482d03bcf9256714c0ad62362640b7a14a2a4c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "842612fcc00a679688bbc1bb74bb7480d12a0ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/842612fcc00a679688bbc1bb74bb7480d12a0ac7", "html_url": "https://github.com/rust-lang/rust/commit/842612fcc00a679688bbc1bb74bb7480d12a0ac7"}, {"sha": "6fc18a99646ca9228b29903428e2791fd529631d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc18a99646ca9228b29903428e2791fd529631d", "html_url": "https://github.com/rust-lang/rust/commit/6fc18a99646ca9228b29903428e2791fd529631d"}], "stats": {"total": 99, "additions": 49, "deletions": 50}, "files": [{"sha": "7f27e62fb159836b3984ccdf1b635592d78f7939", "filename": "src/libcore/macros/mod.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05482d03bcf9256714c0ad62362640b7a14a2a4c/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05482d03bcf9256714c0ad62362640b7a14a2a4c/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=05482d03bcf9256714c0ad62362640b7a14a2a4c", "patch": "@@ -1,6 +1,4 @@\n-/// Panics the current thread.\n-///\n-/// For details, see `std::macros`.\n+#[doc(include = \"panic.md\")]\n #[macro_export]\n #[allow_internal_unstable(core_panic,\n     // FIXME(anp, eddyb) `core_intrinsics` is used here to allow calling", "previous_filename": "src/libcore/macros.rs"}, {"sha": "3ecfc43be049b534478bb5bdaf58dfac63f31a94", "filename": "src/libcore/macros/panic.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/05482d03bcf9256714c0ad62362640b7a14a2a4c/src%2Flibcore%2Fmacros%2Fpanic.md", "raw_url": "https://github.com/rust-lang/rust/raw/05482d03bcf9256714c0ad62362640b7a14a2a4c/src%2Flibcore%2Fmacros%2Fpanic.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fpanic.md?ref=05482d03bcf9256714c0ad62362640b7a14a2a4c", "patch": "@@ -0,0 +1,47 @@\n+Panics the current thread.\n+\n+This allows a program to terminate immediately and provide feedback\n+to the caller of the program. `panic!` should be used when a program reaches\n+an unrecoverable state.\n+\n+This macro is the perfect way to assert conditions in example code and in\n+tests. `panic!` is closely tied with the `unwrap` method of both [`Option`]\n+and [`Result`][runwrap] enums. Both implementations call `panic!` when they are set\n+to None or Err variants.\n+\n+This macro is used to inject panic into a Rust thread, causing the thread to\n+panic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\n+and the single-argument form of the `panic!` macro will be the value which\n+is transmitted.\n+\n+[`Result`] enum is often a better solution for recovering from errors than\n+using the `panic!` macro. This macro should be used to avoid proceeding using\n+incorrect values, such as from external sources. Detailed information about\n+error handling is found in the [book].\n+\n+The multi-argument form of this macro panics with a string and has the\n+[`format!`] syntax for building a string.\n+\n+See also the macro [`compile_error!`], for raising errors during compilation.\n+\n+[runwrap]: ../std/result/enum.Result.html#method.unwrap\n+[`Option`]: ../std/option/enum.Option.html#method.unwrap\n+[`Result`]: ../std/result/enum.Result.html\n+[`format!`]: ../std/macro.format.html\n+[`compile_error!`]: ../std/macro.compile_error.html\n+[book]: ../book/ch09-00-error-handling.html\n+\n+# Current implementation\n+\n+If the main thread panics it will terminate all your threads and end your\n+program with code `101`.\n+\n+# Examples\n+\n+```should_panic\n+# #![allow(unreachable_code)]\n+panic!();\n+panic!(\"this is a terrible mistake!\");\n+panic!(4); // panic with the value of 4 to be collected elsewhere\n+panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n+```"}, {"sha": "2df79ee97fbacec9c271972fb6eaf15ac76c291a", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/05482d03bcf9256714c0ad62362640b7a14a2a4c/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05482d03bcf9256714c0ad62362640b7a14a2a4c/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=05482d03bcf9256714c0ad62362640b7a14a2a4c", "patch": "@@ -4,53 +4,7 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-/// Panics the current thread.\n-///\n-/// This allows a program to terminate immediately and provide feedback\n-/// to the caller of the program. `panic!` should be used when a program reaches\n-/// an unrecoverable state.\n-///\n-/// This macro is the perfect way to assert conditions in example code and in\n-/// tests. `panic!` is closely tied with the `unwrap` method of both [`Option`]\n-/// and [`Result`][runwrap] enums. Both implementations call `panic!` when they are set\n-/// to None or Err variants.\n-///\n-/// This macro is used to inject panic into a Rust thread, causing the thread to\n-/// panic entirely. Each thread's panic can be reaped as the `Box<Any>` type,\n-/// and the single-argument form of the `panic!` macro will be the value which\n-/// is transmitted.\n-///\n-/// [`Result`] enum is often a better solution for recovering from errors than\n-/// using the `panic!` macro. This macro should be used to avoid proceeding using\n-/// incorrect values, such as from external sources. Detailed information about\n-/// error handling is found in the [book].\n-///\n-/// The multi-argument form of this macro panics with a string and has the\n-/// [`format!`] syntax for building a string.\n-///\n-/// See also the macro [`compile_error!`], for raising errors during compilation.\n-///\n-/// [runwrap]: ../std/result/enum.Result.html#method.unwrap\n-/// [`Option`]: ../std/option/enum.Option.html#method.unwrap\n-/// [`Result`]: ../std/result/enum.Result.html\n-/// [`format!`]: ../std/macro.format.html\n-/// [`compile_error!`]: ../std/macro.compile_error.html\n-/// [book]: ../book/ch09-00-error-handling.html\n-///\n-/// # Current implementation\n-///\n-/// If the main thread panics it will terminate all your threads and end your\n-/// program with code `101`.\n-///\n-/// # Examples\n-///\n-/// ```should_panic\n-/// # #![allow(unreachable_code)]\n-/// panic!();\n-/// panic!(\"this is a terrible mistake!\");\n-/// panic!(4); // panic with the value of 4 to be collected elsewhere\n-/// panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n-/// ```\n+#[doc(include = \"../libcore/macros/panic.md\")]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable(libstd_sys_internals)]"}]}