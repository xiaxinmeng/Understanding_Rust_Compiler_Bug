{"sha": "430d39da9dc858dcd4c1065e016259b4dd02c6b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMGQzOWRhOWRjODU4ZGNkNGMxMDY1ZTAxNjI1OWI0ZGQwMmM2YjU=", "commit": {"author": {"name": "Michael Zapata", "email": "michael.zapata@scality.com", "date": "2016-12-05T02:21:08Z"}, "committer": {"name": "Michael Zapata", "email": "michael.zapata@scality.com", "date": "2016-12-12T14:26:28Z"}, "message": "feat(rustdoc): harmonise error messages\n\nBased on unix tools wording, it follows a standard format:\n`program_name: context: error message` on stderr, prompting the user\nto use the `--help` option in case of misuse.", "tree": {"sha": "7068fe303fe0afdb8f6e55438772cc03cc3d0973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7068fe303fe0afdb8f6e55438772cc03cc3d0973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/430d39da9dc858dcd4c1065e016259b4dd02c6b5", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niJEEABYIADkWIQQcFpPQEQ/b+1VND41FB/Cin2Am2gUCWE6zlBscbWljaGFlbC56\nYXBhdGFAc2NhbGl0eS5jb20ACgkQRQfwop9gJtrcjgEAx/bl1uYGf7zyeSz62vSL\nyR4xXaBzpWnGAdxwQNxQL/cBALnb1GsQmehBK3YzHvqBpoonRI+qInIBaYJwYjlU\nUj4O\n=UaBR\n-----END PGP SIGNATURE-----", "payload": "tree 7068fe303fe0afdb8f6e55438772cc03cc3d0973\nparent 8d66181b5e35295deea24c389db5366d0776f7f8\nauthor Michael Zapata <michael.zapata@scality.com> 1480904468 +0100\ncommitter Michael Zapata <michael.zapata@scality.com> 1481552788 +0100\n\nfeat(rustdoc): harmonise error messages\n\nBased on unix tools wording, it follows a standard format:\n`program_name: context: error message` on stderr, prompting the user\nto use the `--help` option in case of misuse.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/430d39da9dc858dcd4c1065e016259b4dd02c6b5", "html_url": "https://github.com/rust-lang/rust/commit/430d39da9dc858dcd4c1065e016259b4dd02c6b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/430d39da9dc858dcd4c1065e016259b4dd02c6b5/comments", "author": null, "committer": null, "parents": [{"sha": "8d66181b5e35295deea24c389db5366d0776f7f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d66181b5e35295deea24c389db5366d0776f7f8", "html_url": "https://github.com/rust-lang/rust/commit/8d66181b5e35295deea24c389db5366d0776f7f8"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "72ee56ae1af687a1ab6ee940ae877d133cb11617", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/430d39da9dc858dcd4c1065e016259b4dd02c6b5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430d39da9dc858dcd4c1065e016259b4dd02c6b5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=430d39da9dc858dcd4c1065e016259b4dd02c6b5", "patch": "@@ -54,6 +54,9 @@ extern crate serialize as rustc_serialize; // used by deriving\n use std::collections::{BTreeMap, BTreeSet};\n use std::default::Default;\n use std::env;\n+use std::fmt::Display;\n+use std::io;\n+use std::io::Write;\n use std::path::PathBuf;\n use std::process;\n use std::sync::mpsc::channel;\n@@ -183,7 +186,7 @@ pub fn main_args(args: &[String]) -> isize {\n     let matches = match getopts::getopts(&args[1..], &all_groups) {\n         Ok(m) => m,\n         Err(err) => {\n-            println!(\"{}\", err);\n+            print_error(err);\n             return 1;\n         }\n     };\n@@ -211,11 +214,11 @@ pub fn main_args(args: &[String]) -> isize {\n     }\n \n     if matches.free.is_empty() {\n-        println!(\"expected an input file to act on\");\n+        print_error(\"missing file operand\");\n         return 1;\n     }\n     if matches.free.len() > 1 {\n-        println!(\"only one input file may be specified\");\n+        print_error(\"too many file operands\");\n         return 1;\n     }\n     let input = &matches.free[0];\n@@ -227,7 +230,7 @@ pub fn main_args(args: &[String]) -> isize {\n     let externs = match parse_externs(&matches) {\n         Ok(ex) => ex,\n         Err(err) => {\n-            println!(\"{}\", err);\n+            print_error(err);\n             return 1;\n         }\n     };\n@@ -247,14 +250,16 @@ pub fn main_args(args: &[String]) -> isize {\n \n     if let Some(ref p) = css_file_extension {\n         if !p.is_file() {\n-            println!(\"{}\", \"--extend-css option must take a css file as input\");\n+            writeln!(\n+                &mut io::stderr(),\n+                \"rustdoc: option --extend-css argument must be a file.\"\n+            ).unwrap();\n             return 1;\n         }\n     }\n \n     let external_html = match ExternalHtml::load(\n-            &matches.opt_strs(\"html-in-header\"),\n-            &matches.opt_strs(\"html-before-content\"),\n+            &matches.opt_strs(\"html-in-header\"), &matches.opt_strs(\"html-before-content\"),\n             &matches.opt_strs(\"html-after-content\")) {\n         Some(eh) => eh,\n         None => return 3\n@@ -291,17 +296,26 @@ pub fn main_args(args: &[String]) -> isize {\n                 0\n             }\n             Some(s) => {\n-                println!(\"unknown output format: {}\", s);\n+                print_error(format!(\"unknown output format: {}\", s));\n                 1\n             }\n         }\n     });\n     res.unwrap_or_else(|s| {\n-        println!(\"input error: {}\", s);\n+        print_error(format!(\"input error: {}\", s));\n         1\n     })\n }\n \n+/// Prints an uniformised error message on the standard error output\n+fn print_error<T>(error_message: T) where T: Display {\n+    writeln!(\n+        &mut io::stderr(),\n+        \"rustdoc: {}\\nTry 'rustdoc --help' for more information.\",\n+        error_message\n+    ).unwrap();\n+}\n+\n /// Looks inside the command line arguments to extract the relevant input format\n /// and files and then generates the necessary rustdoc output for formatting.\n fn acquire_input<R, F>(input: &str,"}, {"sha": "9dbc9d30e606b48851c59384b1d3ff93b5fc2bb9", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/430d39da9dc858dcd4c1065e016259b4dd02c6b5/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/430d39da9dc858dcd4c1065e016259b4dd02c6b5/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=430d39da9dc858dcd4c1065e016259b4dd02c6b5", "patch": "@@ -71,7 +71,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n     let mut out = match File::create(&output) {\n         Err(e) => {\n             let _ = writeln!(&mut io::stderr(),\n-                             \"error opening `{}` for writing: {}\",\n+                             \"rustdoc: {}: {}\",\n                              output.display(), e);\n             return 4;\n         }\n@@ -80,8 +80,10 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n \n     let (metadata, text) = extract_leading_metadata(&input_str);\n     if metadata.is_empty() {\n-        let _ = writeln!(&mut io::stderr(),\n-                         \"invalid markdown file: expecting initial line with `% ...TITLE...`\");\n+        let _ = writeln!(\n+            &mut io::stderr(),\n+            \"rustdoc: invalid markdown file: expecting initial line with `% ...TITLE...`\"\n+        );\n         return 5;\n     }\n     let title = metadata[0];\n@@ -132,7 +134,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n     match err {\n         Err(e) => {\n             let _ = writeln!(&mut io::stderr(),\n-                             \"error writing to `{}`: {}\",\n+                             \"rustdoc: cannot write to `{}`: {}\",\n                              output.display(), e);\n             6\n         }"}]}