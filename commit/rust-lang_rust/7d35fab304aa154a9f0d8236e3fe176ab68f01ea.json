{"sha": "7d35fab304aa154a9f0d8236e3fe176ab68f01ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzVmYWIzMDRhYTE1NGE5ZjBkODIzNmUzZmUxNzZhYjY4ZjAxZWE=", "commit": {"author": {"name": "Karim Snj", "email": "karim.snj@gmail.com", "date": "2018-03-01T22:23:41Z"}, "committer": {"name": "Karim Snj", "email": "karim.snj@gmail.com", "date": "2018-03-01T23:01:08Z"}, "message": "lint: while loop: detect if no var from the condition is mutated", "tree": {"sha": "e6c95492a3730660b180f5f8ce4a0af73d178703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6c95492a3730660b180f5f8ce4a0af73d178703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d35fab304aa154a9f0d8236e3fe176ab68f01ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d35fab304aa154a9f0d8236e3fe176ab68f01ea", "html_url": "https://github.com/rust-lang/rust/commit/7d35fab304aa154a9f0d8236e3fe176ab68f01ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d35fab304aa154a9f0d8236e3fe176ab68f01ea/comments", "author": {"login": "kimsnj", "id": 302132, "node_id": "MDQ6VXNlcjMwMjEzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimsnj", "html_url": "https://github.com/kimsnj", "followers_url": "https://api.github.com/users/kimsnj/followers", "following_url": "https://api.github.com/users/kimsnj/following{/other_user}", "gists_url": "https://api.github.com/users/kimsnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimsnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimsnj/subscriptions", "organizations_url": "https://api.github.com/users/kimsnj/orgs", "repos_url": "https://api.github.com/users/kimsnj/repos", "events_url": "https://api.github.com/users/kimsnj/events{/privacy}", "received_events_url": "https://api.github.com/users/kimsnj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kimsnj", "id": 302132, "node_id": "MDQ6VXNlcjMwMjEzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimsnj", "html_url": "https://github.com/kimsnj", "followers_url": "https://api.github.com/users/kimsnj/followers", "following_url": "https://api.github.com/users/kimsnj/following{/other_user}", "gists_url": "https://api.github.com/users/kimsnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimsnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimsnj/subscriptions", "organizations_url": "https://api.github.com/users/kimsnj/orgs", "repos_url": "https://api.github.com/users/kimsnj/repos", "events_url": "https://api.github.com/users/kimsnj/events{/privacy}", "received_events_url": "https://api.github.com/users/kimsnj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37eca59438e46ed4b6d52bf8d25e035fee160f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/37eca59438e46ed4b6d52bf8d25e035fee160f40", "html_url": "https://github.com/rust-lang/rust/commit/37eca59438e46ed4b6d52bf8d25e035fee160f40"}], "stats": {"total": 149, "additions": 131, "deletions": 18}, "files": [{"sha": "51ccbc1297af24ea766275a7d720993cad12ac4a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 61, "deletions": 5, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/7d35fab304aa154a9f0d8236e3fe176ab68f01ea/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d35fab304aa154a9f0d8236e3fe176ab68f01ea/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=7d35fab304aa154a9f0d8236e3fe176ab68f01ea", "patch": "@@ -2140,23 +2140,45 @@ fn path_name(e: &Expr) -> Option<Name> {\n     None\n }\n \n-fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, _block: &'tcx Block, _expr: &'tcx Expr) {\n+fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, block: &'tcx Block, expr: &'tcx Expr) {\n     let mut mut_var_visitor = MutableVarsVisitor {\n         cx,\n         ids: HashSet::new(),\n         skip: false,\n     };\n-    walk_expr(&mut mut_var_visitor, cond);\n-    if !mut_var_visitor.skip && mut_var_visitor.ids.len() == 0 {\n+    walk_expr(&mut mut_var_visitor, expr);\n+    if mut_var_visitor.skip {\n+        return;\n+    }\n+\n+    if mut_var_visitor.ids.len() == 0 {\n         span_lint(\n             cx,\n             WHILE_IMMUTABLE_CONDITION,\n             cond.span,\n             \"all variables in condition are immutable. This might lead to infinite loops.\",\n-        )\n+        );\n+        return;\n+    }\n+\n+    let mut use_visitor = MutablyUsedVisitor {\n+        cx,\n+        ids: mut_var_visitor.ids,\n+        any_used: false,\n+    };\n+    walk_block(&mut use_visitor, block);\n+    if !use_visitor.any_used {\n+        span_lint(\n+            cx,\n+            WHILE_IMMUTABLE_CONDITION,\n+            expr.span,\n+            \"Variable in the condition are not mutated in the loop body. This might lead to infinite loops.\",\n+        );\n     }\n }\n \n+/// Collects the set of mutable variable in an expression\n+/// Stops analysis if a function call is found\n struct MutableVarsVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n     ids: HashSet<NodeId>,\n@@ -2171,12 +2193,46 @@ impl<'a, 'tcx> Visitor<'tcx> for MutableVarsVisitor<'a, 'tcx> {\n             },\n \n             // If there is any fuction/method call\u2026 we just stop analysis\n-            ExprCall(_, _) | ExprMethodCall(_, _, _) => self.skip = true,\n+            ExprCall(..) | ExprMethodCall(..) => self.skip = true,\n \n             _ => walk_expr(self, ex),\n         }\n     }\n \n+    fn visit_block(&mut self, _b: &'tcx Block) {}\n+\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}\n+\n+/// checks within an expression/statement if any of the variables are used mutably\n+struct MutablyUsedVisitor<'a, 'tcx: 'a> {\n+    cx: &'a LateContext<'a, 'tcx>,\n+    ids: HashSet<NodeId>,\n+    any_used: bool,\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for MutablyUsedVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, ex: &'tcx Expr) {\n+        if self.any_used { return; }\n+\n+        match ex.node {\n+            ExprAddrOf(MutMutable, ref p) | ExprAssign(ref p, _) | ExprAssignOp(_, ref p, _) =>\n+                if let Some(id) = check_for_mutability(self.cx, p) {\n+                    self.any_used = self.ids.contains(&id);\n+                }\n+            _ => walk_expr(self, ex)\n+        }\n+    }\n+\n+    fn visit_stmt(&mut self, s: &'tcx Stmt) {\n+        match s.node {\n+            StmtExpr(..) | StmtSemi (..) => walk_stmt(self, s),\n+            _ => {}\n+        }\n+    }\n+\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n         NestedVisitorMap::None\n     }"}, {"sha": "d86e6c042b36bf352515d655e06902d2c857fda6", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d35fab304aa154a9f0d8236e3fe176ab68f01ea/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d35fab304aa154a9f0d8236e3fe176ab68f01ea/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=7d35fab304aa154a9f0d8236e3fe176ab68f01ea", "patch": "@@ -1,7 +1,8 @@\n fn fn_val(i: i32) -> i32 { unimplemented!() }\n fn fn_constref(i: &i32) -> i32 { unimplemented!() }\n fn fn_mutref(i: &mut i32) { unimplemented!() }\n-fn foo() -> i32 { unimplemented!() }\n+fn fooi() -> i32 { unimplemented!() }\n+fn foob() -> bool { unimplemented!() }\n \n fn immutable_condition() {\n     // Should warn when all vars mentionned are immutable\n@@ -12,6 +13,8 @@ fn immutable_condition() {\n \n     let x = 0;\n     while y < 10 && x < 3 {\n+        let mut k = 1;\n+        k += 2;\n         println!(\"KO - x and y immutable\");\n     }\n \n@@ -32,7 +35,11 @@ fn immutable_condition() {\n         println!(\"OK - mut_cond is mutable\");\n     }\n \n-    while foo() < x {\n+    while fooi() < x {\n+        println!(\"OK - Fn call results may vary\");\n+    }\n+\n+    while foob() {\n         println!(\"OK - Fn call results may vary\");\n     }\n \n@@ -80,6 +87,11 @@ fn used_immutable() {\n         println!(\"OK - passed by mutable reference\");\n         fn_mutref(&mut i)\n     }\n+\n+    while i < 3 {\n+        fn_mutref(&mut i);\n+        println!(\"OK - passed by mutable reference\");\n+    }\n }\n \n fn main() {"}, {"sha": "fba90823173df901520a205adedc7c2a87841466", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 56, "deletions": 11, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/7d35fab304aa154a9f0d8236e3fe176ab68f01ea/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d35fab304aa154a9f0d8236e3fe176ab68f01ea/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=7d35fab304aa154a9f0d8236e3fe176ab68f01ea", "patch": "@@ -1,22 +1,67 @@\n error: all variables in condition are immutable. This might lead to infinite loops.\n- --> $DIR/infinite_loop.rs:9:11\n-  |\n-9 |     while y < 10 {\n-  |           ^^^^^^\n-  |\n-  = note: `-D while-immutable-condition` implied by `-D warnings`\n+  --> $DIR/infinite_loop.rs:10:11\n+   |\n+10 |     while y < 10 {\n+   |           ^^^^^^\n+   |\n+   = note: `-D while-immutable-condition` implied by `-D warnings`\n \n error: all variables in condition are immutable. This might lead to infinite loops.\n-  --> $DIR/infinite_loop.rs:14:11\n+  --> $DIR/infinite_loop.rs:15:11\n    |\n-14 |     while y < 10 && x < 3 {\n+15 |     while y < 10 && x < 3 {\n    |           ^^^^^^^^^^^^^^^\n \n error: all variables in condition are immutable. This might lead to infinite loops.\n-  --> $DIR/infinite_loop.rs:19:11\n+  --> $DIR/infinite_loop.rs:22:11\n    |\n-19 |     while !cond {\n+22 |     while !cond {\n    |           ^^^^^\n \n-error: aborting due to 3 previous errors\n+error: Variable in the condition are not mutated in the loop body. This might lead to infinite loops.\n+  --> $DIR/infinite_loop.rs:52:5\n+   |\n+52 | /     while i < 3 {\n+53 | |         j = 3;\n+54 | |         println!(\"KO - i not mentionned\");\n+55 | |     }\n+   | |_____^\n+\n+error: Variable in the condition are not mutated in the loop body. This might lead to infinite loops.\n+  --> $DIR/infinite_loop.rs:57:5\n+   |\n+57 | /     while i < 3 && j > 0 {\n+58 | |         println!(\"KO - i and j not mentionned\");\n+59 | |     }\n+   | |_____^\n+\n+error: Variable in the condition are not mutated in the loop body. This might lead to infinite loops.\n+  --> $DIR/infinite_loop.rs:61:5\n+   |\n+61 | /     while i < 3 {\n+62 | |         let mut i = 5;\n+63 | |         fn_mutref(&mut i);\n+64 | |         println!(\"KO - shadowed\");\n+65 | |     }\n+   | |_____^\n+\n+error: Variable in the condition are not mutated in the loop body. This might lead to infinite loops.\n+  --> $DIR/infinite_loop.rs:76:5\n+   |\n+76 | /     while i < 3 {\n+77 | |         fn_constref(&i);\n+78 | |         println!(\"KO - const reference\");\n+79 | |     }\n+   | |_____^\n+\n+error: Variable in the condition are not mutated in the loop body. This might lead to infinite loops.\n+  --> $DIR/infinite_loop.rs:81:5\n+   |\n+81 | /     while i < 3 {\n+82 | |         fn_val(i);\n+83 | |         println!(\"KO - passed by value\");\n+84 | |     }\n+   | |_____^\n+\n+error: aborting due to 8 previous errors\n "}]}