{"sha": "2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmODE3MjllNzZlNGJiZDlhY2QyYjFlNWZiOWJiYzIxZWVkM2JhMGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T09:48:56Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-21T09:48:56Z"}, "message": "rename more [Ss]tatic* to [Gg]lobal*", "tree": {"sha": "7445af9790c467483ee220ce53654966ce2b1672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7445af9790c467483ee220ce53654966ce2b1672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYCeSIAAoJEFbW7qD8Z6xGLZoP/1h1ysKUoQKf9UzNGl8qG2Sm\neaW2WJETUW3SCUiW1Os+OVmz5L457xzYQHIl82ZV0InnR3PhWnlhdwrZ5l+9RZs8\nf4MsS/7zqZ7gZsGeTaK7gtkCbQcif6QbOaN1ZwfVPrGkFwQZ29mOu7WeVOb1NrO1\nlSAAZ9vwZ2XzHQaghVPDZUluIFzmJALtXgSz8FWCPaC9KzddacxY8bK7FA8pfe0o\nmxMfh2pukutjAmKxcqd59Vr9gr5G5RoHvQHwBB22wI3yo18ydCBfut3Vn6fF5RFC\nU2BSEdcz4HDwBtn/JHp81ODYLZmGqK9ayEWQDsD2nAwLBlZyOiaEOK/mGv5EJE3D\nWqaUazaBPeWadb8iHUatE2cXVDf+Lrv0fA3kXj5kna6WVYmL8G44cVzI+XYqdPLy\nGemcRqdAEmnYyFv1IqpiNHyhZt+W0F+tNgNBAwJUKvS0Ca9d6H2XqrDzC6g8mpyy\nzQ/ndXmuWjYSlvaJog8QEcBWwl8Vj/qGjJPjyI6kZB1t+pWQPDPKNfUOZxDPwrD9\nDI+uNyVFYQzvCtCAK/9XyaqKDcWUGaDoQyXcAL6x2/G7teBVa2jrmT8FYWRVw75b\nGMEB4Ew/q3SmnOoSgMxZ4UrKLl9H9YaS+7elEO85j8neQFn2S0x9pEEZQIyMFTQE\nx1X4NObmks/+mO4WAJBn\n=tqDo\n-----END PGP SIGNATURE-----", "payload": "tree 7445af9790c467483ee220ce53654966ce2b1672\nparent d3b3c56b07ee480ea4633e21e33207b4e239950d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477043336 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477043336 +0200\n\nrename more [Ss]tatic* to [Gg]lobal*"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f", "html_url": "https://github.com/rust-lang/rust/commit/2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3b3c56b07ee480ea4633e21e33207b4e239950d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b3c56b07ee480ea4633e21e33207b4e239950d", "html_url": "https://github.com/rust-lang/rust/commit/d3b3c56b07ee480ea4633e21e33207b4e239950d"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "bcab8be53e9d09047a70c3e8bdec9d320517a0f0", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f", "patch": "@@ -112,7 +112,7 @@ pub enum Lvalue<'tcx> {\n         local: mir::Local,\n     },\n \n-    Static(GlobalId<'tcx>),\n+    Global(GlobalId<'tcx>),\n \n     // TODO(solson): None/Never?\n }\n@@ -170,8 +170,8 @@ impl<'tcx> Global<'tcx> {\n \n #[derive(Clone, Debug, Eq, PartialEq, Hash)]\n pub enum StackPopCleanup {\n-    /// The stackframe existed to compute the initial value of a static/constant, make sure the\n-    /// static isn't modifyable afterwards. The allocation of the result is frozen iff it's an\n+    /// The stackframe existed to compute the initial value of a static/constant, make sure it\n+    /// isn't modifyable afterwards. The allocation of the result is frozen iff it's an\n     /// actual allocation. `PrimVal`s are unmodifyable anyway.\n     Freeze,\n     /// A regular stackframe added due to a function call will need to get forwarded to the next\n@@ -399,15 +399,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         ::log_settings::settings().indentation -= 1;\n         let frame = self.stack.pop().expect(\"tried to pop a stack frame, but there were none\");\n         match frame.return_to_block {\n-            StackPopCleanup::Freeze => if let Lvalue::Static(id) = frame.return_lvalue {\n-                let static_value = self.globals\n+            StackPopCleanup::Freeze => if let Lvalue::Global(id) = frame.return_lvalue {\n+                let global_value = self.globals\n                                        .get_mut(&id)\n-                                       .expect(\"static should have been cached (freeze)\");\n-                if let Value::ByRef(ptr) = static_value.data.expect(\"static should have been initialized\") {\n+                                       .expect(\"global should have been cached (freeze)\");\n+                if let Value::ByRef(ptr) = global_value.data.expect(\"global should have been initialized\") {\n                     self.memory.freeze(ptr.alloc_id)?;\n                 }\n-                assert!(static_value.mutable);\n-                static_value.mutable = false;\n+                assert!(global_value.mutable);\n+                global_value.mutable = false;\n             } else {\n                 bug!(\"StackPopCleanup::Freeze on: {:?}\", frame.return_lvalue);\n             },\n@@ -847,7 +847,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                                 substs: substs,\n                                 kind: GlobalKind::Global,\n                             };\n-                            self.read_lvalue(Lvalue::Static(cid))?\n+                            self.read_lvalue(Lvalue::Global(cid))?\n                         }\n                     }\n \n@@ -857,7 +857,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                             substs: self.substs(),\n                             kind: GlobalKind::Promoted(index),\n                         };\n-                        self.read_lvalue(Lvalue::Static(cid))?\n+                        self.read_lvalue(Lvalue::Global(cid))?\n                     }\n                 };\n \n@@ -890,9 +890,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             Lvalue::Local { frame, local } => {\n                 self.stack[frame].get_local(local).ok_or(EvalError::ReadUndefBytes)\n             }\n-            Lvalue::Static(cid) => self.globals\n+            Lvalue::Global(cid) => self.globals\n                                        .get(&cid)\n-                                       .expect(\"static not cached\")\n+                                       .expect(\"global not cached\")\n                                        .data\n                                        .ok_or(EvalError::ReadUndefBytes),\n         }\n@@ -917,7 +917,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     substs: substs,\n                     kind: GlobalKind::Global,\n                 };\n-                Lvalue::Static(cid)\n+                Lvalue::Global(cid)\n             }\n \n             Projection(ref proj) => return self.eval_lvalue_projection(proj),\n@@ -1122,22 +1122,22 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n             Lvalue::Ptr { .. } => lvalue,\n-            Lvalue::Static(cid) => {\n-                let static_val = *self.globals.get(&cid).expect(\"static not cached\");\n-                match static_val.data {\n+            Lvalue::Global(cid) => {\n+                let global_val = *self.globals.get(&cid).expect(\"global not cached\");\n+                match global_val.data {\n                     Some(Value::ByRef(ptr)) => Lvalue::from_ptr(ptr),\n                     _ => {\n-                        let ptr = self.alloc_ptr_with_substs(static_val.ty, cid.substs)?;\n-                        if let Some(val) = static_val.data {\n-                            self.write_value_to_ptr(val, ptr, static_val.ty)?;\n+                        let ptr = self.alloc_ptr_with_substs(global_val.ty, cid.substs)?;\n+                        if let Some(val) = global_val.data {\n+                            self.write_value_to_ptr(val, ptr, global_val.ty)?;\n                         }\n-                        if !static_val.mutable {\n+                        if !global_val.mutable {\n                             self.memory.freeze(ptr.alloc_id)?;\n                         }\n                         let lval = self.globals.get_mut(&cid).expect(\"already checked\");\n                         *lval = Global {\n                             data: Some(Value::ByRef(ptr)),\n-                            .. static_val\n+                            .. global_val\n                         };\n                         Lvalue::from_ptr(ptr)\n                     },\n@@ -1222,10 +1222,10 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.stack[frame].set_local(local, Value::ByVal(val));\n                 Ok(())\n             }\n-            Lvalue::Static(cid) => {\n-                let static_val = self.globals.get_mut(&cid).expect(\"static not cached\");\n-                assert!(static_val.mutable);\n-                static_val.data = Some(Value::ByVal(val));\n+            Lvalue::Global(cid) => {\n+                let global_val = self.globals.get_mut(&cid).expect(\"global not cached\");\n+                assert!(global_val.mutable);\n+                global_val.data = Some(Value::ByVal(val));\n                 Ok(())\n             }\n         }\n@@ -1238,8 +1238,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         dest_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, ()> {\n         match dest {\n-            Lvalue::Static(cid) => {\n-                let dest = *self.globals.get_mut(&cid).expect(\"static should be cached\");\n+            Lvalue::Global(cid) => {\n+                let dest = *self.globals.get_mut(&cid).expect(\"global should be cached\");\n                 assert!(dest.mutable);\n                 self.write_value_possibly_by_val(\n                     src_val,"}, {"sha": "e745fe64d714a0b57343d588156612ecb01e8a20", "filename": "src/interpreter/step.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f/src%2Finterpreter%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f/src%2Finterpreter%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstep.rs?ref=2f81729e76e4bbd9acd2b1e5fb9bbc21eed3ba0f", "patch": "@@ -135,7 +135,7 @@ impl<'a, 'b, 'tcx> ConstantExtractor<'a, 'b, 'tcx> {\n             } else {\n                 StackPopCleanup::None\n             };\n-            this.ecx.push_stack_frame(def_id, span, mir, substs, Lvalue::Static(cid), cleanup)\n+            this.ecx.push_stack_frame(def_id, span, mir, substs, Lvalue::Global(cid), cleanup)\n         });\n     }\n     fn try<F: FnOnce(&mut Self) -> EvalResult<'tcx, ()>>(&mut self, f: F) {\n@@ -183,7 +183,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n                                               constant.span,\n                                               mir,\n                                               this.substs,\n-                                              Lvalue::Static(cid),\n+                                              Lvalue::Global(cid),\n                                               StackPopCleanup::Freeze)\n                 });\n             }"}]}