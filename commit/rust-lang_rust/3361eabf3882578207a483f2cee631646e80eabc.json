{"sha": "3361eabf3882578207a483f2cee631646e80eabc", "node_id": "C_kwDOAAsO6NoAKDMzNjFlYWJmMzg4MjU3ODIwN2E0ODNmMmNlZTYzMTY0NmU4MGVhYmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T16:57:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T16:57:34Z"}, "message": "Auto merge of #2183 - RalfJung:better-provenance-control, r=RalfJung\n\nadjust for better provenance control\n\nThis is the Miri side of https://github.com/rust-lang/rust/pull/97684.", "tree": {"sha": "bd7898594b1c58cb75a0a4a69895011c98619fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd7898594b1c58cb75a0a4a69895011c98619fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3361eabf3882578207a483f2cee631646e80eabc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3361eabf3882578207a483f2cee631646e80eabc", "html_url": "https://github.com/rust-lang/rust/commit/3361eabf3882578207a483f2cee631646e80eabc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3361eabf3882578207a483f2cee631646e80eabc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd73c861c430273ea0c4a101d5d9f31d1c3de969", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd73c861c430273ea0c4a101d5d9f31d1c3de969", "html_url": "https://github.com/rust-lang/rust/commit/cd73c861c430273ea0c4a101d5d9f31d1c3de969"}, {"sha": "84edb76e2698c62d65605d18f1c2294007d3b3aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/84edb76e2698c62d65605d18f1c2294007d3b3aa", "html_url": "https://github.com/rust-lang/rust/commit/84edb76e2698c62d65605d18f1c2294007d3b3aa"}], "stats": {"total": 248, "additions": 138, "deletions": 110}, "files": [{"sha": "2898937edfb41c2dff1b857bb6cfad1b46da1c3f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1 +1 @@\n-4e725bad73747a4c93a3ac53106e4b4006edc665\n+9d20fd109809f20c049d6895a5be27a1fbd39daa"}, {"sha": "ca5508e225a11cf2a2b4d5fa1c90deb2e614f268", "filename": "rustup-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/rustup-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/rustup-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustup-toolchain?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -30,7 +30,7 @@ else\n     NEW_COMMIT=\"$1\"\n fi\n echo \"$NEW_COMMIT\" > rust-version\n-shift\n+shift || true # don't fail if shifting fails\n \n # Check if we already are at that commit.\n CUR_COMMIT=$(rustc +miri --version -v 2>/dev/null | egrep \"^commit-hash: \" | cut -d \" \" -f 2)"}, {"sha": "52f93a6cea9d9e3e5ac9dd79f22cfa75612ba984", "filename": "src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -229,9 +229,16 @@ pub fn report_error<'tcx, 'mir>(\n             };\n             #[rustfmt::skip]\n             let helps = match e.kind() {\n-                Unsupported(UnsupportedOpInfo::ThreadLocalStatic(_) | UnsupportedOpInfo::ReadExternStatic(_)) =>\n+                Unsupported(\n+                    UnsupportedOpInfo::ThreadLocalStatic(_) |\n+                    UnsupportedOpInfo::ReadExternStatic(_)\n+                ) =>\n                     panic!(\"Error should never be raised by Miri: {:?}\", e.kind()),\n-                Unsupported(_) =>\n+                Unsupported(\n+                    UnsupportedOpInfo::Unsupported(_) |\n+                    UnsupportedOpInfo::PartialPointerOverwrite(_) |\n+                    UnsupportedOpInfo::ReadPointerAsBytes\n+                ) =>\n                     vec![(None, format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"))],\n                 UndefinedBehavior(UndefinedBehaviorInfo::AlignmentCheckFailed { .. })\n                     if ecx.machine.check_alignment == AlignmentCheck::Symbolic\n@@ -245,7 +252,8 @@ pub fn report_error<'tcx, 'mir>(\n                         (None, format!(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\")),\n                         (None, format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\")),\n                     ],\n-                _ => vec![],\n+                InvalidProgram(_) | ResourceExhaustion(_) | MachineStop(_) =>\n+                    vec![],\n             };\n             (Some(title), helps)\n         }"}, {"sha": "4c79633c72deac3821f0faa3350e7c83dc433022", "filename": "src/helpers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -681,7 +681,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // FIXME: We are re-getting the allocation each time around the loop.\n             // Would be nice if we could somehow \"extend\" an existing AllocRange.\n             let alloc = this.get_ptr_alloc(ptr.offset(len, this)?, size1, Align::ONE)?.unwrap(); // not a ZST, so we will get a result\n-            let byte = alloc.read_scalar(alloc_range(Size::ZERO, size1))?.to_u8()?;\n+            let byte = alloc.read_integer(Size::ZERO, size1)?.to_u8()?;\n             if byte == 0 {\n                 break;\n             } else {\n@@ -703,7 +703,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // FIXME: We are re-getting the allocation each time around the loop.\n             // Would be nice if we could somehow \"extend\" an existing AllocRange.\n             let alloc = this.get_ptr_alloc(ptr, size2, align2)?.unwrap(); // not a ZST, so we will get a result\n-            let wchar = alloc.read_scalar(alloc_range(Size::ZERO, size2))?.to_u16()?;\n+            let wchar = alloc.read_integer(Size::ZERO, size2)?.to_u16()?;\n             if wchar == 0 {\n                 break;\n             } else {"}, {"sha": "20fbcd1de78a84371c57d272fd406641b7f30a9d", "filename": "tests/fail/branchless-select-i128-pointer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fbranchless-select-i128-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fbranchless-select-i128-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbranchless-select-i128-pointer.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -9,10 +9,10 @@ fn main() {\n     for &my_bool in &[true, false] {\n         let mask = -(my_bool as TwoPtrs); // false -> 0, true -> -1 aka !0\n         // This is branchless code to select one or the other pointer.\n-        // For now, Miri brafs on it, but if this code ever passes we better make sure it behaves correctly.\n+        // However, it drops provenance when transmuting to TwoPtrs, so this is UB.\n         let val = unsafe {\n-            transmute::<_, &str>(\n-                !mask & transmute::<_, TwoPtrs>(\"false !\") | mask & transmute::<_, TwoPtrs>(\"true !\"), //~ERROR encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+            transmute::<_, &str>( //~ERROR type validation failed: encountered a dangling reference\n+                !mask & transmute::<_, TwoPtrs>(\"false !\") | mask & transmute::<_, TwoPtrs>(\"true !\"),\n             )\n         };\n         println!(\"{}\", val);"}, {"sha": "f37dcf955e331afdd1b6b0e02b62dad65adb72f9", "filename": "tests/fail/branchless-select-i128-pointer.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbranchless-select-i128-pointer.stderr?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,8 +1,10 @@\n-error: Undefined Behavior: type validation failed: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+error: Undefined Behavior: type validation failed: encountered a dangling reference (address $HEX is unallocated)\n   --> $DIR/branchless-select-i128-pointer.rs:LL:CC\n    |\n-LL |                 !mask & transmute::<_, TwoPtrs>(\"false !\") | mask & transmute::<_, TwoPtrs>(\"true !\"),\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered (potentially part of) a pointer, but expected plain (non-pointer) bytes\n+LL | /             transmute::<_, &str>(\n+LL | |                 !mask & transmute::<_, TwoPtrs>(\"false !\") | mask & transmute::<_, TwoPtrs>(\"true !\"),\n+LL | |             )\n+   | |_____________^ type validation failed: encountered a dangling reference (address $HEX is unallocated)\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "1bbb33aa2bbd785db7177057aa5617108d90a810", "filename": "tests/fail/pointer_partial_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fpointer_partial_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fpointer_partial_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_overwrite.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -2,7 +2,7 @@\n // compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n // Test what happens when we overwrite parts of a pointer.\n-// Also see <https://github.com/rust-lang/rust/issues/87184>.\n+// Also see <https://github.com/rust-lang/miri/issues/2181>.\n \n fn main() {\n     let mut p = &42;"}, {"sha": "a4a5071f5da09a8ae784449baee700062e902b15", "filename": "tests/fail/pointer_partial_read.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cd73c861c430273ea0c4a101d5d9f31d1c3de969/tests%2Ffail%2Fpointer_partial_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd73c861c430273ea0c4a101d5d9f31d1c3de969/tests%2Ffail%2Fpointer_partial_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_read.rs?ref=cd73c861c430273ea0c4a101d5d9f31d1c3de969", "patch": "@@ -1,9 +0,0 @@\n-// Test what happens when we read parts of a pointer.\n-// Related to <https://github.com/rust-lang/rust/issues/69488>.\n-fn main() {\n-    let x = 13;\n-    let y = &x;\n-    let z = &y as *const &i32 as *const u8;\n-    // the deref fails, because we are reading only a part of the pointer\n-    let _val = unsafe { *z }; //~ ERROR unable to turn pointer into raw bytes\n-}"}, {"sha": "dc35f7e109a54b9b8cb65620ca8cef2d0d3732a9", "filename": "tests/fail/pointer_partial_read.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cd73c861c430273ea0c4a101d5d9f31d1c3de969/tests%2Ffail%2Fpointer_partial_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd73c861c430273ea0c4a101d5d9f31d1c3de969/tests%2Ffail%2Fpointer_partial_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_read.stderr?ref=cd73c861c430273ea0c4a101d5d9f31d1c3de969", "patch": "@@ -1,14 +0,0 @@\n-error: unsupported operation: unable to turn pointer into raw bytes\n-  --> $DIR/pointer_partial_read.rs:LL:CC\n-   |\n-LL |     let _val = unsafe { *z };\n-   |                         ^^ unable to turn pointer into raw bytes\n-   |\n-   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n-           \n-   = note: inside `main` at $DIR/pointer_partial_read.rs:LL:CC\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}, {"sha": "dbfc5732ed3b72857d14efbb701072af27e52626", "filename": "tests/fail/provenance/permissive_provenance_transmute.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -0,0 +1,27 @@\n+// compile-flags: -Zmiri-permissive-provenance -Zmiri-disable-stacked-borrows\n+#![feature(strict_provenance)]\n+\n+use std::mem;\n+\n+// This is the example from\n+// <https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-1085144431>.\n+\n+unsafe fn deref(left: *const u8, right: *const u8) {\n+    let left_int: usize = mem::transmute(left);\n+    let right_int: usize = mem::transmute(right);\n+    if left_int == right_int {\n+        // The compiler is allowed to replace `left_int` by `right_int` here...\n+        let left_ptr: *const u8 = mem::transmute(left_int);\n+        // ...which however means here it could be dereferencing the wrong pointer.\n+        let _val = *left_ptr; //~ERROR dereferencing pointer failed\n+    }\n+}\n+\n+fn main() {\n+    let ptr1 = &0u8 as *const u8;\n+    let ptr2 = &1u8 as *const u8;\n+    unsafe {\n+        // Two pointers with the same address but different provenance.\n+        deref(ptr1, ptr2.with_addr(ptr1.addr()));\n+    }\n+}"}, {"sha": "12f3562011a81db708631f5defe29c86f9397968", "filename": "tests/fail/provenance/permissive_provenance_transmute.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fpermissive_provenance_transmute.stderr?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -0,0 +1,20 @@\n+error: Undefined Behavior: dereferencing pointer failed: $HEX is not a valid pointer\n+  --> $DIR/permissive_provenance_transmute.rs:LL:CC\n+   |\n+LL |         let _val = *left_ptr;\n+   |                    ^^^^^^^^^ dereferencing pointer failed: $HEX is not a valid pointer\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `deref` at $DIR/permissive_provenance_transmute.rs:LL:CC\n+note: inside `main` at $DIR/permissive_provenance_transmute.rs:LL:CC\n+  --> $DIR/permissive_provenance_transmute.rs:LL:CC\n+   |\n+LL |         deref(ptr1, ptr2.with_addr(ptr1.addr()));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "310024c1efc70d64c2c238f67beff502f2353ee9", "filename": "tests/fail/provenance/ptr_int_unexposed.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,12 +1,12 @@\n-// compile-flags: -Zmiri-permissive-provenance -Zmiri-disable-stacked-borrows -Zmiri-allow-ptr-int-transmute\n+// compile-flags: -Zmiri-permissive-provenance -Zmiri-disable-stacked-borrows\n+#![feature(strict_provenance)]\n \n fn main() {\n     let x: i32 = 3;\n     let x_ptr = &x as *const i32;\n \n-    // TODO: switch this to addr() once we intrinsify it\n-    let x_usize: usize = unsafe { std::mem::transmute(x_ptr) };\n-    // Cast back a pointer that did *not* get exposed.\n-    let ptr = x_usize as *const i32;\n+    let x_usize: usize = x_ptr.addr();\n+    // Cast back an address that did *not* get exposed.\n+    let ptr = std::ptr::from_exposed_addr::<i32>(x_usize);\n     assert_eq!(unsafe { *ptr }, 3); //~ ERROR Undefined Behavior: dereferencing pointer failed\n }"}, {"sha": "12a141e9ddfee5027093f931927e3da9c0308700", "filename": "tests/fail/provenance/strict_provenance_transmute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -7,13 +7,13 @@ use std::mem;\n // <https://github.com/rust-lang/unsafe-code-guidelines/issues/286#issuecomment-1085144431>.\n \n unsafe fn deref(left: *const u8, right: *const u8) {\n-    let left_int: usize = mem::transmute(left); //~ERROR expected plain (non-pointer) bytes\n+    let left_int: usize = mem::transmute(left);\n     let right_int: usize = mem::transmute(right);\n     if left_int == right_int {\n         // The compiler is allowed to replace `left_int` by `right_int` here...\n         let left_ptr: *const u8 = mem::transmute(left_int);\n         // ...which however means here it could be dereferencing the wrong pointer.\n-        let _val = *left_ptr;\n+        let _val = *left_ptr; //~ERROR dereferencing pointer failed\n     }\n }\n "}, {"sha": "8df94d50bbac14b7174bec2bc5d2832db58233c6", "filename": "tests/fail/provenance/strict_provenance_transmute.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_transmute.stderr?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n+error: Undefined Behavior: dereferencing pointer failed: $HEX is not a valid pointer\n   --> $DIR/strict_provenance_transmute.rs:LL:CC\n    |\n-LL |     let left_int: usize = mem::transmute(left);\n-   |                           ^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n+LL |         let _val = *left_ptr;\n+   |                    ^^^^^^^^^ dereferencing pointer failed: $HEX is not a valid pointer\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "3de8f57d6223c1fdd883c41497ac4e6424b3e784", "filename": "tests/fail/stacked_borrows/illegal_read3.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,16 +1,18 @@\n-// compile-flags: -Zmiri-allow-ptr-int-transmute\n // A callee may not read the destination of our `&mut` without us noticing.\n // Thise code got carefully checked to not introduce any reborrows\n // that are not explicit in the source. Let's hope the compiler does not break this later!\n \n-#![feature(untagged_unions)]\n-\n use std::mem;\n \n+union HiddenRef {\n+    // We avoid retagging at this type, so shared vs mutable does not matter.\n+    r: &'static i32,\n+}\n+\n fn main() {\n     let mut x: i32 = 15;\n     let xref1 = &mut x;\n-    let xref1_sneaky: usize = unsafe { mem::transmute_copy(&xref1) };\n+    let xref1_sneaky: HiddenRef = unsafe { mem::transmute_copy(&xref1) };\n     // Derived from `xref1`, so using raw value is still ok, ...\n     let xref2 = &mut *xref1;\n     callee(xref1_sneaky);\n@@ -19,14 +21,8 @@ fn main() {\n     //~^ ERROR: borrow stack\n }\n \n-fn callee(xref1: usize) {\n-    // Transmuting through a union to avoid retagging.\n-    union UsizeToRef {\n-        from: usize,\n-        to: &'static mut i32,\n-    }\n-    let xref1 = UsizeToRef { from: xref1 };\n+fn callee(xref1: HiddenRef) {\n     // Doing the deref and the transmute (through the union) in the same place expression\n     // should avoid retagging.\n-    let _val = unsafe { *xref1.to };\n+    let _val = unsafe { *xref1.r };\n }"}, {"sha": "75c4305ee81f5c9c269f15469eb6e94781c928dc", "filename": "tests/fail/stacked_borrows/illegal_read3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read3.stderr?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -17,8 +17,8 @@ LL |     let xref2 = &mut *xref1;\n help: <TAG> was later invalidated at offsets [0x0..0x4]\n   --> $DIR/illegal_read3.rs:LL:CC\n    |\n-LL |     let _val = unsafe { *xref1.to };\n-   |                         ^^^^^^^^^\n+LL |     let _val = unsafe { *xref1.r };\n+   |                         ^^^^^^^^\n    = note: inside `main` at $DIR/illegal_read3.rs:LL:CC\n \n note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace"}, {"sha": "1bd60f9cff732ffc4f84e04b0b0ef0e781f4ed33", "filename": "tests/fail/transmute-pair-uninit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Ftransmute-pair-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Ftransmute-pair-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute-pair-uninit.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,4 +1,3 @@\n-// compile-flags: -Zmiri-allow-uninit-numbers\n #![feature(core_intrinsics)]\n \n use std::mem;\n@@ -18,6 +17,6 @@ fn main() {\n         assert_eq!(byte, 0);\n     }\n     let v = unsafe { *z.offset(first_undef) };\n+    //~^ ERROR uninitialized\n     if v == 0 { println!(\"it is zero\"); }\n-    //~^ ERROR this operation requires initialized memory\n }"}, {"sha": "833c3abbb2fb19929e4f3d7a13edead4e0b14cab", "filename": "tests/fail/transmute-pair-uninit.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Ftransmute-pair-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Ftransmute-pair-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute-pair-uninit.stderr?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: type validation failed: encountered uninitialized bytes, but expected initialized bytes\n   --> $DIR/transmute-pair-uninit.rs:LL:CC\n    |\n-LL |     if v == 0 { println!(\"it is zero\"); }\n-   |        ^^^^^^ using uninitialized data, but this operation requires initialized memory\n+LL |     let v = unsafe { *z.offset(first_undef) };\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "8b351d3a09e9dd53cd8f2e3c5a28ade50fb6fb52", "filename": "tests/fail/transmute_fat1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Ftransmute_fat1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Ftransmute_fat1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,5 +1,5 @@\n-// This should fail even without validation\n-// compile-flags: -Zmiri-disable-validation\n+// error-pattern: type validation failed: encountered a pointer\n+// normalize-stderr-test: \"\\[u8; (08|16)\\]\" -> \"$$ARRAY\"\n \n fn main() {\n     #[cfg(target_pointer_width=\"64\")]\n@@ -8,7 +8,7 @@ fn main() {\n     };\n     #[cfg(target_pointer_width=\"32\")]\n     let bad = unsafe {\n-        std::mem::transmute::<&[u8], [u8; 8]>(&[1u8])\n+        std::mem::transmute::<&[u8], [u8; 08]>(&[1u8])\n     };\n-    let _val = bad[0] + bad[bad.len()-1]; //~ ERROR unable to turn pointer into raw bytes\n+    let _val = bad[0] + bad[bad.len()-1];\n }"}, {"sha": "cbfa8dff2a50c160601227ffcfa68b274b8267a5", "filename": "tests/fail/transmute_fat1.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Ftransmute_fat1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Ftransmute_fat1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftransmute_fat1.stderr?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,10 +1,11 @@\n-error: unsupported operation: unable to turn pointer into raw bytes\n+error: Undefined Behavior: type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n   --> $DIR/transmute_fat1.rs:LL:CC\n    |\n-LL |     let _val = bad[0] + bad[bad.len()-1];\n-   |                ^^^^^^ unable to turn pointer into raw bytes\n+LL |         std::mem::transmute::<&[u8], $ARRAY>(&[1u8])\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer, but expected plain (non-pointer) bytes\n    |\n-   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n            \n    = note: inside `main` at $DIR/transmute_fat1.rs:LL:CC\n "}, {"sha": "6868e5895507dbce8242b53c0cb97214576d4979", "filename": "tests/fail/uninit_byte_read.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Funinit_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Funinit_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_byte_read.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,7 +1,6 @@\n-// compile-flags: -Zmiri-allow-uninit-numbers\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n-    let undef = unsafe { *v.get_unchecked(5) };\n-    let x = undef + 1; //~ ERROR this operation requires initialized memory\n+    let undef = unsafe { *v.get_unchecked(5) }; //~ ERROR uninitialized\n+    let x = undef + 1;\n     panic!(\"this should never print: {}\", x);\n }"}, {"sha": "d150be3e7e7814f8f9676bf7762c4fe3db17400c", "filename": "tests/fail/uninit_byte_read.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Funinit_byte_read.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Funinit_byte_read.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_byte_read.stderr?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: using uninitialized data, but this operation requires initialized memory\n+error: Undefined Behavior: type validation failed: encountered uninitialized bytes, but expected initialized bytes\n   --> $DIR/uninit_byte_read.rs:LL:CC\n    |\n-LL |     let x = undef + 1;\n-   |             ^^^^^^^^^ using uninitialized data, but this operation requires initialized memory\n+LL |     let undef = unsafe { *v.get_unchecked(5) };\n+   |                          ^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized bytes\n    |\n    = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n    = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information"}, {"sha": "b6f86698b3fb376a4c12ca6790fe80a2b3244654", "filename": "tests/fail/validity/invalid_enum_tag_256variants_uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,3 +1,4 @@\n+// Even when uninit numbers are allowed, this enum is not.\n // compile-flags: -Zmiri-allow-uninit-numbers\n #![allow(unused, deprecated, invalid_value)]\n "}, {"sha": "b23ccbbb1b033938d157b50a97672f34ff493910", "filename": "tests/fail/validity/ptr_integer_transmute.rs", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd73c861c430273ea0c4a101d5d9f31d1c3de969/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd73c861c430273ea0c4a101d5d9f31d1c3de969/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.rs?ref=cd73c861c430273ea0c4a101d5d9f31d1c3de969", "patch": "@@ -1,4 +0,0 @@\n-fn main() {\n-    let r = &mut 42;\n-    let _i: usize = unsafe { std::mem::transmute(r) }; //~ ERROR expected plain (non-pointer) bytes\n-}"}, {"sha": "cad53d71f4d9d377d8aedee9bdf121718abec0f6", "filename": "tests/fail/validity/ptr_integer_transmute.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cd73c861c430273ea0c4a101d5d9f31d1c3de969/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd73c861c430273ea0c4a101d5d9f31d1c3de969/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fptr_integer_transmute.stderr?ref=cd73c861c430273ea0c4a101d5d9f31d1c3de969", "patch": "@@ -1,15 +0,0 @@\n-error: Undefined Behavior: type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n-  --> $DIR/ptr_integer_transmute.rs:LL:CC\n-   |\n-LL |     let _i: usize = unsafe { std::mem::transmute(r) };\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to $HEX[ALLOC]<TAG>, but expected plain (non-pointer) bytes\n-   |\n-   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n-   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n-           \n-   = note: inside `main` at $DIR/ptr_integer_transmute.rs:LL:CC\n-\n-note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n-\n-error: aborting due to previous error\n-"}, {"sha": "aafa90204fc2aebc19144f7559d2e1698a9e2cdb", "filename": "tests/pass/intptrcast.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Fpass%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Fpass%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintptrcast.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,6 +1,4 @@\n-// compile-flags: -Zmiri-allow-ptr-int-transmute\n-\n-// This returns a miri pointer at type usize, if the argument is a proper pointer\n+// This strips provenance\n fn transmute_ptr_to_int<T>(x: *const T) -> usize {\n     unsafe { std::mem::transmute(x) }\n }\n@@ -39,7 +37,7 @@ fn transmute() {\n     // transmuting.\n     let a: *const i32 = &42;\n     let b = transmute_ptr_to_int(a) as u8;\n-    let c = a as usize as u8;\n+    let c = a as u8;\n     assert_eq!(b, c);\n }\n "}, {"sha": "e025cf921313adb9a7ad0440122b0a1aa9891687", "filename": "tests/pass/ptr_int_from_exposed.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Fpass%2Fptr_int_from_exposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Fpass%2Fptr_int_from_exposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fptr_int_from_exposed.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "previous_filename": "tests/pass/ptr_int_permissive_provenance.rs"}, {"sha": "ba50480c5399ac1355490b2976f48c15e91a710f", "filename": "tests/pass/ptr_int_transmute.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Fpass%2Fptr_int_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Fpass%2Fptr_int_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fptr_int_transmute.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -0,0 +1,22 @@\n+// Test what happens when we read parts of a pointer.\n+// Related to <https://github.com/rust-lang/rust/issues/69488>.\n+fn ptr_partial_read() {\n+    let x = 13;\n+    let y = &x;\n+    let z = &y as *const &i32 as *const u8;\n+\n+    // This just strips provenance, but should work fine otherwise.\n+    let _val = unsafe { *z };\n+}\n+\n+fn transmute_strip_provenance() {\n+    let r = &mut 42;\n+    let addr = r as *mut _ as usize;\n+    let i: usize = unsafe { std::mem::transmute(r) };\n+    assert_eq!(i, addr);\n+}\n+\n+fn main() {\n+    ptr_partial_read();\n+    transmute_strip_provenance();\n+}"}, {"sha": "c62298a9aced29cf274dff5ba22bf6fed99c8bd0", "filename": "tests/pass/transmute_fat.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3361eabf3882578207a483f2cee631646e80eabc/tests%2Fpass%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3361eabf3882578207a483f2cee631646e80eabc/tests%2Fpass%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ftransmute_fat.rs?ref=3361eabf3882578207a483f2cee631646e80eabc", "patch": "@@ -1,14 +1,11 @@\n // Stacked Borrows disallows this becuase the reference is never cast to a raw pointer.\n-// compile-flags: -Zmiri-disable-stacked-borrows -Zmiri-allow-ptr-int-transmute\n+// compile-flags: -Zmiri-disable-stacked-borrows\n \n fn main() {\n     // If we are careful, we can exploit data layout...\n     let raw = unsafe {\n-        std::mem::transmute::<&[u8], [usize; 2]>(&[42])\n+        std::mem::transmute::<&[u8], [*const u8; 2]>(&[42])\n     };\n-    let ptr = raw[0] + raw[1];\n-    // We transmute both ways, to really test allow-ptr-int-transmute.\n-    let ptr: *const u8 = unsafe { std::mem::transmute(ptr) };\n-    // The pointer is one-past-the end, but we decrement it into bounds before using it\n-    assert_eq!(unsafe { *ptr.offset(-1) }, 42);\n+    let ptr: *const u8 = unsafe { std::mem::transmute_copy(&raw) };\n+    assert_eq!(unsafe { *ptr }, 42);\n }"}]}