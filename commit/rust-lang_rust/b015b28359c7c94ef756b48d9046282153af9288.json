{"sha": "b015b28359c7c94ef756b48d9046282153af9288", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMTViMjgzNTljN2M5NGVmNzU2YjQ4ZDkwNDYyODIxNTNhZjkyODg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-06-20T14:39:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-20T14:39:47Z"}, "message": "Rollup merge of #73055 - lcnr:skol-no-more, r=matthewjasper\n\nremove leftover mentions of `skol` and `int` from the compiler\n\nThis PR mostly changes `skol` -> `placeholder` and all cases where `int` is used as a type to `i32`.", "tree": {"sha": "23efbe25275d83c5d96b1a361ed41625d9053535", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23efbe25275d83c5d96b1a361ed41625d9053535"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b015b28359c7c94ef756b48d9046282153af9288", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7h+zCRBK7hj4Ov3rIwAAdHIIALNZsY/YPgcZQyan8tNH/8aq\nd0mDkj01rrQ6DPzLtrQ8FwdR0iyl7c3ZAFXE9MyeSDZH7C/GwiiSPNgvH2G2Skbr\nQC2N8Jtia7l7NZNm1MvXwGvOiu9bFNEmu4ELIbdOLLBnTov4LtalP5kzHcOVehOZ\nRrB+zNlUuA6Pj1KRIpUAq9cB5U2amqEenuTRI+Phvw1GtpUcoGFLYBJuO99MJkoH\nmbCrL+apimNrF2ZfqHudHgsw0/z4gB74IY7dKsYXY6XyuAUFytna4iKqRvyBV7S9\nANoT/GsnUFbKHhGEJ5+Dxu5I4EwEqmP2oM6d4LucCk7VLGtmPtpqvW7w/d1HQac=\n=kgNJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 23efbe25275d83c5d96b1a361ed41625d9053535\nparent 5431ef65303bb1ec71a42910fc55ecfa62b6d781\nparent 180334c7a8ce250d878e96d3336e1c54b3d8b0e3\nauthor Ralf Jung <post@ralfj.de> 1592663987 +0200\ncommitter GitHub <noreply@github.com> 1592663987 +0200\n\nRollup merge of #73055 - lcnr:skol-no-more, r=matthewjasper\n\nremove leftover mentions of `skol` and `int` from the compiler\n\nThis PR mostly changes `skol` -> `placeholder` and all cases where `int` is used as a type to `i32`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b015b28359c7c94ef756b48d9046282153af9288", "html_url": "https://github.com/rust-lang/rust/commit/b015b28359c7c94ef756b48d9046282153af9288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b015b28359c7c94ef756b48d9046282153af9288/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5431ef65303bb1ec71a42910fc55ecfa62b6d781", "url": "https://api.github.com/repos/rust-lang/rust/commits/5431ef65303bb1ec71a42910fc55ecfa62b6d781", "html_url": "https://github.com/rust-lang/rust/commit/5431ef65303bb1ec71a42910fc55ecfa62b6d781"}, {"sha": "180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/180334c7a8ce250d878e96d3336e1c54b3d8b0e3", "html_url": "https://github.com/rust-lang/rust/commit/180334c7a8ce250d878e96d3336e1c54b3d8b0e3"}], "stats": {"total": 234, "additions": 79, "deletions": 155}, "files": [{"sha": "0499dc9ed2232ee8f2f39015a672fa00d6973cc0", "filename": "src/librustc_infer/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -63,14 +63,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// placeholder region. This is the first step of checking subtyping\n     /// when higher-ranked things are involved.\n     ///\n-    /// **Important:** you must call this function from within a snapshot.\n-    /// Moreover, before committing the snapshot, you must eventually call\n-    /// either `plug_leaks` or `pop_placeholders` to remove the placeholder\n-    /// regions. If you rollback the snapshot (or are using a probe), then\n-    /// the pop occurs as part of the rollback, so an explicit call is not\n-    /// needed (but is also permitted).\n-    ///\n-    /// For more information about how placeholders and HRTBs work, see\n+    /// **Important:** You have to be careful to not leak these placeholders,\n+    /// for more information about how placeholders and HRTBs work, see\n     /// the [rustc dev guide].\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/traits/hrtb.html"}, {"sha": "91c39a0e78ffb732ef8340a2cc8b4512b6983013", "filename": "src/librustc_infer/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -128,7 +128,7 @@ impl<'tcx> TaintSet<'tcx> {\n                         verifys[i].origin.span(),\n                         \"we never add verifications while doing higher-ranked things\",\n                     ),\n-                    &Purged | &AddCombination(..) | &AddVar(..) => {}\n+                    &AddCombination(..) | &AddVar(..) => {}\n                 }\n             }\n         }"}, {"sha": "2902c41a6bcae779c85d64979c53082c3a6b57d8", "filename": "src/librustc_infer/infer/region_constraints/mod.rs", "status": "modified", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fregion_constraints%2Fmod.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -289,14 +289,6 @@ pub(crate) enum UndoLog<'tcx> {\n \n     /// We added a GLB/LUB \"combination variable\".\n     AddCombination(CombineMapType, TwoRegions<'tcx>),\n-\n-    /// During skolemization, we sometimes purge entries from the undo\n-    /// log in a kind of minisnapshot (unlike other snapshots, this\n-    /// purging actually takes place *on success*). In that case, we\n-    /// replace the corresponding entry with `Noop` so as to avoid the\n-    /// need to do a bunch of swapping. (We can't use `swap_remove` as\n-    /// the order of the vector is important.)\n-    Purged,\n }\n \n #[derive(Copy, Clone, PartialEq)]\n@@ -357,9 +349,6 @@ impl<'tcx> RegionConstraintStorage<'tcx> {\n \n     fn rollback_undo_entry(&mut self, undo_entry: UndoLog<'tcx>) {\n         match undo_entry {\n-            Purged => {\n-                // nothing to do here\n-            }\n             AddVar(vid) => {\n                 self.var_infos.pop().unwrap();\n                 assert_eq!(self.var_infos.len(), vid.index() as usize);\n@@ -488,62 +477,6 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         self.var_infos[vid].origin\n     }\n \n-    /// Removes all the edges to/from the placeholder regions that are\n-    /// in `skols`. This is used after a higher-ranked operation\n-    /// completes to remove all trace of the placeholder regions\n-    /// created in that time.\n-    pub fn pop_placeholders(&mut self, placeholders: &FxHashSet<ty::Region<'tcx>>) {\n-        debug!(\"pop_placeholders(placeholders={:?})\", placeholders);\n-\n-        assert!(UndoLogs::<super::UndoLog<'_>>::in_snapshot(&self.undo_log));\n-\n-        let constraints_to_kill: Vec<usize> = self\n-            .undo_log\n-            .iter()\n-            .enumerate()\n-            .rev()\n-            .filter(|&(_, undo_entry)| match undo_entry {\n-                super::UndoLog::RegionConstraintCollector(undo_entry) => {\n-                    kill_constraint(placeholders, undo_entry)\n-                }\n-                _ => false,\n-            })\n-            .map(|(index, _)| index)\n-            .collect();\n-\n-        for index in constraints_to_kill {\n-            let undo_entry = match &mut self.undo_log[index] {\n-                super::UndoLog::RegionConstraintCollector(undo_entry) => {\n-                    mem::replace(undo_entry, Purged)\n-                }\n-                _ => unreachable!(),\n-            };\n-            self.rollback_undo_entry(undo_entry);\n-        }\n-\n-        return;\n-\n-        fn kill_constraint<'tcx>(\n-            placeholders: &FxHashSet<ty::Region<'tcx>>,\n-            undo_entry: &UndoLog<'tcx>,\n-        ) -> bool {\n-            match undo_entry {\n-                &AddConstraint(Constraint::VarSubVar(..)) => false,\n-                &AddConstraint(Constraint::RegSubVar(a, _)) => placeholders.contains(&a),\n-                &AddConstraint(Constraint::VarSubReg(_, b)) => placeholders.contains(&b),\n-                &AddConstraint(Constraint::RegSubReg(a, b)) => {\n-                    placeholders.contains(&a) || placeholders.contains(&b)\n-                }\n-                &AddGiven(..) => false,\n-                &AddVerify(_) => false,\n-                &AddCombination(_, ref two_regions) => {\n-                    placeholders.contains(&two_regions.a) || placeholders.contains(&two_regions.b)\n-                }\n-                &AddVar(..) | &Purged => false,\n-            }\n-        }\n-    }\n-\n     fn add_constraint(&mut self, constraint: Constraint<'tcx>, origin: SubregionOrigin<'tcx>) {\n         // cannot add constraints once regions are resolved\n         debug!(\"RegionConstraintCollector: add_constraint({:?})\", constraint);"}, {"sha": "2cfd6bb904c410558a310f727d1914cc45922e34", "filename": "src/librustc_infer/infer/undo_log.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fundo_log.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -198,10 +198,6 @@ impl<'tcx> InferCtxtUndoLogs<'tcx> {\n         assert!(self.logs.len() >= snapshot.undo_len);\n         assert!(self.num_open_snapshots > 0);\n     }\n-\n-    pub(crate) fn iter(&self) -> std::slice::Iter<'_, UndoLog<'tcx>> {\n-        self.logs.iter()\n-    }\n }\n \n impl<'tcx> std::ops::Index<usize> for InferCtxtUndoLogs<'tcx> {"}, {"sha": "47555aca9f3fbc95aa4b9edbf95c634fa0fa71dd", "filename": "src/librustc_infer/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Fmod.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -29,10 +29,10 @@ crate use self::util::elaborate_predicates;\n \n pub use rustc_middle::traits::*;\n \n-/// An `Obligation` represents some trait reference (e.g., `int: Eq`) for\n+/// An `Obligation` represents some trait reference (e.g., `i32: Eq`) for\n /// which the \"impl_source\" must be found. The process of finding a \"impl_source\" is\n /// called \"resolving\" the `Obligation`. This process consists of\n-/// either identifying an `impl` (e.g., `impl Eq for int`) that\n+/// either identifying an `impl` (e.g., `impl Eq for i32`) that\n /// satisfies the obligation, or else finding a bound that is in\n /// scope. The eventual result is usually a `Selection` (defined below).\n #[derive(Clone, PartialEq, Eq, Hash)]"}, {"sha": "4ae7e417a8f673d017da6ca897d3cebe910a7eec", "filename": "src/librustc_infer/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_infer%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Futil.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -63,11 +63,11 @@ impl PredicateSet<'tcx> {\n     fn insert(&mut self, pred: ty::Predicate<'tcx>) -> bool {\n         // We have to be careful here because we want\n         //\n-        //    for<'a> Foo<&'a int>\n+        //    for<'a> Foo<&'a i32>\n         //\n         // and\n         //\n-        //    for<'b> Foo<&'b int>\n+        //    for<'b> Foo<&'b i32>\n         //\n         // to be considered equivalent. So normalize all late-bound\n         // regions before we throw things into the underlying set."}, {"sha": "f650240a41c63fa641cc0c3292f2aeb7ec45463f", "filename": "src/librustc_middle/traits/mod.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_middle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fmod.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -393,23 +393,25 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// ```\n /// impl<T:Clone> Clone<T> for Option<T> { ... } // Impl_1\n /// impl<T:Clone> Clone<T> for Box<T> { ... }    // Impl_2\n-/// impl Clone for int { ... }             // Impl_3\n+/// impl Clone for i32 { ... }                   // Impl_3\n ///\n-/// fn foo<T:Clone>(concrete: Option<Box<int>>,\n-///                 param: T,\n-///                 mixed: Option<T>) {\n+/// fn foo<T: Clone>(concrete: Option<Box<i32>>, param: T, mixed: Option<T>) {\n+///     // Case A: Vtable points at a specific impl. Only possible when\n+///     // type is concretely known. If the impl itself has bounded\n+///     // type parameters, Vtable will carry resolutions for those as well:\n+///     concrete.clone(); // Vtable(Impl_1, [Vtable(Impl_2, [Vtable(Impl_3)])])\n ///\n-///    // Case A: ImplSource points at a specific impl. Only possible when\n-///    // type is concretely known. If the impl itself has bounded\n-///    // type parameters, ImplSource will carry resolutions for those as well:\n-///    concrete.clone(); // ImplSource(Impl_1, [ImplSource(Impl_2, [ImplSource(Impl_3)])])\n+///     // Case A: ImplSource points at a specific impl. Only possible when\n+///     // type is concretely known. If the impl itself has bounded\n+///     // type parameters, ImplSource will carry resolutions for those as well:\n+///     concrete.clone(); // ImplSource(Impl_1, [ImplSource(Impl_2, [ImplSource(Impl_3)])])\n ///\n-///    // Case B: ImplSource must be provided by caller. This applies when\n-///    // type is a type parameter.\n-///    param.clone();    // ImplSourceParam\n+///     // Case B: ImplSource must be provided by caller. This applies when\n+///     // type is a type parameter.\n+///     param.clone();    // ImplSourceParam\n ///\n-///    // Case C: A mix of cases A and B.\n-///    mixed.clone();    // ImplSource(Impl_1, [ImplSourceParam])\n+///     // Case C: A mix of cases A and B.\n+///     mixed.clone();    // ImplSource(Impl_1, [ImplSourceParam])\n /// }\n /// ```\n ///"}, {"sha": "3b4254a18ea61900ad3e6c4bdcc98f07b7e8684b", "filename": "src/librustc_middle/ty/subst.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsubst.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -599,12 +599,12 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n     ///\n     /// ```\n     /// type Func<A> = fn(A);\n-    /// type MetaFunc = for<'a> fn(Func<&'a int>)\n+    /// type MetaFunc = for<'a> fn(Func<&'a i32>)\n     /// ```\n     ///\n     /// The type `MetaFunc`, when fully expanded, will be\n     ///\n-    ///     for<'a> fn(fn(&'a int))\n+    ///     for<'a> fn(fn(&'a i32))\n     ///             ^~ ^~ ^~~\n     ///             |  |  |\n     ///             |  |  DebruijnIndex of 2\n@@ -613,26 +613,26 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n     /// Here the `'a` lifetime is bound in the outer function, but appears as an argument of the\n     /// inner one. Therefore, that appearance will have a DebruijnIndex of 2, because we must skip\n     /// over the inner binder (remember that we count De Bruijn indices from 1). However, in the\n-    /// definition of `MetaFunc`, the binder is not visible, so the type `&'a int` will have a\n+    /// definition of `MetaFunc`, the binder is not visible, so the type `&'a i32` will have a\n     /// De Bruijn index of 1. It's only during the substitution that we can see we must increase the\n     /// depth by 1 to account for the binder that we passed through.\n     ///\n     /// As a second example, consider this twist:\n     ///\n     /// ```\n     /// type FuncTuple<A> = (A,fn(A));\n-    /// type MetaFuncTuple = for<'a> fn(FuncTuple<&'a int>)\n+    /// type MetaFuncTuple = for<'a> fn(FuncTuple<&'a i32>)\n     /// ```\n     ///\n     /// Here the final type will be:\n     ///\n-    ///     for<'a> fn((&'a int, fn(&'a int)))\n+    ///     for<'a> fn((&'a i32, fn(&'a i32)))\n     ///                 ^~~         ^~~\n     ///                 |           |\n     ///          DebruijnIndex of 1 |\n     ///                      DebruijnIndex of 2\n     ///\n-    /// As indicated in the diagram, here the same type `&'a int` is substituted once, but in the\n+    /// As indicated in the diagram, here the same type `&'a i32` is substituted once, but in the\n     /// first case we do not increase the De Bruijn index and in the second case we do. The reason\n     /// is that only in the second case have we passed through a fn binder.\n     fn shift_vars_through_binders<T: TypeFoldable<'tcx>>(&self, val: T) -> T {"}, {"sha": "633d4fda8a46d9691711df2633ab97daeb730c63", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -22,13 +22,13 @@ impl<'tcx> TypeWalker<'tcx> {\n     /// Skips the subtree corresponding to the last type\n     /// returned by `next()`.\n     ///\n-    /// Example: Imagine you are walking `Foo<Bar<int>, usize>`.\n+    /// Example: Imagine you are walking `Foo<Bar<i32>, usize>`.\n     ///\n     /// ```\n     /// let mut iter: TypeWalker = ...;\n     /// iter.next(); // yields Foo\n-    /// iter.next(); // yields Bar<int>\n-    /// iter.skip_current_subtree(); // skips int\n+    /// iter.next(); // yields Bar<i32>\n+    /// iter.skip_current_subtree(); // skips i32\n     /// iter.next(); // yields usize\n     /// ```\n     pub fn skip_current_subtree(&mut self) {"}, {"sha": "196405425473428ee199387a9abd4fdc0335fe18", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n                 // trait matching (since you can have a trait\n-                // obligation like `for<'a> T::B : Fn(&'a int)`), but\n+                // obligation like `for<'a> T::B: Fn(&'a i32)`), but\n                 // we can't normalize with bound regions in scope. So\n                 // far now we just ignore binders but only normalize\n                 // if all bound regions are gone (and then we still"}, {"sha": "ca49ff5884f98a7080dd4b6cd7fbf12e19e26787", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -145,7 +145,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                 // handle normalization within binders because\n                 // otherwise we wind up a need to normalize when doing\n                 // trait matching (since you can have a trait\n-                // obligation like `for<'a> T::B : Fn(&'a int)`), but\n+                // obligation like `for<'a> T::B: Fn(&'a i32)`), but\n                 // we can't normalize with bound regions in scope. So\n                 // far now we just ignore binders but only normalize\n                 // if all bound regions are gone (and then we still"}, {"sha": "50c04e8fc345248ed04a7eecc44dda84bd7b0913", "filename": "src/librustc_trait_selection/traits/select/confirmation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fconfirmation.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -553,14 +553,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ///\n     /// Here is an example. Imagine we have a closure expression\n     /// and we desugared it so that the type of the expression is\n-    /// `Closure`, and `Closure` expects an int as argument. Then it\n+    /// `Closure`, and `Closure` expects `i32` as argument. Then it\n     /// is \"as if\" the compiler generated this impl:\n     ///\n-    ///     impl Fn(int) for Closure { ... }\n+    ///     impl Fn(i32) for Closure { ... }\n     ///\n-    /// Now imagine our obligation is `Fn(usize) for Closure`. So far\n+    /// Now imagine our obligation is `Closure: Fn(usize)`. So far\n     /// we have matched the self type `Closure`. At this point we'll\n-    /// compare the `int` to `usize` and generate an error.\n+    /// compare the `i32` to `usize` and generate an error.\n     ///\n     /// Note that this checking occurs *after* the impl has selected,\n     /// because these output type parameters should not affect the"}, {"sha": "7dc8c2cf4cdc2a46328affd3a0e79304e3db9e8b", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -1754,38 +1754,37 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     ) -> Vec<PredicateObligation<'tcx>> {\n         // Because the types were potentially derived from\n         // higher-ranked obligations they may reference late-bound\n-        // regions. For example, `for<'a> Foo<&'a int> : Copy` would\n-        // yield a type like `for<'a> &'a int`. In general, we\n+        // regions. For example, `for<'a> Foo<&'a i32> : Copy` would\n+        // yield a type like `for<'a> &'a i32`. In general, we\n         // maintain the invariant that we never manipulate bound\n         // regions, so we have to process these bound regions somehow.\n         //\n         // The strategy is to:\n         //\n         // 1. Instantiate those regions to placeholder regions (e.g.,\n-        //    `for<'a> &'a int` becomes `&0 int`.\n-        // 2. Produce something like `&'0 int : Copy`\n-        // 3. Re-bind the regions back to `for<'a> &'a int : Copy`\n+        //    `for<'a> &'a i32` becomes `&0 i32`.\n+        // 2. Produce something like `&'0 i32 : Copy`\n+        // 3. Re-bind the regions back to `for<'a> &'a i32 : Copy`\n \n         types\n-            .skip_binder()\n+            .skip_binder() // binder moved -\\\n             .iter()\n             .flat_map(|ty| {\n-                // binder moved -\\\n                 let ty: ty::Binder<Ty<'tcx>> = ty::Binder::bind(ty); // <----/\n \n                 self.infcx.commit_unconditionally(|_| {\n-                    let (skol_ty, _) = self.infcx.replace_bound_vars_with_placeholders(&ty);\n+                    let (placeholder_ty, _) = self.infcx.replace_bound_vars_with_placeholders(&ty);\n                     let Normalized { value: normalized_ty, mut obligations } =\n                         ensure_sufficient_stack(|| {\n                             project::normalize_with_depth(\n                                 self,\n                                 param_env,\n                                 cause.clone(),\n                                 recursion_depth,\n-                                &skol_ty,\n+                                &placeholder_ty,\n                             )\n                         });\n-                    let skol_obligation = predicate_for_trait_def(\n+                    let placeholder_obligation = predicate_for_trait_def(\n                         self.tcx(),\n                         param_env,\n                         cause.clone(),\n@@ -1794,7 +1793,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         normalized_ty,\n                         &[],\n                     );\n-                    obligations.push(skol_obligation);\n+                    obligations.push(placeholder_obligation);\n                     obligations\n                 })\n             })\n@@ -1844,9 +1843,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return Err(());\n         }\n \n-        let (skol_obligation, placeholder_map) =\n+        let (placeholder_obligation, placeholder_map) =\n             self.infcx().replace_bound_vars_with_placeholders(&obligation.predicate);\n-        let skol_obligation_trait_ref = skol_obligation.trait_ref;\n+        let placeholder_obligation_trait_ref = placeholder_obligation.trait_ref;\n \n         let impl_substs = self.infcx.fresh_substs_for_item(obligation.cause.span, impl_def_id);\n \n@@ -1865,14 +1864,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(\n             \"match_impl(impl_def_id={:?}, obligation={:?}, \\\n-             impl_trait_ref={:?}, skol_obligation_trait_ref={:?})\",\n-            impl_def_id, obligation, impl_trait_ref, skol_obligation_trait_ref\n+             impl_trait_ref={:?}, placeholder_obligation_trait_ref={:?})\",\n+            impl_def_id, obligation, impl_trait_ref, placeholder_obligation_trait_ref\n         );\n \n         let InferOk { obligations, .. } = self\n             .infcx\n             .at(&obligation.cause, obligation.param_env)\n-            .eq(skol_obligation_trait_ref, impl_trait_ref)\n+            .eq(placeholder_obligation_trait_ref, impl_trait_ref)\n             .map_err(|e| debug!(\"match_impl: failed eq_trait_refs due to `{}`\", e))?;\n         nested_obligations.extend(obligations);\n "}, {"sha": "42901102c10760d0c92f077221501c04e9cb0e3f", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -130,7 +130,7 @@ pub(super) fn specializes(tcx: TyCtxt<'_>, (impl1_def_id, impl2_def_id): (DefId,\n \n     // We determine whether there's a subset relationship by:\n     //\n-    // - skolemizing impl1,\n+    // - replacing bound vars with placeholders in impl1,\n     // - assuming the where clauses for impl1,\n     // - instantiating impl2 with fresh inference variables,\n     // - unifying,"}, {"sha": "33d57e25711733b5217da9b3c8031fe109f9471a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -1394,13 +1394,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // That is, consider this case:\n             //\n             // ```\n-            // trait SubTrait: SuperTrait<int> { }\n+            // trait SubTrait: SuperTrait<i32> { }\n             // trait SuperTrait<A> { type T; }\n             //\n             // ... B: SubTrait<T = foo> ...\n             // ```\n             //\n-            // We want to produce `<B as SuperTrait<int>>::T == foo`.\n+            // We want to produce `<B as SuperTrait<i32>>::T == foo`.\n \n             // Find any late-bound regions declared in `ty` that are not\n             // declared in the trait-ref. These are not well-formed."}, {"sha": "1d47e64630c18f9dcee66084bc60e10fd0dfe282", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -91,14 +91,14 @@ fn compare_predicate_entailment<'tcx>(\n \n     // This code is best explained by example. Consider a trait:\n     //\n-    //     trait Trait<'t,T> {\n-    //          fn method<'a,M>(t: &'t T, m: &'a M) -> Self;\n+    //     trait Trait<'t, T> {\n+    //         fn method<'a, M>(t: &'t T, m: &'a M) -> Self;\n     //     }\n     //\n     // And an impl:\n     //\n     //     impl<'i, 'j, U> Trait<'j, &'i U> for Foo {\n-    //          fn method<'b,N>(t: &'j &'i U, m: &'b N) -> Foo;\n+    //          fn method<'b, N>(t: &'j &'i U, m: &'b N) -> Foo;\n     //     }\n     //\n     // We wish to decide if those two method types are compatible.\n@@ -116,9 +116,9 @@ fn compare_predicate_entailment<'tcx>(\n     // regions (Note: but only early-bound regions, i.e., those\n     // declared on the impl or used in type parameter bounds).\n     //\n-    //     impl_to_skol_substs = {'i => 'i0, U => U0, N => N0 }\n+    //     impl_to_placeholder_substs = {'i => 'i0, U => U0, N => N0 }\n     //\n-    // Now we can apply skol_substs to the type of the impl method\n+    // Now we can apply placeholder_substs to the type of the impl method\n     // to yield a new function type in terms of our fresh, placeholder\n     // types:\n     //\n@@ -127,11 +127,11 @@ fn compare_predicate_entailment<'tcx>(\n     // We now want to extract and substitute the type of the *trait*\n     // method and compare it. To do so, we must create a compound\n     // substitution by combining trait_to_impl_substs and\n-    // impl_to_skol_substs, and also adding a mapping for the method\n+    // impl_to_placeholder_substs, and also adding a mapping for the method\n     // type parameters. We extend the mapping to also include\n     // the method parameters.\n     //\n-    //     trait_to_skol_substs = { T => &'i0 U0, Self => Foo, M => N0 }\n+    //     trait_to_placeholder_substs = { T => &'i0 U0, Self => Foo, M => N0 }\n     //\n     // Applying this to the trait method type yields:\n     //\n@@ -145,20 +145,20 @@ fn compare_predicate_entailment<'tcx>(\n     // satisfied by the implementation's method.\n     //\n     // We do this by creating a parameter environment which contains a\n-    // substitution corresponding to impl_to_skol_substs. We then build\n-    // trait_to_skol_substs and use it to convert the predicates contained\n+    // substitution corresponding to impl_to_placeholder_substs. We then build\n+    // trait_to_placeholder_substs and use it to convert the predicates contained\n     // in the trait_m.generics to the placeholder form.\n     //\n     // Finally we register each of these predicates as an obligation in\n     // a fresh FulfillmentCtxt, and invoke select_all_or_error.\n \n     // Create mapping from impl to placeholder.\n-    let impl_to_skol_substs = InternalSubsts::identity_for_item(tcx, impl_m.def_id);\n+    let impl_to_placeholder_substs = InternalSubsts::identity_for_item(tcx, impl_m.def_id);\n \n     // Create mapping from trait to placeholder.\n-    let trait_to_skol_substs =\n-        impl_to_skol_substs.rebase_onto(tcx, impl_m.container.id(), trait_to_impl_substs);\n-    debug!(\"compare_impl_method: trait_to_skol_substs={:?}\", trait_to_skol_substs);\n+    let trait_to_placeholder_substs =\n+        impl_to_placeholder_substs.rebase_onto(tcx, impl_m.container.id(), trait_to_impl_substs);\n+    debug!(\"compare_impl_method: trait_to_placeholder_substs={:?}\", trait_to_placeholder_substs);\n \n     let impl_m_generics = tcx.generics_of(impl_m.def_id);\n     let trait_m_generics = tcx.generics_of(trait_m.def_id);\n@@ -194,7 +194,7 @@ fn compare_predicate_entailment<'tcx>(\n     // if all constraints hold.\n     hybrid_preds\n         .predicates\n-        .extend(trait_m_predicates.instantiate_own(tcx, trait_to_skol_substs).predicates);\n+        .extend(trait_m_predicates.instantiate_own(tcx, trait_to_placeholder_substs).predicates);\n \n     // Construct trait parameter environment and then shift it into the placeholder viewpoint.\n     // The key step here is to update the caller_bounds's predicates to be\n@@ -220,7 +220,7 @@ fn compare_predicate_entailment<'tcx>(\n \n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n-        let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_skol_substs);\n+        let impl_m_own_bounds = impl_m_predicates.instantiate_own(tcx, impl_to_placeholder_substs);\n         let (impl_m_own_bounds, _) = infcx.replace_bound_vars_with_fresh_vars(\n             impl_m_span,\n             infer::HigherRankedType,\n@@ -261,7 +261,7 @@ fn compare_predicate_entailment<'tcx>(\n         debug!(\"compare_impl_method: impl_fty={:?}\", impl_fty);\n \n         let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, &tcx.fn_sig(trait_m.def_id));\n-        let trait_sig = trait_sig.subst(tcx, trait_to_skol_substs);\n+        let trait_sig = trait_sig.subst(tcx, trait_to_placeholder_substs);\n         let trait_sig =\n             inh.normalize_associated_types_in(impl_m_span, impl_m_hir_id, param_env, &trait_sig);\n         let trait_fty = tcx.mk_fn_ptr(ty::Binder::bind(trait_sig));"}, {"sha": "efd23894d02d159b8fcc4d80b53afe3664f90643", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -1468,7 +1468,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     ///\n     /// ```\n     /// trait Foo { ... }\n-    /// impl Foo for Vec<int> { ... }\n+    /// impl Foo for Vec<i32> { ... }\n     /// impl Foo for Vec<usize> { ... }\n     /// ```\n     ///"}, {"sha": "ea47ae68ce7d36c63220b15c2140602a7765cc14", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b015b28359c7c94ef756b48d9046282153af9288/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=b015b28359c7c94ef756b48d9046282153af9288", "patch": "@@ -212,15 +212,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // errors in some cases, such as this one:\n         //\n         // ```\n-        // fn foo<'x>(x: &'x int) {\n+        // fn foo<'x>(x: &'x i32) {\n         //    let a = 1;\n         //    let mut z = x;\n         //    z = &a;\n         // }\n         // ```\n         //\n         // The reason we might get an error is that `z` might be\n-        // assigned a type like `&'x int`, and then we would have\n+        // assigned a type like `&'x i32`, and then we would have\n         // a problem when we try to assign `&a` to `z`, because\n         // the lifetime of `&a` (i.e., the enclosing block) is\n         // shorter than `'x`.\n@@ -229,11 +229,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // expected type here is whatever type the user wrote, not\n         // the initializer's type. In this case the user wrote\n         // nothing, so we are going to create a type variable `Z`.\n-        // Then we will assign the type of the initializer (`&'x\n-        // int`) as a subtype of `Z`: `&'x int <: Z`. And hence we\n-        // will instantiate `Z` as a type `&'0 int` where `'0` is\n-        // a fresh region variable, with the constraint that `'x :\n-        // '0`.  So basically we're all set.\n+        // Then we will assign the type of the initializer (`&'x i32`)\n+        // as a subtype of `Z`: `&'x i32 <: Z`. And hence we\n+        // will instantiate `Z` as a type `&'0 i32` where `'0` is\n+        // a fresh region variable, with the constraint that `'x : '0`.\n+        // So basically we're all set.\n         //\n         // Note that there are two tests to check that this remains true\n         // (`regions-reassign-{match,let}-bound-pointer.rs`)."}]}