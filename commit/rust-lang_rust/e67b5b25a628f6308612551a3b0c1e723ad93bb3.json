{"sha": "e67b5b25a628f6308612551a3b0c1e723ad93bb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2N2I1YjI1YTYyOGY2MzA4NjEyNTUxYTNiMGMxZTcyM2FkOTNiYjM=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-11T23:51:21Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-13T00:01:13Z"}, "message": "Introduce a SHAPE_UNBOXED_VEC shape in order to seperate out vector logic.", "tree": {"sha": "61cdef39f5f6dfc5dc60885471a29e54cf801418", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61cdef39f5f6dfc5dc60885471a29e54cf801418"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e67b5b25a628f6308612551a3b0c1e723ad93bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e67b5b25a628f6308612551a3b0c1e723ad93bb3", "html_url": "https://github.com/rust-lang/rust/commit/e67b5b25a628f6308612551a3b0c1e723ad93bb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e67b5b25a628f6308612551a3b0c1e723ad93bb3/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebdf0c20cdaf78e4b132c71cb927f8d1a8d2e3f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebdf0c20cdaf78e4b132c71cb927f8d1a8d2e3f7", "html_url": "https://github.com/rust-lang/rust/commit/ebdf0c20cdaf78e4b132c71cb927f8d1a8d2e3f7"}], "stats": {"total": 109, "additions": 102, "deletions": 7}, "files": [{"sha": "20058a8a9db8d0df543c0e3b6a097221abe002bf", "filename": "src/rt/rust_box_annihilator.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frt%2Frust_box_annihilator.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frt%2Frust_box_annihilator.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_box_annihilator.cpp?ref=e67b5b25a628f6308612551a3b0c1e723ad93bb3", "patch": "@@ -45,6 +45,10 @@ class annihilator : public shape::data<annihilator,shape::ptr> {\n         task->kernel->free(vec);\n     }\n \n+    void walk_unboxed_vec2(bool is_pod) {\n+        walk_vec2(is_pod, get_unboxed_vec_data_range(dp));\n+    }\n+\n     void walk_fixedvec2(uint16_t n_elts, size_t elt_sz, bool is_pod) {\n         walk_vec2(is_pod, get_fixedvec_data_range(n_elts, elt_sz, dp));\n     }"}, {"sha": "e75ec46522fffa842d590143ffa729f872ce6a08", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=e67b5b25a628f6308612551a3b0c1e723ad93bb3", "patch": "@@ -91,6 +91,10 @@ class irc : public shape::data<irc,shape::ptr> {\n         walk_vec2(is_pod, get_vec_data_range(dp));\n     }\n \n+    void walk_unboxed_vec2(bool is_pod) {\n+        walk_vec2(is_pod, get_unboxed_vec_data_range(dp));\n+    }\n+\n     void walk_slice2(bool is_pod, bool is_str) {\n         walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n     }\n@@ -341,6 +345,10 @@ class mark : public shape::data<mark,shape::ptr> {\n         walk_vec2(is_pod, get_vec_data_range(dp));\n     }\n \n+    void walk_unboxed_vec2(bool is_pod) {\n+        walk_vec2(is_pod, get_unboxed_vec_data_range(dp));\n+    }\n+\n     void walk_slice2(bool is_pod, bool is_str) {\n         walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n     }"}, {"sha": "444bcc9e0887f86d020e65c9a35941cbb3bde3aa", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=e67b5b25a628f6308612551a3b0c1e723ad93bb3", "patch": "@@ -263,6 +263,11 @@ class cmp : public data<cmp,ptr_pair> {\n         walk_vec2(is_pod, get_vec_data_range(dp));\n     }\n \n+    void walk_unboxed_vec2(bool is_pod) {\n+        walk_vec2(is_pod, get_unboxed_vec_data_range(dp));\n+    }\n+\n+\n     void walk_slice2(bool is_pod, bool is_str) {\n         // Slices compare just like vecs.\n         walk_vec2(is_pod, get_slice_data_range(is_str, dp));"}, {"sha": "8766759cc41ddfafbe86d9c69df8362ebeff171c", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 74, "deletions": 2, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=e67b5b25a628f6308612551a3b0c1e723ad93bb3", "patch": "@@ -58,6 +58,7 @@ const uint8_t SHAPE_SEND_TYDESC = 29u;\n const uint8_t SHAPE_RPTR = 31u;\n const uint8_t SHAPE_FIXEDVEC = 32u;\n const uint8_t SHAPE_SLICE = 33u;\n+const uint8_t SHAPE_UNBOXED_VEC = 34u;\n \n #ifdef _LP64\n const uint8_t SHAPE_PTR = SHAPE_U64;\n@@ -263,9 +264,9 @@ class ctxt {\n \n private:\n     void walk_vec0();\n+    void walk_unboxed_vec0();\n     void walk_tag0();\n     void walk_box0();\n-    void walk_box_old0();\n     void walk_uniq0();\n     void walk_struct0();\n     void walk_res0();\n@@ -318,6 +319,7 @@ ctxt<T>::walk() {\n     case SHAPE_RPTR:     walk_rptr0();            break;\n     case SHAPE_FIXEDVEC: walk_fixedvec0();        break;\n     case SHAPE_SLICE:    walk_slice0();           break;\n+    case SHAPE_UNBOXED_VEC: walk_unboxed_vec0();  break;\n     default:             abort();\n     }\n }\n@@ -375,6 +377,19 @@ ctxt<T>::walk_vec0() {\n     sp = end_sp;\n }\n \n+template<typename T>\n+void\n+ctxt<T>::walk_unboxed_vec0() {\n+    bool is_pod = *sp++;\n+\n+    uint16_t sp_size = get_u16_bump(sp);\n+    const uint8_t *end_sp = sp + sp_size;\n+\n+    static_cast<T *>(this)->walk_unboxed_vec1(is_pod);\n+\n+    sp = end_sp;\n+}\n+\n template<typename T>\n void\n ctxt<T>::walk_tag0() {\n@@ -516,6 +531,9 @@ class print : public ctxt<print> {\n     void walk_vec1(bool is_pod) {\n         DPRINT(\"vec<\"); walk(); DPRINT(\">\");\n     }\n+    void walk_unboxed_vec1(bool is_pod) {\n+        DPRINT(\"unboxed_vec<\"); walk(); DPRINT(\">\");\n+    }\n     void walk_uniq1() {\n         DPRINT(\"~<\"); walk(); DPRINT(\">\");\n     }\n@@ -603,6 +621,11 @@ class size_of : public ctxt<size_of> {\n         sa.set(sizeof(void *), sizeof(void *));\n     }\n \n+    void walk_unboxed_vec1(bool is_pod) {\n+        assert(false &&\n+               \"trying to compute size of dynamically sized unboxed vector\");\n+    }\n+\n     void walk_res1(const rust_fn *dtor, const uint8_t *end_sp) {\n         abort();    // TODO\n     }\n@@ -849,6 +872,12 @@ class data : public ctxt< data<T,U> > {\n     static std::pair<uint8_t *,uint8_t *> get_vec_data_range(ptr dp);\n     static std::pair<ptr_pair,ptr_pair> get_vec_data_range(ptr_pair &dp);\n \n+    static std::pair<uint8_t *,uint8_t *> get_unboxed_vec_data_range(ptr dp);\n+    static std::pair<ptr_pair,ptr_pair>\n+        get_unboxed_vec_data_range(ptr_pair &dp);\n+    static ptr get_unboxed_vec_end(ptr dp);\n+    static ptr_pair get_unboxed_vec_end(ptr_pair &dp);\n+\n     static std::pair<uint8_t *,uint8_t *> get_slice_data_range(bool is_str,\n                                                                ptr dp);\n     static std::pair<ptr_pair,ptr_pair> get_slice_data_range(bool is_str,\n@@ -880,6 +909,13 @@ class data : public ctxt< data<T,U> > {\n         DATA_SIMPLE(void *, walk_vec2(is_pod));\n     }\n \n+    void walk_unboxed_vec1(bool is_pod) {\n+        // align?\n+        U next_dp = get_unboxed_vec_end(dp);\n+        static_cast<T *>(this)->walk_unboxed_vec2(is_pod);\n+        dp = next_dp;\n+    }\n+\n     void walk_slice1(bool is_pod, bool is_str) {\n         DATA_SIMPLE(void *, walk_slice2(is_pod, is_str));\n     }\n@@ -955,7 +991,7 @@ data<T,U>::walk_uniq_contents1() {\n     if (body_td) {\n         U body_dp(dp.box_body());\n         arena arena;\n-        T sub(*static_cast<T *>(this), body_td->shape,\n+        T sub(*static_cast<T *>(this), /*body_td->shape,*/ this->sp,\n               body_td->shape_tables, body_dp);\n         sub.align = true;\n         static_cast<T *>(this)->walk_uniq_contents2(sub);\n@@ -1000,6 +1036,38 @@ data<T,U>::get_vec_data_range(ptr_pair &dp) {\n     return std::make_pair(start, end);\n }\n \n+template<typename T,typename U>\n+std::pair<uint8_t *,uint8_t *>\n+data<T,U>::get_unboxed_vec_data_range(ptr dp) {\n+    rust_vec* ptr = (rust_vec*)dp;\n+    uint8_t* data = &ptr->data[0];\n+    return std::make_pair(data, data + ptr->fill);\n+}\n+\n+template<typename T,typename U>\n+std::pair<ptr_pair,ptr_pair>\n+data<T,U>::get_unboxed_vec_data_range(ptr_pair &dp) {\n+    std::pair<uint8_t *,uint8_t *> fst =\n+        get_unboxed_vec_data_range(shape::ptr(dp.fst));\n+    std::pair<uint8_t *,uint8_t *> snd =\n+        get_unboxed_vec_data_range(shape::ptr(dp.snd));\n+    ptr_pair start(fst.first, snd.first);\n+    ptr_pair end(fst.second, snd.second);\n+    return std::make_pair(start, end);\n+}\n+\n+template<typename T,typename U>\n+ptr data<T,U>::get_unboxed_vec_end(ptr dp) {\n+    rust_vec* ptr = (rust_vec*)dp;\n+    return dp + sizeof(rust_vec) + ptr->fill;\n+}\n+\n+template<typename T,typename U>\n+ptr_pair data<T,U>::get_unboxed_vec_end(ptr_pair &dp) {\n+    return ptr_pair(get_unboxed_vec_end(ptr(dp.fst)),\n+                    get_unboxed_vec_end(ptr(dp.snd)));\n+}\n+\n template<typename T,typename U>\n std::pair<uint8_t *,uint8_t *>\n data<T,U>::get_slice_data_range(bool is_str, ptr dp) {\n@@ -1135,6 +1203,10 @@ class log : public data<log,ptr> {\n             walk_vec2(is_pod, get_vec_data_range(dp));\n     }\n \n+    void walk_unboxed_vec2(bool is_pod) {\n+        walk_vec2(is_pod, get_unboxed_vec_data_range(dp));\n+    }\n+\n     void walk_slice2(bool is_pod, bool is_str) {\n         walk_vec2(is_pod, get_slice_data_range(is_str, dp));\n         out << \"/&\";"}, {"sha": "f67509f2db70d74f1cf7ccbe4ffa3fb0c28d2b46", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=e67b5b25a628f6308612551a3b0c1e723ad93bb3", "patch": "@@ -93,6 +93,7 @@ const shape_send_tydesc: u8 = 29u8;\n const shape_rptr: u8 = 31u8;\n const shape_fixedvec: u8 = 32u8;\n const shape_slice: u8 = 33u8;\n+const shape_unboxed_vec: u8 = 34u8;\n \n fn mk_global(ccx: @crate_ctxt, name: str, llval: ValueRef, internal: bool) ->\n    ValueRef {\n@@ -225,6 +226,9 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n       ty::ty_float(ast::ty_f64) { [shape_f64] }\n       ty::ty_estr(ty::vstore_uniq) |\n       ty::ty_str {\n+        // FIXME: we want to emit this as a unique pointer to an unboxed vec,\n+        // but it doesn't work at the moment, since trans doesn't put\n+        // tydescs in string boxes...\n         let mut s = [shape_vec];\n         add_bool(s, true); // type is POD\n         let unit_ty = ty::mk_mach_uint(ccx.tcx, ast::ty_u8);\n@@ -267,9 +271,11 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> [u8] {\n       }\n       ty::ty_evec(mt, ty::vstore_uniq) |\n       ty::ty_vec(mt) {\n-        let mut s = [shape_vec];\n-        add_bool(s, ty::type_is_pod(ccx.tcx, mt.ty));\n-        add_substr(s, shape_of(ccx, mt.ty));\n+        let mut s_inner = [shape_unboxed_vec];\n+        add_bool(s_inner, ty::type_is_pod(ccx.tcx, mt.ty));\n+        add_substr(s_inner, shape_of(ccx, mt.ty));\n+        let mut s = [shape_uniq];\n+        add_substr(s, s_inner);\n         s\n       }\n "}, {"sha": "80157c0e9388c817d055d69ab6da8fb2145539ff", "filename": "src/test/run-pass/log-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Ftest%2Frun-pass%2Flog-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67b5b25a628f6308612551a3b0c1e723ad93bb3/src%2Ftest%2Frun-pass%2Flog-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-str.rs?ref=e67b5b25a628f6308612551a3b0c1e723ad93bb3", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n-    assert \"[1, 2, 3]\" == sys::log_str([1, 2, 3]);\n-    assert #fmt[\"%?/%5?\", [1, 2, 3], \"hi\"] == \"[1, 2, 3]/ \\\"hi\\\"\";\n+    assert \"~[1, 2, 3]\" == sys::log_str([1, 2, 3]);\n+    assert #fmt[\"%?/%5?\", [1, 2, 3], \"hi\"] == \"~[1, 2, 3]/ \\\"hi\\\"\";\n }"}]}