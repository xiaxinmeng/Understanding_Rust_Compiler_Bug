{"sha": "7d317fe7e584832f4aac113d3d5d19d90536c081", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMzE3ZmU3ZTU4NDgzMmY0YWFjMTEzZDNkNWQxOWQ5MDUzNmMwODE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-12T05:10:12Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-04-21T01:03:24Z"}, "message": "std: remove unused 'mut' variables", "tree": {"sha": "455d27c2646e0aad15201abdca138b616e0d9676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/455d27c2646e0aad15201abdca138b616e0d9676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d317fe7e584832f4aac113d3d5d19d90536c081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d317fe7e584832f4aac113d3d5d19d90536c081", "html_url": "https://github.com/rust-lang/rust/commit/7d317fe7e584832f4aac113d3d5d19d90536c081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d317fe7e584832f4aac113d3d5d19d90536c081/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13537d2e0ce54f88909e6f44006254490ae1d1ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/13537d2e0ce54f88909e6f44006254490ae1d1ab", "html_url": "https://github.com/rust-lang/rust/commit/13537d2e0ce54f88909e6f44006254490ae1d1ab"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "d1f6bf982a7ffe82163c3747d30767470a53c31c", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=7d317fe7e584832f4aac113d3d5d19d90536c081", "patch": "@@ -891,7 +891,7 @@ mod tests {\n     #[test]\n     fn test_0_elements() {\n         let mut act;\n-        let mut exp;\n+        let exp;\n         act = Bitv::new(0u, false);\n         exp = vec::from_elem::<uint>(0u, 0u);\n         assert!(act.eq_vec(exp));"}, {"sha": "b120e40ec25ca6ee8c4bc66662cb217b80129e29", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=7d317fe7e584832f4aac113d3d5d19d90536c081", "patch": "@@ -113,7 +113,7 @@ pub impl<T> Deque<T> {\n     ///\n     /// Fails if the deque is empty\n     fn pop_front(&mut self) -> T {\n-        let mut result = self.elts[self.lo].swap_unwrap();\n+        let result = self.elts[self.lo].swap_unwrap();\n         self.lo = (self.lo + 1u) % self.elts.len();\n         self.nelts -= 1u;\n         result\n@@ -126,7 +126,7 @@ pub impl<T> Deque<T> {\n         if self.hi == 0u {\n             self.hi = self.elts.len() - 1u;\n         } else { self.hi -= 1u; }\n-        let mut result = self.elts[self.hi].swap_unwrap();\n+        let result = self.elts[self.hi].swap_unwrap();\n         self.elts[self.hi] = None;\n         self.nelts -= 1u;\n         result\n@@ -204,7 +204,7 @@ pub impl<T> Deque<T> {\n     ///\n     /// Fails if the deque is empty\n     fn pop_front(&mut self) -> T {\n-        let mut result = self.elts[self.lo].swap_unwrap();\n+        let result = self.elts[self.lo].swap_unwrap();\n         self.lo = (self.lo + 1u) % self.elts.len();\n         self.nelts -= 1u;\n         result\n@@ -217,7 +217,7 @@ pub impl<T> Deque<T> {\n         if self.hi == 0u {\n             self.hi = self.elts.len() - 1u;\n         } else { self.hi -= 1u; }\n-        let mut result = self.elts[self.hi].swap_unwrap();\n+        let result = self.elts[self.hi].swap_unwrap();\n         self.elts[self.hi] = None;\n         self.nelts -= 1u;\n         result"}, {"sha": "e736273a5eed13ee63a4f1244fc653301f823da6", "filename": "src/libstd/dlist.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdlist.rs?ref=7d317fe7e584832f4aac113d3d5d19d90536c081", "patch": "@@ -220,7 +220,7 @@ pub impl<T> DList<T> {\n      * node. O(1).\n      */\n     fn push_head_n(@mut self, data: T) -> @mut DListNode<T> {\n-        let mut nobe = DList::new_link(data);\n+        let nobe = DList::new_link(data);\n         self.add_head(nobe);\n         nobe.get()\n     }\n@@ -233,7 +233,7 @@ pub impl<T> DList<T> {\n      * node. O(1).\n      */\n     fn push_n(@mut self, data: T) -> @mut DListNode<T> {\n-        let mut nobe = DList::new_link(data);\n+        let nobe = DList::new_link(data);\n         self.add_tail(nobe);\n         nobe.get()\n     }\n@@ -263,7 +263,7 @@ pub impl<T> DList<T> {\n         data: T,\n         neighbour: @mut DListNode<T>\n     ) -> @mut DListNode<T> {\n-        let mut nobe = DList::new_link(data);\n+        let nobe = DList::new_link(data);\n         self.insert_left(nobe, neighbour);\n         nobe.get()\n     }\n@@ -293,7 +293,7 @@ pub impl<T> DList<T> {\n         data: T,\n         neighbour: @mut DListNode<T>\n     ) -> @mut DListNode<T> {\n-        let mut nobe = DList::new_link(data);\n+        let nobe = DList::new_link(data);\n         self.insert_right(neighbour, nobe);\n         nobe.get()\n     }"}, {"sha": "b171bd6e2a96394a05d2b791ece9b061374cbdd2", "filename": "src/libstd/num/rational.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Frational.rs?ref=7d317fe7e584832f4aac113d3d5d19d90536c081", "patch": "@@ -60,7 +60,7 @@ impl<T: Copy + Div<T,T> + Modulo<T,T> + Neg<T> + Zero + One + Ord + Eq>\n \n     /// Put self into lowest terms, with denom > 0.\n     fn reduce(&mut self) {\n-        let mut g : T = gcd(self.numer, self.denom);\n+        let g : T = gcd(self.numer, self.denom);\n \n         self.numer /= g;\n         self.denom /= g;\n@@ -508,4 +508,4 @@ mod test {\n             test(s);\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "33bc393e4703a6dff9a6cac46d575301e6b8e0f2", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=7d317fe7e584832f4aac113d3d5d19d90536c081", "patch": "@@ -838,8 +838,7 @@ pub mod node {\n                   option::None => break,\n                   option::Some(x) => {\n                     //FIXME (#2744): Replace with memcpy or something similar\n-                    let mut local_buf: ~[u8] =\n-                        cast::transmute(*x.content);\n+                    let local_buf: ~[u8] = cast::transmute(*x.content);\n                     let mut i = x.byte_offset;\n                     while i < x.byte_len {\n                         buf[offset] = local_buf[i];\n@@ -1156,7 +1155,7 @@ pub mod node {\n         }\n \n         pub fn empty() -> T {\n-            let mut stack : ~[@Node] = ~[];\n+            let stack : ~[@Node] = ~[];\n             T { stack: stack, stackpos: -1 }\n         }\n "}, {"sha": "7371250b38a91d81930c7ec467b83384e530b4a2", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=7d317fe7e584832f4aac113d3d5d19d90536c081", "patch": "@@ -93,7 +93,7 @@ pub fn sha1() -> @Sha1 {\n         assert!((vec::len(st.h) == digest_buf_len));\n         assert!((vec::uniq_len(st.work_buf) == work_buf_len));\n         let mut t: int; // Loop counter\n-        let mut w = st.work_buf;\n+        let w = st.work_buf;\n \n         // Initialize the first 16 words of the vector w\n         t = 0;\n@@ -260,7 +260,7 @@ pub fn sha1() -> @Sha1 {\n             return s;\n         }\n     }\n-    let mut st = Sha1State {\n+    let st = Sha1State {\n          h: vec::from_elem(digest_buf_len, 0u32),\n          len_low: 0u32,\n          len_high: 0u32,"}, {"sha": "febaea637efe1f0ffee400baefb9d8acfa7e434d", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=7d317fe7e584832f4aac113d3d5d19d90536c081", "patch": "@@ -239,7 +239,7 @@ fn binarysort<T:Copy + Ord>(array: &mut [T], start: uint) {\n             }\n         }\n         assert!(left == right);\n-        let mut n = start-left;\n+        let n = start-left;\n \n         copy_vec(array, left+1, array, left, n);\n         array[left] = pivot;\n@@ -416,7 +416,7 @@ impl<T:Copy + Ord> MergeState<T> {\n     }\n \n     fn merge_at(&mut self, n: uint, array: &mut [T]) {\n-        let mut size = self.runs.len();\n+        let size = self.runs.len();\n         assert!(size >= 2);\n         assert!(n == size-2 || n == size-3);\n "}, {"sha": "addc1da6394eeda880ed4ed26e09a7f14efc5e9d", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=7d317fe7e584832f4aac113d3d5d19d90536c081", "patch": "@@ -427,8 +427,7 @@ fn run_tests(opts: &TestOpts,\n     let filtered_descs = filtered_tests.map(|t| t.desc);\n     callback(TeFiltered(filtered_descs));\n \n-    let mut (filtered_tests,\n-             filtered_benchs) =\n+    let (filtered_tests, filtered_benchs) =\n         do vec::partition(filtered_tests) |e| {\n         match e.testfn {\n             StaticTestFn(_) | DynTestFn(_) => true,"}, {"sha": "a763aa1592e8308f15a657b670ef249e6833330a", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d317fe7e584832f4aac113d3d5d19d90536c081/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=7d317fe7e584832f4aac113d3d5d19d90536c081", "patch": "@@ -147,7 +147,7 @@ pub fn empty_tm() -> Tm {\n /// Returns the specified time in UTC\n pub fn at_utc(clock: Timespec) -> Tm {\n     unsafe {\n-        let mut Timespec { sec, nsec } = clock;\n+        let Timespec { sec, nsec } = clock;\n         let mut tm = empty_tm();\n         rustrt::rust_gmtime(sec, nsec, &mut tm);\n         tm\n@@ -162,7 +162,7 @@ pub fn now_utc() -> Tm {\n /// Returns the specified time in the local timezone\n pub fn at(clock: Timespec) -> Tm {\n     unsafe {\n-        let mut Timespec { sec, nsec } = clock;\n+        let Timespec { sec, nsec } = clock;\n         let mut tm = empty_tm();\n         rustrt::rust_localtime(sec, nsec, &mut tm);\n         tm"}]}