{"sha": "48aa59e74d6a2b3fea5162eaed902798dc0f95f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YWE1OWU3NGQ2YTJiM2ZlYTUxNjJlYWVkOTAyNzk4ZGMwZjk1Zjg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:23:31Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:37:54Z"}, "message": "examples for as[_mut]_ptr", "tree": {"sha": "e3b9bd4031c7ca947c6b6beee86c61b291e87a3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3b9bd4031c7ca947c6b6beee86c61b291e87a3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48aa59e74d6a2b3fea5162eaed902798dc0f95f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48aa59e74d6a2b3fea5162eaed902798dc0f95f8", "html_url": "https://github.com/rust-lang/rust/commit/48aa59e74d6a2b3fea5162eaed902798dc0f95f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48aa59e74d6a2b3fea5162eaed902798dc0f95f8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3", "html_url": "https://github.com/rust-lang/rust/commit/10f511daa01d98e4c8f524cbdf38e9dd6c3ea9e3"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "d586f45534ea0422e3efbf816198f10de86d6342", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/48aa59e74d6a2b3fea5162eaed902798dc0f95f8/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48aa59e74d6a2b3fea5162eaed902798dc0f95f8/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=48aa59e74d6a2b3fea5162eaed902798dc0f95f8", "patch": "@@ -1165,6 +1165,32 @@ impl<T> MaybeUninit<T> {\n \n     /// Gets a pointer to the contained value. Reading from this pointer or turning it\n     /// into a reference is undefined behavior unless the `MaybeUninit` is initialized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Correct usage of this method:\n+    ///\n+    /// ```rust\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n+    /// x.set(vec![0,1,2]);\n+    /// // Create a reference into the `MaybeUninit`. This is okay because we initialized it.\n+    /// let x_vec = unsafe { &*x.as_ptr() };\n+    /// assert_eq!(x_vec.len(), 3);\n+    /// ```\n+    ///\n+    /// *Incorrect* usage of this method:\n+    ///\n+    /// ```rust,no_run\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let x = MaybeUninit::<Vec<u32>>::uninitialized();\n+    /// let x_vec = unsafe { &*x.as_ptr() };\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// ```\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub fn as_ptr(&self) -> *const T {\n@@ -1173,6 +1199,33 @@ impl<T> MaybeUninit<T> {\n \n     /// Gets a mutable pointer to the contained value. Reading from this pointer or turning it\n     /// into a reference is undefined behavior unless the `MaybeUninit` is initialized.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Correct usage of this method:\n+    ///\n+    /// ```rust\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n+    /// x.set(vec![0,1,2]);\n+    /// // Create a reference into the `MaybeUninit`. This is okay because we initialized it.\n+    /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n+    /// x_vec.push(3);\n+    /// assert_eq!(x_vec.len(), 4);\n+    /// ```\n+    ///\n+    /// *Incorrect* usage of this method:\n+    ///\n+    /// ```rust,no_run\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut x = MaybeUninit::<Vec<u32>>::uninitialized();\n+    /// let x_vec = unsafe { &mut *x.as_mut_ptr() };\n+    /// // We have created a reference to an uninitialized vector! This is undefined behavior.\n+    /// ```\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub fn as_mut_ptr(&mut self) -> *mut T {"}]}