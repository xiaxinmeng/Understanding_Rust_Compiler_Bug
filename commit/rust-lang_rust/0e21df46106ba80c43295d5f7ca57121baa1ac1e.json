{"sha": "0e21df46106ba80c43295d5f7ca57121baa1ac1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMjFkZjQ2MTA2YmE4MGM0MzI5NWQ1ZjdjYTU3MTIxYmFhMWFjMWU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-18T16:09:14Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-11-18T16:09:36Z"}, "message": "Add some comments to kind.rs and last_use.rs", "tree": {"sha": "bf0287bc462ca6fde944b9452138cd6b95cad5cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf0287bc462ca6fde944b9452138cd6b95cad5cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e21df46106ba80c43295d5f7ca57121baa1ac1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e21df46106ba80c43295d5f7ca57121baa1ac1e", "html_url": "https://github.com/rust-lang/rust/commit/0e21df46106ba80c43295d5f7ca57121baa1ac1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e21df46106ba80c43295d5f7ca57121baa1ac1e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8cf3ca3b55dbab193903a00eb427156365e44c67", "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf3ca3b55dbab193903a00eb427156365e44c67", "html_url": "https://github.com/rust-lang/rust/commit/8cf3ca3b55dbab193903a00eb427156365e44c67"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "516c49a57a47b0f866bde4f52f42f3988822d128", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0e21df46106ba80c43295d5f7ca57121baa1ac1e/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e21df46106ba80c43295d5f7ca57121baa1ac1e/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=0e21df46106ba80c43295d5f7ca57121baa1ac1e", "patch": "@@ -3,6 +3,21 @@ import syntax::{visit, ast_util};\n import syntax::ast::*;\n import syntax::codemap::span;\n \n+// Kind analysis pass. There are three kinds:\n+//\n+//  sendable: scalar types, and unique types containing only sendable types\n+//  copyable: boxes, objects, closures, and uniques containing copyable types\n+//  noncopyable: resources, or unique types containing resources\n+//\n+// This pass ensures that type parameters are only instantiated with types\n+// whose kinds are equal or less general than the way the type parameter was\n+// annotated (with the `send` or `copy` keyword).\n+//\n+// It also verifies that noncopyable kinds are not copied. Sendability is not\n+// applied, since none of our language primitives send. Instead, the sending\n+// primitives in the stdlib are explicitly annotated to only take sendable\n+// types.\n+\n fn kind_to_str(k: kind) -> str {\n     alt k {\n       kind_sendable. { \"sendable\" }"}, {"sha": "cc9215f6536a13a2c3171d6154da738916cd59e9", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0e21df46106ba80c43295d5f7ca57121baa1ac1e/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e21df46106ba80c43295d5f7ca57121baa1ac1e/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=0e21df46106ba80c43295d5f7ca57121baa1ac1e", "patch": "@@ -3,6 +3,24 @@ import syntax::ast::*;\n import std::list::{list, nil, cons, tail};\n import std::{vec, list, option};\n \n+// Last use analysis pass.\n+//\n+// Finds the last read of each value stored in a local variable or\n+// callee-owned argument (arguments with by-move or by-copy passing\n+// style). This is a limited form of liveness analysis, peformed\n+// (perhaps foolishly) directly on the AST.\n+//\n+// The algorithm walks the AST, keeping a set of (def, last_use)\n+// pairs. When the function is exited, or the local is overwritten,\n+// the current set of last uses is marked with 'true' in a table.\n+// Other branches may later overwrite them with 'false' again, since\n+// they may find a use coming after them. (Marking an expression as a\n+// last use is only done if it has not already been marked with\n+// 'false'.)\n+//\n+// Some complexity is added to deal with joining control flow branches\n+// (by `break` or conditionals), and for handling loops.\n+\n // Marks expr_paths that are last uses.\n type last_uses = std::map::hashmap<node_id, ()>;\n "}]}