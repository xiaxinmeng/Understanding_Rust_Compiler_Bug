{"sha": "2e18605af29ccf875cdcb539a522f11f5ac44113", "node_id": "C_kwDOAAsO6NoAKDJlMTg2MDVhZjI5Y2NmODc1Y2RjYjUzOWE1MjJmMTFmNWFjNDQxMTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T00:09:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-14T00:09:05Z"}, "message": "Auto merge of #111388 - clubby789:clap-complete, r=jyn514\n\nGenerate shell completions for bootstrap with Clap\n\nNow that #110693 has been merged, we can look at generating shell completions for x.py with `clap_complete`. Leaving this as draft for now as I'm not sure of the best way to integration the completion generator. Additionally, the generated completions for zsh are completely broken (will need to be resolved upstream, it doesn't seem to handle subcommands + global arguments well).\nI don't have Fish installed and would be interested to know how well completions work there.\n\nAlternative to #107827", "tree": {"sha": "bdb637444347dff36e5a72a9df830d36d6e88186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdb637444347dff36e5a72a9df830d36d6e88186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e18605af29ccf875cdcb539a522f11f5ac44113", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e18605af29ccf875cdcb539a522f11f5ac44113", "html_url": "https://github.com/rust-lang/rust/commit/2e18605af29ccf875cdcb539a522f11f5ac44113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e18605af29ccf875cdcb539a522f11f5ac44113/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb03a3e3f98019209d63e680eed49bde01bf5f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb03a3e3f98019209d63e680eed49bde01bf5f60", "html_url": "https://github.com/rust-lang/rust/commit/eb03a3e3f98019209d63e680eed49bde01bf5f60"}, {"sha": "a348f8aea5801cbe81c25b660fa56a5d6d888daf", "url": "https://api.github.com/repos/rust-lang/rust/commits/a348f8aea5801cbe81c25b660fa56a5d6d888daf", "html_url": "https://github.com/rust-lang/rust/commit/a348f8aea5801cbe81c25b660fa56a5d6d888daf"}], "stats": {"total": 2848, "additions": 2833, "deletions": 15}, "files": [{"sha": "e13157a11ae47f17417a037940be105a946885b3", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -45,6 +45,7 @@ dependencies = [\n  \"build_helper\",\n  \"cc\",\n  \"clap\",\n+ \"clap_complete\",\n  \"cmake\",\n  \"fd-lock\",\n  \"filetime\",\n@@ -119,6 +120,15 @@ dependencies = [\n  \"clap_lex\",\n ]\n \n+[[package]]\n+name = \"clap_complete\"\n+version = \"4.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"36774babb166352bb4f7b9cb16f781ffa3439d2a8f12cd31bea85a38c888fea3\"\n+dependencies = [\n+ \"clap\",\n+]\n+\n [[package]]\n name = \"clap_derive\"\n version = \"4.2.0\""}, {"sha": "55675a2315c778dd55167c0e76f69243d9f7c635", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -56,6 +56,7 @@ walkdir = \"2\"\n # Dependencies needed by the build-metrics feature\n sysinfo = { version = \"0.26.0\", optional = true }\n clap = { version = \"4.2.4\", default-features = false, features = [\"std\", \"usage\", \"help\", \"derive\", \"error-context\"] }\n+clap_complete = \"4.2.2\"\n \n # Solaris doesn't support flock() and thus fd-lock is not option now\n [target.'cfg(not(target_os = \"solaris\"))'.dependencies]"}, {"sha": "5c37fab5470707d36b11316f3129941f48befd8d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -839,6 +839,7 @@ impl<'a> Builder<'a> {\n                 run::CollectLicenseMetadata,\n                 run::GenerateCopyright,\n                 run::GenerateWindowsSys,\n+                run::GenerateCompletions,\n             ),\n             Kind::Setup => describe!(setup::Profile, setup::Hook, setup::Link, setup::Vscode),\n             Kind::Clean => describe!(clean::CleanAll, clean::Rustc, clean::Std),"}, {"sha": "6e0c0e01af86333bbc5c94e3d0908911fec584f2", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 35, "deletions": 14, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -3,9 +3,9 @@\n //! This module implements the command-line parsing of the build system which\n //! has various flags to configure how it's run.\n \n-use std::path::PathBuf;\n+use std::path::{Path, PathBuf};\n \n-use clap::{Parser, ValueEnum};\n+use clap::{CommandFactory, Parser, ValueEnum};\n \n use crate::builder::{Builder, Kind};\n use crate::config::{target_selection_list, Config, TargetSelectionList};\n@@ -54,15 +54,15 @@ pub struct Flags {\n     /// Build directory, overrides `build.build-dir` in `config.toml`\n     pub build_dir: Option<PathBuf>,\n \n-    #[arg(global(true), long, value_name = \"BUILD\")]\n+    #[arg(global(true), long, value_hint = clap::ValueHint::Other, value_name = \"BUILD\")]\n     /// build target of the stage0 compiler\n     pub build: Option<String>,\n \n-    #[arg(global(true), long, value_name = \"HOST\", value_parser = target_selection_list)]\n+    #[arg(global(true), long, value_hint = clap::ValueHint::Other, value_name = \"HOST\", value_parser = target_selection_list)]\n     /// host targets to build\n     pub host: Option<TargetSelectionList>,\n \n-    #[arg(global(true), long, value_name = \"TARGET\", value_parser = target_selection_list)]\n+    #[arg(global(true), long, value_hint = clap::ValueHint::Other, value_name = \"TARGET\", value_parser = target_selection_list)]\n     /// target targets to build\n     pub target: Option<TargetSelectionList>,\n \n@@ -73,7 +73,7 @@ pub struct Flags {\n     /// include default paths in addition to the provided ones\n     pub include_default_paths: bool,\n \n-    #[arg(global(true), long)]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long)]\n     pub rustc_error_format: Option<String>,\n \n     #[arg(global(true), long, value_hint = clap::ValueHint::CommandString, value_name = \"CMD\")]\n@@ -82,16 +82,16 @@ pub struct Flags {\n     #[arg(global(true), long)]\n     /// dry run; don't build anything\n     pub dry_run: bool,\n-    #[arg(global(true), long, value_name = \"N\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long, value_name = \"N\")]\n     /// stage to build (indicates compiler to use/test, e.g., stage 0 uses the\n     /// bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)\n     pub stage: Option<u32>,\n \n-    #[arg(global(true), long, value_name = \"N\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long, value_name = \"N\")]\n     /// stage(s) to keep without recompiling\n     /// (pass multiple times to keep e.g., both stages 0 and 1)\n     pub keep_stage: Vec<u32>,\n-    #[arg(global(true), long, value_name = \"N\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long, value_name = \"N\")]\n     /// stage(s) of the standard library to keep without recompiling\n     /// (pass multiple times to keep e.g., both stages 0 and 1)\n     pub keep_stage_std: Vec<u32>,\n@@ -103,6 +103,7 @@ pub struct Flags {\n         global(true),\n         short,\n         long,\n+        value_hint = clap::ValueHint::Other,\n         default_value_t = std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get),\n         value_name = \"JOBS\"\n     )]\n@@ -117,7 +118,7 @@ pub struct Flags {\n     /// otherwise, use the default configured behaviour\n     pub warnings: Warnings,\n \n-    #[arg(global(true), long, value_name = \"FORMAT\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::Other, long, value_name = \"FORMAT\")]\n     /// rustc error format\n     pub error_format: Option<String>,\n     #[arg(global(true), long)]\n@@ -133,13 +134,13 @@ pub struct Flags {\n     #[arg(global(true), long, value_name = \"VALUE\")]\n     pub llvm_skip_rebuild: Option<bool>,\n     /// generate PGO profile with rustc build\n-    #[arg(global(true), long, value_name = \"PROFILE\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::FilePath, long, value_name = \"PROFILE\")]\n     pub rust_profile_generate: Option<String>,\n     /// use PGO profile for rustc build\n-    #[arg(global(true), long, value_name = \"PROFILE\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::FilePath, long, value_name = \"PROFILE\")]\n     pub rust_profile_use: Option<String>,\n     /// use PGO profile for LLVM build\n-    #[arg(global(true), long, value_name = \"PROFILE\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::FilePath, long, value_name = \"PROFILE\")]\n     pub llvm_profile_use: Option<String>,\n     // LLVM doesn't support a custom location for generating profile\n     // information.\n@@ -152,7 +153,7 @@ pub struct Flags {\n     #[arg(global(true), long)]\n     pub llvm_bolt_profile_generate: bool,\n     /// use BOLT profile for LLVM build\n-    #[arg(global(true), long, value_name = \"PROFILE\")]\n+    #[arg(global(true), value_hint = clap::ValueHint::FilePath, long, value_name = \"PROFILE\")]\n     pub llvm_bolt_profile_use: Option<String>,\n     #[arg(global(true))]\n     /// paths for the subcommand\n@@ -524,3 +525,23 @@ impl Subcommand {\n         }\n     }\n }\n+\n+/// Returns the shell completion for a given shell, if the result differs from the current\n+/// content of `path`. If `path` does not exist, always returns `Some`.\n+pub fn get_completion<G: clap_complete::Generator>(shell: G, path: &Path) -> Option<String> {\n+    let mut cmd = Flags::command();\n+    let current = if !path.exists() {\n+        String::new()\n+    } else {\n+        std::fs::read_to_string(path).unwrap_or_else(|_| {\n+            eprintln!(\"couldn't read {}\", path.display());\n+            crate::detail_exit(1)\n+        })\n+    };\n+    let mut buf = Vec::new();\n+    clap_complete::generate(shell, &mut cmd, \"x.py\", &mut buf);\n+    if buf == current.as_bytes() {\n+        return None;\n+    }\n+    Some(String::from_utf8(buf).expect(\"completion script should be UTF-8\"))\n+}"}, {"sha": "ec01f744b8250a608326fc7a10a8ed98db3d79ca", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -1,9 +1,12 @@\n use std::path::PathBuf;\n use std::process::Command;\n \n+use clap_complete::shells;\n+\n use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::config::TargetSelection;\n use crate::dist::distdir;\n+use crate::flags::get_completion;\n use crate::test;\n use crate::tool::{self, SourceType, Tool};\n use crate::util::output;\n@@ -275,3 +278,34 @@ impl Step for GenerateWindowsSys {\n         builder.run(&mut cmd);\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct GenerateCompletions;\n+\n+impl Step for GenerateCompletions {\n+    type Output = ();\n+\n+    /// Uses `clap_complete` to generate shell completions.\n+    fn run(self, builder: &Builder<'_>) {\n+        // FIXME(clubby789): enable zsh when clap#4898 is fixed\n+        let [bash, fish, powershell] = [\"x.py.sh\", \"x.py.fish\", \"x.py.ps1\"]\n+            .map(|filename| builder.src.join(\"src/etc/completions\").join(filename));\n+        if let Some(comp) = get_completion(shells::Bash, &bash) {\n+            std::fs::write(&bash, comp).expect(\"writing bash completion\");\n+        }\n+        if let Some(comp) = get_completion(shells::Fish, &fish) {\n+            std::fs::write(&fish, comp).expect(\"writing fish completion\");\n+        }\n+        if let Some(comp) = get_completion(shells::PowerShell, &powershell) {\n+            std::fs::write(&powershell, comp).expect(\"writing powershell completion\");\n+        }\n+    }\n+\n+    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        run.alias(\"generate-completions\")\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        run.builder.ensure(GenerateCompletions);\n+    }\n+}"}, {"sha": "2d600704e025e16fd5ebe3b79582cc13639ae12f", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -10,6 +10,8 @@ use std::iter;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n+use clap_complete::shells;\n+\n use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::Interned;\n@@ -1138,7 +1140,24 @@ help: to skip test's attempt to check tidiness, pass `--exclude src/tools/tidy`\n         builder.info(\"tidy check\");\n         try_run(builder, &mut cmd);\n \n-        builder.ensure(ExpandYamlAnchors {});\n+        builder.ensure(ExpandYamlAnchors);\n+\n+        builder.info(\"x.py completions check\");\n+        let [bash, fish, powershell] = [\"x.py.sh\", \"x.py.fish\", \"x.py.ps1\"]\n+            .map(|filename| builder.src.join(\"src/etc/completions\").join(filename));\n+        if builder.config.cmd.bless() {\n+            builder.ensure(crate::run::GenerateCompletions);\n+        } else {\n+            if crate::flags::get_completion(shells::Bash, &bash).is_some()\n+                || crate::flags::get_completion(shells::Fish, &fish).is_some()\n+                || crate::flags::get_completion(shells::PowerShell, &powershell).is_some()\n+            {\n+                eprintln!(\n+                    \"x.py completions were changed; run `x.py run generate-completions` to update them\"\n+                );\n+                crate::detail_exit(1);\n+            }\n+        }\n     }\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {"}, {"sha": "089c03a0d64bab2766677ff0be5e5877ad3a4797", "filename": "src/etc/completions/x.py.fish", "status": "added", "additions": 475, "deletions": 0, "changes": 475, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fetc%2Fcompletions%2Fx.py.fish", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fetc%2Fcompletions%2Fx.py.fish", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.fish?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -0,0 +1,475 @@\n+complete -c x.py -n \"__fish_use_subcommand\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_use_subcommand\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_use_subcommand\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_use_subcommand\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_use_subcommand\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_use_subcommand\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_use_subcommand\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_use_subcommand\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_use_subcommand\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_use_subcommand\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_use_subcommand\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"build\" -d 'Compile either the compiler or libraries'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"check\" -d 'Compile either the compiler or libraries, using cargo check'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"clippy\" -d 'Run Clippy (uses rustup/cargo-installed clippy binary)'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"fix\" -d 'Run cargo fix'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"fmt\" -d 'Run rustfmt'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"doc\" -d 'Build documentation'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"test\" -d 'Build and run some test suites'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"bench\" -d 'Build and run some benchmarks'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"clean\" -d 'Clean out build directories'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"dist\" -d 'Duild distribution artifacts'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"install\" -d 'Install distribution artifacts'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"run\" -d 'Run tools contained in this repository'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"setup\" -d 'Set up the environment for development'\n+complete -c x.py -n \"__fish_use_subcommand\" -f -a \"suggest\" -d 'Suggest a subset of tests to run, based on modified files'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from build\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l all-targets -d 'Check all targets'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from check\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s A -d 'clippy lints to allow' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s D -d 'clippy lints to deny' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s W -d 'clippy lints to warn on' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s F -d 'clippy lints to forbid' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l fix\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from clippy\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from fix\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l check -d 'check formatting instead of applying'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from fmt\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l open -d 'open the docs in a browser'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l json -d 'render the documentation in JSON format in addition to the usual HTML format'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from doc\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l skip -d 'skips tests matching SUBSTRING, if supported by test tool. May be passed multiple times' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l test-args -d 'extra arguments to be passed for the test tool being used (e.g. libtest, compiletest or rustdoc)' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rustc-args -d 'extra options to pass the compiler when running tests' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l compare-mode -d 'mode describing what file the actual ui output will be compared to' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l pass -d 'force {check,build,run}-pass tests to this mode' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l run -d 'whether to execute run-* tests' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l no-fail-fast -d 'run all tests regardless of failure'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l no-doc -d 'do not run doc tests'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l doc -d 'only run doc tests'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l bless -d 'whether to automatically update stderr/stdout files'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l force-rerun -d 'rerun tests even if the inputs are unchanged'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l only-modified -d 'only run tests that result has been changed'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l rustfix-coverage -d 'enable this to generate a Rustfix coverage file, which is saved in `/<build_base>/rustfix_missing_coverage.txt`'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from test\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l test-args -r\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from bench\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l all\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from clean\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from dist\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from install\" -s h -l help -d 'Print help'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l args -d 'arguments for the tool' -r\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from run\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from setup\" -s h -l help -d 'Print help (see more with \\'--help\\')'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l config -d 'TOML configuration file for build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l build-dir -d 'Build directory, overrides `build.build-dir` in `config.toml`' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l build -d 'build target of the stage0 compiler' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l host -d 'host targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l target -d 'target targets to build' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l exclude -d 'build paths to exclude' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l rustc-error-format -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l on-fail -d 'command to run on failure' -r -f -a \"(__fish_complete_command)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l stage -d 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l keep-stage -d 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l keep-stage-std -d 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l src -d 'path to the root of the rust checkout' -r -f -a \"(__fish_complete_directories)\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s j -l jobs -d 'number of jobs to run in parallel' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l warnings -d 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour' -r -f -a \"{deny\t,warn\t,default\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l error-format -d 'rustc error format' -r -f\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l color -d 'whether to use color in cargo and rustc output' -r -f -a \"{always\t,never\t,auto\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-skip-rebuild -d 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml' -r -f -a \"{true\t,false\t}\"\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l rust-profile-generate -d 'generate PGO profile with rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l rust-profile-use -d 'use PGO profile for rustc build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-profile-use -d 'use PGO profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-bolt-profile-use -d 'use BOLT profile for LLVM build' -r -F\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l run -d 'run suggested tests'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s v -l verbose -d 'use verbose output (-vv for very verbose)'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s i -l incremental -d 'use incremental compilation'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l include-default-paths -d 'include default paths in addition to the provided ones'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l dry-run -d 'dry run; don\\'t build anything'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l json-output -d 'use message-format=json'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-profile-generate -d 'generate PGO profile with llvm built for rustc'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -l llvm-bolt-profile-generate -d 'generate BOLT profile for LLVM build'\n+complete -c x.py -n \"__fish_seen_subcommand_from suggest\" -s h -l help -d 'Print help (see more with \\'--help\\')'"}, {"sha": "fad2391e61f08beceb2d477c88b458d63a424480", "filename": "src/etc/completions/x.py.ps1", "status": "added", "additions": 607, "deletions": 0, "changes": 607, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fetc%2Fcompletions%2Fx.py.ps1", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fetc%2Fcompletions%2Fx.py.ps1", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.ps1?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -0,0 +1,607 @@\n+\n+using namespace System.Management.Automation\n+using namespace System.Management.Automation.Language\n+\n+Register-ArgumentCompleter -Native -CommandName 'x.py' -ScriptBlock {\n+    param($wordToComplete, $commandAst, $cursorPosition)\n+\n+    $commandElements = $commandAst.CommandElements\n+    $command = @(\n+        'x.py'\n+        for ($i = 1; $i -lt $commandElements.Count; $i++) {\n+            $element = $commandElements[$i]\n+            if ($element -isnot [StringConstantExpressionAst] -or\n+                $element.StringConstantType -ne [StringConstantType]::BareWord -or\n+                $element.Value.StartsWith('-') -or\n+                $element.Value -eq $wordToComplete) {\n+                break\n+        }\n+        $element.Value\n+    }) -join ';'\n+\n+    $completions = @(switch ($command) {\n+        'x.py' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('build', 'build', [CompletionResultType]::ParameterValue, 'Compile either the compiler or libraries')\n+            [CompletionResult]::new('check', 'check', [CompletionResultType]::ParameterValue, 'Compile either the compiler or libraries, using cargo check')\n+            [CompletionResult]::new('clippy', 'clippy', [CompletionResultType]::ParameterValue, 'Run Clippy (uses rustup/cargo-installed clippy binary)')\n+            [CompletionResult]::new('fix', 'fix', [CompletionResultType]::ParameterValue, 'Run cargo fix')\n+            [CompletionResult]::new('fmt', 'fmt', [CompletionResultType]::ParameterValue, 'Run rustfmt')\n+            [CompletionResult]::new('doc', 'doc', [CompletionResultType]::ParameterValue, 'Build documentation')\n+            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Build and run some test suites')\n+            [CompletionResult]::new('bench', 'bench', [CompletionResultType]::ParameterValue, 'Build and run some benchmarks')\n+            [CompletionResult]::new('clean', 'clean', [CompletionResultType]::ParameterValue, 'Clean out build directories')\n+            [CompletionResult]::new('dist', 'dist', [CompletionResultType]::ParameterValue, 'Duild distribution artifacts')\n+            [CompletionResult]::new('install', 'install', [CompletionResultType]::ParameterValue, 'Install distribution artifacts')\n+            [CompletionResult]::new('run', 'run', [CompletionResultType]::ParameterValue, 'Run tools contained in this repository')\n+            [CompletionResult]::new('setup', 'setup', [CompletionResultType]::ParameterValue, 'Set up the environment for development')\n+            [CompletionResult]::new('suggest', 'suggest', [CompletionResultType]::ParameterValue, 'Suggest a subset of tests to run, based on modified files')\n+            break\n+        }\n+        'x.py;build' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;check' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--all-targets', 'all-targets', [CompletionResultType]::ParameterName, 'Check all targets')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;clippy' {\n+            [CompletionResult]::new('-A', 'A', [CompletionResultType]::ParameterName, 'clippy lints to allow')\n+            [CompletionResult]::new('-D', 'D', [CompletionResultType]::ParameterName, 'clippy lints to deny')\n+            [CompletionResult]::new('-W', 'W', [CompletionResultType]::ParameterName, 'clippy lints to warn on')\n+            [CompletionResult]::new('-F', 'F', [CompletionResultType]::ParameterName, 'clippy lints to forbid')\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--fix', 'fix', [CompletionResultType]::ParameterName, 'fix')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;fix' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;fmt' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--check', 'check', [CompletionResultType]::ParameterName, 'check formatting instead of applying')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;doc' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--open', 'open', [CompletionResultType]::ParameterName, 'open the docs in a browser')\n+            [CompletionResult]::new('--json', 'json', [CompletionResultType]::ParameterName, 'render the documentation in JSON format in addition to the usual HTML format')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;test' {\n+            [CompletionResult]::new('--skip', 'skip', [CompletionResultType]::ParameterName, 'skips tests matching SUBSTRING, if supported by test tool. May be passed multiple times')\n+            [CompletionResult]::new('--test-args', 'test-args', [CompletionResultType]::ParameterName, 'extra arguments to be passed for the test tool being used (e.g. libtest, compiletest or rustdoc)')\n+            [CompletionResult]::new('--rustc-args', 'rustc-args', [CompletionResultType]::ParameterName, 'extra options to pass the compiler when running tests')\n+            [CompletionResult]::new('--compare-mode', 'compare-mode', [CompletionResultType]::ParameterName, 'mode describing what file the actual ui output will be compared to')\n+            [CompletionResult]::new('--pass', 'pass', [CompletionResultType]::ParameterName, 'force {check,build,run}-pass tests to this mode')\n+            [CompletionResult]::new('--run', 'run', [CompletionResultType]::ParameterName, 'whether to execute run-* tests')\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--no-fail-fast', 'no-fail-fast', [CompletionResultType]::ParameterName, 'run all tests regardless of failure')\n+            [CompletionResult]::new('--no-doc', 'no-doc', [CompletionResultType]::ParameterName, 'do not run doc tests')\n+            [CompletionResult]::new('--doc', 'doc', [CompletionResultType]::ParameterName, 'only run doc tests')\n+            [CompletionResult]::new('--bless', 'bless', [CompletionResultType]::ParameterName, 'whether to automatically update stderr/stdout files')\n+            [CompletionResult]::new('--force-rerun', 'force-rerun', [CompletionResultType]::ParameterName, 'rerun tests even if the inputs are unchanged')\n+            [CompletionResult]::new('--only-modified', 'only-modified', [CompletionResultType]::ParameterName, 'only run tests that result has been changed')\n+            [CompletionResult]::new('--rustfix-coverage', 'rustfix-coverage', [CompletionResultType]::ParameterName, 'enable this to generate a Rustfix coverage file, which is saved in `/<build_base>/rustfix_missing_coverage.txt`')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;bench' {\n+            [CompletionResult]::new('--test-args', 'test-args', [CompletionResultType]::ParameterName, 'test-args')\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            break\n+        }\n+        'x.py;clean' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--all', 'all', [CompletionResultType]::ParameterName, 'all')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            break\n+        }\n+        'x.py;dist' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            break\n+        }\n+        'x.py;install' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help')\n+            break\n+        }\n+        'x.py;run' {\n+            [CompletionResult]::new('--args', 'args', [CompletionResultType]::ParameterName, 'arguments for the tool')\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;setup' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+        'x.py;suggest' {\n+            [CompletionResult]::new('--config', 'config', [CompletionResultType]::ParameterName, 'TOML configuration file for build')\n+            [CompletionResult]::new('--build-dir', 'build-dir', [CompletionResultType]::ParameterName, 'Build directory, overrides `build.build-dir` in `config.toml`')\n+            [CompletionResult]::new('--build', 'build', [CompletionResultType]::ParameterName, 'build target of the stage0 compiler')\n+            [CompletionResult]::new('--host', 'host', [CompletionResultType]::ParameterName, 'host targets to build')\n+            [CompletionResult]::new('--target', 'target', [CompletionResultType]::ParameterName, 'target targets to build')\n+            [CompletionResult]::new('--exclude', 'exclude', [CompletionResultType]::ParameterName, 'build paths to exclude')\n+            [CompletionResult]::new('--rustc-error-format', 'rustc-error-format', [CompletionResultType]::ParameterName, 'rustc-error-format')\n+            [CompletionResult]::new('--on-fail', 'on-fail', [CompletionResultType]::ParameterName, 'command to run on failure')\n+            [CompletionResult]::new('--stage', 'stage', [CompletionResultType]::ParameterName, 'stage to build (indicates compiler to use/test, e.g., stage 0 uses the bootstrap compiler, stage 1 the stage 0 rustc artifacts, etc.)')\n+            [CompletionResult]::new('--keep-stage', 'keep-stage', [CompletionResultType]::ParameterName, 'stage(s) to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--keep-stage-std', 'keep-stage-std', [CompletionResultType]::ParameterName, 'stage(s) of the standard library to keep without recompiling (pass multiple times to keep e.g., both stages 0 and 1)')\n+            [CompletionResult]::new('--src', 'src', [CompletionResultType]::ParameterName, 'path to the root of the rust checkout')\n+            [CompletionResult]::new('-j', 'j', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--jobs', 'jobs', [CompletionResultType]::ParameterName, 'number of jobs to run in parallel')\n+            [CompletionResult]::new('--warnings', 'warnings', [CompletionResultType]::ParameterName, 'if value is deny, will deny warnings if value is warn, will emit warnings otherwise, use the default configured behaviour')\n+            [CompletionResult]::new('--error-format', 'error-format', [CompletionResultType]::ParameterName, 'rustc error format')\n+            [CompletionResult]::new('--color', 'color', [CompletionResultType]::ParameterName, 'whether to use color in cargo and rustc output')\n+            [CompletionResult]::new('--llvm-skip-rebuild', 'llvm-skip-rebuild', [CompletionResultType]::ParameterName, 'whether rebuilding llvm should be skipped, overriding `skip-rebuld` in config.toml')\n+            [CompletionResult]::new('--rust-profile-generate', 'rust-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with rustc build')\n+            [CompletionResult]::new('--rust-profile-use', 'rust-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for rustc build')\n+            [CompletionResult]::new('--llvm-profile-use', 'llvm-profile-use', [CompletionResultType]::ParameterName, 'use PGO profile for LLVM build')\n+            [CompletionResult]::new('--llvm-bolt-profile-use', 'llvm-bolt-profile-use', [CompletionResultType]::ParameterName, 'use BOLT profile for LLVM build')\n+            [CompletionResult]::new('--run', 'run', [CompletionResultType]::ParameterName, 'run suggested tests')\n+            [CompletionResult]::new('-v', 'v', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('--verbose', 'verbose', [CompletionResultType]::ParameterName, 'use verbose output (-vv for very verbose)')\n+            [CompletionResult]::new('-i', 'i', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--incremental', 'incremental', [CompletionResultType]::ParameterName, 'use incremental compilation')\n+            [CompletionResult]::new('--include-default-paths', 'include-default-paths', [CompletionResultType]::ParameterName, 'include default paths in addition to the provided ones')\n+            [CompletionResult]::new('--dry-run', 'dry-run', [CompletionResultType]::ParameterName, 'dry run; don''t build anything')\n+            [CompletionResult]::new('--json-output', 'json-output', [CompletionResultType]::ParameterName, 'use message-format=json')\n+            [CompletionResult]::new('--llvm-profile-generate', 'llvm-profile-generate', [CompletionResultType]::ParameterName, 'generate PGO profile with llvm built for rustc')\n+            [CompletionResult]::new('--llvm-bolt-profile-generate', 'llvm-bolt-profile-generate', [CompletionResultType]::ParameterName, 'generate BOLT profile for LLVM build')\n+            [CompletionResult]::new('-h', 'h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            [CompletionResult]::new('--help', 'help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')\n+            break\n+        }\n+    })\n+\n+    $completions.Where{ $_.CompletionText -like \"$wordToComplete*\" } |\n+        Sort-Object -Property ListItemText\n+}"}, {"sha": "931cc4353b2d2324173a4ed5351e343184409e2f", "filename": "src/etc/completions/x.py.sh", "status": "added", "additions": 1644, "deletions": 0, "changes": 1644, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fetc%2Fcompletions%2Fx.py.sh", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Fetc%2Fcompletions%2Fx.py.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcompletions%2Fx.py.sh?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -0,0 +1,1644 @@\n+_x.py() {\n+    local i cur prev opts cmd\n+    COMPREPLY=()\n+    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n+    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n+    cmd=\"\"\n+    opts=\"\"\n+\n+    for i in ${COMP_WORDS[@]}\n+    do\n+        case \"${cmd},${i}\" in\n+            \",$1\")\n+                cmd=\"x.py\"\n+                ;;\n+            bootstrap,bench)\n+                cmd=\"bootstrap__bench\"\n+                ;;\n+            bootstrap,build)\n+                cmd=\"bootstrap__build\"\n+                ;;\n+            bootstrap,check)\n+                cmd=\"bootstrap__check\"\n+                ;;\n+            bootstrap,clean)\n+                cmd=\"bootstrap__clean\"\n+                ;;\n+            bootstrap,clippy)\n+                cmd=\"bootstrap__clippy\"\n+                ;;\n+            bootstrap,dist)\n+                cmd=\"bootstrap__dist\"\n+                ;;\n+            bootstrap,doc)\n+                cmd=\"bootstrap__doc\"\n+                ;;\n+            bootstrap,fix)\n+                cmd=\"bootstrap__fix\"\n+                ;;\n+            bootstrap,fmt)\n+                cmd=\"bootstrap__fmt\"\n+                ;;\n+            bootstrap,install)\n+                cmd=\"bootstrap__install\"\n+                ;;\n+            bootstrap,run)\n+                cmd=\"bootstrap__run\"\n+                ;;\n+            bootstrap,setup)\n+                cmd=\"bootstrap__setup\"\n+                ;;\n+            bootstrap,suggest)\n+                cmd=\"bootstrap__suggest\"\n+                ;;\n+            bootstrap,test)\n+                cmd=\"bootstrap__test\"\n+                ;;\n+            *)\n+                ;;\n+        esac\n+    done\n+\n+    case \"${cmd}\" in\n+        x.py)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]... build check clippy fix fmt doc test bench clean dist install run setup suggest\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__bench)\n+            opts=\"-v -i -j -h --test-args --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --test-args)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__build)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__check)\n+            opts=\"-v -i -j -h --all-targets --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__clean)\n+            opts=\"-v -i -j -h --all --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__clippy)\n+            opts=\"-A -D -W -F -v -i -j -h --fix --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                -A)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                -D)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                -W)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                -F)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__dist)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__doc)\n+            opts=\"-v -i -j -h --open --json --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__fix)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__fmt)\n+            opts=\"-v -i -j -h --check --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__install)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__run)\n+            opts=\"-v -i -j -h --args --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --args)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__setup)\n+            opts=\"-v -i -j -h --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [<PROFILE>|hook|vscode|link] [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__suggest)\n+            opts=\"-v -i -j -h --run --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+        x.py__test)\n+            opts=\"-v -i -j -h --no-fail-fast --skip --test-args --rustc-args --no-doc --doc --bless --force-rerun --only-modified --compare-mode --pass --run --rustfix-coverage --verbose --incremental --config --build-dir --build --host --target --exclude --include-default-paths --rustc-error-format --on-fail --dry-run --stage --keep-stage --keep-stage-std --src --jobs --warnings --error-format --json-output --color --llvm-skip-rebuild --rust-profile-generate --rust-profile-use --llvm-profile-use --llvm-profile-generate --llvm-bolt-profile-generate --llvm-bolt-profile-use --help [PATHS]... [ARGS]...\"\n+            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then\n+                COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+                return 0\n+            fi\n+            case \"${prev}\" in\n+                --skip)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --test-args)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-args)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --compare-mode)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --pass)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --run)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --config)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build-dir)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --build)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --host)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --target)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --exclude)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rustc-error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --on-fail)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --keep-stage-std)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --src)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --jobs)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                -j)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --warnings)\n+                    COMPREPLY=($(compgen -W \"deny warn default\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --error-format)\n+                    COMPREPLY=(\"${cur}\")\n+                    return 0\n+                    ;;\n+                --color)\n+                    COMPREPLY=($(compgen -W \"always never auto\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-skip-rebuild)\n+                    COMPREPLY=($(compgen -W \"true false\" -- \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-generate)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --rust-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                --llvm-bolt-profile-use)\n+                    COMPREPLY=($(compgen -f \"${cur}\"))\n+                    return 0\n+                    ;;\n+                *)\n+                    COMPREPLY=()\n+                    ;;\n+            esac\n+            COMPREPLY=( $(compgen -W \"${opts}\" -- \"${cur}\") )\n+            return 0\n+            ;;\n+    esac\n+}\n+\n+complete -F _x.py -o bashdefault -o default x.py"}, {"sha": "d0257d716973e21ab9c71a62cfa2e1408edc7f49", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e18605af29ccf875cdcb539a522f11f5ac44113/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=2e18605af29ccf875cdcb539a522f11f5ac44113", "patch": "@@ -296,6 +296,12 @@ pub fn check(path: &Path, bad: &mut bool) {\n         if filename.contains(\"ignore-tidy\") {\n             return;\n         }\n+        // Shell completions are automatically generated\n+        if let Some(p) = file.parent() {\n+            if p.ends_with(Path::new(\"src/etc/completions\")) {\n+                return;\n+            }\n+        }\n         // apfloat shouldn't be changed because of license problems\n         if is_in(file, \"compiler\", \"rustc_apfloat\") {\n             return;"}]}