{"sha": "652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1MmYxM2Q4MzhkN2IwMTdlMmQwY2U0YmJkYjNjNGQ3YTFhODY2ZDk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T03:37:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-30T03:37:34Z"}, "message": "Rollup merge of #63083 - matthewjasper:parameter-hygiene, r=petrochenkov\n\nMake generic parameters always use modern hygiene\n\n* E0263 (lifetime parameter declared twice in the same scope) now compares modernized identifiers.\n* Const parameters are now resolved with modern hygiene.\n\nCloses #58307\nCloses #60746\nCloses #61574\nCloses #62433", "tree": {"sha": "df311895c970ef1339ab6d6da7fe3ea4d406d18e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df311895c970ef1339ab6d6da7fe3ea4d406d18e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdP7t+CRBK7hj4Ov3rIwAAdHIIAHZaSI9pmuDGWVSSSZWHGpte\n6EaOMb6QxkUQUI5sY8Y/BVZsfJoynyBWN5wSVkVCRY2VFV41UvvcfkqTJ0Lub6N9\nBt4cNDe35ueud3k26djL+6TCZOr/jJqp9r9vR4M4Ug7oiVqiD5/v1HIvLNzj3eJF\nmVP4qytZsEDzXTYuisGDD6gcObPpZUWtS2QywU84STZu22anRq1hw6Utmegrp9cv\nBsbQBOJN96qitDSff6O1QBZPrrpX01+/jCFt3ESSBNz8pkkadkRw+JTWTyC+Xp0I\nmWp9GAPQwKzkw5sATZj0rcf0v+CLvt/GbvQB5aL6sibjO0S8XLabpetggICWMFQ=\n=XO9I\n-----END PGP SIGNATURE-----\n", "payload": "tree df311895c970ef1339ab6d6da7fe3ea4d406d18e\nparent 51e50ed82770e8e48960797d822841e333005202\nparent 0fb9295e1231d0878ec3cd06811e3e0dc8c7ce4f\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564457854 +0200\ncommitter GitHub <noreply@github.com> 1564457854 +0200\n\nRollup merge of #63083 - matthewjasper:parameter-hygiene, r=petrochenkov\n\nMake generic parameters always use modern hygiene\n\n* E0263 (lifetime parameter declared twice in the same scope) now compares modernized identifiers.\n* Const parameters are now resolved with modern hygiene.\n\nCloses #58307\nCloses #60746\nCloses #61574\nCloses #62433\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "html_url": "https://github.com/rust-lang/rust/commit/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e50ed82770e8e48960797d822841e333005202", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e50ed82770e8e48960797d822841e333005202", "html_url": "https://github.com/rust-lang/rust/commit/51e50ed82770e8e48960797d822841e333005202"}, {"sha": "0fb9295e1231d0878ec3cd06811e3e0dc8c7ce4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb9295e1231d0878ec3cd06811e3e0dc8c7ce4f", "html_url": "https://github.com/rust-lang/rust/commit/0fb9295e1231d0878ec3cd06811e3e0dc8c7ce4f"}], "stats": {"total": 236, "additions": 213, "deletions": 23}, "files": [{"sha": "f6c62d191fa629ea6c82cb191c85588ca5606730", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "patch": "@@ -2568,7 +2568,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let lifetimes: Vec<_> = params\n             .iter()\n             .filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. } => Some((param, param.name)),\n+                GenericParamKind::Lifetime { .. } => Some((param, param.name.modern())),\n                 _ => None,\n             })\n             .collect();"}, {"sha": "c8dd8282fd0f9055dcd95a6c4ed1a6fdbd4dbbd5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "patch": "@@ -869,8 +869,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         debug!(\"(resolving function) entering function\");\n         let rib_kind = match function_kind {\n             FnKind::ItemFn(..) => FnItemRibKind,\n-            FnKind::Method(..) => AssocItemRibKind,\n-            FnKind::Closure(_) => NormalRibKind,\n+            FnKind::Method(..) | FnKind::Closure(_) => NormalRibKind,\n         };\n \n         // Create a value rib for the function.\n@@ -2307,21 +2306,32 @@ impl<'a> Resolver<'a> {\n         if ident.name == kw::Invalid {\n             return Some(LexicalScopeBinding::Res(Res::Err));\n         }\n-        ident.span = if ident.name == kw::SelfUpper {\n+        let (general_span, modern_span) = if ident.name == kw::SelfUpper {\n             // FIXME(jseyfried) improve `Self` hygiene\n-            ident.span.with_ctxt(SyntaxContext::empty())\n+            let empty_span = ident.span.with_ctxt(SyntaxContext::empty());\n+            (empty_span, empty_span)\n         } else if ns == TypeNS {\n-            ident.span.modern()\n+            let modern_span = ident.span.modern();\n+            (modern_span, modern_span)\n         } else {\n-            ident.span.modern_and_legacy()\n+            (ident.span.modern_and_legacy(), ident.span.modern())\n         };\n+        ident.span = general_span;\n+        let modern_ident = Ident { span: modern_span, ..ident };\n \n         // Walk backwards up the ribs in scope.\n         let record_used = record_used_id.is_some();\n         let mut module = self.graph_root;\n         for i in (0 .. self.ribs[ns].len()).rev() {\n             debug!(\"walk rib\\n{:?}\", self.ribs[ns][i].bindings);\n-            if let Some(res) = self.ribs[ns][i].bindings.get(&ident).cloned() {\n+            // Use the rib kind to determine whether we are resolving parameters\n+            // (modern hygiene) or local variables (legacy hygiene).\n+            let rib_ident = if let AssocItemRibKind | ItemRibKind = self.ribs[ns][i].kind {\n+                modern_ident\n+            } else {\n+                ident\n+            };\n+            if let Some(res) = self.ribs[ns][i].bindings.get(&rib_ident).cloned() {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Res(\n                     self.validate_res_from_ribs(ns, i, res, record_used, path_span),\n@@ -2357,7 +2367,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        ident.span = ident.span.modern();\n+        ident = modern_ident;\n         let mut poisoned = None;\n         loop {\n             let opt_module = if let Some(node_id) = record_used_id {"}, {"sha": "e7312b51dbcb8be2d664c84a25599cd6c5e0e284", "filename": "src/test/ui/hygiene/duplicate_lifetimes.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.rs?ref=652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "patch": "@@ -0,0 +1,19 @@\n+// Ensure that lifetime parameter names are modernized before we check for\n+// duplicates.\n+\n+#![feature(decl_macro, rustc_attrs)]\n+\n+#[rustc_macro_transparency = \"semitransparent\"]\n+macro m($a:lifetime) {\n+    fn g<$a, 'a>() {} //~ ERROR lifetime name `'a` declared twice\n+}\n+\n+#[rustc_macro_transparency = \"transparent\"]\n+macro n($a:lifetime) {\n+    fn h<$a, 'a>() {} //~ ERROR lifetime name `'a` declared twice\n+}\n+\n+m!('a);\n+n!('a);\n+\n+fn main() {}"}, {"sha": "7aaea6ff24e390284f4bdbbc2ea1057db41b73aa", "filename": "src/test/ui/hygiene/duplicate_lifetimes.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fduplicate_lifetimes.stderr?ref=652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "patch": "@@ -0,0 +1,27 @@\n+error[E0263]: lifetime name `'a` declared twice in the same scope\n+  --> $DIR/duplicate_lifetimes.rs:8:14\n+   |\n+LL |     fn g<$a, 'a>() {}\n+   |              ^^ declared twice\n+...\n+LL | m!('a);\n+   | -------\n+   | |  |\n+   | |  previous declaration here\n+   | in this macro invocation\n+\n+error[E0263]: lifetime name `'a` declared twice in the same scope\n+  --> $DIR/duplicate_lifetimes.rs:13:14\n+   |\n+LL |     fn h<$a, 'a>() {}\n+   |              ^^ declared twice\n+...\n+LL | n!('a);\n+   | -------\n+   | |  |\n+   | |  previous declaration here\n+   | in this macro invocation\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0263`."}, {"sha": "9dc5adfce478af719383a10fcef9557a308c4a4c", "filename": "src/test/ui/hygiene/generic_params.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.rs?ref=652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "patch": "@@ -0,0 +1,104 @@\n+// Ensure that generic parameters always have modern hygiene.\n+\n+// check-pass\n+// ignore-pretty pretty-printing is unhygienic\n+\n+#![feature(decl_macro, rustc_attrs, const_generics)]\n+\n+mod type_params {\n+    macro m($T:ident) {\n+        fn f<$T: Clone, T: PartialEq>(t1: $T, t2: T) -> ($T, bool) {\n+            (t1.clone(), t2 == t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    macro n($T:ident) {\n+        fn g<$T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+        fn h<T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"transparent\"]\n+    macro p($T:ident) {\n+        fn j<$T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+        fn k<T: Clone>(t1: $T, t2: T) -> (T, $T) {\n+            (t1.clone(), t2.clone())\n+        }\n+    }\n+\n+    m!(T);\n+    n!(T);\n+    p!(T);\n+}\n+\n+mod lifetime_params {\n+    macro m($a:lifetime) {\n+        fn f<'b, 'c, $a: 'b, 'a: 'c>(t1: &$a(), t2: &'a ()) -> (&'b (), &'c ()) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    macro n($a:lifetime) {\n+        fn g<$a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+        fn h<'a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"transparent\"]\n+    macro p($a:lifetime) {\n+        fn j<$a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+        fn k<'a>(t1: &$a(), t2: &'a ()) -> (&'a (), &$a ()) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    m!('a);\n+    n!('a);\n+    p!('a);\n+}\n+\n+mod const_params {\n+    macro m($C:ident) {\n+        fn f<const $C: usize, const C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); $C], [(); C]) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"semitransparent\"]\n+    macro n($C:ident) {\n+        fn g<const $C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+        fn h<const C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    #[rustc_macro_transparency = \"transparent\"]\n+    macro p($C:ident) {\n+        fn j<const $C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+        fn k<const C: usize>(t1: [(); $C], t2: [(); C]) -> ([(); C], [(); $C]) {\n+            (t1, t2)\n+        }\n+    }\n+\n+    m!(C);\n+    n!(C);\n+    p!(C);\n+}\n+\n+fn main() {}"}, {"sha": "ecd228a5db5c80abed211d881d20d219e3026e18", "filename": "src/test/ui/hygiene/generic_params.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fgeneric_params.stderr?ref=652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/generic_params.rs:6:37\n+   |\n+LL | #![feature(decl_macro, rustc_attrs, const_generics)]\n+   |                                     ^^^^^^^^^^^^^^\n+"}, {"sha": "dcfb42287d5cba417446cee0a1f7611e722612b0", "filename": "src/test/ui/hygiene/issue-61574-const-parameters.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.rs?ref=652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "patch": "@@ -0,0 +1,32 @@\n+// A more comprehensive test that const parameters have correctly implemented\n+// hygiene\n+\n+// check-pass\n+\n+#![feature(const_generics)]\n+\n+use std::ops::Add;\n+\n+struct VectorLike<T, const SIZE: usize>([T; {SIZE}]);\n+\n+macro_rules! impl_operator_overload {\n+    ($trait_ident:ident, $method_ident:ident) => {\n+\n+        impl<T, const SIZE: usize> $trait_ident for VectorLike<T, {SIZE}>\n+        where\n+            T: $trait_ident,\n+        {\n+            type Output = VectorLike<T, {SIZE}>;\n+\n+            fn $method_ident(self, _: VectorLike<T, {SIZE}>) -> VectorLike<T, {SIZE}> {\n+                let _ = SIZE;\n+                unimplemented!()\n+            }\n+        }\n+\n+    }\n+}\n+\n+impl_operator_overload!(Add, add);\n+\n+fn main() {}"}, {"sha": "302b5fde8879c69180c11e9403714de7725dcce2", "filename": "src/test/ui/hygiene/issue-61574-const-parameters.stderr", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fissue-61574-const-parameters.stderr?ref=652f13d838d7b017e2d0ce4bbdb3c4d7a1a866d9", "patch": "@@ -0,0 +1,6 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61574-const-parameters.rs:6:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+"}, {"sha": "b296bfe59888721d8c0a1404d414e30f5c55c828", "filename": "src/test/ui/hygiene/ty_params.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51e50ed82770e8e48960797d822841e333005202/src%2Ftest%2Fui%2Fhygiene%2Fty_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51e50ed82770e8e48960797d822841e333005202/src%2Ftest%2Fui%2Fhygiene%2Fty_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fty_params.rs?ref=51e50ed82770e8e48960797d822841e333005202", "patch": "@@ -1,14 +0,0 @@\n-// check-pass\n-// ignore-pretty pretty-printing is unhygienic\n-\n-#![feature(decl_macro)]\n-\n-macro m($T:ident) {\n-    fn f<T, $T>(t: T, t2: $T) -> (T, $T) {\n-        (t, t2)\n-    }\n-}\n-\n-m!(T);\n-\n-fn main() {}"}]}