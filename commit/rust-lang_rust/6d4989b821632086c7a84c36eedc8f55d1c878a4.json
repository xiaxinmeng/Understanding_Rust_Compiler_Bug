{"sha": "6d4989b821632086c7a84c36eedc8f55d1c878a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDk4OWI4MjE2MzIwODZjN2E4NGMzNmVlZGM4ZjU1ZDFjODc4YTQ=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2017-09-24T10:56:57Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2017-09-27T05:20:53Z"}, "message": "Add span label to E0384 for MIR borrowck", "tree": {"sha": "fdc300d7fecdf4402294597de96a33c254232226", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdc300d7fecdf4402294597de96a33c254232226"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4989b821632086c7a84c36eedc8f55d1c878a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4989b821632086c7a84c36eedc8f55d1c878a4", "html_url": "https://github.com/rust-lang/rust/commit/6d4989b821632086c7a84c36eedc8f55d1c878a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4989b821632086c7a84c36eedc8f55d1c878a4/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71b37bc28326e272a37b938e835d4f99113eec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71b37bc28326e272a37b938e835d4f99113eec2", "html_url": "https://github.com/rust-lang/rust/commit/f71b37bc28326e272a37b938e835d4f99113eec2"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "9201e0e2553ef3cdd7e00826d4b51d0099444a3e", "filename": "src/librustc_mir/borrow_check.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d4989b821632086c7a84c36eedc8f55d1c878a4/src%2Flibrustc_mir%2Fborrow_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4989b821632086c7a84c36eedc8f55d1c878a4/src%2Flibrustc_mir%2Fborrow_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check.rs?ref=6d4989b821632086c7a84c36eedc8f55d1c878a4", "patch": "@@ -580,7 +580,19 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n             if flow_state.inits.curr_state.contains(&mpi) {\n                 // may already be assigned before reaching this statement;\n                 // report error.\n-                self.report_illegal_reassignment(context, (lvalue, span));\n+                // FIXME: Not ideal, it only finds the assignment that lexically comes first\n+                let assigned_lvalue = &move_data.move_paths[mpi].lvalue;\n+                let assignment_stmt = self.mir.basic_blocks().iter().filter_map(|bb| {\n+                    bb.statements.iter().find(|stmt| {\n+                        if let StatementKind::Assign(ref lv, _) = stmt.kind {\n+                            *lv == *assigned_lvalue\n+                        } else {\n+                            false\n+                        }\n+                    })\n+                }).next().unwrap();\n+                self.report_illegal_reassignment(\n+                    context, (lvalue, span), assignment_stmt.source_info.span);\n             }\n         }\n     }\n@@ -982,11 +994,17 @@ impl<'c, 'b, 'a: 'b+'c, 'gcx, 'tcx: 'a> MirBorrowckCtxt<'c, 'b, 'a, 'gcx, 'tcx>\n         err.emit();\n     }\n \n-    fn report_illegal_reassignment(&mut self, _context: Context, (lvalue, span): (&Lvalue, Span)) {\n-        let mut err = self.tcx.cannot_reassign_immutable(\n-            span, &self.describe_lvalue(lvalue), Origin::Mir);\n-        // FIXME: add span labels for borrow and assignment points\n-        err.emit();\n+    fn report_illegal_reassignment(&mut self,\n+                                   _context: Context,\n+                                   (lvalue, span): (&Lvalue, Span),\n+                                   assigned_span: Span) {\n+        self.tcx.cannot_reassign_immutable(span,\n+                                           &self.describe_lvalue(lvalue),\n+                                           Origin::Mir)\n+                .span_label(span, \"re-assignment of immutable variable\")\n+                .span_label(assigned_span, format!(\"first assignment to `{}`\",\n+                                                   self.describe_lvalue(lvalue)))\n+                .emit();\n     }\n \n     fn report_assignment_to_static(&mut self, _context: Context, (lvalue, span): (&Lvalue, Span)) {"}, {"sha": "3639db5cfc4cd9da88b880ada23fd78ae0408f60", "filename": "src/test/compile-fail/borrowck/borrowck-match-binding-is-assignment.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6d4989b821632086c7a84c36eedc8f55d1c878a4/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4989b821632086c7a84c36eedc8f55d1c878a4/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-match-binding-is-assignment.rs?ref=6d4989b821632086c7a84c36eedc8f55d1c878a4", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// revisions: ast mir\n+//[mir]compile-flags: -Zemit-end-regions -Zborrowck-mir\n+\n // Test that immutable pattern bindings cannot be reassigned.\n \n #![feature(slice_patterns)]\n@@ -23,31 +26,41 @@ struct S {\n pub fn main() {\n     match 1 {\n         x => {\n-            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+                    //[mir]~^ ERROR (Mir) [E0384]\n+                    //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match E::Foo(1) {\n         E::Foo(x) => {\n-            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+                    //[mir]~^ ERROR (Mir) [E0384]\n+                    //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match (S { bar: 1 }) {\n         S { bar: x } => {\n-            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+                    //[mir]~^ ERROR (Mir) [E0384]\n+                    //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match (1,) {\n         (x,) => {\n-            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+                    //[mir]~^ ERROR (Mir) [E0384]\n+                    //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n \n     match [1,2,3] {\n         [x,_,_] => {\n-            x += 1; //~ ERROR re-assignment of immutable variable `x`\n+            x += 1; //[ast]~ ERROR re-assignment of immutable variable `x`\n+                    //[mir]~^ ERROR (Mir) [E0384]\n+                    //[mir]~| ERROR (Ast) [E0384]\n         }\n     }\n }"}]}