{"sha": "f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NWNiODdhMDk1MzBhZDhhYjdiOGRjMGZiMzU1MTljMTdmMjlkNGI=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-17T04:36:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-17T04:36:25Z"}, "message": "Rollup merge of #66477 - ALSchwalm:clarify-transmute-copy, r=Centril\n\nClarify transmute_copy documentation example\n\nCurrently the documentation for `transmute_copy` implies that the function accepts a slice due to the variable name chosen in the example. This is misleading as `foo_slice` is actually an array and `transmute_copy` cannot take an unsized type anyway.\n\nThis PR just clarifies things by renaming the variable used in the example.", "tree": {"sha": "8bb989254c3f983a3212f28875f2536a8ccae745", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bb989254c3f983a3212f28875f2536a8ccae745"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd0M5JCRBK7hj4Ov3rIwAAdHIIAC5w8iBrhXIuuM6eq8C8kFOv\nm3bfpYCiaXcw9B45LjYMTzG72exwTLtJ3LM1MB8mY/p0gmox4FvuoAskLnLI0ddg\nx9Tk2qS0NvpLQkRVBjUNscfo5aB1mmloNcRAeo1vvU4Fasx8qNExySf+8hjS3m8O\nx8CSBRNvtvWKoITX6c+3myBBofpYgbxVoXATr2jzTfEL9qy11HLr2x6G85BEfcYy\naONv9HuvZrJfIbVb511Lha0+UwAUFwR/VJahlFHJ9ePePpw4/X1sxiunEGnTHb87\n9hbwA1mtnhHu26oAPw7apQrU2wUcKuC3qp8Z50vBTa6aoOSoVdNVCp7MbaFidUY=\n=j2HL\n-----END PGP SIGNATURE-----\n", "payload": "tree 8bb989254c3f983a3212f28875f2536a8ccae745\nparent 750dd03a230d773b7395ff45b9fcebe795fe28aa\nparent 3407c49c41915e8850de621bd6ddf70d8b7540f5\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573965385 +0900\ncommitter GitHub <noreply@github.com> 1573965385 +0900\n\nRollup merge of #66477 - ALSchwalm:clarify-transmute-copy, r=Centril\n\nClarify transmute_copy documentation example\n\nCurrently the documentation for `transmute_copy` implies that the function accepts a slice due to the variable name chosen in the example. This is misleading as `foo_slice` is actually an array and `transmute_copy` cannot take an unsized type anyway.\n\nThis PR just clarifies things by renaming the variable used in the example.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b", "html_url": "https://github.com/rust-lang/rust/commit/f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750dd03a230d773b7395ff45b9fcebe795fe28aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/750dd03a230d773b7395ff45b9fcebe795fe28aa", "html_url": "https://github.com/rust-lang/rust/commit/750dd03a230d773b7395ff45b9fcebe795fe28aa"}, {"sha": "3407c49c41915e8850de621bd6ddf70d8b7540f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3407c49c41915e8850de621bd6ddf70d8b7540f5", "html_url": "https://github.com/rust-lang/rust/commit/3407c49c41915e8850de621bd6ddf70d8b7540f5"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "fff010385c302e4cdb29a032cc5a327d5167c228", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=f65cb87a09530ad8ab7b8dc0fb35519c17f29d4b", "patch": "@@ -744,20 +744,20 @@ pub fn drop<T>(_x: T) { }\n ///     bar: u8,\n /// }\n ///\n-/// let foo_slice = [10u8];\n+/// let foo_array = [10u8];\n ///\n /// unsafe {\n-///     // Copy the data from 'foo_slice' and treat it as a 'Foo'\n-///     let mut foo_struct: Foo = mem::transmute_copy(&foo_slice);\n+///     // Copy the data from 'foo_array' and treat it as a 'Foo'\n+///     let mut foo_struct: Foo = mem::transmute_copy(&foo_array);\n ///     assert_eq!(foo_struct.bar, 10);\n ///\n ///     // Modify the copied data\n ///     foo_struct.bar = 20;\n ///     assert_eq!(foo_struct.bar, 20);\n /// }\n ///\n-/// // The contents of 'foo_slice' should not have changed\n-/// assert_eq!(foo_slice, [10]);\n+/// // The contents of 'foo_array' should not have changed\n+/// assert_eq!(foo_array, [10]);\n /// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}