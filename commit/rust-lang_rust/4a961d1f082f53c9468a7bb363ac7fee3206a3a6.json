{"sha": "4a961d1f082f53c9468a7bb363ac7fee3206a3a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhOTYxZDFmMDgyZjUzYzk0NjhhN2JiMzYzYWM3ZmVlMzIwNmEzYTY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-27T19:32:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-27T19:32:13Z"}, "message": "Rollup merge of #50192 - bobtwinkles:libsyntax_extensions, r=jseyfried\n\nAdd some utilities to `libsyntax`\n\nAdds a few functions to `Mark` and `Span` that I found useful in an upcoming refactor of NLL region error reporting. Also includes some new documentation based on my discussion with @jseyfried on IRC.\n\nr? @jseyfried", "tree": {"sha": "9f29b9fb2a9fdb1c7b9f58f26194458641f926c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f29b9fb2a9fdb1c7b9f58f26194458641f926c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a961d1f082f53c9468a7bb363ac7fee3206a3a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa43q+CRBK7hj4Ov3rIwAAdHIIAIU51KCGQnofayfYjwNnKBP7\n7CBaFURwvvTDjMErc3Csm1NTE0gbOETauWYI2PhN4NmFb4yfEyt6VMrfceNeRcmq\nY2INLS87ZQHlVn3GLsC6i9NaJqEWmzxGmvtKRECXToBDlg8lxfC3s+JW0C8IUQrd\n+jqB1kNjKBtdIDLluRJRlRFmB4XQzjkNZQvTKJLe7b1VmIOBw4gzDvR4dSDRV2oD\nG7lnwPb4o5TiwEneFOHhck1qqcp1dvUOZXM0kcvbxOyczFCfuyfve0JfLIFDlgHS\nSIdqNlO7jzTkMrwgrm1I3M0J554NdjWQYCP347NUnPD/v3H0ENRm0V4GgttHo2g=\n=r/Qq\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f29b9fb2a9fdb1c7b9f58f26194458641f926c2\nparent 8b36d9abaa8d8950a74f57ce53e2483902579959\nparent 73e0c1e968caaf7b70d659e58c0a40782c60f8da\nauthor kennytm <kennytm@gmail.com> 1524857533 +0800\ncommitter GitHub <noreply@github.com> 1524857533 +0800\n\nRollup merge of #50192 - bobtwinkles:libsyntax_extensions, r=jseyfried\n\nAdd some utilities to `libsyntax`\n\nAdds a few functions to `Mark` and `Span` that I found useful in an upcoming refactor of NLL region error reporting. Also includes some new documentation based on my discussion with @jseyfried on IRC.\n\nr? @jseyfried\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a961d1f082f53c9468a7bb363ac7fee3206a3a6", "html_url": "https://github.com/rust-lang/rust/commit/4a961d1f082f53c9468a7bb363ac7fee3206a3a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a961d1f082f53c9468a7bb363ac7fee3206a3a6/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b36d9abaa8d8950a74f57ce53e2483902579959", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b36d9abaa8d8950a74f57ce53e2483902579959", "html_url": "https://github.com/rust-lang/rust/commit/8b36d9abaa8d8950a74f57ce53e2483902579959"}, {"sha": "73e0c1e968caaf7b70d659e58c0a40782c60f8da", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e0c1e968caaf7b70d659e58c0a40782c60f8da", "html_url": "https://github.com/rust-lang/rust/commit/73e0c1e968caaf7b70d659e58c0a40782c60f8da"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "f51dbc3772f06ee1c3302304fe69f802b653c2e3", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a961d1f082f53c9468a7bb363ac7fee3206a3a6/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a961d1f082f53c9468a7bb363ac7fee3206a3a6/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=4a961d1f082f53c9468a7bb363ac7fee3206a3a6", "patch": "@@ -270,7 +270,7 @@ impl Span {\n     /// `self` was generated from, if any.\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn parent(&self) -> Option<Span> {\n-        self.0.ctxt().outer().expn_info().map(|i| Span(i.call_site))\n+        self.0.parent().map(Span)\n     }\n \n     /// The span for the origin source code that `self` was generated from. If"}, {"sha": "658408519b9c7ead442eb045feb90ac82e258f1a", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4a961d1f082f53c9468a7bb363ac7fee3206a3a6/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a961d1f082f53c9468a7bb363ac7fee3206a3a6/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=4a961d1f082f53c9468a7bb363ac7fee3206a3a6", "patch": "@@ -21,6 +21,7 @@ use symbol::{Ident, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use std::fmt;\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n@@ -117,6 +118,32 @@ impl Mark {\n             true\n         })\n     }\n+\n+    /// Computes a mark such that both input marks are descendants of (or equal to) the returned\n+    /// mark. That is, the following holds:\n+    ///\n+    /// ```rust\n+    /// let la = least_ancestor(a, b);\n+    /// assert!(a.is_descendant_of(la))\n+    /// assert!(b.is_descendant_of(la))\n+    /// ```\n+    pub fn least_ancestor(mut a: Mark, mut b: Mark) -> Mark {\n+        HygieneData::with(|data| {\n+            // Compute the path from a to the root\n+            let mut a_path = FxHashSet::<Mark>();\n+            while a != Mark::root() {\n+                a_path.insert(a);\n+                a = data.marks[a.0 as usize].parent;\n+            }\n+\n+            // While the path from b to the root hasn't intersected, move up the tree\n+            while !a_path.contains(&b) {\n+                b = data.marks[b.0 as usize].parent;\n+            }\n+\n+            b\n+        })\n+    }\n }\n \n pub struct HygieneData {\n@@ -238,6 +265,22 @@ impl SyntaxContext {\n         })\n     }\n \n+    /// Pulls a single mark off of the syntax context. This effectively moves the\n+    /// context up one macro definition level. That is, if we have a nested macro\n+    /// definition as follows:\n+    ///\n+    /// ```rust\n+    /// macro_rules! f {\n+    ///    macro_rules! g {\n+    ///        ...\n+    ///    }\n+    /// }\n+    /// ```\n+    ///\n+    /// and we have a SyntaxContext that is referring to something declared by an invocation\n+    /// of g (call it g1), calling remove_mark will result in the SyntaxContext for the\n+    /// invocation of f that created g1.\n+    /// Returns the mark that was removed.\n     pub fn remove_mark(&mut self) -> Mark {\n         HygieneData::with(|data| {\n             let outer_mark = data.syntax_contexts[self.0 as usize].outer_mark;"}, {"sha": "8d37b4aa3968f5c84deaa5cd3383eb13ba21e4d2", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4a961d1f082f53c9468a7bb363ac7fee3206a3a6/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a961d1f082f53c9468a7bb363ac7fee3206a3a6/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=4a961d1f082f53c9468a7bb363ac7fee3206a3a6", "patch": "@@ -291,6 +291,12 @@ impl Span {\n         self.ctxt().outer().expn_info().map(|info| info.call_site.source_callsite()).unwrap_or(self)\n     }\n \n+    /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,\n+    /// if any\n+    pub fn parent(self) -> Option<Span> {\n+        self.ctxt().outer().expn_info().map(|i| i.call_site)\n+    }\n+\n     /// Return the source callee.\n     ///\n     /// Returns None if the supplied span has no expansion trace,"}]}