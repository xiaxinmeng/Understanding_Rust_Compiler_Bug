{"sha": "d7a0b0ff913d717fa6e7c5a1db02a30316760a75", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YTBiMGZmOTEzZDcxN2ZhNmU3YzVhMWRiMDJhMzAzMTY3NjBhNzU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-09T08:42:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-09T08:42:24Z"}, "message": "Merge #4381\n\n4381: Simplify r=matklad a=Veetaha\n\n\n\nCo-authored-by: veetaha <veetaha2@gmail.com>", "tree": {"sha": "aa363cb56e41042da6db6712834910c2db771505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa363cb56e41042da6db6712834910c2db771505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a0b0ff913d717fa6e7c5a1db02a30316760a75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJetmzwCRBK7hj4Ov3rIwAAdHIIAFakv4kB9EjSM3jm4bkTdTD2\nUUm3m/JDkNeskzYu+YQbv0ese9VcYCDtDbeaWxkh/Djt7Gf5wvn/gjIhwcs0sODm\ngH6fg3SSvl+h06k6RUbim8rTmKRH8+HxyJ5TEcJ2aMkWxPURM6OPZnRN3D+k8omA\nS/ib+9t/ra9mNmbfwfGNzIaTjedjITo/qGdp0cbP8AIIuOcubGgopKwj/eBtD1rZ\n4/NtTn3BpE7mJKnwm/R1ilG6Cl/uXJK0qL3mQodRzcejPvwJM3b7Z1gubwgvCMzP\nLGjsNkbQvRQF1mTN2XeT7PASRolDUT7NdXmp4t6fS7s9225yczzBKvlNn+/6t+M=\n=ZnDs\n-----END PGP SIGNATURE-----\n", "payload": "tree aa363cb56e41042da6db6712834910c2db771505\nparent 1acb556907027622a07189aefa627502f6500b5a\nparent e83a2912b8deaab560d1ea39232c06a29530d6e5\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589013744 +0000\ncommitter GitHub <noreply@github.com> 1589013744 +0000\n\nMerge #4381\n\n4381: Simplify r=matklad a=Veetaha\n\n\n\nCo-authored-by: veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a0b0ff913d717fa6e7c5a1db02a30316760a75", "html_url": "https://github.com/rust-lang/rust/commit/d7a0b0ff913d717fa6e7c5a1db02a30316760a75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a0b0ff913d717fa6e7c5a1db02a30316760a75/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1acb556907027622a07189aefa627502f6500b5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1acb556907027622a07189aefa627502f6500b5a", "html_url": "https://github.com/rust-lang/rust/commit/1acb556907027622a07189aefa627502f6500b5a"}, {"sha": "e83a2912b8deaab560d1ea39232c06a29530d6e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e83a2912b8deaab560d1ea39232c06a29530d6e5", "html_url": "https://github.com/rust-lang/rust/commit/e83a2912b8deaab560d1ea39232c06a29530d6e5"}], "stats": {"total": 71, "additions": 24, "deletions": 47}, "files": [{"sha": "4f098b706b66db3e52b9e30ddd569517ff5eb853", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 15, "deletions": 36, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d7a0b0ff913d717fa6e7c5a1db02a30316760a75/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a0b0ff913d717fa6e7c5a1db02a30316760a75/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=d7a0b0ff913d717fa6e7c5a1db02a30316760a75", "patch": "@@ -88,46 +88,28 @@ impl ProjectRoot {\n     }\n \n     pub fn discover(path: &Path) -> io::Result<Vec<ProjectRoot>> {\n-        if let Some(project_json) = find_rust_project_json(path) {\n+        if let Some(project_json) = find_in_parent_dirs(path, \"rust-project.json\") {\n             return Ok(vec![ProjectRoot::ProjectJson(project_json)]);\n         }\n         return find_cargo_toml(path)\n             .map(|paths| paths.into_iter().map(ProjectRoot::CargoToml).collect());\n \n-        fn find_rust_project_json(path: &Path) -> Option<PathBuf> {\n-            if path.ends_with(\"rust-project.json\") {\n-                return Some(path.to_path_buf());\n-            }\n-\n-            let mut curr = Some(path);\n-            while let Some(path) = curr {\n-                let candidate = path.join(\"rust-project.json\");\n-                if candidate.exists() {\n-                    return Some(candidate);\n-                }\n-                curr = path.parent();\n-            }\n-\n-            None\n-        }\n-\n         fn find_cargo_toml(path: &Path) -> io::Result<Vec<PathBuf>> {\n-            if path.ends_with(\"Cargo.toml\") {\n-                return Ok(vec![path.to_path_buf()]);\n+            match find_in_parent_dirs(path, \"Cargo.toml\") {\n+                Some(it) => Ok(vec![it]),\n+                None => Ok(find_cargo_toml_in_child_dir(read_dir(path)?)),\n             }\n+        }\n \n-            if let Some(p) = find_cargo_toml_in_parent_dir(path) {\n-                return Ok(vec![p]);\n+        fn find_in_parent_dirs(path: &Path, target_file_name: &str) -> Option<PathBuf> {\n+            if path.ends_with(target_file_name) {\n+                return Some(path.to_owned());\n             }\n \n-            let entities = read_dir(path)?;\n-            Ok(find_cargo_toml_in_child_dir(entities))\n-        }\n-\n-        fn find_cargo_toml_in_parent_dir(path: &Path) -> Option<PathBuf> {\n             let mut curr = Some(path);\n+\n             while let Some(path) = curr {\n-                let candidate = path.join(\"Cargo.toml\");\n+                let candidate = path.join(target_file_name);\n                 if candidate.exists() {\n                     return Some(candidate);\n                 }\n@@ -139,14 +121,11 @@ impl ProjectRoot {\n \n         fn find_cargo_toml_in_child_dir(entities: ReadDir) -> Vec<PathBuf> {\n             // Only one level down to avoid cycles the easy way and stop a runaway scan with large projects\n-            let mut valid_canditates = vec![];\n-            for entity in entities.filter_map(Result::ok) {\n-                let candidate = entity.path().join(\"Cargo.toml\");\n-                if candidate.exists() {\n-                    valid_canditates.push(candidate)\n-                }\n-            }\n-            valid_canditates\n+            entities\n+                .filter_map(Result::ok)\n+                .map(|it| it.path().join(\"Cargo.toml\"))\n+                .filter(|it| it.exists())\n+                .collect()\n         }\n     }\n }"}, {"sha": "17b0b95b9dbc8de7db7486161dd28a67a3c3fbd8", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d7a0b0ff913d717fa6e7c5a1db02a30316760a75/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a0b0ff913d717fa6e7c5a1db02a30316760a75/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=d7a0b0ff913d717fa6e7c5a1db02a30316760a75", "patch": "@@ -96,23 +96,21 @@ pub fn main_loop(ws_roots: Vec<PathBuf>, config: Config, connection: Connection)\n     let mut world_state = {\n         let workspaces = {\n             // FIXME: support dynamic workspace loading.\n-            let mut visited = FxHashSet::default();\n-            let project_roots = ws_roots\n+            let project_roots: FxHashSet<_> = ws_roots\n                 .iter()\n                 .filter_map(|it| ra_project_model::ProjectRoot::discover(it).ok())\n                 .flatten()\n-                .filter(|it| visited.insert(it.clone()))\n-                .collect::<Vec<_>>();\n+                .collect();\n \n             if project_roots.is_empty() && config.notifications.cargo_toml_not_found {\n                 show_message(\n-                        req::MessageType::Error,\n-                        format!(\n-                            \"rust-analyzer failed to discover workspace, no Cargo.toml found, dirs searched: {}\",\n-                            ws_roots.iter().format_with(\", \", |it, f| f(&it.display()))\n-                        ),\n-                        &connection.sender,\n-                    );\n+                    req::MessageType::Error,\n+                    format!(\n+                        \"rust-analyzer failed to discover workspace, no Cargo.toml found, dirs searched: {}\",\n+                        ws_roots.iter().format_with(\", \", |it, f| f(&it.display()))\n+                    ),\n+                    &connection.sender,\n+                );\n             };\n \n             project_roots"}]}