{"sha": "42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODQ0ZWQyY2Y0Y2EwZmYyYTkyNzFlMGFhYThlNTkxMGM1ZjRjY2Q=", "commit": {"author": {"name": "Rustin-Liu", "email": "rustin.liu@gmail.com", "date": "2020-10-25T09:46:45Z"}, "committer": {"name": "Rustin-Liu", "email": "rustin.liu@gmail.com", "date": "2020-10-26T14:39:43Z"}, "message": "Add lexicographical comparison doc\n\nAdd links\n\nFix typo\n\nUse `sequence`\n\nFix typo\n\nFix broken link\n\nFix broken link\n\nFix broken link\n\nFix broken links\n\nFix broken links", "tree": {"sha": "e37b3557e4bc43b1791dcb9bfd1b364fb887454a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e37b3557e4bc43b1791dcb9bfd1b364fb887454a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "html_url": "https://github.com/rust-lang/rust/commit/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/comments", "author": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9a94c919b8cb09c186ff253360df91f223f6ef3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9a94c919b8cb09c186ff253360df91f223f6ef3", "html_url": "https://github.com/rust-lang/rust/commit/b9a94c919b8cb09c186ff253360df91f223f6ef3"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "202e3a836384dfd86b5b34e0a35c0e597c690b47", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "patch": "@@ -2566,7 +2566,7 @@ __impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N], #[stable(feature = \"rust1\"\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], }\n //__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], }\n \n-/// Implements comparison of vectors, lexicographically.\n+/// Implements comparison of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd> PartialOrd for Vec<T> {\n     #[inline]\n@@ -2578,7 +2578,7 @@ impl<T: PartialOrd> PartialOrd for Vec<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Eq> Eq for Vec<T> {}\n \n-/// Implements ordering of vectors, lexicographically.\n+/// Implements ordering of vectors, [lexicographically](core::cmp::Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Ord for Vec<T> {\n     #[inline]"}, {"sha": "1d55a5ef659d4a8cd0c7bfe09fa68b40a125425b", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "patch": "@@ -344,7 +344,7 @@ impl<T: PartialOrd, const N: usize> PartialOrd for [T; N] {\n     }\n }\n \n-/// Implements comparison of arrays lexicographically.\n+/// Implements comparison of arrays [lexicographically](Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord, const N: usize> Ord for [T; N] {\n     #[inline]"}, {"sha": "a048f65a14992ffb9731b6dd98a198a1459670bc", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "patch": "@@ -506,9 +506,19 @@ impl<T: Ord> Ord for Reverse<T> {\n /// ## Derivable\n ///\n /// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n-/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n+/// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the top-to-bottom declaration order of the struct's members.\n /// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n ///\n+/// ## Lexicographical comparison\n+///\n+/// Lexicographical comparison is an operation with the following properties:\n+///  - Two sequences are compared element by element.\n+///  - The first mismatching element defines which sequence is lexicographically less or greater than the other.\n+///  - If one sequence is a prefix of another, the shorter sequence is lexicographically less than the other.\n+///  - If two sequence have equivalent elements and are of the same length, then the sequences are lexicographically equal.\n+///  - An empty sequence is lexicographically less than any non-empty sequence.\n+///  - Two empty sequences are lexicographically equal.\n+///\n /// ## How can I implement `Ord`?\n ///\n /// `Ord` requires that the type also be [`PartialOrd`] and [`Eq`] (which requires [`PartialEq`])."}, {"sha": "19484bfd0419f1e2099f3e657e563b7dae60e798", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "patch": "@@ -2851,7 +2851,7 @@ pub trait Iterator {\n         Product::product(self)\n     }\n \n-    /// Lexicographically compares the elements of this [`Iterator`] with those\n+    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2873,7 +2873,7 @@ pub trait Iterator {\n         self.cmp_by(other, |x, y| x.cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this [`Iterator`] with those\n+    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -2925,7 +2925,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Lexicographically compares the elements of this [`Iterator`] with those\n+    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2949,7 +2949,7 @@ pub trait Iterator {\n         self.partial_cmp_by(other, |x, y| x.partial_cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this [`Iterator`] with those\n+    /// [Lexicographically](Ord#lexicographical-comparison) compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -3089,7 +3089,7 @@ pub trait Iterator {\n         !self.eq(other)\n     }\n \n-    /// Determines if the elements of this [`Iterator`] are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n     /// less than those of another.\n     ///\n     /// # Examples\n@@ -3110,7 +3110,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Less)\n     }\n \n-    /// Determines if the elements of this [`Iterator`] are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n     /// less or equal to those of another.\n     ///\n     /// # Examples\n@@ -3131,7 +3131,7 @@ pub trait Iterator {\n         matches!(self.partial_cmp(other), Some(Ordering::Less | Ordering::Equal))\n     }\n \n-    /// Determines if the elements of this [`Iterator`] are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n     /// greater than those of another.\n     ///\n     /// # Examples\n@@ -3152,7 +3152,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Greater)\n     }\n \n-    /// Determines if the elements of this [`Iterator`] are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are [lexicographically](Ord#lexicographical-comparison)\n     /// greater than or equal to those of another.\n     ///\n     /// # Examples"}, {"sha": "18073f4afedf74fafc3d9e11259aca9ff96ee3e6", "filename": "library/core/src/slice/cmp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fcmp.rs?ref=42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "patch": "@@ -35,15 +35,15 @@ where\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Eq> Eq for [T] {}\n \n-/// Implements comparison of vectors lexicographically.\n+/// Implements comparison of vectors [lexicographically](Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Ord for [T] {\n     fn cmp(&self, other: &[T]) -> Ordering {\n         SliceOrd::compare(self, other)\n     }\n }\n \n-/// Implements comparison of vectors lexicographically.\n+/// Implements comparison of vectors [lexicographically](Ord#lexicographical-comparison).\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd> PartialOrd for [T] {\n     fn partial_cmp(&self, other: &[T]) -> Option<Ordering> {"}, {"sha": "1906fa27bf44b1209d8bc81c10294e4a67051de1", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=42844ed2cf4ca0ff2a9271e0aaa8e5910c5f4ccd", "patch": "@@ -9,7 +9,7 @@ use super::ParseBoolError;\n \n /// Implements ordering of strings.\n ///\n-/// Strings are ordered  lexicographically by their byte values. This orders Unicode code\n+/// Strings are ordered  [lexicographically](Ord#lexicographical-comparison) by their byte values. This orders Unicode code\n /// points based on their positions in the code charts. This is not necessarily the same as\n /// \"alphabetical\" order, which varies by language and locale. Sorting strings according to\n /// culturally-accepted standards requires locale-specific data that is outside the scope of\n@@ -39,7 +39,7 @@ impl Eq for str {}\n \n /// Implements comparison operations on strings.\n ///\n-/// Strings are compared lexicographically by their byte values. This compares Unicode code\n+/// Strings are compared [lexicographically](Ord#lexicographical-comparison) by their byte values. This compares Unicode code\n /// points based on their positions in the code charts. This is not necessarily the same as\n /// \"alphabetical\" order, which varies by language and locale. Comparing strings according to\n /// culturally-accepted standards requires locale-specific data that is outside the scope of"}]}