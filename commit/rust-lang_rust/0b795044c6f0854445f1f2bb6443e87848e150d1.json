{"sha": "0b795044c6f0854445f1f2bb6443e87848e150d1", "node_id": "C_kwDOAAsO6NoAKDBiNzk1MDQ0YzZmMDg1NDQ0NWYxZjJiYjY0NDNlODc4NDhlMTUwZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-12T07:31:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-12T07:31:18Z"}, "message": "Auto merge of #111493 - matthiaskrgr:rollup-iw1z59b, r=matthiaskrgr\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #111179 (Fix instrument-coverage tests by using Python to sort instantiation groups)\n - #111393 (bump windows crate 0.46 -> 0.48)\n - #111441 (Verify copies of mutable pointers in 2 stages in ReferencePropagation)\n - #111456 (Update cargo)\n - #111490 (Don't ICE in layout computation for placeholder types)\n - #111492 (use by ref TokenTree iterator to avoid a few clones)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a2842ede93534dda9077eb39a4ffc7e82c6cf16a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2842ede93534dda9077eb39a4ffc7e82c6cf16a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b795044c6f0854445f1f2bb6443e87848e150d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b795044c6f0854445f1f2bb6443e87848e150d1", "html_url": "https://github.com/rust-lang/rust/commit/0b795044c6f0854445f1f2bb6443e87848e150d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b795044c6f0854445f1f2bb6443e87848e150d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "699a862a3d4e4a2d5603c93297c0c44021ea72f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/699a862a3d4e4a2d5603c93297c0c44021ea72f5", "html_url": "https://github.com/rust-lang/rust/commit/699a862a3d4e4a2d5603c93297c0c44021ea72f5"}, {"sha": "9039de61f392016c5043b720ca218d3561af7efe", "url": "https://api.github.com/repos/rust-lang/rust/commits/9039de61f392016c5043b720ca218d3561af7efe", "html_url": "https://github.com/rust-lang/rust/commit/9039de61f392016c5043b720ca218d3561af7efe"}], "stats": {"total": 613, "additions": 475, "deletions": 138}, "files": [{"sha": "bb37fee98e4f8222d979294ef67fe94c8f7dfb90", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -741,7 +741,7 @@ dependencies = [\n  \"tracing-subscriber\",\n  \"unified-diff\",\n  \"walkdir\",\n- \"windows 0.46.0\",\n+ \"windows\",\n ]\n \n [[package]]\n@@ -1647,7 +1647,7 @@ dependencies = [\n  \"iana-time-zone-haiku\",\n  \"js-sys\",\n  \"wasm-bindgen\",\n- \"windows 0.48.0\",\n+ \"windows\",\n ]\n \n [[package]]\n@@ -3259,7 +3259,7 @@ dependencies = [\n  \"tempfile\",\n  \"thorin-dwp\",\n  \"tracing\",\n- \"windows 0.46.0\",\n+ \"windows\",\n ]\n \n [[package]]\n@@ -3315,7 +3315,7 @@ dependencies = [\n  \"tempfile\",\n  \"thin-vec\",\n  \"tracing\",\n- \"windows 0.46.0\",\n+ \"windows\",\n ]\n \n [[package]]\n@@ -3376,7 +3376,7 @@ dependencies = [\n  \"rustc_ty_utils\",\n  \"serde_json\",\n  \"tracing\",\n- \"windows 0.46.0\",\n+ \"windows\",\n ]\n \n [[package]]\n@@ -3426,7 +3426,7 @@ dependencies = [\n  \"termize\",\n  \"tracing\",\n  \"unicode-width\",\n- \"windows 0.46.0\",\n+ \"windows\",\n ]\n \n [[package]]\n@@ -4096,7 +4096,7 @@ dependencies = [\n  \"smallvec\",\n  \"termize\",\n  \"tracing\",\n- \"windows 0.46.0\",\n+ \"windows\",\n ]\n \n [[package]]\n@@ -5498,15 +5498,6 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n-[[package]]\n-name = \"windows\"\n-version = \"0.46.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cdacb41e6a96a052c6cb63a144f24900236121c6f63f4f8219fef5977ecb0c25\"\n-dependencies = [\n- \"windows-targets 0.42.2\",\n-]\n-\n [[package]]\n name = \"windows\"\n version = \"0.48.0\""}, {"sha": "ee56d45c9c826eb85c79865d34ba3710ece3685f", "filename": "compiler/rustc_builtin_macros/src/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -19,7 +19,7 @@ pub fn expand_concat_idents<'cx>(\n     }\n \n     let mut res_str = String::new();\n-    for (i, e) in tts.into_trees().enumerate() {\n+    for (i, e) in tts.trees().enumerate() {\n         if i & 1 == 1 {\n             match e {\n                 TokenTree::Token(Token { kind: token::Comma, .. }, _) => {}"}, {"sha": "9c98723e1f43f96ccedc581d6603987c760cc938", "filename": "compiler/rustc_builtin_macros/src/trace_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_builtin_macros%2Fsrc%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_builtin_macros%2Fsrc%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftrace_macros.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -8,7 +8,7 @@ pub fn expand_trace_macros(\n     sp: Span,\n     tt: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n-    let mut cursor = tt.into_trees();\n+    let mut cursor = tt.trees();\n     let mut err = false;\n     let value = match &cursor.next() {\n         Some(TokenTree::Token(token, _)) if token.is_keyword(kw::True) => true,"}, {"sha": "02be88df103a52405369c32f515dc0c6f9caf7de", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -51,5 +51,5 @@ default-features = false\n features = [\"read_core\", \"elf\", \"macho\", \"pe\", \"unaligned\", \"archive\", \"write\"]\n \n [target.'cfg(windows)'.dependencies.windows]\n-version = \"0.46.0\"\n+version = \"0.48.0\"\n features = [\"Win32_Globalization\"]"}, {"sha": "c815bb2d1974920dcb4c124c087f57405da07254", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -37,7 +37,7 @@ itertools = \"0.10.1\"\n version = \"0.11\"\n \n [target.'cfg(windows)'.dependencies.windows]\n-version = \"0.46.0\"\n+version = \"0.48.0\"\n features = [\n     \"Win32_Foundation\",\n     \"Win32_Storage_FileSystem\","}, {"sha": "3c76c2b79911a05dc209a4564179eff0bb4454b4", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -865,14 +865,16 @@ cfg_if! {\n             use std::mem;\n \n             use windows::{\n-                Win32::System::ProcessStatus::{K32GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS},\n+                // FIXME: change back to K32GetProcessMemoryInfo when windows crate\n+                // updated to 0.49.0+ to drop dependency on psapi.dll\n+                Win32::System::ProcessStatus::{GetProcessMemoryInfo, PROCESS_MEMORY_COUNTERS},\n                 Win32::System::Threading::GetCurrentProcess,\n             };\n \n             let mut pmc = PROCESS_MEMORY_COUNTERS::default();\n             let pmc_size = mem::size_of_val(&pmc);\n             unsafe {\n-                K32GetProcessMemoryInfo(\n+                GetProcessMemoryInfo(\n                     GetCurrentProcess(),\n                     &mut pmc,\n                     pmc_size as u32,"}, {"sha": "67352c55c9019713723d89508145c7ea8b48469c", "filename": "compiler/rustc_driver_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_driver_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_driver_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver_impl%2FCargo.toml?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -57,7 +57,7 @@ rustc_mir_transform = { path = \"../rustc_mir_transform\" }\n libc = \"0.2\"\n \n [target.'cfg(windows)'.dependencies.windows]\n-version = \"0.46.0\"\n+version = \"0.48.0\"\n features = [\n     \"Win32_System_Diagnostics_Debug\",\n ]"}, {"sha": "bd3033fcb3e868412c5016a5eef7ede3d134772d", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -27,12 +27,11 @@ serde = { version = \"1.0.125\", features = [ \"derive\" ] }\n serde_json = \"1.0.59\"\n \n [target.'cfg(windows)'.dependencies.windows]\n-version = \"0.46.0\"\n+version = \"0.48.0\"\n features = [\n     \"Win32_Foundation\",\n     \"Win32_Security\",\n     \"Win32_System_Threading\",\n-    \"Win32_System_WindowsProgramming\",\n ]\n \n [features]"}, {"sha": "bd5cf49b56bd7dc0d9f7dba5bbc3dfd1bad2ab69", "filename": "compiler/rustc_errors/src/lock.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_errors%2Fsrc%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_errors%2Fsrc%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flock.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -19,8 +19,7 @@ pub fn acquire_global_lock(name: &str) -> Box<dyn Any> {\n     use windows::{\n         core::PCSTR,\n         Win32::Foundation::{CloseHandle, HANDLE, WAIT_ABANDONED, WAIT_OBJECT_0},\n-        Win32::System::Threading::{CreateMutexA, ReleaseMutex, WaitForSingleObject},\n-        Win32::System::WindowsProgramming::INFINITE,\n+        Win32::System::Threading::{CreateMutexA, ReleaseMutex, WaitForSingleObject, INFINITE},\n     };\n \n     struct Handle(HANDLE);"}, {"sha": "b1c45eaf601e501f22f90485a48fa455bc14a51e", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -1882,8 +1882,8 @@ declare_lint_pass!(\n struct UnderMacro(bool);\n \n impl KeywordIdents {\n-    fn check_tokens(&mut self, cx: &EarlyContext<'_>, tokens: TokenStream) {\n-        for tt in tokens.into_trees() {\n+    fn check_tokens(&mut self, cx: &EarlyContext<'_>, tokens: &TokenStream) {\n+        for tt in tokens.trees() {\n             match tt {\n                 // Only report non-raw idents.\n                 TokenTree::Token(token, _) => {\n@@ -1944,10 +1944,10 @@ impl KeywordIdents {\n \n impl EarlyLintPass for KeywordIdents {\n     fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef) {\n-        self.check_tokens(cx, mac_def.body.tokens.clone());\n+        self.check_tokens(cx, &mac_def.body.tokens);\n     }\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {\n-        self.check_tokens(cx, mac.args.tokens.clone());\n+        self.check_tokens(cx, &mac.args.tokens);\n     }\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n         self.check_ident_token(cx, UnderMacro(false), ident);"}, {"sha": "488d83b5f671b6e083ede5ece2e1985ca20a9cdc", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -2366,13 +2366,11 @@ impl<'tcx> Ty<'tcx> {\n \n             ty::Adt(def, _substs) => def.sized_constraint(tcx).0.is_empty(),\n \n-            ty::Alias(..) | ty::Param(_) => false,\n+            ty::Alias(..) | ty::Param(_) | ty::Placeholder(..) => false,\n \n             ty::Infer(ty::TyVar(_)) => false,\n \n-            ty::Bound(..)\n-            | ty::Placeholder(..)\n-            | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            ty::Bound(..) | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"`is_trivially_sized` applied to unexpected type: {:?}\", self)\n             }\n         }"}, {"sha": "d1bc9ee91538e6ef58953f8f43b14ac21d4881f7", "filename": "compiler/rustc_mir_transform/src/ref_prop.rs", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fref_prop.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -85,7 +85,9 @@ fn propagate_ssa<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let ssa = SsaLocals::new(body);\n \n     let mut replacer = compute_replacement(tcx, body, &ssa);\n-    debug!(?replacer.targets, ?replacer.allowed_replacements, ?replacer.storage_to_remove);\n+    debug!(?replacer.targets);\n+    debug!(?replacer.allowed_replacements);\n+    debug!(?replacer.storage_to_remove);\n \n     replacer.visit_body_preserves_cfg(body);\n \n@@ -190,8 +192,11 @@ fn compute_replacement<'tcx>(\n             continue;\n         }\n \n+        // Whether the current local is subject to the uniqueness rule.\n+        let needs_unique = ty.is_mutable_ptr();\n+\n         // If this a mutable reference that we cannot fully replace, mark it as unknown.\n-        if ty.is_mutable_ptr() && !fully_replacable_locals.contains(local) {\n+        if needs_unique && !fully_replacable_locals.contains(local) {\n             debug!(\"not fully replaceable\");\n             continue;\n         }\n@@ -203,32 +208,33 @@ fn compute_replacement<'tcx>(\n             // have been visited before.\n             Rvalue::Use(Operand::Copy(place) | Operand::Move(place))\n             | Rvalue::CopyForDeref(place) => {\n-                if let Some(rhs) = place.as_local() {\n+                if let Some(rhs) = place.as_local() && ssa.is_ssa(rhs) {\n                     let target = targets[rhs];\n-                    if matches!(target, Value::Pointer(..)) {\n+                    // Only see through immutable reference and pointers, as we do not know yet if\n+                    // mutable references are fully replaced.\n+                    if !needs_unique && matches!(target, Value::Pointer(..)) {\n                         targets[local] = target;\n-                    } else if ssa.is_ssa(rhs) {\n-                        let refmut = body.local_decls[rhs].ty.is_mutable_ptr();\n-                        targets[local] = Value::Pointer(tcx.mk_place_deref(rhs.into()), refmut);\n+                    } else {\n+                        targets[local] = Value::Pointer(tcx.mk_place_deref(rhs.into()), needs_unique);\n                     }\n                 }\n             }\n             Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n                 let mut place = *place;\n                 // Try to see through `place` in order to collapse reborrow chains.\n                 if place.projection.first() == Some(&PlaceElem::Deref)\n-                    && let Value::Pointer(target, refmut) = targets[place.local]\n+                    && let Value::Pointer(target, inner_needs_unique) = targets[place.local]\n                     // Only see through immutable reference and pointers, as we do not know yet if\n                     // mutable references are fully replaced.\n-                    && !refmut\n+                    && !inner_needs_unique\n                     // Only collapse chain if the pointee is definitely live.\n                     && can_perform_opt(target, location)\n                 {\n                     place = target.project_deeper(&place.projection[1..], tcx);\n                 }\n                 assert_ne!(place.local, local);\n                 if is_constant_place(place) {\n-                    targets[local] = Value::Pointer(place, ty.is_mutable_ptr());\n+                    targets[local] = Value::Pointer(place, needs_unique);\n                 }\n             }\n             // We do not know what to do, so keep as not-a-pointer.\n@@ -276,16 +282,35 @@ fn compute_replacement<'tcx>(\n                 return;\n             }\n \n-            if let Value::Pointer(target, refmut) = self.targets[place.local]\n-                && place.projection.first() == Some(&PlaceElem::Deref)\n-            {\n-                let perform_opt = (self.can_perform_opt)(target, loc);\n-                if perform_opt {\n-                    self.allowed_replacements.insert((target.local, loc));\n-                } else if refmut {\n-                    // This mutable reference is not fully replacable, so drop it.\n-                    self.targets[place.local] = Value::Unknown;\n+            if place.projection.first() != Some(&PlaceElem::Deref) {\n+                // This is not a dereference, nothing to do.\n+                return;\n+            }\n+\n+            let mut place = place.as_ref();\n+            loop {\n+                if let Value::Pointer(target, needs_unique) = self.targets[place.local] {\n+                    let perform_opt = (self.can_perform_opt)(target, loc);\n+                    debug!(?place, ?target, ?needs_unique, ?perform_opt);\n+\n+                    // This a reborrow chain, recursively allow the replacement.\n+                    //\n+                    // This also allows to detect cases where `target.local` is not replacable,\n+                    // and mark it as such.\n+                    if let &[PlaceElem::Deref] = &target.projection[..] {\n+                        assert!(perform_opt);\n+                        self.allowed_replacements.insert((target.local, loc));\n+                        place.local = target.local;\n+                        continue;\n+                    } else if perform_opt {\n+                        self.allowed_replacements.insert((target.local, loc));\n+                    } else if needs_unique {\n+                        // This mutable reference is not fully replacable, so drop it.\n+                        self.targets[place.local] = Value::Unknown;\n+                    }\n                 }\n+\n+                break;\n             }\n         }\n     }\n@@ -326,18 +351,23 @@ impl<'tcx> MutVisitor<'tcx> for Replacer<'tcx> {\n     }\n \n     fn visit_place(&mut self, place: &mut Place<'tcx>, ctxt: PlaceContext, loc: Location) {\n-        if let Value::Pointer(target, _) = self.targets[place.local]\n-            && place.projection.first() == Some(&PlaceElem::Deref)\n-        {\n-            let perform_opt = matches!(ctxt, PlaceContext::NonUse(_))\n-                || self.allowed_replacements.contains(&(target.local, loc));\n-\n-            if perform_opt {\n-                *place = target.project_deeper(&place.projection[1..], self.tcx);\n-                self.any_replacement = true;\n+        if place.projection.first() != Some(&PlaceElem::Deref) {\n+            return;\n+        }\n+\n+        loop {\n+            if let Value::Pointer(target, _) = self.targets[place.local] {\n+                let perform_opt = matches!(ctxt, PlaceContext::NonUse(_))\n+                    || self.allowed_replacements.contains(&(target.local, loc));\n+\n+                if perform_opt {\n+                    *place = target.project_deeper(&place.projection[1..], self.tcx);\n+                    self.any_replacement = true;\n+                    continue;\n+                }\n             }\n-        } else {\n-            self.super_place(place, ctxt, loc);\n+\n+            break;\n         }\n     }\n "}, {"sha": "3af83aaaaa8a22a9947f66d334b9e492fa07c1ed", "filename": "compiler/rustc_session/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2FCargo.toml?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -25,7 +25,7 @@ termize = \"0.1.1\"\n libc = \"0.2\"\n \n [target.'cfg(windows)'.dependencies.windows]\n-version = \"0.46.0\"\n+version = \"0.48.0\"\n features = [\n     \"Win32_Foundation\",\n     \"Win32_System_LibraryLoader\","}, {"sha": "3988416d0c795c24a3bc0ca0445cd68fc9c61459", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -135,13 +135,13 @@ fn current_dll_path() -> Result<PathBuf, String> {\n \n     use windows::{\n         core::PCWSTR,\n-        Win32::Foundation::HINSTANCE,\n+        Win32::Foundation::HMODULE,\n         Win32::System::LibraryLoader::{\n             GetModuleFileNameW, GetModuleHandleExW, GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,\n         },\n     };\n \n-    let mut module = HINSTANCE::default();\n+    let mut module = HMODULE::default();\n     unsafe {\n         GetModuleHandleExW(\n             GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,"}, {"sha": "13413c64ff88dd6c2824e9eb9374fc5f10895d28", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -1 +1 @@\n-Subproject commit 26b73d15a68fb94579f6d3590585ec0e9d81d3d5\n+Subproject commit 13413c64ff88dd6c2824e9eb9374fc5f10895d28"}, {"sha": "0d42504c7f4ca1ccbe79d46ac8916c4deeaf24e7", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -28,7 +28,7 @@ libc = \"0.2\"\n miow = \"0.5\"\n \n [target.'cfg(windows)'.dependencies.windows]\n-version = \"0.46.0\"\n+version = \"0.48.0\"\n features = [\n     \"Win32_Foundation\",\n     \"Win32_System_Diagnostics_Debug\","}, {"sha": "afa6bce943f34b249d7abff91439ef0701beaff5", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 49, "deletions": 30, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -6,47 +6,53 @@ use std::path::Path;\n \n /// These are licenses that are allowed for all crates, including the runtime,\n /// rustc, tools, etc.\n+#[rustfmt::skip]\n const LICENSES: &[&str] = &[\n-    \"MIT/Apache-2.0\",\n-    \"MIT / Apache-2.0\",\n-    \"Apache-2.0/MIT\",\n+    // tidy-alphabetical-start\n+    \"(MIT OR Apache-2.0) AND Unicode-DFS-2016\",            // unicode_ident\n+    \"0BSD OR MIT OR Apache-2.0\",                           // adler license\n+    \"0BSD\",\n     \"Apache-2.0 / MIT\",\n-    \"MIT OR Apache-2.0\",\n     \"Apache-2.0 OR MIT\",\n     \"Apache-2.0 WITH LLVM-exception OR Apache-2.0 OR MIT\", // wasi license\n-    \"MIT\",\n+    \"Apache-2.0/MIT\",\n     \"ISC\",\n-    \"Unlicense/MIT\",\n+    \"MIT / Apache-2.0\",\n+    \"MIT OR Apache-2.0 OR Zlib\",                           // tinyvec_macros\n+    \"MIT OR Apache-2.0\",\n+    \"MIT OR Zlib OR Apache-2.0\",                           // miniz_oxide\n+    \"MIT\",\n+    \"MIT/Apache-2.0\",\n+    \"Unicode-DFS-2016\",                                    // tinystr and icu4x\n     \"Unlicense OR MIT\",\n-    \"0BSD\",\n-    \"0BSD OR MIT OR Apache-2.0\",                // adler license\n-    \"Zlib OR Apache-2.0 OR MIT\",                // tinyvec\n-    \"MIT OR Apache-2.0 OR Zlib\",                // tinyvec_macros\n-    \"MIT OR Zlib OR Apache-2.0\",                // miniz_oxide\n-    \"(MIT OR Apache-2.0) AND Unicode-DFS-2016\", // unicode_ident\n-    \"Unicode-DFS-2016\",                         // tinystr and icu4x\n+    \"Unlicense/MIT\",\n+    \"Zlib OR Apache-2.0 OR MIT\",                           // tinyvec\n+    // tidy-alphabetical-end\n ];\n \n /// These are exceptions to Rust's permissive licensing policy, and\n /// should be considered bugs. Exceptions are only allowed in Rust\n /// tooling. It is _crucial_ that no exception crates be dependencies\n /// of the Rust runtime (std/test).\n+#[rustfmt::skip]\n const EXCEPTIONS: &[(&str, &str)] = &[\n+    // tidy-alphabetical-start\n     (\"ar_archive_writer\", \"Apache-2.0 WITH LLVM-exception\"), // rustc\n-    (\"mdbook\", \"MPL-2.0\"),                                   // mdbook\n+    (\"codespan-reporting\", \"Apache-2.0\"),                    // cxx via iana-time-zone-haiku via time, only on haiku\n     (\"colored\", \"MPL-2.0\"),                                  // rustfmt\n+    (\"dissimilar\", \"Apache-2.0\"),                            // rustdoc, rustc_lexer (few tests) via expect-test, (dev deps)\n+    (\"fluent-langneg\", \"Apache-2.0\"),                        // rustc (fluent translations)\n+    (\"fortanix-sgx-abi\", \"MPL-2.0\"),                         // libstd but only for `sgx` target. FIXME: this dependency violates the documentation comment above.\n+    (\"instant\", \"BSD-3-Clause\"),                             // rustc_driver/tracing-subscriber/parking_lot\n+    (\"mdbook\", \"MPL-2.0\"),                                   // mdbook\n     (\"ryu\", \"Apache-2.0 OR BSL-1.0\"),                        // cargo/... (because of serde)\n-    (\"codespan-reporting\", \"Apache-2.0\"), // cxx via iana-time-zone-haiku via time, only on haiku\n-    (\"instant\", \"BSD-3-Clause\"),          // rustc_driver/tracing-subscriber/parking_lot\n-    (\"snap\", \"BSD-3-Clause\"),             // rustc\n-    (\"fluent-langneg\", \"Apache-2.0\"),     // rustc (fluent translations)\n-    (\"self_cell\", \"Apache-2.0\"),          // rustc (fluent translations)\n-    // FIXME: this dependency violates the documentation comment above:\n-    (\"fortanix-sgx-abi\", \"MPL-2.0\"), // libstd but only for `sgx` target\n-    (\"dissimilar\", \"Apache-2.0\"),    // rustdoc, rustc_lexer (few tests) via expect-test, (dev deps)\n+    (\"self_cell\", \"Apache-2.0\"),                             // rustc (fluent translations)\n+    (\"snap\", \"BSD-3-Clause\"),                                // rustc\n+    // tidy-alphabetical-end\n ];\n \n const EXCEPTIONS_CARGO: &[(&str, &str)] = &[\n+    // tidy-alphabetical-start\n     (\"bitmaps\", \"MPL-2.0+\"),\n     (\"bytesize\", \"Apache-2.0\"),\n     (\"dunce\", \"CC0-1.0 OR MIT-0\"),\n@@ -62,9 +68,11 @@ const EXCEPTIONS_CARGO: &[(&str, &str)] = &[\n     (\"sized-chunks\", \"MPL-2.0+\"),\n     (\"subtle\", \"BSD-3-Clause\"),\n     (\"unicode-bom\", \"Apache-2.0\"),\n+    // tidy-alphabetical-end\n ];\n \n const EXCEPTIONS_CRANELIFT: &[(&str, &str)] = &[\n+    // tidy-alphabetical-start\n     (\"cranelift-bforest\", \"Apache-2.0 WITH LLVM-exception\"),\n     (\"cranelift-codegen\", \"Apache-2.0 WITH LLVM-exception\"),\n     (\"cranelift-codegen-meta\", \"Apache-2.0 WITH LLVM-exception\"),\n@@ -80,6 +88,7 @@ const EXCEPTIONS_CRANELIFT: &[(&str, &str)] = &[\n     (\"regalloc2\", \"Apache-2.0 WITH LLVM-exception\"),\n     (\"target-lexicon\", \"Apache-2.0 WITH LLVM-exception\"),\n     (\"wasmtime-jit-icache-coherence\", \"Apache-2.0 WITH LLVM-exception\"),\n+    // tidy-alphabetical-end\n ];\n \n const EXCEPTIONS_BOOTSTRAP: &[(&str, &str)] = &[\n@@ -95,6 +104,7 @@ const RUNTIME_CRATES: &[&str] = &[\"std\", \"core\", \"alloc\", \"test\", \"panic_abort\",\n /// This list is here to provide a speed-bump to adding a new dependency to\n /// rustc. Please check with the compiler team before adding an entry.\n const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n+    // tidy-alphabetical-start\n     \"addr2line\",\n     \"adler\",\n     \"ahash\",\n@@ -113,8 +123,8 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"chalk-engine\",\n     \"chalk-ir\",\n     \"chalk-solve\",\n-    \"convert_case\", // dependency of derive_more\n     \"compiler_builtins\",\n+    \"convert_case\", // dependency of derive_more\n     \"cpufeatures\",\n     \"crc32fast\",\n     \"crossbeam-channel\",\n@@ -187,8 +197,8 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"ppv-lite86\",\n     \"proc-macro-hack\",\n     \"proc-macro2\",\n-    \"pulldown-cmark\",\n     \"psm\",\n+    \"pulldown-cmark\",\n     \"punycode\",\n     \"quote\",\n     \"rand\",\n@@ -227,14 +237,14 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"tempfile\",\n     \"termcolor\",\n     \"termize\",\n+    \"thin-vec\",\n     \"thiserror\",\n     \"thiserror-impl\",\n     \"thorin-dwp\",\n     \"thread_local\",\n     \"tinystr\",\n     \"tinyvec\",\n     \"tinyvec_macros\",\n-    \"thin-vec\",\n     \"tracing\",\n     \"tracing-attributes\",\n     \"tracing-core\",\n@@ -263,29 +273,37 @@ const PERMITTED_RUSTC_DEPENDENCIES: &[&str] = &[\n     \"valuable\",\n     \"version_check\",\n     \"wasi\",\n-    \"windows\",\n     \"winapi\",\n     \"winapi-i686-pc-windows-gnu\",\n     \"winapi-util\",\n     \"winapi-x86_64-pc-windows-gnu\",\n+    \"windows\",\n+    \"windows-targets\",\n+    \"windows_aarch64_gnullvm\",\n+    \"windows_aarch64_msvc\",\n+    \"windows_i686_gnu\",\n+    \"windows_i686_msvc\",\n+    \"windows_x86_64_gnu\",\n+    \"windows_x86_64_gnullvm\",\n+    \"windows_x86_64_msvc\",\n     \"writeable\",\n-    // this is a false-positive: it's only used by rustfmt, but because it's enabled through a\n-    // feature, tidy thinks it's used by rustc as well.\n-    \"yansi-term\",\n+    \"yansi-term\", // this is a false-positive: it's only used by rustfmt, but because it's enabled through a feature, tidy thinks it's used by rustc as well.\n     \"yoke\",\n     \"yoke-derive\",\n     \"zerofrom\",\n     \"zerofrom-derive\",\n     \"zerovec\",\n     \"zerovec-derive\",\n+    // tidy-alphabetical-end\n ];\n \n const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n+    // tidy-alphabetical-start\n     \"ahash\",\n     \"anyhow\",\n     \"autocfg\",\n-    \"bumpalo\",\n     \"bitflags\",\n+    \"bumpalo\",\n     \"byteorder\",\n     \"cfg-if\",\n     \"cranelift-bforest\",\n@@ -324,6 +342,7 @@ const PERMITTED_CRANELIFT_DEPENDENCIES: &[&str] = &[\n     \"winapi-i686-pc-windows-gnu\",\n     \"winapi-x86_64-pc-windows-gnu\",\n     \"windows-sys\",\n+    // tidy-alphabetical-end\n ];\n \n /// Dependency checks."}, {"sha": "af8ee2411d36dc9cc70fd6aeae4ce43246e40fb9", "filename": "tests/mir-opt/reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -0,0 +1,74 @@\n+- // MIR for `mut_raw_then_mut_shr` before ReferencePropagation\n++ // MIR for `mut_raw_then_mut_shr` after ReferencePropagation\n+  \n+  fn mut_raw_then_mut_shr() -> (i32, i32) {\n+      let mut _0: (i32, i32);              // return place in scope 0 at $DIR/reference_prop.rs:+0:30: +0:40\n+      let mut _1: i32;                     // in scope 0 at $DIR/reference_prop.rs:+1:9: +1:14\n+      let mut _4: *mut i32;                // in scope 0 at $DIR/reference_prop.rs:+3:16: +3:36\n+      let mut _5: &mut i32;                // in scope 0 at $DIR/reference_prop.rs:+3:16: +3:26\n+      let _8: ();                          // in scope 0 at $DIR/reference_prop.rs:+7:5: +7:26\n+      let mut _9: i32;                     // in scope 0 at $DIR/reference_prop.rs:+8:6: +8:7\n+      let mut _10: i32;                    // in scope 0 at $DIR/reference_prop.rs:+8:9: +8:10\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:14\n+          let _2: &mut i32;                // in scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n+          scope 2 {\n+              debug xref => _2;            // in scope 2 at $DIR/reference_prop.rs:+2:9: +2:13\n+              let _3: *mut i32;            // in scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n+              scope 3 {\n+                  debug xraw => _3;        // in scope 3 at $DIR/reference_prop.rs:+3:9: +3:13\n+                  let _6: &i32;            // in scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n+                  scope 4 {\n+                      debug xshr => _6;    // in scope 4 at $DIR/reference_prop.rs:+4:9: +4:13\n+                      let _7: i32;         // in scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n+                      scope 5 {\n+                          debug a => _7;   // in scope 5 at $DIR/reference_prop.rs:+6:9: +6:10\n+                          scope 6 {\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:14\n+          _1 = const 2_i32;                // scope 0 at $DIR/reference_prop.rs:+1:17: +1:18\n+-         StorageLive(_2);                 // scope 1 at $DIR/reference_prop.rs:+2:9: +2:13\n+          _2 = &mut _1;                    // scope 1 at $DIR/reference_prop.rs:+2:16: +2:22\n+          StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:9: +3:13\n+-         StorageLive(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n+-         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n+-         _5 = &mut (*_2);                 // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n+-         _4 = &raw mut (*_5);             // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n++         _4 = &raw mut _1;                // scope 2 at $DIR/reference_prop.rs:+3:16: +3:26\n+          _3 = _4;                         // scope 2 at $DIR/reference_prop.rs:+3:16: +3:36\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n+-         StorageDead(_4);                 // scope 2 at $DIR/reference_prop.rs:+3:36: +3:37\n+          StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+4:9: +4:13\n+-         _6 = &(*_2);                     // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n++         _6 = &_1;                        // scope 3 at $DIR/reference_prop.rs:+4:16: +4:22\n+          StorageLive(_7);                 // scope 4 at $DIR/reference_prop.rs:+6:9: +6:10\n+-         _7 = (*_6);                      // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n+-         StorageLive(_8);                 // scope 5 at $DIR/reference_prop.rs:+7:5: +7:26\n+-         (*_3) = const 4_i32;             // scope 6 at $DIR/reference_prop.rs:+7:14: +7:23\n+-         _8 = const ();                   // scope 6 at $DIR/reference_prop.rs:+7:5: +7:26\n+-         StorageDead(_8);                 // scope 5 at $DIR/reference_prop.rs:+7:25: +7:26\n++         _7 = _1;                         // scope 4 at $DIR/reference_prop.rs:+6:13: +6:18\n++         _1 = const 4_i32;                // scope 6 at $DIR/reference_prop.rs:+7:14: +7:23\n+          StorageLive(_9);                 // scope 5 at $DIR/reference_prop.rs:+8:6: +8:7\n+          _9 = _7;                         // scope 5 at $DIR/reference_prop.rs:+8:6: +8:7\n+          StorageLive(_10);                // scope 5 at $DIR/reference_prop.rs:+8:9: +8:10\n+          _10 = _1;                        // scope 5 at $DIR/reference_prop.rs:+8:9: +8:10\n+          _0 = (move _9, move _10);        // scope 5 at $DIR/reference_prop.rs:+8:5: +8:11\n+          StorageDead(_10);                // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n+          StorageDead(_9);                 // scope 5 at $DIR/reference_prop.rs:+8:10: +8:11\n+          StorageDead(_7);                 // scope 4 at $DIR/reference_prop.rs:+9:1: +9:2\n+          StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:1: +9:2\n+          StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+9:1: +9:2\n+-         StorageDead(_2);                 // scope 1 at $DIR/reference_prop.rs:+9:1: +9:2\n+          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+9:1: +9:2\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+9:2: +9:2\n+      }\n+  }\n+  "}, {"sha": "75c1f8f57ccae3219bd7ca787c2eb4f7f5d6a7b1", "filename": "tests/mir-opt/reference_prop.read_through_raw.ReferencePropagation.diff", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fmir-opt%2Freference_prop.read_through_raw.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fmir-opt%2Freference_prop.read_through_raw.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.read_through_raw.ReferencePropagation.diff?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -9,15 +9,14 @@\n       let mut _5: *mut usize;              // in scope 0 at $SRC_DIR/core/src/intrinsics/mir.rs:LL:COL\n   \n       bb0: {\n-          _2 = &mut (*_1);                 // scope 0 at $DIR/reference_prop.rs:+10:13: +10:25\n+-         _2 = &mut (*_1);                 // scope 0 at $DIR/reference_prop.rs:+10:13: +10:25\n -         _3 = &mut (*_2);                 // scope 0 at $DIR/reference_prop.rs:+11:13: +11:26\n -         _4 = &raw mut (*_2);             // scope 0 at $DIR/reference_prop.rs:+12:13: +12:30\n -         _5 = &raw mut (*_3);             // scope 0 at $DIR/reference_prop.rs:+13:13: +13:30\n -         _0 = (*_4);                      // scope 0 at $DIR/reference_prop.rs:+15:13: +15:22\n -         _0 = (*_5);                      // scope 0 at $DIR/reference_prop.rs:+16:13: +16:22\n-+         _3 = &mut (*_1);                 // scope 0 at $DIR/reference_prop.rs:+11:13: +11:26\n-+         _0 = (*_2);                      // scope 0 at $DIR/reference_prop.rs:+15:13: +15:22\n-+         _0 = (*_3);                      // scope 0 at $DIR/reference_prop.rs:+16:13: +16:22\n++         _0 = (*_1);                      // scope 0 at $DIR/reference_prop.rs:+15:13: +15:22\n++         _0 = (*_1);                      // scope 0 at $DIR/reference_prop.rs:+16:13: +16:22\n           return;                          // scope 0 at $DIR/reference_prop.rs:+17:13: +17:21\n       }\n   }"}, {"sha": "93f8d1df8e85ad1ccd1eb63e1910c20ce52cfd78", "filename": "tests/mir-opt/reference_prop.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fmir-opt%2Freference_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fmir-opt%2Freference_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -433,6 +433,29 @@ fn maybe_dead(m: bool) {\n     )\n }\n \n+fn mut_raw_then_mut_shr() -> (i32, i32) {\n+    let mut x = 2;\n+    let xref = &mut x;\n+    let xraw = &mut *xref as *mut _;\n+    let xshr = &*xref;\n+    // Verify that we completely replace with `x` in both cases.\n+    let a = *xshr;\n+    unsafe { *xraw = 4; }\n+    (a, x)\n+}\n+\n+fn unique_with_copies() {\n+    let y = {\n+        let mut a = 0;\n+        let x = &raw mut a;\n+        // `*y` is not replacable below, so we must not replace `*x`.\n+        unsafe { opaque(*x) };\n+        x\n+    };\n+    // But rewriting as `*x` is ok.\n+    unsafe { opaque(*y) };\n+}\n+\n fn main() {\n     let mut x = 5_usize;\n     let mut y = 7_usize;\n@@ -444,6 +467,8 @@ fn main() {\n     multiple_storage();\n     dominate_storage();\n     maybe_dead(true);\n+    mut_raw_then_mut_shr();\n+    unique_with_copies();\n }\n \n // EMIT_MIR reference_prop.reference_propagation.ReferencePropagation.diff\n@@ -454,3 +479,5 @@ fn main() {\n // EMIT_MIR reference_prop.multiple_storage.ReferencePropagation.diff\n // EMIT_MIR reference_prop.dominate_storage.ReferencePropagation.diff\n // EMIT_MIR reference_prop.maybe_dead.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.mut_raw_then_mut_shr.ReferencePropagation.diff\n+// EMIT_MIR reference_prop.unique_with_copies.ReferencePropagation.diff"}, {"sha": "2cda2409e8093a87c2799d1918c4183476eadeb1", "filename": "tests/mir-opt/reference_prop.unique_with_copies.ReferencePropagation.diff", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.unique_with_copies.ReferencePropagation.diff?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -0,0 +1,66 @@\n+- // MIR for `unique_with_copies` before ReferencePropagation\n++ // MIR for `unique_with_copies` after ReferencePropagation\n+  \n+  fn unique_with_copies() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/reference_prop.rs:+0:25: +0:25\n+      let _1: *mut i32;                    // in scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n+      let mut _2: i32;                     // in scope 0 at $DIR/reference_prop.rs:+2:13: +2:18\n+      let _4: ();                          // in scope 0 at $DIR/reference_prop.rs:+5:18: +5:28\n+      let mut _5: i32;                     // in scope 0 at $DIR/reference_prop.rs:+5:25: +5:27\n+      let _6: ();                          // in scope 0 at $DIR/reference_prop.rs:+9:14: +9:24\n+      let mut _7: i32;                     // in scope 0 at $DIR/reference_prop.rs:+9:21: +9:23\n+      scope 1 {\n+          debug y => _1;                   // in scope 1 at $DIR/reference_prop.rs:+1:9: +1:10\n+          scope 5 {\n+          }\n+      }\n+      scope 2 {\n+          debug a => _2;                   // in scope 2 at $DIR/reference_prop.rs:+2:13: +2:18\n+          let _3: *mut i32;                // in scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n+          scope 3 {\n+              debug x => _3;               // in scope 3 at $DIR/reference_prop.rs:+3:13: +3:14\n+              scope 4 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/reference_prop.rs:+1:9: +1:10\n+          StorageLive(_2);                 // scope 0 at $DIR/reference_prop.rs:+2:13: +2:18\n+          _2 = const 0_i32;                // scope 0 at $DIR/reference_prop.rs:+2:21: +2:22\n+-         StorageLive(_3);                 // scope 2 at $DIR/reference_prop.rs:+3:13: +3:14\n+          _3 = &raw mut _2;                // scope 2 at $DIR/reference_prop.rs:+3:17: +3:27\n+          StorageLive(_4);                 // scope 3 at $DIR/reference_prop.rs:+5:9: +5:30\n+          StorageLive(_5);                 // scope 4 at $DIR/reference_prop.rs:+5:25: +5:27\n+          _5 = (*_3);                      // scope 4 at $DIR/reference_prop.rs:+5:25: +5:27\n+          _4 = opaque::<i32>(move _5) -> bb1; // scope 4 at $DIR/reference_prop.rs:+5:18: +5:28\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:452:18: 452:24\n+                                           // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 4 at $DIR/reference_prop.rs:+5:27: +5:28\n+          StorageDead(_4);                 // scope 3 at $DIR/reference_prop.rs:+5:30: +5:31\n+          _1 = _3;                         // scope 3 at $DIR/reference_prop.rs:+6:9: +6:10\n+-         StorageDead(_3);                 // scope 2 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+7:5: +7:6\n+          StorageLive(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:5: +9:26\n+          StorageLive(_7);                 // scope 5 at $DIR/reference_prop.rs:+9:21: +9:23\n+-         _7 = (*_1);                      // scope 5 at $DIR/reference_prop.rs:+9:21: +9:23\n++         _7 = (*_3);                      // scope 5 at $DIR/reference_prop.rs:+9:21: +9:23\n+          _6 = opaque::<i32>(move _7) -> bb2; // scope 5 at $DIR/reference_prop.rs:+9:14: +9:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/reference_prop.rs:456:14: 456:20\n+                                           // + literal: Const { ty: fn(i32) {opaque::<i32>}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_7);                 // scope 5 at $DIR/reference_prop.rs:+9:23: +9:24\n+          StorageDead(_6);                 // scope 1 at $DIR/reference_prop.rs:+9:26: +9:27\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+0:25: +10:2\n+          StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+10:1: +10:2\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+10:2: +10:2\n+      }\n+  }\n+  "}, {"sha": "0ae409c4119e84de3adee8cf5af4c76d08a3e325", "filename": "tests/run-make/coverage-reports/Makefile", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2FMakefile?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -138,6 +138,7 @@ endif\n \t\t\t) \\\n \t\t2> \"$(TMPDIR)\"/show_coverage_stderr.$@.txt \\\n \t\t| \"$(PYTHON)\" $(BASEDIR)/normalize_paths.py \\\n+\t\t| \"$(PYTHON)\" $(BASEDIR)/sort_subviews.py \\\n \t\t> \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n \t( status=$$? ; \\\n \t\t>&2 cat \"$(TMPDIR)\"/show_coverage_stderr.$@.txt ; \\\n@@ -158,23 +159,15 @@ ifdef RUSTC_BLESS_TEST\n else\n \t# Compare the show coverage output (`--bless` refreshes `typical` files).\n \t#\n-\t# FIXME(richkadel): None of the Rust test source samples have the\n-\t# `// ignore-llvm-cov-show-diffs` anymore. This directive exists to work around a limitation\n-\t# with `llvm-cov show`. When reporting coverage for multiple instantiations of a generic function,\n-\t# with different type substitutions, `llvm-cov show` prints these in a non-deterministic order,\n-\t# breaking the `diff` comparison.\n+\t# `llvm-cov show` normally prints instantiation groups in an unpredictable\n+\t# order, but we have used `sort_subviews.py` to sort them, so we can still\n+\t# check the output directly with `diff`.\n \t#\n-\t# A partial workaround is implemented below, with `diff --ignore-matching-lines=RE`\n-\t# to ignore each line prefixing each generic instantiation coverage code region.\n-\t#\n-\t# This workaround only works if the coverage counts are identical across all reported\n-\t# instantiations. If there is no way to ensure this, you may need to apply the\n-\t# `// ignore-llvm-cov-show-diffs` directive, and check for differences using the\n-\t# `.json` files to validate that results have not changed. (Until then, the JSON\n-\t# files are redundant, so there is no need to generate `expected_*.json` files or\n-\t# compare actual JSON results.)\n-\n-\t$(DIFF) --ignore-matching-lines='^  \\| .*::<.*>.*:$$' --ignore-matching-lines='^  \\| <.*>::.*:$$' \\\n+\t# Some of the test cases are currently not working (since #110393) and have\n+\t# been marked with `// ignore-llvm-cov-show-diffs` so that they don't fail\n+\t# the build.\n+\n+\t$(DIFF) \\\n \t\texpected_show_coverage.$@.txt \"$(TMPDIR)\"/actual_show_coverage.$@.txt || \\\n \t\t( grep -q '^\\/\\/ ignore-llvm-cov-show-diffs' $(SOURCEDIR)/$@.rs && \\\n \t\t\t>&2 echo 'diff failed, but suppressed with `// ignore-llvm-cov-show-diffs` in $(SOURCEDIR)/$@.rs' \\"}, {"sha": "93c1535b06b50907a9ecb5ee9a8b096baabede87", "filename": "tests/run-make/coverage-reports/expected_show_coverage.async.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.async.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.async.txt?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -41,9 +41,9 @@\n    41|      1|                    // executed asynchronously.\n    42|      1|    match x {\n    43|      1|        y if c(x).await == y + 1 => { d().await; }\n-                      ^0       ^0                   ^0 ^0\n+                      ^0        ^0                  ^0  ^0\n    44|      1|        y if f().await == y + 1 => (),\n-                      ^0      ^0                 ^0\n+                      ^0       ^0                ^0\n    45|      1|        _ => (),\n    46|       |    }\n    47|      1|}"}, {"sha": "81468cb35dac37081c5dcff61f5b4787c59e25a1", "filename": "tests/run-make/coverage-reports/expected_show_coverage.sort_groups.txt", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.sort_groups.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.sort_groups.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.sort_groups.txt?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -0,0 +1,49 @@\n+    1|       |// compile-flags: --edition=2021\n+    2|       |\n+    3|       |// Demonstrate that `sort_subviews.py` can sort instantiation groups into a\n+    4|       |// predictable order, while preserving their heterogeneous contents.\n+    5|       |\n+    6|      1|fn main() {\n+    7|      1|    let cond = std::env::args().len() > 1;\n+    8|      1|    generic_fn::<()>(cond);\n+    9|      1|    generic_fn::<&'static str>(!cond);\n+   10|      1|    if false {\n+   11|      0|        generic_fn::<char>(cond);\n+   12|      1|    }\n+   13|      1|    generic_fn::<i32>(cond);\n+   14|      1|    other_fn();\n+   15|      1|}\n+   16|       |\n+   17|      3|fn generic_fn<T>(cond: bool) {\n+   18|      3|    if cond {\n+   19|      1|        println!(\"{}\", std::any::type_name::<T>());\n+   20|      2|    }\n+   21|      3|}\n+  ------------------\n+  | Unexecuted instantiation: sort_groups::generic_fn::<char>\n+  ------------------\n+  | sort_groups::generic_fn::<&str>:\n+  |   17|      1|fn generic_fn<T>(cond: bool) {\n+  |   18|      1|    if cond {\n+  |   19|      1|        println!(\"{}\", std::any::type_name::<T>());\n+  |   20|      1|    }\n+  |                   ^0\n+  |   21|      1|}\n+  ------------------\n+  | sort_groups::generic_fn::<()>:\n+  |   17|      1|fn generic_fn<T>(cond: bool) {\n+  |   18|      1|    if cond {\n+  |   19|      0|        println!(\"{}\", std::any::type_name::<T>());\n+  |   20|      1|    }\n+  |   21|      1|}\n+  ------------------\n+  | sort_groups::generic_fn::<i32>:\n+  |   17|      1|fn generic_fn<T>(cond: bool) {\n+  |   18|      1|    if cond {\n+  |   19|      0|        println!(\"{}\", std::any::type_name::<T>());\n+  |   20|      1|    }\n+  |   21|      1|}\n+  ------------------\n+   22|       |\n+   23|      1|fn other_fn() {}\n+"}, {"sha": "412f4a93b9c99c93375015b3072a9b340bd2f603", "filename": "tests/run-make/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -19,29 +19,29 @@\n    18|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    19|      2|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n+  | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n+  ------------------\n+  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n   ------------------\n-  | used_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_bin_crate_generic_function::<&str>:\n   |   17|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   18|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   19|      1|}\n-  ------------------\n-  | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n   ------------------\n    20|       |// Expect for above function: `Unexecuted instantiation` (see below)\n    21|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n    22|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    23|      2|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}\n@@ -51,12 +51,12 @@\n    26|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n    27|      2|}\n   ------------------\n-  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n   |   25|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   26|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n   |   27|      1|}\n   ------------------\n-  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n+  | used_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   25|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   26|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n   |   27|      1|}"}, {"sha": "66ca9e80a32789c7699d891752abef9efccc2a66", "filename": "tests/run-make/coverage-reports/expected_show_coverage.uses_inline_crate.txt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -42,6 +42,8 @@\n    40|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n    41|      2|}\n   ------------------\n+  | Unexecuted instantiation: used_inline_crate::used_only_from_bin_crate_generic_function::<_>\n+  ------------------\n   | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n@@ -51,8 +53,6 @@\n   |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n   |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n   |   41|      1|}\n-  ------------------\n-  | Unexecuted instantiation: used_inline_crate::used_only_from_bin_crate_generic_function::<_>\n   ------------------\n    42|       |// Expect for above function: `Unexecuted instantiation` (see notes in `used_crate.rs`)\n    43|       |\n@@ -77,15 +77,15 @@\n    51|      3|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n    52|      3|}\n   ------------------\n-  | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n-  |   50|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   51|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   52|      1|}\n-  ------------------\n   | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n   |   50|      2|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   51|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n   |   52|      2|}\n+  ------------------\n+  | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  |   50|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   51|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   52|      1|}\n   ------------------\n    53|       |\n    54|       |#[inline(always)]"}, {"sha": "10cfc51d44771534abfb3871fe5ac696cf32ab15", "filename": "tests/run-make/coverage-reports/sort_subviews.py", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fsort_subviews.py", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage-reports%2Fsort_subviews.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage-reports%2Fsort_subviews.py?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+\n+# `llvm-cov show` prints grouped subviews (e.g. for generic functions) in an\n+# unstable order, which is inconvenient when checking output snapshots with\n+# `diff`. To work around that, this script detects consecutive subviews in its\n+# piped input, and sorts them while preserving their contents.\n+\n+from __future__ import print_function\n+\n+import sys\n+\n+\n+def main():\n+    subviews = []\n+\n+    def flush_subviews():\n+        if not subviews:\n+            return\n+\n+        # The last \"subview\" should be just a boundary line on its own, so\n+        # temporarily remove it before sorting the accumulated subviews.\n+        terminator = subviews.pop()\n+        subviews.sort()\n+        subviews.append(terminator)\n+\n+        for view in subviews:\n+            for line in view:\n+                print(line, end=\"\")\n+\n+        subviews.clear()\n+\n+    for line in sys.stdin:\n+        if line.startswith(\"  ------------------\"):\n+            # This is a subview boundary line, so start a new subview.\n+            subviews.append([line])\n+        elif line.startswith(\"  |\"):\n+            # Add this line to the current subview.\n+            subviews[-1].append(line)\n+        else:\n+            # This line is not part of a subview, so sort and print any\n+            # accumulated subviews, and then print the line as-is.\n+            flush_subviews()\n+            print(line, end=\"\")\n+\n+    flush_subviews()\n+    assert not subviews\n+\n+\n+if __name__ == \"__main__\":\n+    main()"}, {"sha": "f89f9f3ec61fad45fae9718f88159d4950894fa5", "filename": "tests/run-make/coverage/sort_groups.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage%2Fsort_groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Frun-make%2Fcoverage%2Fsort_groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fcoverage%2Fsort_groups.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: --edition=2021\n+\n+// Demonstrate that `sort_subviews.py` can sort instantiation groups into a\n+// predictable order, while preserving their heterogeneous contents.\n+\n+fn main() {\n+    let cond = std::env::args().len() > 1;\n+    generic_fn::<()>(cond);\n+    generic_fn::<&'static str>(!cond);\n+    if false {\n+        generic_fn::<char>(cond);\n+    }\n+    generic_fn::<i32>(cond);\n+    other_fn();\n+}\n+\n+fn generic_fn<T>(cond: bool) {\n+    if cond {\n+        println!(\"{}\", std::any::type_name::<T>());\n+    }\n+}\n+\n+fn other_fn() {}"}, {"sha": "ba42f619a5461dbb1c2fbeae7e57648444e9cb71", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.current.stderr?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `&T` needs to have the same ABI as a pointer\n-  --> $DIR/check-size-at-cast-polymorphic-bad.rs:11:15\n+  --> $DIR/check-size-at-cast-polymorphic-bad.rs:14:15\n    |\n LL |     dyn_debug(t);\n    |               ^ `&T` needs to be a pointer-like type", "previous_filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.stderr"}, {"sha": "ba42f619a5461dbb1c2fbeae7e57648444e9cb71", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.next.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.next.stderr?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: `&T` needs to have the same ABI as a pointer\n+  --> $DIR/check-size-at-cast-polymorphic-bad.rs:14:15\n+   |\n+LL |     dyn_debug(t);\n+   |               ^ `&T` needs to be a pointer-like type\n+   |\n+   = help: the trait `PointerLike` is not implemented for `&T`\n+help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n+   |\n+LL | fn polymorphic<T: Debug + ?Sized>(t: &T) where &T: PointerLike {\n+   |                                          +++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9846f87142457fd21c003c635cd48b39d6f5ee74", "filename": "tests/ui/dyn-star/check-size-at-cast-polymorphic-bad.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b795044c6f0854445f1f2bb6443e87848e150d1/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdyn-star%2Fcheck-size-at-cast-polymorphic-bad.rs?ref=0b795044c6f0854445f1f2bb6443e87848e150d1", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n #![feature(dyn_star)]\n #![allow(incomplete_features)]\n "}]}