{"sha": "70ba87f9ae60148e503ea601a3f7308fb999bef4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYmE4N2Y5YWU2MDE0OGU1MDNlYTYwMWEzZjczMDhmYjk5OWJlZjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-07-04T06:11:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-04T06:11:01Z"}, "message": "Merge pull request #1750 from topecongiro/multi-lined-index\n\nPut multi-lined index on the next line if it fits in one line", "tree": {"sha": "0f1a9e1b41b54e6893f4787763d4f7b11ef9d22b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1a9e1b41b54e6893f4787763d4f7b11ef9d22b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70ba87f9ae60148e503ea601a3f7308fb999bef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70ba87f9ae60148e503ea601a3f7308fb999bef4", "html_url": "https://github.com/rust-lang/rust/commit/70ba87f9ae60148e503ea601a3f7308fb999bef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70ba87f9ae60148e503ea601a3f7308fb999bef4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f028cbe760a7bf1930215bed3c61d7ec58bb4e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f028cbe760a7bf1930215bed3c61d7ec58bb4e8a", "html_url": "https://github.com/rust-lang/rust/commit/f028cbe760a7bf1930215bed3c61d7ec58bb4e8a"}, {"sha": "5f775817637bcd65d9eddc91ac6272455b7db2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f775817637bcd65d9eddc91ac6272455b7db2f1", "html_url": "https://github.com/rust-lang/rust/commit/5f775817637bcd65d9eddc91ac6272455b7db2f1"}], "stats": {"total": 90, "additions": 70, "deletions": 20}, "files": [{"sha": "12846049406a6719214e98fb24db99c96b02ba71", "filename": "src/expr.rs", "status": "modified", "additions": 42, "deletions": 20, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/70ba87f9ae60148e503ea601a3f7308fb999bef4/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ba87f9ae60148e503ea601a3f7308fb999bef4/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=70ba87f9ae60148e503ea601a3f7308fb999bef4", "patch": "@@ -2501,31 +2501,53 @@ fn rewrite_index(\n     };\n \n     let offset = expr_str.len() + lbr.len();\n-    if let Some(index_shape) = shape.visual_indent(offset).sub_width(offset + rbr.len()) {\n-        if let Some(index_str) = index.rewrite(context, index_shape) {\n+    let orig_index_rw = shape\n+        .visual_indent(offset)\n+        .sub_width(offset + rbr.len())\n+        .and_then(|index_shape| index.rewrite(context, index_shape));\n+\n+    // Return if everything fits in a single line.\n+    match orig_index_rw {\n+        Some(ref index_str) if !index_str.contains('\\n') => {\n             return Some(format!(\"{}{}{}{}\", expr_str, lbr, index_str, rbr));\n         }\n+        _ => (),\n     }\n \n+    // Try putting index on the next line and see if it fits in a single line.\n     let indent = shape.indent.block_indent(&context.config);\n-    let indent = indent.to_string(&context.config);\n-    // FIXME this is not right, since we don't take into account that shape.width\n-    // might be reduced from max_width by something on the right.\n-    let budget = try_opt!(\n-        context\n-            .config\n-            .max_width()\n-            .checked_sub(indent.len() + lbr.len() + rbr.len())\n-    );\n-    let index_str = try_opt!(index.rewrite(context, Shape::legacy(budget, shape.indent)));\n-    Some(format!(\n-        \"{}\\n{}{}{}{}\",\n-        expr_str,\n-        indent,\n-        lbr,\n-        index_str,\n-        rbr\n-    ))\n+    let rhs_overhead = context\n+        .config\n+        .max_width()\n+        .checked_sub(shape.used_width() + shape.width)\n+        .unwrap_or(0);\n+    let index_shape = try_opt!(Shape::indented(indent, context.config).offset_left(lbr.len()));\n+    let index_shape = try_opt!(index_shape.sub_width(rbr.len() + rhs_overhead));\n+    let new_index_rw = index.rewrite(context, index_shape);\n+    match (orig_index_rw, new_index_rw) {\n+        (_, Some(ref new_index_str)) if !new_index_str.contains('\\n') => {\n+            Some(format!(\n+                \"{}\\n{}{}{}{}\",\n+                expr_str,\n+                indent.to_string(&context.config),\n+                lbr,\n+                new_index_str,\n+                rbr\n+            ))\n+        }\n+        (None, Some(ref new_index_str)) => {\n+            Some(format!(\n+                \"{}\\n{}{}{}{}\",\n+                expr_str,\n+                indent.to_string(&context.config),\n+                lbr,\n+                new_index_str,\n+                rbr\n+            ))\n+        }\n+        (Some(ref index_str), _) => Some(format!(\"{}{}{}{}\", expr_str, lbr, index_str, rbr)),\n+        _ => None,\n+    }\n }\n \n fn rewrite_struct_lit<'a>("}, {"sha": "3d54e68c4093beac1bbc75a0207fc4e76cd27a20", "filename": "tests/source/expr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/70ba87f9ae60148e503ea601a3f7308fb999bef4/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ba87f9ae60148e503ea601a3f7308fb999bef4/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=70ba87f9ae60148e503ea601a3f7308fb999bef4", "patch": "@@ -308,3 +308,16 @@ fn issue1714() {\n     v = &mut {v}[mid..];\n     let (left, right) = {v}.split_at_mut(mid);\n }\n+\n+// Multi-lined index should be put on the next line if it fits in one line.\n+fn issue1749() {\n+    {\n+        {\n+            {\n+                if self.shape[(r as f32 + self.x_offset) as usize][(c as f32 + self.y_offset) as usize] != 0 {\n+                    // hello\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "624a3c7eb9451bd39186bcd0b948cc304679f004", "filename": "tests/target/expr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70ba87f9ae60148e503ea601a3f7308fb999bef4/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70ba87f9ae60148e503ea601a3f7308fb999bef4/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=70ba87f9ae60148e503ea601a3f7308fb999bef4", "patch": "@@ -367,3 +367,18 @@ fn issue1714() {\n     v = &mut { v }[mid..];\n     let (left, right) = { v }.split_at_mut(mid);\n }\n+\n+// Multi-lined index should be put on the next line if it fits in one line.\n+fn issue1749() {\n+    {\n+        {\n+            {\n+                if self.shape[(r as f32 + self.x_offset) as usize]\n+                    [(c as f32 + self.y_offset) as usize] != 0\n+                {\n+                    // hello\n+                }\n+            }\n+        }\n+    }\n+}"}]}