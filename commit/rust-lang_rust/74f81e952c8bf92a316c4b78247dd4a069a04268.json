{"sha": "74f81e952c8bf92a316c4b78247dd4a069a04268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZjgxZTk1MmM4YmY5MmEzMTZjNGI3ODI0N2RkNGEwNjlhMDQyNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T08:14:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-06T08:14:03Z"}, "message": "Auto merge of #1847 - RalfJung:more-tags, r=RalfJung\n\nalso treat CallerLocation and Machine memory as properly tagged\n\nOnly heap allocations need an exception.", "tree": {"sha": "92820141d4f759782c0537b3569c5b833500e3c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92820141d4f759782c0537b3569c5b833500e3c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74f81e952c8bf92a316c4b78247dd4a069a04268", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74f81e952c8bf92a316c4b78247dd4a069a04268", "html_url": "https://github.com/rust-lang/rust/commit/74f81e952c8bf92a316c4b78247dd4a069a04268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74f81e952c8bf92a316c4b78247dd4a069a04268/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15e81a94b1aff99f7c38151d6976757ee0ed0097", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e81a94b1aff99f7c38151d6976757ee0ed0097", "html_url": "https://github.com/rust-lang/rust/commit/15e81a94b1aff99f7c38151d6976757ee0ed0097"}, {"sha": "447f23c71b1bedc8ba363eeeb0c24affc79f89a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/447f23c71b1bedc8ba363eeeb0c24affc79f89a0", "html_url": "https://github.com/rust-lang/rust/commit/447f23c71b1bedc8ba363eeeb0c24affc79f89a0"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "2de0baf294747207b0ad5af17bba6dc86aea7e4d", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74f81e952c8bf92a316c4b78247dd4a069a04268/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f81e952c8bf92a316c4b78247dd4a069a04268/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=74f81e952c8bf92a316c4b78247dd4a069a04268", "patch": "@@ -194,7 +194,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let instance = instance_and_crate.map(|ic| ic.0);\n         // Cache it and load its MIR, if found.\n-        this.machine.exported_symbols_cache.insert(link_name, instance);\n+        this.machine.exported_symbols_cache.try_insert(link_name, instance).unwrap();\n         instance.map(|instance| this.load_mir(instance.def, None)).transpose()\n     }\n "}, {"sha": "0b92817c9728e450ff8d98918b2faf26ebe81f91", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74f81e952c8bf92a316c4b78247dd4a069a04268/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74f81e952c8bf92a316c4b78247dd4a069a04268/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=74f81e952c8bf92a316c4b78247dd4a069a04268", "patch": "@@ -504,17 +504,22 @@ impl Stacks {\n             // `Global` memory can be referenced by global pointers from `tcx`.\n             // Thus we call `global_base_ptr` such that the global pointers get the same tag\n             // as what we use here.\n-            // `ExternStatic` is used for extern statics, and thus must also be listed here.\n-            // `Env` we list because we can get away with precise tracking there.\n+            // `ExternStatic` is used for extern statics, so the same reasoning applies.\n+            // The others are various forms of machine-managed special global memory, and we can get\n+            // away with precise tracking there.\n             // The base pointer is not unique, so the base permission is `SharedReadWrite`.\n-            MemoryKind::Machine(\n+            MemoryKind::CallerLocation\n+            | MemoryKind::Machine(\n                 MiriMemoryKind::Global\n                 | MiriMemoryKind::ExternStatic\n                 | MiriMemoryKind::Tls\n-                | MiriMemoryKind::Env,\n+                | MiriMemoryKind::Env\n+                | MiriMemoryKind::Machine,\n             ) => (extra.global_base_ptr(id), Permission::SharedReadWrite),\n-            // Everything else we handle like raw pointers for now.\n-            _ => {\n+            // Heap allocations we only track precisely when raw pointers are tagged, for now.\n+            MemoryKind::Machine(\n+                MiriMemoryKind::Rust | MiriMemoryKind::C | MiriMemoryKind::WinHeap,\n+            ) => {\n                 let tag =\n                     if extra.track_raw { Tag::Tagged(extra.new_ptr()) } else { Tag::Untagged };\n                 (tag, Permission::SharedReadWrite)"}]}