{"sha": "ce682cb45ff6f899d478358d7517fa83b215ac3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlNjgyY2I0NWZmNmY4OTlkNDc4MzU4ZDc1MTdmYTgzYjIxNWFjM2M=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-03T17:40:20Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-06T01:59:56Z"}, "message": "std: Add .consume_iter() for Option, to make it reusable\n\nLet Option be a base for a widely useful one- or zero- item iterator.\nRefactor OptionIterator to support any generic element type, so the same\niterator impl can be used for both &T, &mut T and T iterators.", "tree": {"sha": "6bdf0ea09f1a02231d0eec6f2c237373faa255b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bdf0ea09f1a02231d0eec6f2c237373faa255b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce682cb45ff6f899d478358d7517fa83b215ac3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce682cb45ff6f899d478358d7517fa83b215ac3c", "html_url": "https://github.com/rust-lang/rust/commit/ce682cb45ff6f899d478358d7517fa83b215ac3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce682cb45ff6f899d478358d7517fa83b215ac3c/comments", "author": null, "committer": null, "parents": [{"sha": "bbda3fa9383dba653b20bd064102caceef91897a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbda3fa9383dba653b20bd064102caceef91897a", "html_url": "https://github.com/rust-lang/rust/commit/bbda3fa9383dba653b20bd064102caceef91897a"}], "stats": {"total": 42, "additions": 15, "deletions": 27}, "files": [{"sha": "40a3944b7e0a413f72514459bc884e78308f82a7", "filename": "src/libstd/option.rs", "status": "modified", "additions": 15, "deletions": 27, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ce682cb45ff6f899d478358d7517fa83b215ac3c/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce682cb45ff6f899d478358d7517fa83b215ac3c/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=ce682cb45ff6f899d478358d7517fa83b215ac3c", "patch": "@@ -116,7 +116,7 @@ impl<T: ToStr> ToStr for Option<T> {\n impl<T> Option<T> {\n     /// Return an iterator over the possibly contained value\n     #[inline]\n-    pub fn iter<'r>(&'r self) -> OptionIterator<'r, T> {\n+    pub fn iter<'r>(&'r self) -> OptionIterator<&'r T> {\n         match *self {\n             Some(ref x) => OptionIterator{opt: Some(x)},\n             None => OptionIterator{opt: None}\n@@ -125,13 +125,19 @@ impl<T> Option<T> {\n \n     /// Return a mutable iterator over the possibly contained value\n     #[inline]\n-    pub fn mut_iter<'r>(&'r mut self) -> OptionMutIterator<'r, T> {\n+    pub fn mut_iter<'r>(&'r mut self) -> OptionIterator<&'r mut T> {\n         match *self {\n-            Some(ref mut x) => OptionMutIterator{opt: Some(x)},\n-            None => OptionMutIterator{opt: None}\n+            Some(ref mut x) => OptionIterator{opt: Some(x)},\n+            None => OptionIterator{opt: None}\n         }\n     }\n \n+    /// Return a consuming iterator over the possibly contained value\n+    #[inline]\n+    pub fn consume_iter(self) -> OptionIterator<T> {\n+        OptionIterator{opt: self}\n+    }\n+\n     /// Returns true if the option equals `None`\n     #[inline]\n     pub fn is_none(&self) -> bool {\n@@ -404,31 +410,13 @@ impl<T> Zero for Option<T> {\n     fn is_zero(&self) -> bool { self.is_none() }\n }\n \n-/// Immutable iterator over an `Option<A>`\n-pub struct OptionIterator<'self, A> {\n-    priv opt: Option<&'self A>\n-}\n-\n-impl<'self, A> Iterator<&'self A> for OptionIterator<'self, A> {\n-    fn next(&mut self) -> Option<&'self A> {\n-        util::replace(&mut self.opt, None)\n-    }\n-\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        match self.opt {\n-            Some(_) => (1, Some(1)),\n-            None => (0, Some(0)),\n-        }\n-    }\n-}\n-\n-/// Mutable iterator over an `Option<A>`\n-pub struct OptionMutIterator<'self, A> {\n-    priv opt: Option<&'self mut A>\n+/// Immutable iterator over an Option\n+pub struct OptionIterator<A> {\n+    priv opt: Option<A>\n }\n \n-impl<'self, A> Iterator<&'self mut A> for OptionMutIterator<'self, A> {\n-    fn next(&mut self) -> Option<&'self mut A> {\n+impl<A> Iterator<A> for OptionIterator<A> {\n+    fn next(&mut self) -> Option<A> {\n         util::replace(&mut self.opt, None)\n     }\n "}]}