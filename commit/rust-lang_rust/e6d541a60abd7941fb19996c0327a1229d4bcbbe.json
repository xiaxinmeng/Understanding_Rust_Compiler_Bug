{"sha": "e6d541a60abd7941fb19996c0327a1229d4bcbbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZDU0MWE2MGFiZDc5NDFmYjE5OTk2YzAzMjdhMTIyOWQ0YmNiYmU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-22T00:09:42Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-11-01T22:00:28Z"}, "message": "Add some explanatory comments.", "tree": {"sha": "4d6ef830e3da50de9b0740ca0946b865ba653bbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d6ef830e3da50de9b0740ca0946b865ba653bbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6d541a60abd7941fb19996c0327a1229d4bcbbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d541a60abd7941fb19996c0327a1229d4bcbbe", "html_url": "https://github.com/rust-lang/rust/commit/e6d541a60abd7941fb19996c0327a1229d4bcbbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6d541a60abd7941fb19996c0327a1229d4bcbbe/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f7d7c2ca44a1487157394e1562e793dbb3db81f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f7d7c2ca44a1487157394e1562e793dbb3db81f", "html_url": "https://github.com/rust-lang/rust/commit/2f7d7c2ca44a1487157394e1562e793dbb3db81f"}], "stats": {"total": 7, "additions": 7, "deletions": 0}, "files": [{"sha": "4ff558a22e12d539e786609c1c7008e231af6e89", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e6d541a60abd7941fb19996c0327a1229d4bcbbe/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6d541a60abd7941fb19996c0327a1229d4bcbbe/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=e6d541a60abd7941fb19996c0327a1229d4bcbbe", "patch": "@@ -1109,6 +1109,8 @@ where\n     }\n }\n \n+// This impl allows a `SymbolStr` to be directly equated with a `String` or\n+// `&str`.\n impl<T: std::ops::Deref<Target = str>> std::cmp::PartialEq<T> for SymbolStr {\n     fn eq(&self, other: &T) -> bool {\n         self.string == other.deref()\n@@ -1118,6 +1120,11 @@ impl<T: std::ops::Deref<Target = str>> std::cmp::PartialEq<T> for SymbolStr {\n impl !Send for SymbolStr {}\n impl !Sync for SymbolStr {}\n \n+/// This impl means that if `ss` is a `SymbolStr`:\n+/// - `*ss` is a `str`;\n+/// - `&*ss` is a `&str`;\n+/// - `&ss as &str` is a `&str`, which means that `&ss` can be passed to a\n+///   function expecting a `&str`.\n impl std::ops::Deref for SymbolStr {\n     type Target = str;\n     #[inline]"}]}