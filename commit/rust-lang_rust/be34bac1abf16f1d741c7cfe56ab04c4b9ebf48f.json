{"sha": "be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMzRiYWMxYWJmMTZmMWQ3NDFjN2NmZTU2YWIwNGM0YjllYmY0OGY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-09-26T16:26:49Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2016-10-11T12:39:14Z"}, "message": "Add Vec::dedup_by and Vec::dedup_by_key", "tree": {"sha": "66c95c2991a41aaa201a4c70e4a12cc86d5c76a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66c95c2991a41aaa201a4c70e4a12cc86d5c76a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f", "html_url": "https://github.com/rust-lang/rust/commit/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f14f4db6e88f4d1788033c220d9b6b6f41420789", "url": "https://api.github.com/repos/rust-lang/rust/commits/f14f4db6e88f4d1788033c220d9b6b6f41420789", "html_url": "https://github.com/rust-lang/rust/commit/f14f4db6e88f4d1788033c220d9b6b6f41420789"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "efbabb5a6f4ea0a48ea85aee68419da4174386ba", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f", "patch": "@@ -1156,7 +1156,52 @@ impl<T: PartialEq> Vec<T> {\n     /// assert_eq!(vec, [1, 2, 3, 2]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n     pub fn dedup(&mut self) {\n+        self.dedup_by(|a, b| a == b)\n+    }\n+}\n+\n+impl<T> Vec<T> {\n+    /// Removes consecutive elements in the vector that resolve to the same key.\n+    ///\n+    /// If the vector is sorted, this removes all duplicates.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(dedup_by)]\n+    ///\n+    /// let mut vec = vec![10, 20, 21, 30, 20];\n+    ///\n+    /// vec.dedup_by_key(|i| *i / 10);\n+    ///\n+    /// assert_eq!(vec, [10, 20, 30, 20]);\n+    /// ```\n+    #[unstable(feature = \"dedup_by\", reason = \"recently added\", issue = \"37087\")]\n+    #[inline]\n+    pub fn dedup_by_key<F, K>(&mut self, mut key: F) where F: FnMut(&mut T) -> K, K: PartialEq {\n+        self.dedup_by(|a, b| key(a) == key(b))\n+    }\n+\n+    /// Removes consecutive elements in the vector that resolve to the same key.\n+    ///\n+    /// If the vector is sorted, this removes all duplicates.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(dedup_by)]\n+    /// use std::ascii::AsciiExt;\n+    ///\n+    /// let mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];\n+    ///\n+    /// vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n+    ///\n+    /// assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n+    /// ```\n+    #[unstable(feature = \"dedup_by\", reason = \"recently added\", issue = \"37087\")]\n+    pub fn dedup_by<F>(&mut self, mut same_bucket: F) where F: FnMut(&mut T, &mut T) -> bool {\n         unsafe {\n             // Although we have a mutable reference to `self`, we cannot make\n             // *arbitrary* changes. The `PartialEq` comparisons could panic, so we\n@@ -1228,7 +1273,7 @@ impl<T: PartialEq> Vec<T> {\n             while r < ln {\n                 let p_r = p.offset(r as isize);\n                 let p_wm1 = p.offset((w - 1) as isize);\n-                if *p_r != *p_wm1 {\n+                if !same_bucket(&mut *p_r, &mut *p_wm1) {\n                     if r != w {\n                         let p_w = p_wm1.offset(1);\n                         mem::swap(&mut *p_r, &mut *p_w);"}, {"sha": "d6bad46c44dfb583c0ba5de414638bb02694b27e", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f", "patch": "@@ -16,6 +16,7 @@\n #![feature(collections)]\n #![feature(collections_bound)]\n #![feature(const_fn)]\n+#![feature(dedup_by)]\n #![feature(enumset)]\n #![feature(pattern)]\n #![feature(rand)]"}, {"sha": "8417be289eb9eaf5e44826ba4635a66ca9179e2e", "filename": "src/libcollectionstest/vec.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f/src%2Flibcollectionstest%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f/src%2Flibcollectionstest%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fvec.rs?ref=be34bac1abf16f1d741c7cfe56ab04c4b9ebf48f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::ascii::AsciiExt;\n use std::borrow::Cow;\n use std::iter::{FromIterator, repeat};\n use std::mem::size_of;\n@@ -230,6 +231,31 @@ fn test_dedup() {\n     case(vec![1, 1, 2, 2, 2, 3, 3], vec![1, 2, 3]);\n }\n \n+#[test]\n+fn test_dedup_by_key() {\n+    fn case(a: Vec<i32>, b: Vec<i32>) {\n+        let mut v = a;\n+        v.dedup_by_key(|i| *i / 10);\n+        assert_eq!(v, b);\n+    }\n+    case(vec![], vec![]);\n+    case(vec![10], vec![10]);\n+    case(vec![10, 11], vec![10]);\n+    case(vec![10, 20, 30], vec![10, 20, 30]);\n+    case(vec![10, 11, 20, 30], vec![10, 20, 30]);\n+    case(vec![10, 20, 21, 30], vec![10, 20, 30]);\n+    case(vec![10, 20, 30, 31], vec![10, 20, 30]);\n+    case(vec![10, 11, 20, 21, 22, 30, 31], vec![10, 20, 30]);\n+}\n+\n+#[test]\n+fn test_dedup_by() {\n+    let mut vec = vec![\"foo\", \"bar\", \"Bar\", \"baz\", \"bar\"];\n+    vec.dedup_by(|a, b| a.eq_ignore_ascii_case(b));\n+\n+    assert_eq!(vec, [\"foo\", \"bar\", \"baz\", \"bar\"]);\n+}\n+\n #[test]\n fn test_dedup_unique() {\n     let mut v0: Vec<Box<_>> = vec![box 1, box 1, box 2, box 3];"}]}