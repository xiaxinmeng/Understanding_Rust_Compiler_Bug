{"sha": "c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYTJiNGU4MjZlMWRhMjBkM2NmYThjMjc5ZmNkZmZhMjRmMzJhN2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-15T18:49:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-15T18:49:07Z"}, "message": "Merge #8039\n\n8039: Use SmallVec for Substs r=flodiebold a=flodiebold\n\nDoesn't help as much as I hoped, but it helps a bit and I also did some\r\nrefactorings that were necessary anyway.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "400efb6e39a557454edd99184c005b413ae25af3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/400efb6e39a557454edd99184c005b413ae25af3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgT6wjCRBK7hj4Ov3rIwAAdHIIAHEeuDJlCxyRg/5uG4arAB12\nFMRdoUtUbu3elLWT56Kma4u08s1oaKmg7mwBv2nSHMhWbVNBAVHDx7uH+55M90QT\nT2ud4n4Te7qQDhUTb2QILUZokEWp4Hyi9jb4bdfiEdwG7V6DKxZNdZAvVcL09qLh\nK7iaP9Vi1kl9Dp/yS0B9sVRzeVkuNGROKYTF5gnaayzOoMY+6KhEdds+A3bPTZPq\nePrPqEluhr0/GoJpNkdNBrv+OX3enjHuUSft2Qh+wYzMuj2Pedw72YTmED7zM3NH\nBjWdgDgDSWobrNSTNa4IX8noCVkjEjwovGXtjCojPh8NDnuJVsNCxsJywzrOy1A=\n=Mv2L\n-----END PGP SIGNATURE-----\n", "payload": "tree 400efb6e39a557454edd99184c005b413ae25af3\nparent 47b74cadf9774f624ff13f8c7929c66be8247fc8\nparent 455e755bb011fff6d1389701063956fbf16daaf1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615834147 +0000\ncommitter GitHub <noreply@github.com> 1615834147 +0000\n\nMerge #8039\n\n8039: Use SmallVec for Substs r=flodiebold a=flodiebold\n\nDoesn't help as much as I hoped, but it helps a bit and I also did some\r\nrefactorings that were necessary anyway.\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d", "html_url": "https://github.com/rust-lang/rust/commit/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47b74cadf9774f624ff13f8c7929c66be8247fc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/47b74cadf9774f624ff13f8c7929c66be8247fc8", "html_url": "https://github.com/rust-lang/rust/commit/47b74cadf9774f624ff13f8c7929c66be8247fc8"}, {"sha": "455e755bb011fff6d1389701063956fbf16daaf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/455e755bb011fff6d1389701063956fbf16daaf1", "html_url": "https://github.com/rust-lang/rust/commit/455e755bb011fff6d1389701063956fbf16daaf1"}], "stats": {"total": 43, "additions": 29, "deletions": 14}, "files": [{"sha": "8503852802aa7502db2d39d16394e9c88d8938de", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d", "patch": "@@ -31,6 +31,7 @@ use hir_def::{\n     GenericDefId, HasModule, LifetimeParamId, Lookup, TraitId, TypeAliasId, TypeParamId,\n };\n use itertools::Itertools;\n+use smallvec::SmallVec;\n \n use crate::{\n     db::HirDatabase,\n@@ -272,7 +273,7 @@ impl Ty {\n \n /// A list of substitutions for generic parameters.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n-pub struct Substs(Arc<[Ty]>);\n+pub struct Substs(SmallVec<[Ty; 2]>);\n \n impl TypeWalk for Substs {\n     fn walk(&self, f: &mut impl FnMut(&Ty)) {\n@@ -286,19 +287,27 @@ impl TypeWalk for Substs {\n         f: &mut impl FnMut(&mut Ty, DebruijnIndex),\n         binders: DebruijnIndex,\n     ) {\n-        for t in make_mut_slice(&mut self.0) {\n+        for t in &mut self.0 {\n             t.walk_mut_binders(f, binders);\n         }\n     }\n }\n \n impl Substs {\n+    pub fn interned(&self, _: &Interner) -> &[Ty] {\n+        &self.0\n+    }\n+\n     pub fn empty() -> Substs {\n-        Substs(Arc::new([]))\n+        Substs(SmallVec::new())\n     }\n \n     pub fn single(ty: Ty) -> Substs {\n-        Substs(Arc::new([ty]))\n+        Substs({\n+            let mut v = SmallVec::new();\n+            v.push(ty);\n+            v\n+        })\n     }\n \n     pub fn prefix(&self, n: usize) -> Substs {\n@@ -316,6 +325,10 @@ impl Substs {\n         &self.0[0]\n     }\n \n+    pub fn from_iter(_interner: &Interner, elements: impl IntoIterator<Item = Ty>) -> Self {\n+        Substs(elements.into_iter().collect())\n+    }\n+\n     /// Return Substs that replace each parameter by itself (i.e. `Ty::Param`).\n     pub(crate) fn type_params_for_generics(\n         db: &dyn HirDatabase,\n@@ -600,13 +613,13 @@ impl CallableSig {\n \n     pub fn from_fn_ptr(fn_ptr: &FnPointer) -> CallableSig {\n         CallableSig {\n-            params_and_return: Arc::clone(&fn_ptr.substs.0),\n+            params_and_return: fn_ptr.substs.interned(&Interner).iter().cloned().collect(),\n             is_varargs: fn_ptr.sig.variadic,\n         }\n     }\n \n     pub fn from_substs(substs: &Substs) -> CallableSig {\n-        CallableSig { params_and_return: Arc::clone(&substs.0), is_varargs: false }\n+        CallableSig { params_and_return: substs.iter().cloned().collect(), is_varargs: false }\n     }\n \n     pub fn params(&self) -> &[Ty] {\n@@ -649,7 +662,7 @@ impl Ty {\n         TyKind::Function(FnPointer {\n             num_args: sig.params().len(),\n             sig: FnSig { abi: (), safety: Safety::Safe, variadic: sig.is_varargs },\n-            substs: Substs(sig.params_and_return),\n+            substs: Substs::from_iter(&Interner, sig.params_and_return.iter().cloned()),\n         })\n         .intern(&Interner)\n     }"}, {"sha": "6ab757bfcd4ba59657dce61355e2c8f28f80bede", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d", "patch": "@@ -31,7 +31,7 @@ use crate::{\n     traits::chalk::{Interner, ToChalk},\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics,\n-        make_mut_slice, variant_data,\n+        variant_data,\n     },\n     AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, FnPointer, FnSig, GenericPredicate,\n     ImplTraitId, OpaqueTy, PolyFnSig, ProjectionPredicate, ProjectionTy, ReturnTypeImplTrait,\n@@ -150,8 +150,9 @@ impl<'a> TyLoweringContext<'a> {\n         let ty = match type_ref {\n             TypeRef::Never => TyKind::Never.intern(&Interner),\n             TypeRef::Tuple(inner) => {\n-                let inner_tys: Arc<[Ty]> = inner.iter().map(|tr| self.lower_ty(tr)).collect();\n-                TyKind::Tuple(inner_tys.len(), Substs(inner_tys)).intern(&Interner)\n+                let inner_tys = inner.iter().map(|tr| self.lower_ty(tr));\n+                TyKind::Tuple(inner_tys.len(), Substs::from_iter(&Interner, inner_tys))\n+                    .intern(&Interner)\n             }\n             TypeRef::Path(path) => {\n                 let (ty, res_) = self.lower_path(path);\n@@ -638,7 +639,7 @@ impl<'a> TyLoweringContext<'a> {\n     ) -> TraitRef {\n         let mut substs = self.trait_ref_substs_from_path(segment, resolved);\n         if let Some(self_ty) = explicit_self_ty {\n-            make_mut_slice(&mut substs.0)[0] = self_ty;\n+            substs.0[0] = self_ty;\n         }\n         TraitRef { trait_: resolved, substs }\n     }"}, {"sha": "94e94a26df41fbfe68359af284d2b7a658511a5c", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=c0a2b4e826e1da20d3cfa8c279fcdffa24f32a7d", "patch": "@@ -5,6 +5,7 @@ use super::tls;\n use base_db::salsa::InternId;\n use chalk_ir::{GenericArg, Goal, GoalData};\n use hir_def::TypeAliasId;\n+use smallvec::SmallVec;\n use std::{fmt, sync::Arc};\n \n #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]\n@@ -33,7 +34,7 @@ impl chalk_ir::interner::Interner for Interner {\n     type InternedGenericArg = chalk_ir::GenericArgData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n     type InternedGoals = Vec<Goal<Self>>;\n-    type InternedSubstitution = Vec<GenericArg<Self>>;\n+    type InternedSubstitution = SmallVec<[GenericArg<Self>; 2]>;\n     type InternedProgramClause = Arc<chalk_ir::ProgramClauseData<Self>>;\n     type InternedProgramClauses = Arc<[chalk_ir::ProgramClause<Self>]>;\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n@@ -265,13 +266,13 @@ impl chalk_ir::interner::Interner for Interner {\n     fn intern_substitution<E>(\n         &self,\n         data: impl IntoIterator<Item = Result<GenericArg<Self>, E>>,\n-    ) -> Result<Vec<GenericArg<Self>>, E> {\n+    ) -> Result<Self::InternedSubstitution, E> {\n         data.into_iter().collect()\n     }\n \n     fn substitution_data<'a>(\n         &self,\n-        substitution: &'a Vec<GenericArg<Self>>,\n+        substitution: &'a Self::InternedSubstitution,\n     ) -> &'a [GenericArg<Self>] {\n         substitution\n     }"}]}