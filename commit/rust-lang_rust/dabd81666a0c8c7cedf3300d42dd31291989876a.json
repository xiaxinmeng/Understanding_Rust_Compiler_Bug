{"sha": "dabd81666a0c8c7cedf3300d42dd31291989876a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYmQ4MTY2NmEwYzhjN2NlZGYzMzAwZDQyZGQzMTI5MTk4OTg3NmE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-21T18:42:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-21T18:42:22Z"}, "message": "Rollup merge of #68313 - batrla:master, r=alexcrichton\n\nOptions IP_MULTICAST_TTL and IP_MULTICAST_LOOP are 1 byte on BSD\n\nOptions IP_MULTICAST_TTL and IP_MULTICAST_LOOP are 1 byte on BSD and Solaris\n\nSee ip(4P) man page:\n IP_MULTICAST_TTL     Time  to live for multicast datagrams. This option\n                      takes an unsigned character as  an  argument.  Its\n                      value  is  the TTL that IP uses on outgoing multi-\n                      cast datagrams. The default is 1.\n\n IP_MULTICAST_LOOP    Loopback for multicast datagrams. Normally  multi-\n                      cast  datagrams  are  delivered  to members on the\n                      sending  host  (or  sending  zone).  Setting   the\n                      unsigned  character argument to 0 causes the oppo-\n                      site behavior, meaning that  when  multiple  zones\n                      are  present,  the  datagrams are delivered to all\n                      zones except the sending zone.\n\nhttps://docs.oracle.com/cd/E88353_01/html/E37851/ip-4p.html\nhttps://man.openbsd.org/ip.4", "tree": {"sha": "f467667e548d7510600007a041ab81ef4b7fb981", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f467667e548d7510600007a041ab81ef4b7fb981"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dabd81666a0c8c7cedf3300d42dd31291989876a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeJ0YOCRBK7hj4Ov3rIwAAdHIIAD08SW6i8HVrCPoWGha8b5dZ\nXwZLRGU5eF1p/Jk2p3eqmSIFB8JfGobwo+SBkC/9hO+4bNVYo0eg1yIqq2qP79O8\nN5pm+wATyMT7TaNHQYcLCF2qzH/bXD+EHcDTxlfIcz5agSjof1QSRZkZeYUDP561\ntPlc6vObLnRBn1iwtZLakutLnPAKgjn1XgaqK9IOGr0AgX+F/k88OWdbXUad+z6R\n6pxj9sYNQE1VmIzxoYxrHR/HxBM3lupLqrfIZgeYkRlpqw1X7j2CLh8GXwJaSNhx\ntd/pZwgpOt5Oif9D7knV4WjohNLf77afumpogT66dy0wfuVwiohu87Vo8hxHtpU=\n=0ygG\n-----END PGP SIGNATURE-----\n", "payload": "tree f467667e548d7510600007a041ab81ef4b7fb981\nparent 3484e2fab4153068e4e5eaebab215e680efe38f1\nparent 53924428692371a175afeaaa5fa410c44f0e06ae\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1579632142 +0100\ncommitter GitHub <noreply@github.com> 1579632142 +0100\n\nRollup merge of #68313 - batrla:master, r=alexcrichton\n\nOptions IP_MULTICAST_TTL and IP_MULTICAST_LOOP are 1 byte on BSD\n\nOptions IP_MULTICAST_TTL and IP_MULTICAST_LOOP are 1 byte on BSD and Solaris\n\nSee ip(4P) man page:\n IP_MULTICAST_TTL     Time  to live for multicast datagrams. This option\n                      takes an unsigned character as  an  argument.  Its\n                      value  is  the TTL that IP uses on outgoing multi-\n                      cast datagrams. The default is 1.\n\n IP_MULTICAST_LOOP    Loopback for multicast datagrams. Normally  multi-\n                      cast  datagrams  are  delivered  to members on the\n                      sending  host  (or  sending  zone).  Setting   the\n                      unsigned  character argument to 0 causes the oppo-\n                      site behavior, meaning that  when  multiple  zones\n                      are  present,  the  datagrams are delivered to all\n                      zones except the sending zone.\n\nhttps://docs.oracle.com/cd/E88353_01/html/E37851/ip-4p.html\nhttps://man.openbsd.org/ip.4\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dabd81666a0c8c7cedf3300d42dd31291989876a", "html_url": "https://github.com/rust-lang/rust/commit/dabd81666a0c8c7cedf3300d42dd31291989876a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dabd81666a0c8c7cedf3300d42dd31291989876a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3484e2fab4153068e4e5eaebab215e680efe38f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3484e2fab4153068e4e5eaebab215e680efe38f1", "html_url": "https://github.com/rust-lang/rust/commit/3484e2fab4153068e4e5eaebab215e680efe38f1"}, {"sha": "53924428692371a175afeaaa5fa410c44f0e06ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/53924428692371a175afeaaa5fa410c44f0e06ae", "html_url": "https://github.com/rust-lang/rust/commit/53924428692371a175afeaaa5fa410c44f0e06ae"}], "stats": {"total": 124, "additions": 51, "deletions": 73}, "files": [{"sha": "135e8308afaea5c3e0a320e997e53582aad8914f", "filename": "src/libstd/sys_common/net.rs", "status": "modified", "additions": 51, "deletions": 73, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/dabd81666a0c8c7cedf3300d42dd31291989876a/src%2Flibstd%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabd81666a0c8c7cedf3300d42dd31291989876a/src%2Flibstd%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fnet.rs?ref=dabd81666a0c8c7cedf3300d42dd31291989876a", "patch": "@@ -13,75 +13,43 @@ use crate::time::Duration;\n \n use libc::{c_int, c_void};\n \n-#[cfg(not(any(\n-    target_os = \"dragonfly\",\n-    target_os = \"freebsd\",\n-    target_os = \"ios\",\n-    target_os = \"macos\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"solaris\",\n-    target_os = \"haiku\",\n-    target_os = \"l4re\"\n-)))]\n-use crate::sys::net::netc::IPV6_ADD_MEMBERSHIP;\n-#[cfg(not(any(\n-    target_os = \"dragonfly\",\n-    target_os = \"freebsd\",\n-    target_os = \"ios\",\n-    target_os = \"macos\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"solaris\",\n-    target_os = \"haiku\",\n-    target_os = \"l4re\"\n-)))]\n-use crate::sys::net::netc::IPV6_DROP_MEMBERSHIP;\n-#[cfg(any(\n-    target_os = \"dragonfly\",\n-    target_os = \"freebsd\",\n-    target_os = \"ios\",\n-    target_os = \"macos\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"solaris\",\n-    target_os = \"haiku\",\n-    target_os = \"l4re\"\n-))]\n-use crate::sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n-#[cfg(any(\n-    target_os = \"dragonfly\",\n-    target_os = \"freebsd\",\n-    target_os = \"ios\",\n-    target_os = \"macos\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"solaris\",\n-    target_os = \"haiku\",\n-    target_os = \"l4re\"\n-))]\n-use crate::sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n-\n-#[cfg(any(\n-    target_os = \"linux\",\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"freebsd\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"haiku\"\n-))]\n-use libc::MSG_NOSIGNAL;\n-#[cfg(not(any(\n-    target_os = \"linux\",\n-    target_os = \"android\",\n-    target_os = \"dragonfly\",\n-    target_os = \"freebsd\",\n-    target_os = \"openbsd\",\n-    target_os = \"netbsd\",\n-    target_os = \"haiku\"\n-)))]\n-const MSG_NOSIGNAL: c_int = 0x0;\n+cfg_if::cfg_if! {\n+    if #[cfg(any(\n+        target_os = \"dragonfly\", target_os = \"freebsd\",\n+        target_os = \"ios\", target_os = \"macos\",\n+        target_os = \"openbsd\", target_os = \"netbsd\",\n+        target_os = \"solaris\", target_os = \"haiku\", target_os = \"l4re\"))] {\n+        use crate::sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n+        use crate::sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n+    } else {\n+        use crate::sys::net::netc::IPV6_ADD_MEMBERSHIP;\n+        use crate::sys::net::netc::IPV6_DROP_MEMBERSHIP;\n+    }\n+}\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(any(\n+        target_os = \"linux\", target_os = \"android\",\n+        target_os = \"dragonfly\", target_os = \"freebsd\",\n+        target_os = \"openbsd\", target_os = \"netbsd\",\n+        target_os = \"haiku\"))] {\n+        use libc::MSG_NOSIGNAL;\n+    } else {\n+        const MSG_NOSIGNAL: c_int = 0x0;\n+    }\n+}\n+\n+cfg_if::cfg_if! {\n+    if #[cfg(any(\n+        target_os = \"dragonfly\", target_os = \"freebsd\",\n+        target_os = \"openbsd\", target_os = \"netbsd\",\n+        target_os = \"solaris\"))] {\n+        use libc::c_uchar;\n+        type IpV4MultiCastType = c_uchar;\n+    } else {\n+        type IpV4MultiCastType = c_int;\n+    }\n+}\n \n ////////////////////////////////////////////////////////////////////////////////\n // sockaddr and misc bindings\n@@ -566,20 +534,30 @@ impl UdpSocket {\n     }\n \n     pub fn set_multicast_loop_v4(&self, multicast_loop_v4: bool) -> io::Result<()> {\n-        setsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP, multicast_loop_v4 as c_int)\n+        setsockopt(\n+            &self.inner,\n+            c::IPPROTO_IP,\n+            c::IP_MULTICAST_LOOP,\n+            multicast_loop_v4 as IpV4MultiCastType,\n+        )\n     }\n \n     pub fn multicast_loop_v4(&self) -> io::Result<bool> {\n-        let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP)?;\n+        let raw: IpV4MultiCastType = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_LOOP)?;\n         Ok(raw != 0)\n     }\n \n     pub fn set_multicast_ttl_v4(&self, multicast_ttl_v4: u32) -> io::Result<()> {\n-        setsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL, multicast_ttl_v4 as c_int)\n+        setsockopt(\n+            &self.inner,\n+            c::IPPROTO_IP,\n+            c::IP_MULTICAST_TTL,\n+            multicast_ttl_v4 as IpV4MultiCastType,\n+        )\n     }\n \n     pub fn multicast_ttl_v4(&self) -> io::Result<u32> {\n-        let raw: c_int = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL)?;\n+        let raw: IpV4MultiCastType = getsockopt(&self.inner, c::IPPROTO_IP, c::IP_MULTICAST_TTL)?;\n         Ok(raw as u32)\n     }\n "}]}