{"sha": "4dc3b99b27623dc142998d9009f64bcf48b9c7b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkYzNiOTliMjc2MjNkYzE0Mjk5OGQ5MDA5ZjY0YmNmNDhiOWM3YjI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-04-25T11:11:08Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-04-26T14:52:04Z"}, "message": "PGO: Add a run-make test that makes sure that PGO profiling data is used by the compiler during optimizations.", "tree": {"sha": "abb7967e63d00a8493c53cefdaa8a4e32286c417", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abb7967e63d00a8493c53cefdaa8a4e32286c417"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dc3b99b27623dc142998d9009f64bcf48b9c7b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc3b99b27623dc142998d9009f64bcf48b9c7b2", "html_url": "https://github.com/rust-lang/rust/commit/4dc3b99b27623dc142998d9009f64bcf48b9c7b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dc3b99b27623dc142998d9009f64bcf48b9c7b2/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68b692436342813c85f37e63f2d55760e37df242", "url": "https://api.github.com/repos/rust-lang/rust/commits/68b692436342813c85f37e63f2d55760e37df242", "html_url": "https://github.com/rust-lang/rust/commit/68b692436342813c85f37e63f2d55760e37df242"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "52e2bab4b1383f2e5e213983f04b4821dc3d3136", "filename": "src/test/run-make-fulldeps/pgo-use/Makefile", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4dc3b99b27623dc142998d9009f64bcf48b9c7b2/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4dc3b99b27623dc142998d9009f64bcf48b9c7b2/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2FMakefile?ref=4dc3b99b27623dc142998d9009f64bcf48b9c7b2", "patch": "@@ -0,0 +1,43 @@\n+# needs-profiler-support\n+\n+-include ../tools.mk\n+\n+# This test makes sure that PGO profiling data leads to cold functions being\n+# marked as `cold` and hot functions with `inlinehint`.\n+# The test program contains an `if` were actual execution only ever takes the\n+# `else` branch. Accordingly, we expect the function that is never called to\n+# be marked as cold.\n+#\n+# The program is compiled with `-Copt-level=s` because this setting disables\n+# LLVM's pre-inlining pass (i.e. a pass that does some inlining before it adds\n+# the profiling instrumentation). Disabling this pass leads to rather\n+# predictable IR which we need for this test to be stable.\n+\n+COMMON_FLAGS=-Copt-level=s -Ccodegen-units=1\n+\n+# LLVM doesn't support instrumenting binaries that use SEH:\n+# https://bugs.llvm.org/show_bug.cgi?id=41279\n+#\n+# Things work fine with -Cpanic=abort though.\n+ifdef IS_MSVC\n+COMMON_FLAGS+= -Cpanic=abort\n+endif\n+\n+all:\n+\t# Compile the test program with instrumentation\n+\t$(RUSTC) $(COMMON_FLAGS) -Z pgo-gen=\"$(TMPDIR)\" main.rs\n+\t# Run it in order to generate some profiling data\n+\t$(call RUN,main some-argument) || exit 1\n+\t# Postprocess the profiling data so it can be used by the compiler\n+\t$(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-profdata merge \\\n+\t\t-o \"$(TMPDIR)\"/merged.profdata \\\n+\t\t\"$(TMPDIR)\"/default_*.profraw\n+\t# Compile the test program again, making use of the profiling data\n+\t$(RUSTC) $(COMMON_FLAGS) -Z pgo-use=\"$(TMPDIR)\"/merged.profdata --emit=llvm-ir main.rs\n+\t# Check that the generate IR contains some things that we expect\n+\t#\n+\t# We feed the file into LLVM FileCheck tool *in reverse* so that we see the\n+\t# line with the function name before the line with the function attributes.\n+\t# FileCheck only supports checking that something matches on the next line,\n+\t# but not if something matches on the previous line.\n+\ttac \"$(TMPDIR)\"/main.ll | \"$(LLVM_FILECHECK)\" filecheck-patterns.txt"}, {"sha": "6da34f88f2a7400c24741840a62fd335e94374c6", "filename": "src/test/run-make-fulldeps/pgo-use/filecheck-patterns.txt", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4dc3b99b27623dc142998d9009f64bcf48b9c7b2/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Ffilecheck-patterns.txt", "raw_url": "https://github.com/rust-lang/rust/raw/4dc3b99b27623dc142998d9009f64bcf48b9c7b2/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Ffilecheck-patterns.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Ffilecheck-patterns.txt?ref=4dc3b99b27623dc142998d9009f64bcf48b9c7b2", "patch": "@@ -0,0 +1,11 @@\n+# Add a check that the IR contains some expected metadata\n+CHECK: !{!\"ProfileFormat\", !\"InstrProf\"}\n+CHECK: !\"ProfileSummary\"\n+\n+# Make sure that the hot function is marked with `inlinehint`\n+CHECK: define {{.*}} @hot_function\n+CHECK-NEXT: Function Attrs:{{.*}}inlinehint\n+\n+# Make sure that the cold function is marked with `cold`\n+CHECK: define {{.*}} @cold_function\n+CHECK-NEXT: Function Attrs:{{.*}}cold"}, {"sha": "eb9192c87e6f05b213bb62781d253119190e6d6a", "filename": "src/test/run-make-fulldeps/pgo-use/main.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4dc3b99b27623dc142998d9009f64bcf48b9c7b2/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dc3b99b27623dc142998d9009f64bcf48b9c7b2/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpgo-use%2Fmain.rs?ref=4dc3b99b27623dc142998d9009f64bcf48b9c7b2", "patch": "@@ -0,0 +1,23 @@\n+#[no_mangle]\n+pub fn cold_function(c: u8) {\n+    println!(\"cold {}\", c);\n+}\n+\n+#[no_mangle]\n+pub fn hot_function(c: u8) {\n+    std::env::set_var(format!(\"var{}\", c), format!(\"hot {}\", c));\n+}\n+\n+fn main() {\n+    let arg = std::env::args().skip(1).next().unwrap();\n+\n+    for i in 0 .. 1000_000 {\n+        let some_value = arg.as_bytes()[i % arg.len()];\n+        if some_value == b'!' {\n+            // This branch is never taken at runtime\n+            cold_function(some_value);\n+        } else {\n+            hot_function(some_value);\n+        }\n+    }\n+}"}]}