{"sha": "39d2639f819ee80ba2b4e2c1ad0fd40955dd30e5", "node_id": "C_kwDOAAsO6NoAKDM5ZDI2MzlmODE5ZWU4MGJhMmI0ZTJjMWFkMGZkNDA5NTVkZDMwZTU", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-01-31T02:46:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-31T02:46:23Z"}, "message": "Rollup merge of #107445 - Swatinem:rm-genfuture, r=cuviper\n\nRemove `GenFuture` from core\n\nThe handling of async constructs in the compiler does not rely on `GenFuture` anymore since `1.67`, so this code can now be removed from `core`.", "tree": {"sha": "ef1d8381430a8b2f43232feae6224e01aa85ca09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef1d8381430a8b2f43232feae6224e01aa85ca09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d2639f819ee80ba2b4e2c1ad0fd40955dd30e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj2ID/CRBK7hj4Ov3rIwAAJqsIAKl1DC6OdZEaCOOrw1NJ3vz/\nEOJbfjUIxvBUso//ngGi+9GgQ7dio1NcFxDLvzSfF2ewxVsRNik3twDByMxnO1MK\nEnQgPsL0XFQ6efU1Vth/QHAiROQG5ifNHelv1ps0esfmab8y6AI4ZgKQy2a0ODEw\n6LiUSeBCJweewidIBIYEEZx67jDaZVyPmsr91TOvrxjKLWprofIfe4f8V3CD/7Hu\nOESlYKJtBrKcrEwSimTeVJSdF8Ar+b4YV40Xu8lUHqMVW8Gi5nwSTlGyHZ2v+pw/\neE0539fJ0fooWx76M+XpYoduy44pKI+su9vBciFxdzn5neZHds566hE/6qxmYPs=\n=B4Zb\n-----END PGP SIGNATURE-----\n", "payload": "tree ef1d8381430a8b2f43232feae6224e01aa85ca09\nparent 6eeb981a580a630b3359d2ad46f0b086dcfa1681\nparent 5372e66884b7962acfce99d5dd8aef7e48d0257e\nauthor Yuki Okushi <jtitor@2k36.org> 1675133183 +0900\ncommitter GitHub <noreply@github.com> 1675133183 +0900\n\nRollup merge of #107445 - Swatinem:rm-genfuture, r=cuviper\n\nRemove `GenFuture` from core\n\nThe handling of async constructs in the compiler does not rely on `GenFuture` anymore since `1.67`, so this code can now be removed from `core`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d2639f819ee80ba2b4e2c1ad0fd40955dd30e5", "html_url": "https://github.com/rust-lang/rust/commit/39d2639f819ee80ba2b4e2c1ad0fd40955dd30e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d2639f819ee80ba2b4e2c1ad0fd40955dd30e5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eeb981a580a630b3359d2ad46f0b086dcfa1681", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eeb981a580a630b3359d2ad46f0b086dcfa1681", "html_url": "https://github.com/rust-lang/rust/commit/6eeb981a580a630b3359d2ad46f0b086dcfa1681"}, {"sha": "5372e66884b7962acfce99d5dd8aef7e48d0257e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5372e66884b7962acfce99d5dd8aef7e48d0257e", "html_url": "https://github.com/rust-lang/rust/commit/5372e66884b7962acfce99d5dd8aef7e48d0257e"}], "stats": {"total": 45, "additions": 0, "deletions": 45}, "files": [{"sha": "46cbcd43530d5eafa2d6bad1d0c4df9ed675bcba", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/39d2639f819ee80ba2b4e2c1ad0fd40955dd30e5/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d2639f819ee80ba2b4e2c1ad0fd40955dd30e5/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=39d2639f819ee80ba2b4e2c1ad0fd40955dd30e5", "patch": "@@ -56,51 +56,6 @@ unsafe impl Send for ResumeTy {}\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n unsafe impl Sync for ResumeTy {}\n \n-/// Wrap a generator in a future.\n-///\n-/// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n-/// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n-// This is `const` to avoid extra errors after we recover from `const async fn`\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[rustc_const_unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[inline]\n-pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-where\n-    T: crate::ops::Generator<ResumeTy, Yield = ()>,\n-{\n-    use crate::{\n-        ops::{Generator, GeneratorState},\n-        pin::Pin,\n-        task::Poll,\n-    };\n-\n-    #[rustc_diagnostic_item = \"gen_future\"]\n-    struct GenFuture<T: Generator<ResumeTy, Yield = ()>>(T);\n-\n-    // We rely on the fact that async/await futures are immovable in order to create\n-    // self-referential borrows in the underlying generator.\n-    impl<T: Generator<ResumeTy, Yield = ()>> !Unpin for GenFuture<T> {}\n-\n-    impl<T: Generator<ResumeTy, Yield = ()>> Future for GenFuture<T> {\n-        type Output = T::Return;\n-        #[track_caller]\n-        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n-            // SAFETY: Safe because we're !Unpin + !Drop, and this is just a field projection.\n-            let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n-\n-            // Resume the generator, turning the `&mut Context` into a `NonNull` raw pointer. The\n-            // `.await` lowering will safely cast that back to a `&mut Context`.\n-            match gen.resume(ResumeTy(NonNull::from(cx).cast::<Context<'static>>())) {\n-                GeneratorState::Yielded(()) => Poll::Pending,\n-                GeneratorState::Complete(x) => Poll::Ready(x),\n-            }\n-        }\n-    }\n-\n-    GenFuture(gen)\n-}\n-\n #[lang = \"get_context\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]"}]}