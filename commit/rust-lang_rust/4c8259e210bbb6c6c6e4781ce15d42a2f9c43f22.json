{"sha": "4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjODI1OWUyMTBiYmI2YzZjNmU0NzgxY2UxNWQ0MmEyZjljNDNmMjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-23T20:13:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-23T20:13:35Z"}, "message": "reduce duplication", "tree": {"sha": "a149c0a66cb2443539b66de90b6327b78ba31937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a149c0a66cb2443539b66de90b6327b78ba31937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22", "html_url": "https://github.com/rust-lang/rust/commit/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16054887102104208f4a0fc0e75e702b85a2eae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/16054887102104208f4a0fc0e75e702b85a2eae8", "html_url": "https://github.com/rust-lang/rust/commit/16054887102104208f4a0fc0e75e702b85a2eae8"}], "stats": {"total": 373, "additions": 162, "deletions": 211}, "files": [{"sha": "e01985112d3f73857d36fc609eb4f90193dba065", "filename": "crates/ide_assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 160, "deletions": 13, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22", "patch": "@@ -29,6 +29,40 @@ use crate::{\n // }\n // ```\n pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    generate_getter_impl(acc, ctx, false)\n+}\n+\n+// Assist: generate_getter_mut\n+//\n+// Generate a mut getter method.\n+//\n+// ```\n+// struct Person {\n+//     nam$0e: String,\n+// }\n+// ```\n+// ->\n+// ```\n+// struct Person {\n+//     name: String,\n+// }\n+//\n+// impl Person {\n+//     /// Get a mutable reference to the person's name.\n+//     fn name_mut(&mut self) -> &mut String {\n+//         &mut self.name\n+//     }\n+// }\n+// ```\n+pub(crate) fn generate_getter_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    generate_getter_impl(acc, ctx, true)\n+}\n+\n+pub(crate) fn generate_getter_impl(\n+    acc: &mut Assists,\n+    ctx: &AssistContext,\n+    mutable: bool,\n+) -> Option<()> {\n     let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n     let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n \n@@ -37,39 +71,45 @@ pub(crate) fn generate_getter(acc: &mut Assists, ctx: &AssistContext) -> Option<\n     let field_ty = field.ty()?;\n \n     // Return early if we've found an existing fn\n-    let fn_name = to_lower_snake_case(&field_name.to_string());\n+    let mut fn_name = to_lower_snake_case(&field_name.to_string());\n+    if mutable {\n+        format_to!(fn_name, \"_mut\");\n+    }\n     let impl_def = find_struct_impl(&ctx, &ast::Adt::Struct(strukt.clone()), fn_name.as_str())?;\n \n+    let (id, label) = if mutable {\n+        (\"generate_getter_mut\", \"Generate a mut getter method\")\n+    } else {\n+        (\"generate_getter\", \"Generate a getter method\")\n+    };\n     let target = field.syntax().text_range();\n     acc.add_group(\n         &GroupLabel(\"Generate getter/setter\".to_owned()),\n-        AssistId(\"generate_getter\", AssistKind::Generate),\n-        \"Generate a getter method\",\n+        AssistId(id, AssistKind::Generate),\n+        label,\n         target,\n         |builder| {\n             let mut buf = String::with_capacity(512);\n \n-            let fn_name_spaced = fn_name.replace('_', \" \");\n-            let strukt_name_spaced =\n-                to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \");\n-\n             if impl_def.is_some() {\n                 buf.push('\\n');\n             }\n \n             let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n             format_to!(\n                 buf,\n-                \"    /// Get a reference to the {}'s {}.\n-    {}fn {}(&self) -> &{} {{\n-        &self.{}\n+                \"    /// Get a {}reference to the {}'s {}.\n+    {}fn {}(&{mut_}self) -> &{mut_}{} {{\n+        &{mut_}self.{}\n     }}\",\n-                strukt_name_spaced,\n-                fn_name_spaced,\n+                mutable.then(|| \"mutable \").unwrap_or_default(),\n+                to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \"),\n+                fn_name.trim_end_matches(\"_mut\").replace('_', \" \"),\n                 vis,\n                 fn_name,\n                 field_ty,\n-                fn_name,\n+                field_name,\n+                mut_ = mutable.then(|| \"mut \").unwrap_or_default(),\n             );\n \n             let start_offset = impl_def\n@@ -190,3 +230,110 @@ impl<T: Clone> Context<T> {\n         );\n     }\n }\n+\n+#[cfg(test)]\n+mod tests_mut {\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    use super::*;\n+\n+    fn check_not_applicable(ra_fixture: &str) {\n+        check_assist_not_applicable(generate_getter_mut, ra_fixture)\n+    }\n+\n+    #[test]\n+    fn test_generate_getter_mut_from_field() {\n+        check_assist(\n+            generate_getter_mut,\n+            r#\"\n+struct Context<T: Clone> {\n+    dat$0a: T,\n+}\"#,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a mutable reference to the context's data.\n+    fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_getter_mut_already_implemented() {\n+        check_not_applicable(\n+            r#\"\n+struct Context<T: Clone> {\n+    dat$0a: T,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_generate_getter_mut_from_field_with_visibility_marker() {\n+        check_assist(\n+            generate_getter_mut,\n+            r#\"\n+pub(crate) struct Context<T: Clone> {\n+    dat$0a: T,\n+}\"#,\n+            r#\"\n+pub(crate) struct Context<T: Clone> {\n+    data: T,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a mutable reference to the context's data.\n+    pub(crate) fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_multiple_generate_getter_mut() {\n+        check_assist(\n+            generate_getter_mut,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+    cou$0nt: usize,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a mutable reference to the context's data.\n+    fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+}\"#,\n+            r#\"\n+struct Context<T: Clone> {\n+    data: T,\n+    count: usize,\n+}\n+\n+impl<T: Clone> Context<T> {\n+    /// Get a mutable reference to the context's data.\n+    fn data_mut(&mut self) -> &mut T {\n+        &mut self.data\n+    }\n+\n+    /// Get a mutable reference to the context's count.\n+    fn count_mut(&mut self) -> &mut usize {\n+        &mut self.count\n+    }\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "821c2eed5468d1ffb235d7d8eaf37c58786c04f0", "filename": "crates/ide_assists/src/handlers/generate_getter_mut.rs", "status": "removed", "additions": 0, "deletions": 195, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/16054887102104208f4a0fc0e75e702b85a2eae8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16054887102104208f4a0fc0e75e702b85a2eae8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_getter_mut.rs?ref=16054887102104208f4a0fc0e75e702b85a2eae8", "patch": "@@ -1,195 +0,0 @@\n-use stdx::{format_to, to_lower_snake_case};\n-use syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n-\n-use crate::{\n-    utils::{find_impl_block_end, find_struct_impl, generate_impl_text},\n-    AssistContext, AssistId, AssistKind, Assists, GroupLabel,\n-};\n-\n-// Assist: generate_getter_mut\n-//\n-// Generate a mut getter method.\n-//\n-// ```\n-// struct Person {\n-//     nam$0e: String,\n-// }\n-// ```\n-// ->\n-// ```\n-// struct Person {\n-//     name: String,\n-// }\n-//\n-// impl Person {\n-//     /// Get a mutable reference to the person's name.\n-//     fn name_mut(&mut self) -> &mut String {\n-//         &mut self.name\n-//     }\n-// }\n-// ```\n-pub(crate) fn generate_getter_mut(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n-    let field = ctx.find_node_at_offset::<ast::RecordField>()?;\n-\n-    let strukt_name = strukt.name()?;\n-    let field_name = field.name()?;\n-    let field_ty = field.ty()?;\n-\n-    // Return early if we've found an existing fn\n-    let fn_name = to_lower_snake_case(&field_name.to_string());\n-    let impl_def = find_struct_impl(\n-        &ctx,\n-        &ast::Adt::Struct(strukt.clone()),\n-        format!(\"{}_mut\", fn_name).as_str(),\n-    )?;\n-\n-    let target = field.syntax().text_range();\n-    acc.add_group(\n-        &GroupLabel(\"Generate getter/setter\".to_owned()),\n-        AssistId(\"generate_getter_mut\", AssistKind::Generate),\n-        \"Generate a mut getter method\",\n-        target,\n-        |builder| {\n-            let mut buf = String::with_capacity(512);\n-            let fn_name_spaced = fn_name.replace('_', \" \");\n-            let strukt_name_spaced =\n-                to_lower_snake_case(&strukt_name.to_string()).replace('_', \" \");\n-\n-            if impl_def.is_some() {\n-                buf.push('\\n');\n-            }\n-\n-            let vis = strukt.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-            format_to!(\n-                buf,\n-                \"    /// Get a mutable reference to the {}'s {}.\n-    {}fn {}_mut(&mut self) -> &mut {} {{\n-        &mut self.{}\n-    }}\",\n-                strukt_name_spaced,\n-                fn_name_spaced,\n-                vis,\n-                fn_name,\n-                field_ty,\n-                fn_name,\n-            );\n-\n-            let start_offset = impl_def\n-                .and_then(|impl_def| find_impl_block_end(impl_def, &mut buf))\n-                .unwrap_or_else(|| {\n-                    buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n-                    strukt.syntax().text_range().end()\n-                });\n-\n-            builder.insert(start_offset, buf);\n-        },\n-    )\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable};\n-\n-    use super::*;\n-\n-    fn check_not_applicable(ra_fixture: &str) {\n-        check_assist_not_applicable(generate_getter_mut, ra_fixture)\n-    }\n-\n-    #[test]\n-    fn test_generate_getter_mut_from_field() {\n-        check_assist(\n-            generate_getter_mut,\n-            r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n-}\"#,\n-            r#\"\n-struct Context<T: Clone> {\n-    data: T,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_generate_getter_mut_already_implemented() {\n-        check_not_applicable(\n-            r#\"\n-struct Context<T: Clone> {\n-    dat$0a: T,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_generate_getter_mut_from_field_with_visibility_marker() {\n-        check_assist(\n-            generate_getter_mut,\n-            r#\"\n-pub(crate) struct Context<T: Clone> {\n-    dat$0a: T,\n-}\"#,\n-            r#\"\n-pub(crate) struct Context<T: Clone> {\n-    data: T,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    pub(crate) fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-}\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn test_multiple_generate_getter_mut() {\n-        check_assist(\n-            generate_getter_mut,\n-            r#\"\n-struct Context<T: Clone> {\n-    data: T,\n-    cou$0nt: usize,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-}\"#,\n-            r#\"\n-struct Context<T: Clone> {\n-    data: T,\n-    count: usize,\n-}\n-\n-impl<T: Clone> Context<T> {\n-    /// Get a mutable reference to the context's data.\n-    fn data_mut(&mut self) -> &mut T {\n-        &mut self.data\n-    }\n-\n-    /// Get a mutable reference to the context's count.\n-    fn count_mut(&mut self) -> &mut usize {\n-        &mut self.count\n-    }\n-}\"#,\n-        );\n-    }\n-}"}, {"sha": "16af72927b02137f440e6d7cdd1c092a17c717b2", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22", "patch": "@@ -206,7 +206,6 @@ mod handlers {\n     mod generate_enum_projection_method;\n     mod generate_from_impl_for_enum;\n     mod generate_function;\n-    mod generate_getter_mut;\n     mod generate_getter;\n     mod generate_impl;\n     mod generate_new;\n@@ -276,8 +275,8 @@ mod handlers {\n             generate_enum_projection_method::generate_enum_try_into_method,\n             generate_from_impl_for_enum::generate_from_impl_for_enum,\n             generate_function::generate_function,\n-            generate_getter_mut::generate_getter_mut,\n             generate_getter::generate_getter,\n+            generate_getter::generate_getter_mut,\n             generate_impl::generate_impl,\n             generate_new::generate_new,\n             generate_setter::generate_setter,"}, {"sha": "2b7c2d581e9afe3bf081bd1db8712bdb5a8f9bc3", "filename": "crates/ide_assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22/crates%2Fide_assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22/crates%2Fide_assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests.rs?ref=4c8259e210bbb6c6c6e4781ce15d42a2f9c43f22", "patch": "@@ -215,8 +215,8 @@ fn assist_order_field_struct() {\n \n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Change visibility to pub(crate)\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate `Deref` impl using `bar`\");\n-    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a getter method\");\n+    assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a mut getter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Generate a setter method\");\n     assert_eq!(assists.next().expect(\"expected assist\").label, \"Add `#[derive]`\");\n }"}]}