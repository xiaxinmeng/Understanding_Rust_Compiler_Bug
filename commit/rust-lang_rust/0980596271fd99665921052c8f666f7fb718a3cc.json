{"sha": "0980596271fd99665921052c8f666f7fb718a3cc", "node_id": "C_kwDOAAsO6NoAKDA5ODA1OTYyNzFmZDk5NjY1OTIxMDUyYzhmNjY2ZjdmYjcxOGEzY2M", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-05T16:13:08Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-05T16:13:08Z"}, "message": "Extract codegen_saturating_int_binop function", "tree": {"sha": "04ccda0f1a0631af8b4592b9cd0341eca17f691e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04ccda0f1a0631af8b4592b9cd0341eca17f691e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0980596271fd99665921052c8f666f7fb718a3cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0980596271fd99665921052c8f666f7fb718a3cc", "html_url": "https://github.com/rust-lang/rust/commit/0980596271fd99665921052c8f666f7fb718a3cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0980596271fd99665921052c8f666f7fb718a3cc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f200fbca10b4cc066120c4d19b58d2f244c6e638", "url": "https://api.github.com/repos/rust-lang/rust/commits/f200fbca10b4cc066120c4d19b58d2f244c6e638", "html_url": "https://github.com/rust-lang/rust/commit/f200fbca10b4cc066120c4d19b58d2f244c6e638"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "e06166d0ab7cd870fee5a529a587a595b31b5f4b", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0980596271fd99665921052c8f666f7fb718a3cc/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0980596271fd99665921052c8f666f7fb718a3cc/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=0980596271fd99665921052c8f666f7fb718a3cc", "patch": "@@ -507,37 +507,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 _ => unreachable!(),\n             };\n \n-            let signed = type_sign(lhs.layout().ty);\n-\n-            let checked_res = crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs);\n-\n-            let (val, has_overflow) = checked_res.load_scalar_pair(fx);\n-            let clif_ty = fx.clif_type(lhs.layout().ty).unwrap();\n-\n-            let (min, max) = type_min_max_value(&mut fx.bcx, clif_ty, signed);\n-\n-            let val = match (intrinsic, signed) {\n-                (sym::saturating_add, false) => fx.bcx.ins().select(has_overflow, max, val),\n-                (sym::saturating_sub, false) => fx.bcx.ins().select(has_overflow, min, val),\n-                (sym::saturating_add, true) => {\n-                    let rhs = rhs.load_scalar(fx);\n-                    let rhs_ge_zero =\n-                        fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n-                    let sat_val = fx.bcx.ins().select(rhs_ge_zero, max, min);\n-                    fx.bcx.ins().select(has_overflow, sat_val, val)\n-                }\n-                (sym::saturating_sub, true) => {\n-                    let rhs = rhs.load_scalar(fx);\n-                    let rhs_ge_zero =\n-                        fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n-                    let sat_val = fx.bcx.ins().select(rhs_ge_zero, min, max);\n-                    fx.bcx.ins().select(has_overflow, sat_val, val)\n-                }\n-                _ => unreachable!(),\n-            };\n-\n-            let res = CValue::by_val(val, lhs.layout());\n-\n+            let res = crate::num::codegen_saturating_int_binop(fx, bin_op, lhs, rhs);\n             ret.write_cvalue(fx, res);\n         }\n         sym::rotate_left => {"}, {"sha": "4fadbf24d8a83ae50657d44b08726ef2726a18f4", "filename": "src/num.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0980596271fd99665921052c8f666f7fb718a3cc/src%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0980596271fd99665921052c8f666f7fb718a3cc/src%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnum.rs?ref=0980596271fd99665921052c8f666f7fb718a3cc", "patch": "@@ -309,6 +309,42 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n     CValue::by_val_pair(res, has_overflow, out_layout)\n }\n \n+pub(crate) fn codegen_saturating_int_binop<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    bin_op: BinOp,\n+    lhs: CValue<'tcx>,\n+    rhs: CValue<'tcx>,\n+) -> CValue<'tcx> {\n+    assert_eq!(lhs.layout().ty, rhs.layout().ty);\n+\n+    let signed = type_sign(lhs.layout().ty);\n+    let clif_ty = fx.clif_type(lhs.layout().ty).unwrap();\n+    let (min, max) = type_min_max_value(&mut fx.bcx, clif_ty, signed);\n+\n+    let checked_res = crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs);\n+    let (val, has_overflow) = checked_res.load_scalar_pair(fx);\n+\n+    let val = match (bin_op, signed) {\n+        (BinOp::Add, false) => fx.bcx.ins().select(has_overflow, max, val),\n+        (BinOp::Sub, false) => fx.bcx.ins().select(has_overflow, min, val),\n+        (BinOp::Add, true) => {\n+            let rhs = rhs.load_scalar(fx);\n+            let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+            let sat_val = fx.bcx.ins().select(rhs_ge_zero, max, min);\n+            fx.bcx.ins().select(has_overflow, sat_val, val)\n+        }\n+        (BinOp::Sub, true) => {\n+            let rhs = rhs.load_scalar(fx);\n+            let rhs_ge_zero = fx.bcx.ins().icmp_imm(IntCC::SignedGreaterThanOrEqual, rhs, 0);\n+            let sat_val = fx.bcx.ins().select(rhs_ge_zero, min, max);\n+            fx.bcx.ins().select(has_overflow, sat_val, val)\n+        }\n+        _ => unreachable!(),\n+    };\n+\n+    CValue::by_val(val, lhs.layout())\n+}\n+\n pub(crate) fn codegen_float_binop<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     bin_op: BinOp,"}]}