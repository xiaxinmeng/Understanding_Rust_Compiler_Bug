{"sha": "28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZWYyZWE0Zjk4ZTdlNWM0ZTFkZjczZTJlMTIwZGVhN2QyNzkzNTc=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-30T14:26:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-30T14:26:07Z"}, "message": "Merge #2687\n\n2687: Move matching brace to new Ctx r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "12032141b5a113aca0a05ce2ebb3da55ce87f7f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12032141b5a113aca0a05ce2ebb3da55ce87f7f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCgj/CRBK7hj4Ov3rIwAAdHIIAJzx0aoYyn8VA30vc48LPedU\nEuVOBuqJbpK8V21i+82N4pkPDQf/rF9vvvdohushhSD7E4Su1685wkPkzUTA/XfH\nOYXB6kIFLye51AfCtg05PaU2zSFqWyktAvefYpvzxyajL7ny+AgUQGYAWxTplBcn\ntqVXh0yvmaDvMifEjzCX/Pw5kN7e1m25ZDmG2OedH2CHnJXkG9LhUip73uzEh+9T\nXSDGnl4ItxMUyy0cPsCsY3cp8UCAlE6Q+m1QRLbeV7TmwuK2SE3R7479UirkHgtQ\nlBNyKVliVSZFCgzdynbvrH7KAG5yC4udDc9nhROwQ2oCgYGlK0NeRQ0eZ2EYXhk=\n=VvTO\n-----END PGP SIGNATURE-----\n", "payload": "tree 12032141b5a113aca0a05ce2ebb3da55ce87f7f9\nparent 9cad88dd95773f9ede6233fd7d0f3a076c5cda61\nparent 5dd9edaeafde3d5b5975cefe8dc1a65ccd9cd59f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577715967 +0000\ncommitter GitHub <noreply@github.com> 1577715967 +0000\n\nMerge #2687\n\n2687: Move matching brace to new Ctx r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "html_url": "https://github.com/rust-lang/rust/commit/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cad88dd95773f9ede6233fd7d0f3a076c5cda61", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cad88dd95773f9ede6233fd7d0f3a076c5cda61", "html_url": "https://github.com/rust-lang/rust/commit/9cad88dd95773f9ede6233fd7d0f3a076c5cda61"}, {"sha": "5dd9edaeafde3d5b5975cefe8dc1a65ccd9cd59f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dd9edaeafde3d5b5975cefe8dc1a65ccd9cd59f", "html_url": "https://github.com/rust-lang/rust/commit/5dd9edaeafde3d5b5975cefe8dc1a65ccd9cd59f"}], "stats": {"total": 162, "additions": 110, "deletions": 52}, "files": [{"sha": "806ebdb81710876e21b924031ad2ce9694d54c68", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "patch": "@@ -534,6 +534,12 @@\n             \"integrity\": \"sha1-elfrVQpng/kRUzH89GY9XI4AelA=\",\n             \"dev\": true\n         },\n+        \"prettier\": {\n+            \"version\": \"1.19.1\",\n+            \"resolved\": \"https://registry.npmjs.org/prettier/-/prettier-1.19.1.tgz\",\n+            \"integrity\": \"sha512-s7PoyDv/II1ObgQunCbB9PdLmUcBZcnWOcxDh7O0N/UwDEsHyqkW+Qh28jW+mVuCdx7gLB0BotYI1Y6uI9iyew==\",\n+            \"dev\": true\n+        },\n         \"read\": {\n             \"version\": \"1.0.7\",\n             \"resolved\": \"https://registry.npmjs.org/read/-/read-1.0.7.tgz\","}, {"sha": "6662747f65b94da1862a71853c73c79daa453900", "filename": "editors/code/package.json", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "patch": "@@ -18,24 +18,31 @@\n     \"scripts\": {\n         \"vscode:prepublish\": \"rollup -c\",\n         \"package\": \"vsce package\",\n-        \"watch\": \"tsc -watch -p ./\"\n+        \"watch\": \"tsc -watch -p ./\",\n+        \"prettier\": \"prettier --write **/*.ts\"\n     },\n     \"dependencies\": {\n         \"jsonc-parser\": \"^2.1.0\",\n         \"seedrandom\": \"^3.0.5\",\n         \"vscode-languageclient\": \"^6.0.0-next.9\"\n     },\n     \"devDependencies\": {\n-        \"rollup\": \"^1.27.14\",\n         \"@rollup/plugin-commonjs\": \"^11.0.0\",\n         \"@rollup/plugin-node-resolve\": \"^6.0.0\",\n         \"@rollup/plugin-typescript\": \"^2.0.1\",\n-        \"typescript\": \"^3.7.3\",\n-        \"tslib\": \"^1.10.0\",\n-        \"vsce\": \"^1.71.0\",\n         \"@types/node\": \"^12.12.21\",\n         \"@types/seedrandom\": \"^2.4.28\",\n-        \"@types/vscode\": \"^1.41.0\"\n+        \"@types/vscode\": \"^1.41.0\",\n+        \"prettier\": \"^1.19.1\",\n+        \"rollup\": \"^1.27.14\",\n+        \"tslib\": \"^1.10.0\",\n+        \"typescript\": \"^3.7.3\",\n+        \"vsce\": \"^1.71.0\"\n+    },\n+    \"prettier\": {\n+        \"singleQuote\": true,\n+        \"tabWidth\": 4,\n+        \"trailingComma\": \"all\"\n     },\n     \"activationEvents\": [\n         \"onLanguage:rust\","}, {"sha": "c9d32fe070a4344985e09453eb4b011c6809b65d", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "patch": "@@ -1,19 +1,19 @@\n import * as vscode from 'vscode';\n-import { Server } from '../server';\n+import { Ctx, Cmd } from '../ctx';\n // Shows status of rust-analyzer (for debugging)\n \n-export function makeCommand(context: vscode.ExtensionContext) {\n+export function analyzerStatus(ctx: Ctx): Cmd {\n     let poller: NodeJS.Timer | null = null;\n-    const tdcp = new TextDocumentContentProvider();\n+    const tdcp = new TextDocumentContentProvider(ctx);\n \n-    context.subscriptions.push(\n+    ctx.pushCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer-status',\n             tdcp,\n         ),\n     );\n \n-    context.subscriptions.push({\n+    ctx.pushCleanup({\n         dispose() {\n             if (poller != null) {\n                 clearInterval(poller);\n@@ -39,17 +39,24 @@ export function makeCommand(context: vscode.ExtensionContext) {\n \n class TextDocumentContentProvider\n     implements vscode.TextDocumentContentProvider {\n+\n     uri = vscode.Uri.parse('rust-analyzer-status://status');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n+    ctx: Ctx\n+\n+    constructor(ctx: Ctx) {\n+        this.ctx = ctx\n+    }\n+\n     provideTextDocumentContent(\n         _uri: vscode.Uri,\n     ): vscode.ProviderResult<string> {\n         const editor = vscode.window.activeTextEditor;\n         if (editor == null) {\n             return '';\n         }\n-        return Server.client.sendRequest<string>(\n+        return this.ctx.client.sendRequest<string>(\n             'rust-analyzer/analyzerStatus',\n             null,\n         );"}, {"sha": "9d9b9c5754994360a550f99483a1d908b96d3d26", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "patch": "@@ -1,14 +1,20 @@\n-import * as analyzerStatus from './analyzer_status';\n+import { Ctx, Cmd } from '../ctx'\n+\n+import { analyzerStatus } from './analyzer_status';\n+import { matchingBrace } from './matching_brace';\n import * as applySourceChange from './apply_source_change';\n import * as expandMacro from './expand_macro';\n import * as inlayHints from './inlay_hints';\n import * as joinLines from './join_lines';\n-import * as matchingBrace from './matching_brace';\n import * as onEnter from './on_enter';\n import * as parentModule from './parent_module';\n import * as runnables from './runnables';\n import * as syntaxTree from './syntaxTree';\n \n+function collectGarbage(ctx: Ctx): Cmd {\n+    return async () => { ctx.client.sendRequest<null>('rust-analyzer/collectGarbage', null) }\n+}\n+\n export {\n     analyzerStatus,\n     applySourceChange,\n@@ -20,4 +26,5 @@ export {\n     syntaxTree,\n     onEnter,\n     inlayHints,\n+    collectGarbage\n };"}, {"sha": "665b0c33cc412fd62784082fa2a7d1fc2c37817f", "filename": "editors/code/src/commands/matching_brace.ts", "status": "modified", "additions": 26, "deletions": 27, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "raw_url": "https://github.com/rust-lang/rust/raw/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fmatching_brace.ts?ref=28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "patch": "@@ -1,34 +1,33 @@\n import * as vscode from 'vscode';\n-\n import { Position, TextDocumentIdentifier } from 'vscode-languageclient';\n-import { Server } from '../server';\n+import { Ctx, Cmd } from '../ctx';\n+\n+export function matchingBrace(ctx: Ctx): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) {\n+            return;\n+        }\n+        const request: FindMatchingBraceParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            offsets: editor.selections.map(s => ctx.client.code2ProtocolConverter.asPosition(s.active)),\n+        };\n+        const response = await ctx.client.sendRequest<Position[]>(\n+            'rust-analyzer/findMatchingBrace',\n+            request,\n+        );\n+        editor.selections = editor.selections.map((sel, idx) => {\n+            const active = ctx.client.protocol2CodeConverter.asPosition(\n+                response[idx],\n+            );\n+            const anchor = sel.isEmpty ? active : sel.anchor;\n+            return new vscode.Selection(anchor, active);\n+        });\n+        editor.revealRange(editor.selection);\n+    }\n+}\n \n interface FindMatchingBraceParams {\n     textDocument: TextDocumentIdentifier;\n     offsets: Position[];\n }\n-\n-export async function handle() {\n-    const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') {\n-        return;\n-    }\n-    const request: FindMatchingBraceParams = {\n-        textDocument: { uri: editor.document.uri.toString() },\n-        offsets: editor.selections.map(s => {\n-            return Server.client.code2ProtocolConverter.asPosition(s.active);\n-        }),\n-    };\n-    const response = await Server.client.sendRequest<Position[]>(\n-        'rust-analyzer/findMatchingBrace',\n-        request,\n-    );\n-    editor.selections = editor.selections.map((sel, idx) => {\n-        const active = Server.client.protocol2CodeConverter.asPosition(\n-            response[idx],\n-        );\n-        const anchor = sel.isEmpty ? active : sel.anchor;\n-        return new vscode.Selection(anchor, active);\n-    });\n-    editor.revealRange(editor.selection);\n-}"}, {"sha": "712337fe71c582c92cf6d48220e6b8e44f56c530", "filename": "editors/code/src/ctx.ts", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "patch": "@@ -0,0 +1,35 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n+import { Server } from './server';\n+\n+export class Ctx {\n+    private extCtx: vscode.ExtensionContext;\n+\n+    constructor(extCtx: vscode.ExtensionContext) {\n+        this.extCtx = extCtx;\n+    }\n+\n+    get client(): lc.LanguageClient {\n+        return Server.client;\n+    }\n+\n+    get activeRustEditor(): vscode.TextEditor | undefined {\n+        const editor = vscode.window.activeTextEditor;\n+        return editor && editor.document.languageId === 'rust'\n+            ? editor\n+            : undefined;\n+    }\n+\n+    registerCommand(name: string, factory: (ctx: Ctx) => Cmd) {\n+        const fullName = `rust-analyzer.${name}`;\n+        const cmd = factory(this);\n+        const d = vscode.commands.registerCommand(fullName, cmd);\n+        this.pushCleanup(d);\n+    }\n+\n+    pushCleanup(d: { dispose(): any }) {\n+        this.extCtx.subscriptions.push(d);\n+    }\n+}\n+\n+export type Cmd = (...args: any[]) => any;"}, {"sha": "a4149a0599900debe59db2b20fe76300abf1aed3", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/28ef2ea4f98e7e5c4e1df73e2e120dea7d279357/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=28ef2ea4f98e7e5c4e1df73e2e120dea7d279357", "patch": "@@ -9,8 +9,16 @@ import { StatusDisplay } from './commands/watch_status';\n import * as events from './events';\n import * as notifications from './notifications';\n import { Server } from './server';\n+import { Ctx } from './ctx';\n+\n+let ctx!: Ctx;\n \n export async function activate(context: vscode.ExtensionContext) {\n+    ctx = new Ctx(context);\n+    ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n+    ctx.registerCommand('collectGarbage', commands.collectGarbage);\n+    ctx.registerCommand('matchingBrace', commands.matchingBrace);\n+\n     function disposeOnDeactivation(disposable: vscode.Disposable) {\n         context.subscriptions.push(disposable);\n     }\n@@ -48,17 +56,6 @@ export async function activate(context: vscode.ExtensionContext) {\n     }\n \n     // Commands are requests from vscode to the language server\n-    registerCommand(\n-        'rust-analyzer.analyzerStatus',\n-        commands.analyzerStatus.makeCommand(context),\n-    );\n-    registerCommand('rust-analyzer.collectGarbage', () =>\n-        Server.client.sendRequest<null>('rust-analyzer/collectGarbage', null),\n-    );\n-    registerCommand(\n-        'rust-analyzer.matchingBrace',\n-        commands.matchingBrace.handle,\n-    );\n     registerCommand('rust-analyzer.joinLines', commands.joinLines.handle);\n     registerCommand('rust-analyzer.parentModule', commands.parentModule.handle);\n     registerCommand('rust-analyzer.run', commands.runnables.handle);"}]}