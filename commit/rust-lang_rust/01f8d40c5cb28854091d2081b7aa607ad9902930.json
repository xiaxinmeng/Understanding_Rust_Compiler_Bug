{"sha": "01f8d40c5cb28854091d2081b7aa607ad9902930", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZjhkNDBjNWNiMjg4NTQwOTFkMjA4MWI3YWE2MDdhZDk5MDI5MzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-24T13:58:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-24T13:58:44Z"}, "message": "Merge #8965\n\n8965: internal: intern `TypeBound` and `GenericArgs` r=jonas-schievink a=jonas-schievink\n\nSaves a few MB, but not much\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "aeb89306e864bff3fc612d26ab6242a75b3e3885", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aeb89306e864bff3fc612d26ab6242a75b3e3885"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01f8d40c5cb28854091d2081b7aa607ad9902930", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgq7EUCRBK7hj4Ov3rIwAAMDQIALA9a64+iMmMqfDVN6u6TgzT\nlM5SulEioQ95+humwvBUp+4AZmr8p6MviyJwzZT5U84K70LkXpLPaHd6qce/rink\noxjFZ19PggGptx6sSqZ6qmJEIiJiS6tZ2ssowMoUmNMYtkhrsqsJCEmiDu/NA0Xz\nOFx5NtWzBirXxK+tAewKImSYg85iKXA6mHglFAvIYcdyg5+cuQciBkA9Sxap3fsE\n2wSDBRp+O3MgULA0KBeB0/pv05zwgQiwIYh3QJIvjCJeIm30igt4NbIUtTN8hUQ4\neqvNDprt5ZIgvr5ip+tiw5FOMR25ngd9vY07ougrKz49PjgBOZWsHBRecHQ4bqQ=\n=nR72\n-----END PGP SIGNATURE-----\n", "payload": "tree aeb89306e864bff3fc612d26ab6242a75b3e3885\nparent 05fc97e31b1d04bf5d5885edd98a1510f0931a62\nparent 533e9207d39c27dc22de2645fc65891189a71739\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621864724 +0000\ncommitter GitHub <noreply@github.com> 1621864724 +0000\n\nMerge #8965\n\n8965: internal: intern `TypeBound` and `GenericArgs` r=jonas-schievink a=jonas-schievink\n\nSaves a few MB, but not much\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01f8d40c5cb28854091d2081b7aa607ad9902930", "html_url": "https://github.com/rust-lang/rust/commit/01f8d40c5cb28854091d2081b7aa607ad9902930", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01f8d40c5cb28854091d2081b7aa607ad9902930/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05fc97e31b1d04bf5d5885edd98a1510f0931a62", "url": "https://api.github.com/repos/rust-lang/rust/commits/05fc97e31b1d04bf5d5885edd98a1510f0931a62", "html_url": "https://github.com/rust-lang/rust/commit/05fc97e31b1d04bf5d5885edd98a1510f0931a62"}, {"sha": "533e9207d39c27dc22de2645fc65891189a71739", "url": "https://api.github.com/repos/rust-lang/rust/commits/533e9207d39c27dc22de2645fc65891189a71739", "html_url": "https://github.com/rust-lang/rust/commit/533e9207d39c27dc22de2645fc65891189a71739"}], "stats": {"total": 97, "additions": 59, "deletions": 38}, "files": [{"sha": "c5cf803fd339b0c4fe686698a6b1e6cfce0ac3e7", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -92,7 +92,7 @@ impl HirDisplay for Function {\n             &data.ret_type\n         } else {\n             match &*data.ret_type {\n-                TypeRef::ImplTrait(bounds) => match &bounds[0] {\n+                TypeRef::ImplTrait(bounds) => match bounds[0].as_ref() {\n                     TypeBound::Path(path) => {\n                         path.segments().iter().last().unwrap().args_and_bindings.unwrap().bindings\n                             [0]"}, {"sha": "8bcac60ef55387aa21f0b9fe9974367f3ce4a7d6", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -112,7 +112,7 @@ pub struct TypeAliasData {\n     pub visibility: RawVisibility,\n     pub is_extern: bool,\n     /// Bounds restricting the type alias itself (eg. `type Ty: Bound;` in a trait or impl).\n-    pub bounds: Vec<TypeBound>,\n+    pub bounds: Vec<Interned<TypeBound>>,\n }\n \n impl TypeAliasData {\n@@ -141,7 +141,7 @@ pub struct TraitData {\n     pub is_auto: bool,\n     pub is_unsafe: bool,\n     pub visibility: RawVisibility,\n-    pub bounds: Box<[TypeBound]>,\n+    pub bounds: Box<[Interned<TypeBound>]>,\n }\n \n impl TraitData {"}, {"sha": "44d22b918704c6fcbccae4b3506963601bdf165f", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -68,9 +68,19 @@ pub struct GenericParams {\n /// associated type bindings like `Iterator<Item = u32>`.\n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub enum WherePredicate {\n-    TypeBound { target: WherePredicateTypeTarget, bound: TypeBound },\n-    Lifetime { target: LifetimeRef, bound: LifetimeRef },\n-    ForLifetime { lifetimes: Box<[Name]>, target: WherePredicateTypeTarget, bound: TypeBound },\n+    TypeBound {\n+        target: WherePredicateTypeTarget,\n+        bound: Interned<TypeBound>,\n+    },\n+    Lifetime {\n+        target: LifetimeRef,\n+        bound: LifetimeRef,\n+    },\n+    ForLifetime {\n+        lifetimes: Box<[Name]>,\n+        target: WherePredicateTypeTarget,\n+        bound: Interned<TypeBound>,\n+    },\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n@@ -339,11 +349,11 @@ impl GenericParams {\n                 Some(hrtb_lifetimes) => WherePredicate::ForLifetime {\n                     lifetimes: hrtb_lifetimes.clone(),\n                     target: WherePredicateTypeTarget::TypeRef(Interned::new(type_ref)),\n-                    bound,\n+                    bound: Interned::new(bound),\n                 },\n                 None => WherePredicate::TypeBound {\n                     target: WherePredicateTypeTarget::TypeRef(Interned::new(type_ref)),\n-                    bound,\n+                    bound: Interned::new(bound),\n                 },\n             },\n             (Either::Right(lifetime), TypeBound::Lifetime(bound)) => {"}, {"sha": "1189c9327d631713a86ce6968313aa57031bd9ce", "filename": "crates/hir_def/src/intern.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fintern.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -216,7 +216,9 @@ pub use crate::_impl_internable as impl_internable;\n impl_internable!(\n     crate::type_ref::TypeRef,\n     crate::type_ref::TraitRef,\n+    crate::type_ref::TypeBound,\n     crate::path::ModPath,\n+    crate::path::GenericArgs,\n     GenericParams,\n     str,\n );"}, {"sha": "11767d100f9c7416a3dba2f7c2a4768080d55a3b", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -644,7 +644,7 @@ pub struct Trait {\n     pub generic_params: Interned<GenericParams>,\n     pub is_auto: bool,\n     pub is_unsafe: bool,\n-    pub bounds: Box<[TypeBound]>,\n+    pub bounds: Box<[Interned<TypeBound>]>,\n     pub items: Box<[AssocItem]>,\n     pub ast_id: FileAstId<ast::Trait>,\n }\n@@ -664,7 +664,7 @@ pub struct TypeAlias {\n     pub name: Name,\n     pub visibility: RawVisibilityId,\n     /// Bounds on the type alias itself. Only valid in trait declarations, eg. `type Assoc: Copy;`.\n-    pub bounds: Box<[TypeBound]>,\n+    pub bounds: Box<[Interned<TypeBound>]>,\n     pub generic_params: Interned<GenericParams>,\n     pub type_ref: Option<Interned<TypeRef>>,\n     pub is_extern: bool,"}, {"sha": "b4389371fbba1beed83af1c3d58b7ae80a5e712b", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -384,7 +384,7 @@ impl<'a> Ctx<'a> {\n \n         let ret_type = if func.async_token().is_some() {\n             let future_impl = desugar_future_path(ret_type);\n-            let ty_bound = TypeBound::Path(future_impl);\n+            let ty_bound = Interned::new(TypeBound::Path(future_impl));\n             TypeRef::ImplTrait(vec![ty_bound])\n         } else {\n             ret_type\n@@ -738,11 +738,12 @@ impl<'a> Ctx<'a> {\n         Interned::new(generics)\n     }\n \n-    fn lower_type_bounds(&mut self, node: &impl ast::TypeBoundsOwner) -> Vec<TypeBound> {\n+    fn lower_type_bounds(&mut self, node: &impl ast::TypeBoundsOwner) -> Vec<Interned<TypeBound>> {\n         match node.type_bound_list() {\n-            Some(bound_list) => {\n-                bound_list.bounds().map(|it| TypeBound::from_ast(&self.body_ctx, it)).collect()\n-            }\n+            Some(bound_list) => bound_list\n+                .bounds()\n+                .map(|it| Interned::new(TypeBound::from_ast(&self.body_ctx, it)))\n+                .collect(),\n             None => Vec::new(),\n         }\n     }\n@@ -810,7 +811,7 @@ fn desugar_future_path(orig: TypeRef) -> Path {\n     let binding =\n         AssociatedTypeBinding { name: name![Output], type_ref: Some(orig), bounds: Vec::new() };\n     last.bindings.push(binding);\n-    generic_args.push(Some(Arc::new(last)));\n+    generic_args.push(Some(Interned::new(last)));\n \n     Path::from_known_path(path, generic_args)\n }"}, {"sha": "9394a5de66b547bac1f8980fd39fdbaa67a3f06e", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -513,13 +513,13 @@ impl<'a> Printer<'a> {\n         }\n     }\n \n-    fn print_type_bounds(&mut self, bounds: &[TypeBound]) {\n+    fn print_type_bounds(&mut self, bounds: &[Interned<TypeBound>]) {\n         for (i, bound) in bounds.iter().enumerate() {\n             if i != 0 {\n                 w!(self, \" + \");\n             }\n \n-            match bound {\n+            match bound.as_ref() {\n                 TypeBound::Path(path) => self.print_path(path),\n                 TypeBound::Lifetime(lt) => w!(self, \"{}\", lt.name),\n                 TypeBound::Error => w!(self, \"{{unknown}}\"),"}, {"sha": "45ab9d0ffbfc72f7027fe5325e93fd7e73579888", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -4,7 +4,6 @@ mod lower;\n use std::{\n     fmt::{self, Display},\n     iter,\n-    sync::Arc,\n };\n \n use crate::{body::LowerCtx, db::DefDatabase, intern::Interned, type_ref::LifetimeRef};\n@@ -136,7 +135,7 @@ pub struct Path {\n     type_anchor: Option<Interned<TypeRef>>,\n     mod_path: Interned<ModPath>,\n     /// Invariant: the same len as `self.mod_path.segments`\n-    generic_args: Vec<Option<Arc<GenericArgs>>>,\n+    generic_args: Vec<Option<Interned<GenericArgs>>>,\n }\n \n /// Generic arguments to a path segment (e.g. the `i32` in `Option<i32>`). This\n@@ -165,7 +164,7 @@ pub struct AssociatedTypeBinding {\n     /// Bounds for the associated type, like in `Iterator<Item:\n     /// SomeOtherTrait>`. (This is the unstable `associated_type_bounds`\n     /// feature.)\n-    pub bounds: Vec<TypeBound>,\n+    pub bounds: Vec<Interned<TypeBound>>,\n }\n \n /// A single generic argument.\n@@ -185,7 +184,7 @@ impl Path {\n     /// Converts a known mod path to `Path`.\n     pub(crate) fn from_known_path(\n         path: ModPath,\n-        generic_args: Vec<Option<Arc<GenericArgs>>>,\n+        generic_args: Vec<Option<Interned<GenericArgs>>>,\n     ) -> Path {\n         Path { type_anchor: None, mod_path: Interned::new(path), generic_args }\n     }\n@@ -239,7 +238,7 @@ pub struct PathSegment<'a> {\n \n pub struct PathSegments<'a> {\n     segments: &'a [Name],\n-    generic_args: &'a [Option<Arc<GenericArgs>>],\n+    generic_args: &'a [Option<Interned<GenericArgs>>],\n }\n \n impl<'a> PathSegments<'a> {"}, {"sha": "5d5dd9c8f8a8159538e87f88f40f8fcac7ada5e7", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -3,7 +3,6 @@\n mod lower_use;\n \n use crate::intern::Interned;\n-use std::sync::Arc;\n \n use either::Either;\n use hir_expand::name::{name, AsName};\n@@ -48,7 +47,7 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n                                     segment.ret_type(),\n                                 )\n                             })\n-                            .map(Arc::new);\n+                            .map(Interned::new);\n                         segments.push(name);\n                         generic_args.push(args)\n                     }\n@@ -87,13 +86,13 @@ pub(super) fn lower_path(mut path: ast::Path, ctx: &LowerCtx) -> Option<Path> {\n                         // Insert the type reference (T in the above example) as Self parameter for the trait\n                         let last_segment =\n                             generic_args.iter_mut().rev().nth(num_segments.saturating_sub(1))?;\n-                        if last_segment.is_none() {\n-                            *last_segment = Some(Arc::new(GenericArgs::empty()));\n+                        let mut args_inner = match last_segment {\n+                            Some(it) => it.as_ref().clone(),\n+                            None => GenericArgs::empty(),\n                         };\n-                        let args = last_segment.as_mut().unwrap();\n-                        let mut args_inner = Arc::make_mut(args);\n                         args_inner.has_self_type = true;\n                         args_inner.args.insert(0, GenericArg::Type(self_type));\n+                        *last_segment = Some(Interned::new(args_inner));\n                     }\n                 }\n             }\n@@ -171,7 +170,9 @@ pub(super) fn lower_generic_args(\n                     let name = name_ref.as_name();\n                     let type_ref = assoc_type_arg.ty().map(|it| TypeRef::from_ast(lower_ctx, it));\n                     let bounds = if let Some(l) = assoc_type_arg.type_bound_list() {\n-                        l.bounds().map(|it| TypeBound::from_ast(lower_ctx, it)).collect()\n+                        l.bounds()\n+                            .map(|it| Interned::new(TypeBound::from_ast(lower_ctx, it)))\n+                            .collect()\n                     } else {\n                         Vec::new()\n                     };"}, {"sha": "cbde6b94026ed3e7a9306092f5c6cb5edb00554f", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -5,7 +5,7 @@ use hir_expand::{name::Name, AstId, InFile};\n use std::convert::TryInto;\n use syntax::ast;\n \n-use crate::{body::LowerCtx, path::Path};\n+use crate::{body::LowerCtx, intern::Interned, path::Path};\n \n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub enum Mutability {\n@@ -91,8 +91,8 @@ pub enum TypeRef {\n     /// A fn pointer. Last element of the vector is the return type.\n     Fn(Vec<TypeRef>, bool /*varargs*/),\n     // For\n-    ImplTrait(Vec<TypeBound>),\n-    DynTrait(Vec<TypeBound>),\n+    ImplTrait(Vec<Interned<TypeBound>>),\n+    DynTrait(Vec<Interned<TypeBound>>),\n     Macro(AstId<ast::MacroCall>),\n     Error,\n }\n@@ -232,7 +232,7 @@ impl TypeRef {\n                 | TypeRef::Slice(type_ref) => go(&type_ref, f),\n                 TypeRef::ImplTrait(bounds) | TypeRef::DynTrait(bounds) => {\n                     for bound in bounds {\n-                        match bound {\n+                        match bound.as_ref() {\n                             TypeBound::Path(path) => go_path(path, f),\n                             TypeBound::Lifetime(_) | TypeBound::Error => (),\n                         }\n@@ -262,7 +262,7 @@ impl TypeRef {\n                             go(type_ref, f);\n                         }\n                         for bound in &binding.bounds {\n-                            match bound {\n+                            match bound.as_ref() {\n                                 TypeBound::Path(path) => go_path(path, f),\n                                 TypeBound::Lifetime(_) | TypeBound::Error => (),\n                             }\n@@ -277,9 +277,9 @@ impl TypeRef {\n pub(crate) fn type_bounds_from_ast(\n     lower_ctx: &LowerCtx,\n     type_bounds_opt: Option<ast::TypeBoundList>,\n-) -> Vec<TypeBound> {\n+) -> Vec<Interned<TypeBound>> {\n     if let Some(type_bounds) = type_bounds_opt {\n-        type_bounds.bounds().map(|it| TypeBound::from_ast(lower_ctx, it)).collect()\n+        type_bounds.bounds().map(|it| Interned::new(TypeBound::from_ast(lower_ctx, it))).collect()\n     } else {\n         vec![]\n     }"}, {"sha": "637bbc634d52adc19d6966a8fbbb74336b1e98bb", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -13,6 +13,7 @@ use hir_def::{\n     db::DefDatabase,\n     find_path,\n     generics::TypeParamProvenance,\n+    intern::{Internable, Interned},\n     item_scope::ItemInNs,\n     path::{Path, PathKind},\n     type_ref::{TypeBound, TypeRef},\n@@ -256,6 +257,12 @@ impl<T: HirDisplay> HirDisplay for &'_ T {\n     }\n }\n \n+impl<T: HirDisplay + Internable> HirDisplay for Interned<T> {\n+    fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n+        HirDisplay::hir_fmt(self.as_ref(), f)\n+    }\n+}\n+\n impl HirDisplay for ProjectionTy {\n     fn hir_fmt(&self, f: &mut HirFormatter) -> Result<(), HirDisplayError> {\n         if f.should_truncate() {"}, {"sha": "1645ac53356acc27476da30172cf1ad73192f009", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01f8d40c5cb28854091d2081b7aa607ad9902930/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=01f8d40c5cb28854091d2081b7aa607ad9902930", "patch": "@@ -10,6 +10,7 @@ use std::{iter, sync::Arc};\n \n use base_db::CrateId;\n use chalk_ir::{cast::Cast, fold::Shift, interner::HasInterner, Mutability, Safety};\n+use hir_def::intern::Interned;\n use hir_def::{\n     adt::StructKind,\n     body::{Expander, LowerCtx},\n@@ -843,7 +844,7 @@ impl<'a> TyLoweringContext<'a> {\n             })\n     }\n \n-    fn lower_impl_trait(&self, bounds: &[TypeBound]) -> ReturnTypeImplTrait {\n+    fn lower_impl_trait(&self, bounds: &[Interned<TypeBound>]) -> ReturnTypeImplTrait {\n         cov_mark::hit!(lower_rpit);\n         let self_ty =\n             TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, 0)).intern(&Interner);"}]}