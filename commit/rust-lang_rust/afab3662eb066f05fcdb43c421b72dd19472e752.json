{"sha": "afab3662eb066f05fcdb43c421b72dd19472e752", "node_id": "C_kwDOAAsO6NoAKGFmYWIzNjYyZWIwNjZmMDVmY2RiNDNjNDIxYjcyZGQxOTQ3MmU3NTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-06T21:28:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-06T21:28:34Z"}, "message": "Auto merge of #112361 - matthiaskrgr:rollup-39zxrw1, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #111250 (Add Terminator conversion from MIR to SMIR, part #2)\n - #112310 (Add new Tier-3 targets: `loongarch64-unknown-none*`)\n - #112334 (Add myself to highfive rotation)\n - #112340 (remove `TyCtxt::has_error_field` helper method)\n - #112343 (Prevent emitting `missing_docs` for `pub extern crate`)\n - #112350 (Avoid duplicate type sanitization of local decls in borrowck)\n - #112356 (Fix comment for `get_region_var_origins`)\n - #112358 (Remove default visitor impl in region constraint generation)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a7cc7de7407bae8db4a4f451656be994d09911cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7cc7de7407bae8db4a4f451656be994d09911cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afab3662eb066f05fcdb43c421b72dd19472e752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afab3662eb066f05fcdb43c421b72dd19472e752", "html_url": "https://github.com/rust-lang/rust/commit/afab3662eb066f05fcdb43c421b72dd19472e752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afab3662eb066f05fcdb43c421b72dd19472e752/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2b34bd83192c3d16c88655158f7d8d612513e88", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2b34bd83192c3d16c88655158f7d8d612513e88", "html_url": "https://github.com/rust-lang/rust/commit/b2b34bd83192c3d16c88655158f7d8d612513e88"}, {"sha": "63e0423cde981cc25d34421bf7b3347ea27163f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e0423cde981cc25d34421bf7b3347ea27163f3", "html_url": "https://github.com/rust-lang/rust/commit/63e0423cde981cc25d34421bf7b3347ea27163f3"}], "stats": {"total": 274, "additions": 188, "deletions": 86}, "files": [{"sha": "743d117e00f2ba19a0515d7c957db4ab4809b3b1", "filename": "compiler/rustc_borrowck/src/constraint_generation.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraint_generation.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -4,8 +4,8 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::visit::TyContext;\n use rustc_middle::mir::visit::Visitor;\n use rustc_middle::mir::{\n-    BasicBlock, BasicBlockData, Body, Local, Location, Place, PlaceRef, ProjectionElem, Rvalue,\n-    SourceInfo, Statement, StatementKind, Terminator, TerminatorKind, UserTypeProjection,\n+    Body, Local, Location, Place, PlaceRef, ProjectionElem, Rvalue, SourceInfo, Statement,\n+    StatementKind, Terminator, TerminatorKind, UserTypeProjection,\n };\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::visit::TypeVisitable;\n@@ -49,10 +49,6 @@ struct ConstraintGeneration<'cg, 'tcx> {\n }\n \n impl<'cg, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'tcx> {\n-    fn visit_basic_block_data(&mut self, bb: BasicBlock, data: &BasicBlockData<'tcx>) {\n-        self.super_basic_block_data(bb, data);\n-    }\n-\n     /// We sometimes have `substs` within an rvalue, or within a\n     /// call. Make them live at the location where they appear.\n     fn visit_substs(&mut self, substs: &SubstsRef<'tcx>, location: Location) {"}, {"sha": "31e20d7e70993fa5050fb6cfe7ed655b8d984704", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -477,9 +477,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n \n     fn visit_body(&mut self, body: &Body<'tcx>) {\n         self.sanitize_type(&\"return type\", body.return_ty());\n-        for local_decl in &body.local_decls {\n-            self.sanitize_type(local_decl, local_decl.ty);\n-        }\n+        // The types of local_decls are checked above which is called in super_body.\n         self.super_body(body);\n     }\n }"}, {"sha": "a269a7a1d8b1ec341f3809a54cc2764f9aff0e76", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -1745,9 +1745,11 @@ fn check_variances_for_type_defn<'tcx>(\n     item: &hir::Item<'tcx>,\n     hir_generics: &hir::Generics<'_>,\n ) {\n-    let ty = tcx.type_of(item.owner_id).subst_identity();\n-    if tcx.has_error_field(ty) {\n-        return;\n+    let identity_substs = ty::InternalSubsts::identity_for_item(tcx, item.owner_id);\n+    for field in tcx.adt_def(item.owner_id).all_fields() {\n+        if field.ty(tcx, identity_substs).references_error() {\n+            return;\n+        }\n     }\n \n     let ty_predicates = tcx.predicates_of(item.owner_id);"}, {"sha": "f36102fe2ea8cb2bd4a521b1ada5e967b5918bc7", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -1195,15 +1195,15 @@ impl<'tcx> InferCtxt<'tcx> {\n             .var_origin(vid)\n     }\n \n-    /// Takes ownership of the list of variable regions. This implies\n-    /// that all the region constraints have already been taken, and\n-    /// hence that `resolve_regions_and_report_errors` can never be\n-    /// called. This is used only during NLL processing to \"hand off\" ownership\n-    /// of the set of region variables into the NLL region context.\n+    /// Clone the list of variable regions. This is used only during NLL processing\n+    /// to put the set of region variables into the NLL region context.\n     pub fn get_region_var_origins(&self) -> VarInfos {\n         let mut inner = self.inner.borrow_mut();\n         let (var_infos, data) = inner\n             .region_constraint_storage\n+            // We clone instead of taking because borrowck still wants to use\n+            // the inference context after calling this for diagnostics\n+            // and the new trait solver.\n             .clone()\n             .expect(\"regions already resolved\")\n             .with_log(&mut inner.undo_log)"}, {"sha": "8c0956a618deab91095de98013497ee54a624e2b", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -548,8 +548,12 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_item(&mut self, cx: &LateContext<'_>, it: &hir::Item<'_>) {\n         // Previously the Impl and Use types have been excluded from missing docs,\n-        // so we will continue to exclude them for compatibility\n-        if let hir::ItemKind::Impl(..) | hir::ItemKind::Use(..) = it.kind {\n+        // so we will continue to exclude them for compatibility.\n+        //\n+        // The documentation on `ExternCrate` is not used at the moment so no need to warn for it.\n+        if let hir::ItemKind::Impl(..) | hir::ItemKind::Use(..) | hir::ItemKind::ExternCrate(_) =\n+            it.kind\n+        {\n             return;\n         }\n "}, {"sha": "d45e4d595a7cf718959c938723fffbfdd651ec11", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -173,18 +173,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn has_error_field(self, ty: Ty<'tcx>) -> bool {\n-        if let ty::Adt(def, substs) = *ty.kind() {\n-            for field in def.all_fields() {\n-                let field_ty = field.ty(self, substs);\n-                if let ty::Error(_) = field_ty.kind() {\n-                    return true;\n-                }\n-            }\n-        }\n-        false\n-    }\n-\n     /// Attempts to returns the deeply last field of nested structures, but\n     /// does not apply any normalization in its search. Returns the same type\n     /// if input `ty` is not a structure at all."}, {"sha": "478a7db3792dac5da6838171a03b7e01776ad56b", "filename": "compiler/rustc_smir/src/rustc_smir/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_smir%2Fsrc%2Frustc_smir%2Fmod.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -330,10 +330,7 @@ fn rustc_terminator_to_terminator(\n             target: target.as_usize(),\n             unwind: rustc_unwind_to_unwind(unwind),\n         },\n-        Yield { .. } => todo!(),\n-        GeneratorDrop => Terminator::GeneratorDrop,\n-        FalseEdge { .. } => todo!(),\n-        FalseUnwind { .. } => todo!(),\n         InlineAsm { .. } => todo!(),\n+        Yield { .. } | GeneratorDrop | FalseEdge { .. } | FalseUnwind { .. } => unreachable!(),\n     }\n }"}, {"sha": "618250591ad880d7bbdeaddd900c4bd6cfd6152f", "filename": "compiler/rustc_target/src/spec/loongarch64_unknown_none.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -0,0 +1,23 @@\n+use super::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n+use super::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"loongarch64-unknown-none\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"loongarch64\".into(),\n+        options: TargetOptions {\n+            cpu: \"generic\".into(),\n+            features: \"+f,+d\".into(),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::No),\n+            llvm_abiname: \"lp64d\".into(),\n+            max_atomic_width: Some(64),\n+            position_independent_executables: true,\n+            static_position_independent_executables: true,\n+            panic_strategy: PanicStrategy::Abort,\n+            code_model: Some(CodeModel::Small),\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "23123d7630c8b16d63ff0f979739f140700bee1e", "filename": "compiler/rustc_target/src/spec/loongarch64_unknown_none_softfloat.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none_softfloat.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -0,0 +1,24 @@\n+use super::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n+use super::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"loongarch64-unknown-none-softfloat\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"loongarch64\".into(),\n+        options: TargetOptions {\n+            cpu: \"generic\".into(),\n+            features: \"-f,-d\".into(),\n+            abi: \"softfloat\".into(),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::No),\n+            llvm_abiname: \"lp64s\".into(),\n+            max_atomic_width: Some(64),\n+            position_independent_executables: true,\n+            static_position_independent_executables: true,\n+            panic_strategy: PanicStrategy::Abort,\n+            code_model: Some(CodeModel::Small),\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "3dc5dc71674b201fc4684f176d70584aa9773234", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -1294,6 +1294,9 @@ supported_targets! {\n     (\"riscv64gc-unknown-linux-gnu\", riscv64gc_unknown_linux_gnu),\n     (\"riscv64gc-unknown-linux-musl\", riscv64gc_unknown_linux_musl),\n \n+    (\"loongarch64-unknown-none\", loongarch64_unknown_none),\n+    (\"loongarch64-unknown-none-softfloat\", loongarch64_unknown_none_softfloat),\n+\n     (\"aarch64-unknown-none\", aarch64_unknown_none),\n     (\"aarch64-unknown-none-softfloat\", aarch64_unknown_none_softfloat),\n "}, {"sha": "2b0431a159b1bde70fe6389293377e9ccaad678e", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -31,6 +31,7 @@\n     - [\\*-unknown-fuchsia](platform-support/fuchsia.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [loongarch\\*-unknown-linux-\\*](platform-support/loongarch-linux.md)\n+    - [loongarch\\*-unknown-none\\*](platform-support/loongarch-none.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)\n     - [mips64-openwrt-linux-musl](platform-support/mips64-openwrt-linux-musl.md)\n     - [mipsel-sony-psx](platform-support/mipsel-sony-psx.md)"}, {"sha": "f69dcd5983d33c9a5110fe600d6d6c12d0f206c6", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -267,6 +267,8 @@ target | std | host | notes\n `i686-uwp-windows-gnu` | ? |  |\n `i686-uwp-windows-msvc` | ? |  |\n `i686-wrs-vxworks` | ? |  |\n+[`loongarch64-unknown-none`](platform-support/loongarch-none.md) | * | LoongArch64 Bare-metal (LP64D ABI)\n+[`loongarch64-unknown-none-softfloat`](platform-support/loongarch-none.md) | * | LoongArch64 Bare-metal (LP64S ABI)\n [`m68k-unknown-linux-gnu`](platform-support/m68k-unknown-linux-gnu.md) | ? |  | Motorola 680x0 Linux\n `mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n [`mips64-openwrt-linux-musl`](platform-support/mips64-openwrt-linux-musl.md) | ? |  | MIPS64 for OpenWrt Linux MUSL"}, {"sha": "d0ae3425fa8eb8dfb39cc27c4ae12730e5281476", "filename": "src/doc/rustc/src/platform-support/loongarch-none.md", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-none.md", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-none.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-none.md?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -0,0 +1,79 @@\n+# `loongarch*-unknown-none*`\n+\n+**Tier: 3**\n+\n+Freestanding/bare-metal LoongArch64 binaries in ELF format: firmware, kernels, etc.\n+\n+| Target                             | Descriptions                                          |\n+|------------------------------------|-------------------------------------------------------|\n+| loongarch64-unknown-none           | LoongArch 64-bit, LP64D ABI (freestanding, hardfloat) |\n+| loongarch64-unknown-none-softfloat | LoongArch 64-bit, LP64S ABI (freestanding, softfloat) |\n+\n+## Target maintainers\n+\n+- [WANG Rui](https://github.com/heiher) `wangrui@loongson.cn`\n+- [WANG Xuerui](https://github.com/xen0n) `git@xen0n.name`\n+\n+## Requirements\n+\n+This target is cross-compiled. There is no support for `std`. There is no\n+default allocator, but it's possible to use `alloc` by supplying an allocator.\n+\n+This allows the generated code to run in environments, such as kernels, which\n+may need to avoid the use of such registers or which may have special considerations\n+about the use of such registers (e.g. saving and restoring them to avoid breaking\n+userspace code using the same registers). You can change code generation to use\n+additional CPU features via the `-C target-feature=` codegen options to rustc, or\n+via the `#[target_feature]` mechanism within Rust code.\n+\n+By default, code generated with this target should run on any `loongarch`\n+hardware; enabling additional target features may raise this baseline.\n+\n+Code generated with this target will use the `small` code model by default.\n+You can change this using the `-C code-model=` option to rustc.\n+\n+On `loongarch64-unknown-none*`, `extern \"C\"` uses the [standard calling\n+convention](https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html).\n+\n+This target generates binaries in the ELF format. Any alternate formats or\n+special considerations for binary layout will require linker options or linker\n+scripts.\n+\n+## Building the target\n+\n+You can build Rust with support for the target by adding it to the `target`\n+list in `config.toml`:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"loongarch64-unknown-none\"]\n+```\n+\n+## Building Rust programs\n+\n+```text\n+# target flag may be used with any cargo or rustc command\n+cargo build --target loongarch64-unknown-none\n+```\n+\n+## Testing\n+\n+As `loongarch64-unknown-none*` supports a variety of different environments and does\n+not support `std`, this target does not support running the Rust test suite.\n+\n+## Cross-compilation toolchains and C code\n+\n+If you want to compile C code along with Rust (such as for Rust crates with C\n+dependencies), you will need an appropriate `loongarch` toolchain.\n+\n+Rust *may* be able to use an `loongarch64-unknown-linux-gnu-` toolchain with\n+appropriate standalone flags to build for this toolchain (depending on the assumptions\n+of that toolchain, see below), or you may wish to use a separate\n+`loongarch64-unknown-none` toolchain.\n+\n+On some `loongarch` hosts that use ELF binaries, you *may* be able to use the host\n+C toolchain, if it does not introduce assumptions about the host environment\n+that don't match the expectations of a standalone environment. Otherwise, you\n+may need a separate toolchain for standalone/freestanding development, just as\n+when cross-compiling from a non-`loongarch` platform."}, {"sha": "e508890dd7c8bf6adadb63adb1f278f188d2859d", "filename": "tests/ui/const-generics/const-param-type-depends-on-type-param.full.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.full.stderr?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -6,16 +6,6 @@ LL | pub struct Dependent<T, const X: T>([(); X]);\n    |\n    = note: type parameters may not be used in the type of const parameters\n \n-error[E0392]: parameter `T` is never used\n-  --> $DIR/const-param-type-depends-on-type-param.rs:11:22\n-   |\n-LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                      ^ unused parameter\n-   |\n-   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0392, E0770.\n-For more information about an error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "e508890dd7c8bf6adadb63adb1f278f188d2859d", "filename": "tests/ui/const-generics/const-param-type-depends-on-type-param.min.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.min.stderr?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -6,16 +6,6 @@ LL | pub struct Dependent<T, const X: T>([(); X]);\n    |\n    = note: type parameters may not be used in the type of const parameters\n \n-error[E0392]: parameter `T` is never used\n-  --> $DIR/const-param-type-depends-on-type-param.rs:11:22\n-   |\n-LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                      ^ unused parameter\n-   |\n-   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0392, E0770.\n-For more information about an error, try `rustc --explain E0392`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "fc3aa9cbc27c90a9cce5d4c33c6661f9a765a086", "filename": "tests/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -10,6 +10,5 @@\n \n pub struct Dependent<T, const X: T>([(); X]);\n //~^ ERROR: the type of const parameters must not depend on other generic parameters\n-//~| ERROR: parameter `T` is never used\n \n fn main() {}"}, {"sha": "4a835673a596bcd05404f43d34082bf2785f2a9d", "filename": "tests/ui/lint/auxiliary/missing_docs.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Flint%2Fauxiliary%2Fmissing_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Flint%2Fauxiliary%2Fmissing_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fauxiliary%2Fmissing_docs.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -0,0 +1 @@\n+pub struct Foo;"}, {"sha": "b59f2212f51b3a66896ccc1bebf6e1c9461a70a9", "filename": "tests/ui/lint/lint-missing-doc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Flint%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Flint%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-missing-doc.rs?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -1,5 +1,6 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n+// aux-build:missing_docs.rs\n #![deny(missing_docs)]\n #![allow(dead_code)]\n #![feature(associated_type_defaults, extern_types)]\n@@ -8,6 +9,9 @@\n //! Some garbage docs for the crate here\n #![doc=\"More garbage\"]\n \n+// There should be not \"missing_docs\" warning on \"pub extern crate\".\n+pub extern crate missing_docs;\n+\n type Typedef = String;\n pub type PubTypedef = String; //~ ERROR: missing documentation for a type alias\n "}, {"sha": "adcc21c44b26206d716cb5a7a23dcf1f7ee45565", "filename": "tests/ui/lint/lint-missing-doc.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Flint%2Flint-missing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/tests%2Fui%2Flint%2Flint-missing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-missing-doc.stderr?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -1,155 +1,155 @@\n error: missing documentation for a type alias\n-  --> $DIR/lint-missing-doc.rs:12:1\n+  --> $DIR/lint-missing-doc.rs:16:1\n    |\n LL | pub type PubTypedef = String;\n    | ^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/lint-missing-doc.rs:3:9\n+  --> $DIR/lint-missing-doc.rs:4:9\n    |\n LL | #![deny(missing_docs)]\n    |         ^^^^^^^^^^^^\n \n error: missing documentation for a struct\n-  --> $DIR/lint-missing-doc.rs:19:1\n+  --> $DIR/lint-missing-doc.rs:23:1\n    |\n LL | pub struct PubFoo {\n    | ^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/lint-missing-doc.rs:20:5\n+  --> $DIR/lint-missing-doc.rs:24:5\n    |\n LL |     pub a: isize,\n    |     ^^^^^^^^^^^^\n \n error: missing documentation for a module\n-  --> $DIR/lint-missing-doc.rs:31:1\n+  --> $DIR/lint-missing-doc.rs:35:1\n    |\n LL | pub mod pub_module_no_dox {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:35:1\n+  --> $DIR/lint-missing-doc.rs:39:1\n    |\n LL | pub fn foo2() {}\n    | ^^^^^^^^^^^^^\n \n error: missing documentation for a trait\n-  --> $DIR/lint-missing-doc.rs:53:1\n+  --> $DIR/lint-missing-doc.rs:57:1\n    |\n LL | pub trait C {\n    | ^^^^^^^^^^^\n \n error: missing documentation for a method\n-  --> $DIR/lint-missing-doc.rs:54:5\n+  --> $DIR/lint-missing-doc.rs:58:5\n    |\n LL |     fn foo(&self);\n    |     ^^^^^^^^^^^^^^\n \n error: missing documentation for a method\n-  --> $DIR/lint-missing-doc.rs:55:5\n+  --> $DIR/lint-missing-doc.rs:59:5\n    |\n LL |     fn foo_with_impl(&self) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/lint-missing-doc.rs:56:5\n+  --> $DIR/lint-missing-doc.rs:60:5\n    |\n LL |     fn foo_no_self();\n    |     ^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/lint-missing-doc.rs:57:5\n+  --> $DIR/lint-missing-doc.rs:61:5\n    |\n LL |     fn foo_no_self_with_impl() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated type\n-  --> $DIR/lint-missing-doc.rs:67:5\n+  --> $DIR/lint-missing-doc.rs:71:5\n    |\n LL |     type AssociatedType;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated type\n-  --> $DIR/lint-missing-doc.rs:68:5\n+  --> $DIR/lint-missing-doc.rs:72:5\n    |\n LL |     type AssociatedTypeDef = Self;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for an associated function\n-  --> $DIR/lint-missing-doc.rs:84:5\n+  --> $DIR/lint-missing-doc.rs:88:5\n    |\n LL |     pub fn foo() {}\n    |     ^^^^^^^^^^^^\n \n error: missing documentation for an enum\n-  --> $DIR/lint-missing-doc.rs:121:1\n+  --> $DIR/lint-missing-doc.rs:125:1\n    |\n LL | pub enum PubBaz {\n    | ^^^^^^^^^^^^^^^\n \n error: missing documentation for a variant\n-  --> $DIR/lint-missing-doc.rs:122:5\n+  --> $DIR/lint-missing-doc.rs:126:5\n    |\n LL |     PubBazA {\n    |     ^^^^^^^\n \n error: missing documentation for a struct field\n-  --> $DIR/lint-missing-doc.rs:123:9\n+  --> $DIR/lint-missing-doc.rs:127:9\n    |\n LL |         a: isize,\n    |         ^^^^^^^^\n \n error: missing documentation for a constant\n-  --> $DIR/lint-missing-doc.rs:154:1\n+  --> $DIR/lint-missing-doc.rs:158:1\n    |\n LL | pub const FOO4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/lint-missing-doc.rs:164:1\n+  --> $DIR/lint-missing-doc.rs:168:1\n    |\n LL | pub static BAR4: u32 = 0;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:170:5\n+  --> $DIR/lint-missing-doc.rs:174:5\n    |\n LL |     pub fn undocumented1() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:171:5\n+  --> $DIR/lint-missing-doc.rs:175:5\n    |\n LL |     pub fn undocumented2() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:177:9\n+  --> $DIR/lint-missing-doc.rs:181:9\n    |\n LL |         pub fn also_undocumented1() {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a function\n-  --> $DIR/lint-missing-doc.rs:192:5\n+  --> $DIR/lint-missing-doc.rs:196:5\n    |\n LL |     pub fn extern_fn_undocumented(f: f32) -> f32;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a static\n-  --> $DIR/lint-missing-doc.rs:197:5\n+  --> $DIR/lint-missing-doc.rs:201:5\n    |\n LL |     pub static EXTERN_STATIC_UNDOCUMENTED: u8;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a foreign type\n-  --> $DIR/lint-missing-doc.rs:202:5\n+  --> $DIR/lint-missing-doc.rs:206:5\n    |\n LL |     pub type ExternTyUndocumented;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: missing documentation for a trait alias\n-  --> $DIR/lint-missing-doc.rs:206:1\n+  --> $DIR/lint-missing-doc.rs:210:1\n    |\n LL | pub trait T = Sync;\n    | ^^^^^^^^^^^"}, {"sha": "42190061ef90d7a7cc1b1693b9732de1792d4239", "filename": "triagebot.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/afab3662eb066f05fcdb43c421b72dd19472e752/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/afab3662eb066f05fcdb43c421b72dd19472e752/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=afab3662eb066f05fcdb43c421b72dd19472e752", "patch": "@@ -504,6 +504,7 @@ compiler-team-contributors = [\n     \"@TaKO8Ki\",\n     \"@WaffleLapkin\",\n     \"@b-naber\",\n+    \"@fee1-dead\",\n ]\n compiler = [\n     \"compiler-team\","}]}