{"sha": "58f4c0f949b0109bed9fb79149db8344daa37724", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZjRjMGY5NDliMDEwOWJlZDlmYjc5MTQ5ZGI4MzQ0ZGFhMzc3MjQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-09T03:03:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-09T03:03:59Z"}, "message": "Rollup merge of #85715 - fee1-dead:document-string, r=JohnTitor\n\nDocument `From` impls in string.rs", "tree": {"sha": "ca9ab61e5b479fcc73b95442b1d039e939a30882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca9ab61e5b479fcc73b95442b1d039e939a30882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58f4c0f949b0109bed9fb79149db8344daa37724", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwC+gCRBK7hj4Ov3rIwAAlccIAIxDrhfPlOgiTr0LpCqh5TaR\nZJcyDzRrtEvQJR5I4Eb23HhfjoczlRf99voZH1mTx6Ssn4xba0aM+R2D06jsRYzz\nZdN0ZlEcUE8q22/1mAhztq1srDg7AkGG/dKIZKFIEMS/oa3UfF5OI94nRpyOoo6I\nyrweoi3xXotoRwLzbjGp6c3VP8cRroOQL5y37szXmQe/j44tHPskw3dgKyIdYofa\n5eXXY3w/S8sixJ2dRrRI2J0jCUnBRnY71t8eisesDD0TbPUnL1sdUtcTxj6Z1Nrx\nQKa50knawxBVmQ0o6deFuyYbtr0+mW+gpIZ2cebOSrIU6jINBdJIfwwlmWr3eew=\n=pzVA\n-----END PGP SIGNATURE-----\n", "payload": "tree ca9ab61e5b479fcc73b95442b1d039e939a30882\nparent e6763c966c307db2624ebf742da1c648a257e9e4\nparent 25e5a7198640eaf36949a3ca0babf8f75c8a89a9\nauthor Yuki Okushi <jtitor@2k36.org> 1623207839 +0900\ncommitter GitHub <noreply@github.com> 1623207839 +0900\n\nRollup merge of #85715 - fee1-dead:document-string, r=JohnTitor\n\nDocument `From` impls in string.rs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58f4c0f949b0109bed9fb79149db8344daa37724", "html_url": "https://github.com/rust-lang/rust/commit/58f4c0f949b0109bed9fb79149db8344daa37724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58f4c0f949b0109bed9fb79149db8344daa37724/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6763c966c307db2624ebf742da1c648a257e9e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6763c966c307db2624ebf742da1c648a257e9e4", "html_url": "https://github.com/rust-lang/rust/commit/e6763c966c307db2624ebf742da1c648a257e9e4"}, {"sha": "25e5a7198640eaf36949a3ca0babf8f75c8a89a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/25e5a7198640eaf36949a3ca0babf8f75c8a89a9", "html_url": "https://github.com/rust-lang/rust/commit/25e5a7198640eaf36949a3ca0babf8f75c8a89a9"}], "stats": {"total": 50, "additions": 43, "deletions": 7}, "files": [{"sha": "93f5fe45cd6aa28de9313f4ca0da20410800a1b1", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 43, "deletions": 7, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/58f4c0f949b0109bed9fb79149db8344daa37724/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58f4c0f949b0109bed9fb79149db8344daa37724/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=58f4c0f949b0109bed9fb79149db8344daa37724", "patch": "@@ -2491,6 +2491,9 @@ impl AsRef<[u8]> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<&str> for String {\n+    /// Converts a `&str` into a [`String`].\n+    ///\n+    /// The result is allocated on the heap.\n     #[inline]\n     fn from(s: &str) -> String {\n         s.to_owned()\n@@ -2500,7 +2503,7 @@ impl From<&str> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_mut_str_for_string\", since = \"1.44.0\")]\n impl From<&mut str> for String {\n-    /// Converts a `&mut str` into a `String`.\n+    /// Converts a `&mut str` into a [`String`].\n     ///\n     /// The result is allocated on the heap.\n     #[inline]\n@@ -2512,6 +2515,9 @@ impl From<&mut str> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_ref_string\", since = \"1.35.0\")]\n impl From<&String> for String {\n+    /// Converts a `&String` into a [`String`].\n+    ///\n+    /// This clones `s` and returns the clone.\n     #[inline]\n     fn from(s: &String) -> String {\n         s.clone()\n@@ -2522,7 +2528,7 @@ impl From<&String> for String {\n #[cfg(not(test))]\n #[stable(feature = \"string_from_box\", since = \"1.18.0\")]\n impl From<Box<str>> for String {\n-    /// Converts the given boxed `str` slice to a `String`.\n+    /// Converts the given boxed `str` slice to a [`String`].\n     /// It is notable that the `str` slice is owned.\n     ///\n     /// # Examples\n@@ -2544,7 +2550,7 @@ impl From<Box<str>> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"box_from_str\", since = \"1.20.0\")]\n impl From<String> for Box<str> {\n-    /// Converts the given `String` to a boxed `str` slice that is owned.\n+    /// Converts the given [`String`] to a boxed `str` slice that is owned.\n     ///\n     /// # Examples\n     ///\n@@ -2565,6 +2571,22 @@ impl From<String> for Box<str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"string_from_cow_str\", since = \"1.14.0\")]\n impl<'a> From<Cow<'a, str>> for String {\n+    /// Converts a clone-on-write string to an owned\n+    /// instance of [`String`].\n+    ///\n+    /// This extracts the owned string,\n+    /// clones the string if it is not already owned.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// # use std::borrow::Cow;\n+    /// // If the string is not owned...\n+    /// let cow: Cow<str> = Cow::Borrowed(\"eggplant\");\n+    /// // It will allocate on the heap and copy the string.\n+    /// let owned: String = String::from(cow);\n+    /// assert_eq!(&owned[..], \"eggplant\");\n+    /// ```\n     fn from(s: Cow<'a, str>) -> String {\n         s.into_owned()\n     }\n@@ -2573,7 +2595,7 @@ impl<'a> From<Cow<'a, str>> for String {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<&'a str> for Cow<'a, str> {\n-    /// Converts a string slice into a Borrowed variant.\n+    /// Converts a string slice into a [`Borrowed`] variant.\n     /// No heap allocation is performed, and the string\n     /// is not copied.\n     ///\n@@ -2583,6 +2605,8 @@ impl<'a> From<&'a str> for Cow<'a, str> {\n     /// # use std::borrow::Cow;\n     /// assert_eq!(Cow::from(\"eggplant\"), Cow::Borrowed(\"eggplant\"));\n     /// ```\n+    ///\n+    /// [`Borrowed`]: crate::borrow::Cow::Borrowed\n     #[inline]\n     fn from(s: &'a str) -> Cow<'a, str> {\n         Cow::Borrowed(s)\n@@ -2592,7 +2616,7 @@ impl<'a> From<&'a str> for Cow<'a, str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a> From<String> for Cow<'a, str> {\n-    /// Converts a String into an Owned variant.\n+    /// Converts a [`String`] into an [`Owned`] variant.\n     /// No heap allocation is performed, and the string\n     /// is not copied.\n     ///\n@@ -2604,6 +2628,8 @@ impl<'a> From<String> for Cow<'a, str> {\n     /// let s2 = \"eggplant\".to_string();\n     /// assert_eq!(Cow::from(s), Cow::<'static, str>::Owned(s2));\n     /// ```\n+    ///\n+    /// [`Owned`]: crate::borrow::Cow::Owned\n     #[inline]\n     fn from(s: String) -> Cow<'a, str> {\n         Cow::Owned(s)\n@@ -2613,7 +2639,7 @@ impl<'a> From<String> for Cow<'a, str> {\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"cow_from_string_ref\", since = \"1.28.0\")]\n impl<'a> From<&'a String> for Cow<'a, str> {\n-    /// Converts a String reference into a Borrowed variant.\n+    /// Converts a [`String`] reference into a [`Borrowed`] variant.\n     /// No heap allocation is performed, and the string\n     /// is not copied.\n     ///\n@@ -2624,6 +2650,8 @@ impl<'a> From<&'a String> for Cow<'a, str> {\n     /// let s = \"eggplant\".to_string();\n     /// assert_eq!(Cow::from(&s), Cow::Borrowed(\"eggplant\"));\n     /// ```\n+    ///\n+    /// [`Borrowed`]: crate::borrow::Cow::Borrowed\n     #[inline]\n     fn from(s: &'a String) -> Cow<'a, str> {\n         Cow::Borrowed(s.as_str())\n@@ -2656,7 +2684,7 @@ impl<'a> FromIterator<String> for Cow<'a, str> {\n \n #[stable(feature = \"from_string_for_vec_u8\", since = \"1.14.0\")]\n impl From<String> for Vec<u8> {\n-    /// Converts the given `String` to a vector `Vec` that holds values of type `u8`.\n+    /// Converts the given [`String`] to a vector [`Vec`] that holds values of type [`u8`].\n     ///\n     /// # Examples\n     ///\n@@ -2802,6 +2830,14 @@ impl FusedIterator for Drain<'_> {}\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"from_char_for_string\", since = \"1.46.0\")]\n impl From<char> for String {\n+    /// Allocates an owned [`String`] from a single character.\n+    ///\n+    /// # Example\n+    /// ```rust\n+    /// let c: char = 'a';\n+    /// let s: String = String::from(c);\n+    /// assert_eq!(\"a\", &s[..]);\n+    /// ```\n     #[inline]\n     fn from(c: char) -> Self {\n         c.to_string()"}]}