{"sha": "44b13658857441fa8879e43f5e28f15a221f2b8e", "node_id": "C_kwDOAAsO6NoAKDQ0YjEzNjU4ODU3NDQxZmE4ODc5ZTQzZjVlMjhmMTVhMjIxZjJiOGU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-06-05T09:03:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-06-05T18:30:50Z"}, "message": "Add chapter for re-exports in the rustdoc book", "tree": {"sha": "5177a0235b38aba631abcec9ac765a475dd25ae1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5177a0235b38aba631abcec9ac765a475dd25ae1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44b13658857441fa8879e43f5e28f15a221f2b8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44b13658857441fa8879e43f5e28f15a221f2b8e", "html_url": "https://github.com/rust-lang/rust/commit/44b13658857441fa8879e43f5e28f15a221f2b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44b13658857441fa8879e43f5e28f15a221f2b8e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2ec5f8a772cf07dc923fde80a696d307a5bf754", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2ec5f8a772cf07dc923fde80a696d307a5bf754", "html_url": "https://github.com/rust-lang/rust/commit/a2ec5f8a772cf07dc923fde80a696d307a5bf754"}], "stats": {"total": 181, "additions": 180, "deletions": 1}, "files": [{"sha": "12a8b2b8db4b6d24ad2c2f59a3d628615a99e47f", "filename": "src/doc/rustdoc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44b13658857441fa8879e43f5e28f15a221f2b8e/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/44b13658857441fa8879e43f5e28f15a221f2b8e/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2FSUMMARY.md?ref=44b13658857441fa8879e43f5e28f15a221f2b8e", "patch": "@@ -7,6 +7,7 @@\n - [How to write documentation](how-to-write-documentation.md)\n     - [What to include (and exclude)](write-documentation/what-to-include.md)\n     - [The `#[doc]` attribute](write-documentation/the-doc-attribute.md)\n+    - [Re-exports](write-documentation/re-exports.md)\n     - [Linking to items by name](write-documentation/linking-to-items-by-name.md)\n     - [Documentation tests](write-documentation/documentation-tests.md)\n - [Rustdoc-specific lints](lints.md)"}, {"sha": "593428b8a70a5920479d56255a8a5e8e05ccb035", "filename": "src/doc/rustdoc/src/write-documentation/re-exports.md", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/44b13658857441fa8879e43f5e28f15a221f2b8e/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fre-exports.md", "raw_url": "https://github.com/rust-lang/rust/raw/44b13658857441fa8879e43f5e28f15a221f2b8e/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fre-exports.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fre-exports.md?ref=44b13658857441fa8879e43f5e28f15a221f2b8e", "patch": "@@ -0,0 +1,172 @@\n+# Re-exports\n+\n+Let's start by explaining what are re-exports. To do so, we will use an example where we are\n+writing a library (named `lib`) with some types dispatched in sub-modules:\n+\n+```rust\n+pub mod sub_module1 {\n+    pub struct Foo;\n+}\n+pub mod sub_module2 {\n+    pub struct AnotherFoo;\n+}\n+```\n+\n+Users can import them like this:\n+\n+```rust,ignore (inline)\n+use lib::sub_module1::Foo;\n+use lib::sub_module2::AnotherFoo;\n+```\n+\n+But what if you want the types to be available directly at the crate root or if we don't want the\n+modules to be visible for users? That's where re-exports come in:\n+\n+```rust,ignore (inline)\n+// `sub_module1` and `sub_module2` are not visible outside.\n+mod sub_module1 {\n+    pub struct Foo;\n+}\n+mod sub_module2 {\n+    pub struct AnotherFoo;\n+}\n+// We re-export both types:\n+pub use crate::sub_module1::Foo;\n+pub use crate::sub_module2::AnotherFoo;\n+```\n+\n+And now users will be able to do:\n+\n+```rust,ignore (inline)\n+use lib::{Foo, AnotherFoo};\n+```\n+\n+And since both `sub_module1` and `sub_module2` are private, users won't be able to import them.\n+\n+Now what's interesting is that the generated documentation for this crate will show both `Foo` and\n+`AnotherFoo` directly at the crate root, meaning they have been inlined. There are a few rules to\n+know whether or not a re-exported item will be inlined.\n+\n+## Inlining rules\n+\n+If a public item comes from a private module, it will be inlined:\n+\n+```rust,ignore (inline)\n+mod private_module {\n+    pub struct Public;\n+}\n+pub mod public_mod {\n+    // `Public` will inlined here since `private_module` is private.\n+    pub use super::private_module::Public;\n+}\n+// `Public` will not be inlined here since `public_mod` is public.\n+pub use self::public_mod::Public;\n+```\n+\n+Likewise, if an item inherits `#[doc(hidden)]` from any of its ancestors, it will be inlined:\n+\n+```rust,ignore (inline)\n+#[doc(hidden)]\n+pub mod public_mod {\n+    pub struct Public;\n+}\n+// `Public` be inlined since its parent (`public_mod`) has `#[doc(hidden)]`.\n+pub use self::public_mod::Public;\n+```\n+\n+If an item has `#[doc(hidden)]`, it won't be inlined (nor visible in the generated documentation):\n+\n+```rust,ignore (inline)\n+// This struct won't be visible.\n+#[doc(hidden)]\n+pub struct Hidden;\n+\n+// This re-export won't be visible.\n+pub use self::Hidden as InlinedHidden;\n+```\n+\n+The same applies on re-exports themselves: if you have multiple re-exports and some of them have\n+`#[doc(hidden)]`, then these ones (and only these) own't appear in the documentation:\n+\n+```rust,ignore (inline)\n+mod private_mod {\n+    /// First\n+    pub struct InPrivate;\n+}\n+\n+/// Second\n+#[doc(hidden)]\n+pub use self::private_mod::InPrivate as Hidden;\n+/// Third\n+pub use self::Hidden as Visible;\n+```\n+\n+In this case, `InPrivate` will be inlined as `Visible`. However, its documentation will be\n+`First Third` and not `First Second Third` because the re-export with `Second` as documentation has\n+`#[doc(hidden)]`, therefore, all its attributes are ignored.\n+\n+## Inlining with `#[doc(inline)]`\n+\n+You can use the `#[doc(inline)]` attribute if you want to force an item to be inlined:\n+\n+```rust,ignore (inline)\n+pub mod public_mod {\n+    pub struct Public;\n+}\n+#[doc(inline)]\n+pub use self::public_mod::Public;\n+```\n+\n+With this code, even though `public_mod::Public` is public and present in the documentation, the\n+`Public` type will be present both at the crate root and in the `public_mod` module.\n+\n+## Preventing inlining with `#[doc(no_inline)]`\n+\n+On the opposite of the `#[doc(inline)]` attribute, if you want to prevent an item from being\n+inlined, you can use `#[doc(no_inline)]`:\n+\n+```rust,ignore (inline)\n+mod private_mod {\n+    pub struct Public;\n+}\n+#[doc(no_inline)]\n+pub use self::private_mod::Public;\n+```\n+\n+In the generated documentation, you will see a re-export at the crate root and not the type\n+directly.\n+\n+## Attributes\n+\n+When an item is inlined, its doc comments and most of its attributes will be inlined along with it:\n+\n+```rust,ignore (inline)\n+mod private_mod {\n+    /// First\n+    #[cfg(a)]\n+    pub struct InPrivate;\n+    /// Second\n+    #[cfg(b)]\n+    pub use self::InPrivate as Second;\n+}\n+\n+/// Third\n+#[doc(inline)]\n+#[cfg(c)]\n+pub use self::private_mod::Second as Visible;\n+```\n+\n+In this case, `Visible` will have as documentation `First Second Third` and will also have as `cfg`:\n+`#[cfg(a, b, c)]`.\n+\n+[Intra-doc links](./linking-to-items-by-name.md) are resolved relative to where the doc comment is\n+defined.\n+\n+There are a few attributes which are not inlined though:\n+ * `#[doc(alias=\"\")]`\n+ * `#[doc(inline)]`\n+ * `#[doc(no_inline)]`\n+ * `#[doc(hidden)]` (because the re-export itself and its attributes are ignored).\n+\n+All other attributes are inherited when inlined, so that the documentation matches the behavior if\n+the inlined item was directly defined at the spot where it's shown."}, {"sha": "046d018543f386135de35978cbfd9ef5d3763240", "filename": "src/doc/rustdoc/src/write-documentation/the-doc-attribute.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44b13658857441fa8879e43f5e28f15a221f2b8e/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/44b13658857441fa8879e43f5e28f15a221f2b8e/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwrite-documentation%2Fthe-doc-attribute.md?ref=44b13658857441fa8879e43f5e28f15a221f2b8e", "patch": "@@ -223,12 +223,18 @@ Now we'll have a `Re-exports` line, and `Bar` will not link to anywhere.\n One special case: In Rust 2018 and later, if you `pub use` one of your dependencies, `rustdoc` will\n not eagerly inline it as a module unless you add `#[doc(inline)]`.\n \n+If you want to know more about inlining rules, take a look at the\n+[`re-exports` chapter](./re-exports.md).\n+\n ### `hidden`\n \n <span id=\"dochidden\"></span>\n \n Any item annotated with `#[doc(hidden)]` will not appear in the documentation, unless\n-the `strip-hidden` pass is removed.\n+the `strip-hidden` pass is removed. Re-exported items where one of its ancestors has\n+`#[doc(hidden)]` will be considered the same as private.\n+\n+You can find more information in the [`re-exports` chapter](./re-exports.md).\n \n ### `alias`\n "}]}