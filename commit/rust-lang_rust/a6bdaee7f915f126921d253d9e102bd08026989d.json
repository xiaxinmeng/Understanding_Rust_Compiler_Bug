{"sha": "a6bdaee7f915f126921d253d9e102bd08026989d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YmRhZWU3ZjkxNWYxMjY5MjFkMjUzZDllMTAyYmQwODAyNjk4OWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-18T00:12:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-18T00:31:26Z"}, "message": "rustdoc: Remove iface. Causing random crashes in resolve?", "tree": {"sha": "30ecd662c1e45736d25bced68b870b084211a183", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ecd662c1e45736d25bced68b870b084211a183"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6bdaee7f915f126921d253d9e102bd08026989d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6bdaee7f915f126921d253d9e102bd08026989d", "html_url": "https://github.com/rust-lang/rust/commit/a6bdaee7f915f126921d253d9e102bd08026989d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6bdaee7f915f126921d253d9e102bd08026989d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1bf17ed4ffad32e8ea9020e764814cfa021a04a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1bf17ed4ffad32e8ea9020e764814cfa021a04a", "html_url": "https://github.com/rust-lang/rust/commit/c1bf17ed4ffad32e8ea9020e764814cfa021a04a"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "d589cba107bec02159356cc66f72f59bc82f7e10", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=a6bdaee7f915f126921d253d9e102bd08026989d", "patch": "@@ -5,9 +5,10 @@ import rustc::middle::ast_map;\n \n export ctxt;\n export ctxt_handler;\n-export srv, seq_srv;\n-export mk_seq_srv_from_str;\n-export mk_seq_srv_from_file;\n+export srv;\n+export mk_srv_from_str;\n+export mk_srv_from_file;\n+export exec;\n \n type ctxt = {\n     ast: @ast::crate,\n@@ -16,25 +17,20 @@ type ctxt = {\n \n type ctxt_handler<T> = fn~(ctxt: ctxt) -> T;\n \n-iface srv {\n-    fn exec<T>(f: ctxt_handler<T>) -> T;\n-}\n-\n-#[doc = \"The single-task service\"]\n-tag seq_srv = ctxt;\n+type srv = {\n+    ctxt: ctxt\n+};\n \n-impl seq_srv of srv for seq_srv {\n-    fn exec<T>(f: ctxt_handler<T>) -> T {\n-        f(*self)\n+fn mk_srv_from_str(source: str) -> srv {\n+    {\n+        ctxt: build_ctxt(parse::from_str(source))\n     }\n }\n \n-fn mk_seq_srv_from_str(source: str) -> seq_srv {\n-    seq_srv(build_ctxt(parse::from_str(source)))\n-}\n-\n-fn mk_seq_srv_from_file(file: str) -> seq_srv {\n-    seq_srv(build_ctxt(parse::from_file(file)))\n+fn mk_srv_from_file(file: str) -> srv {\n+    {\n+        ctxt: build_ctxt(parse::from_file(file))\n+    }\n }\n \n fn build_ctxt(ast: @ast::crate) -> ctxt {\n@@ -44,23 +40,30 @@ fn build_ctxt(ast: @ast::crate) -> ctxt {\n     }\n }\n \n+fn exec<T>(\n+    srv: srv,\n+    f: fn~(ctxt: ctxt) -> T\n+) -> T {\n+    f(srv.ctxt)\n+}\n+\n #[cfg(test)]\n mod tests {\n \n     #[test]\n-    fn seq_srv_should_build_ast_map() {\n+    fn srv_should_build_ast_map() {\n         let source = \"fn a() { }\";\n-        let srv = mk_seq_srv_from_str(source);\n-        srv.exec {|ctxt|\n+        let srv = mk_srv_from_str(source);\n+        exec(srv) {|ctxt|\n             assert ctxt.map.size() != 0u\n         };\n     }\n \n     #[test]\n-    fn seq_srv_should_return_request_result() {\n+    fn srv_should_return_request_result() {\n         let source = \"fn a() { }\";\n-        let srv = mk_seq_srv_from_str(source);\n-        let result = srv.exec {|_ctxt| 1000};\n+        let srv = mk_srv_from_str(source);\n+        let result = exec(srv) {|_ctxt| 1000};\n         assert result == 1000;\n     }\n }\n\\ No newline at end of file"}, {"sha": "96cca34ea12c11596dc32256f1d6313158c1ab6b", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=a6bdaee7f915f126921d253d9e102bd08026989d", "patch": "@@ -4,12 +4,12 @@ import rustc::middle::ast_map;\n export run;\n \n fn run(\n-    srv: astsrv::seq_srv,\n+    srv: astsrv::srv,\n     doc: doc::cratedoc\n ) -> doc::cratedoc {\n     let fold = fold::fold({\n         fold_fn: fn~(\n-            f: fold::fold<astsrv::seq_srv>,\n+            f: fold::fold<astsrv::srv>,\n             d: doc::fndoc\n         ) -> doc::fndoc {\n             fold_fn(f, d)\n@@ -20,16 +20,18 @@ fn run(\n }\n \n fn fold_fn(\n-    fold: fold::fold<astsrv::seq_srv>,\n+    fold: fold::fold<astsrv::srv>,\n     doc: doc::fndoc\n ) -> doc::fndoc {\n \n     let srv = fold.ctxt;\n \n-    let attrs = alt srv.map.get(doc.id) {\n-      ast_map::node_item(item) { item.attrs }\n+    let attrs = astsrv::exec(srv) {|ctxt|\n+        let attrs = alt ctxt.map.get(doc.id) {\n+          ast_map::node_item(item) { item.attrs }\n+        };\n+        attr_parser::parse_fn(attrs)\n     };\n-    let attrs = attr_parser::parse_fn(attrs);\n     ret merge_fn_attrs(doc, attrs);\n \n     fn merge_fn_attrs(\n@@ -66,7 +68,7 @@ fn fold_fn(\n #[test]\n fn fold_fn_should_extract_fn_attributes() {\n     let source = \"#[doc = \\\"test\\\"] fn a() -> int { }\";\n-    let srv = astsrv::mk_seq_srv_from_str(source);\n+    let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n     let doc = fold_fn(fold, doc.topmod.fns[0]);"}, {"sha": "066ef8817eff0174068bf1238cce929b9ed61760", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=a6bdaee7f915f126921d253d9e102bd08026989d", "patch": "@@ -4,11 +4,10 @@ export from_srv, extract;\n \n // FIXME: Want this to be from_srv<T:ast::srv> but it crashes\n fn from_srv(\n-    srv: astsrv::seq_srv,\n+    srv: astsrv::srv,\n     default_name: str\n ) -> doc::cratedoc {\n-    import astsrv::seq_srv;\n-    srv.exec {|ctxt|\n+    astsrv::exec(srv) {|ctxt|\n         extract(ctxt.ast, default_name)\n     }\n }\n@@ -137,9 +136,8 @@ mod tests {\n \n     #[test]\n     fn extract_from_seq_srv() {\n-        import astsrv::seq_srv;\n         let source = \"\";\n-        let srv = astsrv::mk_seq_srv_from_str(source);\n+        let srv = astsrv::mk_srv_from_str(source);\n         let doc = from_srv(srv, \"name\");\n         assert doc.topmod.name == \"name\";\n     }"}, {"sha": "af9ab9708231b52345e5cae274e169bb6dd3f575", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=a6bdaee7f915f126921d253d9e102bd08026989d", "patch": "@@ -5,7 +5,7 @@ type ctxt = {\n };\n \n fn run(\n-    _srv: astsrv::seq_srv,\n+    _srv: astsrv::srv,\n     doc: doc::cratedoc\n ) -> doc::cratedoc {\n     let ctxt = {\n@@ -59,7 +59,7 @@ mod tests {\n     #[test]\n     fn should_elide_undocumented_fns() {\n         let source = \"fn a() { }\";\n-        let srv = astsrv::mk_seq_srv_from_str(source);\n+        let srv = astsrv::mk_srv_from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         let doc = run(srv, doc);\n         assert vec::is_empty(*doc.topmod.fns);"}, {"sha": "c89a221f0f7576f741376dd444097201f504e50e", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=a6bdaee7f915f126921d253d9e102bd08026989d", "patch": "@@ -5,10 +5,10 @@\n use std;\n use rustc;\n \n-type pass = fn~(srv: astsrv::seq_srv, doc: doc::cratedoc) -> doc::cratedoc;\n+type pass = fn~(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc;\n \n fn run_passes(\n-    srv: astsrv::seq_srv,\n+    srv: astsrv::srv,\n     doc: doc::cratedoc,\n     passes: [pass]\n ) -> doc::cratedoc {\n@@ -19,9 +19,8 @@ fn run_passes(\n \n #[test]\n fn test_run_passes() {\n-    import astsrv::seq_srv;\n     fn pass1(\n-        _srv: astsrv::seq_srv,\n+        _srv: astsrv::srv,\n         doc: doc::cratedoc\n     ) -> doc::cratedoc {\n         ~{\n@@ -33,7 +32,7 @@ fn test_run_passes() {\n         }\n     }\n     fn pass2(\n-        _srv: astsrv::seq_srv,\n+        _srv: astsrv::srv,\n         doc: doc::cratedoc\n     ) -> doc::cratedoc {\n         ~{\n@@ -45,7 +44,7 @@ fn test_run_passes() {\n         }\n     }\n     let source = \"\";\n-    let srv = astsrv::mk_seq_srv_from_str(source);\n+    let srv = astsrv::mk_srv_from_str(source);\n     let passes = [pass1, pass2];\n     let doc = extract::from_srv(srv, \"one\");\n     let doc = run_passes(srv, doc, passes);\n@@ -73,7 +72,7 @@ fn main(argv: [str]) {\n fn run(source_file: str) {\n \n     let default_name = source_file;\n-    let srv = astsrv::mk_seq_srv_from_file(source_file);\n+    let srv = astsrv::mk_srv_from_file(source_file);\n     let doc = extract::from_srv(srv, default_name);\n     let doc = run_passes(srv, doc, [\n         attr_pass::run,"}, {"sha": "4a06aec5b24752cfffd85c0539e730337a26299e", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6bdaee7f915f126921d253d9e102bd08026989d/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=a6bdaee7f915f126921d253d9e102bd08026989d", "patch": "@@ -1,17 +1,16 @@\n import rustc::syntax::ast;\n import rustc::syntax::print::pprust;\n import rustc::middle::ast_map;\n-import astsrv::seq_srv;\n \n export run;\n \n fn run(\n-    srv: astsrv::seq_srv,\n+    srv: astsrv::srv,\n     doc: doc::cratedoc\n ) -> doc::cratedoc {\n     let fold = fold::fold({\n         fold_fn: fn~(\n-            f: fold::fold<astsrv::seq_srv>,\n+            f: fold::fold<astsrv::srv>,\n             d: doc::fndoc\n         ) -> doc::fndoc {\n             fold_fn(f, d)\n@@ -22,7 +21,7 @@ fn run(\n }\n \n fn fold_fn(\n-    fold: fold::fold<astsrv::seq_srv>,\n+    fold: fold::fold<astsrv::srv>,\n     doc: doc::fndoc\n ) -> doc::fndoc {\n \n@@ -45,7 +44,7 @@ fn fold_fn(\n         }\n     }\n \n-    let retty = srv.exec {|ctxt|\n+    let retty = astsrv::exec(srv) {|ctxt|\n         alt ctxt.map.get(doc.id) {\n           ast_map::node_item(@{\n             node: ast::item_fn(decl, _, _), _\n@@ -67,7 +66,7 @@ mod tests {\n     #[test]\n     fn should_add_fn_ret_types() {\n         let source = \"fn a() -> int { }\";\n-        let srv = astsrv::mk_seq_srv_from_str(source);\n+        let srv = astsrv::mk_srv_from_str(source);\n         let doc = extract::from_srv(srv, \"\");\n         let doc = run(srv, doc);\n         assert option::get(doc.topmod.fns[0].return).ty == some(\"int\");"}]}