{"sha": "e4927d52e296c744b2c4bf7b42a10d019b9acff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OTI3ZDUyZTI5NmM3NDRiMmM0YmY3YjQyYTEwZDAxOWI5YWNmZjc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-17T10:50:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-17T10:52:28Z"}, "message": "Compress code", "tree": {"sha": "5d76352253b21a31c56a95b9dfb5c90a4c368d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d76352253b21a31c56a95b9dfb5c90a4c368d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4927d52e296c744b2c4bf7b42a10d019b9acff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4927d52e296c744b2c4bf7b42a10d019b9acff7", "html_url": "https://github.com/rust-lang/rust/commit/e4927d52e296c744b2c4bf7b42a10d019b9acff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4927d52e296c744b2c4bf7b42a10d019b9acff7/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6960fb3b889c8c2ad41004f5294991a1da6d416", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6960fb3b889c8c2ad41004f5294991a1da6d416", "html_url": "https://github.com/rust-lang/rust/commit/a6960fb3b889c8c2ad41004f5294991a1da6d416"}], "stats": {"total": 108, "additions": 42, "deletions": 66}, "files": [{"sha": "98ba372ad8dbd885895476bcb80c7cd15f832efb", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e4927d52e296c744b2c4bf7b42a10d019b9acff7/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4927d52e296c744b2c4bf7b42a10d019b9acff7/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=e4927d52e296c744b2c4bf7b42a10d019b9acff7", "patch": "@@ -225,7 +225,10 @@ impl CrateGraph {\n         to: CrateId,\n     ) -> Result<(), CyclicDependenciesError> {\n         if self.dfs_find(from, to, &mut FxHashSet::default()) {\n-            return Err(CyclicDependenciesError);\n+            return Err(CyclicDependenciesError {\n+                from: (from, self[from].display_name.clone()),\n+                to: (to, self[to].display_name.clone()),\n+            });\n         }\n         self.arena.get_mut(&from).unwrap().add_dep(name, to);\n         Ok(())\n@@ -421,7 +424,20 @@ impl fmt::Display for ParseEditionError {\n impl std::error::Error for ParseEditionError {}\n \n #[derive(Debug)]\n-pub struct CyclicDependenciesError;\n+pub struct CyclicDependenciesError {\n+    from: (CrateId, Option<CrateDisplayName>),\n+    to: (CrateId, Option<CrateDisplayName>),\n+}\n+\n+impl fmt::Display for CyclicDependenciesError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        let render = |(id, name): &(CrateId, Option<CrateDisplayName>)| match name {\n+            Some(it) => format!(\"{}({:?})\", it, id),\n+            None => format!(\"{:?}\", id),\n+        };\n+        write!(f, \"cyclic deps: {} -> {}\", render(&self.from), render(&self.to))\n+    }\n+}\n \n #[cfg(test)]\n mod tests {"}, {"sha": "dbf1dc5bfac12425ac3193a70e36eae1bfdbed96", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 24, "deletions": 64, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e4927d52e296c744b2c4bf7b42a10d019b9acff7/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4927d52e296c744b2c4bf7b42a10d019b9acff7/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=e4927d52e296c744b2c4bf7b42a10d019b9acff7", "patch": "@@ -12,8 +12,8 @@ use proc_macro_api::ProcMacroClient;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n-    cargo_workspace, cfg_flag::CfgFlag, utf8_stdout, CargoConfig, CargoWorkspace, ProjectJson,\n-    ProjectManifest, Sysroot, TargetKind,\n+    cargo_workspace, cfg_flag::CfgFlag, sysroot::SysrootCrate, utf8_stdout, CargoConfig,\n+    CargoWorkspace, ProjectJson, ProjectManifest, Sysroot, TargetKind,\n };\n \n /// `PackageRoot` describes a package root folder.\n@@ -249,18 +249,14 @@ impl ProjectWorkspace {\n                     if let Some(&from) = crates.get(&from) {\n                         if let Some((public_deps, _proc_macro)) = &sysroot_dps {\n                             for (name, to) in public_deps.iter() {\n-                                if let Err(_) = crate_graph.add_dep(from, name.clone(), *to) {\n-                                    log::error!(\"cyclic dependency on {} for {:?}\", name, from)\n-                                }\n+                                add_dep(&mut crate_graph, from, name.clone(), *to)\n                             }\n                         }\n \n                         for dep in &krate.deps {\n                             let to_crate_id = dep.crate_id;\n                             if let Some(&to) = crates.get(&to_crate_id) {\n-                                if let Err(_) = crate_graph.add_dep(from, dep.name.clone(), to) {\n-                                    log::error!(\"cyclic dependency {:?} -> {:?}\", from, to);\n-                                }\n+                                add_dep(&mut crate_graph, from, dep.name.clone(), to)\n                             }\n                         }\n                     }\n@@ -299,16 +295,12 @@ impl ProjectWorkspace {\n                             }\n                             if cargo[tgt].is_proc_macro {\n                                 if let Some(proc_macro) = libproc_macro {\n-                                    if let Err(_) = crate_graph.add_dep(\n+                                    add_dep(\n+                                        &mut crate_graph,\n                                         crate_id,\n                                         CrateName::new(\"proc_macro\").unwrap(),\n                                         proc_macro,\n-                                    ) {\n-                                        log::error!(\n-                                            \"cyclic dependency on proc_macro for {}\",\n-                                            &cargo[pkg].name\n-                                        )\n-                                    }\n+                                    );\n                                 }\n                             }\n \n@@ -323,21 +315,12 @@ impl ProjectWorkspace {\n                             // cargo metadata does not do any normalization,\n                             // so we do it ourselves currently\n                             let name = CrateName::normalize_dashes(&name);\n-                            if to != from && crate_graph.add_dep(from, name, to).is_err() {\n-                                log::error!(\n-                                    \"cyclic dependency between targets of {}\",\n-                                    &cargo[pkg].name\n-                                )\n+                            if to != from {\n+                                add_dep(&mut crate_graph, from, name, to);\n                             }\n                         }\n                         for (name, krate) in public_deps.iter() {\n-                            if let Err(_) = crate_graph.add_dep(from, name.clone(), *krate) {\n-                                log::error!(\n-                                    \"cyclic dependency on {} for {}\",\n-                                    name,\n-                                    &cargo[pkg].name\n-                                )\n-                            }\n+                            add_dep(&mut crate_graph, from, name.clone(), *krate);\n                         }\n                     }\n                 }\n@@ -349,13 +332,7 @@ impl ProjectWorkspace {\n                         let name = CrateName::new(&dep.name).unwrap();\n                         if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                             for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                                if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n-                                    log::error!(\n-                                        \"cyclic dependency {} -> {}\",\n-                                        &cargo[pkg].name,\n-                                        &cargo[dep.pkg].name\n-                                    )\n-                                }\n+                                add_dep(&mut crate_graph, from, name.clone(), to)\n                             }\n                         }\n                     }\n@@ -391,15 +368,7 @@ impl ProjectWorkspace {\n                                 pkg_to_lib_crate.insert(pkg, crate_id);\n                                 // Add dependencies on the core / std / alloc for rustc\n                                 for (name, krate) in public_deps.iter() {\n-                                    if let Err(_) =\n-                                        crate_graph.add_dep(crate_id, name.clone(), *krate)\n-                                    {\n-                                        log::error!(\n-                                            \"cyclic dependency on {} for {}\",\n-                                            name,\n-                                            &cargo[pkg].name\n-                                        )\n-                                    }\n+                                    add_dep(&mut crate_graph, crate_id, name.clone(), *krate);\n                                 }\n                                 rustc_pkg_crates.entry(pkg).or_insert_with(Vec::new).push(crate_id);\n                             }\n@@ -412,13 +381,7 @@ impl ProjectWorkspace {\n                             let name = CrateName::new(&dep.name).unwrap();\n                             if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                                 for &from in rustc_pkg_crates.get(&pkg).into_iter().flatten() {\n-                                    if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n-                                        log::error!(\n-                                            \"cyclic dependency {} -> {}\",\n-                                            &rustc_workspace[pkg].name,\n-                                            &rustc_workspace[dep.pkg].name\n-                                        )\n-                                    }\n+                                    add_dep(&mut crate_graph, from, name.clone(), to);\n                                 }\n                             }\n                         }\n@@ -434,13 +397,7 @@ impl ProjectWorkspace {\n                                     continue;\n                                 }\n                                 for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                                    if let Err(_) = crate_graph.add_dep(from, name.clone(), to) {\n-                                        log::error!(\n-                                            \"cyclic dependency {} -> {}\",\n-                                            &cargo[pkg].name,\n-                                            &rustc_workspace[dep].name\n-                                        )\n-                                    }\n+                                    add_dep(&mut crate_graph, from, name.clone(), to);\n                                 }\n                             }\n                         }\n@@ -511,19 +468,18 @@ fn sysroot_to_crate_graph(\n ) -> (Vec<(CrateName, CrateId)>, Option<CrateId>) {\n     let mut cfg_options = CfgOptions::default();\n     cfg_options.extend(get_rustc_cfg_options(target));\n-    let sysroot_crates: FxHashMap<_, _> = sysroot\n+    let sysroot_crates: FxHashMap<SysrootCrate, CrateId> = sysroot\n         .crates()\n         .filter_map(|krate| {\n             let file_id = load(&sysroot[krate].root)?;\n \n             let env = Env::default();\n             let proc_macro = vec![];\n-            let name = CrateName::new(&sysroot[krate].name)\n-                .expect(\"Sysroot crates' names do not contain dashes\");\n+            let display_name = CrateDisplayName::from_canonical_name(sysroot[krate].name.clone());\n             let crate_id = crate_graph.add_crate_root(\n                 file_id,\n                 Edition::Edition2018,\n-                Some(name.into()),\n+                Some(display_name),\n                 cfg_options.clone(),\n                 env,\n                 proc_macro,\n@@ -536,9 +492,7 @@ fn sysroot_to_crate_graph(\n         for &to in sysroot[from].deps.iter() {\n             let name = CrateName::new(&sysroot[to].name).unwrap();\n             if let (Some(&from), Some(&to)) = (sysroot_crates.get(&from), sysroot_crates.get(&to)) {\n-                if let Err(_) = crate_graph.add_dep(from, name, to) {\n-                    log::error!(\"cyclic dependency between sysroot crates\")\n-                }\n+                add_dep(crate_graph, from, name, to);\n             }\n         }\n     }\n@@ -579,3 +533,9 @@ fn get_rustc_cfg_options(target: Option<&str>) -> Vec<CfgFlag> {\n \n     res\n }\n+\n+fn add_dep(graph: &mut CrateGraph, from: CrateId, name: CrateName, to: CrateId) {\n+    if let Err(err) = graph.add_dep(from, name, to) {\n+        log::error!(\"{}\", err)\n+    }\n+}"}]}