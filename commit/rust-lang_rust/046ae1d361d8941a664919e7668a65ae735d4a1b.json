{"sha": "046ae1d361d8941a664919e7668a65ae735d4a1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NmFlMWQzNjFkODk0MWE2NjQ5MTllNzY2OGE2NWFlNzM1ZDRhMWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T14:20:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T14:25:23Z"}, "message": "more stats", "tree": {"sha": "17579217a78602653518bc86b96edbf9a80d5437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17579217a78602653518bc86b96edbf9a80d5437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/046ae1d361d8941a664919e7668a65ae735d4a1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/046ae1d361d8941a664919e7668a65ae735d4a1b", "html_url": "https://github.com/rust-lang/rust/commit/046ae1d361d8941a664919e7668a65ae735d4a1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/046ae1d361d8941a664919e7668a65ae735d4a1b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d68b76ba01dcd190e037e4d61a94d4c9d568bdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d68b76ba01dcd190e037e4d61a94d4c9d568bdd", "html_url": "https://github.com/rust-lang/rust/commit/8d68b76ba01dcd190e037e4d61a94d4c9d568bdd"}], "stats": {"total": 163, "additions": 130, "deletions": 33}, "files": [{"sha": "717537fcd97f370db613bb9cb414b0f7ca69d20b", "filename": "crates/ra_ide_api/src/status.rs", "status": "modified", "additions": 121, "deletions": 33, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/046ae1d361d8941a664919e7668a65ae735d4a1b/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046ae1d361d8941a664919e7668a65ae735d4a1b/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fstatus.rs?ref=046ae1d361d8941a664919e7668a65ae735d4a1b", "patch": "@@ -1,61 +1,149 @@\n-use std::fmt;\n+use std::{\n+    fmt,\n+    iter::FromIterator,\n+    sync::Arc,\n+};\n \n-use ra_syntax::AstNode;\n+use ra_syntax::{AstNode, TreeArc, SourceFile};\n use ra_db::{\n-    SourceFileQuery,\n-    salsa::{Database, debug::DebugQueryTable},\n+    SourceFileQuery, FileTextQuery, SourceRootId,\n+    salsa::{Database, debug::{DebugQueryTable, TableEntry}},\n };\n \n-use crate::db::RootDatabase;\n+use crate::{\n+    FileId, db::RootDatabase,\n+    symbol_index::{SymbolIndex, LibrarySymbolsQuery},\n+};\n \n pub(crate) fn status(db: &RootDatabase) -> String {\n-    let file_stats = {\n-        let mut stats = FilesStats::default();\n-        for entry in db.query(SourceFileQuery).entries::<Vec<_>>() {\n-            stats.total += 1;\n-            if let Some(value) = entry.value {\n-                stats.retained += 1;\n-                stats.retained_size = stats\n-                    .retained_size\n-                    .checked_add(value.syntax().memory_size_of_subtree())\n-                    .unwrap();\n-            }\n-        }\n-        stats\n-    };\n+    let files_stats = db.query(FileTextQuery).entries::<FilesStats>();\n+    let syntax_tree_stats = db.query(SourceFileQuery).entries::<SyntaxTreeStats>();\n+    let symbols_stats = db\n+        .query(LibrarySymbolsQuery)\n+        .entries::<LibrarySymbolsStats>();\n     let n_defs = {\n         let interner: &hir::HirInterner = db.as_ref();\n         interner.len()\n     };\n-    format!(\"{}\\nn_defs {}\\n\", file_stats, n_defs)\n+    format!(\n+        \"{}\\n{}\\n{}\\nn_defs {}\\n\",\n+        files_stats, symbols_stats, syntax_tree_stats, n_defs\n+    )\n }\n \n #[derive(Default)]\n struct FilesStats {\n     total: usize,\n-    retained: usize,\n-    retained_size: usize,\n+    size: Bytes,\n }\n \n impl fmt::Display for FilesStats {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        let (size, suff) = human_bytes(self.retained_size);\n+        write!(fmt, \"{} ({}) files\", self.total, self.size)\n+    }\n+}\n+\n+impl FromIterator<TableEntry<FileId, Arc<String>>> for FilesStats {\n+    fn from_iter<T>(iter: T) -> FilesStats\n+    where\n+        T: IntoIterator<Item = TableEntry<FileId, Arc<String>>>,\n+    {\n+        let mut res = FilesStats::default();\n+        for entry in iter {\n+            res.total += 1;\n+            res.size += entry.value.unwrap().len();\n+        }\n+        res\n+    }\n+}\n+\n+#[derive(Default)]\n+struct SyntaxTreeStats {\n+    total: usize,\n+    retained: usize,\n+    retained_size: Bytes,\n+}\n+\n+impl fmt::Display for SyntaxTreeStats {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         write!(\n             fmt,\n-            \"{} parsed_files, {} ({}{}) retained\",\n-            self.total, self.retained, size, suff\n+            \"{} trees, {} ({}) retained\",\n+            self.total, self.retained, self.retained_size,\n         )\n     }\n }\n \n-fn human_bytes(bytes: usize) -> (usize, &'static str) {\n-    if bytes < 4096 {\n-        return (bytes, \" bytes\");\n+impl FromIterator<TableEntry<FileId, TreeArc<SourceFile>>> for SyntaxTreeStats {\n+    fn from_iter<T>(iter: T) -> SyntaxTreeStats\n+    where\n+        T: IntoIterator<Item = TableEntry<FileId, TreeArc<SourceFile>>>,\n+    {\n+        let mut res = SyntaxTreeStats::default();\n+        for entry in iter {\n+            res.total += 1;\n+            if let Some(value) = entry.value {\n+                res.retained += 1;\n+                res.retained_size += value.syntax().memory_size_of_subtree();\n+            }\n+        }\n+        res\n     }\n-    let kb = bytes / 1024;\n-    if kb < 4096 {\n-        return (kb, \"kb\");\n+}\n+\n+#[derive(Default)]\n+struct LibrarySymbolsStats {\n+    total: usize,\n+    fst_size: Bytes,\n+    symbols_size: Bytes,\n+}\n+\n+impl fmt::Display for LibrarySymbolsStats {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(\n+            fmt,\n+            \"{} ({} + {}) symbols\",\n+            self.total, self.fst_size, self.symbols_size\n+        )\n+    }\n+}\n+\n+impl FromIterator<TableEntry<SourceRootId, Arc<SymbolIndex>>> for LibrarySymbolsStats {\n+    fn from_iter<T>(iter: T) -> LibrarySymbolsStats\n+    where\n+        T: IntoIterator<Item = TableEntry<SourceRootId, Arc<SymbolIndex>>>,\n+    {\n+        let mut res = LibrarySymbolsStats::default();\n+        for entry in iter {\n+            let value = entry.value.unwrap();\n+            res.total += value.len();\n+            res.fst_size += value.fst_size();\n+            res.symbols_size += value.symbols_size();\n+        }\n+        res\n+    }\n+}\n+\n+#[derive(Default)]\n+struct Bytes(usize);\n+\n+impl fmt::Display for Bytes {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        let bytes = self.0;\n+        if bytes < 4096 {\n+            return write!(f, \"{} bytes\", bytes);\n+        }\n+        let kb = bytes / 1024;\n+        if kb < 4096 {\n+            return write!(f, \"{}kb\", kb);\n+        }\n+        let mb = kb / 1024;\n+        write!(f, \"{}mb\", mb)\n+    }\n+}\n+\n+impl std::ops::AddAssign<usize> for Bytes {\n+    fn add_assign(&mut self, x: usize) {\n+        self.0 += x;\n     }\n-    let mb = kb / 1024;\n-    (mb, \"mb\")\n }"}, {"sha": "69a669b8dd3c9857a5131fa52916185956224d3c", "filename": "crates/ra_ide_api/src/symbol_index.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/046ae1d361d8941a664919e7668a65ae735d4a1b/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/046ae1d361d8941a664919e7668a65ae735d4a1b/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsymbol_index.rs?ref=046ae1d361d8941a664919e7668a65ae735d4a1b", "patch": "@@ -23,6 +23,7 @@ use std::{\n     cmp::Ordering,\n     hash::{Hash, Hasher},\n     sync::Arc,\n+    mem,\n };\n \n use fst::{self, Streamer};\n@@ -136,6 +137,14 @@ impl SymbolIndex {\n         self.symbols.len()\n     }\n \n+    pub(crate) fn fst_size(&self) -> usize {\n+        self.map.as_fst().size()\n+    }\n+\n+    pub(crate) fn symbols_size(&self) -> usize {\n+        self.symbols.len() * mem::size_of::<FileSymbol>()\n+    }\n+\n     pub(crate) fn for_files(\n         files: impl ParallelIterator<Item = (FileId, TreeArc<SourceFile>)>,\n     ) -> SymbolIndex {"}]}