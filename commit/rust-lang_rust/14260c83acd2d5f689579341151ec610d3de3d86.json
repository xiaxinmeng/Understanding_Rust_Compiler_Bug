{"sha": "14260c83acd2d5f689579341151ec610d3de3d86", "node_id": "C_kwDOAAsO6NoAKDE0MjYwYzgzYWNkMmQ1ZjY4OTU3OTM0MTE1MWVjNjEwZDNkZTNkODY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-07T18:57:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-07T18:57:43Z"}, "message": "Rollup merge of #108460 - obeis:hir-analysis-migrate-diagnostics-2, r=compiler-errors\n\nmigrate `rustc_hir_analysis` to session diagnostic [Part Two]\n\nmigrate `rustc_hir_analysis` to session diagnostic (part two)\nfiles list:\n- rustc_hir_analysis/variance/*\n- rustc_hir_analysis/missing_cast_for_variadic_arg.rs\n- rustc_hir_analysis/sized_unsized_cast.rs\n\nUpdates #100717", "tree": {"sha": "9bb9beb84e1a7566204dc4d59f1b2827d32e94d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bb9beb84e1a7566204dc4d59f1b2827d32e94d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14260c83acd2d5f689579341151ec610d3de3d86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkB4knCRBK7hj4Ov3rIwAA7jAIAKFYfaurEC+7I1xX65cGuGwf\neBfiZUsKz99mc+cmN0JaAT6CBz+tAtu+P+Q6nPe2T4TrnLNY1v3n95y36G4GCkWG\npV/TJtUzLYK/88KLHEnkvgXyVr2l7dLcBhL0Kml5HUnllGR2EN96HV+0zwty5AAw\nCBX0vwoftyjFA39vcEcQf4+D53Dl83fZnKQk1iOC9S30qetrR8jWG30R2fUErz7s\ngTf5Edz0XFv3HCrsJR+vGYYEm5O4Mjhs8GDo6gxp14mcUudPztpVQhrogtHO/5Mq\nB60nj0TD78h/2yAEm/25D285gmyM5qVk3oClCY4edDPZkpHRTEJBAEZ2AUgMZ7s=\n=siwJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 9bb9beb84e1a7566204dc4d59f1b2827d32e94d9\nparent 1a521db67e2935e5a46c7b95b511ab9a43be5770\nparent 44eb974b235df8d5d5fa7daea1203f80918a9de7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678215463 +0100\ncommitter GitHub <noreply@github.com> 1678215463 +0100\n\nRollup merge of #108460 - obeis:hir-analysis-migrate-diagnostics-2, r=compiler-errors\n\nmigrate `rustc_hir_analysis` to session diagnostic [Part Two]\n\nmigrate `rustc_hir_analysis` to session diagnostic (part two)\nfiles list:\n- rustc_hir_analysis/variance/*\n- rustc_hir_analysis/missing_cast_for_variadic_arg.rs\n- rustc_hir_analysis/sized_unsized_cast.rs\n\nUpdates #100717\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14260c83acd2d5f689579341151ec610d3de3d86", "html_url": "https://github.com/rust-lang/rust/commit/14260c83acd2d5f689579341151ec610d3de3d86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14260c83acd2d5f689579341151ec610d3de3d86/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a521db67e2935e5a46c7b95b511ab9a43be5770", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a521db67e2935e5a46c7b95b511ab9a43be5770", "html_url": "https://github.com/rust-lang/rust/commit/1a521db67e2935e5a46c7b95b511ab9a43be5770"}, {"sha": "44eb974b235df8d5d5fa7daea1203f80918a9de7", "url": "https://api.github.com/repos/rust-lang/rust/commits/44eb974b235df8d5d5fa7daea1203f80918a9de7", "html_url": "https://github.com/rust-lang/rust/commit/44eb974b235df8d5d5fa7daea1203f80918a9de7"}], "stats": {"total": 96, "additions": 68, "deletions": 28}, "files": [{"sha": "50e857ef60d1d8dc796fc1c36361ff86d21b1243", "filename": "compiler/rustc_hir_analysis/locales/en-US.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Flocales%2Fen-US.ftl?ref=14260c83acd2d5f689579341151ec610d3de3d86", "patch": "@@ -155,3 +155,11 @@ hir_analysis_cannot_capture_late_bound_ty_in_anon_const =\n hir_analysis_cannot_capture_late_bound_const_in_anon_const =\n     cannot capture late-bound const parameter in a constant\n     .label = parameter defined here\n+\n+hir_analysis_variances_of = {$variances_of}\n+\n+hir_analysis_pass_to_variadic_function = can't pass `{$ty}` to variadic function\n+    .suggestion = cast the value to `{$cast_ty}`\n+    .help = cast the value to `{$cast_ty}`\n+\n+hir_analysis_cast_thin_pointer_to_fat_pointer = cannot cast thin pointer `{$expr_ty}` to fat pointer `{$cast_ty}`"}, {"sha": "74fec93d91e1eddd4e80dec32ac09caaf3f54f12", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=14260c83acd2d5f689579341151ec610d3de3d86", "patch": "@@ -399,3 +399,34 @@ pub(crate) enum CannotCaptureLateBoundInAnonConst {\n         def_span: Span,\n     },\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_variances_of)]\n+pub(crate) struct VariancesOf {\n+    #[primary_span]\n+    pub span: Span,\n+    pub variances_of: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_pass_to_variadic_function, code = \"E0617\")]\n+pub(crate) struct PassToVariadicFunction<'tcx, 'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ty: Ty<'tcx>,\n+    pub cast_ty: &'a str,\n+    #[suggestion(code = \"{replace}\", applicability = \"machine-applicable\")]\n+    pub sugg_span: Option<Span>,\n+    pub replace: String,\n+    #[help]\n+    pub help: Option<()>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_cast_thin_pointer_to_fat_pointer, code = \"E0607\")]\n+pub(crate) struct CastThinPointerToFatPointer<'tcx> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub expr_ty: Ty<'tcx>,\n+    pub cast_ty: String,\n+}"}, {"sha": "0bfbf99cb0b588b9ebb51acd0f1ba69b13fe58f4", "filename": "compiler/rustc_hir_analysis/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=14260c83acd2d5f689579341151ec610d3de3d86", "patch": "@@ -1,5 +1,5 @@\n-use crate::structured_errors::StructuredDiagnostic;\n-use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n+use crate::{errors, structured_errors::StructuredDiagnostic};\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n use rustc_middle::ty::{Ty, TypeVisitableExt};\n use rustc_session::Session;\n use rustc_span::Span;\n@@ -21,27 +21,26 @@ impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx, '_> {\n     }\n \n     fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = self.sess.struct_span_err_with_code(\n-            self.span,\n-            &format!(\"can't pass `{}` to variadic function\", self.ty),\n-            self.code(),\n-        );\n+        let (sugg_span, replace, help) =\n+            if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.span) {\n+                (Some(self.span), format!(\"{} as {}\", snippet, self.cast_ty), None)\n+            } else {\n+                (None, \"\".to_string(), Some(()))\n+            };\n+\n+        let mut err = self.sess.create_err(errors::PassToVariadicFunction {\n+            span: self.span,\n+            ty: self.ty,\n+            cast_ty: self.cast_ty,\n+            help,\n+            replace,\n+            sugg_span,\n+        });\n \n         if self.ty.references_error() {\n             err.downgrade_to_delayed_bug();\n         }\n \n-        if let Ok(snippet) = self.sess.source_map().span_to_snippet(self.span) {\n-            err.span_suggestion(\n-                self.span,\n-                &format!(\"cast the value to `{}`\", self.cast_ty),\n-                format!(\"{} as {}\", snippet, self.cast_ty),\n-                Applicability::MachineApplicable,\n-            );\n-        } else {\n-            err.help(&format!(\"cast the value to `{}`\", self.cast_ty));\n-        }\n-\n         err\n     }\n "}, {"sha": "910417abe6e7c670c9b6b5e51f3d017eab041f4a", "filename": "compiler/rustc_hir_analysis/src/structured_errors/sized_unsized_cast.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fsized_unsized_cast.rs?ref=14260c83acd2d5f689579341151ec610d3de3d86", "patch": "@@ -1,4 +1,4 @@\n-use crate::structured_errors::StructuredDiagnostic;\n+use crate::{errors, structured_errors::StructuredDiagnostic};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId, ErrorGuaranteed};\n use rustc_middle::ty::{Ty, TypeVisitableExt};\n use rustc_session::Session;\n@@ -21,14 +21,11 @@ impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCast<'tcx> {\n     }\n \n     fn diagnostic_common(&self) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let mut err = self.sess.struct_span_err_with_code(\n-            self.span,\n-            &format!(\n-                \"cannot cast thin pointer `{}` to fat pointer `{}`\",\n-                self.expr_ty, self.cast_ty\n-            ),\n-            self.code(),\n-        );\n+        let mut err = self.sess.create_err(errors::CastThinPointerToFatPointer {\n+            span: self.span,\n+            expr_ty: self.expr_ty,\n+            cast_ty: self.cast_ty.to_owned(),\n+        });\n \n         if self.expr_ty.references_error() {\n             err.downgrade_to_delayed_bug();"}, {"sha": "64614831f560f99bef2f2f83c08fab2c99366f66", "filename": "compiler/rustc_hir_analysis/src/variance/test.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14260c83acd2d5f689579341151ec610d3de3d86/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fvariance%2Ftest.rs?ref=14260c83acd2d5f689579341151ec610d3de3d86", "patch": "@@ -1,14 +1,19 @@\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::sym;\n \n+use crate::errors;\n+\n pub fn test_variance(tcx: TyCtxt<'_>) {\n     // For unit testing: check for a special \"rustc_variance\"\n     // attribute and report an error with various results if found.\n     for id in tcx.hir().items() {\n         if tcx.has_attr(id.owner_id.to_def_id(), sym::rustc_variance) {\n             let variances_of = tcx.variances_of(id.owner_id);\n \n-            tcx.sess.struct_span_err(tcx.def_span(id.owner_id), format!(\"{variances_of:?}\")).emit();\n+            tcx.sess.emit_err(errors::VariancesOf {\n+                span: tcx.def_span(id.owner_id),\n+                variances_of: format!(\"{variances_of:?}\"),\n+            });\n         }\n     }\n }"}]}