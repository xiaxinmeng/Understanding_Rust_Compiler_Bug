{"sha": "6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOTE1NGE4MzBkZDk3NzNmZThhNGUzNGUxZmMzZGZiMWNhNmY5MzU=", "commit": {"author": {"name": "Johannes Nixdorf", "email": "mixi@exherbo.org", "date": "2018-04-29T09:29:05Z"}, "committer": {"name": "Johannes Nixdorf", "email": "mixi@exherbo.org", "date": "2018-05-01T13:38:41Z"}, "message": "musl: link crt{begin,end}.o from the system compiler\n\nThis fixes #36710 with +crt-static. We only need to add crtbegin.o and\ncrtend.o as we only do static linking with the bundled start files and\nthere is no static-pie support in rustc yet.", "tree": {"sha": "1310f5e7b4f930b3b4800e3062c129861d16283c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1310f5e7b4f930b3b4800e3062c129861d16283c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935", "html_url": "https://github.com/rust-lang/rust/commit/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935/comments", "author": {"login": "mixi", "id": 93679, "node_id": "MDQ6VXNlcjkzNjc5", "avatar_url": "https://avatars.githubusercontent.com/u/93679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixi", "html_url": "https://github.com/mixi", "followers_url": "https://api.github.com/users/mixi/followers", "following_url": "https://api.github.com/users/mixi/following{/other_user}", "gists_url": "https://api.github.com/users/mixi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixi/subscriptions", "organizations_url": "https://api.github.com/users/mixi/orgs", "repos_url": "https://api.github.com/users/mixi/repos", "events_url": "https://api.github.com/users/mixi/events{/privacy}", "received_events_url": "https://api.github.com/users/mixi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mixi", "id": 93679, "node_id": "MDQ6VXNlcjkzNjc5", "avatar_url": "https://avatars.githubusercontent.com/u/93679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mixi", "html_url": "https://github.com/mixi", "followers_url": "https://api.github.com/users/mixi/followers", "following_url": "https://api.github.com/users/mixi/following{/other_user}", "gists_url": "https://api.github.com/users/mixi/gists{/gist_id}", "starred_url": "https://api.github.com/users/mixi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mixi/subscriptions", "organizations_url": "https://api.github.com/users/mixi/orgs", "repos_url": "https://api.github.com/users/mixi/repos", "events_url": "https://api.github.com/users/mixi/events{/privacy}", "received_events_url": "https://api.github.com/users/mixi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec2b861c2f8013e10ab1f6e01c9aed9ad1daaefe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec2b861c2f8013e10ab1f6e01c9aed9ad1daaefe", "html_url": "https://github.com/rust-lang/rust/commit/ec2b861c2f8013e10ab1f6e01c9aed9ad1daaefe"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "4594d450c1507f7a05dbd9078d0f3c9d90dab2c4", "filename": "src/librustc_target/spec/linux_musl_base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_musl_base.rs?ref=6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935", "patch": "@@ -58,6 +58,8 @@ pub fn opts() -> TargetOptions {\n     // they'll be included from there.\n     base.pre_link_objects_exe_crt.push(\"crt1.o\".to_string());\n     base.pre_link_objects_exe_crt.push(\"crti.o\".to_string());\n+    base.pre_link_objects_exe_crt_sys.push(\"crtbegin.o\".to_string());\n+    base.post_link_objects_crt_sys.push(\"crtend.o\".to_string());\n     base.post_link_objects_crt.push(\"crtn.o\".to_string());\n \n     // These targets statically link libc by default"}, {"sha": "233d1560d73d47b44a6fb8a7c7e5724bfda6a991", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935", "patch": "@@ -423,19 +423,23 @@ pub struct TargetOptions {\n     /// Linker arguments that are passed *before* any user-defined libraries.\n     pub pre_link_args: LinkArgs, // ... unconditionally\n     pub pre_link_args_crt: LinkArgs, // ... when linking with a bundled crt\n-    /// Objects to link before all others, always found within the\n+    /// Objects to link before all others, all except *_sys found within the\n     /// sysroot folder.\n     pub pre_link_objects_exe: Vec<String>, // ... when linking an executable, unconditionally\n     pub pre_link_objects_exe_crt: Vec<String>, // ... when linking an executable with a bundled crt\n+    pub pre_link_objects_exe_crt_sys: Vec<String>, // ... when linking an executable with a bundled\n+                                                   //  crt, from the system library search path\n     pub pre_link_objects_dll: Vec<String>, // ... when linking a dylib\n     /// Linker arguments that are unconditionally passed after any\n     /// user-defined but before post_link_objects.  Standard platform\n     /// libraries that should be always be linked to, usually go here.\n     pub late_link_args: LinkArgs,\n-    /// Objects to link after all others, always found within the\n+    /// Objects to link after all others, all except *_sys found within the\n     /// sysroot folder.\n     pub post_link_objects: Vec<String>, // ... unconditionally\n     pub post_link_objects_crt: Vec<String>, // ... when linking with a bundled crt\n+    pub post_link_objects_crt_sys: Vec<String>, // ... when linking with a bundled crt, from the\n+                                                //  system library search path\n     /// Linker arguments that are unconditionally passed *after* any\n     /// user-defined libraries.\n     pub post_link_args: LinkArgs,\n@@ -670,9 +674,11 @@ impl Default for TargetOptions {\n             relro_level: RelroLevel::None,\n             pre_link_objects_exe: Vec::new(),\n             pre_link_objects_exe_crt: Vec::new(),\n+            pre_link_objects_exe_crt_sys: Vec::new(),\n             pre_link_objects_dll: Vec::new(),\n             post_link_objects: Vec::new(),\n             post_link_objects_crt: Vec::new(),\n+            post_link_objects_crt_sys: Vec::new(),\n             late_link_args: LinkArgs::new(),\n             link_env: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n@@ -894,10 +900,12 @@ impl Target {\n         key!(pre_link_args_crt, link_args);\n         key!(pre_link_objects_exe, list);\n         key!(pre_link_objects_exe_crt, list);\n+        key!(pre_link_objects_exe_crt_sys, list);\n         key!(pre_link_objects_dll, list);\n         key!(late_link_args, link_args);\n         key!(post_link_objects, list);\n         key!(post_link_objects_crt, list);\n+        key!(post_link_objects_crt_sys, list);\n         key!(post_link_args, link_args);\n         key!(link_env, env);\n         key!(asm_args, list);\n@@ -1102,10 +1110,12 @@ impl ToJson for Target {\n         target_option_val!(link_args - pre_link_args_crt);\n         target_option_val!(pre_link_objects_exe);\n         target_option_val!(pre_link_objects_exe_crt);\n+        target_option_val!(pre_link_objects_exe_crt_sys);\n         target_option_val!(pre_link_objects_dll);\n         target_option_val!(link_args - late_link_args);\n         target_option_val!(post_link_objects);\n         target_option_val!(post_link_objects_crt);\n+        target_option_val!(post_link_objects_crt_sys);\n         target_option_val!(link_args - post_link_args);\n         target_option_val!(env - link_env);\n         target_option_val!(asm_args);"}, {"sha": "07dfeda3b5a3122c776c70f122bfc8fcacb74501", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=6d9154a830dd9773fe8a4e34e1fc3dfb1ca6f935", "patch": "@@ -644,6 +644,12 @@ fn link_natively(sess: &Session,\n         for obj in &sess.target.target.options.pre_link_objects_exe_crt {\n             cmd.arg(root.join(obj));\n         }\n+\n+        for obj in &sess.target.target.options.pre_link_objects_exe_crt_sys {\n+            if flavor == LinkerFlavor::Gcc {\n+                cmd.arg(format!(\"-l:{}\", obj));\n+            }\n+        }\n     }\n \n     if sess.target.target.options.is_like_emscripten {\n@@ -668,6 +674,11 @@ fn link_natively(sess: &Session,\n         cmd.arg(root.join(obj));\n     }\n     if sess.crt_static() {\n+        for obj in &sess.target.target.options.post_link_objects_crt_sys {\n+            if flavor == LinkerFlavor::Gcc {\n+                cmd.arg(format!(\"-l:{}\", obj));\n+            }\n+        }\n         for obj in &sess.target.target.options.post_link_objects_crt {\n             cmd.arg(root.join(obj));\n         }"}]}