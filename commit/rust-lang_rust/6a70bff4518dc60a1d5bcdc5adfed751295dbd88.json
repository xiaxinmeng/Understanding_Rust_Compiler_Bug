{"sha": "6a70bff4518dc60a1d5bcdc5adfed751295dbd88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNzBiZmY0NTE4ZGM2MGExZDViY2RjNWFkZmVkNzUxMjk1ZGJkODg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-17T15:22:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-17T15:22:34Z"}, "message": "Don't store shift redundantly", "tree": {"sha": "f9878c4bc6bfef0d663b1c9999c93d496b912c41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9878c4bc6bfef0d663b1c9999c93d496b912c41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a70bff4518dc60a1d5bcdc5adfed751295dbd88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a70bff4518dc60a1d5bcdc5adfed751295dbd88", "html_url": "https://github.com/rust-lang/rust/commit/6a70bff4518dc60a1d5bcdc5adfed751295dbd88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a70bff4518dc60a1d5bcdc5adfed751295dbd88/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b72abed4ebbc13a458cf3518d6abd1b734eafb38", "url": "https://api.github.com/repos/rust-lang/rust/commits/b72abed4ebbc13a458cf3518d6abd1b734eafb38", "html_url": "https://github.com/rust-lang/rust/commit/b72abed4ebbc13a458cf3518d6abd1b734eafb38"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "1774cb58b699fb13e880a044addfb5869f13291c", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6a70bff4518dc60a1d5bcdc5adfed751295dbd88/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a70bff4518dc60a1d5bcdc5adfed751295dbd88/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=6a70bff4518dc60a1d5bcdc5adfed751295dbd88", "patch": "@@ -83,14 +83,13 @@ impl HirFileId {\n                     loc.def.ast_id.to_node(db).token_tree()?.syntax().text_range().start();\n \n                 let macro_def = db.macro_def(loc.def)?;\n-                let shift = macro_def.0.shift();\n                 let exp_map = db.parse_macro(macro_file)?.1;\n                 let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n \n                 let arg_start = (loc.ast_id.file_id, arg_start);\n                 let def_start = (loc.def.ast_id.file_id, def_start);\n \n-                Some(ExpansionInfo { arg_start, def_start, macro_arg, macro_def, exp_map, shift })\n+                Some(ExpansionInfo { arg_start, def_start, macro_arg, macro_def, exp_map })\n             }\n         }\n     }\n@@ -152,7 +151,6 @@ impl MacroCallId {\n pub struct ExpansionInfo {\n     pub(crate) arg_start: (HirFileId, TextUnit),\n     pub(crate) def_start: (HirFileId, TextUnit),\n-    pub(crate) shift: u32,\n \n     pub(crate) macro_def: Arc<(db::TokenExpander, mbe::TokenMap)>,\n     pub(crate) macro_arg: Arc<(tt::Subtree, mbe::TokenMap)>,\n@@ -163,7 +161,7 @@ impl ExpansionInfo {\n     pub fn translate_offset(&self, offset: TextUnit) -> Option<TextUnit> {\n         let offset = offset.checked_sub(self.arg_start.1)?;\n         let token_id = self.macro_arg.1.token_by_offset(offset)?;\n-        let token_id = tt::TokenId(token_id.0 + self.shift);\n+        let token_id = tt::TokenId(token_id.0 + self.macro_def.0.shift());\n \n         let (r, _) = self.exp_map.ranges.iter().find(|(_, tid)| *tid == token_id)?;\n         Some(r.start())\n@@ -172,8 +170,9 @@ impl ExpansionInfo {\n     pub fn find_range(&self, from: TextRange) -> Option<(HirFileId, TextRange)> {\n         let token_id = look_in_rev_map(&self.exp_map, from)?;\n \n-        let (token_map, (file_id, start_offset), token_id) = if token_id.0 >= self.shift {\n-            (&self.macro_arg.1, self.arg_start, tt::TokenId(token_id.0 - self.shift).into())\n+        let shift = self.macro_def.0.shift();\n+        let (token_map, (file_id, start_offset), token_id) = if token_id.0 >= shift {\n+            (&self.macro_arg.1, self.arg_start, tt::TokenId(token_id.0 - shift).into())\n         } else {\n             (&self.macro_def.1, self.def_start, token_id)\n         };"}]}