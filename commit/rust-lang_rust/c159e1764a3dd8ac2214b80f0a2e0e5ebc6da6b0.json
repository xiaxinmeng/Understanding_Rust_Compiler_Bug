{"sha": "c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNTllMTc2NGEzZGQ4YWMyMjE0YjgwZjBhMmUwZTVlYmM2ZGE2YjA=", "commit": {"author": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-18T21:42:38Z"}, "committer": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-18T21:42:38Z"}, "message": "Use intra-doc links for Ordering::*", "tree": {"sha": "da8c310ca459d9a32e2ac32fbc6bcf9b1aca455c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8c310ca459d9a32e2ac32fbc6bcf9b1aca455c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0", "html_url": "https://github.com/rust-lang/rust/commit/c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0/comments", "author": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3", "html_url": "https://github.com/rust-lang/rust/commit/c94ed5ca91f1363b66970ce2cbd6e2773e3cb1d3"}], "stats": {"total": 198, "additions": 99, "deletions": 99}, "files": [{"sha": "0dcf1bd28fb2d9ba6170808a7a63a0eec5a5e412", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 99, "deletions": 99, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=c159e1764a3dd8ac2214b80f0a2e0e5ebc6da6b0", "patch": "@@ -72,7 +72,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n@@ -82,7 +82,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n@@ -92,9 +92,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `success` and\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n@@ -104,9 +104,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `success` and\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n@@ -116,7 +116,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n@@ -126,9 +126,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `success` and\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n@@ -138,9 +138,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `success` and\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n@@ -150,9 +150,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `success` and\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n@@ -162,9 +162,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `success` and\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange`][compare_exchange].\n     ///\n@@ -175,7 +175,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n@@ -185,7 +185,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n@@ -195,9 +195,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `success` and\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n@@ -207,9 +207,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `success` and\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n@@ -219,7 +219,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as both the `success` and `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n@@ -229,9 +229,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `success` and\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n@@ -241,9 +241,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `success` and\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n@@ -253,9 +253,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `success` and\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n@@ -265,9 +265,9 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `success` and\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `failure` parameters. For example,\n     /// [`AtomicBool::compare_exchange_weak`][cew].\n     ///\n@@ -278,23 +278,23 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `load` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load<T: Copy>(src: *const T) -> T;\n     /// Loads the current value of the pointer.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `load` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load_acq<T: Copy>(src: *const T) -> T;\n     /// Loads the current value of the pointer.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `load` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load_relaxed<T: Copy>(src: *const T) -> T;\n@@ -304,23 +304,23 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `store` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store<T: Copy>(dst: *mut T, val: T);\n     /// Stores the value at the specified memory location.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `store` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store_rel<T: Copy>(dst: *mut T, val: T);\n     /// Stores the value at the specified memory location.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `store` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store_relaxed<T: Copy>(dst: *mut T, val: T);\n@@ -330,39 +330,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -371,39 +371,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -412,39 +412,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -453,39 +453,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -494,39 +494,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -535,39 +535,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -576,39 +576,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -617,39 +617,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_max`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_max).\n     pub fn atomic_max_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -658,39 +658,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicI32::fetch_min`](../../std/sync/atomic/struct.AtomicI32.html#method.fetch_min).\n     pub fn atomic_min_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -699,39 +699,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_min`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_min).\n     pub fn atomic_umin_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -740,39 +740,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n     /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html#variant.Relaxed)\n+    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n     /// as the `order`. For example,\n     /// [`AtomicU32::fetch_max`](../../std/sync/atomic/struct.AtomicU32.html#method.fetch_max).\n     pub fn atomic_umax_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n@@ -825,31 +825,31 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n     /// by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`.\n     pub fn atomic_fence();\n     /// An atomic fence.\n     ///\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n     /// by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`.\n     pub fn atomic_fence_acq();\n     /// An atomic fence.\n     ///\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n     /// by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`.\n     pub fn atomic_fence_rel();\n     /// An atomic fence.\n     ///\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::fence`](../../std/sync/atomic/fn.fence.html)\n     /// by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`.\n     pub fn atomic_fence_acqrel();\n \n@@ -863,7 +863,7 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::compiler_fence`](../../std/sync/atomic/fn.compiler_fence.html)\n     /// by passing\n-    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html#variant.SeqCst)\n+    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n     /// as the `order`.\n     pub fn atomic_singlethreadfence();\n     /// A compiler-only memory barrier.\n@@ -876,7 +876,7 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::compiler_fence`](../../std/sync/atomic/fn.compiler_fence.html)\n     /// by passing\n-    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html#variant.Acquire)\n+    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n     /// as the `order`.\n     pub fn atomic_singlethreadfence_acq();\n     /// A compiler-only memory barrier.\n@@ -889,7 +889,7 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::compiler_fence`](../../std/sync/atomic/fn.compiler_fence.html)\n     /// by passing\n-    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html#variant.Release)\n+    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n     /// as the `order`.\n     pub fn atomic_singlethreadfence_rel();\n     /// A compiler-only memory barrier.\n@@ -902,7 +902,7 @@ extern \"rust-intrinsic\" {\n     /// The stabilized version of this intrinsic is available in\n     /// [`std::sync::atomic::compiler_fence`](../../std/sync/atomic/fn.compiler_fence.html)\n     /// by passing\n-    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html#variant.AcqRel)\n+    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n     /// as the `order`.\n     pub fn atomic_singlethreadfence_acqrel();\n "}]}