{"sha": "ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "node_id": "C_kwDOAAsO6NoAKGNhMDhhMzI2NTUxMWQzYjBjMmYzYzNjZjA2ZTdhY2MxMGI3M2E1Y2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T07:38:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T07:38:05Z"}, "message": "Auto merge of #103218 - CastilloDel:infer, r=jackh726\n\nRemove #![allow(rustc::potential_query_instability)] from rustc_infer\n\nRelated to #84447\n\nThis PR probably needs to be benchmarked to check for regressions.", "tree": {"sha": "27a3c8589d5a25eac5d9230f5354238f7c0e7e24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a3c8589d5a25eac5d9230f5354238f7c0e7e24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "html_url": "https://github.com/rust-lang/rust/commit/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2", "html_url": "https://github.com/rust-lang/rust/commit/9b735a7132acd58b3bd34c084e9ca5b4ca7450a2"}, {"sha": "e9502010b470fdd60e90e9a2216c2a568882ae30", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9502010b470fdd60e90e9a2216c2a568882ae30", "html_url": "https://github.com/rust-lang/rust/commit/e9502010b470fdd60e90e9a2216c2a568882ae30"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "76f249dac5181439f4a437402e0d0aa68a38eb0a", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -2,7 +2,7 @@\n #![deny(rustc::diagnostic_outside_of_impl)]\n //! Error reporting machinery for lifetime errors.\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n@@ -276,7 +276,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     fn get_impl_ident_and_self_ty_from_trait(\n         &self,\n         def_id: DefId,\n-        trait_objects: &FxHashSet<DefId>,\n+        trait_objects: &FxIndexSet<DefId>,\n     ) -> Option<(Ident, &'tcx hir::Ty<'tcx>)> {\n         let tcx = self.infcx.tcx;\n         match tcx.hir().get_if_local(def_id) {\n@@ -830,7 +830,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         };\n         debug!(?param);\n \n-        let mut visitor = TraitObjectVisitor(FxHashSet::default());\n+        let mut visitor = TraitObjectVisitor(FxIndexSet::default());\n         visitor.visit_ty(param.param_ty);\n \n         let Some((ident, self_ty)) =\n@@ -843,7 +843,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     fn suggest_constrain_dyn_trait_in_impl(\n         &self,\n         err: &mut Diagnostic,\n-        found_dids: &FxHashSet<DefId>,\n+        found_dids: &FxIndexSet<DefId>,\n         ident: Ident,\n         self_ty: &hir::Ty<'_>,\n     ) -> bool {"}, {"sha": "e4a76fbd45130f204f71d99569dd7a4e8c7621b4", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -58,7 +58,7 @@ use crate::traits::{\n     StatementAsExpression,\n };\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxIndexMap, FxIndexSet};\n use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n@@ -1498,9 +1498,9 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             values = None;\n         }\n         struct OpaqueTypesVisitor<'tcx> {\n-            types: FxHashMap<TyCategory, FxHashSet<Span>>,\n-            expected: FxHashMap<TyCategory, FxHashSet<Span>>,\n-            found: FxHashMap<TyCategory, FxHashSet<Span>>,\n+            types: FxIndexMap<TyCategory, FxIndexSet<Span>>,\n+            expected: FxIndexMap<TyCategory, FxIndexSet<Span>>,\n+            found: FxIndexMap<TyCategory, FxIndexSet<Span>>,\n             ignore_span: Span,\n             tcx: TyCtxt<'tcx>,\n         }\n@@ -1538,7 +1538,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 &self,\n                 err: &mut Diagnostic,\n                 target: &str,\n-                types: &FxHashMap<TyCategory, FxHashSet<Span>>,\n+                types: &FxIndexMap<TyCategory, FxIndexSet<Span>>,\n             ) {\n                 for (key, values) in types.iter() {\n                     let count = values.len();\n@@ -3254,7 +3254,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         if blk.expr.is_some() {\n             return false;\n         }\n-        let mut shadowed = FxHashSet::default();\n+        let mut shadowed = FxIndexSet::default();\n         let mut candidate_idents = vec![];\n         let mut find_compatible_candidates = |pat: &hir::Pat<'_>| {\n             if let hir::PatKind::Binding(_, hir_id, ident, _) = &pat.kind"}, {"sha": "1067ccda20ca0ea4a80c64960c7330ce895cf8e7", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -9,7 +9,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::ObligationCauseCode;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::intravisit::Visitor;\n@@ -73,7 +73,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n             // Next, let's figure out the set of trait objects with implicit static bounds\n             let ty = self.tcx().type_of(*impl_def_id);\n-            let mut v = super::static_impl_trait::TraitObjectVisitor(FxHashSet::default());\n+            let mut v = super::static_impl_trait::TraitObjectVisitor(FxIndexSet::default());\n             v.visit_ty(ty);\n             let mut traits = vec![];\n             for matching_def_id in v.0 {"}, {"sha": "b4efe8da1259266507da5ddd265f1021d00d03c9", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -4,7 +4,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n use crate::traits::{ObligationCauseCode, UnifyReceiverContext};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{struct_span_err, Applicability, Diagnostic, ErrorGuaranteed, MultiSpan};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_ty, Visitor};\n@@ -236,7 +236,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             // Same case of `impl Foo for dyn Bar { fn qux(&self) {} }` introducing a `'static`\n             // lifetime as above, but called using a fully-qualified path to the method:\n             // `Foo::qux(bar)`.\n-            let mut v = TraitObjectVisitor(FxHashSet::default());\n+            let mut v = TraitObjectVisitor(FxIndexSet::default());\n             v.visit_ty(param.param_ty);\n             if let Some((ident, self_ty)) =\n                 self.get_impl_ident_and_self_ty_from_trait(item_def_id, &v.0)\n@@ -408,7 +408,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     fn get_impl_ident_and_self_ty_from_trait(\n         &self,\n         def_id: DefId,\n-        trait_objects: &FxHashSet<DefId>,\n+        trait_objects: &FxIndexSet<DefId>,\n     ) -> Option<(Ident, &'tcx hir::Ty<'tcx>)> {\n         let tcx = self.tcx();\n         match tcx.hir().get_if_local(def_id) {\n@@ -490,7 +490,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             return false;\n         };\n \n-        let mut v = TraitObjectVisitor(FxHashSet::default());\n+        let mut v = TraitObjectVisitor(FxIndexSet::default());\n         v.visit_ty(ty);\n \n         // Get the `Ident` of the method being called and the corresponding `impl` (to point at\n@@ -506,7 +506,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n     fn suggest_constrain_dyn_trait_in_impl(\n         &self,\n         err: &mut Diagnostic,\n-        found_dids: &FxHashSet<DefId>,\n+        found_dids: &FxIndexSet<DefId>,\n         ident: Ident,\n         self_ty: &hir::Ty<'_>,\n     ) -> bool {\n@@ -538,7 +538,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n }\n \n /// Collect all the trait objects in a type that could have received an implicit `'static` lifetime.\n-pub struct TraitObjectVisitor(pub FxHashSet<DefId>);\n+pub struct TraitObjectVisitor(pub FxIndexSet<DefId>);\n \n impl<'tcx> TypeVisitor<'tcx> for TraitObjectVisitor {\n     fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {"}, {"sha": "fd26d7d29c5ee6ba1f13554126a8255e54323fd5", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -149,6 +149,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         region: ty::BoundRegionKind,\n     ) -> bool {\n         let late_bound_regions = self.tcx().collect_referenced_late_bound_regions(&ty);\n+        // We are only checking is any region meets the condition so order doesn't matter\n+        #[allow(rustc::potential_query_instability)]\n         late_bound_regions.iter().any(|r| *r == region)\n     }\n "}, {"sha": "ba990acfe6fc4a5991bfcba2d65c7355f25a971b", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -842,6 +842,9 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         // are placeholders as upper bounds, but the universe of the\n         // variable `'a`, or some variable that `'a` has to outlive, doesn't\n         // permit those placeholders.\n+        //\n+        // We only iterate to find the min, which means it doesn't cause reproducibility issues\n+        #[allow(rustc::potential_query_instability)]\n         let min_universe = lower_vid_bounds\n             .into_iter()\n             .map(|vid| self.var_infos[vid].universe)"}, {"sha": "22b4bbb17d47fd3e38948d6dd51e545588d39ade", "filename": "compiler/rustc_infer/src/infer/region_constraints/leak_check.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fleak_check.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -1,6 +1,7 @@\n use super::*;\n use crate::infer::CombinedSnapshot;\n use rustc_data_structures::{\n+    fx::FxIndexMap,\n     graph::{scc::Sccs, vec_graph::VecGraph},\n     undo_log::UndoLogs,\n };\n@@ -371,7 +372,7 @@ rustc_index::newtype_index! {\n /// an edge `R1 -> R2` in the graph.\n struct MiniGraph<'tcx> {\n     /// Map from a region to the index of the node in the graph.\n-    nodes: FxHashMap<ty::Region<'tcx>, LeakCheckNode>,\n+    nodes: FxIndexMap<ty::Region<'tcx>, LeakCheckNode>,\n \n     /// Map from node index to SCC, and stores the successors of each SCC. All\n     /// the regions in the same SCC are equal to one another, and if `S1 -> S2`,\n@@ -388,7 +389,7 @@ impl<'tcx> MiniGraph<'tcx> {\n     where\n         'tcx: 'a,\n     {\n-        let mut nodes = FxHashMap::default();\n+        let mut nodes = FxIndexMap::default();\n         let mut edges = Vec::new();\n \n         // Note that if `R2: R1`, we get a callback `r1, r2`, so `target` is first parameter.\n@@ -438,7 +439,7 @@ impl<'tcx> MiniGraph<'tcx> {\n     }\n \n     fn add_node(\n-        nodes: &mut FxHashMap<ty::Region<'tcx>, LeakCheckNode>,\n+        nodes: &mut FxIndexMap<ty::Region<'tcx>, LeakCheckNode>,\n         r: ty::Region<'tcx>,\n     ) -> LeakCheckNode {\n         let l = nodes.len();"}, {"sha": "985c5d360db8e814b4a7b9b7e69924e2ae9fabcc", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -7,7 +7,7 @@ use super::{\n     InferCtxtUndoLogs, MiscVariable, RegionVariableOrigin, Rollback, Snapshot, SubregionOrigin,\n };\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::undo_log::UndoLogs;\n@@ -125,7 +125,7 @@ pub struct RegionConstraintData<'tcx> {\n     /// we record the fact that `'a <= 'b` is implied by the fn\n     /// signature, and then ignore the constraint when solving\n     /// equations. This is a bit of a hack but seems to work.\n-    pub givens: FxHashSet<(Region<'tcx>, ty::RegionVid)>,\n+    pub givens: FxIndexSet<(Region<'tcx>, ty::RegionVid)>,\n }\n \n /// Represents a constraint that influences the inference process."}, {"sha": "4c119a443555e35fcd444cd6668fb74d028c7d44", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -12,7 +12,6 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]"}, {"sha": "4d53519581b3795bdc9b7bf27e9b9820011078a4", "filename": "compiler/rustc_infer/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ca08a3265511d3b0c2f3c3cf06e7acc10b73a5ce", "patch": "@@ -1,7 +1,7 @@\n use super::ObjectSafetyViolation;\n \n use crate::infer::InferCtxt;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::FxIndexSet;\n use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -56,7 +56,7 @@ pub fn report_object_safety_error<'tcx>(\n     );\n     err.span_label(span, format!(\"`{}` cannot be made into an object\", trait_str));\n \n-    let mut reported_violations = FxHashSet::default();\n+    let mut reported_violations = FxIndexSet::default();\n     let mut multi_span = vec![];\n     let mut messages = vec![];\n     for violation in violations {"}]}