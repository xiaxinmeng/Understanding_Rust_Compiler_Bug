{"sha": "52372f9c71d8ade4cb815524f179119656f0aa2e", "node_id": "C_kwDOAAsO6NoAKDUyMzcyZjljNzFkOGFkZTRjYjgxNTUyNGYxNzkxMTk2NTZmMGFhMmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-21T17:44:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-21T17:44:20Z"}, "message": "Auto merge of #105924 - TimNN:ui-remap, r=Mark-Simulacrum\n\nRemap paths in UI tests by default\n\nIf you think this needs further discussions / something RFC-like, please let me know the best forum for that.\n\nThis PR runs UI tests with a remapped \"src base\" directory by default.\n\nWhy? Because some UI tests currently depend on the length of the absolute path to the `src/test/ui` directory. Remapping makes the tests independent of the absolute path.\n\nThe path to the source file (which is absolute on CI) is part of the type name of closures. `rustc` diagnostic output depends on the length of type names (long type names are truncated). So a long absolute path leads to long closure type names, which leads to truncation and changed diagnostics.\n\n(I initially tried just disabling type name truncation, but that made some error messages stupid long (thousands of characters, IIRC)).\n\nAdditional changes:\n\n* All boolean `compiletest` directives now support explicit `no-` versions to disable them.\n* Adapt existing tests when necessary:\n  * Disable remapping for individual tests that fail with it enabled (when there's no obvious alternative fix).\n  * For tests that already check something remapping related switch to the new option unless we gain something significant by keeping the manual remap.\n\nPassed Windows CI in https://github.com/rust-lang/rust/actions/runs/3933100590", "tree": {"sha": "51c43eee96f5468666e9e8df4eff85cb3ce66f22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51c43eee96f5468666e9e8df4eff85cb3ce66f22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52372f9c71d8ade4cb815524f179119656f0aa2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52372f9c71d8ade4cb815524f179119656f0aa2e", "html_url": "https://github.com/rust-lang/rust/commit/52372f9c71d8ade4cb815524f179119656f0aa2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52372f9c71d8ade4cb815524f179119656f0aa2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf", "url": "https://api.github.com/repos/rust-lang/rust/commits/005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf", "html_url": "https://github.com/rust-lang/rust/commit/005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf"}, {"sha": "cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1d0bc20cd2c18ec844f6447396dadf90b762e9", "html_url": "https://github.com/rust-lang/rust/commit/cd1d0bc20cd2c18ec844f6447396dadf90b762e9"}], "stats": {"total": 163, "additions": 103, "deletions": 60}, "files": [{"sha": "423299495a264a8c350b17454f6b4d112c2a9954", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -162,6 +162,9 @@ pub struct TestProps {\n     pub stderr_per_bitwidth: bool,\n     // The MIR opt to unit test, if any\n     pub mir_unit_test: Option<String>,\n+    // Whether to tell `rustc` to remap the \"src base\" directory to a fake\n+    // directory.\n+    pub remap_src_base: bool,\n }\n \n mod directives {\n@@ -196,6 +199,7 @@ mod directives {\n     pub const INCREMENTAL: &'static str = \"incremental\";\n     pub const KNOWN_BUG: &'static str = \"known-bug\";\n     pub const MIR_UNIT_TEST: &'static str = \"unit-test\";\n+    pub const REMAP_SRC_BASE: &'static str = \"remap-src-base\";\n     // This isn't a real directive, just one that is probably mistyped often\n     pub const INCORRECT_COMPILER_FLAGS: &'static str = \"compiler-flags\";\n }\n@@ -241,6 +245,7 @@ impl TestProps {\n             should_ice: false,\n             stderr_per_bitwidth: false,\n             mir_unit_test: None,\n+            remap_src_base: false,\n         }\n     }\n \n@@ -273,6 +278,9 @@ impl TestProps {\n     /// `//[foo]`), then the property is ignored unless `cfg` is\n     /// `Some(\"foo\")`.\n     fn load_from(&mut self, testfile: &Path, cfg: Option<&str>, config: &Config) {\n+        // Mode-dependent defaults.\n+        self.remap_src_base = config.mode == Mode::Ui && !config.suite.contains(\"rustdoc\");\n+\n         let mut has_edition = false;\n         if !testfile.is_dir() {\n             let file = File::open(testfile).unwrap();\n@@ -438,6 +446,7 @@ impl TestProps {\n                 config.set_name_value_directive(ln, MIR_UNIT_TEST, &mut self.mir_unit_test, |s| {\n                     s.trim().to_string()\n                 });\n+                config.set_name_directive(ln, REMAP_SRC_BASE, &mut self.remap_src_base);\n             });\n         }\n \n@@ -730,6 +739,10 @@ impl Config {\n             && matches!(line.as_bytes().get(directive.len()), None | Some(&b' ') | Some(&b':'))\n     }\n \n+    fn parse_negative_name_directive(&self, line: &str, directive: &str) -> bool {\n+        line.starts_with(\"no-\") && self.parse_name_directive(&line[3..], directive)\n+    }\n+\n     pub fn parse_name_value_directive(&self, line: &str, directive: &str) -> Option<String> {\n         let colon = directive.len();\n         if line.starts_with(directive) && line.as_bytes().get(colon) == Some(&b':') {\n@@ -759,8 +772,17 @@ impl Config {\n     }\n \n     fn set_name_directive(&self, line: &str, directive: &str, value: &mut bool) {\n-        if !*value {\n-            *value = self.parse_name_directive(line, directive)\n+        match value {\n+            true => {\n+                if self.parse_negative_name_directive(line, directive) {\n+                    *value = false;\n+                }\n+            }\n+            false => {\n+                if self.parse_name_directive(line, directive) {\n+                    *value = true;\n+                }\n+            }\n         }\n     }\n "}, {"sha": "859c0f1da06c3db9ccc18df91dfbe913ddd2cb1b", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -44,6 +44,8 @@ use debugger::{check_debugger_output, DebuggerCommands};\n #[cfg(test)]\n mod tests;\n \n+const FAKE_SRC_BASE: &str = \"fake-test-src-base\";\n+\n #[cfg(windows)]\n fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     use std::sync::Mutex;\n@@ -1328,12 +1330,19 @@ impl<'test> TestCx<'test> {\n             return;\n         }\n \n+        // On Windows, translate all '\\' path separators to '/'\n+        let file_name = format!(\"{}\", self.testpaths.file.display()).replace(r\"\\\", \"/\");\n+\n         // On Windows, keep all '\\' path separators to match the paths reported in the JSON output\n         // from the compiler\n-        let os_file_name = self.testpaths.file.display().to_string();\n-\n-        // on windows, translate all '\\' path separators to '/'\n-        let file_name = format!(\"{}\", self.testpaths.file.display()).replace(r\"\\\", \"/\");\n+        let diagnostic_file_name = if self.props.remap_src_base {\n+            let mut p = PathBuf::from(FAKE_SRC_BASE);\n+            p.push(&self.testpaths.relative_dir);\n+            p.push(self.testpaths.file.file_name().unwrap());\n+            p.display().to_string()\n+        } else {\n+            self.testpaths.file.display().to_string()\n+        };\n \n         // If the testcase being checked contains at least one expected \"help\"\n         // message, then we'll ensure that all \"help\" messages are expected.\n@@ -1343,7 +1352,7 @@ impl<'test> TestCx<'test> {\n         let expect_note = expected_errors.iter().any(|ee| ee.kind == Some(ErrorKind::Note));\n \n         // Parse the JSON output from the compiler and extract out the messages.\n-        let actual_errors = json::parse_output(&os_file_name, &proc_res.stderr, proc_res);\n+        let actual_errors = json::parse_output(&diagnostic_file_name, &proc_res.stderr, proc_res);\n         let mut unexpected = Vec::new();\n         let mut found = vec![false; expected_errors.len()];\n         for actual_error in &actual_errors {\n@@ -1970,6 +1979,14 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n+        if self.props.remap_src_base {\n+            rustc.arg(format!(\n+                \"--remap-path-prefix={}={}\",\n+                self.config.src_base.display(),\n+                FAKE_SRC_BASE,\n+            ));\n+        }\n+\n         match emit {\n             Emit::None => {}\n             Emit::Metadata if is_rustdoc => {}\n@@ -3545,6 +3562,14 @@ impl<'test> TestCx<'test> {\n         let parent_dir = self.testpaths.file.parent().unwrap();\n         normalize_path(parent_dir, \"$DIR\");\n \n+        if self.props.remap_src_base {\n+            let mut remapped_parent_dir = PathBuf::from(FAKE_SRC_BASE);\n+            if self.testpaths.relative_dir != Path::new(\"\") {\n+                remapped_parent_dir.push(&self.testpaths.relative_dir);\n+            }\n+            normalize_path(&remapped_parent_dir, \"$DIR\");\n+        }\n+\n         let source_bases = &[\n             // Source base on the current filesystem (calculated as parent of `tests/$suite`):\n             Some(self.config.src_base.parent().unwrap().parent().unwrap().into()),"}, {"sha": "bdfd9628c48019966b85e7e894fb7d7a6003a4a4", "filename": "tests/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -2,6 +2,7 @@\n // Testing that a librustc_ast can parse modules with canonicalized base path\n // ignore-cross-compile\n // ignore-remote\n+// no-remap-src-base: Reading `file!()` (expectedly) fails when enabled.\n \n #![feature(rustc_private)]\n "}, {"sha": "f9bb7bf89870a6b3444aa6cdfdd76512aca2eda3", "filename": "tests/ui/errors/auxiliary/remapped_dep.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fauxiliary%2Fremapped_dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fauxiliary%2Fremapped_dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fauxiliary%2Fremapped_dep.rs?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,3 +1,4 @@\n // compile-flags: --remap-path-prefix={{src-base}}/errors/auxiliary=remapped-aux\n+// no-remap-src-base: Manually remap, so the remapped path remains in .stderr file.\n \n pub struct SomeStruct {} // This line should be show as part of the error."}, {"sha": "51e3b776cb2c08b91e283da11033cae05265eec3", "filename": "tests/ui/errors/remap-path-prefix-reverse.local-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.local-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.local-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.local-self.stderr?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,10 +1,10 @@\n error[E0423]: expected value, found struct `remapped_dep::SomeStruct`\n-  --> $DIR/remap-path-prefix-reverse.rs:22:13\n+  --> $DIR/remap-path-prefix-reverse.rs:16:13\n    |\n-LL |     let _ = remapped_dep::SomeStruct;\n+LL |     let _ = remapped_dep::SomeStruct; // ~ERROR E0423\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `remapped_dep::SomeStruct {}`\n    |\n-  ::: remapped-aux/remapped_dep.rs:3:1\n+  ::: remapped-aux/remapped_dep.rs:4:1\n    |\n LL | pub struct SomeStruct {} // This line should be show as part of the error.\n    | --------------------- `remapped_dep::SomeStruct` defined here"}, {"sha": "51e3b776cb2c08b91e283da11033cae05265eec3", "filename": "tests/ui/errors/remap-path-prefix-reverse.remapped-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.remapped-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.remapped-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.remapped-self.stderr?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,10 +1,10 @@\n error[E0423]: expected value, found struct `remapped_dep::SomeStruct`\n-  --> remapped/errors/remap-path-prefix-reverse.rs:22:13\n+  --> $DIR/remap-path-prefix-reverse.rs:16:13\n    |\n-LL |     let _ = remapped_dep::SomeStruct;\n+LL |     let _ = remapped_dep::SomeStruct; // ~ERROR E0423\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: use struct literal syntax instead: `remapped_dep::SomeStruct {}`\n    |\n-  ::: remapped-aux/remapped_dep.rs:3:1\n+  ::: remapped-aux/remapped_dep.rs:4:1\n    |\n LL | pub struct SomeStruct {} // This line should be show as part of the error.\n    | --------------------- `remapped_dep::SomeStruct` defined here"}, {"sha": "71c80063c320fb5275c28d86991dc39553920548", "filename": "tests/ui/errors/remap-path-prefix-reverse.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix-reverse.rs?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,15 +1,9 @@\n // aux-build:remapped_dep.rs\n // compile-flags: --remap-path-prefix={{src-base}}/errors/auxiliary=remapped-aux\n \n-// The remapped paths are not normalized by compiletest.\n-// normalize-stderr-test: \"\\\\(errors)\" -> \"/$1\"\n-\n // revisions: local-self remapped-self\n-// [remapped-self]compile-flags: --remap-path-prefix={{src-base}}=remapped\n-\n-// The paths from `remapped-self` aren't recognized by compiletest, so we\n-// cannot use line-specific patterns for the actual error.\n-// error-pattern: E0423\n+// [local-self] no-remap-src-base: The hack should work regardless of remapping.\n+// [remapped-self] remap-src-base\n \n // Verify that the expected source code is shown.\n // error-pattern: pub struct SomeStruct {} // This line should be show\n@@ -19,5 +13,5 @@ extern crate remapped_dep;\n fn main() {\n     // The actual error is irrelevant. The important part it that is should show\n     // a snippet of the dependency's source.\n-    let _ = remapped_dep::SomeStruct;\n+    let _ = remapped_dep::SomeStruct; // ~ERROR E0423\n }"}, {"sha": "393b8e22f1c1dc8c9afe72fc5b46603bfb9ba46e", "filename": "tests/ui/errors/remap-path-prefix.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix.rs?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: --remap-path-prefix={{src-base}}=remapped\n+// no-remap-src-base: Manually remap, so the remapped path remains in .stderr file.\n \n // The remapped paths are not normalized by compiletest.\n // normalize-stderr-test: \"\\\\(errors)\" -> \"/$1\""}, {"sha": "62dbd4b8881a38a5de6165810266f4b57cda2da3", "filename": "tests/ui/errors/remap-path-prefix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Ferrors%2Fremap-path-prefix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferrors%2Fremap-path-prefix.stderr?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find value `ferris` in this scope\n-  --> remapped/errors/remap-path-prefix.rs:15:5\n+  --> remapped/errors/remap-path-prefix.rs:16:5\n    |\n LL |     ferris\n    |     ^^^^^^ not found in this scope"}, {"sha": "700aac41c449a10890defc06ac3a17341ac3b100", "filename": "tests/ui/proc-macro/expand-expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fexpand-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fexpand-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fexpand-expr.rs?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,4 +1,6 @@\n // aux-build:expand-expr.rs\n+// no-remap-src-base: check_expand_expr_file!() fails when enabled.\n+\n #![feature(concat_bytes)]\n extern crate expand_expr;\n \n@@ -8,7 +10,7 @@ use expand_expr::{\n \n // Check builtin macros can be expanded.\n \n-expand_expr_is!(11u32, line!());\n+expand_expr_is!(13u32, line!());\n expand_expr_is!(24u32, column!());\n \n expand_expr_is!(\"Hello, World!\", concat!(\"Hello, \", \"World\", \"!\"));"}, {"sha": "df61e9972896b05734f2641b013bdbad66dc9539", "filename": "tests/ui/proc-macro/expand-expr.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fexpand-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fexpand-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fexpand-expr.stderr?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,29 +1,29 @@\n error: expected one of `.`, `?`, or an operator, found `;`\n-  --> $DIR/expand-expr.rs:106:27\n+  --> $DIR/expand-expr.rs:108:27\n    |\n LL | expand_expr_fail!(\"string\"; hello);\n    |                           ^ expected one of `.`, `?`, or an operator\n \n error: expected expression, found `$`\n-  --> $DIR/expand-expr.rs:109:19\n+  --> $DIR/expand-expr.rs:111:19\n    |\n LL | expand_expr_fail!($);\n    |                   ^ expected expression\n \n error: expected expression, found `$`\n-  --> $DIR/expand-expr.rs:38:23\n+  --> $DIR/expand-expr.rs:40:23\n    |\n LL |     ($($t:tt)*) => { $($t)* };\n    |                       ^^^^ expected expression\n \n error: expected expression, found `$`\n-  --> $DIR/expand-expr.rs:111:28\n+  --> $DIR/expand-expr.rs:113:28\n    |\n LL | expand_expr_fail!(echo_pm!($));\n    |                            ^ expected expression\n \n error: macro expansion ignores token `hello` and any following\n-  --> $DIR/expand-expr.rs:115:47\n+  --> $DIR/expand-expr.rs:117:47\n    |\n LL | expand_expr_is!(\"string\", echo_tts!(\"string\"; hello));\n    |                           --------------------^^^^^- caused by the macro expansion here\n@@ -35,7 +35,7 @@ LL | expand_expr_is!(\"string\", echo_tts!(\"string\"; hello););\n    |                                                     +\n \n error: macro expansion ignores token `;` and any following\n-  --> $DIR/expand-expr.rs:116:44\n+  --> $DIR/expand-expr.rs:118:44\n    |\n LL | expand_expr_is!(\"string\", echo_pm!(\"string\"; hello));\n    |                           -----------------^------- caused by the macro expansion here\n@@ -47,7 +47,7 @@ LL | expand_expr_is!(\"string\", echo_pm!(\"string\"; hello););\n    |                                                    +\n \n error: recursion limit reached while expanding `recursive_expand!`\n-  --> $DIR/expand-expr.rs:124:16\n+  --> $DIR/expand-expr.rs:126:16\n    |\n LL | const _: u32 = recursive_expand!();\n    |                ^^^^^^^^^^^^^^^^^^^"}, {"sha": "873054927c96279723f7b87ae31a908372109ca1", "filename": "tests/ui/proc-macro/pretty-print-hack-show.remapped.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stderr?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,5 +1,5 @@\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -10,7 +10,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: `#[deny(proc_macro_back_compat)]` on by default\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -20,7 +20,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -30,7 +30,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -40,7 +40,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -50,7 +50,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -70,7 +70,7 @@ LL | enum ProceduralMasqueradeDummyType {\n    = note: older versions of the `rental` crate will stop compiling in future versions of Rust; please update to `rental` v0.5.6, or switch to one of the `rental` alternatives\n \n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -83,7 +83,7 @@ error: aborting due to 8 previous errors\n \n Future incompatibility report: Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -95,7 +95,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -107,7 +107,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -119,7 +119,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -131,7 +131,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -143,7 +143,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -155,7 +155,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -167,7 +167,7 @@ LL | enum ProceduralMasqueradeDummyType {\n \n Future breakage diagnostic:\n error: using an old version of `rental`\n-  --> remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n+  --> $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6\n    |\n LL | enum ProceduralMasqueradeDummyType {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "3d793d2a0145c984f27fa8092f21df04c2ba724e", "filename": "tests/ui/proc-macro/pretty-print-hack-show.remapped.stdout", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.remapped.stdout?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -3,42 +3,42 @@ PRINT-DERIVE RE-COLLECTED (DISPLAY): enum ProceduralMasqueradeDummyType { Input\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n-        span: remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:1: 4:5 (#0),\n+        span: $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:1: 4:5 (#0),\n     },\n     Ident {\n         ident: \"ProceduralMasqueradeDummyType\",\n-        span: remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6: 4:35 (#0),\n+        span: $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:6: 4:35 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [\n             Ident {\n                 ident: \"Input\",\n-                span: remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:13:5: 13:10 (#0),\n+                span: $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:13:5: 13:10 (#0),\n             },\n         ],\n-        span: remapped/proc-macro/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:36: 14:2 (#0),\n+        span: $DIR/pretty-print-hack/allsorts-rental-0.5.6/src/lib.rs:4:36: 14:2 (#0),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): enum ProceduralMasqueradeDummyType { Input, }\n PRINT-DERIVE RE-COLLECTED (DISPLAY): enum ProceduralMasqueradeDummyType { Input }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"enum\",\n-        span: remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:1: 4:5 (#0),\n+        span: $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:1: 4:5 (#0),\n     },\n     Ident {\n         ident: \"ProceduralMasqueradeDummyType\",\n-        span: remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6: 4:35 (#0),\n+        span: $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:6: 4:35 (#0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [\n             Ident {\n                 ident: \"Input\",\n-                span: remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:13:5: 13:10 (#0),\n+                span: $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:13:5: 13:10 (#0),\n             },\n         ],\n-        span: remapped/proc-macro/pretty-print-hack/rental-0.5.5/src/lib.rs:4:36: 14:2 (#0),\n+        span: $DIR/pretty-print-hack/rental-0.5.5/src/lib.rs:4:36: 14:2 (#0),\n     },\n ]"}, {"sha": "24a389c450ea01d176cab209eb54b3cf4430c8cf", "filename": "tests/ui/proc-macro/pretty-print-hack-show.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52372f9c71d8ade4cb815524f179119656f0aa2e/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fpretty-print-hack-show.rs?ref=52372f9c71d8ade4cb815524f179119656f0aa2e", "patch": "@@ -1,11 +1,8 @@\n // aux-build:test-macros.rs\n // compile-flags: -Z span-debug\n // revisions: local remapped\n-// [remapped]compile-flags: --remap-path-prefix={{src-base}}=remapped\n-\n-// The remapped paths are not normalized by compiletest.\n-// normalize-stdout-test: \"\\\\(proc-macro|pretty-print-hack)\" -> \"/$1\"\n-// normalize-stderr-test: \"\\\\(proc-macro|pretty-print-hack)\" -> \"/$1\"\n+// [local] no-remap-src-base: The hack should work regardless of remapping.\n+// [remapped] remap-src-base\n \n #![no_std] // Don't load unnecessary hygiene information from std\n extern crate std;"}]}