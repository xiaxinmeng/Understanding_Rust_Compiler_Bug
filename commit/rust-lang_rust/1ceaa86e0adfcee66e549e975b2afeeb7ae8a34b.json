{"sha": "1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZWFhODZlMGFkZmNlZTY2ZTU0OWU5NzViMmFmZWViN2FlOGEzNGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-03T15:22:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-03T15:22:54Z"}, "message": "Auto merge of #33997 - jseyfried:resolve_in_phase_2, r=nrc\n\nMove name resolution into phase 2\n\nr? @nrc", "tree": {"sha": "bf65461314e03edb17ae2cf487397fa9e964a932", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf65461314e03edb17ae2cf487397fa9e964a932"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "html_url": "https://github.com/rust-lang/rust/commit/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9552bcdd92dfd09049ce9dd299b4bfc513ac075d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9552bcdd92dfd09049ce9dd299b4bfc513ac075d", "html_url": "https://github.com/rust-lang/rust/commit/9552bcdd92dfd09049ce9dd299b4bfc513ac075d"}, {"sha": "3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c", "html_url": "https://github.com/rust-lang/rust/commit/3fc0407fb39baa6f0048ff30c5f8f9cc8eba269c"}], "stats": {"total": 240, "additions": 87, "deletions": 153}, "files": [{"sha": "96a1bdf62dea7f5c9e081cc200da18cf14fb8f62", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 66, "deletions": 61, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "patch": "@@ -94,15 +94,15 @@ pub fn compile_input(sess: &Session,\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n     let (outputs, trans) = {\n-        let (outputs, expanded_crate, id) = {\n-            let krate = match phase_1_parse_input(sess, cfg, input) {\n-                Ok(krate) => krate,\n-                Err(mut parse_error) => {\n-                    parse_error.emit();\n-                    return Err(1);\n-                }\n-            };\n+        let krate = match phase_1_parse_input(sess, cfg, input) {\n+            Ok(krate) => krate,\n+            Err(mut parse_error) => {\n+                parse_error.emit();\n+                return Err(1);\n+            }\n+        };\n \n+        let krate = {\n             let mut compile_state = CompileState::state_after_parse(input,\n                                                                     sess,\n                                                                     outdir,\n@@ -113,17 +113,15 @@ pub fn compile_input(sess: &Session,\n                                     sess,\n                                     compile_state,\n                                     Ok(()));\n-            let krate = compile_state.krate.unwrap();\n \n-            let outputs = build_output_filenames(input, outdir, output, &krate.attrs, sess);\n-            let id = link::find_crate_name(Some(sess), &krate.attrs, input);\n-            let expanded_crate = phase_2_configure_and_expand(sess,\n-                                                              &cstore,\n-                                                              krate,\n-                                                              &id,\n-                                                              addl_plugins)?;\n+            compile_state.krate.unwrap()\n+        };\n \n-            (outputs, expanded_crate, id)\n+        let outputs = build_output_filenames(input, outdir, output, &krate.attrs, sess);\n+        let id = link::find_crate_name(Some(sess), &krate.attrs, input);\n+        let ExpansionResult { expanded_crate, defs, analysis, resolutions, mut hir_forest } = {\n+            let make_glob_map = control.make_glob_map;\n+            phase_2_configure_and_expand(sess, &cstore, krate, &id, addl_plugins, make_glob_map)?\n         };\n \n         controller_entry_point!(after_expand,\n@@ -150,42 +148,12 @@ pub fn compile_input(sess: &Session,\n                                                                      &id),\n                                 Ok(()));\n \n-        let expanded_crate = assign_node_ids(sess, expanded_crate);\n-\n-        // Collect defintions for def ids.\n-        let mut defs = time(sess.time_passes(),\n-                            \"collecting defs\",\n-                            || hir_map::collect_definitions(&expanded_crate));\n-\n-        time(sess.time_passes(),\n-             \"external crate/lib resolution\",\n-             || read_local_crates(sess, &cstore, &defs, &expanded_crate, &id, &sess.dep_graph));\n-\n-        time(sess.time_passes(),\n-             \"early lint checks\",\n-             || lint::check_ast_crate(sess, &expanded_crate));\n-\n-        time(sess.time_passes(),\n-             \"AST validation\",\n-             || ast_validation::check_crate(sess, &expanded_crate));\n-\n-        let (analysis, resolutions, mut hir_forest) = {\n-            lower_and_resolve(sess, &id, &mut defs, &expanded_crate,\n-                              &sess.dep_graph, control.make_glob_map)\n-        };\n-\n-        // Discard MTWT tables that aren't required past lowering to HIR.\n-        if !keep_mtwt_tables(sess) {\n-            syntax::ext::mtwt::clear_tables();\n-        }\n-\n         let arenas = ty::CtxtArenas::new();\n \n         // Construct the HIR map\n-        let hir_forest = &mut hir_forest;\n         let hir_map = time(sess.time_passes(),\n                            \"indexing hir\",\n-                           move || hir_map::map_crate(hir_forest, defs));\n+                           || hir_map::map_crate(&mut hir_forest, defs));\n \n         {\n             let _ignore = hir_map.dep_graph.in_ignore();\n@@ -577,19 +545,28 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n // For continuing compilation after a parsed crate has been\n // modified\n \n+pub struct ExpansionResult<'a> {\n+    pub expanded_crate: ast::Crate,\n+    pub defs: hir_map::Definitions,\n+    pub analysis: ty::CrateAnalysis<'a>,\n+    pub resolutions: Resolutions,\n+    pub hir_forest: hir_map::Forest,\n+}\n+\n /// Run the \"early phases\" of the compiler: initial `cfg` processing,\n /// loading compiler plugins (including those from `addl_plugins`),\n /// syntax expansion, secondary `cfg` expansion, synthesis of a test\n-/// harness if one is to be provided and injection of a dependency on the\n-/// standard library and prelude.\n+/// harness if one is to be provided, injection of a dependency on the\n+/// standard library and prelude, and name resolution.\n ///\n /// Returns `None` if we're aborting after handling -W help.\n-pub fn phase_2_configure_and_expand(sess: &Session,\n-                                    cstore: &CStore,\n-                                    mut krate: ast::Crate,\n-                                    crate_name: &str,\n-                                    addl_plugins: Option<Vec<String>>)\n-                                    -> Result<ast::Crate, usize> {\n+pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n+                                        cstore: &CStore,\n+                                        mut krate: ast::Crate,\n+                                        crate_name: &'a str,\n+                                        addl_plugins: Option<Vec<String>>,\n+                                        make_glob_map: resolve::MakeGlobMap)\n+                                        -> Result<ExpansionResult<'a>, usize> {\n     let time_passes = sess.time_passes();\n \n     // strip before anything else because crate metadata may use #[cfg_attr]\n@@ -747,10 +724,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                  \"prelude injection\",\n                  || syntax::std_inject::maybe_inject_prelude(&sess.parse_sess, krate));\n \n-    time(time_passes,\n-         \"checking that all macro invocations are gone\",\n-         || syntax::ext::expand::check_for_macros(&sess.parse_sess, &krate));\n-\n     time(time_passes,\n          \"checking for inline asm in case the target doesn't support it\",\n          || no_asm::check_crate(sess, &krate));\n@@ -771,7 +744,39 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         println!(\"Post-expansion node count: {}\", count_nodes(&krate));\n     }\n \n-    Ok(krate)\n+    krate = assign_node_ids(sess, krate);\n+\n+    // Collect defintions for def ids.\n+    let mut defs =\n+        time(sess.time_passes(), \"collecting defs\", || hir_map::collect_definitions(&krate));\n+\n+    time(sess.time_passes(),\n+         \"external crate/lib resolution\",\n+         || read_local_crates(sess, &cstore, &defs, &krate, crate_name, &sess.dep_graph));\n+\n+    time(sess.time_passes(),\n+         \"early lint checks\",\n+         || lint::check_ast_crate(sess, &krate));\n+\n+    time(sess.time_passes(),\n+         \"AST validation\",\n+         || ast_validation::check_crate(sess, &krate));\n+\n+    let (analysis, resolutions, hir_forest) =\n+        lower_and_resolve(sess, crate_name, &mut defs, &krate, &sess.dep_graph, make_glob_map);\n+\n+    // Discard MTWT tables that aren't required past lowering to HIR.\n+    if !keep_mtwt_tables(sess) {\n+        syntax::ext::mtwt::clear_tables();\n+    }\n+\n+    Ok(ExpansionResult {\n+        expanded_crate: krate,\n+        defs: defs,\n+        analysis: analysis,\n+        resolutions: resolutions,\n+        hir_forest: hir_forest\n+    })\n }\n \n pub fn assign_node_ids(sess: &Session, krate: ast::Crate) -> ast::Crate {"}, {"sha": "c147a534e5ea72632f9e2da866d6daa638e4ea29", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "patch": "@@ -26,7 +26,6 @@ use rustc::traits::ProjectionMode;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n use rustc::infer::{self, InferOk, InferResult, TypeOrigin};\n use rustc_metadata::cstore::CStore;\n-use rustc_metadata::creader::read_local_crates;\n use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n use std::rc::Rc;\n@@ -116,19 +115,11 @@ fn test_env<F>(source_string: &str,\n         input: source_string.to_string(),\n     };\n     let krate = driver::phase_1_parse_input(&sess, krate_config, &input).unwrap();\n-    let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, \"test\", None)\n-                    .expect(\"phase 2 aborted\");\n-\n-    let krate = driver::assign_node_ids(&sess, krate);\n-    let mut defs = hir_map::collect_definitions(&krate);\n-    read_local_crates(&sess, &cstore, &defs, &krate, \"test_crate\", &dep_graph);\n+    let driver::ExpansionResult { defs, resolutions, mut hir_forest, .. } =\n+        driver::phase_2_configure_and_expand(&sess, &cstore, krate, \"test\", None, MakeGlobMap::No)\n+            .expect(\"phase 2 aborted\");\n     let _ignore = dep_graph.in_ignore();\n \n-    let (_, resolutions, mut hir_forest) = {\n-        driver::lower_and_resolve(&sess, \"test-crate\", &mut defs, &krate,\n-                                  &sess.dep_graph, MakeGlobMap::No)\n-    };\n-\n     let arenas = ty::CtxtArenas::new();\n     let ast_map = hir_map::map_crate(&mut hir_forest, defs);\n "}, {"sha": "73e0a529a45c6a60135c04d8786b44331693d7e0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "patch": "@@ -21,7 +21,6 @@ use rustc::lint;\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n-use rustc_metadata::creader::read_local_crates;\n \n use syntax::{ast, codemap, errors};\n use syntax::errors::emitter::ColorConfig;\n@@ -146,21 +145,12 @@ pub fn run_core(search_paths: SearchPaths,\n \n     let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));\n \n-    let name = link::find_crate_name(Some(&sess), &krate.attrs,\n-                                     &input);\n+    let name = link::find_crate_name(Some(&sess), &krate.attrs, &input);\n \n-    let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, &name, None)\n-                    .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n-\n-    let krate = driver::assign_node_ids(&sess, krate);\n-\n-    let mut defs = hir_map::collect_definitions(&krate);\n-    read_local_crates(&sess, &cstore, &defs, &krate, &name, &dep_graph);\n-\n-    // Lower ast -> hir and resolve.\n-    let (analysis, resolutions, mut hir_forest) = {\n-        driver::lower_and_resolve(&sess, &name, &mut defs, &krate,\n-                                  &sess.dep_graph, resolve::MakeGlobMap::No)\n+    let driver::ExpansionResult { defs, analysis, resolutions, mut hir_forest, .. } = {\n+        let make_glob_map = resolve::MakeGlobMap::No;\n+        driver::phase_2_configure_and_expand(&sess, &cstore, krate, &name, None, make_glob_map)\n+            .expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n     };\n \n     let arenas = ty::CtxtArenas::new();"}, {"sha": "f0ca89097f701f6f98f6ab114f44e6413c3f23ef", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "patch": "@@ -28,11 +28,12 @@ use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n use rustc::session::config::{get_unstable_features_setting, OutputType};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n-use rustc::hir::lowering::{lower_crate, DummyResolver};\n use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n use rustc_driver::{driver, Compilation};\n+use rustc_driver::driver::phase_2_configure_and_expand;\n use rustc_metadata::cstore::CStore;\n+use rustc_resolve::MakeGlobMap;\n use syntax::codemap::CodeMap;\n use syntax::errors;\n use syntax::errors::emitter::ColorConfig;\n@@ -93,21 +94,16 @@ pub fn run(input: &str,\n     let mut cfg = config::build_configuration(&sess);\n     cfg.extend(config::parse_cfgspecs(cfgs.clone()));\n     let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));\n-    let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate,\n-                                                     \"rustdoc-test\", None)\n-        .expect(\"phase_2_configure_and_expand aborted in rustdoc!\");\n-    let krate = driver::assign_node_ids(&sess, krate);\n-    let dep_graph = DepGraph::new(false);\n-    let defs = hir_map::collect_definitions(&krate);\n-\n-    let mut dummy_resolver = DummyResolver;\n-    let krate = lower_crate(&sess, &krate, &sess, &mut dummy_resolver);\n-\n-    let opts = scrape_test_config(&krate);\n+    let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n+        let make_glob_map = MakeGlobMap::No;\n+        phase_2_configure_and_expand(&sess, &cstore, krate, \"rustdoc-test\", None, make_glob_map)\n+            .expect(\"phase_2_configure_and_expand aborted in rustdoc!\")\n+    };\n \n+    let dep_graph = DepGraph::new(false);\n+    let opts = scrape_test_config(hir_forest.krate());\n     let _ignore = dep_graph.in_ignore();\n-    let mut forest = hir_map::Forest::new(krate, &dep_graph);\n-    let map = hir_map::map_crate(&mut forest, defs);\n+    let map = hir_map::map_crate(&mut hir_forest, defs);\n \n     let ctx = core::DocContext {\n         map: &map,"}, {"sha": "d3f5a573218fdd8f11fa4398e4263f52103f254f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "patch": "@@ -25,7 +25,6 @@ use feature_gate::{self, Features};\n use fold;\n use fold::*;\n use util::move_map::MoveMap;\n-use parse;\n use parse::token::{fresh_mark, fresh_name, intern, keywords};\n use ptr::P;\n use util::small_vector::SmallVector;\n@@ -1212,24 +1211,6 @@ fn mark_tts(tts: &[TokenTree], m: Mrk) -> Vec<TokenTree> {\n     noop_fold_tts(tts, &mut Marker{mark:m, expn_id: None})\n }\n \n-/// Check that there are no macro invocations left in the AST:\n-pub fn check_for_macros(sess: &parse::ParseSess, krate: &ast::Crate) {\n-    visit::walk_crate(&mut MacroExterminator{sess:sess}, krate);\n-}\n-\n-/// A visitor that ensures that no macro invocations remain in an AST.\n-struct MacroExterminator<'a>{\n-    sess: &'a parse::ParseSess\n-}\n-\n-impl<'a, 'v> Visitor<'v> for MacroExterminator<'a> {\n-    fn visit_mac(&mut self, mac: &ast::Mac) {\n-        self.sess.span_diagnostic.span_bug(mac.span,\n-                                           \"macro exterminator: expected AST \\\n-                                           with no macro invocations\");\n-    }\n-}\n-\n \n #[cfg(test)]\n mod tests {"}, {"sha": "5d2cfadfd020a76d8da90ad2f79742ba8b5cb416", "filename": "src/test/run-make/dep-info-no-analysis/Makefile", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9552bcdd92dfd09049ce9dd299b4bfc513ac075d/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9552bcdd92dfd09049ce9dd299b4bfc513ac075d/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2FMakefile?ref=9552bcdd92dfd09049ce9dd299b4bfc513ac075d", "patch": "@@ -1,6 +0,0 @@\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTC) -o $(TMPDIR)/input.dd -Z no-analysis --emit dep-info input.rs\n-\tsed -i'.bak' 's/^.*input.dd/input.dd/g' $(TMPDIR)/input.dd\n-\tdiff -u $(TMPDIR)/input.dd input.dd"}, {"sha": "f2c8676515b8ad2c73f634f5397b9c3fda24d3a0", "filename": "src/test/run-make/dep-info-no-analysis/input.dd", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9552bcdd92dfd09049ce9dd299b4bfc513ac075d/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd", "raw_url": "https://github.com/rust-lang/rust/raw/9552bcdd92dfd09049ce9dd299b4bfc513ac075d/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.dd?ref=9552bcdd92dfd09049ce9dd299b4bfc513ac075d", "patch": "@@ -1,3 +0,0 @@\n-input.dd: input.rs\n-\n-input.rs:"}, {"sha": "523b0f0670ce4eadc19fe8d8800f7f46f495bcb5", "filename": "src/test/run-make/dep-info-no-analysis/input.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9552bcdd92dfd09049ce9dd299b4bfc513ac075d/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9552bcdd92dfd09049ce9dd299b4bfc513ac075d/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-no-analysis%2Finput.rs?ref=9552bcdd92dfd09049ce9dd299b4bfc513ac075d", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Tests that dep info can be emitted without resolving external crates.\n-extern crate not_there;\n-\n-fn main() {}"}, {"sha": "8a7959212f54adb97b4e0b9ebd96fa8ad43da400", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=1ceaa86e0adfcee66e549e975b2afeeb7ae8a34b", "patch": "@@ -238,15 +238,9 @@ fn compile_program(input: &str, sysroot: PathBuf)\n \n         let krate = panictry!(driver::phase_1_parse_input(&sess, cfg, &input));\n \n-        let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, &id, None)\n-            .expect(\"phase_2 returned `None`\");\n-\n-        let krate = driver::assign_node_ids(&sess, krate);\n-        let mut defs = ast_map::collect_definitions(&krate);\n-        read_local_crates(&sess, &cstore, &defs, &krate, &id, &dep_graph);\n-        let (analysis, resolutions, mut hir_forest) = {\n-            driver::lower_and_resolve(&sess, &id, &mut defs, &krate,\n-                                      &sess.dep_graph, MakeGlobMap::No)\n+        let driver::ExpansionResult { defs, analysis, resolutions, mut hir_forest, .. } = {\n+            driver::phase_2_configure_and_expand(&sess, &cstore, krate, &id, None, MakeGlobMap::No)\n+                .expect(\"phase_2 returned `None`\")\n         };\n \n         let arenas = ty::CtxtArenas::new();"}]}