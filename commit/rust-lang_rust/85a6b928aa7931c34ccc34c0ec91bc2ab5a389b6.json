{"sha": "85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YTZiOTI4YWE3OTMxYzM0Y2NjMzRjMGVjOTFiYzJhYjVhMzg5YjY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T06:01:04Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-03-03T06:01:04Z"}, "message": "Rollup merge of #48477 - Manishearth:dyn-trait-fixes, r=nmatsakis\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "371da2ddf3f19d2d90469bdf5984d54199555325", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/371da2ddf3f19d2d90469bdf5984d54199555325"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlqaOiAACgkQO79NPi73\nn5j7cxAAy5E1Kyndh0hxCG4wcPSBTKBf/Rr4+IOAdT1IIB9Ks1aXZD3dEU8EsEba\njv7jW6T2++YJnWkFuMbArzPsWpsFDLxpLbQxBe4bDMXQdF0aeNs6dFHgX4CjnZu7\nSifUl7BjQedEoe/+GXcPGPcx23ZQ7LGSzxOylOOZeGVFzN6tuhdBUbDXDhhCBcah\nMfFWruJiutUccetojbSzHoudMOiR+UqNGZ72x2Q+Jl5lZFkWArAt6am467WgrnXS\n4203pokZ2596WxbwZ6VyCRZ3mA3apZgYJ+l+7vJ+afydklu6pqeNWZeMzA0wX2oz\nvnBcgiEV1QXwtYz6dm7bS/LLAKgkVkTnx5gRmtj38EYn56nAxDmwPVu/T/9yYgsb\nHm8KJsQ/FHFieS8VgbYvba/S8mC06Q79QZZ1d28Tsy+9QvgKnIGmduGrMRo9sSBu\n9RpsJRACbSl+gEBzi8h1UKe4klv4+tDL6vAJUWGfDwGa+ai2j0c1qW883J2k2d5c\nGo4719OlbSWMMnMM6G7z4sL8Col8FW7qk+DCpmzd+R40jIplnNwv3UimhAXPOY8Q\n+WrwPaJ1fJeQImm10lf8iXavTVUAQiWNFvm2pCzcm3e892E9XPOQk97bt4MyI1ii\n1SRm68W4DtHPAFhW63jCFw7A0pikZpBeHIEeEt2sjc+1h94JLJ8=\n=OAXO\n-----END PGP SIGNATURE-----", "payload": "tree 371da2ddf3f19d2d90469bdf5984d54199555325\nparent e8af0f4c1f121263e55da29854208db0ae1fea54\nparent 40f218f7035a533c921417c240ebdd5a5de8502d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1520056864 -0800\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1520056864 -0800\n\nRollup merge of #48477 - Manishearth:dyn-trait-fixes, r=nmatsakis\n\nFixes #47311.\nr? @nrc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "html_url": "https://github.com/rust-lang/rust/commit/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8af0f4c1f121263e55da29854208db0ae1fea54", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8af0f4c1f121263e55da29854208db0ae1fea54", "html_url": "https://github.com/rust-lang/rust/commit/e8af0f4c1f121263e55da29854208db0ae1fea54"}, {"sha": "40f218f7035a533c921417c240ebdd5a5de8502d", "url": "https://api.github.com/repos/rust-lang/rust/commits/40f218f7035a533c921417c240ebdd5a5de8502d", "html_url": "https://github.com/rust-lang/rust/commit/40f218f7035a533c921417c240ebdd5a5de8502d"}], "stats": {"total": 188, "additions": 94, "deletions": 94}, "files": [{"sha": "e56333aba9be571c5d52c738a81909b291b87a17", "filename": "src/librustc/dep_graph/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fdep_graph%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fdep_graph%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdebug.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -54,7 +54,7 @@ pub struct EdgeFilter {\n }\n \n impl EdgeFilter {\n-    pub fn new(test: &str) -> Result<EdgeFilter, Box<Error>> {\n+    pub fn new(test: &str) -> Result<EdgeFilter, Box<dyn Error>> {\n         let parts: Vec<_> = test.split(\"->\").collect();\n         if parts.len() != 2 {\n             Err(format!(\"expected a filter like `a&b -> c&d`, not `{}`\", test).into())"}, {"sha": "fa745bf165577cc3de2d14e6f1b7e8877c61ced6", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -80,13 +80,13 @@ pub struct LoweringContext<'a> {\n     // Use to assign ids to hir nodes that do not directly correspond to an ast node\n     sess: &'a Session,\n \n-    cstore: &'a CrateStore,\n+    cstore: &'a dyn CrateStore,\n \n     // As we walk the AST we must keep track of the current 'parent' def id (in\n     // the form of a DefIndex) so that if we create a new node which introduces\n     // a definition, then we can properly create the def id.\n     parent_def: Option<DefIndex>,\n-    resolver: &'a mut Resolver,\n+    resolver: &'a mut dyn Resolver,\n     name_map: FxHashMap<Ident, Name>,\n \n     /// The items being lowered are collected here.\n@@ -177,10 +177,10 @@ enum ImplTraitContext {\n }\n \n pub fn lower_crate(sess: &Session,\n-                   cstore: &CrateStore,\n+                   cstore: &dyn CrateStore,\n                    dep_graph: &DepGraph,\n                    krate: &Crate,\n-                   resolver: &mut Resolver)\n+                   resolver: &mut dyn Resolver)\n                    -> hir::Crate {\n     // We're constructing the HIR here; we don't care what we will\n     // read, since we haven't even constructed the *input* to"}, {"sha": "9bbda9d74479b7e060c545a5bc32ebec0dff59f3", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -123,7 +123,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n \n     pub(super) fn finalize_and_compute_crate_hash(self,\n                                                   crate_disambiguator: CrateDisambiguator,\n-                                                  cstore: &CrateStore,\n+                                                  cstore: &dyn CrateStore,\n                                                   codemap: &CodeMap,\n                                                   commandline_args_hash: u64)\n                                                   -> (Vec<MapEntry<'hir>>, Svh) {"}, {"sha": "cdd6395747865576a1f6d6d876587c05241bf2e4", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -26,7 +26,7 @@ pub struct DefCollector<'a> {\n     definitions: &'a mut Definitions,\n     parent_def: Option<DefIndex>,\n     expansion: Mark,\n-    pub visit_macro_invoc: Option<&'a mut FnMut(MacroInvocationData)>,\n+    pub visit_macro_invoc: Option<&'a mut dyn FnMut(MacroInvocationData)>,\n }\n \n pub struct MacroInvocationData {"}, {"sha": "61fae4609d54fe7813b76857c5baa5fb6e48ed09", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -19,6 +19,8 @@ use dep_graph::{DepGraph, DepNode, DepKind, DepNodeIndex};\n \n use hir::def_id::{CRATE_DEF_INDEX, DefId, LocalDefId, DefIndexAddressSpace};\n \n+use middle::cstore::CrateStore;\n+\n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, CRATE_NODE_ID};\n use syntax::codemap::Spanned;\n@@ -1136,8 +1138,9 @@ impl Named for StructField { fn name(&self) -> Name { self.name } }\n impl Named for TraitItem { fn name(&self) -> Name { self.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.name } }\n \n+\n pub fn map_crate<'hir>(sess: &::session::Session,\n-                       cstore: &::middle::cstore::CrateStore,\n+                       cstore: &dyn CrateStore,\n                        forest: &'hir mut Forest,\n                        definitions: &'hir Definitions)\n                        -> Map<'hir> {"}, {"sha": "ed8cea3eb65634abca355cd2fa49500692f4bbbf", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -62,7 +62,7 @@ pub trait PpAnn {\n \n pub struct NoAnn;\n impl PpAnn for NoAnn {}\n-pub const NO_ANN: &'static PpAnn = &NoAnn;\n+pub const NO_ANN: &'static dyn PpAnn = &NoAnn;\n \n impl PpAnn for hir::Crate {\n     fn nested(&self, state: &mut State, nested: Nested) -> io::Result<()> {\n@@ -83,7 +83,7 @@ pub struct State<'a> {\n     literals: Peekable<vec::IntoIter<comments::Literal>>,\n     cur_cmnt: usize,\n     boxes: Vec<pp::Breaks>,\n-    ann: &'a (PpAnn + 'a),\n+    ann: &'a (dyn PpAnn + 'a),\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n@@ -126,9 +126,9 @@ pub fn print_crate<'a>(cm: &'a CodeMap,\n                        sess: &ParseSess,\n                        krate: &hir::Crate,\n                        filename: FileName,\n-                       input: &mut Read,\n-                       out: Box<Write + 'a>,\n-                       ann: &'a PpAnn,\n+                       input: &mut dyn Read,\n+                       out: Box<dyn Write + 'a>,\n+                       ann: &'a dyn PpAnn,\n                        is_expanded: bool)\n                        -> io::Result<()> {\n     let mut s = State::new_from_input(cm, sess, filename, input, out, ann, is_expanded);\n@@ -145,9 +145,9 @@ impl<'a> State<'a> {\n     pub fn new_from_input(cm: &'a CodeMap,\n                           sess: &ParseSess,\n                           filename: FileName,\n-                          input: &mut Read,\n-                          out: Box<Write + 'a>,\n-                          ann: &'a PpAnn,\n+                          input: &mut dyn Read,\n+                          out: Box<dyn Write + 'a>,\n+                          ann: &'a dyn PpAnn,\n                           is_expanded: bool)\n                           -> State<'a> {\n         let (cmnts, lits) = comments::gather_comments_and_literals(sess, filename, input);\n@@ -167,8 +167,8 @@ impl<'a> State<'a> {\n     }\n \n     pub fn new(cm: &'a CodeMap,\n-               out: Box<Write + 'a>,\n-               ann: &'a PpAnn,\n+               out: Box<dyn Write + 'a>,\n+               ann: &'a dyn PpAnn,\n                comments: Option<Vec<comments::Comment>>,\n                literals: Option<Vec<comments::Literal>>)\n                -> State<'a> {\n@@ -184,7 +184,7 @@ impl<'a> State<'a> {\n     }\n }\n \n-pub fn to_string<F>(ann: &PpAnn, f: F) -> String\n+pub fn to_string<F>(ann: &dyn PpAnn, f: F) -> String\n     where F: FnOnce(&mut State) -> io::Result<()>\n {\n     let mut wr = Vec::new();"}, {"sha": "4dcab6a04ee20bdbe814f07d4ea9048cb7512487", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -49,7 +49,7 @@ pub fn compute_ignored_attr_names() -> FxHashSet<Symbol> {\n pub struct StableHashingContext<'gcx> {\n     sess: &'gcx Session,\n     definitions: &'gcx Definitions,\n-    cstore: &'gcx CrateStore,\n+    cstore: &'gcx dyn CrateStore,\n     body_resolver: BodyResolver<'gcx>,\n     hash_spans: bool,\n     hash_bodies: bool,\n@@ -88,7 +88,7 @@ impl<'gcx> StableHashingContext<'gcx> {\n     pub fn new(sess: &'gcx Session,\n                krate: &'gcx hir::Crate,\n                definitions: &'gcx Definitions,\n-               cstore: &'gcx CrateStore)\n+               cstore: &'gcx dyn CrateStore)\n                -> Self {\n         let hash_spans_initial = !sess.opts.debugging_opts.incremental_ignore_spans;\n "}, {"sha": "ed89d1d2f57a54150165df2b490910a6e7779883", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -896,7 +896,7 @@ impl<'a, 'gcx, 'tcx> GenericKind<'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> VerifyBound<'tcx> {\n-    fn for_each_region(&self, f: &mut FnMut(ty::Region<'tcx>)) {\n+    fn for_each_region(&self, f: &mut dyn FnMut(ty::Region<'tcx>)) {\n         match self {\n             &VerifyBound::AnyRegion(ref rs) | &VerifyBound::AllRegions(ref rs) => for &r in rs {\n                 f(r);"}, {"sha": "d08a41010ab166ab452ac807e248f1b2479d35bc", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -41,8 +41,6 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![deny(warnings)]\n \n-#![cfg_attr(not(stage0), allow(bare_trait_object))]\n-\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(conservative_impl_trait)]"}, {"sha": "affd02aa51868a3ae6e05b31650e937ce48a7d85", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -280,8 +280,8 @@ pub trait EarlyLintPass: LintPass {\n }\n \n /// A lint pass boxed up as a trait object.\n-pub type EarlyLintPassObject = Box<EarlyLintPass + 'static>;\n-pub type LateLintPassObject = Box<for<'a, 'tcx> LateLintPass<'a, 'tcx> + 'static>;\n+pub type EarlyLintPassObject = Box<dyn EarlyLintPass + 'static>;\n+pub type LateLintPassObject = Box<dyn for<'a, 'tcx> LateLintPass<'a, 'tcx> + 'static>;\n \n /// Identifies a lint known to the compiler.\n #[derive(Clone, Copy, Debug)]"}, {"sha": "bdb5ad525a75c7fa75ba38a6491c739f1845d820", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -225,10 +225,10 @@ pub struct ExternBodyNestedBodies {\n /// (it'd break incremental compilation) and should only be called pre-HIR (e.g.\n /// during resolve)\n pub trait CrateStore {\n-    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<Any>;\n+    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any>;\n \n     // access to the metadata loader\n-    fn metadata_loader(&self) -> &MetadataLoader;\n+    fn metadata_loader(&self) -> &dyn MetadataLoader;\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n@@ -297,7 +297,7 @@ pub struct DummyCrateStore;\n \n #[allow(unused_variables)]\n impl CrateStore for DummyCrateStore {\n-    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<Any>\n+    fn crate_data_as_rc_any(&self, krate: CrateNum) -> Lrc<dyn Any>\n         { bug!(\"crate_data_as_rc_any\") }\n     // item info\n     fn visibility_untracked(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }\n@@ -351,7 +351,7 @@ impl CrateStore for DummyCrateStore {\n     fn postorder_cnums_untracked(&self) -> Vec<CrateNum> { bug!(\"postorder_cnums_untracked\") }\n \n     // access to the metadata loader\n-    fn metadata_loader(&self) -> &MetadataLoader { bug!(\"metadata_loader\") }\n+    fn metadata_loader(&self) -> &dyn MetadataLoader { bug!(\"metadata_loader\") }\n }\n \n pub trait CrateLoader {"}, {"sha": "e7055827c491fd6eb74f8252e118c07cc566aac2", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -319,7 +319,7 @@ fn attempt_static<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<DependencyLis\n // also skip this step entirely.\n fn activate_injected_dep(injected: Option<CrateNum>,\n                          list: &mut DependencyList,\n-                         replaces_injected: &Fn(CrateNum) -> bool) {\n+                         replaces_injected: &dyn Fn(CrateNum) -> bool) {\n     for (i, slot) in list.iter().enumerate() {\n         let cnum = CrateNum::new(i + 1);\n         if !replaces_injected(cnum) {"}, {"sha": "28524678e9916bcc8f3bc35e590da1d9d6cfc7b1", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -239,7 +239,7 @@ impl OverloadedCallType {\n // This is the code that actually walks the tree.\n pub struct ExprUseVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     mc: mc::MemCategorizationContext<'a, 'gcx, 'tcx>,\n-    delegate: &'a mut Delegate<'tcx>,\n+    delegate: &'a mut dyn Delegate<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n@@ -274,7 +274,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n     ///   `None` means that rvalues will be given more conservative lifetimes.\n     ///\n     /// See also `with_infer`, which is used *during* typeck.\n-    pub fn new(delegate: &'a mut (Delegate<'tcx>+'a),\n+    pub fn new(delegate: &'a mut (dyn Delegate<'tcx>+'a),\n                tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                param_env: ty::ParamEnv<'tcx>,\n                region_scope_tree: &'a region::ScopeTree,\n@@ -294,7 +294,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx, 'tcx> {\n }\n \n impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n-    pub fn with_infer(delegate: &'a mut (Delegate<'tcx>+'a),\n+    pub fn with_infer(delegate: &'a mut (dyn Delegate<'tcx>+'a),\n                       infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n                       param_env: ty::ParamEnv<'tcx>,\n                       region_scope_tree: &'a region::ScopeTree,"}, {"sha": "d13b16dce89864f99ce699e5d1a842f213319dd1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -673,7 +673,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn write_vars<F>(&self,\n-                     wr: &mut Write,\n+                     wr: &mut dyn Write,\n                      ln: LiveNode,\n                      mut test: F)\n                      -> io::Result<()> where\n@@ -694,7 +694,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn ln_str(&self, ln: LiveNode) -> String {\n         let mut wr = Vec::new();\n         {\n-            let wr = &mut wr as &mut Write;\n+            let wr = &mut wr as &mut dyn Write;\n             write!(wr, \"[ln({:?}) of kind {:?} reads\", ln.get(), self.ir.lnk(ln));\n             self.write_vars(wr, ln, |idx| self.users[idx].reader);\n             write!(wr, \"  writes\");"}, {"sha": "f9ea544156ce3d661fb0ec8e9a0b012d8df76a9c", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -35,7 +35,7 @@ impl<'tcx> From<EvalErrorKind<'tcx>> for EvalError<'tcx> {\n pub enum EvalErrorKind<'tcx> {\n     /// This variant is used by machines to signal their own errors that do not\n     /// match an existing variant\n-    MachineError(Box<Error>),\n+    MachineError(Box<dyn Error>),\n     FunctionPointerTyMismatch(FnSig<'tcx>, FnSig<'tcx>),\n     NoMirFor(String),\n     UnterminatedCString(MemoryPointer),\n@@ -248,7 +248,7 @@ impl<'tcx> Error for EvalError<'tcx> {\n         }\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         use self::EvalErrorKind::*;\n         match self.kind {\n             MachineError(ref inner) => Some(&**inner),"}, {"sha": "ca17e18beccba4b418224a2e3f774393a6fd912e", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -341,7 +341,7 @@ macro_rules! hash_option {\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [UNTRACKED]) => ({});\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [TRACKED]) => ({\n         if $sub_hashes.insert(stringify!($opt_name),\n-                              $opt_expr as &dep_tracking::DepTrackingHash).is_some() {\n+                              $opt_expr as &dyn dep_tracking::DepTrackingHash).is_some() {\n             bug!(\"Duplicate key in CLI DepTrackingHash: {}\", stringify!($opt_name))\n         }\n     });\n@@ -1456,7 +1456,7 @@ pub enum OptionStability {\n }\n \n pub struct RustcOptGroup {\n-    pub apply: Box<Fn(&mut getopts::Options) -> &mut getopts::Options>,\n+    pub apply: Box<dyn Fn(&mut getopts::Options) -> &mut getopts::Options>,\n     pub name: &'static str,\n     pub stability: OptionStability,\n }\n@@ -2256,7 +2256,7 @@ mod dep_tracking {\n     }\n \n     // This is a stable hash because BTreeMap is a sorted container\n-    pub fn stable_hash(sub_hashes: BTreeMap<&'static str, &DepTrackingHash>,\n+    pub fn stable_hash(sub_hashes: BTreeMap<&'static str, &dyn DepTrackingHash>,\n                        hasher: &mut DefaultHasher,\n                        error_format: ErrorOutputType) {\n         for (key, sub_hash) in sub_hashes {"}, {"sha": "bd87a8f918ab37b767817917206466712dcb6df7", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -905,7 +905,7 @@ pub fn build_session_with_codemap(sopts: config::Options,\n                                   local_crate_source_file: Option<PathBuf>,\n                                   registry: errors::registry::Registry,\n                                   codemap: Lrc<codemap::CodeMap>,\n-                                  emitter_dest: Option<Box<Write + Send>>)\n+                                  emitter_dest: Option<Box<dyn Write + Send>>)\n                                   -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -924,7 +924,7 @@ pub fn build_session_with_codemap(sopts: config::Options,\n \n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n \n-    let emitter: Box<Emitter> = match (sopts.error_format, emitter_dest) {\n+    let emitter: Box<dyn Emitter> = match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(color_config), None) => {\n             Box::new(EmitterWriter::stderr(color_config, Some(codemap.clone()),\n                      false, sopts.debugging_opts.teach)\n@@ -1123,7 +1123,7 @@ pub enum IncrCompSession {\n }\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n-    let emitter: Box<Emitter> = match output {\n+    let emitter: Box<dyn Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }\n@@ -1138,7 +1138,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n-    let emitter: Box<Emitter> = match output {\n+    let emitter: Box<dyn Emitter> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }"}, {"sha": "b1d214206069939ee6e103e758b7181560967f6e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -499,7 +499,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                         item_name: ast::Name,\n                                         _impl_item_def_id: DefId,\n                                         trait_item_def_id: DefId,\n-                                        requirement: &fmt::Display)\n+                                        requirement: &dyn fmt::Display)\n                                         -> DiagnosticBuilder<'tcx>\n     {\n         let msg = \"impl has stricter requirements than trait\";"}, {"sha": "dbf15ad17079df2ebf9e85934fd011bbae8ee5a1", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -190,13 +190,13 @@ impl<'a, 'gcx, 'tcx> Children {\n         Ok(Inserted::BecameNewSibling(last_lint))\n     }\n \n-    fn iter_mut(&'a mut self) -> Box<Iterator<Item = &'a mut DefId> + 'a> {\n+    fn iter_mut(&'a mut self) -> Box<dyn Iterator<Item = &'a mut DefId> + 'a> {\n         let nonblanket = self.nonblanket_impls.iter_mut().flat_map(|(_, v)| v.iter_mut());\n         Box::new(self.blanket_impls.iter_mut().chain(nonblanket))\n     }\n \n     fn filtered_mut(&'a mut self, sty: SimplifiedType)\n-                    -> Box<Iterator<Item = &'a mut DefId> + 'a> {\n+                    -> Box<dyn Iterator<Item = &'a mut DefId> + 'a> {\n         let nonblanket = self.nonblanket_impls.entry(sty).or_insert(vec![]).iter_mut();\n         Box::new(self.blanket_impls.iter_mut().chain(nonblanket))\n     }"}, {"sha": "d04c4771017318cda43639e45c5b80c7feeef420", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -799,7 +799,7 @@ pub struct GlobalCtxt<'tcx> {\n     global_arenas: &'tcx GlobalArenas<'tcx>,\n     global_interners: CtxtInterners<'tcx>,\n \n-    cstore: &'tcx CrateStore,\n+    cstore: &'tcx dyn CrateStore,\n \n     pub sess: &'tcx Session,\n \n@@ -883,7 +883,7 @@ pub struct GlobalCtxt<'tcx> {\n     /// This is intended to only get used during the trans phase of the compiler\n     /// when satisfying the query for a particular codegen unit. Internally in\n     /// the query it'll send data along this channel to get processed later.\n-    pub tx_to_llvm_workers: mpsc::Sender<Box<Any + Send>>,\n+    pub tx_to_llvm_workers: mpsc::Sender<Box<dyn Any + Send>>,\n \n     output_filenames: Arc<OutputFilenames>,\n }\n@@ -1131,15 +1131,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     /// value (types, substs, etc.) can only be used while `ty::tls` has a valid\n     /// reference to the context, to allow formatting values that need it.\n     pub fn create_and_enter<F, R>(s: &'tcx Session,\n-                                  cstore: &'tcx CrateStore,\n+                                  cstore: &'tcx dyn CrateStore,\n                                   local_providers: ty::maps::Providers<'tcx>,\n                                   extern_providers: ty::maps::Providers<'tcx>,\n                                   arenas: &'tcx AllArenas<'tcx>,\n                                   resolutions: ty::Resolutions,\n                                   hir: hir_map::Map<'tcx>,\n                                   on_disk_query_result_cache: maps::OnDiskCache<'tcx>,\n                                   crate_name: &str,\n-                                  tx: mpsc::Sender<Box<Any + Send>>,\n+                                  tx: mpsc::Sender<Box<dyn Any + Send>>,\n                                   output_filenames: &OutputFilenames,\n                                   f: F) -> R\n                                   where F: for<'b> FnOnce(TyCtxt<'b, 'tcx, 'tcx>) -> R\n@@ -1312,7 +1312,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     // Note that this is *untracked* and should only be used within the query\n     // system if the result is otherwise tracked through queries\n-    pub fn crate_data_as_rc_any(self, cnum: CrateNum) -> Lrc<Any> {\n+    pub fn crate_data_as_rc_any(self, cnum: CrateNum) -> Lrc<dyn Any> {\n         self.cstore.crate_data_as_rc_any(cnum)\n     }\n "}, {"sha": "4cc7406af721e8760f56a6d8f8274efb99c17463", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -277,7 +277,7 @@ pub struct RegionFolder<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     skipped_regions: &'a mut bool,\n     current_depth: u32,\n-    fld_r: &'a mut (FnMut(ty::Region<'tcx>, u32) -> ty::Region<'tcx> + 'a),\n+    fld_r: &'a mut (dyn FnMut(ty::Region<'tcx>, u32) -> ty::Region<'tcx> + 'a),\n }\n \n impl<'a, 'gcx, 'tcx> RegionFolder<'a, 'gcx, 'tcx> {\n@@ -330,7 +330,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionFolder<'a, 'gcx, 'tcx> {\n struct RegionReplacer<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     current_depth: u32,\n-    fld_r: &'a mut (FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n+    fld_r: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n     map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>\n }\n "}, {"sha": "47ad7cbcb56f7087bc02f5a7c2f6a3e54ae585f1", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -419,7 +419,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn calculate_dtor(\n         self,\n         adt_did: DefId,\n-        validate: &mut FnMut(Self, DefId) -> Result<(), ErrorReported>\n+        validate: &mut dyn FnMut(Self, DefId) -> Result<(), ErrorReported>\n     ) -> Option<ty::Destructor> {\n         let drop_trait = if let Some(def_id) = self.lang_items().drop_trait() {\n             def_id"}, {"sha": "bdb120ea59c8a9985d7ce9d91218e3bd04503223", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -38,7 +38,7 @@ pub struct ErrorReported;\n thread_local!(static TIME_DEPTH: Cell<usize> = Cell::new(0));\n \n lazy_static! {\n-    static ref DEFAULT_HOOK: Box<Fn(&panic::PanicInfo) + Sync + Send + 'static> = {\n+    static ref DEFAULT_HOOK: Box<dyn Fn(&panic::PanicInfo) + Sync + Send + 'static> = {\n         let hook = panic::take_hook();\n         panic::set_hook(Box::new(panic_hook));\n         hook"}, {"sha": "b6d8e14b74757eaf73702bce621e6a77fa9c2d31", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -176,7 +176,7 @@ impl<'gcx, 'tcx> UseFinder<'gcx, 'tcx> {\n         None\n     }\n \n-    fn def_use(&self, location: Location, thing: &MirVisitable<'tcx>) -> (bool, bool) {\n+    fn def_use(&self, location: Location, thing: &dyn MirVisitable<'tcx>) -> (bool, bool) {\n         let mut visitor = DefUseVisitor {\n             defined: false,\n             used: false,"}, {"sha": "dbfb8a6d06e63575cbc9d28f03ed4dfcdc5a7894", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -260,10 +260,10 @@ fn dump_annotation<'a, 'gcx, 'tcx>(\n \n fn for_each_region_constraint(\n     closure_region_requirements: &ClosureRegionRequirements,\n-    with_msg: &mut FnMut(&str) -> io::Result<()>,\n+    with_msg: &mut dyn FnMut(&str) -> io::Result<()>,\n ) -> io::Result<()> {\n     for req in &closure_region_requirements.outlives_requirements {\n-        let subject: &Debug = match &req.subject {\n+        let subject: &dyn Debug = match &req.subject {\n             ClosureOutlivesSubject::Region(subject) => subject,\n             ClosureOutlivesSubject::Ty(ty) => ty,\n         };"}, {"sha": "631b1d0f8941dbfa91dbb0f6ab0031b1de3be4de", "filename": "src/librustc_mir/borrow_check/nll/region_infer/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fdump_mir.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -23,7 +23,7 @@ const REGION_WIDTH: usize = 8;\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Write out our state into the `.mir` files.\n-    pub(crate) fn dump_mir(&self, out: &mut Write) -> io::Result<()> {\n+    pub(crate) fn dump_mir(&self, out: &mut dyn Write) -> io::Result<()> {\n         writeln!(out, \"| Free Region Mapping\")?;\n \n         for region in self.regions() {\n@@ -67,7 +67,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// inference resulted in the values that it did when debugging.\n     fn for_each_constraint(\n         &self,\n-        with_msg: &mut FnMut(&str) -> io::Result<()>,\n+        with_msg: &mut dyn FnMut(&str) -> io::Result<()>,\n     ) -> io::Result<()> {\n         for region in self.definitions.indices() {\n             let value = self.liveness_constraints.region_value_str(region);"}, {"sha": "db773240809c5d7b99d6cd8c135a2a2ba1fdfee6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -20,7 +20,7 @@ use super::*;\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Write out the region constraint graph.\n-    pub(crate) fn dump_graphviz(&self, mut w: &mut Write) -> io::Result<()> {\n+    pub(crate) fn dump_graphviz(&self, mut w: &mut dyn Write) -> io::Result<()> {\n         dot::render(self, &mut w)\n     }\n }"}, {"sha": "a06d39d225c45ccc34076495b2534ac9db756cb4", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -127,7 +127,7 @@ fn type_check_internal<'gcx, 'tcx>(\n     mir: &Mir<'tcx>,\n     region_bound_pairs: &[(ty::Region<'tcx>, GenericKind<'tcx>)],\n     implicit_region_bound: Option<ty::Region<'tcx>>,\n-    extra: &mut FnMut(&mut TypeChecker<'_, 'gcx, 'tcx>),\n+    extra: &mut dyn FnMut(&mut TypeChecker<'_, 'gcx, 'tcx>),\n ) -> MirTypeckRegionConstraints<'tcx> {\n     let mut checker = TypeChecker::new(\n         infcx,\n@@ -231,7 +231,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.cx.infcx.tcx\n     }\n \n-    fn sanitize_type(&mut self, parent: &fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {\n+    fn sanitize_type(&mut self, parent: &dyn fmt::Debug, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if ty.has_escaping_regions() || ty.references_error() {\n             span_mirbug_and_err!(self, parent, \"bad type {:?}\", ty)\n         } else {\n@@ -516,7 +516,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n \n     fn field_ty(\n         &mut self,\n-        parent: &fmt::Debug,\n+        parent: &dyn fmt::Debug,\n         base_ty: PlaceTy<'tcx>,\n         field: Field,\n         location: Location,\n@@ -1171,7 +1171,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     fn assert_iscleanup(\n         &mut self,\n         mir: &Mir<'tcx>,\n-        ctxt: &fmt::Debug,\n+        ctxt: &dyn fmt::Debug,\n         bb: BasicBlock,\n         iscleanuppad: bool,\n     ) {"}, {"sha": "aa7bb6f97786c5f66f2cce89b84e491297fd370d", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -61,7 +61,7 @@ pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD> where BD: BitDenotation\n pub(crate) struct DebugFormatted(String);\n \n impl DebugFormatted {\n-    pub fn new(input: &fmt::Debug) -> DebugFormatted {\n+    pub fn new(input: &dyn fmt::Debug) -> DebugFormatted {\n         DebugFormatted(format!(\"{:?}\", input))\n     }\n }"}, {"sha": "bc555368f0f5fb95d460470537010de9ebf43c1e", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -168,7 +168,7 @@ impl Error for ConstEvalError {\n         }\n     }\n \n-    fn cause(&self) -> Option<&Error> {\n+    fn cause(&self) -> Option<&dyn Error> {\n         None\n     }\n }"}, {"sha": "8c15d1cf8b03afc7efabe3bb149d70e11b8e51f5", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -15,7 +15,6 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n */\n \n #![deny(warnings)]\n-#![cfg_attr(not(stage0), allow(bare_trait_object))]\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "a16ef2adea9be8f6c922eb1c938e983603b65860", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -49,7 +49,7 @@ impl fmt::Display for Disambiguator {\n \n \n pub fn on_mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                             pass_num: &fmt::Display,\n+                             pass_num: &dyn fmt::Display,\n                              pass_name: &str,\n                              source: MirSource,\n                              mir: &Mir<'tcx>,"}, {"sha": "9d1f76313759b6d22b1657d6c7ee476ee893e3e8", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -161,7 +161,7 @@ pub macro run_passes($tcx:ident, $mir:ident, $def_id:ident, $suite_index:expr; $\n             promoted\n         };\n         let mut index = 0;\n-        let mut run_pass = |pass: &MirPass| {\n+        let mut run_pass = |pass: &dyn MirPass| {\n             let run_hooks = |mir: &_, index, is_after| {\n                 dump_mir::on_mir_pass($tcx, &format_args!(\"{:03}-{:03}\", suite_index, index),\n                                       &pass.name(), source, mir, is_after);"}, {"sha": "42ddabddd2dcd8e5dcec6d311fd8d339b578dbed", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -425,12 +425,12 @@ pub fn write_mir_fn<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     src: MirSource,\n     mir: &Mir<'tcx>,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n     result: &LivenessResult,\n ) -> io::Result<()> {\n     write_mir_intro(tcx, src, mir, w)?;\n     for block in mir.basic_blocks().indices() {\n-        let print = |w: &mut Write, prefix, result: &IndexVec<BasicBlock, LocalSet>| {\n+        let print = |w: &mut dyn Write, prefix, result: &IndexVec<BasicBlock, LocalSet>| {\n             let live: Vec<String> = mir.local_decls\n                 .indices()\n                 .filter(|i| result[block].contains(i))"}, {"sha": "4509cace794d4836eee91aa18e4e9f33b2c5a98b", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=85a6b928aa7931c34ccc34c0ec91bc2ab5a389b6", "patch": "@@ -72,14 +72,14 @@ pub enum PassWhere {\n ///   or `typeck` and `bar` both appear in the name.\n pub fn dump_mir<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    pass_num: Option<&Display>,\n+    pass_num: Option<&dyn Display>,\n     pass_name: &str,\n-    disambiguator: &Display,\n+    disambiguator: &dyn Display,\n     source: MirSource,\n     mir: &Mir<'tcx>,\n     extra_data: F,\n ) where\n-    F: FnMut(PassWhere, &mut Write) -> io::Result<()>,\n+    F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     if !dump_enabled(tcx, pass_name, source) {\n         return;\n@@ -127,15 +127,15 @@ pub fn dump_enabled<'a, 'gcx, 'tcx>(\n \n fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    pass_num: Option<&Display>,\n+    pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     node_path: &str,\n-    disambiguator: &Display,\n+    disambiguator: &dyn Display,\n     source: MirSource,\n     mir: &Mir<'tcx>,\n     mut extra_data: F,\n ) where\n-    F: FnMut(PassWhere, &mut Write) -> io::Result<()>,\n+    F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     let _: io::Result<()> = do catch {\n         let mut file = create_dump_file(tcx, \"mir\", pass_num, pass_name, disambiguator, source)?;\n@@ -169,9 +169,9 @@ fn dump_matched_mir_node<'a, 'gcx, 'tcx, F>(\n fn dump_path(\n     tcx: TyCtxt<'_, '_, '_>,\n     extension: &str,\n-    pass_num: Option<&Display>,\n+    pass_num: Option<&dyn Display>,\n     pass_name: &str,\n-    disambiguator: &Display,\n+    disambiguator: &dyn Display,\n     source: MirSource,\n ) -> PathBuf {\n     let promotion_id = match source.promoted {\n@@ -217,9 +217,9 @@ fn dump_path(\n pub(crate) fn create_dump_file(\n     tcx: TyCtxt<'_, '_, '_>,\n     extension: &str,\n-    pass_num: Option<&Display>,\n+    pass_num: Option<&dyn Display>,\n     pass_name: &str,\n-    disambiguator: &Display,\n+    disambiguator: &dyn Display,\n     source: MirSource,\n ) -> io::Result<fs::File> {\n     let file_path = dump_path(tcx, extension, pass_num, pass_name, disambiguator, source);\n@@ -233,7 +233,7 @@ pub(crate) fn create_dump_file(\n pub fn write_mir_pretty<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     single: Option<DefId>,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n ) -> io::Result<()> {\n     writeln!(\n         w,\n@@ -274,10 +274,10 @@ pub fn write_mir_fn<'a, 'gcx, 'tcx, F>(\n     src: MirSource,\n     mir: &Mir<'tcx>,\n     extra_data: &mut F,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n ) -> io::Result<()>\n where\n-    F: FnMut(PassWhere, &mut Write) -> io::Result<()>,\n+    F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     write_mir_intro(tcx, src, mir, w)?;\n     for block in mir.basic_blocks().indices() {\n@@ -298,10 +298,10 @@ pub fn write_basic_block<'cx, 'gcx, 'tcx, F>(\n     block: BasicBlock,\n     mir: &Mir<'tcx>,\n     extra_data: &mut F,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n ) -> io::Result<()>\n where\n-    F: FnMut(PassWhere, &mut Write) -> io::Result<()>,\n+    F: FnMut(PassWhere, &mut dyn Write) -> io::Result<()>,\n {\n     let data = &mir[block];\n \n@@ -362,7 +362,7 @@ where\n /// a statement.\n fn write_extra<'cx, 'gcx, 'tcx, F>(\n     tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n-    write: &mut Write,\n+    write: &mut dyn Write,\n     mut visit_op: F,\n ) -> io::Result<()>\n where\n@@ -450,7 +450,7 @@ fn write_scope_tree(\n     tcx: TyCtxt,\n     mir: &Mir,\n     scope_tree: &FxHashMap<VisibilityScope, Vec<VisibilityScope>>,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n     parent: VisibilityScope,\n     depth: usize,\n ) -> io::Result<()> {\n@@ -515,7 +515,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     src: MirSource,\n     mir: &Mir,\n-    w: &mut Write,\n+    w: &mut dyn Write,\n ) -> io::Result<()> {\n     write_mir_sig(tcx, src, mir, w)?;\n     writeln!(w, \"{{\")?;\n@@ -553,7 +553,7 @@ pub fn write_mir_intro<'a, 'gcx, 'tcx>(\n     Ok(())\n }\n \n-fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut Write) -> io::Result<()> {\n+fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     let id = tcx.hir.as_local_node_id(src.def_id).unwrap();\n     let body_owner_kind = tcx.hir.body_owner_kind(id);\n     match (body_owner_kind, src.promoted) {\n@@ -597,7 +597,7 @@ fn write_mir_sig(tcx: TyCtxt, src: MirSource, mir: &Mir, w: &mut Write) -> io::R\n     Ok(())\n }\n \n-fn write_temp_decls(mir: &Mir, w: &mut Write) -> io::Result<()> {\n+fn write_temp_decls(mir: &Mir, w: &mut dyn Write) -> io::Result<()> {\n     // Compiler-introduced temporary types.\n     for temp in mir.temps_iter() {\n         writeln!("}]}