{"sha": "832b40a075285063b857bf05a69a8cf979d9078a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMmI0MGEwNzUyODUwNjNiODU3YmYwNWE2OWE4Y2Y5NzlkOTA3OGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T08:02:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-19T08:42:39Z"}, "message": "use new quote-generated syntax kinds", "tree": {"sha": "bca6983bfd05c9539aa9cb2ce94b7fa6aeecebc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca6983bfd05c9539aa9cb2ce94b7fa6aeecebc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/832b40a075285063b857bf05a69a8cf979d9078a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/832b40a075285063b857bf05a69a8cf979d9078a", "html_url": "https://github.com/rust-lang/rust/commit/832b40a075285063b857bf05a69a8cf979d9078a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/832b40a075285063b857bf05a69a8cf979d9078a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d29cf12256921d63860402a2e7cd2936c22e01e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d29cf12256921d63860402a2e7cd2936c22e01e", "html_url": "https://github.com/rust-lang/rust/commit/7d29cf12256921d63860402a2e7cd2936c22e01e"}], "stats": {"total": 1115, "additions": 538, "deletions": 577}, "files": [{"sha": "75f5fb64c54d021f40bb991889c2cbd40638a451", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 538, "deletions": 449, "changes": 987, "blob_url": "https://github.com/rust-lang/rust/blob/832b40a075285063b857bf05a69a8cf979d9078a/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832b40a075285063b857bf05a69a8cf979d9078a/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=832b40a075285063b857bf05a69a8cf979d9078a", "patch": "@@ -1,16 +1,11 @@\n-// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-syntax` is run\n-// Do not edit manually\n+// Generated file, do not edit by hand, see `crate/ra_tools/src/codegen`\n \n #![allow(bad_style, missing_docs, unreachable_pub)]\n-#![cfg_attr(rustfmt, rustfmt_skip)]\n use super::SyntaxInfo;\n-\n-/// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n+#[doc = r\" The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\"]\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[repr(u16)]\n pub enum SyntaxKind {\n-    // Technical SyntaxKinds: they appear temporally during parsing,\n-    // but never end up in the final tree\n     #[doc(hidden)]\n     TOMBSTONE,\n     #[doc(hidden)]\n@@ -242,477 +237,280 @@ pub enum SyntaxKind {\n     TYPE_BOUND_LIST,\n     MACRO_ITEMS,\n     MACRO_STMTS,\n-    // Technical kind so that we can cast from u16 safely\n     #[doc(hidden)]\n     __LAST,\n }\n use self::SyntaxKind::*;\n-\n-#[macro_export]\n-macro_rules! T {\n-    (;) => { $crate::SyntaxKind::SEMI };\n-    (,) => { $crate::SyntaxKind::COMMA };\n-    ('(') => { $crate::SyntaxKind::L_PAREN };\n-    (')') => { $crate::SyntaxKind::R_PAREN };\n-    ('{') => { $crate::SyntaxKind::L_CURLY };\n-    ('}') => { $crate::SyntaxKind::R_CURLY };\n-    ('[') => { $crate::SyntaxKind::L_BRACK };\n-    (']') => { $crate::SyntaxKind::R_BRACK };\n-    (<) => { $crate::SyntaxKind::L_ANGLE };\n-    (>) => { $crate::SyntaxKind::R_ANGLE };\n-    (@) => { $crate::SyntaxKind::AT };\n-    (#) => { $crate::SyntaxKind::POUND };\n-    (~) => { $crate::SyntaxKind::TILDE };\n-    (?) => { $crate::SyntaxKind::QUESTION };\n-    ($) => { $crate::SyntaxKind::DOLLAR };\n-    (&) => { $crate::SyntaxKind::AMP };\n-    (|) => { $crate::SyntaxKind::PIPE };\n-    (+) => { $crate::SyntaxKind::PLUS };\n-    (*) => { $crate::SyntaxKind::STAR };\n-    (/) => { $crate::SyntaxKind::SLASH };\n-    (^) => { $crate::SyntaxKind::CARET };\n-    (%) => { $crate::SyntaxKind::PERCENT };\n-    (_) => { $crate::SyntaxKind::UNDERSCORE };\n-    (.) => { $crate::SyntaxKind::DOT };\n-    (..) => { $crate::SyntaxKind::DOTDOT };\n-    (...) => { $crate::SyntaxKind::DOTDOTDOT };\n-    (..=) => { $crate::SyntaxKind::DOTDOTEQ };\n-    (:) => { $crate::SyntaxKind::COLON };\n-    (::) => { $crate::SyntaxKind::COLONCOLON };\n-    (=) => { $crate::SyntaxKind::EQ };\n-    (==) => { $crate::SyntaxKind::EQEQ };\n-    (=>) => { $crate::SyntaxKind::FAT_ARROW };\n-    (!) => { $crate::SyntaxKind::EXCL };\n-    (!=) => { $crate::SyntaxKind::NEQ };\n-    (-) => { $crate::SyntaxKind::MINUS };\n-    (->) => { $crate::SyntaxKind::THIN_ARROW };\n-    (<=) => { $crate::SyntaxKind::LTEQ };\n-    (>=) => { $crate::SyntaxKind::GTEQ };\n-    (+=) => { $crate::SyntaxKind::PLUSEQ };\n-    (-=) => { $crate::SyntaxKind::MINUSEQ };\n-    (|=) => { $crate::SyntaxKind::PIPEEQ };\n-    (&=) => { $crate::SyntaxKind::AMPEQ };\n-    (^=) => { $crate::SyntaxKind::CARETEQ };\n-    (/=) => { $crate::SyntaxKind::SLASHEQ };\n-    (*=) => { $crate::SyntaxKind::STAREQ };\n-    (%=) => { $crate::SyntaxKind::PERCENTEQ };\n-    (&&) => { $crate::SyntaxKind::AMPAMP };\n-    (||) => { $crate::SyntaxKind::PIPEPIPE };\n-    (<<) => { $crate::SyntaxKind::SHL };\n-    (>>) => { $crate::SyntaxKind::SHR };\n-    (<<=) => { $crate::SyntaxKind::SHLEQ };\n-    (>>=) => { $crate::SyntaxKind::SHREQ };\n-    (async) => { $crate::SyntaxKind::ASYNC_KW };\n-    (use) => { $crate::SyntaxKind::USE_KW };\n-    (fn) => { $crate::SyntaxKind::FN_KW };\n-    (struct) => { $crate::SyntaxKind::STRUCT_KW };\n-    (enum) => { $crate::SyntaxKind::ENUM_KW };\n-    (trait) => { $crate::SyntaxKind::TRAIT_KW };\n-    (impl) => { $crate::SyntaxKind::IMPL_KW };\n-    (dyn) => { $crate::SyntaxKind::DYN_KW };\n-    (true) => { $crate::SyntaxKind::TRUE_KW };\n-    (false) => { $crate::SyntaxKind::FALSE_KW };\n-    (as) => { $crate::SyntaxKind::AS_KW };\n-    (extern) => { $crate::SyntaxKind::EXTERN_KW };\n-    (crate) => { $crate::SyntaxKind::CRATE_KW };\n-    (mod) => { $crate::SyntaxKind::MOD_KW };\n-    (pub) => { $crate::SyntaxKind::PUB_KW };\n-    (self) => { $crate::SyntaxKind::SELF_KW };\n-    (super) => { $crate::SyntaxKind::SUPER_KW };\n-    (in) => { $crate::SyntaxKind::IN_KW };\n-    (where) => { $crate::SyntaxKind::WHERE_KW };\n-    (for) => { $crate::SyntaxKind::FOR_KW };\n-    (loop) => { $crate::SyntaxKind::LOOP_KW };\n-    (while) => { $crate::SyntaxKind::WHILE_KW };\n-    (continue) => { $crate::SyntaxKind::CONTINUE_KW };\n-    (break) => { $crate::SyntaxKind::BREAK_KW };\n-    (if) => { $crate::SyntaxKind::IF_KW };\n-    (else) => { $crate::SyntaxKind::ELSE_KW };\n-    (match) => { $crate::SyntaxKind::MATCH_KW };\n-    (const) => { $crate::SyntaxKind::CONST_KW };\n-    (static) => { $crate::SyntaxKind::STATIC_KW };\n-    (mut) => { $crate::SyntaxKind::MUT_KW };\n-    (unsafe) => { $crate::SyntaxKind::UNSAFE_KW };\n-    (type) => { $crate::SyntaxKind::TYPE_KW };\n-    (ref) => { $crate::SyntaxKind::REF_KW };\n-    (let) => { $crate::SyntaxKind::LET_KW };\n-    (move) => { $crate::SyntaxKind::MOVE_KW };\n-    (return) => { $crate::SyntaxKind::RETURN_KW };\n-    (try) => { $crate::SyntaxKind::TRY_KW };\n-    (box) => { $crate::SyntaxKind::BOX_KW };\n-    (await) => { $crate::SyntaxKind::AWAIT_KW };\n-    (auto) => { $crate::SyntaxKind::AUTO_KW };\n-    (default) => { $crate::SyntaxKind::DEFAULT_KW };\n-    (existential) => { $crate::SyntaxKind::EXISTENTIAL_KW };\n-    (union) => { $crate::SyntaxKind::UNION_KW };\n-}\n-\n impl From<u16> for SyntaxKind {\n     fn from(d: u16) -> SyntaxKind {\n         assert!(d <= (__LAST as u16));\n         unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n     }\n }\n-\n impl From<SyntaxKind> for u16 {\n     fn from(k: SyntaxKind) -> u16 {\n         k as u16\n     }\n }\n-\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n         match self {\n-            | ASYNC_KW\n-            | USE_KW\n-            | FN_KW\n-            | STRUCT_KW\n-            | ENUM_KW\n-            | TRAIT_KW\n-            | IMPL_KW\n-            | DYN_KW\n-            | TRUE_KW\n-            | FALSE_KW\n-            | AS_KW\n-            | EXTERN_KW\n-            | CRATE_KW\n-            | MOD_KW\n-            | PUB_KW\n-            | SELF_KW\n-            | SUPER_KW\n-            | IN_KW\n-            | WHERE_KW\n-            | FOR_KW\n-            | LOOP_KW\n-            | WHILE_KW\n-            | CONTINUE_KW\n-            | BREAK_KW\n-            | IF_KW\n-            | ELSE_KW\n-            | MATCH_KW\n-            | CONST_KW\n-            | STATIC_KW\n-            | MUT_KW\n-            | UNSAFE_KW\n-            | TYPE_KW\n-            | REF_KW\n-            | LET_KW\n-            | MOVE_KW\n-            | RETURN_KW\n-            | TRY_KW\n-            | BOX_KW\n-            | AWAIT_KW\n-            | AUTO_KW\n-            | DEFAULT_KW\n-            | EXISTENTIAL_KW\n-            | UNION_KW\n-                => true,\n-            _ => false\n+            ASYNC_KW | USE_KW | FN_KW | STRUCT_KW | ENUM_KW | TRAIT_KW | IMPL_KW | DYN_KW\n+            | TRUE_KW | FALSE_KW | AS_KW | EXTERN_KW | CRATE_KW | MOD_KW | PUB_KW | SELF_KW\n+            | SUPER_KW | IN_KW | WHERE_KW | FOR_KW | LOOP_KW | WHILE_KW | CONTINUE_KW\n+            | BREAK_KW | IF_KW | ELSE_KW | MATCH_KW | CONST_KW | STATIC_KW | MUT_KW | UNSAFE_KW\n+            | TYPE_KW | REF_KW | LET_KW | MOVE_KW | RETURN_KW | TRY_KW | BOX_KW | AWAIT_KW\n+            | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW => true,\n+            _ => false,\n         }\n     }\n-\n     pub fn is_punct(self) -> bool {\n         match self {\n-            | SEMI\n-            | COMMA\n-            | L_PAREN\n-            | R_PAREN\n-            | L_CURLY\n-            | R_CURLY\n-            | L_BRACK\n-            | R_BRACK\n-            | L_ANGLE\n-            | R_ANGLE\n-            | AT\n-            | POUND\n-            | TILDE\n-            | QUESTION\n-            | DOLLAR\n-            | AMP\n-            | PIPE\n-            | PLUS\n-            | STAR\n-            | SLASH\n-            | CARET\n-            | PERCENT\n-            | UNDERSCORE\n-            | DOT\n-            | DOTDOT\n-            | DOTDOTDOT\n-            | DOTDOTEQ\n-            | COLON\n-            | COLONCOLON\n-            | EQ\n-            | EQEQ\n-            | FAT_ARROW\n-            | EXCL\n-            | NEQ\n-            | MINUS\n-            | THIN_ARROW\n-            | LTEQ\n-            | GTEQ\n-            | PLUSEQ\n-            | MINUSEQ\n-            | PIPEEQ\n-            | AMPEQ\n-            | CARETEQ\n-            | SLASHEQ\n-            | STAREQ\n-            | PERCENTEQ\n-            | AMPAMP\n-            | PIPEPIPE\n-            | SHL\n-            | SHR\n-            | SHLEQ\n-            | SHREQ\n-                => true,\n-            _ => false\n+            SEMI | COMMA | L_PAREN | R_PAREN | L_CURLY | R_CURLY | L_BRACK | R_BRACK | L_ANGLE\n+            | R_ANGLE | AT | POUND | TILDE | QUESTION | DOLLAR | AMP | PIPE | PLUS | STAR\n+            | SLASH | CARET | PERCENT | UNDERSCORE | DOT | DOTDOT | DOTDOTDOT | DOTDOTEQ\n+            | COLON | COLONCOLON | EQ | EQEQ | FAT_ARROW | EXCL | NEQ | MINUS | THIN_ARROW\n+            | LTEQ | GTEQ | PLUSEQ | MINUSEQ | PIPEEQ | AMPEQ | CARETEQ | SLASHEQ | STAREQ\n+            | PERCENTEQ | AMPAMP | PIPEPIPE | SHL | SHR | SHLEQ | SHREQ => true,\n+            _ => false,\n         }\n     }\n     pub fn is_literal(self) -> bool {\n         match self {\n-            | INT_NUMBER\n-            | FLOAT_NUMBER\n-            | CHAR\n-            | BYTE\n-            | STRING\n-            | RAW_STRING\n-            | BYTE_STRING\n-            | RAW_BYTE_STRING\n-                => true,\n-            _ => false\n+            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | RAW_STRING | BYTE_STRING\n+            | RAW_BYTE_STRING => true,\n+            _ => false,\n         }\n     }\n-\n     pub(crate) fn info(self) -> &'static SyntaxInfo {\n         match self {\n-            SEMI => &SyntaxInfo { name: \"SEMI\" },\n-            COMMA => &SyntaxInfo { name: \"COMMA\" },\n-            L_PAREN => &SyntaxInfo { name: \"L_PAREN\" },\n-            R_PAREN => &SyntaxInfo { name: \"R_PAREN\" },\n-            L_CURLY => &SyntaxInfo { name: \"L_CURLY\" },\n-            R_CURLY => &SyntaxInfo { name: \"R_CURLY\" },\n-            L_BRACK => &SyntaxInfo { name: \"L_BRACK\" },\n-            R_BRACK => &SyntaxInfo { name: \"R_BRACK\" },\n-            L_ANGLE => &SyntaxInfo { name: \"L_ANGLE\" },\n-            R_ANGLE => &SyntaxInfo { name: \"R_ANGLE\" },\n-            AT => &SyntaxInfo { name: \"AT\" },\n-            POUND => &SyntaxInfo { name: \"POUND\" },\n-            TILDE => &SyntaxInfo { name: \"TILDE\" },\n-            QUESTION => &SyntaxInfo { name: \"QUESTION\" },\n-            DOLLAR => &SyntaxInfo { name: \"DOLLAR\" },\n-            AMP => &SyntaxInfo { name: \"AMP\" },\n-            PIPE => &SyntaxInfo { name: \"PIPE\" },\n-            PLUS => &SyntaxInfo { name: \"PLUS\" },\n-            STAR => &SyntaxInfo { name: \"STAR\" },\n-            SLASH => &SyntaxInfo { name: \"SLASH\" },\n-            CARET => &SyntaxInfo { name: \"CARET\" },\n-            PERCENT => &SyntaxInfo { name: \"PERCENT\" },\n-            UNDERSCORE => &SyntaxInfo { name: \"UNDERSCORE\" },\n-            DOT => &SyntaxInfo { name: \"DOT\" },\n-            DOTDOT => &SyntaxInfo { name: \"DOTDOT\" },\n-            DOTDOTDOT => &SyntaxInfo { name: \"DOTDOTDOT\" },\n-            DOTDOTEQ => &SyntaxInfo { name: \"DOTDOTEQ\" },\n-            COLON => &SyntaxInfo { name: \"COLON\" },\n-            COLONCOLON => &SyntaxInfo { name: \"COLONCOLON\" },\n-            EQ => &SyntaxInfo { name: \"EQ\" },\n-            EQEQ => &SyntaxInfo { name: \"EQEQ\" },\n-            FAT_ARROW => &SyntaxInfo { name: \"FAT_ARROW\" },\n-            EXCL => &SyntaxInfo { name: \"EXCL\" },\n-            NEQ => &SyntaxInfo { name: \"NEQ\" },\n-            MINUS => &SyntaxInfo { name: \"MINUS\" },\n-            THIN_ARROW => &SyntaxInfo { name: \"THIN_ARROW\" },\n-            LTEQ => &SyntaxInfo { name: \"LTEQ\" },\n-            GTEQ => &SyntaxInfo { name: \"GTEQ\" },\n-            PLUSEQ => &SyntaxInfo { name: \"PLUSEQ\" },\n-            MINUSEQ => &SyntaxInfo { name: \"MINUSEQ\" },\n-            PIPEEQ => &SyntaxInfo { name: \"PIPEEQ\" },\n-            AMPEQ => &SyntaxInfo { name: \"AMPEQ\" },\n-            CARETEQ => &SyntaxInfo { name: \"CARETEQ\" },\n-            SLASHEQ => &SyntaxInfo { name: \"SLASHEQ\" },\n-            STAREQ => &SyntaxInfo { name: \"STAREQ\" },\n-            PERCENTEQ => &SyntaxInfo { name: \"PERCENTEQ\" },\n-            AMPAMP => &SyntaxInfo { name: \"AMPAMP\" },\n-            PIPEPIPE => &SyntaxInfo { name: \"PIPEPIPE\" },\n-            SHL => &SyntaxInfo { name: \"SHL\" },\n-            SHR => &SyntaxInfo { name: \"SHR\" },\n-            SHLEQ => &SyntaxInfo { name: \"SHLEQ\" },\n-            SHREQ => &SyntaxInfo { name: \"SHREQ\" },\n-            ASYNC_KW => &SyntaxInfo { name: \"ASYNC_KW\" },\n-            USE_KW => &SyntaxInfo { name: \"USE_KW\" },\n-            FN_KW => &SyntaxInfo { name: \"FN_KW\" },\n-            STRUCT_KW => &SyntaxInfo { name: \"STRUCT_KW\" },\n-            ENUM_KW => &SyntaxInfo { name: \"ENUM_KW\" },\n-            TRAIT_KW => &SyntaxInfo { name: \"TRAIT_KW\" },\n-            IMPL_KW => &SyntaxInfo { name: \"IMPL_KW\" },\n-            DYN_KW => &SyntaxInfo { name: \"DYN_KW\" },\n-            TRUE_KW => &SyntaxInfo { name: \"TRUE_KW\" },\n-            FALSE_KW => &SyntaxInfo { name: \"FALSE_KW\" },\n-            AS_KW => &SyntaxInfo { name: \"AS_KW\" },\n-            EXTERN_KW => &SyntaxInfo { name: \"EXTERN_KW\" },\n-            CRATE_KW => &SyntaxInfo { name: \"CRATE_KW\" },\n-            MOD_KW => &SyntaxInfo { name: \"MOD_KW\" },\n-            PUB_KW => &SyntaxInfo { name: \"PUB_KW\" },\n-            SELF_KW => &SyntaxInfo { name: \"SELF_KW\" },\n-            SUPER_KW => &SyntaxInfo { name: \"SUPER_KW\" },\n-            IN_KW => &SyntaxInfo { name: \"IN_KW\" },\n-            WHERE_KW => &SyntaxInfo { name: \"WHERE_KW\" },\n-            FOR_KW => &SyntaxInfo { name: \"FOR_KW\" },\n-            LOOP_KW => &SyntaxInfo { name: \"LOOP_KW\" },\n-            WHILE_KW => &SyntaxInfo { name: \"WHILE_KW\" },\n-            CONTINUE_KW => &SyntaxInfo { name: \"CONTINUE_KW\" },\n-            BREAK_KW => &SyntaxInfo { name: \"BREAK_KW\" },\n-            IF_KW => &SyntaxInfo { name: \"IF_KW\" },\n-            ELSE_KW => &SyntaxInfo { name: \"ELSE_KW\" },\n-            MATCH_KW => &SyntaxInfo { name: \"MATCH_KW\" },\n-            CONST_KW => &SyntaxInfo { name: \"CONST_KW\" },\n-            STATIC_KW => &SyntaxInfo { name: \"STATIC_KW\" },\n-            MUT_KW => &SyntaxInfo { name: \"MUT_KW\" },\n-            UNSAFE_KW => &SyntaxInfo { name: \"UNSAFE_KW\" },\n-            TYPE_KW => &SyntaxInfo { name: \"TYPE_KW\" },\n-            REF_KW => &SyntaxInfo { name: \"REF_KW\" },\n-            LET_KW => &SyntaxInfo { name: \"LET_KW\" },\n-            MOVE_KW => &SyntaxInfo { name: \"MOVE_KW\" },\n-            RETURN_KW => &SyntaxInfo { name: \"RETURN_KW\" },\n-            TRY_KW => &SyntaxInfo { name: \"TRY_KW\" },\n-            BOX_KW => &SyntaxInfo { name: \"BOX_KW\" },\n-            AWAIT_KW => &SyntaxInfo { name: \"AWAIT_KW\" },\n-            AUTO_KW => &SyntaxInfo { name: \"AUTO_KW\" },\n-            DEFAULT_KW => &SyntaxInfo { name: \"DEFAULT_KW\" },\n-            EXISTENTIAL_KW => &SyntaxInfo { name: \"EXISTENTIAL_KW\" },\n-            UNION_KW => &SyntaxInfo { name: \"UNION_KW\" },\n-            INT_NUMBER => &SyntaxInfo { name: \"INT_NUMBER\" },\n-            FLOAT_NUMBER => &SyntaxInfo { name: \"FLOAT_NUMBER\" },\n-            CHAR => &SyntaxInfo { name: \"CHAR\" },\n-            BYTE => &SyntaxInfo { name: \"BYTE\" },\n-            STRING => &SyntaxInfo { name: \"STRING\" },\n-            RAW_STRING => &SyntaxInfo { name: \"RAW_STRING\" },\n-            BYTE_STRING => &SyntaxInfo { name: \"BYTE_STRING\" },\n-            RAW_BYTE_STRING => &SyntaxInfo { name: \"RAW_BYTE_STRING\" },\n-            ERROR => &SyntaxInfo { name: \"ERROR\" },\n-            IDENT => &SyntaxInfo { name: \"IDENT\" },\n-            WHITESPACE => &SyntaxInfo { name: \"WHITESPACE\" },\n-            LIFETIME => &SyntaxInfo { name: \"LIFETIME\" },\n-            COMMENT => &SyntaxInfo { name: \"COMMENT\" },\n-            SHEBANG => &SyntaxInfo { name: \"SHEBANG\" },\n-            L_DOLLAR => &SyntaxInfo { name: \"L_DOLLAR\" },\n-            R_DOLLAR => &SyntaxInfo { name: \"R_DOLLAR\" },\n-            SOURCE_FILE => &SyntaxInfo { name: \"SOURCE_FILE\" },\n-            STRUCT_DEF => &SyntaxInfo { name: \"STRUCT_DEF\" },\n-            ENUM_DEF => &SyntaxInfo { name: \"ENUM_DEF\" },\n-            FN_DEF => &SyntaxInfo { name: \"FN_DEF\" },\n-            RET_TYPE => &SyntaxInfo { name: \"RET_TYPE\" },\n-            EXTERN_CRATE_ITEM => &SyntaxInfo { name: \"EXTERN_CRATE_ITEM\" },\n-            MODULE => &SyntaxInfo { name: \"MODULE\" },\n-            USE_ITEM => &SyntaxInfo { name: \"USE_ITEM\" },\n-            STATIC_DEF => &SyntaxInfo { name: \"STATIC_DEF\" },\n-            CONST_DEF => &SyntaxInfo { name: \"CONST_DEF\" },\n-            TRAIT_DEF => &SyntaxInfo { name: \"TRAIT_DEF\" },\n-            IMPL_BLOCK => &SyntaxInfo { name: \"IMPL_BLOCK\" },\n-            TYPE_ALIAS_DEF => &SyntaxInfo { name: \"TYPE_ALIAS_DEF\" },\n-            MACRO_CALL => &SyntaxInfo { name: \"MACRO_CALL\" },\n-            TOKEN_TREE => &SyntaxInfo { name: \"TOKEN_TREE\" },\n-            PAREN_TYPE => &SyntaxInfo { name: \"PAREN_TYPE\" },\n-            TUPLE_TYPE => &SyntaxInfo { name: \"TUPLE_TYPE\" },\n-            NEVER_TYPE => &SyntaxInfo { name: \"NEVER_TYPE\" },\n-            PATH_TYPE => &SyntaxInfo { name: \"PATH_TYPE\" },\n-            POINTER_TYPE => &SyntaxInfo { name: \"POINTER_TYPE\" },\n-            ARRAY_TYPE => &SyntaxInfo { name: \"ARRAY_TYPE\" },\n-            SLICE_TYPE => &SyntaxInfo { name: \"SLICE_TYPE\" },\n-            REFERENCE_TYPE => &SyntaxInfo { name: \"REFERENCE_TYPE\" },\n-            PLACEHOLDER_TYPE => &SyntaxInfo { name: \"PLACEHOLDER_TYPE\" },\n-            FN_POINTER_TYPE => &SyntaxInfo { name: \"FN_POINTER_TYPE\" },\n-            FOR_TYPE => &SyntaxInfo { name: \"FOR_TYPE\" },\n-            IMPL_TRAIT_TYPE => &SyntaxInfo { name: \"IMPL_TRAIT_TYPE\" },\n-            DYN_TRAIT_TYPE => &SyntaxInfo { name: \"DYN_TRAIT_TYPE\" },\n-            REF_PAT => &SyntaxInfo { name: \"REF_PAT\" },\n-            BIND_PAT => &SyntaxInfo { name: \"BIND_PAT\" },\n-            PLACEHOLDER_PAT => &SyntaxInfo { name: \"PLACEHOLDER_PAT\" },\n-            PATH_PAT => &SyntaxInfo { name: \"PATH_PAT\" },\n-            STRUCT_PAT => &SyntaxInfo { name: \"STRUCT_PAT\" },\n-            FIELD_PAT_LIST => &SyntaxInfo { name: \"FIELD_PAT_LIST\" },\n-            FIELD_PAT => &SyntaxInfo { name: \"FIELD_PAT\" },\n-            TUPLE_STRUCT_PAT => &SyntaxInfo { name: \"TUPLE_STRUCT_PAT\" },\n-            TUPLE_PAT => &SyntaxInfo { name: \"TUPLE_PAT\" },\n-            SLICE_PAT => &SyntaxInfo { name: \"SLICE_PAT\" },\n-            RANGE_PAT => &SyntaxInfo { name: \"RANGE_PAT\" },\n-            LITERAL_PAT => &SyntaxInfo { name: \"LITERAL_PAT\" },\n-            TUPLE_EXPR => &SyntaxInfo { name: \"TUPLE_EXPR\" },\n-            ARRAY_EXPR => &SyntaxInfo { name: \"ARRAY_EXPR\" },\n-            PAREN_EXPR => &SyntaxInfo { name: \"PAREN_EXPR\" },\n-            PATH_EXPR => &SyntaxInfo { name: \"PATH_EXPR\" },\n-            LAMBDA_EXPR => &SyntaxInfo { name: \"LAMBDA_EXPR\" },\n-            IF_EXPR => &SyntaxInfo { name: \"IF_EXPR\" },\n-            WHILE_EXPR => &SyntaxInfo { name: \"WHILE_EXPR\" },\n-            CONDITION => &SyntaxInfo { name: \"CONDITION\" },\n-            LOOP_EXPR => &SyntaxInfo { name: \"LOOP_EXPR\" },\n-            FOR_EXPR => &SyntaxInfo { name: \"FOR_EXPR\" },\n-            CONTINUE_EXPR => &SyntaxInfo { name: \"CONTINUE_EXPR\" },\n-            BREAK_EXPR => &SyntaxInfo { name: \"BREAK_EXPR\" },\n-            LABEL => &SyntaxInfo { name: \"LABEL\" },\n-            BLOCK_EXPR => &SyntaxInfo { name: \"BLOCK_EXPR\" },\n-            RETURN_EXPR => &SyntaxInfo { name: \"RETURN_EXPR\" },\n-            MATCH_EXPR => &SyntaxInfo { name: \"MATCH_EXPR\" },\n-            MATCH_ARM_LIST => &SyntaxInfo { name: \"MATCH_ARM_LIST\" },\n-            MATCH_ARM => &SyntaxInfo { name: \"MATCH_ARM\" },\n-            MATCH_GUARD => &SyntaxInfo { name: \"MATCH_GUARD\" },\n-            STRUCT_LIT => &SyntaxInfo { name: \"STRUCT_LIT\" },\n-            NAMED_FIELD_LIST => &SyntaxInfo { name: \"NAMED_FIELD_LIST\" },\n-            NAMED_FIELD => &SyntaxInfo { name: \"NAMED_FIELD\" },\n-            TRY_BLOCK_EXPR => &SyntaxInfo { name: \"TRY_BLOCK_EXPR\" },\n-            BOX_EXPR => &SyntaxInfo { name: \"BOX_EXPR\" },\n-            CALL_EXPR => &SyntaxInfo { name: \"CALL_EXPR\" },\n-            INDEX_EXPR => &SyntaxInfo { name: \"INDEX_EXPR\" },\n-            METHOD_CALL_EXPR => &SyntaxInfo { name: \"METHOD_CALL_EXPR\" },\n-            FIELD_EXPR => &SyntaxInfo { name: \"FIELD_EXPR\" },\n-            AWAIT_EXPR => &SyntaxInfo { name: \"AWAIT_EXPR\" },\n-            TRY_EXPR => &SyntaxInfo { name: \"TRY_EXPR\" },\n-            CAST_EXPR => &SyntaxInfo { name: \"CAST_EXPR\" },\n-            REF_EXPR => &SyntaxInfo { name: \"REF_EXPR\" },\n-            PREFIX_EXPR => &SyntaxInfo { name: \"PREFIX_EXPR\" },\n-            RANGE_EXPR => &SyntaxInfo { name: \"RANGE_EXPR\" },\n-            BIN_EXPR => &SyntaxInfo { name: \"BIN_EXPR\" },\n-            BLOCK => &SyntaxInfo { name: \"BLOCK\" },\n-            EXTERN_BLOCK => &SyntaxInfo { name: \"EXTERN_BLOCK\" },\n-            EXTERN_ITEM_LIST => &SyntaxInfo { name: \"EXTERN_ITEM_LIST\" },\n-            ENUM_VARIANT => &SyntaxInfo { name: \"ENUM_VARIANT\" },\n-            NAMED_FIELD_DEF_LIST => &SyntaxInfo { name: \"NAMED_FIELD_DEF_LIST\" },\n-            NAMED_FIELD_DEF => &SyntaxInfo { name: \"NAMED_FIELD_DEF\" },\n-            POS_FIELD_DEF_LIST => &SyntaxInfo { name: \"POS_FIELD_DEF_LIST\" },\n-            POS_FIELD_DEF => &SyntaxInfo { name: \"POS_FIELD_DEF\" },\n-            ENUM_VARIANT_LIST => &SyntaxInfo { name: \"ENUM_VARIANT_LIST\" },\n-            ITEM_LIST => &SyntaxInfo { name: \"ITEM_LIST\" },\n-            ATTR => &SyntaxInfo { name: \"ATTR\" },\n-            META_ITEM => &SyntaxInfo { name: \"META_ITEM\" },\n-            USE_TREE => &SyntaxInfo { name: \"USE_TREE\" },\n-            USE_TREE_LIST => &SyntaxInfo { name: \"USE_TREE_LIST\" },\n-            PATH => &SyntaxInfo { name: \"PATH\" },\n-            PATH_SEGMENT => &SyntaxInfo { name: \"PATH_SEGMENT\" },\n-            LITERAL => &SyntaxInfo { name: \"LITERAL\" },\n-            ALIAS => &SyntaxInfo { name: \"ALIAS\" },\n-            VISIBILITY => &SyntaxInfo { name: \"VISIBILITY\" },\n-            WHERE_CLAUSE => &SyntaxInfo { name: \"WHERE_CLAUSE\" },\n-            WHERE_PRED => &SyntaxInfo { name: \"WHERE_PRED\" },\n-            ABI => &SyntaxInfo { name: \"ABI\" },\n-            NAME => &SyntaxInfo { name: \"NAME\" },\n-            NAME_REF => &SyntaxInfo { name: \"NAME_REF\" },\n-            LET_STMT => &SyntaxInfo { name: \"LET_STMT\" },\n-            EXPR_STMT => &SyntaxInfo { name: \"EXPR_STMT\" },\n-            TYPE_PARAM_LIST => &SyntaxInfo { name: \"TYPE_PARAM_LIST\" },\n-            LIFETIME_PARAM => &SyntaxInfo { name: \"LIFETIME_PARAM\" },\n-            TYPE_PARAM => &SyntaxInfo { name: \"TYPE_PARAM\" },\n-            TYPE_ARG_LIST => &SyntaxInfo { name: \"TYPE_ARG_LIST\" },\n-            LIFETIME_ARG => &SyntaxInfo { name: \"LIFETIME_ARG\" },\n-            TYPE_ARG => &SyntaxInfo { name: \"TYPE_ARG\" },\n-            ASSOC_TYPE_ARG => &SyntaxInfo { name: \"ASSOC_TYPE_ARG\" },\n-            PARAM_LIST => &SyntaxInfo { name: \"PARAM_LIST\" },\n-            PARAM => &SyntaxInfo { name: \"PARAM\" },\n-            SELF_PARAM => &SyntaxInfo { name: \"SELF_PARAM\" },\n-            ARG_LIST => &SyntaxInfo { name: \"ARG_LIST\" },\n-            TYPE_BOUND => &SyntaxInfo { name: \"TYPE_BOUND\" },\n-            TYPE_BOUND_LIST => &SyntaxInfo { name: \"TYPE_BOUND_LIST\" },\n-            MACRO_ITEMS => &SyntaxInfo { name: \"MACRO_ITEMS\" },\n-            MACRO_STMTS => &SyntaxInfo { name: \"MACRO_STMTS\" },\n+            SEMI => &SyntaxInfo { name: stringify!(SEMI) },\n+            COMMA => &SyntaxInfo { name: stringify!(COMMA) },\n+            L_PAREN => &SyntaxInfo { name: stringify!(L_PAREN) },\n+            R_PAREN => &SyntaxInfo { name: stringify!(R_PAREN) },\n+            L_CURLY => &SyntaxInfo { name: stringify!(L_CURLY) },\n+            R_CURLY => &SyntaxInfo { name: stringify!(R_CURLY) },\n+            L_BRACK => &SyntaxInfo { name: stringify!(L_BRACK) },\n+            R_BRACK => &SyntaxInfo { name: stringify!(R_BRACK) },\n+            L_ANGLE => &SyntaxInfo { name: stringify!(L_ANGLE) },\n+            R_ANGLE => &SyntaxInfo { name: stringify!(R_ANGLE) },\n+            AT => &SyntaxInfo { name: stringify!(AT) },\n+            POUND => &SyntaxInfo { name: stringify!(POUND) },\n+            TILDE => &SyntaxInfo { name: stringify!(TILDE) },\n+            QUESTION => &SyntaxInfo { name: stringify!(QUESTION) },\n+            DOLLAR => &SyntaxInfo { name: stringify!(DOLLAR) },\n+            AMP => &SyntaxInfo { name: stringify!(AMP) },\n+            PIPE => &SyntaxInfo { name: stringify!(PIPE) },\n+            PLUS => &SyntaxInfo { name: stringify!(PLUS) },\n+            STAR => &SyntaxInfo { name: stringify!(STAR) },\n+            SLASH => &SyntaxInfo { name: stringify!(SLASH) },\n+            CARET => &SyntaxInfo { name: stringify!(CARET) },\n+            PERCENT => &SyntaxInfo { name: stringify!(PERCENT) },\n+            UNDERSCORE => &SyntaxInfo { name: stringify!(UNDERSCORE) },\n+            DOT => &SyntaxInfo { name: stringify!(DOT) },\n+            DOTDOT => &SyntaxInfo { name: stringify!(DOTDOT) },\n+            DOTDOTDOT => &SyntaxInfo { name: stringify!(DOTDOTDOT) },\n+            DOTDOTEQ => &SyntaxInfo { name: stringify!(DOTDOTEQ) },\n+            COLON => &SyntaxInfo { name: stringify!(COLON) },\n+            COLONCOLON => &SyntaxInfo { name: stringify!(COLONCOLON) },\n+            EQ => &SyntaxInfo { name: stringify!(EQ) },\n+            EQEQ => &SyntaxInfo { name: stringify!(EQEQ) },\n+            FAT_ARROW => &SyntaxInfo { name: stringify!(FAT_ARROW) },\n+            EXCL => &SyntaxInfo { name: stringify!(EXCL) },\n+            NEQ => &SyntaxInfo { name: stringify!(NEQ) },\n+            MINUS => &SyntaxInfo { name: stringify!(MINUS) },\n+            THIN_ARROW => &SyntaxInfo { name: stringify!(THIN_ARROW) },\n+            LTEQ => &SyntaxInfo { name: stringify!(LTEQ) },\n+            GTEQ => &SyntaxInfo { name: stringify!(GTEQ) },\n+            PLUSEQ => &SyntaxInfo { name: stringify!(PLUSEQ) },\n+            MINUSEQ => &SyntaxInfo { name: stringify!(MINUSEQ) },\n+            PIPEEQ => &SyntaxInfo { name: stringify!(PIPEEQ) },\n+            AMPEQ => &SyntaxInfo { name: stringify!(AMPEQ) },\n+            CARETEQ => &SyntaxInfo { name: stringify!(CARETEQ) },\n+            SLASHEQ => &SyntaxInfo { name: stringify!(SLASHEQ) },\n+            STAREQ => &SyntaxInfo { name: stringify!(STAREQ) },\n+            PERCENTEQ => &SyntaxInfo { name: stringify!(PERCENTEQ) },\n+            AMPAMP => &SyntaxInfo { name: stringify!(AMPAMP) },\n+            PIPEPIPE => &SyntaxInfo { name: stringify!(PIPEPIPE) },\n+            SHL => &SyntaxInfo { name: stringify!(SHL) },\n+            SHR => &SyntaxInfo { name: stringify!(SHR) },\n+            SHLEQ => &SyntaxInfo { name: stringify!(SHLEQ) },\n+            SHREQ => &SyntaxInfo { name: stringify!(SHREQ) },\n+            ASYNC_KW => &SyntaxInfo { name: stringify!(ASYNC_KW) },\n+            USE_KW => &SyntaxInfo { name: stringify!(USE_KW) },\n+            FN_KW => &SyntaxInfo { name: stringify!(FN_KW) },\n+            STRUCT_KW => &SyntaxInfo { name: stringify!(STRUCT_KW) },\n+            ENUM_KW => &SyntaxInfo { name: stringify!(ENUM_KW) },\n+            TRAIT_KW => &SyntaxInfo { name: stringify!(TRAIT_KW) },\n+            IMPL_KW => &SyntaxInfo { name: stringify!(IMPL_KW) },\n+            DYN_KW => &SyntaxInfo { name: stringify!(DYN_KW) },\n+            TRUE_KW => &SyntaxInfo { name: stringify!(TRUE_KW) },\n+            FALSE_KW => &SyntaxInfo { name: stringify!(FALSE_KW) },\n+            AS_KW => &SyntaxInfo { name: stringify!(AS_KW) },\n+            EXTERN_KW => &SyntaxInfo { name: stringify!(EXTERN_KW) },\n+            CRATE_KW => &SyntaxInfo { name: stringify!(CRATE_KW) },\n+            MOD_KW => &SyntaxInfo { name: stringify!(MOD_KW) },\n+            PUB_KW => &SyntaxInfo { name: stringify!(PUB_KW) },\n+            SELF_KW => &SyntaxInfo { name: stringify!(SELF_KW) },\n+            SUPER_KW => &SyntaxInfo { name: stringify!(SUPER_KW) },\n+            IN_KW => &SyntaxInfo { name: stringify!(IN_KW) },\n+            WHERE_KW => &SyntaxInfo { name: stringify!(WHERE_KW) },\n+            FOR_KW => &SyntaxInfo { name: stringify!(FOR_KW) },\n+            LOOP_KW => &SyntaxInfo { name: stringify!(LOOP_KW) },\n+            WHILE_KW => &SyntaxInfo { name: stringify!(WHILE_KW) },\n+            CONTINUE_KW => &SyntaxInfo { name: stringify!(CONTINUE_KW) },\n+            BREAK_KW => &SyntaxInfo { name: stringify!(BREAK_KW) },\n+            IF_KW => &SyntaxInfo { name: stringify!(IF_KW) },\n+            ELSE_KW => &SyntaxInfo { name: stringify!(ELSE_KW) },\n+            MATCH_KW => &SyntaxInfo { name: stringify!(MATCH_KW) },\n+            CONST_KW => &SyntaxInfo { name: stringify!(CONST_KW) },\n+            STATIC_KW => &SyntaxInfo { name: stringify!(STATIC_KW) },\n+            MUT_KW => &SyntaxInfo { name: stringify!(MUT_KW) },\n+            UNSAFE_KW => &SyntaxInfo { name: stringify!(UNSAFE_KW) },\n+            TYPE_KW => &SyntaxInfo { name: stringify!(TYPE_KW) },\n+            REF_KW => &SyntaxInfo { name: stringify!(REF_KW) },\n+            LET_KW => &SyntaxInfo { name: stringify!(LET_KW) },\n+            MOVE_KW => &SyntaxInfo { name: stringify!(MOVE_KW) },\n+            RETURN_KW => &SyntaxInfo { name: stringify!(RETURN_KW) },\n+            TRY_KW => &SyntaxInfo { name: stringify!(TRY_KW) },\n+            BOX_KW => &SyntaxInfo { name: stringify!(BOX_KW) },\n+            AWAIT_KW => &SyntaxInfo { name: stringify!(AWAIT_KW) },\n+            AUTO_KW => &SyntaxInfo { name: stringify!(AUTO_KW) },\n+            DEFAULT_KW => &SyntaxInfo { name: stringify!(DEFAULT_KW) },\n+            EXISTENTIAL_KW => &SyntaxInfo { name: stringify!(EXISTENTIAL_KW) },\n+            UNION_KW => &SyntaxInfo { name: stringify!(UNION_KW) },\n+            INT_NUMBER => &SyntaxInfo { name: stringify!(INT_NUMBER) },\n+            FLOAT_NUMBER => &SyntaxInfo { name: stringify!(FLOAT_NUMBER) },\n+            CHAR => &SyntaxInfo { name: stringify!(CHAR) },\n+            BYTE => &SyntaxInfo { name: stringify!(BYTE) },\n+            STRING => &SyntaxInfo { name: stringify!(STRING) },\n+            RAW_STRING => &SyntaxInfo { name: stringify!(RAW_STRING) },\n+            BYTE_STRING => &SyntaxInfo { name: stringify!(BYTE_STRING) },\n+            RAW_BYTE_STRING => &SyntaxInfo { name: stringify!(RAW_BYTE_STRING) },\n+            ERROR => &SyntaxInfo { name: stringify!(ERROR) },\n+            IDENT => &SyntaxInfo { name: stringify!(IDENT) },\n+            WHITESPACE => &SyntaxInfo { name: stringify!(WHITESPACE) },\n+            LIFETIME => &SyntaxInfo { name: stringify!(LIFETIME) },\n+            COMMENT => &SyntaxInfo { name: stringify!(COMMENT) },\n+            SHEBANG => &SyntaxInfo { name: stringify!(SHEBANG) },\n+            L_DOLLAR => &SyntaxInfo { name: stringify!(L_DOLLAR) },\n+            R_DOLLAR => &SyntaxInfo { name: stringify!(R_DOLLAR) },\n+            SOURCE_FILE => &SyntaxInfo { name: stringify!(SOURCE_FILE) },\n+            STRUCT_DEF => &SyntaxInfo { name: stringify!(STRUCT_DEF) },\n+            ENUM_DEF => &SyntaxInfo { name: stringify!(ENUM_DEF) },\n+            FN_DEF => &SyntaxInfo { name: stringify!(FN_DEF) },\n+            RET_TYPE => &SyntaxInfo { name: stringify!(RET_TYPE) },\n+            EXTERN_CRATE_ITEM => &SyntaxInfo { name: stringify!(EXTERN_CRATE_ITEM) },\n+            MODULE => &SyntaxInfo { name: stringify!(MODULE) },\n+            USE_ITEM => &SyntaxInfo { name: stringify!(USE_ITEM) },\n+            STATIC_DEF => &SyntaxInfo { name: stringify!(STATIC_DEF) },\n+            CONST_DEF => &SyntaxInfo { name: stringify!(CONST_DEF) },\n+            TRAIT_DEF => &SyntaxInfo { name: stringify!(TRAIT_DEF) },\n+            IMPL_BLOCK => &SyntaxInfo { name: stringify!(IMPL_BLOCK) },\n+            TYPE_ALIAS_DEF => &SyntaxInfo { name: stringify!(TYPE_ALIAS_DEF) },\n+            MACRO_CALL => &SyntaxInfo { name: stringify!(MACRO_CALL) },\n+            TOKEN_TREE => &SyntaxInfo { name: stringify!(TOKEN_TREE) },\n+            PAREN_TYPE => &SyntaxInfo { name: stringify!(PAREN_TYPE) },\n+            TUPLE_TYPE => &SyntaxInfo { name: stringify!(TUPLE_TYPE) },\n+            NEVER_TYPE => &SyntaxInfo { name: stringify!(NEVER_TYPE) },\n+            PATH_TYPE => &SyntaxInfo { name: stringify!(PATH_TYPE) },\n+            POINTER_TYPE => &SyntaxInfo { name: stringify!(POINTER_TYPE) },\n+            ARRAY_TYPE => &SyntaxInfo { name: stringify!(ARRAY_TYPE) },\n+            SLICE_TYPE => &SyntaxInfo { name: stringify!(SLICE_TYPE) },\n+            REFERENCE_TYPE => &SyntaxInfo { name: stringify!(REFERENCE_TYPE) },\n+            PLACEHOLDER_TYPE => &SyntaxInfo { name: stringify!(PLACEHOLDER_TYPE) },\n+            FN_POINTER_TYPE => &SyntaxInfo { name: stringify!(FN_POINTER_TYPE) },\n+            FOR_TYPE => &SyntaxInfo { name: stringify!(FOR_TYPE) },\n+            IMPL_TRAIT_TYPE => &SyntaxInfo { name: stringify!(IMPL_TRAIT_TYPE) },\n+            DYN_TRAIT_TYPE => &SyntaxInfo { name: stringify!(DYN_TRAIT_TYPE) },\n+            REF_PAT => &SyntaxInfo { name: stringify!(REF_PAT) },\n+            BIND_PAT => &SyntaxInfo { name: stringify!(BIND_PAT) },\n+            PLACEHOLDER_PAT => &SyntaxInfo { name: stringify!(PLACEHOLDER_PAT) },\n+            PATH_PAT => &SyntaxInfo { name: stringify!(PATH_PAT) },\n+            STRUCT_PAT => &SyntaxInfo { name: stringify!(STRUCT_PAT) },\n+            FIELD_PAT_LIST => &SyntaxInfo { name: stringify!(FIELD_PAT_LIST) },\n+            FIELD_PAT => &SyntaxInfo { name: stringify!(FIELD_PAT) },\n+            TUPLE_STRUCT_PAT => &SyntaxInfo { name: stringify!(TUPLE_STRUCT_PAT) },\n+            TUPLE_PAT => &SyntaxInfo { name: stringify!(TUPLE_PAT) },\n+            SLICE_PAT => &SyntaxInfo { name: stringify!(SLICE_PAT) },\n+            RANGE_PAT => &SyntaxInfo { name: stringify!(RANGE_PAT) },\n+            LITERAL_PAT => &SyntaxInfo { name: stringify!(LITERAL_PAT) },\n+            TUPLE_EXPR => &SyntaxInfo { name: stringify!(TUPLE_EXPR) },\n+            ARRAY_EXPR => &SyntaxInfo { name: stringify!(ARRAY_EXPR) },\n+            PAREN_EXPR => &SyntaxInfo { name: stringify!(PAREN_EXPR) },\n+            PATH_EXPR => &SyntaxInfo { name: stringify!(PATH_EXPR) },\n+            LAMBDA_EXPR => &SyntaxInfo { name: stringify!(LAMBDA_EXPR) },\n+            IF_EXPR => &SyntaxInfo { name: stringify!(IF_EXPR) },\n+            WHILE_EXPR => &SyntaxInfo { name: stringify!(WHILE_EXPR) },\n+            CONDITION => &SyntaxInfo { name: stringify!(CONDITION) },\n+            LOOP_EXPR => &SyntaxInfo { name: stringify!(LOOP_EXPR) },\n+            FOR_EXPR => &SyntaxInfo { name: stringify!(FOR_EXPR) },\n+            CONTINUE_EXPR => &SyntaxInfo { name: stringify!(CONTINUE_EXPR) },\n+            BREAK_EXPR => &SyntaxInfo { name: stringify!(BREAK_EXPR) },\n+            LABEL => &SyntaxInfo { name: stringify!(LABEL) },\n+            BLOCK_EXPR => &SyntaxInfo { name: stringify!(BLOCK_EXPR) },\n+            RETURN_EXPR => &SyntaxInfo { name: stringify!(RETURN_EXPR) },\n+            MATCH_EXPR => &SyntaxInfo { name: stringify!(MATCH_EXPR) },\n+            MATCH_ARM_LIST => &SyntaxInfo { name: stringify!(MATCH_ARM_LIST) },\n+            MATCH_ARM => &SyntaxInfo { name: stringify!(MATCH_ARM) },\n+            MATCH_GUARD => &SyntaxInfo { name: stringify!(MATCH_GUARD) },\n+            STRUCT_LIT => &SyntaxInfo { name: stringify!(STRUCT_LIT) },\n+            NAMED_FIELD_LIST => &SyntaxInfo { name: stringify!(NAMED_FIELD_LIST) },\n+            NAMED_FIELD => &SyntaxInfo { name: stringify!(NAMED_FIELD) },\n+            TRY_BLOCK_EXPR => &SyntaxInfo { name: stringify!(TRY_BLOCK_EXPR) },\n+            BOX_EXPR => &SyntaxInfo { name: stringify!(BOX_EXPR) },\n+            CALL_EXPR => &SyntaxInfo { name: stringify!(CALL_EXPR) },\n+            INDEX_EXPR => &SyntaxInfo { name: stringify!(INDEX_EXPR) },\n+            METHOD_CALL_EXPR => &SyntaxInfo { name: stringify!(METHOD_CALL_EXPR) },\n+            FIELD_EXPR => &SyntaxInfo { name: stringify!(FIELD_EXPR) },\n+            AWAIT_EXPR => &SyntaxInfo { name: stringify!(AWAIT_EXPR) },\n+            TRY_EXPR => &SyntaxInfo { name: stringify!(TRY_EXPR) },\n+            CAST_EXPR => &SyntaxInfo { name: stringify!(CAST_EXPR) },\n+            REF_EXPR => &SyntaxInfo { name: stringify!(REF_EXPR) },\n+            PREFIX_EXPR => &SyntaxInfo { name: stringify!(PREFIX_EXPR) },\n+            RANGE_EXPR => &SyntaxInfo { name: stringify!(RANGE_EXPR) },\n+            BIN_EXPR => &SyntaxInfo { name: stringify!(BIN_EXPR) },\n+            BLOCK => &SyntaxInfo { name: stringify!(BLOCK) },\n+            EXTERN_BLOCK => &SyntaxInfo { name: stringify!(EXTERN_BLOCK) },\n+            EXTERN_ITEM_LIST => &SyntaxInfo { name: stringify!(EXTERN_ITEM_LIST) },\n+            ENUM_VARIANT => &SyntaxInfo { name: stringify!(ENUM_VARIANT) },\n+            NAMED_FIELD_DEF_LIST => &SyntaxInfo { name: stringify!(NAMED_FIELD_DEF_LIST) },\n+            NAMED_FIELD_DEF => &SyntaxInfo { name: stringify!(NAMED_FIELD_DEF) },\n+            POS_FIELD_DEF_LIST => &SyntaxInfo { name: stringify!(POS_FIELD_DEF_LIST) },\n+            POS_FIELD_DEF => &SyntaxInfo { name: stringify!(POS_FIELD_DEF) },\n+            ENUM_VARIANT_LIST => &SyntaxInfo { name: stringify!(ENUM_VARIANT_LIST) },\n+            ITEM_LIST => &SyntaxInfo { name: stringify!(ITEM_LIST) },\n+            ATTR => &SyntaxInfo { name: stringify!(ATTR) },\n+            META_ITEM => &SyntaxInfo { name: stringify!(META_ITEM) },\n+            USE_TREE => &SyntaxInfo { name: stringify!(USE_TREE) },\n+            USE_TREE_LIST => &SyntaxInfo { name: stringify!(USE_TREE_LIST) },\n+            PATH => &SyntaxInfo { name: stringify!(PATH) },\n+            PATH_SEGMENT => &SyntaxInfo { name: stringify!(PATH_SEGMENT) },\n+            LITERAL => &SyntaxInfo { name: stringify!(LITERAL) },\n+            ALIAS => &SyntaxInfo { name: stringify!(ALIAS) },\n+            VISIBILITY => &SyntaxInfo { name: stringify!(VISIBILITY) },\n+            WHERE_CLAUSE => &SyntaxInfo { name: stringify!(WHERE_CLAUSE) },\n+            WHERE_PRED => &SyntaxInfo { name: stringify!(WHERE_PRED) },\n+            ABI => &SyntaxInfo { name: stringify!(ABI) },\n+            NAME => &SyntaxInfo { name: stringify!(NAME) },\n+            NAME_REF => &SyntaxInfo { name: stringify!(NAME_REF) },\n+            LET_STMT => &SyntaxInfo { name: stringify!(LET_STMT) },\n+            EXPR_STMT => &SyntaxInfo { name: stringify!(EXPR_STMT) },\n+            TYPE_PARAM_LIST => &SyntaxInfo { name: stringify!(TYPE_PARAM_LIST) },\n+            LIFETIME_PARAM => &SyntaxInfo { name: stringify!(LIFETIME_PARAM) },\n+            TYPE_PARAM => &SyntaxInfo { name: stringify!(TYPE_PARAM) },\n+            TYPE_ARG_LIST => &SyntaxInfo { name: stringify!(TYPE_ARG_LIST) },\n+            LIFETIME_ARG => &SyntaxInfo { name: stringify!(LIFETIME_ARG) },\n+            TYPE_ARG => &SyntaxInfo { name: stringify!(TYPE_ARG) },\n+            ASSOC_TYPE_ARG => &SyntaxInfo { name: stringify!(ASSOC_TYPE_ARG) },\n+            PARAM_LIST => &SyntaxInfo { name: stringify!(PARAM_LIST) },\n+            PARAM => &SyntaxInfo { name: stringify!(PARAM) },\n+            SELF_PARAM => &SyntaxInfo { name: stringify!(SELF_PARAM) },\n+            ARG_LIST => &SyntaxInfo { name: stringify!(ARG_LIST) },\n+            TYPE_BOUND => &SyntaxInfo { name: stringify!(TYPE_BOUND) },\n+            TYPE_BOUND_LIST => &SyntaxInfo { name: stringify!(TYPE_BOUND_LIST) },\n+            MACRO_ITEMS => &SyntaxInfo { name: stringify!(MACRO_ITEMS) },\n+            MACRO_STMTS => &SyntaxInfo { name: stringify!(MACRO_STMTS) },\n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n             EOF => &SyntaxInfo { name: \"EOF\" },\n             __LAST => &SyntaxInfo { name: \"__LAST\" },\n@@ -759,11 +557,14 @@ impl SyntaxKind {\n             \"try\" => TRY_KW,\n             \"box\" => BOX_KW,\n             \"await\" => AWAIT_KW,\n+            \"auto\" => AUTO_KW,\n+            \"default\" => DEFAULT_KW,\n+            \"existential\" => EXISTENTIAL_KW,\n+            \"union\" => UNION_KW,\n             _ => return None,\n         };\n         Some(kw)\n     }\n-\n     pub fn from_char(c: char) -> Option<SyntaxKind> {\n         let tok = match c {\n             ';' => SEMI,\n@@ -794,3 +595,291 @@ impl SyntaxKind {\n         Some(tok)\n     }\n }\n+#[macro_export]\n+macro_rules! T {\n+    ( ; ) => {\n+        $crate::SyntaxKind::SEMI\n+    };\n+    ( , ) => {\n+        $crate::SyntaxKind::COMMA\n+    };\n+    ( '(' ) => {\n+        $crate::SyntaxKind::L_PAREN\n+    };\n+    ( ')' ) => {\n+        $crate::SyntaxKind::R_PAREN\n+    };\n+    ( '{' ) => {\n+        $crate::SyntaxKind::L_CURLY\n+    };\n+    ( '}' ) => {\n+        $crate::SyntaxKind::R_CURLY\n+    };\n+    ( '[' ) => {\n+        $crate::SyntaxKind::L_BRACK\n+    };\n+    ( ']' ) => {\n+        $crate::SyntaxKind::R_BRACK\n+    };\n+    ( < ) => {\n+        $crate::SyntaxKind::L_ANGLE\n+    };\n+    ( > ) => {\n+        $crate::SyntaxKind::R_ANGLE\n+    };\n+    ( @ ) => {\n+        $crate::SyntaxKind::AT\n+    };\n+    ( # ) => {\n+        $crate::SyntaxKind::POUND\n+    };\n+    ( ~ ) => {\n+        $crate::SyntaxKind::TILDE\n+    };\n+    ( ? ) => {\n+        $crate::SyntaxKind::QUESTION\n+    };\n+    ( $ ) => {\n+        $crate::SyntaxKind::DOLLAR\n+    };\n+    ( & ) => {\n+        $crate::SyntaxKind::AMP\n+    };\n+    ( | ) => {\n+        $crate::SyntaxKind::PIPE\n+    };\n+    ( + ) => {\n+        $crate::SyntaxKind::PLUS\n+    };\n+    ( * ) => {\n+        $crate::SyntaxKind::STAR\n+    };\n+    ( / ) => {\n+        $crate::SyntaxKind::SLASH\n+    };\n+    ( ^ ) => {\n+        $crate::SyntaxKind::CARET\n+    };\n+    ( % ) => {\n+        $crate::SyntaxKind::PERCENT\n+    };\n+    ( _ ) => {\n+        $crate::SyntaxKind::UNDERSCORE\n+    };\n+    ( . ) => {\n+        $crate::SyntaxKind::DOT\n+    };\n+    ( .. ) => {\n+        $crate::SyntaxKind::DOTDOT\n+    };\n+    ( ... ) => {\n+        $crate::SyntaxKind::DOTDOTDOT\n+    };\n+    ( ..= ) => {\n+        $crate::SyntaxKind::DOTDOTEQ\n+    };\n+    ( : ) => {\n+        $crate::SyntaxKind::COLON\n+    };\n+    ( :: ) => {\n+        $crate::SyntaxKind::COLONCOLON\n+    };\n+    ( = ) => {\n+        $crate::SyntaxKind::EQ\n+    };\n+    ( == ) => {\n+        $crate::SyntaxKind::EQEQ\n+    };\n+    ( => ) => {\n+        $crate::SyntaxKind::FAT_ARROW\n+    };\n+    ( ! ) => {\n+        $crate::SyntaxKind::EXCL\n+    };\n+    ( != ) => {\n+        $crate::SyntaxKind::NEQ\n+    };\n+    ( - ) => {\n+        $crate::SyntaxKind::MINUS\n+    };\n+    ( -> ) => {\n+        $crate::SyntaxKind::THIN_ARROW\n+    };\n+    ( <= ) => {\n+        $crate::SyntaxKind::LTEQ\n+    };\n+    ( >= ) => {\n+        $crate::SyntaxKind::GTEQ\n+    };\n+    ( += ) => {\n+        $crate::SyntaxKind::PLUSEQ\n+    };\n+    ( -= ) => {\n+        $crate::SyntaxKind::MINUSEQ\n+    };\n+    ( |= ) => {\n+        $crate::SyntaxKind::PIPEEQ\n+    };\n+    ( &= ) => {\n+        $crate::SyntaxKind::AMPEQ\n+    };\n+    ( ^= ) => {\n+        $crate::SyntaxKind::CARETEQ\n+    };\n+    ( /= ) => {\n+        $crate::SyntaxKind::SLASHEQ\n+    };\n+    ( *= ) => {\n+        $crate::SyntaxKind::STAREQ\n+    };\n+    ( %= ) => {\n+        $crate::SyntaxKind::PERCENTEQ\n+    };\n+    ( && ) => {\n+        $crate::SyntaxKind::AMPAMP\n+    };\n+    ( || ) => {\n+        $crate::SyntaxKind::PIPEPIPE\n+    };\n+    ( << ) => {\n+        $crate::SyntaxKind::SHL\n+    };\n+    ( >> ) => {\n+        $crate::SyntaxKind::SHR\n+    };\n+    ( <<= ) => {\n+        $crate::SyntaxKind::SHLEQ\n+    };\n+    ( >>= ) => {\n+        $crate::SyntaxKind::SHREQ\n+    };\n+    ( async ) => {\n+        $crate::SyntaxKind::ASYNC_KW\n+    };\n+    ( use ) => {\n+        $crate::SyntaxKind::USE_KW\n+    };\n+    ( fn ) => {\n+        $crate::SyntaxKind::FN_KW\n+    };\n+    ( struct ) => {\n+        $crate::SyntaxKind::STRUCT_KW\n+    };\n+    ( enum ) => {\n+        $crate::SyntaxKind::ENUM_KW\n+    };\n+    ( trait ) => {\n+        $crate::SyntaxKind::TRAIT_KW\n+    };\n+    ( impl ) => {\n+        $crate::SyntaxKind::IMPL_KW\n+    };\n+    ( dyn ) => {\n+        $crate::SyntaxKind::DYN_KW\n+    };\n+    ( true ) => {\n+        $crate::SyntaxKind::TRUE_KW\n+    };\n+    ( false ) => {\n+        $crate::SyntaxKind::FALSE_KW\n+    };\n+    ( as ) => {\n+        $crate::SyntaxKind::AS_KW\n+    };\n+    ( extern ) => {\n+        $crate::SyntaxKind::EXTERN_KW\n+    };\n+    ( crate ) => {\n+        $crate::SyntaxKind::CRATE_KW\n+    };\n+    ( mod ) => {\n+        $crate::SyntaxKind::MOD_KW\n+    };\n+    ( pub ) => {\n+        $crate::SyntaxKind::PUB_KW\n+    };\n+    ( self ) => {\n+        $crate::SyntaxKind::SELF_KW\n+    };\n+    ( super ) => {\n+        $crate::SyntaxKind::SUPER_KW\n+    };\n+    ( in ) => {\n+        $crate::SyntaxKind::IN_KW\n+    };\n+    ( where ) => {\n+        $crate::SyntaxKind::WHERE_KW\n+    };\n+    ( for ) => {\n+        $crate::SyntaxKind::FOR_KW\n+    };\n+    ( loop ) => {\n+        $crate::SyntaxKind::LOOP_KW\n+    };\n+    ( while ) => {\n+        $crate::SyntaxKind::WHILE_KW\n+    };\n+    ( continue ) => {\n+        $crate::SyntaxKind::CONTINUE_KW\n+    };\n+    ( break ) => {\n+        $crate::SyntaxKind::BREAK_KW\n+    };\n+    ( if ) => {\n+        $crate::SyntaxKind::IF_KW\n+    };\n+    ( else ) => {\n+        $crate::SyntaxKind::ELSE_KW\n+    };\n+    ( match ) => {\n+        $crate::SyntaxKind::MATCH_KW\n+    };\n+    ( const ) => {\n+        $crate::SyntaxKind::CONST_KW\n+    };\n+    ( static ) => {\n+        $crate::SyntaxKind::STATIC_KW\n+    };\n+    ( mut ) => {\n+        $crate::SyntaxKind::MUT_KW\n+    };\n+    ( unsafe ) => {\n+        $crate::SyntaxKind::UNSAFE_KW\n+    };\n+    ( type ) => {\n+        $crate::SyntaxKind::TYPE_KW\n+    };\n+    ( ref ) => {\n+        $crate::SyntaxKind::REF_KW\n+    };\n+    ( let ) => {\n+        $crate::SyntaxKind::LET_KW\n+    };\n+    ( move ) => {\n+        $crate::SyntaxKind::MOVE_KW\n+    };\n+    ( return ) => {\n+        $crate::SyntaxKind::RETURN_KW\n+    };\n+    ( try ) => {\n+        $crate::SyntaxKind::TRY_KW\n+    };\n+    ( box ) => {\n+        $crate::SyntaxKind::BOX_KW\n+    };\n+    ( await ) => {\n+        $crate::SyntaxKind::AWAIT_KW\n+    };\n+    ( auto ) => {\n+        $crate::SyntaxKind::AUTO_KW\n+    };\n+    ( default ) => {\n+        $crate::SyntaxKind::DEFAULT_KW\n+    };\n+    ( existential ) => {\n+        $crate::SyntaxKind::EXISTENTIAL_KW\n+    };\n+    ( union ) => {\n+        $crate::SyntaxKind::UNION_KW\n+    };\n+}"}, {"sha": "f5abbec4bcf97c10058aa5ce2b301ae7286678c6", "filename": "crates/ra_parser/src/syntax_kind/generated.rs.tera", "status": "removed", "additions": 0, "deletions": 128, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/7d29cf12256921d63860402a2e7cd2936c22e01e/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/7d29cf12256921d63860402a2e7cd2936c22e01e/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs.tera?ref=7d29cf12256921d63860402a2e7cd2936c22e01e", "patch": "@@ -1,128 +0,0 @@\n-{# THIS File is not automatically generated:\n-the below applies to the result of this template\n-#}// This file is automatically generated based on the file `./generated.rs.tera` when `cargo gen-syntax` is run\n-// Do not edit manually\n-\n-#![allow(bad_style, missing_docs, unreachable_pub)]\n-#![cfg_attr(rustfmt, rustfmt_skip)]\n-use super::SyntaxInfo;\n-\n-/// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-#[repr(u16)]\n-pub enum SyntaxKind {\n-    // Technical SyntaxKinds: they appear temporally during parsing,\n-    // but never end up in the final tree\n-    #[doc(hidden)]\n-    TOMBSTONE,\n-    #[doc(hidden)]\n-    EOF,\n-\n-{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n-    {{t.1}},\n-{%- endfor -%}\n-{% for kw in concat(a=keywords, b=contextual_keywords) %}\n-    {{kw | upper}}_KW,\n-{%- endfor -%}\n-{% for t in concat(a=literals, b=tokens, c=nodes) %}\n-    {{t}},\n-{%- endfor %}\n-    // Technical kind so that we can cast from u16 safely\n-    #[doc(hidden)]\n-    __LAST,\n-}\n-use self::SyntaxKind::*;\n-\n-#[macro_export]\n-macro_rules! T {\n-{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n-    {%- if t.0 == '{' or t.0 == '}' or t.0 == '[' or t.0 == ']' or t.0 == '(' or t.0 == ')' %}\n-    ('{{t.0}}') => { $crate::SyntaxKind::{{t.1}} };\n-    {%- else %}\n-    ({{t.0}}) => { $crate::SyntaxKind::{{t.1}} };\n-    {%- endif %}\n-{%- endfor -%}\n-{% for kw in concat(a=keywords, b=contextual_keywords) %}\n-    ({{kw}}) => { $crate::SyntaxKind::{{kw | upper}}_KW };\n-{%- endfor %}\n-}\n-\n-impl From<u16> for SyntaxKind {\n-    fn from(d: u16) -> SyntaxKind {\n-        assert!(d <= (__LAST as u16));\n-        unsafe { std::mem::transmute::<u16, SyntaxKind>(d) }\n-    }\n-}\n-\n-impl From<SyntaxKind> for u16 {\n-    fn from(k: SyntaxKind) -> u16 {\n-        k as u16\n-    }\n-}\n-\n-impl SyntaxKind {\n-    pub fn is_keyword(self) -> bool {\n-        match self {\n-{%- for kw in concat(a=keywords, b=contextual_keywords) %}\n-            | {{kw | upper}}_KW\n-{%- endfor %}\n-                => true,\n-            _ => false\n-        }\n-    }\n-\n-    pub fn is_punct(self) -> bool {\n-        match self {\n-{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n-            | {{t.1}}\n-{%- endfor %}\n-                => true,\n-            _ => false\n-        }\n-    }\n-    pub fn is_literal(self) -> bool {\n-        match self {\n-{%- for t in literals %}\n-            | {{t}}\n-{%- endfor %}\n-                => true,\n-            _ => false\n-        }\n-    }\n-\n-    pub(crate) fn info(self) -> &'static SyntaxInfo {\n-        match self {\n-{%- for t in concat(a=single_byte_tokens, b=multi_byte_tokens) %}\n-            {{t.1}} => &SyntaxInfo { name: \"{{t.1}}\" },\n-{%- endfor -%}\n-{% for kw in concat(a=keywords, b=contextual_keywords) %}\n-            {{kw | upper}}_KW => &SyntaxInfo { name: \"{{kw | upper}}_KW\" },\n-{%- endfor -%}\n-{% for t in concat(a=literals, b=tokens, c=nodes) %}\n-            {{t}} => &SyntaxInfo { name: \"{{t}}\" },\n-{%- endfor %}\n-            TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n-            EOF => &SyntaxInfo { name: \"EOF\" },\n-            __LAST => &SyntaxInfo { name: \"__LAST\" },\n-        }\n-    }\n-    pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n-        let kw = match ident {\n-{%- for kw in keywords %}\n-            \"{{kw}}\" => {{kw | upper}}_KW,\n-{%- endfor %}\n-            _ => return None,\n-        };\n-        Some(kw)\n-    }\n-\n-    pub fn from_char(c: char) -> Option<SyntaxKind> {\n-        let tok = match c {\n-{%- for t in single_byte_tokens %}\n-            '{{t.0}}' => {{t.1}},\n-{%- endfor %}\n-            _ => return None,\n-        };\n-        Some(tok)\n-    }\n-}"}]}