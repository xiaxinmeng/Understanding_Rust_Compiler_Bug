{"sha": "e464e2ba56d4f995fca23350f4761787c78073f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NjRlMmJhNTZkNGY5OTVmY2EyMzM1MGY0NzYxNzg3Yzc4MDczZjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-16T02:19:32Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-16T02:19:32Z"}, "message": "rustc: Describe why regions failed to unify as part of the type error message", "tree": {"sha": "1b0cd6daa2608d98404f895106a5589c2d77ce15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b0cd6daa2608d98404f895106a5589c2d77ce15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e464e2ba56d4f995fca23350f4761787c78073f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e464e2ba56d4f995fca23350f4761787c78073f9", "html_url": "https://github.com/rust-lang/rust/commit/e464e2ba56d4f995fca23350f4761787c78073f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e464e2ba56d4f995fca23350f4761787c78073f9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ea3b0b89cd24c6910b89410916118f7eb71a302", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea3b0b89cd24c6910b89410916118f7eb71a302", "html_url": "https://github.com/rust-lang/rust/commit/4ea3b0b89cd24c6910b89410916118f7eb71a302"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "3518a4d1f0e62940fd741346a23a9c0b0a9e6354", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e464e2ba56d4f995fca23350f4761787c78073f9/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e464e2ba56d4f995fca23350f4761787c78073f9/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=e464e2ba56d4f995fca23350f4761787c78073f9", "patch": "@@ -8,6 +8,7 @@ import syntax::ast_util;\n import syntax::codemap::span;\n import metadata::csearch;\n import util::common::*;\n+import util::ppaux::region_to_str;\n import util::ppaux::ty_to_str;\n import util::ppaux::ty_constr_to_str;\n import syntax::print::pprust::*;\n@@ -295,7 +296,7 @@ enum type_err {\n     terr_mode_mismatch(mode, mode),\n     terr_constr_len(uint, uint),\n     terr_constr_mismatch(@type_constr, @type_constr),\n-    terr_regions_differ,\n+    terr_regions_differ(bool /* variance */, region, region),\n }\n \n enum param_bound {\n@@ -1916,7 +1917,7 @@ mod unify {\n               ret if e_region == a_region {\n                   nxt(e_region)\n               } else {\n-                  err(terr_regions_differ)\n+                  err(terr_regions_differ(true, e_region, a_region))\n               };\n             }\n         }\n@@ -1925,7 +1926,7 @@ mod unify {\n             ret if sub == super {\n                 nxt(super)\n             } else {\n-                err(terr_regions_differ)\n+                err(terr_regions_differ(true, super, sub))\n             };\n         }\n \n@@ -1936,7 +1937,7 @@ mod unify {\n         if region::scope_contains(cx.tcx.region_map, subscope, superscope) {\n             ret nxt(super);\n         }\n-        ret err(terr_regions_differ);\n+        ret err(terr_regions_differ(false, sub, super));\n     }\n \n     fn unify_field<T:copy>(\n@@ -2160,7 +2161,7 @@ fn same_type(cx: ctxt, a: t, b: t) -> bool {\n     }\n }\n \n-fn type_err_to_str(err: type_err) -> str {\n+fn type_err_to_str(cx: ctxt, err: type_err) -> str {\n     alt err {\n       terr_mismatch { ret \"types differ\"; }\n       terr_ret_style_mismatch(expect, actual) {\n@@ -2212,8 +2213,15 @@ fn type_err_to_str(err: type_err) -> str {\n                 \" but found one with constraint \" +\n                 ty_constr_to_str(a_constr);\n       }\n-      terr_regions_differ {\n-        ret \"inconsistent pointer lifetimes\"\n+      terr_regions_differ(true, region_a, region_b) {\n+        ret #fmt(\"reference lifetime %s does not match reference lifetime %s\",\n+                 region_to_str(cx, region_a), region_to_str(cx, region_b));\n+      }\n+      terr_regions_differ(false, subregion, superregion) {\n+        ret #fmt(\"references with lifetime %s do not outlive references with \\\n+                  lifetime %s\",\n+                 region_to_str(cx, subregion),\n+                 region_to_str(cx, superregion));\n       }\n     }\n }"}, {"sha": "e518704b1b39f6ffe3d3aa0f2917ce5d0a638436", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e464e2ba56d4f995fca23350f4761787c78073f9/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e464e2ba56d4f995fca23350f4761787c78073f9/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=e464e2ba56d4f995fca23350f4761787c78073f9", "patch": "@@ -767,7 +767,7 @@ fn compare_impl_method(tcx: ty::ctxt, sp: span, impl_m: ty::method,\n           result::err(err) {\n             tcx.sess.span_err(sp, \"method `\" + if_m.ident +\n                               \"` has an incompatible type: \" +\n-                              ty::type_err_to_str(err));\n+                              ty::type_err_to_str(tcx, err));\n             impl_fty\n           }\n           result::ok(tp) { tp }\n@@ -1154,7 +1154,9 @@ mod demand {\n                                           ty_to_str(fcx.ccx.tcx, e_err) +\n                                           \"` but found `\" +\n                                           ty_to_str(fcx.ccx.tcx, a_err) +\n-                                          \"` (\" + ty::type_err_to_str(err) +\n+                                          \"` (\" +\n+                                          ty::type_err_to_str(fcx.ccx.tcx,\n+                                                              err) +\n                                           \")\");\n             ret mk_result(fcx, expected, ty_param_subst_var_ids);\n           }"}, {"sha": "885ac9d7fbe4a60a795381ff879ef2efca55da28", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e464e2ba56d4f995fca23350f4761787c78073f9/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e464e2ba56d4f995fca23350f4761787c78073f9/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=e464e2ba56d4f995fca23350f4761787c78073f9", "patch": "@@ -12,19 +12,19 @@ import driver::session::session;\n \n fn region_to_str(cx: ctxt, region: region) -> str {\n     alt region {\n-      re_named(_)   { \"<name>.\"   }     // TODO: include name\n-      re_caller(_)  { \"<caller>.\" }\n+      re_named(_)   { \"<name>\" }    // TODO: include name\n+      re_caller(_)  { \"<caller>\" }\n       re_block(node_id) {\n         alt cx.items.get(node_id) {\n             ast_map::node_block(blk) {\n-                #fmt(\"<block at %s>.\", codemap::span_to_str(blk.span,\n-                                                            cx.sess.codemap))\n+                #fmt(\"<block at %s>\", codemap::span_to_str(blk.span,\n+                                                           cx.sess.codemap))\n             }\n             _ { cx.sess.bug(\"re_block refers to non-block\") }\n         }\n       }\n-      re_self(_)    { \"self.\"     }\n-      re_inferred   { \"\"          }\n+      re_self(_)    { \"self\" }\n+      re_inferred   { \"\" }\n     }\n }\n \n@@ -121,7 +121,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       ty_box(tm) { \"@\" + mt_to_str(cx, tm) }\n       ty_uniq(tm) { \"~\" + mt_to_str(cx, tm) }\n       ty_ptr(tm) { \"*\" + mt_to_str(cx, tm) }\n-      ty_rptr(r, tm) { \"&\" + region_to_str(cx, r) + mt_to_str(cx, tm) }\n+      ty_rptr(r, tm) { \"&\" + region_to_str(cx, r) + \".\" + mt_to_str(cx, tm) }\n       ty_vec(tm) { \"[\" + mt_to_str(cx, tm) + \"]\" }\n       ty_type { \"type\" }\n       ty_rec(elems) {"}]}