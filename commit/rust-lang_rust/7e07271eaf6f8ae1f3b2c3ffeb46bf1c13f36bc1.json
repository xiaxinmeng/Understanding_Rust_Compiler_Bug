{"sha": "7e07271eaf6f8ae1f3b2c3ffeb46bf1c13f36bc1", "node_id": "C_kwDOAAsO6NoAKDdlMDcyNzFlYWY2ZjhhZTFmM2IyYzNmZmViNDZiZjFjMTNmMzZiYzE", "commit": {"author": {"name": "danakj", "email": "danakj@chromium.org", "date": "2023-06-14T14:44:00Z"}, "committer": {"name": "danakj", "email": "danakj@chromium.org", "date": "2023-06-14T14:44:00Z"}, "message": "Avoid absolute sysroot paths in the MSVC linker command line\n\nWhen the `--sysroot` is specified as relative to the current working\ndirectory, the sysroot's rlibs should also be specified as relative\npaths. Otherwise, the current working directory ends up in the\nabsolute paths, and in the linker command line. And the entire linker\ncommand line appears in the PDB file generated by the MSVC linker.\n\nWhen adding an rlib to the linker command line, if the rlib's canonical\npath is in the sysroot's canonical path, then use the current sysroot\npath + filename instead of the full absolute path to the rlib. This\nmeans that when `--sysroot=foo` is specified, the linker command line\nwill contain `foo/rustlib/target/lib/lib*.rlib` instead of the full\nabsolute path to the same.\n\nThis addresses https://github.com/rust-lang/rust/issues/112586", "tree": {"sha": "6aa89ec65c8af647d20eee773f8310b5e4ddf92b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aa89ec65c8af647d20eee773f8310b5e4ddf92b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e07271eaf6f8ae1f3b2c3ffeb46bf1c13f36bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e07271eaf6f8ae1f3b2c3ffeb46bf1c13f36bc1", "html_url": "https://github.com/rust-lang/rust/commit/7e07271eaf6f8ae1f3b2c3ffeb46bf1c13f36bc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e07271eaf6f8ae1f3b2c3ffeb46bf1c13f36bc1/comments", "author": {"login": "danakj", "id": 342377, "node_id": "MDQ6VXNlcjM0MjM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/342377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danakj", "html_url": "https://github.com/danakj", "followers_url": "https://api.github.com/users/danakj/followers", "following_url": "https://api.github.com/users/danakj/following{/other_user}", "gists_url": "https://api.github.com/users/danakj/gists{/gist_id}", "starred_url": "https://api.github.com/users/danakj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danakj/subscriptions", "organizations_url": "https://api.github.com/users/danakj/orgs", "repos_url": "https://api.github.com/users/danakj/repos", "events_url": "https://api.github.com/users/danakj/events{/privacy}", "received_events_url": "https://api.github.com/users/danakj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danakj", "id": 342377, "node_id": "MDQ6VXNlcjM0MjM3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/342377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danakj", "html_url": "https://github.com/danakj", "followers_url": "https://api.github.com/users/danakj/followers", "following_url": "https://api.github.com/users/danakj/following{/other_user}", "gists_url": "https://api.github.com/users/danakj/gists{/gist_id}", "starred_url": "https://api.github.com/users/danakj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danakj/subscriptions", "organizations_url": "https://api.github.com/users/danakj/orgs", "repos_url": "https://api.github.com/users/danakj/repos", "events_url": "https://api.github.com/users/danakj/events{/privacy}", "received_events_url": "https://api.github.com/users/danakj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5683791ebb7bbc440366635c322ad82badc554ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/5683791ebb7bbc440366635c322ad82badc554ca", "html_url": "https://github.com/rust-lang/rust/commit/5683791ebb7bbc440366635c322ad82badc554ca"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "9c53e5c05313dffc8aed426c96c8b38555b268fa", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7e07271eaf6f8ae1f3b2c3ffeb46bf1c13f36bc1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e07271eaf6f8ae1f3b2c3ffeb46bf1c13f36bc1/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=7e07271eaf6f8ae1f3b2c3ffeb46bf1c13f36bc1", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorGuaranteed, Handler};\n-use rustc_fs_util::fix_windows_verbatim_for_gcc;\n+use rustc_fs_util::{fix_windows_verbatim_for_gcc, try_canonicalize};\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_metadata::find_native_static_library;\n use rustc_metadata::fs::{copy_to_stdout, emit_wrapper_file, METADATA_FILENAME};\n@@ -2682,6 +2682,31 @@ fn add_upstream_native_libraries(\n     }\n }\n \n+// Rehome sysroot lib paths to be relative to the sysroot, which may be a relative\n+// path specified by the user. If the sysroot is a relative path, and the sysroot rlibs\n+// are specified as an absolute path, the linker command line can be non-deterministic\n+// due to the paths including the current working directory. The linker command line\n+// needs to be deterministic since it appears inside the PDB file generated by the MSVC\n+// linker. See https://github.com/rust-lang/rust/issues/112586.\n+//\n+// Note that the `susroot_lib_path` returned by `target_filesearch().get_lib_path()` has\n+// already had `fix_windows_verbatim_for_gcc()` applied if needed.\n+fn rehome_sysroot_rlib_path<'a>(sess: &'a Session, rlib_path: PathBuf) -> PathBuf {\n+    let sysroot_lib_path = sess.target_filesearch(PathKind::All).get_lib_path();\n+    let canonical_sysroot_lib_path =\n+        { try_canonicalize(&sysroot_lib_path).unwrap_or_else(|_| sysroot_lib_path.clone()) };\n+\n+    let mut canonical_rlib_dir = try_canonicalize(&rlib_path).unwrap_or_else(|_| rlib_path.clone());\n+    canonical_rlib_dir.pop();\n+\n+    if canonical_rlib_dir == canonical_sysroot_lib_path {\n+        sysroot_lib_path\n+            .join(rlib_path.file_name().expect(\"rlib path has no file name path component\"))\n+    } else {\n+        rlib_path\n+    }\n+}\n+\n // Adds the static \"rlib\" versions of all crates to the command line.\n // There's a bit of magic which happens here specifically related to LTO,\n // namely that we remove upstream object files.\n@@ -2713,7 +2738,7 @@ fn add_static_crate<'a>(\n     let cratepath = &src.rlib.as_ref().unwrap().0;\n \n     let mut link_upstream = |path: &Path| {\n-        cmd.link_rlib(&fix_windows_verbatim_for_gcc(path));\n+        cmd.link_rlib(&rehome_sysroot_rlib_path(sess, fix_windows_verbatim_for_gcc(path)));\n     };\n \n     if !are_upstream_rust_objects_already_included(sess)"}]}