{"sha": "798ce502845435d94856a7b5fed5f703b06506d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OGNlNTAyODQ1NDM1ZDk0ODU2YTdiNWZlZDVmNzAzYjA2NTA2ZDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-28T23:03:29Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-07-28T23:08:05Z"}, "message": "std: Deprecate extra TcpStream/UdpSocket methods\n\nThese methods are all covered by [RFC 1158] and are currently all available on\nstable Rust via the [`net2` crate][net2] on crates.io. This commit does not\ntouch the timeout related functions as they're still waiting on `Duration` which\nis unstable anyway, so punting in favor of the `net2` crate wouldn't buy much.\n\n[RFC 1158]: https://github.com/rust-lang/rfcs/pull/1158\n[net2]: http://crates.io/crates/net2\n\nSpecifically, this commit deprecates:\n\n* TcpStream::set_nodelay\n* TcpStream::set_keepalive\n* UdpSocket::set_broadcast\n* UdpSocket::set_multicast_loop\n* UdpSocket::join_multicast\n* UdpSocket::set_multicast_time_to_live\n* UdpSocket::set_time_to_live", "tree": {"sha": "52c3fe28b35e2853c436449a98e9355352db1cc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c3fe28b35e2853c436449a98e9355352db1cc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/798ce502845435d94856a7b5fed5f703b06506d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/798ce502845435d94856a7b5fed5f703b06506d1", "html_url": "https://github.com/rust-lang/rust/commit/798ce502845435d94856a7b5fed5f703b06506d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/798ce502845435d94856a7b5fed5f703b06506d1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba9224f35451e5d5ef7647bd2b40e5da80ce2735", "html_url": "https://github.com/rust-lang/rust/commit/ba9224f35451e5d5ef7647bd2b40e5da80ce2735"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "84e05083b573ca7429d5eb1b32ce3633a171ecaa", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/798ce502845435d94856a7b5fed5f703b06506d1/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798ce502845435d94856a7b5fed5f703b06506d1/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=798ce502845435d94856a7b5fed5f703b06506d1", "patch": "@@ -129,6 +129,9 @@ impl TcpStream {\n     }\n \n     /// Sets the nodelay flag on this connection to the boolean specified.\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"available through the `net2` crate on crates.io\")]\n+    #[unstable(feature = \"tcp_extras\", reason = \"available externally\")]\n     pub fn set_nodelay(&self, nodelay: bool) -> io::Result<()> {\n         self.0.set_nodelay(nodelay)\n     }\n@@ -138,6 +141,9 @@ impl TcpStream {\n     /// If the value specified is `None`, then the keepalive flag is cleared on\n     /// this connection. Otherwise, the keepalive timeout will be set to the\n     /// specified time, in seconds.\n+    #[unstable(feature = \"tcp_extras\", reason = \"available externally\")]\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"available through the `net2` crate on crates.io\")]\n     pub fn set_keepalive(&self, seconds: Option<u32>) -> io::Result<()> {\n         self.0.set_keepalive(seconds)\n     }"}, {"sha": "8212b8888d38463e6292c53304f7b9fd3bd2bb8e", "filename": "src/libstd/net/udp.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/798ce502845435d94856a7b5fed5f703b06506d1/src%2Flibstd%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/798ce502845435d94856a7b5fed5f703b06506d1/src%2Flibstd%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fudp.rs?ref=798ce502845435d94856a7b5fed5f703b06506d1", "patch": "@@ -98,33 +98,51 @@ impl UdpSocket {\n     }\n \n     /// Sets the broadcast flag on or off.\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"available through the `net2` crate on crates.io\")]\n+    #[unstable(feature = \"udp_extras\", reason = \"available externally\")]\n     pub fn set_broadcast(&self, on: bool) -> io::Result<()> {\n         self.0.set_broadcast(on)\n     }\n \n     /// Sets the multicast loop flag to the specified value.\n     ///\n     /// This lets multicast packets loop back to local sockets (if enabled)\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"available through the `net2` crate on crates.io\")]\n+    #[unstable(feature = \"udp_extras\", reason = \"available externally\")]\n     pub fn set_multicast_loop(&self, on: bool) -> io::Result<()> {\n         self.0.set_multicast_loop(on)\n     }\n \n     /// Joins a multicast IP address (becomes a member of it).\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"available through the `net2` crate on crates.io\")]\n+    #[unstable(feature = \"udp_extras\", reason = \"available externally\")]\n     pub fn join_multicast(&self, multi: &IpAddr) -> io::Result<()> {\n         self.0.join_multicast(multi)\n     }\n \n     /// Leaves a multicast IP address (drops membership from it).\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"available through the `net2` crate on crates.io\")]\n+    #[unstable(feature = \"udp_extras\", reason = \"available externally\")]\n     pub fn leave_multicast(&self, multi: &IpAddr) -> io::Result<()> {\n         self.0.leave_multicast(multi)\n     }\n \n     /// Sets the multicast TTL.\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"available through the `net2` crate on crates.io\")]\n+    #[unstable(feature = \"udp_extras\", reason = \"available externally\")]\n     pub fn set_multicast_time_to_live(&self, ttl: i32) -> io::Result<()> {\n         self.0.multicast_time_to_live(ttl)\n     }\n \n     /// Sets this socket's TTL.\n+    #[deprecated(since = \"1.3.0\",\n+                 reason = \"available through the `net2` crate on crates.io\")]\n+    #[unstable(feature = \"udp_extras\", reason = \"available externally\")]\n     pub fn set_time_to_live(&self, ttl: i32) -> io::Result<()> {\n         self.0.time_to_live(ttl)\n     }"}]}