{"sha": "b27a161939620626ca5fdcb9f4dd486a6ed1e827", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyN2ExNjE5Mzk2MjA2MjZjYTVmZGNiOWY0ZGQ0ODZhNmVkMWU4Mjc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-02T16:10:26Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-08-07T12:48:20Z"}, "message": "Annotate functions in LLVM with target-cpu, same as Clang does.", "tree": {"sha": "97f674eed7b3467f1de86dfefc8838d9601d336d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97f674eed7b3467f1de86dfefc8838d9601d336d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b27a161939620626ca5fdcb9f4dd486a6ed1e827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b27a161939620626ca5fdcb9f4dd486a6ed1e827", "html_url": "https://github.com/rust-lang/rust/commit/b27a161939620626ca5fdcb9f4dd486a6ed1e827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b27a161939620626ca5fdcb9f4dd486a6ed1e827/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2969ed6c3c067659b5a160de08e9a57450b1047", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2969ed6c3c067659b5a160de08e9a57450b1047", "html_url": "https://github.com/rust-lang/rust/commit/f2969ed6c3c067659b5a160de08e9a57450b1047"}], "stats": {"total": 50, "additions": 50, "deletions": 0}, "files": [{"sha": "714e8914e48c53961adc6a2f2e356057a6416bbd", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b27a161939620626ca5fdcb9f4dd486a6ed1e827/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27a161939620626ca5fdcb9f4dd486a6ed1e827/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=b27a161939620626ca5fdcb9f4dd486a6ed1e827", "patch": "@@ -123,6 +123,15 @@ pub fn llvm_target_features(sess: &Session) -> impl Iterator<Item = &str> {\n         .filter(|l| !l.is_empty())\n }\n \n+pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n+    let target_cpu = CString::new(cx.tcx.sess.target_cpu().to_string()).unwrap();\n+    llvm::AddFunctionAttrStringValue(\n+            llfn,\n+            llvm::AttributePlace::Function,\n+            cstr(\"target-cpu\\0\"),\n+            target_cpu.as_c_str());\n+}\n+\n /// Composite function which sets LLVM attributes for function depending on its AST (#[attribute])\n /// attributes.\n pub fn from_fn_attrs(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value, id: DefId) {\n@@ -167,6 +176,15 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value, id: DefId) {\n         Some(true) | None => {}\n     }\n \n+    // Always annotate functions with the target-cpu they are compiled for.\n+    // Without this, ThinLTO won't inline Rust functions into Clang generated\n+    // functions (because Clang annotates functions this way too).\n+    // NOTE: For now we just apply this if -Zcross-lang-lto is specified, since\n+    //       it introduce a little overhead and isn't really necessary otherwise.\n+    if cx.tcx.sess.opts.debugging_opts.cross_lang_lto.enabled() {\n+        apply_target_cpu_attr(cx, llfn);\n+    }\n+\n     let features = llvm_target_features(cx.tcx.sess)\n         .map(|s| s.to_string())\n         .chain("}, {"sha": "13e8426155a952e184da95fa485ed9a116fd41be", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b27a161939620626ca5fdcb9f4dd486a6ed1e827/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27a161939620626ca5fdcb9f4dd486a6ed1e827/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=b27a161939620626ca5fdcb9f4dd486a6ed1e827", "patch": "@@ -596,6 +596,7 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n \n         // `main` should respect same config for frame pointer elimination as rest of code\n         attributes::set_frame_pointer_elimination(cx, llfn);\n+        attributes::apply_target_cpu_attr(cx, llfn);\n \n         let bx = Builder::new_block(cx, llfn, \"top\");\n "}, {"sha": "7a308bb6e882385e34390a843a61cf38629fc3f9", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b27a161939620626ca5fdcb9f4dd486a6ed1e827/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27a161939620626ca5fdcb9f4dd486a6ed1e827/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=b27a161939620626ca5fdcb9f4dd486a6ed1e827", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use attributes;\n use common;\n use llvm;\n use rustc::dep_graph::DepGraphSafe;\n@@ -381,6 +382,7 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n                 declare::declare_cfn(self, name, fty)\n             }\n         };\n+        attributes::apply_target_cpu_attr(self, llfn);\n         self.eh_personality.set(Some(llfn));\n         llfn\n     }\n@@ -412,6 +414,7 @@ impl<'b, 'tcx> CodegenCx<'b, 'tcx> {\n \n         let llfn = declare::declare_fn(self, \"rust_eh_unwind_resume\", ty);\n         attributes::unwind(llfn, true);\n+        attributes::apply_target_cpu_attr(self, llfn);\n         unwresume.set(Some(llfn));\n         llfn\n     }"}, {"sha": "c2765a46caae0ed4fb079bd61309d570f44c30fa", "filename": "src/test/codegen/target-cpu-on-functions.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b27a161939620626ca5fdcb9f4dd486a6ed1e827/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b27a161939620626ca5fdcb9f4dd486a6ed1e827/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs?ref=b27a161939620626ca5fdcb9f4dd486a6ed1e827", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test makes sure that functions get annotated with the proper\n+// \"target-cpu\" attribute in LLVM.\n+\n+// only-x86_64\n+// compile-flags: -C no-prepopulate-passes -C panic=abort\n+\n+#![crate_type = \"staticlib\"]\n+\n+// CHECK-LABEL: define {{.*}} @exported() {{.*}} #0\n+#[no_mangle]\n+pub extern fn exported() {\n+    not_exported();\n+}\n+\n+// CHECK-LABEL: define {{.*}} @_ZN23target_cpu_on_functions12not_exported{{.*}}() {{.*}} #0\n+fn not_exported() {}\n+\n+// CHECK: attributes #0 = {{.*}} \"target-cpu\"=\"x86-64\""}]}