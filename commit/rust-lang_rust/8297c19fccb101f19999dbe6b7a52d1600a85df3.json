{"sha": "8297c19fccb101f19999dbe6b7a52d1600a85df3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTdjMTlmY2NiMTAxZjE5OTk5ZGJlNmI3YTUyZDE2MDBhODVkZjM=", "commit": {"author": {"name": "Enrico Schmitz", "email": "enrico@schmitz.link", "date": "2017-03-31T21:36:45Z"}, "committer": {"name": "Enrico Schmitz", "email": "es@mdtm.de", "date": "2017-03-31T21:36:45Z"}, "message": "Fixing src/copies.rs and src/entries.rs by using ExprBlock(block) = then.node", "tree": {"sha": "a43aaefe9c200993cddba3e9022e35fabfb0b8b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a43aaefe9c200993cddba3e9022e35fabfb0b8b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8297c19fccb101f19999dbe6b7a52d1600a85df3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8297c19fccb101f19999dbe6b7a52d1600a85df3", "html_url": "https://github.com/rust-lang/rust/commit/8297c19fccb101f19999dbe6b7a52d1600a85df3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8297c19fccb101f19999dbe6b7a52d1600a85df3/comments", "author": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e", "html_url": "https://github.com/rust-lang/rust/commit/8f9fb97eb64a4a9fd14f246724e0b446dd1cef2e"}], "stats": {"total": 37, "additions": 23, "deletions": 14}, "files": [{"sha": "92d0445a4ce30213b3fd6761576e1e29b1753fa8", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8297c19fccb101f19999dbe6b7a52d1600a85df3/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8297c19fccb101f19999dbe6b7a52d1600a85df3/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=8297c19fccb101f19999dbe6b7a52d1600a85df3", "patch": "@@ -223,13 +223,15 @@ fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n /// `if a { c } else if b { d } else { e }`.\n fn if_sequence(mut expr: &Expr) -> (SmallVector<&Expr>, SmallVector<&Block>) {\n     let mut conds = SmallVector::new();\n-    let mut blocks = SmallVector::new();\n+    let mut blocks : SmallVector<&Block> = SmallVector::new();\n \n     while let ExprIf(ref cond, ref then_expr, ref else_expr) = expr.node {\n         conds.push(&**cond);\n-        //FIXME\n-        //blocks.push(&**then_expr);\n-        //FIXME\n+        if let ExprBlock(ref block) = then_expr.node {\n+            blocks.push(&block);\n+        } else {\n+            panic!(\"ExprIf node is not an ExprBlock\");\n+        }\n \n         if let Some(ref else_expr) = *else_expr {\n             expr = else_expr;\n@@ -241,9 +243,7 @@ fn if_sequence(mut expr: &Expr) -> (SmallVector<&Expr>, SmallVector<&Block>) {\n     // final `else {..}`\n     if !blocks.is_empty() {\n         if let ExprBlock(ref block) = expr.node {\n-            //FIXME\n-            //blocks.push(&**block);\n-            //FIXME\n+            blocks.push(&**block);\n         }\n     }\n \n@@ -315,10 +315,10 @@ fn search_same<T, Hash, Eq>(exprs: &[T], hash: Hash, eq: Eq) -> Option<(&T, &T)>\n         return None;\n     } else if exprs.len() == 2 {\n         return if eq(&exprs[0], &exprs[1]) {\n-            Some((&exprs[0], &exprs[1]))\n-        } else {\n-            None\n-        };\n+                   Some((&exprs[0], &exprs[1]))\n+               } else {\n+                   None\n+               };\n     }\n \n     let mut map: HashMap<_, Vec<&_>> = HashMap::with_capacity(exprs.len());"}, {"sha": "06e9268d22a183337e84fa8ada56e522c0b8ba2c", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8297c19fccb101f19999dbe6b7a52d1600a85df3/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8297c19fccb101f19999dbe6b7a52d1600a85df3/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=8297c19fccb101f19999dbe6b7a52d1600a85df3", "patch": "@@ -46,7 +46,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for HashMapLint {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {\n                     // in case of `if !m.contains_key(&k) { m.insert(k, v); }`\n                     // we can give a better error message\n-                    let sole_expr = else_block.is_none();\n+                    let sole_expr =  {\n+                        else_block.is_none() &&\n+                        if let ExprBlock(ref then_block) = then_block.node {\n+                            (then_block.expr.is_some() as usize) + then_block.stmts.len() == 1\n+                        }  else {\n+                            true\n+                        }\n+                    };\n \n                     let mut visitor = InsertVisitor {\n                         cx: cx,"}, {"sha": "fc858464fc484b673e1eb2a8607f390c6f85e7b6", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8297c19fccb101f19999dbe6b7a52d1600a85df3/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8297c19fccb101f19999dbe6b7a52d1600a85df3/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=8297c19fccb101f19999dbe6b7a52d1600a85df3", "patch": "@@ -69,7 +69,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                 let hir::StmtExpr(ref if_, _) = expr.node,\n                 let hir::ExprIf(ref cond, ref then, ref else_) = if_.node,\n                 !used_in_expr(cx, def_id, cond),\n-                !used_in_expr(cx, def_id, &**then),\n+                !used_in_expr(cx, def_id, &*then),\n+                let hir::ExprBlock(ref then) = then.node,\n+                let Some(value) = check_assign(cx, def_id, &*then),\n             ], {\n                 let span = Span { lo: stmt.span.lo, hi: if_.span.hi, ctxt: NO_EXPANSION };\n \n@@ -104,7 +106,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetIfSeq {\n                     mut=mutability,\n                     name=name.node,\n                     cond=snippet(cx, cond.span, \"_\"),\n-                    then={ \"\" },\n+                    then=if then.stmts.len() > 1 { \" ..;\" } else { \"\" },\n                     else=if default_multi_stmts { \" ..;\" } else { \"\" },\n                     value=snippet(cx, then.span, \"<value>\"),\n                     default=snippet(cx, default.span, \"<default>\"),"}]}