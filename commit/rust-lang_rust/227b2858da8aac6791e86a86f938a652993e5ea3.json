{"sha": "227b2858da8aac6791e86a86f938a652993e5ea3", "node_id": "C_kwDOAAsO6NoAKDIyN2IyODU4ZGE4YWFjNjc5MWU4NmE4NmY5MzhhNjUyOTkzZTVlYTM", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-02-02T13:26:28Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-02-02T15:18:16Z"}, "message": "Retry opening proc-macro DLLs a few times on Windows.", "tree": {"sha": "91a9e92f41a9f10f05855d232874ebb41d825239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a9e92f41a9f10f05855d232874ebb41d825239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/227b2858da8aac6791e86a86f938a652993e5ea3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/227b2858da8aac6791e86a86f938a652993e5ea3", "html_url": "https://github.com/rust-lang/rust/commit/227b2858da8aac6791e86a86f938a652993e5ea3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/227b2858da8aac6791e86a86f938a652993e5ea3/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9985cf172e7cb8ab5c58ce2818752c3572754fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9985cf172e7cb8ab5c58ce2818752c3572754fc", "html_url": "https://github.com/rust-lang/rust/commit/a9985cf172e7cb8ab5c58ce2818752c3572754fc"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "44d6c587da3dfce7a336daa6ce1a9828c0d03fff", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/227b2858da8aac6791e86a86f938a652993e5ea3/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/227b2858da8aac6791e86a86f938a652993e5ea3/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=227b2858da8aac6791e86a86f938a652993e5ea3", "patch": "@@ -33,6 +33,7 @@ use rustc_target::spec::{PanicStrategy, TargetTriple};\n use proc_macro::bridge::client::ProcMacro;\n use std::ops::Fn;\n use std::path::Path;\n+use std::time::Duration;\n use std::{cmp, env};\n \n #[derive(Clone)]\n@@ -689,8 +690,7 @@ impl<'a> CrateLoader<'a> {\n     ) -> Result<&'static [ProcMacro], CrateError> {\n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(path);\n-        let lib = unsafe { libloading::Library::new(path) }\n-            .map_err(|err| CrateError::DlOpen(err.to_string()))?;\n+        let lib = load_dylib(&path, 5).map_err(|err| CrateError::DlOpen(err))?;\n \n         let sym_name = self.sess.generate_proc_macro_decls_symbol(stable_crate_id);\n         let sym = unsafe { lib.get::<*const &[ProcMacro]>(sym_name.as_bytes()) }\n@@ -1093,3 +1093,41 @@ fn alloc_error_handler_spans(sess: &Session, krate: &ast::Crate) -> Vec<Span> {\n     visit::walk_crate(&mut f, krate);\n     f.spans\n }\n+\n+// On Windows the compiler would sometimes intermittently fail to open the\n+// proc-macro DLL with `Error::LoadLibraryExW`. It is suspected that something in the\n+// system still holds a lock on the file, so we retry a few times before calling it\n+// an error.\n+fn load_dylib(path: &Path, max_attempts: usize) -> Result<libloading::Library, String> {\n+    assert!(max_attempts > 0);\n+\n+    let mut last_error = None;\n+\n+    for attempt in 0..max_attempts {\n+        match unsafe { libloading::Library::new(&path) } {\n+            Ok(lib) => {\n+                if attempt > 0 {\n+                    debug!(\n+                        \"Loaded proc-macro `{}` after {} attempts.\",\n+                        path.display(),\n+                        attempt + 1\n+                    );\n+                }\n+                return Ok(lib);\n+            }\n+            Err(err) => {\n+                // Only try to recover from this specific error.\n+                if !matches!(err, libloading::Error::LoadLibraryExW { .. }) {\n+                    return Err(err.to_string());\n+                }\n+\n+                last_error = Some(err);\n+                std::thread::sleep(Duration::from_millis(100));\n+                debug!(\"Failed to load proc-macro `{}`. Retrying.\", path.display());\n+            }\n+        }\n+    }\n+\n+    debug!(\"Failed to load proc-macro `{}` even after {} attempts.\", path.display(), max_attempts);\n+    Err(format!(\"{} (retried {} times)\", last_error.unwrap(), max_attempts))\n+}"}]}