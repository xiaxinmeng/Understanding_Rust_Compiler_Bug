{"sha": "be023ebe850261c6bb202a02a686827d821c3697", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMDIzZWJlODUwMjYxYzZiYjIwMmEwMmE2ODY4MjdkODIxYzM2OTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-10T08:26:10Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-10T01:46:17Z"}, "message": "move config.rs to libsyntax_expand", "tree": {"sha": "4595cee969fbdb83ffc536ab940e15be2503e454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4595cee969fbdb83ffc536ab940e15be2503e454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be023ebe850261c6bb202a02a686827d821c3697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be023ebe850261c6bb202a02a686827d821c3697", "html_url": "https://github.com/rust-lang/rust/commit/be023ebe850261c6bb202a02a686827d821c3697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be023ebe850261c6bb202a02a686827d821c3697/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5011ec7fedffe34d943654ffb4308875fc5ec8f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5011ec7fedffe34d943654ffb4308875fc5ec8f3", "html_url": "https://github.com/rust-lang/rust/commit/5011ec7fedffe34d943654ffb4308875fc5ec8f3"}], "stats": {"total": 434, "additions": 259, "deletions": 175}, "files": [{"sha": "9d702e7d6bf14a5a2c52493f39e0fac291aa7885", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -27,7 +27,7 @@ use syntax::expand::allocator::AllocatorKind;\n use syntax::feature_gate::{self, AttributeType};\n use syntax::json::JsonEmitter;\n use syntax::source_map;\n-use syntax::sess::ParseSess;\n+use syntax::sess::{ParseSess, ProcessCfgMod};\n use syntax::symbol::Symbol;\n use syntax_pos::{MultiSpan, Span};\n use crate::util::profiling::{SelfProfiler, SelfProfilerRef};\n@@ -952,6 +952,7 @@ pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n     registry: errors::registry::Registry,\n+    process_cfg_mod: ProcessCfgMod,\n ) -> Session {\n     let file_path_mapping = sopts.file_path_mapping();\n \n@@ -962,6 +963,7 @@ pub fn build_session(\n         Lrc::new(source_map::SourceMap::new(file_path_mapping)),\n         DiagnosticOutput::Default,\n         Default::default(),\n+        process_cfg_mod,\n     )\n }\n \n@@ -1040,6 +1042,7 @@ pub fn build_session_with_source_map(\n     source_map: Lrc<source_map::SourceMap>,\n     diagnostics_output: DiagnosticOutput,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+    process_cfg_mod: ProcessCfgMod,\n ) -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n@@ -1080,7 +1083,14 @@ pub fn build_session_with_source_map(\n         },\n     );\n \n-    build_session_(sopts, local_crate_source_file, diagnostic_handler, source_map, lint_caps)\n+    build_session_(\n+        sopts,\n+        local_crate_source_file,\n+        diagnostic_handler,\n+        source_map,\n+        lint_caps,\n+        process_cfg_mod,\n+    )\n }\n \n fn build_session_(\n@@ -1089,6 +1099,7 @@ fn build_session_(\n     span_diagnostic: errors::Handler,\n     source_map: Lrc<source_map::SourceMap>,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n+    process_cfg_mod: ProcessCfgMod,\n ) -> Session {\n     let self_profiler =\n         if let SwitchWithOptPath::Enabled(ref d) = sopts.debugging_opts.self_profile {\n@@ -1127,6 +1138,7 @@ fn build_session_(\n     let parse_sess = ParseSess::with_span_handler(\n         span_diagnostic,\n         source_map,\n+        process_cfg_mod,\n     );\n     let sysroot = match &sopts.maybe_sysroot {\n         Some(sysroot) => sysroot.clone(),"}, {"sha": "61f30392e06420fb1dbd1657d68277bd4df52b5b", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -14,11 +14,12 @@ use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n-use syntax::{self, parse};\n use syntax::ast::{self, MetaItemKind};\n+use syntax::parse::new_parser_from_source_str;\n use syntax::token;\n use syntax::source_map::{FileName, FileLoader, SourceMap};\n use syntax::sess::ParseSess;\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::edition;\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n@@ -64,9 +65,9 @@ impl Compiler {\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n     syntax::with_default_globals(move || {\n         let cfg = cfgspecs.into_iter().map(|s| {\n-            let sess = ParseSess::with_silent_emitter();\n+            let sess = ParseSess::with_silent_emitter(process_configure_mod);\n             let filename = FileName::cfg_spec_source_code(&s);\n-            let mut parser = parse::new_parser_from_source_str(&sess, filename, s.to_string());\n+            let mut parser = new_parser_from_source_str(&sess, filename, s.to_string());\n \n             macro_rules! error {($reason: expr) => {\n                 early_error(ErrorOutputType::default(),"}, {"sha": "c874e94124df7c8ac38f5bb8ac05db9b1f724105", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -181,7 +181,7 @@ pub fn register_plugins<'a>(\n         )\n     });\n \n-    let (krate, features) = syntax::config::features(\n+    let (krate, features) = syntax_expand::config::features(\n         krate,\n         &sess.parse_sess,\n         sess.edition(),"}, {"sha": "8c1dac21576f7b9f2ffaf856161499af8fdaeb3e", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 24, "deletions": 35, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -8,7 +8,7 @@ use rustc::session::config::{build_configuration, build_session_options, to_crat\n use rustc::session::config::{LtoCli, LinkerPluginLto, SwitchWithOptPath, ExternEntry};\n use rustc::session::config::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n use rustc::session::config::{rustc_optgroups, Options, ErrorOutputType, Passes};\n-use rustc::session::build_session;\n+use rustc::session::{build_session, Session};\n use rustc::session::search_paths::SearchPath;\n use std::collections::{BTreeMap, BTreeSet};\n use std::iter::FromIterator;\n@@ -17,16 +17,23 @@ use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};\n use syntax::symbol::sym;\n use syntax::edition::{Edition, DEFAULT_EDITION};\n use syntax;\n+use syntax_expand::config::process_configure_mod;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{ColorConfig, emitter::HumanReadableErrorType, registry};\n \n-pub fn build_session_options_and_crate_config(\n-    matches: &getopts::Matches,\n-) -> (Options, FxHashSet<(String, Option<String>)>) {\n-    (\n-        build_session_options(matches),\n-        parse_cfgspecs(matches.opt_strs(\"cfg\")),\n-    )\n+type CfgSpecs = FxHashSet<(String, Option<String>)>;\n+\n+fn build_session_options_and_crate_config(matches: getopts::Matches) -> (Options, CfgSpecs) {\n+    let sessopts = build_session_options(&matches);\n+    let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n+    (sessopts, cfg)\n+}\n+\n+fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n+    let registry = registry::Registry::new(&[]);\n+    let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n+    let sess = build_session(sessopts, None, registry, process_configure_mod);\n+    (sess, cfg)\n }\n \n fn new_public_extern_entry<S, I>(locations: I) -> ExternEntry\n@@ -59,31 +66,19 @@ fn mk_map<K: Ord, V>(entries: Vec<(K, V)>) -> BTreeMap<K, V> {\n #[test]\n fn test_switch_implies_cfg_test() {\n     syntax::with_default_globals(|| {\n-        let matches = &match optgroups().parse(&[\"--test\".to_string()]) {\n-            Ok(m) => m,\n-            Err(f) => panic!(\"test_switch_implies_cfg_test: {}\", f),\n-        };\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let matches = optgroups().parse(&[\"--test\".to_string()]).unwrap();\n+        let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n         assert!(cfg.contains(&(sym::test, None)));\n     });\n }\n \n-// When the user supplies --test and --cfg test, don't implicitly add\n-// another --cfg test\n+// When the user supplies --test and --cfg test, don't implicitly add another --cfg test\n #[test]\n fn test_switch_implies_cfg_test_unless_cfg_test() {\n     syntax::with_default_globals(|| {\n-        let matches = &match optgroups().parse(&[\"--test\".to_string(),\n-                                                 \"--cfg=test\".to_string()]) {\n-            Ok(m) => m,\n-            Err(f) => panic!(\"test_switch_implies_cfg_test_unless_cfg_test: {}\", f),\n-        };\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let matches = optgroups().parse(&[\"--test\".to_string(), \"--cfg=test\".to_string()]).unwrap();\n+        let (sess, cfg) = mk_session(matches);\n         let cfg = build_configuration(&sess, to_crate_config(cfg));\n         let mut test_items = cfg.iter().filter(|&&(name, _)| name == sym::test);\n         assert!(test_items.next().is_some());\n@@ -95,27 +90,21 @@ fn test_switch_implies_cfg_test_unless_cfg_test() {\n fn test_can_print_warnings() {\n     syntax::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"-Awarnings\".to_string()]).unwrap();\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let (sess, _) = mk_session(matches);\n         assert!(!sess.diagnostic().can_emit_warnings());\n     });\n \n     syntax::with_default_globals(|| {\n         let matches = optgroups()\n             .parse(&[\"-Awarnings\".to_string(), \"-Dwarnings\".to_string()])\n             .unwrap();\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());\n     });\n \n     syntax::with_default_globals(|| {\n         let matches = optgroups().parse(&[\"-Adead_code\".to_string()]).unwrap();\n-        let registry = registry::Registry::new(&[]);\n-        let (sessopts, _) = build_session_options_and_crate_config(&matches);\n-        let sess = build_session(sessopts, None, registry);\n+        let (sess, _) = mk_session(matches);\n         assert!(sess.diagnostic().can_emit_warnings());\n     });\n }\n@@ -704,6 +693,6 @@ fn test_edition_parsing() {\n     let matches = optgroups()\n         .parse(&[\"--edition=2018\".to_string()])\n         .unwrap();\n-    let (sessopts, _) = build_session_options_and_crate_config(&matches);\n+    let (sessopts, _) = build_session_options_and_crate_config(matches);\n     assert!(sessopts.edition == Edition::Edition2018)\n }"}, {"sha": "c02e5b9ae28e96c72bd65d2f62d3e4bab9adc485", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -36,6 +36,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::source_map::{FileLoader, RealFileLoader, SourceMap};\n use syntax::symbol::{Symbol, sym};\n use syntax::{self, ast, attr};\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::edition::Edition;\n #[cfg(not(parallel_compiler))]\n use std::{thread, panic};\n@@ -103,6 +104,7 @@ pub fn create_session(\n         source_map.clone(),\n         diagnostic_output,\n         lint_caps,\n+        process_configure_mod,\n     );\n \n     let codegen_backend = get_codegen_backend(&sess);"}, {"sha": "71a44c0ebdba1858e0ded455800b11ccda1371e9", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -16,6 +16,7 @@ use syntax::parse::lexer;\n use syntax::token::{self, Token};\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym};\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::{Span, FileName};\n \n /// Highlights `src`, returning the HTML output.\n@@ -33,7 +34,7 @@ pub fn render_with_highlighting(\n                class, tooltip).unwrap();\n     }\n \n-    let sess = ParseSess::with_silent_emitter();\n+    let sess = ParseSess::with_silent_emitter(process_configure_mod);\n     let fm = sess.source_map().new_source_file(\n         FileName::Custom(String::from(\"rustdoc-highlighting\")),\n         src.to_owned(),"}, {"sha": "405f3a70e0e9f7dac8572215ae723cb7d38b00d0", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -3,6 +3,7 @@ use syntax::parse::lexer::{StringReader as Lexer};\n use syntax::token;\n use syntax::sess::ParseSess;\n use syntax::source_map::FilePathMapping;\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::{InnerSpan, FileName};\n \n use crate::clean;\n@@ -27,7 +28,7 @@ struct SyntaxChecker<'a, 'tcx> {\n \n impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n     fn check_rust_syntax(&self, item: &clean::Item, dox: &str, code_block: RustCodeBlock) {\n-        let sess = ParseSess::new(FilePathMapping::empty());\n+        let sess = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n         let source_file = sess.source_map().new_source_file(\n             FileName::Custom(String::from(\"doctest\")),\n             dox[code_block.code].to_owned(),"}, {"sha": "e4cf1bb0bb95c20c1762bf7c0af15d9c8a0b3629", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -17,6 +17,7 @@ use std::path::PathBuf;\n use std::process::{self, Command, Stdio};\n use std::str;\n use syntax::symbol::sym;\n+use syntax_expand::config::process_configure_mod;\n use syntax_pos::{BytePos, DUMMY_SP, Pos, Span, FileName};\n use tempfile::Builder as TempFileBuilder;\n use testing;\n@@ -411,7 +412,7 @@ pub fn make_test(s: &str,\n         let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n         // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n         let handler = Handler::with_emitter(false, None, box emitter);\n-        let sess = ParseSess::with_span_handler(handler, cm);\n+        let sess = ParseSess::with_span_handler(handler, cm, process_configure_mod);\n \n         let mut found_main = false;\n         let mut found_extern_crate = cratename.is_none();"}, {"sha": "d458549e2985441d2e9fcb0fe09012c64fd687af", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -363,8 +363,12 @@ crate fn mk_attr_id() -> AttrId {\n }\n \n pub fn mk_attr(style: AttrStyle, path: Path, tokens: TokenStream, span: Span) -> Attribute {\n+    mk_attr_from_item(style, AttrItem { path, tokens }, span)\n+}\n+\n+pub fn mk_attr_from_item(style: AttrStyle, item: AttrItem, span: Span) -> Attribute {\n     Attribute {\n-        kind: AttrKind::Normal(AttrItem { path, tokens }),\n+        kind: AttrKind::Normal(item),\n         id: mk_attr_id(),\n         style,\n         span,"}, {"sha": "1edefd5bc4bd84f03fef234a385bb5d6741b2082", "filename": "src/libsyntax/json/tests.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fjson%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fjson%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson%2Ftests.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -2,7 +2,6 @@ use super::*;\n \n use crate::json::JsonEmitter;\n use crate::source_map::{FilePathMapping, SourceMap};\n-use crate::tests::Shared;\n use crate::with_default_globals;\n \n use errors::emitter::{ColorConfig, HumanReadableErrorType};\n@@ -27,6 +26,20 @@ struct SpanTestData {\n     pub column_end: u32,\n }\n \n+struct Shared<T> {\n+    data: Arc<Mutex<T>>,\n+}\n+\n+impl<T: Write> Write for Shared<T> {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        self.data.lock().unwrap().write(buf)\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        self.data.lock().unwrap().flush()\n+    }\n+}\n+\n /// Test the span yields correct positions in JSON.\n fn test_positions(code: &str, span: (u32, u32), expected_output: SpanTestData) {\n     let expected_output = TestData { spans: vec![expected_output] };"}, {"sha": "7fecc87a18f51fe64bfdecf900ea197be3cf81b5", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -26,9 +26,6 @@ pub use rustc_data_structures::thin_vec::ThinVec;\n use ast::AttrId;\n use syntax_pos::edition::Edition;\n \n-#[cfg(test)]\n-mod tests;\n-\n pub const MACRO_ARGUMENTS: Option<&'static str> = Some(\"macro arguments\");\n \n #[macro_export]\n@@ -100,7 +97,6 @@ pub mod ast;\n pub mod attr;\n pub mod expand;\n pub mod source_map;\n-#[macro_use] pub mod config;\n pub mod entry;\n pub mod feature_gate;\n pub mod mut_visit;"}, {"sha": "376323a83eacc03c959522262ce9ef3619cc4297", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -22,9 +22,6 @@ use rustc_data_structures::sync::Lrc;\n use std::ops::DerefMut;\n use std::{panic, process, ptr};\n \n-#[cfg(test)]\n-mod tests;\n-\n pub trait ExpectOne<A: Array> {\n     fn expect_one(self, err: &'static str) -> A::Item;\n }"}, {"sha": "f2d5ff3440e44b0a3d551a24d090bb0098880797", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -13,9 +13,6 @@ use std::convert::TryInto;\n use rustc_data_structures::sync::Lrc;\n use log::debug;\n \n-#[cfg(test)]\n-mod tests;\n-\n mod tokentrees;\n mod unicode_chars;\n mod unescape_error_reporting;\n@@ -35,7 +32,8 @@ pub struct StringReader<'a> {\n     /// Initial position, read-only.\n     start_pos: BytePos,\n     /// The absolute offset within the source_map of the current character.\n-    pos: BytePos,\n+    // FIXME(#64197): `pub` is needed by tests for now.\n+    pub pos: BytePos,\n     /// Stop reading src at this index.\n     end_src_index: usize,\n     /// Source text to tokenize."}, {"sha": "af3f8ecb45a885d0a9cea402f956e1fd3baa247c", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -17,8 +17,7 @@ use std::str;\n \n use log::info;\n \n-#[cfg(test)]\n-mod tests;\n+pub const MACRO_ARGUMENTS: Option<&'static str> = Some(\"macro arguments\");\n \n #[macro_use]\n pub mod parser;"}, {"sha": "0f9e573af82a18f22c90130bfd6f40f5a6f3ce1c", "filename": "src/libsyntax/parse/parser/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -268,7 +268,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `cfg_attr(pred, attr_item_list)` where `attr_item_list` is comma-delimited.\n-    crate fn parse_cfg_attr(&mut self) -> PResult<'a, (ast::MetaItem, Vec<(ast::AttrItem, Span)>)> {\n+    pub fn parse_cfg_attr(&mut self) -> PResult<'a, (ast::MetaItem, Vec<(ast::AttrItem, Span)>)> {\n         self.expect(&token::OpenDelim(token::Paren))?;\n \n         let cfg_predicate = self.parse_meta_item()?;"}, {"sha": "ad72b3a1dea7f13454cee371ca7c86c9be046b41", "filename": "src/libsyntax/parse/parser/module.rs", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fmodule.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -7,8 +7,8 @@ use crate::ast::{self, Ident, Attribute, ItemKind, Mod, Crate};\n use crate::parse::{new_sub_parser_from_file, DirectoryOwnership};\n use crate::token::{self, TokenKind};\n use crate::source_map::{SourceMap, Span, DUMMY_SP, FileName};\n-use crate::symbol::sym;\n \n+use syntax_pos::symbol::sym;\n use errors::PResult;\n \n use std::path::{self, Path, PathBuf};\n@@ -39,17 +39,12 @@ impl<'a> Parser<'a> {\n \n     /// Parses a `mod <foo> { ... }` or `mod <foo>;` item.\n     pub(super) fn parse_item_mod(&mut self, outer_attrs: &[Attribute]) -> PResult<'a, ItemInfo> {\n-        let (in_cfg, outer_attrs) = {\n-            // FIXME(Centril): This results in a cycle between config and parsing.\n-            // Consider using dynamic dispatch via `self.sess` to disentangle the knot.\n-            let mut strip_unconfigured = crate::config::StripUnconfigured {\n-                sess: self.sess,\n-                features: None, // Don't perform gated feature checking.\n-            };\n-            let mut outer_attrs = outer_attrs.to_owned();\n-            strip_unconfigured.process_cfg_attrs(&mut outer_attrs);\n-            (!self.cfg_mods || strip_unconfigured.in_cfg(&outer_attrs), outer_attrs)\n-        };\n+        // HACK(Centril): See documentation on `ParseSess::process_cfg_mod`.\n+        let (in_cfg, outer_attrs) = (self.sess.process_cfg_mod)(\n+            self.sess,\n+            self.cfg_mods,\n+            outer_attrs,\n+        );\n \n         let id_span = self.token.span;\n         let id = self.parse_ident()?;"}, {"sha": "04f096200b86919897e732799e92d2a5f584b492", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -939,8 +939,11 @@ impl<'a> State<'a> {\n         self.commasep_cmnt(b, exprs, |s, e| s.print_expr(e), |e| e.span)\n     }\n \n-    crate fn print_mod(&mut self, _mod: &ast::Mod,\n-                       attrs: &[ast::Attribute]) {\n+    pub fn print_mod(\n+        &mut self,\n+        _mod: &ast::Mod,\n+        attrs: &[ast::Attribute],\n+    ) {\n         self.print_inner_attributes(attrs);\n         for item in &_mod.items {\n             self.print_item(item);"}, {"sha": "5e96b27c970a280f8fc0194be592c2fb867c5517", "filename": "src/libsyntax/sess.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fsess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Fsess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsess.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -1,7 +1,7 @@\n //! Contains `ParseSess` which holds state living beyond what one `Parser` might.\n //! It also serves as an input to the parser itself.\n \n-use crate::ast::{CrateConfig, NodeId};\n+use crate::ast::{CrateConfig, NodeId, Attribute};\n use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n use crate::source_map::{SourceMap, FilePathMapping};\n use crate::feature_gate::UnstableFeatures;\n@@ -89,23 +89,40 @@ pub struct ParseSess {\n     pub gated_spans: GatedSpans,\n     /// The parser has reached `Eof` due to an unclosed brace. Used to silence unnecessary errors.\n     pub reached_eof: Lock<bool>,\n+    /// Process the potential `cfg` attributes on a module.\n+    /// Also determine if the module should be included in this configuration.\n+    ///\n+    /// HACK(Centril): This is used to break a cyclic dependency between\n+    /// the parser and cfg-stripping as defined in `syntax_expand::config`.\n+    /// The dependency edge from the parser comes from `parse_item_mod`.\n+    /// A principled solution to this hack would be to implement [#64197].\n+    ///\n+    /// [#64197]: https://github.com/rust-lang/rust/issues/64197\n+    pub process_cfg_mod: ProcessCfgMod,\n }\n \n+pub type ProcessCfgMod = fn(&ParseSess, bool, &[Attribute]) -> (bool, Vec<Attribute>);\n+\n impl ParseSess {\n-    pub fn new(file_path_mapping: FilePathMapping) -> Self {\n+    pub fn new(file_path_mapping: FilePathMapping, process_cfg_mod: ProcessCfgMod) -> Self {\n         let cm = Lrc::new(SourceMap::new(file_path_mapping));\n         let handler = Handler::with_tty_emitter(\n             ColorConfig::Auto,\n             true,\n             None,\n             Some(cm.clone()),\n         );\n-        ParseSess::with_span_handler(handler, cm)\n+        ParseSess::with_span_handler(handler, cm, process_cfg_mod)\n     }\n \n-    pub fn with_span_handler(handler: Handler, source_map: Lrc<SourceMap>) -> Self {\n+    pub fn with_span_handler(\n+        handler: Handler,\n+        source_map: Lrc<SourceMap>,\n+        process_cfg_mod: ProcessCfgMod,\n+    ) -> Self {\n         Self {\n             span_diagnostic: handler,\n+            process_cfg_mod,\n             unstable_features: UnstableFeatures::from_environment(),\n             config: FxHashSet::default(),\n             edition: ExpnId::root().expn_data().edition,\n@@ -121,10 +138,10 @@ impl ParseSess {\n         }\n     }\n \n-    pub fn with_silent_emitter() -> Self {\n+    pub fn with_silent_emitter(process_cfg_mod: ProcessCfgMod) -> Self {\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n         let handler = Handler::with_emitter(false, None, Box::new(SilentEmitter));\n-        ParseSess::with_span_handler(handler, cm)\n+        ParseSess::with_span_handler(handler, cm, process_cfg_mod)\n     }\n \n     #[inline]"}, {"sha": "4d08d0974c133a3965139b0d435ab8431ac6f0ba", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -23,9 +23,6 @@ use smallvec::{SmallVec, smallvec};\n \n use std::{iter, mem};\n \n-#[cfg(test)]\n-mod tests;\n-\n /// When the main rust parser encounters a syntax-extension invocation, it\n /// parses the arguments to the invocation as a token-tree. This is a very\n /// loose structure, such that all sorts of different AST-fragments can\n@@ -218,7 +215,7 @@ impl TokenStream {\n         self.0.len()\n     }\n \n-    pub(crate) fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {\n+    pub fn from_streams(mut streams: SmallVec<[TokenStream; 2]>) -> TokenStream {\n         match streams.len() {\n             0 => TokenStream::default(),\n             1 => streams.pop().unwrap(),"}, {"sha": "ef9226a8879d5a00a7ca591809b15e8a4cdd1433", "filename": "src/libsyntax/util/comments.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Futil%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax%2Futil%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fcomments.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -47,7 +47,8 @@ crate fn is_block_doc_comment(s: &str) -> bool {\n     res\n }\n \n-crate fn is_doc_comment(s: &str) -> bool {\n+// FIXME(#64197): Try to privatize this again.\n+pub fn is_doc_comment(s: &str) -> bool {\n     (s.starts_with(\"///\") && is_line_doc_comment(s)) || s.starts_with(\"//!\") ||\n     (s.starts_with(\"/**\") && is_block_doc_comment(s)) || s.starts_with(\"/*!\")\n }"}, {"sha": "9acb99489260fcaa0e52a14255339a8bf9ea36bc", "filename": "src/libsyntax_expand/config.rs", "status": "renamed", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fconfig.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -1,20 +1,20 @@\n-use crate::attr::HasAttrs;\n-use crate::feature_gate::{\n+use syntax::attr::HasAttrs;\n+use syntax::feature_gate::{\n     feature_err,\n     EXPLAIN_STMT_ATTR_SYNTAX,\n     Features,\n     get_features,\n     GateIssue,\n };\n-use crate::attr;\n-use crate::ast;\n-use crate::edition::Edition;\n-use crate::mut_visit::*;\n-use crate::parse::{self, validate_attr};\n-use crate::ptr::P;\n-use crate::sess::ParseSess;\n-use crate::symbol::sym;\n-use crate::util::map_in_place::MapInPlace;\n+use syntax::attr;\n+use syntax::ast;\n+use syntax::edition::Edition;\n+use syntax::mut_visit::*;\n+use syntax::parse::{self, validate_attr};\n+use syntax::ptr::P;\n+use syntax::sess::ParseSess;\n+use syntax::symbol::sym;\n+use syntax::util::map_in_place::MapInPlace;\n \n use errors::Applicability;\n use smallvec::SmallVec;\n@@ -135,20 +135,19 @@ impl<'a> StripUnconfigured<'a> {\n             // `cfg_attr` inside of another `cfg_attr`. E.g.\n             //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n             expanded_attrs.into_iter()\n-            .flat_map(|(item, span)| self.process_cfg_attr(ast::Attribute {\n-                kind: ast::AttrKind::Normal(item),\n-                id: attr::mk_attr_id(),\n-                style: attr.style,\n+            .flat_map(|(item, span)| self.process_cfg_attr(attr::mk_attr_from_item(\n+                attr.style,\n+                item,\n                 span,\n-            }))\n+            )))\n             .collect()\n         } else {\n             vec![]\n         }\n     }\n \n     /// Determines if a node with the given attributes should be included in this configuration.\n-    pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n+    pub fn in_cfg(&self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             if !is_cfg(attr) {\n                 return true;\n@@ -350,3 +349,17 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n fn is_cfg(attr: &ast::Attribute) -> bool {\n     attr.check_name(sym::cfg)\n }\n+\n+/// Process the potential `cfg` attributes on a module.\n+/// Also determine if the module should be included in this configuration.\n+pub fn process_configure_mod(\n+    sess: &ParseSess,\n+    cfg_mods: bool,\n+    attrs: &[ast::Attribute],\n+) -> (bool, Vec<ast::Attribute>) {\n+    // Don't perform gated feature checking.\n+    let mut strip_unconfigured = StripUnconfigured { sess, features: None };\n+    let mut attrs = attrs.to_owned();\n+    strip_unconfigured.process_cfg_attrs(&mut attrs);\n+    (!cfg_mods || strip_unconfigured.in_cfg(&attrs), attrs)\n+}", "previous_filename": "src/libsyntax/config.rs"}, {"sha": "1e6c23087d8d17fd6d52cf598d8c5f57d40112ab", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -3,13 +3,13 @@ use crate::proc_macro::{collect_derives, MarkAttrs};\n use crate::hygiene::{ExpnId, SyntaxContext, ExpnData, ExpnKind};\n use crate::mbe::macro_rules::annotate_err_with_kind;\n use crate::placeholders::{placeholder, PlaceholderExpander};\n+use crate::config::StripUnconfigured;\n+use crate::configure;\n \n use syntax::ast::{self, AttrItem, Block, Ident, LitKind, NodeId, PatKind, Path};\n use syntax::ast::{MacStmtStyle, StmtKind, ItemKind};\n use syntax::attr::{self, HasAttrs};\n use syntax::source_map::respan;\n-use syntax::configure;\n-use syntax::config::StripUnconfigured;\n use syntax::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use syntax::mut_visit::*;\n use syntax::parse::DirectoryOwnership;"}, {"sha": "46d59dd249c3197b9198ddca30222b345faa3405", "filename": "src/libsyntax_expand/lib.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Flib.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -33,6 +33,35 @@ pub use mbe::macro_rules::compile_declarative_macro;\n pub mod base;\n pub mod build;\n pub mod expand;\n+#[macro_use] pub mod config;\n pub mod proc_macro;\n \n crate mod mbe;\n+\n+// HACK(Centril, #64197): These shouldn't really be here.\n+// Rather, they should be with their respective modules which are defined in other crates.\n+// However, since for now constructing a `ParseSess` sorta requires `config` from this crate,\n+// these tests will need to live here in the iterim.\n+\n+#[cfg(test)]\n+mod tests;\n+#[cfg(test)]\n+mod parse {\n+    #[cfg(test)]\n+    mod tests;\n+    #[cfg(test)]\n+    mod lexer {\n+        #[cfg(test)]\n+        mod tests;\n+    }\n+}\n+#[cfg(test)]\n+mod tokenstream {\n+    #[cfg(test)]\n+    mod tests;\n+}\n+#[cfg(test)]\n+mod mut_visit {\n+    #[cfg(test)]\n+    mod tests;\n+}"}, {"sha": "30e812a11791e365eb0f230ed81de1a0b6c2dd7f", "filename": "src/libsyntax_expand/mut_visit/tests.rs", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmut_visit%2Ftests.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -1,10 +1,9 @@\n-use super::*;\n-\n-use crate::ast::{self, Ident};\n use crate::tests::{string_to_crate, matches_codepattern};\n-use crate::print::pprust;\n-use crate::mut_visit;\n-use crate::with_default_globals;\n+\n+use syntax::ast::{self, Ident};\n+use syntax::print::pprust;\n+use syntax::mut_visit::{self, MutVisitor};\n+use syntax::with_default_globals;\n \n // This version doesn't care about getting comments or doc-strings in.\n fn fake_print_crate(s: &mut pprust::State<'_>,", "previous_filename": "src/libsyntax/mut_visit/tests.rs"}, {"sha": "3d5726fa6010e9457da44255a88afd1f9cbb56c6", "filename": "src/libsyntax_expand/parse/lexer/tests.rs", "status": "renamed", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fparse%2Flexer%2Ftests.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -1,10 +1,13 @@\n-use super::*;\n+use crate::config::process_configure_mod;\n \n-use crate::symbol::Symbol;\n-use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::token;\n-use crate::util::comments::is_doc_comment;\n-use crate::with_default_globals;\n+use rustc_data_structures::sync::Lrc;\n+use syntax::token::{self, Token, TokenKind};\n+use syntax::sess::ParseSess;\n+use syntax::source_map::{SourceMap, FilePathMapping};\n+use syntax::util::comments::is_doc_comment;\n+use syntax::with_default_globals;\n+use syntax::parse::lexer::StringReader;\n+use syntax_pos::symbol::Symbol;\n \n use errors::{Handler, emitter::EmitterWriter};\n use std::io;\n@@ -21,7 +24,11 @@ fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n         None,\n         false,\n     );\n-    ParseSess::with_span_handler(Handler::with_emitter(true, None, Box::new(emitter)), sm)\n+    ParseSess::with_span_handler(\n+        Handler::with_emitter(true, None, Box::new(emitter)),\n+        sm,\n+        process_configure_mod,\n+    )\n }\n \n // Creates a string reader for the given string.", "previous_filename": "src/libsyntax/parse/lexer/tests.rs"}, {"sha": "01739809f7f9eb8f1c64ed0cff18a72823497e98", "filename": "src/libsyntax_expand/parse/tests.rs", "status": "renamed", "additions": 28, "deletions": 29, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Fparse%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fparse%2Ftests.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -1,21 +1,27 @@\n-use super::*;\n-\n-use crate::ast::{self, Name, PatKind};\n-use crate::attr::first_attr_value_str_by_name;\n-use crate::sess::ParseSess;\n-use crate::parse::{PResult, new_parser_from_source_str};\n-use crate::token::Token;\n-use crate::print::pprust::item_to_string;\n-use crate::ptr::P;\n-use crate::source_map::FilePathMapping;\n-use crate::symbol::{kw, sym};\n+use crate::config::process_configure_mod;\n use crate::tests::{matches_codepattern, string_to_stream, with_error_checking_parse};\n-use crate::tokenstream::{DelimSpan, TokenTree, TokenStream};\n-use crate::with_default_globals;\n-use syntax_pos::{Span, BytePos, Pos};\n+\n+use syntax::ast::{self, Name, PatKind};\n+use syntax::attr::first_attr_value_str_by_name;\n+use syntax::sess::ParseSess;\n+use syntax::token::{self, Token};\n+use syntax::print::pprust::item_to_string;\n+use syntax::ptr::P;\n+use syntax::source_map::FilePathMapping;\n+use syntax::symbol::{kw, sym};\n+use syntax::tokenstream::{DelimSpan, TokenTree, TokenStream};\n+use syntax::visit;\n+use syntax::with_default_globals;\n+use syntax::parse::new_parser_from_source_str;\n+use syntax_pos::{Span, BytePos, Pos, FileName};\n+use errors::PResult;\n \n use std::path::PathBuf;\n \n+fn sess() -> ParseSess {\n+    ParseSess::new(FilePathMapping::empty(), process_configure_mod)\n+}\n+\n /// Parses an item.\n ///\n /// Returns `Ok(Some(item))` when successful, `Ok(None)` when no item was found, and `Err`\n@@ -32,18 +38,12 @@ fn sp(a: u32, b: u32) -> Span {\n \n /// Parses a string, return an expression.\n fn string_to_expr(source_str : String) -> P<ast::Expr> {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n-    with_error_checking_parse(source_str, &ps, |p| {\n-        p.parse_expr()\n-    })\n+    with_error_checking_parse(source_str, &sess(), |p| p.parse_expr())\n }\n \n /// Parses a string, returns an item.\n fn string_to_item(source_str : String) -> Option<P<ast::Item>> {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n-    with_error_checking_parse(source_str, &ps, |p| {\n-        p.parse_item()\n-    })\n+    with_error_checking_parse(source_str, &sess(), |p| p.parse_item())\n }\n \n #[should_panic]\n@@ -169,20 +169,20 @@ fn get_spans_of_pat_idents(src: &str) -> Vec<Span> {\n     struct PatIdentVisitor {\n         spans: Vec<Span>\n     }\n-    impl<'a> crate::visit::Visitor<'a> for PatIdentVisitor {\n+    impl<'a> visit::Visitor<'a> for PatIdentVisitor {\n         fn visit_pat(&mut self, p: &'a ast::Pat) {\n             match p.kind {\n                 PatKind::Ident(_ , ref ident, _) => {\n                     self.spans.push(ident.span.clone());\n                 }\n                 _ => {\n-                    crate::visit::walk_pat(self, p);\n+                    visit::walk_pat(self, p);\n                 }\n             }\n         }\n     }\n     let mut v = PatIdentVisitor { spans: Vec::new() };\n-    crate::visit::walk_item(&mut v, &item);\n+    visit::walk_item(&mut v, &item);\n     return v.spans;\n }\n \n@@ -233,7 +233,7 @@ let mut fflags: c_int = wb();\n \n #[test] fn crlf_doc_comments() {\n     with_default_globals(|| {\n-        let sess = ParseSess::new(FilePathMapping::empty());\n+        let sess = sess();\n \n         let name_1 = FileName::Custom(\"crlf_source_1\".to_string());\n         let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n@@ -268,7 +268,7 @@ fn ttdelim_span() {\n     }\n \n     with_default_globals(|| {\n-        let sess = ParseSess::new(FilePathMapping::empty());\n+        let sess = sess();\n         let expr = parse_expr_from_source_str(PathBuf::from(\"foo\").into(),\n             \"foo!( fn main() { body } )\".to_string(), &sess).unwrap();\n \n@@ -292,11 +292,10 @@ fn ttdelim_span() {\n #[test]\n fn out_of_line_mod() {\n     with_default_globals(|| {\n-        let sess = ParseSess::new(FilePathMapping::empty());\n         let item = parse_item_from_source_str(\n             PathBuf::from(\"foo\").into(),\n             \"mod foo { struct S; mod this_does_not_exist; }\".to_owned(),\n-            &sess,\n+            &sess(),\n         ).unwrap().unwrap();\n \n         if let ast::ItemKind::Mod(ref m) = item.kind {", "previous_filename": "src/libsyntax/parse/tests.rs"}, {"sha": "461d9a4395484c67024f5df4d5390f74d9779949", "filename": "src/libsyntax_expand/tests.rs", "status": "renamed", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Ftests.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -1,16 +1,15 @@\n-use crate::ast;\n-use crate::parse::source_file_to_stream;\n-use crate::parse::new_parser_from_source_str;\n-use crate::parse::parser::Parser;\n-use crate::sess::ParseSess;\n-use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::tokenstream::TokenStream;\n-use crate::with_default_globals;\n+use crate::config::process_configure_mod;\n+use syntax::ast;\n+use syntax::tokenstream::TokenStream;\n+use syntax::sess::ParseSess;\n+use syntax::source_map::{SourceMap, FilePathMapping};\n+use syntax::with_default_globals;\n+use syntax::parse::{source_file_to_stream, new_parser_from_source_str, parser::Parser};\n+use syntax_pos::{BytePos, Span, MultiSpan};\n \n use errors::emitter::EmitterWriter;\n use errors::{PResult, Handler};\n use rustc_data_structures::sync::Lrc;\n-use syntax_pos::{BytePos, Span, MultiSpan};\n \n use std::io;\n use std::io::prelude::*;\n@@ -35,7 +34,7 @@ crate fn with_error_checking_parse<'a, T, F>(s: String, ps: &'a ParseSess, f: F)\n \n /// Maps a string to tts, using a made-up filename.\n crate fn string_to_stream(source_str: String) -> TokenStream {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n     source_file_to_stream(\n         &ps,\n         ps.source_map().new_source_file(PathBuf::from(\"bogofile\").into(),\n@@ -45,7 +44,7 @@ crate fn string_to_stream(source_str: String) -> TokenStream {\n \n /// Parses a string, returns a crate.\n crate fn string_to_crate(source_str : String) -> ast::Crate {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n     with_error_checking_parse(source_str, &ps, |p| {\n         p.parse_crate_mod()\n     })", "previous_filename": "src/libsyntax/tests.rs"}, {"sha": "cf9fead638e85d0363dba21938552f6818b371cd", "filename": "src/libsyntax_expand/tokenstream/tests.rs", "status": "renamed", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Ftokenstream%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Flibsyntax_expand%2Ftokenstream%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Ftokenstream%2Ftests.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -1,9 +1,11 @@\n-use super::*;\n-\n-use crate::ast::Name;\n-use crate::with_default_globals;\n use crate::tests::string_to_stream;\n+\n+use syntax::ast::Name;\n+use syntax::token;\n+use syntax::tokenstream::{TokenStream, TokenStreamBuilder, TokenTree};\n+use syntax::with_default_globals;\n use syntax_pos::{Span, BytePos};\n+use smallvec::smallvec;\n \n fn string_to_ts(string: &str) -> TokenStream {\n     string_to_stream(string.to_owned())", "previous_filename": "src/libsyntax/tokenstream/tests.rs"}, {"sha": "3d2181d4e371b8481aeebbf2a74722cba45f5571", "filename": "src/test/ui-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fast_stmt_expr_attr.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -6,6 +6,7 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_expand;\n extern crate rustc_errors;\n \n use rustc_errors::PResult;\n@@ -14,13 +15,13 @@ use syntax::attr::*;\n use syntax::ast;\n use syntax::sess::ParseSess;\n use syntax::source_map::{FilePathMapping, FileName};\n-use syntax::parse;\n+use syntax::ptr::P;\n+use syntax::print::pprust;\n+use syntax::parse::parser::attr::*;\n use syntax::parse::new_parser_from_source_str;\n use syntax::parse::parser::Parser;\n use syntax::token;\n-use syntax::ptr::P;\n-use syntax::parse::parser::attr::*;\n-use syntax::print::pprust;\n+use syntax_expand::config::process_configure_mod;\n use std::fmt;\n \n // Copied out of syntax::util::parser_testing\n@@ -72,8 +73,12 @@ fn str_compare<T, F: Fn(&T) -> String>(e: &str, expected: &[T], actual: &[T], f:\n     }\n }\n \n+fn sess() -> ParseSess {\n+    ParseSess::new(FilePathMapping::empty(), process_configure_mod)\n+}\n+\n fn check_expr_attrs(es: &str, expected: &[&str]) {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = sess();\n     let e = expr(es, &ps).expect(\"parse error\");\n     let actual = &e.attrs;\n     str_compare(es,\n@@ -83,7 +88,7 @@ fn check_expr_attrs(es: &str, expected: &[&str]) {\n }\n \n fn check_stmt_attrs(es: &str, expected: &[&str]) {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = sess();\n     let e = stmt(es, &ps).expect(\"parse error\");\n     let actual = e.kind.attrs();\n     str_compare(es,\n@@ -93,15 +98,15 @@ fn check_stmt_attrs(es: &str, expected: &[&str]) {\n }\n \n fn reject_expr_parse(es: &str) {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = sess();\n     match expr(es, &ps) {\n         Ok(_) => panic!(\"parser did not reject `{}`\", es),\n         Err(mut e) => e.cancel(),\n     };\n }\n \n fn reject_stmt_parse(es: &str) {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = sess();\n     match stmt(es, &ps) {\n         Ok(_) => panic!(\"parser did not reject `{}`\", es),\n         Err(mut e) => e.cancel(),"}, {"sha": "472440e2e146dd0ad51f4ebd146ea9dfaddab428", "filename": "src/test/ui-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -5,11 +5,13 @@\n #![feature(rustc_private)]\n \n extern crate syntax;\n+extern crate syntax_expand;\n \n use std::path::Path;\n use syntax::sess::ParseSess;\n use syntax::source_map::FilePathMapping;\n-use syntax::parse;\n+use syntax::parse::new_parser_from_file;\n+use syntax_expand::config::process_configure_mod;\n \n #[path = \"mod_dir_simple/test.rs\"]\n mod gravy;\n@@ -21,10 +23,10 @@ pub fn main() {\n }\n \n fn parse() {\n-    let parse_session = ParseSess::new(FilePathMapping::empty());\n+    let parse_session = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n \n     let path = Path::new(file!());\n     let path = path.canonicalize().unwrap();\n-    let mut parser = parse::new_parser_from_file(&parse_session, &path);\n+    let mut parser = new_parser_from_file(&parse_session, &path);\n     let _ = parser.parse_crate_mod();\n }"}, {"sha": "99da605f3574bbd319330db2a24d32bff2a7e23d", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be023ebe850261c6bb202a02a686827d821c3697/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be023ebe850261c6bb202a02a686827d821c3697/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=be023ebe850261c6bb202a02a686827d821c3697", "patch": "@@ -21,21 +21,23 @@\n \n extern crate rustc_data_structures;\n extern crate syntax;\n+extern crate syntax_expand;\n \n use rustc_data_structures::thin_vec::ThinVec;\n use syntax::ast::*;\n use syntax::sess::ParseSess;\n use syntax::source_map::{Spanned, DUMMY_SP, FileName};\n use syntax::source_map::FilePathMapping;\n use syntax::mut_visit::{self, MutVisitor, visit_clobber};\n-use syntax::parse;\n+use syntax::parse::new_parser_from_source_str;\n use syntax::print::pprust;\n use syntax::ptr::P;\n+use syntax_expand::config::process_configure_mod;\n \n fn parse_expr(ps: &ParseSess, src: &str) -> Option<P<Expr>> {\n     let src_as_string = src.to_string();\n \n-    let mut p = parse::new_parser_from_source_str(\n+    let mut p = new_parser_from_source_str(\n         ps,\n         FileName::Custom(src_as_string.clone()),\n         src_as_string,\n@@ -202,7 +204,7 @@ fn main() {\n }\n \n fn run() {\n-    let ps = ParseSess::new(FilePathMapping::empty());\n+    let ps = ParseSess::new(FilePathMapping::empty(), process_configure_mod);\n \n     iter_exprs(2, &mut |mut e| {\n         // If the pretty printer is correct, then `parse(print(e))` should be identical to `e`,"}]}