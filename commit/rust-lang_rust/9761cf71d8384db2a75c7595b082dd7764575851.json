{"sha": "9761cf71d8384db2a75c7595b082dd7764575851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NjFjZjcxZDgzODRkYjJhNzVjNzU5NWIwODJkZDc3NjQ1NzU4NTE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-22T06:53:39Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-04-22T06:53:39Z"}, "message": "Tests", "tree": {"sha": "5ad85e1cc2d34f8d6d48e92c81e48cff0513cac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ad85e1cc2d34f8d6d48e92c81e48cff0513cac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9761cf71d8384db2a75c7595b082dd7764575851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9761cf71d8384db2a75c7595b082dd7764575851", "html_url": "https://github.com/rust-lang/rust/commit/9761cf71d8384db2a75c7595b082dd7764575851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9761cf71d8384db2a75c7595b082dd7764575851/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95ff52f06fce389f2d5634c8b15916419cd876a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ff52f06fce389f2d5634c8b15916419cd876a8", "html_url": "https://github.com/rust-lang/rust/commit/95ff52f06fce389f2d5634c8b15916419cd876a8"}], "stats": {"total": 65, "additions": 31, "deletions": 34}, "files": [{"sha": "575e25ed9651aa59a3c986497c9a1fdc0b9f8b83", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=9761cf71d8384db2a75c7595b082dd7764575851", "patch": "@@ -201,9 +201,9 @@ fn format_files(files: &Vec<PathBuf>,\n         println!(\"\");\n     }\n     let mut command = try!(Command::new(\"rustfmt\")\n-                               .stdout(stdout)\n-                               .args(files)\n-                               .args(fmt_args)\n-                               .spawn());\n+        .stdout(stdout)\n+        .args(files)\n+        .args(fmt_args)\n+        .spawn());\n     command.wait()\n }"}, {"sha": "2472001c38bcced5c6b25602dd6c1aa68df8cddc", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=9761cf71d8384db2a75c7595b082dd7764575851", "patch": "@@ -191,7 +191,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n         Operation::Stdin { input, config_path } => {\n             // try to read config from local directory\n             let (mut config, _) = match_cli_path_or_file(config_path, &env::current_dir().unwrap())\n-                                      .expect(\"Error resolving config\");\n+                .expect(\"Error resolving config\");\n \n             // write_mode is always Plain for Stdin.\n             config.write_mode = WriteMode::Plain;\n@@ -205,8 +205,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n             // Load the config path file if provided\n             if let Some(config_file) = config_path {\n                 let (cfg_tmp, path_tmp) = resolve_config(config_file.as_ref())\n-                                              .expect(&format!(\"Error resolving config for {:?}\",\n-                                                               config_file));\n+                    .expect(&format!(\"Error resolving config for {:?}\", config_file));\n                 config = cfg_tmp;\n                 path = path_tmp;\n             };\n@@ -219,9 +218,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                 // Check the file directory if the config-path could not be read or not provided\n                 if path.is_none() {\n                     let (config_tmp, path_tmp) = resolve_config(file.parent().unwrap())\n-                                                     .expect(&format!(\"Error resolving config \\\n-                                                                       for {}\",\n-                                                                      file.display()));\n+                        .expect(&format!(\"Error resolving config for {}\", file.display()));\n                     if let Some(path) = path_tmp.as_ref() {\n                         println!(\"Using rustfmt config file {} for {}\",\n                                  path.display(),"}, {"sha": "ec9e6685878b72433e316b7ffc6c3958b32ac5f4", "filename": "src/chains.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=9761cf71d8384db2a75c7595b082dd7764575851", "patch": "@@ -144,9 +144,8 @@ pub fn rewrite_chain(expr: &ast::Expr,\n \n     // Total of all items excluding the last.\n     let almost_total = rewrites[..rewrites.len() - 1]\n-                           .iter()\n-                           .fold(0, |a, b| a + first_line_width(b)) +\n-                       parent_rewrite.len();\n+        .iter()\n+        .fold(0, |a, b| a + first_line_width(b)) + parent_rewrite.len();\n     let total_width = almost_total + first_line_width(rewrites.last().unwrap());\n \n     let veto_single_line = if context.config.take_source_hints && subexpr_list.len() > 1 {\n@@ -271,8 +270,9 @@ fn chain_indent(context: &RewriteContext, offset: Indent) -> Indent {\n fn hacked_chain_indent(context: &RewriteContext, _offset: Indent) -> Indent {\n     match context.config.chain_indent {\n         BlockIndentStyle::Inherit => context.block_indent,\n-        BlockIndentStyle::Visual |\n-        BlockIndentStyle::Tabbed => context.block_indent.block_indent(context.config),\n+        BlockIndentStyle::Visual | BlockIndentStyle::Tabbed => {\n+            context.block_indent.block_indent(context.config)\n+        }\n     }\n }\n "}, {"sha": "19dad7f866cbbb359d46cab992b9e393989250fd", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=9761cf71d8384db2a75c7595b082dd7764575851", "patch": "@@ -912,7 +912,7 @@ fn format_tuple_struct(context: &RewriteContext,\n         // know that earlier, so the where clause will not be indented properly.\n         result.push('\\n');\n         result.push_str(&(context.block_indent + (context.config.tab_spaces - 1))\n-                             .to_string(context.config));\n+            .to_string(context.config));\n     }\n     result.push_str(&where_clause_str);\n "}, {"sha": "3d1ef21478e5c7eb880d59c7a6c393ff69dd2eea", "filename": "src/missed_spans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9761cf71d8384db2a75c7595b082dd7764575851/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=9761cf71d8384db2a75c7595b082dd7764575851", "patch": "@@ -112,10 +112,10 @@ impl<'a> FmtVisitor<'a> {\n         for (kind, offset, subslice) in CommentCodeSlices::new(snippet) {\n             if let CodeCharKind::Comment = kind {\n                 let last_char = big_snippet[..(offset + big_diff)]\n-                                    .chars()\n-                                    .rev()\n-                                    .skip_while(|rev_c| [' ', '\\t'].contains(&rev_c))\n-                                    .next();\n+                    .chars()\n+                    .rev()\n+                    .skip_while(|rev_c| [' ', '\\t'].contains(&rev_c))\n+                    .next();\n \n                 let fix_indent = last_char.map_or(true, |rev_c| ['{', '\\n'].contains(&rev_c));\n "}, {"sha": "9ec8404b1d8c1098a68dea5358888507c0f29414", "filename": "tests/system.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9761cf71d8384db2a75c7595b082dd7764575851/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9761cf71d8384db2a75c7595b082dd7764575851/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=9761cf71d8384db2a75c7595b082dd7764575851", "patch": "@@ -102,8 +102,8 @@ fn assert_output(source: &str, expected_filename: &str) {\n fn idempotence_tests() {\n     // Get all files in the tests/target directory.\n     let files = fs::read_dir(\"tests/target\")\n-                    .expect(\"Couldn't read target dir\")\n-                    .map(get_path_string);\n+        .expect(\"Couldn't read target dir\")\n+        .map(get_path_string);\n     let (_reports, count, fails) = check_files(files);\n \n     // Display results.\n@@ -116,9 +116,9 @@ fn idempotence_tests() {\n #[test]\n fn self_tests() {\n     let files = fs::read_dir(\"src/bin\")\n-                    .expect(\"Couldn't read src dir\")\n-                    .chain(fs::read_dir(\"tests\").expect(\"Couldn't read tests dir\"))\n-                    .map(get_path_string);\n+        .expect(\"Couldn't read src dir\")\n+        .chain(fs::read_dir(\"tests\").expect(\"Couldn't read tests dir\"))\n+        .map(get_path_string);\n     // Hack because there's no `IntoIterator` impl for `[T; N]`.\n     let files = files.chain(Some(\"src/lib.rs\".to_owned()).into_iter());\n \n@@ -264,7 +264,7 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n \n     // Matches lines containing significant comments or whitespace.\n     let line_regex = regex::Regex::new(r\"(^\\s*$)|(^\\s*//\\s*rustfmt-[^:]+:\\s*\\S+)\")\n-                         .expect(\"Failed creating pattern 2\");\n+        .expect(\"Failed creating pattern 2\");\n \n     reader.lines()\n           .map(|line| line.expect(\"Failed getting line\"))"}, {"sha": "e3ab320c6e19405de0496099141370654db7241d", "filename": "tests/target/chains-indent-visual.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9761cf71d8384db2a75c7595b082dd7764575851/tests%2Ftarget%2Fchains-indent-visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9761cf71d8384db2a75c7595b082dd7764575851/tests%2Ftarget%2Fchains-indent-visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fchains-indent-visual.rs?ref=9761cf71d8384db2a75c7595b082dd7764575851", "patch": "@@ -2,9 +2,9 @@\n \n fn test() {\n     let x = my_long_function()\n-                .my_even_longer_function()\n-                .my_nested_function()\n-                .some_random_name()\n-                .another_function()\n-                .do_it();\n+        .my_even_longer_function()\n+        .my_nested_function()\n+        .some_random_name()\n+        .another_function()\n+        .do_it();\n }"}, {"sha": "de8adcceccd130675e7bda97472d5462702b83ef", "filename": "tests/target/hard-tabs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9761cf71d8384db2a75c7595b082dd7764575851/tests%2Ftarget%2Fhard-tabs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9761cf71d8384db2a75c7595b082dd7764575851/tests%2Ftarget%2Fhard-tabs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fhard-tabs.rs?ref=9761cf71d8384db2a75c7595b082dd7764575851", "patch": "@@ -51,9 +51,9 @@ fn main() {\n \t}\n \n \tlet chain = funktion_kall()\n-\t\t            .go_to_next_line_with_tab()\n-\t\t            .go_to_next_line_with_tab()\n-\t\t            .go_to_next_line_with_tab();\n+\t\t.go_to_next_line_with_tab()\n+\t\t.go_to_next_line_with_tab()\n+\t\t.go_to_next_line_with_tab();\n \n \tlet z = [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n \t         yyyyyyyyyyyyyyyyyyyyyyyyyyy,"}]}