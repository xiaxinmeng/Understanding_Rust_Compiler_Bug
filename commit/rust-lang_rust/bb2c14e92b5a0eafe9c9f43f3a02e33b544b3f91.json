{"sha": "bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMmMxNGU5MmI1YTBlYWZlOWM5ZjQzZjNhMDJlMzNiNTQ0YjNmOTE=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-23T17:07:51Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-08-03T04:34:17Z"}, "message": "Fix a bug causing it to be too trigger-happy", "tree": {"sha": "fd5b9beaae0f44bfd91c5495c8e9c54822c60bd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd5b9beaae0f44bfd91c5495c8e9c54822c60bd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91", "html_url": "https://github.com/rust-lang/rust/commit/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a84948329459e650af4eb2f8cff8f55282316ea5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a84948329459e650af4eb2f8cff8f55282316ea5", "html_url": "https://github.com/rust-lang/rust/commit/a84948329459e650af4eb2f8cff8f55282316ea5"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "c931c212735f8e7db9a24a8d08da9ad4d5355125", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=bb2c14e92b5a0eafe9c9f43f3a02e33b544b3f91", "patch": "@@ -5,10 +5,9 @@ use crate::utils::sugg::Sugg;\n use crate::utils::usage::{is_unused, mutated_variables};\n use crate::utils::{\n     get_enclosing_block, get_parent_expr, get_trait_def_id, has_iter_method, higher, implements_trait,\n-    is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item, last_path_segment, match_path,\n-    match_trait_method, match_type, match_var, multispan_sugg, qpath_res, snippet, snippet_opt,\n-    snippet_with_applicability, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg,\n-    SpanlessEq,\n+    is_integer_const, is_no_std_crate, is_refutable, is_type_diagnostic_item, last_path_segment, match_trait_method,\n+    match_type, match_var, multispan_sugg, qpath_res, snippet, snippet_opt, snippet_with_applicability, span_lint,\n+    span_lint_and_help, span_lint_and_sugg, span_lint_and_then, sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;\n@@ -2514,16 +2513,16 @@ enum IterFunctionKind {\n struct IterFunctionVisitor {\n     uses: Vec<IterFunction>,\n     seen_other: bool,\n-    target: String,\n+    target: Ident,\n }\n impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        // TODO Check if the target identifier is being used in something other\n-        // than a function call\n+        // Check function calls on our collection\n         if_chain! {\n             if let ExprKind::MethodCall(method_name, _, ref args, _) = &expr.kind;\n             if let Some(Expr { kind: ExprKind::Path(QPath::Resolved(_, ref path)), .. }) = args.get(0);\n-            if match_path(path, &[&self.target]);\n+            if let &[name] = &path.segments;\n+            if name.ident == self.target;\n             then {\n                 let into_iter = sym!(into_iter);\n                 let len = sym!(len);\n@@ -2544,8 +2543,17 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n                     ),\n                     _ => self.seen_other = true,\n                 }\n+                return\n             }\n-            else {\n+        }\n+        // Check if the collection is used for anything else\n+        if_chain! {\n+            if let Expr { kind: ExprKind::Path(QPath::Resolved(_, ref path)), .. } = expr;\n+            if let &[name] = &path.segments;\n+            if name.ident == self.target;\n+            then {\n+                self.seen_other = true;\n+            } else {\n                 walk_expr(self, expr);\n             }\n         }\n@@ -2562,7 +2570,7 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident) -> Option<Vec<IterFunction>> {\n     let mut visitor = IterFunctionVisitor {\n         uses: Vec::new(),\n-        target: identifier.name.to_ident_string(),\n+        target: identifier,\n         seen_other: false,\n     };\n     visitor.visit_block(block);"}]}