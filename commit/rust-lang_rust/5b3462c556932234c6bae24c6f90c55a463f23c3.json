{"sha": "5b3462c556932234c6bae24c6f90c55a463f23c3", "node_id": "C_kwDOAAsO6NoAKDViMzQ2MmM1NTY5MzIyMzRjNmJhZTI0YzZmOTBjNTVhNDYzZjIzYzM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-01-14T08:50:49Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2022-01-28T14:01:07Z"}, "message": "update cfg(bootstrap)s", "tree": {"sha": "15271c9b25b59b2ea8a2b82b2803637201d208dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15271c9b25b59b2ea8a2b82b2803637201d208dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3462c556932234c6bae24c6f90c55a463f23c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmHz9yMACgkQzXazX3c0\ndp7m+w/7BjPUd2mCMyLh7ygyHf1YrdYYu9j1SJ1+2LmQBp5pvOEDmeE270atlLNY\nVJmX2/h2t2iVcSRHSLLF5HiaBqw1H+JahPeR3bKVIw4oJkB4KU1VR9JxDrVMAHbX\nlJmZ9Pb4FWEdIkSYcDOSh1sx3pSPHZXZg991Zzf8mXLGiaZa90O/bWnP131xNXY/\nRxS3agGPm/vqgbbfsofDesasY1DPbp1T647jFmXFuF0t6eZ7ns6jNY5QDfQft6IO\nIlLtkWXMGcRZKsh1nRWNKM2+7gbDh/OtHWZtqBWX8pzwrrV+1mxff84Ch3TVrF5n\no8p4yIdpZtkIJ1DyEd5OFtVWQXH1gwSSKpYHMIJVa/0tGfswrzJb9TqyBRwDFezH\nbq5p+qYdrx2ASJSb2b7RmU6P73t6L1jjQwf5Ga/fjgmOVVEiwLPS8p1OVOGFtfZr\nXFYIcep+XRlQLt9Lgl90qU1Pdh2p+lsrp2ltpVVMiYvgEYA7a2Nx32efwCbzCv6s\nH7gL8XVkeMP0EcnMWGLWXisevKRo4f390Ru8nWeJYhEz9X1xB6wMLXwTkhSybd0z\nlNK8nhKlgHzLEhFw3xn3WQ1L+Jne6MUFfriOQzH6tDOFNcnZnHygPJEsymrUUFcY\nP7XwG/l3jy7VJ/E0yGEXOgUoOgq/J/AtqI4ky+Bv/UikDacFGkk=\n=+lMC\n-----END PGP SIGNATURE-----", "payload": "tree 15271c9b25b59b2ea8a2b82b2803637201d208dc\nparent 970e603006db3e80b85252663588b7d34e932f10\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1642150249 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1643378467 +0100\n\nupdate cfg(bootstrap)s\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3462c556932234c6bae24c6f90c55a463f23c3", "html_url": "https://github.com/rust-lang/rust/commit/5b3462c556932234c6bae24c6f90c55a463f23c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3462c556932234c6bae24c6f90c55a463f23c3/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "970e603006db3e80b85252663588b7d34e932f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/970e603006db3e80b85252663588b7d34e932f10", "html_url": "https://github.com/rust-lang/rust/commit/970e603006db3e80b85252663588b7d34e932f10"}], "stats": {"total": 167, "additions": 55, "deletions": 112}, "files": [{"sha": "dfc07da91698285d3343333427387133c81f8151", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -2,7 +2,6 @@\n #![feature(associated_type_defaults)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n-#![cfg_attr(bootstrap, feature(destructuring_assignment))]\n #![feature(if_let_guard)]\n #![feature(let_else)]\n #![feature(proc_macro_diagnostic)]"}, {"sha": "cc72de7c5484807ef6ad3356aad673e04b2b2b1d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -784,24 +784,11 @@ rustc_queries! {\n         desc { |tcx| \"type-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n         cache_on_disk_if { true }\n         load_cached(tcx, id) {\n-            #[cfg(bootstrap)]\n-            {\n-                match match tcx.on_disk_cache().as_ref() {\n-                    Some(c) => c.try_load_query_result(*tcx, id),\n-                    None => None,\n-                } {\n-                    Some(x) => Some(&*tcx.arena.alloc(x)),\n-                    None => None,\n-                }\n-            }\n-            #[cfg(not(bootstrap))]\n-            {\n-                let typeck_results: Option<ty::TypeckResults<'tcx>> = tcx\n-                    .on_disk_cache().as_ref()\n-                    .and_then(|c| c.try_load_query_result(*tcx, id));\n+            let typeck_results: Option<ty::TypeckResults<'tcx>> = tcx\n+                .on_disk_cache().as_ref()\n+                .and_then(|c| c.try_load_query_result(*tcx, id));\n \n-                typeck_results.map(|x| &*tcx.arena.alloc(x))\n-            }\n+            typeck_results.map(|x| &*tcx.arena.alloc(x))\n         }\n     }\n "}, {"sha": "dfd3771c1d04207b92094179fe4fa1595fc8e2a4", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -67,17 +67,14 @@\n     issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\",\n     test(no_crate_inject, attr(allow(unused_variables), deny(warnings)))\n )]\n-#![cfg_attr(\n-    not(bootstrap),\n-    doc(cfg_hide(\n-        not(test),\n-        not(any(test, bootstrap)),\n-        any(not(feature = \"miri-test-libstd\"), test, doctest),\n-        no_global_oom_handling,\n-        not(no_global_oom_handling),\n-        target_has_atomic = \"ptr\"\n-    ))\n-)]\n+#![doc(cfg_hide(\n+    not(test),\n+    not(any(test, bootstrap)),\n+    any(not(feature = \"miri-test-libstd\"), test, doctest),\n+    no_global_oom_handling,\n+    not(no_global_oom_handling),\n+    target_has_atomic = \"ptr\"\n+))]\n #![no_std]\n #![needs_allocator]\n //\n@@ -151,7 +148,6 @@\n #![feature(const_precise_live_drops)]\n #![feature(const_trait_impl)]\n #![feature(const_try)]\n-#![cfg_attr(bootstrap, feature(destructuring_assignment))]\n #![feature(dropck_eyepatch)]\n #![feature(exclusive_range_pattern)]\n #![feature(fundamental)]"}, {"sha": "5fd60b759286a3fc6439913ffbd4efa765b5fde6", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -1310,11 +1310,7 @@ impl Clone for BorrowRef<'_> {\n ///\n /// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(\n-    not(bootstrap),\n-    must_not_suspend = \"holding a Ref across suspend \\\n-                      points can cause BorrowErrors\"\n-)]\n+#[must_not_suspend = \"holding a Ref across suspend points can cause BorrowErrors\"]\n pub struct Ref<'b, T: ?Sized + 'b> {\n     value: &'b T,\n     borrow: BorrowRef<'b>,\n@@ -1692,11 +1688,7 @@ impl<'b> BorrowRefMut<'b> {\n ///\n /// See the [module-level documentation](self) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(\n-    not(bootstrap),\n-    must_not_suspend = \"holding a RefMut across suspend \\\n-                      points can cause BorrowErrors\"\n-)]\n+#[must_not_suspend = \"holding a RefMut across suspend points can cause BorrowErrors\"]\n pub struct RefMut<'b, T: ?Sized + 'b> {\n     value: &'b mut T,\n     borrow: BorrowRefMut<'b>,"}, {"sha": "0912f8675fa84d18467f88806fd4ae83367097e1", "filename": "library/core/src/future/into_future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Finto_future.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -13,7 +13,7 @@ pub trait IntoFuture {\n \n     /// Creates a future from a value.\n     #[unstable(feature = \"into_future\", issue = \"67644\")]\n-    #[cfg_attr(not(bootstrap), lang = \"into_future\")]\n+    #[lang = \"into_future\"]\n     fn into_future(self) -> Self::Future;\n }\n "}, {"sha": "f88eb5e31b8276be03b49e5c9ad62b248f6de09b", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 23, "deletions": 26, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -60,32 +60,29 @@\n     test(no_crate_inject, attr(deny(warnings))),\n     test(attr(allow(dead_code, deprecated, unused_variables, unused_mut)))\n )]\n-#![cfg_attr(\n-    not(bootstrap),\n-    doc(cfg_hide(\n-        not(test),\n-        any(not(feature = \"miri-test-libstd\"), test, doctest),\n-        no_fp_fmt_parse,\n-        target_pointer_width = \"16\",\n-        target_pointer_width = \"32\",\n-        target_pointer_width = \"64\",\n-        target_has_atomic = \"8\",\n-        target_has_atomic = \"16\",\n-        target_has_atomic = \"32\",\n-        target_has_atomic = \"64\",\n-        target_has_atomic = \"ptr\",\n-        target_has_atomic_equal_alignment = \"8\",\n-        target_has_atomic_equal_alignment = \"16\",\n-        target_has_atomic_equal_alignment = \"32\",\n-        target_has_atomic_equal_alignment = \"64\",\n-        target_has_atomic_equal_alignment = \"ptr\",\n-        target_has_atomic_load_store = \"8\",\n-        target_has_atomic_load_store = \"16\",\n-        target_has_atomic_load_store = \"32\",\n-        target_has_atomic_load_store = \"64\",\n-        target_has_atomic_load_store = \"ptr\",\n-    ))\n-)]\n+#![doc(cfg_hide(\n+    not(test),\n+    any(not(feature = \"miri-test-libstd\"), test, doctest),\n+    no_fp_fmt_parse,\n+    target_pointer_width = \"16\",\n+    target_pointer_width = \"32\",\n+    target_pointer_width = \"64\",\n+    target_has_atomic = \"8\",\n+    target_has_atomic = \"16\",\n+    target_has_atomic = \"32\",\n+    target_has_atomic = \"64\",\n+    target_has_atomic = \"ptr\",\n+    target_has_atomic_equal_alignment = \"8\",\n+    target_has_atomic_equal_alignment = \"16\",\n+    target_has_atomic_equal_alignment = \"32\",\n+    target_has_atomic_equal_alignment = \"64\",\n+    target_has_atomic_equal_alignment = \"ptr\",\n+    target_has_atomic_load_store = \"8\",\n+    target_has_atomic_load_store = \"16\",\n+    target_has_atomic_load_store = \"32\",\n+    target_has_atomic_load_store = \"64\",\n+    target_has_atomic_load_store = \"ptr\",\n+))]\n #![no_core]\n //\n // Lints:"}, {"sha": "0cc428d6962782b247914d4ccf9afc8bbc91e989", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -1003,7 +1003,6 @@ pub(crate) mod builtin {\n     /// assert_eq!(s, b\"ABCDEF\");\n     /// # }\n     /// ```\n-    #[cfg(not(bootstrap))]\n     #[unstable(feature = \"concat_bytes\", issue = \"87555\")]\n     #[rustc_builtin_macro]\n     #[macro_export]"}, {"sha": "b566e211cd89defc87a883fd406e15e72470777b", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -65,7 +65,6 @@ pub use crate::{\n     issue = \"87555\",\n     reason = \"`concat_bytes` is not stable enough for use and is subject to change\"\n )]\n-#[cfg(not(bootstrap))]\n #[doc(no_inline)]\n pub use crate::concat_bytes;\n "}, {"sha": "2b234de6795eb9c59644a697cca5bb0a9bb7994a", "filename": "library/core/tests/cmp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Ftests%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Ftests%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fcmp.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -204,7 +204,6 @@ fn cmp_default() {\n     assert_eq!(Fool(false), Fool(true));\n }\n \n-#[cfg(not(bootstrap))]\n mod const_cmp {\n     use super::*;\n "}, {"sha": "ff0a8fe27ae82a8bf9234e3f495f55c32f7fc504", "filename": "library/core/tests/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fintrinsics.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -37,7 +37,6 @@ fn test_assume_can_be_in_const_contexts() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n const fn test_write_bytes_in_const_contexts() {\n     use core::intrinsics::write_bytes;\n "}, {"sha": "171d0d8dfb7bb9b7a866060fb33d79f395f2befe", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -251,7 +251,6 @@ fn test_set_memory() {\n }\n \n #[test]\n-#[cfg(not(bootstrap))]\n fn test_set_memory_const() {\n     const XS: [u8; 20] = {\n         let mut xs = [0u8; 20];"}, {"sha": "6c54a8e7de60b464d5ca8619f87931ee57598b9c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -195,15 +195,12 @@\n     test(no_crate_inject, attr(deny(warnings))),\n     test(attr(allow(dead_code, deprecated, unused_variables, unused_mut)))\n )]\n-#![cfg_attr(\n-    not(bootstrap),\n-    doc(cfg_hide(\n-        not(test),\n-        not(any(test, bootstrap)),\n-        no_global_oom_handling,\n-        not(no_global_oom_handling)\n-    ))\n-)]\n+#![doc(cfg_hide(\n+    not(test),\n+    not(any(test, bootstrap)),\n+    no_global_oom_handling,\n+    not(no_global_oom_handling)\n+))]\n // Don't link to std. We are std.\n #![no_std]\n #![warn(deprecated_in_future)]\n@@ -249,7 +246,7 @@\n #![feature(cfg_target_thread_local)]\n #![feature(char_error_internals)]\n #![feature(char_internals)]\n-#![cfg_attr(not(bootstrap), feature(concat_bytes))]\n+#![feature(concat_bytes)]\n #![feature(concat_idents)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n@@ -578,7 +575,6 @@ pub use core::{\n     issue = \"87555\",\n     reason = \"`concat_bytes` is not stable enough for use and is subject to change\"\n )]\n-#[cfg(not(bootstrap))]\n pub use core::concat_bytes;\n \n #[stable(feature = \"core_primitive\", since = \"1.43.0\")]"}, {"sha": "0226c4d7a2581b5dea306b604d1faedf48a1b15c", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -49,7 +49,6 @@ pub use core::prelude::v1::{\n     issue = \"87555\",\n     reason = \"`concat_bytes` is not stable enough for use and is subject to change\"\n )]\n-#[cfg(not(bootstrap))]\n #[doc(no_inline)]\n pub use core::prelude::v1::concat_bytes;\n "}, {"sha": "3ea0a6c3937605261762f0e9d87845742f44fd09", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -188,12 +188,9 @@ unsafe impl<T: ?Sized + Send> Sync for Mutex<T> {}\n /// [`lock`]: Mutex::lock\n /// [`try_lock`]: Mutex::try_lock\n #[must_use = \"if unused the Mutex will immediately unlock\"]\n-#[cfg_attr(\n-    not(bootstrap),\n-    must_not_suspend = \"holding a MutexGuard across suspend \\\n+#[must_not_suspend = \"holding a MutexGuard across suspend \\\n                       points can cause deadlocks, delays, \\\n-                      and cause Futures to not implement `Send`\"\n-)]\n+                      and cause Futures to not implement `Send`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct MutexGuard<'a, T: ?Sized + 'a> {\n     lock: &'a Mutex<T>,"}, {"sha": "2e72a9ef54e5f78c61fef025537b3594fe279cf0", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -95,12 +95,9 @@ unsafe impl<T: ?Sized + Send + Sync> Sync for RwLock<T> {}\n /// [`read`]: RwLock::read\n /// [`try_read`]: RwLock::try_read\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n-#[cfg_attr(\n-    not(bootstrap),\n-    must_not_suspend = \"holding a RwLockReadGuard across suspend \\\n+#[must_not_suspend = \"holding a RwLockReadGuard across suspend \\\n                       points can cause deadlocks, delays, \\\n-                      and cause Futures to not implement `Send`\"\n-)]\n+                      and cause Futures to not implement `Send`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockReadGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,\n@@ -121,12 +118,9 @@ unsafe impl<T: ?Sized + Sync> Sync for RwLockReadGuard<'_, T> {}\n /// [`write`]: RwLock::write\n /// [`try_write`]: RwLock::try_write\n #[must_use = \"if unused the RwLock will immediately unlock\"]\n-#[cfg_attr(\n-    not(bootstrap),\n-    must_not_suspend = \"holding a RwLockWriteGuard across suspend \\\n+#[must_not_suspend = \"holding a RwLockWriteGuard across suspend \\\n                       points can cause deadlocks, delays, \\\n-                      and cause Future's to not implement `Send`\"\n-)]\n+                      and cause Future's to not implement `Send`\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RwLockWriteGuard<'a, T: ?Sized + 'a> {\n     lock: &'a RwLock<T>,"}, {"sha": "d399e0b9a4632f040f7df61c550e5e5353a2f6e2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5b3462c556932234c6bae24c6f90c55a463f23c3/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3462c556932234c6bae24c6f90c55a463f23c3/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5b3462c556932234c6bae24c6f90c55a463f23c3", "patch": "@@ -988,20 +988,11 @@ impl<'a> Builder<'a> {\n             }\n         };\n \n-        // cfg(bootstrap) -- drop the compiler.stage == 0 branch.\n-        if compiler.stage == 0 {\n-            if use_new_symbol_mangling {\n-                rustflags.arg(\"-Zsymbol-mangling-version=v0\");\n-            } else {\n-                rustflags.arg(\"-Zsymbol-mangling-version=legacy\");\n-            }\n+        if use_new_symbol_mangling {\n+            rustflags.arg(\"-Csymbol-mangling-version=v0\");\n         } else {\n-            if use_new_symbol_mangling {\n-                rustflags.arg(\"-Csymbol-mangling-version=v0\");\n-            } else {\n-                rustflags.arg(\"-Csymbol-mangling-version=legacy\");\n-                rustflags.arg(\"-Zunstable-options\");\n-            }\n+            rustflags.arg(\"-Csymbol-mangling-version=legacy\");\n+            rustflags.arg(\"-Zunstable-options\");\n         }\n \n         // FIXME: It might be better to use the same value for both `RUSTFLAGS` and `RUSTDOCFLAGS`,"}]}