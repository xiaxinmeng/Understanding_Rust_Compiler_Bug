{"sha": "8a1ce4020c480e455ec902e3616843a3dd5fe489", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMWNlNDAyMGM0ODBlNDU1ZWM5MDJlMzYxNjg0M2EzZGQ1ZmU0ODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-21T16:04:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-21T16:04:44Z"}, "message": "Auto merge of #39874 - amosonn:master, r=alexcrichton\n\nFixes overflow in libsdt/io/cursor.rs \"seek\"\n\nFixes #39631\nTest which fails (with old implementation), then fix to implementation.", "tree": {"sha": "61f01c0b5cfecf3331188b0301892e313ca6ac51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f01c0b5cfecf3331188b0301892e313ca6ac51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a1ce4020c480e455ec902e3616843a3dd5fe489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1ce4020c480e455ec902e3616843a3dd5fe489", "html_url": "https://github.com/rust-lang/rust/commit/8a1ce4020c480e455ec902e3616843a3dd5fe489", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a1ce4020c480e455ec902e3616843a3dd5fe489/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3954c70537cc78dc4a8e28c6ffa0a8ae5198387a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3954c70537cc78dc4a8e28c6ffa0a8ae5198387a", "html_url": "https://github.com/rust-lang/rust/commit/3954c70537cc78dc4a8e28c6ffa0a8ae5198387a"}, {"sha": "a2d176e8f4774b84db22540a45eed7b29482f154", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d176e8f4774b84db22540a45eed7b29482f154", "html_url": "https://github.com/rust-lang/rust/commit/a2d176e8f4774b84db22540a45eed7b29482f154"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "60767ea4786618551f9720c2318db53ef7e3543c", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 49, "deletions": 10, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8a1ce4020c480e455ec902e3616843a3dd5fe489/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1ce4020c480e455ec902e3616843a3dd5fe489/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=8a1ce4020c480e455ec902e3616843a3dd5fe489", "patch": "@@ -200,18 +200,20 @@ impl<T> Cursor<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> io::Seek for Cursor<T> where T: AsRef<[u8]> {\n     fn seek(&mut self, style: SeekFrom) -> io::Result<u64> {\n-        let pos = match style {\n-            SeekFrom::Start(n) => { self.pos = n; return Ok(n) }\n-            SeekFrom::End(n) => self.inner.as_ref().len() as i64 + n,\n-            SeekFrom::Current(n) => self.pos as i64 + n,\n+        let (base_pos, offset) = match style {\n+            SeekFrom::Start(n) => { self.pos = n; return Ok(n); }\n+            SeekFrom::End(n) => (self.inner.as_ref().len() as u64, n),\n+            SeekFrom::Current(n) => (self.pos, n),\n         };\n-\n-        if pos < 0 {\n-            Err(Error::new(ErrorKind::InvalidInput,\n-                           \"invalid seek to a negative position\"))\n+        let new_pos = if offset >= 0 {\n+            base_pos.checked_add(offset as u64)\n         } else {\n-            self.pos = pos as u64;\n-            Ok(self.pos)\n+            base_pos.checked_sub((offset.wrapping_neg()) as u64)\n+        };\n+        match new_pos {\n+            Some(n) => {self.pos = n; Ok(self.pos)}\n+            None => Err(Error::new(ErrorKind::InvalidInput,\n+                           \"invalid seek to a negative or overflowing position\"))\n         }\n     }\n }\n@@ -526,6 +528,43 @@ mod tests {\n         assert_eq!(r.write(&[3]).unwrap(), 0);\n     }\n \n+    #[test]\n+    fn seek_past_i64() {\n+        let buf = [0xff];\n+        let mut r = Cursor::new(&buf[..]);\n+        assert_eq!(r.seek(SeekFrom::Start(6)).unwrap(), 6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x7ffffffffffffff0)).unwrap(), 0x7ffffffffffffff6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x10)).unwrap(), 0x8000000000000006);\n+        assert_eq!(r.seek(SeekFrom::Current(0)).unwrap(), 0x8000000000000006);\n+        assert!(r.seek(SeekFrom::Current(0x7ffffffffffffffd)).is_err());\n+        assert_eq!(r.seek(SeekFrom::Current(-0x8000000000000000)).unwrap(), 6);\n+\n+        let mut r = Cursor::new(vec![10]);\n+        assert_eq!(r.seek(SeekFrom::Start(6)).unwrap(), 6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x7ffffffffffffff0)).unwrap(), 0x7ffffffffffffff6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x10)).unwrap(), 0x8000000000000006);\n+        assert_eq!(r.seek(SeekFrom::Current(0)).unwrap(), 0x8000000000000006);\n+        assert!(r.seek(SeekFrom::Current(0x7ffffffffffffffd)).is_err());\n+        assert_eq!(r.seek(SeekFrom::Current(-0x8000000000000000)).unwrap(), 6);\n+\n+        let mut buf = [0];\n+        let mut r = Cursor::new(&mut buf[..]);\n+        assert_eq!(r.seek(SeekFrom::Start(6)).unwrap(), 6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x7ffffffffffffff0)).unwrap(), 0x7ffffffffffffff6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x10)).unwrap(), 0x8000000000000006);\n+        assert_eq!(r.seek(SeekFrom::Current(0)).unwrap(), 0x8000000000000006);\n+        assert!(r.seek(SeekFrom::Current(0x7ffffffffffffffd)).is_err());\n+        assert_eq!(r.seek(SeekFrom::Current(-0x8000000000000000)).unwrap(), 6);\n+\n+        let mut r = Cursor::new(vec![10].into_boxed_slice());\n+        assert_eq!(r.seek(SeekFrom::Start(6)).unwrap(), 6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x7ffffffffffffff0)).unwrap(), 0x7ffffffffffffff6);\n+        assert_eq!(r.seek(SeekFrom::Current(0x10)).unwrap(), 0x8000000000000006);\n+        assert_eq!(r.seek(SeekFrom::Current(0)).unwrap(), 0x8000000000000006);\n+        assert!(r.seek(SeekFrom::Current(0x7ffffffffffffffd)).is_err());\n+        assert_eq!(r.seek(SeekFrom::Current(-0x8000000000000000)).unwrap(), 6);\n+    }\n+\n     #[test]\n     fn seek_before_0() {\n         let buf = [0xff];"}]}