{"sha": "d2e5a8e2e966df119021e3db6f6d4c2e189865cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZTVhOGUyZTk2NmRmMTE5MDIxZTNkYjZmNmQ0YzJlMTg5ODY1Y2Q=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-06T08:49:30Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-06T09:03:15Z"}, "message": "bless issue-70818 test case", "tree": {"sha": "2f1401ea421e5d8956e1593914470bfb54477fdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f1401ea421e5d8956e1593914470bfb54477fdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2e5a8e2e966df119021e3db6f6d4c2e189865cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e5a8e2e966df119021e3db6f6d4c2e189865cd", "html_url": "https://github.com/rust-lang/rust/commit/d2e5a8e2e966df119021e3db6f6d4c2e189865cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2e5a8e2e966df119021e3db6f6d4c2e189865cd/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "382a963c17122470918e1491a733b81fb545330d", "url": "https://api.github.com/repos/rust-lang/rust/commits/382a963c17122470918e1491a733b81fb545330d", "html_url": "https://github.com/rust-lang/rust/commit/382a963c17122470918e1491a733b81fb545330d"}], "stats": {"total": 48, "additions": 35, "deletions": 13}, "files": [{"sha": "35f3f5b0bbaf7127101e3c37f7389d153a9a7ca9", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d2e5a8e2e966df119021e3db6f6d4c2e189865cd/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e5a8e2e966df119021e3db6f6d4c2e189865cd/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d2e5a8e2e966df119021e3db6f6d4c2e189865cd", "patch": "@@ -1168,7 +1168,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n         let mut generator = None;\n         let mut outer_generator = None;\n-        let mut generator_substs = None;\n         let mut next_code = Some(&obligation.cause.code);\n         while let Some(code) = next_code {\n             debug!(\"maybe_note_obligation_cause_for_async_await: code={:?}\", code);\n@@ -1184,9 +1183,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     );\n \n                     match ty.kind {\n-                        ty::Generator(did, substs, ..) => {\n+                        ty::Generator(did, ..) => {\n                             generator = generator.or(Some(did));\n-                            generator_substs = generator_substs.or(Some(substs));\n                             outer_generator = Some(did);\n                         }\n                         ty::GeneratorWitness(..) => {}\n@@ -1209,13 +1207,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 target_ty={:?}\",\n             generator, trait_ref, target_ty\n         );\n-        let (generator_did, _generator_substs, trait_ref, target_ty) =\n-            match (generator, generator_substs, trait_ref, target_ty) {\n-                (Some(generator_did), Some(generator_substs), Some(trait_ref), Some(target_ty)) => {\n-                    (generator_did, generator_substs, trait_ref, target_ty)\n-                }\n-                _ => return false,\n-            };\n+        let (generator_did, trait_ref, target_ty) = match (generator, trait_ref, target_ty) {\n+            (Some(generator_did), Some(trait_ref), Some(target_ty)) => {\n+                (generator_did, trait_ref, target_ty)\n+            }\n+            _ => return false,\n+        };\n \n         let span = self.tcx.def_span(generator_did);\n "}, {"sha": "0609e4fc0817073f0782d9d0ed5b748f51561c54", "filename": "src/test/ui/async-await/issue-70818.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d2e5a8e2e966df119021e3db6f6d4c2e189865cd/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e5a8e2e966df119021e3db6f6d4c2e189865cd/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.rs?ref=d2e5a8e2e966df119021e3db6f6d4c2e189865cd", "patch": "@@ -1,7 +1,9 @@\n-// edition 2018\n+// edition:2018\n \n-fn foo<T: Sized>(ty: T) -> impl std::future::Future<Output = T> + Send { //~ Error `T` cannot be sent between threads safely\n-    async { ty }\n+use std::future::Future;\n+fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+//~^ Error future cannot be sent between threads safely\n+    async { (ty, ty1) }\n }\n \n fn main() {}"}, {"sha": "97f5bde69b0c069e6e120c6848976782b47e2080", "filename": "src/test/ui/async-await/issue-70818.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d2e5a8e2e966df119021e3db6f6d4c2e189865cd/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d2e5a8e2e966df119021e3db6f6d4c2e189865cd/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70818.stderr?ref=d2e5a8e2e966df119021e3db6f6d4c2e189865cd", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-70818.rs:4:38\n+   |\n+LL | fn foo<T: Send, U>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n+LL |\n+LL |     async { (ty, ty1) }\n+   |     ------------------- this returned value is of type `impl std::future::Future`\n+   |\n+   = help: within `impl std::future::Future`, the trait `std::marker::Send` is not implemented for `U`\n+note: captured outer value is not `Send`\n+  --> $DIR/issue-70818.rs:6:18\n+   |\n+LL |     async { (ty, ty1) }\n+   |                  ^^^ has type `U` which is not `Send`\n+   = note: the return type of a function must have a statically known size\n+help: consider restricting type parameter `U`\n+   |\n+LL | fn foo<T: Send, U: std::marker::Send>(ty: T, ty1: U) -> impl Future<Output = (T, U)> + Send {\n+   |                  ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}