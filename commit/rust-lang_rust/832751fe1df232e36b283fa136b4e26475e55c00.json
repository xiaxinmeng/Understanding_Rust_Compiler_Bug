{"sha": "832751fe1df232e36b283fa136b4e26475e55c00", "node_id": "C_kwDOAAsO6NoAKDgzMjc1MWZlMWRmMjMyZTM2YjI4M2ZhMTM2YjRlMjY0NzVlNTVjMDA", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-28T19:43:16Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-01-28T19:43:16Z"}, "message": "Also erase substs for new infcx in pin move error\n\nThe code originally correctly erased the regions of the type it passed\nto the newly created infcx. But after the `fn_sig` query was made to\nreturn an `EarlyBinder<T>`, some substs that were around were\nsubstituted there without erasing their regions. They were then passed\ninto the newly cerated infcx, which caused the ICE.", "tree": {"sha": "2f4c799c8298bd01be6c026d90e5fd110197cc34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f4c799c8298bd01be6c026d90e5fd110197cc34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/832751fe1df232e36b283fa136b4e26475e55c00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/832751fe1df232e36b283fa136b4e26475e55c00", "html_url": "https://github.com/rust-lang/rust/commit/832751fe1df232e36b283fa136b4e26475e55c00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/832751fe1df232e36b283fa136b4e26475e55c00/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7919ef0ec5776c72dace7fec1c68551a617505ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7919ef0ec5776c72dace7fec1c68551a617505ad", "html_url": "https://github.com/rust-lang/rust/commit/7919ef0ec5776c72dace7fec1c68551a617505ad"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "8c579bac7e8eb471c8dc8690eb7f7c3a7c62c5d1", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/832751fe1df232e36b283fa136b4e26475e55c00/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832751fe1df232e36b283fa136b4e26475e55c00/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=832751fe1df232e36b283fa136b4e26475e55c00", "patch": "@@ -1128,8 +1128,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 \"{place_name} {partially_str}moved due to this method call{loop_message}\",\n                             ),\n                         );\n+\n                         let infcx = tcx.infer_ctxt().build();\n+                        // Erase and shadow everything that could be passed to the new infcx.\n                         let ty = tcx.erase_regions(moved_place.ty(self.body, tcx).ty);\n+                        let method_substs = tcx.erase_regions(method_substs);\n+\n                         if let ty::Adt(def, substs) = ty.kind()\n                             && Some(def.did()) == tcx.lang_items().pin_type()\n                             && let ty::Ref(_, _, hir::Mutability::Mut) = substs.type_at(0).kind()"}, {"sha": "0b9a3bae9619ce82cfd4af40de89fba768657a4f", "filename": "tests/ui/moves/pin-mut-reborrow-infer-var-issue-107419.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/832751fe1df232e36b283fa136b4e26475e55c00/tests%2Fui%2Fmoves%2Fpin-mut-reborrow-infer-var-issue-107419.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/832751fe1df232e36b283fa136b4e26475e55c00/tests%2Fui%2Fmoves%2Fpin-mut-reborrow-infer-var-issue-107419.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmoves%2Fpin-mut-reborrow-infer-var-issue-107419.fixed?ref=832751fe1df232e36b283fa136b4e26475e55c00", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+use std::pin::Pin;\n+\n+fn foo(_: &mut ()) {}\n+\n+fn main() {\n+    let mut uwu = ();\n+    let mut r = Pin::new(&mut uwu);\n+    foo(r.as_mut().get_mut());\n+    foo(r.get_mut()); //~ ERROR use of moved value\n+}"}, {"sha": "0e952b06ee118164e148c4e5ca2a3a56a5f974f6", "filename": "tests/ui/moves/pin-mut-reborrow-infer-var-issue-107419.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/832751fe1df232e36b283fa136b4e26475e55c00/tests%2Fui%2Fmoves%2Fpin-mut-reborrow-infer-var-issue-107419.rs", "raw_url": "https://github.com/rust-lang/rust/raw/832751fe1df232e36b283fa136b4e26475e55c00/tests%2Fui%2Fmoves%2Fpin-mut-reborrow-infer-var-issue-107419.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmoves%2Fpin-mut-reborrow-infer-var-issue-107419.rs?ref=832751fe1df232e36b283fa136b4e26475e55c00", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+use std::pin::Pin;\n+\n+fn foo(_: &mut ()) {}\n+\n+fn main() {\n+    let mut uwu = ();\n+    let mut r = Pin::new(&mut uwu);\n+    foo(r.get_mut());\n+    foo(r.get_mut()); //~ ERROR use of moved value\n+}"}, {"sha": "7e513b73c21b219b9c61c10efeccaea093205266", "filename": "tests/ui/moves/pin-mut-reborrow-infer-var-issue-107419.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/832751fe1df232e36b283fa136b4e26475e55c00/tests%2Fui%2Fmoves%2Fpin-mut-reborrow-infer-var-issue-107419.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/832751fe1df232e36b283fa136b4e26475e55c00/tests%2Fui%2Fmoves%2Fpin-mut-reborrow-infer-var-issue-107419.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmoves%2Fpin-mut-reborrow-infer-var-issue-107419.stderr?ref=832751fe1df232e36b283fa136b4e26475e55c00", "patch": "@@ -0,0 +1,20 @@\n+error[E0382]: use of moved value: `r`\n+  --> $DIR/pin-mut-reborrow-infer-var-issue-107419.rs:10:9\n+   |\n+LL |     let mut r = Pin::new(&mut uwu);\n+   |         ----- move occurs because `r` has type `Pin<&mut ()>`, which does not implement the `Copy` trait\n+LL |     foo(r.get_mut());\n+   |           --------- `r` moved due to this method call\n+LL |     foo(r.get_mut());\n+   |         ^ value used here after move\n+   |\n+note: `Pin::<&'a mut T>::get_mut` takes ownership of the receiver `self`, which moves `r`\n+  --> $SRC_DIR/core/src/pin.rs:LL:COL\n+help: consider reborrowing the `Pin` instead of moving it\n+   |\n+LL |     foo(r.as_mut().get_mut());\n+   |           +++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}]}