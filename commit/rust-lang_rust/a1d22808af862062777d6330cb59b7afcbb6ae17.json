{"sha": "a1d22808af862062777d6330cb59b7afcbb6ae17", "node_id": "C_kwDOAAsO6NoAKGExZDIyODA4YWY4NjIwNjI3NzdkNjMzMGNiNTliN2FmY2JiNmFlMTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-02T04:24:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-02T04:24:57Z"}, "message": "Auto merge of #104963 - petrochenkov:noaddids2, r=cjgillot\n\nrustc_ast_lowering: Stop lowering imports into multiple items\n\nLower them into a single item with multiple resolutions instead.\nThis also allows to remove additional `NodId`s and `DefId`s related to those additional items.", "tree": {"sha": "474c139729a8764e19d9cbdb8ccad769bb88d400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/474c139729a8764e19d9cbdb8ccad769bb88d400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d22808af862062777d6330cb59b7afcbb6ae17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d22808af862062777d6330cb59b7afcbb6ae17", "html_url": "https://github.com/rust-lang/rust/commit/a1d22808af862062777d6330cb59b7afcbb6ae17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d22808af862062777d6330cb59b7afcbb6ae17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d05e2865a05e86de9cfd283d4a6f88340346f48b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d05e2865a05e86de9cfd283d4a6f88340346f48b", "html_url": "https://github.com/rust-lang/rust/commit/d05e2865a05e86de9cfd283d4a6f88340346f48b"}, {"sha": "b0d490e308561eaa3b30067fe6e35c47d47e8896", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d490e308561eaa3b30067fe6e35c47d47e8896", "html_url": "https://github.com/rust-lang/rust/commit/b0d490e308561eaa3b30067fe6e35c47d47e8896"}], "stats": {"total": 105, "additions": 57, "deletions": 48}, "files": [{"sha": "1f56d0118a404b50d88b938620c01b70fcc11212", "filename": "clippy_lints/src/disallowed_types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fdisallowed_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_types.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -106,7 +106,9 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedTypes {\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         if let ItemKind::Use(path, UseKind::Single) = &item.kind {\n-            self.check_res_emit(cx, &path.res, item.span);\n+            for res in &path.res {\n+                self.check_res_emit(cx, res, item.span);\n+            }\n         }\n     }\n "}, {"sha": "0634b2798fefee63669f0a2325e9e89b8332ca7a", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SelfFinder<'a, 'tcx> {\n         self.cx.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'tcx Path<'tcx>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         for segment in path.segments {\n             match segment.ident.name {\n                 kw::SelfLower => self.lower.push(segment.ident.span),"}, {"sha": "e2e6a87a30151472b7bc93e250f556275641f441", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -94,7 +94,10 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             let hir_id = item.hir_id();\n             let attrs = cx.tcx.hir().attrs(hir_id);\n             if let Some(mac_attr) = attrs.iter().find(|attr| attr.has_name(sym::macro_use));\n-            if let Res::Def(DefKind::Mod, id) = path.res;\n+            if let Some(id) = path.res.iter().find_map(|res| match res {\n+                Res::Def(DefKind::Mod, id) => Some(id),\n+                _ => None,\n+            });\n             if !id.is_local();\n             then {\n                 for kid in cx.tcx.module_children(id).iter() {"}, {"sha": "910ee14855e234d21507ff2ef01eb25061461bbb", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -97,7 +97,7 @@ struct UnwrapVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for UnwrapVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         self.identifiers.insert(ident(path));\n         walk_path(self, path);\n     }\n@@ -116,7 +116,7 @@ struct MapExprVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for MapExprVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _id: HirId) {\n+    fn visit_path(&mut self, path: &Path<'tcx>, _id: HirId) {\n         if self.identifiers.contains(&ident(path)) {\n             self.found_identifier = true;\n             return;"}, {"sha": "773174679dbdce618b244bfdfe9f5516d2eaaa0f", "filename": "clippy_lints/src/missing_enforced_import_rename.rs", "status": "modified", "additions": 31, "deletions": 28, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_enforced_import_rename.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -66,35 +66,38 @@ impl LateLintPass<'_> for ImportRename {\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n-        if_chain! {\n-            if let ItemKind::Use(path, UseKind::Single) = &item.kind;\n-            if let Res::Def(_, id) = path.res;\n-            if let Some(name) = self.renames.get(&id);\n-            // Remove semicolon since it is not present for nested imports\n-            let span_without_semi = cx.sess().source_map().span_until_char(item.span, ';');\n-            if let Some(snip) = snippet_opt(cx, span_without_semi);\n-            if let Some(import) = match snip.split_once(\" as \") {\n-                None => Some(snip.as_str()),\n-                Some((import, rename)) => {\n-                    if rename.trim() == name.as_str() {\n-                        None\n-                    } else {\n-                        Some(import.trim())\n+        if let ItemKind::Use(path, UseKind::Single) = &item.kind {\n+            for &res in &path.res {\n+                if_chain! {\n+                    if let Res::Def(_, id) = res;\n+                    if let Some(name) = self.renames.get(&id);\n+                    // Remove semicolon since it is not present for nested imports\n+                    let span_without_semi = cx.sess().source_map().span_until_char(item.span, ';');\n+                    if let Some(snip) = snippet_opt(cx, span_without_semi);\n+                    if let Some(import) = match snip.split_once(\" as \") {\n+                        None => Some(snip.as_str()),\n+                        Some((import, rename)) => {\n+                            if rename.trim() == name.as_str() {\n+                                None\n+                            } else {\n+                                Some(import.trim())\n+                            }\n+                        },\n+                    };\n+                    then {\n+                        span_lint_and_sugg(\n+                            cx,\n+                            MISSING_ENFORCED_IMPORT_RENAMES,\n+                            span_without_semi,\n+                            \"this import should be renamed\",\n+                            \"try\",\n+                            format!(\n+                                \"{import} as {name}\",\n+                            ),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n-                },\n-            };\n-            then {\n-                span_lint_and_sugg(\n-                    cx,\n-                    MISSING_ENFORCED_IMPORT_RENAMES,\n-                    span_without_semi,\n-                    \"this import should be renamed\",\n-                    \"try\",\n-                    format!(\n-                        \"{import} as {name}\",\n-                    ),\n-                    Applicability::MachineApplicable,\n-                );\n+                }\n             }\n         }\n     }"}, {"sha": "d612d249c2f000ab3c869952f1806ff491ac2450", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n \n fn is_not_macro_export<'tcx>(item: &'tcx Item<'tcx>) -> bool {\n     if let ItemKind::Use(path, _) = item.kind {\n-        if let Res::Def(DefKind::Macro(MacroKind::Bang), _) = path.res {\n+        if path.res.iter().all(|res| matches!(res, Res::Def(DefKind::Macro(MacroKind::Bang), _))) {\n             return false;\n         }\n     } else if let ItemKind::Macro(..) = item.kind {"}, {"sha": "d46f6a6352c63ead2b1418c911e887ce0eaefe4b", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -149,7 +149,7 @@ impl SingleComponentPathImports {\n \n                 // keep track of `use some_module;` usages\n                 if segments.len() == 1 {\n-                    if let UseTreeKind::Simple(None, _, _) = use_tree.kind {\n+                    if let UseTreeKind::Simple(None) = use_tree.kind {\n                         let name = segments[0].ident.name;\n                         if !macros.contains(&name) {\n                             single_use_usages.push(SingleUse {\n@@ -169,7 +169,7 @@ impl SingleComponentPathImports {\n                         for tree in trees {\n                             let segments = &tree.0.prefix.segments;\n                             if segments.len() == 1 {\n-                                if let UseTreeKind::Simple(None, _, _) = tree.0.kind {\n+                                if let UseTreeKind::Simple(None) = tree.0.kind {\n                                     let name = segments[0].ident.name;\n                                     if !macros.contains(&name) {\n                                         single_use_usages.push(SingleUse {"}, {"sha": "397633f533b22c767b3e1186d4f172c9341e31c2", "filename": "clippy_lints/src/unnecessary_self_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_self_imports.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -57,7 +57,7 @@ impl EarlyLintPass for UnnecessarySelfImports {\n                             format!(\n                                 \"{}{};\",\n                                 last_segment.ident,\n-                                if let UseTreeKind::Simple(Some(alias), ..) = self_tree.kind { format!(\" as {alias}\") } else { String::new() },\n+                                if let UseTreeKind::Simple(Some(alias)) = self_tree.kind { format!(\" as {alias}\") } else { String::new() },\n                             ),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "7ee785804f0a564ad9b2a68cc46d75022159aec5", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -39,7 +39,7 @@ impl EarlyLintPass for UnsafeNameRemoval {\n \n fn check_use_tree(use_tree: &UseTree, cx: &EarlyContext<'_>, span: Span) {\n     match use_tree.kind {\n-        UseTreeKind::Simple(Some(new_name), ..) => {\n+        UseTreeKind::Simple(Some(new_name)) => {\n             let old_name = use_tree\n                 .prefix\n                 .segments\n@@ -48,7 +48,7 @@ fn check_use_tree(use_tree: &UseTree, cx: &EarlyContext<'_>, span: Span) {\n                 .ident;\n             unsafe_to_safe_check(old_name, new_name, cx, span);\n         },\n-        UseTreeKind::Simple(None, ..) | UseTreeKind::Glob => {},\n+        UseTreeKind::Simple(None) | UseTreeKind::Glob => {},\n         UseTreeKind::Nested(ref nested_use_tree) => {\n             for (use_tree, _) in nested_use_tree {\n                 check_use_tree(use_tree, cx, span);"}, {"sha": "786d9608c851ee1001e1c59c36c1a0911e313544", "filename": "clippy_lints/src/utils/internal_lints/lint_without_lint_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Flint_without_lint_pass.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -330,7 +330,7 @@ struct LintCollector<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for LintCollector<'a, 'tcx> {\n     type NestedFilter = nested_filter::All;\n \n-    fn visit_path(&mut self, path: &'tcx Path<'_>, _: HirId) {\n+    fn visit_path(&mut self, path: &Path<'_>, _: HirId) {\n         if path.segments.len() == 1 {\n             self.output.insert(path.segments[0].ident.name);\n         }"}, {"sha": "857abe77e21f239c6225a1dd06b6d45348d38d5b", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -1019,7 +1019,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for ApplicabilityResolver<'a, 'hir> {\n         self.cx.tcx.hir()\n     }\n \n-    fn visit_path(&mut self, path: &'hir hir::Path<'hir>, _id: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'hir>, _id: hir::HirId) {\n         for (index, enum_value) in paths::APPLICABILITY_VALUES.iter().enumerate() {\n             if match_path(path, enum_value) {\n                 self.add_new_index(index);"}, {"sha": "e4d1ee195c4dfb10aed5eed874f7de6fe280d84d", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -176,7 +176,8 @@ impl LateLintPass<'_> for WildcardImports {\n                     format!(\"{import_source_snippet}::{imports_string}\")\n                 };\n \n-                let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res {\n+                // Glob imports always have a single resolution.\n+                let (lint, message) = if let Res::Def(DefKind::Enum, _) = use_path.res[0] {\n                     (ENUM_GLOB_USE, \"usage of wildcard import for enum variants\")\n                 } else {\n                     (WILDCARD_IMPORTS, \"usage of wildcard import\")"}, {"sha": "49e5f283db08904b5e273449a9f3696343dcab3a", "filename": "clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fast_utils.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -566,7 +566,7 @@ pub fn eq_use_tree_kind(l: &UseTreeKind, r: &UseTreeKind) -> bool {\n     use UseTreeKind::*;\n     match (l, r) {\n         (Glob, Glob) => true,\n-        (Simple(l, _, _), Simple(r, _, _)) => both(l, r, |l, r| eq_id(*l, *r)),\n+        (Simple(l), Simple(r)) => both(l, r, |l, r| eq_id(*l, *r)),\n         (Nested(l), Nested(r)) => over(l, r, |(l, _), (r, _)| eq_use_tree(l, r)),\n         _ => false,\n     }"}, {"sha": "ab3976a13bdbbf4f8524e965e209f62165f623ce", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -128,7 +128,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for BindingUsageFinder<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_path(&mut self, path: &'tcx hir::Path<'tcx>, _: hir::HirId) {\n+    fn visit_path(&mut self, path: &hir::Path<'tcx>, _: hir::HirId) {\n         if let hir::def::Res::Local(id) = path.res {\n             if self.binding_ids.contains(&id) {\n                 self.usage_found = true;"}, {"sha": "61843124ccd91f03e3b4cd760aeccb1b7fc40102", "filename": "tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1d22808af862062777d6330cb59b7afcbb6ae17/tests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a1d22808af862062777d6330cb59b7afcbb6ae17/tests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacro_use_imports.stderr?ref=a1d22808af862062777d6330cb59b7afcbb6ae17", "patch": "@@ -1,8 +1,8 @@\n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:23:5\n+  --> $DIR/macro_use_imports.rs:25:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n \n@@ -13,10 +13,10 @@ LL |     #[macro_use]\n    |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:25:5\n+  --> $DIR/macro_use_imports.rs:23:5\n    |\n LL |     #[macro_use]\n-   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n \n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n   --> $DIR/macro_use_imports.rs:19:5"}]}