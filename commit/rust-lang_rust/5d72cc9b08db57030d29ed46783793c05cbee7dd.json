{"sha": "5d72cc9b08db57030d29ed46783793c05cbee7dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkNzJjYzliMDhkYjU3MDMwZDI5ZWQ0Njc4Mzc5M2MwNWNiZWU3ZGQ=", "commit": {"author": {"name": "Benjamin Gill", "email": "git@bgill.eu", "date": "2017-08-18T17:11:15Z"}, "committer": {"name": "Benjamin Gill", "email": "git@bgill.eu", "date": "2017-08-20T04:04:12Z"}, "message": "Run Rustfmt-nightly", "tree": {"sha": "cd1fe1cb3f916ef02bd4f571d54e124db5416652", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd1fe1cb3f916ef02bd4f571d54e124db5416652"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d72cc9b08db57030d29ed46783793c05cbee7dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d72cc9b08db57030d29ed46783793c05cbee7dd", "html_url": "https://github.com/rust-lang/rust/commit/5d72cc9b08db57030d29ed46783793c05cbee7dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d72cc9b08db57030d29ed46783793c05cbee7dd/comments", "author": {"login": "bjgill", "id": 15256121, "node_id": "MDQ6VXNlcjE1MjU2MTIx", "avatar_url": "https://avatars.githubusercontent.com/u/15256121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjgill", "html_url": "https://github.com/bjgill", "followers_url": "https://api.github.com/users/bjgill/followers", "following_url": "https://api.github.com/users/bjgill/following{/other_user}", "gists_url": "https://api.github.com/users/bjgill/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjgill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjgill/subscriptions", "organizations_url": "https://api.github.com/users/bjgill/orgs", "repos_url": "https://api.github.com/users/bjgill/repos", "events_url": "https://api.github.com/users/bjgill/events{/privacy}", "received_events_url": "https://api.github.com/users/bjgill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjgill", "id": 15256121, "node_id": "MDQ6VXNlcjE1MjU2MTIx", "avatar_url": "https://avatars.githubusercontent.com/u/15256121?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjgill", "html_url": "https://github.com/bjgill", "followers_url": "https://api.github.com/users/bjgill/followers", "following_url": "https://api.github.com/users/bjgill/following{/other_user}", "gists_url": "https://api.github.com/users/bjgill/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjgill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjgill/subscriptions", "organizations_url": "https://api.github.com/users/bjgill/orgs", "repos_url": "https://api.github.com/users/bjgill/repos", "events_url": "https://api.github.com/users/bjgill/events{/privacy}", "received_events_url": "https://api.github.com/users/bjgill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1265b4647873932ede92cf06d6f2effc2f4f73b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1265b4647873932ede92cf06d6f2effc2f4f73b3", "html_url": "https://github.com/rust-lang/rust/commit/1265b4647873932ede92cf06d6f2effc2f4f73b3"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "d559ad14c333aafb84f5dbf33f933c11135fab5c", "filename": "src/main.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5d72cc9b08db57030d29ed46783793c05cbee7dd/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d72cc9b08db57030d29ed46783793c05cbee7dd/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=5d72cc9b08db57030d29ed46783793c05cbee7dd", "patch": "@@ -1,7 +1,6 @@\n // error-pattern:yummy\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n-\n #![allow(unknown_lints, missing_docs_in_private_items)]\n \n extern crate clippy_lints;\n@@ -12,9 +11,9 @@ extern crate rustc_errors;\n extern crate rustc_plugin;\n extern crate syntax;\n \n-use rustc_driver::{driver, CompilerCalls, RustcDefaultCalls, Compilation};\n-use rustc::session::{config, Session, CompileIncomplete};\n-use rustc::session::config::{Input, ErrorOutputType};\n+use rustc_driver::{driver, Compilation, CompilerCalls, RustcDefaultCalls};\n+use rustc::session::{config, CompileIncomplete, Session};\n+use rustc::session::config::{ErrorOutputType, Input};\n use std::collections::HashMap;\n use std::path::PathBuf;\n use std::process::{self, Command};\n@@ -200,9 +199,9 @@ pub fn main() {\n     if let Some(\"clippy\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n         // this arm is executed on the initial call to `cargo clippy`\n \n-        let manifest_path_arg = std::env::args().skip(2).find(|val| {\n-            val.starts_with(\"--manifest-path=\")\n-        });\n+        let manifest_path_arg = std::env::args()\n+            .skip(2)\n+            .find(|val| val.starts_with(\"--manifest-path=\"));\n \n         let mut metadata =\n             if let Ok(metadata) = cargo_metadata::metadata(manifest_path_arg.as_ref().map(AsRef::as_ref)) {\n@@ -218,15 +217,15 @@ pub fn main() {\n                 .expect(\"manifest path could not be canonicalized\")\n         });\n \n-        let packages = if std::env::args().any(|a| a == \"--all\" ) {\n+        let packages = if std::env::args().any(|a| a == \"--all\") {\n             metadata.packages\n         } else {\n             let package_index = {\n                 if let Some(manifest_path) = manifest_path {\n                     metadata.packages.iter().position(|package| {\n-                        let package_manifest_path = Path::new(&package.manifest_path).canonicalize().expect(\n-                            \"package manifest path could not be canonicalized\",\n-                        );\n+                        let package_manifest_path = Path::new(&package.manifest_path)\n+                            .canonicalize()\n+                            .expect(\"package manifest path could not be canonicalized\");\n                         package_manifest_path == manifest_path\n                     })\n                 } else {\n@@ -261,9 +260,9 @@ pub fn main() {\n                             // code\n                             // the call to `cargo_metadata::metadata` must have succeeded. So it's okay to\n                             // unwrap the current path's parent.\n-                            current_path = current_path.parent().unwrap_or_else(|| {\n-                                panic!(\"could not find parent of path {}\", current_path.display())\n-                            });\n+                            current_path = current_path\n+                                .parent()\n+                                .unwrap_or_else(|| panic!(\"could not find parent of path {}\", current_path.display()));\n                         }\n                     }\n                 }\n@@ -276,7 +275,9 @@ pub fn main() {\n             let manifest_path = package.manifest_path;\n \n             for target in package.targets {\n-                let args = std::env::args().skip(2).filter(|a| a != \"--all\" && !a.starts_with(\"--manifest-path=\"));\n+                let args = std::env::args()\n+                    .skip(2)\n+                    .filter(|a| a != \"--all\" && !a.starts_with(\"--manifest-path=\"));\n \n                 let args = std::iter::once(format!(\"--manifest-path={}\", manifest_path)).chain(args);\n                 if let Some(first) = target.kind.get(0) {\n@@ -289,8 +290,7 @@ pub fn main() {\n                             vec![format!(\"--{}\", first), target.name]\n                                 .into_iter()\n                                 .chain(args),\n-                        )\n-                        {\n+                        ) {\n                             std::process::exit(code);\n                         }\n                     }"}]}