{"sha": "b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5YmY5ZWYzYzJkYWIyZDM4Zjk2NGYxMzE1NGU1MTc1MTVlOGUyZjM=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-26T18:30:00Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2020-09-26T18:30:00Z"}, "message": "Remove remaining derived traits", "tree": {"sha": "8c8338088a59a73094fa8dcf8ac8095c9380e906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c8338088a59a73094fa8dcf8ac8095c9380e906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "html_url": "https://github.com/rust-lang/rust/commit/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d817b56f1d7d485e7a2e466730adf2a618e3b077", "url": "https://api.github.com/repos/rust-lang/rust/commits/d817b56f1d7d485e7a2e466730adf2a618e3b077", "html_url": "https://github.com/rust-lang/rust/commit/d817b56f1d7d485e7a2e466730adf2a618e3b077"}], "stats": {"total": 174, "additions": 81, "deletions": 93}, "files": [{"sha": "165029cca5e988465a98e75968ed2d7e5daffe99", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -207,6 +207,28 @@ macro_rules! base_vector_traits {\n     }\n }\n \n+/// Implements additional integer traits (Eq, Ord, Hash) on the specified vector `$name`, holding multiple `$lanes` of `$type`.\n+macro_rules! integer_vector_traits {\n+    { $name:path => [$type:ty; $lanes:literal] } => {\n+        impl Eq for $name {}\n+\n+        impl Ord for $name {\n+            fn cmp(&self, other: &Self) -> core::cmp::Ordering {\n+                AsRef::<[$type]>::as_ref(self).cmp(AsRef::<[$type]>::as_ref(other))\n+            }\n+        }\n+\n+        impl core::hash::Hash for $name {\n+            fn hash<H>(&self, state: &mut H)\n+            where\n+                H: core::hash::Hasher\n+            {\n+                AsRef::<[$type]>::as_ref(self).hash(state)\n+            }\n+        }\n+    }\n+}\n+\n /// Defines a vector `$name` containing multiple `$lanes` of `$type`.\n macro_rules! define_vector {\n     { $(#[$attr:meta])* struct $name:ident([$type:ty; $lanes:tt]); } => {\n@@ -242,6 +264,18 @@ macro_rules! define_vector {\n     }\n }\n \n+/// Defines an integer vector `$name` containing multiple `$lanes` of integer `$type`.\n+macro_rules! define_integer_vector {\n+    { $(#[$attr:meta])* struct $name:ident([$type:ty; $lanes:tt]); } => {\n+        define_vector! {\n+            $(#[$attr])*\n+            struct $name([$type; $lanes]);\n+        }\n+\n+        integer_vector_traits! { $name => [$type; $lanes] }\n+    }\n+}\n+\n /// Defines a mask vector `$name` containing multiple `$lanes` of `$type`, represented by the\n /// underlying type `$impl_type`.\n macro_rules! define_mask_vector {\n@@ -254,11 +288,11 @@ macro_rules! define_mask_vector {\n         }\n \n         base_vector_traits! { $name => [$type; $lanes] }\n+        integer_vector_traits! { $name => [$type; $lanes] }\n     };\n     { def $(#[$attr:meta])* | $name:ident | $($itype:ty)* } => {\n         $(#[$attr])*\n         #[allow(non_camel_case_types)]\n-        #[derive(Eq, Ord)]\n         #[repr(simd)]\n         pub struct $name($($itype),*);\n     };"}, {"sha": "5c8354070e819c8092f755f6af6ed5a61e49dbc2", "filename": "crates/core_simd/src/vectors_i128.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i128.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,12 +1,10 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `i128` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i128x2([i128; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `i128` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i128x4([i128; 4]);\n }\n "}, {"sha": "011820e19c712e9b7b16b3d8438441dca6af988b", "filename": "crates/core_simd/src/vectors_i16.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i16.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,30 +1,25 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `i16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i16x2([i16; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `i16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i16x4([i16; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `i16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i16x8([i16; 8]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 16 `i16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i16x16([i16; 16]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 32 `i16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i16x32([i16; 32]);\n }\n "}, {"sha": "9aa9bc8e9dc83ab30a45c49da61b38540c3ea7d8", "filename": "crates/core_simd/src/vectors_i32.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i32.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,24 +1,20 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `i32` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i32x2([i32; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `i32` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i32x4([i32; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `i32` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i32x8([i32; 8]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 16 `i32` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i32x16([i32; 16]);\n }\n "}, {"sha": "ba66aba2095d86bba1868fb1026d012d63df1745", "filename": "crates/core_simd/src/vectors_i64.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i64.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,18 +1,15 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `i64` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i64x2([i64; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `i64` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i64x4([i64; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `i64` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i64x8([i64; 8]);\n }\n "}, {"sha": "fb739bc44fa80314c6f5758ba06271d3d57a4ff0", "filename": "crates/core_simd/src/vectors_i8.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_i8.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,36 +1,30 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `i8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i8x2([i8; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `i8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i8x4([i8; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `i8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i8x8([i8; 8]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 16 `i8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i8x16([i8; 16]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 32 `i8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i8x32([i8; 32]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 64 `i8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct i8x64([i8; 64]);\n }\n "}, {"sha": "35dac8bcbd457f8fd5d53c69553a29469d92b0bb", "filename": "crates/core_simd/src/vectors_isize.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_isize.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,18 +1,15 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `isize` values\n-    #[derive(Eq, Ord, Hash)]\n     struct isizex2([isize; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `isize` values\n-    #[derive(Eq, Ord, Hash)]\n     struct isizex4([isize; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `isize` values\n-    #[derive(Eq, Ord, Hash)]\n     struct isizex8([isize; 8]);\n }\n "}, {"sha": "eec7bde1722f7fe29bdce7722a9e5e8216caa802", "filename": "crates/core_simd/src/vectors_u128.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u128.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,12 +1,10 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `u128` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u128x2([u128; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `u128` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u128x4([u128; 4]);\n }\n "}, {"sha": "9e846a32efad382b323617ed5f03eec980c2b81b", "filename": "crates/core_simd/src/vectors_u16.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u16.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,30 +1,25 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `u16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u16x2([u16; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `u16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u16x4([u16; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `u16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u16x8([u16; 8]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 16 `u16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u16x16([u16; 16]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 32 `u16` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u16x32([u16; 32]);\n }\n "}, {"sha": "b00c63d9058ffa5f75176104db821cd9ab6f1c6c", "filename": "crates/core_simd/src/vectors_u32.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u32.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,24 +1,20 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `u32` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u32x2([u32; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `u32` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u32x4([u32; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `u32` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u32x8([u32; 8]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 16 `u32` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u32x16([u32; 16]);\n }\n "}, {"sha": "0bcf28ebc265af0ad7ddd9a43575f65947e13f8b", "filename": "crates/core_simd/src/vectors_u64.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u64.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,18 +1,15 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `u64` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u64x2([u64; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `u64` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u64x4([u64; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `u64` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u64x8([u64; 8]);\n }\n "}, {"sha": "d70de1a24c9d03d8bd7613c1f38b86acec00fc4e", "filename": "crates/core_simd/src/vectors_u8.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_u8.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,36 +1,30 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `u8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u8x2([u8; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `u8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u8x4([u8; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `u8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u8x8([u8; 8]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 16 `u8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u8x16([u8; 16]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 32 `u8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u8x32([u8; 32]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of 64 `u8` values\n-    #[derive(Eq, Ord, Hash)]\n     struct u8x64([u8; 64]);\n }\n "}, {"sha": "84a4b8e509b396db6fa11973c1a35a818a49c56a", "filename": "crates/core_simd/src/vectors_usize.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9bf9ef3c2dab2d38f964f13154e517515e8e2f3/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvectors_usize.rs?ref=b9bf9ef3c2dab2d38f964f13154e517515e8e2f3", "patch": "@@ -1,18 +1,15 @@\n-define_vector! {\n+define_integer_vector! {\n     /// Vector of two `usize` values\n-    #[derive(Eq, Ord, Hash)]\n     struct usizex2([usize; 2]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of four `usize` values\n-    #[derive(Eq, Ord, Hash)]\n     struct usizex4([usize; 4]);\n }\n \n-define_vector! {\n+define_integer_vector! {\n     /// Vector of eight `usize` values\n-    #[derive(Eq, Ord, Hash)]\n     struct usizex8([usize; 8]);\n }\n "}]}