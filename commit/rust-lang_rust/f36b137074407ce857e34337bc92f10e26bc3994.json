{"sha": "f36b137074407ce857e34337bc92f10e26bc3994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNmIxMzcwNzQ0MDdjZTg1N2UzNDMzN2JjOTJmMTBlMjZiYzM5OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-21T05:47:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-21T05:47:24Z"}, "message": "Auto merge of #85060 - ChrisDenton:win-file-exists, r=yaahc\n\nWindows implementation of feature `path_try_exists`\n\nDraft of a Windows implementation of `try_exists` (#83186).\n\nThe first commit reorganizes the code so I would be interested to get some feedback on if this is a good idea or not. It moves the `Path::try_exists` function to `fs::exists`. leaving the former as a wrapper for the latter. This makes it easier to provide platform specific implementations and matches the `fs::metadata` function.\n\nThe other commit implements a Windows specific variant of `exists`. I'm still figuring out my approach so this is very much a first draft. Eventually this will need some more eyes from knowledgable Windows people.", "tree": {"sha": "728ac4c791398ad6823f907277cff58f53b519cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/728ac4c791398ad6823f907277cff58f53b519cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f36b137074407ce857e34337bc92f10e26bc3994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f36b137074407ce857e34337bc92f10e26bc3994", "html_url": "https://github.com/rust-lang/rust/commit/f36b137074407ce857e34337bc92f10e26bc3994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f36b137074407ce857e34337bc92f10e26bc3994/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f5a198ffc0b624783a81e57e1d29c69283949c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f5a198ffc0b624783a81e57e1d29c69283949c1", "html_url": "https://github.com/rust-lang/rust/commit/6f5a198ffc0b624783a81e57e1d29c69283949c1"}, {"sha": "86dbc063ab15e67b2b7ed5411eb9fec9f7afbcb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/86dbc063ab15e67b2b7ed5411eb9fec9f7afbcb4", "html_url": "https://github.com/rust-lang/rust/commit/86dbc063ab15e67b2b7ed5411eb9fec9f7afbcb4"}], "stats": {"total": 80, "additions": 72, "deletions": 8}, "files": [{"sha": "a1636e2f604cf772a547048a2f3ac7903de09031", "filename": "library/std/src/fs.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs.rs?ref=f36b137074407ce857e34337bc92f10e26bc3994", "patch": "@@ -2208,3 +2208,29 @@ impl AsInnerMut<fs_imp::DirBuilder> for DirBuilder {\n         &mut self.inner\n     }\n }\n+\n+/// Returns `Ok(true)` if the path points at an existing entity.\n+///\n+/// This function will traverse symbolic links to query information about the\n+/// destination file. In case of broken symbolic links this will return `Ok(false)`.\n+///\n+/// As opposed to the `exists()` method, this one doesn't silently ignore errors\n+/// unrelated to the path not existing. (E.g. it will return `Err(_)` in case of permission\n+/// denied on some of the parent directories.)\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// #![feature(path_try_exists)]\n+/// use std::fs;\n+///\n+/// assert!(!fs::try_exists(\"does_not_exist.txt\").expect(\"Can't check existence of file does_not_exist.txt\"));\n+/// assert!(fs::try_exists(\"/root/secret_file.txt\").is_err());\n+/// ```\n+// FIXME: stabilization should modify documentation of `exists()` to recommend this method\n+// instead.\n+#[unstable(feature = \"path_try_exists\", issue = \"83186\")]\n+#[inline]\n+pub fn try_exists<P: AsRef<Path>>(path: P) -> io::Result<bool> {\n+    fs_imp::try_exists(path.as_ref())\n+}"}, {"sha": "9c5615f58c4363274b00a1e42f3c4f46b371bb64", "filename": "library/std/src/path.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=f36b137074407ce857e34337bc92f10e26bc3994", "patch": "@@ -2507,11 +2507,7 @@ impl Path {\n     #[unstable(feature = \"path_try_exists\", issue = \"83186\")]\n     #[inline]\n     pub fn try_exists(&self) -> io::Result<bool> {\n-        match fs::metadata(self) {\n-            Ok(_) => Ok(true),\n-            Err(error) if error.kind() == io::ErrorKind::NotFound => Ok(false),\n-            Err(error) => Err(error),\n-        }\n+        fs::try_exists(self)\n     }\n \n     /// Returns `true` if the path exists on disk and is pointing at a regular file."}, {"sha": "76ea70d997f5d7044ed0479354142d45def9b956", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=f36b137074407ce857e34337bc92f10e26bc3994", "patch": "@@ -12,7 +12,7 @@ use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n use crate::sys_common::os_str_bytes::OsStrExt;\n \n-pub use crate::sys_common::fs::copy;\n+pub use crate::sys_common::fs::{copy, try_exists};\n //pub use crate::sys_common::fs::remove_dir_all;\n \n fn cstr(path: &Path) -> io::Result<CString> {"}, {"sha": "ef14865fbcd39dc174197f68b21a1cd26896fb2a", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=f36b137074407ce857e34337bc92f10e26bc3994", "patch": "@@ -48,7 +48,7 @@ use libc::{\n     dirent64, fstat64, ftruncate64, lseek64, lstat64, off64_t, open64, readdir64_r, stat64,\n };\n \n-pub use crate::sys_common::fs::remove_dir_all;\n+pub use crate::sys_common::fs::{remove_dir_all, try_exists};\n \n pub struct File(FileDesc);\n "}, {"sha": "6b45e29c1458e25c789d10e845a685be09cea970", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=f36b137074407ce857e34337bc92f10e26bc3994", "patch": "@@ -275,6 +275,10 @@ pub fn remove_dir_all(_path: &Path) -> io::Result<()> {\n     unsupported()\n }\n \n+pub fn try_exists(_path: &Path) -> io::Result<bool> {\n+    unsupported()\n+}\n+\n pub fn readlink(_p: &Path) -> io::Result<PathBuf> {\n     unsupported()\n }"}, {"sha": "45e38f68b8c37882bcb49e2ae8f3e81df7dcab7d", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=f36b137074407ce857e34337bc92f10e26bc3994", "patch": "@@ -14,7 +14,7 @@ use crate::sys::time::SystemTime;\n use crate::sys::unsupported;\n use crate::sys_common::FromInner;\n \n-pub use crate::sys_common::fs::remove_dir_all;\n+pub use crate::sys_common::fs::{remove_dir_all, try_exists};\n \n pub struct File {\n     fd: WasiFd,"}, {"sha": "50d6e8cf27a4054067b214285a12178c7acc1c33", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=f36b137074407ce857e34337bc92f10e26bc3994", "patch": "@@ -173,6 +173,7 @@ pub const ERROR_INVALID_HANDLE: DWORD = 6;\n pub const ERROR_NOT_ENOUGH_MEMORY: DWORD = 8;\n pub const ERROR_OUTOFMEMORY: DWORD = 14;\n pub const ERROR_NO_MORE_FILES: DWORD = 18;\n+pub const ERROR_SHARING_VIOLATION: u32 = 32;\n pub const ERROR_HANDLE_EOF: DWORD = 38;\n pub const ERROR_FILE_EXISTS: DWORD = 80;\n pub const ERROR_INVALID_PARAMETER: DWORD = 87;"}, {"sha": "2b6143de96056f44d8ebdb09457366c892430267", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=f36b137074407ce857e34337bc92f10e26bc3994", "patch": "@@ -944,3 +944,32 @@ fn symlink_junction_inner(original: &Path, junction: &Path) -> io::Result<()> {\n         .map(drop)\n     }\n }\n+\n+// Try to see if a file exists but, unlike `exists`, report I/O errors.\n+pub fn try_exists(path: &Path) -> io::Result<bool> {\n+    // Open the file to ensure any symlinks are followed to their target.\n+    let mut opts = OpenOptions::new();\n+    // No read, write, etc access rights are needed.\n+    opts.access_mode(0);\n+    // Backup semantics enables opening directories as well as files.\n+    opts.custom_flags(c::FILE_FLAG_BACKUP_SEMANTICS);\n+    match File::open(path, &opts) {\n+        Err(e) => match e.kind() {\n+            // The file definitely does not exist\n+            io::ErrorKind::NotFound => Ok(false),\n+\n+            // `ERROR_SHARING_VIOLATION` means that the file has been locked by\n+            // another process. This is often temporary so we simply report it\n+            // as the file existing.\n+            io::ErrorKind::Other if e.raw_os_error() == Some(c::ERROR_SHARING_VIOLATION as i32) => {\n+                Ok(true)\n+            }\n+            // Other errors such as `ERROR_ACCESS_DENIED` may indicate that the\n+            // file exists. However, these types of errors are usually more\n+            // permanent so we report them here.\n+            _ => Err(e),\n+        },\n+        // The file was opened successfully therefore it must exist,\n+        Ok(_) => Ok(true),\n+    }\n+}"}, {"sha": "309f5483874e00c7b8d16b582905a78edfce3862", "filename": "library/std/src/sys_common/fs.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys_common%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f36b137074407ce857e34337bc92f10e26bc3994/library%2Fstd%2Fsrc%2Fsys_common%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Ffs.rs?ref=f36b137074407ce857e34337bc92f10e26bc3994", "patch": "@@ -41,3 +41,11 @@ fn remove_dir_all_recursive(path: &Path) -> io::Result<()> {\n     }\n     fs::remove_dir(path)\n }\n+\n+pub fn try_exists(path: &Path) -> io::Result<bool> {\n+    match fs::metadata(path) {\n+        Ok(_) => Ok(true),\n+        Err(error) if error.kind() == io::ErrorKind::NotFound => Ok(false),\n+        Err(error) => Err(error),\n+    }\n+}"}]}