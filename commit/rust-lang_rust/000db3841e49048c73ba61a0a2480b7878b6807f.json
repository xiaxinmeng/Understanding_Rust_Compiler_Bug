{"sha": "000db3841e49048c73ba61a0a2480b7878b6807f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMGRiMzg0MWU0OTA0OGM3M2JhNjFhMGEyNDgwYjc4NzhiNjgwN2Y=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-03-20T13:09:00Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-04-03T21:21:58Z"}, "message": "Rebase fallout", "tree": {"sha": "d4da772aaf20e4e233279e489c41bcac373932c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4da772aaf20e4e233279e489c41bcac373932c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000db3841e49048c73ba61a0a2480b7878b6807f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000db3841e49048c73ba61a0a2480b7878b6807f", "html_url": "https://github.com/rust-lang/rust/commit/000db3841e49048c73ba61a0a2480b7878b6807f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000db3841e49048c73ba61a0a2480b7878b6807f/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea04cdfbe86cb4553d0fd26f727728d395013def", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea04cdfbe86cb4553d0fd26f727728d395013def", "html_url": "https://github.com/rust-lang/rust/commit/ea04cdfbe86cb4553d0fd26f727728d395013def"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "7c51a193b984b0a61192593e78e2086f1a8e7684", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=000db3841e49048c73ba61a0a2480b7878b6807f", "patch": "@@ -39,7 +39,7 @@ use middle::astencode;\n use middle::cfg;\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n-use middle::subst::{Subst, Substs};\n+use middle::subst::Substs;\n use middle::ty::{self, Ty, ClosureTyper, type_is_simd, simd_size};\n use session::config::{self, NoDebugInfo};\n use session::Session;"}, {"sha": "eb4acec25510ac7f28370210cfeced6fc5562f34", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=000db3841e49048c73ba61a0a2480b7878b6807f", "patch": "@@ -386,7 +386,10 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n \n     // Create the by-value helper.\n     let function_name = link::mangle_internal_name_by_type_and_seq(ccx, llonce_fn_ty, \"once_shim\");\n-    let lloncefn = decl_internal_rust_fn(ccx, llonce_fn_ty, &function_name);\n+    let lloncefn = declare::define_internal_rust_fn(ccx, &function_name[..], llonce_fn_ty)\n+        .unwrap_or_else(||{\n+            ccx.sess().bug(&format!(\"symbol `{}` already defined\", function_name));\n+        });\n \n     let sig = ty::erase_late_bound_regions(tcx, &llonce_bare_fn_ty.sig);\n     let (block_arena, fcx): (TypedArena<_>, FunctionContext);"}, {"sha": "aff5f597bfd9fbb91ef38977555cbe3861fb07d5", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=000db3841e49048c73ba61a0a2480b7878b6807f", "patch": "@@ -85,7 +85,7 @@ pub fn const_lit(cx: &CrateContext, e: &ast::Expr, lit: &ast::Lit)\n         ast::LitBool(b) => C_bool(cx, b),\n         ast::LitStr(ref s, _) => C_str_slice(cx, (*s).clone()),\n         ast::LitBinary(ref data) => {\n-            addr_of(cx, C_bytes(cx, &data[..]), \"binary\", e.id)\n+            addr_of(cx, C_bytes(cx, &data[..]), \"binary\")\n         }\n     }\n }"}, {"sha": "f974796e69cadb7462957d30a81cc67f107e010d", "filename": "src/librustc_trans/trans/glue.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Flibrustc_trans%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fglue.rs?ref=000db3841e49048c73ba61a0a2480b7878b6807f", "patch": "@@ -30,7 +30,6 @@ use trans::callee;\n use trans::cleanup;\n use trans::cleanup::CleanupMethods;\n use trans::common::*;\n-use trans::consts;\n use trans::datum;\n use trans::debuginfo::DebugLoc;\n use trans::declare;\n@@ -39,8 +38,7 @@ use trans::foreign;\n use trans::inline;\n use trans::machine::*;\n use trans::monomorphize;\n-use trans::tvec;\n-use trans::type_of::{type_of, sizing_type_of, align_of};\n+use trans::type_of::{type_of, type_of_dtor, sizing_type_of, align_of};\n use trans::type_::Type;\n use util::ppaux;\n use util::ppaux::{ty_to_short_str, Repr};\n@@ -191,8 +189,9 @@ pub fn get_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Val\n     };\n \n     let fn_nm = mangle_internal_name_by_type_and_seq(ccx, t, \"drop\");\n-    let llfn = decl_cdecl_fn(ccx, &fn_nm, llfnty, ty::mk_nil(ccx.tcx()));\n-    note_unique_llvm_symbol(ccx, fn_nm.clone());\n+    let llfn = declare::define_cfn(ccx, &fn_nm, llfnty, ty::mk_nil(ccx.tcx())).unwrap_or_else(||{\n+       ccx.sess().bug(&format!(\"symbol `{}` already defined\", fn_nm));\n+    });\n     ccx.available_drop_glues().borrow_mut().insert(t, fn_nm);\n \n     let _s = StatRecorder::new(ccx, format!(\"drop {}\", ty_to_short_str(ccx.tcx(), t)));"}, {"sha": "9e730699d2514339f4a5b669aafdb094993d0986", "filename": "src/test/compile-fail/dupe-symbols-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000db3841e49048c73ba61a0a2480b7878b6807f/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdupe-symbols-4.rs?ref=000db3841e49048c73ba61a0a2480b7878b6807f", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n+// error-pattern: symbol `fail` is already defined\n #![crate_type=\"rlib\"]\n #![allow(warnings)]\n \n@@ -27,5 +28,4 @@ impl A for B {\n impl A for C {\n     #[no_mangle]\n     fn fail(self) {}\n-    //~^ symbol `fail` is already defined\n }"}]}