{"sha": "7732e621f49a91cb9dd5d788d333da4f6618f39e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MzJlNjIxZjQ5YTkxY2I5ZGQ1ZDc4OGQzMzNkYTRmNjYxOGYzOWU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-09-29T04:40:32Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-09-30T19:54:53Z"}, "message": "Simplify logic around Context's root_path.\n\nWas previously cached and maintained in the `Context`, which to me seems\noverkill.", "tree": {"sha": "ad22e4a323015824bf543c0c06caa0fc9b27d088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad22e4a323015824bf543c0c06caa0fc9b27d088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7732e621f49a91cb9dd5d788d333da4f6618f39e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7732e621f49a91cb9dd5d788d333da4f6618f39e", "html_url": "https://github.com/rust-lang/rust/commit/7732e621f49a91cb9dd5d788d333da4f6618f39e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7732e621f49a91cb9dd5d788d333da4f6618f39e/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c66c4533d115635dae58108f8e6fa03ef4ff511e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c66c4533d115635dae58108f8e6fa03ef4ff511e", "html_url": "https://github.com/rust-lang/rust/commit/c66c4533d115635dae58108f8e6fa03ef4ff511e"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "46461226381a3e04b5fb314f94fdc9a92d7d45ea", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7732e621f49a91cb9dd5d788d333da4f6618f39e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7732e621f49a91cb9dd5d788d333da4f6618f39e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=7732e621f49a91cb9dd5d788d333da4f6618f39e", "patch": "@@ -89,9 +89,6 @@ pub struct Context {\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n     pub current: Vec<String>,\n-    /// String representation of how to get back to the root path of the 'doc/'\n-    /// folder in terms of a relative URL.\n-    pub root_path: String,\n     /// The current destination folder of where HTML artifacts should be placed.\n     /// This changes as the context descends into the module hierarchy.\n     pub dst: PathBuf,\n@@ -496,7 +493,6 @@ pub fn run(mut krate: clean::Crate,\n     krate = render_sources(&dst, &mut scx, krate)?;\n     let cx = Context {\n         current: Vec::new(),\n-        root_path: String::new(),\n         dst: dst,\n         render_redirect_pages: false,\n         shared: Arc::new(scx),\n@@ -1225,6 +1221,12 @@ impl<'a> Cache {\n }\n \n impl Context {\n+    /// String representation of how to get back to the root path of the 'doc/'\n+    /// folder in terms of a relative URL.\n+    fn root_path(&self) -> String {\n+        repeat(\"../\").take(self.current.len()).collect::<String>()\n+    }\n+\n     /// Recurse in the directory structure and change the \"root path\" to make\n     /// sure it always points to the top (relatively)\n     fn recurse<T, F>(&mut self, s: String, f: F) -> T where\n@@ -1235,7 +1237,6 @@ impl Context {\n         }\n         let prev = self.dst.clone();\n         self.dst.push(&s);\n-        self.root_path.push_str(\"../\");\n         self.current.push(s);\n \n         info!(\"Recursing into {}\", self.dst.display());\n@@ -1246,8 +1247,6 @@ impl Context {\n \n         // Go back to where we were at\n         self.dst = prev;\n-        let len = self.root_path.len();\n-        self.root_path.truncate(len - 3);\n         self.current.pop().unwrap();\n \n         return ret;\n@@ -1310,7 +1309,7 @@ impl Context {\n         let keywords = make_item_keywords(it);\n         let page = layout::Page {\n             css_class: tyname,\n-            root_path: &self.root_path,\n+            root_path: &self.root_path(),\n             title: &title,\n             description: &desc,\n             keywords: &keywords,\n@@ -1324,8 +1323,7 @@ impl Context {\n                            &Item{ cx: self, item: it },\n                            self.shared.css_file_extension.is_some())?;\n         } else {\n-            let mut url = repeat(\"../\").take(self.current.len())\n-                                       .collect::<String>();\n+            let mut url = self.root_path();\n             if let Some(&(ref names, ty)) = cache().paths.get(&it.def_id) {\n                 for name in &names[..names.len() - 1] {\n                     url.push_str(name);\n@@ -1487,7 +1485,7 @@ impl<'a> Item<'a> {\n             }).map(|l| &l.1);\n             let root = match root {\n                 Some(&Remote(ref s)) => s.to_string(),\n-                Some(&Local) => self.cx.root_path.clone(),\n+                Some(&Local) => self.cx.root_path(),\n                 None | Some(&Unknown) => return None,\n             };\n             Some(format!(\"{root}/{krate}/macro.{name}.html?gotomacrosrc=1\",\n@@ -1502,7 +1500,7 @@ impl<'a> Item<'a> {\n             let path = PathBuf::from(&self.item.source.filename);\n             self.cx.shared.local_sources.get(&path).map(|path| {\n                 format!(\"{root}src/{krate}/{path}#{href}\",\n-                        root = self.cx.root_path,\n+                        root = self.cx.root_path(),\n                         krate = self.cx.shared.layout.krate,\n                         path = path,\n                         href = href)\n@@ -1526,7 +1524,7 @@ impl<'a> Item<'a> {\n             };\n             let mut path = match cache.extern_locations.get(&self.item.def_id.krate) {\n                 Some(&(_, Remote(ref s))) => s.to_string(),\n-                Some(&(_, Local)) => self.cx.root_path.clone(),\n+                Some(&(_, Local)) => self.cx.root_path(),\n                 Some(&(_, Unknown)) => return None,\n                 None => return None,\n             };\n@@ -2913,7 +2911,7 @@ impl<'a> fmt::Display for Sidebar<'a> {\n                 write!(fmt, \"::<wbr>\")?;\n             }\n             write!(fmt, \"<a href='{}index.html'>{}</a>\",\n-                   &cx.root_path[..(cx.current.len() - i - 1) * 3],\n+                   &cx.root_path()[..(cx.current.len() - i - 1) * 3],\n                    *name)?;\n         }\n         write!(fmt, \"</p>\")?;"}]}