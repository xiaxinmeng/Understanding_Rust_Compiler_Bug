{"sha": "9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3", "node_id": "C_kwDOAAsO6NoAKDlhNGZjZTk3OGRjYjc3Y2I4OGY2ZDhkYzllNmYyNWU5OTE1NWVkZTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-27T18:40:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-27T18:40:29Z"}, "message": "Rollup merge of #111946 - nicklimmm:askama-item-template-trait, r=GuillaumeGomez\n\nrustdoc: Add `ItemTemplate` trait and related functions to avoid repetitively wrapping existing functions\n\nContext: https://github.com/rust-lang/rust/pull/111430#discussion_r1200672507\n\nThis trait will be used extensively in performing migrations to Askama templates (tracking issue: https://github.com/rust-lang/rust/issues/108868)", "tree": {"sha": "19e6737b45b7753725a487a27a6b96826dee26a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e6737b45b7753725a487a27a6b96826dee26a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkck6dCRBK7hj4Ov3rIwAA5YIIAKFhAxGYUmem6mXfaaBzyUCR\nnawgRYkVn83nttq29IsCZi47TiggXTy+Pnirp+oZS/+3J5ybvj7iIzOg9FzY1RYD\nmbzoPy67Vm22DNAPGQd6qRD73DJC61/MDn/z9Wsmb5R2vjJHJ4dphlemFYT2xCS+\nf63Lr/0ISdNVkaEhjDTSbXCi5zD6li2reQhMKoWgoG5VQerDrYglHlKhub9AcomV\nAM8JBSLWzSU9k8YmVYyqgzrESUAjyAxjmVZEQTmKHnHp6DM1F7kzzSiXfDoEEPIG\nf66ZQZ8xmzAPC76IKyI7wR/GSYsaPJD1kVRwvOXHcUqxTM/M5iH39pJ+3DmwsRw=\n=aNgh\n-----END PGP SIGNATURE-----\n", "payload": "tree 19e6737b45b7753725a487a27a6b96826dee26a3\nparent 5a4c04cc2cddb3d0da846096494a723315dd2975\nparent fbdc5118d55c05a7dfa1017c3f3ec2c1c9370d6e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685212829 +0200\ncommitter GitHub <noreply@github.com> 1685212829 +0200\n\nRollup merge of #111946 - nicklimmm:askama-item-template-trait, r=GuillaumeGomez\n\nrustdoc: Add `ItemTemplate` trait and related functions to avoid repetitively wrapping existing functions\n\nContext: https://github.com/rust-lang/rust/pull/111430#discussion_r1200672507\n\nThis trait will be used extensively in performing migrations to Askama templates (tracking issue: https://github.com/rust-lang/rust/issues/108868)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3", "html_url": "https://github.com/rust-lang/rust/commit/9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a4c04cc2cddb3d0da846096494a723315dd2975", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4c04cc2cddb3d0da846096494a723315dd2975", "html_url": "https://github.com/rust-lang/rust/commit/5a4c04cc2cddb3d0da846096494a723315dd2975"}, {"sha": "fbdc5118d55c05a7dfa1017c3f3ec2c1c9370d6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdc5118d55c05a7dfa1017c3f3ec2c1c9370d6e", "html_url": "https://github.com/rust-lang/rust/commit/fbdc5118d55c05a7dfa1017c3f3ec2c1c9370d6e"}], "stats": {"total": 103, "additions": 61, "deletions": 42}, "files": [{"sha": "a26c21680d0248d3a8fd9d64c85727f6eb785890", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 57, "deletions": 38, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3", "patch": "@@ -9,6 +9,8 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n+use std::borrow::Borrow;\n+use std::cell::{RefCell, RefMut};\n use std::cmp::Ordering;\n use std::fmt;\n use std::rc::Rc;\n@@ -216,6 +218,53 @@ fn toggle_close(mut w: impl fmt::Write) {\n     w.write_str(\"</details>\").unwrap();\n }\n \n+trait ItemTemplate<'a, 'cx: 'a>: askama::Template + fmt::Display {\n+    fn item_and_mut_cx(&self) -> (&'a clean::Item, RefMut<'_, &'a mut Context<'cx>>);\n+}\n+\n+fn item_template_document<'a: 'b, 'b, 'cx: 'a>(\n+    templ: &'b impl ItemTemplate<'a, 'cx>,\n+) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n+    display_fn(move |f| {\n+        let (item, mut cx) = templ.item_and_mut_cx();\n+        let v = document(*cx, item, None, HeadingOffset::H2);\n+        write!(f, \"{v}\")\n+    })\n+}\n+\n+fn item_template_document_type_layout<'a: 'b, 'b, 'cx: 'a>(\n+    templ: &'b impl ItemTemplate<'a, 'cx>,\n+) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n+    display_fn(move |f| {\n+        let (item, cx) = templ.item_and_mut_cx();\n+        let def_id = item.item_id.expect_def_id();\n+        let v = document_type_layout(*cx, def_id);\n+        write!(f, \"{v}\")\n+    })\n+}\n+\n+fn item_template_render_attributes_in_pre<'a: 'b, 'b, 'cx: 'a>(\n+    templ: &'b impl ItemTemplate<'a, 'cx>,\n+) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n+    display_fn(move |f| {\n+        let (item, cx) = templ.item_and_mut_cx();\n+        let tcx = cx.tcx();\n+        let v = render_attributes_in_pre(item, \"\", tcx);\n+        write!(f, \"{v}\")\n+    })\n+}\n+\n+fn item_template_render_assoc_items<'a: 'b, 'b, 'cx: 'a>(\n+    templ: &'b impl ItemTemplate<'a, 'cx>,\n+) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n+    display_fn(move |f| {\n+        let (item, mut cx) = templ.item_and_mut_cx();\n+        let def_id = item.item_id.expect_def_id();\n+        let v = render_assoc_items(*cx, item, def_id, AssocItemRender::All);\n+        write!(f, \"{v}\")\n+    })\n+}\n+\n fn item_module(w: &mut Buffer, cx: &mut Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n     write!(w, \"{}\", document(cx, item, None, HeadingOffset::H2));\n \n@@ -1131,55 +1180,25 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n     #[derive(Template)]\n     #[template(path = \"item_union.html\")]\n     struct ItemUnion<'a, 'cx> {\n-        cx: std::cell::RefCell<&'a mut Context<'cx>>,\n+        cx: RefCell<&'a mut Context<'cx>>,\n         it: &'a clean::Item,\n         s: &'a clean::Union,\n     }\n \n-    impl<'a, 'cx: 'a> ItemUnion<'a, 'cx> {\n-        fn render_assoc_items<'b>(\n-            &'b self,\n-        ) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n-            display_fn(move |f| {\n-                let def_id = self.it.item_id.expect_def_id();\n-                let mut cx = self.cx.borrow_mut();\n-                let v = render_assoc_items(*cx, self.it, def_id, AssocItemRender::All);\n-                write!(f, \"{v}\")\n-            })\n-        }\n-        fn document_type_layout<'b>(\n-            &'b self,\n-        ) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n-            display_fn(move |f| {\n-                let def_id = self.it.item_id.expect_def_id();\n-                let cx = self.cx.borrow_mut();\n-                let v = document_type_layout(*cx, def_id);\n-                write!(f, \"{v}\")\n-            })\n+    impl<'a, 'cx: 'a> ItemTemplate<'a, 'cx> for ItemUnion<'a, 'cx> {\n+        fn item_and_mut_cx(&self) -> (&'a clean::Item, RefMut<'_, &'a mut Context<'cx>>) {\n+            (self.it, self.cx.borrow_mut())\n         }\n+    }\n+\n+    impl<'a, 'cx: 'a> ItemUnion<'a, 'cx> {\n         fn render_union<'b>(&'b self) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n             display_fn(move |f| {\n                 let cx = self.cx.borrow_mut();\n                 let v = render_union(self.it, Some(&self.s.generics), &self.s.fields, *cx);\n                 write!(f, \"{v}\")\n             })\n         }\n-        fn render_attributes_in_pre<'b>(\n-            &'b self,\n-        ) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n-            display_fn(move |f| {\n-                let tcx = self.cx.borrow().tcx();\n-                let v = render_attributes_in_pre(self.it, \"\", tcx);\n-                write!(f, \"{v}\")\n-            })\n-        }\n-        fn document<'b>(&'b self) -> impl fmt::Display + Captures<'a> + 'b + Captures<'cx> {\n-            display_fn(move |f| {\n-                let mut cx = self.cx.borrow_mut();\n-                let v = document(*cx, self.it, None, HeadingOffset::H2);\n-                write!(f, \"{v}\")\n-            })\n-        }\n         fn document_field<'b>(\n             &'b self,\n             field: &'a clean::Item,\n@@ -1219,7 +1238,7 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n         }\n     }\n \n-    ItemUnion { cx: std::cell::RefCell::new(cx), it, s }.render_into(w).unwrap();\n+    ItemUnion { cx: RefCell::new(cx), it, s }.render_into(w).unwrap();\n }\n \n fn print_tuple_struct_fields<'a, 'cx: 'a>("}, {"sha": "c2196700513326a5970f87271514b48e1c55aad6", "filename": "src/librustdoc/html/templates/item_union.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fitem_union.html", "raw_url": "https://github.com/rust-lang/rust/raw/9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fitem_union.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fitem_union.html?ref=9a4fce978dcb77cb88f6d8dc9e6f25e99155ede3", "patch": "@@ -1,8 +1,8 @@\n <pre class=\"rust item-decl\"><code>\n-    {{ self.render_attributes_in_pre() | safe }}\n+    {{ self::item_template_render_attributes_in_pre(self.borrow()) | safe }}\n     {{ self.render_union() | safe }}\n </code></pre>\n-{{ self.document() | safe }}\n+{{ self::item_template_document(self.borrow()) | safe }}\n {% if self.fields_iter().peek().is_some() %}\n     <h2 id=\"fields\" class=\"fields small-section-header\">\n         Fields<a href=\"#fields\" class=\"anchor\">\u00a7</a>\n@@ -19,5 +19,5 @@ <h2 id=\"fields\" class=\"fields small-section-header\">\n         {{ self.document_field(field) | safe }}\n     {% endfor %}\n {% endif %}\n-{{ self.render_assoc_items() | safe }}\n-{{ self.document_type_layout() | safe }}\n+{{ self::item_template_render_assoc_items(self.borrow()) | safe }}\n+{{ self::item_template_document_type_layout(self.borrow()) | safe }}"}]}