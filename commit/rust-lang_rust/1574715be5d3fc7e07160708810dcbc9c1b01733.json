{"sha": "1574715be5d3fc7e07160708810dcbc9c1b01733", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NzQ3MTViZTVkM2ZjN2UwNzE2MDcwODgxMGRjYmM5YzFiMDE3MzM=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-10T17:08:54Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-14T12:54:31Z"}, "message": "Use type variables to determine exact type for ambiguous numeric literals", "tree": {"sha": "c482c99282393d75606c4487d316103b14208561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c482c99282393d75606c4487d316103b14208561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1574715be5d3fc7e07160708810dcbc9c1b01733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1574715be5d3fc7e07160708810dcbc9c1b01733", "html_url": "https://github.com/rust-lang/rust/commit/1574715be5d3fc7e07160708810dcbc9c1b01733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1574715be5d3fc7e07160708810dcbc9c1b01733/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f5dc20d85dead5fbd51d163451f796255c9faea", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5dc20d85dead5fbd51d163451f796255c9faea", "html_url": "https://github.com/rust-lang/rust/commit/5f5dc20d85dead5fbd51d163451f796255c9faea"}], "stats": {"total": 78, "additions": 64, "deletions": 14}, "files": [{"sha": "2798937a6fc2905978c20a27792557f6e05bd23e", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=1574715be5d3fc7e07160708810dcbc9c1b01733", "patch": "@@ -699,7 +699,22 @@ impl ExprCollector {\n                             // TODO: actually parse integer\n                             Literal::Int(0u64, ty)\n                         }\n-                        SyntaxKind::FLOAT_NUMBER => Literal::Float(0, UncertainFloatTy::Unknown),\n+                        SyntaxKind::FLOAT_NUMBER => {\n+                            let text = c.text().to_string();\n+\n+                            // FIXME: don't do it like this. maybe use something like\n+                            // the IntTy::from_name functions\n+                            let ty = if text.ends_with(\"f64\") {\n+                                UncertainFloatTy::Known(FloatTy::F64)\n+                            } else if text.ends_with(\"f32\") {\n+                                UncertainFloatTy::Known(FloatTy::F32)\n+                            } else {\n+                                UncertainFloatTy::Unknown\n+                            };\n+\n+                            // TODO: actually parse value\n+                            Literal::Float(0, ty)\n+                        }\n                         SyntaxKind::STRING => {\n                             // FIXME: this likely includes the \" characters\n                             let text = c.text().to_string();"}, {"sha": "b4b3388742024e9498a9631191a3f5189550efe4", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 39, "deletions": 6, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=1574715be5d3fc7e07160708810dcbc9c1b01733", "patch": "@@ -114,6 +114,8 @@ impl UnifyValue for TypeVarValue {\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n pub enum InferTy {\n     TypeVar(TypeVarId),\n+    IntVar(TypeVarId),\n+    FloatVar(TypeVarId),\n }\n \n /// When inferring an expression, we propagate downward whatever type hint we\n@@ -718,12 +720,19 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 .iter()\n                 .zip(ts2.iter())\n                 .all(|(t1, t2)| self.unify(t1, t2)),\n-            (Ty::Infer(InferTy::TypeVar(tv1)), Ty::Infer(InferTy::TypeVar(tv2))) => {\n+            (Ty::Infer(InferTy::TypeVar(tv1)), Ty::Infer(InferTy::TypeVar(tv2)))\n+            | (Ty::Infer(InferTy::IntVar(tv1)), Ty::Infer(InferTy::IntVar(tv2)))\n+            | (Ty::Infer(InferTy::FloatVar(tv1)), Ty::Infer(InferTy::FloatVar(tv2))) => {\n                 // both type vars are unknown since we tried to resolve them\n                 self.var_unification_table.union(*tv1, *tv2);\n                 true\n             }\n-            (Ty::Infer(InferTy::TypeVar(tv)), other) | (other, Ty::Infer(InferTy::TypeVar(tv))) => {\n+            (Ty::Infer(InferTy::TypeVar(tv)), other)\n+            | (other, Ty::Infer(InferTy::TypeVar(tv)))\n+            | (Ty::Infer(InferTy::IntVar(tv)), other)\n+            | (other, Ty::Infer(InferTy::IntVar(tv)))\n+            | (Ty::Infer(InferTy::FloatVar(tv)), other)\n+            | (other, Ty::Infer(InferTy::FloatVar(tv))) => {\n                 // the type var is unknown since we tried to resolve it\n                 self.var_unification_table\n                     .union_value(*tv, TypeVarValue::Known(other.clone()));\n@@ -739,10 +748,24 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         ))\n     }\n \n+    fn new_integer_var(&mut self) -> Ty {\n+        Ty::Infer(InferTy::IntVar(\n+            self.var_unification_table.new_key(TypeVarValue::Unknown),\n+        ))\n+    }\n+\n+    fn new_float_var(&mut self) -> Ty {\n+        Ty::Infer(InferTy::FloatVar(\n+            self.var_unification_table.new_key(TypeVarValue::Unknown),\n+        ))\n+    }\n+\n     /// Replaces Ty::Unknown by a new type var, so we can maybe still infer it.\n     fn insert_type_vars_shallow(&mut self, ty: Ty) -> Ty {\n         match ty {\n             Ty::Unknown => self.new_type_var(),\n+            Ty::Int(primitive::UncertainIntTy::Unknown) => self.new_integer_var(),\n+            Ty::Float(primitive::UncertainFloatTy::Unknown) => self.new_float_var(),\n             _ => ty,\n         }\n     }\n@@ -757,12 +780,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     /// known type.\n     fn resolve_ty_as_possible(&mut self, ty: Ty) -> Ty {\n         ty.fold(&mut |ty| match ty {\n-            Ty::Infer(InferTy::TypeVar(tv)) => {\n+            Ty::Infer(InferTy::TypeVar(tv))\n+            | Ty::Infer(InferTy::IntVar(tv))\n+            | Ty::Infer(InferTy::FloatVar(tv)) => {\n                 if let Some(known_ty) = self.var_unification_table.probe_value(tv).known() {\n                     // known_ty may contain other variables that are known by now\n                     self.resolve_ty_as_possible(known_ty.clone())\n                 } else {\n-                    Ty::Infer(InferTy::TypeVar(tv))\n+                    ty\n                 }\n             }\n             _ => ty,\n@@ -790,12 +815,20 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     /// replaced by Ty::Unknown.\n     fn resolve_ty_completely(&mut self, ty: Ty) -> Ty {\n         ty.fold(&mut |ty| match ty {\n-            Ty::Infer(InferTy::TypeVar(tv)) => {\n+            Ty::Infer(i) => {\n+                let tv = match i {\n+                    InferTy::TypeVar(tv) | InferTy::IntVar(tv) | InferTy::FloatVar(tv) => tv,\n+                };\n+\n                 if let Some(known_ty) = self.var_unification_table.probe_value(tv).known() {\n                     // known_ty may contain other variables that are known by now\n                     self.resolve_ty_completely(known_ty.clone())\n                 } else {\n-                    Ty::Unknown\n+                    match i {\n+                        InferTy::TypeVar(..) => Ty::Unknown,\n+                        InferTy::IntVar(..) => Ty::Int(primitive::UncertainIntTy::Unknown),\n+                        InferTy::FloatVar(..) => Ty::Float(primitive::UncertainFloatTy::Unknown),\n+                    }\n                 }\n             }\n             _ => ty,"}, {"sha": "0c43415a6b01efb1e345824fcc586bafa05782aa", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=1574715be5d3fc7e07160708810dcbc9c1b01733", "patch": "@@ -145,6 +145,7 @@ fn test() {\n     3.14;\n     5000;\n     (0u32, -5isize);\n+    false;\n     [true, true, false]\n }\n \"#,"}, {"sha": "e65fe07aa47fb81a9dd9651c953e1dbbbf39ec96", "filename": "crates/ra_hir/src/ty/tests/data/basics.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fbasics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fbasics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fbasics.txt?ref=1574715be5d3fc7e07160708810dcbc9c1b01733", "patch": "@@ -10,4 +10,4 @@\n [76; 82) '1usize': usize\n [88; 94) '1isize': isize\n [100; 106) '\"test\"': &str\n-[112; 118) '1.0f32': [unknown]\n+[112; 118) '1.0f32': f32"}, {"sha": "df435edd7086ff4a61bc4b4c4c3047fcb80da727", "filename": "crates/ra_hir/src/ty/tests/data/literals.txt", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fliterals.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fliterals.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fliterals.txt?ref=1574715be5d3fc7e07160708810dcbc9c1b01733", "patch": "@@ -1,10 +1,11 @@\n-[11; 135) '{     ...lse] }': ()\n+[11; 146) '{     ...lse] }': ()\n [17; 21) '5i32': i32\n [27; 34) '\"hello\"': &str\n [40; 48) 'b\"bytes\"': &[u8]\n [54; 57) ''c'': char\n [63; 67) 'b'b'': u8\n-[73; 77) '3.14': [unknown]\n-[83; 87) '5000': [unknown]\n+[73; 77) '3.14': {float}\n+[83; 87) '5000': {integer}\n [93; 108) '(0u32, -5isize)': [unknown]\n-[114; 133) '[true,...false]': ()\n+[114; 119) 'false': bool\n+[125; 144) '[true,...false]': ()"}, {"sha": "dcdf61363f7bdafb89be89e0224d71945d1d0018", "filename": "crates/ra_hir/src/ty/tests/data/struct.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fstruct.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1574715be5d3fc7e07160708810dcbc9c1b01733/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fstruct.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2Fstruct.txt?ref=1574715be5d3fc7e07160708810dcbc9c1b01733", "patch": "@@ -2,14 +2,14 @@\n [82; 83) 'c': [unknown]\n [86; 87) 'C': [unknown]\n [86; 90) 'C(1)': [unknown]\n-[88; 89) '1': [unknown]\n+[88; 89) '1': {integer}\n [96; 97) 'B': [unknown]\n [107; 108) 'a': A\n [114; 133) 'A { b:...C(1) }': A\n [121; 122) 'B': B\n [127; 128) 'C': [unknown]\n [127; 131) 'C(1)': C\n-[129; 130) '1': [unknown]\n+[129; 130) '1': {integer}\n [139; 140) 'a': A\n [139; 142) 'a.b': B\n [148; 149) 'a': A"}]}