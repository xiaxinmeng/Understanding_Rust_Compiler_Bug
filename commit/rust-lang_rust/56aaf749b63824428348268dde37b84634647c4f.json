{"sha": "56aaf749b63824428348268dde37b84634647c4f", "node_id": "C_kwDOAAsO6NoAKDU2YWFmNzQ5YjYzODI0NDI4MzQ4MjY4ZGRlMzdiODQ2MzQ2NDdjNGY", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2022-12-21T15:29:35Z"}, "committer": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2022-12-21T18:24:33Z"}, "message": "Test the borrowck behavior of if-let guards", "tree": {"sha": "6a192a20ed7cbaa4d4094dd6eb0f959bf21cc1e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a192a20ed7cbaa4d4094dd6eb0f959bf21cc1e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56aaf749b63824428348268dde37b84634647c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56aaf749b63824428348268dde37b84634647c4f", "html_url": "https://github.com/rust-lang/rust/commit/56aaf749b63824428348268dde37b84634647c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56aaf749b63824428348268dde37b84634647c4f/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b", "html_url": "https://github.com/rust-lang/rust/commit/1d12c3cea30b8ba4a09650a9e9c46fe9fbe25f0b"}], "stats": {"total": 707, "additions": 645, "deletions": 62}, "files": [{"sha": "0f320af2657603bf20d82a7ab4f7e300974633ae", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,3 +1,5 @@\n+#![feature(if_let_guard)]\n+\n fn foo(_:String) {}\n \n fn main()\n@@ -8,4 +10,11 @@ fn main()\n         Some(_) => {}\n         None => { foo(my_str); } //~ ERROR [E0382]\n     }\n+\n+    let my_str = \"hello\".to_owned();\n+    match Some(42) {\n+        Some(_) if let Some(()) = { drop(my_str); None } => {}\n+        Some(_) => {}\n+        None => { foo(my_str); } //~ ERROR [E0382]\n+    }\n }"}, {"sha": "9fa28efd8554daeeb8344a7a91d0d25b03d88978", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `my_str`\n-  --> $DIR/borrowck-drop-from-guard.rs:9:23\n+  --> $DIR/borrowck-drop-from-guard.rs:11:23\n    |\n LL |     let my_str = \"hello\".to_owned();\n    |         ------ move occurs because `my_str` has type `String`, which does not implement the `Copy` trait\n@@ -15,6 +15,23 @@ help: consider cloning the value if the performance cost is acceptable\n LL |         Some(_) if { drop(my_str.clone()); false } => {}\n    |                                 ++++++++\n \n-error: aborting due to previous error\n+error[E0382]: use of moved value: `my_str`\n+  --> $DIR/borrowck-drop-from-guard.rs:18:23\n+   |\n+LL |     let my_str = \"hello\".to_owned();\n+   |         ------ move occurs because `my_str` has type `String`, which does not implement the `Copy` trait\n+LL |     match Some(42) {\n+LL |         Some(_) if let Some(()) = { drop(my_str); None } => {}\n+   |                                          ------ value moved here\n+LL |         Some(_) => {}\n+LL |         None => { foo(my_str); }\n+   |                       ^^^^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         Some(_) if let Some(()) = { drop(my_str.clone()); None } => {}\n+   |                                                ++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "d80a9e81576f49227034b0a895b192e823691067", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,9 +1,11 @@\n+#![feature(if_let_guard)]\n+\n enum Enum<'a> {\n     A(&'a isize),\n     B(bool),\n }\n \n-fn foo() -> isize {\n+fn if_guard() -> isize {\n     let mut n = 42;\n     let mut x = Enum::A(&mut n);\n     match x {\n@@ -16,6 +18,17 @@ fn foo() -> isize {\n     }\n }\n \n-fn main() {\n-    foo();\n+fn if_let_guard() -> isize {\n+    let mut n = 42;\n+    let mut x = Enum::A(&mut n);\n+    match x {\n+        Enum::A(_) if let Some(()) = { x = Enum::B(false); None } => 1,\n+        //~^ ERROR cannot assign `x` in match guard\n+        Enum::A(_) if let Some(()) = { let y = &mut x; *y = Enum::B(false); None } => 1,\n+        //~^ ERROR cannot mutably borrow `x` in match guard\n+        Enum::A(p) => *p,\n+        Enum::B(_) => 2,\n+    }\n }\n+\n+fn main() {}"}, {"sha": "dbb3272fdc351242b4de455ec9d086c38ea6ac33", "filename": "src/test/ui/borrowck/borrowck-mutate-in-guard.stderr", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-mutate-in-guard.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,20 +1,37 @@\n error[E0510]: cannot assign `x` in match guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:10:25\n+  --> $DIR/borrowck-mutate-in-guard.rs:12:25\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n LL |         Enum::A(_) if { x = Enum::B(false); false } => 1,\n    |                         ^^^^^^^^^^^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x` in match guard\n-  --> $DIR/borrowck-mutate-in-guard.rs:12:33\n+  --> $DIR/borrowck-mutate-in-guard.rs:14:33\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n ...\n LL |         Enum::A(_) if { let y = &mut x; *y = Enum::B(false); false } => 1,\n    |                                 ^^^^^^ cannot mutably borrow\n \n-error: aborting due to 2 previous errors\n+error[E0510]: cannot assign `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:25:40\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+LL |         Enum::A(_) if let Some(()) = { x = Enum::B(false); None } => 1,\n+   |                                        ^^^^^^^^^^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot mutably borrow `x` in match guard\n+  --> $DIR/borrowck-mutate-in-guard.rs:27:48\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+...\n+LL |         Enum::A(_) if let Some(()) = { let y = &mut x; *y = Enum::B(false); None } => 1,\n+   |                                                ^^^^^^ cannot mutably borrow\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0510`."}, {"sha": "5b824adc6e2737647f4f739fb87ac8e8088baa93", "filename": "src/test/ui/borrowck/issue-31287-drop-in-guard.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,8 +1,15 @@\n+#![feature(if_let_guard)]\n+\n fn main() {\n     let a = Some(\"...\".to_owned());\n     let b = match a {\n         Some(_) if { drop(a); false } => None,\n         x => x, //~ ERROR use of moved value: `a`\n     };\n-    println!(\"{:?}\", b);\n+\n+    let a = Some(\"...\".to_owned());\n+    let b = match a {\n+        Some(_) if let Some(()) = { drop(a); None } => None,\n+        x => x, //~ ERROR use of moved value: `a`\n+    };\n }"}, {"sha": "18f371c20735a909dbbcbfa2a85baae1ba33b533", "filename": "src/test/ui/borrowck/issue-31287-drop-in-guard.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `a`\n-  --> $DIR/issue-31287-drop-in-guard.rs:5:9\n+  --> $DIR/issue-31287-drop-in-guard.rs:7:9\n    |\n LL |     let a = Some(\"...\".to_owned());\n    |         - move occurs because `a` has type `Option<String>`, which does not implement the `Copy` trait\n@@ -14,6 +14,22 @@ help: consider cloning the value if the performance cost is acceptable\n LL |         Some(_) if { drop(a.clone()); false } => None,\n    |                            ++++++++\n \n-error: aborting due to previous error\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/issue-31287-drop-in-guard.rs:13:9\n+   |\n+LL |     let a = Some(\"...\".to_owned());\n+   |         - move occurs because `a` has type `Option<String>`, which does not implement the `Copy` trait\n+LL |     let b = match a {\n+LL |         Some(_) if let Some(()) = { drop(a); None } => None,\n+   |                                          - value moved here\n+LL |         x => x,\n+   |         ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         Some(_) if let Some(()) = { drop(a.clone()); None } => None,\n+   |                                           ++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "399e9ba0df73053982325f68abd8e5e324012092", "filename": "src/test/ui/issues/issue-29723.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,7 @@\n // test for https://github.com/rust-lang/rust/issues/29723\n \n+#![feature(if_let_guard)]\n+\n fn main() {\n     let s = String::new();\n     let _s = match 0 {\n@@ -11,4 +13,10 @@ fn main() {\n             //~^ ERROR use of moved value: `s`\n         }\n     };\n+\n+    let s = String::new();\n+    let _s = match 0 {\n+        0 if let Some(()) = { drop(s); None } => String::from(\"oops\"),\n+        _ => s //~ ERROR use of moved value: `s`\n+    };\n }"}, {"sha": "044d8a9b5dd1d6a33b99033963cbf40162b18aed", "filename": "src/test/ui/issues/issue-29723.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `s`\n-  --> $DIR/issue-29723.rs:10:13\n+  --> $DIR/issue-29723.rs:12:13\n    |\n LL |     let s = String::new();\n    |         - move occurs because `s` has type `String`, which does not implement the `Copy` trait\n@@ -15,6 +15,22 @@ help: consider cloning the value if the performance cost is acceptable\n LL |         0 if { drop(s.clone()); false } => String::from(\"oops\"),\n    |                      ++++++++\n \n-error: aborting due to previous error\n+error[E0382]: use of moved value: `s`\n+  --> $DIR/issue-29723.rs:20:14\n+   |\n+LL |     let s = String::new();\n+   |         - move occurs because `s` has type `String`, which does not implement the `Copy` trait\n+LL |     let _s = match 0 {\n+LL |         0 if let Some(()) = { drop(s); None } => String::from(\"oops\"),\n+   |                                    - value moved here\n+LL |         _ => s\n+   |              ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         0 if let Some(()) = { drop(s.clone()); None } => String::from(\"oops\"),\n+   |                                     ++++++++\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "ccfc8937fd72e531002dcf3b673628348a917dc7", "filename": "src/test/ui/nll/issue-24535-allow-mutable-borrow-in-match-guard.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-24535-allow-mutable-borrow-in-match-guard.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -5,6 +5,8 @@\n // See further discussion on rust-lang/rust#24535,\n // rust-lang/rfcs#1006, and rust-lang/rfcs#107\n \n+#![feature(if_let_guard)]\n+\n fn main() {\n     rust_issue_24535();\n     rfcs_issue_1006_1();\n@@ -23,6 +25,12 @@ fn rust_issue_24535() {\n         3 if compare(&a, &mut 3) => (),\n         _ => panic!(\"nope\"),\n     }\n+\n+    match a {\n+        0 => panic!(\"nope\"),\n+        3 if let true = compare(&a, &mut 3) => (),\n+        _ => panic!(\"nope\"),\n+    }\n }\n \n fn rfcs_issue_1006_1() {"}, {"sha": "85feda5824b408420932a7cd33e64f4d9075db59", "filename": "src/test/ui/nll/issue-27282-move-match-input-into-guard.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -7,6 +7,8 @@\n // reaches the panic code when executed, despite the compiler warning\n // about that match arm being unreachable.\n \n+#![feature(if_let_guard)]\n+\n fn main() {\n     let b = &mut true;\n     match b {\n@@ -17,4 +19,16 @@ fn main() {\n         &mut true => { println!(\"You might think we should get here\"); },\n         _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),\n     }\n+\n+    let b = &mut true;\n+    match b {\n+        //~^ ERROR use of moved value: `b` [E0382]\n+        &mut false => {}\n+        _ if let Some(()) = {\n+            (|| { let bar = b; *bar = false; })();\n+            None\n+        } => {}\n+        &mut true => {}\n+        _ => {}\n+    }\n }"}, {"sha": "ae7978004576b886be6cdad5b065fe2d5d307f2b", "filename": "src/test/ui/nll/issue-27282-move-match-input-into-guard.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-match-input-into-guard.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,5 @@\n error[E0382]: use of moved value: `b`\n-  --> $DIR/issue-27282-move-match-input-into-guard.rs:12:5\n+  --> $DIR/issue-27282-move-match-input-into-guard.rs:14:5\n    |\n LL |     let b = &mut true;\n    |         - move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n@@ -11,6 +11,19 @@ LL |         _ if { (|| { let bar = b; *bar = false; })();\n    |                 |\n    |                 value moved into closure here\n \n-error: aborting due to previous error\n+error[E0382]: use of moved value: `b`\n+  --> $DIR/issue-27282-move-match-input-into-guard.rs:24:5\n+   |\n+LL |     let b = &mut true;\n+   |         - move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n+LL |     match b {\n+   |     ^^^^^^^ value used here after move\n+...\n+LL |             (|| { let bar = b; *bar = false; })();\n+   |              --             - variable moved due to use in closure\n+   |              |\n+   |              value moved into closure here\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "833ca8afd618e1e88815baa82589a87128bceb0f", "filename": "src/test/ui/nll/issue-27282-move-ref-mut-into-guard.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -2,6 +2,8 @@\n // mutable borrows in match guards by hiding the mutable borrow in a\n // guard behind a move (of the ref mut pattern id) within a closure.\n \n+#![feature(if_let_guard)]\n+\n fn main() {\n     match Some(&4) {\n         None => {},\n@@ -10,4 +12,12 @@ fn main() {\n         //~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n         Some(s) => std::process::exit(*s),\n     }\n+\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo\n+            if let Some(()) = { (|| { let bar = foo; bar.take() })(); None } => {},\n+        //~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n+        Some(s) => std::process::exit(*s),\n+    }\n }"}, {"sha": "45119018d4e60570243a455dc0129f584db68403", "filename": "src/test/ui/nll/issue-27282-move-ref-mut-into-guard.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-move-ref-mut-into-guard.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:9:19\n+  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:11:19\n    |\n LL |             if { (|| { let bar = foo; bar.take() })(); false } => {},\n    |                   ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n@@ -8,6 +8,16 @@ LL |             if { (|| { let bar = foo; bar.take() })(); false } => {},\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/issue-27282-move-ref-mut-into-guard.rs:19:34\n+   |\n+LL |             if let Some(()) = { (|| { let bar = foo; bar.take() })(); None } => {},\n+   |                                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n+   |                                  |\n+   |                                  move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "4f41fc23fc34be2632abef60f9734e03a71b39b4", "filename": "src/test/ui/nll/issue-27282-mutation-in-guard.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,3 +1,5 @@\n+#![feature(if_let_guard)]\n+\n fn main() {\n     match Some(&4) {\n         None => {},\n@@ -10,4 +12,15 @@ fn main() {\n         Some(ref _s) => println!(\"Note this arm is bogus; the `Some` became `None` in the guard.\"),\n         _ => println!(\"Here is some supposedly unreachable code.\"),\n     }\n+\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo\n+            if let Some(()) = {\n+                (|| { let bar = foo; bar.take() })();\n+                //~^ ERROR cannot move out of `foo` in pattern guard\n+                None\n+            } => {},\n+        Some(_) => {},\n+    }\n }"}, {"sha": "1ba696593afffe4adafbac72bb0e1055fa4b4d71", "filename": "src/test/ui/nll/issue-27282-mutation-in-guard.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-mutation-in-guard.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/issue-27282-mutation-in-guard.rs:6:18\n+  --> $DIR/issue-27282-mutation-in-guard.rs:8:18\n    |\n LL |                 (|| { let bar = foo; bar.take() })();\n    |                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n@@ -8,6 +8,16 @@ LL |                 (|| { let bar = foo; bar.take() })();\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/issue-27282-mutation-in-guard.rs:20:18\n+   |\n+LL |                 (|| { let bar = foo; bar.take() })();\n+   |                  ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n+   |                  |\n+   |                  move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "ac06b2b01028f925fea29944249ebd79cf2a71db", "filename": "src/test/ui/nll/issue-27282-reborrow-ref-mut-in-guard.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -3,7 +3,9 @@\n // It reborrows instead of moving the `ref mut` pattern borrow. This\n // means that our conservative check for mutation in guards will\n // reject it. But I want to make sure that we continue to reject it\n-// (under NLL) even when that conservaive check goes away.\n+// (under NLL) even when that conservative check goes away.\n+\n+#![feature(if_let_guard)]\n \n fn main() {\n     let mut b = &mut true;\n@@ -15,4 +17,14 @@ fn main() {\n         &mut true => { println!(\"You might think we should get here\"); },\n         _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),\n     }\n+\n+    let mut b = &mut true;\n+    match b {\n+        &mut false => {},\n+        ref mut r if let Some(()) = { (|| { let bar = &mut *r; **bar = false; })();\n+        //~^ ERROR cannot borrow `r` as mutable, as it is immutable for the pattern guard\n+                             None } => { &mut *r; },\n+        &mut true => {},\n+        _ => {},\n+    }\n }"}, {"sha": "5eb7a25bf9f507357225d7cf9677648f6af26105", "filename": "src/test/ui/nll/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern guard\n-  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:12:25\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:14:25\n    |\n LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n    |                         ^^                  -- mutable borrow occurs due to use of `r` in closure\n@@ -8,6 +8,16 @@ LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern guard\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:24:40\n+   |\n+LL |         ref mut r if let Some(()) = { (|| { let bar = &mut *r; **bar = false; })();\n+   |                                        ^^                  -- mutable borrow occurs due to use of `r` in closure\n+   |                                        |\n+   |                                        cannot borrow as mutable\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "1afc7931a6b629732476a78077c816040ba2e477", "filename": "src/test/ui/nll/match-cfg-fake-edges.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,6 +1,8 @@\n // Test that we have enough false edges to avoid exposing the exact matching\n // algorithm in borrow checking.\n \n+#![feature(if_let_guard)]\n+\n fn guard_always_precedes_arm(y: i32) {\n     let mut x;\n     // x should always be initialized, as the only way to reach the arm is\n@@ -9,6 +11,12 @@ fn guard_always_precedes_arm(y: i32) {\n         0 | 2 if { x = 2; true } => x,\n         _ => 2,\n     };\n+\n+    let mut x;\n+    match y {\n+        0 | 2 if let Some(()) = { x = 2; Some(()) } => x,\n+        _ => 2,\n+    };\n }\n \n fn guard_may_be_skipped(y: i32) {\n@@ -23,6 +31,16 @@ fn guard_may_be_skipped(y: i32) {\n         } => 2,\n         _ => 3,\n     };\n+\n+    let x;\n+    match y {\n+        _ if let Some(()) = { x = 2; Some(()) } => 1,\n+        _ if let Some(()) = {\n+            x; //~ ERROR E0381\n+            None\n+        } => 2,\n+        _ => 3,\n+    };\n }\n \n fn guard_may_be_taken(y: bool) {\n@@ -37,6 +55,16 @@ fn guard_may_be_taken(y: bool) {\n         }\n         false => 3,\n     };\n+\n+    let x = String::new();\n+    match y {\n+        false if let Some(()) = { drop(x); Some(()) } => 1,\n+        true => {\n+            x; //~ ERROR use of moved value: `x`\n+            2\n+        }\n+        false => 3,\n+    };\n }\n \n fn main() {}"}, {"sha": "a6261345ceac7bc7fbcd92a666f98d0a506fa2f8", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,5 @@\n error[E0381]: used binding `x` isn't initialized\n-  --> $DIR/match-cfg-fake-edges.rs:21:13\n+  --> $DIR/match-cfg-fake-edges.rs:29:13\n    |\n LL |     let x;\n    |         - binding declared here but left uninitialized\n@@ -15,8 +15,25 @@ help: consider assigning a value\n LL |     let x = 0;\n    |           +++\n \n+error[E0381]: used binding `x` isn't initialized\n+  --> $DIR/match-cfg-fake-edges.rs:39:13\n+   |\n+LL |     let x;\n+   |         - binding declared here but left uninitialized\n+LL |     match y {\n+LL |         _ if let Some(()) = { x = 2; Some(()) } => 1,\n+   |                               ----- binding initialized here in some conditions\n+LL |         _ if let Some(()) = {\n+LL |             x;\n+   |             ^ `x` used here but it isn't initialized\n+   |\n+help: consider assigning a value\n+   |\n+LL |     let x = 0;\n+   |           +++\n+\n error[E0382]: use of moved value: `x`\n-  --> $DIR/match-cfg-fake-edges.rs:35:13\n+  --> $DIR/match-cfg-fake-edges.rs:53:13\n    |\n LL |     let x = String::new();\n    |         - move occurs because `x` has type `String`, which does not implement the `Copy` trait\n@@ -32,7 +49,24 @@ help: consider cloning the value if the performance cost is acceptable\n LL |         false if { drop(x.clone()); true } => 1,\n    |                          ++++++++\n \n-error: aborting due to 2 previous errors\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/match-cfg-fake-edges.rs:63:13\n+   |\n+LL |     let x = String::new();\n+   |         - move occurs because `x` has type `String`, which does not implement the `Copy` trait\n+LL |     match y {\n+LL |         false if let Some(()) = { drop(x); Some(()) } => 1,\n+   |                                        - value moved here\n+LL |         true => {\n+LL |             x;\n+   |             ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         false if let Some(()) = { drop(x.clone()); Some(()) } => 1,\n+   |                                         ++++++++\n+\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0381, E0382.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "ff63cc092734a0211af6825597610f4bd921c42c", "filename": "src/test/ui/nll/match-guards-always-borrow.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,3 +1,5 @@\n+#![feature(if_let_guard)]\n+\n // Here is arielb1's basic example from rust-lang/rust#27282\n // that AST borrowck is flummoxed by:\n \n@@ -10,6 +12,15 @@ fn should_reject_destructive_mutate_in_guard() {\n             false } => { },\n         Some(s) => std::process::exit(*s),\n     }\n+\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo if let Some(()) = {\n+            (|| { let bar = foo; bar.take() })();\n+            //~^ ERROR cannot move out of `foo` in pattern guard [E0507]\n+            None } => { },\n+        Some(s) => std::process::exit(*s),\n+    }\n }\n \n // Here below is a case that needs to keep working: we only use the\n@@ -18,7 +29,13 @@ fn should_reject_destructive_mutate_in_guard() {\n fn allow_mutate_in_arm_body() {\n     match Some(&4) {\n         None => {},\n-        ref mut foo if foo.is_some() && false => { foo.take(); () }\n+        ref mut foo if foo.is_some() => { foo.take(); () }\n+        Some(s) => std::process::exit(*s),\n+    }\n+\n+    match Some(&4) {\n+        None => {},\n+        ref mut foo if let Some(_) = foo => { foo.take(); () }\n         Some(s) => std::process::exit(*s),\n     }\n }\n@@ -29,7 +46,13 @@ fn allow_mutate_in_arm_body() {\n fn allow_move_into_arm_body() {\n     match Some(&4) {\n         None => {},\n-        mut foo if foo.is_some() && false => { foo.take(); () }\n+        mut foo if foo.is_some() => { foo.unwrap(); () }\n+        Some(s) => std::process::exit(*s),\n+    }\n+\n+    match Some(&4) {\n+        None => {},\n+        mut foo if let Some(_) = foo => { foo.unwrap(); () }\n         Some(s) => std::process::exit(*s),\n     }\n }"}, {"sha": "fa01d3a6fd1e0092a95e40c270c4f7b681626f97", "filename": "src/test/ui/nll/match-guards-always-borrow.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `foo` in pattern guard\n-  --> $DIR/match-guards-always-borrow.rs:8:14\n+  --> $DIR/match-guards-always-borrow.rs:10:14\n    |\n LL |             (|| { let bar = foo; bar.take() })();\n    |              ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n@@ -8,6 +8,16 @@ LL |             (|| { let bar = foo; bar.take() })();\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `foo` in pattern guard\n+  --> $DIR/match-guards-always-borrow.rs:19:14\n+   |\n+LL |             (|| { let bar = foo; bar.take() })();\n+   |              ^^             --- move occurs because `foo` has type `&mut Option<&i32>`, which does not implement the `Copy` trait\n+   |              |\n+   |              move out of `foo` occurs here\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "3a9e1654b1c2d985aa491f467ece89f0629ad422", "filename": "src/test/ui/nll/match-guards-partially-borrow.rs", "status": "modified", "additions": 178, "deletions": 15, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -5,15 +5,25 @@\n // Test that we don't allow mutating the value being matched on in a way that\n // changes which patterns it matches, until we have chosen an arm.\n \n-fn ok_mutation_in_guard(mut q: i32) {\n+#![feature(if_let_guard)]\n+\n+fn ok_mutation_in_if_guard(mut q: i32) {\n     match q {\n         // OK, mutation doesn't change which patterns g matches\n         _ if { q = 1; false } => (),\n         _ => (),\n     }\n }\n \n-fn ok_mutation_in_guard2(mut u: bool) {\n+fn ok_mutation_in_if_let_guard(mut q: i32) {\n+    match q {\n+        // OK, mutation doesn't change which patterns g matches\n+        _ if let Some(()) = { q = 1; None } => (),\n+        _ => (),\n+    }\n+}\n+\n+fn ok_mutation_in_if_guard2(mut u: bool) {\n     // OK value of u is unused before modification\n     match u {\n         _ => (),\n@@ -25,7 +35,19 @@ fn ok_mutation_in_guard2(mut u: bool) {\n     }\n }\n \n-fn ok_mutation_in_guard4(mut w: (&mut bool,)) {\n+fn ok_mutation_in_if_let_guard2(mut u: bool) {\n+    // OK value of u is unused before modification\n+    match u {\n+        _ => (),\n+        _ if let Some(()) = {\n+            u = true;\n+            None\n+        } => (),\n+        x => (),\n+    }\n+}\n+\n+fn ok_mutation_in_if_guard4(mut w: (&mut bool,)) {\n     // OK value of u is unused before modification\n     match w {\n         _ => (),\n@@ -37,7 +59,19 @@ fn ok_mutation_in_guard4(mut w: (&mut bool,)) {\n     }\n }\n \n-fn ok_indirect_mutation_in_guard(mut p: &bool) {\n+fn ok_mutation_in_if_let_guard4(mut w: (&mut bool,)) {\n+    // OK value of u is unused before modification\n+    match w {\n+        _ => (),\n+        _ if let Some(()) = {\n+            *w.0 = true;\n+            None\n+        } => (),\n+        x => (),\n+    }\n+}\n+\n+fn ok_indirect_mutation_in_if_guard(mut p: &bool) {\n     match *p {\n         // OK, mutation doesn't change which patterns s matches\n         _ if {\n@@ -48,7 +82,18 @@ fn ok_indirect_mutation_in_guard(mut p: &bool) {\n     }\n }\n \n-fn mutation_invalidates_pattern_in_guard(mut q: bool) {\n+fn ok_indirect_mutation_in_if_let_guard(mut p: &bool) {\n+    match *p {\n+        // OK, mutation doesn't change which patterns s matches\n+        _ if let Some(()) = {\n+            p = &true;\n+            None\n+        } => (),\n+        _ => (),\n+    }\n+}\n+\n+fn mutation_invalidates_pattern_in_if_guard(mut q: bool) {\n     match q {\n         // q doesn't match the pattern with the guard by the end of the guard.\n         false if {\n@@ -59,7 +104,18 @@ fn mutation_invalidates_pattern_in_guard(mut q: bool) {\n     }\n }\n \n-fn mutation_invalidates_previous_pattern_in_guard(mut r: bool) {\n+fn mutation_invalidates_pattern_in_if_let_guard(mut q: bool) {\n+    match q {\n+        // q doesn't match the pattern with the guard by the end of the guard.\n+        false if let Some(()) = {\n+            q = true; //~ ERROR\n+            Some(())\n+        } => (),\n+        _ => (),\n+    }\n+}\n+\n+fn mutation_invalidates_previous_pattern_in_if_guard(mut r: bool) {\n     match r {\n         // r matches a previous pattern by the end of the guard.\n         true => (),\n@@ -71,7 +127,19 @@ fn mutation_invalidates_previous_pattern_in_guard(mut r: bool) {\n     }\n }\n \n-fn match_on_borrowed_early_end(mut s: bool) {\n+fn mutation_invalidates_previous_pattern_in_if_let_guard(mut r: bool) {\n+    match r {\n+        // r matches a previous pattern by the end of the guard.\n+        true => (),\n+        _ if let Some(()) = {\n+            r = true; //~ ERROR\n+            Some(())\n+        } => (),\n+        _ => (),\n+    }\n+}\n+\n+fn match_on_borrowed_early_end_if_guard(mut s: bool) {\n     let h = &mut s;\n     // OK value of s is unused before modification.\n     match s {\n@@ -84,7 +152,20 @@ fn match_on_borrowed_early_end(mut s: bool) {\n     }\n }\n \n-fn bad_mutation_in_guard(mut t: bool) {\n+fn match_on_borrowed_early_end_if_let_guard(mut s: bool) {\n+    let h = &mut s;\n+    // OK value of s is unused before modification.\n+    match s {\n+        _ if let Some(()) = {\n+            *h = !*h;\n+            None\n+        } => (),\n+        true => (),\n+        false => (),\n+    }\n+}\n+\n+fn bad_mutation_in_if_guard(mut t: bool) {\n     match t {\n         true => (),\n         false if {\n@@ -95,7 +176,18 @@ fn bad_mutation_in_guard(mut t: bool) {\n     }\n }\n \n-fn bad_mutation_in_guard2(mut x: Option<Option<&i32>>) {\n+fn bad_mutation_in_if_let_guard(mut t: bool) {\n+    match t {\n+        true => (),\n+        false if let Some(()) = {\n+            t = true; //~ ERROR\n+            None\n+        } => (),\n+        false => (),\n+    }\n+}\n+\n+fn bad_mutation_in_if_guard2(mut x: Option<Option<&i32>>) {\n     // Check that nested patterns are checked.\n     match x {\n         None => (),\n@@ -111,7 +203,23 @@ fn bad_mutation_in_guard2(mut x: Option<Option<&i32>>) {\n     }\n }\n \n-fn bad_mutation_in_guard3(mut t: bool) {\n+fn bad_mutation_in_if_let_guard2(mut x: Option<Option<&i32>>) {\n+    // Check that nested patterns are checked.\n+    match x {\n+        None => (),\n+        Some(None) => (),\n+        _ if let Some(()) = {\n+            match x {\n+                Some(ref mut r) => *r = None, //~ ERROR\n+                _ => return,\n+            };\n+            None\n+        } => (),\n+        Some(Some(r)) => println!(\"{}\", r),\n+    }\n+}\n+\n+fn bad_mutation_in_if_guard3(mut t: bool) {\n     match t {\n         s if {\n             t = !t; //~ ERROR\n@@ -121,7 +229,17 @@ fn bad_mutation_in_guard3(mut t: bool) {\n     }\n }\n \n-fn bad_indirect_mutation_in_guard(mut y: &bool) {\n+fn bad_mutation_in_if_let_guard3(mut t: bool) {\n+    match t {\n+        s if let Some(()) = {\n+            t = !t; //~ ERROR\n+            None\n+        } => (), // What value should `s` have in the arm?\n+        _ => (),\n+    }\n+}\n+\n+fn bad_indirect_mutation_in_if_guard(mut y: &bool) {\n     match *y {\n         true => (),\n         false if {\n@@ -132,7 +250,18 @@ fn bad_indirect_mutation_in_guard(mut y: &bool) {\n     }\n }\n \n-fn bad_indirect_mutation_in_guard2(mut z: &bool) {\n+fn bad_indirect_mutation_in_if_let_guard(mut y: &bool) {\n+    match *y {\n+        true => (),\n+        false if let Some(()) = {\n+            y = &true; //~ ERROR\n+            None\n+        } => (),\n+        false => (),\n+    }\n+}\n+\n+fn bad_indirect_mutation_in_if_guard2(mut z: &bool) {\n     match z {\n         &true => (),\n         &false if {\n@@ -143,8 +272,19 @@ fn bad_indirect_mutation_in_guard2(mut z: &bool) {\n     }\n }\n \n-fn bad_indirect_mutation_in_guard3(mut a: &bool) {\n-    // Same as bad_indirect_mutation_in_guard2, but using match ergonomics\n+fn bad_indirect_mutation_in_if_let_guard2(mut z: &bool) {\n+    match z {\n+        &true => (),\n+        &false if let Some(()) = {\n+            z = &true; //~ ERROR\n+            None\n+        } => (),\n+        &false => (),\n+    }\n+}\n+\n+fn bad_indirect_mutation_in_if_guard3(mut a: &bool) {\n+    // Same as bad_indirect_mutation_in_if_guard2, but using match ergonomics\n     match a {\n         true => (),\n         false if {\n@@ -155,7 +295,19 @@ fn bad_indirect_mutation_in_guard3(mut a: &bool) {\n     }\n }\n \n-fn bad_indirect_mutation_in_guard4(mut b: &bool) {\n+fn bad_indirect_mutation_in_if_let_guard3(mut a: &bool) {\n+    // Same as bad_indirect_mutation_in_if_guard2, but using match ergonomics\n+    match a {\n+        true => (),\n+        false if let Some(()) = {\n+            a = &true; //~ ERROR\n+            None\n+        } => (),\n+        false => (),\n+    }\n+}\n+\n+fn bad_indirect_mutation_in_if_guard4(mut b: &bool) {\n     match b {\n         &_ => (),\n         &_ if {\n@@ -166,4 +318,15 @@ fn bad_indirect_mutation_in_guard4(mut b: &bool) {\n     }\n }\n \n+fn bad_indirect_mutation_in_if_let_guard4(mut b: &bool) {\n+    match b {\n+        &_ => (),\n+        &_ if let Some(()) = {\n+            b = &true; //~ ERROR\n+            None\n+        } => (),\n+        &b => (),\n+    }\n+}\n+\n fn main() {}"}, {"sha": "60b8dee71a8632e2866abc43561c1b0dd36bd25c", "filename": "src/test/ui/nll/match-guards-partially-borrow.stderr", "status": "modified", "additions": 93, "deletions": 10, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,14 +1,32 @@\n error[E0510]: cannot assign `q` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:55:13\n+  --> $DIR/match-guards-partially-borrow.rs:100:13\n    |\n LL |     match q {\n    |           - value is immutable in match guard\n ...\n LL |             q = true;\n    |             ^^^^^^^^ cannot assign\n \n+error[E0510]: cannot assign `q` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:111:13\n+   |\n+LL |     match q {\n+   |           - value is immutable in match guard\n+...\n+LL |             q = true;\n+   |             ^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `r` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:123:13\n+   |\n+LL |     match r {\n+   |           - value is immutable in match guard\n+...\n+LL |             r = true;\n+   |             ^^^^^^^^ cannot assign\n+\n error[E0510]: cannot assign `r` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:67:13\n+  --> $DIR/match-guards-partially-borrow.rs:135:13\n    |\n LL |     match r {\n    |           - value is immutable in match guard\n@@ -17,7 +35,16 @@ LL |             r = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `t` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:91:13\n+  --> $DIR/match-guards-partially-borrow.rs:172:13\n+   |\n+LL |     match t {\n+   |           - value is immutable in match guard\n+...\n+LL |             t = true;\n+   |             ^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `t` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:183:13\n    |\n LL |     match t {\n    |           - value is immutable in match guard\n@@ -26,7 +53,16 @@ LL |             t = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x.0` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:105:22\n+  --> $DIR/match-guards-partially-borrow.rs:197:22\n+   |\n+LL |     match x {\n+   |           - value is immutable in match guard\n+...\n+LL |                 Some(ref mut r) => *r = None,\n+   |                      ^^^^^^^^^ cannot mutably borrow\n+\n+error[E0510]: cannot mutably borrow `x.0` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:213:22\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n@@ -35,7 +71,7 @@ LL |                 Some(ref mut r) => *r = None,\n    |                      ^^^^^^^^^ cannot mutably borrow\n \n error[E0506]: cannot assign to `t` because it is borrowed\n-  --> $DIR/match-guards-partially-borrow.rs:117:13\n+  --> $DIR/match-guards-partially-borrow.rs:225:13\n    |\n LL |         s if {\n    |         - borrow of `t` occurs here\n@@ -45,8 +81,28 @@ LL |             false\n LL |         } => (), // What value should `s` have in the arm?\n    |         - borrow later used here\n \n+error[E0506]: cannot assign to `t` because it is borrowed\n+  --> $DIR/match-guards-partially-borrow.rs:235:13\n+   |\n+LL |         s if let Some(()) = {\n+   |         - borrow of `t` occurs here\n+LL |             t = !t;\n+   |             ^^^^^^ assignment to borrowed `t` occurs here\n+LL |             None\n+LL |         } => (), // What value should `s` have in the arm?\n+   |         - borrow later used here\n+\n+error[E0510]: cannot assign `y` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:246:13\n+   |\n+LL |     match *y {\n+   |           -- value is immutable in match guard\n+...\n+LL |             y = &true;\n+   |             ^^^^^^^^^ cannot assign\n+\n error[E0510]: cannot assign `y` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:128:13\n+  --> $DIR/match-guards-partially-borrow.rs:257:13\n    |\n LL |     match *y {\n    |           -- value is immutable in match guard\n@@ -55,7 +111,16 @@ LL |             y = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `z` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:139:13\n+  --> $DIR/match-guards-partially-borrow.rs:268:13\n+   |\n+LL |     match z {\n+   |           - value is immutable in match guard\n+...\n+LL |             z = &true;\n+   |             ^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `z` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:279:13\n    |\n LL |     match z {\n    |           - value is immutable in match guard\n@@ -64,7 +129,16 @@ LL |             z = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `a` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:151:13\n+  --> $DIR/match-guards-partially-borrow.rs:291:13\n+   |\n+LL |     match a {\n+   |           - value is immutable in match guard\n+...\n+LL |             a = &true;\n+   |             ^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `a` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:303:13\n    |\n LL |     match a {\n    |           - value is immutable in match guard\n@@ -73,15 +147,24 @@ LL |             a = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `b` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:162:13\n+  --> $DIR/match-guards-partially-borrow.rs:314:13\n+   |\n+LL |     match b {\n+   |           - value is immutable in match guard\n+...\n+LL |             b = &true;\n+   |             ^^^^^^^^^ cannot assign\n+\n+error[E0510]: cannot assign `b` in match guard\n+  --> $DIR/match-guards-partially-borrow.rs:325:13\n    |\n LL |     match b {\n    |           - value is immutable in match guard\n ...\n LL |             b = &true;\n    |             ^^^^^^^^^ cannot assign\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 18 previous errors\n \n Some errors have detailed explanations: E0506, E0510.\n For more information about an error, try `rustc --explain E0506`."}, {"sha": "6f0d2b045918d6007ac206369c6f52724a4151cf", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,13 +1,24 @@\n+#![feature(if_let_guard)]\n+\n enum VecWrapper { A(Vec<i32>) }\n \n-fn foo(x: VecWrapper) -> usize {\n+fn if_guard(x: VecWrapper) -> usize {\n     match x {\n         VecWrapper::A(v) if { drop(v); false } => 1,\n         //~^ ERROR cannot move out of `v` in pattern guard\n         VecWrapper::A(v) => v.len()\n     }\n }\n \n+fn if_let_guard(x: VecWrapper) -> usize {\n+    match x {\n+        VecWrapper::A(v) if let Some(()) = { drop(v); None } => 1,\n+        //~^ ERROR cannot move out of `v` in pattern guard\n+        VecWrapper::A(v) => v.len()\n+    }\n+}\n+\n fn main() {\n-    foo(VecWrapper::A(vec![107]));\n+    if_guard(VecWrapper::A(vec![107]));\n+    if_let_guard(VecWrapper::A(vec![107]));\n }"}, {"sha": "a749361bf30ee10847d64615248d83dbc8332b6c", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,11 +1,19 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-across-arms.rs:5:36\n+  --> $DIR/rfc-reject-double-move-across-arms.rs:7:36\n    |\n LL |         VecWrapper::A(v) if { drop(v); false } => 1,\n    |                                    ^ move occurs because `v` has type `Vec<i32>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `v` in pattern guard\n+  --> $DIR/rfc-reject-double-move-across-arms.rs:15:51\n+   |\n+LL |         VecWrapper::A(v) if let Some(()) = { drop(v); None } => 1,\n+   |                                                   ^ move occurs because `v` has type `Vec<i32>`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "827335f6a8494395fbea18f5f8d39c275cf49b78", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,6 +1,8 @@\n+#![feature(if_let_guard)]\n+\n struct A { a: Box<i32> }\n \n-fn foo(n: i32) {\n+fn if_guard(n: i32) {\n     let x = A { a: Box::new(n) };\n     let _y = match x {\n         A { a: v } if { drop(v); true } => v,\n@@ -9,6 +11,16 @@ fn foo(n: i32) {\n     };\n }\n \n+fn if_let_guard(n: i32) {\n+    let x = A { a: Box::new(n) };\n+    let _y = match x {\n+        A { a: v } if let Some(()) = { drop(v); Some(()) } => v,\n+        //~^ ERROR cannot move out of `v` in pattern guard\n+        _ => Box::new(0),\n+    };\n+}\n+\n fn main() {\n-    foo(107);\n+    if_guard(107);\n+    if_let_guard(107);\n }"}, {"sha": "9285492b224503305299266bc8cbac4ca2d692dd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/56aaf749b63824428348268dde37b84634647c4f/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr?ref=56aaf749b63824428348268dde37b84634647c4f", "patch": "@@ -1,11 +1,19 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-in-first-arm.rs:6:30\n+  --> $DIR/rfc-reject-double-move-in-first-arm.rs:8:30\n    |\n LL |         A { a: v } if { drop(v); true } => v,\n    |                              ^ move occurs because `v` has type `Box<i32>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `v` in pattern guard\n+  --> $DIR/rfc-reject-double-move-in-first-arm.rs:17:45\n+   |\n+LL |         A { a: v } if let Some(()) = { drop(v); Some(()) } => v,\n+   |                                             ^ move occurs because `v` has type `Box<i32>`, which does not implement the `Copy` trait\n+   |\n+   = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}]}