{"sha": "e3c5f6958f3fc82858a3674277d620d3ba844350", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYzVmNjk1OGYzZmM4Mjg1OGEzNjc0Mjc3ZDYyMGQzYmE4NDQzNTA=", "commit": {"author": {"name": "boats", "email": "boats@mozilla.com", "date": "2018-03-15T19:55:37Z"}, "committer": {"name": "boats", "email": "boats@mozilla.com", "date": "2018-03-15T20:01:28Z"}, "message": "Add liballoc APIs.", "tree": {"sha": "b1679361dc220479a6fc92515774f2c2d97e29bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1679361dc220479a6fc92515774f2c2d97e29bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c5f6958f3fc82858a3674277d620d3ba844350", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQSrtBlUz85gHk4onJKSU3shEQpoSwUCWqrRGgAKCRCSU3shEQpo\nS+VnAQDfgk3PRJMmoeY0gMO82H1bX6h7QtQ+CQUui5q7ETVkQAD/RlJS7GFM/RQg\nBPos1NjuPoc2qnaJIjr1LCRWwIzGLgk=\n=wf7K\n-----END PGP SIGNATURE-----", "payload": "tree b1679361dc220479a6fc92515774f2c2d97e29bc\nparent 918ef671b04398560d8860363736ba120825e6fe\nauthor boats <boats@mozilla.com> 1521143737 -0700\ncommitter boats <boats@mozilla.com> 1521144088 -0700\n\nAdd liballoc APIs.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c5f6958f3fc82858a3674277d620d3ba844350", "html_url": "https://github.com/rust-lang/rust/commit/e3c5f6958f3fc82858a3674277d620d3ba844350", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c5f6958f3fc82858a3674277d620d3ba844350/comments", "author": null, "committer": null, "parents": [{"sha": "918ef671b04398560d8860363736ba120825e6fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/918ef671b04398560d8860363736ba120825e6fe", "html_url": "https://github.com/rust-lang/rust/commit/918ef671b04398560d8860363736ba120825e6fe"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "42903c7bde0d842c880b650306e2b9726ac0b6db", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 95, "deletions": 2, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/e3c5f6958f3fc82858a3674277d620d3ba844350/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c5f6958f3fc82858a3674277d620d3ba844350/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e3c5f6958f3fc82858a3674277d620d3ba844350", "patch": "@@ -64,8 +64,8 @@ use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{self, Hash, Hasher};\n use core::iter::FusedIterator;\n-use core::marker::{self, Unsize};\n-use core::mem;\n+use core::marker::{self, Unpin, Unsize};\n+use core::mem::{self, Pin};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ops::{BoxPlace, Boxed, InPlace, Place, Placer};\n use core::ptr::{self, NonNull, Unique};\n@@ -896,3 +896,96 @@ impl<T> Generator for Box<T>\n         (**self).resume()\n     }\n }\n+\n+/// A pinned, heap allocated reference.\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+pub struct PinBox<T: ?Sized> {\n+    inner: Box<T>,\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+impl<T> PinBox<T> {\n+    /// Allocate memory on the heap, move the data into it and pin it.\n+    #[unstable(feature = \"pin\", issue = \"0\")]\n+    pub fn new(data: T) -> PinBox<T> {\n+        PinBox { inner: Box::new(data) }\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+impl<T: ?Sized> PinBox<T> {\n+    /// Get a pinned reference to the data in this PinBox.\n+    pub fn as_pin<'a>(&'a mut self) -> Pin<'a, T> {\n+        unsafe { Pin::new_unchecked(&mut *self.inner) }\n+    }\n+\n+    /// Get a mutable reference to the data inside this PinBox.\n+    ///\n+    /// This function is unsafe. Users must guarantee that the data is never\n+    /// moved out of this reference.\n+    pub unsafe fn get_mut<'a>(this: &'a mut PinBox<T>) -> &'a mut T {\n+        &mut *this.inner\n+    }\n+\n+    /// Convert this PinBox into an unpinned Box.\n+    ///\n+    /// This function is unsafe. Users must guarantee that the data is never\n+    /// moved out of the box.\n+    pub unsafe fn unpin(this: PinBox<T>) -> Box<T> {\n+        this.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+impl<T: ?Sized> From<Box<T>> for PinBox<T> {\n+    fn from(boxed: Box<T>) -> PinBox<T> {\n+        PinBox { inner: boxed }\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+impl<T: Unpin + ?Sized> From<PinBox<T>> for Box<T> {\n+    fn from(pinned: PinBox<T>) -> Box<T> {\n+        pinned.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+impl<T: ?Sized> Deref for PinBox<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+impl<T: Unpin + ?Sized> DerefMut for PinBox<T> {\n+    fn deref_mut(&mut self) -> &mut T {\n+        &mut *self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+impl<T: fmt::Display + ?Sized> fmt::Display for PinBox<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&*self.inner, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+impl<T: fmt::Debug + ?Sized> fmt::Debug for PinBox<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&*self.inner, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"0\")]\n+impl<T: ?Sized> fmt::Pointer for PinBox<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // It's not possible to extract the inner Uniq directly from the Box,\n+        // instead we cast it to a *const which aliases the Unique\n+        let ptr: *const T = &*self.inner;\n+        fmt::Pointer::fmt(&ptr, f)\n+    }\n+}"}, {"sha": "73e452b6a36eb7893677685ae3c96e4e5f850e9f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3c5f6958f3fc82858a3674277d620d3ba844350/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c5f6958f3fc82858a3674277d620d3ba844350/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=e3c5f6958f3fc82858a3674277d620d3ba844350", "patch": "@@ -107,6 +107,7 @@\n #![feature(offset_to)]\n #![feature(optin_builtin_traits)]\n #![feature(pattern)]\n+#![feature(pin)]\n #![feature(placement_in_syntax)]\n #![feature(placement_new_protocol)]\n #![feature(ptr_internals)]"}]}