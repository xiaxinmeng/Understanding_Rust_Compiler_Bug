{"sha": "a9f8f98caabbe388b576f1c277cff51253db6b44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZjhmOThjYWFiYmUzODhiNTc2ZjFjMjc3Y2ZmNTEyNTNkYjZiNDQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-01-16T07:36:10Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-01-16T08:45:51Z"}, "message": "Rename ExprKind::Vec to Array in HIR and HAIR.\n\nThis is a clearer name since they represent [a, b, c] array literals.", "tree": {"sha": "689a3cfc214a85c33024c50d36a3c8346ce52148", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/689a3cfc214a85c33024c50d36a3c8346ce52148"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f8f98caabbe388b576f1c277cff51253db6b44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f8f98caabbe388b576f1c277cff51253db6b44", "html_url": "https://github.com/rust-lang/rust/commit/a9f8f98caabbe388b576f1c277cff51253db6b44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f8f98caabbe388b576f1c277cff51253db6b44/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff591b6dc0e0a107c778d0bb4cf103881527e1a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff591b6dc0e0a107c778d0bb4cf103881527e1a5", "html_url": "https://github.com/rust-lang/rust/commit/ff591b6dc0e0a107c778d0bb4cf103881527e1a5"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "3b20a77ad0372a9f7d5b2ed7f8b87cb6a474bae3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -1382,7 +1382,7 @@ impl<'a> LoweringContext<'a> {\n                     return self.expr_block(P(block), e.attrs.clone());\n                 }\n \n-                ExprKind::Vec(ref exprs) => {\n+                ExprKind::Array(ref exprs) => {\n                     hir::ExprArray(exprs.iter().map(|x| self.lower_expr(x)).collect())\n                 }\n                 ExprKind::Repeat(ref expr, ref count) => {"}, {"sha": "0487e277a338bb84ebfe0634ffb4ab76031e698c", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -87,7 +87,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 block.and(Lvalue::Static(id))\n             }\n \n-            ExprKind::Vec { .. } |\n+            ExprKind::Array { .. } |\n             ExprKind::Tuple { .. } |\n             ExprKind::Adt { .. } |\n             ExprKind::Closure { .. } |"}, {"sha": "48690a275c205fca33e0a2d192e4a038e3e67586", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let source = unpack!(block = this.as_operand(block, source));\n                 block.and(Rvalue::Cast(CastKind::Unsize, source, expr.ty))\n             }\n-            ExprKind::Vec { fields } => {\n+            ExprKind::Array { fields } => {\n                 // (*) We would (maybe) be closer to trans if we\n                 // handled this and other aggregate cases via\n                 // `into()`, not `as_rvalue` -- in that case, instead"}, {"sha": "6e57c10964cb21b762aa99c8042180534e99c2f9", "filename": "src/librustc_mir/build/expr/category.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fcategory.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -60,7 +60,7 @@ impl Category {\n             ExprKind::Call { .. } =>\n                 Some(Category::Rvalue(RvalueFunc::Into)),\n \n-            ExprKind::Vec { .. } |\n+            ExprKind::Array { .. } |\n             ExprKind::Tuple { .. } |\n             ExprKind::Adt { .. } |\n             ExprKind::Closure { .. } |"}, {"sha": "24b9c955658fd831d87e0ca59c9daf94310e07ea", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -256,7 +256,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::VarRef { .. } |\n             ExprKind::SelfRef |\n             ExprKind::StaticRef { .. } |\n-            ExprKind::Vec { .. } |\n+            ExprKind::Array { .. } |\n             ExprKind::Tuple { .. } |\n             ExprKind::Adt { .. } |\n             ExprKind::Closure { .. } |"}, {"sha": "cdf7cae3020c891e83bf4ef4742163f11bdffc37", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -664,7 +664,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 value_extents: cx.tcx.region_maps.node_extent(value.id),\n             }\n         }\n-        hir::ExprArray(ref fields) => ExprKind::Vec { fields: fields.to_ref() },\n+        hir::ExprArray(ref fields) => ExprKind::Array { fields: fields.to_ref() },\n         hir::ExprTup(ref fields) => ExprKind::Tuple { fields: fields.to_ref() },\n     };\n "}, {"sha": "f57d442752d99b17deec49ab64e27899ce808374", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -214,7 +214,7 @@ pub enum ExprKind<'tcx> {\n         value: ExprRef<'tcx>,\n         count: TypedConstVal<'tcx>,\n     },\n-    Vec {\n+    Array {\n         fields: Vec<ExprRef<'tcx>>,\n     },\n     Tuple {"}, {"sha": "09fce1dbfa15ad824a666fe369af88e428dc8d9c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -864,7 +864,7 @@ pub enum ExprKind {\n     /// First expr is the place; second expr is the value.\n     InPlace(P<Expr>, P<Expr>),\n     /// An array (`[a, b, c, d]`)\n-    Vec(Vec<P<Expr>>),\n+    Array(Vec<P<Expr>>),\n     /// A function call\n     ///\n     /// The first field resolves to the function itself,"}, {"sha": "8c4b56b7fc0276f0c596faf69d96fe6f60d5f7b8", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -745,7 +745,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn expr_vec(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n-        self.expr(sp, ast::ExprKind::Vec(exprs))\n+        self.expr(sp, ast::ExprKind::Array(exprs))\n     }\n     fn expr_vec_ng(&self, sp: Span) -> P<ast::Expr> {\n         self.expr_call_global(sp, self.std_path(&[\"vec\", \"Vec\", \"new\"]),"}, {"sha": "e230aae08f056d35f107738fa43857fc2c598289", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -1123,8 +1123,8 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span, attrs}: Expr, folder: &mu\n             ExprKind::InPlace(p, e) => {\n                 ExprKind::InPlace(folder.fold_expr(p), folder.fold_expr(e))\n             }\n-            ExprKind::Vec(exprs) => {\n-                ExprKind::Vec(folder.fold_exprs(exprs))\n+            ExprKind::Array(exprs) => {\n+                ExprKind::Array(folder.fold_exprs(exprs))\n             }\n             ExprKind::Repeat(expr, count) => {\n                 ExprKind::Repeat(folder.fold_expr(expr), folder.fold_expr(count))"}, {"sha": "6264b7f3ed3d3e188e98141517c07591897b1c72", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -2140,7 +2140,7 @@ impl<'a> Parser<'a> {\n                 if self.check(&token::CloseDelim(token::Bracket)) {\n                     // Empty vector.\n                     self.bump();\n-                    ex = ExprKind::Vec(Vec::new());\n+                    ex = ExprKind::Array(Vec::new());\n                 } else {\n                     // Nonempty vector.\n                     let first_expr = self.parse_expr()?;\n@@ -2160,11 +2160,11 @@ impl<'a> Parser<'a> {\n                         )?;\n                         let mut exprs = vec![first_expr];\n                         exprs.extend(remaining_exprs);\n-                        ex = ExprKind::Vec(exprs);\n+                        ex = ExprKind::Array(exprs);\n                     } else {\n                         // Vector with one element.\n                         self.expect(&token::CloseDelim(token::Bracket))?;\n-                        ex = ExprKind::Vec(vec![first_expr]);\n+                        ex = ExprKind::Array(vec![first_expr]);\n                     }\n                 }\n                 hi = self.prev_span.hi;"}, {"sha": "057737d7548c877e753cd791e1f7a3cedb45d436", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -2018,7 +2018,7 @@ impl<'a> State<'a> {\n             ast::ExprKind::InPlace(ref place, ref expr) => {\n                 self.print_expr_in_place(place, expr)?;\n             }\n-            ast::ExprKind::Vec(ref exprs) => {\n+            ast::ExprKind::Array(ref exprs) => {\n                 self.print_expr_vec(&exprs[..], attrs)?;\n             }\n             ast::ExprKind::Repeat(ref element, ref count) => {"}, {"sha": "74ec33fdd2a85eeea381bbdcd11f842e364e91fc", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -628,7 +628,7 @@ fn mk_test_descs(cx: &TestCtxt) -> P<ast::Expr> {\n         node: ast::ExprKind::AddrOf(ast::Mutability::Immutable,\n             P(ast::Expr {\n                 id: ast::DUMMY_NODE_ID,\n-                node: ast::ExprKind::Vec(cx.testfns.iter().map(|test| {\n+                node: ast::ExprKind::Array(cx.testfns.iter().map(|test| {\n                     mk_test_desc_and_fn_rec(cx, test)\n                 }).collect()),\n                 span: DUMMY_SP,"}, {"sha": "5c719457fa47711cfb338bc98d5315884698e544", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9f8f98caabbe388b576f1c277cff51253db6b44/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a9f8f98caabbe388b576f1c277cff51253db6b44", "patch": "@@ -650,7 +650,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(place);\n             visitor.visit_expr(subexpression)\n         }\n-        ExprKind::Vec(ref subexpressions) => {\n+        ExprKind::Array(ref subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n         ExprKind::Repeat(ref element, ref count) => {"}]}