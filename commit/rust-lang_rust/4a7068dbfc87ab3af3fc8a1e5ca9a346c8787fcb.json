{"sha": "4a7068dbfc87ab3af3fc8a1e5ca9a346c8787fcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNzA2OGRiZmM4N2FiM2FmM2ZjOGExZTVjYTlhMzQ2Yzg3ODdmY2I=", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-04-28T23:01:59Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2021-06-17T08:42:38Z"}, "message": "Ensure Instances are only jitted once", "tree": {"sha": "ef426c887dcfe8b94282c295ad20dc323577f2c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef426c887dcfe8b94282c295ad20dc323577f2c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a7068dbfc87ab3af3fc8a1e5ca9a346c8787fcb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1ycQ10Ou2Tzw/6ueaKZbzZ0on/4FAmDLCv4ACgkQaKZbzZ0o\nn/49Fw/9EIkZHhmJLSKxr2y8Sb7BxbU+tFmv8P7vRa9uxTrgm5S6LvFGOY7/AMNx\n/3utTisjSYV0eNckF2DQfsn3BQbyd+SDrc4b0aBmijQduUAJ44Kik42/9Hr3B6y1\nwbBSvZdufPTVT7/Zd7lWuOStHTRXbhF+WlAYUH5f6KW7t9Sz6KYINPa6UataONGL\nrLDoe9hpZyeeRAW9BiGZRmkH6Pw2bKmyf7EgJXrr01402CY0TDrp46SDa2nrNKlV\nfGsy1A4IFuvQqDMEZ/HxhjpZ0YmMILRdkfuXJZ25zcvBIsmFrrDHpDtMdUAd2nPM\nhVrRtMVjG6OAv4CrFH3W7KQjaGK5yCBVZThr3u3FHhcCvh+DQ18IrkvLHcGBbaK7\nWBs3OwRpQiWhRATR2hJ3/fbsorkUbUMBMTcWfnKJ03iVhvuWLdaBKTMiOthQN+FZ\nUlQ0+rI+djMBnW+Wunrlk/gH2oFRBaq2AFqfxzTKHntYy7GOtkhTuEjCAfTcid7P\n4gzM25bdEyZyW0kJLsru4nrRZ0sfMIx0onZ3NNCGbDwopOpxJjzRxwzr1VcFkbWX\ngmd5sishZGVw6RkczOCA402iiS4QYRmB0zRqD/O5f9w+N2/fHbSUy+IOB6I6FHcN\nLHQyiDsk/r856bv+nSHdYOSS6oxt2UUYiHS71kLFvpBSKB9BRs4=\n=CN5A\n-----END PGP SIGNATURE-----", "payload": "tree ef426c887dcfe8b94282c295ad20dc323577f2c7\nparent 2945b96e587e162a52c66dfaa95aec8944b11797\nauthor Alan Egerton <eggyal@gmail.com> 1619650919 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1623919358 +0100\n\nEnsure Instances are only jitted once\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7068dbfc87ab3af3fc8a1e5ca9a346c8787fcb", "html_url": "https://github.com/rust-lang/rust/commit/4a7068dbfc87ab3af3fc8a1e5ca9a346c8787fcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a7068dbfc87ab3af3fc8a1e5ca9a346c8787fcb/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2945b96e587e162a52c66dfaa95aec8944b11797", "url": "https://api.github.com/repos/rust-lang/rust/commits/2945b96e587e162a52c66dfaa95aec8944b11797", "html_url": "https://github.com/rust-lang/rust/commit/2945b96e587e162a52c66dfaa95aec8944b11797"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "39a39e764cb6dfe8966f6fa1d3b81cb7ee5441f1", "filename": "src/driver/jit.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4a7068dbfc87ab3af3fc8a1e5ca9a346c8787fcb/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a7068dbfc87ab3af3fc8a1e5ca9a346c8787fcb/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=4a7068dbfc87ab3af3fc8a1e5ca9a346c8787fcb", "patch": "@@ -37,6 +37,7 @@ enum UnsafeMessage {\n     /// this message is sent.\n     JitFn {\n         instance_ptr: *const Instance<'static>,\n+        trampoline_ptr: *const u8,\n         tx: mpsc::Sender<*const u8>,\n     },\n }\n@@ -192,19 +193,19 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n     loop {\n         match rx.recv().unwrap() {\n             // lazy JIT compilation request - compile requested instance and return pointer to result\n-            UnsafeMessage::JitFn { instance_ptr, tx } => {\n-                tx.send(jit_fn(instance_ptr))\n+            UnsafeMessage::JitFn { instance_ptr, trampoline_ptr, tx } => {\n+                tx.send(jit_fn(instance_ptr, trampoline_ptr))\n                   .expect(\"jitted runtime hung up before response to lazy JIT request was sent\");\n             }\n         }\n     }\n }\n \n #[no_mangle]\n-extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8 {\n+extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) -> *const u8 {\n     // send the JIT request to the rustc thread, with a channel for the response\n     let (tx, rx) = mpsc::channel();\n-    UnsafeMessage::JitFn { instance_ptr, tx }\n+    UnsafeMessage::JitFn { instance_ptr, trampoline_ptr, tx }\n         .send()\n         .expect(\"rustc thread hung up before lazy JIT request was sent\");\n \n@@ -213,7 +214,7 @@ extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>) -> *const u8\n       .expect(\"rustc thread hung up before responding to sent lazy JIT request\")\n }\n \n-fn jit_fn(instance_ptr: *const Instance<'static>) -> *const u8 {\n+fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) -> *const u8 {\n     rustc_middle::ty::tls::with(|tcx| {\n         // lift is used to ensure the correct lifetime for instance.\n         let instance = tcx.lift(unsafe { *instance_ptr }).unwrap();\n@@ -227,6 +228,17 @@ fn jit_fn(instance_ptr: *const Instance<'static>) -> *const u8 {\n             let name = tcx.symbol_name(instance).name;\n             let sig = crate::abi::get_function_sig(tcx, jit_module.isa().triple(), instance);\n             let func_id = jit_module.declare_function(name, Linkage::Export, &sig).unwrap();\n+\n+            let current_ptr = jit_module.read_got_entry(func_id);\n+\n+            // If the function's GOT entry has already been updated to point at something other\n+            // than the shim trampoline, don't re-jit but just return the new pointer instead.\n+            // This does not need synchronization as this code is executed only by a sole rustc\n+            // thread.\n+            if current_ptr != trampoline_ptr {\n+                return current_ptr;\n+            }\n+\n             jit_module.prepare_for_function_redefine(func_id).unwrap();\n \n             let mut cx = crate::CodegenCx::new(tcx, backend_config, jit_module.isa(), false);\n@@ -321,7 +333,7 @@ fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx>, module: &mut JITModule, inst: In\n             Linkage::Import,\n             &Signature {\n                 call_conv: module.target_config().default_call_conv,\n-                params: vec![AbiParam::new(pointer_type)],\n+                params: vec![AbiParam::new(pointer_type), AbiParam::new(pointer_type)],\n                 returns: vec![AbiParam::new(pointer_type)],\n             },\n         )\n@@ -334,6 +346,7 @@ fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx>, module: &mut JITModule, inst: In\n     let mut builder_ctx = FunctionBuilderContext::new();\n     let mut trampoline_builder = FunctionBuilder::new(trampoline, &mut builder_ctx);\n \n+    let trampoline_fn = module.declare_func_in_func(func_id, trampoline_builder.func);\n     let jit_fn = module.declare_func_in_func(jit_fn, trampoline_builder.func);\n     let sig_ref = trampoline_builder.func.import_signature(sig);\n \n@@ -343,7 +356,8 @@ fn codegen_shim<'tcx>(cx: &mut CodegenCx<'tcx>, module: &mut JITModule, inst: In\n \n     trampoline_builder.switch_to_block(entry_block);\n     let instance_ptr = trampoline_builder.ins().iconst(pointer_type, instance_ptr as u64 as i64);\n-    let jitted_fn = trampoline_builder.ins().call(jit_fn, &[instance_ptr]);\n+    let trampoline_ptr = trampoline_builder.ins().func_addr(pointer_type, trampoline_fn);\n+    let jitted_fn = trampoline_builder.ins().call(jit_fn, &[instance_ptr, trampoline_ptr]);\n     let jitted_fn = trampoline_builder.func.dfg.inst_results(jitted_fn)[0];\n     let call_inst = trampoline_builder.ins().call_indirect(sig_ref, jitted_fn, &fn_args);\n     let ret_vals = trampoline_builder.func.dfg.inst_results(call_inst).to_vec();"}]}