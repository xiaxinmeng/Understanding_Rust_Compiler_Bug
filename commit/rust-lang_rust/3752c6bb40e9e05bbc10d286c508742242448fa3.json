{"sha": "3752c6bb40e9e05bbc10d286c508742242448fa3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NTJjNmJiNDBlOWUwNWJiYzEwZDI4NmM1MDg3NDIyNDI0NDhmYTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-26T12:53:41Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-29T07:27:45Z"}, "message": "remove const_fn feature gate from const tests", "tree": {"sha": "bf16c44f3606df63a060407f99fe9b53423d85a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf16c44f3606df63a060407f99fe9b53423d85a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3752c6bb40e9e05bbc10d286c508742242448fa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3752c6bb40e9e05bbc10d286c508742242448fa3", "html_url": "https://github.com/rust-lang/rust/commit/3752c6bb40e9e05bbc10d286c508742242448fa3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3752c6bb40e9e05bbc10d286c508742242448fa3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a852776f47850955bbd1edbd9e676e59eeea6f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a852776f47850955bbd1edbd9e676e59eeea6f4", "html_url": "https://github.com/rust-lang/rust/commit/9a852776f47850955bbd1edbd9e676e59eeea6f4"}], "stats": {"total": 174, "additions": 69, "deletions": 105}, "files": [{"sha": "5a6283e9f13df1d6f7e56bd62d1b7d35ec008b00", "filename": "src/test/ui/array-slice-vec/subslice-patterns-const-eval-match.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fsubslice-patterns-const-eval-match.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -2,8 +2,6 @@\n \n // run-pass\n \n-#![feature(const_fn)]\n-\n #[derive(PartialEq, Debug, Clone)]\n struct N(u8);\n "}, {"sha": "f3024120df1f957a88e29f085f78c03f095945f6", "filename": "src/test/ui/associated-consts/associated-const-in-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-consts%2Fassociated-const-in-trait.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,6 @@\n // #29924\n \n-#![feature(const_fn, associated_consts)]\n+#![feature(associated_consts)]\n \n trait Trait {\n     const N: usize;"}, {"sha": "e615955186020f6e95d9e2c932a5dcaa7a643c07", "filename": "src/test/ui/consts/const-eval/auxiliary/stability.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -3,7 +3,6 @@\n #![crate_type=\"rlib\"]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#![feature(const_fn)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "b3c677c69849d70782bc26c7ec01e2f7a0815b0e", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![feature(const_fn)]\n \n fn double(x: usize) -> usize { x * 2 }\n const fn double_const(x: usize) -> usize { x * 2 }"}, {"sha": "a16ac7b2a24ee9d1e740020fb85f68f96adbb1b3", "filename": "src/test/ui/consts/const-eval/const_fn_ptr.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,27 +1,27 @@\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_fn_ptr.rs:12:5\n+  --> $DIR/const_fn_ptr.rs:11:5\n    |\n LL |     X(x)\n    |     ^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_fn_ptr.rs:16:5\n+  --> $DIR/const_fn_ptr.rs:15:5\n    |\n LL |     X_CONST(x)\n    |     ^^^^^^^^^^\n help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/const_fn_ptr.rs:19:14\n+  --> $DIR/const_fn_ptr.rs:18:14\n    |\n LL | const fn foo(x: fn(usize) -> usize, y: usize)  -> usize {\n    |              ^\n help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/const_fn_ptr.rs:20:5\n+  --> $DIR/const_fn_ptr.rs:19:5\n    |\n LL |     x(y)\n    |     ^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_fn_ptr.rs:20:5\n+  --> $DIR/const_fn_ptr.rs:19:5\n    |\n LL |     x(y)\n    |     ^^^^"}, {"sha": "1896eba82f2fabe5f1496e4a43d5703f4e95c3f4", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags: -Zunleash-the-miri-inside-of-you\n-#![feature(const_fn)]\n #![allow(unused)]\n \n fn double(x: usize) -> usize { x * 2 }"}, {"sha": "ec5de575906cc525316bb7b6f775bf55f96d35b9", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,7 +1,7 @@\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_fn_ptr_fail.rs:10:5\n+  --> $DIR/const_fn_ptr_fail.rs:9:5\n    |\n LL |     X(x) // FIXME: this should error someday\n    |     ^^^^"}, {"sha": "804ebf660086dd97b024a4d919a3d94fd81a13c0", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,7 +1,6 @@\n // build-fail\n // compile-flags: -Zunleash-the-miri-inside-of-you\n \n-#![feature(const_fn)]\n #![allow(const_err)]\n \n fn double(x: usize) -> usize {"}, {"sha": "4f7a771f4184f8d50555f5476b9ae06d11dfdcaa", "filename": "src/test/ui/consts/const-eval/const_fn_ptr_fail2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_fn_ptr_fail2.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,29 +1,29 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_fn_ptr_fail2.rs:20:16\n+  --> $DIR/const_fn_ptr_fail2.rs:19:16\n    |\n LL |     assert_eq!(Y, 4);\n    |                ^ referenced constant has errors\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_fn_ptr_fail2.rs:22:16\n+  --> $DIR/const_fn_ptr_fail2.rs:21:16\n    |\n LL |     assert_eq!(Z, 4);\n    |                ^ referenced constant has errors\n \n warning: skipping const checks\n    |\n help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/const_fn_ptr_fail2.rs:12:14\n+  --> $DIR/const_fn_ptr_fail2.rs:11:14\n    |\n LL | const fn bar(x: fn(usize) -> usize, y: usize) -> usize {\n    |              ^\n help: skipping check for `const_fn_fn_ptr_basics` feature\n-  --> $DIR/const_fn_ptr_fail2.rs:13:5\n+  --> $DIR/const_fn_ptr_fail2.rs:12:5\n    |\n LL |     x(y)\n    |     ^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_fn_ptr_fail2.rs:13:5\n+  --> $DIR/const_fn_ptr_fail2.rs:12:5\n    |\n LL |     x(y)\n    |     ^^^^"}, {"sha": "4b3cf70739cc46fff76a31a7a292f851d283c997", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -3,7 +3,6 @@\n             we're apparently really bad at it\",\n             issue = \"none\")]\n \n-#![feature(const_fn)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "69e3ca716a90939e655dc61d6a7f4c2df2dafb5f", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,13 +1,13 @@\n error: `foo` is not yet stable as a const fn\n-  --> $DIR/dont_promote_unstable_const_fn.rs:15:25\n+  --> $DIR/dont_promote_unstable_const_fn.rs:14:25\n    |\n LL | const fn bar() -> u32 { foo() }\n    |                         ^^^^^\n    |\n    = help: add `#![feature(foo)]` to the crate attributes to enable\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/dont_promote_unstable_const_fn.rs:18:28\n+  --> $DIR/dont_promote_unstable_const_fn.rs:17:28\n    |\n LL |     let _: &'static u32 = &foo();\n    |            ------------    ^^^^^ creates a temporary which is freed while still in use\n@@ -17,7 +17,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/dont_promote_unstable_const_fn.rs:22:28\n+  --> $DIR/dont_promote_unstable_const_fn.rs:21:28\n    |\n LL |     let _: &'static u32 = &meh();\n    |            ------------    ^^^^^ creates a temporary which is freed while still in use\n@@ -28,7 +28,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/dont_promote_unstable_const_fn.rs:23:26\n+  --> $DIR/dont_promote_unstable_const_fn.rs:22:26\n    |\n LL |     let x: &'static _ = &std::time::Duration::from_millis(42).subsec_millis();\n    |            ----------    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use"}, {"sha": "9ee2777a647e0202ac9d44fd94c9db2de886336d", "filename": "src/test/ui/consts/const-eval/double_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_promotion.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(const_fn, rustc_attrs)]\n+#![feature(rustc_attrs)]\n \n #[rustc_args_required_const(0)]\n pub const fn a(value: u8) -> u8 {"}, {"sha": "26162aa622815d2b7b3acdad9201aa2ff91ff359", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_fn)]\n-\n fn main() {}\n \n #[repr(C)]"}, {"sha": "bc3b6aa66531e4fffb15d61c93dc8571e5afcb2f", "filename": "src/test/ui/consts/const-eval/feature-gate-const_fn_union.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Ffeature-gate-const_fn_union.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: unions in const fn are unstable\n-  --> $DIR/feature-gate-const_fn_union.rs:12:5\n+  --> $DIR/feature-gate-const_fn_union.rs:10:5\n    |\n LL |     Foo { u }.i\n    |     ^^^^^^^^^^^"}, {"sha": "1a99c77c6dd8ec57c4fbcae8613257597f55a50e", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_fn, const_fn_union)]\n+#![feature(const_fn_union)]\n \n #![allow(const_err)]\n "}, {"sha": "c9e4871bb7c2a886c8daae42b4499f1a1a0b06f6", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_fn, const_fn_union)]\n+#![feature(const_fn_union)]\n \n #![deny(const_err)]\n "}, {"sha": "cae8fcf1068ad01b285477fd3db5298e8a68f436", "filename": "src/test/ui/consts/const-eval/simd/insert_extract.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_fn)]\n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n #![feature(staged_api)]"}, {"sha": "80263718330bde665427142c613eddbc3b3933cc", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,4 @@\n // only-x86_64\n-#![feature(const_fn)]\n \n type Field1 = i32;\n type Field2 = f32;"}, {"sha": "e5a107ff0114e5fe116df53f72e9352e5346d5ad", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-const-eval-field.rs:29:5\n+  --> $DIR/union-const-eval-field.rs:28:5\n    |\n LL |     const FIELD3: Field3 = unsafe { UNION.field3 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes"}, {"sha": "4189619b2aabef297cee9c35160fb1697d2f4a62", "filename": "src/test/ui/consts/const-eval/union-ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,4 @@\n // only-x86_64\n-#![feature(const_fn)]\n \n type Field1 = i32;\n type Field3 = i64;"}, {"sha": "6d44b3c8b282f53604f4c1d159047214bb19542c", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:15:1\n+  --> $DIR/union-ice.rs:14:1\n    |\n LL | const FIELD3: Field3 = unsafe { UNION.field3 };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized bytes, but expected initialized plain (non-pointer) bytes\n@@ -10,7 +10,7 @@ LL | const FIELD3: Field3 = unsafe { UNION.field3 };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:17:1\n+  --> $DIR/union-ice.rs:16:1\n    |\n LL | / const FIELD_PATH: Struct = Struct {\n LL | |     a: 42,\n@@ -24,7 +24,7 @@ LL | | };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/union-ice.rs:27:1\n+  --> $DIR/union-ice.rs:26:1\n    |\n LL | / const FIELD_PATH2: Struct2 = Struct2 {\n LL | |     b: ["}, {"sha": "e25abab7e37487634ce411dd8e91e397387dd99f", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.64bit.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.64bit.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,26 +1,26 @@\n warning: any use of this value will cause an error\n-  --> $DIR/validate_uninhabited_zsts.rs:6:14\n+  --> $DIR/validate_uninhabited_zsts.rs:5:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n    |              |\n    |              transmuting to uninhabited type\n-   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:6:14\n-   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:16:26\n+   |              inside `foo` at $DIR/validate_uninhabited_zsts.rs:5:14\n+   |              inside `FOO` at $DIR/validate_uninhabited_zsts.rs:15:26\n ...\n LL | const FOO: [Empty; 3] = [foo(); 3];\n    | -----------------------------------\n    |\n note: the lint level is defined here\n-  --> $DIR/validate_uninhabited_zsts.rs:15:8\n+  --> $DIR/validate_uninhabited_zsts.rs:14:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/validate_uninhabited_zsts.rs:19:1\n+  --> $DIR/validate_uninhabited_zsts.rs:18:1\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a value of uninhabited type Empty at [0]\n@@ -29,7 +29,7 @@ LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    = note: the raw bytes of the constant (size: 0, align: 1) {}\n \n warning: the type `!` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:6:14\n+  --> $DIR/validate_uninhabited_zsts.rs:5:14\n    |\n LL |     unsafe { std::mem::transmute(()) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL |     unsafe { std::mem::transmute(()) }\n    = note: the `!` type has no valid value\n \n warning: the type `Empty` does not permit zero-initialization\n-  --> $DIR/validate_uninhabited_zsts.rs:19:35\n+  --> $DIR/validate_uninhabited_zsts.rs:18:35\n    |\n LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "112ace5e97fe691857dfe3ab12108b29593fdf47", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,4 @@\n // stderr-per-bitwidth\n-#![feature(const_fn)]\n #![feature(const_fn_transmute)]\n \n const fn foo() -> ! {"}, {"sha": "b9c5a0e040ddc69ea1f687237ed979a7f829df35", "filename": "src/test/ui/consts/const-fn-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_fn)]\n-\n const X : usize = 2;\n \n const fn f(x: usize) -> usize {"}, {"sha": "f5e69bba4c5b7da4aae3ac74161b37234cc6fbee", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,5 @@\n error[E0744]: `for` is not allowed in a `const fn`\n-  --> $DIR/const-fn-error.rs:7:5\n+  --> $DIR/const-fn-error.rs:5:5\n    |\n LL | /     for i in 0..x {\n LL | |\n@@ -11,13 +11,13 @@ LL | |     }\n    | |_____^\n \n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-fn-error.rs:7:14\n+  --> $DIR/const-fn-error.rs:5:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n \n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/const-fn-error.rs:7:14\n+  --> $DIR/const-fn-error.rs:5:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n@@ -26,22 +26,22 @@ LL |     for i in 0..x {\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-fn-error.rs:7:14\n+  --> $DIR/const-fn-error.rs:5:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const-fn-error.rs:7:14\n+  --> $DIR/const-fn-error.rs:5:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n    |              |\n    |              calling non-const function `<std::ops::Range<usize> as IntoIterator>::into_iter`\n-   |              inside `f` at $DIR/const-fn-error.rs:7:14\n+   |              inside `f` at $DIR/const-fn-error.rs:5:14\n ...\n LL |     let a : [i32; f(X)];\n-   |                   ---- inside `main::{constant#0}` at $DIR/const-fn-error.rs:20:19\n+   |                   ---- inside `main::{constant#0}` at $DIR/const-fn-error.rs:18:19\n \n error: aborting due to 5 previous errors\n "}, {"sha": "3107b8128e602f55c125b2eee9c3104470dc43b4", "filename": "src/test/ui/consts/const-fn-mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -3,8 +3,6 @@\n // it if the trait fn is const (but right now no trait fns can be\n // const).\n \n-#![feature(const_fn)]\n-\n trait Foo {\n     fn f() -> u32;\n }"}, {"sha": "a86a06b3ef19e9d292be95784645ca6334b67bb5", "filename": "src/test/ui/consts/const-fn-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-mismatch.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,5 @@\n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/const-fn-mismatch.rs:13:5\n+  --> $DIR/const-fn-mismatch.rs:11:5\n    |\n LL |     const fn f() -> u32 {\n    |     ^^^^^ functions in traits cannot be const"}, {"sha": "00bae3f3b99e0d36e849c74b64d1bc4f0e7c3bc8", "filename": "src/test/ui/consts/const-fn-not-in-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,8 +1,6 @@\n // Test that const fn is illegal in a trait declaration, whether or\n // not a default is provided, and even with the feature gate.\n \n-#![feature(const_fn)]\n-\n trait Foo {\n     const fn f() -> u32;\n     //~^ ERROR functions in traits cannot be declared const"}, {"sha": "5d364eb882dba88e0c328026271184db1ef74713", "filename": "src/test/ui/consts/const-fn-not-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-in-trait.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,11 +1,11 @@\n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/const-fn-not-in-trait.rs:7:5\n+  --> $DIR/const-fn-not-in-trait.rs:5:5\n    |\n LL |     const fn f() -> u32;\n    |     ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/const-fn-not-in-trait.rs:9:5\n+  --> $DIR/const-fn-not-in-trait.rs:7:5\n    |\n LL |     const fn g() -> u32 {\n    |     ^^^^^ functions in traits cannot be const"}, {"sha": "726d6e9f74b9cf458eb7ef3526971bfc8d250135", "filename": "src/test/ui/consts/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-not-safe-for-const.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,6 @@\n // Test that we can't call random fns in a const fn or do other bad things.\n \n-#![feature(const_fn, const_fn_transmute)]\n+#![feature(const_fn_transmute)]\n \n use std::mem::transmute;\n "}, {"sha": "448c4fc0446384e5fd98b624aa45be2cb92a29aa", "filename": "src/test/ui/consts/const-fn-type-name-any.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name-any.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(const_fn)]\n #![feature(const_type_name)]\n #![allow(dead_code)]\n "}, {"sha": "fd4f60cb8899d9a743bb5e1fb60bede281d6e6e4", "filename": "src/test/ui/consts/const-fn-type-name.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n \n #![feature(core_intrinsics)]\n-#![feature(const_fn)]\n #![feature(const_type_name)]\n #![allow(dead_code)]\n "}, {"sha": "03b2f9e3c74e52a93cda25cc26f8ef0424510582", "filename": "src/test/ui/consts/const-mut-refs/const_mut_address_of.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fconst_mut_address_of.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,5 @@\n // check-pass\n #![feature(const_mut_refs)]\n-#![feature(const_fn)]\n #![feature(raw_ref_op)]\n \n struct Foo {"}, {"sha": "f35f3c5e8ef58e78741802c8971f113ea0a2f078", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_mut_refs)]\n-#![feature(const_fn)]\n #![feature(raw_ref_op)]\n #![feature(const_raw_ptr_deref)]\n "}, {"sha": "fb43ce213176ddd18c6120096beb2ba734885785", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,11 +1,11 @@\n error[E0764]: mutable references are not allowed in the final value of constants\n-  --> $DIR/mut_ref_in_final.rs:12:21\n+  --> $DIR/mut_ref_in_final.rs:11:21\n    |\n LL | const B: *mut i32 = &mut 4;\n    |                     ^^^^^^\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:18:40\n+  --> $DIR/mut_ref_in_final.rs:17:40\n    |\n LL | const B3: Option<&mut i32> = Some(&mut 42);\n    |                              ----------^^-\n@@ -15,7 +15,7 @@ LL | const B3: Option<&mut i32> = Some(&mut 42);\n    |                              using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:21:42\n+  --> $DIR/mut_ref_in_final.rs:20:42\n    |\n LL | const B4: Option<&mut i32> = helper(&mut 42);\n    |                              ------------^^-\n@@ -25,7 +25,7 @@ LL | const B4: Option<&mut i32> = helper(&mut 42);\n    |                              using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:36:65\n+  --> $DIR/mut_ref_in_final.rs:35:65\n    |\n LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                  -------------------------------^^--\n@@ -35,7 +35,7 @@ LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                  using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:39:67\n+  --> $DIR/mut_ref_in_final.rs:38:67\n    |\n LL | static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                    -------------------------------^^--\n@@ -45,7 +45,7 @@ LL | static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                    using this value as a static requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:42:71\n+  --> $DIR/mut_ref_in_final.rs:41:71\n    |\n LL | static mut FOO3: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                        -------------------------------^^--"}, {"sha": "638a98130a236f501c8777492f6b412437e246cb", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_mut_refs)]\n-#![feature(const_fn)]\n #![feature(raw_ref_op)]\n #![feature(const_raw_ptr_deref)]\n "}, {"sha": "6d3d18f6e68985e051abf35c6ba547917b266198", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,12 +1,12 @@\n error: any use of this value will cause an error\n-  --> $DIR/mut_ref_in_final_dynamic_check.rs:15:10\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:14:10\n    |\n LL |     Some(&mut *(42 as *mut i32))\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n    |          |\n    |          unable to turn bytes into a pointer\n-   |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:15:10\n-   |          inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:20:29\n+   |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:14:10\n+   |          inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:19:29\n ...\n LL | const A: Option<&mut i32> = helper();\n    | -------------------------------------\n@@ -16,7 +16,7 @@ LL | const A: Option<&mut i32> = helper();\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: encountered dangling pointer in final constant\n-  --> $DIR/mut_ref_in_final_dynamic_check.rs:27:1\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:26:1\n    |\n LL | const B: Option<&mut i32> = helper2();\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "cb735d7b305dc2b5ce769677cfb90a7e781cfecd", "filename": "src/test/ui/consts/const_constructor/const-construct-call.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,11 +1,7 @@\n-// Test that constructors are considered to be const fns with the required feature.\n+// Test that constructors are considered to be const fns\n \n // run-pass\n \n-// revisions: min_const_fn const_fn\n-\n-#![cfg_attr(const_fn, feature(const_fn))]\n-\n // Ctor(..) is transformed to Ctor { 0: ... } in THIR lowering, so directly\n // calling constructors doesn't require them to be const.\n "}, {"sha": "7c55f470fdf97417f0fb83d429b1fa9873f1c88e", "filename": "src/test/ui/consts/const_constructor/const_constructor_qpath.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst_constructor_qpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst_constructor_qpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst_constructor_qpath.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,8 +1,5 @@\n-// revisions: min_const_fn const_fn\n // run-pass\n \n-#![cfg_attr(const_fn, feature(const_fn))]\n-\n trait ConstDefault {\n     const DEFAULT: Self;\n }"}, {"sha": "1f68de8eed09bb79cd865caf2ba0ffc035fac644", "filename": "src/test/ui/consts/const_let_assign3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_fn)]\n-\n struct S {\n     state: u32,\n }"}, {"sha": "89073f975e8809c238dd3a4b3fb5ee2efff6f0d5", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: mutable references are not allowed in constant functions\n-  --> $DIR/const_let_assign3.rs:8:18\n+  --> $DIR/const_let_assign3.rs:6:18\n    |\n LL |     const fn foo(&mut self, x: u32) {\n    |                  ^^^^^^^^^\n@@ -8,7 +8,7 @@ LL |     const fn foo(&mut self, x: u32) {\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constants\n-  --> $DIR/const_let_assign3.rs:16:5\n+  --> $DIR/const_let_assign3.rs:14:5\n    |\n LL |     s.foo(3);\n    |     ^\n@@ -17,7 +17,7 @@ LL |     s.foo(3);\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0658]: mutable references are not allowed in constants\n-  --> $DIR/const_let_assign3.rs:22:13\n+  --> $DIR/const_let_assign3.rs:20:13\n    |\n LL |     let y = &mut x;\n    |             ^^^^^^"}, {"sha": "1fec491ca95b1ba2fe589f7048d76a487c01883d", "filename": "src/test/ui/consts/const_unsafe_unreachable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n \n-#![feature(const_fn)]\n #![feature(const_unreachable_unchecked)]\n \n const unsafe fn foo(x: bool) -> bool {"}, {"sha": "4ae3a88c45143a9ec2018a0df9e81ff37d8d564d", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,5 @@\n // build-fail\n \n-#![feature(const_fn)]\n #![feature(const_unreachable_unchecked)]\n \n const unsafe fn foo(x: bool) -> bool {"}, {"sha": "68d8747d28764eb0af89a40b6cb2ad0f7b43f388", "filename": "src/test/ui/consts/const_unsafe_unreachable_ub.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_unsafe_unreachable_ub.stderr?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -6,30 +6,30 @@ LL |     unsafe { intrinsics::unreachable() }\n    |              |\n    |              entering unreachable code\n    |              inside `unreachable_unchecked` at $SRC_DIR/core/src/hint.rs:LL:COL\n-   |              inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:9:18\n-   |              inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:14:28\n+   |              inside `foo` at $DIR/const_unsafe_unreachable_ub.rs:8:18\n+   |              inside `BAR` at $DIR/const_unsafe_unreachable_ub.rs:13:28\n    | \n-  ::: $DIR/const_unsafe_unreachable_ub.rs:14:1\n+  ::: $DIR/const_unsafe_unreachable_ub.rs:13:1\n    |\n LL | const BAR: bool = unsafe { foo(false) };\n    | ----------------------------------------\n    |\n note: the lint level is defined here\n-  --> $DIR/const_unsafe_unreachable_ub.rs:13:8\n+  --> $DIR/const_unsafe_unreachable_ub.rs:12:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_unsafe_unreachable_ub.rs:17:14\n+  --> $DIR/const_unsafe_unreachable_ub.rs:16:14\n    |\n LL |   assert_eq!(BAR, true);\n    |              ^^^ referenced constant has errors\n \n error: erroneous constant used\n-  --> $DIR/const_unsafe_unreachable_ub.rs:17:3\n+  --> $DIR/const_unsafe_unreachable_ub.rs:16:3\n    |\n LL |   assert_eq!(BAR, true);\n    |   ^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors"}, {"sha": "3a4f24bbcc339014559841dd4a4fff23c559b155", "filename": "src/test/ui/consts/control-flow/basics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcontrol-flow%2Fbasics.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -3,7 +3,6 @@\n // run-pass\n \n #![feature(const_panic)]\n-#![feature(const_fn)]\n \n const X: u32 = 4;\n const Y: u32 = 5;"}, {"sha": "35aa587d3d24571813b5cab4c7c1b22a4acf129c", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -3,7 +3,7 @@\n             we're apparently really bad at it\",\n             issue = \"none\")]\n \n-#![feature(const_fn, const_fn_floating_point_arithmetic, foo, foo2)]\n+#![feature(const_fn_floating_point_arithmetic, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "962a57bb8e9dfabafb091fd182f7f667d12ae301", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -3,7 +3,7 @@\n             we're apparently really bad at it\",\n             issue = \"none\")]\n \n-#![feature(const_fn, const_fn_floating_point_arithmetic, foo, foo2)]\n+#![feature(const_fn_floating_point_arithmetic, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -25,7 +25,7 @@ const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR not yet stable as\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-// conformity is required, even with `const_fn` feature gate\n+// conformity is required\n const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n //~^ ERROR const-stable function cannot use `#[feature(const_fn_floating_point_arithmetic)]`\n "}, {"sha": "194f5fc1e5408ec91626cf4de2e23230ec29260f", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -3,7 +3,7 @@\n             we're apparently really bad at it\",\n             issue = \"none\")]\n \n-#![feature(const_fn, foo, foo2)]\n+#![feature(foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "20c1169c26e499a00ce4e47a0c21bc4fe7b36fec", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-linelength\n // Test various things that we do not want to promote.\n #![allow(unconditional_panic, const_err)]\n-#![feature(const_fn, const_fn_union)]\n+#![feature(const_fn_union)]\n \n use std::cell::Cell;\n "}, {"sha": "0723b66879c388bf213ddfcc4913ebed6ed1f356", "filename": "src/test/ui/consts/rustc-args-required-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Frustc-args-required-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Frustc-args-required-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-args-required-const.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_fn)]\n+#![feature(rustc_attrs)]\n \n #[rustc_args_required_const(0)]\n fn foo(_a: i32) {"}, {"sha": "2b970390f03c344dd69421bb009059727dc961da", "filename": "src/test/ui/consts/stable-precise-live-drops-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3752c6bb40e9e05bbc10d286c508742242448fa3/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fstable-precise-live-drops-in-libcore.rs?ref=3752c6bb40e9e05bbc10d286c508742242448fa3", "patch": "@@ -1,6 +1,6 @@\n #![stable(feature = \"core\", since = \"1.6.0\")]\n #![feature(staged_api)]\n-#![feature(const_precise_live_drops, const_fn)]\n+#![feature(const_precise_live_drops)]\n \n enum Either<T, S> {\n     Left(T),"}]}