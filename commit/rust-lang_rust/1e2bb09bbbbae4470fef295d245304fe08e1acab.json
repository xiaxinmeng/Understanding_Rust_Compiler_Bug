{"sha": "1e2bb09bbbbae4470fef295d245304fe08e1acab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMmJiMDliYmJiYWU0NDcwZmVmMjk1ZDI0NTMwNGZlMDhlMWFjYWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-27T20:01:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-27T20:01:40Z"}, "message": "auto merge of #14435 : P1start/rust/str-docs-fix, r=sfackler\n\nThis tweaks the `std::str` docs to compensate for the recent shift from `~str` to `String`.", "tree": {"sha": "a6848305ea602a834347eabbfcd53aff15be15de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6848305ea602a834347eabbfcd53aff15be15de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e2bb09bbbbae4470fef295d245304fe08e1acab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e2bb09bbbbae4470fef295d245304fe08e1acab", "html_url": "https://github.com/rust-lang/rust/commit/1e2bb09bbbbae4470fef295d245304fe08e1acab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e2bb09bbbbae4470fef295d245304fe08e1acab/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5811d2bd966716cea1d7653fa7a7cec64171a532", "url": "https://api.github.com/repos/rust-lang/rust/commits/5811d2bd966716cea1d7653fa7a7cec64171a532", "html_url": "https://github.com/rust-lang/rust/commit/5811d2bd966716cea1d7653fa7a7cec64171a532"}, {"sha": "c1fd3459fa69f7f93685dde5ca23ff432dbe231a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1fd3459fa69f7f93685dde5ca23ff432dbe231a", "html_url": "https://github.com/rust-lang/rust/commit/c1fd3459fa69f7f93685dde5ca23ff432dbe231a"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "69977b254bb88a10837e85135d06ce3d6b1007bc", "filename": "src/libstd/str.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1e2bb09bbbbae4470fef295d245304fe08e1acab/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e2bb09bbbbae4470fef295d245304fe08e1acab/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=1e2bb09bbbbae4470fef295d245304fe08e1acab", "patch": "@@ -16,24 +16,25 @@ Unicode string manipulation (`str` type)\n \n Rust's string type is one of the core primitive types of the language. While\n represented by the name `str`, the name `str` is not actually a valid type in\n-Rust. Each string must also be decorated with its ownership. This means that\n-there is one common kind of string in Rust:\n+Rust. Each string must also be decorated with a pointer. `String` is used\n+for an owned string, so there is only one commonly-used `str` type in Rust:\n+`&str`.\n \n-* `&str` - This is the borrowed string type. This type of string can only be\n-           created from the other kind of string. As the name \"borrowed\"\n-           implies, this type of string is owned elsewhere, and this string\n-           cannot be moved out of.\n+`&str` is the borrowed string type. This type of string can only be created\n+from other strings, unless it is a static string (see below). As the word\n+\"borrowed\" implies, this type of string is owned elsewhere, and this string\n+cannot be moved out of.\n \n-As an example, here's the one kind of string.\n+As an example, here's some code that uses a string.\n \n ```rust\n fn main() {\n     let borrowed_string = \"This string is borrowed with the 'static lifetime\";\n }\n ```\n \n-From the example above, you can see that Rust has 1 different kind of string\n-literal. The \"borrowed literal\" is akin to C's concept of a static string.\n+From the example above, you can see that Rust's string literals have the\n+`'static` lifetime. This is akin to C's concept of a static string.\n \n String literals are allocated statically in the rodata of the\n executable/library. The string then has the type `&'static str` meaning that\n@@ -509,7 +510,7 @@ pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> MaybeOwned<'a> {\n Section: MaybeOwned\n */\n \n-/// A MaybeOwned is a string that can hold either a String or a &str.\n+/// A `MaybeOwned` is a string that can hold either a `String` or a `&str`.\n /// This can be useful as an optimization when an allocation is sometimes\n /// needed but not always.\n pub enum MaybeOwned<'a> {\n@@ -519,7 +520,7 @@ pub enum MaybeOwned<'a> {\n     Owned(String)\n }\n \n-/// SendStr is a specialization of `MaybeOwned` to be sendable\n+/// `SendStr` is a specialization of `MaybeOwned` to be sendable\n pub type SendStr = MaybeOwned<'static>;\n \n impl<'a> MaybeOwned<'a> {"}]}