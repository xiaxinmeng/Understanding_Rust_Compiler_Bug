{"sha": "e02aa722aace1112ba2a7927ef76abe79ba9dae6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMmFhNzIyYWFjZTExMTJiYTJhNzkyN2VmNzZhYmU3OWJhOWRhZTY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-16T18:58:11Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-03-17T07:53:08Z"}, "message": "Refactor pprust a bit.", "tree": {"sha": "72909a6622de2d381723a3c06e748447048d053b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72909a6622de2d381723a3c06e748447048d053b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e02aa722aace1112ba2a7927ef76abe79ba9dae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e02aa722aace1112ba2a7927ef76abe79ba9dae6", "html_url": "https://github.com/rust-lang/rust/commit/e02aa722aace1112ba2a7927ef76abe79ba9dae6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e02aa722aace1112ba2a7927ef76abe79ba9dae6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871e5708106c5ee3ad8d2bd6ec68fca60428b77e", "url": "https://api.github.com/repos/rust-lang/rust/commits/871e5708106c5ee3ad8d2bd6ec68fca60428b77e", "html_url": "https://github.com/rust-lang/rust/commit/871e5708106c5ee3ad8d2bd6ec68fca60428b77e"}], "stats": {"total": 4209, "additions": 2042, "deletions": 2167}, "files": [{"sha": "46633baaa8939e1cd7724c8a83471af8bf3a2c23", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 60, "deletions": 41, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/e02aa722aace1112ba2a7927ef76abe79ba9dae6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02aa722aace1112ba2a7927ef76abe79ba9dae6/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=e02aa722aace1112ba2a7927ef76abe79ba9dae6", "patch": "@@ -595,33 +595,36 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &Input,\n struct IdentifiedAnnotation;\n \n impl pprust::PpAnn for IdentifiedAnnotation {\n-    fn pre(&self, node: pprust::AnnNode) -> io::IoResult<()> {\n+    fn pre(&self,\n+           s: &mut pprust::State<IdentifiedAnnotation>,\n+           node: pprust::AnnNode) -> io::IoResult<()> {\n         match node {\n-            pprust::NodeExpr(s, _) => pprust::popen(s),\n+            pprust::NodeExpr(_) => s.popen(),\n             _ => Ok(())\n         }\n     }\n-    fn post(&self, node: pprust::AnnNode) -> io::IoResult<()> {\n+    fn post(&self,\n+            s: &mut pprust::State<IdentifiedAnnotation>,\n+            node: pprust::AnnNode) -> io::IoResult<()> {\n         match node {\n-            pprust::NodeItem(s, item) => {\n+            pprust::NodeItem(item) => {\n                 try!(pp::space(&mut s.s));\n-                try!(pprust::synth_comment(s, item.id.to_str()));\n+                s.synth_comment(item.id.to_str())\n             }\n-            pprust::NodeBlock(s, blk) => {\n+            pprust::NodeBlock(blk) => {\n                 try!(pp::space(&mut s.s));\n-                try!(pprust::synth_comment(s, ~\"block \" + blk.id.to_str()));\n+                s.synth_comment(~\"block \" + blk.id.to_str())\n             }\n-            pprust::NodeExpr(s, expr) => {\n+            pprust::NodeExpr(expr) => {\n                 try!(pp::space(&mut s.s));\n-                try!(pprust::synth_comment(s, expr.id.to_str()));\n-                try!(pprust::pclose(s));\n+                try!(s.synth_comment(expr.id.to_str()));\n+                s.pclose()\n             }\n-            pprust::NodePat(s, pat) => {\n+            pprust::NodePat(pat) => {\n                 try!(pp::space(&mut s.s));\n-                try!(pprust::synth_comment(s, ~\"pat \" + pat.id.to_str()));\n+                s.synth_comment(~\"pat \" + pat.id.to_str())\n             }\n         }\n-        Ok(())\n     }\n }\n \n@@ -630,26 +633,29 @@ struct TypedAnnotation {\n }\n \n impl pprust::PpAnn for TypedAnnotation {\n-    fn pre(&self, node: pprust::AnnNode) -> io::IoResult<()> {\n+    fn pre(&self,\n+           s: &mut pprust::State<TypedAnnotation>,\n+           node: pprust::AnnNode) -> io::IoResult<()> {\n         match node {\n-            pprust::NodeExpr(s, _) => pprust::popen(s),\n+            pprust::NodeExpr(_) => s.popen(),\n             _ => Ok(())\n         }\n     }\n-    fn post(&self, node: pprust::AnnNode) -> io::IoResult<()> {\n+    fn post(&self,\n+            s: &mut pprust::State<TypedAnnotation>,\n+            node: pprust::AnnNode) -> io::IoResult<()> {\n         let tcx = &self.analysis.ty_cx;\n         match node {\n-            pprust::NodeExpr(s, expr) => {\n+            pprust::NodeExpr(expr) => {\n                 try!(pp::space(&mut s.s));\n                 try!(pp::word(&mut s.s, \"as\"));\n                 try!(pp::space(&mut s.s));\n                 try!(pp::word(&mut s.s,\n                                 ppaux::ty_to_str(tcx, ty::expr_ty(tcx, expr))));\n-                try!(pprust::pclose(s));\n+                s.pclose()\n             }\n-            _ => ()\n+            _ => Ok(())\n         }\n-        Ok(())\n     }\n }\n \n@@ -670,34 +676,48 @@ pub fn pretty_print_input(sess: Session,\n         _ => (krate, None, false)\n     };\n \n-    let codemap = sess.codemap;\n-    let span_diagnostic = sess.span_diagnostic;\n+    let src_name = source_name(input);\n+    let src = sess.codemap().get_filemap(src_name).deref().src.as_bytes().to_owned();\n+    let mut rdr = MemReader::new(src);\n \n-    let annotation = match ppm {\n+    match ppm {\n         PpmIdentified | PpmExpandedIdentified => {\n-            ~IdentifiedAnnotation as ~pprust::PpAnn\n+            pprust::print_crate(sess.codemap(),\n+                                sess.diagnostic(),\n+                                &krate,\n+                                src_name,\n+                                &mut rdr,\n+                                ~io::stdout(),\n+                                &IdentifiedAnnotation,\n+                                is_expanded)\n         }\n         PpmTyped => {\n             let ast_map = ast_map.expect(\"--pretty=typed missing ast_map\");\n             let analysis = phase_3_run_analysis_passes(sess, &krate, ast_map);\n-            ~TypedAnnotation {\n+            let annotation = TypedAnnotation {\n                 analysis: analysis\n-            } as ~pprust::PpAnn:\n+            };\n+            pprust::print_crate(annotation.analysis.ty_cx.sess.codemap(),\n+                                annotation.analysis.ty_cx.sess.diagnostic(),\n+                                &krate,\n+                                src_name,\n+                                &mut rdr,\n+                                ~io::stdout(),\n+                                &annotation,\n+                                is_expanded)\n         }\n-        _ => ~pprust::NoAnn as ~pprust::PpAnn:,\n-    };\n+        _ => {\n+            pprust::print_crate(sess.codemap(),\n+                                sess.diagnostic(),\n+                                &krate,\n+                                src_name,\n+                                &mut rdr,\n+                                ~io::stdout(),\n+                                &pprust::NoAnn,\n+                                is_expanded)\n+        }\n+    }.unwrap()\n \n-    let src = &codemap.get_filemap(source_name(input)).src;\n-    let mut rdr = MemReader::new(src.as_bytes().to_owned());\n-    let stdout = io::stdout();\n-    pprust::print_crate(codemap,\n-                        span_diagnostic,\n-                        &krate,\n-                        source_name(input),\n-                        &mut rdr,\n-                        ~stdout as ~io::Writer,\n-                        annotation,\n-                        is_expanded).unwrap();\n }\n \n pub fn get_os(triple: &str) -> Option<abi::Os> {\n@@ -778,8 +798,7 @@ pub fn host_triple() -> ~str {\n     (env!(\"CFG_COMPILER\")).to_owned()\n }\n \n-pub fn build_session_options(matches: &getopts::Matches)\n-                             -> @session::Options {\n+pub fn build_session_options(matches: &getopts::Matches) -> session::Options {\n     let mut crate_types: Vec<CrateType> = Vec::new();\n     let unparsed_crate_types = matches.opt_strs(\"crate-type\");\n     for unparsed_crate_type in unparsed_crate_types.iter() {"}, {"sha": "4253f90ef794a2d8ebdeb35f73a8084f32f38701", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e02aa722aace1112ba2a7927ef76abe79ba9dae6/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02aa722aace1112ba2a7927ef76abe79ba9dae6/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=e02aa722aace1112ba2a7927ef76abe79ba9dae6", "patch": "@@ -84,12 +84,14 @@ struct LoopScope<'a> {\n }\n \n impl<'a, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, O> {\n-    fn pre(&self, node: pprust::AnnNode) -> io::IoResult<()> {\n-        let (ps, id) = match node {\n-            pprust::NodeExpr(ps, expr) => (ps, expr.id),\n-            pprust::NodeBlock(ps, blk) => (ps, blk.id),\n-            pprust::NodeItem(ps, _) => (ps, 0),\n-            pprust::NodePat(ps, pat) => (ps, pat.id)\n+    fn pre(&self,\n+           ps: &mut pprust::State<DataFlowContext<'a, O>>,\n+           node: pprust::AnnNode) -> io::IoResult<()> {\n+        let id = match node {\n+            pprust::NodeExpr(expr) => expr.id,\n+            pprust::NodeBlock(blk) => blk.id,\n+            pprust::NodeItem(_) => 0,\n+            pprust::NodePat(pat) => pat.id\n         };\n \n         if self.nodeid_to_bitset.contains_key(&id) {\n@@ -111,9 +113,8 @@ impl<'a, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, O> {\n                 ~\"\"\n             };\n \n-            let comment_str = format!(\"id {}: {}{}{}\",\n-                                      id, entry_str, gens_str, kills_str);\n-            try!(pprust::synth_comment(ps, comment_str));\n+            try!(ps.synth_comment(format!(\"id {}: {}{}{}\", id, entry_str,\n+                                          gens_str, kills_str)));\n             try!(pp::space(&mut ps.s));\n         }\n         Ok(())\n@@ -351,11 +352,10 @@ impl<'a, O:DataFlowOperator+Clone+'static> DataFlowContext<'a, O> {\n     fn pretty_print_to(&self, wr: ~io::Writer,\n                        blk: &ast::Block) -> io::IoResult<()> {\n         let mut ps = pprust::rust_printer_annotated(wr, self);\n-        try!(pprust::cbox(&mut ps, pprust::indent_unit));\n-        try!(pprust::ibox(&mut ps, 0u));\n-        try!(pprust::print_block(&mut ps, blk));\n-        try!(pp::eof(&mut ps.s));\n-        Ok(())\n+        try!(ps.cbox(pprust::indent_unit));\n+        try!(ps.ibox(0u));\n+        try!(ps.print_block(blk));\n+        pp::eof(&mut ps.s)\n     }\n }\n "}, {"sha": "205c1c106dd165d6adf7c997d7ad4923447a90d2", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e02aa722aace1112ba2a7927ef76abe79ba9dae6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02aa722aace1112ba2a7927ef76abe79ba9dae6/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e02aa722aace1112ba2a7927ef76abe79ba9dae6", "patch": "@@ -800,7 +800,7 @@ fn compare_impl_method(tcx: &ty::ctxt,\n                 format!(\"method `{}` has a `{}` declaration in the impl, \\\n                         but not in the trait\",\n                         token::get_ident(trait_m.ident),\n-                        pprust::explicit_self_to_str(&impl_m.explicit_self)));\n+                        pprust::explicit_self_to_str(impl_m.explicit_self)));\n             return;\n         }\n         (_, &ast::SelfStatic) => {\n@@ -809,7 +809,7 @@ fn compare_impl_method(tcx: &ty::ctxt,\n                 format!(\"method `{}` has a `{}` declaration in the trait, \\\n                         but not in the impl\",\n                         token::get_ident(trait_m.ident),\n-                        pprust::explicit_self_to_str(&trait_m.explicit_self)));\n+                        pprust::explicit_self_to_str(trait_m.explicit_self)));\n             return;\n         }\n         _ => {"}, {"sha": "a35bdc307c0801d9597b98b4799f478ba2348c79", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1966, "deletions": 2110, "changes": 4076, "blob_url": "https://github.com/rust-lang/rust/blob/e02aa722aace1112ba2a7927ef76abe79ba9dae6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e02aa722aace1112ba2a7927ef76abe79ba9dae6/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e02aa722aace1112ba2a7927ef76abe79ba9dae6"}]}