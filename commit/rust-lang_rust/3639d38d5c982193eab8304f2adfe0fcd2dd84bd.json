{"sha": "3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MzlkMzhkNWM5ODIxOTNlYWI4MzA0ZjJhZGZlMGZjZDJkZDg0YmQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-29T04:51:14Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-29T05:19:01Z"}, "message": "Add a demoded version of ptr::addr_of\n\nCurrently, the new version is ptr::p2::addr_of and the old one is\nptr::addr_of. This is kind of cheesy, but I need a snapshot before I\ncan ditch the old version, since the pipe compiler generates calls to\naddr_of.\n\ncore is converted over to use the new version, std is not.", "tree": {"sha": "84d883ad752071f14a4300e5f59a9a4944651e0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84d883ad752071f14a4300e5f59a9a4944651e0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "html_url": "https://github.com/rust-lang/rust/commit/3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1014c43fd4e22fa1a8190e642e05dc6891d6eaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1014c43fd4e22fa1a8190e642e05dc6891d6eaa", "html_url": "https://github.com/rust-lang/rust/commit/f1014c43fd4e22fa1a8190e642e05dc6891d6eaa"}], "stats": {"total": 204, "additions": 110, "deletions": 94}, "files": [{"sha": "6377c25b8c4d834266e7ccacbfefb34ed418fdb6", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -5,7 +5,7 @@\n #[forbid(deprecated_pattern)];\n \n use cast::transmute;\n-use ptr::addr_of;\n+use ptr::p2::addr_of;\n \n /// Code for dealing with @-vectors. This is pretty incomplete, and\n /// contains a bunch of duplication from the code for ~-vectors.\n@@ -29,7 +29,7 @@ extern mod rusti {\n pub pure fn capacity<T>(v: @[const T]) -> uint {\n     unsafe {\n         let repr: **raw::VecRepr =\n-            ::cast::reinterpret_cast(&addr_of(v));\n+            ::cast::reinterpret_cast(&addr_of(&v));\n         (**repr).unboxed.alloc / sys::size_of::<T>()\n     }\n }\n@@ -161,7 +161,7 @@ pub mod raw {\n      */\n     #[inline(always)]\n     pub unsafe fn set_len<T>(v: @[const T], new_len: uint) {\n-        let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(v));\n+        let repr: **VecRepr = ::cast::reinterpret_cast(&addr_of(&v));\n         (**repr).unboxed.fill = new_len * sys::size_of::<T>();\n     }\n \n@@ -182,7 +182,7 @@ pub mod raw {\n         let repr: **VecRepr = ::cast::reinterpret_cast(&v);\n         let fill = (**repr).unboxed.fill;\n         (**repr).unboxed.fill += sys::size_of::<T>();\n-        let p = ptr::addr_of((**repr).unboxed.data);\n+        let p = addr_of(&((**repr).unboxed.data));\n         let p = ptr::offset(p, fill) as *mut T;\n         rusti::move_val_init(*p, move initval);\n     }"}, {"sha": "43307b9266491e6f477d889c3bf1096c19b941b4", "filename": "src/libcore/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbox.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -24,7 +24,7 @@ pub mod raw {\n \n pub pure fn ptr_eq<T>(a: @T, b: @T) -> bool {\n     //! Determine if two shared boxes point to the same object\n-    unsafe { ptr::addr_of(*a) == ptr::addr_of(*b) }\n+    unsafe { ptr::p2::addr_of(&(*a)) == ptr::p2::addr_of(&(*b)) }\n }\n \n impl<T:Eq> @const T : Eq {"}, {"sha": "37468aaaab6ef36d5d33d5805d4531690760cfdd", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -38,8 +38,7 @@ will once again be the preferred module for intertask communication.\n \n use either::Either;\n use libc::size_t;\n-\n-\n+// After snapshot, change p2::addr_of => addr_of\n \n /**\n  * A communication endpoint that can receive messages\n@@ -104,7 +103,7 @@ struct PortPtr<T:Send> {\n         // Once the port is detached it's guaranteed not to receive further\n         // messages\n         let yield = 0;\n-        let yieldp = ptr::addr_of(yield);\n+        let yieldp = ptr::p2::addr_of(&yield);\n         rustrt::rust_port_begin_detach(self.po, yieldp);\n         if yield != 0 {\n             // Need to wait for the port to be detached\n@@ -177,7 +176,7 @@ pub fn Chan<T: Send>(p: Port<T>) -> Chan<T> {\n  */\n pub fn send<T: Send>(ch: Chan<T>, +data: T) {\n     let Chan_(p) = ch;\n-    let data_ptr = ptr::addr_of(data) as *();\n+    let data_ptr = ptr::p2::addr_of(&data) as *();\n     let res = rustrt::rust_port_id_send(p, data_ptr);\n     if res != 0 unsafe {\n         // Data sent successfully\n@@ -207,10 +206,10 @@ fn peek_chan<T: Send>(ch: comm::Chan<T>) -> bool {\n /// Receive on a raw port pointer\n fn recv_<T: Send>(p: *rust_port) -> T {\n     let yield = 0;\n-    let yieldp = ptr::addr_of(yield);\n+    let yieldp = ptr::p2::addr_of(&yield);\n     let mut res;\n     res = rusti::init::<T>();\n-    rustrt::port_recv(ptr::addr_of(res) as *uint, p, yieldp);\n+    rustrt::port_recv(ptr::p2::addr_of(&res) as *uint, p, yieldp);\n \n     if yield != 0 {\n         // Data isn't available yet, so res has not been initialized.\n@@ -234,12 +233,12 @@ fn peek_(p: *rust_port) -> bool {\n pub fn select2<A: Send, B: Send>(p_a: Port<A>, p_b: Port<B>)\n     -> Either<A, B> {\n     let ports = ~[(**p_a).po, (**p_b).po];\n-    let yield = 0, yieldp = ptr::addr_of(yield);\n+    let yield = 0, yieldp = ptr::p2::addr_of(&yield);\n \n     let mut resport: *rust_port;\n     resport = rusti::init::<*rust_port>();\n     do vec::as_imm_buf(ports) |ports, n_ports| {\n-        rustrt::rust_port_select(ptr::addr_of(resport), ports,\n+        rustrt::rust_port_select(ptr::p2::addr_of(&resport), ports,\n                                  n_ports as size_t, yieldp);\n     }\n "}, {"sha": "5ea7004de6dd5cca70db4f0ff0ac90faa595d4e4", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -39,6 +39,7 @@ Implicitly, all crates behave as if they included the following prologue:\n #[legacy_modes];\n #[legacy_exports];\n \n+#[warn(deprecated_mode)];\n #[warn(deprecated_pattern)];\n \n #[warn(vecs_implicitly_copyable)];"}, {"sha": "ace4156f5b465423c267e2a62a922a8e5a15d55e", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -316,7 +316,7 @@ pub fn cleanup_stack_for_failure() {\n         // own stack roots on the stack anyway.\n         let sentinel_box = ~0;\n         let sentinel: **Word = if expect_sentinel() {\n-            cast::reinterpret_cast(&ptr::addr_of(sentinel_box))\n+            cast::reinterpret_cast(&ptr::p2::addr_of(&sentinel_box))\n         } else {\n             ptr::null()\n         };"}, {"sha": "642d20fa990298ffc97fd01970784defa24aa7e8", "filename": "src/libcore/io.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -889,8 +889,8 @@ mod tests {\n     #[test]\n     fn test_readchars_empty() {\n         do io::with_str_reader(~\"\") |inp| {\n-            let res : ~[char] = inp.read_chars(128u);\n-            assert(vec::len(res) == 0u);\n+            let res : ~[char] = inp.read_chars(128);\n+            assert(vec::len(res) == 0);\n         }\n     }\n \n@@ -903,7 +903,7 @@ mod tests {\n             104, 101, 108, 108, 111,\n             29983, 38152, 30340, 27748,\n             21273, 20999, 32905, 27748];\n-        fn check_read_ln(len : uint, s: ~str, ivals: ~[int]) {\n+        fn check_read_ln(len : uint, s: &str, ivals: &[int]) {\n             do io::with_str_reader(s) |inp| {\n                 let res : ~[char] = inp.read_chars(len);\n                 if (len <= vec::len(ivals)) {\n@@ -913,13 +913,13 @@ mod tests {\n                        vec::map(res, |x| *x as int));\n             }\n         }\n-        let mut i = 0u;\n-        while i < 8u {\n+        let mut i = 0;\n+        while i < 8 {\n             check_read_ln(i, wide_test, ivals);\n-            i += 1u;\n+            i += 1;\n         }\n         // check a long read for good measure\n-        check_read_ln(128u, wide_test, ivals);\n+        check_read_ln(128, wide_test, ivals);\n     }\n \n     #[test]"}, {"sha": "a2fb4698d7c72b2c8716b84e208e56e0544453be", "filename": "src/libcore/iter-trait.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fiter-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fiter-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -19,13 +19,13 @@ impl<A> IMPL_T<A>: iter::ExtendedIter<A> {\n     pure fn foldl<B>(+b0: B, blk: fn(&B, &A) -> B) -> B {\n         iter::foldl(&self, move b0, blk)\n     }\n-    pure fn position(f: fn(A) -> bool) -> Option<uint> {\n-        iter::position(self, f)\n+    pure fn position(f: fn(&A) -> bool) -> Option<uint> {\n+        iter::position(&self, f)\n     }\n }\n \n impl<A: Eq> IMPL_T<A>: iter::EqIter<A> {\n-    pure fn contains(x: &A) -> bool { iter::contains(self, x) }\n+    pure fn contains(x: &A) -> bool { iter::contains(&self, x) }\n     pure fn count(x: &A) -> uint { iter::count(&self, x) }\n }\n \n@@ -43,7 +43,7 @@ impl<A: Copy> IMPL_T<A>: iter::CopyableIter<A> {\n         iter::flat_map_to_vec(&self, op)\n     }\n \n-    pure fn find(p: fn(A) -> bool) -> Option<A> { iter::find(self, p) }\n+    pure fn find(p: fn(+a: A) -> bool) -> Option<A> { iter::find(&self, p) }\n }\n \n impl<A: Copy Ord> IMPL_T<A>: iter::CopyableOrderedIter<A> {"}, {"sha": "84a581fb2cb91b40260530519a235de9e720a466", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -19,7 +19,7 @@ trait ExtendedIter<A> {\n     pure fn all(blk: fn(&A) -> bool) -> bool;\n     pure fn any(blk: fn(&A) -> bool) -> bool;\n     pure fn foldl<B>(+b0: B, blk: fn(&B, &A) -> B) -> B;\n-    pure fn position(f: fn(A) -> bool) -> Option<uint>;\n+    pure fn position(f: fn(&A) -> bool) -> Option<uint>;\n }\n \n trait EqIter<A:Eq> {\n@@ -38,7 +38,7 @@ trait CopyableIter<A:Copy> {\n     pure fn filter_to_vec(pred: fn(+a: A) -> bool) -> ~[A];\n     pure fn map_to_vec<B>(op: fn(+v: A) -> B) -> ~[B];\n     pure fn to_vec() -> ~[A];\n-    pure fn find(p: fn(A) -> bool) -> Option<A>;\n+    pure fn find(p: fn(+a: A) -> bool) -> Option<A>;\n }\n \n trait CopyableOrderedIter<A:Copy Ord> {\n@@ -131,7 +131,7 @@ pure fn to_vec<A:Copy,IA:BaseIter<A>>(self: &IA) -> ~[A] {\n     foldl::<A,~[A],IA>(self, ~[], |r, a| vec::append(copy (*r), ~[*a]))\n }\n \n-pure fn contains<A:Eq,IA:BaseIter<A>>(self: IA, x: &A) -> bool {\n+pure fn contains<A:Eq,IA:BaseIter<A>>(self: &IA, x: &A) -> bool {\n     for self.each |a| {\n         if *a == *x { return true; }\n     }\n@@ -148,12 +148,12 @@ pure fn count<A:Eq,IA:BaseIter<A>>(self: &IA, x: &A) -> uint {\n     }\n }\n \n-pure fn position<A,IA:BaseIter<A>>(self: IA, f: fn(A) -> bool)\n+pure fn position<A,IA:BaseIter<A>>(self: &IA, f: fn(&A) -> bool)\n     -> Option<uint>\n {\n     let mut i = 0;\n     for self.each |a| {\n-        if f(*a) { return Some(i); }\n+        if f(a) { return Some(i); }\n         i += 1;\n     }\n     return None;\n@@ -164,10 +164,10 @@ pure fn position<A,IA:BaseIter<A>>(self: IA, f: fn(A) -> bool)\n // it would have to be implemented with foldr, which is too inefficient.\n \n pure fn repeat(times: uint, blk: fn() -> bool) {\n-    let mut i = 0u;\n+    let mut i = 0;\n     while i < times {\n         if !blk() { break }\n-        i += 1u;\n+        i += 1;\n     }\n }\n \n@@ -199,8 +199,8 @@ pure fn max<A:Copy Ord,IA:BaseIter<A>>(self: &IA) -> A {\n     }\n }\n \n-pure fn find<A: Copy,IA:BaseIter<A>>(self: IA,\n-                                     p: fn(A) -> bool) -> Option<A> {\n+pure fn find<A: Copy,IA:BaseIter<A>>(self: &IA,\n+                                     p: fn(+a: A) -> bool) -> Option<A> {\n     for self.each |i| {\n         if p(*i) { return Some(*i) }\n     }"}, {"sha": "cee0007f8f32f65096e866cd21f1f6bc374dc21b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -252,20 +252,20 @@ impl<T: Eq> Option<T> : Eq {\n #[test]\n fn test_unwrap_ptr() {\n     let x = ~0;\n-    let addr_x = ptr::addr_of(*x);\n+    let addr_x = ptr::p2::addr_of(&(*x));\n     let opt = Some(x);\n     let y = unwrap(opt);\n-    let addr_y = ptr::addr_of(*y);\n+    let addr_y = ptr::p2::addr_of(&(*y));\n     assert addr_x == addr_y;\n }\n \n #[test]\n fn test_unwrap_str() {\n     let x = ~\"test\";\n-    let addr_x = str::as_buf(x, |buf, _len| ptr::addr_of(buf));\n+    let addr_x = str::as_buf(x, |buf, _len| ptr::p2::addr_of(&buf));\n     let opt = Some(x);\n     let y = unwrap(opt);\n-    let addr_y = str::as_buf(y, |buf, _len| ptr::addr_of(buf));\n+    let addr_y = str::as_buf(y, |buf, _len| ptr::p2::addr_of(&buf));\n     assert addr_x == addr_y;\n }\n "}, {"sha": "9c0d9cdc02cd13d1d07774dac1097be9bcd734da", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -303,7 +303,7 @@ pub fn waitpid(pid: pid_t) -> c_int {\n     use libc::funcs::posix01::wait::*;\n     let status = 0 as c_int;\n \n-    assert (waitpid(pid, ptr::mut_addr_of(status),\n+    assert (waitpid(pid, ptr::mut_addr_of(&status),\n                     0 as c_int) != (-1 as c_int));\n     return status;\n }\n@@ -313,7 +313,7 @@ pub fn waitpid(pid: pid_t) -> c_int {\n pub fn pipe() -> {in: c_int, out: c_int} {\n     let fds = {mut in: 0 as c_int,\n                mut out: 0 as c_int };\n-    assert (libc::pipe(ptr::mut_addr_of(fds.in)) == (0 as c_int));\n+    assert (libc::pipe(ptr::mut_addr_of(&(fds.in))) == (0 as c_int));\n     return {in: fds.in, out: fds.out};\n }\n \n@@ -384,7 +384,7 @@ pub fn self_exe_path() -> Option<Path> {\n     #[cfg(target_os = \"macos\")]\n     fn load_self() -> Option<~str> {\n         do fill_charp_buf() |buf, sz| {\n-            libc::_NSGetExecutablePath(buf, ptr::mut_addr_of(sz as u32))\n+            libc::_NSGetExecutablePath(buf, ptr::mut_addr_of(&(sz as u32)))\n                 == (0 as c_int)\n         }\n     }"}, {"sha": "95edeca9837f47ffaedbf1811ed9c9de0ce5fd91", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -219,7 +219,7 @@ fn unibuffer<T: Send>() -> ~Buffer<Packet<T>> {\n #[doc(hidden)]\n pub fn packet<T: Send>() -> *Packet<T> {\n     let b = unibuffer();\n-    let p = ptr::addr_of(b.data);\n+    let p = ptr::p2::addr_of(&(b.data));\n     // We'll take over memory management from here.\n     unsafe { forget(move b) }\n     p\n@@ -359,7 +359,7 @@ pub fn send<T: Send, Tbuffer: Send>(+p: SendPacketBuffered<T, Tbuffer>,\n     let header = p.header();\n     let p_ = p.unwrap();\n     let p = unsafe { &*p_ };\n-    assert ptr::addr_of(p.header) == header;\n+    assert ptr::p2::addr_of(&(p.header)) == header;\n     assert p.payload.is_none();\n     p.payload <- Some(move payload);\n     let old_state = swap_state_rel(&mut p.header.state, Full);\n@@ -377,7 +377,7 @@ pub fn send<T: Send, Tbuffer: Send>(+p: SendPacketBuffered<T, Tbuffer>,\n             let old_task = swap_task(&mut p.header.blocked_task, ptr::null());\n             if !old_task.is_null() {\n                 rustrt::task_signal_event(\n-                    old_task, ptr::addr_of(p.header) as *libc::c_void);\n+                    old_task, ptr::p2::addr_of(&(p.header)) as *libc::c_void);\n                 rustrt::rust_task_deref(old_task);\n             }\n \n@@ -529,7 +529,7 @@ fn sender_terminate<T: Send>(p: *Packet<T>) {\n         if !old_task.is_null() {\n             rustrt::task_signal_event(\n                 old_task,\n-                ptr::addr_of(p.header) as *libc::c_void);\n+                ptr::p2::addr_of(&(p.header)) as *libc::c_void);\n             rustrt::rust_task_deref(old_task);\n         }\n         // The receiver will eventually clean up.\n@@ -744,7 +744,7 @@ pub fn SendPacketBuffered<T: Send, Tbuffer: Send>(p: *Packet<T>)\n         p: Some(p),\n         buffer: unsafe {\n             Some(BufferResource(\n-                get_buffer(ptr::addr_of((*p).header))))\n+                get_buffer(ptr::p2::addr_of(&((*p).header)))))\n         }\n     }\n }\n@@ -760,7 +760,7 @@ impl<T: Send, Tbuffer: Send> SendPacketBuffered<T, Tbuffer> {\n         match self.p {\n           Some(packet) => unsafe {\n             let packet = &*packet;\n-            let header = ptr::addr_of(packet.header);\n+            let header = ptr::p2::addr_of(&(packet.header));\n             //forget(packet);\n             header\n           },\n@@ -815,7 +815,7 @@ impl<T: Send, Tbuffer: Send> RecvPacketBuffered<T, Tbuffer> : Selectable {\n         match self.p {\n           Some(packet) => unsafe {\n             let packet = &*packet;\n-            let header = ptr::addr_of(packet.header);\n+            let header = ptr::p2::addr_of(&(packet.header));\n             //forget(packet);\n             header\n           },\n@@ -838,7 +838,7 @@ pub fn RecvPacketBuffered<T: Send, Tbuffer: Send>(p: *Packet<T>)\n         p: Some(p),\n         buffer: unsafe {\n             Some(BufferResource(\n-                get_buffer(ptr::addr_of((*p).header))))\n+                get_buffer(ptr::p2::addr_of(&((*p).header)))))\n         }\n     }\n }"}, {"sha": "025a6f28976f9f438942304d0f001e604b480ba6", "filename": "src/libcore/private.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -108,8 +108,8 @@ pub fn test_from_global_chan1() {\n     // This is unreadable, right?\n \n     // The global channel\n-    let globchan = 0u;\n-    let globchanp = ptr::addr_of(globchan);\n+    let globchan = 0;\n+    let globchanp = ptr::p2::addr_of(&globchan);\n \n     // Create the global channel, attached to a new task\n     let ch = unsafe {\n@@ -142,23 +142,23 @@ pub fn test_from_global_chan1() {\n #[test]\n pub fn test_from_global_chan2() {\n \n-    for iter::repeat(100u) {\n+    for iter::repeat(100) {\n         // The global channel\n-        let globchan = 0u;\n-        let globchanp = ptr::addr_of(globchan);\n+        let globchan = 0;\n+        let globchanp = ptr::p2::addr_of(&globchan);\n \n         let resultpo = comm::Port();\n         let resultch = comm::Chan(resultpo);\n \n         // Spawn a bunch of tasks that all want to compete to\n         // create the global channel\n-        for uint::range(0u, 10u) |i| {\n+        for uint::range(0, 10) |i| {\n             do task::spawn {\n                 let ch = unsafe {\n                     do chan_from_global_ptr(\n                         globchanp, task::task) |po| {\n \n-                        for uint::range(0u, 10u) |_j| {\n+                        for uint::range(0, 10) |_j| {\n                             let ch = comm::recv(po);\n                             comm::send(ch, {i});\n                         }"}, {"sha": "d0b848adde24adf86288456f0f4021ce6decda9e", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -24,15 +24,24 @@ extern mod rusti {\n     fn addr_of<T>(val: T) -> *T;\n }\n \n+/*\n+Remove this after snapshot; make p2::addr_of addr_of\n+*/\n /// Get an unsafe pointer to a value\n #[inline(always)]\n pub pure fn addr_of<T>(val: T) -> *T { unsafe { rusti::addr_of(val) } }\n \n+pub mod p2 {\n+    /// Get an unsafe pointer to a value\n+    #[inline(always)]\n+    pub pure fn addr_of<T>(val: &T) -> *T { unsafe { rusti::addr_of(*val) } }\n+}\n+\n /// Get an unsafe mut pointer to a value\n #[inline(always)]\n-pub pure fn mut_addr_of<T>(val: T) -> *mut T {\n+pub pure fn mut_addr_of<T>(val: &T) -> *mut T {\n     unsafe {\n-        cast::reinterpret_cast(&rusti::addr_of(val))\n+        cast::reinterpret_cast(&rusti::addr_of(*val))\n     }\n }\n \n@@ -61,16 +70,16 @@ pub fn mut_offset<T>(ptr: *mut T, count: uint) -> *mut T {\n /// Return the offset of the first null pointer in `buf`.\n #[inline(always)]\n pub unsafe fn buf_len<T>(buf: **T) -> uint {\n-    position(buf, |i| i == null())\n+    position(buf, |i| *i == null())\n }\n \n /// Return the first offset `i` such that `f(buf[i]) == true`.\n #[inline(always)]\n-pub unsafe fn position<T>(buf: *T, f: fn(T) -> bool) -> uint {\n-    let mut i = 0u;\n+pub unsafe fn position<T>(buf: *T, f: fn(&T) -> bool) -> uint {\n+    let mut i = 0;\n     loop {\n-        if f(*offset(buf, i)) { return i; }\n-        else { i += 1u; }\n+        if f(&(*offset(buf, i))) { return i; }\n+        else { i += 1; }\n     }\n }\n \n@@ -234,7 +243,7 @@ pub fn test() {\n     unsafe {\n         type Pair = {mut fst: int, mut snd: int};\n         let p = {mut fst: 10, mut snd: 20};\n-        let pptr: *mut Pair = mut_addr_of(p);\n+        let pptr: *mut Pair = mut_addr_of(&p);\n         let iptr: *mut int = cast::reinterpret_cast(&pptr);\n         assert (*iptr == 10);;\n         *iptr = 30;\n@@ -268,9 +277,9 @@ pub fn test_position() {\n \n     let s = ~\"hello\";\n     unsafe {\n-        assert 2u == as_c_str(s, |p| position(p, |c| c == 'l' as c_char));\n-        assert 4u == as_c_str(s, |p| position(p, |c| c == 'o' as c_char));\n-        assert 5u == as_c_str(s, |p| position(p, |c| c == 0 as c_char));\n+        assert 2u == as_c_str(s, |p| position(p, |c| *c == 'l' as c_char));\n+        assert 4u == as_c_str(s, |p| position(p, |c| *c == 'o' as c_char));\n+        assert 5u == as_c_str(s, |p| position(p, |c| *c == 0 as c_char));\n     }\n }\n "}, {"sha": "c6e7116675f2675445f4bd0569881791fda40f3d", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -1780,7 +1780,7 @@ pub pure fn as_c_str<T>(s: &str, f: fn(*libc::c_char) -> T) -> T {\n #[inline(always)]\n pub pure fn as_buf<T>(s: &str, f: fn(*u8, uint) -> T) -> T {\n     unsafe {\n-        let v : *(*u8,uint) = ::cast::reinterpret_cast(&ptr::addr_of(s));\n+        let v : *(*u8,uint) = ::cast::reinterpret_cast(&ptr::p2::addr_of(&s));\n         let (buf,len) = *v;\n         f(buf, len)\n     }\n@@ -2012,7 +2012,7 @@ pub mod raw {\n         let v: **vec::raw::VecRepr = cast::transmute(copy v);\n         let repr: *vec::raw::VecRepr = *v;\n         (*repr).unboxed.fill = new_len + 1u;\n-        let null = ptr::mut_offset(ptr::mut_addr_of((*repr).unboxed.data),\n+        let null = ptr::mut_offset(ptr::mut_addr_of(&((*repr).unboxed.data)),\n                                    new_len);\n         *null = 0u8;\n     }"}, {"sha": "d7e8416e9f72eb9741cbaea459ca6db02c42b632", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -1175,10 +1175,10 @@ fn avoid_copying_the_body(spawnfn: fn(+v: fn~())) {\n     let ch = comm::Chan(p);\n \n     let x = ~1;\n-    let x_in_parent = ptr::addr_of(*x) as uint;\n+    let x_in_parent = ptr::p2::addr_of(&(*x)) as uint;\n \n     do spawnfn {\n-        let x_in_child = ptr::addr_of(*x) as uint;\n+        let x_in_child = ptr::p2::addr_of(&(*x)) as uint;\n         comm::send(ch, x_in_child);\n     }\n "}, {"sha": "0d3007286c5a547d45f3c9c6738dceb0dcebf3d2", "filename": "src/libcore/task/local_data_priv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Ftask%2Flocal_data_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Flocal_data_priv.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -68,7 +68,7 @@ unsafe fn local_data_lookup<T: Owned>(\n \n     let key_value = key_to_key_value(key);\n     let map_pos = (*map).position(|entry|\n-        match entry {\n+        match *entry {\n             Some((k,_,_)) => k == key_value,\n             None => false\n         }"}, {"sha": "d410a4b192d86434fd04db04d7baff605f1dfdba", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -66,7 +66,7 @@ use rt::rust_task;\n use rt::rust_closure;\n \n macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y <- *ptr::addr_of($x); move y } }\n+    { $x:expr } => { unsafe { let y <- *ptr::p2::addr_of(&($x)); move y } }\n )\n \n type TaskSet = send_map::linear::LinearMap<*rust_task,()>;\n@@ -511,7 +511,14 @@ fn spawn_raw(+opts: TaskOpts, +f: fn~()) {\n \n             let child_wrapper = make_child_wrapper(new_task, move child_tg,\n                   move ancestors, is_main, move notify_chan, move f);\n-            let fptr = ptr::addr_of(child_wrapper);\n+            /*\n+            Truly awful, but otherwise the borrow checker complains about\n+            the move in the last line of this block, for reasons I can't\n+            understand. -- tjc\n+            */\n+            let tmp: u64 = cast::reinterpret_cast(&(&child_wrapper));\n+            let whatever: &~fn() = cast::reinterpret_cast(&tmp);\n+            let fptr = ptr::p2::addr_of(whatever);\n             let closure: *rust_closure = cast::reinterpret_cast(&fptr);\n \n             // Getting killed between these two calls would free the child's"}, {"sha": "a8286eb4e0820c2380b7dafc4daaba4495488b8a", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -6,7 +6,7 @@\n \n use cmp::{Eq, Ord};\n use option::{Some, None};\n-use ptr::addr_of;\n+use ptr::p2::addr_of;\n use libc::size_t;\n \n export append;\n@@ -582,7 +582,7 @@ unsafe fn push_fast<T>(+v: &mut ~[T], +initval: T) {\n     let repr: **raw::VecRepr = ::cast::transmute(v);\n     let fill = (**repr).unboxed.fill;\n     (**repr).unboxed.fill += sys::size_of::<T>();\n-    let p = ptr::addr_of((**repr).unboxed.data);\n+    let p = addr_of(&((**repr).unboxed.data));\n     let p = ptr::offset(p, fill) as *mut T;\n     rusti::move_val_init(*p, move initval);\n }\n@@ -1339,7 +1339,7 @@ pure fn as_imm_buf<T,U>(s: &[T], /* NB---this CANNOT be const, see below */\n \n     unsafe {\n         let v : *(*T,uint) =\n-            ::cast::reinterpret_cast(&ptr::addr_of(s));\n+            ::cast::reinterpret_cast(&addr_of(&s));\n         let (buf,len) = *v;\n         f(buf, len / sys::size_of::<T>())\n     }\n@@ -1352,7 +1352,7 @@ pure fn as_const_buf<T,U>(s: &[const T],\n \n     unsafe {\n         let v : *(*const T,uint) =\n-            ::cast::reinterpret_cast(&ptr::addr_of(s));\n+            ::cast::reinterpret_cast(&addr_of(&s));\n         let (buf,len) = *v;\n         f(buf, len / sys::size_of::<T>())\n     }\n@@ -1365,7 +1365,7 @@ pure fn as_mut_buf<T,U>(s: &[mut T],\n \n     unsafe {\n         let v : *(*mut T,uint) =\n-            ::cast::reinterpret_cast(&ptr::addr_of(s));\n+            ::cast::reinterpret_cast(&addr_of(&s));\n         let (buf,len) = *v;\n         f(buf, len / sys::size_of::<T>())\n     }\n@@ -1816,21 +1816,21 @@ mod raw {\n     #[inline(always)]\n     unsafe fn to_ptr<T>(+v: &[T]) -> *T {\n         let repr: **SliceRepr = ::cast::transmute(&v);\n-        return ::cast::reinterpret_cast(&addr_of((**repr).data));\n+        return ::cast::reinterpret_cast(&addr_of(&((**repr).data)));\n     }\n \n     /** see `to_ptr()` */\n     #[inline(always)]\n     unsafe fn to_const_ptr<T>(+v: &[const T]) -> *const T {\n         let repr: **SliceRepr = ::cast::transmute(&v);\n-        return ::cast::reinterpret_cast(&addr_of((**repr).data));\n+        return ::cast::reinterpret_cast(&addr_of(&((**repr).data)));\n     }\n \n     /** see `to_ptr()` */\n     #[inline(always)]\n     unsafe fn to_mut_ptr<T>(+v: &[mut T]) -> *mut T {\n         let repr: **SliceRepr = ::cast::transmute(&v);\n-        return ::cast::reinterpret_cast(&addr_of((**repr).data));\n+        return ::cast::reinterpret_cast(&addr_of(&((**repr).data)));\n     }\n \n     /**\n@@ -1841,7 +1841,7 @@ mod raw {\n     unsafe fn form_slice<T,U>(p: *T, len: uint, f: fn(v: &[T]) -> U) -> U {\n         let pair = (p, len * sys::size_of::<T>());\n         let v : *(&blk/[T]) =\n-            ::cast::reinterpret_cast(&ptr::addr_of(pair));\n+            ::cast::reinterpret_cast(&addr_of(&pair));\n         f(*v)\n     }\n \n@@ -1996,13 +1996,13 @@ impl<A> &[A]: iter::ExtendedIter<A> {\n     pure fn foldl<B>(+b0: B, blk: fn(&B, &A) -> B) -> B {\n         iter::foldl(&self, move b0, blk)\n     }\n-    pure fn position(f: fn(A) -> bool) -> Option<uint> {\n-        iter::position(self, f)\n+    pure fn position(f: fn(&A) -> bool) -> Option<uint> {\n+        iter::position(&self, f)\n     }\n }\n \n impl<A: Eq> &[A]: iter::EqIter<A> {\n-    pure fn contains(x: &A) -> bool { iter::contains(self, x) }\n+    pure fn contains(x: &A) -> bool { iter::contains(&self, x) }\n     pure fn count(x: &A) -> uint { iter::count(&self, x) }\n }\n \n@@ -2020,7 +2020,7 @@ impl<A: Copy> &[A]: iter::CopyableIter<A> {\n     //     iter::flat_map_to_vec(self, op)\n     // }\n \n-    pure fn find(p: fn(A) -> bool) -> Option<A> { iter::find(self, p) }\n+    pure fn find(p: fn(+a: A) -> bool) -> Option<A> { iter::find(&self, p) }\n }\n \n impl<A: Copy Ord> &[A]: iter::CopyableOrderedIter<A> {"}, {"sha": "cec2972b2a7b53e13203301643c312568efb02d5", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -71,10 +71,10 @@ impl message: gen_send {\n \n                 body += ~\"let b = pipe.reuse_buffer();\\n\";\n                 body += fmt!(\"let %s = pipes::SendPacketBuffered(\\\n-                              ptr::addr_of(b.buffer.data.%s));\\n\",\n+                              ptr::p2::addr_of(&(b.buffer.data.%s)));\\n\",\n                              sp, next.name);\n                 body += fmt!(\"let %s = pipes::RecvPacketBuffered(\\\n-                              ptr::addr_of(b.buffer.data.%s));\\n\",\n+                              ptr::p2::addr_of(&(b.buffer.data.%s)));\\n\",\n                              rp, next.name);\n             }\n             else {\n@@ -351,7 +351,7 @@ impl protocol: gen_init {\n                         fmt!(\"data.%s.set_buffer_(buffer)\",\n                              s.name))),\n                 ext_cx.parse_expr(\n-                    fmt!(\"ptr::addr_of(data.%s)\",\n+                    fmt!(\"ptr::p2::addr_of(&(data.%s))\",\n                          self.states[0].name))));\n \n         #ast {{"}, {"sha": "03e13f67a9a9fe5e34152aab288b356bb0d84274", "filename": "src/test/compile-fail/issue-3096-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Ftest%2Fcompile-fail%2Fissue-3096-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Ftest%2Fcompile-fail%2Fissue-3096-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3096-2.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -1,6 +1,6 @@\n enum bottom { } \n \n fn main() {\n-    let x = ptr::addr_of(()) as *bottom;\n+    let x = ptr::p2::addr_of(&()) as *bottom;\n     match x { } //~ ERROR non-exhaustive patterns\n }"}, {"sha": "4b680ec8b70741b83983e9e98fdd12fdcc689b85", "filename": "src/test/compile-fail/mutable-huh-ptr-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-ptr-assign.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -7,7 +7,7 @@ fn main() {\n \n     unsafe {\n         let a = 0;\n-        let v = ptr::mut_addr_of(a);\n+        let v = ptr::mut_addr_of(&a);\n         f(v);\n     }\n }"}, {"sha": "e98b9b34c5fce40a45c04eecf4ad6b3c64ae5954", "filename": "src/test/compile-fail/mutable-huh-variance-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-huh-variance-ptr.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -4,7 +4,7 @@ extern mod std;\n \n fn main() {\n     let a = ~[0];\n-    let v: *mut ~[int] = ptr::mut_addr_of(a);\n+    let v: *mut ~[int] = ptr::mut_addr_of(&a);\n \n     fn f(&&v: *mut ~[const int]) {\n         unsafe {"}, {"sha": "a00dd7afd6dfd2c6115f9a217d720e9427d52da5", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3639d38d5c982193eab8304f2adfe0fcd2dd84bd/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=3639d38d5c982193eab8304f2adfe0fcd2dd84bd", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let x : *~[int] = ptr::addr_of(~[1,2,3]);\n+    let x : *~[int] = ptr::p2::addr_of(&~[1,2,3]);\n     let y : *libc::c_void = x as *libc::c_void;\n     unsafe {\n         let _z = *y;"}]}