{"sha": "d7c7c52dbc462048cb60d4dca43b42d753025a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YzdjNTJkYmM0NjIwNDhjYjYwZDRkY2E0M2I0MmQ3NTMwMjVhNmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-08-13T01:13:59Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-08-13T01:13:59Z"}, "message": "bless tests", "tree": {"sha": "41f4fc49a2f0c319adad1f492f4840296d9dc278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41f4fc49a2f0c319adad1f492f4840296d9dc278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7c7c52dbc462048cb60d4dca43b42d753025a6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c7c52dbc462048cb60d4dca43b42d753025a6b", "html_url": "https://github.com/rust-lang/rust/commit/d7c7c52dbc462048cb60d4dca43b42d753025a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7c7c52dbc462048cb60d4dca43b42d753025a6b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad214fe47092c5b3d36a58480f6fa3f62d20770b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad214fe47092c5b3d36a58480f6fa3f62d20770b", "html_url": "https://github.com/rust-lang/rust/commit/ad214fe47092c5b3d36a58480f6fa3f62d20770b"}], "stats": {"total": 173, "additions": 27, "deletions": 146}, "files": [{"sha": "53ab75ee16bd0d1803f322ec7a55f6f5e63718c6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs?ref=d7c7c52dbc462048cb60d4dca43b42d753025a6b", "patch": "@@ -8,16 +8,10 @@ struct Foo;\n \n impl Foo {\n     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR cannot infer an appropriate lifetime\n-    // FIXME: should be E0623?\n+    //~^ ERROR lifetime mismatch\n \n     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR cannot infer an appropriate lifetime\n-    //~| ERROR missing lifetime specifier\n-    //~| ERROR cannot infer an appropriate lifetime\n-    // FIXME: should be E0623?\n+    //~^ ERROR lifetime mismatch\n }\n \n type Alias<T> = Pin<T>;"}, {"sha": "74fc4741349492fb92bbfa5644e7574520eceb9a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "modified", "additions": 13, "deletions": 72, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=d7c7c52dbc462048cb60d4dca43b42d753025a6b", "patch": "@@ -1,88 +1,29 @@\n-error[E0106]: missing lifetime specifier\n+error[E0623]: lifetime mismatch\n   --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n    |\n LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                                             ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:60\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                                            ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n+   |                          ----               ^^^^\n+   |                          |                  |\n+   |                          |                  ...but data from `f` is returned here\n+   |                          this parameter and the return type are declared with different lifetimes...\n \n-error[E0106]: missing lifetime specifier\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:67\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                                                   ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found multiple.\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:33\n-   |\n-LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                                 ^           ---- this return type evaluates to the `'static` lifetime...\n-   |                                 |\n-   |                                 ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:26\n-   |\n-LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n-   |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n-   |\n-LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo + '_ { f }\n-   |                                             ^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:16\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                ^^^^ ...but this borrow...             ----------------- this return type evaluates to the `'static` lifetime...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 15:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:26\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:26\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) + '_ { (self, f) }\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: cannot infer an appropriate lifetime\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:34\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                                  ^                    ----------------- this return type evaluates to the `'static` lifetime...\n-   |                                  |\n-   |                                  ...but this borrow...\n-   |\n-note: ...can't outlive the lifetime '_ as defined on the method body at 15:26\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:15:26\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:55\n    |\n LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n-   |                          ^\n-help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 15:26\n-   |\n-LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) + '_ { (self, f) }\n-   |                                                       ^^^^^^^^^^^^^^^^^^^^^^\n+   |                          -----                        ^^^^^^^^^^^^^^^^^\n+   |                          |                            |\n+   |                          |                            ...but data from `f` is returned here\n+   |                          this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:25:58\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n    |\n LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n    |                                  -----                   ^^^\n    |                                  |                       |\n    |                                  |                       ...but data from `arg` is returned here\n    |                                  this parameter and the return type are declared with different lifetimes...\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "805833f94720dfdc5fb21838749a1179e1b829e3", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=d7c7c52dbc462048cb60d4dca43b42d753025a6b", "patch": "@@ -8,7 +8,7 @@ LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:24:52\n+  --> $DIR/ref-mut-self-async.rs:21:52\n    |\n LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             ---------              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:28:61\n+  --> $DIR/ref-mut-self-async.rs:25:61\n    |\n LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:32:61\n+  --> $DIR/ref-mut-self-async.rs:29:61\n    |\n LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     ---------               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:36:70\n+  --> $DIR/ref-mut-self-async.rs:33:70\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-mut-self-async.rs:40:70\n+  --> $DIR/ref-mut-self-async.rs:37:70\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n    |                                             ---------                ^^^^"}, {"sha": "eb796a07a86d57f45b3f9a6947fe39021e37e3f8", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=d7c7c52dbc462048cb60d4dca43b42d753025a6b", "patch": "@@ -8,7 +8,7 @@ LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n    |                       this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:33:48\n+  --> $DIR/ref-self-async.rs:30:48\n    |\n LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             -----              ^^^^\n@@ -17,7 +17,7 @@ LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n    |                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:37:57\n+  --> $DIR/ref-self-async.rs:34:57\n    |\n LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -26,7 +26,7 @@ LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:41:57\n+  --> $DIR/ref-self-async.rs:38:57\n    |\n LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     -----               ^^^^\n@@ -35,7 +35,7 @@ LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n    |                                     this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:45:66\n+  --> $DIR/ref-self-async.rs:42:66\n    |\n LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -44,7 +44,7 @@ LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:49:66\n+  --> $DIR/ref-self-async.rs:46:66\n    |\n LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             -----                ^^^^\n@@ -53,7 +53,7 @@ LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n    |                                             this parameter and the return type are declared with different lifetimes...\n \n error[E0623]: lifetime mismatch\n-  --> $DIR/ref-self-async.rs:53:69\n+  --> $DIR/ref-self-async.rs:50:69\n    |\n LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n    |                                            -----                    ^^^"}, {"sha": "805d2433f87acccfa3a37f5ad007122bd5fff626", "filename": "src/test/ui/self/self_lifetime-async.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ad214fe47092c5b3d36a58480f6fa3f62d20770b/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad214fe47092c5b3d36a58480f6fa3f62d20770b/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.nll.stderr?ref=ad214fe47092c5b3d36a58480f6fa3f62d20770b", "patch": "@@ -1,11 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/self_lifetime-async.rs:9:44\n-   |\n-LL |     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n-   |                                            ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found none.\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "ec4c3d15224232548e3f40a84304f5d5a473e7c6", "filename": "src/test/ui/self/self_lifetime-async.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c7c52dbc462048cb60d4dca43b42d753025a6b/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs?ref=d7c7c52dbc462048cb60d4dca43b42d753025a6b", "patch": "@@ -1,20 +1,16 @@\n-// FIXME: Investigate why `self_lifetime.rs` is check-pass but this isn't.\n-\n+// check-pass\n // edition:2018\n \n #![feature(async_await)]\n \n struct Foo<'a>(&'a ());\n impl<'a> Foo<'a> {\n     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n-    //~^ ERROR missing lifetime specifier\n-    //~| ERROR cannot infer an appropriate lifetime\n }\n \n type Alias = Foo<'static>;\n impl Alias {\n     async fn bar<'a>(self: &Alias, arg: &'a ()) -> &() { arg }\n-    //~^ ERROR lifetime mismatch\n }\n \n fn main() {}"}, {"sha": "e3ec1abd44763863558c96ced88e83cd9599db45", "filename": "src/test/ui/self/self_lifetime-async.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ad214fe47092c5b3d36a58480f6fa3f62d20770b/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ad214fe47092c5b3d36a58480f6fa3f62d20770b/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.stderr?ref=ad214fe47092c5b3d36a58480f6fa3f62d20770b", "patch": "@@ -1,39 +0,0 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/self_lifetime-async.rs:9:44\n-   |\n-LL |     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n-   |                                            ^\n-   |\n-   = note: return-position elided lifetimes require exactly one input-position elided lifetime, found none.\n-\n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/self_lifetime-async.rs:9:22\n-   |\n-LL |     async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n-   |                      ^^^^\n-   |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the impl at 8:6...\n-  --> $DIR/self_lifetime-async.rs:8:6\n-   |\n-LL | impl<'a> Foo<'a> {\n-   |      ^^\n-   = note: ...so that the expression is assignable:\n-           expected &Foo<'_>\n-              found &'b Foo<'a>\n-   = note: but, the lifetime must be valid for the static lifetime...\n-   = note: ...so that the types are compatible:\n-           expected &()\n-              found &'static ()\n-\n-error[E0623]: lifetime mismatch\n-  --> $DIR/self_lifetime-async.rs:16:52\n-   |\n-LL |     async fn bar<'a>(self: &Alias, arg: &'a ()) -> &() { arg }\n-   |                            ------                  ^^^\n-   |                            |                       |\n-   |                            |                       ...but data from `arg` is returned here\n-   |                            this parameter and the return type are declared with different lifetimes...\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0106`."}]}