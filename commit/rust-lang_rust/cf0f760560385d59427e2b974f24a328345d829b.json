{"sha": "cf0f760560385d59427e2b974f24a328345d829b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMGY3NjA1NjAzODVkNTk0MjdlMmI5NzRmMjRhMzI4MzQ1ZDgyOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-15T01:11:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-15T01:11:00Z"}, "message": "auto merge of #6333 : bjz/rust/cond-macro, r=thestinger\n\nAddressing issue #6037, this Scheme-style conditional helps to improve code clarity in instances where the `if`, `else if`, and `else` keywords obscure predicates undesirably.\r\n\r\nHere is an example:\r\n\r\n~~~rust\r\nlet clamped =\r\n    if x > mx { mx }\r\n    else if x < mn { mn }\r\n    else { x };\r\n~~~\r\n\r\nUsing `cond!`, the above could be written as:\r\n\r\n~~~rust\r\nlet clamped = cond!(\r\n    (x > mx) { mx }\r\n    (x < mn) { mn }\r\n    _        { x  }\r\n);\r\n~~~\r\n\r\nThe optional default case is denoted by `_`.\r\n\r\nI have altered `std::fun_treemap` to demonstrate it in use. I am definitely interested in using it for some of the numeric functions, but I will have to wait for it to reach `stage0` first.", "tree": {"sha": "76edbcad601f3f438eecdd5c38a15f1a944bd526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76edbcad601f3f438eecdd5c38a15f1a944bd526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf0f760560385d59427e2b974f24a328345d829b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf0f760560385d59427e2b974f24a328345d829b", "html_url": "https://github.com/rust-lang/rust/commit/cf0f760560385d59427e2b974f24a328345d829b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf0f760560385d59427e2b974f24a328345d829b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c30414f980eb3e8010640f6c83a5ef6f8e6ab047", "url": "https://api.github.com/repos/rust-lang/rust/commits/c30414f980eb3e8010640f6c83a5ef6f8e6ab047", "html_url": "https://github.com/rust-lang/rust/commit/c30414f980eb3e8010640f6c83a5ef6f8e6ab047"}, {"sha": "7e4a176dd3a1789d5d10cb995a62daa185cb9cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4a176dd3a1789d5d10cb995a62daa185cb9cdd", "html_url": "https://github.com/rust-lang/rust/commit/7e4a176dd3a1789d5d10cb995a62daa185cb9cdd"}], "stats": {"total": 134, "additions": 105, "deletions": 29}, "files": [{"sha": "6b051fa21b1e5780cdde6abecce55dcd7dae91d0", "filename": "src/libstd/fun_treemap.rs", "status": "modified", "additions": 23, "deletions": 28, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/cf0f760560385d59427e2b974f24a328345d829b/src%2Flibstd%2Ffun_treemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0f760560385d59427e2b974f24a328345d829b/src%2Flibstd%2Ffun_treemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffun_treemap.rs?ref=cf0f760560385d59427e2b974f24a328345d829b", "patch": "@@ -33,45 +33,40 @@ enum TreeNode<K, V> {\n pub fn init<K, V>() -> Treemap<K, V> { @Empty }\n \n /// Insert a value into the map\n-pub fn insert<K:Copy + Eq + Ord,V:Copy>(m: Treemap<K, V>, k: K, v: V)\n-  -> Treemap<K, V> {\n+pub fn insert<K:Copy + Eq + Ord,V:Copy>(m: Treemap<K, V>, k: K, v: V) -> Treemap<K, V> {\n     @match m {\n-       @Empty => Node(@k, @v, @Empty, @Empty),\n-       @Node(@copy kk, vv, left, right) => {\n-         if k < kk {\n-             Node(@kk, vv, insert(left, k, v), right)\n-         } else if k == kk {\n-             Node(@kk, @v, left, right)\n-         } else { Node(@kk, vv, left, insert(right, k, v)) }\n-       }\n-     }\n+        @Empty => Node(@k, @v, @Empty, @Empty),\n+        @Node(@copy kk, vv, left, right) => cond!(\n+            (k <  kk) { Node(@kk, vv, insert(left, k, v), right) }\n+            (k == kk) { Node(@kk, @v, left, right)               }\n+            _         { Node(@kk, vv, left, insert(right, k, v)) }\n+        )\n+    }\n }\n \n /// Find a value based on the key\n pub fn find<K:Eq + Ord,V:Copy>(m: Treemap<K, V>, k: K) -> Option<V> {\n     match *m {\n-      Empty => None,\n-      Node(@ref kk, @copy v, left, right) => {\n-        if k == *kk {\n-            Some(v)\n-        } else if k < *kk { find(left, k) } else { find(right, k) }\n-      }\n+        Empty => None,\n+        Node(@ref kk, @copy v, left, right) => cond!(\n+            (k == *kk) { Some(v)        }\n+            (k <  *kk) { find(left, k)  }\n+            _          { find(right, k) }\n+        )\n     }\n }\n \n /// Visit all pairs in the map in order.\n pub fn traverse<K, V: Copy>(m: Treemap<K, V>, f: &fn(&K, &V)) {\n     match *m {\n-      Empty => (),\n-      /*\n-        Previously, this had what looked like redundant\n-        matches to me, so I changed it. but that may be a\n-        de-optimization -- tjc\n-       */\n-      Node(@ref k, @ref v, left, right) => {\n-        traverse(left, f);\n-        f(k, v);\n-        traverse(right, f);\n-      }\n+        Empty => (),\n+        // Previously, this had what looked like redundant\n+        // matches to me, so I changed it. but that may be a\n+        // de-optimization -- tjc\n+        Node(@ref k, @ref v, left, right) => {\n+            traverse(left, f);\n+            f(k, v);\n+            traverse(right, f);\n+        }\n     }\n }"}, {"sha": "d29791449b61c5612f17e326d8c825f46fc4cede", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf0f760560385d59427e2b974f24a328345d829b/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/cf0f760560385d59427e2b974f24a328345d829b/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=cf0f760560385d59427e2b974f24a328345d829b", "patch": "@@ -63,6 +63,7 @@ pub mod flatpipes;\n \n pub mod bitv;\n pub mod deque;\n+#[cfg(not(stage0))]\n pub mod fun_treemap;\n pub mod list;\n pub mod priority_queue;"}, {"sha": "f9ca84473fb3cdbdac376bc53647cde07534c188", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cf0f760560385d59427e2b974f24a328345d829b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0f760560385d59427e2b974f24a328345d829b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=cf0f760560385d59427e2b974f24a328345d829b", "patch": "@@ -542,7 +542,41 @@ pub fn core_macros() -> ~str {\n         }\n     )\n \n-\n+    //\n+    // A scheme-style conditional that helps to improve code clarity in some instances when\n+    // the `if`, `else if`, and `else` keywords obscure predicates undesirably.\n+    //\n+    // # Example\n+    //\n+    // ~~~\n+    // let clamped =\n+    //     if x > mx { mx }\n+    //     else if x < mn { mn }\n+    //     else { x };\n+    // ~~~\n+    //\n+    // Using `cond!`, the above could be written as:\n+    //\n+    // ~~~\n+    // let clamped = cond!(\n+    //     (x > mx) { mx }\n+    //     (x < mn) { mn }\n+    //     _        { x  }\n+    // );\n+    // ~~~\n+    //\n+    // The optional default case is denoted by `_`.\n+    //\n+    macro_rules! cond (\n+        ( $(($pred:expr) $body:block)+ _ $default:block ) => (\n+            $(if $pred $body else)+\n+            $default\n+        );\n+        // for if the default case was ommitted\n+        ( $(($pred:expr) $body:block)+ ) => (\n+            $(if $pred $body)else+\n+        );\n+    )\n }\";\n }\n "}, {"sha": "6b90308f8a8680c82b63fadf2ab392cca5203495", "filename": "src/test/run-pass/cond-macro-no-default.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf0f760560385d59427e2b974f24a328345d829b/src%2Ftest%2Frun-pass%2Fcond-macro-no-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0f760560385d59427e2b974f24a328345d829b/src%2Ftest%2Frun-pass%2Fcond-macro-no-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcond-macro-no-default.rs?ref=cf0f760560385d59427e2b974f24a328345d829b", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn clamp<T:Copy + Ord + Signed>(x: T, mn: T, mx: T) -> T {\n+    cond!(\n+        (x > mx) { return mx; }\n+        (x < mn) { return mn; }\n+    )\n+    return x;\n+}\n+\n+fn main() {\n+    assert_eq!(clamp(1, 2, 4), 2);\n+    assert_eq!(clamp(8, 2, 4), 4);\n+    assert_eq!(clamp(3, 2, 4), 3);\n+}"}, {"sha": "929752b3f1a0daf1cf8d002f3e3d894f8ced6dec", "filename": "src/test/run-pass/cond-macro.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cf0f760560385d59427e2b974f24a328345d829b/src%2Ftest%2Frun-pass%2Fcond-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf0f760560385d59427e2b974f24a328345d829b/src%2Ftest%2Frun-pass%2Fcond-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcond-macro.rs?ref=cf0f760560385d59427e2b974f24a328345d829b", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn clamp<T:Copy + Ord + Signed>(x: T, mn: T, mx: T) -> T {\n+    cond!(\n+        (x > mx) { mx }\n+        (x < mn) { mn }\n+        _        { x  }\n+    )\n+}\n+\n+fn main() {\n+    assert_eq!(clamp(1, 2, 4), 2);\n+    assert_eq!(clamp(8, 2, 4), 4);\n+    assert_eq!(clamp(3, 2, 4), 3);\n+}"}]}