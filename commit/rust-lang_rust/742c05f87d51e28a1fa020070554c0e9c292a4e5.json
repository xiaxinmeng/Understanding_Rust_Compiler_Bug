{"sha": "742c05f87d51e28a1fa020070554c0e9c292a4e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MmMwNWY4N2Q1MWUyOGExZmEwMjAwNzA1NTRjMGU5YzI5MmE0ZTU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-03T23:37:38Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-03T23:38:35Z"}, "message": "rustc: Avoid a lot of copying in metadata when reading impls", "tree": {"sha": "710e24a72195b46912bcfc9c5148931a6b6eae40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/710e24a72195b46912bcfc9c5148931a6b6eae40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/742c05f87d51e28a1fa020070554c0e9c292a4e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/742c05f87d51e28a1fa020070554c0e9c292a4e5", "html_url": "https://github.com/rust-lang/rust/commit/742c05f87d51e28a1fa020070554c0e9c292a4e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/742c05f87d51e28a1fa020070554c0e9c292a4e5/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7762c80d1b25434ad9346ae77a5d08a58f7d05ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7762c80d1b25434ad9346ae77a5d08a58f7d05ba", "html_url": "https://github.com/rust-lang/rust/commit/7762c80d1b25434ad9346ae77a5d08a58f7d05ba"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "ff1c7246f903b54dff480100ab732de6b11cdc67", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/742c05f87d51e28a1fa020070554c0e9c292a4e5/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/742c05f87d51e28a1fa020070554c0e9c292a4e5/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=742c05f87d51e28a1fa020070554c0e9c292a4e5", "patch": "@@ -59,7 +59,7 @@ export translate_def_id;\n // what crate that's in and give us a def_id that makes sense for the current\n // build.\n \n-fn lookup_hash(d: ebml::doc, eq_fn: fn@(~[u8]) -> bool, hash: uint) ->\n+fn lookup_hash(d: ebml::doc, eq_fn: fn@(x:&[u8]) -> bool, hash: uint) ->\n    ~[ebml::doc] {\n     let index = ebml::get_doc(d, tag_index);\n     let table = ebml::get_doc(index, tag_index_table);\n@@ -72,16 +72,17 @@ fn lookup_hash(d: ebml::doc, eq_fn: fn@(~[u8]) -> bool, hash: uint) ->\n     let belt = tag_index_buckets_bucket_elt;\n     do ebml::tagged_docs(bucket, belt) |elt| {\n         let pos = io::u64_from_be_bytes(*elt.data, elt.start, 4u) as uint;\n-        if eq_fn(vec::slice::<u8>(*elt.data, elt.start + 4u, elt.end)) {\n+        if eq_fn(vec::view::<u8>(*elt.data, elt.start + 4u, elt.end)) {\n             vec::push(result, ebml::doc_at(d.data, pos).doc);\n         }\n     };\n     ret result;\n }\n \n fn maybe_find_item(item_id: int, items: ebml::doc) -> option<ebml::doc> {\n-    fn eq_item(bytes: ~[u8], item_id: int) -> bool {\n-        ret io::u64_from_be_bytes(bytes, 0u, 4u) as int == item_id;\n+    fn eq_item(bytes: &[u8], item_id: int) -> bool {\n+        ret io::u64_from_be_bytes(vec::slice(bytes, 0u, 4u), 0u, 4u) as int\n+            == item_id;\n     }\n     let eqer = |a| eq_item(a, item_id);\n     let found = lookup_hash(items, eqer, hash_node_id(item_id));\n@@ -215,8 +216,21 @@ fn enum_variant_ids(item: ebml::doc, cdata: cmd) -> ~[ast::def_id] {\n // Given a path and serialized crate metadata, returns the IDs of the\n // definitions the path may refer to.\n fn resolve_path(path: ~[ast::ident], data: @~[u8]) -> ~[ast::def_id] {\n-    fn eq_item(data: ~[u8], s: str) -> bool {\n-        ret str::eq(str::from_bytes(data), s);\n+    fn eq_item(data: &[u8], s: str) -> bool {\n+        // XXX: Use string equality.\n+        let data_len = data.len();\n+        let s_len = s.len();\n+        if data_len != s_len {\n+            ret false;\n+        }\n+        let mut i = 0;\n+        while i < data_len {\n+            if data[i] != s[i] {\n+                ret false;\n+            }\n+            i += 1;\n+        }\n+        ret true;\n     }\n     let s = ast_util::path_name_i(path);\n     let md = ebml::doc(data);"}]}