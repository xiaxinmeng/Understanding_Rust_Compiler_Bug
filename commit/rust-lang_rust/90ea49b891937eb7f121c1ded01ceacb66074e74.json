{"sha": "90ea49b891937eb7f121c1ded01ceacb66074e74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZWE0OWI4OTE5MzdlYjdmMTIxYzFkZWQwMWNlYWNiNjYwNzRlNzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-02T14:35:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-02T15:33:24Z"}, "message": "introduce `predicates_defined_on` for traits\n\nThis new query returns only the predicates *directly defined* on an\nitem (in contrast to the more common `predicates_of`, which returns\nthe predicates that must be proven to reference an item). These two\nsets are almost always identical except for traits, where\n`predicates_of` includes an artificial `Self: Trait<...>` predicate\n(basically saying that you cannot use a trait item without proving\nthat the trait is implemented for the type parameters).\n\nThis new query is only used in chalk lowering, where this artificial\n`Self: Trait` predicate is problematic. We encode it in metadata but\nonly where needed since it is kind of repetitive with existing\ninformation.\n\nCo-authored-by: Tyler Mandry <tmandry@gmail.com>", "tree": {"sha": "596160e12e8bad733f470b0c58f6a45d27eec80d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596160e12e8bad733f470b0c58f6a45d27eec80d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90ea49b891937eb7f121c1ded01ceacb66074e74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90ea49b891937eb7f121c1ded01ceacb66074e74", "html_url": "https://github.com/rust-lang/rust/commit/90ea49b891937eb7f121c1ded01ceacb66074e74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90ea49b891937eb7f121c1ded01ceacb66074e74/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "327093007add511cdcca4032dda13f7a342f29ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/327093007add511cdcca4032dda13f7a342f29ea", "html_url": "https://github.com/rust-lang/rust/commit/327093007add511cdcca4032dda13f7a342f29ea"}], "stats": {"total": 130, "additions": 109, "deletions": 21}, "files": [{"sha": "3c4472aef6bed3157d8013bb3d4b28696903724b", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -504,6 +504,7 @@ define_dep_nodes!( <'tcx>\n     [] GenericsOfItem(DefId),\n     [] PredicatesOfItem(DefId),\n     [] ExplicitPredicatesOfItem(DefId),\n+    [] PredicatesDefinedOnItem(DefId),\n     [] InferredOutlivesOf(DefId),\n     [] InferredOutlivesCrate(CrateNum),\n     [] SuperPredicatesOfItem(DefId),"}, {"sha": "9ad93b4d5e233117ade9d905014c6f4c490c65e6", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -101,11 +101,39 @@ define_queries! { <'tcx>\n     [] fn type_of: TypeOfItem(DefId) -> Ty<'tcx>,\n \n     /// Maps from the def-id of an item (trait/struct/enum/fn) to its\n-    /// associated generics and predicates.\n+    /// associated generics.\n     [] fn generics_of: GenericsOfItem(DefId) -> &'tcx ty::Generics,\n+\n+    /// Maps from the def-id of an item (trait/struct/enum/fn) to the\n+    /// predicates (where clauses) that must be proven true in order\n+    /// to reference it. This is almost always the \"predicates query\"\n+    /// that you want.\n+    ///\n+    /// `predicates_of` builds on `predicates_defined_on` -- in fact,\n+    /// it is almost always the same as that query, except for the\n+    /// case of traits. For traits, `predicates_of` contains\n+    /// an additional `Self: Trait<...>` predicate that users don't\n+    /// actually write. This reflects the fact that to invoke the\n+    /// trait (e.g., via `Default::default`) you must supply types\n+    /// that actually implement the trait. (However, this extra\n+    /// predicate gets in the way of some checks, which are intended\n+    /// to operate over only the actual where-clauses written by the\n+    /// user.)\n     [] fn predicates_of: PredicatesOfItem(DefId) -> ty::GenericPredicates<'tcx>,\n+\n+    /// Maps from the def-id of an item (trait/struct/enum/fn) to the\n+    /// predicates (where clauses) directly defined on it. This is\n+    /// equal to the `explicit_predicates_of` predicates plus the\n+    /// `inferred_outlives_of` predicates.\n+    [] fn predicates_defined_on: PredicatesDefinedOnItem(DefId) -> ty::GenericPredicates<'tcx>,\n+\n+    /// Returns the predicates written explicit by the user.\n     [] fn explicit_predicates_of: ExplicitPredicatesOfItem(DefId) -> ty::GenericPredicates<'tcx>,\n \n+    /// Returns the inferred outlives predicates (e.g., for `struct\n+    /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n+    [] fn inferred_outlives_of: InferredOutlivesOf(DefId) -> Lrc<Vec<ty::Predicate<'tcx>>>,\n+\n     /// Maps from the def-id of a trait to the list of\n     /// super-predicates. This is a subset of the full list of\n     /// predicates. We store these in a separate map because we must\n@@ -141,9 +169,6 @@ define_queries! { <'tcx>\n     /// (inferred) variance.\n     [] fn variances_of: ItemVariances(DefId) -> Lrc<Vec<ty::Variance>>,\n \n-    /// Maps from def-id of a type to its (inferred) outlives.\n-    [] fn inferred_outlives_of: InferredOutlivesOf(DefId) -> Lrc<Vec<ty::Predicate<'tcx>>>,\n-\n     /// Maps from def-id of a type to its (inferred) outlives.\n     [] fn inferred_outlives_crate: InferredOutlivesCrate(CrateNum)\n         -> Lrc<ty::CratePredicatesMap<'tcx>>,"}, {"sha": "874a62fb6a5cdc13f8444aaa003d5b3d37e2d224", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -1074,6 +1074,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::TypeOfItem => { force!(type_of, def_id!()); }\n         DepKind::GenericsOfItem => { force!(generics_of, def_id!()); }\n         DepKind::PredicatesOfItem => { force!(predicates_of, def_id!()); }\n+        DepKind::PredicatesDefinedOnItem => { force!(predicates_defined_on, def_id!()); }\n         DepKind::ExplicitPredicatesOfItem => { force!(explicit_predicates_of, def_id!()); }\n         DepKind::InferredOutlivesOf => { force!(inferred_outlives_of, def_id!()); }\n         DepKind::InferredOutlivesCrate => { force!(inferred_outlives_crate, LOCAL_CRATE); }"}, {"sha": "14f63898a4fedaceafe2e7502cfc9c09b22b5409", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -107,6 +107,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         tcx.alloc_generics(cdata.get_generics(def_id.index, tcx.sess))\n     }\n     predicates_of => { cdata.get_predicates(def_id.index, tcx) }\n+    predicates_defined_on => { cdata.get_predicates_defined_on(def_id.index, tcx) }\n     super_predicates_of => { cdata.get_super_predicates(def_id.index, tcx) }\n     trait_def => {\n         tcx.alloc_trait_def(cdata.get_trait_def(def_id.index, tcx.sess))"}, {"sha": "d604ac819b83b6af6a1b123075a01a4b1ac227a9", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -563,6 +563,13 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(item_id).predicates.unwrap().decode((self, tcx))\n     }\n \n+    pub fn get_predicates_defined_on(&self,\n+                                   item_id: DefIndex,\n+                                   tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                                   -> ty::GenericPredicates<'tcx> {\n+        self.entry(item_id).predicates_defined_on.unwrap().decode((self, tcx))\n+    }\n+\n     pub fn get_super_predicates(&self,\n                                 item_id: DefIndex,\n                                 tcx: TyCtxt<'a, 'tcx, 'tcx>)"}, {"sha": "4c58eb8d5a05d36dc51f1ebd72405e8304417505", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -627,6 +627,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n+            predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n         }\n@@ -664,6 +665,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             variances: LazySeq::empty(),\n             generics: None,\n             predicates: None,\n+            predicates_defined_on: None,\n \n             mir: None\n         }\n@@ -704,6 +706,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             variances: LazySeq::empty(),\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n+            predicates_defined_on: None,\n \n             mir: None,\n         }\n@@ -761,6 +764,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n+            predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n         }\n@@ -778,6 +782,12 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         self.lazy(&tcx.predicates_of(def_id))\n     }\n \n+    fn encode_predicates_defined_on(&mut self, def_id: DefId) -> Lazy<ty::GenericPredicates<'tcx>> {\n+        debug!(\"IsolatedEncoder::encode_predicates_defined_on({:?})\", def_id);\n+        let tcx = self.tcx;\n+        self.lazy(&tcx.predicates_defined_on(def_id))\n+    }\n+\n     fn encode_info_for_trait_item(&mut self, def_id: DefId) -> Entry<'tcx> {\n         debug!(\"IsolatedEncoder::encode_info_for_trait_item({:?})\", def_id);\n         let tcx = self.tcx;\n@@ -867,6 +877,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n+            predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n         }\n@@ -963,6 +974,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n+            predicates_defined_on: None,\n \n             mir: if mir { self.encode_optimized_mir(def_id) } else { None },\n         }\n@@ -1226,6 +1238,16 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 _ => None,\n             },\n \n+            // The only time that `predicates_defined_on` is used (on\n+            // an external item) is for traits, during chalk lowering,\n+            // so only encode it in that case as an efficiency\n+            // hack. (No reason not to expand it in the future if\n+            // necessary.)\n+            predicates_defined_on: match item.node {\n+                hir::ItemTrait(..) => Some(self.encode_predicates_defined_on(def_id)),\n+                _ => None, // not *wrong* for other kinds of items, but not needed\n+            },\n+\n             mir: match item.node {\n                 hir::ItemStatic(..) => {\n                     self.encode_optimized_mir(def_id)\n@@ -1276,6 +1298,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             variances: LazySeq::empty(),\n             generics: None,\n             predicates: None,\n+            predicates_defined_on: None,\n             mir: None,\n         }\n     }\n@@ -1303,6 +1326,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             variances: LazySeq::empty(),\n             generics: None,\n             predicates: None,\n+            predicates_defined_on: None,\n \n             mir: None,\n         }\n@@ -1347,6 +1371,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             variances: LazySeq::empty(),\n             generics: Some(self.encode_generics(def_id)),\n             predicates: None,\n+            predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n         }\n@@ -1374,6 +1399,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             variances: LazySeq::empty(),\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n+            predicates_defined_on: None,\n \n             mir: self.encode_optimized_mir(def_id),\n         }\n@@ -1575,6 +1601,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n             },\n             generics: Some(self.encode_generics(def_id)),\n             predicates: Some(self.encode_predicates(def_id)),\n+            predicates_defined_on: None,\n \n             mir: None,\n         }"}, {"sha": "a0b21e63ac560278af6995c962e70f777287bbc5", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -273,6 +273,7 @@ pub struct Entry<'tcx> {\n     pub variances: LazySeq<ty::Variance>,\n     pub generics: Option<Lazy<ty::Generics>>,\n     pub predicates: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n+    pub predicates_defined_on: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n \n     pub mir: Option<Lazy<mir::Mir<'tcx>>>,\n }\n@@ -290,6 +291,7 @@ impl_stable_hash_for!(struct Entry<'tcx> {\n     variances,\n     generics,\n     predicates,\n+    predicates_defined_on,\n     mir\n });\n "}, {"sha": "27daebbf8c12d4b9cf90720b8f9f3f13f9cca298", "filename": "src/librustc_traits/lowering.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_traits%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_traits%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering.rs?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -252,10 +252,8 @@ fn program_clauses_for_trait<'a, 'tcx>(\n     // ```\n \n     // `FromEnv(WC) :- FromEnv(Self: Trait<P1..Pn>)`, for each where clause WC\n-    // FIXME: Remove the [1..] slice; this is a hack because the query\n-    // predicates_of currently includes the trait itself (`Self: Trait<P1..Pn>`).\n-    let where_clauses = &tcx.predicates_of(def_id).predicates;\n-    let implied_bound_clauses = where_clauses[1..]\n+    let where_clauses = &tcx.predicates_defined_on(def_id).predicates;\n+    let implied_bound_clauses = where_clauses\n         .into_iter()\n         .map(|wc| wc.lower())\n "}, {"sha": "4e645c5433b44caea622cc757428bd36282a0cbc", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -67,6 +67,7 @@ pub fn provide(providers: &mut Providers) {\n         type_of,\n         generics_of,\n         predicates_of,\n+        predicates_defined_on,\n         explicit_predicates_of,\n         super_predicates_of,\n         type_param_predicates,\n@@ -1309,10 +1310,10 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n     })\n }\n \n-fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           def_id: DefId)\n-                           -> ty::GenericPredicates<'tcx> {\n-    let explicit = explicit_predicates_of(tcx, def_id);\n+fn predicates_defined_on<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   def_id: DefId)\n+                                   -> ty::GenericPredicates<'tcx> {\n+    let explicit = tcx.explicit_predicates_of(def_id);\n     let predicates = if tcx.sess.features_untracked().infer_outlives_requirements {\n         [&explicit.predicates[..], &tcx.inferred_outlives_of(def_id)[..]].concat()\n     } else { explicit.predicates };\n@@ -1323,9 +1324,35 @@ fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                            def_id: DefId)\n                            -> ty::GenericPredicates<'tcx> {\n+    let ty::GenericPredicates { parent, mut predicates } =\n+        tcx.predicates_defined_on(def_id);\n+\n+    if tcx.is_trait(def_id) {\n+        // For traits, add `Self: Trait` predicate. This is\n+        // not part of the predicates that a user writes, but it\n+        // is something that one must prove in order to invoke a\n+        // method or project an associated type.\n+        //\n+        // In the chalk setup, this predicate is not part of the\n+        // \"predicates\" for a trait item. But it is useful in\n+        // rustc because if you directly (e.g.) invoke a trait\n+        // method like `Trait::method(...)`, you must naturally\n+        // prove that the trait applies to the types that were\n+        // used, and adding the predicate into this list ensures\n+        // that this is done.\n+        predicates.push(ty::TraitRef::identity(tcx, def_id).to_predicate());\n+    }\n+\n+    ty::GenericPredicates { parent, predicates }\n+}\n+\n+fn explicit_predicates_of<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    def_id: DefId,\n+) -> ty::GenericPredicates<'tcx> {\n     use rustc::hir::map::*;\n     use rustc::hir::*;\n \n@@ -1340,7 +1367,10 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n     let ast_generics = match node {\n-        NodeTraitItem(item) => &item.generics,\n+        NodeTraitItem(item) => {\n+            &item.generics\n+        }\n+\n         NodeImplItem(item) => &item.generics,\n \n         NodeItem(item) => {\n@@ -1405,12 +1435,8 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // and the explicit where-clauses, but to get the full set of predicates\n     // on a trait we need to add in the supertrait bounds and bounds found on\n     // associated types.\n-    if let Some((trait_ref, _)) = is_trait {\n+    if let Some((_trait_ref, _)) = is_trait {\n         predicates = tcx.super_predicates_of(def_id).predicates;\n-\n-        // Add in a predicate that `Self:Trait` (where `Trait` is the\n-        // current trait).  This is needed for builtin bounds.\n-        predicates.push(trait_ref.to_poly_trait_ref().to_predicate());\n     }\n \n     // In default impls, we can assume that the self type implements"}, {"sha": "812418a3053e99554784b49da3b316ff6b29efa9", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90ea49b891937eb7f121c1ded01ceacb66074e74/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=90ea49b891937eb7f121c1ded01ceacb66074e74", "patch": "@@ -4,7 +4,7 @@ error: program clause dump\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n \n@@ -14,7 +14,7 @@ error: program clause dump\n LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: FromEnv(Self: Bar) :- FromEnv(Self: Bar).\n+   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Foo) :- FromEnv(Self: Foo)."}]}