{"sha": "b4401d12a7fe4af43698e8360cffce3f9cb4bc62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDAxZDEyYTdmZTRhZjQzNjk4ZTgzNjBjZmZjZTNmOWNiNGJjNjI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-07T20:21:30Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-07T20:21:30Z"}, "message": "bench: fix nbody bugs, r=burningtree.", "tree": {"sha": "2a91b2911191d64b7a169f29437765db84639346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a91b2911191d64b7a169f29437765db84639346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4401d12a7fe4af43698e8360cffce3f9cb4bc62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4401d12a7fe4af43698e8360cffce3f9cb4bc62", "html_url": "https://github.com/rust-lang/rust/commit/b4401d12a7fe4af43698e8360cffce3f9cb4bc62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4401d12a7fe4af43698e8360cffce3f9cb4bc62/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcde593d3a9ae72241bd5ba163a990af2f33b919", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcde593d3a9ae72241bd5ba163a990af2f33b919", "html_url": "https://github.com/rust-lang/rust/commit/bcde593d3a9ae72241bd5ba163a990af2f33b919"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "bd535b128951620ec10f97f0bee1206f8daf8ffd", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b4401d12a7fe4af43698e8360cffce3f9cb4bc62/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4401d12a7fe4af43698e8360cffce3f9cb4bc62/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=b4401d12a7fe4af43698e8360cffce3f9cb4bc62", "patch": "@@ -24,19 +24,25 @@ fn main() {\n         args\n     };\n     let n = int::from_str(args[1]).get();\n-    let bodies: ~[Body::props] = NBodySystem::make();\n-    io::println(fmt!(\"%f\", NBodySystem::energy(copy bodies)));\n+    let mut bodies: ~[Body::props] = NBodySystem::make();\n+    io::println(fmt!(\"%f\", NBodySystem::energy(bodies)));\n     let mut i = 0;\n-    while i < n { NBodySystem::advance(bodies, 0.01); i += 1; }\n+    while i < n {\n+        NBodySystem::advance(bodies, 0.01);\n+        i += 1;\n+    }\n     io::println(fmt!(\"%f\", NBodySystem::energy(bodies)));\n }\n \n mod NBodySystem {\n     #[legacy_exports];\n \n     fn make() -> ~[Body::props] {\n-        let bodies: ~[Body::props] =\n-            ~[Body::sun(), Body::jupiter(), Body::saturn(), Body::uranus(),\n+        let mut bodies: ~[Body::props] =\n+            ~[Body::sun(),\n+              Body::jupiter(),\n+              Body::saturn(),\n+              Body::uranus(),\n               Body::neptune()];\n \n         let mut px = 0.0;\n@@ -53,26 +59,35 @@ mod NBodySystem {\n         }\n \n         // side-effecting\n-        Body::offset_momentum(bodies[0], px, py, pz);\n+        Body::offset_momentum(&mut bodies[0], px, py, pz);\n \n         return bodies;\n     }\n \n-    fn advance(bodies: ~[Body::props], dt: float) {\n+    fn advance(bodies: &mut [Body::props], dt: float) {\n \n         let mut i = 0;\n         while i < 5 {\n             let mut j = i + 1;\n-            while j < 5 { advance_one(bodies[i], bodies[j], dt); j += 1; }\n+            while j < 5 {\n+                advance_one(&mut bodies[i],\n+                            &mut bodies[j], dt);\n+                j += 1;\n+            }\n \n             i += 1;\n         }\n \n         i = 0;\n-        while i < 5 { move_(bodies[i], dt); i += 1; }\n+        while i < 5 {\n+            move_(&mut bodies[i], dt);\n+            i += 1;\n+        }\n     }\n \n-    fn advance_one(bi: Body::props, bj: Body::props, dt: float) unsafe {\n+    fn advance_one(bi: &mut Body::props,\n+                   bj: &mut Body::props,\n+                   dt: float) unsafe {\n         let dx = bi.x - bj.x;\n         let dy = bi.y - bj.y;\n         let dz = bi.z - bj.z;\n@@ -91,13 +106,13 @@ mod NBodySystem {\n         bj.vz += dz * bi.mass * mag;\n     }\n \n-    fn move_(b: Body::props, dt: float) {\n+    fn move_(b: &mut Body::props, dt: float) {\n         b.x += dt * b.vx;\n         b.y += dt * b.vy;\n         b.z += dt * b.vz;\n     }\n \n-    fn energy(bodies: ~[Body::props]) -> float unsafe {\n+    fn energy(bodies: &[Body::props]) -> float unsafe {\n         let mut dx;\n         let mut dy;\n         let mut dz;\n@@ -197,7 +212,8 @@ mod Body {\n              mass: SOLAR_MASS};\n     }\n \n-    fn offset_momentum(props: Body::props, px: float, py: float, pz: float) {\n+    fn offset_momentum(props: &mut Body::props,\n+                       px: float, py: float, pz: float) {\n         props.vx = -px / SOLAR_MASS;\n         props.vy = -py / SOLAR_MASS;\n         props.vz = -pz / SOLAR_MASS;"}]}