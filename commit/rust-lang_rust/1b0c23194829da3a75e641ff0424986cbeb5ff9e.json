{"sha": "1b0c23194829da3a75e641ff0424986cbeb5ff9e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMGMyMzE5NDgyOWRhM2E3NWU2NDFmZjA0MjQ5ODZjYmViNWZmOWU=", "commit": {"author": {"name": "Ashley Mannix", "email": "kodraus@hey.com", "date": "2021-02-09T03:16:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-09T03:16:17Z"}, "message": "Merge pull request #62 from rust-lang/feature/shuffle-self\n\nAdd SIMD shuffles for SimdType{2,4,8,16,32,64}", "tree": {"sha": "415c39f2b9e9223cd58d7d235f6d42cb95b8ee26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/415c39f2b9e9223cd58d7d235f6d42cb95b8ee26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b0c23194829da3a75e641ff0424986cbeb5ff9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgIf6BCRBK7hj4Ov3rIwAAdHIIAFOT4T1PT91/nL0RaI1DCAFv\nXJUdf1oK5AUOqIIpQtUuuFckAyAFUP8GbuAU+qQ/ks4XK2PAO+XKKxsm649tplKD\n7lGV0E06TWMBgT76trZt5l24/oMNqEmb16Sw4tAiFcuF/4sUy8KOE0vtrY8elABN\n0CUJ9ZunXgdZe1EBkvA1sCAXzX4RVCMqTurH7RcPG3Z839U54BJlofG8y8aXc9x4\nyhQTKHv+CeMvKDvsiVy1mzyFz/UIKOMpD5xZnbRYAuSPECi+VTPdB9vcoil530k+\nViDlaRNCN00mdqTKglpr789YYJ6zSs2ft6k5QLvWnYbD5HTnyx62HMBOltWZmvU=\n=bj8C\n-----END PGP SIGNATURE-----\n", "payload": "tree 415c39f2b9e9223cd58d7d235f6d42cb95b8ee26\nparent 38ae9bd2c8145c691601d6c10c9664d48901435c\nparent 5424140b66bf839d20cbf32bf4604e23b30074c5\nauthor Ashley Mannix <kodraus@hey.com> 1612840577 +1000\ncommitter GitHub <noreply@github.com> 1612840577 +1000\n\nMerge pull request #62 from rust-lang/feature/shuffle-self\n\nAdd SIMD shuffles for SimdType{2,4,8,16,32,64}"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0c23194829da3a75e641ff0424986cbeb5ff9e", "html_url": "https://github.com/rust-lang/rust/commit/1b0c23194829da3a75e641ff0424986cbeb5ff9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b0c23194829da3a75e641ff0424986cbeb5ff9e/comments", "author": {"login": "KodrAus", "id": 6721458, "node_id": "MDQ6VXNlcjY3MjE0NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/6721458?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KodrAus", "html_url": "https://github.com/KodrAus", "followers_url": "https://api.github.com/users/KodrAus/followers", "following_url": "https://api.github.com/users/KodrAus/following{/other_user}", "gists_url": "https://api.github.com/users/KodrAus/gists{/gist_id}", "starred_url": "https://api.github.com/users/KodrAus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KodrAus/subscriptions", "organizations_url": "https://api.github.com/users/KodrAus/orgs", "repos_url": "https://api.github.com/users/KodrAus/repos", "events_url": "https://api.github.com/users/KodrAus/events{/privacy}", "received_events_url": "https://api.github.com/users/KodrAus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38ae9bd2c8145c691601d6c10c9664d48901435c", "url": "https://api.github.com/repos/rust-lang/rust/commits/38ae9bd2c8145c691601d6c10c9664d48901435c", "html_url": "https://github.com/rust-lang/rust/commit/38ae9bd2c8145c691601d6c10c9664d48901435c"}, {"sha": "5424140b66bf839d20cbf32bf4604e23b30074c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5424140b66bf839d20cbf32bf4604e23b30074c5", "html_url": "https://github.com/rust-lang/rust/commit/5424140b66bf839d20cbf32bf4604e23b30074c5"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "4ea3837634874830f9bab9644c4bb335426082db", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=1b0c23194829da3a75e641ff0424986cbeb5ff9e", "patch": "@@ -52,4 +52,12 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_le<T, U>(x: T, y: T) -> U;\n     pub(crate) fn simd_gt<T, U>(x: T, y: T) -> U;\n     pub(crate) fn simd_ge<T, U>(x: T, y: T) -> U;\n+\n+    // shufflevector\n+    pub(crate) fn simd_shuffle2<T, U>(x: T, y: T, idx: [u32; 2]) -> U;\n+    pub(crate) fn simd_shuffle4<T, U>(x: T, y: T, idx: [u32; 4]) -> U;\n+    pub(crate) fn simd_shuffle8<T, U>(x: T, y: T, idx: [u32; 8]) -> U;\n+    pub(crate) fn simd_shuffle16<T, U>(x: T, y: T, idx: [u32; 16]) -> U;\n+    pub(crate) fn simd_shuffle32<T, U>(x: T, y: T, idx: [u32; 32]) -> U;\n+    pub(crate) fn simd_shuffle64<T, U>(x: T, y: T, idx: [u32; 64]) -> U;\n }"}, {"sha": "62489e4fbd50b280e732941ac268bb6ac48186ab", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=1b0c23194829da3a75e641ff0424986cbeb5ff9e", "patch": "@@ -1,10 +1,19 @@\n #![no_std]\n-#![feature(repr_simd, platform_intrinsics, link_llvm_intrinsics, simd_ffi)]\n+#![allow(incomplete_features)]\n+#![feature(\n+    repr_simd,\n+    platform_intrinsics,\n+    link_llvm_intrinsics,\n+    simd_ffi,\n+    const_generics\n+)]\n #![warn(missing_docs)]\n //! Portable SIMD module.\n \n #[macro_use]\n mod macros;\n+#[macro_use]\n+mod permute;\n \n mod fmt;\n mod intrinsics;"}, {"sha": "0abafe71f50da54112a248da629696d33d659b75", "filename": "crates/core_simd/src/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmacros.rs?ref=1b0c23194829da3a75e641ff0424986cbeb5ff9e", "patch": "@@ -148,6 +148,8 @@ macro_rules! impl_vector {\n                 Self::splat(value)\n             }\n         }\n+\n+        impl_shuffle_2pow_lanes!{ $name }\n     }\n }\n "}, {"sha": "05a78c3764b89f166a55668063547ea6bce733cf", "filename": "crates/core_simd/src/permute.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Fsrc%2Fpermute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fpermute.rs?ref=1b0c23194829da3a75e641ff0424986cbeb5ff9e", "patch": "@@ -0,0 +1,29 @@\n+macro_rules! impl_shuffle_lane {\n+    { $name:ident, $fn:ident, $n:literal } => {\n+        impl $name<$n> {\n+            /// A const SIMD shuffle that takes 2 SIMD vectors and produces another vector, using\n+            /// the indices in the const parameter. The first or \"self\" vector will have its lanes\n+            /// indexed from 0, and the second vector will have its first lane indexed at $n.\n+            /// Indices must be in-bounds of either vector at compile time.\n+            ///\n+            /// Some SIMD shuffle instructions can be quite slow, so avoiding them by loading data\n+            /// into the desired patterns in advance is preferred, but shuffles are still faster\n+            /// than storing and reloading from memory.\n+            #[inline]\n+            pub fn shuffle<const IDX: [u32; $n]>(self, second: Self) -> Self {\n+                unsafe { crate::intrinsics::$fn(self, second, IDX) }\n+            }\n+        }\n+    }\n+}\n+\n+macro_rules! impl_shuffle_2pow_lanes {\n+    { $name:ident } => {\n+        impl_shuffle_lane!{ $name, simd_shuffle2, 2 }\n+        impl_shuffle_lane!{ $name, simd_shuffle4, 4 }\n+        impl_shuffle_lane!{ $name, simd_shuffle8, 8 }\n+        impl_shuffle_lane!{ $name, simd_shuffle16, 16 }\n+        impl_shuffle_lane!{ $name, simd_shuffle32, 32 }\n+        impl_shuffle_lane!{ $name, simd_shuffle64, 64 }\n+    }\n+}"}, {"sha": "1c6c391d8d060598301ef4b16b4c508d055093cd", "filename": "crates/core_simd/tests/permute.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Ftests%2Fpermute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0c23194829da3a75e641ff0424986cbeb5ff9e/crates%2Fcore_simd%2Ftests%2Fpermute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fpermute.rs?ref=1b0c23194829da3a75e641ff0424986cbeb5ff9e", "patch": "@@ -0,0 +1,15 @@\n+use core_simd::SimdU32;\n+\n+#[cfg(target_arch = \"wasm32\")]\n+use wasm_bindgen_test::*;\n+\n+#[cfg(target_arch = \"wasm32\")]\n+wasm_bindgen_test_configure!(run_in_browser);\n+\n+#[test]\n+#[cfg_attr(target_arch = \"wasm32\", wasm_bindgen_test)]\n+fn simple_shuffle() {\n+    let a = SimdU32::from_array([2, 4, 1, 9]);\n+    let b = a;\n+    assert_eq!(a.shuffle::<{ [3, 1, 4, 6] }>(b).to_array(), [9, 4, 2, 1]);\n+}"}]}