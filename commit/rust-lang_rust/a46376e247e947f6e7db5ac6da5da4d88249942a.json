{"sha": "a46376e247e947f6e7db5ac6da5da4d88249942a", "node_id": "C_kwDOAAsO6NoAKGE0NjM3NmUyNDdlOTQ3ZjZlN2RiNWFjNmRhNWRhNGQ4ODI0OTk0MmE", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T20:15:41Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-09-16T20:15:41Z"}, "message": "Make QueryOutlivesConstraint contain a ConstraintCategory", "tree": {"sha": "8c15ae615ad0b87dd8eb57c136ddd5bdb87264a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c15ae615ad0b87dd8eb57c136ddd5bdb87264a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a46376e247e947f6e7db5ac6da5da4d88249942a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a46376e247e947f6e7db5ac6da5da4d88249942a", "html_url": "https://github.com/rust-lang/rust/commit/a46376e247e947f6e7db5ac6da5da4d88249942a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a46376e247e947f6e7db5ac6da5da4d88249942a/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d4e51e428ba7b1ece3c67d1c114e2b486dc85dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d4e51e428ba7b1ece3c67d1c114e2b486dc85dd", "html_url": "https://github.com/rust-lang/rust/commit/4d4e51e428ba7b1ece3c67d1c114e2b486dc85dd"}], "stats": {"total": 100, "additions": 64, "deletions": 36}, "files": [{"sha": "154a471a2b385a8e527f280fddd03b9c5bc6ebb1", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=a46376e247e947f6e7db5ac6da5da4d88249942a", "patch": "@@ -2295,7 +2295,13 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n                              outlives_requirement={:?}\",\n                             region, outlived_region, outlives_requirement,\n                         );\n-                        ty::Binder::dummy(ty::OutlivesPredicate(region.into(), outlived_region))\n+                        (\n+                            ty::Binder::dummy(ty::OutlivesPredicate(\n+                                region.into(),\n+                                outlived_region,\n+                            )),\n+                            ConstraintCategory::BoringNoLocation,\n+                        )\n                     }\n \n                     ClosureOutlivesSubject::Ty(ty) => {\n@@ -2305,7 +2311,10 @@ impl<'tcx> ClosureRegionRequirementsExt<'tcx> for ClosureRegionRequirements<'tcx\n                              outlives_requirement={:?}\",\n                             ty, outlived_region, outlives_requirement,\n                         );\n-                        ty::Binder::dummy(ty::OutlivesPredicate(ty.into(), outlived_region))\n+                        (\n+                            ty::Binder::dummy(ty::OutlivesPredicate(ty.into(), outlived_region)),\n+                            ConstraintCategory::BoringNoLocation,\n+                        )\n                     }\n                 }\n             })"}, {"sha": "2c9ab35f51b6683fc2aa39cb65ca994e5bb71d9e", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=a46376e247e947f6e7db5ac6da5da4d88249942a", "patch": "@@ -98,9 +98,12 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         // region constraints like `for<'a> 'a: 'b`. At some point\n         // when we move to universes, we will, and this assertion\n         // will start to fail.\n-        let ty::OutlivesPredicate(k1, r2) = query_constraint.no_bound_vars().unwrap_or_else(|| {\n-            bug!(\"query_constraint {:?} contained bound vars\", query_constraint,);\n-        });\n+        let ty::OutlivesPredicate(k1, r2) =\n+            query_constraint.0.no_bound_vars().unwrap_or_else(|| {\n+                bug!(\"query_constraint {:?} contained bound vars\", query_constraint,);\n+            });\n+\n+        let _constraint_category = query_constraint.1;\n \n         match k1.unpack() {\n             GenericArgKind::Lifetime(r1) => {"}, {"sha": "5f714cf723ba236c631985e894359a669d7553ab", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=a46376e247e947f6e7db5ac6da5da4d88249942a", "patch": "@@ -2591,7 +2591,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 .enumerate()\n                 .filter_map(|(idx, constraint)| {\n                     let ty::OutlivesPredicate(k1, r2) =\n-                        constraint.no_bound_vars().unwrap_or_else(|| {\n+                        constraint.0.no_bound_vars().unwrap_or_else(|| {\n                             bug!(\"query_constraint {:?} contained bound vars\", constraint,);\n                         });\n "}, {"sha": "d0c4846982617cf784437ed8d7e00c5035a8afaf", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=a46376e247e947f6e7db5ac6da5da4d88249942a", "patch": "@@ -22,6 +22,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;\n use rustc_middle::arena::ArenaAllocatable;\n+use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::TypeRelation;\n@@ -248,6 +249,8 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         // the original values `v_o` that was canonicalized into a\n         // variable...\n \n+        let constraint_category = ConstraintCategory::BoringNoLocation;\n+\n         for (index, original_value) in original_values.var_values.iter().enumerate() {\n             // ...with the value `v_r` of that variable from the query.\n             let result_value = query_response.substitute_projected(self.tcx, &result_subst, |v| {\n@@ -263,12 +266,14 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 (GenericArgKind::Lifetime(v_o), GenericArgKind::Lifetime(v_r)) => {\n                     // To make `v_o = v_r`, we emit `v_o: v_r` and `v_r: v_o`.\n                     if v_o != v_r {\n-                        output_query_region_constraints\n-                            .outlives\n-                            .push(ty::Binder::dummy(ty::OutlivesPredicate(v_o.into(), v_r)));\n-                        output_query_region_constraints\n-                            .outlives\n-                            .push(ty::Binder::dummy(ty::OutlivesPredicate(v_r.into(), v_o)));\n+                        output_query_region_constraints.outlives.push((\n+                            ty::Binder::dummy(ty::OutlivesPredicate(v_o.into(), v_r)),\n+                            constraint_category,\n+                        ));\n+                        output_query_region_constraints.outlives.push((\n+                            ty::Binder::dummy(ty::OutlivesPredicate(v_r.into(), v_o)),\n+                            constraint_category,\n+                        ));\n                     }\n                 }\n \n@@ -314,7 +319,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 // Screen out `'a: 'a` cases -- we skip the binder here but\n                 // only compare the inner values to one another, so they are still at\n                 // consistent binding levels.\n-                let ty::OutlivesPredicate(k1, r2) = r_c.skip_binder();\n+                let ty::OutlivesPredicate(k1, r2) = r_c.0.skip_binder();\n                 if k1 != r2.into() { Some(r_c) } else { None }\n             }),\n         );\n@@ -559,7 +564,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n         cause: ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Obligation<'tcx, ty::Predicate<'tcx>> {\n-        let ty::OutlivesPredicate(k1, r2) = predicate.skip_binder();\n+        let ty::OutlivesPredicate(k1, r2) = predicate.0.skip_binder();\n \n         let atom = match k1.unpack() {\n             GenericArgKind::Lifetime(r1) => {\n@@ -574,7 +579,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                 span_bug!(cause.span, \"unexpected const outlives {:?}\", predicate);\n             }\n         };\n-        let predicate = predicate.rebind(atom).to_predicate(self.tcx);\n+        let predicate = predicate.0.rebind(atom).to_predicate(self.tcx);\n \n         Obligation::new(cause, param_env, predicate)\n     }\n@@ -638,26 +643,34 @@ pub fn make_query_region_constraints<'tcx>(\n \n     let outlives: Vec<_> = constraints\n         .iter()\n-        .map(|(k, _)| match *k {\n-            // Swap regions because we are going from sub (<=) to outlives\n-            // (>=).\n-            Constraint::VarSubVar(v1, v2) => ty::OutlivesPredicate(\n-                tcx.mk_region(ty::ReVar(v2)).into(),\n-                tcx.mk_region(ty::ReVar(v1)),\n-            ),\n-            Constraint::VarSubReg(v1, r2) => {\n-                ty::OutlivesPredicate(r2.into(), tcx.mk_region(ty::ReVar(v1)))\n-            }\n-            Constraint::RegSubVar(r1, v2) => {\n-                ty::OutlivesPredicate(tcx.mk_region(ty::ReVar(v2)).into(), r1)\n-            }\n-            Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n+        .map(|(k, _)| {\n+            let constraint = ty::Binder::dummy(match *k {\n+                // Swap regions because we are going from sub (<=) to outlives\n+                // (>=).\n+                Constraint::VarSubVar(v1, v2) => ty::OutlivesPredicate(\n+                    tcx.mk_region(ty::ReVar(v2)).into(),\n+                    tcx.mk_region(ty::ReVar(v1)),\n+                ),\n+                Constraint::VarSubReg(v1, r2) => {\n+                    ty::OutlivesPredicate(r2.into(), tcx.mk_region(ty::ReVar(v1)))\n+                }\n+                Constraint::RegSubVar(r1, v2) => {\n+                    ty::OutlivesPredicate(tcx.mk_region(ty::ReVar(v2)).into(), r1)\n+                }\n+                Constraint::RegSubReg(r1, r2) => ty::OutlivesPredicate(r2.into(), r1),\n+            });\n+\n+            (constraint, ConstraintCategory::BoringNoLocation)\n         })\n-        .map(ty::Binder::dummy) // no bound vars in the code above\n         .chain(\n             outlives_obligations\n-                .map(|(ty, r)| ty::OutlivesPredicate(ty.into(), r))\n-                .map(ty::Binder::dummy), // no bound vars in the code above\n+                // no bound vars in the code above\n+                .map(|(ty, r)| {\n+                    (\n+                        ty::Binder::dummy(ty::OutlivesPredicate(ty.into(), r)),\n+                        ConstraintCategory::BoringNoLocation,\n+                    )\n+                }),\n         )\n         .collect();\n "}, {"sha": "d3cf519b633c71db5860a291a17347e06ac07104", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=a46376e247e947f6e7db5ac6da5da4d88249942a", "patch": "@@ -22,6 +22,7 @@\n //! [c]: https://rust-lang.github.io/chalk/book/canonical_queries/canonicalization.html\n \n use crate::infer::MemberConstraint;\n+use crate::mir::ConstraintCategory;\n use crate::ty::subst::GenericArg;\n use crate::ty::{self, BoundVar, List, Region, Ty, TyCtxt};\n use rustc_index::vec::IndexVec;\n@@ -301,8 +302,10 @@ impl<'tcx, V> Canonical<'tcx, V> {\n     }\n }\n \n-pub type QueryOutlivesConstraint<'tcx> =\n-    ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>;\n+pub type QueryOutlivesConstraint<'tcx> = (\n+    ty::Binder<'tcx, ty::OutlivesPredicate<GenericArg<'tcx>, Region<'tcx>>>,\n+    ConstraintCategory<'tcx>,\n+);\n \n TrivialTypeTraversalAndLiftImpls! {\n     for <'tcx> {"}, {"sha": "d89efe2b3f024a68a19ab18cb42ea3fd57f94f2b", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a46376e247e947f6e7db5ac6da5da4d88249942a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=a46376e247e947f6e7db5ac6da5da4d88249942a", "patch": "@@ -327,7 +327,7 @@ rustc_data_structures::static_assert_size!(ConstraintCategory<'_>, 16);\n ///\n /// See also `rustc_const_eval::borrow_check::constraints`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n+#[derive(TyEncodable, TyDecodable, HashStable, Lift, TypeVisitable, TypeFoldable)]\n pub enum ConstraintCategory<'tcx> {\n     Return(ReturnConstraint),\n     Yield,\n@@ -369,7 +369,7 @@ pub enum ConstraintCategory<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, Hash)]\n-#[derive(TyEncodable, TyDecodable, HashStable)]\n+#[derive(TyEncodable, TyDecodable, HashStable, TypeVisitable, TypeFoldable)]\n pub enum ReturnConstraint {\n     Normal,\n     ClosureUpvar(Field),"}]}