{"sha": "2582e36da3bb1ac57fe0472f6d424da40520dc51", "node_id": "C_kwDOAAsO6NoAKDI1ODJlMzZkYTNiYjFhYzU3ZmUwNDcyZjZkNDI0ZGE0MDUyMGRjNTE", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2022-11-25T02:15:46Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2022-11-25T02:15:46Z"}, "message": "Don't suggest associated function call for associated const.", "tree": {"sha": "b20830860ddfb1ba379c2fbff1a81638b9cb92cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b20830860ddfb1ba379c2fbff1a81638b9cb92cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2582e36da3bb1ac57fe0472f6d424da40520dc51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2582e36da3bb1ac57fe0472f6d424da40520dc51", "html_url": "https://github.com/rust-lang/rust/commit/2582e36da3bb1ac57fe0472f6d424da40520dc51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2582e36da3bb1ac57fe0472f6d424da40520dc51/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dfb4b0afaf6acace0845d00e85a934fb4289d83", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dfb4b0afaf6acace0845d00e85a934fb4289d83", "html_url": "https://github.com/rust-lang/rust/commit/5dfb4b0afaf6acace0845d00e85a934fb4289d83"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "979e7e259964ab794c90de596077e1cb8042ca8c", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2582e36da3bb1ac57fe0472f6d424da40520dc51/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2582e36da3bb1ac57fe0472f6d424da40520dc51/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=2582e36da3bb1ac57fe0472f6d424da40520dc51", "patch": "@@ -9,7 +9,6 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n-use rustc_hir::def::Namespace;\n use rustc_infer::infer::canonical::OriginalQueryValues;\n use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n@@ -1881,14 +1880,19 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     // The length of the returned iterator is nearly always 0 or 1 and this\n     // method is fairly hot.\n     fn impl_or_trait_item(&self, def_id: DefId) -> SmallVec<[ty::AssocItem; 1]> {\n+        let relevant_kind_for_mode = |kind| match (self.mode, kind) {\n+            (Mode::MethodCall, ty::AssocKind::Fn) => true,\n+            (Mode::Path, ty::AssocKind::Const | ty::AssocKind::Fn) => true,\n+            _ => false,\n+        };\n         if let Some(name) = self.method_name {\n             if self.allow_similar_names {\n                 let max_dist = max(name.as_str().len(), 3) / 3;\n                 self.tcx\n                     .associated_items(def_id)\n                     .in_definition_order()\n                     .filter(|x| {\n-                        if x.kind.namespace() != Namespace::ValueNS {\n+                        if !relevant_kind_for_mode(x.kind) {\n                             return false;\n                         }\n                         match lev_distance_with_substrings(name.as_str(), x.name.as_str(), max_dist)\n@@ -1902,10 +1906,16 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             } else {\n                 self.fcx\n                     .associated_value(def_id, name)\n+                    .filter(|x| relevant_kind_for_mode(x.kind))\n                     .map_or_else(SmallVec::new, |x| SmallVec::from_buf([x]))\n             }\n         } else {\n-            self.tcx.associated_items(def_id).in_definition_order().copied().collect()\n+            self.tcx\n+                .associated_items(def_id)\n+                .in_definition_order()\n+                .filter(|x| relevant_kind_for_mode(x.kind))\n+                .copied()\n+                .collect()\n         }\n     }\n }"}, {"sha": "0d9543e0b8fa22d61ae4280b051aabe571f7aeef", "filename": "src/test/ui/suggestions/dont-suggest-ufcs-for-const.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2582e36da3bb1ac57fe0472f6d424da40520dc51/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ufcs-for-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2582e36da3bb1ac57fe0472f6d424da40520dc51/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ufcs-for-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-ufcs-for-const.stderr?ref=2582e36da3bb1ac57fe0472f6d424da40520dc51", "patch": "@@ -2,13 +2,7 @@ error[E0599]: no method named `MAX` found for type `u32` in the current scope\n   --> $DIR/dont-suggest-ufcs-for-const.rs:2:11\n    |\n LL |     1_u32.MAX();\n-   |     ------^^^--\n-   |     |     |\n-   |     |     this is an associated function, not a method\n-   |     help: use associated function syntax instead: `u32::MAX()`\n-   |\n-   = note: found the following associated functions; to be used as methods, functions must have a `self` parameter\n-   = note: the candidate is defined in an impl for the type `u32`\n+   |           ^^^ method not found in `u32`\n \n error: aborting due to previous error\n "}]}