{"sha": "51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYjBiMzczNGNiZDBjYTU4YzhiZTM1MTJkNTNmY2UyZDk1ZjQwZGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-12T20:28:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-12T20:28:19Z"}, "message": "Auto merge of #47392 - kennytm:rollup, r=kennytm\n\nRollup of 24 pull requests\n\n- Successful merges: #46985, #47069, #47081, #47185, #47282, #47283, #47288, #47289, #47298, #47305, #47306, #47307, #47310, #47324, #47328, #47331, #47340, #47343, #47344, #47352, #47357, #47365, #47375, #47382\n- Failed merges: #47334", "tree": {"sha": "0f7929e306da4893a0db5671686f08d4443d8859", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f7929e306da4893a0db5671686f08d4443d8859"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "html_url": "https://github.com/rust-lang/rust/commit/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b90e4e8cd068910f604f3e1fb5d03cc01f1658f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b90e4e8cd068910f604f3e1fb5d03cc01f1658f", "html_url": "https://github.com/rust-lang/rust/commit/0b90e4e8cd068910f604f3e1fb5d03cc01f1658f"}, {"sha": "c12eabfb11384dfd45cab87a809aa442203dcc53", "url": "https://api.github.com/repos/rust-lang/rust/commits/c12eabfb11384dfd45cab87a809aa442203dcc53", "html_url": "https://github.com/rust-lang/rust/commit/c12eabfb11384dfd45cab87a809aa442203dcc53"}], "stats": {"total": 715, "additions": 490, "deletions": 225}, "files": [{"sha": "6e242b74894c5dd66715f904683287ba94338b69", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -126,7 +126,7 @@ matrix:\n       if: branch = auto\n     - env: IMAGE=dist-armv7-linux DEPLOY=1\n       if: branch = auto\n-    - env: IMAGE=dist-i586-gnu-i686-musl DEPLOY=1\n+    - env: IMAGE=dist-i586-gnu-i586-i686-musl DEPLOY=1\n       if: branch = auto\n     - env: IMAGE=dist-i686-freebsd DEPLOY=1\n       if: branch = auto"}, {"sha": "8fbf3535264fcd8868478dfd718af213f86cf7b5", "filename": "src/Cargo.lock", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -194,7 +194,7 @@ dependencies = [\n  \"hex 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jobserver 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libgit2-sys 0.6.18 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -928,7 +928,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"jobserver\"\n-version = \"0.1.8\"\n+version = \"0.1.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1711,7 +1711,7 @@ dependencies = [\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n- \"jobserver 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_apfloat 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -2057,7 +2057,7 @@ dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jobserver 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -2862,7 +2862,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ignore 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3fcaf2365eb14b28ec7603c98c06cc531f19de9eb283d89a3dff8417c8c99f5\"\n \"checksum itertools 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3f2be4da1690a039e9ae5fd575f706a63ad5a2120f161b1d653c9da3930dd21\"\n \"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n-\"checksum jobserver 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"931b04e5e57d88cc909528f0d701db36a870b72a052648ded8baf80f9f445e0f\"\n+\"checksum jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"565f6106bd87b394398f813bea4e5ecad6d6b0f6aa077592d088f882a506481d\"\n \"checksum json 0.11.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ebf0fac977ee3a4a3242b6446004ff64514889e3e2730bbd4f764a67a2e483\"\n \"checksum jsonrpc-core 8.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddf83704f4e79979a424d1082dd2c1e52683058056c9280efa19ac5f6bc9033c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\""}, {"sha": "aa9fe459e88c996abd961515514529ac19a1e7ad", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -108,6 +108,8 @@ def v(*args):\n   \"MUSL root installation directory (deprecated)\")\n v(\"musl-root-x86_64\", \"target.x86_64-unknown-linux-musl.musl-root\",\n   \"x86_64-unknown-linux-musl install directory\")\n+v(\"musl-root-i586\", \"target.i586-unknown-linux-musl.musl-root\",\n+  \"i586-unknown-linux-musl install directory\")\n v(\"musl-root-i686\", \"target.i686-unknown-linux-musl.musl-root\",\n   \"i686-unknown-linux-musl install directory\")\n v(\"musl-root-arm\", \"target.arm-unknown-linux-musleabi.musl-root\","}, {"sha": "ba8cf3a8e2eb597844e202e5563937646c758f80", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -429,6 +429,8 @@ impl Step for Openssl {\n             \"arm-unknown-linux-gnueabihf\" => \"linux-armv4\",\n             \"armv7-linux-androideabi\" => \"android-armv7\",\n             \"armv7-unknown-linux-gnueabihf\" => \"linux-armv4\",\n+            \"i586-unknown-linux-gnu\" => \"linux-elf\",\n+            \"i586-unknown-linux-musl\" => \"linux-elf\",\n             \"i686-apple-darwin\" => \"darwin-i386-cc\",\n             \"i686-linux-android\" => \"android-x86\",\n             \"i686-unknown-freebsd\" => \"BSD-x86-elf\","}, {"sha": "4c9d4b3ba78ed673be8a75cab6d5ada6ea0b1d00", "filename": "src/ci/docker/dist-i586-gnu-i586-i686-musl/Dockerfile", "status": "renamed", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i586-gnu-i586-i686-musl%2FDockerfile?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -21,13 +21,17 @@ COPY scripts/musl.sh /build/\n RUN CC=gcc CFLAGS=\"-m32 -fPIC -Wa,-mrelax-relocations=no\" \\\n     CXX=g++ CXXFLAGS=\"-m32 -Wa,-mrelax-relocations=no\" \\\n     bash musl.sh i686 --target=i686 && \\\n+    CC=gcc CFLAGS=\"-march=pentium -m32 -fPIC -Wa,-mrelax-relocations=no\" \\\n+    CXX=g++ CXXFLAGS=\"-march=pentium -m32 -Wa,-mrelax-relocations=no\" \\\n+    bash musl.sh i586 --target=i586 && \\\n     rm -rf /build\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n ENV RUST_CONFIGURE_ARGS \\\n       --target=i686-unknown-linux-musl,i586-unknown-linux-gnu \\\n+      --musl-root-i586=/musl-i586 \\\n       --musl-root-i686=/musl-i686 \\\n       --enable-extended\n \n@@ -38,12 +42,13 @@ ENV RUST_CONFIGURE_ARGS \\\n # See: https://github.com/rust-lang/rust/issues/34978\n ENV CFLAGS_i686_unknown_linux_musl=-Wa,-mrelax-relocations=no\n ENV CFLAGS_i586_unknown_linux_gnu=-Wa,-mrelax-relocations=no\n+# FIXME remove -Wl,-melf_i386 after cc is updated to include\n+#       https://github.com/alexcrichton/cc-rs/pull/281\n+ENV CFLAGS_i586_unknown_linux_musl=\"-Wa,-mrelax-relocations=no -Wl,-melf_i386\"\n+\n+ENV TARGETS=i586-unknown-linux-gnu\n+ENV TARGETS=$TARGETS,i686-unknown-linux-musl\n \n ENV SCRIPT \\\n-      python2.7 ../x.py test \\\n-          --target i686-unknown-linux-musl \\\n-          --target i586-unknown-linux-gnu \\\n-          && \\\n-      python2.7 ../x.py dist \\\n-          --target i686-unknown-linux-musl \\\n-          --target i586-unknown-linux-gnu\n+      python2.7 ../x.py test --target $TARGETS && \\\n+      python2.7 ../x.py dist --target $TARGETS,i586-unknown-linux-musl", "previous_filename": "src/ci/docker/dist-i586-gnu-i686-musl/Dockerfile"}, {"sha": "7a7233216a35f09568db40ed6ab5e740b1eab7fb", "filename": "src/ci/docker/scripts/musl.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -30,7 +30,7 @@ exit 1\n TAG=$1\n shift\n \n-MUSL=musl-1.1.17\n+MUSL=musl-1.1.18\n \n # may have been downloaded in a previous run\n if [ ! -d $MUSL ]; then\n@@ -39,7 +39,7 @@ fi\n \n cd $MUSL\n ./configure --disable-shared --prefix=/musl-$TAG $@\n-if [ \"$TAG\" = \"i686\" ]; then\n+if [ \"$TAG\" = \"i586\" -o \"$TAG\" = \"i686\" ]; then\n   hide_output make -j$(nproc) AR=ar RANLIB=ranlib\n else\n   hide_output make -j$(nproc)"}, {"sha": "72fa3148fe54aba3563439947fb212864f3d7e3f", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 24, "deletions": 11, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -69,7 +69,9 @@ struct TypedArenaChunk<T> {\n impl<T> TypedArenaChunk<T> {\n     #[inline]\n     unsafe fn new(capacity: usize) -> TypedArenaChunk<T> {\n-        TypedArenaChunk { storage: RawVec::with_capacity(capacity) }\n+        TypedArenaChunk {\n+            storage: RawVec::with_capacity(capacity),\n+        }\n     }\n \n     /// Destroys this arena chunk.\n@@ -132,7 +134,9 @@ impl<T> TypedArena<T> {\n \n         unsafe {\n             if mem::size_of::<T>() == 0 {\n-                self.ptr.set(intrinsics::arith_offset(self.ptr.get() as *mut u8, 1) as *mut T);\n+                self.ptr\n+                    .set(intrinsics::arith_offset(self.ptr.get() as *mut u8, 1)\n+                        as *mut T);\n                 let ptr = mem::align_of::<T>() as *mut T;\n                 // Don't drop the object. This `write` is equivalent to `forget`.\n                 ptr::write(ptr, object);\n@@ -157,7 +161,9 @@ impl<T> TypedArena<T> {\n     ///  - Zero-length slices\n     #[inline]\n     pub fn alloc_slice(&self, slice: &[T]) -> &mut [T]\n-        where T: Copy {\n+    where\n+        T: Copy,\n+    {\n         assert!(mem::size_of::<T>() != 0);\n         assert!(slice.len() != 0);\n \n@@ -321,7 +327,10 @@ impl DroplessArena {\n             let (chunk, mut new_capacity);\n             if let Some(last_chunk) = chunks.last_mut() {\n                 let used_bytes = self.ptr.get() as usize - last_chunk.start() as usize;\n-                if last_chunk.storage.reserve_in_place(used_bytes, needed_bytes) {\n+                if last_chunk\n+                    .storage\n+                    .reserve_in_place(used_bytes, needed_bytes)\n+                {\n                     self.end.set(last_chunk.end());\n                     return;\n                 } else {\n@@ -357,9 +366,9 @@ impl DroplessArena {\n \n             let ptr = self.ptr.get();\n             // Set the pointer past ourselves\n-            self.ptr.set(intrinsics::arith_offset(\n-                    self.ptr.get(), mem::size_of::<T>() as isize\n-            ) as *mut u8);\n+            self.ptr.set(\n+                intrinsics::arith_offset(self.ptr.get(), mem::size_of::<T>() as isize) as *mut u8,\n+            );\n             // Write into uninitialized memory.\n             ptr::write(ptr as *mut T, object);\n             &mut *(ptr as *mut T)\n@@ -375,7 +384,9 @@ impl DroplessArena {\n     ///  - Zero-length slices\n     #[inline]\n     pub fn alloc_slice<T>(&self, slice: &[T]) -> &mut [T]\n-        where T: Copy {\n+    where\n+        T: Copy,\n+    {\n         assert!(!mem::needs_drop::<T>());\n         assert!(mem::size_of::<T>() != 0);\n         assert!(slice.len() != 0);\n@@ -391,7 +402,8 @@ impl DroplessArena {\n         unsafe {\n             let arena_slice = slice::from_raw_parts_mut(self.ptr.get() as *mut T, slice.len());\n             self.ptr.set(intrinsics::arith_offset(\n-                    self.ptr.get(), (slice.len() * mem::size_of::<T>()) as isize\n+                self.ptr.get(),\n+                (slice.len() * mem::size_of::<T>()) as isize,\n             ) as *mut u8);\n             arena_slice.copy_from_slice(slice);\n             arena_slice\n@@ -456,8 +468,9 @@ mod tests {\n \n         let arena = Wrap(TypedArena::new());\n \n-        let result =\n-            arena.alloc_outer(|| Outer { inner: arena.alloc_inner(|| Inner { value: 10 }) });\n+        let result = arena.alloc_outer(|| Outer {\n+            inner: arena.alloc_inner(|| Inner { value: 10 }),\n+        });\n \n         assert_eq!(result.inner.value, 10);\n     }"}, {"sha": "587dcbe6d6784556796881e87b351d8538e50757", "filename": "src/libcore/tests/num/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fmod.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -197,7 +197,6 @@ test_impl_from! { test_u16f64, u16, f64 }\n test_impl_from! { test_u32f64, u32, f64 }\n \n // Float -> Float\n-#[cfg_attr(all(target_arch = \"wasm32\", target_os = \"emscripten\"), ignore)] // issue 42630\n #[test]\n fn test_f32f64() {\n     use core::f32;"}, {"sha": "075ee0b8c7c2874ce62ab77cd44d91eb6f97c906", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -48,6 +48,7 @@\n #![feature(drain_filter)]\n #![feature(dyn_trait)]\n #![feature(from_ref)]\n+#![feature(fs_read_write)]\n #![feature(i128)]\n #![feature(i128_type)]\n #![feature(inclusive_range)]"}, {"sha": "5336c1944e8c4d905f66c5928574b5c832cbeafd", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -1046,7 +1046,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // calculated the lint levels for all AST nodes.\n     for (_id, lints) in cx.buffered.map {\n         for early_lint in lints {\n-            span_bug!(early_lint.span, \"failed to process bufferd lint here\");\n+            span_bug!(early_lint.span, \"failed to process buffered lint here\");\n         }\n     }\n }"}, {"sha": "2971f3e853a99d06f38e21e3b13b60ada46ebe20", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -218,13 +218,10 @@ pub fn record_time<T, F>(accu: &Cell<Duration>, f: F) -> T where\n // Memory reporting\n #[cfg(unix)]\n fn get_resident() -> Option<usize> {\n-    use std::fs::File;\n-    use std::io::Read;\n+    use std::fs;\n \n     let field = 1;\n-    let mut f = File::open(\"/proc/self/statm\").ok()?;\n-    let mut contents = String::new();\n-    f.read_to_string(&mut contents).ok()?;\n+    let contents = fs::read_string(\"/proc/self/statm\").ok()?;\n     let s = contents.split_whitespace().nth(field)?;\n     let npages = s.parse::<usize>().ok()?;\n     Some(npages * 4096)"}, {"sha": "8bf60b091a7ad88f141a97296f0cd1e131c87a30", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -28,6 +28,7 @@\n \n #![feature(box_syntax)]\n #![feature(const_fn)]\n+#![feature(fs_read_write)]\n \n extern crate syntax;\n extern crate rand;"}, {"sha": "416eacf475b5c987a423bdcf411e866f6ff8f26a", "filename": "src/librustc_back/target/i586_unknown_linux_musl.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi586_unknown_linux_musl.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::TargetResult;\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::i686_unknown_linux_musl::target()?;\n+    base.options.cpu = \"pentium\".to_string();\n+    base.llvm_target = \"i586-unknown-linux-musl\".to_string();\n+    Ok(base)\n+}"}, {"sha": "b65b18d0caa8c0d1f7fdcec38e882490d2311353", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -47,7 +47,6 @@\n use serialize::json::{Json, ToJson};\n use std::collections::BTreeMap;\n use std::default::Default;\n-use std::io::prelude::*;\n use syntax::abi::{Abi, lookup as lookup_abi};\n \n use {LinkerFlavor, PanicStrategy, RelroLevel};\n@@ -147,6 +146,7 @@ supported_targets! {\n     (\"powerpc64-unknown-linux-gnu\", powerpc64_unknown_linux_gnu),\n     (\"powerpc64le-unknown-linux-gnu\", powerpc64le_unknown_linux_gnu),\n     (\"s390x-unknown-linux-gnu\", s390x_unknown_linux_gnu),\n+    (\"sparc64-unknown-linux-gnu\", sparc64_unknown_linux_gnu),\n     (\"arm-unknown-linux-gnueabi\", arm_unknown_linux_gnueabi),\n     (\"arm-unknown-linux-gnueabihf\", arm_unknown_linux_gnueabihf),\n     (\"arm-unknown-linux-musleabi\", arm_unknown_linux_musleabi),\n@@ -156,16 +156,17 @@ supported_targets! {\n     (\"armv7-unknown-linux-gnueabihf\", armv7_unknown_linux_gnueabihf),\n     (\"armv7-unknown-linux-musleabihf\", armv7_unknown_linux_musleabihf),\n     (\"aarch64-unknown-linux-gnu\", aarch64_unknown_linux_gnu),\n+\n     (\"aarch64-unknown-linux-musl\", aarch64_unknown_linux_musl),\n     (\"x86_64-unknown-linux-musl\", x86_64_unknown_linux_musl),\n     (\"i686-unknown-linux-musl\", i686_unknown_linux_musl),\n+    (\"i586-unknown-linux-musl\", i586_unknown_linux_musl),\n     (\"mips-unknown-linux-musl\", mips_unknown_linux_musl),\n     (\"mipsel-unknown-linux-musl\", mipsel_unknown_linux_musl),\n+\n     (\"mips-unknown-linux-uclibc\", mips_unknown_linux_uclibc),\n     (\"mipsel-unknown-linux-uclibc\", mipsel_unknown_linux_uclibc),\n \n-    (\"sparc64-unknown-linux-gnu\", sparc64_unknown_linux_gnu),\n-\n     (\"i686-linux-android\", i686_linux_android),\n     (\"x86_64-linux-android\", x86_64_linux_android),\n     (\"arm-linux-androideabi\", arm_linux_androideabi),\n@@ -809,14 +810,12 @@ impl Target {\n     pub fn search(target: &str) -> Result<Target, String> {\n         use std::env;\n         use std::ffi::OsString;\n-        use std::fs::File;\n+        use std::fs;\n         use std::path::{Path, PathBuf};\n         use serialize::json;\n \n         fn load_file(path: &Path) -> Result<Target, String> {\n-            let mut f = File::open(path).map_err(|e| e.to_string())?;\n-            let mut contents = Vec::new();\n-            f.read_to_end(&mut contents).map_err(|e| e.to_string())?;\n+            let contents = fs::read(path).map_err(|e| e.to_string())?;\n             let obj = json::from_reader(&mut &contents[..])\n                            .map_err(|e| e.to_string())?;\n             Target::from_json(obj)"}, {"sha": "3cfa1d6797d1f098dd4ce6cc46fd5154e923a5a8", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -280,7 +280,8 @@ impl<'a, 'tcx> Pattern<'tcx> {\n         let mut pcx = PatternContext::new(tcx, param_env_and_substs, tables);\n         let result = pcx.lower_pattern(pat);\n         if !pcx.errors.is_empty() {\n-            span_bug!(pat.span, \"encountered errors lowering pattern: {:?}\", pcx.errors)\n+            let msg = format!(\"encountered errors lowering pattern: {:?}\", pcx.errors);\n+            tcx.sess.delay_span_bug(pat.span, &msg);\n         }\n         debug!(\"Pattern::from_hir({:?}) = {:?}\", pat, result);\n         result"}, {"sha": "b7265762208012bb6b32b5e5fffe95df5567b2f0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -889,10 +889,11 @@ pub fn phase_2_configure_and_expand<F>(sess: &Session,\n     let dep_graph = match future_dep_graph {\n         None => DepGraph::new_disabled(),\n         Some(future) => {\n-            let prev_graph = future\n-                .open()\n-                .expect(\"Could not join with background dep_graph thread\")\n-                .open(sess);\n+            let prev_graph = time(time_passes, \"blocked while dep-graph loading finishes\", || {\n+                future.open()\n+                      .expect(\"Could not join with background dep_graph thread\")\n+                      .open(sess)\n+            });\n             DepGraph::new(prev_graph)\n         }\n     };"}, {"sha": "5976b80d90f871f0f8e164b249848e855bf0a5be", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -55,7 +55,7 @@ use rustc::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc::ich::{ATTR_IF_THIS_CHANGED, ATTR_THEN_THIS_WOULD_NEED};\n use graphviz::IntoCow;\n use std::env;\n-use std::fs::File;\n+use std::fs::{self, File};\n use std::io::Write;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -260,7 +260,7 @@ fn dump_graph(tcx: TyCtxt) {\n         let dot_path = format!(\"{}.dot\", path);\n         let mut v = Vec::new();\n         dot::render(&GraphvizDepGraph(nodes, edges), &mut v).unwrap();\n-        File::create(&dot_path).and_then(|mut f| f.write_all(&v)).unwrap();\n+        fs::write(dot_path, v).unwrap();\n     }\n }\n "}, {"sha": "0b827a0ee9873e58cb7be015eaefe98aca199c61", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -16,6 +16,7 @@\n #![deny(warnings)]\n \n #![feature(conservative_impl_trait)]\n+#![feature(fs_read_write)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]\n #![feature(specialization)]"}, {"sha": "d45994adeb67bcf2da10fcbfed2c587ff9632c90", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -21,7 +21,7 @@\n \n use std::io::{self, Read};\n use std::path::Path;\n-use std::fs::File;\n+use std::fs;\n use std::env;\n \n use rustc::session::config::nightly_options;\n@@ -66,11 +66,7 @@ pub fn read_file(report_incremental_info: bool, path: &Path)\n         return Ok(None);\n     }\n \n-    let mut file = File::open(path)?;\n-    let file_size = file.metadata()?.len() as usize;\n-\n-    let mut data = Vec::with_capacity(file_size);\n-    file.read_to_end(&mut data)?;\n+    let data = fs::read(path)?;\n \n     let mut file = io::Cursor::new(data);\n "}, {"sha": "d44d1d6f260249175b64f9866d8f696b5c5ced36", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -15,8 +15,8 @@ use rustc::util::common::time;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::Encodable as RustcEncodable;\n use rustc_serialize::opaque::Encoder;\n-use std::io::{self, Cursor, Write};\n-use std::fs::{self, File};\n+use std::io::{self, Cursor};\n+use std::fs;\n use std::path::PathBuf;\n \n use super::data::*;\n@@ -125,7 +125,7 @@ fn save_in<F>(sess: &Session, path_buf: PathBuf, encode: F)\n \n     // write the data out\n     let data = wr.into_inner();\n-    match File::create(&path_buf).and_then(|mut file| file.write_all(&data)) {\n+    match fs::write(&path_buf, data) {\n         Ok(_) => {\n             debug!(\"save: data written to disk successfully\");\n         }"}, {"sha": "33075e404321c57fcc86a037706665873519b82b", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -15,6 +15,7 @@\n \n #![feature(box_patterns)]\n #![feature(conservative_impl_trait)]\n+#![feature(fs_read_write)]\n #![feature(i128_type)]\n #![feature(libc)]\n #![feature(proc_macro_internals)]"}, {"sha": "e0fb924f1aa3e41a38a122e691449c9e19c74386", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -237,7 +237,7 @@ use rustc_back::target::Target;\n \n use std::cmp;\n use std::fmt;\n-use std::fs::{self, File};\n+use std::fs;\n use std::io::{self, Read};\n use std::path::{Path, PathBuf};\n use std::time::Instant;\n@@ -870,10 +870,7 @@ fn get_metadata_section_imp(target: &Target,\n             }\n         }\n         CrateFlavor::Rmeta => {\n-            let mut file = File::open(filename).map_err(|_|\n-                format!(\"could not open file: '{}'\", filename.display()))?;\n-            let mut buf = vec![];\n-            file.read_to_end(&mut buf).map_err(|_|\n+            let buf = fs::read(filename).map_err(|_|\n                 format!(\"failed to read rmeta metadata: '{}'\", filename.display()))?;\n             OwningRef::new(buf).map_owner_box().erase_owner()\n         }"}, {"sha": "fb3cb1518cbb87169031be6cc2cff169f7f0edfc", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use dot;\n use dot::IntoCow;\n \n-use std::fs::File;\n+use std::fs;\n use std::io;\n use std::io::prelude::*;\n use std::marker::PhantomData;\n@@ -67,7 +67,7 @@ pub(crate) fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n     dot::render(&g, &mut v)?;\n     debug!(\"print_borrowck_graph_to path: {} node_id: {}\",\n            path.display(), mbcx.node_id);\n-    File::create(path).and_then(|mut f| f.write_all(&v))\n+    fs::write(path, v)\n }\n \n pub type Node = BasicBlock;"}, {"sha": "5379bf3f5a7aeed0db424d3ab5617e611b170eef", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -24,6 +24,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(core_intrinsics)]\n #![feature(decl_macro)]\n #![feature(dyn_trait)]\n+#![feature(fs_read_write)]\n #![feature(i128_type)]\n #![feature(inclusive_range_syntax)]\n #![feature(inclusive_range)]"}, {"sha": "b896e6ca85343d0460d18ff45df868b7949ea769", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -122,7 +122,6 @@ struct Qualifier<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     return_qualif: Option<Qualif>,\n     qualif: Qualif,\n     const_fn_arg_vars: BitVector,\n-    local_needs_drop: IndexVec<Local, Option<Span>>,\n     temp_promotion_state: IndexVec<Local, TempState>,\n     promotion_candidates: Vec<Candidate>\n }\n@@ -136,19 +135,28 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n         let mut rpo = traversal::reverse_postorder(mir);\n         let temps = promote_consts::collect_temps(mir, &mut rpo);\n         rpo.reset();\n+\n+        let param_env = tcx.param_env(def_id);\n+\n+        let mut temp_qualif = IndexVec::from_elem(None, &mir.local_decls);\n+        for arg in mir.args_iter() {\n+            let mut qualif = Qualif::NEEDS_DROP;\n+            qualif.restrict(mir.local_decls[arg].ty, tcx, param_env);\n+            temp_qualif[arg] = Some(qualif);\n+        }\n+\n         Qualifier {\n             mode,\n             span: mir.span,\n             def_id,\n             mir,\n             rpo,\n             tcx,\n-            param_env: tcx.param_env(def_id),\n-            temp_qualif: IndexVec::from_elem(None, &mir.local_decls),\n+            param_env,\n+            temp_qualif,\n             return_qualif: None,\n             qualif: Qualif::empty(),\n             const_fn_arg_vars: BitVector::new(mir.local_decls.len()),\n-            local_needs_drop: IndexVec::from_elem(None, &mir.local_decls),\n             temp_promotion_state: temps,\n             promotion_candidates: vec![]\n         }\n@@ -255,15 +263,6 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n             return;\n         }\n \n-        // When initializing a local, record whether the *value* being\n-        // stored in it needs dropping, which it may not, even if its\n-        // type does, e.g. `None::<String>`.\n-        if let Place::Local(local) = *dest {\n-            if qualif.intersects(Qualif::NEEDS_DROP) {\n-                self.local_needs_drop[local] = Some(self.span);\n-            }\n-        }\n-\n         match *dest {\n             Place::Local(index) if self.mir.local_kind(index) == LocalKind::Temp => {\n                 debug!(\"store to temp {:?}\", index);\n@@ -424,17 +423,20 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                    &local: &Local,\n                    _: PlaceContext<'tcx>,\n                    _: Location) {\n-        match self.mir.local_kind(local) {\n+        let kind = self.mir.local_kind(local);\n+        match kind {\n             LocalKind::ReturnPointer => {\n                 self.not_const();\n             }\n-            LocalKind::Arg => {\n-                self.add(Qualif::FN_ARGUMENT);\n-            }\n             LocalKind::Var => {\n                 self.add(Qualif::NOT_CONST);\n             }\n+            LocalKind::Arg |\n             LocalKind::Temp => {\n+                if let LocalKind::Arg = kind {\n+                    self.add(Qualif::FN_ARGUMENT);\n+                }\n+\n                 if !self.temp_promotion_state[local].is_promotable() {\n                     self.add(Qualif::NOT_PROMOTABLE);\n                 }\n@@ -529,16 +531,18 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n \n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         match *operand {\n-            Operand::Copy(ref place) |\n-            Operand::Move(ref place) => {\n+            Operand::Copy(_) |\n+            Operand::Move(_) => {\n                 self.nest(|this| {\n                     this.super_operand(operand, location);\n                     this.try_consume();\n                 });\n \n                 // Mark the consumed locals to indicate later drops are noops.\n-                if let Place::Local(local) = *place {\n-                    self.local_needs_drop[local] = None;\n+                if let Operand::Move(Place::Local(local)) = *operand {\n+                    self.temp_qualif[local] = self.temp_qualif[local].map(|q|\n+                        q - Qualif::NEEDS_DROP\n+                    );\n                 }\n             }\n             Operand::Constant(ref constant) => {\n@@ -847,9 +851,13 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 // HACK(eddyb) Emulate a bit of dataflow analysis,\n                 // conservatively, that drop elaboration will do.\n                 let needs_drop = if let Place::Local(local) = *place {\n-                    self.local_needs_drop[local]\n+                    if self.temp_qualif[local].map_or(true, |q| q.intersects(Qualif::NEEDS_DROP)) {\n+                        Some(self.mir.local_decls[local].source_info.span)\n+                    } else {\n+                        None\n+                    }\n                 } else {\n-                    None\n+                    Some(self.span)\n                 };\n \n                 if let Some(span) = needs_drop {"}, {"sha": "30e3c9c4ca8a3ed30c201b9b480cc2dce8f5bf66", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -1252,7 +1252,13 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                          root_item: &'l ast::Item,\n                          prefix: &ast::Path) {\n         let path = &use_tree.prefix;\n-        let access = access_from!(self.save_ctxt, root_item);\n+\n+        // The access is calculated using the current tree ID, but with the root tree's visibility\n+        // (since nested trees don't have their own visibility).\n+        let access = Access {\n+            public: root_item.vis == ast::Visibility::Public,\n+            reachable: self.save_ctxt.analysis.access_levels.is_reachable(id),\n+        };\n \n         // The parent def id of a given use tree is always the enclosing item.\n         let parent = self.save_ctxt.tcx.hir.opt_local_def_id(id)"}, {"sha": "13a319d31bf0663832e7a31140062168b409ede6", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -342,9 +342,7 @@ fn archive_config<'a>(sess: &'a Session,\n fn emit_metadata<'a>(sess: &'a Session, trans: &CrateTranslation, tmpdir: &TempDir)\n                      -> PathBuf {\n     let out_filename = tmpdir.path().join(METADATA_FILENAME);\n-    let result = fs::File::create(&out_filename).and_then(|mut f| {\n-        f.write_all(&trans.metadata.raw_data)\n-    });\n+    let result = fs::write(&out_filename, &trans.metadata.raw_data);\n \n     if let Err(e) = result {\n         sess.fatal(&format!(\"failed to write {}: {}\", out_filename.display(), e));"}, {"sha": "1ee04a46243a264f1e73aa7e2149e47ddf58e5fa", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -46,9 +46,8 @@ use rustc_demangle;\n \n use std::any::Any;\n use std::ffi::{CString, CStr};\n-use std::fs::{self, File};\n-use std::io;\n-use std::io::{Read, Write};\n+use std::fs;\n+use std::io::{self, Write};\n use std::mem;\n use std::path::{Path, PathBuf};\n use std::str;\n@@ -666,7 +665,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n         timeline.record(\"make-bc\");\n \n         if write_bc {\n-            if let Err(e) = File::create(&bc_out).and_then(|mut f| f.write_all(data)) {\n+            if let Err(e) = fs::write(&bc_out, data) {\n                 diag_handler.err(&format!(\"failed to write bytecode: {}\", e));\n             }\n             timeline.record(\"write-bc\");\n@@ -675,7 +674,7 @@ unsafe fn codegen(cgcx: &CodegenContext,\n         if config.emit_bc_compressed {\n             let dst = bc_out.with_extension(RLIB_BYTECODE_EXTENSION);\n             let data = bytecode::encode(&mtrans.llmod_id, data);\n-            if let Err(e) = File::create(&dst).and_then(|mut f| f.write_all(&data)) {\n+            if let Err(e) = fs::write(&dst, data) {\n                 diag_handler.err(&format!(\"failed to write bytecode: {}\", e));\n             }\n             timeline.record(\"compress-bc\");\n@@ -799,9 +798,7 @@ fn binaryen_assemble(cgcx: &CodegenContext,\n                      object: &Path) {\n     use rustc_binaryen::{Module, ModuleOptions};\n \n-    let input = File::open(&assembly).and_then(|mut f| {\n-        let mut contents = Vec::new();\n-        f.read_to_end(&mut contents)?;\n+    let input = fs::read(&assembly).and_then(|contents| {\n         Ok(CString::new(contents)?)\n     });\n     let mut options = ModuleOptions::new();\n@@ -818,7 +815,7 @@ fn binaryen_assemble(cgcx: &CodegenContext,\n             .map_err(|e| io::Error::new(io::ErrorKind::Other, e))\n     });\n     let err = assembled.and_then(|binary| {\n-        File::create(&object).and_then(|mut f| f.write_all(binary.data()))\n+        fs::write(&object, binary.data())\n     });\n     if let Err(e) = err {\n         handler.err(&format!(\"failed to run binaryen assembler: {}\", e));"}, {"sha": "ee08a7f1ec471c53bceaef2b6033e3e2cf8abdb5", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -22,6 +22,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(custom_attribute)]\n+#![feature(fs_read_write)]\n #![allow(unused_attributes)]\n #![feature(i128_type)]\n #![feature(i128)]"}, {"sha": "f8320330ad2652bd37518a8473f910beae480be8", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::fs::File;\n-use std::io::prelude::*;\n+use std::fs;\n use std::path::Path;\n use std::str;\n use html::markdown::{Markdown, RenderType};\n@@ -65,13 +64,13 @@ pub enum LoadStringError {\n \n pub fn load_string<P: AsRef<Path>>(file_path: P) -> Result<String, LoadStringError> {\n     let file_path = file_path.as_ref();\n-    let mut contents = vec![];\n-    let result = File::open(file_path)\n-                      .and_then(|mut f| f.read_to_end(&mut contents));\n-    if let Err(e) = result {\n-        eprintln!(\"error reading `{}`: {}\", file_path.display(), e);\n-        return Err(LoadStringError::ReadFail);\n-    }\n+    let contents = match fs::read(file_path) {\n+        Ok(bytes) => bytes,\n+        Err(e) => {\n+            eprintln!(\"error reading `{}`: {}\", file_path.display(), e);\n+            return Err(LoadStringError::ReadFail);\n+        }\n+    };\n     match str::from_utf8(&contents) {\n         Ok(s) => Ok(s.to_string()),\n         Err(_) => {"}, {"sha": "93a3035e06ace30ad2e616f06d90d96690d91cda", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -866,15 +866,8 @@ fn write_shared(cx: &Context,\n     write(cx.dst.join(\"main.css\"),\n           include_bytes!(\"static/styles/main.css\"))?;\n     if let Some(ref css) = cx.shared.css_file_extension {\n-        let mut content = String::new();\n-        let css = css.as_path();\n-        let mut f = try_err!(File::open(css), css);\n-\n-        try_err!(f.read_to_string(&mut content), css);\n-        let css = cx.dst.join(\"theme.css\");\n-        let css = css.as_path();\n-        let mut f = try_err!(File::create(css), css);\n-        try_err!(write!(f, \"{}\", &content), css);\n+        let out = cx.dst.join(\"theme.css\");\n+        try_err!(fs::copy(css, out), css);\n     }\n     write(cx.dst.join(\"normalize.css\"),\n           include_bytes!(\"static/normalize.css\"))?;\n@@ -1027,7 +1020,7 @@ fn render_sources(dst: &Path, scx: &mut SharedContext,\n /// Writes the entire contents of a string to a destination, not attempting to\n /// catch any errors.\n fn write(dst: PathBuf, contents: &[u8]) -> Result<(), Error> {\n-    Ok(try_err!(try_err!(File::create(&dst), &dst).write_all(contents), &dst))\n+    Ok(try_err!(fs::write(&dst, contents), &dst))\n }\n \n /// Takes a path to a source file and cleans the path to it. This canonicalizes\n@@ -1124,16 +1117,13 @@ impl<'a> SourceCollector<'a> {\n             return Ok(());\n         }\n \n-        let mut contents = Vec::new();\n-        File::open(&p).and_then(|mut f| f.read_to_end(&mut contents))?;\n-\n-        let contents = str::from_utf8(&contents).unwrap();\n+        let contents = fs::read_string(&p)?;\n \n         // Remove the utf-8 BOM if any\n         let contents = if contents.starts_with(\"\\u{feff}\") {\n             &contents[3..]\n         } else {\n-            contents\n+            &contents[..]\n         };\n \n         // Create the intermediate directories"}, {"sha": "3b43eafb849bdc10f3f69bbc27c2277fb1098ccd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -18,6 +18,7 @@\n #![feature(rustc_private)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(fs_read_write)]\n #![feature(libc)]\n #![feature(set_stdio)]\n #![feature(slice_patterns)]"}, {"sha": "a37a5e8ae820b90949aa81c3fe5daa3a2ea007c7", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -53,7 +53,7 @@\n //! terminator, so the buffer length is really `len+1` characters.\n //! Rust strings don't have a nul terminator; their length is always\n //! stored and does not need to be calculated. While in Rust\n-//! accessing a string's length is a O(1) operation (becasue the\n+//! accessing a string's length is a O(1) operation (because the\n //! length is stored); in C it is an O(length) operation because the\n //! length needs to be computed by scanning the string for the nul\n //! terminator."}, {"sha": "3959e8533be5fb2534b60789a3b3fc9da66801fd", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -36,7 +36,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// and platform-native string values, and in particular allowing a Rust string\n /// to be converted into an \"OS\" string with no cost if possible.\n ///\n-/// `OsString` is to [`OsStr`] as [`String`] is to [`&str`]: the former\n+/// `OsString` is to [`&OsStr`] as [`String`] is to [`&str`]: the former\n /// in each pair are owned strings; the latter are borrowed\n /// references.\n ///\n@@ -64,6 +64,7 @@ use sys_common::{AsInner, IntoInner, FromInner};\n /// the traits which `OsString` implements for conversions from/to native representations.\n ///\n /// [`OsStr`]: struct.OsStr.html\n+/// [`&OsStr`]: struct.OsStr.html\n /// [`From`]: ../convert/trait.From.html\n /// [`String`]: ../string/struct.String.html\n /// [`&str`]: ../primitive.str.html\n@@ -84,13 +85,15 @@ pub struct OsString {\n /// This type represents a borrowed reference to a string in the operating system's preferred\n /// representation.\n ///\n-/// `OsStr` is to [`OsString`] as [`String`] is to [`&str`]: the former in each pair are borrowed\n+/// `&OsStr` is to [`OsString`] as [`&str`] is to [`String`]: the former in each pair are borrowed\n /// references; the latter are owned strings.\n ///\n /// See the [module's toplevel documentation about conversions][conversions] for a discussion on\n /// the traits which `OsStr` implements for conversions from/to native representations.\n ///\n /// [`OsString`]: struct.OsString.html\n+/// [`&str`]: ../primitive.str.html\n+/// [`String`]: ../string/struct.String.html\n /// [conversions]: index.html#conversions\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct OsStr {"}, {"sha": "51cb9609120e36a5657aa5aa1f75d15979e54de7", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -211,6 +211,14 @@ pub struct DirBuilder {\n     recursive: bool,\n }\n \n+/// How large a buffer to pre-allocate before reading the entire file at `path`.\n+fn initial_buffer_size<P: AsRef<Path>>(path: P) -> usize {\n+    // Allocate one extra byte so the buffer doesn't need to grow before the\n+    // final `read` call at the end of the file.  Don't worry about `usize`\n+    // overflow because reading will fail regardless in that case.\n+    metadata(path).map(|m| m.len() as usize + 1).unwrap_or(0)\n+}\n+\n /// Read the entire contents of a file into a bytes vector.\n ///\n /// This is a convenience function for using [`File::open`] and [`read_to_end`]\n@@ -246,7 +254,7 @@ pub struct DirBuilder {\n /// ```\n #[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n-    let mut bytes = Vec::new();\n+    let mut bytes = Vec::with_capacity(initial_buffer_size(&path));\n     File::open(path)?.read_to_end(&mut bytes)?;\n     Ok(bytes)\n }\n@@ -287,7 +295,7 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// ```\n #[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n pub fn read_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n-    let mut string = String::new();\n+    let mut string = String::with_capacity(initial_buffer_size(&path));\n     File::open(path)?.read_to_string(&mut string)?;\n     Ok(string)\n }"}, {"sha": "e8297c20af34e0b9ddc9cf17af0d2a50c5a6d3ef", "filename": "src/libstd/path.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -576,6 +576,13 @@ impl<'a> AsRef<OsStr> for Component<'a> {\n     }\n }\n \n+#[stable(feature = \"path_component_asref\", since = \"1.24.0\")]\n+impl<'a> AsRef<Path> for Component<'a> {\n+    fn as_ref(&self) -> &Path {\n+        self.as_os_str().as_ref()\n+    }\n+}\n+\n /// An iterator over the [`Component`]s of a [`Path`].\n ///\n /// This `struct` is created by the [`components`] method on [`Path`]."}, {"sha": "2edf02efc477c2cf26a2b0a45c6f78d41528a785", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -36,7 +36,7 @@ use sys_common::rwlock as sys;\n /// required that `T` satisfies [`Send`] to be shared across threads and\n /// [`Sync`] to allow concurrent access through readers. The RAII guards\n /// returned from the locking methods implement [`Deref`][] (and [`DerefMut`]\n-/// for the `write` methods) to allow access to the contained of the lock.\n+/// for the `write` methods) to allow access to the content of the lock.\n ///\n /// # Poisoning\n ///"}, {"sha": "cb5bfb9176ec74b6f22825f9620e840249da8836", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -206,7 +206,7 @@ impl Duration {\n     ///\n     /// let duration = Duration::from_millis(5432);\n     /// assert_eq!(duration.as_secs(), 5);\n-    /// assert_eq!(duration.subsec_nanos(), 432_000_000);\n+    /// assert_eq!(duration.subsec_millis(), 432);\n     /// ```\n     #[unstable(feature = \"duration_extras\", issue = \"46507\")]\n     #[inline]\n@@ -226,7 +226,7 @@ impl Duration {\n     ///\n     /// let duration = Duration::from_micros(1_234_567);\n     /// assert_eq!(duration.as_secs(), 1);\n-    /// assert_eq!(duration.subsec_nanos(), 234_567_000);\n+    /// assert_eq!(duration.subsec_micros(), 234_567);\n     /// ```\n     #[unstable(feature = \"duration_extras\", issue = \"46507\")]\n     #[inline]"}, {"sha": "49035203150db146af8fa9b86f0640955f921d1d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -5894,10 +5894,14 @@ impl<'a> Parser<'a> {\n         if let Some(path) = Parser::submod_path_from_attr(outer_attrs, &self.directory.path) {\n             return Ok(ModulePathSuccess {\n                 directory_ownership: match path.file_name().and_then(|s| s.to_str()) {\n-                    Some(\"mod.rs\") => DirectoryOwnership::Owned { relative: None },\n-                    Some(_) => {\n-                        DirectoryOwnership::Owned { relative: Some(id) }\n-                    }\n+                    // All `#[path]` files are treated as though they are a `mod.rs` file.\n+                    // This means that `mod foo;` declarations inside `#[path]`-included\n+                    // files are siblings,\n+                    //\n+                    // Note that this will produce weirdness when a file named `foo.rs` is\n+                    // `#[path]` included and contains a `mod foo;` declaration.\n+                    // If you encounter this, it's your own darn fault :P\n+                    Some(_) => DirectoryOwnership::Owned { relative: None },\n                     _ => DirectoryOwnership::UnownedViaMod(true),\n                 },\n                 path,"}, {"sha": "ad04b6ab2b5599fbef1bea1f8ce8c5dffcb10cf0", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -286,12 +286,12 @@ impl TokenStream {\n         TokenStream::concat(result)\n     }\n \n-    fn first_tree(&self) -> Option<TokenTree> {\n+    fn first_tree_and_joint(&self) -> Option<(TokenTree, bool)> {\n         match self.kind {\n             TokenStreamKind::Empty => None,\n-            TokenStreamKind::Tree(ref tree) |\n-            TokenStreamKind::JointTree(ref tree) => Some(tree.clone()),\n-            TokenStreamKind::Stream(ref stream) => stream.first().unwrap().first_tree(),\n+            TokenStreamKind::Tree(ref tree) => Some((tree.clone(), false)),\n+            TokenStreamKind::JointTree(ref tree) => Some((tree.clone(), true)),\n+            TokenStreamKind::Stream(ref stream) => stream.first().unwrap().first_tree_and_joint(),\n         }\n     }\n \n@@ -315,12 +315,18 @@ impl TokenStreamBuilder {\n         let stream = stream.into();\n         let last_tree_if_joint = self.0.last().and_then(TokenStream::last_tree_if_joint);\n         if let Some(TokenTree::Token(last_span, last_tok)) = last_tree_if_joint {\n-            if let Some(TokenTree::Token(span, tok)) = stream.first_tree() {\n+            if let Some((TokenTree::Token(span, tok), is_joint)) = stream.first_tree_and_joint() {\n                 if let Some(glued_tok) = last_tok.glue(tok) {\n                     let last_stream = self.0.pop().unwrap();\n                     self.push_all_but_last_tree(&last_stream);\n                     let glued_span = last_span.to(span);\n-                    self.0.push(TokenTree::Token(glued_span, glued_tok).into());\n+                    let glued_tt = TokenTree::Token(glued_span, glued_tok);\n+                    let glued_tokenstream = if is_joint {\n+                        glued_tt.joint()\n+                    } else {\n+                        glued_tt.into()\n+                    };\n+                    self.0.push(glued_tokenstream);\n                     self.push_all_but_first_tree(&stream);\n                     return\n                 }\n@@ -669,4 +675,16 @@ mod tests {\n         assert_eq!(test1.is_empty(), false);\n         assert_eq!(test2.is_empty(), false);\n     }\n+\n+    #[test]\n+    fn test_dotdotdot() {\n+        let mut builder = TokenStreamBuilder::new();\n+        builder.push(TokenTree::Token(sp(0, 1), Token::Dot).joint());\n+        builder.push(TokenTree::Token(sp(1, 2), Token::Dot).joint());\n+        builder.push(TokenTree::Token(sp(2, 3), Token::Dot));\n+        let stream = builder.build();\n+        assert!(stream.eq_unspanned(&string_to_ts(\"...\")));\n+        assert_eq!(stream.trees().count(), 1);\n+    }\n+\n }"}, {"sha": "f7880d3c4d854f7afaa8018a9b949e32003cbae6", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -36,14 +36,14 @@\n \n #![feature(asm)]\n #![feature(fnbox)]\n-#![cfg_attr(unix, feature(libc))]\n+#![cfg_attr(any(unix, target_os = \"cloudabi\"), feature(libc))]\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n \n extern crate getopts;\n extern crate term;\n-#[cfg(unix)]\n+#[cfg(any(unix, target_os = \"cloudabi\"))]\n extern crate libc;\n extern crate panic_unwind;\n \n@@ -1191,13 +1191,14 @@ fn get_concurrency() -> usize {\n         1\n     }\n \n-    #[cfg(any(target_os = \"linux\",\n-              target_os = \"macos\",\n-              target_os = \"ios\",\n-              target_os = \"android\",\n-              target_os = \"solaris\",\n+    #[cfg(any(target_os = \"android\",\n+              target_os = \"cloudabi\",\n               target_os = \"emscripten\",\n-              target_os = \"fuchsia\"))]\n+              target_os = \"fuchsia\",\n+              target_os = \"ios\",\n+              target_os = \"linux\",\n+              target_os = \"macos\",\n+              target_os = \"solaris\"))]\n     fn num_cpus() -> usize {\n         unsafe { libc::sysconf(libc::_SC_NPROCESSORS_ONLN) as usize }\n     }"}, {"sha": "404465e6a0fa78c98e5e0a0e69cb3c7c8cc45c33", "filename": "src/test/compile-fail/issue-39687.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fcompile-fail%2Fissue-39687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fcompile-fail%2Fissue-39687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39687.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(fn_traits)]\n+\n+fn main() {\n+    <fn() as Fn()>::call;\n+    //~^ ERROR associated type bindings are not allowed here [E0229]\n+}"}, {"sha": "fb419d751b4e82c6391b921842158ed60ec42263", "filename": "src/test/compile-fail/issue-43105.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fcompile-fail%2Fissue-43105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fcompile-fail%2Fissue-43105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43105.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn xyz() -> u8 { 42 }\n+\n+const NUM: u8 = xyz();\n+//~^ ERROR calls in constants are limited to constant functions, struct and enum constructors\n+\n+fn main() {\n+    match 1 {\n+        NUM => unimplemented!(),\n+        _ => unimplemented!(),\n+    }\n+}"}, {"sha": "e22eb7e4484d6f58fdf6b1b8d9ba84e3e3f6f10c", "filename": "src/test/compile-fail/static-drop-scope.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-drop-scope.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(const_fn)]\n+\n struct WithDtor;\n \n impl Drop for WithDtor {\n@@ -28,4 +30,12 @@ static EARLY_DROP_S: i32 = (WithDtor, 0).1;\n const EARLY_DROP_C: i32 = (WithDtor, 0).1;\n //~^ ERROR destructors cannot be evaluated at compile-time\n \n+const fn const_drop<T>(_: T) {}\n+//~^ ERROR destructors cannot be evaluated at compile-time\n+\n+const fn const_drop2<T>(x: T) {\n+    (x, ()).1\n+    //~^ ERROR destructors cannot be evaluated at compile-time\n+}\n+\n fn main () {}"}, {"sha": "5f1577ab44dc52c0d57bbc8934035b509b0a6162", "filename": "src/test/run-make/linker-output-non-utf8/Makefile", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-make%2Flinker-output-non-utf8%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-make%2Flinker-output-non-utf8%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Flinker-output-non-utf8%2FMakefile?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -2,15 +2,16 @@\n \n # Make sure we don't ICE if the linker prints a non-UTF-8 error message.\n \n-ifdef IS_WINDOWS\n-# ignore windows\n+# Ignore Windows and Apple\n \n # This does not work in its current form on windows, possibly due to\n # gcc bugs or something about valid Windows paths.  See issue #29151\n # for more information.\n-all:\n+ifndef IS_WINDOWS\n \n-else\n+# This also does not work on Apple APFS due to the filesystem requiring\n+# valid UTF-8 paths.\n+ifneq ($(shell uname),Darwin)\n \n # The zzz it to allow humans to tab complete or glob this thing.\n bad_dir := $(TMPDIR)/zzz$$'\\xff'\n@@ -20,5 +21,12 @@ all:\n \tmkdir $(bad_dir)\n \tmv $(TMPDIR)/liblibrary.a $(bad_dir)\n \tLIBRARY_PATH=$(bad_dir) $(RUSTC) exec.rs 2>&1 | $(CGREP) this_symbol_not_defined\n+else\n+all:\n+\n+endif\n+\n+else\n+all:\n \n endif"}, {"sha": "aca100591ddeca54a0fce560cdaa95c8f9ddeae0", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 14, "deletions": 47, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -15,7 +15,9 @@\n            universal_impl_trait,\n            fn_traits,\n            step_trait,\n-           unboxed_closures\n+           unboxed_closures,\n+           copy_closures,\n+           clone_closures\n )]\n \n //! Derived from: <https://raw.githubusercontent.com/quickfur/dcal/master/dcal.d>.\n@@ -234,54 +236,22 @@ impl Weekday {\n     }\n }\n \n-/// Wrapper for zero-sized closures.\n-// HACK(eddyb) Only needed because closures can't implement Copy.\n-struct Fn0<F>(std::marker::PhantomData<F>);\n-\n-impl<F> Copy for Fn0<F> {}\n-impl<F> Clone for Fn0<F> {\n-    fn clone(&self) -> Self { *self }\n-}\n-\n-impl<F: FnOnce<A>, A> FnOnce<A> for Fn0<F> {\n-    type Output = F::Output;\n-\n-    extern \"rust-call\" fn call_once(self, args: A) -> Self::Output {\n-        let f = unsafe { std::mem::uninitialized::<F>() };\n-        f.call_once(args)\n-    }\n-}\n-\n-impl<F: FnMut<A>, A> FnMut<A> for Fn0<F> {\n-    extern \"rust-call\" fn call_mut(&mut self, args: A) -> Self::Output {\n-        let mut f = unsafe { std::mem::uninitialized::<F>() };\n-        f.call_mut(args)\n-    }\n-}\n-\n-trait AsFn0<A>: Sized {\n-    fn copyable(self) -> Fn0<Self>;\n-}\n-\n-impl<F: FnMut<A>, A> AsFn0<A> for F {\n-    fn copyable(self) -> Fn0<Self> {\n-        assert_eq!(std::mem::size_of::<F>(), 0);\n-        Fn0(std::marker::PhantomData)\n-    }\n-}\n-\n /// GroupBy implementation.\n struct GroupBy<It: Iterator, F> {\n     it: std::iter::Peekable<It>,\n     f: F,\n }\n \n impl<It, F> Clone for GroupBy<It, F>\n-where It: Iterator + Clone, It::Item: Clone, F: Clone {\n-    fn clone(&self) -> GroupBy<It, F> {\n+where\n+    It: Iterator + Clone,\n+    It::Item: Clone,\n+    F: Clone,\n+{\n+    fn clone(&self) -> Self {\n         GroupBy {\n             it: self.it.clone(),\n-            f: self.f.clone()\n+            f: self.f.clone(),\n         }\n     }\n }\n@@ -331,14 +301,11 @@ impl<It: Iterator, F: FnMut(&It::Item) -> G, G: Eq> Iterator for InGroup<It, F,\n }\n \n trait IteratorExt: Iterator + Sized {\n-    fn group_by<G, F>(self, f: F) -> GroupBy<Self, Fn0<F>>\n-    where F: FnMut(&Self::Item) -> G,\n+    fn group_by<G, F>(self, f: F) -> GroupBy<Self, F>\n+    where F: Clone + FnMut(&Self::Item) -> G,\n           G: Eq\n     {\n-        GroupBy {\n-            it: self.peekable(),\n-            f: f.copyable(),\n-        }\n+        GroupBy { it: self.peekable(), f }\n     }\n \n     fn join(mut self, sep: &str) -> String\n@@ -382,7 +349,7 @@ fn test_spaces() {\n fn dates_in_year(year: i32) -> impl Iterator<Item=NaiveDate>+Clone {\n     InGroup {\n         it: NaiveDate::from_ymd(year, 1, 1)..,\n-        f: (|d: &NaiveDate| d.year()).copyable(),\n+        f: |d: &NaiveDate| d.year(),\n         g: year\n     }\n }"}, {"sha": "faf983f6ecb1c0cf2b3fa294f657295a6b1cc93f", "filename": "src/test/run-pass/issue-36792.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fissue-36792.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fissue-36792.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-36792.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(conservative_impl_trait)]\n+fn foo() -> impl Copy {\n+    foo\n+}\n+fn main() {\n+    foo();\n+}"}, {"sha": "34050242f84fa0a6fc3a083f465ea0a0cd77c95f", "filename": "src/test/run-pass/issue-38091.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fissue-38091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fissue-38091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-38091.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(specialization)]\n+\n+trait Iterate<'a> {\n+    type Ty: Valid;\n+    fn iterate(self);\n+}\n+impl<'a, T> Iterate<'a> for T where T: Check {\n+    default type Ty = ();\n+    default fn iterate(self) {}\n+}\n+\n+trait Check {}\n+impl<'a, T> Check for T where <T as Iterate<'a>>::Ty: Valid {}\n+\n+trait Valid {}\n+\n+fn main() {\n+    Iterate::iterate(0);\n+}"}, {"sha": "0196649a3f6243028422396bb2bc8043b1009c95", "filename": "src/test/run-pass/issue-42148.rs", "status": "renamed", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fissue-42148.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fissue-42148.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-42148.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,9 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: mod statements in non-mod.rs files are unstable\n+struct Zst;\n \n-#[path=\"mod_file_not_owning_aux3.rs\"]\n-mod foo;\n-\n-fn main() {}\n+fn main() {\n+    unsafe { ::std::ptr::write_volatile(1 as *mut Zst, Zst) }\n+}", "previous_filename": "src/test/compile-fail/directory_ownership/backcompat-warnings.rs"}, {"sha": "9bda6ee4bcb56ef54b51eec5b1bbca562c9ecf37", "filename": "src/test/run-pass/issue-42956.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fissue-42956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fissue-42956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-42956.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(associated_consts)]\n+\n+impl A for i32 {\n+    type Foo = u32;\n+}\n+impl B for u32 {\n+    const BAR: i32 = 0;\n+}\n+\n+trait A {\n+    type Foo: B;\n+}\n+\n+trait B {\n+    const BAR: i32;\n+}\n+\n+fn generic<T: A>() {\n+    // This panics if the universal function call syntax is used as well\n+    println!(\"{}\", T::Foo::BAR);\n+}\n+\n+fn main() {}"}, {"sha": "b61667cfd882ce02e3a44b5141adea3352a211f1", "filename": "src/test/run-pass/non_modrs_mods/some_crazy_attr_mod_dir/inner_modrs_mod/innest.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Finnest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Finnest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Finnest.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "previous_filename": "src/test/run-pass/non_modrs_mods/some_crazy_attr_mod_dir/attr_mod/inner_modrs_mod/innest.rs"}, {"sha": "77cab972352bd77d0554c07da2fea4dda04fe76a", "filename": "src/test/run-pass/non_modrs_mods/some_crazy_attr_mod_dir/inner_modrs_mod/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Frun-pass%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Fmod.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "previous_filename": "src/test/run-pass/non_modrs_mods/some_crazy_attr_mod_dir/attr_mod/inner_modrs_mod/mod.rs"}, {"sha": "95a2539ed646d1128de79316d0877e4b0922c131", "filename": "src/test/ui/non_modrs_mods/non_modrs_mods.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.stderr?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -34,14 +34,5 @@ error: mod statements in non-mod.rs files are unstable (see issue #44660)\n    = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n    = help: on stable builds, rename this file to inner_foors_mod/mod.rs\n \n-error: mod statements in non-mod.rs files are unstable (see issue #44660)\n-  --> $DIR/some_crazy_attr_mod_dir/arbitrary_name.rs:11:9\n-   |\n-11 | pub mod inner_modrs_mod;\n-   |         ^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n-   = help: on stable builds, rename this file to attr_mod/mod.rs\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}, {"sha": "b61667cfd882ce02e3a44b5141adea3352a211f1", "filename": "src/test/ui/non_modrs_mods/some_crazy_attr_mod_dir/inner_modrs_mod/innest.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Finnest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Finnest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Finnest.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "previous_filename": "src/test/ui/non_modrs_mods/some_crazy_attr_mod_dir/attr_mod/inner_modrs_mod/innest.rs"}, {"sha": "77cab972352bd77d0554c07da2fea4dda04fe76a", "filename": "src/test/ui/non_modrs_mods/some_crazy_attr_mod_dir/inner_modrs_mod/mod.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fsome_crazy_attr_mod_dir%2Finner_modrs_mod%2Fmod.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "previous_filename": "src/test/ui/non_modrs_mods/some_crazy_attr_mod_dir/attr_mod/inner_modrs_mod/mod.rs"}, {"sha": "4113f8fd124c7090344189eb1d02176b827d772b", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -67,6 +67,7 @@ static TARGETS: &'static [&'static str] = &[\n     \"i386-apple-ios\",\n     \"i586-pc-windows-msvc\",\n     \"i586-unknown-linux-gnu\",\n+    \"i586-unknown-linux-musl\",\n     \"i686-apple-darwin\",\n     \"i686-linux-android\",\n     \"i686-pc-windows-gnu\","}, {"sha": "efbe5e32fcd277d93fca84de8e8fbaacf93c6c88", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 106, "deletions": 9, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b0b3734cbd0ca58c8be3512d53fce2d95f40dd/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=51b0b3734cbd0ca58c8be3512d53fce2d95f40dd", "patch": "@@ -21,6 +21,7 @@ use header::TestProps;\n use util::logv;\n use regex::Regex;\n \n+use std::collections::VecDeque;\n use std::collections::HashMap;\n use std::collections::HashSet;\n use std::env;\n@@ -48,6 +49,88 @@ pub fn dylib_env_var() -> &'static str {\n     }\n }\n \n+#[derive(Debug, PartialEq)]\n+pub enum DiffLine {\n+    Context(String),\n+    Expected(String),\n+    Resulting(String),\n+}\n+\n+#[derive(Debug, PartialEq)]\n+pub struct Mismatch {\n+    pub line_number: u32,\n+    pub lines: Vec<DiffLine>,\n+}\n+\n+impl Mismatch {\n+    fn new(line_number: u32) -> Mismatch {\n+        Mismatch {\n+            line_number: line_number,\n+            lines: Vec::new(),\n+        }\n+    }\n+}\n+\n+// Produces a diff between the expected output and actual output.\n+pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n+    let mut line_number = 1;\n+    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n+    let mut lines_since_mismatch = context_size + 1;\n+    let mut results = Vec::new();\n+    let mut mismatch = Mismatch::new(0);\n+\n+    for result in diff::lines(actual, expected) {\n+        match result {\n+            diff::Result::Left(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Right(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n+                line_number += 1;\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Both(str, _) => {\n+                if context_queue.len() >= context_size {\n+                    let _ = context_queue.pop_front();\n+                }\n+\n+                if lines_since_mismatch < context_size {\n+                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n+                } else if context_size > 0 {\n+                    context_queue.push_back(str);\n+                }\n+\n+                line_number += 1;\n+                lines_since_mismatch += 1;\n+            }\n+        }\n+    }\n+\n+    results.push(mismatch);\n+    results.remove(0);\n+\n+    results\n+}\n+\n pub fn run(config: Config, testpaths: &TestPaths) {\n     match &*config.target {\n         \"arm-linux-androideabi\" | \"armv7-linux-androideabi\" | \"aarch64-linux-android\" => {\n@@ -2720,15 +2803,29 @@ impl<'test> TestCx<'test> {\n             return 0;\n         }\n \n-        println!(\"normalized {}:\\n{}\\n\", kind, actual);\n-        println!(\"expected {}:\\n{}\\n\", kind, expected);\n-        println!(\"diff of {}:\\n\", kind);\n-\n-        for diff in diff::lines(expected, actual) {\n-            match diff {\n-                diff::Result::Left(l) => println!(\"-{}\", l),\n-                diff::Result::Both(l, _) => println!(\" {}\", l),\n-                diff::Result::Right(r) => println!(\"+{}\", r),\n+        if expected.is_empty() {\n+            println!(\"normalized {}:\\n{}\\n\", kind, actual);\n+        } else {\n+            println!(\"diff of {}:\\n\", kind);\n+            let diff_results = make_diff(expected, actual, 3);\n+            for result in diff_results {\n+                let mut line_number = result.line_number;\n+                for line in result.lines {\n+                    match line {\n+                        DiffLine::Expected(e) => {\n+                            println!(\"-\\t{}\", e);\n+                            line_number += 1;\n+                        },\n+                        DiffLine::Context(c) => {\n+                            println!(\"{}\\t{}\", line_number, c);\n+                            line_number += 1;\n+                        },\n+                        DiffLine::Resulting(r) => {\n+                            println!(\"+\\t{}\", r);\n+                        },\n+                    }\n+                }\n+                println!(\"\");\n             }\n         }\n "}]}