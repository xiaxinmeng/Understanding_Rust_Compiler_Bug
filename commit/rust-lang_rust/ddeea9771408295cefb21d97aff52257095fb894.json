{"sha": "ddeea9771408295cefb21d97aff52257095fb894", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkZWVhOTc3MTQwODI5NWNlZmIyMWQ5N2FmZjUyMjU3MDk1ZmI4OTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-17T12:53:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-17T12:53:31Z"}, "message": "Auto merge of #6750 - flip1995:lintcheck_options, r=matthiaskrgr\n\nLintcheck and an options for command line options\n\nMake it possible to add command line options to the clippy invocation of the lintcheck-tool\n\nchangelog: none\n\nr? `@matthiaskrgr`\n\nI found that this will be really helpful if we use a separate repository and want to maintain a all-lints-passing list of crates. See my early experimentation here: https://github.com/flip1995/clippy-lintcheck\n\n```\ngit submodule update --init\ncargo run -- --mode=all\n```\n\nWill run the lintcheck tool on all the specified crates in `config/` in that repository.", "tree": {"sha": "4bde855d60f135598a7040ac21b8040764c01782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bde855d60f135598a7040ac21b8040764c01782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddeea9771408295cefb21d97aff52257095fb894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddeea9771408295cefb21d97aff52257095fb894", "html_url": "https://github.com/rust-lang/rust/commit/ddeea9771408295cefb21d97aff52257095fb894", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddeea9771408295cefb21d97aff52257095fb894/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877be189ad6fa6a50f9fd295296c446892b4009d", "url": "https://api.github.com/repos/rust-lang/rust/commits/877be189ad6fa6a50f9fd295296c446892b4009d", "html_url": "https://github.com/rust-lang/rust/commit/877be189ad6fa6a50f9fd295296c446892b4009d"}, {"sha": "79d7f4ccb355ac5d3f6d1c18d84c8e76092d0e97", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d7f4ccb355ac5d3f6d1c18d84c8e76092d0e97", "html_url": "https://github.com/rust-lang/rust/commit/79d7f4ccb355ac5d3f6d1c18d84c8e76092d0e97"}], "stats": {"total": 163, "additions": 112, "deletions": 51}, "files": [{"sha": "a5ed9e27bd2bcba33b723d2c04f404f32f0fce3c", "filename": "clippy_dev/README.md", "status": "modified", "additions": 59, "deletions": 34, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ddeea9771408295cefb21d97aff52257095fb894/clippy_dev%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ddeea9771408295cefb21d97aff52257095fb894/clippy_dev%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FREADME.md?ref=ddeea9771408295cefb21d97aff52257095fb894", "patch": "@@ -1,52 +1,77 @@\n-# Clippy Dev Tool \n+# Clippy Dev Tool\n \n-The Clippy Dev Tool is a tool to ease Clippy development, similar to `rustc`s `x.py`.\n+The Clippy Dev Tool is a tool to ease Clippy development, similar to `rustc`s\n+`x.py`.\n \n Functionalities (incomplete):\n \n ## `lintcheck`\n-Runs clippy on a fixed set of crates read from `clippy_dev/lintcheck_crates.toml`\n-and saves logs of the lint warnings into the repo.\n-We can then check the diff and spot new or disappearing warnings.\n+\n+Runs clippy on a fixed set of crates read from\n+`clippy_dev/lintcheck_crates.toml` and saves logs of the lint warnings into the\n+repo.  We can then check the diff and spot new or disappearing warnings.\n \n From the repo root, run:\n-````\n+\n+```\n cargo run --target-dir clippy_dev/target --package clippy_dev \\\n --bin clippy_dev --manifest-path clippy_dev/Cargo.toml --features lintcheck -- lintcheck\n-````\n+```\n+\n or\n-````\n+\n+```\n cargo dev-lintcheck\n-````\n+```\n \n-By default the logs will be saved into `lintcheck-logs/lintcheck_crates_logs.txt`.\n+By default the logs will be saved into\n+`lintcheck-logs/lintcheck_crates_logs.txt`.\n \n-You can set a custom sources.toml by adding `--crates-toml custom.toml` or using `LINTCHECK_TOML=\"custom.toml\"`\n-where `custom.toml` must be a relative path from the repo root.\n+You can set a custom sources.toml by adding `--crates-toml custom.toml` or using\n+`LINTCHECK_TOML=\"custom.toml\"` where `custom.toml` must be a relative path from\n+the repo root.\n \n The results will then be saved to `lintcheck-logs/custom_logs.toml`.\n \n ### Configuring the Crate Sources\n \n-The sources to check are saved in a `toml` file.  \n-There are three types of sources.  \n-A crates-io source:\n-````toml\n-bitflags = {name = \"bitflags\", versions = ['1.2.1']}\n-````\n-Requires a \"name\" and one or multiple \"versions\" to be checked.\n-\n-A git source:\n-````toml\n-puffin = {name = \"puffin\", git_url = \"https://github.com/EmbarkStudios/puffin\", git_hash = \"02dd4a3\"}\n-````\n-Requires a name, the url to the repo and unique identifier of a commit,\n-branch or tag which is checked out before linting.  \n-There is no way to always check `HEAD` because that would lead to changing lint-results as the repo would get updated.  \n-If `git_url` or `git_hash` is missing, an error will be thrown.\n-\n-A local dependency:\n-````toml\n- clippy = {name = \"clippy\", path = \"/home/user/clippy\"}\n-````\n-For when you want to add a repository that is not published yet.  \n+The sources to check are saved in a `toml` file. There are three types of\n+sources.\n+\n+1. Crates-io Source\n+\n+   ```toml\n+   bitflags = {name = \"bitflags\", versions = ['1.2.1']}\n+   ```\n+   Requires a \"name\" and one or multiple \"versions\" to be checked.\n+\n+2. `git` Source\n+   ````toml\n+   puffin = {name = \"puffin\", git_url = \"https://github.com/EmbarkStudios/puffin\", git_hash = \"02dd4a3\"}\n+   ````\n+   Requires a name, the url to the repo and unique identifier of a commit,\n+   branch or tag which is checked out before linting.  There is no way to always\n+   check `HEAD` because that would lead to changing lint-results as the repo\n+   would get updated.  If `git_url` or `git_hash` is missing, an error will be\n+   thrown.\n+\n+3. Local Dependency\n+   ```toml\n+   clippy = {name = \"clippy\", path = \"/home/user/clippy\"}\n+   ```\n+   For when you want to add a repository that is not published yet.\n+\n+#### Command Line Options (optional)\n+\n+```toml\n+bitflags = {name = \"bitflags\", versions = ['1.2.1'], options = ['-Wclippy::pedantic', '-Wclippy::cargo']}\n+```\n+\n+It is possible to specify command line options for each crate. This makes it\n+possible to only check a crate for certain lint groups. If no options are\n+specified, the lint groups `clippy::all`, `clippy::pedantic`, and\n+`clippy::cargo` are checked. If an empty array is specified only `clippy::all`\n+is checked.\n+\n+**Note:** `-Wclippy::all` is always enabled by default, unless `-Aclippy::all`\n+is explicitly specified in the options."}, {"sha": "cd3dd8143d55753b8433d25f83accbc48ec8b617", "filename": "clippy_dev/src/lintcheck.rs", "status": "modified", "additions": 53, "deletions": 17, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ddeea9771408295cefb21d97aff52257095fb894/clippy_dev%2Fsrc%2Flintcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddeea9771408295cefb21d97aff52257095fb894/clippy_dev%2Fsrc%2Flintcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flintcheck.rs?ref=ddeea9771408295cefb21d97aff52257095fb894", "patch": "@@ -32,15 +32,29 @@ struct TomlCrate {\n     git_url: Option<String>,\n     git_hash: Option<String>,\n     path: Option<String>,\n+    options: Option<Vec<String>>,\n }\n \n /// Represents an archive we download from crates.io, or a git repo, or a local repo/folder\n /// Once processed (downloaded/extracted/cloned/copied...), this will be translated into a `Crate`\n #[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n enum CrateSource {\n-    CratesIo { name: String, version: String },\n-    Git { name: String, url: String, commit: String },\n-    Path { name: String, path: PathBuf },\n+    CratesIo {\n+        name: String,\n+        version: String,\n+        options: Option<Vec<String>>,\n+    },\n+    Git {\n+        name: String,\n+        url: String,\n+        commit: String,\n+        options: Option<Vec<String>>,\n+    },\n+    Path {\n+        name: String,\n+        path: PathBuf,\n+        options: Option<Vec<String>>,\n+    },\n }\n \n /// Represents the actual source code of a crate that we ran \"cargo clippy\" on\n@@ -50,6 +64,7 @@ struct Crate {\n     name: String,\n     // path to the extracted sources that clippy can check\n     path: PathBuf,\n+    options: Option<Vec<String>>,\n }\n \n /// A single warning that clippy issued while checking a `Crate`\n@@ -81,7 +96,7 @@ impl CrateSource {\n     /// copies a local folder\n     fn download_and_extract(&self) -> Crate {\n         match self {\n-            CrateSource::CratesIo { name, version } => {\n+            CrateSource::CratesIo { name, version, options } => {\n                 let extract_dir = PathBuf::from(\"target/lintcheck/crates\");\n                 let krate_download_dir = PathBuf::from(\"target/lintcheck/downloads\");\n \n@@ -113,9 +128,15 @@ impl CrateSource {\n                     version: version.clone(),\n                     name: name.clone(),\n                     path: extract_dir.join(format!(\"{}-{}/\", name, version)),\n+                    options: options.clone(),\n                 }\n             },\n-            CrateSource::Git { name, url, commit } => {\n+            CrateSource::Git {\n+                name,\n+                url,\n+                commit,\n+                options,\n+            } => {\n                 let repo_path = {\n                     let mut repo_path = PathBuf::from(\"target/lintcheck/crates\");\n                     // add a -git suffix in case we have the same crate from crates.io and a git repo\n@@ -152,9 +173,10 @@ impl CrateSource {\n                     version: commit.clone(),\n                     name: name.clone(),\n                     path: repo_path,\n+                    options: options.clone(),\n                 }\n             },\n-            CrateSource::Path { name, path } => {\n+            CrateSource::Path { name, path, options } => {\n                 use fs_extra::dir;\n \n                 // simply copy the entire directory into our target dir\n@@ -183,6 +205,7 @@ impl CrateSource {\n                     version: String::from(\"local\"),\n                     name: name.clone(),\n                     path: crate_root,\n+                    options: options.clone(),\n                 }\n             },\n         }\n@@ -198,18 +221,21 @@ impl Crate {\n \n         let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir/\");\n \n+        let mut args = vec![\"--\", \"--message-format=json\", \"--\", \"--cap-lints=warn\"];\n+\n+        if let Some(options) = &self.options {\n+            for opt in options {\n+                args.push(opt);\n+            }\n+        } else {\n+            args.extend(&[\"-Wclippy::pedantic\", \"-Wclippy::cargo\"])\n+        }\n+\n         let all_output = std::process::Command::new(&cargo_clippy_path)\n             .env(\"CARGO_TARGET_DIR\", shared_target_dir)\n             // lint warnings will look like this:\n             // src/cargo/ops/cargo_compile.rs:127:35: warning: usage of `FromIterator::from_iter`\n-            .args(&[\n-                \"--\",\n-                \"--message-format=json\",\n-                \"--\",\n-                \"--cap-lints=warn\",\n-                \"-Wclippy::pedantic\",\n-                \"-Wclippy::cargo\",\n-            ])\n+            .args(&args)\n             .current_dir(&self.path)\n             .output()\n             .unwrap_or_else(|error| {\n@@ -257,10 +283,14 @@ fn filter_clippy_warnings(line: &str) -> bool {\n \n /// Builds clippy inside the repo to make sure we have a clippy executable we can use.\n fn build_clippy() {\n-    Command::new(\"cargo\")\n+    let output = Command::new(\"cargo\")\n         .arg(\"build\")\n         .output()\n         .expect(\"Failed to build clippy!\");\n+    if !output.status.success() {\n+        eprintln!(\"Failed to compile Clippy\");\n+        eprintln!(\"stderr: {}\", String::from_utf8_lossy(&output.stderr))\n+    }\n }\n \n /// Read a `toml` file and return a list of `CrateSources` that we want to check with clippy\n@@ -289,6 +319,7 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n             crate_sources.push(CrateSource::Path {\n                 name: tk.name.clone(),\n                 path: PathBuf::from(path),\n+                options: tk.options.clone(),\n             });\n         }\n \n@@ -298,6 +329,7 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n                 crate_sources.push(CrateSource::CratesIo {\n                     name: tk.name.clone(),\n                     version: ver.to_string(),\n+                    options: tk.options.clone(),\n                 });\n             })\n         }\n@@ -307,6 +339,7 @@ fn read_crates(toml_path: Option<&str>) -> (String, Vec<CrateSource>) {\n                 name: tk.name.clone(),\n                 url: tk.git_url.clone().unwrap(),\n                 commit: tk.git_hash.clone().unwrap(),\n+                options: tk.options.clone(),\n             });\n         }\n         // if we have a version as well as a git data OR only one git data, something is funky\n@@ -373,12 +406,14 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> String {\n \n /// lintchecks `main()` function\n pub fn run(clap_config: &ArgMatches) {\n-    let cargo_clippy_path: PathBuf = PathBuf::from(\"target/debug/cargo-clippy\");\n-\n     println!(\"Compiling clippy...\");\n     build_clippy();\n     println!(\"Done compiling\");\n \n+    let cargo_clippy_path: PathBuf = PathBuf::from(\"target/debug/cargo-clippy\")\n+        .canonicalize()\n+        .expect(\"failed to canonicalize path to clippy binary\");\n+\n     // assert that clippy is found\n     assert!(\n         cargo_clippy_path.is_file(),\n@@ -455,5 +490,6 @@ pub fn run(clap_config: &ArgMatches) {\n         .for_each(|(cratename, msg)| text.push_str(&format!(\"{}: '{}'\", cratename, msg)));\n \n     let file = format!(\"lintcheck-logs/{}_logs.txt\", filename);\n+    println!(\"Writing logs to {}\", file);\n     write(file, text).unwrap();\n }"}]}