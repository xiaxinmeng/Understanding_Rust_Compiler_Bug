{"sha": "72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYTJkMzVmMTY1YTk0ZTE3Y2QxN2U1NmNiNjFlM2RjYmVmN2ViMmQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T12:57:16Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-20T12:57:16Z"}, "message": "fix is_const_context", "tree": {"sha": "88084fdb944bd837fbb7ea62f58588fcb4afcf65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88084fdb944bd837fbb7ea62f58588fcb4afcf65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "html_url": "https://github.com/rust-lang/rust/commit/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "672b272077561ca7b5027a8aff9ea2957c7d4c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/672b272077561ca7b5027a8aff9ea2957c7d4c21", "html_url": "https://github.com/rust-lang/rust/commit/672b272077561ca7b5027a8aff9ea2957c7d4c21"}], "stats": {"total": 97, "additions": 12, "deletions": 85}, "files": [{"sha": "c5f0acb3f07096138f51a0c06d67cdf4ef5f6baa", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "patch": "@@ -374,6 +374,16 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    pub fn enclosing_body_owner(&self, hir_id: HirId) -> HirId {\n+        for (parent, _) in self.parent_iter(hir_id) {\n+            if let Some(body) = self.maybe_body_owned_by(parent) {\n+                return self.body_owner(body);\n+            }\n+        }\n+\n+        bug!(\"no `enclosing_body_owner` for hir_id `{}`\", hir_id);\n+    }\n+\n     /// Returns the `HirId` that corresponds to the definition of\n     /// which this is the body of, i.e., a `fn`, `const` or `static`\n     /// item (possibly associated), a closure, or a `hir::AnonConst`.\n@@ -577,17 +587,7 @@ impl<'hir> Map<'hir> {\n     /// Whether the expression pointed at by `hir_id` belongs to a `const` evaluation context.\n     /// Used exclusively for diagnostics, to avoid suggestion function calls.\n     pub fn is_const_context(&self, hir_id: HirId) -> bool {\n-        let parent_id = self.get_parent_item(hir_id);\n-        match self.get(parent_id) {\n-            Node::Item(&Item { kind: ItemKind::Const(..) | ItemKind::Static(..), .. })\n-            | Node::TraitItem(&TraitItem { kind: TraitItemKind::Const(..), .. })\n-            | Node::ImplItem(&ImplItem { kind: ImplItemKind::Const(..), .. })\n-            | Node::AnonConst(_) => true,\n-            Node::Item(&Item { kind: ItemKind::Fn(ref sig, ..), .. }) => {\n-                sig.header.constness == Constness::Const\n-            }\n-            _ => false,\n-        }\n+        self.body_const_context(self.local_def_id(self.enclosing_body_owner(hir_id))).is_some()\n     }\n \n     /// Whether `hir_id` corresponds to a `mod` or a crate."}, {"sha": "ff90748a9d07e45dc59255daafafa54952b45383", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "patch": "@@ -495,7 +495,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let closure_id = hir.as_local_hir_id(self.mir_def_id.expect_local());\n         let fn_call_id = hir.get_parent_node(closure_id);\n         let node = hir.get(fn_call_id);\n-        let item_id = hir.get_parent_item(fn_call_id);\n+        let item_id = hir.enclosing_body_owner(fn_call_id);\n         let mut look_at_return = true;\n         // If we can detect the expression to be an `fn` call where the closure was an argument,\n         // we point at the `fn` definition argument..."}, {"sha": "9834a99b79a0e019527cbe34c9aab39a3abeb477", "filename": "src/test/ui/consts/enum-discr-type-err.stderr", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fenum-discr-type-err.stderr?ref=72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "patch": "@@ -11,10 +11,6 @@ LL | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n-   |\n-LL |             $( $v = $s::V.try_into().unwrap(), )*\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/enum-discr-type-err.rs:18:21\n@@ -29,10 +25,6 @@ LL | | }\n    | |_- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n-   |\n-LL |             $( $v = $s::V.try_into().unwrap(), )*\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b0e11ee5a6e60e8d191a912380adce87736b52bb", "filename": "src/test/ui/discrim/discrim-ill-typed.stderr", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdiscrim%2Fdiscrim-ill-typed.stderr?ref=72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "patch": "@@ -3,88 +3,48 @@ error[E0308]: mismatched types\n    |\n LL |         OhNo = 0_u8,\n    |                ^^^^ expected `i8`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `i8`\n-   |\n-LL |         OhNo = 0_i8,\n-   |                ^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:30:16\n    |\n LL |         OhNo = 0_i8,\n    |                ^^^^ expected `u8`, found `i8`\n-   |\n-help: change the type of the numeric literal from `i8` to `u8`\n-   |\n-LL |         OhNo = 0_u8,\n-   |                ^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:43:16\n    |\n LL |         OhNo = 0_u16,\n    |                ^^^^^ expected `i16`, found `u16`\n-   |\n-help: change the type of the numeric literal from `u16` to `i16`\n-   |\n-LL |         OhNo = 0_i16,\n-   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:56:16\n    |\n LL |         OhNo = 0_i16,\n    |                ^^^^^ expected `u16`, found `i16`\n-   |\n-help: change the type of the numeric literal from `i16` to `u16`\n-   |\n-LL |         OhNo = 0_u16,\n-   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:69:16\n    |\n LL |         OhNo = 0_u32,\n    |                ^^^^^ expected `i32`, found `u32`\n-   |\n-help: change the type of the numeric literal from `u32` to `i32`\n-   |\n-LL |         OhNo = 0_i32,\n-   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:82:16\n    |\n LL |         OhNo = 0_i32,\n    |                ^^^^^ expected `u32`, found `i32`\n-   |\n-help: change the type of the numeric literal from `i32` to `u32`\n-   |\n-LL |         OhNo = 0_u32,\n-   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:95:16\n    |\n LL |         OhNo = 0_u64,\n    |                ^^^^^ expected `i64`, found `u64`\n-   |\n-help: change the type of the numeric literal from `u64` to `i64`\n-   |\n-LL |         OhNo = 0_i64,\n-   |                ^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/discrim-ill-typed.rs:108:16\n    |\n LL |         OhNo = 0_i64,\n    |                ^^^^^ expected `u64`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `u64`\n-   |\n-LL |         OhNo = 0_u64,\n-   |                ^^^^^\n \n error: aborting due to 8 previous errors\n "}, {"sha": "2603c944207d0ce6f83221725b85a6e9ca08d790", "filename": "src/test/ui/issues/issue-31910.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31910.stderr?ref=72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "patch": "@@ -3,11 +3,6 @@ error[E0308]: mismatched types\n    |\n LL |     X = Trait::Number,\n    |         ^^^^^^^^^^^^^ expected `isize`, found `i32`\n-   |\n-help: you can convert an `i32` to `isize` and panic if the converted value wouldn't fit\n-   |\n-LL |     X = Trait::Number.try_into().unwrap(),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6ab74a9e98940e22ca16c6fcd0feb310ae97ffea", "filename": "src/test/ui/issues/issue-8761.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8761.stderr?ref=72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "patch": "@@ -3,22 +3,12 @@ error[E0308]: mismatched types\n    |\n LL |     A = 1i64,\n    |         ^^^^ expected `isize`, found `i64`\n-   |\n-help: change the type of the numeric literal from `i64` to `isize`\n-   |\n-LL |     A = 1isize,\n-   |         ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-8761.rs:5:9\n    |\n LL |     B = 2u8\n    |         ^^^ expected `isize`, found `u8`\n-   |\n-help: change the type of the numeric literal from `u8` to `isize`\n-   |\n-LL |     B = 2isize\n-   |         ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "963319892d4ca73faac240baedd9dcf5cae3862b", "filename": "src/test/ui/repeat_count.stderr", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d/src%2Ftest%2Fui%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat_count.stderr?ref=72a2d35f165a94e17cd17e56cb61e3dcbef7eb2d", "patch": "@@ -39,22 +39,12 @@ error[E0308]: mismatched types\n    |\n LL |     let f = [0; -4_isize];\n    |                 ^^^^^^^^ expected `usize`, found `isize`\n-   |\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n-   |\n-LL |     let f = [0; (-4_isize).try_into().unwrap()];\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:22:23\n    |\n LL |     let f = [0_usize; -1_isize];\n    |                       ^^^^^^^^ expected `usize`, found `isize`\n-   |\n-help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n-   |\n-LL |     let f = [0_usize; (-1_isize).try_into().unwrap()];\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 8 previous errors\n "}]}