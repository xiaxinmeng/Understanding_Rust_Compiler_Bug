{"sha": "3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxOTliMjQ3OGEyNmQ1YTUzZmFjMjVlZTE2ZjdjOWM0Y2NjNjlkOWI=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-02-10T00:43:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-10T00:43:25Z"}, "message": "Rollup merge of #39705 - tspiteri:name-trait-fn-params, r=aturon\n\nname anonymous fn parameters in libcore traits\n\nThis follows the discussion in rust-lang/rfcs#1685. The patch gives names to anonymous parameters in libcore traits. It would have two benefits I can think of: firstly it would provide names to tools that can use the names from the traits, and secondly core/std can serve as an example when writing traits; this change helps by not encouraging the use of anonymous parameters.", "tree": {"sha": "7e4568a6ad9e53a1d013f796fbe21184cf872a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e4568a6ad9e53a1d013f796fbe21184cf872a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b", "html_url": "https://github.com/rust-lang/rust/commit/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af1ddb9ec583df5dfda727df45de332f65e79521", "url": "https://api.github.com/repos/rust-lang/rust/commits/af1ddb9ec583df5dfda727df45de332f65e79521", "html_url": "https://github.com/rust-lang/rust/commit/af1ddb9ec583df5dfda727df45de332f65e79521"}, {"sha": "e626a6807c44d097996b0f32a4e03b105837f9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/e626a6807c44d097996b0f32a4e03b105837f9da", "html_url": "https://github.com/rust-lang/rust/commit/e626a6807c44d097996b0f32a4e03b105837f9da"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "6c48c29ecd1512fa3e013310b1c220a9e732d1a1", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b", "patch": "@@ -434,7 +434,7 @@ impl<'a> Display for Arguments<'a> {\n pub trait Debug {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for an empty format, `{}`.\n@@ -477,7 +477,7 @@ pub trait Debug {\n pub trait Display {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `o` character.\n@@ -524,7 +524,7 @@ pub trait Display {\n pub trait Octal {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `b` character.\n@@ -571,7 +571,7 @@ pub trait Octal {\n pub trait Binary {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `x` character.\n@@ -619,7 +619,7 @@ pub trait Binary {\n pub trait LowerHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `X` character.\n@@ -667,7 +667,7 @@ pub trait LowerHex {\n pub trait UpperHex {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `p` character.\n@@ -712,7 +712,7 @@ pub trait UpperHex {\n pub trait Pointer {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `e` character.\n@@ -755,7 +755,7 @@ pub trait Pointer {\n pub trait LowerExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// Format trait for the `E` character.\n@@ -798,7 +798,7 @@ pub trait LowerExp {\n pub trait UpperExp {\n     /// Formats the value using the given formatter.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fmt(&self, &mut Formatter) -> Result;\n+    fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n /// The `write` function takes an output stream, a precompiled format string,"}, {"sha": "59bcb340ec99a07accf078d53eb04d628ee5a275", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b", "patch": "@@ -1324,7 +1324,7 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n pub trait AddAssign<Rhs=Self> {\n     /// The method for the `+=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn add_assign(&mut self, Rhs);\n+    fn add_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! add_assign_impl {\n@@ -1380,7 +1380,7 @@ add_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait SubAssign<Rhs=Self> {\n     /// The method for the `-=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn sub_assign(&mut self, Rhs);\n+    fn sub_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! sub_assign_impl {\n@@ -1425,7 +1425,7 @@ sub_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait MulAssign<Rhs=Self> {\n     /// The method for the `*=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn mul_assign(&mut self, Rhs);\n+    fn mul_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! mul_assign_impl {\n@@ -1470,7 +1470,7 @@ mul_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait DivAssign<Rhs=Self> {\n     /// The method for the `/=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn div_assign(&mut self, Rhs);\n+    fn div_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! div_assign_impl {\n@@ -1514,7 +1514,7 @@ div_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait RemAssign<Rhs=Self> {\n     /// The method for the `%=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn rem_assign(&mut self, Rhs);\n+    fn rem_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! rem_assign_impl {\n@@ -1600,7 +1600,7 @@ rem_assign_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n pub trait BitAndAssign<Rhs=Self> {\n     /// The method for the `&=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn bitand_assign(&mut self, Rhs);\n+    fn bitand_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! bitand_assign_impl {\n@@ -1644,7 +1644,7 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n pub trait BitOrAssign<Rhs=Self> {\n     /// The method for the `|=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn bitor_assign(&mut self, Rhs);\n+    fn bitor_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! bitor_assign_impl {\n@@ -1688,7 +1688,7 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n pub trait BitXorAssign<Rhs=Self> {\n     /// The method for the `^=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn bitxor_assign(&mut self, Rhs);\n+    fn bitxor_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! bitxor_assign_impl {\n@@ -1732,7 +1732,7 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n pub trait ShlAssign<Rhs> {\n     /// The method for the `<<=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn shl_assign(&mut self, Rhs);\n+    fn shl_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! shl_assign_impl {\n@@ -1797,7 +1797,7 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n pub trait ShrAssign<Rhs=Self> {\n     /// The method for the `>>=` operator\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n-    fn shr_assign(&mut self, Rhs);\n+    fn shr_assign(&mut self, rhs: Rhs);\n }\n \n macro_rules! shr_assign_impl {"}, {"sha": "8493afe98bc5742b285c99bcd029af2b430ad42e", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=3199b2478a26d5a53fac25ee16f7c9c4ccc69d9b", "patch": "@@ -240,7 +240,7 @@ pub trait DoubleEndedSearcher<'a>: ReverseSearcher<'a> {}\n \n #[doc(hidden)]\n trait CharEq {\n-    fn matches(&mut self, char) -> bool;\n+    fn matches(&mut self, c: char) -> bool;\n     fn only_ascii(&self) -> bool;\n }\n \n@@ -1178,8 +1178,8 @@ impl TwoWaySearcher {\n trait TwoWayStrategy {\n     type Output;\n     fn use_early_reject() -> bool;\n-    fn rejecting(usize, usize) -> Self::Output;\n-    fn matching(usize, usize) -> Self::Output;\n+    fn rejecting(a: usize, b: usize) -> Self::Output;\n+    fn matching(a: usize, b: usize) -> Self::Output;\n }\n \n /// Skip to match intervals as quickly as possible"}]}