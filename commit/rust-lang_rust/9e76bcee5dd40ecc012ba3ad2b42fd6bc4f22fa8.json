{"sha": "9e76bcee5dd40ecc012ba3ad2b42fd6bc4f22fa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNzZiY2VlNWRkNDBlY2MwMTJiYTNhZDJiNDJmZDZiYzRmMjJmYTg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-22T00:17:26Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-29T15:10:21Z"}, "message": "Improve `matches` tests", "tree": {"sha": "bd9b52fc6dc4c5f385644c1383c5d2842f31c126", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd9b52fc6dc4c5f385644c1383c5d2842f31c126"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e76bcee5dd40ecc012ba3ad2b42fd6bc4f22fa8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXc+TdAAoJEF5CfHlMukXo9m0P/Ar+ZAa1YHuI0vuiVTrfkrhs\ngZWWRQ97ncco77gerX8b9/f7D9d7QDhmQoCPASSpHseaRBO8M26heXi0qaNve+dm\nm9FCQmntyfl1r3fsTfOMl+uTNAP/wcrin1naP4jfjTfmdndQebudrqOFVoqTwvJ3\neotS6LDUN324xEzu6r0sGQ8Rzg2oGwE4f6U0xcv8pRmnYQsBbCbj7UQarn26JLAp\nf/TvV6MnsMzbBYfsr8QuQTkIRn9oQNb2eS2gSKH05nkA+YY/yjszknFcuna1UtfQ\nnfpTiRJw8g8BQfMy9qwZdD5dutbC3jhWbhNzII6dizKTyA7WGtytdmgc3jlW6Z2P\nHLtCr+ZBm0sx4+7zuzMmPCQjDAk1UiuvTEmxoKlawNyQtAfrgEpb88BL5p8v6/3Z\n+G0pnhk12bbmp2jR9PFrjgYRxRhR5KIbRAcTyVpNhcc0L5NGmNKwIT5Bfz12hwG5\n/xeRr54gr6cjm6fXglpaQ+7JjBHpgLLL/GKdJOO4AdGStB74aXjkQUvc+bR7OYp0\nItFchgrjyTj7Nrhp5OKRXolPcDsmc3FfItoFCOLk+KfgKer9hCsbB/rMCkZYWOuS\nHKVBtctGdNBEjNHXMzAa/ywme9mQOG/7cdC3uZCQt1DFukzNmyg1xVmv2445h3cs\na3M6wdunIYYfU/oJ1J6v\n=2mwF\n-----END PGP SIGNATURE-----", "payload": "tree bd9b52fc6dc4c5f385644c1383c5d2842f31c126\nparent eba449c2c066334c813b1a54c9ec7cc18a4b09c3\nauthor mcarton <cartonmartin+git@gmail.com> 1466554646 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467213021 +0200\n\nImprove `matches` tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e76bcee5dd40ecc012ba3ad2b42fd6bc4f22fa8", "html_url": "https://github.com/rust-lang/rust/commit/9e76bcee5dd40ecc012ba3ad2b42fd6bc4f22fa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e76bcee5dd40ecc012ba3ad2b42fd6bc4f22fa8/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba449c2c066334c813b1a54c9ec7cc18a4b09c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba449c2c066334c813b1a54c9ec7cc18a4b09c3", "html_url": "https://github.com/rust-lang/rust/commit/eba449c2c066334c813b1a54c9ec7cc18a4b09c3"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "989106a5a16efb8d410090c0499b779f90ef81a0", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 41, "deletions": 31, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/9e76bcee5dd40ecc012ba3ad2b42fd6bc4f22fa8/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e76bcee5dd40ecc012ba3ad2b42fd6bc4f22fa8/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=9e76bcee5dd40ecc012ba3ad2b42fd6bc4f22fa8", "patch": "@@ -18,34 +18,38 @@ enum ExprNode {\n \n static NODE: ExprNode = ExprNode::Unicorns;\n \n+fn dummy() {\n+}\n+\n fn unwrap_addr() -> Option<&'static ExprNode> {\n-    match ExprNode::Butterflies {   //~ ERROR you seem to be trying to use match\n-                                    //~^ HELP try\n+    match ExprNode::Butterflies {\n+        //~^ ERROR you seem to be trying to use match\n+        //~| HELP try\n+        //~| SUGGESTION if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else { let x = 5; None }\n         ExprNode::ExprAddrOf => Some(&NODE),\n-        _ => {\n-            let x = 5;\n-            None\n-        },\n+        _ => { let x = 5; None },\n     }\n }\n \n fn single_match(){\n     let x = Some(1u8);\n \n-    match x {  //~ ERROR you seem to be trying to use match\n-               //~^ HELP try\n-        Some(y) => {\n-            println!(\"{:?}\", y);\n-        }\n+    match x {\n+        //~^ ERROR you seem to be trying to use match\n+        //~| HELP try\n+        //~| SUGGESTION if let Some(y) = x { println!(\"{:?}\", y); };\n+        Some(y) => { println!(\"{:?}\", y); }\n         _ => ()\n-    }\n+    };\n \n     let z = (1u8,1u8);\n-    match z { //~ ERROR you seem to be trying to use match\n-              //~^ HELP try\n-        (2...3, 7...9) => println!(\"{:?}\", z),\n+    match z {\n+        //~^ ERROR you seem to be trying to use match\n+        //~| HELP try\n+        //~| SUGGESTION if let (2...3, 7...9) = z { dummy() };\n+        (2...3, 7...9) => dummy(),\n         _ => {}\n-    }\n+    };\n \n     // Not linted (pattern guards used)\n     match x {\n@@ -64,25 +68,31 @@ fn single_match_know_enum() {\n     let x = Some(1u8);\n     let y : Result<_, i8> = Ok(1i8);\n \n-    match x { //~ ERROR you seem to be trying to use match\n-              //~^ HELP try\n-        Some(y) => println!(\"{:?}\", y),\n+    match x {\n+        //~^ ERROR you seem to be trying to use match\n+        //~| HELP try\n+        //~| SUGGESTION if let Some(y) = x { dummy() };\n+        Some(y) => dummy(),\n         None => ()\n-    }\n+    };\n \n-    match y { //~ ERROR you seem to be trying to use match\n-              //~^ HELP try\n-        Ok(y) => println!(\"{:?}\", y),\n+    match y {\n+        //~^ ERROR you seem to be trying to use match\n+        //~| HELP try\n+        //~| SUGGESTION if let Ok(y) = y { dummy() };\n+        Ok(y) => dummy(),\n         Err(..) => ()\n-    }\n+    };\n \n     let c = Cow::Borrowed(\"\");\n \n-    match c { //~ ERROR you seem to be trying to use match\n-              //~^ HELP try\n-        Cow::Borrowed(..) => println!(\"42\"),\n+    match c {\n+        //~^ ERROR you seem to be trying to use match\n+        //~| HELP try\n+        //~| SUGGESTION if let Cow::Borrowed(..) = c { dummy() };\n+        Cow::Borrowed(..) => dummy(),\n         Cow::Owned(..) => (),\n-    }\n+    };\n \n     let z = Foo::Bar;\n     // no warning\n@@ -209,19 +219,19 @@ fn overlapping() {\n \n     match 42 {\n         0 ... 10 => println!(\"0 ... 10\"), //~ERROR: some ranges overlap\n-        0 ... 11 => println!(\"0 ... 10\"),\n+        0 ... 11 => println!(\"0 ... 10\"), //~NOTE overlaps with this\n         _ => (),\n     }\n \n     match 42 {\n         0 ... 5 => println!(\"0 ... 5\"), //~ERROR: some ranges overlap\n         6 ... 7 => println!(\"6 ... 7\"),\n-        FOO ... 11 => println!(\"0 ... 10\"),\n+        FOO ... 11 => println!(\"0 ... 10\"), //~NOTE overlaps with this\n         _ => (),\n     }\n \n     match 42 {\n-        2 => println!(\"2\"),\n+        2 => println!(\"2\"), //~NOTE overlaps with this\n         0 ... 5 => println!(\"0 ... 5\"), //~ERROR: some ranges overlap\n         _ => (),\n     }"}]}