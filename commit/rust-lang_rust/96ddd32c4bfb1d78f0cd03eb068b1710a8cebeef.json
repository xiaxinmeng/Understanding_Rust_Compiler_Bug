{"sha": "96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "node_id": "C_kwDOAAsO6NoAKDk2ZGRkMzJjNGJmYjFkNzhmMGNkMDNlYjA2OGIxNzEwYThjZWJlZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-14T06:30:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-14T06:30:18Z"}, "message": "Auto merge of #104387 - Manishearth:rollup-9e551p5, r=Manishearth\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #103709 (ci: Upgrade dist-x86_64-netbsd to NetBSD 9.0)\n - #103744 (Upgrade cc for working is_flag_supported on cross-compiles)\n - #104105 (llvm: dwo only emitted when object code emitted)\n - #104158 (Return .efi extension for EFI executable)\n - #104181 (Add a few known-bug tests)\n - #104266 (Regression test for coercion of mut-ref to dyn-star)\n - #104300 (Document `Path::parent` behavior around relative paths)\n - #104304 (Enable profiler in dist-s390x-linux)\n - #104362 (Add `delay_span_bug` to `AttrWrapper::take_for_recovery`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8fb6205431371f9923ca9eac04bbcbc0ce4c2e55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fb6205431371f9923ca9eac04bbcbc0ce4c2e55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "html_url": "https://github.com/rust-lang/rust/commit/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f90a4ff26c9743abf612f015c4398d7158b646b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f90a4ff26c9743abf612f015c4398d7158b646b6", "html_url": "https://github.com/rust-lang/rust/commit/f90a4ff26c9743abf612f015c4398d7158b646b6"}, {"sha": "4fdd944af46e074807f132d46135f2945b57d1b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdd944af46e074807f132d46135f2945b57d1b0", "html_url": "https://github.com/rust-lang/rust/commit/4fdd944af46e074807f132d46135f2945b57d1b0"}], "stats": {"total": 737, "additions": 681, "deletions": 56}, "files": [{"sha": "23481488563bd46a9f5e2753b60bb2496751f0f1", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -473,9 +473,9 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.73\"\n+version = \"1.0.76\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11\"\n+checksum = \"76a284da2e6fe2092f2353e51713435363112dfd60030e22add80be333fb928f\"\n dependencies = [\n  \"jobserver\",\n ]"}, {"sha": "97d0de47b3a6e7fbff4484c5e74c393bea3891a2", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -765,11 +765,21 @@ pub(crate) unsafe fn codegen(\n         drop(handlers);\n     }\n \n+    // `.dwo` files are only emitted if:\n+    //\n+    // - Object files are being emitted (i.e. bitcode only or metadata only compilations will not\n+    //   produce dwarf objects, even if otherwise enabled)\n+    // - Target supports Split DWARF\n+    // - Split debuginfo is enabled\n+    // - Split DWARF kind is `split` (i.e. debuginfo is split into `.dwo` files, not different\n+    //   sections in the `.o` files).\n+    let dwarf_object_emitted = matches!(config.emit_obj, EmitObj::ObjectCode(_))\n+        && cgcx.target_can_use_split_dwarf\n+        && cgcx.split_debuginfo != SplitDebuginfo::Off\n+        && cgcx.split_dwarf_kind == SplitDwarfKind::Split;\n     Ok(module.into_compiled_module(\n         config.emit_obj != EmitObj::None,\n-        cgcx.target_can_use_split_dwarf\n-            && cgcx.split_debuginfo != SplitDebuginfo::Off\n-            && cgcx.split_dwarf_kind == SplitDwarfKind::Split,\n+        dwarf_object_emitted,\n         config.emit_bc,\n         &cgcx.output_filenames,\n     ))"}, {"sha": "d35e4191cc0b1dfc1ae36d59caf4e74556a6997c", "filename": "compiler/rustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fbuild.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -334,7 +334,7 @@ fn main() {\n         \"c++\"\n     } else if target.contains(\"netbsd\") && llvm_static_stdcpp.is_some() {\n         // NetBSD uses a separate library when relocation is required\n-        \"stdc++_pic\"\n+        \"stdc++_p\"\n     } else if llvm_use_libcxx.is_some() {\n         \"c++\"\n     } else {"}, {"sha": "c8160548763c88420c902f4f84f2af1ef00b069b", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -5,7 +5,8 @@ use rustc_ast::tokenstream::{AttrTokenTree, DelimSpan, LazyAttrTokenStream, Spac\n use rustc_ast::{self as ast};\n use rustc_ast::{AttrVec, Attribute, HasAttrs, HasTokens};\n use rustc_errors::PResult;\n-use rustc_span::{sym, Span};\n+use rustc_session::parse::ParseSess;\n+use rustc_span::{sym, Span, DUMMY_SP};\n \n use std::convert::TryInto;\n use std::ops::Range;\n@@ -39,8 +40,13 @@ impl AttrWrapper {\n     pub fn empty() -> AttrWrapper {\n         AttrWrapper { attrs: AttrVec::new(), start_pos: usize::MAX }\n     }\n-    // FIXME: Delay span bug here?\n-    pub(crate) fn take_for_recovery(self) -> AttrVec {\n+\n+    pub(crate) fn take_for_recovery(self, sess: &ParseSess) -> AttrVec {\n+        sess.span_diagnostic.delay_span_bug(\n+            self.attrs.get(0).map(|attr| attr.span).unwrap_or(DUMMY_SP),\n+            \"AttrVec is taken for recovery but no error is produced\",\n+        );\n+\n         self.attrs\n     }\n "}, {"sha": "b072573af23f044e1e18d675984fc879697767fe", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -2272,7 +2272,7 @@ impl<'a> Parser<'a> {\n                 self.mk_block_err(cond_span.shrink_to_hi())\n             }\n         } else {\n-            let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.\n+            let attrs = self.parse_outer_attributes()?; // For recovery.\n             let block = if self.check(&token::OpenDelim(Delimiter::Brace)) {\n                 self.parse_block()?\n             } else {\n@@ -2289,7 +2289,7 @@ impl<'a> Parser<'a> {\n                     })?\n                 }\n             };\n-            self.error_on_if_block_attrs(lo, false, block.span, &attrs);\n+            self.error_on_if_block_attrs(lo, false, block.span, attrs);\n             block\n         };\n         let els = if self.eat_keyword(kw::Else) { Some(self.parse_else_expr()?) } else { None };\n@@ -2350,7 +2350,7 @@ impl<'a> Parser<'a> {\n     /// Parses an `else { ... }` expression (`else` token already eaten).\n     fn parse_else_expr(&mut self) -> PResult<'a, P<Expr>> {\n         let else_span = self.prev_token.span; // `else`\n-        let attrs = self.parse_outer_attributes()?.take_for_recovery(); // For recovery.\n+        let attrs = self.parse_outer_attributes()?; // For recovery.\n         let expr = if self.eat_keyword(kw::If) {\n             self.parse_if_expr()?\n         } else if self.check(&TokenKind::OpenDelim(Delimiter::Brace)) {\n@@ -2385,7 +2385,7 @@ impl<'a> Parser<'a> {\n                 },\n             }\n         };\n-        self.error_on_if_block_attrs(else_span, true, expr.span, &attrs);\n+        self.error_on_if_block_attrs(else_span, true, expr.span, attrs);\n         Ok(expr)\n     }\n \n@@ -2394,8 +2394,13 @@ impl<'a> Parser<'a> {\n         ctx_span: Span,\n         is_ctx_else: bool,\n         branch_span: Span,\n-        attrs: &[ast::Attribute],\n+        attrs: AttrWrapper,\n     ) {\n+        if attrs.is_empty() {\n+            return;\n+        }\n+\n+        let attrs: &[ast::Attribute] = &attrs.take_for_recovery(self.sess);\n         let (attributes, last) = match attrs {\n             [] => return,\n             [x0 @ xn] | [x0, .., xn] => (x0.span.to(xn.span), xn.span),"}, {"sha": "9684145ad99482cf16b0e0b39485f63b8e37be7d", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -19,7 +19,7 @@ use rustc_ast as ast;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, TokenKind};\n use rustc_ast::util::classify;\n-use rustc_ast::{AttrStyle, AttrVec, Attribute, LocalKind, MacCall, MacCallStmt, MacStmtStyle};\n+use rustc_ast::{AttrStyle, AttrVec, LocalKind, MacCall, MacCallStmt, MacStmtStyle};\n use rustc_ast::{Block, BlockCheckMode, Expr, ExprKind, HasAttrs, Local, Stmt};\n use rustc_ast::{StmtKind, DUMMY_NODE_ID};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, PResult};\n@@ -101,7 +101,7 @@ impl<'a> Parser<'a> {\n             self.mk_stmt(lo.to(item.span), StmtKind::Item(P(item)))\n         } else if self.eat(&token::Semi) {\n             // Do not attempt to parse an expression if we're done here.\n-            self.error_outer_attrs(&attrs.take_for_recovery());\n+            self.error_outer_attrs(attrs);\n             self.mk_stmt(lo, StmtKind::Empty)\n         } else if self.token != token::CloseDelim(Delimiter::Brace) {\n             // Remainder are line-expr stmts.\n@@ -120,7 +120,7 @@ impl<'a> Parser<'a> {\n             }\n             self.mk_stmt(lo.to(e.span), StmtKind::Expr(e))\n         } else {\n-            self.error_outer_attrs(&attrs.take_for_recovery());\n+            self.error_outer_attrs(attrs);\n             return Ok(None);\n         }))\n     }\n@@ -199,8 +199,10 @@ impl<'a> Parser<'a> {\n \n     /// Error on outer attributes in this context.\n     /// Also error if the previous token was a doc comment.\n-    fn error_outer_attrs(&self, attrs: &[Attribute]) {\n-        if let [.., last] = attrs {\n+    fn error_outer_attrs(&self, attrs: AttrWrapper) {\n+        if !attrs.is_empty()\n+        && let attrs = attrs.take_for_recovery(self.sess)\n+        && let attrs @ [.., last] = &*attrs {\n             if last.is_doc_comment() {\n                 self.sess.emit_err(DocCommentDoesNotDocumentAnything {\n                     span: last.span,"}, {"sha": "af88b9070c189dc31033414d49f6e69753a6d1dc", "filename": "library/std/src/path.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/library%2Fstd%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/library%2Fstd%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpath.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -2142,7 +2142,10 @@ impl Path {\n \n     /// Returns the `Path` without its final component, if there is one.\n     ///\n-    /// Returns [`None`] if the path terminates in a root or prefix.\n+    /// This means it returns `Some(\"\")` for relative paths with one component.\n+    ///\n+    /// Returns [`None`] if the path terminates in a root or prefix, or if it's\n+    /// the empty string.\n     ///\n     /// # Examples\n     ///\n@@ -2156,6 +2159,14 @@ impl Path {\n     /// let grand_parent = parent.parent().unwrap();\n     /// assert_eq!(grand_parent, Path::new(\"/\"));\n     /// assert_eq!(grand_parent.parent(), None);\n+    ///\n+    /// let relative_path = Path::new(\"foo/bar\");\n+    /// let parent = relative_path.parent();\n+    /// assert_eq!(parent, Some(Path::new(\"foo\")));\n+    /// let grand_parent = parent.and_then(Path::parent);\n+    /// assert_eq!(grand_parent, Some(Path::new(\"\")));\n+    /// let great_grand_parent = grand_parent.and_then(Path::parent);\n+    /// assert_eq!(great_grand_parent, None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[doc(alias = \"dirname\")]"}, {"sha": "eab2717c45233e2754c6a2254d588750935f6221", "filename": "library/unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/library%2Funwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/library%2Funwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2FCargo.toml?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -20,7 +20,7 @@ compiler_builtins = \"0.1.0\"\n cfg-if = \"1.0\"\n \n [build-dependencies]\n-cc = \"1.0.69\"\n+cc = \"1.0.76\"\n \n [features]\n "}, {"sha": "58220783228b2883fae9ba5ca03d646048e41964", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -44,7 +44,13 @@ pub use t;\n /// Given an executable called `name`, return the filename for the\n /// executable for a particular target.\n pub fn exe(name: &str, target: TargetSelection) -> String {\n-    if target.contains(\"windows\") { format!(\"{}.exe\", name) } else { name.to_string() }\n+    if target.contains(\"windows\") {\n+        format!(\"{}.exe\", name)\n+    } else if target.contains(\"uefi\") {\n+        format!(\"{}.efi\", name)\n+    } else {\n+        name.to_string()\n+    }\n }\n \n /// Returns `true` if the file name given looks like a dynamic library."}, {"sha": "43a449b3a1926baa307e1908dbdd1a6a1c2260c8", "filename": "src/ci/docker/host-x86_64/dist-s390x-linux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-s390x-linux%2FDockerfile?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -28,5 +28,5 @@ ENV \\\n \n ENV HOSTS=s390x-unknown-linux-gnu\n \n-ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --disable-docs\n+ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --enable-profiler --disable-docs\n ENV SCRIPT python3 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "d03c364547e034cbdbd21b8594a98c5b4c1ce298", "filename": "src/ci/docker/host-x86_64/dist-x86_64-netbsd/Dockerfile", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2FDockerfile?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -1,17 +1,15 @@\n-FROM ubuntu:16.04\n+FROM ubuntu:20.04\n \n COPY scripts/cross-apt-packages.sh /scripts/\n RUN sh /scripts/cross-apt-packages.sh\n+RUN DEBIAN_FRONTEND=noninteractive apt-get install -y zlib1g-dev\n \n COPY host-x86_64/dist-x86_64-netbsd/build-netbsd-toolchain.sh /tmp/\n RUN /tmp/build-netbsd-toolchain.sh\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-COPY scripts/cmake.sh /scripts/\n-RUN /scripts/cmake.sh\n-\n ENV PATH=$PATH:/x-tools/x86_64-unknown-netbsd/bin\n \n ENV \\\n@@ -21,6 +19,5 @@ ENV \\\n \n ENV HOSTS=x86_64-unknown-netbsd\n \n-ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs \\\n-    --set llvm.allow-old-toolchain\n+ENV RUST_CONFIGURE_ARGS --enable-extended --disable-docs\n ENV SCRIPT python3 ../x.py dist --host $HOSTS --target $HOSTS"}, {"sha": "e0c008b76fa8bb39744460c79d8cc50751880edb", "filename": "src/ci/docker/host-x86_64/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -25,19 +25,19 @@ cd netbsd\n \n mkdir -p /x-tools/x86_64-unknown-netbsd/sysroot\n \n-URL=https://ci-mirrors.rust-lang.org/rustc\n-\n-# Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/source/sets/*.tgz\n-curl $URL/2018-03-01-netbsd-src.tgz | tar xzf -\n-curl $URL/2018-03-01-netbsd-gnusrc.tgz | tar xzf -\n-curl $URL/2018-03-01-netbsd-sharesrc.tgz | tar xzf -\n-curl $URL/2018-03-01-netbsd-syssrc.tgz | tar xzf -\n-\n-# Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/amd64/binary/sets/*.tgz\n-curl $URL/2018-03-01-netbsd-base.tgz | \\\n-  tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib ./lib\n-curl $URL/2018-03-01-netbsd-comp.tgz | \\\n-  tar xzf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib\n+# URL=https://ci-mirrors.rust-lang.org/rustc\n+\n+SOURCE_URL=https://cdn.netbsd.org/pub/NetBSD/NetBSD-9.0/source/sets\n+curl $SOURCE_URL/src.tgz | tar xzf -\n+curl $SOURCE_URL/gnusrc.tgz | tar xzf -\n+curl $SOURCE_URL/sharesrc.tgz | tar xzf -\n+curl $SOURCE_URL/syssrc.tgz | tar xzf -\n+\n+BINARY_URL=https://cdn.netbsd.org/pub/NetBSD/NetBSD-9.0/amd64/binary/sets\n+curl $BINARY_URL/base.tar.xz | \\\n+  tar xJf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib ./lib\n+curl $BINARY_URL/comp.tar.xz | \\\n+  tar xJf - -C /x-tools/x86_64-unknown-netbsd/sysroot ./usr/include ./usr/lib\n \n cd usr/src\n "}, {"sha": "501be175fce50446798de3b5e663ce65c8cbe94f", "filename": "src/test/incremental/issue-101518.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fincremental%2Fissue-101518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fincremental%2Fissue-101518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-101518.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,31 @@\n+// revisions: cfail1\n+// should-ice\n+// error-pattern: forcing query\n+// known-bug: #101518\n+\n+#[derive(PartialEq, Eq)]\n+struct Id<'a> {\n+    ns: &'a str,\n+}\n+fn visit_struct() {\n+    let id = Id { ns: \"random1\" };\n+    const FLAG: Id<'static> = Id {\n+        ns: \"needs_to_be_the_same\",\n+    };\n+    match id {\n+        FLAG => {}\n+        _ => {}\n+    }\n+}\n+fn visit_struct2() {\n+    let id = Id { ns: \"random2\" };\n+    const FLAG: Id<'static> = Id {\n+        ns: \"needs_to_be_the_same\",\n+    };\n+    match id {\n+        FLAG => {}\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1831ab38fab49d9728505491e3d15e4e9b653773", "filename": "src/test/run-make-fulldeps/split-debuginfo/Makefile", "status": "modified", "additions": 196, "deletions": 14, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2FMakefile?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -3,7 +3,7 @@ include ../tools.mk\n all: off packed unpacked\n \n ifeq ($(UNAME),Darwin)\n-# If disabled, don't run dsymutil\n+# If disabled, don't run `dsymutil`.\n off:\n \trm -rf $(TMPDIR)/*.dSYM\n \t$(RUSTC) foo.rs -g -C split-debuginfo=off\n@@ -29,98 +29,280 @@ unpacked:\n \t[ ! -d $(TMPDIR)/foo.dSYM ]\n else\n ifdef IS_WINDOWS\n-# Windows only supports =packed\n+# Windows only supports packed debuginfo - nothing to test.\n off:\n packed:\n unpacked:\n else\n+# Some non-Windows, non-Darwin platforms are not stable, and some are.\n ifeq ($(UNAME),Linux)\n   UNSTABLEOPTS :=\n else\n   UNSTABLEOPTS := -Zunstable-options\n endif\n \n+# - Debuginfo in `.o` files\n+# - `.o` deleted\n+# - `.dwo` never created\n+# - `.dwp` never created\n off:\n \t$(RUSTC) foo.rs -g -C $(UNSTABLEOPTS) split-debuginfo=off\n \t[ ! -f $(TMPDIR)/*.dwp ]\n \t[ ! -f $(TMPDIR)/*.dwo ]\n-\n \t$(RUSTC) foo.rs -g\n \t[ ! -f $(TMPDIR)/*.dwp ]\n \t[ ! -f $(TMPDIR)/*.dwo ]\n \n-packed: packed-split packed-single\n+packed: packed-split packed-single packed-lto packed-remapped packed-crosscrate\n \n+# - Debuginfo in `.dwo` files\n+# - `.o` deleted\n+# - `.dwo` deleted\n+# - `.dwp` present\n packed-split:\n \t$(RUSTC) foo.rs -g $(UNSTABLEOPTS) -C split-debuginfo=packed -Zsplit-dwarf-kind=split\n-\tls $(TMPDIR)/*.dwp\n-\trm -rf $(TMPDIR)/*.dwp $(TMPDIR)/*.dwo\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\trm $(TMPDIR)/foo.dwp\n+\trm $(TMPDIR)/$(call BIN,foo)\n \n+# - Debuginfo in `.o` files\n+# - `.o` deleted\n+# - `.dwo` never created\n+# - `.dwp` present\n packed-single:\n \t$(RUSTC) foo.rs -g $(UNSTABLEOPTS) -C split-debuginfo=packed -Zsplit-dwarf-kind=single\n-\tls $(TMPDIR)/*.dwp\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\trm $(TMPDIR)/foo.dwp\n+\trm $(TMPDIR)/$(call BIN,foo)\n+\n+packed-lto: packed-lto-split packed-lto-single\n+\n+# - rmeta file added to rlib, no object files are generated and thus no debuginfo is generated\n+# - `.o` never created\n+# - `.dwo` never created\n+# - `.dwp` never created\n+packed-lto-split:\n+\t$(RUSTC) baz.rs -g $(UNSTABLEOPTS) -Csplit-debuginfo=packed -Zsplit-dwarf-kind=split \\\n+\t\t--crate-type=rlib -Clinker-plugin-lto\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\trm $(TMPDIR)/libbaz.rlib\n+\n+# - rmeta file added to rlib, no object files are generated and thus no debuginfo is generated\n+# - `.o` never created\n+# - `.dwo` never created\n+# - `.dwp` never created\n+packed-lto-single:\n+\t$(RUSTC) baz.rs -g $(UNSTABLEOPTS) -Csplit-debuginfo=packed -Zsplit-dwarf-kind=single \\\n+\t\t--crate-type=rlib -Clinker-plugin-lto\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n-\trm -rf $(TMPDIR)/*.dwp\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\trm $(TMPDIR)/libbaz.rlib\n \n packed-remapped: packed-remapped-split packed-remapped-single\n \n+# - Debuginfo in `.dwo` files\n+# - `.o` and binary refer to remapped `.dwo` paths which do not exist\n+# - `.o` deleted\n+# - `.dwo` deleted\n+# - `.dwp` present\n packed-remapped-split:\n \t$(RUSTC) $(UNSTABLEOPTS) -C split-debuginfo=packed -C debuginfo=2 \\\n \t\t-Z split-dwarf-kind=split --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\trm $(TMPDIR)/foo.dwp\n+\trm $(TMPDIR)/$(call BIN,foo)\n \n+# - Debuginfo in `.o` files\n+# - `.o` and binary refer to remapped `.o` paths which do not exist\n+# - `.o` deleted\n+# - `.dwo` never created\n+# - `.dwp` present\n packed-remapped-single:\n \t$(RUSTC) $(UNSTABLEOPTS) -C split-debuginfo=packed -C debuginfo=2 \\\n \t\t-Z split-dwarf-kind=single --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\trm $(TMPDIR)/foo.dwp\n+\trm $(TMPDIR)/$(call BIN,foo)\n \n packed-crosscrate: packed-crosscrate-split packed-crosscrate-single\n \n+# - Debuginfo in `.dwo` files\n+# - (bar) `.rlib` file created, contains `.dwo`\n+# - (bar) `.o` deleted\n+# - (bar) `.dwo` deleted\n+# - (bar) `.dwp` never created\n+# - (main) `.o` deleted\n+# - (main) `.dwo` deleted\n+# - (main) `.dwp` present\n packed-crosscrate-split:\n \t$(RUSTC) --crate-type lib $(UNSTABLEOPTS) -C split-debuginfo=packed \\\n \t\t-Zsplit-dwarf-kind=split -C debuginfo=2 -g bar.rs\n \tls $(TMPDIR)/*.rlib\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n-\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib -Z unstable-options $(UNSTABLEOPTS) \\\n+\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib $(UNSTABLEOPTS) \\\n \t\t-C split-debuginfo=packed -Zsplit-dwarf-kind=split -C debuginfo=2 -g main.rs\n-\trm $(TMPDIR)/*.dwo\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \trm $(TMPDIR)/main.dwp\n \trm $(TMPDIR)/$(call BIN,main)\n \n+# - Debuginfo in `.o` files\n+# - (bar) `.rlib` file created, contains `.o`\n+# - (bar) `.o` deleted\n+# - (bar) `.dwo` never created\n+# - (bar) `.dwp` never created\n+# - (main) `.o` deleted\n+# - (main) `.dwo` never created\n+# - (main) `.dwp` present\n packed-crosscrate-single:\n \t$(RUSTC) --crate-type lib $(UNSTABLEOPTS) -C split-debuginfo=packed \\\n \t\t-Zsplit-dwarf-kind=single -C debuginfo=2 -g bar.rs\n \tls $(TMPDIR)/*.rlib\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n-\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib -Z unstable-options $(UNSTABLEOPTS) \\\n+\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib $(UNSTABLEOPTS) \\\n \t\t-C split-debuginfo=packed -Zsplit-dwarf-kind=single -C debuginfo=2 -g main.rs\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \trm $(TMPDIR)/main.dwp\n \trm $(TMPDIR)/$(call BIN,main)\n \n-unpacked: unpacked-split unpacked-single unpacked-remapped-split unpacked-remapped-single\n+unpacked: unpacked-split unpacked-single unpacked-lto unpacked-remapped unpacked-crosscrate\n \n+# - Debuginfo in `.dwo` files\n+# - `.o` deleted\n+# - `.dwo` present\n+# - `.dwp` never created\n unpacked-split:\n \t$(RUSTC) foo.rs -g $(UNSTABLEOPTS) -C split-debuginfo=unpacked -Zsplit-dwarf-kind=split\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\trm $(TMPDIR)/*.dwo\n \tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n-\tls $(TMPDIR)/*.dwo\n-\trm -rf $(TMPDIR)/*.dwp $(TMPDIR)/*.dwo\n+\trm $(TMPDIR)/$(call BIN,foo)\n \n+# - Debuginfo in `.o` files\n+# - `.o` present\n+# - `.dwo` never created\n+# - `.dwp` never created\n unpacked-single:\n \t$(RUSTC) foo.rs -g $(UNSTABLEOPTS) -C split-debuginfo=unpacked -Zsplit-dwarf-kind=single\n+\tls $(TMPDIR)/*.o\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\trm $(TMPDIR)/$(call BIN,foo)\n+\n+unpacked-lto: packed-lto-split packed-lto-single\n+\n+# - rmeta file added to rlib, no object files are generated and thus no debuginfo is generated\n+# - `.o` never created\n+# - `.dwo` never created\n+# - `.dwp` never created\n+unpacked-lto-split:\n+\t$(RUSTC) baz.rs -g $(UNSTABLEOPTS) -Csplit-debuginfo=unpacked -Zsplit-dwarf-kind=split \\\n+\t\t--crate-type=rlib -Clinker-plugin-lto\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\trm $(TMPDIR)/libbaz.rlib\n+\n+# - rmeta file added to rlib, no object files are generated and thus no debuginfo is generated\n+# - `.o` never created\n+# - `.dwo` never created\n+# - `.dwp` never created\n+unpacked-lto-single:\n+\t$(RUSTC) baz.rs -g $(UNSTABLEOPTS) -Csplit-debuginfo=unpacked -Zsplit-dwarf-kind=single \\\n+\t\t--crate-type=rlib -Clinker-plugin-lto\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n \tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\trm $(TMPDIR)/libbaz.rlib\n+\n+unpacked-remapped: unpacked-remapped-split unpacked-remapped-single\n \n+# - Debuginfo in `.dwo` files\n+# - `.o` and binary refer to remapped `.dwo` paths which do not exist\n+# - `.o` deleted\n+# - `.dwo` present\n+# - `.dwp` never created\n unpacked-remapped-split:\n \t$(RUSTC) $(UNSTABLEOPTS) -C split-debuginfo=unpacked -C debuginfo=2 \\\n \t\t-Z split-dwarf-kind=split --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\trm $(TMPDIR)/*.dwo\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\trm $(TMPDIR)/$(call BIN,foo)\n \n+# - Debuginfo in `.o` files\n+# - `.o` and binary refer to remapped `.o` paths which do not exist\n+# - `.o` present\n+# - `.dwo` never created\n+# - `.dwp` never created\n unpacked-remapped-single:\n \t$(RUSTC) $(UNSTABLEOPTS) -C split-debuginfo=unpacked -C debuginfo=2 \\\n \t\t-Z split-dwarf-kind=single --remap-path-prefix $(TMPDIR)=/a foo.rs -g\n \tobjdump -Wi $(TMPDIR)/foo | grep DW_AT_GNU_dwo_name | (! grep $(TMPDIR)) || exit 1\n+\tls $(TMPDIR)/*.o\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\trm $(TMPDIR)/$(call BIN,foo)\n+\n+unpacked-crosscrate: packed-crosscrate-split packed-crosscrate-single\n+\n+# - Debuginfo in `.dwo` files\n+# - (bar) `.rlib` file created, contains `.dwo`\n+# - (bar) `.o` deleted\n+# - (bar) `.dwo` present\n+# - (bar) `.dwp` never created\n+# - (main) `.o` deleted\n+# - (main) `.dwo` present\n+# - (main) `.dwp` never created\n+unpacked-crosscrate-split:\n+\t$(RUSTC) --crate-type lib $(UNSTABLEOPTS) -C split-debuginfo=unpacked \\\n+\t\t-Zsplit-dwarf-kind=split -C debuginfo=2 -g bar.rs\n+\tls $(TMPDIR)/*.rlib\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwo\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib $(UNSTABLEOPTS) \\\n+\t\t-C split-debuginfo=unpacked -Zsplit-dwarf-kind=split -C debuginfo=2 -g main.rs\n+\tls $(TMPDIR)/*.o && exit 1 || exit 0\n+\trm $(TMPDIR)/*.dwo\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\trm $(TMPDIR)/$(call BIN,main)\n+\n+# - Debuginfo in `.o` files\n+# - (bar) `.rlib` file created, contains `.o`\n+# - (bar) `.o` present\n+# - (bar) `.dwo` never created\n+# - (bar) `.dwp` never created\n+# - (main) `.o` present\n+# - (main) `.dwo` never created\n+# - (main) `.dwp` never created\n+unpacked-crosscrate-single:\n+\t$(RUSTC) --crate-type lib $(UNSTABLEOPTS) -C split-debuginfo=unpacked \\\n+\t\t-Zsplit-dwarf-kind=single -C debuginfo=2 -g bar.rs\n+\tls $(TMPDIR)/*.rlib\n+\tls $(TMPDIR)/*.o\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\t$(RUSTC) --extern bar=$(TMPDIR)/libbar.rlib $(UNSTABLEOPTS) \\\n+\t\t-C split-debuginfo=unpacked -Zsplit-dwarf-kind=single -C debuginfo=2 -g main.rs\n+\tls $(TMPDIR)/*.o\n+\tls $(TMPDIR)/*.dwo && exit 1 || exit 0\n+\tls $(TMPDIR)/*.dwp && exit 1 || exit 0\n+\trm $(TMPDIR)/$(call BIN,main)\n endif\n endif"}, {"sha": "8b1a393741c96c03c3712b4c80b3d2bcd06959b6", "filename": "src/test/run-make-fulldeps/split-debuginfo/baz.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsplit-debuginfo%2Fbaz.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1 @@\n+// empty"}, {"sha": "487d1ac81bfc63bac06ff7da8944d4c9006e8482", "filename": "src/test/ui/borrowck/async-reference-generality.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,35 @@\n+// check-fail\n+// known-bug: #99492\n+// edition: 2021\n+\n+use std::marker::PhantomData;\n+\n+pub struct Struct<I, T>(PhantomData<fn() -> <Self as It>::Item>)\n+where\n+    Self: It;\n+\n+impl<I> It for Struct<I, I::Item>\n+where\n+    I: It,\n+{\n+    type Item = ();\n+}\n+\n+pub trait It {\n+    type Item;\n+}\n+\n+fn f() -> impl Send {\n+    async {\n+        let _x = Struct::<Empty<&'static ()>, _>(PhantomData);\n+        async {}.await;\n+    }\n+}\n+\n+pub struct Empty<T>(PhantomData<fn() -> T>);\n+\n+impl<T> It for Empty<T> {\n+    type Item = T;\n+}\n+\n+fn main() {}"}, {"sha": "af720ad29314f6818447dfbaf00d93f0f6fc5966", "filename": "src/test/ui/borrowck/async-reference-generality.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fasync-reference-generality.stderr?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,27 @@\n+error[E0308]: mismatched types\n+  --> $DIR/async-reference-generality.rs:23:5\n+   |\n+LL | /     async {\n+LL | |         let _x = Struct::<Empty<&'static ()>, _>(PhantomData);\n+LL | |         async {}.await;\n+LL | |     }\n+   | |_____^ one type is more general than the other\n+   |\n+   = note: expected reference `&()`\n+              found reference `&()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/async-reference-generality.rs:23:5\n+   |\n+LL | /     async {\n+LL | |         let _x = Struct::<Empty<&'static ()>, _>(PhantomData);\n+LL | |         async {}.await;\n+LL | |     }\n+   | |_____^ one type is more general than the other\n+   |\n+   = note: expected reference `&()`\n+              found reference `&()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "244ecda6626ae05971ffc4ccc5326feee1a096ec", "filename": "src/test/ui/dyn-star/issue-102430.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fdyn-star%2Fissue-102430.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fdyn-star%2Fissue-102430.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fissue-102430.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+#![feature(dyn_star)]\n+#![allow(incomplete_features)]\n+\n+trait AddOne {\n+    fn add1(&mut self) -> usize;\n+}\n+\n+impl AddOne for usize {\n+    fn add1(&mut self) -> usize {\n+        *self += 1;\n+        *self\n+    }\n+}\n+\n+impl AddOne for &mut usize {\n+    fn add1(&mut self) -> usize {\n+        (*self).add1()\n+    }\n+}\n+\n+fn add_one(mut i: dyn* AddOne + '_) -> usize {\n+    i.add1()\n+}\n+\n+fn main() {\n+    let mut x = 42usize;\n+    let y = &mut x as (dyn* AddOne + '_);\n+\n+    println!(\"{}\", add_one(y));\n+}"}, {"sha": "ab9d9a7ce6f0855ac27d07f9a589d77e5bfb64c5", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90950.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,53 @@\n+// check-fail\n+// known-bug: #90950\n+\n+trait Yokeable<'a>: 'static {\n+    type Output: 'a;\n+}\n+\n+\n+trait IsCovariant<'a> {}\n+\n+struct Yoke<Y: for<'a> Yokeable<'a>> {\n+    data: Y,\n+}\n+\n+\n+// impl<Y: for<'a> Yokeable<'a>> Yoke<Y> {\n+//     fn project<Y2: for<'a> Yokeable<'a>>(\n+//         &self,\n+//         f: for<'a> fn(<Y as Yokeable<'a>>::Output, &'a (),\n+//     ) -> <Y2 as Yokeable<'a>>::Output) -> Yoke<Y2> {\n+//         unimplemented!()\n+//     }\n+// }\n+\n+fn upcast<Y>(x: Yoke<Y>) -> Yoke<Box<dyn IsCovariant<'static> + 'static>> where\n+    Y: for<'a> Yokeable<'a>,\n+    for<'a> <Y as Yokeable<'a>>::Output: IsCovariant<'a>\n+    {\n+    // x.project(|data, _| {\n+    //     Box::new(data)\n+    // })\n+    unimplemented!()\n+}\n+\n+\n+impl<'a> Yokeable<'a> for Box<dyn IsCovariant<'static> + 'static> {\n+    type Output = Box<dyn IsCovariant<'a> + 'a>;\n+}\n+\n+// this impl is mostly an example and unnecessary for the pure repro\n+use std::borrow::*;\n+impl<'a, T: ToOwned + ?Sized> Yokeable<'a> for Cow<'static, T> {\n+    type Output = Cow<'a, T>;\n+}\n+impl<'a, T: ToOwned + ?Sized> IsCovariant<'a> for Cow<'a, T> {}\n+\n+\n+\n+fn upcast_yoke(y: Yoke<Cow<'static, str>>) -> Yoke<Box<dyn IsCovariant<'static> + 'static>> {\n+    upcast(y)\n+}\n+\n+fn main() {}"}, {"sha": "6206b167b0b8db3db9c7bf3dcfa01323f0bee7d0", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90950.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,21 @@\n+error[E0277]: the trait bound `for<'a> <_ as Yokeable<'a>>::Output: IsCovariant<'a>` is not satisfied\n+  --> $DIR/issue-90950.rs:50:12\n+   |\n+LL |     upcast(y)\n+   |     ------ ^ the trait `for<'a> IsCovariant<'a>` is not implemented for `<_ as Yokeable<'a>>::Output`\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `IsCovariant<'a>` is implemented for `std::borrow::Cow<'a, T>`\n+note: required by a bound in `upcast`\n+  --> $DIR/issue-90950.rs:27:42\n+   |\n+LL | fn upcast<Y>(x: Yoke<Y>) -> Yoke<Box<dyn IsCovariant<'static> + 'static>> where\n+   |    ------ required by a bound in this\n+LL |     Y: for<'a> Yokeable<'a>,\n+LL |     for<'a> <Y as Yokeable<'a>>::Output: IsCovariant<'a>\n+   |                                          ^^^^^^^^^^^^^^^ required by this bound in `upcast`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7693b118247621c24eba60b14f1830031a9a6768", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/norm-before-method-resolution.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,23 @@\n+// check-fail\n+// known-bug: #89196\n+\n+// Should pass, but we normalize and check bounds before we resolve the generics\n+// of the function (which we know because of the return type).\n+\n+trait Trait<'a> {\n+    type Out;\n+}\n+\n+impl<'a, T> Trait<'a> for T {\n+    type Out = T;\n+}\n+\n+fn weird_bound<X>() -> X\n+    where\n+        for<'a> X: Trait<'a>,\n+        for<'a> <X as Trait<'a>>::Out: Copy\n+{ todo!() }\n+\n+fn main() {\n+    let _: () = weird_bound();\n+}"}, {"sha": "51c9646004afa4a7f0c462567bb3e6378b0db408", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/norm-before-method-resolution.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `for<'a> <_ as Trait<'a>>::Out: Copy` is not satisfied\n+  --> $DIR/norm-before-method-resolution.rs:22:17\n+   |\n+LL |     let _: () = weird_bound();\n+   |                 ^^^^^^^^^^^ the trait `for<'a> Copy` is not implemented for `<_ as Trait<'a>>::Out`\n+   |\n+note: required by a bound in `weird_bound`\n+  --> $DIR/norm-before-method-resolution.rs:18:40\n+   |\n+LL | fn weird_bound<X>() -> X\n+   |    ----------- required by a bound in this\n+...\n+LL |         for<'a> <X as Trait<'a>>::Out: Copy\n+   |                                        ^^^^ required by this bound in `weird_bound`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2e23fa1828091b38b2264cab404d59140042ff7c", "filename": "src/test/ui/never_type/exhaustive_patterns.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,21 @@\n+// check-fail\n+// known-bug: #104034\n+\n+#![feature(exhaustive_patterns, never_type)]\n+\n+mod inner {\n+    pub struct Wrapper<T>(T);\n+}\n+\n+enum Either<A, B> {\n+    A(A),\n+    B(inner::Wrapper<B>),\n+}\n+\n+fn foo() -> Either<(), !> {\n+    Either::A(())\n+}\n+\n+fn main() {\n+    let Either::A(()) = foo();\n+}"}, {"sha": "e41baf862180d97103f5a39461db13ccf760ffeb", "filename": "src/test/ui/never_type/exhaustive_patterns.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fexhaustive_patterns.stderr?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,25 @@\n+error[E0005]: refutable pattern in local binding: `Either::B(_)` not covered\n+  --> $DIR/exhaustive_patterns.rs:20:9\n+   |\n+LL |     let Either::A(()) = foo();\n+   |         ^^^^^^^^^^^^^ pattern `Either::B(_)` not covered\n+   |\n+   = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n+   = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n+note: `Either<(), !>` defined here\n+  --> $DIR/exhaustive_patterns.rs:12:5\n+   |\n+LL | enum Either<A, B> {\n+   |      ------\n+LL |     A(A),\n+LL |     B(inner::Wrapper<B>),\n+   |     ^ not covered\n+   = note: the matched value is of type `Either<(), !>`\n+help: you might want to use `if let` to ignore the variant that isn't matched\n+   |\n+LL |     if let Either::A(()) = foo() { todo!() }\n+   |     ++                           ~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0005`."}, {"sha": "14460dea5b5270a03e3e4f69071be2929c477260", "filename": "src/test/ui/nll/user-annotations/ascribed-type-wf.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fascribed-type-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fascribed-type-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fascribed-type-wf.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// known-bug: #101350\n+\n+trait Trait {\n+    type Ty;\n+}\n+\n+impl Trait for &'static () {\n+    type Ty = ();\n+}\n+\n+fn extend<'a>() {\n+    None::<<&'a () as Trait>::Ty>;\n+}\n+\n+fn main() {}"}, {"sha": "c077921c0bdd20f0d8556627ca849e802a2f0d9d", "filename": "src/test/ui/traits/suggest-fully-qualified-closure.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,24 @@\n+// check-fail\n+// known-bug: #103705\n+// normalize-stderr-test \"\\[closure@.*\\]\" -> \"[closure@]\"\n+// normalize-stderr-test \"\\+* ~\" -> \"+++ ~\"\n+\n+// The output of this currently suggests writing a closure in the qualified path.\n+\n+trait MyTrait<T> {\n+   fn lol<F:FnOnce()>(&self, f:F) -> u16;\n+}\n+\n+struct Qqq;\n+\n+impl MyTrait<u32> for Qqq{\n+   fn lol<F:FnOnce()>(&self, _f:F) -> u16 { 5 }\n+}\n+impl MyTrait<u64> for Qqq{\n+   fn lol<F:FnOnce()>(&self, _f:F) -> u16 { 6 }\n+}\n+\n+fn main() {\n+    let q = Qqq;\n+    q.lol(||());\n+}"}, {"sha": "3df623c14c3d6c8324253791a4b296e6b9a4ed9b", "filename": "src/test/ui/traits/suggest-fully-qualified-closure.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-fully-qualified-closure.stderr?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,34 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/suggest-fully-qualified-closure.rs:23:7\n+   |\n+LL |     q.lol(||());\n+   |       ^^^\n+   |\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     <Qqq as MyTrait<T>>::lol::<[closure@]>(&q, ||());\n+   |     +++ ~\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/suggest-fully-qualified-closure.rs:23:7\n+   |\n+LL |     q.lol(||());\n+   |       ^^^\n+   |\n+note: multiple `impl`s satisfying `Qqq: MyTrait<_>` found\n+  --> $DIR/suggest-fully-qualified-closure.rs:14:1\n+   |\n+LL | impl MyTrait<u32> for Qqq{\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl MyTrait<u64> for Qqq{\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     <Qqq as MyTrait<T>>::lol::<[closure@]>(&q, ||());\n+   |     +++ ~\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "9d5341dab42f3a416722b225498e43e30c210664", "filename": "src/test/ui/typeck/issue-103899.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.rs?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,33 @@\n+// check-fail\n+// failure-status: 101\n+// normalize-stderr-test \"note: .*\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n+// normalize-stderr-test \" .*\\n\" -> \"\"\n+// normalize-stderr-test \"  .*\\n\" -> \"\"\n+// known-bug: #103899\n+\n+trait BaseWithAssoc {\n+    type Assoc;\n+}\n+\n+trait WrapperWithAssoc {\n+    type BaseAssoc: BaseWithAssoc;\n+}\n+\n+struct Wrapper<B> {\n+    inner: B,\n+}\n+\n+struct ProjectToBase<T: BaseWithAssoc> {\n+    data_type_h: T::Assoc,\n+}\n+\n+struct DoubleProject<L: WrapperWithAssoc> {\n+    buffer: Wrapper<ProjectToBase<L::BaseAssoc>>,\n+}\n+\n+fn trigger<L: WrapperWithAssoc<BaseAssoc = ()>>() -> DoubleProject<L> {\n+    loop {}\n+}\n+\n+fn main() {}"}, {"sha": "836c6ee486f513902f852131fd571f1a623bd40e", "filename": "src/test/ui/typeck/issue-103899.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-103899.stderr?ref=96ddd32c4bfb1d78f0cd03eb068b1710a8cebeef", "patch": "@@ -0,0 +1,12 @@\n+\n+stack\n+error:\n+\n+\n+\n+\n+\n+\n+\n+\n+query#0#1end\n\\ No newline at end of file"}]}