{"sha": "3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmY2RkMWJjZGY4YTkzNzY5Zjc0YjdiNGNhNWJhMDQzYWQzMTZlNDY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-08T17:44:21Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-09T11:32:03Z"}, "message": "Add `AttrId` to track attribute sources", "tree": {"sha": "4632994864f273657d838f8f6427e1257f63434a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4632994864f273657d838f8f6427e1257f63434a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46", "html_url": "https://github.com/rust-lang/rust/commit/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "html_url": "https://github.com/rust-lang/rust/commit/99ed68a109c9f7e0dc6a82ccb5bf854d60943957"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "1549024c145e76e8cba3915b64c4c2b0396e8716", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46", "patch": "@@ -9,7 +9,7 @@ use std::{\n use base_db::CrateId;\n use cfg::{CfgExpr, CfgOptions};\n use either::Either;\n-use hir_expand::{hygiene::Hygiene, name::AsName, AstId, InFile};\n+use hir_expand::{hygiene::Hygiene, name::AsName, AstId, AttrId, InFile};\n use itertools::Itertools;\n use la_arena::ArenaMap;\n use mbe::ast_to_token_tree;\n@@ -98,13 +98,16 @@ impl RawAttrs {\n     pub(crate) fn new(owner: &dyn ast::AttrsOwner, hygiene: &Hygiene) -> Self {\n         let entries = collect_attrs(owner)\n             .enumerate()\n-            .flat_map(|(i, attr)| match attr {\n-                Either::Left(attr) => Attr::from_src(attr, hygiene, i as u32),\n-                Either::Right(comment) => comment.doc_comment().map(|doc| Attr {\n-                    index: i as u32,\n-                    input: Some(AttrInput::Literal(SmolStr::new(doc))),\n-                    path: Interned::new(ModPath::from(hir_expand::name!(doc))),\n-                }),\n+            .flat_map(|(i, attr)| {\n+                let index = AttrId(i as u32);\n+                match attr {\n+                    Either::Left(attr) => Attr::from_src(attr, hygiene, index),\n+                    Either::Right(comment) => comment.doc_comment().map(|doc| Attr {\n+                        index,\n+                        input: Some(AttrInput::Literal(SmolStr::new(doc))),\n+                        path: Interned::new(ModPath::from(hir_expand::name!(doc))),\n+                    }),\n+                }\n             })\n             .collect::<Arc<_>>();\n \n@@ -560,8 +563,8 @@ impl AttrSourceMap {\n     /// the attribute represented by `Attr`.\n     pub fn source_of(&self, attr: &Attr) -> InFile<&Either<ast::Attr, ast::Comment>> {\n         self.attrs\n-            .get(attr.index as usize)\n-            .unwrap_or_else(|| panic!(\"cannot find `Attr` at index {}\", attr.index))\n+            .get(attr.index.0 as usize)\n+            .unwrap_or_else(|| panic!(\"cannot find `Attr` at index {:?}\", attr.index))\n             .as_ref()\n     }\n }\n@@ -572,7 +575,7 @@ pub struct DocsRangeMap {\n     // (docstring-line-range, attr_index, attr-string-range)\n     // a mapping from the text range of a line of the [`Documentation`] to the attribute index and\n     // the original (untrimmed) syntax doc line\n-    mapping: Vec<(TextRange, u32, TextRange)>,\n+    mapping: Vec<(TextRange, AttrId, TextRange)>,\n }\n \n impl DocsRangeMap {\n@@ -585,7 +588,7 @@ impl DocsRangeMap {\n \n         let relative_range = range - line_docs_range.start();\n \n-        let &InFile { file_id, value: ref source } = &self.source[idx as usize];\n+        let &InFile { file_id, value: ref source } = &self.source[idx.0 as usize];\n         match source {\n             Either::Left(_) => None, // FIXME, figure out a nice way to handle doc attributes here\n             // as well as for whats done in syntax highlight doc injection\n@@ -606,7 +609,7 @@ impl DocsRangeMap {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {\n-    index: u32,\n+    pub(crate) index: AttrId,\n     pub(crate) path: Interned<ModPath>,\n     pub(crate) input: Option<AttrInput>,\n }\n@@ -620,7 +623,7 @@ pub enum AttrInput {\n }\n \n impl Attr {\n-    fn from_src(ast: ast::Attr, hygiene: &Hygiene, index: u32) -> Option<Attr> {\n+    fn from_src(ast: ast::Attr, hygiene: &Hygiene, index: AttrId) -> Option<Attr> {\n         let path = Interned::new(ModPath::from_src(ast.path()?, hygiene)?);\n         let input = if let Some(ast::Expr::Literal(lit)) = ast.expr() {\n             let value = match lit.kind() {"}, {"sha": "8637abc6afe2d11d1e74bca9055e612404a1e8c4", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=3fcdd1bcdf8a93769f74b7b4ca5ba043ad316e46", "patch": "@@ -294,6 +294,9 @@ pub enum MacroCallKind {\n     Derive { ast_id: AstId<ast::Item>, derive_name: String },\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct AttrId(pub u32);\n+\n impl MacroCallKind {\n     fn file_id(&self) -> HirFileId {\n         match self {"}]}