{"sha": "874d683bfa1b916cb9e3bc57d132a62afdd411fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NGQ2ODNiZmExYjkxNmNiOWUzYmM1N2QxMzJhNjJhZmRkNDExZmU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T08:34:34Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-20T08:34:34Z"}, "message": "improve method names and add documentation", "tree": {"sha": "14e1f10e8c719967428dfb8e5a01de7d07ac87d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14e1f10e8c719967428dfb8e5a01de7d07ac87d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/874d683bfa1b916cb9e3bc57d132a62afdd411fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXZ6qaAAoJEFbW7qD8Z6xGOCgQAK6KD5iq3Vgl9rBo9pPRPZ+z\ns+mk7vJNwomvO0JvVZBE651QbgDxfGz2ZVW9yVvgYLrVBoNsNIC3unoxPfM5fD4x\nNp6+3pzniSffOc3dCL5BoJ2HB2AAkv9uydiG+loi38dG34AVEHonn6AE8+e2X4hr\nqsenKKBTQqUc/xIPt+/NBTcfKIsgc4xCowyRGDbLFBaf7a5D3RWPUqnvD+f8seVY\nOELvgnThfzyv7S2bsbDW3T7h8gzGKkQ31zzCpkSfa+pPa3FbvH4YE46GHPxileiY\nK6NyZH5y234sEoRJu8lDpxLhlcElvgCt1cGO0BWWWszc3yhutbXDUclyxJIkupgM\n6ww95QWNDji1IUeyMzRA+x/m5TigdteMbcRghu5duPI83uAfAoBPFiBGqoBeonQE\nxeffP/jZThAXEKmFu5xTh5+kf1TtKhPoH/SsgT4pN2EnWPzmc3vwFrpLpw/e/YRN\n1th7aPMTxFzticVPTDzkZtc56wMd0TJ+5pjYxIC7EZnRoDtStIK6hMiHjOxoIiGd\nsV9OLMjb4owXXadT3oiVnr0Nij00IZABHVB6FK/k4wONFjS8bL/F5pciYK3DuePO\nVURtZEDf+cRrIrOpBJactARSEQiFZ5KAhbThiHf13H/ixBOGMlCZlghm6f8IuS61\nr/U0mRrKJpxW6ujlUuwI\n=lc04\n-----END PGP SIGNATURE-----", "payload": "tree 14e1f10e8c719967428dfb8e5a01de7d07ac87d1\nparent 00eb198a82376eeb608c32e6d4252743f6dcfc87\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466411674 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466411674 +0200\n\nimprove method names and add documentation"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/874d683bfa1b916cb9e3bc57d132a62afdd411fe", "html_url": "https://github.com/rust-lang/rust/commit/874d683bfa1b916cb9e3bc57d132a62afdd411fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/874d683bfa1b916cb9e3bc57d132a62afdd411fe/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00eb198a82376eeb608c32e6d4252743f6dcfc87", "url": "https://api.github.com/repos/rust-lang/rust/commits/00eb198a82376eeb608c32e6d4252743f6dcfc87", "html_url": "https://github.com/rust-lang/rust/commit/00eb198a82376eeb608c32e6d4252743f6dcfc87"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "0492a3dfc7a6f9862cf187c4d0f3fcd4da797fc1", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/874d683bfa1b916cb9e3bc57d132a62afdd411fe/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/874d683bfa1b916cb9e3bc57d132a62afdd411fe/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=874d683bfa1b916cb9e3bc57d132a62afdd411fe", "patch": "@@ -667,6 +667,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         Ok(if not_null { nndiscr } else { 1 - nndiscr })\n     }\n \n+    /// applies the binary operation `op` to the two operands and writes a tuple of the result\n+    /// and a boolean signifying the potential overflow to the destination\n     fn intrinsic_with_overflow(\n         &mut self,\n         op: mir::BinOp,\n@@ -686,7 +688,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         self.memory.write_bool(dest.offset(offset), overflowed)\n     }\n \n-    fn math(\n+    /// extracts the lhs and rhs primval from the operands and applies the binary op\n+    fn eval_binop(\n         &mut self,\n         op: mir::BinOp,\n         left: &mir::Operand<'tcx>,\n@@ -703,14 +706,15 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         primval::binary_op(op, left_val, right_val)\n     }\n \n+    /// applies the binary operation `op` to the arguments and writes the result to the destination\n     fn intrinsic_overflowing(\n         &mut self,\n         op: mir::BinOp,\n         left: &mir::Operand<'tcx>,\n         right: &mir::Operand<'tcx>,\n         dest: Pointer,\n     ) -> EvalResult<'tcx, bool> {\n-        match self.math(op, left, right) {\n+        match self.eval_binop(op, left, right) {\n             Ok(val) => {\n                 self.memory.write_primval(dest, val)?;\n                 Ok(false)\n@@ -947,7 +951,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             BinaryOp(bin_op, ref left, ref right) => {\n-                let result = self.math(bin_op, left, right)?;\n+                let result = self.eval_binop(bin_op, left, right)?;\n                 self.memory.write_primval(dest, result)?;\n             }\n "}]}