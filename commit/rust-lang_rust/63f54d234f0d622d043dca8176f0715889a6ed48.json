{"sha": "63f54d234f0d622d043dca8176f0715889a6ed48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzZjU0ZDIzNGYwZDYyMmQwNDNkY2E4MTc2ZjA3MTU4ODlhNmVkNDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T18:02:08Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-27T18:02:08Z"}, "message": "dont leak Name details in testing", "tree": {"sha": "f00675907234c81c0538c5a9178dad09e4169d63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f00675907234c81c0538c5a9178dad09e4169d63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63f54d234f0d622d043dca8176f0715889a6ed48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63f54d234f0d622d043dca8176f0715889a6ed48", "html_url": "https://github.com/rust-lang/rust/commit/63f54d234f0d622d043dca8176f0715889a6ed48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63f54d234f0d622d043dca8176f0715889a6ed48/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9f55029b9db3bcd439d31c5007785299f7d4025", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f55029b9db3bcd439d31c5007785299f7d4025", "html_url": "https://github.com/rust-lang/rust/commit/a9f55029b9db3bcd439d31c5007785299f7d4025"}], "stats": {"total": 81, "additions": 62, "deletions": 19}, "files": [{"sha": "ca20f064f1151c12d0dde1697e111f301255bf0d", "filename": "crates/ra_hir/src/module/nameres/tests.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/63f54d234f0d622d043dca8176f0715889a6ed48/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f54d234f0d622d043dca8176f0715889a6ed48/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres%2Ftests.rs?ref=63f54d234f0d622d043dca8176f0715889a6ed48", "patch": "@@ -2,14 +2,13 @@ use std::sync::Arc;\n \n use salsa::Database;\n use ra_db::{FilesDatabase, CrateGraph};\n-use ra_syntax::SmolStr;\n use relative_path::RelativePath;\n+use test_utils::assert_eq_text;\n \n use crate::{\n     self as hir,\n     db::HirDatabase,\n     mock::MockDatabase,\n-    Name,\n };\n \n fn item_map(fixture: &str) -> (Arc<hir::ItemMap>, hir::ModuleId) {\n@@ -22,6 +21,35 @@ fn item_map(fixture: &str) -> (Arc<hir::ItemMap>, hir::ModuleId) {\n     (db.item_map(source_root).unwrap(), module_id)\n }\n \n+fn check_module_item_map(map: &hir::ItemMap, module_id: hir::ModuleId, expected: &str) {\n+    let mut lines = map.per_module[&module_id]\n+        .items\n+        .iter()\n+        .map(|(name, res)| format!(\"{}: {}\", name, dump_resolution(res)))\n+        .collect::<Vec<_>>();\n+    lines.sort();\n+    let actual = lines.join(\"\\n\");\n+    let expected = expected\n+        .trim()\n+        .lines()\n+        .map(|it| it.trim())\n+        .collect::<Vec<_>>()\n+        .join(\"\\n\");\n+    assert_eq_text!(&actual, &expected);\n+\n+    fn dump_resolution(resolution: &hir::Resolution) -> &'static str {\n+        match (\n+            resolution.def_id.types.is_some(),\n+            resolution.def_id.values.is_some(),\n+        ) {\n+            (true, true) => \"t v\",\n+            (true, false) => \"t\",\n+            (false, true) => \"v\",\n+            (false, false) => \"_\",\n+        }\n+    }\n+}\n+\n #[test]\n fn item_map_smoke_test() {\n     let (item_map, module_id) = item_map(\n@@ -39,13 +67,18 @@ fn item_map_smoke_test() {\n         pub struct Baz;\n     \",\n     );\n-    let name = Name::new(SmolStr::from(\"Baz\"));\n-    let resolution = &item_map.per_module[&module_id].items[&name];\n-    assert!(resolution.def_id.take_types().is_some());\n+    check_module_item_map(\n+        &item_map,\n+        module_id,\n+        \"\n+            Baz: t v\n+            foo: t\n+        \",\n+    );\n }\n \n #[test]\n-fn test_self() {\n+fn item_map_using_self() {\n     let (item_map, module_id) = item_map(\n         \"\n             //- /lib.rs\n@@ -58,9 +91,14 @@ fn test_self() {\n             pub struct Baz;\n         \",\n     );\n-    let name = Name::new(SmolStr::from(\"Baz\"));\n-    let resolution = &item_map.per_module[&module_id].items[&name];\n-    assert!(resolution.def_id.take_types().is_some());\n+    check_module_item_map(\n+        &item_map,\n+        module_id,\n+        \"\n+            Baz: t v\n+            foo: t\n+        \",\n+    );\n }\n \n #[test]\n@@ -91,9 +129,14 @@ fn item_map_across_crates() {\n     let module_id = module.module_id;\n     let item_map = db.item_map(source_root).unwrap();\n \n-    let name = Name::new(SmolStr::from(\"Baz\"));\n-    let resolution = &item_map.per_module[&module_id].items[&name];\n-    assert!(resolution.def_id.take_types().is_some());\n+    check_module_item_map(\n+        &item_map,\n+        module_id,\n+        \"\n+            Baz: t v\n+            test_crate: t\n+        \",\n+    );\n }\n \n #[test]"}, {"sha": "e4fc141a67611c366f03026d0c908ebde4439377", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63f54d234f0d622d043dca8176f0715889a6ed48/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63f54d234f0d622d043dca8176f0715889a6ed48/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=63f54d234f0d622d043dca8176f0715889a6ed48", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{ast, SmolStr};\n /// `Name` is a wrapper around string, which is used in hir for both references\n /// and declarations. In theory, names should also carry hygene info, but we are\n /// not there yet!\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+#[derive(Clone, PartialEq, Eq, Hash)]\n pub struct Name {\n     text: SmolStr,\n }\n@@ -16,6 +16,12 @@ impl fmt::Display for Name {\n     }\n }\n \n+impl fmt::Debug for Name {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&self.text, f)\n+    }\n+}\n+\n impl Name {\n     pub(crate) fn as_known_name(&self) -> Option<KnownName> {\n         let name = match self.text.as_str() {\n@@ -38,15 +44,9 @@ impl Name {\n         Some(name)\n     }\n \n-    #[cfg(not(test))]\n     fn new(text: SmolStr) -> Name {\n         Name { text }\n     }\n-\n-    #[cfg(test)]\n-    pub(crate) fn new(text: SmolStr) -> Name {\n-        Name { text }\n-    }\n }\n \n pub(crate) trait AsName {"}]}