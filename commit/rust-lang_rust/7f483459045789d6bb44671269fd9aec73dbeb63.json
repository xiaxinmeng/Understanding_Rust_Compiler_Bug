{"sha": "7f483459045789d6bb44671269fd9aec73dbeb63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNDgzNDU5MDQ1Nzg5ZDZiYjQ0NjcxMjY5ZmQ5YWVjNzNkYmViNjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-14T02:25:26Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-25T03:59:54Z"}, "message": "std: Remove must deferred sending functions\n\nThese functions are all unnecessary now, and they only have meaning in the M:N\ncontext. Removing these functions uncovered a bug in the librustuv timer\nbindings, but it was fairly easy to cover (and the test is already committed).\n\nThese cannot be completely removed just yet due to their usage in the WaitQueue\nof extra::sync, and until the mutex in libextra is rewritten it will not be\npossible to remove the deferred sends for channels.", "tree": {"sha": "e6454b48db1cafd14dc2dc29a1355fc9f710bbb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6454b48db1cafd14dc2dc29a1355fc9f710bbb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f483459045789d6bb44671269fd9aec73dbeb63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f483459045789d6bb44671269fd9aec73dbeb63", "html_url": "https://github.com/rust-lang/rust/commit/7f483459045789d6bb44671269fd9aec73dbeb63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f483459045789d6bb44671269fd9aec73dbeb63/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c4af5e3d93fe2953c31f8a76ee2aed15069204a", "html_url": "https://github.com/rust-lang/rust/commit/1c4af5e3d93fe2953c31f8a76ee2aed15069204a"}], "stats": {"total": 62, "additions": 19, "deletions": 43}, "files": [{"sha": "2a53775a907d0d946396b8957d6d8bbb72bf9655", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=7f483459045789d6bb44671269fd9aec73dbeb63", "patch": "@@ -79,7 +79,7 @@ impl WaitQueue {\n \n     fn wait_end(&self) -> WaitEnd {\n         let (wait_end, signal_end) = Chan::new();\n-        self.tail.send_deferred(signal_end);\n+        assert!(self.tail.try_send_deferred(signal_end));\n         wait_end\n     }\n }"}, {"sha": "4f904ee6e6dd9985e2687d51bc816292fee3d092", "filename": "src/libgreen/simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibgreen%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibgreen%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsimple.rs?ref=7f483459045789d6bb44671269fd9aec73dbeb63", "patch": "@@ -54,7 +54,7 @@ impl Runtime for SimpleTask {\n         }\n         Local::put(cur_task);\n     }\n-    fn reawaken(mut ~self, mut to_wake: ~Task) {\n+    fn reawaken(mut ~self, mut to_wake: ~Task, _can_resched: bool) {\n         let me = &mut *self as *mut SimpleTask;\n         to_wake.put_runtime(self as ~Runtime);\n         unsafe {"}, {"sha": "eff80df2a118e7d7d42f5aaca68a5d0e28d3ad75", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=7f483459045789d6bb44671269fd9aec73dbeb63", "patch": "@@ -346,7 +346,7 @@ impl Runtime for GreenTask {\n         }\n     }\n \n-    fn reawaken(mut ~self, to_wake: ~Task) {\n+    fn reawaken(mut ~self, to_wake: ~Task, can_resched: bool) {\n         self.put_task(to_wake);\n         assert!(self.sched.is_none());\n \n@@ -372,10 +372,15 @@ impl Runtime for GreenTask {\n         match running_task.maybe_take_runtime::<GreenTask>() {\n             Some(mut running_green_task) => {\n                 running_green_task.put_task(running_task);\n-                let sched = running_green_task.sched.take_unwrap();\n+                let mut sched = running_green_task.sched.take_unwrap();\n \n                 if sched.pool_id == self.pool_id {\n-                    sched.run_task(running_green_task, self);\n+                    if can_resched {\n+                        sched.run_task(running_green_task, self);\n+                    } else {\n+                        sched.enqueue_task(self);\n+                        running_green_task.put_with_sched(sched);\n+                    }\n                 } else {\n                     self.reawaken_remotely();\n "}, {"sha": "ff4481e8b97f45b588239b294f56a47590c0e595", "filename": "src/librustuv/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibrustuv%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibrustuv%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fpipe.rs?ref=7f483459045789d6bb44671269fd9aec73dbeb63", "patch": "@@ -210,7 +210,7 @@ extern fn listen_cb(server: *uvll::uv_stream_t, status: libc::c_int) {\n         }\n         n => Err(uv_error_to_io_error(UvError(n)))\n     };\n-    pipe.outgoing.send_deferred(msg);\n+    pipe.outgoing.send(msg);\n }\n \n impl Drop for PipeListener {"}, {"sha": "0f81966b169a2c531f1998336411ca1cb2d6181f", "filename": "src/librustuv/signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibrustuv%2Fsignal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibrustuv%2Fsignal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fsignal.rs?ref=7f483459045789d6bb44671269fd9aec73dbeb63", "patch": "@@ -52,7 +52,7 @@ impl SignalWatcher {\n extern fn signal_cb(handle: *uvll::uv_signal_t, signum: c_int) {\n     let s: &mut SignalWatcher = unsafe { UvHandle::from_uv_handle(&handle) };\n     assert_eq!(signum as int, s.signal as int);\n-    s.channel.try_send_deferred(s.signal);\n+    s.channel.try_send(s.signal);\n }\n \n impl HomingIO for SignalWatcher {"}, {"sha": "e87090753f59cd74a67cb62c962ba9334df3e414", "filename": "src/librustuv/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibrustuv%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibrustuv%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ftimer.rs?ref=7f483459045789d6bb44671269fd9aec73dbeb63", "patch": "@@ -140,9 +140,9 @@ extern fn timer_cb(handle: *uvll::uv_timer_t, status: c_int) {\n         WakeTask(task) => {\n             task.wake().map(|t| t.reawaken(true));\n         }\n-        SendOnce(chan) => { chan.try_send_deferred(()); }\n+        SendOnce(chan) => { chan.try_send(()); }\n         SendMany(chan, id) => {\n-            chan.try_send_deferred(());\n+            chan.try_send(());\n \n             // Note that the above operation could have performed some form of\n             // scheduling. This means that the timer may have decided to insert"}, {"sha": "21db234122b2e662358c712199004c9504e9e658", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f483459045789d6bb44671269fd9aec73dbeb63/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=7f483459045789d6bb44671269fd9aec73dbeb63", "patch": "@@ -496,7 +496,7 @@ impl Packet {\n         match self.channels.fetch_sub(1, SeqCst) {\n             1 => {\n                 match self.cnt.swap(DISCONNECTED, SeqCst) {\n-                    -1 => { self.wakeup(false); }\n+                    -1 => { self.wakeup(true); }\n                     DISCONNECTED => {}\n                     n => { assert!(n >= 0); }\n                 }\n@@ -537,9 +537,6 @@ impl<T: Send> Chan<T> {\n     /// port.\n     ///\n     /// Rust channels are infinitely buffered so this method will never block.\n-    /// This method may trigger a rescheduling, however, in order to wake up a\n-    /// blocked receiver (if one is present). If no scheduling is desired, then\n-    /// the `send_deferred` guarantees that there will be no reschedulings.\n     ///\n     /// # Failure\n     ///\n@@ -561,15 +558,6 @@ impl<T: Send> Chan<T> {\n         }\n     }\n \n-    /// This function is equivalent in the semantics of `send`, but it\n-    /// guarantees that a rescheduling will never occur when this method is\n-    /// called.\n-    pub fn send_deferred(&self, t: T) {\n-        if !self.try_send_deferred(t) {\n-            fail!(\"sending on a closed channel\");\n-        }\n-    }\n-\n     /// Attempts to send a value on this channel, returning whether it was\n     /// successfully sent.\n     ///\n@@ -585,9 +573,8 @@ impl<T: Send> Chan<T> {\n     /// be tolerated, then this method should be used instead.\n     pub fn try_send(&self, t: T) -> bool { self.try(t, true) }\n \n-    /// This function is equivalent in the semantics of `try_send`, but it\n-    /// guarantees that a rescheduling will never occur when this method is\n-    /// called.\n+    /// This function will not stick around for very long. The purpose of this\n+    /// function is to guarantee that no rescheduling is performed.\n     pub fn try_send_deferred(&self, t: T) -> bool { self.try(t, false) }\n \n     fn try(&self, t: T, can_resched: bool) -> bool {\n@@ -649,25 +636,9 @@ impl<T: Send> SharedChan<T> {\n         }\n     }\n \n-    /// This function is equivalent in the semantics of `send`, but it\n-    /// guarantees that a rescheduling will never occur when this method is\n-    /// called.\n-    pub fn send_deferred(&self, t: T) {\n-        if !self.try_send_deferred(t) {\n-            fail!(\"sending on a closed channel\");\n-        }\n-    }\n-\n     /// Equivalent method to `try_send` on the `Chan` type (using the same\n     /// semantics)\n-    pub fn try_send(&self, t: T) -> bool { self.try(t, true) }\n-\n-    /// This function is equivalent in the semantics of `try_send`, but it\n-    /// guarantees that a rescheduling will never occur when this method is\n-    /// called.\n-    pub fn try_send_deferred(&self, t: T) -> bool { self.try(t, false) }\n-\n-    fn try(&self, t: T, can_resched: bool) -> bool {\n+    pub fn try_send(&self, t: T) -> bool {\n         unsafe {\n             // Note that the multiple sender case is a little tricker\n             // semantically than the single sender case. The logic for\n@@ -704,7 +675,7 @@ impl<T: Send> SharedChan<T> {\n \n             match (*packet).increment() {\n                 DISCONNECTED => {} // oh well, we tried\n-                -1 => { (*packet).wakeup(can_resched); }\n+                -1 => { (*packet).wakeup(true); }\n                 n => {\n                     if n > 0 && n % RESCHED_FREQ == 0 {\n                         let task: ~Task = Local::take();"}]}