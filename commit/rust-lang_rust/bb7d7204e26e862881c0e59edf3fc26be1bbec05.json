{"sha": "bb7d7204e26e862881c0e59edf3fc26be1bbec05", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiN2Q3MjA0ZTI2ZTg2Mjg4MWMwZTU5ZWRmM2ZjMjZiZTFiYmVjMDU=", "commit": {"author": {"name": "Nick Desaulniers", "email": "ndesaulniers@mozilla.com", "date": "2013-01-16T01:18:00Z"}, "committer": {"name": "Nick Desaulniers", "email": "ndesaulniers@mozilla.com", "date": "2013-01-16T01:18:00Z"}, "message": "Swap return value order in pipes::oneshot Issue #4496", "tree": {"sha": "f25420d15d6bbf81ae424d3ab31e68df7de21367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25420d15d6bbf81ae424d3ab31e68df7de21367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb7d7204e26e862881c0e59edf3fc26be1bbec05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb7d7204e26e862881c0e59edf3fc26be1bbec05", "html_url": "https://github.com/rust-lang/rust/commit/bb7d7204e26e862881c0e59edf3fc26be1bbec05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb7d7204e26e862881c0e59edf3fc26be1bbec05/comments", "author": null, "committer": null, "parents": [{"sha": "eb8fd119c65c67f3b1b8268cc7341c22d39b7b61", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8fd119c65c67f3b1b8268cc7341c22d39b7b61", "html_url": "https://github.com/rust-lang/rust/commit/eb8fd119c65c67f3b1b8268cc7341c22d39b7b61"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "2ff4effbd6ee0d18b0530260f704e0ddbdfc732c", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb7d7204e26e862881c0e59edf3fc26be1bbec05/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7d7204e26e862881c0e59edf3fc26be1bbec05/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=bb7d7204e26e862881c0e59edf3fc26be1bbec05", "patch": "@@ -1229,8 +1229,9 @@ pub type ChanOne<T: Owned> = oneshot::client::Oneshot<T>;\n pub type PortOne<T: Owned> = oneshot::server::Oneshot<T>;\n \n /// Initialiase a (send-endpoint, recv-endpoint) oneshot pipe pair.\n-pub fn oneshot<T: Owned>() -> (ChanOne<T>, PortOne<T>) {\n-    oneshot::init()\n+pub fn oneshot<T: Owned>() -> (PortOne<T>, ChanOne<T>) {\n+    let (chan, port) = oneshot::init();\n+    (port, chan)\n }\n \n /**"}, {"sha": "d3002ba931622fa73a0e8dcf9c8fa1def22c7652", "filename": "src/libcore/private.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb7d7204e26e862881c0e59edf3fc26be1bbec05/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7d7204e26e862881c0e59edf3fc26be1bbec05/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=bb7d7204e26e862881c0e59edf3fc26be1bbec05", "patch": "@@ -424,8 +424,8 @@ pub unsafe fn unwrap_shared_mutable_state<T: Owned>(rc: SharedMutableState<T>)\n \n     do task::unkillable {\n         let ptr: ~ArcData<T> = cast::reinterpret_cast(&rc.data);\n-        let (c1,p1) = pipes::oneshot(); // ()\n-        let (c2,p2) = pipes::oneshot(); // bool\n+        let (p1,c1) = pipes::oneshot(); // ()\n+        let (p2,c2) = pipes::oneshot(); // bool\n         let server: UnwrapProto = ~mut Some((move c1,move p2));\n         let serverp: int = cast::transmute(move server);\n         // Try to put our server end in the unwrapper slot."}, {"sha": "e48dc9acaeb9558943a68cb83f39fcd84d117a36", "filename": "src/libstd/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb7d7204e26e862881c0e59edf3fc26be1bbec05/src%2Flibstd%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7d7204e26e862881c0e59edf3fc26be1bbec05/src%2Flibstd%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Farc.rs?ref=bb7d7204e26e862881c0e59edf3fc26be1bbec05", "patch": "@@ -512,7 +512,7 @@ mod tests {\n     fn test_mutex_arc_condvar() {\n         let arc = ~MutexARC(false);\n         let arc2 = ~arc.clone();\n-        let (c,p) = pipes::oneshot();\n+        let (p,c) = pipes::oneshot();\n         let (c,p) = (~mut Some(move c), ~mut Some(move p));\n         do task::spawn |move arc2, move p| {\n             // wait until parent gets in"}, {"sha": "f12114bfd8ed559fe20a2c71391250f791463993", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb7d7204e26e862881c0e59edf3fc26be1bbec05/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb7d7204e26e862881c0e59edf3fc26be1bbec05/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=bb7d7204e26e862881c0e59edf3fc26be1bbec05", "patch": "@@ -109,7 +109,7 @@ impl<Q: Owned> &Sem<Q> {\n                 state.count -= 1;\n                 if state.count < 0 {\n                     // Create waiter nobe.\n-                    let (SignalEnd, WaitEnd) = pipes::oneshot();\n+                    let (WaitEnd, SignalEnd) = pipes::oneshot();\n                     // Tell outer scope we need to block.\n                     waiter_nobe = Some(move WaitEnd);\n                     // Enqueue ourself.\n@@ -216,7 +216,7 @@ impl &Condvar {\n      */\n     fn wait_on(condvar_id: uint) {\n         // Create waiter nobe.\n-        let (SignalEnd, WaitEnd) = pipes::oneshot();\n+        let (WaitEnd, SignalEnd) = pipes::oneshot();\n         let mut WaitEnd   = Some(move WaitEnd);\n         let mut SignalEnd = Some(move SignalEnd);\n         let mut reacquire = None;"}]}