{"sha": "faf1891deb2633fe4040de8b71fd7b2045c45dc5", "node_id": "C_kwDOAAsO6NoAKGZhZjE4OTFkZWIyNjMzZmU0MDQwZGU4YjcxZmQ3YjIwNDVjNDVkYzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T00:58:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-27T00:58:50Z"}, "message": "Auto merge of #104818 - scottmcm:refactor-extend-func, r=the8472\n\nStop peeling the last iteration of the loop in `Vec::resize_with`\n\n`resize_with` uses the `ExtendWith` code that peels the last iteration:\nhttps://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/library/alloc/src/vec/mod.rs#L2525-L2529\n\nBut that's kinda weird for `ExtendFunc` because it does the same thing on the last iteration anyway:\nhttps://github.com/rust-lang/rust/blob/341d8b8a2c290b4535e965867e876b095461ff6e/library/alloc/src/vec/mod.rs#L2494-L2502\n\nSo this just has it use the normal `extend`-from-`TrustedLen` code instead.\n\nr? `@ghost`", "tree": {"sha": "baf896d46501fa2b94a56210391db2523a791748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baf896d46501fa2b94a56210391db2523a791748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/faf1891deb2633fe4040de8b71fd7b2045c45dc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/faf1891deb2633fe4040de8b71fd7b2045c45dc5", "html_url": "https://github.com/rust-lang/rust/commit/faf1891deb2633fe4040de8b71fd7b2045c45dc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/faf1891deb2633fe4040de8b71fd7b2045c45dc5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e9c86b3f3e96267ba2cd80f95f362ef0cce40b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e9c86b3f3e96267ba2cd80f95f362ef0cce40b", "html_url": "https://github.com/rust-lang/rust/commit/c0e9c86b3f3e96267ba2cd80f95f362ef0cce40b"}, {"sha": "9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d68a1a74c65245c9ae7b5db2c552c995697e8ef", "html_url": "https://github.com/rust-lang/rust/commit/9d68a1a74c65245c9ae7b5db2c552c995697e8ef"}], "stats": {"total": 150, "additions": 106, "deletions": 44}, "files": [{"sha": "e147af2ce39c68f905601bfc9c2c66e1b8c1687f", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 35, "deletions": 11, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=faf1891deb2633fe4040de8b71fd7b2045c45dc5", "patch": "@@ -2163,7 +2163,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     {\n         let len = self.len();\n         if new_len > len {\n-            self.extend_with(new_len - len, ExtendFunc(f));\n+            self.extend_trusted(iter::repeat_with(f).take(new_len - len));\n         } else {\n             self.truncate(new_len);\n         }\n@@ -2491,16 +2491,6 @@ impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n     }\n }\n \n-struct ExtendFunc<F>(F);\n-impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {\n-    fn next(&mut self) -> T {\n-        (self.0)()\n-    }\n-    fn last(mut self) -> T {\n-        (self.0)()\n-    }\n-}\n-\n impl<T, A: Allocator> Vec<T, A> {\n     #[cfg(not(no_global_oom_handling))]\n     /// Extend the vector by `n` values, using the given generator.\n@@ -2870,6 +2860,40 @@ impl<T, A: Allocator> Vec<T, A> {\n         }\n     }\n \n+    // specific extend for `TrustedLen` iterators, called both by the specializations\n+    // and internal places where resolving specialization makes compilation slower\n+    #[cfg(not(no_global_oom_handling))]\n+    fn extend_trusted(&mut self, iterator: impl iter::TrustedLen<Item = T>) {\n+        let (low, high) = iterator.size_hint();\n+        if let Some(additional) = high {\n+            debug_assert_eq!(\n+                low,\n+                additional,\n+                \"TrustedLen iterator's size hint is not exact: {:?}\",\n+                (low, high)\n+            );\n+            self.reserve(additional);\n+            unsafe {\n+                let ptr = self.as_mut_ptr();\n+                let mut local_len = SetLenOnDrop::new(&mut self.len);\n+                iterator.for_each(move |element| {\n+                    ptr::write(ptr.add(local_len.current_len()), element);\n+                    // Since the loop executes user code which can panic we have to update\n+                    // the length every step to correctly drop what we've written.\n+                    // NB can't overflow since we would have had to alloc the address space\n+                    local_len.increment_len(1);\n+                });\n+            }\n+        } else {\n+            // Per TrustedLen contract a `None` upper bound means that the iterator length\n+            // truly exceeds usize::MAX, which would eventually lead to a capacity overflow anyway.\n+            // Since the other branch already panics eagerly (via `reserve()`) we do the same here.\n+            // This avoids additional codegen for a fallback code path which would eventually\n+            // panic anyway.\n+            panic!(\"capacity overflow\");\n+        }\n+    }\n+\n     /// Creates a splicing iterator that replaces the specified range in the vector\n     /// with the given `replace_with` iterator and yields the removed items.\n     /// `replace_with` does not need to be the same length as `range`."}, {"sha": "6ce5a3a9f54eb76aa7e9903c56a8ebc28e9490b8", "filename": "library/alloc/src/vec/set_len_on_drop.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Falloc%2Fsrc%2Fvec%2Fset_len_on_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Falloc%2Fsrc%2Fvec%2Fset_len_on_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fset_len_on_drop.rs?ref=faf1891deb2633fe4040de8b71fd7b2045c45dc5", "patch": "@@ -18,6 +18,11 @@ impl<'a> SetLenOnDrop<'a> {\n     pub(super) fn increment_len(&mut self, increment: usize) {\n         self.local_len += increment;\n     }\n+\n+    #[inline]\n+    pub(super) fn current_len(&self) -> usize {\n+        self.local_len\n+    }\n }\n \n impl Drop for SetLenOnDrop<'_> {"}, {"sha": "56065ce565bfc492cf2724aa115a7f0f441e71a6", "filename": "library/alloc/src/vec/spec_extend.rs", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fspec_extend.rs?ref=faf1891deb2633fe4040de8b71fd7b2045c45dc5", "patch": "@@ -1,9 +1,8 @@\n use crate::alloc::Allocator;\n use core::iter::TrustedLen;\n-use core::ptr::{self};\n use core::slice::{self};\n \n-use super::{IntoIter, SetLenOnDrop, Vec};\n+use super::{IntoIter, Vec};\n \n // Specialization trait used for Vec::extend\n pub(super) trait SpecExtend<T, I> {\n@@ -24,36 +23,7 @@ where\n     I: TrustedLen<Item = T>,\n {\n     default fn spec_extend(&mut self, iterator: I) {\n-        // This is the case for a TrustedLen iterator.\n-        let (low, high) = iterator.size_hint();\n-        if let Some(additional) = high {\n-            debug_assert_eq!(\n-                low,\n-                additional,\n-                \"TrustedLen iterator's size hint is not exact: {:?}\",\n-                (low, high)\n-            );\n-            self.reserve(additional);\n-            unsafe {\n-                let mut ptr = self.as_mut_ptr().add(self.len());\n-                let mut local_len = SetLenOnDrop::new(&mut self.len);\n-                iterator.for_each(move |element| {\n-                    ptr::write(ptr, element);\n-                    ptr = ptr.add(1);\n-                    // Since the loop executes user code which can panic we have to bump the pointer\n-                    // after each step.\n-                    // NB can't overflow since we would have had to alloc the address space\n-                    local_len.increment_len(1);\n-                });\n-            }\n-        } else {\n-            // Per TrustedLen contract a `None` upper bound means that the iterator length\n-            // truly exceeds usize::MAX, which would eventually lead to a capacity overflow anyway.\n-            // Since the other branch already panics eagerly (via `reserve()`) we do the same here.\n-            // This avoids additional codegen for a fallback code path which would eventually\n-            // panic anyway.\n-            panic!(\"capacity overflow\");\n-        }\n+        self.extend_trusted(iterator)\n     }\n }\n "}, {"sha": "d947c7b0e30130617b7c4303fe8fcd33c2f9d9d1", "filename": "library/core/src/iter/adapters/take.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Ftake.rs?ref=faf1891deb2633fe4040de8b71fd7b2045c45dc5", "patch": "@@ -75,7 +75,6 @@ where\n     #[inline]\n     fn try_fold<Acc, Fold, R>(&mut self, init: Acc, fold: Fold) -> R\n     where\n-        Self: Sized,\n         Fold: FnMut(Acc, Self::Item) -> R,\n         R: Try<Output = Acc>,\n     {\n@@ -100,6 +99,26 @@ where\n \n     impl_fold_via_try_fold! { fold -> try_fold }\n \n+    #[inline]\n+    fn for_each<F: FnMut(Self::Item)>(mut self, f: F) {\n+        // The default implementation would use a unit accumulator, so we can\n+        // avoid a stateful closure by folding over the remaining number\n+        // of items we wish to return instead.\n+        fn check<'a, Item>(\n+            mut action: impl FnMut(Item) + 'a,\n+        ) -> impl FnMut(usize, Item) -> Option<usize> + 'a {\n+            move |more, x| {\n+                action(x);\n+                more.checked_sub(1)\n+            }\n+        }\n+\n+        let remaining = self.n;\n+        if remaining > 0 {\n+            self.iter.try_fold(remaining - 1, check(f));\n+        }\n+    }\n+\n     #[inline]\n     #[rustc_inherit_overflow_checks]\n     fn advance_by(&mut self, n: usize) -> Result<(), usize> {"}, {"sha": "ab2d0472b4701c205e0426582b5587c42baabeb9", "filename": "library/core/src/iter/sources/repeat_with.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fsources%2Frepeat_with.rs?ref=faf1891deb2633fe4040de8b71fd7b2045c45dc5", "patch": "@@ -1,4 +1,5 @@\n use crate::iter::{FusedIterator, TrustedLen};\n+use crate::ops::Try;\n \n /// Creates a new iterator that repeats elements of type `A` endlessly by\n /// applying the provided closure, the repeater, `F: FnMut() -> A`.\n@@ -89,6 +90,22 @@ impl<A, F: FnMut() -> A> Iterator for RepeatWith<F> {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (usize::MAX, None)\n     }\n+\n+    #[inline]\n+    fn try_fold<Acc, Fold, R>(&mut self, mut init: Acc, mut fold: Fold) -> R\n+    where\n+        Fold: FnMut(Acc, Self::Item) -> R,\n+        R: Try<Output = Acc>,\n+    {\n+        // This override isn't strictly needed, but avoids the need to optimize\n+        // away the `next`-always-returns-`Some` and emphasizes that the `?`\n+        // is the only way to exit the loop.\n+\n+        loop {\n+            let item = (self.repeater)();\n+            init = fold(init, item)?;\n+        }\n+    }\n }\n \n #[stable(feature = \"iterator_repeat_with\", since = \"1.28.0\")]"}, {"sha": "3e26b43a2ede55abae81460a653c8a402cd04d03", "filename": "library/core/tests/iter/adapters/take.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1891deb2633fe4040de8b71fd7b2045c45dc5/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter%2Fadapters%2Ftake.rs?ref=faf1891deb2633fe4040de8b71fd7b2045c45dc5", "patch": "@@ -146,3 +146,23 @@ fn test_take_try_folds() {\n     assert_eq!(iter.try_for_each(Err), Err(2));\n     assert_eq!(iter.try_for_each(Err), Ok(()));\n }\n+\n+#[test]\n+fn test_byref_take_consumed_items() {\n+    let mut inner = 10..90;\n+\n+    let mut count = 0;\n+    inner.by_ref().take(0).for_each(|_| count += 1);\n+    assert_eq!(count, 0);\n+    assert_eq!(inner, 10..90);\n+\n+    let mut count = 0;\n+    inner.by_ref().take(10).for_each(|_| count += 1);\n+    assert_eq!(count, 10);\n+    assert_eq!(inner, 20..90);\n+\n+    let mut count = 0;\n+    inner.by_ref().take(100).for_each(|_| count += 1);\n+    assert_eq!(count, 70);\n+    assert_eq!(inner, 90..90);\n+}"}, {"sha": "87c8fe1354d76d4f1aac8b388396fab0428930f6", "filename": "src/test/codegen/repeat-trusted-len.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/faf1891deb2633fe4040de8b71fd7b2045c45dc5/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/faf1891deb2633fe4040de8b71fd7b2045c45dc5/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepeat-trusted-len.rs?ref=faf1891deb2633fe4040de8b71fd7b2045c45dc5", "patch": "@@ -11,3 +11,10 @@ pub fn repeat_take_collect() -> Vec<u8> {\n // CHECK: call void @llvm.memset.{{.+}}({{i8\\*|ptr}} {{.*}}align 1{{.*}} %{{[0-9]+}}, i8 42, i{{[0-9]+}} 100000, i1 false)\n     iter::repeat(42).take(100000).collect()\n }\n+\n+// CHECK-LABEL: @repeat_with_take_collect\n+#[no_mangle]\n+pub fn repeat_with_take_collect() -> Vec<u8> {\n+// CHECK: call void @llvm.memset.{{.+}}({{i8\\*|ptr}} {{.*}}align 1{{.*}} %{{[0-9]+}}, i8 13, i{{[0-9]+}} 12345, i1 false)\n+    iter::repeat_with(|| 13).take(12345).collect()\n+}"}]}