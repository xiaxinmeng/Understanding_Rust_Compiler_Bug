{"sha": "e939f740b3b2223d61d8af2dd2fc3517077083b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MzlmNzQwYjNiMjIyM2Q2MWQ4YWYyZGQyZmMzNTE3MDc3MDgzYjA=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-11-18T19:57:42Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-11-18T19:57:42Z"}, "message": "Goto type def through macros", "tree": {"sha": "27a4fdf87eae44030721afcf927779690985ed37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27a4fdf87eae44030721afcf927779690985ed37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e939f740b3b2223d61d8af2dd2fc3517077083b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e939f740b3b2223d61d8af2dd2fc3517077083b0", "html_url": "https://github.com/rust-lang/rust/commit/e939f740b3b2223d61d8af2dd2fc3517077083b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e939f740b3b2223d61d8af2dd2fc3517077083b0/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7614439033bc8b68d3982d93595161ddfda80837", "url": "https://api.github.com/repos/rust-lang/rust/commits/7614439033bc8b68d3982d93595161ddfda80837", "html_url": "https://github.com/rust-lang/rust/commit/7614439033bc8b68d3982d93595161ddfda80837"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "7d694e1f6e48b98f9861f62179c59cc4cd8ba7db", "filename": "crates/ra_ide_api/src/goto_type_definition.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e939f740b3b2223d61d8af2dd2fc3517077083b0/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e939f740b3b2223d61d8af2dd2fc3517077083b0/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_type_definition.rs?ref=e939f740b3b2223d61d8af2dd2fc3517077083b0", "patch": "@@ -1,25 +1,28 @@\n //! FIXME: write short doc here\n \n-use ra_db::SourceDatabase;\n+use hir::db::AstDatabase;\n use ra_syntax::{ast, AstNode};\n \n-use crate::{db::RootDatabase, display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n+use crate::{\n+    db::RootDatabase, display::ToNav, expand::descend_into_macros, FilePosition, NavigationTarget,\n+    RangeInfo,\n+};\n \n pub(crate) fn goto_type_definition(\n     db: &RootDatabase,\n     position: FilePosition,\n ) -> Option<RangeInfo<Vec<NavigationTarget>>> {\n-    let parse = db.parse(position.file_id);\n+    let file = db.parse_or_expand(position.file_id.into())?;\n+    let token = file.token_at_offset(position.offset).filter(|it| !it.kind().is_trivia()).next()?;\n+    let token = descend_into_macros(db, position.file_id, token);\n \n-    let node = parse.tree().syntax().token_at_offset(position.offset).find_map(|token| {\n+    let node = token.ast.ancestors().find_map(|token| {\n         token\n-            .parent()\n             .ancestors()\n             .find(|n| ast::Expr::cast(n.clone()).is_some() || ast::Pat::cast(n.clone()).is_some())\n     })?;\n \n-    let analyzer =\n-        hir::SourceAnalyzer::new(db, hir::Source::new(position.file_id.into(), &node), None);\n+    let analyzer = hir::SourceAnalyzer::new(db, token.with_ast(&node), None);\n \n     let ty: hir::Ty = if let Some(ty) =\n         ast::Expr::cast(node.clone()).and_then(|e| analyzer.type_of(db, &e))\n@@ -80,4 +83,23 @@ mod tests {\n             \"Foo STRUCT_DEF FileId(1) [0; 11) [7; 10)\",\n         );\n     }\n+\n+    #[test]\n+    fn goto_type_definition_works_through_macro() {\n+        check_goto(\n+            \"\n+            //- /lib.rs\n+            macro_rules! id {\n+                ($($tt:tt)*) => { $($tt)* }\n+            }\n+            struct Foo {}\n+            id! {\n+                fn bar() {\n+                    let f<|> = Foo {};\n+                }\n+            }\n+            \",\n+            \"Foo STRUCT_DEF FileId(1) [52; 65) [59; 62)\",\n+        );\n+    }\n }"}]}