{"sha": "8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "node_id": "C_kwDOAAsO6NoAKDgwNjRhNDk1MDg2YzJlNjNjMGVmNzdlOGU4MmZlM2I5YjVkYzUzNWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T15:41:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-18T15:41:30Z"}, "message": "Auto merge of #99860 - oli-obk:revert_97346, r=pnkfelix\n\nRevert \"Rollup merge of #97346 - JohnTitor:remove-back-compat-hacks, \u2026\n\n\u2026r=oli-obk\"\n\nThis reverts commit c703d11dccb4a895c7aead3b2fcd8cea8c483184, reversing\nchanges made to 64eb9ab869bc3f9ef3645302fbf22e706eea16cf.\n\nit didn't apply cleanly, so now it works the same for RPIT and for TAIT instead of just working for RPIT, but we should keep those in sync anyway. It also exposed a TAIT bug (see the feature gated test that now ICEs).\n\nr? `@pnkfelix`\n\nfixes #99536", "tree": {"sha": "63ebb692d20447639ee1ebb041dd75fb300d7956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63ebb692d20447639ee1ebb041dd75fb300d7956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "html_url": "https://github.com/rust-lang/rust/commit/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb99e6fdd99b0a9a9f75bc60b0995b4ef8e752ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb99e6fdd99b0a9a9f75bc60b0995b4ef8e752ab", "html_url": "https://github.com/rust-lang/rust/commit/bb99e6fdd99b0a9a9f75bc60b0995b4ef8e752ab"}, {"sha": "a85eb3d9df9f845b3ee166c8fa270efe20b4c82c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a85eb3d9df9f845b3ee166c8fa270efe20b4c82c", "html_url": "https://github.com/rust-lang/rust/commit/a85eb3d9df9f845b3ee166c8fa270efe20b4c82c"}], "stats": {"total": 136, "additions": 69, "deletions": 67}, "files": [{"sha": "e579afbf38954c6cd6fe1154a5cd633cfa409956", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -40,23 +40,25 @@ pub struct OpaqueTypeDecl<'tcx> {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    pub fn replace_opaque_types_with_inference_vars(\n+    /// This is a backwards compatibility hack to prevent breaking changes from\n+    /// lazy TAIT around RPIT handling.\n+    pub fn replace_opaque_types_with_inference_vars<T: TypeFoldable<'tcx>>(\n         &self,\n-        ty: Ty<'tcx>,\n+        value: T,\n         body_id: HirId,\n         span: Span,\n         param_env: ty::ParamEnv<'tcx>,\n-    ) -> InferOk<'tcx, Ty<'tcx>> {\n-        if !ty.has_opaque_types() {\n-            return InferOk { value: ty, obligations: vec![] };\n+    ) -> InferOk<'tcx, T> {\n+        if !value.has_opaque_types() {\n+            return InferOk { value, obligations: vec![] };\n         }\n         let mut obligations = vec![];\n         let replace_opaque_type = |def_id: DefId| {\n             def_id\n                 .as_local()\n                 .map_or(false, |def_id| self.opaque_type_origin(def_id, span).is_some())\n         };\n-        let value = ty.fold_with(&mut ty::fold::BottomUpFolder {\n+        let value = value.fold_with(&mut ty::fold::BottomUpFolder {\n             tcx: self.tcx,\n             lt_op: |lt| lt,\n             ct_op: |ct| ct,"}, {"sha": "715b97492683b59d24ccf25419a824f349dce366", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -252,10 +252,20 @@ fn project_and_unify_type<'cx, 'tcx>(\n         Err(InProgress) => return ProjectAndUnifyResult::Recursive,\n     };\n     debug!(?normalized, ?obligations, \"project_and_unify_type result\");\n-    match infcx\n-        .at(&obligation.cause, obligation.param_env)\n-        .eq(normalized, obligation.predicate.term)\n-    {\n+    let actual = obligation.predicate.term;\n+    // For an example where this is neccessary see src/test/ui/impl-trait/nested-return-type2.rs\n+    // This allows users to omit re-mentioning all bounds on an associated type and just use an\n+    // `impl Trait` for the assoc type to add more bounds.\n+    let InferOk { value: actual, obligations: new } =\n+        selcx.infcx().replace_opaque_types_with_inference_vars(\n+            actual,\n+            obligation.cause.body_id,\n+            obligation.cause.span,\n+            obligation.param_env,\n+        );\n+    obligations.extend(new);\n+\n+    match infcx.at(&obligation.cause, obligation.param_env).eq(normalized, actual) {\n         Ok(InferOk { obligations: inferred_obligations, value: () }) => {\n             obligations.extend(inferred_obligations);\n             ProjectAndUnifyResult::Holds(obligations)"}, {"sha": "351243c6727dab4c5aa6e1881a7263c50d59edcb", "filename": "src/test/ui/impl-trait/issues/issue-86800.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.rs?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -1,6 +1,14 @@\n #![feature(type_alias_impl_trait)]\n \n // edition:2021\n+// unset-rustc-env:RUST_BACKTRACE\n+// compile-flags:-Z treat-err-as-bug=1\n+// error-pattern:stack backtrace:\n+// failure-status:101\n+// normalize-stderr-test \"note: .*\" -> \"\"\n+// normalize-stderr-test \"thread 'rustc' .*\" -> \"\"\n+// normalize-stderr-test \" +[0-9]+:.*\\n\" -> \"\"\n+// normalize-stderr-test \" +at .*\\n\" -> \"\"\n \n use std::future::Future;\n \n@@ -23,7 +31,6 @@ struct Context {\n type TransactionResult<O> = Result<O, ()>;\n \n type TransactionFuture<'__, O> = impl '__ + Future<Output = TransactionResult<O>>;\n-//~^ ERROR unconstrained opaque type\n \n fn execute_transaction_fut<'f, F, O>(\n     f: F,"}, {"sha": "135d06d44adaefb47258211f666ac715fe0da128", "filename": "src/test/ui/impl-trait/issues/issue-86800.stderr", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-86800.stderr?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -1,10 +1,19 @@\n-error: unconstrained opaque type\n-  --> $DIR/issue-86800.rs:25:34\n-   |\n-LL | type TransactionFuture<'__, O> = impl '__ + Future<Output = TransactionResult<O>>;\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `TransactionFuture` must be used in combination with a concrete type within the same module\n \n-error: aborting due to previous error\n+stack backtrace:\n \n+error: internal compiler error: unexpected panic\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+query stack during panic:\n+#0 [mir_borrowck] borrow-checking `execute_transaction_fut`\n+#1 [type_of] computing type of `TransactionFuture::{opaque#0}`\n+#2 [check_mod_item_types] checking item types in top-level module\n+#3 [analysis] running analysis passes on this crate\n+end of query stack"}, {"sha": "42613d5ccd9a4cb05081b38501798c5041ea2044", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.rs?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -1,5 +1,7 @@\n #![feature(type_alias_impl_trait)]\n \n+// check-pass\n+\n trait Duh {}\n \n impl Duh for i32 {}\n@@ -17,13 +19,13 @@ impl<R: Duh, F: FnMut() -> R> Trait for F {\n \n type Sendable = impl Send;\n \n-// The `Sendable` here is then later compared against the inference var\n-// created, causing the inference var to be set to `Sendable` instead of\n+// The `Sendable` here is converted to an inference var and then later compared\n+// against the inference var created, causing the inference var to be set to\n+// the hidden type of `Sendable` instead of\n // the hidden type. We already have obligations registered on the inference\n // var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n-// type does not implement `Duh`, even if its hidden type does. So we error out.\n+// type does not implement `Duh`, but if its hidden type does.\n fn foo() -> impl Trait<Assoc = Sendable> {\n-    //~^ ERROR `Sendable: Duh` is not satisfied\n     || 42\n }\n "}, {"sha": "1079a86ce9e7345f504aa05a4ced95ac61ee008e", "filename": "src/test/ui/impl-trait/nested-return-type2-tait.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb99e6fdd99b0a9a9f75bc60b0995b4ef8e752ab/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99e6fdd99b0a9a9f75bc60b0995b4ef8e752ab/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait.stderr?ref=bb99e6fdd99b0a9a9f75bc60b0995b4ef8e752ab", "patch": "@@ -1,16 +0,0 @@\n-error[E0277]: the trait bound `Sendable: Duh` is not satisfied\n-  --> $DIR/nested-return-type2-tait.rs:25:13\n-   |\n-LL | fn foo() -> impl Trait<Assoc = Sendable> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Duh` is not implemented for `Sendable`\n-   |\n-   = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait.rs:27:5: 27:7]`\n-  --> $DIR/nested-return-type2-tait.rs:14:31\n-   |\n-LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n-   |                               ^^^^^     ^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "af8e066305471df0451cb61a6a75c501cc5dc8d0", "filename": "src/test/ui/impl-trait/nested-return-type2-tait2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.rs?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -24,8 +24,8 @@ type Traitable = impl Trait<Assoc = Sendable>;\n // var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n // type does not implement `Duh`, even if its hidden type does. So we error out.\n fn foo() -> Traitable {\n-    //~^ ERROR `Sendable: Duh` is not satisfied\n     || 42\n+    //~^ ERROR `Sendable: Duh` is not satisfied\n }\n \n fn main() {"}, {"sha": "fe1ae4fcb08b129b61b85dc737ea766b8b38e89b", "filename": "src/test/ui/impl-trait/nested-return-type2-tait2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait2.stderr?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `Sendable: Duh` is not satisfied\n-  --> $DIR/nested-return-type2-tait2.rs:26:13\n+  --> $DIR/nested-return-type2-tait2.rs:27:5\n    |\n-LL | fn foo() -> Traitable {\n-   |             ^^^^^^^^^ the trait `Duh` is not implemented for `Sendable`\n+LL |     || 42\n+   |     ^^^^^ the trait `Duh` is not implemented for `Sendable`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait2.rs:28:5: 28:7]`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait2.rs:27:5: 27:7]`\n   --> $DIR/nested-return-type2-tait2.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "74fd8a9dda0bfcb952e7631e9492abe0d02fa941", "filename": "src/test/ui/impl-trait/nested-return-type2-tait3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.rs?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -23,8 +23,8 @@ type Traitable = impl Trait<Assoc = impl Send>;\n // var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n // type does not implement `Duh`, even if its hidden type does. So we error out.\n fn foo() -> Traitable {\n-    //~^ ERROR `impl Send: Duh` is not satisfied\n     || 42\n+    //~^ ERROR `impl Send: Duh` is not satisfied\n }\n \n fn main() {"}, {"sha": "c0695d627eb6df05bb248e3fbcc7fcae2ee67926", "filename": "src/test/ui/impl-trait/nested-return-type2-tait3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2-tait3.stderr?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `impl Send: Duh` is not satisfied\n-  --> $DIR/nested-return-type2-tait3.rs:25:13\n+  --> $DIR/nested-return-type2-tait3.rs:26:5\n    |\n-LL | fn foo() -> Traitable {\n-   |             ^^^^^^^^^ the trait `Duh` is not implemented for `impl Send`\n+LL |     || 42\n+   |     ^^^^^ the trait `Duh` is not implemented for `impl Send`\n    |\n    = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait3.rs:27:5: 27:7]`\n+note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2-tait3.rs:26:5: 26:7]`\n   --> $DIR/nested-return-type2-tait3.rs:14:31\n    |\n LL | impl<R: Duh, F: FnMut() -> R> Trait for F {"}, {"sha": "39928d543e15d79a2d0e74d1c5b7affdb5ae2bf0", "filename": "src/test/ui/impl-trait/nested-return-type2.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8064a495086c2e63c0ef77e8e82fe3b9b5dc535f/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.rs?ref=8064a495086c2e63c0ef77e8e82fe3b9b5dc535f", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n trait Duh {}\n \n impl Duh for i32 {}\n@@ -18,9 +20,11 @@ impl<R: Duh, F: FnMut() -> R> Trait for F {\n // the hidden type. We already have obligations registered on the inference\n // var to make it uphold the `: Duh` bound on `Trait::Assoc`. The opaque\n // type does not implement `Duh`, even if its hidden type does.\n+// Lazy TAIT would error out, but we inserted a hack to make it work again,\n+// keeping backwards compatibility.\n fn foo() -> impl Trait<Assoc = impl Send> {\n-    //~^ ERROR `impl Send: Duh` is not satisfied\n     || 42\n }\n \n-fn main() {}\n+fn main() {\n+}"}, {"sha": "f28a084af89a427d6ba8515322ac7bea7645ffa6", "filename": "src/test/ui/impl-trait/nested-return-type2.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb99e6fdd99b0a9a9f75bc60b0995b4ef8e752ab/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb99e6fdd99b0a9a9f75bc60b0995b4ef8e752ab/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested-return-type2.stderr?ref=bb99e6fdd99b0a9a9f75bc60b0995b4ef8e752ab", "patch": "@@ -1,16 +0,0 @@\n-error[E0277]: the trait bound `impl Send: Duh` is not satisfied\n-  --> $DIR/nested-return-type2.rs:21:13\n-   |\n-LL | fn foo() -> impl Trait<Assoc = impl Send> {\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Duh` is not implemented for `impl Send`\n-   |\n-   = help: the trait `Duh` is implemented for `i32`\n-note: required because of the requirements on the impl of `Trait` for `[closure@$DIR/nested-return-type2.rs:23:5: 23:7]`\n-  --> $DIR/nested-return-type2.rs:12:31\n-   |\n-LL | impl<R: Duh, F: FnMut() -> R> Trait for F {\n-   |                               ^^^^^     ^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}]}