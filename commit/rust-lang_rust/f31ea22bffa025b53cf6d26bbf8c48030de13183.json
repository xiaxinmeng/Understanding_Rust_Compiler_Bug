{"sha": "f31ea22bffa025b53cf6d26bbf8c48030de13183", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMWVhMjJiZmZhMDI1YjUzY2Y2ZDI2YmJmOGM0ODAzMGRlMTMxODM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-02-17T19:05:12Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-02-24T17:31:46Z"}, "message": "Mention try macro in error chapter\n\nFixes #22342", "tree": {"sha": "ce412fe58ecd06c43704bf6c0a54e36f503688a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce412fe58ecd06c43704bf6c0a54e36f503688a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f31ea22bffa025b53cf6d26bbf8c48030de13183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f31ea22bffa025b53cf6d26bbf8c48030de13183", "html_url": "https://github.com/rust-lang/rust/commit/f31ea22bffa025b53cf6d26bbf8c48030de13183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f31ea22bffa025b53cf6d26bbf8c48030de13183/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dccdde4007c191aa8b8d9cfffb0c7d3509fa675e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dccdde4007c191aa8b8d9cfffb0c7d3509fa675e", "html_url": "https://github.com/rust-lang/rust/commit/dccdde4007c191aa8b8d9cfffb0c7d3509fa675e"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "cf60bd88c542be85ff5f6c90d20c5cd599a9827d", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f31ea22bffa025b53cf6d26bbf8c48030de13183/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/f31ea22bffa025b53cf6d26bbf8c48030de13183/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=f31ea22bffa025b53cf6d26bbf8c48030de13183", "patch": "@@ -223,6 +223,78 @@ let input = io::stdin().read_line()\n                        .ok()\n                        .expect(\"Failed to read line\");\n ```\n+\n `ok()` converts the `IoResult` into an `Option`, and `expect()` does the same\n thing as `unwrap()`, but takes a message. This message is passed along to the\n underlying `panic!`, providing a better error message if the code errors.\n+\n+# Using `try!`\n+\n+When writing code that calls many functions that return the `Result` type, the\n+error handling can be tedious. The `try!` macro hides some of the boilerplate\n+of propagating errors up the call stack.\n+\n+It replaces this:\n+\n+```rust\n+use std::fs::File;\n+use std::io;\n+use std::io::prelude::*;\n+\n+struct Info {\n+    name: String,\n+    age: i32,\n+    rating: i32,\n+}\n+\n+fn write_info(info: &Info) -> io::Result<()> {\n+    let mut file = File::open(\"my_best_friends.txt\").unwrap();\n+\n+    if let Err(e) = writeln!(&mut file, \"name: {}\", info.name) {\n+        return Err(e)\n+    }\n+    if let Err(e) = writeln!(&mut file, \"age: {}\", info.age) {\n+        return Err(e)\n+    }\n+    if let Err(e) = writeln!(&mut file, \"rating: {}\", info.rating) {\n+        return Err(e)\n+    }\n+\n+    return Ok(());\n+}\n+```\n+\n+With this:\n+\n+```rust\n+use std::fs::File;\n+use std::io;\n+use std::io::prelude::*;\n+\n+struct Info {\n+    name: String,\n+    age: i32,\n+    rating: i32,\n+}\n+\n+fn write_info(info: &Info) -> io::Result<()> {\n+    let mut file = try!(File::open(\"my_best_friends.txt\"));\n+\n+    try!(writeln!(&mut file, \"name: {}\", info.name));\n+    try!(writeln!(&mut file, \"age: {}\", info.age));\n+    try!(writeln!(&mut file, \"rating: {}\", info.rating));\n+\n+    return Ok(());\n+}\n+```\n+\n+Wrapping an expression in `try!` will result in the unwrapped success (`Ok`)\n+value, unless the result is `Err`, in which case `Err` is returned early from\n+the enclosing function.\n+\n+It's worth noting that you can only use `try!` from a function that returns a\n+`Result`, which means that you cannot use `try!` inside of `main()`, because\n+`main()` doesn't return anything.\n+\n+`try!` makes use of [`FromError`](../std/error/#the-fromerror-trait) to determine\n+what to return in the error case."}]}