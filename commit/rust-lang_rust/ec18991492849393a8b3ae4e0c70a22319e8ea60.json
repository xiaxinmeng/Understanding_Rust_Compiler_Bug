{"sha": "ec18991492849393a8b3ae4e0c70a22319e8ea60", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMTg5OTE0OTI4NDkzOTNhOGIzYWU0ZTBjNzBhMjIzMTllOGVhNjA=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-08-11T18:09:59Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-08-11T19:42:35Z"}, "message": "Add links to std::char::REPLACEMENT_CHARACTER from docs.\n\nThere are a few places where we mention the replacement character in the\ndocs, and it could be helpful for users to utilize the constant which is\navailable in the standard library, so let\u2019s link to it!", "tree": {"sha": "2917703d35382c3e6dcf5ca6e48b8aa0c2f50f0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2917703d35382c3e6dcf5ca6e48b8aa0c2f50f0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec18991492849393a8b3ae4e0c70a22319e8ea60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec18991492849393a8b3ae4e0c70a22319e8ea60", "html_url": "https://github.com/rust-lang/rust/commit/ec18991492849393a8b3ae4e0c70a22319e8ea60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec18991492849393a8b3ae4e0c70a22319e8ea60/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa8d0320266b5579428312095fe49af05ada972", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa8d0320266b5579428312095fe49af05ada972", "html_url": "https://github.com/rust-lang/rust/commit/0aa8d0320266b5579428312095fe49af05ada972"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "dd559df08cce6b356e77e8efa9e538018f0f3507", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=ec18991492849393a8b3ae4e0c70a22319e8ea60", "patch": "@@ -519,10 +519,11 @@ impl String {\n     /// between the two. Not all byte slices are valid strings, however: strings\n     /// are required to be valid UTF-8. During this conversion,\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n-    /// `U+FFFD REPLACEMENT CHARACTER`, which looks like this: \ufffd\n+    /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], which looks like this: \ufffd\n     ///\n     /// [`u8`]: ../../std/primitive.u8.html\n     /// [byteslice]: ../../std/primitive.slice.html\n+    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the conversion, there is an unsafe version\n@@ -621,14 +622,15 @@ impl String {\n     }\n \n     /// Decode a UTF-16 encoded slice `v` into a `String`, replacing\n-    /// invalid data with the replacement character (U+FFFD).\n+    /// invalid data with [the replacement character (`U+FFFD`)][U+FFFD].\n     ///\n     /// Unlike [`from_utf8_lossy`] which returns a [`Cow<'a, str>`],\n     /// `from_utf16_lossy` returns a `String` since the UTF-16 to UTF-8\n     /// conversion requires a memory allocation.\n     ///\n     /// [`from_utf8_lossy`]: #method.from_utf8_lossy\n     /// [`Cow<'a, str>`]: ../borrow/enum.Cow.html\n+    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "54b17b0fbb3209b5254618031597c3e75808ce82", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=ec18991492849393a8b3ae4e0c70a22319e8ea60", "patch": "@@ -244,7 +244,10 @@ impl Utf8Error {\n     ///   The length provided is that of the invalid byte sequence\n     ///   that starts at the index given by `valid_up_to()`.\n     ///   Decoding should resume after that sequence\n-    ///   (after inserting a U+FFFD REPLACEMENT CHARACTER) in case of lossy decoding.\n+    ///   (after inserting a [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD]) in case of\n+    ///   lossy decoding.\n+    ///\n+    /// [U+FFFD]: ../../std/char/constant.REPLACEMENT_CHARACTER.html\n     #[stable(feature = \"utf8_error_error_len\", since = \"1.20.0\")]\n     pub fn error_len(&self) -> Option<usize> {\n         self.error_len.map(|len| len as usize)"}, {"sha": "2b87094926cf5f012c28bcb52aa3c388841c634b", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=ec18991492849393a8b3ae4e0c70a22319e8ea60", "patch": "@@ -1175,9 +1175,9 @@ impl CStr {\n     /// If the contents of the `CStr` are valid UTF-8 data, this\n     /// function will return a [`Cow`]`::`[`Borrowed`]`(`[`&str`]`)`\n     /// with the the corresponding [`&str`] slice. Otherwise, it will\n-    /// replace any invalid UTF-8 sequences with `U+FFFD REPLACEMENT\n-    /// CHARACTER` and return a [`Cow`]`::`[`Owned`]`(`[`String`]`)`\n-    /// with the result.\n+    /// replace any invalid UTF-8 sequences with\n+    /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD] and return a\n+    /// [`Cow`]`::`[`Owned`]`(`[`String`]`)` with the result.\n     ///\n     /// > **Note**: This method is currently implemented to check for validity\n     /// > after a constant-time cast, but it is planned to alter its definition\n@@ -1189,6 +1189,7 @@ impl CStr {\n     /// [`Owned`]: ../borrow/enum.Cow.html#variant.Owned\n     /// [`str`]: ../primitive.str.html\n     /// [`String`]: ../string/struct.String.html\n+    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "6bcd62dbd59c27052063bdc44389a7768b516afa", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=ec18991492849393a8b3ae4e0c70a22319e8ea60", "patch": "@@ -520,10 +520,12 @@ impl OsStr {\n \n     /// Converts an `OsStr` to a [`Cow`]`<`[`str`]`>`.\n     ///\n-    /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n+    /// Any non-Unicode sequences are replaced with\n+    /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\n     ///\n     /// [`Cow`]: ../../std/borrow/enum.Cow.html\n     /// [`str`]: ../../std/primitive.str.html\n+    /// [U+FFFD]: ../../std/char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "ca8be75fab5beee3a11841b3b79870c23c615a1a", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ec18991492849393a8b3ae4e0c70a22319e8ea60", "patch": "@@ -1737,9 +1737,11 @@ impl Path {\n \n     /// Converts a `Path` to a [`Cow<str>`].\n     ///\n-    /// Any non-Unicode sequences are replaced with U+FFFD REPLACEMENT CHARACTER.\n+    /// Any non-Unicode sequences are replaced with\n+    /// [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD].\n     ///\n     /// [`Cow<str>`]: ../borrow/enum.Cow.html\n+    /// [U+FFFD]: ../char/constant.REPLACEMENT_CHARACTER.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "bae0d02786a092dd8134a428fb2ab7a2fbf0cbd5", "filename": "src/libstd/sys/windows/ext/ffi.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec18991492849393a8b3ae4e0c70a22319e8ea60/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=ec18991492849393a8b3ae4e0c70a22319e8ea60", "patch": "@@ -31,7 +31,7 @@\n //!\n //! If Rust code *does* need to look into those strings, it can\n //! convert them to valid UTF-8, possibly lossily, by substituting\n-//! invalid sequences with U+FFFD REPLACEMENT CHARACTER, as is\n+//! invalid sequences with [`U+FFFD REPLACEMENT CHARACTER`][U+FFFD], as is\n //! conventionally done in other Rust APIs that deal with string\n //! encodings.\n //!\n@@ -65,6 +65,7 @@\n //! [`from_wide`]: trait.OsStringExt.html#tymethod.from_wide\n //! [`encode_wide`]: trait.OsStrExt.html#tymethod.encode_wide\n //! [`collect`]: ../../../iter/trait.Iterator.html#method.collect\n+//! [U+FFFD]: ../../../char/constant.REPLACEMENT_CHARACTER.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}