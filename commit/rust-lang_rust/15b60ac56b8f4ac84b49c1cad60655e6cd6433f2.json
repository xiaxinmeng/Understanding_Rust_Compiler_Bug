{"sha": "15b60ac56b8f4ac84b49c1cad60655e6cd6433f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YjYwYWM1NmI4ZjRhYzg0YjQ5YzFjYWQ2MDY1NWU2Y2Q2NDMzZjI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-26T03:35:32Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-26T03:35:32Z"}, "message": "Comments only: fix some comments that got spurious /~s", "tree": {"sha": "94e49c2104792b5a22c05c0d059af560ab439a61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94e49c2104792b5a22c05c0d059af560ab439a61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2", "html_url": "https://github.com/rust-lang/rust/commit/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "329eca6044fdf376a7a89ec7a96dba7a8b884cf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/329eca6044fdf376a7a89ec7a96dba7a8b884cf7", "html_url": "https://github.com/rust-lang/rust/commit/329eca6044fdf376a7a89ec7a96dba7a8b884cf7"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "ff93504509a334f383f03c4c42b265d2e2c7ebc5", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=15b60ac56b8f4ac84b49c1cad60655e6cd6433f2", "patch": "@@ -2055,7 +2055,7 @@ fn trans_external_path(ccx: @crate_ctxt, did: ast::def_id, t: ty::t)\n }\n \n fn normalize_for_monomorphization(tcx: ty::ctxt, ty: ty::t) -> option<ty::t> {\n-    // FIXME[mono]/~ could do this recursively. is that worthwhile? (#2529)\n+    // FIXME[mono] could do this recursively. is that worthwhile? (#2529)\n     alt ty::get(ty).struct {\n       ty::ty_box(mt) { some(ty::mk_opaque_box(tcx)) }\n       ty::ty_fn(fty) { some(ty::mk_fn(tcx, {purity: ast::impure_fn,"}, {"sha": "1418cb318a7d126d328820764fb412878362a98b", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=15b60ac56b8f4ac84b49c1cad60655e6cd6433f2", "patch": "@@ -136,7 +136,7 @@ fn mk_closure_tys(tcx: ty::ctxt,\n         }]/~;\n     }\n     let bound_data_ty = ty::mk_tup(tcx, bound_tys);\n-    // FIXME[mono]/~ remove tuple of tydescs from closure types (#2531)\n+    // FIXME[mono] remove tuple of tydescs from closure types (#2531)\n     let cdata_ty = ty::mk_tup(tcx, [ty::mk_tup(tcx, []/~),\n                                     bound_data_ty]/~);\n     #debug[\"cdata_ty=%s\", ty_to_str(tcx, cdata_ty)];"}, {"sha": "b85abbaa18392f72c1105cdc7d6e64b05f4a43e2", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15b60ac56b8f4ac84b49c1cad60655e6cd6433f2/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=15b60ac56b8f4ac84b49c1cad60655e6cd6433f2", "patch": "@@ -151,7 +151,7 @@ fn trans_iface_callee(bcx: block, val: ValueRef,\n     let vtable = Load(bcx, PointerCast(bcx, GEPi(bcx, val, [0u, 0u]/~),\n                                        T_ptr(T_ptr(T_vtable()))));\n     let box = Load(bcx, GEPi(bcx, val, [0u, 1u]/~));\n-    // FIXME[impl]/~ I doubt this is alignment-safe (#2534)\n+    // FIXME[impl] I doubt this is alignment-safe (#2534)\n     let self = GEPi(bcx, box, [0u, abi::box_field_body]/~);\n     let env = self_env(self, ty::mk_opaque_box(bcx.tcx()), some(box));\n     let llfty = type_of::type_of_fn_from_ty(ccx, callee_ty);"}]}