{"sha": "3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYzNhZTIyYmRkYzRmYjI0Yzc5MGI1ODcwMGE2OTljNzY0ZWJkMGU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-07T14:11:58Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-18T09:25:34Z"}, "message": "incr.comp.: Move result fingerprinting to DepGraph::with_task().\n\nThis makes sure that we don't introduce strange cases where we have\nnodes outside the query system that could break red/green tracking\nand it will allow to keep red/green neatly encapsulated within the\nDepGraph implementation.", "tree": {"sha": "9c26fff1cf4b5dd83153dd10e78673707f6979a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c26fff1cf4b5dd83153dd10e78673707f6979a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "html_url": "https://github.com/rust-lang/rust/commit/3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c9a53d1a148fe4cd2cf9e0e1329289163d2284", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c9a53d1a148fe4cd2cf9e0e1329289163d2284", "html_url": "https://github.com/rust-lang/rust/commit/e6c9a53d1a148fe4cd2cf9e0e1329289163d2284"}], "stats": {"total": 167, "additions": 130, "deletions": 37}, "files": [{"sha": "7679b7e7971ebdcee387fafb99ebce4c3da6115c", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "patch": "@@ -9,11 +9,15 @@\n // except according to those terms.\n \n use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n+                                           StableHashingContextProvider};\n use session::config::OutputType;\n use std::cell::{Ref, RefCell};\n use std::rc::Rc;\n use util::common::{ProfileQueriesMsg, profq_msg};\n \n+use ich::Fingerprint;\n+\n use super::dep_node::{DepNode, DepKind, WorkProductId};\n use super::query::DepGraphQuery;\n use super::raii;\n@@ -71,10 +75,6 @@ impl DepGraph {\n         self.data.as_ref().map(|data| raii::IgnoreTask::new(&data.edges))\n     }\n \n-    pub fn in_task<'graph>(&'graph self, key: DepNode) -> Option<raii::DepTask<'graph>> {\n-        self.data.as_ref().map(|data| raii::DepTask::new(&data.edges, key))\n-    }\n-\n     pub fn with_ignore<OP,R>(&self, op: OP) -> R\n         where OP: FnOnce() -> R\n     {\n@@ -109,24 +109,38 @@ impl DepGraph {\n     ///   `arg` parameter.\n     ///\n     /// [README]: README.md\n-    pub fn with_task<C, A, R>(&self,\n-                              key: DepNode,\n-                              cx: C,\n-                              arg: A,\n-                              task: fn(C, A) -> R)\n-                              -> (R, DepNodeIndex)\n-        where C: DepGraphSafe\n+    pub fn with_task<C, A, R, HCX>(&self,\n+                                   key: DepNode,\n+                                   cx: C,\n+                                   arg: A,\n+                                   task: fn(C, A) -> R)\n+                                   -> (R, DepNodeIndex)\n+        where C: DepGraphSafe + StableHashingContextProvider<ContextType=HCX>,\n+              R: HashStable<HCX>,\n     {\n         if let Some(ref data) = self.data {\n             data.edges.borrow_mut().push_task(key);\n             if cfg!(debug_assertions) {\n                 profq_msg(ProfileQueriesMsg::TaskBegin(key.clone()))\n             };\n+\n+            // In incremental mode, hash the result of the task. We don't\n+            // do anything with the hash yet, but we are computing it\n+            // anyway so that\n+            //  - we make sure that the infrastructure works and\n+            //  - we can get an idea of the runtime cost.\n+            let mut hcx = cx.create_stable_hashing_context();\n+\n             let result = task(cx, arg);\n             if cfg!(debug_assertions) {\n                 profq_msg(ProfileQueriesMsg::TaskEnd)\n             };\n             let dep_node_index = data.edges.borrow_mut().pop_task(key);\n+\n+            let mut stable_hasher = StableHasher::new();\n+            result.hash_stable(&mut hcx, &mut stable_hasher);\n+            let _: Fingerprint = stable_hasher.finish();\n+\n             (result, dep_node_index)\n         } else {\n             (task(cx, arg), DepNodeIndex::INVALID)"}, {"sha": "f82bf9be033908386c43fdbae67528ab6bf44e16", "filename": "src/librustc/dep_graph/safe.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fdep_graph%2Fsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fsafe.rs?ref=3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "patch": "@@ -58,6 +58,13 @@ impl<'a, A> DepGraphSafe for &'a A\n {\n }\n \n+/// Mut ref to dep-graph-safe stuff should still be dep-graph-safe.\n+impl<'a, A> DepGraphSafe for &'a mut A\n+    where A: DepGraphSafe,\n+{\n+}\n+\n+\n /// No data here! :)\n impl DepGraphSafe for () {\n }"}, {"sha": "f4fa376347ae9470ee04ce33c08cc02e577afd63", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "patch": "@@ -26,8 +26,8 @@ use syntax::ext::hygiene::SyntaxContext;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher,\n-                                           StableHasherResult};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHashingContextProvider,\n+                                           StableHasher, StableHasherResult};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n /// This is the context state available during incr. comp. hashing. It contains\n@@ -196,6 +196,12 @@ impl<'a, 'gcx, 'tcx> StableHashingContext<'a, 'gcx, 'tcx> {\n     }\n }\n \n+impl<'a, 'gcx, 'lcx> StableHashingContextProvider for ty::TyCtxt<'a, 'gcx, 'lcx> {\n+    type ContextType = StableHashingContext<'a, 'gcx, 'lcx>;\n+    fn create_stable_hashing_context(&self) -> Self::ContextType {\n+        StableHashingContext::new(*self)\n+    }\n+}\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ast::NodeId {\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "c96ae862265dfe1812fe91453cd1873da6038e3d", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "patch": "@@ -14,7 +14,6 @@ use hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, ItemLocalId};\n use hir::svh::Svh;\n-use ich::{Fingerprint, StableHashingContext};\n use lint;\n use middle::const_val;\n use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary};\n@@ -46,7 +45,7 @@ use rustc_back::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::cell::{RefCell, RefMut, Cell};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+\n use std::fmt::Debug;\n use std::hash::Hash;\n use std::marker::PhantomData;\n@@ -953,20 +952,6 @@ macro_rules! define_maps {\n \n                 tcx.dep_graph.read_index(dep_node_index);\n \n-                // In incremental mode, hash the result of the query. We don't\n-                // do anything with the hash yet, but we are computing it\n-                // anyway so that\n-                //  - we make sure that the infrastructure works and\n-                //  - we can get an idea of the runtime cost.\n-                if !dep_node.kind.is_anon() && tcx.sess.opts.incremental.is_some() {\n-                    let mut hcx = StableHashingContext::new(tcx);\n-                    let mut hasher = StableHasher::new();\n-\n-                    result.hash_stable(&mut hcx, &mut hasher);\n-\n-                    let _: Fingerprint = hasher.finish();\n-                }\n-\n                 let value = QueryValue {\n                     value: result,\n                     index: dep_node_index,"}, {"sha": "da00f12edacb0ebbedd3e83432e041f1dc49cd48", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "patch": "@@ -2575,6 +2575,10 @@ pub struct SymbolName {\n     pub name: InternedString\n }\n \n+impl_stable_hash_for!(struct self::SymbolName {\n+    name\n+});\n+\n impl Deref for SymbolName {\n     type Target = str;\n "}, {"sha": "f80cbfadf2e7fdb566faf79c0210e28e92137eef", "filename": "src/librustc_data_structures/stable_hasher.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc_data_structures%2Fstable_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fstable_hasher.rs?ref=3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "patch": "@@ -192,6 +192,28 @@ impl<W> Hasher for StableHasher<W> {\n }\n \n \n+/// Something that can provide a stable hashing context.\n+pub trait StableHashingContextProvider {\n+    type ContextType;\n+    fn create_stable_hashing_context(&self) -> Self::ContextType;\n+}\n+\n+impl<'a, T: StableHashingContextProvider> StableHashingContextProvider for &'a T {\n+    type ContextType = T::ContextType;\n+\n+    fn create_stable_hashing_context(&self) -> Self::ContextType {\n+        (**self).create_stable_hashing_context()\n+    }\n+}\n+\n+impl<'a, T: StableHashingContextProvider> StableHashingContextProvider for &'a mut T {\n+    type ContextType = T::ContextType;\n+\n+    fn create_stable_hashing_context(&self) -> Self::ContextType {\n+        (**self).create_stable_hashing_context()\n+    }\n+}\n+\n /// Something that implements `HashStable<CTX>` can be hashed in a way that is\n /// stable across multiple compilation sessions.\n pub trait HashStable<CTX> {\n@@ -292,7 +314,7 @@ impl<T: HashStable<CTX>, CTX> HashStable<CTX> for Vec<T> {\n     }\n }\n \n-impl<T: HashStable<CTX>, CTX> HashStable<CTX> for Box<T> {\n+impl<T: ?Sized + HashStable<CTX>, CTX> HashStable<CTX> for Box<T> {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           ctx: &mut CTX,\n@@ -301,7 +323,7 @@ impl<T: HashStable<CTX>, CTX> HashStable<CTX> for Box<T> {\n     }\n }\n \n-impl<T: HashStable<CTX>, CTX> HashStable<CTX> for ::std::rc::Rc<T> {\n+impl<T: ?Sized + HashStable<CTX>, CTX> HashStable<CTX> for ::std::rc::Rc<T> {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           ctx: &mut CTX,\n@@ -310,7 +332,7 @@ impl<T: HashStable<CTX>, CTX> HashStable<CTX> for ::std::rc::Rc<T> {\n     }\n }\n \n-impl<T: HashStable<CTX>, CTX> HashStable<CTX> for ::std::sync::Arc<T> {\n+impl<T: ?Sized + HashStable<CTX>, CTX> HashStable<CTX> for ::std::sync::Arc<T> {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           ctx: &mut CTX,"}, {"sha": "1e1b9929f0e37ff0b1f270536c8b7fd7257b4c23", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "patch": "@@ -1070,7 +1070,6 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let start_time = Instant::now();\n         all_stats.extend(tcx.compile_codegen_unit(*cgu.name()));\n         total_trans_time += start_time.elapsed();\n-\n         ongoing_translation.check_for_errors(tcx.sess);\n     }\n \n@@ -1565,5 +1564,35 @@ pub fn visibility_to_llvm(linkage: Visibility) -> llvm::Visibility {\n         Visibility::Default => llvm::Visibility::Default,\n         Visibility::Hidden => llvm::Visibility::Hidden,\n         Visibility::Protected => llvm::Visibility::Protected,\n+}\n+\n+// FIXME(mw): Anything that is produced via DepGraph::with_task() must implement\n+//            the HashStable trait. Normally DepGraph::with_task() calls are\n+//            hidden behind queries, but CGU creation is a special case in two\n+//            ways: (1) it's not a query and (2) CGU are output nodes, so their\n+//            Fingerprints are not actually needed. It remains to be clarified\n+//            how exactly this case will be handled in the red/green system but\n+//            for now we content ourselves with providing a no-op HashStable\n+//            implementation for CGUs.\n+mod temp_stable_hash_impls {\n+    use rustc_data_structures::stable_hasher::{StableHasherResult, StableHasher,\n+                                               HashStable};\n+    use context::Stats;\n+    use ModuleTranslation;\n+\n+    impl<HCX> HashStable<HCX> for Stats {\n+        fn hash_stable<W: StableHasherResult>(&self,\n+                                              _: &mut HCX,\n+                                              _: &mut StableHasher<W>) {\n+            // do nothing\n+        }\n+    }\n+\n+    impl<HCX> HashStable<HCX> for ModuleTranslation {\n+        fn hash_stable<W: StableHasherResult>(&self,\n+                                              _: &mut HCX,\n+                                              _: &mut StableHasher<W>) {\n+            // do nothing\n+        }\n     }\n }"}, {"sha": "40fc07cfd4f62656c69aabbfd641bd0bf69eff85", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "patch": "@@ -14,6 +14,7 @@ use llvm::{ContextRef, ModuleRef, ValueRef};\n use rustc::dep_graph::{DepGraph, DepGraphSafe};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::ich::StableHashingContext;\n use rustc::traits;\n use debuginfo;\n use callee;\n@@ -25,6 +26,8 @@ use partitioning::CodegenUnit;\n use type_::Type;\n use rustc_data_structures::base_n;\n use rustc::middle::trans::Stats;\n+use rustc_data_structures::stable_hasher::StableHashingContextProvider;\n+use rustc::session::config::{self, NoDebugInfo, OutputFilenames};\n use rustc::session::Session;\n use rustc::session::config::{self, NoDebugInfo};\n use rustc::ty::layout::{LayoutCx, LayoutError, LayoutTyper, TyLayout};\n@@ -134,6 +137,17 @@ impl<'a, 'tcx> CrateContext<'a, 'tcx> {\n impl<'a, 'tcx> DepGraphSafe for CrateContext<'a, 'tcx> {\n }\n \n+impl<'a, 'tcx> DepGraphSafe for SharedCrateContext<'a, 'tcx> {\n+}\n+\n+impl<'a, 'tcx> StableHashingContextProvider for SharedCrateContext<'a, 'tcx> {\n+    type ContextType = StableHashingContext<'a, 'tcx, 'tcx>;\n+\n+    fn create_stable_hashing_context(&self) -> Self::ContextType {\n+        StableHashingContext::new(self.tcx)\n+    }\n+}\n+\n pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n     let reloc_model_arg = match sess.opts.cg.relocation_model {\n         Some(ref s) => &s[..],"}, {"sha": "4918dd78b37939b3833584e5e3a812154e71b738", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cc3ae22bddc4fb24c790b58700a699c764ebd0e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=3cc3ae22bddc4fb24c790b58700a699c764ebd0e", "patch": "@@ -14,14 +14,16 @@\n //! We walk the set of items and, for each member, generate new constraints.\n \n use hir::def_id::DefId;\n-use rustc::dep_graph::{AssertDepGraphSafe, DepKind};\n+use rustc::dep_graph::{DepGraphSafe, DepKind};\n+use rustc::ich::StableHashingContext;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use syntax::ast;\n use rustc::hir;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc_data_structures::transitive_relation::TransitiveRelation;\n+use rustc_data_structures::stable_hasher::StableHashingContextProvider;\n \n use super::terms::*;\n use super::terms::VarianceTerm::*;\n@@ -138,6 +140,16 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> StableHashingContextProvider for ConstraintContext<'a, 'tcx> {\n+    type ContextType = StableHashingContext<'a, 'tcx, 'tcx>;\n+\n+    fn create_stable_hashing_context(&self) -> Self::ContextType {\n+         StableHashingContext::new(self.terms_cx.tcx)\n+    }\n+}\n+\n+impl<'a, 'tcx> DepGraphSafe for ConstraintContext<'a, 'tcx> {}\n+\n impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     fn visit_node_helper(&mut self, id: ast::NodeId) {\n         let tcx = self.terms_cx.tcx;\n@@ -151,14 +163,14 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         // on dep-graph management.\n         let dep_node = def_id.to_dep_node(tcx, DepKind::ItemVarianceConstraints);\n         tcx.dep_graph.with_task(dep_node,\n-                                AssertDepGraphSafe(self),\n+                                self,\n                                 def_id,\n                                 visit_item_task);\n \n-        fn visit_item_task<'a, 'tcx>(ccx: AssertDepGraphSafe<&mut ConstraintContext<'a, 'tcx>>,\n+        fn visit_item_task<'a, 'tcx>(ccx: &mut ConstraintContext<'a, 'tcx>,\n                                      def_id: DefId)\n         {\n-            ccx.0.build_constraints_for_item(def_id);\n+            ccx.build_constraints_for_item(def_id);\n         }\n     }\n "}]}