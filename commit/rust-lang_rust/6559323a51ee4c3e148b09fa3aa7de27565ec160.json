{"sha": "6559323a51ee4c3e148b09fa3aa7de27565ec160", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1NTkzMjNhNTFlZTRjM2UxNDhiMDlmYTNhYTdkZTI3NTY1ZWMxNjA=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-04T20:10:08Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-09T06:43:38Z"}, "message": "librustc: Allow mutation of moved upvars.", "tree": {"sha": "db86721c0fd1dbb65b53dabc687633db43cdec24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db86721c0fd1dbb65b53dabc687633db43cdec24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6559323a51ee4c3e148b09fa3aa7de27565ec160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6559323a51ee4c3e148b09fa3aa7de27565ec160", "html_url": "https://github.com/rust-lang/rust/commit/6559323a51ee4c3e148b09fa3aa7de27565ec160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6559323a51ee4c3e148b09fa3aa7de27565ec160/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413328b0f2be70303c53ecde89c1f59f450a38ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/413328b0f2be70303c53ecde89c1f59f450a38ba", "html_url": "https://github.com/rust-lang/rust/commit/413328b0f2be70303c53ecde89c1f59f450a38ba"}], "stats": {"total": 57, "additions": 34, "deletions": 23}, "files": [{"sha": "39a7b4aa3d68ec7a512df051f7ada80aa5071032", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 34, "deletions": 23, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6559323a51ee4c3e148b09fa3aa7de27565ec160/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6559323a51ee4c3e148b09fa3aa7de27565ec160/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=6559323a51ee4c3e148b09fa3aa7de27565ec160", "patch": "@@ -306,6 +306,29 @@ impl MutabilityCategory {\n         }\n     }\n \n+    fn from_def(def: &def::Def) -> MutabilityCategory {\n+        match *def {\n+            def::DefFn(..) | def::DefStaticMethod(..) | def::DefSelfTy(..) |\n+            def::DefMod(..) | def::DefForeignMod(..) | def::DefVariant(..) |\n+            def::DefTy(..) | def::DefTrait(..) | def::DefPrimTy(..) |\n+            def::DefTyParam(..) | def::DefUse(..) | def::DefStruct(..) |\n+            def::DefTyParamBinder(..) | def::DefRegion(..) | def::DefLabel(..) |\n+            def::DefMethod(..) => fail!(\"no MutabilityCategory for def: {}\", *def),\n+\n+            def::DefStatic(_, false) => McImmutable,\n+            def::DefStatic(_, true) => McDeclared,\n+\n+            def::DefArg(_, binding_mode) |\n+            def::DefBinding(_, binding_mode) |\n+            def::DefLocal(_, binding_mode)  => match binding_mode {\n+                ast::BindByValue(ast::MutMutable) => McDeclared,\n+                _ => McImmutable\n+            },\n+\n+            def::DefUpvar(_, def, _, _) => MutabilityCategory::from_def(&*def)\n+        }\n+    }\n+\n     pub fn inherit(&self) -> MutabilityCategory {\n         match *self {\n             McImmutable => McImmutable,\n@@ -503,8 +526,8 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n           def::DefStaticMethod(..) => {\n                 Ok(self.cat_rvalue_node(id, span, expr_ty))\n           }\n-          def::DefMod(_) | def::DefForeignMod(_) | def::DefStatic(_, false) |\n-          def::DefUse(_) | def::DefTrait(_) | def::DefTy(_) | def::DefPrimTy(_) |\n+          def::DefMod(_) | def::DefForeignMod(_) | def::DefUse(_) |\n+          def::DefTrait(_) | def::DefTy(_) | def::DefPrimTy(_) |\n           def::DefTyParam(..) | def::DefTyParamBinder(..) | def::DefRegion(_) |\n           def::DefLabel(_) | def::DefSelfTy(..) | def::DefMethod(..) => {\n               Ok(Rc::new(cmt_ {\n@@ -516,30 +539,25 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n               }))\n           }\n \n-          def::DefStatic(_, true) => {\n+          def::DefStatic(_, _) => {\n               Ok(Rc::new(cmt_ {\n                   id:id,\n                   span:span,\n                   cat:cat_static_item,\n-                  mutbl: McDeclared,\n+                  mutbl: MutabilityCategory::from_def(&def),\n                   ty:expr_ty\n               }))\n           }\n \n-          def::DefArg(vid, binding_mode) => {\n+          def::DefArg(vid, _) => {\n             // Idea: make this could be rewritten to model by-ref\n             // stuff as `&const` and `&mut`?\n \n-            // m: mutability of the argument\n-            let m = match binding_mode {\n-                ast::BindByValue(ast::MutMutable) => McDeclared,\n-                _ => McImmutable\n-            };\n             Ok(Rc::new(cmt_ {\n                 id: id,\n                 span: span,\n                 cat: cat_arg(vid),\n-                mutbl: m,\n+                mutbl: MutabilityCategory::from_def(&def),\n                 ty:expr_ty\n             }))\n           }\n@@ -564,7 +582,6 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                       if var_is_refd {\n                           self.cat_upvar(id, span, var_id, fn_node_id)\n                       } else {\n-                          // FIXME #2152 allow mutation of moved upvars\n                           Ok(Rc::new(cmt_ {\n                               id:id,\n                               span:span,\n@@ -573,13 +590,12 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                                   onceness: closure_ty.onceness,\n                                   capturing_proc: fn_node_id,\n                               }),\n-                              mutbl:McImmutable,\n+                              mutbl: MutabilityCategory::from_def(&def),\n                               ty:expr_ty\n                           }))\n                       }\n                   }\n                   ty::ty_unboxed_closure(_) => {\n-                      // FIXME #2152 allow mutation of moved upvars\n                       Ok(Rc::new(cmt_ {\n                           id: id,\n                           span: span,\n@@ -588,7 +604,7 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n                               onceness: ast::Many,\n                               capturing_proc: fn_node_id,\n                           }),\n-                          mutbl: McImmutable,\n+                          mutbl: MutabilityCategory::from_def(&def),\n                           ty: expr_ty\n                       }))\n                   }\n@@ -602,19 +618,14 @@ impl<'t,TYPER:Typer> MemCategorizationContext<'t,TYPER> {\n               }\n           }\n \n-          def::DefLocal(vid, binding_mode) |\n-          def::DefBinding(vid, binding_mode) => {\n+          def::DefLocal(vid, _) |\n+          def::DefBinding(vid, _) => {\n             // by-value/by-ref bindings are local variables\n-            let m = match binding_mode {\n-                ast::BindByValue(ast::MutMutable) => McDeclared,\n-                _ => McImmutable\n-            };\n-\n             Ok(Rc::new(cmt_ {\n                 id: id,\n                 span: span,\n                 cat: cat_local(vid),\n-                mutbl: m,\n+                mutbl: MutabilityCategory::from_def(&def),\n                 ty: expr_ty\n             }))\n           }"}]}