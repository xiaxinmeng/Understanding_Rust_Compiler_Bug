{"sha": "4de4f303e5cee3e40b8e91a381517a457af7b4cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZTRmMzAzZTVjZWUzZTQwYjhlOTFhMzgxNTE3YTQ1N2FmN2I0Y2M=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-04T02:04:01Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-05T16:35:18Z"}, "message": "Fix error index generator for new register_diagnostics API", "tree": {"sha": "5452a808822dd5da83c942e728830a3af26874a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5452a808822dd5da83c942e728830a3af26874a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de4f303e5cee3e40b8e91a381517a457af7b4cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de4f303e5cee3e40b8e91a381517a457af7b4cc", "html_url": "https://github.com/rust-lang/rust/commit/4de4f303e5cee3e40b8e91a381517a457af7b4cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de4f303e5cee3e40b8e91a381517a457af7b4cc/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f1dc326edee5528db80894eedd2036fdc05bca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1dc326edee5528db80894eedd2036fdc05bca8", "html_url": "https://github.com/rust-lang/rust/commit/3f1dc326edee5528db80894eedd2036fdc05bca8"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "832aa3b1c8dfd3378d4b30ef74593f52fe733153", "filename": "src/tools/error_index_generator/build.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4de4f303e5cee3e40b8e91a381517a457af7b4cc/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de4f303e5cee3e40b8e91a381517a457af7b4cc/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fbuild.rs?ref=4de4f303e5cee3e40b8e91a381517a457af7b4cc", "patch": "@@ -14,9 +14,7 @@ fn main() {\n         if entry.file_name() == \"error_codes.rs\" {\n             println!(\"cargo:rerun-if-changed={}\", entry.path().to_str().unwrap());\n             let file = fs::read_to_string(entry.path()).unwrap()\n-                .replace(\"use syntax::{register_diagnostics, register_long_diagnostics};\", \"\")\n-                .replace(\"use syntax::register_diagnostics;\", \"\")\n-                .replace(\"use syntax::register_long_diagnostics;\", \"\");\n+                .replace(\"syntax::register_diagnostics!\", \"register_diagnostics!\");\n             let contents = format!(\"(|| {{\\n{}\\n}})();\", file);\n \n             fs::write(&out_dir.join(&format!(\"error_{}.rs\", idx)), &contents).unwrap();\n@@ -26,36 +24,31 @@ fn main() {\n     }\n \n     let mut all = String::new();\n-    all.push_str(\"fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\\n\");\n-    all.push_str(\"let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\\n\");\n-    all.push_str(r#\"\n-macro_rules! register_diagnostics {\n-    ($($code:tt),*) => {{\n-        long_codes.extend([$(\n-            stringify!($code),\n-        )*].iter().cloned().map(|s| (s, None)).collect::<Vec<_>>());\n-    }};\n-    ($($code:tt),*,) => {{\n-        long_codes.extend([$(\n-            stringify!($code),\n-        )*].iter().cloned().map(|s| (s, None)));\n-    }}\n-}\n+    all.push_str(r###\"\n+fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\n+    let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\n+    macro_rules! register_diagnostics {\n+        ($($ecode:ident: $message:expr,)*) => (\n+            register_diagnostics!{$($ecode:$message,)* ;}\n+        );\n \n-macro_rules! register_long_diagnostics {\n-    ($($code:tt: $description:tt),*) => {\n-        {long_codes.extend([$(\n-            (stringify!($code), Some(stringify!($description))),\n-        )*].iter());}\n-    };\n-    ($($code:tt: $description:tt),*,) => {\n-        {long_codes.extend([$(\n-            (stringify!($code), Some(stringify!($description))),\n-        )*].iter());}\n+        ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n+            $(\n+                {long_codes.extend([\n+                    (stringify!($ecode), Some(stringify!($message))),\n+                ].iter());}\n+            )*\n+            $(\n+                {long_codes.extend([\n+                    stringify!($code),\n+                ].iter().cloned().map(|s| (s, None)).collect::<Vec<_>>());}\n+            )*\n+        )\n     }\n-}\"#);\n+\"###);\n     for idx in 0..idx {\n         all.push_str(&format!(r#\"include!(concat!(env!(\"OUT_DIR\"), \"/error_{}.rs\"));\"#, idx));\n+        all.push_str(\"\\n\");\n     }\n     all.push_str(\"\\nlong_codes\\n\");\n     all.push_str(\"}\\n\");"}]}