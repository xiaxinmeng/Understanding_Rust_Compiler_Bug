{"sha": "e5602cb2a0e114729625cf27db819ef56a79d86e", "node_id": "C_kwDOAAsO6NoAKGU1NjAyY2IyYTBlMTE0NzI5NjI1Y2YyN2RiODE5ZWY1NmE3OWQ4NmU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-25T23:35:09Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-26T00:10:38Z"}, "message": "Add and use ObligationCtxt::new_in_snapshot", "tree": {"sha": "924fd909f17da177587acfb0daa46c74896bb490", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/924fd909f17da177587acfb0daa46c74896bb490"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5602cb2a0e114729625cf27db819ef56a79d86e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5602cb2a0e114729625cf27db819ef56a79d86e", "html_url": "https://github.com/rust-lang/rust/commit/e5602cb2a0e114729625cf27db819ef56a79d86e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5602cb2a0e114729625cf27db819ef56a79d86e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fee9e9b9d36649fe7ebc00b1eeefc6d97052798f", "url": "https://api.github.com/repos/rust-lang/rust/commits/fee9e9b9d36649fe7ebc00b1eeefc6d97052798f", "html_url": "https://github.com/rust-lang/rust/commit/fee9e9b9d36649fe7ebc00b1eeefc6d97052798f"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "f6df407118c7615934d25373a59a310e4062edbf", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e5602cb2a0e114729625cf27db819ef56a79d86e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5602cb2a0e114729625cf27db819ef56a79d86e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=e5602cb2a0e114729625cf27db819ef56a79d86e", "patch": "@@ -17,6 +17,7 @@ use rustc_span::Span;\n \n pub trait TraitEngineExt<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> Box<Self>;\n+    fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self>;\n }\n \n impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n@@ -27,6 +28,14 @@ impl<'tcx> TraitEngineExt<'tcx> for dyn TraitEngine<'tcx> {\n             Box::new(FulfillmentContext::new())\n         }\n     }\n+\n+    fn new_in_snapshot(tcx: TyCtxt<'tcx>) -> Box<Self> {\n+        if tcx.sess.opts.unstable_opts.chalk {\n+            Box::new(ChalkFulfillmentContext::new())\n+        } else {\n+            Box::new(FulfillmentContext::new_in_snapshot())\n+        }\n+    }\n }\n \n /// Used if you want to have pleasant experience when dealing\n@@ -41,6 +50,10 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n         Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new(infcx.tcx)) }\n     }\n \n+    pub fn new_in_snapshot(infcx: &'a InferCtxt<'a, 'tcx>) -> Self {\n+        Self { infcx, engine: RefCell::new(<dyn TraitEngine<'_>>::new_in_snapshot(infcx.tcx)) }\n+    }\n+\n     pub fn register_obligation(&self, obligation: PredicateObligation<'tcx>) {\n         self.engine.borrow_mut().register_predicate_obligation(self.infcx, obligation);\n     }"}, {"sha": "1439baf54406d2e44d3700d73fecf8e6a3ea036a", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e5602cb2a0e114729625cf27db819ef56a79d86e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5602cb2a0e114729625cf27db819ef56a79d86e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=e5602cb2a0e114729625cf27db819ef56a79d86e", "patch": "@@ -7,15 +7,14 @@ use rustc_hir::def_id::LocalDefId;\n use rustc_hir::HirIdMap;\n use rustc_infer::infer;\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n-use rustc_infer::traits::TraitEngineExt as _;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::visit::TypeVisitable;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_span::def_id::LocalDefIdMap;\n use rustc_span::{self, Span};\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::{\n-    self, FulfillmentContext, ObligationCause, TraitEngine, TraitEngineExt as _,\n+    self, ObligationCause, ObligationCtxt, TraitEngine, TraitEngineExt as _,\n };\n \n use std::cell::RefCell;\n@@ -94,17 +93,14 @@ impl<'tcx> Inherited<'_, 'tcx> {\n                         return fn_sig;\n                     }\n                     infcx.probe(|_| {\n-                        let traits::Normalized { value: normalized_fn_sig, obligations } =\n-                            traits::normalize(\n-                                &mut traits::SelectionContext::new(infcx),\n-                                // FIXME(compiler-errors): This is probably not the right param-env...\n-                                infcx.tcx.param_env(def_id),\n-                                ObligationCause::dummy(),\n-                                fn_sig,\n-                            );\n-                        let mut fulfillment_ctxt = FulfillmentContext::new_in_snapshot();\n-                        fulfillment_ctxt.register_predicate_obligations(infcx, obligations);\n-                        if fulfillment_ctxt.select_all_or_error(infcx).is_empty() {\n+                        let ocx = ObligationCtxt::new_in_snapshot(infcx);\n+                        let normalized_fn_sig = ocx.normalize(\n+                            ObligationCause::dummy(),\n+                            // FIXME(compiler-errors): This is probably not the right param-env...\n+                            infcx.tcx.param_env(def_id),\n+                            fn_sig,\n+                        );\n+                        if ocx.select_all_or_error().is_empty() {\n                             let normalized_fn_sig =\n                                 infcx.resolve_vars_if_possible(normalized_fn_sig);\n                             if !normalized_fn_sig.needs_infer() {"}]}