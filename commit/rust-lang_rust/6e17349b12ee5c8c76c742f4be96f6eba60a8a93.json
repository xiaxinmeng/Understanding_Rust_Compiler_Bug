{"sha": "6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "node_id": "C_kwDOAAsO6NoAKDZlMTczNDliMTJlZTVjOGM3NmM3NDJmNGJlOTZmNmViYTYwYThhOTM", "commit": {"author": {"name": "Alex Chi", "email": "iskyzh@gmail.com", "date": "2023-03-13T01:10:11Z"}, "committer": {"name": "Alex Chi", "email": "iskyzh@gmail.com", "date": "2023-04-14T15:39:35Z"}, "message": "suggest lifetime for closure parameter type when mismatch", "tree": {"sha": "cd2426bf324bdd236013d817db9c68914ea29666", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd2426bf324bdd236013d817db9c68914ea29666"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "html_url": "https://github.com/rust-lang/rust/commit/6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/comments", "author": {"login": "skyzh", "id": 4198311, "node_id": "MDQ6VXNlcjQxOTgzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4198311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skyzh", "html_url": "https://github.com/skyzh", "followers_url": "https://api.github.com/users/skyzh/followers", "following_url": "https://api.github.com/users/skyzh/following{/other_user}", "gists_url": "https://api.github.com/users/skyzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/skyzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skyzh/subscriptions", "organizations_url": "https://api.github.com/users/skyzh/orgs", "repos_url": "https://api.github.com/users/skyzh/repos", "events_url": "https://api.github.com/users/skyzh/events{/privacy}", "received_events_url": "https://api.github.com/users/skyzh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "skyzh", "id": 4198311, "node_id": "MDQ6VXNlcjQxOTgzMTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4198311?v=4", "gravatar_id": "", "url": "https://api.github.com/users/skyzh", "html_url": "https://github.com/skyzh", "followers_url": "https://api.github.com/users/skyzh/followers", "following_url": "https://api.github.com/users/skyzh/following{/other_user}", "gists_url": "https://api.github.com/users/skyzh/gists{/gist_id}", "starred_url": "https://api.github.com/users/skyzh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/skyzh/subscriptions", "organizations_url": "https://api.github.com/users/skyzh/orgs", "repos_url": "https://api.github.com/users/skyzh/repos", "events_url": "https://api.github.com/users/skyzh/events{/privacy}", "received_events_url": "https://api.github.com/users/skyzh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0884a3528c45a5d575e182f407c759d243fdcba", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0884a3528c45a5d575e182f407c759d243fdcba", "html_url": "https://github.com/rust-lang/rust/commit/b0884a3528c45a5d575e182f407c759d243fdcba"}], "stats": {"total": 108, "additions": 106, "deletions": 2}, "files": [{"sha": "7218427722295ec54912e28c165c667a44138a7e", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "patch": "@@ -1927,6 +1927,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         {\n             let span = self.tcx.def_span(def_id);\n             diag.span_note(span, \"this closure does not fulfill the lifetime requirements\");\n+            self.suggest_for_all_lifetime_closure(span, &exp_found, diag);\n         }\n \n         // It reads better to have the error origin as the final"}, {"sha": "3755d80874c258ea7dc31abaca68a8ca00251c18", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 57, "deletions": 1, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "patch": "@@ -8,7 +8,7 @@ use rustc_middle::traits::{\n     StatementAsExpression,\n };\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self as ty, IsSuggestable, Ty, TypeVisitableExt};\n+use rustc_middle::ty::{self as ty, GenericArgKind, IsSuggestable, Ty, TypeVisitableExt};\n use rustc_span::{sym, BytePos, Span};\n use rustc_target::abi::FieldIdx;\n \n@@ -536,6 +536,62 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n         }\n         None\n     }\n+\n+    /// For \"one type is more general than the other\" errors on closures, suggest changing the lifetime\n+    /// of the parameters to accept all lifetimes.\n+    pub(super) fn suggest_for_all_lifetime_closure(\n+        &self,\n+        span: Span,\n+        exp_found: &ty::error::ExpectedFound<ty::PolyTraitRef<'tcx>>,\n+        diag: &mut Diagnostic,\n+    ) {\n+        // 1. Get the substs of the closure.\n+        // 2. Assume exp_found is FnOnce / FnMut / Fn, we can extract function parameters from [1].\n+        let expected = exp_found.expected.map_bound(|x| x.substs.get(1).cloned()).transpose();\n+        let found = exp_found.found.map_bound(|x| x.substs.get(1).cloned()).transpose();\n+\n+        // 3. Extract the tuple type from Fn trait and suggest the change.\n+        if let (Some(expected), Some(found)) = (expected, found) {\n+            let expected = expected.skip_binder().unpack();\n+            let found = found.skip_binder().unpack();\n+            if let (GenericArgKind::Type(expected), GenericArgKind::Type(found)) = (expected, found)\n+             && let (ty::Tuple(expected), ty::Tuple(found)) = (expected.kind(), found.kind())\n+                    && expected.len() == found.len() {\n+                    let mut suggestion = \"|\".to_string();\n+                    let mut is_first = true;\n+                    let mut has_suggestion = false;\n+\n+                    for (expected, found) in expected.iter().zip(found.iter()) {\n+                        if is_first {\n+                            is_first = true;\n+                        } else {\n+                            suggestion += \", \";\n+                        }\n+\n+                        if let (ty::Ref(expected_region, _, _), ty::Ref(found_region, _, _)) = (expected.kind(), found.kind())\n+                            && expected_region.is_late_bound() && !found_region.is_late_bound() {\n+                            // If the expected region is late bound, and the found region is not, we can suggest adding `: &_`.\n+                            // FIXME: use the actual type + variable name provided by user instead of `_`.\n+                            suggestion += \"_: &_\";\n+                            has_suggestion = true;\n+                        } else {\n+                            // Otherwise, keep it as-is.\n+                            suggestion += \"_\";\n+                        }\n+                    }\n+                    suggestion += \"|\";\n+\n+                    if has_suggestion {\n+                        diag.span_suggestion_verbose(\n+                            span,\n+                            \"consider changing the type of the closure parameters\",\n+                            suggestion,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n+        }\n+    }\n }\n \n impl<'tcx> TypeErrCtxt<'_, 'tcx> {"}, {"sha": "c14d3e0c61b8cf6bcb2e952d52825f9ef870a0b1", "filename": "tests/ui/lifetimes/issue-79187-2.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/tests%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/tests%2Fui%2Flifetimes%2Fissue-79187-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-79187-2.stderr?ref=6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "patch": "@@ -43,6 +43,10 @@ note: the lifetime requirement is introduced here\n    |\n LL | fn take_foo(_: impl Foo) {}\n    |                     ^^^\n+help: consider changing the type of the closure parameters\n+   |\n+LL |     take_foo(|_: &_| a);\n+   |              ~~~~~~~\n \n error[E0308]: mismatched types\n   --> $DIR/issue-79187-2.rs:11:5"}, {"sha": "16eaf654cf3fc0a09830d0a5b1e789774610d952", "filename": "tests/ui/lifetimes/issue-79187.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/tests%2Fui%2Flifetimes%2Fissue-79187.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/tests%2Fui%2Flifetimes%2Fissue-79187.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-79187.stderr?ref=6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "patch": "@@ -16,6 +16,10 @@ note: the lifetime requirement is introduced here\n    |\n LL | fn thing(x: impl FnOnce(&u32)) {}\n    |                  ^^^^^^^^^^^^\n+help: consider changing the type of the closure parameters\n+   |\n+LL |     let f = |_: &_| ();\n+   |             ~~~~~~~\n \n error: implementation of `FnOnce` is not general enough\n   --> $DIR/issue-79187.rs:5:5"}, {"sha": "4eb33497c39560cb4ec86d0aa16fb2df740caeec", "filename": "tests/ui/mismatched_types/closure-mismatch.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/tests%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/tests%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-mismatch.rs?ref=6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "patch": "@@ -8,4 +8,7 @@ fn main() {\n     baz(|_| ());\n     //~^ ERROR implementation of `FnOnce` is not general enough\n     //~| ERROR mismatched types\n+    baz(|x| ());\n+    //~^ ERROR implementation of `FnOnce` is not general enough\n+    //~| ERROR mismatched types\n }"}, {"sha": "ab0e137418aecac5808ec5e4fdde7a7038c3aa47", "filename": "tests/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/tests%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6e17349b12ee5c8c76c742f4be96f6eba60a8a93/tests%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=6e17349b12ee5c8c76c742f4be96f6eba60a8a93", "patch": "@@ -25,7 +25,43 @@ note: the lifetime requirement is introduced here\n    |\n LL | fn baz<T: Foo>(_: T) {}\n    |           ^^^\n+help: consider changing the type of the closure parameters\n+   |\n+LL |     baz(|_: &_| ());\n+   |         ~~~~~~~\n+\n+error: implementation of `FnOnce` is not general enough\n+  --> $DIR/closure-mismatch.rs:11:5\n+   |\n+LL |     baz(|x| ());\n+   |     ^^^^^^^^^^^ implementation of `FnOnce` is not general enough\n+   |\n+   = note: closure with signature `fn(&'2 ())` must implement `FnOnce<(&'1 (),)>`, for any lifetime `'1`...\n+   = note: ...but it actually implements `FnOnce<(&'2 (),)>`, for some specific lifetime `'2`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/closure-mismatch.rs:11:5\n+   |\n+LL |     baz(|x| ());\n+   |     ^^^^^^^^^^^ one type is more general than the other\n+   |\n+   = note: expected trait `for<'a> Fn<(&'a (),)>`\n+              found trait `Fn<(&(),)>`\n+note: this closure does not fulfill the lifetime requirements\n+  --> $DIR/closure-mismatch.rs:11:9\n+   |\n+LL |     baz(|x| ());\n+   |         ^^^\n+note: the lifetime requirement is introduced here\n+  --> $DIR/closure-mismatch.rs:5:11\n+   |\n+LL | fn baz<T: Foo>(_: T) {}\n+   |           ^^^\n+help: consider changing the type of the closure parameters\n+   |\n+LL |     baz(|_: &_| ());\n+   |         ~~~~~~~\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}]}