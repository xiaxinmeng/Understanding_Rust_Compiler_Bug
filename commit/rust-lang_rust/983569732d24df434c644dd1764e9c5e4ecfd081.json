{"sha": "983569732d24df434c644dd1764e9c5e4ecfd081", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MzU2OTczMmQyNGRmNDM0YzY0NGRkMTc2NGU5YzVlNGVjZmQwODE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-22T16:41:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-22T17:38:02Z"}, "message": "push TokenTree::parse down", "tree": {"sha": "108253b396fa76a4bdb4140e3a39a119911296b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/108253b396fa76a4bdb4140e3a39a119911296b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/983569732d24df434c644dd1764e9c5e4ecfd081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/983569732d24df434c644dd1764e9c5e4ecfd081", "html_url": "https://github.com/rust-lang/rust/commit/983569732d24df434c644dd1764e9c5e4ecfd081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/983569732d24df434c644dd1764e9c5e4ecfd081/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fd75f52877a3e23a7b9a6a9675f37a42340a428", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd75f52877a3e23a7b9a6a9675f37a42340a428", "html_url": "https://github.com/rust-lang/rust/commit/9fd75f52877a3e23a7b9a6a9675f37a42340a428"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "816baadb12fbb67052a7146297d10c18831de5e0", "filename": "src/libsyntax/ext/mbe/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/983569732d24df434c644dd1764e9c5e4ecfd081/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983569732d24df434c644dd1764e9c5e4ecfd081/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs?ref=983569732d24df434c644dd1764e9c5e4ecfd081", "patch": "@@ -8,7 +8,7 @@ use crate::ext::mbe;\n use crate::ext::mbe::macro_check;\n use crate::ext::mbe::macro_parser::{parse, parse_failure_msg};\n use crate::ext::mbe::macro_parser::{Error, Failure, Success};\n-use crate::ext::mbe::macro_parser::{MatchedNonterminal, MatchedSeq};\n+use crate::ext::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::ext::mbe::transcribe::transcribe;\n use crate::feature_gate::Features;\n use crate::parse::parser::Parser;\n@@ -1171,3 +1171,16 @@ fn quoted_tt_to_string(tt: &mbe::TokenTree) -> String {\n         ),\n     }\n }\n+\n+impl TokenTree {\n+    /// Use this token tree as a matcher to parse given tts.\n+    fn parse(cx: &ExtCtxt<'_>, mtch: &[mbe::TokenTree], tts: TokenStream)\n+             -> NamedParseResult {\n+        // `None` is because we're not interpolating\n+        let directory = Directory {\n+            path: Cow::from(cx.current_expansion.module.directory.as_path()),\n+            ownership: cx.current_expansion.directory_ownership,\n+        };\n+        parse(cx.parse_sess(), tts, mtch, Some(directory), true)\n+    }\n+}"}, {"sha": "26cae2a8e7c42fb2d598bf5e6e03b8d1b1d7d740", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/983569732d24df434c644dd1764e9c5e4ecfd081/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/983569732d24df434c644dd1764e9c5e4ecfd081/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=983569732d24df434c644dd1764e9c5e4ecfd081", "patch": "@@ -13,9 +13,6 @@\n //! and a borrowed `TokenStream` is sufficient to build an owned `TokenStream` without taking\n //! ownership of the original.\n \n-use crate::ext::base;\n-use crate::ext::mbe::{self, macro_parser};\n-use crate::parse::Directory;\n use crate::parse::token::{self, DelimToken, Token, TokenKind};\n use crate::print::pprust;\n \n@@ -26,7 +23,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_serialize::{Decoder, Decodable, Encoder, Encodable};\n use smallvec::{SmallVec, smallvec};\n \n-use std::borrow::Cow;\n use std::{fmt, iter, mem};\n \n #[cfg(test)]\n@@ -63,17 +59,6 @@ where\n {}\n \n impl TokenTree {\n-    /// Use this token tree as a matcher to parse given tts.\n-    crate fn parse(cx: &base::ExtCtxt<'_>, mtch: &[mbe::TokenTree], tts: TokenStream)\n-                 -> macro_parser::NamedParseResult {\n-        // `None` is because we're not interpolating\n-        let directory = Directory {\n-            path: Cow::from(cx.current_expansion.module.directory.as_path()),\n-            ownership: cx.current_expansion.directory_ownership,\n-        };\n-        macro_parser::parse(cx.parse_sess(), tts, mtch, Some(directory), true)\n-    }\n-\n     /// Checks if this TokenTree is equal to the other, regardless of span information.\n     pub fn eq_unspanned(&self, other: &TokenTree) -> bool {\n         match (self, other) {"}]}