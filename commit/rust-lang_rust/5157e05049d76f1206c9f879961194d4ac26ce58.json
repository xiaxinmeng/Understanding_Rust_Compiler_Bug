{"sha": "5157e05049d76f1206c9f879961194d4ac26ce58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNTdlMDUwNDlkNzZmMTIwNmM5Zjg3OTk2MTE5NGQ0YWMyNmNlNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-27T18:16:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-27T18:16:31Z"}, "message": "auto merge of #8036 : sfackler/rust/container-impls, r=msullivan\n\nA couple of implementations of Container::is_empty weren't exactly\r\nself.len() == 0 so I left them alone (e.g. Treemap).", "tree": {"sha": "0f1eba07e218cbacf1cdf3655eaff331169ea617", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1eba07e218cbacf1cdf3655eaff331169ea617"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5157e05049d76f1206c9f879961194d4ac26ce58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5157e05049d76f1206c9f879961194d4ac26ce58", "html_url": "https://github.com/rust-lang/rust/commit/5157e05049d76f1206c9f879961194d4ac26ce58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5157e05049d76f1206c9f879961194d4ac26ce58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0522955d10f76ac2ca3182de9ff5b774982243cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0522955d10f76ac2ca3182de9ff5b774982243cb", "html_url": "https://github.com/rust-lang/rust/commit/0522955d10f76ac2ca3182de9ff5b774982243cb"}, {"sha": "feb18fe8daa3952718c29039ec792d5e69d1276f", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb18fe8daa3952718c29039ec792d5e69d1276f", "html_url": "https://github.com/rust-lang/rust/commit/feb18fe8daa3952718c29039ec792d5e69d1276f"}], "stats": {"total": 89, "additions": 13, "deletions": 76}, "files": [{"sha": "6e52802578c203a2fa2b7205239eb56fa5d30381", "filename": "src/libextra/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbitv.rs?ref=5157e05049d76f1206c9f879961194d4ac26ce58", "patch": "@@ -703,8 +703,8 @@ impl cmp::Eq for BitvSet {\n }\n \n impl Container for BitvSet {\n+    #[inline]\n     fn len(&self) -> uint { self.size }\n-    fn is_empty(&self) -> bool { self.size == 0 }\n }\n \n impl Mutable for BitvSet {"}, {"sha": "dd24a2a9eb96ebe07cdd573f9a6476ee5bd7905b", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=5157e05049d76f1206c9f879961194d4ac26ce58", "patch": "@@ -27,9 +27,6 @@ pub struct PriorityQueue<T> {\n impl<T:Ord> Container for PriorityQueue<T> {\n     /// Returns the length of the queue\n     fn len(&self) -> uint { self.data.len() }\n-\n-    /// Returns true if a queue contains no elements\n-    fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n impl<T:Ord> Mutable for PriorityQueue<T> {"}, {"sha": "aa670ec5ff8d92ae262a891aab85a72e106b9938", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=5157e05049d76f1206c9f879961194d4ac26ce58", "patch": "@@ -34,9 +34,6 @@ pub struct RingBuf<T> {\n impl<T> Container for RingBuf<T> {\n     /// Return the number of elements in the RingBuf\n     fn len(&self) -> uint { self.nelts }\n-\n-    /// Return true if the RingBufcontains no elements\n-    fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n impl<T> Mutable for RingBuf<T> {"}, {"sha": "bf6f80534b4f3a91fa35ff001123b01447678d01", "filename": "src/libextra/smallintmap.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsmallintmap.rs?ref=5157e05049d76f1206c9f879961194d4ac26ce58", "patch": "@@ -37,9 +37,6 @@ impl<V> Container for SmallIntMap<V> {\n         }\n         sz\n     }\n-\n-    /// Return true if the map contains no elements\n-    fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n impl<V> Mutable for SmallIntMap<V> {"}, {"sha": "8c7ace56412462640bd4a700a26897feef8846c4", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=5157e05049d76f1206c9f879961194d4ac26ce58", "patch": "@@ -135,19 +135,6 @@ impl<K: TotalOrd, V> MutableMap<K, V> for TreeMap<K, V> {\n         find_mut(&mut self.root, key)\n     }\n \n-    /// Insert a key-value pair into the map. An existing value for a\n-    /// key is replaced by the new value. Return true if the key did\n-    /// not already exist in the map.\n-    fn insert(&mut self, key: K, value: V) -> bool {\n-        self.swap(key, value).is_none()\n-    }\n-\n-    /// Remove a key-value pair from the map. Return true if the key\n-    /// was present in the map, otherwise false.\n-    fn remove(&mut self, key: &K) -> bool {\n-        self.pop(key).is_some()\n-    }\n-\n     /// Insert a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise None is returned.\n     fn swap(&mut self, key: K, value: V) -> Option<V> {"}, {"sha": "d855beea50b2ec9e02ab9aa22784f508244688cc", "filename": "src/libstd/container.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibstd%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibstd%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcontainer.rs?ref=5157e05049d76f1206c9f879961194d4ac26ce58", "patch": "@@ -19,7 +19,10 @@ pub trait Container {\n     fn len(&self) -> uint;\n \n     /// Return true if the container contains no elements\n-    fn is_empty(&self) -> bool;\n+    #[inline]\n+    fn is_empty(&self) -> bool {\n+        self.len() == 0\n+    }\n }\n \n /// A trait to represent mutable containers\n@@ -43,11 +46,17 @@ pub trait MutableMap<K, V>: Map<K, V> + Mutable {\n     /// Insert a key-value pair into the map. An existing value for a\n     /// key is replaced by the new value. Return true if the key did\n     /// not already exist in the map.\n-    fn insert(&mut self, key: K, value: V) -> bool;\n+    #[inline]\n+    fn insert(&mut self, key: K, value: V) -> bool {\n+        self.swap(key, value).is_none()\n+    }\n \n     /// Remove a key-value pair from the map. Return true if the key\n     /// was present in the map, otherwise false.\n-    fn remove(&mut self, key: &K) -> bool;\n+    #[inline]\n+    fn remove(&mut self, key: &K) -> bool {\n+        self.pop(key).is_some()\n+    }\n \n     /// Insert a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise None is returned."}, {"sha": "6bef110bfe59ba2caed24019f35a644969a1f38a", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=5157e05049d76f1206c9f879961194d4ac26ce58", "patch": "@@ -282,9 +282,6 @@ impl<K:Hash + Eq,V> HashMap<K, V> {\n impl<K:Hash + Eq,V> Container for HashMap<K, V> {\n     /// Return the number of elements in the map\n     fn len(&self) -> uint { self.size }\n-\n-    /// Return true if the map contains no elements\n-    fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n impl<K:Hash + Eq,V> Mutable for HashMap<K, V> {\n@@ -325,19 +322,6 @@ impl<K:Hash + Eq,V> MutableMap<K, V> for HashMap<K, V> {\n         Some(self.mut_value_for_bucket(idx))\n     }\n \n-    /// Insert a key-value pair into the map. An existing value for a\n-    /// key is replaced by the new value. Return true if the key did\n-    /// not already exist in the map.\n-    fn insert(&mut self, k: K, v: V) -> bool {\n-        self.swap(k, v).is_none()\n-    }\n-\n-    /// Remove a key-value pair from the map. Return true if the key\n-    /// was present in the map, otherwise false.\n-    fn remove(&mut self, k: &K) -> bool {\n-        self.pop(k).is_some()\n-    }\n-\n     /// Insert a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise None is returned.\n     fn swap(&mut self, k: K, v: V) -> Option<V> {\n@@ -661,9 +645,6 @@ impl<T:Hash + Eq> Eq for HashSet<T> {\n impl<T:Hash + Eq> Container for HashSet<T> {\n     /// Return the number of elements in the set\n     fn len(&self) -> uint { self.map.len() }\n-\n-    /// Return true if the set contains no elements\n-    fn is_empty(&self) -> bool { self.map.is_empty() }\n }\n \n impl<T:Hash + Eq> Mutable for HashSet<T> {"}, {"sha": "1c91cbb8e1f285115dbc8cb17f66143559335133", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=5157e05049d76f1206c9f879961194d4ac26ce58", "patch": "@@ -1099,24 +1099,16 @@ impl<'self> Container for &'self str {\n     fn len(&self) -> uint {\n         do self.as_imm_buf |_p, n| { n - 1u }\n     }\n-    #[inline]\n-    fn is_empty(&self) -> bool {\n-        self.len() == 0\n-    }\n }\n \n impl Container for ~str {\n     #[inline]\n     fn len(&self) -> uint { self.as_slice().len() }\n-    #[inline]\n-    fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n impl Container for @str {\n     #[inline]\n     fn len(&self) -> uint { self.as_slice().len() }\n-    #[inline]\n-    fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n impl Mutable for ~str {"}, {"sha": "4665f36134011206e57bfb2958c6768fa3f476c7", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5157e05049d76f1206c9f879961194d4ac26ce58/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=5157e05049d76f1206c9f879961194d4ac26ce58", "patch": "@@ -36,10 +36,6 @@ impl<T> Container for TrieMap<T> {\n     /// Return the number of elements in the map\n     #[inline]\n     fn len(&self) -> uint { self.length }\n-\n-    /// Return true if the map contains no elements\n-    #[inline]\n-    fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n impl<T> Mutable for TrieMap<T> {\n@@ -87,21 +83,6 @@ impl<T> MutableMap<uint, T> for TrieMap<T> {\n         find_mut(&mut self.root.children[chunk(*key, 0)], *key, 1)\n     }\n \n-    /// Insert a key-value pair into the map. An existing value for a\n-    /// key is replaced by the new value. Return true if the key did\n-    /// not already exist in the map.\n-    #[inline]\n-    fn insert(&mut self, key: uint, value: T) -> bool {\n-        self.swap(key, value).is_none()\n-    }\n-\n-    /// Remove a key-value pair from the map. Return true if the key\n-    /// was present in the map, otherwise false.\n-    #[inline]\n-    fn remove(&mut self, key: &uint) -> bool {\n-        self.pop(key).is_some()\n-    }\n-\n     /// Insert a key-value pair from the map. If the key already had a value\n     /// present in the map, that value is returned. Otherwise None is returned.\n     fn swap(&mut self, key: uint, value: T) -> Option<T> {\n@@ -194,10 +175,6 @@ impl Container for TrieSet {\n     /// Return the number of elements in the set\n     #[inline]\n     fn len(&self) -> uint { self.map.len() }\n-\n-    /// Return true if the set contains no elements\n-    #[inline]\n-    fn is_empty(&self) -> bool { self.map.is_empty() }\n }\n \n impl Mutable for TrieSet {"}]}