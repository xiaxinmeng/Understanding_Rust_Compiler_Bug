{"sha": "1bb221243b853856596241ff3c4210e80a114d34", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYjIyMTI0M2I4NTM4NTY1OTYyNDFmZjNjNDIxMGU4MGExMTRkMzQ=", "commit": {"author": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-12T03:38:31Z"}, "committer": {"name": "Yoshitomo Nakanishi", "email": "yurayura.rounin.3@gmail.com", "date": "2021-03-16T02:27:42Z"}, "message": "Move unit_cmp to its own module", "tree": {"sha": "95f6367a2be57d44ed0b347fff2196a678762bd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95f6367a2be57d44ed0b347fff2196a678762bd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bb221243b853856596241ff3c4210e80a114d34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb221243b853856596241ff3c4210e80a114d34", "html_url": "https://github.com/rust-lang/rust/commit/1bb221243b853856596241ff3c4210e80a114d34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bb221243b853856596241ff3c4210e80a114d34/comments", "author": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Y-Nak", "id": 6376004, "node_id": "MDQ6VXNlcjYzNzYwMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6376004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Y-Nak", "html_url": "https://github.com/Y-Nak", "followers_url": "https://api.github.com/users/Y-Nak/followers", "following_url": "https://api.github.com/users/Y-Nak/following{/other_user}", "gists_url": "https://api.github.com/users/Y-Nak/gists{/gist_id}", "starred_url": "https://api.github.com/users/Y-Nak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Y-Nak/subscriptions", "organizations_url": "https://api.github.com/users/Y-Nak/orgs", "repos_url": "https://api.github.com/users/Y-Nak/repos", "events_url": "https://api.github.com/users/Y-Nak/events{/privacy}", "received_events_url": "https://api.github.com/users/Y-Nak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d17f54538f602480a10357f7677020190b9bac8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d17f54538f602480a10357f7677020190b9bac8e", "html_url": "https://github.com/rust-lang/rust/commit/d17f54538f602480a10357f7677020190b9bac8e"}], "stats": {"total": 129, "additions": 68, "deletions": 61}, "files": [{"sha": "c52c2ea80c5f0dfaf0b881da9c1dcdb5f01bd2cd", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1bb221243b853856596241ff3c4210e80a114d34/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb221243b853856596241ff3c4210e80a114d34/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1bb221243b853856596241ff3c4210e80a114d34", "patch": "@@ -1086,7 +1086,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n     store.register_late_pass(|| box unit_types::UnitTypes);\n-    store.register_late_pass(|| box unit_types::UnitCmp);\n     store.register_late_pass(|| box loops::Loops);\n     store.register_late_pass(|| box main_recursion::MainRecursion::default());\n     store.register_late_pass(|| box lifetimes::Lifetimes);"}, {"sha": "40cc9d9dbfba2031c38643db9216d98847036476", "filename": "clippy_lints/src/unit_types/mod.rs", "status": "modified", "additions": 11, "deletions": 60, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/1bb221243b853856596241ff3c4210e80a114d34/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb221243b853856596241ff3c4210e80a114d34/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Fmod.rs?ref=1bb221243b853856596241ff3c4210e80a114d34", "patch": "@@ -1,16 +1,16 @@\n mod let_unit_value;\n+mod unit_cmp;\n mod utils;\n \n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::{BinOpKind, Block, Expr, ExprKind, MatchSource, Node, Stmt, StmtKind};\n+use rustc_hir::{Block, Expr, ExprKind, MatchSource, Node, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::hygiene::{ExpnKind, MacroKind};\n \n use if_chain::if_chain;\n \n-use crate::utils::diagnostics::{span_lint, span_lint_and_then};\n+use crate::utils::diagnostics::span_lint_and_then;\n use crate::utils::source::{indent_of, reindent_multiline, snippet_opt};\n \n use utils::{is_unit, is_unit_literal};\n@@ -34,14 +34,6 @@ declare_clippy_lint! {\n     \"creating a `let` binding to a value of unit type, which usually can't be used afterwards\"\n }\n \n-declare_lint_pass!(UnitTypes => [LET_UNIT_VALUE]);\n-\n-impl<'tcx> LateLintPass<'tcx> for UnitTypes {\n-    fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n-        let_unit_value::check(cx, stmt);\n-    }\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for comparisons to unit. This includes all binary\n     /// comparisons (like `==` and `<`) and asserts.\n@@ -89,56 +81,15 @@ declare_clippy_lint! {\n     \"comparing unit values\"\n }\n \n-declare_lint_pass!(UnitCmp => [UNIT_CMP]);\n+declare_lint_pass!(UnitTypes => [LET_UNIT_VALUE, UNIT_CMP]);\n \n-impl<'tcx> LateLintPass<'tcx> for UnitCmp {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if expr.span.from_expansion() {\n-            if let Some(callee) = expr.span.source_callee() {\n-                if let ExpnKind::Macro(MacroKind::Bang, symbol) = callee.kind {\n-                    if let ExprKind::Binary(ref cmp, ref left, _) = expr.kind {\n-                        let op = cmp.node;\n-                        if op.is_comparison() && is_unit(cx.typeck_results().expr_ty(left)) {\n-                            let result = match &*symbol.as_str() {\n-                                \"assert_eq\" | \"debug_assert_eq\" => \"succeed\",\n-                                \"assert_ne\" | \"debug_assert_ne\" => \"fail\",\n-                                _ => return,\n-                            };\n-                            span_lint(\n-                                cx,\n-                                UNIT_CMP,\n-                                expr.span,\n-                                &format!(\n-                                    \"`{}` of unit values detected. This will always {}\",\n-                                    symbol.as_str(),\n-                                    result\n-                                ),\n-                            );\n-                        }\n-                    }\n-                }\n-            }\n-            return;\n-        }\n-        if let ExprKind::Binary(ref cmp, ref left, _) = expr.kind {\n-            let op = cmp.node;\n-            if op.is_comparison() && is_unit(cx.typeck_results().expr_ty(left)) {\n-                let result = match op {\n-                    BinOpKind::Eq | BinOpKind::Le | BinOpKind::Ge => \"true\",\n-                    _ => \"false\",\n-                };\n-                span_lint(\n-                    cx,\n-                    UNIT_CMP,\n-                    expr.span,\n-                    &format!(\n-                        \"{}-comparison of unit values detected. This will always be {}\",\n-                        op.as_str(),\n-                        result\n-                    ),\n-                );\n-            }\n-        }\n+impl LateLintPass<'_> for UnitTypes {\n+    fn check_stmt(&mut self, cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n+        let_unit_value::check(cx, stmt);\n+    }\n+\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        unit_cmp::check(cx, expr);\n     }\n }\n "}, {"sha": "e19fc1ec9efc766a2103bf5b57be9527f99b58ab", "filename": "clippy_lints/src/unit_types/unit_cmp.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/1bb221243b853856596241ff3c4210e80a114d34/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bb221243b853856596241ff3c4210e80a114d34/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=1bb221243b853856596241ff3c4210e80a114d34", "patch": "@@ -0,0 +1,57 @@\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_span::hygiene::{ExpnKind, MacroKind};\n+\n+use crate::utils::diagnostics::span_lint;\n+\n+use super::{utils, UNIT_CMP};\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    if expr.span.from_expansion() {\n+        if let Some(callee) = expr.span.source_callee() {\n+            if let ExpnKind::Macro(MacroKind::Bang, symbol) = callee.kind {\n+                if let ExprKind::Binary(ref cmp, ref left, _) = expr.kind {\n+                    let op = cmp.node;\n+                    if op.is_comparison() && utils::is_unit(cx.typeck_results().expr_ty(left)) {\n+                        let result = match &*symbol.as_str() {\n+                            \"assert_eq\" | \"debug_assert_eq\" => \"succeed\",\n+                            \"assert_ne\" | \"debug_assert_ne\" => \"fail\",\n+                            _ => return,\n+                        };\n+                        span_lint(\n+                            cx,\n+                            UNIT_CMP,\n+                            expr.span,\n+                            &format!(\n+                                \"`{}` of unit values detected. This will always {}\",\n+                                symbol.as_str(),\n+                                result\n+                            ),\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+        return;\n+    }\n+\n+    if let ExprKind::Binary(ref cmp, ref left, _) = expr.kind {\n+        let op = cmp.node;\n+        if op.is_comparison() && utils::is_unit(cx.typeck_results().expr_ty(left)) {\n+            let result = match op {\n+                BinOpKind::Eq | BinOpKind::Le | BinOpKind::Ge => \"true\",\n+                _ => \"false\",\n+            };\n+            span_lint(\n+                cx,\n+                UNIT_CMP,\n+                expr.span,\n+                &format!(\n+                    \"{}-comparison of unit values detected. This will always be {}\",\n+                    op.as_str(),\n+                    result\n+                ),\n+            );\n+        }\n+    }\n+}"}]}