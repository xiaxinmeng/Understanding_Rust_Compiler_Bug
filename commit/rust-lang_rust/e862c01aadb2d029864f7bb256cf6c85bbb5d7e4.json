{"sha": "e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NjJjMDFhYWRiMmQwMjk4NjRmN2JiMjU2Y2Y2Yzg1YmJiNWQ3ZTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-08T06:02:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-08T06:02:54Z"}, "message": "Auto merge of #67140 - Centril:rollup-h7rbw7y, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #66325 (Change unused_labels from allow to warn)\n - #66991 (Cleanup BodyCache)\n - #67101 (use `#[allow(unused_attributes)]` to paper over incr.comp problem)\n - #67114 (Make `ForeignItem` an alias of `Item`.)\n - #67129 (Fixes typo)\n\nFailed merges:\n\n - #66886 (Remove the borrow check::nll submodule)\n\nr? @ghost", "tree": {"sha": "d1c98f5b876a0d8f092f7003cab372b5dbe00f16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1c98f5b876a0d8f092f7003cab372b5dbe00f16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "html_url": "https://github.com/rust-lang/rust/commit/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de17464b14e503edca6625daa9cd4c338ffafee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/de17464b14e503edca6625daa9cd4c338ffafee2", "html_url": "https://github.com/rust-lang/rust/commit/de17464b14e503edca6625daa9cd4c338ffafee2"}, {"sha": "32e27c2c9a11e47289ac36101f583e08e8bc6f5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e27c2c9a11e47289ac36101f583e08e8bc6f5e", "html_url": "https://github.com/rust-lang/rust/commit/32e27c2c9a11e47289ac36101f583e08e8bc6f5e"}], "stats": {"total": 610, "additions": 306, "deletions": 304}, "files": [{"sha": "5414d9ac2344ab25a287596a97ba973d5cf9c672", "filename": "src/libcore/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibcore%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibcore%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -567,6 +567,7 @@ impl<T> From<T> for T {\n ///\n /// [#64715]: https://github.com/rust-lang/rust/issues/64715\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n+#[allow(unused_attributes)] // FIXME(#58633): do a principled fix instead.\n #[rustc_reservation_impl = \"permitting this impl would forbid us from adding \\\n                             `impl<T> From<!> for T` later; see rust-lang/rust#64715 for details\"]\n impl<T> From<!> for T {"}, {"sha": "eb7a17098015468304fc21395657360e1c0f938e", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -23,17 +23,17 @@ macro_rules! arena_types {\n             [] generics: rustc::ty::Generics,\n             [] trait_def: rustc::ty::TraitDef,\n             [] adt_def: rustc::ty::AdtDef,\n-            [] steal_mir: rustc::ty::steal::Steal<rustc::mir::BodyCache<$tcx>>,\n-            [] mir: rustc::mir::BodyCache<$tcx>,\n+            [] steal_mir: rustc::ty::steal::Steal<rustc::mir::BodyAndCache<$tcx>>,\n+            [] mir: rustc::mir::BodyAndCache<$tcx>,\n             [] steal_promoted: rustc::ty::steal::Steal<\n                 rustc_index::vec::IndexVec<\n                     rustc::mir::Promoted,\n-                    rustc::mir::BodyCache<$tcx>\n+                    rustc::mir::BodyAndCache<$tcx>\n                 >\n             >,\n             [] promoted: rustc_index::vec::IndexVec<\n                 rustc::mir::Promoted,\n-                rustc::mir::BodyCache<$tcx>\n+                rustc::mir::BodyAndCache<$tcx>\n             >,\n             [] tables: rustc::ty::TypeckTables<$tcx>,\n             [] const_allocs: rustc::mir::interpret::Allocation,"}, {"sha": "c4bc9773d23128369f91c1a7d3d4f1e78535c514", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -329,7 +329,7 @@ declare_lint! {\n \n declare_lint! {\n     pub UNUSED_LABELS,\n-    Allow,\n+    Warn,\n     \"detects labels that are never used\"\n }\n "}, {"sha": "0704771f6ee95447abd31d18843b5a227f6e5aa2", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 25, "deletions": 29, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -115,16 +115,16 @@ impl Cache {\n }\n \n #[derive(Clone, Debug, HashStable, RustcEncodable, RustcDecodable, TypeFoldable)]\n-pub struct BodyCache<'tcx> {\n-    cache: Cache,\n+pub struct BodyAndCache<'tcx> {\n     body: Body<'tcx>,\n+    cache: Cache,\n }\n \n-impl BodyCache<'tcx> {\n+impl BodyAndCache<'tcx> {\n     pub fn new(body: Body<'tcx>) -> Self {\n         Self {\n-            cache: Cache::new(),\n             body,\n+            cache: Cache::new(),\n         }\n     }\n }\n@@ -139,7 +139,7 @@ macro_rules! read_only {\n     };\n }\n \n-impl BodyCache<'tcx> {\n+impl BodyAndCache<'tcx> {\n     pub fn ensure_predecessors(&mut self) {\n         self.cache.ensure_predecessors(&self.body);\n     }\n@@ -148,8 +148,8 @@ impl BodyCache<'tcx> {\n         self.cache.predecessors(&self.body)\n     }\n \n-    pub fn unwrap_read_only(&self) -> ReadOnlyBodyCache<'_, 'tcx> {\n-        ReadOnlyBodyCache::new(&self.cache, &self.body)\n+    pub fn unwrap_read_only(&self) -> ReadOnlyBodyAndCache<'_, 'tcx> {\n+        ReadOnlyBodyAndCache::new(&self.body, &self.cache)\n     }\n \n     pub fn basic_blocks_mut(&mut self) -> &mut IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n@@ -163,48 +163,48 @@ impl BodyCache<'tcx> {\n     }\n }\n \n-impl<'tcx> Index<BasicBlock> for BodyCache<'tcx> {\n+impl<'tcx> Index<BasicBlock> for BodyAndCache<'tcx> {\n     type Output = BasicBlockData<'tcx>;\n \n     fn index(&self, index: BasicBlock) -> &BasicBlockData<'tcx> {\n         &self.body[index]\n     }\n }\n \n-impl<'tcx> IndexMut<BasicBlock> for BodyCache<'tcx> {\n+impl<'tcx> IndexMut<BasicBlock> for BodyAndCache<'tcx> {\n     fn index_mut(&mut self, index: BasicBlock) -> &mut Self::Output {\n         &mut self.basic_blocks_mut()[index]\n     }\n }\n \n-impl<'tcx> Deref for BodyCache<'tcx> {\n+impl<'tcx> Deref for BodyAndCache<'tcx> {\n     type Target = Body<'tcx>;\n \n     fn deref(&self) -> &Self::Target {\n         &self.body\n     }\n }\n \n-impl<'tcx> DerefMut for BodyCache<'tcx> {\n+impl<'tcx> DerefMut for BodyAndCache<'tcx> {\n     fn deref_mut(&mut self) -> &mut Self::Target {\n         &mut self.body\n     }\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub struct ReadOnlyBodyCache<'a, 'tcx> {\n-    cache: &'a Cache,\n+pub struct ReadOnlyBodyAndCache<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n+    cache: &'a Cache,\n }\n \n-impl ReadOnlyBodyCache<'a, 'tcx> {\n-    fn new(cache: &'a Cache, body: &'a Body<'tcx>) -> Self {\n+impl ReadOnlyBodyAndCache<'a, 'tcx> {\n+    fn new(body: &'a Body<'tcx>, cache: &'a Cache) -> Self {\n         assert!(\n             cache.predecessors.is_some(),\n-            \"Cannot construct ReadOnlyBodyCache without computed predecessors\");\n+            \"Cannot construct ReadOnlyBodyAndCache without computed predecessors\");\n         Self {\n-            cache,\n             body,\n+            cache,\n         }\n     }\n \n@@ -220,10 +220,6 @@ impl ReadOnlyBodyCache<'a, 'tcx> {\n         self.cache.unwrap_predecessor_locations(loc, self.body)\n     }\n \n-    pub fn body(&self) -> &'a Body<'tcx> {\n-        self.body\n-    }\n-\n     pub fn basic_blocks(&self) -> &IndexVec<BasicBlock, BasicBlockData<'tcx>> {\n         &self.body.basic_blocks\n     }\n@@ -233,16 +229,16 @@ impl ReadOnlyBodyCache<'a, 'tcx> {\n     }\n }\n \n-impl graph::DirectedGraph for ReadOnlyBodyCache<'a, 'tcx> {\n+impl graph::DirectedGraph for ReadOnlyBodyAndCache<'a, 'tcx> {\n     type Node = BasicBlock;\n }\n \n-impl graph::GraphPredecessors<'graph> for ReadOnlyBodyCache<'a, 'tcx> {\n+impl graph::GraphPredecessors<'graph> for ReadOnlyBodyAndCache<'a, 'tcx> {\n     type Item = BasicBlock;\n     type Iter = IntoIter<BasicBlock>;\n }\n \n-impl graph::WithPredecessors for ReadOnlyBodyCache<'a, 'tcx> {\n+impl graph::WithPredecessors for ReadOnlyBodyAndCache<'a, 'tcx> {\n     fn predecessors(\n         &self,\n         node: Self::Node,\n@@ -251,19 +247,19 @@ impl graph::WithPredecessors for ReadOnlyBodyCache<'a, 'tcx> {\n     }\n }\n \n-impl graph::WithNumNodes for ReadOnlyBodyCache<'a, 'tcx> {\n+impl graph::WithNumNodes for ReadOnlyBodyAndCache<'a, 'tcx> {\n     fn num_nodes(&self) -> usize {\n         self.body.num_nodes()\n     }\n }\n \n-impl graph::WithStartNode for ReadOnlyBodyCache<'a, 'tcx> {\n+impl graph::WithStartNode for ReadOnlyBodyAndCache<'a, 'tcx> {\n     fn start_node(&self) -> Self::Node {\n         self.body.start_node()\n     }\n }\n \n-impl graph::WithSuccessors for ReadOnlyBodyCache<'a, 'tcx> {\n+impl graph::WithSuccessors for ReadOnlyBodyAndCache<'a, 'tcx> {\n     fn successors(\n         &self,\n         node: Self::Node,\n@@ -272,13 +268,13 @@ impl graph::WithSuccessors for ReadOnlyBodyCache<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'b, 'tcx> graph::GraphSuccessors<'b> for ReadOnlyBodyCache<'a, 'tcx> {\n+impl<'a, 'b, 'tcx> graph::GraphSuccessors<'b> for ReadOnlyBodyAndCache<'a, 'tcx> {\n     type Item = BasicBlock;\n     type Iter = iter::Cloned<Successors<'b>>;\n }\n \n \n-impl Deref for ReadOnlyBodyCache<'a, 'tcx> {\n+impl Deref for ReadOnlyBodyAndCache<'a, 'tcx> {\n     type Target = &'a Body<'tcx>;\n \n     fn deref(&self) -> &Self::Target {"}, {"sha": "a7f5a2269251530c93cccdb2310c4b26e76d9ae2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -38,7 +38,7 @@ use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub use crate::mir::interpret::AssertMessage;\n-pub use crate::mir::cache::{BodyCache, ReadOnlyBodyCache};\n+pub use crate::mir::cache::{BodyAndCache, ReadOnlyBodyAndCache};\n pub use crate::read_only;\n \n mod cache;\n@@ -108,7 +108,7 @@ pub struct Body<'tcx> {\n     pub yield_ty: Option<Ty<'tcx>>,\n \n     /// Generator drop glue.\n-    pub generator_drop: Option<Box<BodyCache<'tcx>>>,\n+    pub generator_drop: Option<Box<BodyAndCache<'tcx>>>,\n \n     /// The layout of a generator. Produced by the state transformation.\n     pub generator_layout: Option<GeneratorLayout<'tcx>>,\n@@ -2597,7 +2597,7 @@ impl Location {\n     pub fn is_predecessor_of<'tcx>(\n         &self,\n         other: Location,\n-        body: ReadOnlyBodyCache<'_, 'tcx>\n+        body: ReadOnlyBodyAndCache<'_, 'tcx>\n     ) -> bool {\n         // If we are in the same block as the other location and are an earlier statement\n         // then we are a predecessor of `other`."}, {"sha": "703e0cc78c207b73821d12f58e21d19cc81284bc", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -67,10 +67,10 @@ use syntax_pos::Span;\n \n macro_rules! body_cache_type {\n     (mut $a:lifetime, $tcx:lifetime) => {\n-        &mut BodyCache<$tcx>\n+        &mut BodyAndCache<$tcx>\n     };\n     ($a:lifetime, $tcx:lifetime) => {\n-        ReadOnlyBodyCache<$a, $tcx>\n+        ReadOnlyBodyAndCache<$a, $tcx>\n     };\n }\n "}, {"sha": "538b13c79ce1ccd45960bcf98850a44d5079321e", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -106,30 +106,30 @@ rustc_queries! {\n \n         /// Fetch the MIR for a given `DefId` right after it's built - this includes\n         /// unreachable code.\n-        query mir_built(_: DefId) -> &'tcx Steal<mir::BodyCache<'tcx>> {}\n+        query mir_built(_: DefId) -> &'tcx Steal<mir::BodyAndCache<'tcx>> {}\n \n         /// Fetch the MIR for a given `DefId` up till the point where it is\n         /// ready for const evaluation.\n         ///\n         /// See the README for the `mir` module for details.\n-        query mir_const(_: DefId) -> &'tcx Steal<mir::BodyCache<'tcx>> {\n+        query mir_const(_: DefId) -> &'tcx Steal<mir::BodyAndCache<'tcx>> {\n             no_hash\n         }\n \n         query mir_validated(_: DefId) ->\n             (\n-                &'tcx Steal<mir::BodyCache<'tcx>>,\n-                &'tcx Steal<IndexVec<mir::Promoted, mir::BodyCache<'tcx>>>\n+                &'tcx Steal<mir::BodyAndCache<'tcx>>,\n+                &'tcx Steal<IndexVec<mir::Promoted, mir::BodyAndCache<'tcx>>>\n             ) {\n             no_hash\n         }\n \n         /// MIR after our optimization passes have run. This is MIR that is ready\n         /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n-        query optimized_mir(key: DefId) -> &'tcx mir::BodyCache<'tcx> {\n+        query optimized_mir(key: DefId) -> &'tcx mir::BodyAndCache<'tcx> {\n             cache_on_disk_if { key.is_local() }\n             load_cached(tcx, id) {\n-                let mir: Option<crate::mir::BodyCache<'tcx>>\n+                let mir: Option<crate::mir::BodyAndCache<'tcx>>\n                     = tcx.queries.on_disk_cache.try_load_query_result(tcx, id);\n                 mir.map(|x| {\n                     let cache = tcx.arena.alloc(x);\n@@ -139,13 +139,13 @@ rustc_queries! {\n             }\n         }\n \n-        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::BodyCache<'tcx>> {\n+        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::BodyAndCache<'tcx>> {\n             cache_on_disk_if { key.is_local() }\n             load_cached(tcx, id) {\n                 let promoted: Option<\n                     rustc_index::vec::IndexVec<\n                         crate::mir::Promoted,\n-                        crate::mir::BodyCache<'tcx>\n+                        crate::mir::BodyAndCache<'tcx>\n                     >> = tcx.queries.on_disk_cache.try_load_query_result(tcx, id);\n                 promoted.map(|p| {\n                     let cache = tcx.arena.alloc(p);\n@@ -512,7 +512,7 @@ rustc_queries! {\n         /// in the case of closures, this will be redirected to the enclosing function.\n         query region_scope_tree(_: DefId) -> &'tcx region::ScopeTree {}\n \n-        query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::BodyCache<'tcx> {\n+        query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::BodyAndCache<'tcx> {\n             no_force\n             desc { |tcx| \"generating MIR shim for `{}`\", tcx.def_path_str(key.def_id()) }\n         }"}, {"sha": "f7e422b0403dcf88dd59a63a89e98fb69498001a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -23,7 +23,7 @@ use crate::middle::cstore::EncodedMetadata;\n use crate::middle::lang_items;\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n-use crate::mir::{BodyCache, Field, interpret, Local, Place, PlaceElem, ProjectionKind, Promoted};\n+use crate::mir::{BodyAndCache, Field, interpret, Local, Place, PlaceElem, ProjectionKind, Promoted};\n use crate::mir::interpret::{ConstValue, Allocation, Scalar};\n use crate::ty::subst::{GenericArg, InternalSubsts, SubstsRef, Subst};\n use crate::ty::ReprOptions;\n@@ -1084,17 +1084,17 @@ impl<'tcx> TyCtxt<'tcx> {\n         &self.hir_map\n     }\n \n-    pub fn alloc_steal_mir(self, mir: BodyCache<'tcx>) -> &'tcx Steal<BodyCache<'tcx>> {\n+    pub fn alloc_steal_mir(self, mir: BodyAndCache<'tcx>) -> &'tcx Steal<BodyAndCache<'tcx>> {\n         self.arena.alloc(Steal::new(mir))\n     }\n \n-    pub fn alloc_steal_promoted(self, promoted: IndexVec<Promoted, BodyCache<'tcx>>) ->\n-        &'tcx Steal<IndexVec<Promoted, BodyCache<'tcx>>> {\n+    pub fn alloc_steal_promoted(self, promoted: IndexVec<Promoted, BodyAndCache<'tcx>>) ->\n+        &'tcx Steal<IndexVec<Promoted, BodyAndCache<'tcx>>> {\n         self.arena.alloc(Steal::new(promoted))\n     }\n \n-    pub fn intern_promoted(self, promoted: IndexVec<Promoted, BodyCache<'tcx>>) ->\n-        &'tcx IndexVec<Promoted, BodyCache<'tcx>> {\n+    pub fn intern_promoted(self, promoted: IndexVec<Promoted, BodyAndCache<'tcx>>) ->\n+        &'tcx IndexVec<Promoted, BodyAndCache<'tcx>> {\n         self.arena.alloc(promoted)\n     }\n "}, {"sha": "c7278dc4fac706fce3ad0907e374ff63d234e539", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -2486,7 +2486,7 @@ where\n                     'descend_newtypes: while !fat_pointer_layout.ty.is_unsafe_ptr()\n                         && !fat_pointer_layout.ty.is_region_ptr()\n                     {\n-                        'iter_fields: for i in 0..fat_pointer_layout.fields.count() {\n+                        for i in 0..fat_pointer_layout.fields.count() {\n                             let field_layout = fat_pointer_layout.field(cx, i);\n \n                             if !field_layout.is_zst() {"}, {"sha": "78a31f4e544661f6708057f083bf3a2f85559046", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -18,7 +18,7 @@ use crate::infer::canonical::Canonical;\n use crate::middle::cstore::CrateStoreDyn;\n use crate::middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n-use crate::mir::ReadOnlyBodyCache;\n+use crate::mir::ReadOnlyBodyAndCache;\n use crate::mir::interpret::{GlobalId, ErrorHandled};\n use crate::mir::GeneratorLayout;\n use crate::session::CrateDisambiguator;\n@@ -2981,7 +2981,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Returns the possibly-auto-generated MIR of a `(DefId, Subst)` pair.\n-    pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> ReadOnlyBodyCache<'tcx, 'tcx> {\n+    pub fn instance_mir(self, instance: ty::InstanceDef<'tcx>) -> ReadOnlyBodyAndCache<'tcx, 'tcx> {\n         match instance {\n             ty::InstanceDef::Item(did) => {\n                 self.optimized_mir(did).unwrap_read_only()"}, {"sha": "dabd097b000b51b81952b24f316379d7d8c52cc9", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -153,7 +153,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n     // a loop.\n     fn maybe_sideeffect<Bx: BuilderMethods<'a, 'tcx>>(\n         &self,\n-        mir: mir::ReadOnlyBodyCache<'tcx, 'tcx>,\n+        mir: mir::ReadOnlyBodyAndCache<'tcx, 'tcx>,\n         bx: &mut Bx,\n         targets: &[mir::BasicBlock],\n     ) {\n@@ -718,7 +718,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     'descend_newtypes: while !op.layout.ty.is_unsafe_ptr()\n                                     && !op.layout.ty.is_region_ptr()\n                     {\n-                        'iter_fields: for i in 0..op.layout.fields.count() {\n+                        for i in 0..op.layout.fields.count() {\n                             let field = op.extract_field(&mut bx, i);\n                             if !field.layout.is_zst() {\n                                 // we found the one non-zero-sized field that is allowed"}, {"sha": "e535aecd633da04f0f27bc9db48c31c31637b402", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -21,7 +21,7 @@ use self::operand::{OperandRef, OperandValue};\n pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     instance: Instance<'tcx>,\n \n-    mir: mir::ReadOnlyBodyCache<'tcx, 'tcx>,\n+    mir: mir::ReadOnlyBodyAndCache<'tcx, 'tcx>,\n \n     debug_context: Option<FunctionDebugContext<Bx::DIScope>>,\n \n@@ -159,7 +159,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         }).collect();\n \n     let (landing_pads, funclets) = create_funclets(&mir, &mut bx, &cleanup_kinds, &block_bxs);\n-    let mir_body: &mir::Body<'_> = mir.body();\n+    let mir_body: &mir::Body<'_> = *mir;\n     let mut fx = FunctionCx {\n         instance,\n         mir,"}, {"sha": "b77f2cb8d6e35b580e357ce0c6511e918948eb6c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -341,7 +341,7 @@ fn register_builtins(store: &mut lint::LintStore, no_interleave_lints: bool) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/46205\");\n     store.register_removed(\"legacy_constructor_visibility\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/39207\");\n-    store.register_removed(\"legacy_disrectory_ownership\",\n+    store.register_removed(\"legacy_directory_ownership\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/37872\");\n     store.register_removed(\"safe_extern_statics\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/36247\");"}, {"sha": "0107a22772fd225adb9c65290c792fda151547c3", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc::dep_graph::{self, DepNodeIndex};\n use rustc::middle::lang_items;\n-use rustc::mir::{self, BodyCache, interpret, Promoted};\n+use rustc::mir::{self, BodyAndCache, interpret, Promoted};\n use rustc::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -1079,7 +1079,7 @@ impl<'a, 'tcx> CrateMetadata {\n             self.root.per_def.mir.get(self, id).is_some()\n     }\n \n-    fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> BodyCache<'tcx> {\n+    fn get_optimized_mir(&self, tcx: TyCtxt<'tcx>, id: DefIndex) -> BodyAndCache<'tcx> {\n         let mut cache = self.root.per_def.mir.get(self, id)\n             .filter(|_| !self.is_proc_macro(id))\n             .unwrap_or_else(|| {\n@@ -1094,7 +1094,7 @@ impl<'a, 'tcx> CrateMetadata {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         id: DefIndex,\n-    ) -> IndexVec<Promoted, BodyCache<'tcx>> {\n+    ) -> IndexVec<Promoted, BodyAndCache<'tcx>> {\n         let mut cache = self.root.per_def.promoted_mir.get(self, id)\n             .filter(|_| !self.is_proc_macro(id))\n             .unwrap_or_else(|| {"}, {"sha": "5abae4293731d9c4f58dc9944e37c8a00da89856", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -276,8 +276,8 @@ define_per_def_tables! {\n     // Also, as an optimization, a missing entry indicates an empty `&[]`.\n     inferred_outlives: Table<DefIndex, Lazy!(&'tcx [(ty::Predicate<'tcx>, Span)])>,\n     super_predicates: Table<DefIndex, Lazy!(ty::GenericPredicates<'tcx>)>,\n-    mir: Table<DefIndex, Lazy!(mir::BodyCache<'tcx>)>,\n-    promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::BodyCache<'tcx>>)>,\n+    mir: Table<DefIndex, Lazy!(mir::BodyAndCache<'tcx>)>,\n+    promoted_mir: Table<DefIndex, Lazy!(IndexVec<mir::Promoted, mir::BodyAndCache<'tcx>>)>,\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]"}, {"sha": "2980483bfa4c7b17f88772819cbf319c7007ab88", "filename": "src/librustc_mir/borrow_check/borrow_set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fborrow_set.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -5,7 +5,7 @@ use crate::dataflow::indexes::BorrowIndex;\n use crate::dataflow::move_paths::MoveData;\n use rustc::mir::traversal;\n use rustc::mir::visit::{PlaceContext, Visitor, NonUseContext, MutatingUseContext};\n-use rustc::mir::{self, Location, Body, Local, ReadOnlyBodyCache};\n+use rustc::mir::{self, Location, Body, Local, ReadOnlyBodyAndCache};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n use rustc_index::vec::IndexVec;\n@@ -90,7 +90,7 @@ crate enum LocalsStateAtExit {\n impl LocalsStateAtExit {\n     fn build(\n         locals_are_invalidated_at_exit: bool,\n-        body: ReadOnlyBodyCache<'_, 'tcx>,\n+        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n         move_data: &MoveData<'tcx>\n     ) -> Self {\n         struct HasStorageDead(BitSet<Local>);\n@@ -124,7 +124,7 @@ impl LocalsStateAtExit {\n impl<'tcx> BorrowSet<'tcx> {\n     pub fn build(\n         tcx: TyCtxt<'tcx>,\n-        body: ReadOnlyBodyCache<'_, 'tcx>,\n+        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n         locals_are_invalidated_at_exit: bool,\n         move_data: &MoveData<'tcx>,\n     ) -> Self {"}, {"sha": "016a3195c982d10f473816ce49a95d0b203db921", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir;\n use rustc::hir::Node;\n-use rustc::mir::{self, ClearCrossCrate, Local, LocalInfo, Location, ReadOnlyBodyCache};\n+use rustc::mir::{self, ClearCrossCrate, Local, LocalInfo, Location, ReadOnlyBodyAndCache};\n use rustc::mir::{Mutability, Place, PlaceRef, PlaceBase, ProjectionElem};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_index::vec::Idx;\n@@ -533,7 +533,7 @@ fn suggest_ampmut_self<'tcx>(\n // by trying (3.), then (2.) and finally falling back on (1.).\n fn suggest_ampmut<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n     local: Local,\n     local_decl: &mir::LocalDecl<'tcx>,\n     opt_ty_info: Option<Span>,"}, {"sha": "427003f24cb14b0cb92d30e1933a0c24ae17245e", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -9,8 +9,8 @@ use rustc::lint::builtin::UNUSED_MUT;\n use rustc::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT};\n use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{\n-    ClearCrossCrate, Local, Location, Body, BodyCache, Mutability, Operand, Place, PlaceBase,\n-    PlaceElem, PlaceRef, ReadOnlyBodyCache, Static, StaticKind, read_only\n+    ClearCrossCrate, Local, Location, Body, BodyAndCache, Mutability, Operand, Place, PlaceBase,\n+    PlaceElem, PlaceRef, ReadOnlyBodyAndCache, Static, StaticKind, read_only\n };\n use rustc::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n use rustc::mir::{Terminator, TerminatorKind};\n@@ -99,7 +99,7 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def_id: DefId) -> BorrowCheckResult<'_> {\n fn do_mir_borrowck<'a, 'tcx>(\n     infcx: &InferCtxt<'a, 'tcx>,\n     input_body: &Body<'tcx>,\n-    input_promoted: &IndexVec<Promoted, BodyCache<'tcx>>,\n+    input_promoted: &IndexVec<Promoted, BodyAndCache<'tcx>>,\n     def_id: DefId,\n ) -> BorrowCheckResult<'tcx> {\n     debug!(\"do_mir_borrowck(def_id = {:?})\", def_id);\n@@ -161,7 +161,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n     // will have a lifetime tied to the inference context.\n     let body_clone: Body<'tcx> = input_body.clone();\n     let mut promoted = input_promoted.clone();\n-    let mut body = BodyCache::new(body_clone);\n+    let mut body = BodyAndCache::new(body_clone);\n     let free_regions =\n         nll::replace_regions_in_mir(infcx, def_id, param_env, &mut body, &mut promoted);\n     let body = read_only!(body); // no further changes\n@@ -402,7 +402,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n-    body: ReadOnlyBodyCache<'cx, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'cx, 'tcx>,\n     mir_def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n     move_data: &'cx MoveData<'tcx>,\n@@ -493,7 +493,7 @@ impl<'cx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tcx\n     type FlowState = Flows<'cx, 'tcx>;\n \n     fn body(&self) -> &'cx Body<'tcx> {\n-        self.body.body()\n+        *self.body\n     }\n \n     fn visit_block_entry(&mut self, bb: BasicBlock, flow_state: &Self::FlowState) {"}, {"sha": "2442bdf8a9b4e50962d714c60232ffd2e3ede8af", "filename": "src/librustc_mir/borrow_check/nll/invalidation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Finvalidation.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -11,7 +11,7 @@ use crate::borrow_check::path_utils::*;\n use crate::dataflow::indexes::BorrowIndex;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::visit::Visitor;\n-use rustc::mir::{BasicBlock, Location, Body, Place, ReadOnlyBodyCache, Rvalue};\n+use rustc::mir::{BasicBlock, Location, Body, Place, ReadOnlyBodyAndCache, Rvalue};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::TerminatorKind;\n use rustc::mir::{Operand, BorrowKind};\n@@ -22,7 +22,7 @@ pub(super) fn generate_invalidates<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     all_facts: &mut Option<AllFacts>,\n     location_table: &LocationTable,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n     borrow_set: &BorrowSet<'tcx>,\n ) {\n     if all_facts.is_none() {"}, {"sha": "49a03ce1ed232b32be9a80894867138b4fd1c479", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -12,8 +12,8 @@ use crate::borrow_check::Upvar;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::mir::{ClosureOutlivesSubject, ClosureRegionRequirements,\n-                 Local, Location, Body, BodyCache, LocalKind, BasicBlock,\n-                 Promoted, ReadOnlyBodyCache};\n+                 Local, Location, Body, BodyAndCache, LocalKind, BasicBlock,\n+                 Promoted, ReadOnlyBodyAndCache};\n use rustc::ty::{self, RegionKind, RegionVid};\n use rustc_index::vec::IndexVec;\n use rustc_errors::Diagnostic;\n@@ -55,8 +55,8 @@ pub(in crate::borrow_check) fn replace_regions_in_mir<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n-    body: &mut BodyCache<'tcx>,\n-    promoted: &mut IndexVec<Promoted, BodyCache<'tcx>>,\n+    body: &mut BodyAndCache<'tcx>,\n+    promoted: &mut IndexVec<Promoted, BodyAndCache<'tcx>>,\n ) -> UniversalRegions<'tcx> {\n     debug!(\"replace_regions_in_mir(def_id={:?})\", def_id);\n \n@@ -158,8 +158,8 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     infcx: &InferCtxt<'cx, 'tcx>,\n     def_id: DefId,\n     universal_regions: UniversalRegions<'tcx>,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n-    promoted: &IndexVec<Promoted, ReadOnlyBodyCache<'_, 'tcx>>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+    promoted: &IndexVec<Promoted, ReadOnlyBodyAndCache<'_, 'tcx>>,\n     local_names: &IndexVec<Local, Option<Symbol>>,\n     upvars: &[Upvar],\n     location_table: &LocationTable,"}, {"sha": "0bf0cd37cd8439fc774c7c6b3a55c50c4f1ea788", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,4 +1,4 @@\n-use rustc::mir::{BasicBlock, Location, Body, ReadOnlyBodyCache};\n+use rustc::mir::{BasicBlock, Location, Body, ReadOnlyBodyAndCache};\n use rustc::ty::{self, RegionVid};\n use rustc_index::bit_set::{HybridBitSet, SparseBitMatrix};\n use rustc_data_structures::fx::FxHashMap;\n@@ -92,7 +92,7 @@ impl RegionValueElements {\n     /// Pushes all predecessors of `index` onto `stack`.\n     crate fn push_predecessors(\n         &self,\n-        body: ReadOnlyBodyCache<'_, '_>,\n+        body: ReadOnlyBodyAndCache<'_, '_>,\n         index: PointIndex,\n         stack: &mut Vec<PointIndex>,\n     ) {"}, {"sha": "ba323b113e9ebf23b6428970f1fb87327715a097", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,6 +1,6 @@\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n-use rustc::mir::{BodyCache, Location, PlaceElem, Promoted};\n+use rustc::mir::{BodyAndCache, Location, PlaceElem, Promoted};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc_index::vec::IndexVec;\n@@ -9,8 +9,8 @@ use rustc_index::vec::IndexVec;\n /// inference variables, returning the number of variables created.\n pub fn renumber_mir<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n-    body: &mut BodyCache<'tcx>,\n-    promoted: &mut IndexVec<Promoted, BodyCache<'tcx>>,\n+    body: &mut BodyAndCache<'tcx>,\n+    promoted: &mut IndexVec<Promoted, BodyAndCache<'tcx>>,\n ) {\n     debug!(\"renumber_mir()\");\n     debug!(\"renumber_mir: body.arg_count={:?}\", body.arg_count);"}, {"sha": "ab8c6f279733b44f5a4f8b1f82316ef4cf5e9254", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,7 +1,7 @@\n use crate::borrow_check::nll::region_infer::values::{PointIndex, RegionValueElements};\n use crate::util::liveness::{categorize, DefUse};\n use rustc::mir::visit::{PlaceContext, Visitor};\n-use rustc::mir::{Local, Location, ReadOnlyBodyCache};\n+use rustc::mir::{Local, Location, ReadOnlyBodyAndCache};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_data_structures::vec_linked_list as vll;\n \n@@ -60,7 +60,7 @@ impl LocalUseMap {\n     crate fn build(\n         live_locals: &Vec<Local>,\n         elements: &RegionValueElements,\n-        body: ReadOnlyBodyCache<'_, '_>,\n+        body: ReadOnlyBodyAndCache<'_, '_>,\n     ) -> Self {\n         let nones = IndexVec::from_elem_n(None, body.local_decls.len());\n         let mut local_use_map = LocalUseMap {"}, {"sha": "8f8e9af797963fd4183879ba5249e27588f1abf3", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -7,7 +7,7 @@ use crate::borrow_check::nll::ToRegionVid;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::FlowAtLocation;\n use crate::dataflow::MaybeInitializedPlaces;\n-use rustc::mir::{Body, Local, ReadOnlyBodyCache};\n+use rustc::mir::{Body, Local, ReadOnlyBodyAndCache};\n use rustc::ty::{RegionVid, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use std::rc::Rc;\n@@ -28,7 +28,7 @@ mod trace;\n /// performed before\n pub(super) fn generate<'tcx>(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'tcx>>,\n     move_data: &MoveData<'tcx>,"}, {"sha": "810811f9f5cf3af0d3ff1504762e095d943f759d", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -3,7 +3,7 @@ use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::{LookupResult, MoveData};\n use crate::util::liveness::{categorize, DefUse};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n-use rustc::mir::{Local, Location, Place, ReadOnlyBodyCache};\n+use rustc::mir::{Local, Location, Place, ReadOnlyBodyAndCache};\n use rustc::ty::subst::GenericArg;\n use rustc::ty::Ty;\n \n@@ -97,7 +97,7 @@ fn add_var_uses_regions(typeck: &mut TypeChecker<'_, 'tcx>, local: Local, ty: Ty\n \n pub(super) fn populate_access_facts(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n     location_table: &LocationTable,\n     move_data: &MoveData<'_>,\n     drop_used: &mut Vec<(Local, Location)>,"}, {"sha": "ba6fd75eea59ca6070206ae8a755143ba5d673a9", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/trace.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Ftrace.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -7,7 +7,7 @@ use crate::dataflow::indexes::MovePathIndex;\n use crate::dataflow::move_paths::MoveData;\n use crate::dataflow::{FlowAtLocation, FlowsAtLocation, MaybeInitializedPlaces};\n use rustc::infer::canonical::QueryRegionConstraints;\n-use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, ReadOnlyBodyCache};\n+use rustc::mir::{BasicBlock, ConstraintCategory, Local, Location, ReadOnlyBodyAndCache};\n use rustc::traits::query::dropck_outlives::DropckOutlivesResult;\n use rustc::traits::query::type_op::outlives::DropckOutlives;\n use rustc::traits::query::type_op::TypeOp;\n@@ -32,7 +32,7 @@ use std::rc::Rc;\n /// this respects `#[may_dangle]` annotations).\n pub(super) fn trace(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n     elements: &Rc<RegionValueElements>,\n     flow_inits: &mut FlowAtLocation<'tcx, MaybeInitializedPlaces<'_, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n@@ -71,7 +71,7 @@ struct LivenessContext<'me, 'typeck, 'flow, 'tcx> {\n     elements: &'me RegionValueElements,\n \n     /// MIR we are analyzing.\n-    body: ReadOnlyBodyCache<'me, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'me, 'tcx>,\n \n     /// Mapping to/from the various indices used for initialization tracking.\n     move_data: &'me MoveData<'tcx>,\n@@ -249,7 +249,7 @@ impl LivenessResults<'me, 'typeck, 'flow, 'tcx> {\n         // Reverse DFS. But for drops, we do it a bit differently.\n         // The stack only ever stores *terminators of blocks*. Within\n         // a block, we walk back the statements in an inner loop.\n-        'next_block: while let Some(term_point) = self.stack.pop() {\n+        while let Some(term_point) = self.stack.pop() {\n             self.compute_drop_live_points_for_block(mpi, term_point);\n         }\n     }"}, {"sha": "8d4e76cadbfc2cee142e8bb1fb406cb37700ddc1", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -117,8 +117,8 @@ mod relate_tys;\n pub(crate) fn type_check<'tcx>(\n     infcx: &InferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n-    promoted: &IndexVec<Promoted, ReadOnlyBodyCache<'_, 'tcx>>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n+    promoted: &IndexVec<Promoted, ReadOnlyBodyAndCache<'_, 'tcx>>,\n     mir_def_id: DefId,\n     universal_regions: &Rc<UniversalRegions<'tcx>>,\n     location_table: &LocationTable,\n@@ -196,8 +196,8 @@ fn type_check_internal<'a, 'tcx, R>(\n     infcx: &'a InferCtxt<'a, 'tcx>,\n     mir_def_id: DefId,\n     param_env: ty::ParamEnv<'tcx>,\n-    body: ReadOnlyBodyCache<'a, 'tcx>,\n-    promoted: &'a IndexVec<Promoted, ReadOnlyBodyCache<'_, 'tcx>>,\n+    body: ReadOnlyBodyAndCache<'a, 'tcx>,\n+    promoted: &'a IndexVec<Promoted, ReadOnlyBodyAndCache<'_, 'tcx>>,\n     region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n     implicit_region_bound: ty::Region<'tcx>,\n     borrowck_context: &'a mut BorrowCheckContext<'a, 'tcx>,\n@@ -206,7 +206,7 @@ fn type_check_internal<'a, 'tcx, R>(\n ) -> R {\n     let mut checker = TypeChecker::new(\n         infcx,\n-        body.body(),\n+        *body,\n         mir_def_id,\n         param_env,\n         region_bound_pairs,\n@@ -215,7 +215,7 @@ fn type_check_internal<'a, 'tcx, R>(\n         universal_region_relations,\n     );\n     let errors_reported = {\n-        let mut verifier = TypeVerifier::new(&mut checker, body.body(), promoted);\n+        let mut verifier = TypeVerifier::new(&mut checker, *body, promoted);\n         verifier.visit_body(body);\n         verifier.errors_reported\n     };\n@@ -272,7 +272,7 @@ enum FieldAccessError {\n struct TypeVerifier<'a, 'b, 'tcx> {\n     cx: &'a mut TypeChecker<'b, 'tcx>,\n     body: &'b Body<'tcx>,\n-    promoted: &'b IndexVec<Promoted, ReadOnlyBodyCache<'b, 'tcx>>,\n+    promoted: &'b IndexVec<Promoted, ReadOnlyBodyAndCache<'b, 'tcx>>,\n     last_span: Span,\n     mir_def_id: DefId,\n     errors_reported: bool,\n@@ -396,7 +396,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n         }\n     }\n \n-    fn visit_body(&mut self, body: ReadOnlyBodyCache<'_, 'tcx>) {\n+    fn visit_body(&mut self, body: ReadOnlyBodyAndCache<'_, 'tcx>) {\n         self.sanitize_type(&\"return type\", body.return_ty());\n         for local_decl in &body.local_decls {\n             self.sanitize_type(local_decl, local_decl.ty);\n@@ -412,7 +412,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n     fn new(\n         cx: &'a mut TypeChecker<'b, 'tcx>,\n         body: &'b Body<'tcx>,\n-        promoted: &'b IndexVec<Promoted, ReadOnlyBodyCache<'b, 'tcx>>,\n+        promoted: &'b IndexVec<Promoted, ReadOnlyBodyAndCache<'b, 'tcx>>,\n     ) -> Self {\n         TypeVerifier {\n             body,\n@@ -548,14 +548,14 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n \n     fn sanitize_promoted(\n         &mut self,\n-        promoted_body: ReadOnlyBodyCache<'b, 'tcx>,\n+        promoted_body: ReadOnlyBodyAndCache<'b, 'tcx>,\n         location: Location\n     ) {\n         // Determine the constraints from the promoted MIR by running the type\n         // checker on the promoted MIR, then transfer the constraints back to\n         // the main MIR, changing the locations to the provided location.\n \n-        let parent_body = mem::replace(&mut self.body, promoted_body.body());\n+        let parent_body = mem::replace(&mut self.body, *promoted_body);\n \n         // Use new sets of constraints and closure bounds so that we can\n         // modify their locations.\n@@ -1378,7 +1378,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n     fn check_stmt(\n         &mut self,\n-        body: ReadOnlyBodyCache<'_, 'tcx>,\n+        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n         stmt: &Statement<'tcx>,\n         location: Location)\n     {\n@@ -1994,7 +1994,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n     fn check_rvalue(\n         &mut self,\n-        body: ReadOnlyBodyCache<'_, 'tcx>,\n+        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n         rvalue: &Rvalue<'tcx>,\n         location: Location)\n     {\n@@ -2766,7 +2766,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         })\n     }\n \n-    fn typeck_mir(&mut self, body: ReadOnlyBodyCache<'_, 'tcx>) {\n+    fn typeck_mir(&mut self, body: ReadOnlyBodyAndCache<'_, 'tcx>) {\n         self.last_span = body.span;\n         debug!(\"run_on_mir: {:?}\", body.span);\n "}, {"sha": "248faa56777de4d2ae0c56b5f5ef03422e11f8ce", "filename": "src/librustc_mir/borrow_check/prefixes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fprefixes.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -11,7 +11,7 @@ use super::MirBorrowckCtxt;\n \n use rustc::hir;\n use rustc::ty::{self, TyCtxt};\n-use rustc::mir::{Place, PlaceBase, PlaceRef, ProjectionElem, ReadOnlyBodyCache};\n+use rustc::mir::{Place, PlaceBase, PlaceRef, ProjectionElem, ReadOnlyBodyAndCache};\n \n pub trait IsPrefixOf<'cx, 'tcx> {\n     fn is_prefix_of(&self, other: PlaceRef<'cx, 'tcx>) -> bool;\n@@ -26,7 +26,7 @@ impl<'cx, 'tcx> IsPrefixOf<'cx, 'tcx> for PlaceRef<'cx, 'tcx> {\n }\n \n pub(super) struct Prefixes<'cx, 'tcx> {\n-    body: ReadOnlyBodyCache<'cx, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'cx, 'tcx>,\n     tcx: TyCtxt<'tcx>,\n     kind: PrefixSet,\n     next: Option<PlaceRef<'cx, 'tcx>>,"}, {"sha": "0009eb45cc035075fd88c4717ce0339996506c1b", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -24,7 +24,7 @@ use syntax_pos::Span;\n use super::lints;\n \n /// Construct the MIR for a given `DefId`.\n-pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyCache<'_> {\n+pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n \n     // Figure out what primary body this item has.\n@@ -196,7 +196,7 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyCache<'_> {\n \n         lints::check(tcx, &body, def_id);\n \n-        let mut body = BodyCache::new(body);\n+        let mut body = BodyAndCache::new(body);\n         body.ensure_predecessors();\n         body\n     })"}, {"sha": "b219fec31dc59a3e3c44fb2ae6f6732ac44714f0", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -369,7 +369,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         }\n         // This is a const fn. Call it.\n         Ok(Some(match ecx.load_mir(instance.def, None) {\n-            Ok(body) => body.body(),\n+            Ok(body) => *body,\n             Err(err) => {\n                 if let err_unsup!(NoMirFor(ref path)) = err.kind {\n                     return Err(\n@@ -742,7 +742,7 @@ pub fn const_eval_raw_provider<'tcx>(\n \n     let res = ecx.load_mir(cid.instance.def, cid.promoted);\n     res.and_then(\n-        |body| eval_body_using_ecx(&mut ecx, cid, body.body())\n+        |body| eval_body_using_ecx(&mut ecx, cid, *body)\n     ).and_then(|place| {\n         Ok(RawConst {\n             alloc_id: place.ptr.assert_ptr().alloc_id,"}, {"sha": "b8abe6d70edbd59a51d21958f84c5655c49158e6", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -75,20 +75,20 @@ impl<'a, 'tcx> BottomValue for MaybeStorageLive<'a, 'tcx> {\n /// Dataflow analysis that determines whether each local requires storage at a\n /// given location; i.e. whether its storage can go away without being observed.\n pub struct RequiresStorage<'mir, 'tcx> {\n-    body: ReadOnlyBodyCache<'mir, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'mir, 'tcx>,\n     borrowed_locals:\n         RefCell<DataflowResultsRefCursor<'mir, 'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>>,\n }\n \n impl<'mir, 'tcx: 'mir> RequiresStorage<'mir, 'tcx> {\n     pub fn new(\n-        body: ReadOnlyBodyCache<'mir, 'tcx>,\n+        body: ReadOnlyBodyAndCache<'mir, 'tcx>,\n         borrowed_locals: &'mir DataflowResults<'tcx, HaveBeenBorrowedLocals<'mir, 'tcx>>,\n     ) -> Self {\n         RequiresStorage {\n             body,\n             borrowed_locals: RefCell::new(\n-                DataflowResultsCursor::new(borrowed_locals, body.body())\n+                DataflowResultsCursor::new(borrowed_locals, *body)\n             ),\n         }\n     }"}, {"sha": "653718c462f074cb3db889f4b934638c5384c55f", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -312,7 +312,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         instance: ty::InstanceDef<'tcx>,\n         promoted: Option<mir::Promoted>,\n-    ) -> InterpResult<'tcx, mir::ReadOnlyBodyCache<'tcx, 'tcx>> {\n+    ) -> InterpResult<'tcx, mir::ReadOnlyBodyAndCache<'tcx, 'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         let did = instance.def_id();\n         if did.is_local()"}, {"sha": "47b08048f8389e0c6fb3ad4b9120f12c06945cbf", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -26,7 +26,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.mir_shims = make_shim;\n }\n \n-fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx BodyCache<'tcx> {\n+fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx BodyAndCache<'tcx> {\n     debug!(\"make_shim({:?})\", instance);\n \n     let mut result = match instance {\n@@ -170,7 +170,7 @@ fn local_decls_for_sig<'tcx>(sig: &ty::FnSig<'tcx>, span: Span)\n \n fn build_drop_shim<'tcx>(\n     tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>\n-) -> BodyCache<'tcx> {\n+) -> BodyAndCache<'tcx> {\n     debug!(\"build_drop_shim(def_id={:?}, ty={:?})\", def_id, ty);\n \n     // Check if this is a generator, if so, return the drop glue for it\n@@ -208,7 +208,7 @@ fn build_drop_shim<'tcx>(\n         sig.inputs().len(),\n         span);\n \n-    let mut body = BodyCache::new(body);\n+    let mut body = BodyAndCache::new(body);\n \n     if let Some(..) = ty {\n         // The first argument (index 0), but add 1 for the return value.\n@@ -322,7 +322,11 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n }\n \n /// Builds a `Clone::clone` shim for `self_ty`. Here, `def_id` is `Clone::clone`.\n-fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -> BodyCache<'tcx> {\n+fn build_clone_shim<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    self_ty: Ty<'tcx>,\n+) -> BodyAndCache<'tcx> {\n     debug!(\"build_clone_shim(def_id={:?})\", def_id);\n \n     let param_env = tcx.param_env(def_id);\n@@ -351,7 +355,7 @@ fn build_clone_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, self_ty: Ty<'tcx>) -\n         }\n     };\n \n-    BodyCache::new(builder.into_mir())\n+    BodyAndCache::new(builder.into_mir())\n }\n \n struct CloneShimBuilder<'tcx> {\n@@ -712,7 +716,7 @@ fn build_call_shim<'tcx>(\n     rcvr_adjustment: Adjustment,\n     call_kind: CallKind,\n     untuple_args: Option<&[Ty<'tcx>]>,\n-) -> BodyCache<'tcx> {\n+) -> BodyAndCache<'tcx> {\n     debug!(\"build_call_shim(instance={:?}, rcvr_adjustment={:?}, \\\n             call_kind={:?}, untuple_args={:?})\",\n            instance, rcvr_adjustment, call_kind, untuple_args);\n@@ -853,10 +857,10 @@ fn build_call_shim<'tcx>(\n     if let Abi::RustCall = sig.abi {\n         body.spread_arg = Some(Local::new(sig.inputs().len()));\n     }\n-    BodyCache::new(body)\n+    BodyAndCache::new(body)\n }\n \n-pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &BodyCache<'_> {\n+pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &BodyAndCache<'_> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n     let span = tcx.hir().span_if_local(ctor_id)\n@@ -940,7 +944,7 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &BodyCache<'_> {\n         |_, _| Ok(()),\n     );\n \n-    let mut body = BodyCache::new(body);\n+    let mut body = BodyAndCache::new(body);\n     body.ensure_predecessors();\n     tcx.arena.alloc(body)\n }"}, {"sha": "d1832ebf962a486a255e950338a0fd809129fd74", "filename": "src/librustc_mir/transform/add_call_guards.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_call_guards.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -32,14 +32,14 @@ pub use self::AddCallGuards::*;\n \n impl<'tcx> MirPass<'tcx> for AddCallGuards {\n     fn run_pass(\n-        &self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyCache<'tcx>\n+        &self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>\n     ) {\n         self.add_call_guards(body);\n     }\n }\n \n impl AddCallGuards {\n-    pub fn add_call_guards(&self, body: &mut BodyCache<'_>) {\n+    pub fn add_call_guards(&self, body: &mut BodyAndCache<'_>) {\n         let pred_count: IndexVec<_, _> = body.predecessors().iter().map(|ps| ps.len()).collect();\n \n         // We need a place to store the new blocks generated"}, {"sha": "861e7fea4f903f7af7f8d3f97883e5396aee98fc", "filename": "src/librustc_mir/transform/add_moves_for_packed_drops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_moves_for_packed_drops.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -40,14 +40,14 @@ use crate::util;\n pub struct AddMovesForPackedDrops;\n \n impl<'tcx> MirPass<'tcx> for AddMovesForPackedDrops {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         debug!(\"add_moves_for_packed_drops({:?} @ {:?})\", src, body.span);\n         add_moves_for_packed_drops(tcx, body, src.def_id());\n     }\n }\n \n pub fn add_moves_for_packed_drops<'tcx>(\n-    tcx: TyCtxt<'tcx>, body: &mut BodyCache<'tcx>, def_id: DefId\n+    tcx: TyCtxt<'tcx>, body: &mut BodyAndCache<'tcx>, def_id: DefId\n ) {\n     let patch = add_moves_for_packed_drops_patch(tcx, body, def_id);\n     patch.apply(body);"}, {"sha": "dc21c674eea2f104bc095fcca480f15f67a02221", "filename": "src/librustc_mir/transform/add_retag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fadd_retag.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -59,7 +59,7 @@ fn may_be_reference<'tcx>(ty: Ty<'tcx>) -> bool {\n }\n \n impl<'tcx> MirPass<'tcx> for AddRetag {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         if !tcx.sess.opts.debugging_opts.mir_emit_retag {\n             return;\n         }"}, {"sha": "89672e81c7cd4cb37ed1f51a2c70d9f13f39a48e", "filename": "src/librustc_mir/transform/check_consts/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -20,7 +20,7 @@ pub mod validation;\n /// Information about the item currently being const-checked, as well as a reference to the global\n /// context.\n pub struct Item<'mir, 'tcx> {\n-    pub body: mir::ReadOnlyBodyCache<'mir, 'tcx>,\n+    pub body: mir::ReadOnlyBodyAndCache<'mir, 'tcx>,\n     pub tcx: TyCtxt<'tcx>,\n     pub def_id: DefId,\n     pub param_env: ty::ParamEnv<'tcx>,\n@@ -31,7 +31,7 @@ impl Item<'mir, 'tcx> {\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n-        body: mir::ReadOnlyBodyCache<'mir, 'tcx>,\n+        body: mir::ReadOnlyBodyAndCache<'mir, 'tcx>,\n     ) -> Self {\n         let param_env = tcx.param_env(def_id);\n         let const_kind = ConstKind::for_item(tcx, def_id);"}, {"sha": "6261315c711cddbba4df0e7dbde9262313a36fda", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -40,7 +40,7 @@ impl<Q: Qualif> QualifCursor<'a, 'mir, 'tcx, Q> {\n         let results =\n             dataflow::Engine::new(item.tcx, &item.body, item.def_id, dead_unwinds, analysis)\n                 .iterate_to_fixpoint();\n-        let cursor = dataflow::ResultsCursor::new(item.body.body(), results);\n+        let cursor = dataflow::ResultsCursor::new(*item.body, results);\n \n         let mut in_any_value_of_ty = BitSet::new_empty(item.body.local_decls.len());\n         for (local, decl) in item.body.local_decls.iter_enumerated() {\n@@ -175,13 +175,13 @@ impl Validator<'a, 'mir, 'tcx> {\n             item.def_id,\n             &item.tcx.get_attrs(item.def_id),\n             &dead_unwinds,\n-            old_dataflow::IndirectlyMutableLocals::new(item.tcx, item.body.body(), item.param_env),\n+            old_dataflow::IndirectlyMutableLocals::new(item.tcx, *item.body, item.param_env),\n             |_, local| old_dataflow::DebugFormatted::new(&local),\n         );\n \n         let indirectly_mutable = old_dataflow::DataflowResultsCursor::new(\n             indirectly_mutable,\n-            item.body.body(),\n+            *item.body,\n         );\n \n         let qualifs = Qualifs {"}, {"sha": "34519bc9fa62782df9f6472805a88bc20d2419c6", "filename": "src/librustc_mir/transform/cleanup_post_borrowck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcleanup_post_borrowck.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -16,7 +16,7 @@\n //! [`FakeRead`]: rustc::mir::StatementKind::FakeRead\n //! [`Nop`]: rustc::mir::StatementKind::Nop\n \n-use rustc::mir::{BodyCache, BorrowKind, Rvalue, Location};\n+use rustc::mir::{BodyAndCache, BorrowKind, Rvalue, Location};\n use rustc::mir::{Statement, StatementKind};\n use rustc::mir::visit::MutVisitor;\n use rustc::ty::TyCtxt;\n@@ -30,7 +30,7 @@ pub struct DeleteNonCodegenStatements<'tcx> {\n \n impl<'tcx> MirPass<'tcx> for CleanupNonCodegenStatements {\n     fn run_pass(\n-        &self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyCache<'tcx>\n+        &self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>\n     ) {\n         let mut delete = DeleteNonCodegenStatements { tcx };\n         delete.visit_body(body);"}, {"sha": "884312514e47e653b7bba969081fd0342eac776f", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -7,9 +7,9 @@ use std::cell::Cell;\n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n use rustc::mir::{\n-    AggregateKind, Constant, Location, Place, PlaceBase, Body, BodyCache, Operand, Local, UnOp,\n-    Rvalue, StatementKind, Statement, LocalKind, TerminatorKind, Terminator,  ClearCrossCrate,\n-    SourceInfo, BinOp, SourceScope, SourceScopeData, LocalDecl, BasicBlock, ReadOnlyBodyCache,\n+    AggregateKind, Constant, Location, Place, PlaceBase, Body, BodyAndCache, Operand, Local, UnOp,\n+    Rvalue, StatementKind, Statement, LocalKind, TerminatorKind, Terminator, ClearCrossCrate,\n+    SourceInfo, BinOp, SourceScope, SourceScopeData, LocalDecl, BasicBlock, ReadOnlyBodyAndCache,\n     read_only, RETURN_PLACE\n };\n use rustc::mir::visit::{\n@@ -43,7 +43,7 @@ pub struct ConstProp;\n \n impl<'tcx> MirPass<'tcx> for ConstProp {\n     fn run_pass(\n-        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyCache<'tcx>\n+        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>\n     ) {\n         // will be evaluated by miri and produce its errors there\n         if source.promoted.is_some() {\n@@ -296,7 +296,7 @@ impl<'mir, 'tcx> HasTyCtxt<'tcx> for ConstPropagator<'mir, 'tcx> {\n \n impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     fn new(\n-        body: ReadOnlyBodyCache<'_, 'tcx>,\n+        body: ReadOnlyBodyAndCache<'_, 'tcx>,\n         dummy_body: &'mir Body<'tcx>,\n         tcx: TyCtxt<'tcx>,\n         source: MirSource<'tcx>,\n@@ -690,7 +690,7 @@ struct CanConstProp {\n \n impl CanConstProp {\n     /// returns true if `local` can be propagated\n-    fn check(body: ReadOnlyBodyCache<'_, '_>) -> IndexVec<Local, bool> {\n+    fn check(body: ReadOnlyBodyAndCache<'_, '_>) -> IndexVec<Local, bool> {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(true, &body.local_decls),\n             found_assignment: IndexVec::from_elem(false, &body.local_decls),"}, {"sha": "272f6e9ce1937c06a50f0f36caf044b7d783c549", "filename": "src/librustc_mir/transform/copy_prop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcopy_prop.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -20,7 +20,7 @@\n //! future.\n \n use rustc::mir::{\n-    Constant, Local, LocalKind, Location, Place, Body, BodyCache, Operand, Rvalue,\n+    Constant, Local, LocalKind, Location, Place, Body, BodyAndCache, Operand, Rvalue,\n     StatementKind, read_only\n };\n use rustc::mir::visit::MutVisitor;\n@@ -32,7 +32,7 @@ pub struct CopyPropagation;\n \n impl<'tcx> MirPass<'tcx> for CopyPropagation {\n     fn run_pass(\n-        &self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyCache<'tcx>\n+        &self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>\n     ) {\n         // We only run when the MIR optimization level is > 1.\n         // This avoids a slow pass, and messing up debug info.\n@@ -250,7 +250,7 @@ impl<'tcx> Action<'tcx> {\n     }\n \n     fn perform(self,\n-               body: &mut BodyCache<'tcx>,\n+               body: &mut BodyAndCache<'tcx>,\n                def_use_analysis: &DefUseAnalysis,\n                dest_local: Local,\n                location: Location,"}, {"sha": "cd77c9c60fa5aa35913b15132ed96592c0d30db0", "filename": "src/librustc_mir/transform/deaggregator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdeaggregator.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -7,7 +7,7 @@ pub struct Deaggregator;\n \n impl<'tcx> MirPass<'tcx> for Deaggregator {\n     fn run_pass(\n-        &self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyCache<'tcx>\n+        &self, tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>\n     ) {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         let local_decls = &*local_decls;"}, {"sha": "221ced3a71c4b03ff285ee0ed07253391098fff3", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -5,7 +5,7 @@ use std::fmt;\n use std::fs::File;\n use std::io;\n \n-use rustc::mir::{Body, BodyCache};\n+use rustc::mir::{Body, BodyAndCache};\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n use crate::transform::{MirPass, MirSource};\n@@ -19,7 +19,7 @@ impl<'tcx> MirPass<'tcx> for Marker {\n     }\n \n     fn run_pass(\n-        &self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, _body: &mut BodyCache<'tcx>\n+        &self, _tcx: TyCtxt<'tcx>, _source: MirSource<'tcx>, _body: &mut BodyAndCache<'tcx>\n     ) {}\n }\n "}, {"sha": "9970752a376984a48f0d814a8cf02bd0487c6222", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -21,7 +21,7 @@ use syntax_pos::Span;\n pub struct ElaborateDrops;\n \n impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, body.span);\n \n         let def_id = src.def_id();"}, {"sha": "1eef3f254f053efab8051b0b519c4a141516142f", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -62,7 +62,7 @@ impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n pub struct EraseRegions;\n \n impl<'tcx> MirPass<'tcx> for EraseRegions {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         EraseRegionsVisitor::new(tcx).visit_body(body);\n     }\n }"}, {"sha": "3d15d0471721164e1adf8915c176d14a8aac0d3f", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -378,7 +378,7 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n fn make_generator_state_argument_indirect<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n ) {\n     let gen_ty = body.local_decls.raw[1].ty;\n \n@@ -401,7 +401,7 @@ fn make_generator_state_argument_indirect<'tcx>(\n     DerefArgVisitor { tcx }.visit_body(body);\n }\n \n-fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyCache<'tcx>) {\n+fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyAndCache<'tcx>) {\n     let ref_gen_ty = body.local_decls.raw[1].ty;\n \n     let pin_did = tcx.lang_items().pin_type().unwrap();\n@@ -418,7 +418,7 @@ fn make_generator_state_argument_pinned<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body\n \n fn replace_result_variable<'tcx>(\n     ret_ty: Ty<'tcx>,\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n     tcx: TyCtxt<'tcx>,\n ) -> Local {\n     let source_info = source_info(body);\n@@ -481,7 +481,7 @@ struct LivenessInfo {\n \n fn locals_live_across_suspend_points(\n     tcx: TyCtxt<'tcx>,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n     source: MirSource<'tcx>,\n     movable: bool,\n ) -> LivenessInfo {\n@@ -751,7 +751,7 @@ fn compute_layout<'tcx>(\n     upvars: &Vec<Ty<'tcx>>,\n     interior: Ty<'tcx>,\n     movable: bool,\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n ) -> (\n     FxHashMap<Local, (Ty<'tcx>, VariantIdx, usize)>,\n     GeneratorLayout<'tcx>,\n@@ -830,7 +830,7 @@ fn compute_layout<'tcx>(\n }\n \n fn insert_switch<'tcx>(\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n     cases: Vec<(usize, BasicBlock)>,\n     transform: &TransformVisitor<'tcx>,\n     default: TerminatorKind<'tcx>,\n@@ -862,7 +862,7 @@ fn insert_switch<'tcx>(\n }\n \n fn elaborate_generator_drops<'tcx>(\n-    tcx: TyCtxt<'tcx>, def_id: DefId, body: &mut BodyCache<'tcx>\n+    tcx: TyCtxt<'tcx>, def_id: DefId, body: &mut BodyAndCache<'tcx>\n ) {\n     use crate::util::elaborate_drops::{elaborate_drop, Unwind};\n     use crate::util::patch::MirPatch;\n@@ -928,9 +928,9 @@ fn create_generator_drop_shim<'tcx>(\n     def_id: DefId,\n     source: MirSource<'tcx>,\n     gen_ty: Ty<'tcx>,\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n     drop_clean: BasicBlock,\n-) -> BodyCache<'tcx> {\n+) -> BodyAndCache<'tcx> {\n     let mut body = body.clone();\n \n     let source_info = source_info(&body);\n@@ -997,7 +997,7 @@ fn create_generator_drop_shim<'tcx>(\n }\n \n fn insert_term_block<'tcx>(\n-    body: &mut BodyCache<'tcx>, kind: TerminatorKind<'tcx>\n+    body: &mut BodyAndCache<'tcx>, kind: TerminatorKind<'tcx>\n ) -> BasicBlock {\n     let term_block = BasicBlock::new(body.basic_blocks().len());\n     let source_info = source_info(body);\n@@ -1014,7 +1014,7 @@ fn insert_term_block<'tcx>(\n \n fn insert_panic_block<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n     message: AssertMessage<'tcx>,\n ) -> BasicBlock {\n     let assert_block = BasicBlock::new(body.basic_blocks().len());\n@@ -1048,7 +1048,7 @@ fn create_generator_resume_function<'tcx>(\n     transform: TransformVisitor<'tcx>,\n     def_id: DefId,\n     source: MirSource<'tcx>,\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n ) {\n     // Poison the generator when it unwinds\n     for block in body.basic_blocks_mut() {\n@@ -1101,7 +1101,7 @@ fn source_info(body: &Body<'_>) -> SourceInfo {\n     }\n }\n \n-fn insert_clean_drop(body: &mut BodyCache<'_>) -> BasicBlock {\n+fn insert_clean_drop(body: &mut BodyAndCache<'_>) -> BasicBlock {\n     let return_block = insert_term_block(body, TerminatorKind::Return);\n \n     // Create a block to destroy an unresumed generators. This can only destroy upvars.\n@@ -1125,7 +1125,7 @@ fn insert_clean_drop(body: &mut BodyCache<'_>) -> BasicBlock {\n }\n \n fn create_cases<'tcx, F>(\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n     transform: &TransformVisitor<'tcx>,\n     target: F,\n ) -> Vec<(usize, BasicBlock)>\n@@ -1170,7 +1170,7 @@ where\n \n impl<'tcx> MirPass<'tcx> for StateTransform {\n     fn run_pass(\n-        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyCache<'tcx>\n+        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>\n     ) {\n         let yield_ty = if let Some(yield_ty) = body.yield_ty {\n             yield_ty"}, {"sha": "9763913082ddc7e09c0c525212e6a2819f338313", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -39,7 +39,7 @@ struct CallSite<'tcx> {\n \n impl<'tcx> MirPass<'tcx> for Inline {\n     fn run_pass(\n-        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyCache<'tcx>\n+        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>\n     ) {\n         if tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n             Inliner { tcx, source }.run_pass(body);\n@@ -53,7 +53,7 @@ struct Inliner<'tcx> {\n }\n \n impl Inliner<'tcx> {\n-    fn run_pass(&self, caller_body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, caller_body: &mut BodyAndCache<'tcx>) {\n         // Keep a queue of callsites to try inlining on. We take\n         // advantage of the fact that queries detect cycles here to\n         // allow us to try and fetch the fully optimized MIR of a\n@@ -385,8 +385,8 @@ impl Inliner<'tcx> {\n \n     fn inline_call(&self,\n                    callsite: CallSite<'tcx>,\n-                   caller_body: &mut BodyCache<'tcx>,\n-                   mut callee_body: BodyCache<'tcx>) -> bool {\n+                   caller_body: &mut BodyAndCache<'tcx>,\n+                   mut callee_body: BodyAndCache<'tcx>) -> bool {\n         let terminator = caller_body[callsite.bb].terminator.take().unwrap();\n         match terminator.kind {\n             // FIXME: Handle inlining of diverging calls\n@@ -522,7 +522,7 @@ impl Inliner<'tcx> {\n         &self,\n         args: Vec<Operand<'tcx>>,\n         callsite: &CallSite<'tcx>,\n-        caller_body: &mut BodyCache<'tcx>,\n+        caller_body: &mut BodyAndCache<'tcx>,\n     ) -> Vec<Local> {\n         let tcx = self.tcx;\n \n@@ -595,7 +595,7 @@ impl Inliner<'tcx> {\n         &self,\n         arg: Operand<'tcx>,\n         callsite: &CallSite<'tcx>,\n-        caller_body: &mut BodyCache<'tcx>,\n+        caller_body: &mut BodyAndCache<'tcx>,\n     ) -> Local {\n         // FIXME: Analysis of the usage of the arguments to avoid\n         // unnecessary temporaries."}, {"sha": "eca1b596a4846d51f3893b37cb1bf89f51caf02d", "filename": "src/librustc_mir/transform/instcombine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finstcombine.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,7 +1,7 @@\n //! Performs various peephole optimizations.\n \n use rustc::mir::{\n-    Constant, Location, Place, PlaceBase, PlaceRef, Body, BodyCache, Operand, ProjectionElem,\n+    Constant, Location, Place, PlaceBase, PlaceRef, Body, BodyAndCache, Operand, ProjectionElem,\n     Rvalue, Local, read_only\n };\n use rustc::mir::visit::{MutVisitor, Visitor};\n@@ -14,7 +14,7 @@ use crate::transform::{MirPass, MirSource};\n pub struct InstCombine;\n \n impl<'tcx> MirPass<'tcx> for InstCombine {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         // We only run when optimizing MIR (at any level).\n         if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n             return"}, {"sha": "bedf2a95c026eb6da3be4b8cde8ddb158b822cad", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,7 +1,7 @@\n use crate::{build, shim};\n use rustc_index::vec::IndexVec;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::mir::{BodyCache, MirPhase, Promoted, ConstQualifs};\n+use rustc::mir::{BodyAndCache, MirPhase, Promoted, ConstQualifs};\n use rustc::ty::{TyCtxt, InstanceDef, TypeFoldable};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -97,7 +97,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n     tcx.arena.alloc(set)\n }\n \n-fn mir_built(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<BodyCache<'_>> {\n+fn mir_built(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<BodyAndCache<'_>> {\n     let mir = build::mir_build(tcx, def_id);\n     tcx.alloc_steal_mir(mir)\n }\n@@ -144,12 +144,12 @@ pub trait MirPass<'tcx> {\n         default_name::<Self>()\n     }\n \n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyCache<'tcx>);\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>);\n }\n \n pub fn run_passes(\n     tcx: TyCtxt<'tcx>,\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n     instance: InstanceDef<'tcx>,\n     promoted: Option<Promoted>,\n     mir_phase: MirPhase,\n@@ -220,7 +220,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n     validator.qualifs_in_return_place().into()\n }\n \n-fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<BodyCache<'_>> {\n+fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<BodyAndCache<'_>> {\n     // Unsafety check uses the raw mir, so make sure it is run\n     let _ = tcx.unsafety_check_result(def_id);\n \n@@ -238,7 +238,7 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<BodyCache<'_>> {\n fn mir_validated(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n-) -> (&'tcx Steal<BodyCache<'tcx>>, &'tcx Steal<IndexVec<Promoted, BodyCache<'tcx>>>) {\n+) -> (&'tcx Steal<BodyAndCache<'tcx>>, &'tcx Steal<IndexVec<Promoted, BodyAndCache<'tcx>>>) {\n     // Ensure that we compute the `mir_const_qualif` for constants at\n     // this point, before we steal the mir-const result.\n     let _ = tcx.mir_const_qualif(def_id);\n@@ -257,7 +257,7 @@ fn mir_validated(\n \n fn run_optimization_passes<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n     def_id: DefId,\n     promoted: Option<Promoted>,\n ) {\n@@ -319,7 +319,7 @@ fn run_optimization_passes<'tcx>(\n     ]);\n }\n \n-fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &BodyCache<'_> {\n+fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &BodyAndCache<'_> {\n     if tcx.is_constructor(def_id) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const\n@@ -339,7 +339,7 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &BodyCache<'_> {\n     tcx.arena.alloc(body)\n }\n \n-fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, BodyCache<'_>> {\n+fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, BodyAndCache<'_>> {\n     if tcx.is_constructor(def_id) {\n         return tcx.intern_promoted(IndexVec::new());\n     }"}, {"sha": "d4fe72f6ed7c8a71361df92ff93deae5f2826a17", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -17,12 +17,12 @@ impl<'tcx> NoLandingPads<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for NoLandingPads<'tcx> {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         no_landing_pads(tcx, body)\n     }\n }\n \n-pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyCache<'tcx>) {\n+pub fn no_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyAndCache<'tcx>) {\n     if tcx.sess.no_landing_pads() {\n         NoLandingPads::new(tcx).visit_body(body);\n     }"}, {"sha": "4c723199102be3099b823b4a73717f701b077b0f", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -41,11 +41,11 @@ use crate::transform::check_consts::{qualifs, Item, ConstKind, is_lang_panic_fn}\n /// newly created `StaticKind::Promoted`.\n #[derive(Default)]\n pub struct PromoteTemps<'tcx> {\n-    pub promoted_fragments: Cell<IndexVec<Promoted, BodyCache<'tcx>>>,\n+    pub promoted_fragments: Cell<IndexVec<Promoted, BodyAndCache<'tcx>>>,\n }\n \n impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         // There's not really any point in promoting errorful MIR.\n         //\n         // This does not include MIR that failed const-checking, which we still try to promote.\n@@ -742,7 +742,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n // FIXME(eddyb) remove the differences for promotability in `static`, `const`, `const fn`.\n pub fn validate_candidates(\n     tcx: TyCtxt<'tcx>,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n     def_id: DefId,\n     temps: &IndexVec<Local, TempState>,\n     candidates: &[Candidate],\n@@ -775,8 +775,8 @@ pub fn validate_candidates(\n \n struct Promoter<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    source: &'a mut BodyCache<'tcx>,\n-    promoted: BodyCache<'tcx>,\n+    source: &'a mut BodyAndCache<'tcx>,\n+    promoted: BodyAndCache<'tcx>,\n     temps: &'a mut IndexVec<Local, TempState>,\n \n     /// If true, all nested temps are also kept in the\n@@ -924,7 +924,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         def_id: DefId,\n         candidate: Candidate,\n         next_promoted_id: usize,\n-    ) -> Option<BodyCache<'tcx>> {\n+    ) -> Option<BodyAndCache<'tcx>> {\n         let mut operand = {\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(next_promoted_id);\n@@ -1045,11 +1045,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n \n pub fn promote_candidates<'tcx>(\n     def_id: DefId,\n-    body: &mut BodyCache<'tcx>,\n+    body: &mut BodyAndCache<'tcx>,\n     tcx: TyCtxt<'tcx>,\n     mut temps: IndexVec<Local, TempState>,\n     candidates: Vec<Candidate>,\n-) -> IndexVec<Promoted, BodyCache<'tcx>> {\n+) -> IndexVec<Promoted, BodyAndCache<'tcx>> {\n     // Visit candidates in reverse, in case they're nested.\n     debug!(\"promote_candidates({:?})\", candidates);\n \n@@ -1081,7 +1081,7 @@ pub fn promote_candidates<'tcx>(\n         ).collect();\n \n         let promoter = Promoter {\n-            promoted: BodyCache::new(Body::new(\n+            promoted: BodyAndCache::new(Body::new(\n                 IndexVec::new(),\n                 // FIXME: maybe try to filter this to avoid blowing up\n                 // memory usage?\n@@ -1150,7 +1150,7 @@ pub fn promote_candidates<'tcx>(\n crate fn should_suggest_const_in_array_repeat_expressions_attribute<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mir_def_id: DefId,\n-    body: ReadOnlyBodyCache<'_, 'tcx>,\n+    body: ReadOnlyBodyAndCache<'_, 'tcx>,\n     operand: &Operand<'tcx>,\n ) -> bool {\n     let mut rpo = traversal::reverse_postorder(&body);"}, {"sha": "5799d0c38b01da0ab380627abd06cffd539ea293", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -9,7 +9,7 @@ use crate::util::patch::MirPatch;\n /// code for these.\n pub struct RemoveNoopLandingPads;\n \n-pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyCache<'tcx>) {\n+pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyAndCache<'tcx>) {\n     if tcx.sess.no_landing_pads() {\n         return\n     }\n@@ -19,7 +19,7 @@ pub fn remove_noop_landing_pads<'tcx>(tcx: TyCtxt<'tcx>, body: &mut BodyCache<'t\n }\n \n impl<'tcx> MirPass<'tcx> for RemoveNoopLandingPads {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         remove_noop_landing_pads(tcx, body);\n     }\n }\n@@ -84,7 +84,7 @@ impl RemoveNoopLandingPads {\n         }\n     }\n \n-    fn remove_nop_landing_pads(&self, body: &mut BodyCache<'_>) {\n+    fn remove_nop_landing_pads(&self, body: &mut BodyAndCache<'_>) {\n         // make sure there's a single resume block\n         let resume_block = {\n             let patch = MirPatch::new(body);"}, {"sha": "2a81e97b8ff25049b8b294c6f7a1c2f1dbde60cc", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -5,7 +5,7 @@ use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt, Ty};\n use rustc::hir::def_id::DefId;\n-use rustc::mir::{self, Body, BodyCache, Location, Local};\n+use rustc::mir::{self, Body, BodyAndCache, Location, Local};\n use rustc_index::bit_set::BitSet;\n use crate::transform::{MirPass, MirSource};\n \n@@ -26,7 +26,7 @@ use crate::dataflow::has_rustc_mir_with;\n pub struct SanityCheck;\n \n impl<'tcx> MirPass<'tcx> for SanityCheck {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         let def_id = src.def_id();\n         if !tcx.has_attr(def_id, sym::rustc_mir) {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));"}, {"sha": "eef39f8040ea063ff5325cca9454659605f3c293", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -43,7 +43,7 @@ impl SimplifyCfg {\n     }\n }\n \n-pub fn simplify_cfg(body: &mut BodyCache<'_>) {\n+pub fn simplify_cfg(body: &mut BodyAndCache<'_>) {\n     CfgSimplifier::new(body).simplify();\n     remove_dead_blocks(body);\n \n@@ -57,7 +57,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n     }\n \n     fn run_pass(\n-        &self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyCache<'tcx>\n+        &self, _tcx: TyCtxt<'tcx>, _src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>\n     ) {\n         debug!(\"SimplifyCfg({:?}) - simplifying {:?}\", self.label, body);\n         simplify_cfg(body);\n@@ -70,7 +70,7 @@ pub struct CfgSimplifier<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n-    pub fn new(body: &'a mut BodyCache<'tcx>) -> Self {\n+    pub fn new(body: &'a mut BodyAndCache<'tcx>) -> Self {\n         let mut pred_count = IndexVec::from_elem(0u32, body.basic_blocks());\n \n         // we can't use mir.predecessors() here because that counts\n@@ -262,7 +262,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn remove_dead_blocks(body: &mut BodyCache<'_>) {\n+pub fn remove_dead_blocks(body: &mut BodyAndCache<'_>) {\n     let mut seen = BitSet::new_empty(body.basic_blocks().len());\n     for (bb, _) in traversal::preorder(body) {\n         seen.insert(bb.index());\n@@ -296,7 +296,7 @@ pub struct SimplifyLocals;\n \n impl<'tcx> MirPass<'tcx> for SimplifyLocals {\n     fn run_pass(\n-        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyCache<'tcx>\n+        &self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>\n     ) {\n         trace!(\"running SimplifyLocals on {:?}\", source);\n         let locals = {"}, {"sha": "aa3c5b01be35f93021c06a703507b8e3883d6de6", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -19,7 +19,7 @@ impl<'tcx> MirPass<'tcx> for SimplifyBranches {\n         Cow::Borrowed(&self.label)\n     }\n \n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         let param_env = tcx.param_env(src.def_id());\n         for block in body.basic_blocks_mut() {\n             let terminator = block.terminator_mut();"}, {"sha": "752e85289573835be055b1d2f0dcb08dade1adc5", "filename": "src/librustc_mir/transform/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_try.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -33,7 +33,7 @@ use itertools::Itertools as _;\n pub struct SimplifyArmIdentity;\n \n impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n-    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         let (basic_blocks, local_decls) = body.basic_blocks_and_local_decls_mut();\n         for bb in basic_blocks {\n             // Need 3 statements:\n@@ -151,7 +151,7 @@ fn match_variant_field_place<'tcx>(place: &Place<'tcx>) -> Option<(Local, VarFie\n pub struct SimplifyBranchSame;\n \n impl<'tcx> MirPass<'tcx> for SimplifyBranchSame {\n-    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, _: TyCtxt<'tcx>, _: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         let mut did_remove_blocks = false;\n         let bbs = body.basic_blocks_mut();\n         for bb_idx in bbs.indices() {"}, {"sha": "71dd405386aa7b25b677b415edc2f2a589cabdeb", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -37,7 +37,7 @@ use crate::util::patch::MirPatch;\n pub struct UniformArrayMoveOut;\n \n impl<'tcx> MirPass<'tcx> for UniformArrayMoveOut {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         let mut patch = MirPatch::new(body);\n         let param_env = tcx.param_env(src.def_id());\n         {\n@@ -186,7 +186,7 @@ pub struct RestoreSubsliceArrayMoveOut<'tcx> {\n }\n \n impl<'tcx> MirPass<'tcx> for RestoreSubsliceArrayMoveOut<'tcx> {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, src: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         let mut patch = MirPatch::new(body);\n         let param_env = tcx.param_env(src.def_id());\n         {"}, {"sha": "0bf0ff2852d720652a2573ba3f93fe9731751db3", "filename": "src/librustc_mir/transform/uninhabited_enum_branching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funinhabited_enum_branching.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -2,7 +2,7 @@\n \n use crate::transform::{MirPass, MirSource};\n use rustc::mir::{\n-    BasicBlock, BasicBlockData, Body, BodyCache, Local, Operand, Rvalue, StatementKind,\n+    BasicBlock, BasicBlockData, Body, BodyAndCache, Local, Operand, Rvalue, StatementKind,\n     TerminatorKind,\n };\n use rustc::ty::layout::{Abi, TyLayout, Variants};\n@@ -66,7 +66,7 @@ fn variant_discriminants<'tcx>(\n }\n \n impl<'tcx> MirPass<'tcx> for UninhabitedEnumBranching {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyCache<'tcx>) {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, source: MirSource<'tcx>, body: &mut BodyAndCache<'tcx>) {\n         if source.promoted.is_some() {\n             return;\n         }"}, {"sha": "4006787f260fc5ccdd26014dc4879aaa1e2580f5", "filename": "src/librustc_mir/util/collect_writes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fcollect_writes.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,5 +1,5 @@\n use rustc::mir::{Local, Location};\n-use rustc::mir::ReadOnlyBodyCache;\n+use rustc::mir::ReadOnlyBodyAndCache;\n use rustc::mir::visit::PlaceContext;\n use rustc::mir::visit::Visitor;\n \n@@ -9,7 +9,7 @@ crate trait FindAssignments {\n     fn find_assignments(&self, local: Local) -> Vec<Location>;\n }\n \n-impl<'a, 'tcx> FindAssignments for ReadOnlyBodyCache<'a, 'tcx>{\n+impl<'a, 'tcx> FindAssignments for ReadOnlyBodyAndCache<'a, 'tcx>{\n     fn find_assignments(&self, local: Local) -> Vec<Location>{\n             let mut visitor = FindLocalAssignmentVisitor{ needle: local, locations: vec![]};\n             visitor.visit_body(*self);"}, {"sha": "cf98755eb6d90617a007746479bd134257bfcb42", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,6 +1,8 @@\n //! Def-use analysis.\n \n-use rustc::mir::{Body, BodyCache, Local, Location, PlaceElem, ReadOnlyBodyCache, VarDebugInfo};\n+use rustc::mir::{\n+    Body, BodyAndCache, Local, Location, PlaceElem, ReadOnlyBodyAndCache, VarDebugInfo,\n+};\n use rustc::mir::visit::{PlaceContext, MutVisitor, Visitor};\n use rustc::ty::TyCtxt;\n use rustc_index::vec::IndexVec;\n@@ -30,7 +32,7 @@ impl DefUseAnalysis {\n         }\n     }\n \n-    pub fn analyze(&mut self, body: ReadOnlyBodyCache<'_, '_>) {\n+    pub fn analyze(&mut self, body: ReadOnlyBodyAndCache<'_, '_>) {\n         self.clear();\n \n         let mut finder = DefUseFinder {\n@@ -55,7 +57,7 @@ impl DefUseAnalysis {\n     fn mutate_defs_and_uses(\n         &self,\n         local: Local,\n-        body: &mut BodyCache<'tcx>,\n+        body: &mut BodyAndCache<'tcx>,\n         new_local: Local,\n         tcx: TyCtxt<'tcx>,\n     ) {\n@@ -73,7 +75,7 @@ impl DefUseAnalysis {\n     // FIXME(pcwalton): this should update the def-use chains.\n     pub fn replace_all_defs_and_uses_with(&self,\n                                           local: Local,\n-                                          body: &mut BodyCache<'tcx>,\n+                                          body: &mut BodyAndCache<'tcx>,\n                                           new_local: Local,\n                                           tcx: TyCtxt<'tcx>) {\n         self.mutate_defs_and_uses(local, body, new_local, tcx)"}, {"sha": "68c2e16399a59f45a8a388e771fdb257953acb32", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -57,7 +57,7 @@ pub struct LivenessResult {\n /// Computes which local variables are live within the given function\n /// `mir`, including drops.\n pub fn liveness_of_locals(\n-    body: ReadOnlyBodyCache<'_, '_>,\n+    body: ReadOnlyBodyAndCache<'_, '_>,\n ) -> LivenessResult {\n     let num_live_vars = body.local_decls.len();\n "}, {"sha": "575b6d25de20d16c6d01dd9bc113edebfa89e162", "filename": "src/librustc_mir/util/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_mir%2Futil%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpatch.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -127,7 +127,7 @@ impl<'tcx> MirPatch<'tcx> {\n         self.make_nop.push(loc);\n     }\n \n-    pub fn apply(self, body: &mut BodyCache<'tcx>) {\n+    pub fn apply(self, body: &mut BodyAndCache<'tcx>) {\n         debug!(\"MirPatch: make nops at: {:?}\", self.make_nop);\n         for loc in self.make_nop {\n             body.make_statement_nop(loc);"}, {"sha": "34ef12e818c57386ca40853551b4ba819b8aa8a9", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1181,6 +1181,7 @@ impl<'a> Parser<'a> {\n                         attrs,\n                         vis: visibility,\n                         kind: ForeignItemKind::Macro(mac),\n+                        tokens: None,\n                     }\n                 )\n             }\n@@ -1211,6 +1212,7 @@ impl<'a> Parser<'a> {\n             id: DUMMY_NODE_ID,\n             span: lo.to(hi),\n             vis,\n+            tokens: None,\n         })\n     }\n \n@@ -1228,7 +1230,8 @@ impl<'a> Parser<'a> {\n             kind: ForeignItemKind::Ty,\n             id: DUMMY_NODE_ID,\n             span: lo.to(hi),\n-            vis\n+            vis,\n+            tokens: None,\n         })\n     }\n \n@@ -1826,6 +1829,7 @@ impl<'a> Parser<'a> {\n             id: DUMMY_NODE_ID,\n             span,\n             vis,\n+            tokens: None,\n         })\n     }\n "}, {"sha": "de7ced332fd1002f96dbbf6d45f5ea1865d3b495", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -57,7 +57,7 @@ mod as_keyword { }\n /// 'outer: for i in 1..=5 {\n ///     println!(\"outer iteration (i): {}\", i);\n ///\n-///     'inner: for j in 1..=200 {\n+///     '_inner: for j in 1..=200 {\n ///         println!(\"    inner iteration (j): {}\", j);\n ///         if j >= 3 {\n ///             // breaks from inner loop, let's outer loop continue.\n@@ -178,7 +178,7 @@ mod const_keyword { }\n ///```rust\n /// // Print Odd numbers under 30 with unit <= 5\n /// 'tens: for ten in 0..3 {\n-///     'units: for unit in 0..=9 {\n+///     '_units: for unit in 0..=9 {\n ///         if unit % 2 == 0 {\n ///             continue;\n ///         }"}, {"sha": "92ba071a03d684da82d9f7916ec1d21e905485d4", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -2488,14 +2488,14 @@ impl VariantData {\n ///\n /// The name might be a dummy name in case of anonymous items.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct Item {\n+pub struct Item<K = ItemKind> {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n     pub vis: Visibility,\n     pub ident: Ident,\n \n-    pub kind: ItemKind,\n+    pub kind: K,\n \n     /// Original tokens this item was parsed from. This isn't necessarily\n     /// available for all items, although over time more and more items should\n@@ -2650,16 +2650,7 @@ impl ItemKind {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub struct ForeignItem {\n-    pub attrs: Vec<Attribute>,\n-    pub id: NodeId,\n-    pub span: Span,\n-    pub vis: Visibility,\n-    pub ident: Ident,\n-\n-    pub kind: ForeignItemKind,\n-}\n+pub type ForeignItem = Item<ForeignItemKind>;\n \n /// An item within an `extern` block.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "f8795d885d2164c784b69cb1c5125f4b2de53964", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1053,7 +1053,7 @@ pub fn noop_flat_map_item<T: MutVisitor>(mut item: P<Item>, visitor: &mut T)\n pub fn noop_flat_map_foreign_item<T: MutVisitor>(mut item: ForeignItem, visitor: &mut T)\n     -> SmallVec<[ForeignItem; 1]>\n {\n-    let ForeignItem { ident, attrs, kind, id, span, vis } = &mut item;\n+    let ForeignItem { ident, attrs, id, kind, vis, span, tokens: _ } = &mut item;\n     visitor.visit_ident(ident);\n     visit_attrs(attrs, visitor);\n     match kind {"}, {"sha": "faea04e691be51c3142525d7f546bb816eca05be", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -65,6 +65,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId, vis: Option<ast::Visi\n             AstFragment::ForeignItems(smallvec![ast::ForeignItem {\n                 id, span, ident, vis, attrs,\n                 kind: ast::ForeignItemKind::Macro(mac_placeholder()),\n+                tokens: None,\n             }]),\n         AstFragmentKind::Pat => AstFragment::Pat(P(ast::Pat {\n             id, span, kind: ast::PatKind::Mac(mac_placeholder()),"}, {"sha": "18930ac811e80b10c9d414f5980b8b1bd4c7d23c", "filename": "src/test/ui/for-loop-while/label_break_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -77,7 +77,7 @@ fn label_break_mixed(v: u32) -> u32 {\n         }\n         // Labeled breaking an outer loop still works\n         'd: loop {\n-            'e: {\n+            {\n                 if v == r {\n                     break 'b;\n                 }"}, {"sha": "9bedde67b78880c2cc8a6ef32fb73d0065541a97", "filename": "src/test/ui/for-loop-while/loop-label-shadowing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-label-shadowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-label-shadowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Floop-label-shadowing.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -5,6 +5,7 @@\n \n fn main() {\n     let mut foo = Vec::new();\n+    #[allow(unused_labels)]\n     'foo: for i in &[1, 2, 3] {\n         foo.push(*i);\n     }"}, {"sha": "491855d7becd153cd14b1051767942c9b96a6ee5", "filename": "src/test/ui/hygiene/hygienic-labels-in-let.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(unreachable_code)]\n+#![allow(unused_labels)]\n \n // Test that labels injected by macros do not break hygiene.  This\n // checks cases where the macros invocations are under the rhs of a"}, {"sha": "4acb34f2dcebe2faa103657e3585da410eacb5cd", "filename": "src/test/ui/hygiene/hygienic-labels-in-let.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels-in-let.stderr?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,5 +1,5 @@\n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:15:9\n+  --> $DIR/hygienic-labels-in-let.rs:16:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -11,7 +11,7 @@ LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:63:9\n+  --> $DIR/hygienic-labels-in-let.rs:64:9\n    |\n LL |         'x: loop {\n    |         -- first declared here\n@@ -20,7 +20,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:63:9\n+  --> $DIR/hygienic-labels-in-let.rs:64:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -29,7 +29,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:15:9\n+  --> $DIR/hygienic-labels-in-let.rs:16:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -41,7 +41,7 @@ LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:15:9\n+  --> $DIR/hygienic-labels-in-let.rs:16:9\n    |\n LL |         'x: loop { $e }\n    |         ^^\n@@ -53,7 +53,7 @@ LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:15:9\n+  --> $DIR/hygienic-labels-in-let.rs:16:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -65,7 +65,7 @@ LL |             loop_x!(break 'x);\n    |             ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:76:9\n    |\n LL |         'x: loop {\n    |         -- first declared here\n@@ -74,7 +74,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:76:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -83,7 +83,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:76:9\n    |\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n@@ -92,7 +92,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:75:9\n+  --> $DIR/hygienic-labels-in-let.rs:76:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -101,7 +101,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:26:9\n+  --> $DIR/hygienic-labels-in-let.rs:27:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -113,7 +113,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:26:9\n+  --> $DIR/hygienic-labels-in-let.rs:27:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -125,7 +125,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:26:9\n+  --> $DIR/hygienic-labels-in-let.rs:27:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -137,7 +137,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:26:9\n+  --> $DIR/hygienic-labels-in-let.rs:27:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -149,7 +149,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:26:9\n+  --> $DIR/hygienic-labels-in-let.rs:27:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -161,7 +161,7 @@ LL |             while_true!(break 'x);\n    |             ---------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:89:9\n+  --> $DIR/hygienic-labels-in-let.rs:90:9\n    |\n LL |         'x: loop {\n    |         -- first declared here\n@@ -170,7 +170,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:89:9\n+  --> $DIR/hygienic-labels-in-let.rs:90:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -179,7 +179,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:89:9\n+  --> $DIR/hygienic-labels-in-let.rs:90:9\n    |\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n@@ -188,7 +188,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:89:9\n+  --> $DIR/hygienic-labels-in-let.rs:90:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -197,7 +197,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:89:9\n+  --> $DIR/hygienic-labels-in-let.rs:90:9\n    |\n LL |         'x: for _ in 0..1 {\n    |         -- first declared here\n@@ -206,7 +206,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:89:9\n+  --> $DIR/hygienic-labels-in-let.rs:90:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         -- first declared here\n@@ -215,7 +215,7 @@ LL |         'x: for _ in 0..1 {\n    |         ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:38:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -227,7 +227,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:38:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -239,7 +239,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:38:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -251,7 +251,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:38:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -263,7 +263,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:38:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -275,7 +275,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:38:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         -- first declared here\n@@ -287,7 +287,7 @@ LL |             run_once!(continue 'x);\n    |             ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels-in-let.rs:38:9\n+  --> $DIR/hygienic-labels-in-let.rs:39:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope"}, {"sha": "c9f494b68b4a812a5e73599bfec24b70a2127d7f", "filename": "src/test/ui/hygiene/hygienic-labels.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,5 +1,6 @@\n // run-pass\n #![allow(unreachable_code)]\n+#![allow(unused_labels)]\n // Test that labels injected by macros do not break hygiene.\n \n // Issue #24278: The label/lifetime shadowing checker from #24162"}, {"sha": "0833825940a8598f3bd644d2c195282c21553f1d", "filename": "src/test/ui/hygiene/hygienic-labels.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fhygienic-labels.stderr?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,5 +1,5 @@\n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:12:9\n+  --> $DIR/hygienic-labels.rs:13:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -11,7 +11,7 @@ LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:53:5\n+  --> $DIR/hygienic-labels.rs:54:5\n    |\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n@@ -20,7 +20,7 @@ LL |     'x: loop {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:53:5\n+  --> $DIR/hygienic-labels.rs:54:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -29,7 +29,7 @@ LL |     'x: loop {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:12:9\n+  --> $DIR/hygienic-labels.rs:13:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -41,7 +41,7 @@ LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:12:9\n+  --> $DIR/hygienic-labels.rs:13:9\n    |\n LL |         'x: loop { $e }\n    |         ^^\n@@ -53,7 +53,7 @@ LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:12:9\n+  --> $DIR/hygienic-labels.rs:13:9\n    |\n LL |         'x: loop { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -65,7 +65,7 @@ LL |         loop_x!(break 'x);\n    |         ------------------ in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:62:5\n+  --> $DIR/hygienic-labels.rs:63:5\n    |\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n@@ -74,7 +74,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:62:5\n+  --> $DIR/hygienic-labels.rs:63:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -83,7 +83,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:62:5\n+  --> $DIR/hygienic-labels.rs:63:5\n    |\n LL |     'x: loop {\n    |     -- first declared here\n@@ -92,7 +92,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:62:5\n+  --> $DIR/hygienic-labels.rs:63:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -101,7 +101,7 @@ LL |     'x: while 1 + 1 == 2 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:37:9\n+  --> $DIR/hygienic-labels.rs:38:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -113,7 +113,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:37:9\n+  --> $DIR/hygienic-labels.rs:38:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -125,7 +125,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:37:9\n+  --> $DIR/hygienic-labels.rs:38:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -137,7 +137,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:37:9\n+  --> $DIR/hygienic-labels.rs:38:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -149,7 +149,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:37:9\n+  --> $DIR/hygienic-labels.rs:38:9\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -161,7 +161,7 @@ LL |         while_x!(break 'x);\n    |         ------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:72:5\n+  --> $DIR/hygienic-labels.rs:73:5\n    |\n LL |     'x: for _ in 0..1 {\n    |     -- first declared here\n@@ -170,7 +170,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:72:5\n+  --> $DIR/hygienic-labels.rs:73:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -179,7 +179,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:72:5\n+  --> $DIR/hygienic-labels.rs:73:5\n    |\n LL |     'x: loop {\n    |     -- first declared here\n@@ -188,7 +188,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:72:5\n+  --> $DIR/hygienic-labels.rs:73:5\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -197,7 +197,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:72:5\n+  --> $DIR/hygienic-labels.rs:73:5\n    |\n LL |     'x: while 1 + 1 == 2 {\n    |     -- first declared here\n@@ -206,7 +206,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:72:5\n+  --> $DIR/hygienic-labels.rs:73:5\n    |\n LL |         'x: while 1 + 1 == 2 { $e }\n    |         -- first declared here\n@@ -215,7 +215,7 @@ LL |     'x: for _ in 0..1 {\n    |     ^^ lifetime 'x already in scope\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:23:9\n+  --> $DIR/hygienic-labels.rs:24:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -227,7 +227,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:23:9\n+  --> $DIR/hygienic-labels.rs:24:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -239,7 +239,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:23:9\n+  --> $DIR/hygienic-labels.rs:24:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -251,7 +251,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:23:9\n+  --> $DIR/hygienic-labels.rs:24:9\n    |\n LL |         'x: loop { $e }\n    |         -- first declared here\n@@ -263,7 +263,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:23:9\n+  --> $DIR/hygienic-labels.rs:24:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -275,7 +275,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:23:9\n+  --> $DIR/hygienic-labels.rs:24:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope\n@@ -287,7 +287,7 @@ LL |         run_once!(continue 'x);\n    |         ----------------------- in this macro invocation\n \n warning: label name `'x` shadows a label name that is already in scope\n-  --> $DIR/hygienic-labels.rs:23:9\n+  --> $DIR/hygienic-labels.rs:24:9\n    |\n LL |         'x: for _ in 0..1 { $e }\n    |         ^^ lifetime 'x already in scope"}, {"sha": "ad54107423d6cdc573ec73f69e3dc6b55dfcd8d5", "filename": "src/test/ui/issues/issue-2216.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fissues%2Fissue-2216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fissues%2Fissue-2216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2216.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -5,7 +5,7 @@ pub fn main() {\n \n     'foo: loop {\n         'bar: loop {\n-            'quux: loop {\n+            loop {\n                 if 1 == 2 {\n                     break 'foo;\n                 }"}, {"sha": "2e9da6f9dc88c4cbce392717a3740df743cd43fb", "filename": "src/test/ui/macros/macro-lifetime-used-with-labels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e862c01aadb2d029864f7bb256cf6c85bbb5d7e4/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-lifetime-used-with-labels.rs?ref=e862c01aadb2d029864f7bb256cf6c85bbb5d7e4", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(stable_features)]\n-\n+#![allow(unused_labels)]\n #![allow(unreachable_code)]\n \n macro_rules! x {"}]}