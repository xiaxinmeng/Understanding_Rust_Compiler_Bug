{"sha": "b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1OTNjNjBjMzNiNWFjMGY0YjhiNGJmZmRiZmI1NGVkNTM4YTU2NTk=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-22T11:47:27Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-22T11:47:27Z"}, "message": "Add missing cast for retslots in case of \"subtyping\" due to trait bounds\n\nWe already do this for the function arguments, but miss it for the\nretslot pointer, which can lead to LLVM assertions because the retslot\nhas the wrong type.\n\nFixes #22663", "tree": {"sha": "01d8ca22e3139c0b039176d6b8fd217161f4c44b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01d8ca22e3139c0b039176d6b8fd217161f4c44b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659", "html_url": "https://github.com/rust-lang/rust/commit/b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb1b500a9a69b149295c37c2fe2c9409f406f9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1b500a9a69b149295c37c2fe2c9409f406f9ea", "html_url": "https://github.com/rust-lang/rust/commit/eb1b500a9a69b149295c37c2fe2c9409f406f9ea"}], "stats": {"total": 35, "additions": 34, "deletions": 1}, "files": [{"sha": "25568db814824da35738eaa01acc4b99b2e61cd6", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659", "patch": "@@ -765,8 +765,16 @@ pub fn trans_call_inner<'a, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     if is_rust_fn {\n         let mut llargs = Vec::new();\n \n-        if let (ty::FnConverging(ret_ty), Some(llretslot)) = (ret_ty, opt_llretslot) {\n+        if let (ty::FnConverging(ret_ty), Some(mut llretslot)) = (ret_ty, opt_llretslot) {\n             if type_of::return_uses_outptr(ccx, ret_ty) {\n+                let llformal_ret_ty = type_of::type_of(ccx, ret_ty).ptr_to();\n+                let llret_ty = common::val_ty(llretslot);\n+                if llformal_ret_ty != llret_ty {\n+                    // this could happen due to e.g. subtyping\n+                    debug!(\"casting actual return type ({}) to match formal ({})\",\n+                        bcx.llty_str(llret_ty), bcx.llty_str(llformal_ret_ty));\n+                    llretslot = PointerCast(bcx, llretslot, llformal_ret_ty);\n+                }\n                 llargs.push(llretslot);\n             }\n         }"}, {"sha": "fafae0cb705a891e3e89f40fe2abc91d01e8e583", "filename": "src/test/compile-fail/retslot-cast.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659/src%2Ftest%2Fcompile-fail%2Fretslot-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659/src%2Ftest%2Fcompile-fail%2Fretslot-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fretslot-cast.rs?ref=b593c60c33b5ac0f4b8b4bffdbfb54ed538a5659", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(warnings)]\n+\n+pub fn fail(x: Option<& (Iterator+Send)>) -> Option<&Iterator> {\n+    // This call used to trigger an LLVM assertion because the return slot had type\n+    // \"Option<&Iterator>\"* instead of \"Option<&(Iterator+Send)>\"*\n+    inner(x)\n+}\n+\n+pub fn inner(x: Option<& (Iterator+Send)>) -> Option<&(Iterator+Send)> {\n+    x\n+}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}]}