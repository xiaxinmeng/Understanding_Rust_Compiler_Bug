{"sha": "ac04dbd056a94d59699be3983e5404856a9add13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMDRkYmQwNTZhOTRkNTk2OTliZTM5ODNlNTQwNDg1NmE5YWRkMTM=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-04T13:31:10Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-05T12:03:27Z"}, "message": "Reduce indentation in `resolve_associated_item`", "tree": {"sha": "7deef849c03cb9aee29c1888c5d21eca0a0ac411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7deef849c03cb9aee29c1888c5d21eca0a0ac411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac04dbd056a94d59699be3983e5404856a9add13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac04dbd056a94d59699be3983e5404856a9add13", "html_url": "https://github.com/rust-lang/rust/commit/ac04dbd056a94d59699be3983e5404856a9add13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac04dbd056a94d59699be3983e5404856a9add13/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63b3f9bbb66b6ec4c7eea42078fca23730761c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63b3f9bbb66b6ec4c7eea42078fca23730761c1", "html_url": "https://github.com/rust-lang/rust/commit/d63b3f9bbb66b6ec4c7eea42078fca23730761c1"}], "stats": {"total": 80, "additions": 35, "deletions": 45}, "files": [{"sha": "54d5f1cabfce7c741f4dd66a75a57d62c33aa6bd", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ac04dbd056a94d59699be3983e5404856a9add13/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac04dbd056a94d59699be3983e5404856a9add13/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=ac04dbd056a94d59699be3983e5404856a9add13", "patch": "@@ -611,7 +611,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         ty::AssocKind::Const => \"associatedconstant\",\n                         ty::AssocKind::Type => \"associatedtype\",\n                     };\n-                    Some(if extra_fragment.is_some() {\n+                    return Some(if extra_fragment.is_some() {\n                         Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(\n                             root_res,\n                         )))\n@@ -621,51 +621,41 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                         // Store the kind in a side channel so that only the disambiguator logic looks at it.\n                         self.kind_side_channel.set(Some((kind.as_def_kind(), id)));\n                         Ok((root_res, Some(format!(\"{}.{}\", out, item_name))))\n-                    })\n-                } else if ns == Namespace::ValueNS {\n-                    debug!(\"looking for variants or fields named {} for {:?}\", item_name, did);\n-                    // FIXME(jynelson): why is this different from\n-                    // `variant_field`?\n-                    match tcx.type_of(did).kind() {\n-                        ty::Adt(def, _) => {\n-                            let field = if def.is_enum() {\n-                                def.all_fields().find(|item| item.ident.name == item_name)\n-                            } else {\n-                                def.non_enum_variant()\n-                                    .fields\n-                                    .iter()\n-                                    .find(|item| item.ident.name == item_name)\n-                            };\n-                            field.map(|item| {\n-                                if extra_fragment.is_some() {\n-                                    let res = Res::Def(\n-                                        if def.is_enum() {\n-                                            DefKind::Variant\n-                                        } else {\n-                                            DefKind::Field\n-                                        },\n-                                        item.did,\n-                                    );\n-                                    Err(ErrorKind::AnchorFailure(\n-                                        AnchorFailure::RustdocAnchorConflict(res),\n-                                    ))\n-                                } else {\n-                                    Ok((\n-                                        root_res,\n-                                        Some(format!(\n-                                            \"{}.{}\",\n-                                            if def.is_enum() { \"variant\" } else { \"structfield\" },\n-                                            item.ident\n-                                        )),\n-                                    ))\n-                                }\n-                            })\n-                        }\n-                        _ => None,\n-                    }\n-                } else {\n-                    None\n+                    });\n+                }\n+\n+                if ns != Namespace::ValueNS {\n+                    return None;\n                 }\n+                debug!(\"looking for variants or fields named {} for {:?}\", item_name, did);\n+                // FIXME: this doesn't really belong in `associated_item` (maybe `variant_field` is better?)\n+                // NOTE: it's different from variant_field because it resolves fields and variants,\n+                // not variant fields (2 path segments, not 3).\n+                let def = match tcx.type_of(did).kind() {\n+                    ty::Adt(def, _) => def,\n+                    _ => return None,\n+                };\n+                let field = if def.is_enum() {\n+                    def.all_fields().find(|item| item.ident.name == item_name)\n+                } else {\n+                    def.non_enum_variant().fields.iter().find(|item| item.ident.name == item_name)\n+                }?;\n+                Some(if extra_fragment.is_some() {\n+                    let res = Res::Def(\n+                        if def.is_enum() { DefKind::Variant } else { DefKind::Field },\n+                        field.did,\n+                    );\n+                    Err(ErrorKind::AnchorFailure(AnchorFailure::RustdocAnchorConflict(res)))\n+                } else {\n+                    Ok((\n+                        root_res,\n+                        Some(format!(\n+                            \"{}.{}\",\n+                            if def.is_enum() { \"variant\" } else { \"structfield\" },\n+                            field.ident\n+                        )),\n+                    ))\n+                })\n             }\n             Res::Def(DefKind::Trait, did) => tcx\n                 .associated_items(did)"}]}