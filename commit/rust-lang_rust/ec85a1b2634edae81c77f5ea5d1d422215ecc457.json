{"sha": "ec85a1b2634edae81c77f5ea5d1d422215ecc457", "node_id": "C_kwDOAAsO6NoAKGVjODVhMWIyNjM0ZWRhZTgxYzc3ZjVlYTVkMWQ0MjIyMTVlY2M0NTc", "commit": {"author": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-10T12:43:07Z"}, "committer": {"name": "Xiretza", "email": "xiretza@xiretza.xyz", "date": "2022-09-22T15:25:50Z"}, "message": "Ensure #[suggestion] is only applied to correct tuple types", "tree": {"sha": "1c3295b5ea590b7fdfa3213a5a538863bc4599c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c3295b5ea590b7fdfa3213a5a538863bc4599c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec85a1b2634edae81c77f5ea5d1d422215ecc457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec85a1b2634edae81c77f5ea5d1d422215ecc457", "html_url": "https://github.com/rust-lang/rust/commit/ec85a1b2634edae81c77f5ea5d1d422215ecc457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec85a1b2634edae81c77f5ea5d1d422215ecc457/comments", "author": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xiretza", "id": 3107142, "node_id": "MDQ6VXNlcjMxMDcxNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3107142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xiretza", "html_url": "https://github.com/Xiretza", "followers_url": "https://api.github.com/users/Xiretza/followers", "following_url": "https://api.github.com/users/Xiretza/following{/other_user}", "gists_url": "https://api.github.com/users/Xiretza/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xiretza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xiretza/subscriptions", "organizations_url": "https://api.github.com/users/Xiretza/orgs", "repos_url": "https://api.github.com/users/Xiretza/repos", "events_url": "https://api.github.com/users/Xiretza/events{/privacy}", "received_events_url": "https://api.github.com/users/Xiretza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e72387fd03082cd067a4a56acf4b231b543c7fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e72387fd03082cd067a4a56acf4b231b543c7fd", "html_url": "https://github.com/rust-lang/rust/commit/2e72387fd03082cd067a4a56acf4b231b543c7fd"}], "stats": {"total": 127, "additions": 79, "deletions": 48}, "files": [{"sha": "6dd2161e0f95b52216bbf257b0b0ff26a5dc88a7", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 24, "deletions": 33, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/ec85a1b2634edae81c77f5ea5d1d422215ecc457/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec85a1b2634edae81c77f5ea5d1d422215ecc457/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=ec85a1b2634edae81c77f5ea5d1d422215ecc457", "patch": "@@ -571,46 +571,37 @@ impl DiagnosticDeriveBuilder {\n                 let mut span_idx = None;\n                 let mut applicability_idx = None;\n \n+                fn type_err(span: &Span) -> Result<!, DiagnosticDeriveError> {\n+                    span_err(span.unwrap(), \"wrong types for suggestion\")\n+                        .help(\n+                            \"`#[suggestion(...)]` on a tuple field must be applied to fields \\\n+                             of type `(Span, Applicability)`\",\n+                        )\n+                        .emit();\n+                    Err(DiagnosticDeriveError::ErrorHandled)\n+                }\n+\n                 for (idx, elem) in tup.elems.iter().enumerate() {\n                     if type_matches_path(elem, &[\"rustc_span\", \"Span\"]) {\n-                        if span_idx.is_none() {\n-                            span_idx = Some(syn::Index::from(idx));\n-                        } else {\n-                            throw_span_err!(\n-                                info.span.unwrap(),\n-                                \"type of field annotated with `#[suggestion(...)]` contains more \\\n-                                 than one `Span`\"\n-                            );\n-                        }\n+                        span_idx.set_once((syn::Index::from(idx), elem.span().unwrap()));\n                     } else if type_matches_path(elem, &[\"rustc_errors\", \"Applicability\"]) {\n-                        if applicability_idx.is_none() {\n-                            applicability_idx = Some(syn::Index::from(idx));\n-                        } else {\n-                            throw_span_err!(\n-                                info.span.unwrap(),\n-                                \"type of field annotated with `#[suggestion(...)]` contains more \\\n-                                 than one Applicability\"\n-                            );\n-                        }\n+                        applicability_idx.set_once((syn::Index::from(idx), elem.span().unwrap()));\n+                    } else {\n+                        type_err(&elem.span())?;\n                     }\n                 }\n \n-                if let Some(span_idx) = span_idx {\n-                    let binding = &info.binding.binding;\n-                    let span = quote!(#binding.#span_idx);\n-                    let applicability = applicability_idx\n-                        .map(|applicability_idx| quote!(#binding.#applicability_idx))\n-                        .unwrap_or_else(|| quote!(rustc_errors::Applicability::Unspecified));\n-\n-                    return Ok((span, Some(applicability)));\n-                }\n+                let Some((span_idx, _)) = span_idx else {\n+                    type_err(&tup.span())?;\n+                };\n+                let Some((applicability_idx, _applicability_span)) = applicability_idx else {\n+                    type_err(&tup.span())?;\n+                };\n+                let binding = &info.binding.binding;\n+                let span = quote!(#binding.#span_idx);\n+                let applicability = quote!(#binding.#applicability_idx);\n \n-                throw_span_err!(info.span.unwrap(), \"wrong types for suggestion\", |diag| {\n-                    diag.help(\n-                        \"`#[suggestion(...)]` on a tuple field must be applied to fields of type \\\n-                         `(Span, Applicability)`\",\n-                    )\n-                });\n+                Ok((span, Some(applicability)))\n             }\n             // If `ty` isn't a `Span` or `(Span, Applicability)` then emit an error.\n             _ => throw_span_err!(info.span.unwrap(), \"wrong field type for suggestion\", |diag| {"}, {"sha": "c774484d8bfb40cc389eaebb6704716a850cdaf7", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ec85a1b2634edae81c77f5ea5d1d422215ecc457/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec85a1b2634edae81c77f5ea5d1d422215ecc457/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=ec85a1b2634edae81c77f5ea5d1d422215ecc457", "patch": "@@ -269,16 +269,16 @@ struct SuggestWithSpanOnly {\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateSpanAndApplicability {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n-    //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n     suggestion: (Span, Span, Applicability),\n+    //~^ ERROR specified multiple times\n }\n \n #[derive(Diagnostic)]\n #[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n struct SuggestWithDuplicateApplicabilityAndSpan {\n     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n-    //~^ ERROR type of field annotated with `#[suggestion(...)]` contains more than one\n     suggestion: (Applicability, Applicability, Span),\n+    //~^ ERROR specified multiple times\n }\n \n #[derive(Diagnostic)]\n@@ -589,3 +589,19 @@ struct DuplicatedSuggestionCode {\n     //~^ ERROR specified multiple times\n     suggestion: Span,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+struct InvalidTypeInSuggestionTuple {\n+    #[suggestion(typeck::suggestion, code = \"...\")]\n+    suggestion: (Span, usize),\n+    //~^ ERROR wrong types for suggestion\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(typeck::ambiguous_lifetime_bound, code = \"E0123\")]\n+struct MissingApplicabilityInSuggestionTuple {\n+    #[suggestion(typeck::suggestion, code = \"...\")]\n+    suggestion: (Span,),\n+    //~^ ERROR wrong types for suggestion\n+}"}, {"sha": "084a021ac208a6226a0f2cc951f5c125ee471ffb", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.stderr", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ec85a1b2634edae81c77f5ea5d1d422215ecc457/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec85a1b2634edae81c77f5ea5d1d422215ecc457/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.stderr?ref=ec85a1b2634edae81c77f5ea5d1d422215ecc457", "patch": "@@ -263,21 +263,29 @@ LL | |     suggestion: Applicability,\n    |\n    = help: `#[suggestion(...)]` should be applied to fields of type `Span` or `(Span, Applicability)`\n \n-error: type of field annotated with `#[suggestion(...)]` contains more than one `Span`\n-  --> $DIR/diagnostic-derive.rs:271:5\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:272:24\n    |\n-LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n-LL | |\n-LL | |     suggestion: (Span, Span, Applicability),\n-   | |___________________________________________^\n+LL |     suggestion: (Span, Span, Applicability),\n+   |                        ^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:272:18\n+   |\n+LL |     suggestion: (Span, Span, Applicability),\n+   |                  ^^^^\n \n-error: type of field annotated with `#[suggestion(...)]` contains more than one Applicability\n-  --> $DIR/diagnostic-derive.rs:279:5\n+error: specified multiple times\n+  --> $DIR/diagnostic-derive.rs:280:33\n    |\n-LL | /     #[suggestion(typeck::suggestion, code = \"This is suggested code\")]\n-LL | |\n-LL | |     suggestion: (Applicability, Applicability, Span),\n-   | |____________________________________________________^\n+LL |     suggestion: (Applicability, Applicability, Span),\n+   |                                 ^^^^^^^^^^^^^\n+   |\n+note: previously specified here\n+  --> $DIR/diagnostic-derive.rs:280:18\n+   |\n+LL |     suggestion: (Applicability, Applicability, Span),\n+   |                  ^^^^^^^^^^^^^\n \n error: `#[label = ...]` is not a valid attribute\n   --> $DIR/diagnostic-derive.rs:287:5\n@@ -415,6 +423,22 @@ note: previously specified here\n LL |     #[suggestion(typeck::suggestion, code = \"...\", code = \",,,\")]\n    |                                      ^^^^^^^^^^^^\n \n+error: wrong types for suggestion\n+  --> $DIR/diagnostic-derive.rs:597:24\n+   |\n+LL |     suggestion: (Span, usize),\n+   |                        ^^^^^\n+   |\n+   = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n+\n+error: wrong types for suggestion\n+  --> $DIR/diagnostic-derive.rs:605:17\n+   |\n+LL |     suggestion: (Span,),\n+   |                 ^^^^^^^\n+   |\n+   = help: `#[suggestion(...)]` on a tuple field must be applied to fields of type `(Span, Applicability)`\n+\n error: cannot find attribute `nonsense` in this scope\n   --> $DIR/diagnostic-derive.rs:53:3\n    |\n@@ -471,7 +495,7 @@ LL |         arg: impl IntoDiagnosticArg,\n    |                   ^^^^^^^^^^^^^^^^^ required by this bound in `DiagnosticBuilder::<'a, G>::set_arg`\n    = note: this error originates in the derive macro `Diagnostic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 56 previous errors\n+error: aborting due to 58 previous errors\n \n Some errors have detailed explanations: E0277, E0425.\n For more information about an error, try `rustc --explain E0277`."}]}