{"sha": "8828f3494e307e715bea9c0d4d993ad4e550314b", "node_id": "C_kwDOAAsO6NoAKDg4MjhmMzQ5NGUzMDdlNzE1YmVhOWMwZDRkOTkzYWQ0ZTU1MDMxNGI", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2023-02-09T08:46:36Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2023-02-09T08:46:36Z"}, "message": "Hide proc macro server version detection errors", "tree": {"sha": "ba7028e00b4533d5adc6b071d4bb41642332eb38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba7028e00b4533d5adc6b071d4bb41642332eb38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8828f3494e307e715bea9c0d4d993ad4e550314b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8828f3494e307e715bea9c0d4d993ad4e550314b", "html_url": "https://github.com/rust-lang/rust/commit/8828f3494e307e715bea9c0d4d993ad4e550314b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8828f3494e307e715bea9c0d4d993ad4e550314b/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7836e44d3fb2bb46d21ca5077142341f983a838", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7836e44d3fb2bb46d21ca5077142341f983a838", "html_url": "https://github.com/rust-lang/rust/commit/b7836e44d3fb2bb46d21ca5077142341f983a838"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "1ccbd780fdda33067a2ffe140906de8955a5a156", "filename": "crates/proc-macro-api/src/process.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8828f3494e307e715bea9c0d4d993ad4e550314b/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8828f3494e307e715bea9c0d4d993ad4e550314b/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Fprocess.rs?ref=8828f3494e307e715bea9c0d4d993ad4e550314b", "patch": "@@ -27,13 +27,13 @@ impl ProcMacroProcessSrv {\n         process_path: AbsPathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>> + Clone,\n     ) -> io::Result<ProcMacroProcessSrv> {\n-        let create_srv = || {\n-            let mut process = Process::run(process_path.clone(), args.clone())?;\n+        let create_srv = |null_stderr| {\n+            let mut process = Process::run(process_path.clone(), args.clone(), null_stderr)?;\n             let (stdin, stdout) = process.stdio().expect(\"couldn't access child stdio\");\n \n             io::Result::Ok(ProcMacroProcessSrv { _process: process, stdin, stdout, version: 0 })\n         };\n-        let mut srv = create_srv()?;\n+        let mut srv = create_srv(true)?;\n         tracing::info!(\"sending version check\");\n         match srv.version_check() {\n             Ok(v) if v > CURRENT_API_VERSION => Err(io::Error::new(\n@@ -45,12 +45,13 @@ impl ProcMacroProcessSrv {\n             )),\n             Ok(v) => {\n                 tracing::info!(\"got version {v}\");\n+                srv = create_srv(false)?;\n                 srv.version = v;\n                 Ok(srv)\n             }\n             Err(e) => {\n                 tracing::info!(%e, \"proc-macro version check failed, restarting and assuming version 0\");\n-                create_srv()\n+                create_srv(false)\n             }\n         }\n     }\n@@ -98,9 +99,10 @@ impl Process {\n     fn run(\n         path: AbsPathBuf,\n         args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+        null_stderr: bool,\n     ) -> io::Result<Process> {\n         let args: Vec<OsString> = args.into_iter().map(|s| s.as_ref().into()).collect();\n-        let child = JodChild(mk_child(&path, args)?);\n+        let child = JodChild(mk_child(&path, args, null_stderr)?);\n         Ok(Process { child })\n     }\n \n@@ -116,13 +118,14 @@ impl Process {\n fn mk_child(\n     path: &AbsPath,\n     args: impl IntoIterator<Item = impl AsRef<OsStr>>,\n+    null_stderr: bool,\n ) -> io::Result<Child> {\n     Command::new(path.as_os_str())\n         .args(args)\n         .env(\"RUST_ANALYZER_INTERNALS_DO_NOT_USE\", \"this is unstable\")\n         .stdin(Stdio::piped())\n         .stdout(Stdio::piped())\n-        .stderr(Stdio::inherit())\n+        .stderr(if null_stderr { Stdio::null() } else { Stdio::inherit() })\n         .spawn()\n }\n "}]}