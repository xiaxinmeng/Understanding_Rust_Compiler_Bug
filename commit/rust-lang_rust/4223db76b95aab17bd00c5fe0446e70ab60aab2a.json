{"sha": "4223db76b95aab17bd00c5fe0446e70ab60aab2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMjNkYjc2Yjk1YWFiMTdiZDAwYzVmZTA0NDZlNzBhYjYwYWFiMmE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-12-06T21:23:48Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-16T19:07:26Z"}, "message": "Iterate on inferred_outlives.", "tree": {"sha": "3357101421243dc2a44cbbb352d70f1d51c59833", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3357101421243dc2a44cbbb352d70f1d51c59833"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4223db76b95aab17bd00c5fe0446e70ab60aab2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4223db76b95aab17bd00c5fe0446e70ab60aab2a", "html_url": "https://github.com/rust-lang/rust/commit/4223db76b95aab17bd00c5fe0446e70ab60aab2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4223db76b95aab17bd00c5fe0446e70ab60aab2a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58bca6f658dd8cf921b90d202c0ed43b833e8dc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/58bca6f658dd8cf921b90d202c0ed43b833e8dc9", "html_url": "https://github.com/rust-lang/rust/commit/58bca6f658dd8cf921b90d202c0ed43b833e8dc9"}], "stats": {"total": 36, "additions": 4, "deletions": 32}, "files": [{"sha": "101a9dc1b683323641d9ca96b49712a90c02f340", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 32, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4223db76b95aab17bd00c5fe0446e70ab60aab2a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4223db76b95aab17bd00c5fe0446e70ab60aab2a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4223db76b95aab17bd00c5fe0446e70ab60aab2a", "patch": "@@ -906,6 +906,10 @@ impl EncodeContext<'a, 'tcx> {\n             let g = tcx.generics_of(def_id);\n             record!(self.tables.generics[def_id] <- g);\n             record!(self.tables.explicit_predicates[def_id] <- self.tcx.explicit_predicates_of(def_id));\n+            let inferred_outlives = self.tcx.inferred_outlives_of(def_id);\n+            if !inferred_outlives.is_empty() {\n+                record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);\n+            }\n         }\n         let inherent_impls = tcx.crate_inherent_impls(LOCAL_CRATE);\n         for (def_id, implementations) in inherent_impls.inherent_impls.iter() {\n@@ -951,7 +955,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(ctor_def_id));\n             }\n         }\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_enum_variant_ctor(&mut self, def: &ty::AdtDef, index: VariantIdx) {\n@@ -973,7 +976,6 @@ impl EncodeContext<'a, 'tcx> {\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_info_for_mod(&mut self, local_def_id: LocalDefId, md: &hir::Mod<'_>) {\n@@ -1032,7 +1034,6 @@ impl EncodeContext<'a, 'tcx> {\n         record!(self.tables.kind[def_id] <- EntryKind::Field);\n         self.encode_ident_span(def_id, field.ident);\n         self.encode_item_type(def_id);\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_struct_ctor(&mut self, adt_def: &ty::AdtDef, def_id: DefId) {\n@@ -1052,15 +1053,6 @@ impl EncodeContext<'a, 'tcx> {\n         if variant.ctor_kind == CtorKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_inferred_outlives(def_id);\n-    }\n-\n-    fn encode_inferred_outlives(&mut self, def_id: DefId) {\n-        debug!(\"EncodeContext::encode_inferred_outlives({:?})\", def_id);\n-        let inferred_outlives = self.tcx.inferred_outlives_of(def_id);\n-        if !inferred_outlives.is_empty() {\n-            record!(self.tables.inferred_outlives[def_id] <- inferred_outlives);\n-        }\n     }\n \n     fn encode_super_predicates(&mut self, def_id: DefId) {\n@@ -1143,7 +1135,6 @@ impl EncodeContext<'a, 'tcx> {\n         if trait_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_info_for_impl_item(&mut self, def_id: DefId) {\n@@ -1201,7 +1192,6 @@ impl EncodeContext<'a, 'tcx> {\n         if impl_item.kind == ty::AssocKind::Fn {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_inferred_outlives(def_id);\n     }\n \n     fn encode_fn_param_names_for_body(&mut self, body_id: hir::BodyId) -> Lazy<[Ident]> {\n@@ -1466,22 +1456,6 @@ impl EncodeContext<'a, 'tcx> {\n                 record!(self.tables.impl_trait_ref[def_id] <- trait_ref);\n             }\n         }\n-        match item.kind {\n-            hir::ItemKind::Static(..)\n-            | hir::ItemKind::Const(..)\n-            | hir::ItemKind::Fn(..)\n-            | hir::ItemKind::TyAlias(..)\n-            | hir::ItemKind::Enum(..)\n-            | hir::ItemKind::Struct(..)\n-            | hir::ItemKind::Union(..)\n-            | hir::ItemKind::Impl { .. }\n-            | hir::ItemKind::OpaqueTy(..)\n-            | hir::ItemKind::Trait(..)\n-            | hir::ItemKind::TraitAlias(..) => {\n-                self.encode_inferred_outlives(def_id);\n-            }\n-            _ => {}\n-        }\n         match item.kind {\n             hir::ItemKind::Trait(..) | hir::ItemKind::TraitAlias(..) => {\n                 self.encode_super_predicates(def_id);\n@@ -1539,7 +1513,6 @@ impl EncodeContext<'a, 'tcx> {\n \n         record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::AnonConst(qualifs, const_data));\n         self.encode_item_type(def_id.to_def_id());\n-        self.encode_inferred_outlives(def_id.to_def_id());\n     }\n \n     fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {\n@@ -1819,7 +1792,6 @@ impl EncodeContext<'a, 'tcx> {\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {\n             record!(self.tables.fn_sig[def_id] <- tcx.fn_sig(def_id));\n         }\n-        self.encode_inferred_outlives(def_id);\n     }\n }\n "}]}