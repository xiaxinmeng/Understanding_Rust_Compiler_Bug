{"sha": "f9e825d95624129b66c34f25904f6ae46b9d5760", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZTgyNWQ5NTYyNDEyOWI2NmMzNGYyNTkwNGY2YWU0NmI5ZDU3NjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T08:24:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-04-13T08:24:09Z"}, "message": "move ScopeEntryWithSyntax", "tree": {"sha": "dd58a7e954b8479abf218a5da5245542c091f529", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd58a7e954b8479abf218a5da5245542c091f529"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9e825d95624129b66c34f25904f6ae46b9d5760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e825d95624129b66c34f25904f6ae46b9d5760", "html_url": "https://github.com/rust-lang/rust/commit/f9e825d95624129b66c34f25904f6ae46b9d5760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9e825d95624129b66c34f25904f6ae46b9d5760/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d387bdccba2b5bb681e5b6c84cc1b0efe5c1a79a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d387bdccba2b5bb681e5b6c84cc1b0efe5c1a79a", "html_url": "https://github.com/rust-lang/rust/commit/d387bdccba2b5bb681e5b6c84cc1b0efe5c1a79a"}], "stats": {"total": 71, "additions": 34, "deletions": 37}, "files": [{"sha": "817e660f9133409d44fa4126116f0d486a1773a9", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9e825d95624129b66c34f25904f6ae46b9d5760/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e825d95624129b66c34f25904f6ae46b9d5760/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=f9e825d95624129b66c34f25904f6ae46b9d5760", "patch": "@@ -14,9 +14,9 @@ use crate::{\n     name::AsName,\n     type_ref::{Mutability, TypeRef},\n };\n-use crate::{ path::GenericArgs, ty::primitive::{IntTy, UncertainIntTy, FloatTy, UncertainFloatTy}};\n+use crate::{path::GenericArgs, ty::primitive::{IntTy, UncertainIntTy, FloatTy, UncertainFloatTy}};\n \n-pub use self::scope::{ExprScopes, ScopeEntryWithSyntax};\n+pub use self::scope::ExprScopes;\n \n pub(crate) mod scope;\n "}, {"sha": "090343d120044e8af67ad6a221c3b4f6c4876441", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f9e825d95624129b66c34f25904f6ae46b9d5760/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e825d95624129b66c34f25904f6ae46b9d5760/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=f9e825d95624129b66c34f25904f6ae46b9d5760", "patch": "@@ -1,14 +1,11 @@\n use std::sync::Arc;\n \n-use rustc_hash::{FxHashMap};\n-use ra_syntax::{\n-    TextRange, AstPtr,\n-    ast,\n-};\n+use rustc_hash::FxHashMap;\n+use ra_syntax::TextRange;\n use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n-    Name, DefWithBody, Either,\n+    Name, DefWithBody,\n     expr::{PatId, ExprId, Pat, Expr, Body, Statement},\n     HirDatabase,\n };\n@@ -30,6 +27,16 @@ pub(crate) struct ScopeEntry {\n     pat: PatId,\n }\n \n+impl ScopeEntry {\n+    pub(crate) fn name(&self) -> &Name {\n+        &self.name\n+    }\n+\n+    pub(crate) fn pat(&self) -> PatId {\n+        self.pat\n+    }\n+}\n+\n #[derive(Debug, PartialEq, Eq)]\n pub(crate) struct ScopeData {\n     parent: Option<ScopeId>,\n@@ -100,32 +107,6 @@ impl ExprScopes {\n     }\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct ScopeEntryWithSyntax {\n-    pub(crate) name: Name,\n-    pub(crate) ptr: Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>,\n-}\n-\n-impl ScopeEntryWithSyntax {\n-    pub fn name(&self) -> &Name {\n-        &self.name\n-    }\n-\n-    pub fn ptr(&self) -> Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>> {\n-        self.ptr\n-    }\n-}\n-\n-impl ScopeEntry {\n-    pub fn name(&self) -> &Name {\n-        &self.name\n-    }\n-\n-    pub fn pat(&self) -> PatId {\n-        self.pat\n-    }\n-}\n-\n fn compute_block_scopes(\n     statements: &[Statement],\n     tail: Option<ExprId>,"}, {"sha": "a9db23060d3680466d3cd200772bacfd1c5750e6", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9e825d95624129b66c34f25904f6ae46b9d5760/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e825d95624129b66c34f25904f6ae46b9d5760/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f9e825d95624129b66c34f25904f6ae46b9d5760", "patch": "@@ -65,9 +65,9 @@ pub use self::{\n     impl_block::{ImplBlock, ImplItem},\n     docs::{Docs, Documentation},\n     adt::AdtDef,\n-    expr::{ExprScopes, ScopeEntryWithSyntax},\n+    expr::ExprScopes,\n     resolve::Resolution,\n-    source_binder::{SourceAnalyzer, PathResolution},\n+    source_binder::{SourceAnalyzer, PathResolution, ScopeEntryWithSyntax},\n };\n \n pub use self::code_model_api::{"}, {"sha": "34a00a3007c16cc593a5705fd14a8e817f8e56d8", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9e825d95624129b66c34f25904f6ae46b9d5760/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e825d95624129b66c34f25904f6ae46b9d5760/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f9e825d95624129b66c34f25904f6ae46b9d5760", "patch": "@@ -19,7 +19,7 @@ use ra_syntax::{\n use crate::{\n     HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody, PerNs, Name,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n-    expr::{BodySourceMap, scope::{ReferenceDescriptor, ScopeEntryWithSyntax, ScopeId, ExprScopes}},\n+    expr::{BodySourceMap, scope::{ReferenceDescriptor, ScopeId, ExprScopes}},\n     ids::LocationCtx,\n     expr, AstId\n };\n@@ -187,6 +187,22 @@ pub enum PathResolution {\n     AssocItem(crate::ImplItem),\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct ScopeEntryWithSyntax {\n+    pub(crate) name: Name,\n+    pub(crate) ptr: Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>,\n+}\n+\n+impl ScopeEntryWithSyntax {\n+    pub fn name(&self) -> &Name {\n+        &self.name\n+    }\n+\n+    pub fn ptr(&self) -> Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>> {\n+        self.ptr\n+    }\n+}\n+\n impl SourceAnalyzer {\n     pub fn new(\n         db: &impl HirDatabase,"}]}