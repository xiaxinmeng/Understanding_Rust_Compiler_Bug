{"sha": "3237b3886c8d1bd19b78eda6040e2c55e5332a82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMzdiMzg4NmM4ZDFiZDE5Yjc4ZWRhNjA0MGUyYzU1ZTUzMzJhODI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-03T17:26:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-11-03T17:38:20Z"}, "message": "rustc_ast: Do not panic by default when visiting macro calls", "tree": {"sha": "4bcb710d6d3edbad6385025c985a5011a545bc8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bcb710d6d3edbad6385025c985a5011a545bc8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3237b3886c8d1bd19b78eda6040e2c55e5332a82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3237b3886c8d1bd19b78eda6040e2c55e5332a82", "html_url": "https://github.com/rust-lang/rust/commit/3237b3886c8d1bd19b78eda6040e2c55e5332a82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3237b3886c8d1bd19b78eda6040e2c55e5332a82/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd1516696550e108863bf4b4fb81ce5c4f58968", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd1516696550e108863bf4b4fb81ce5c4f58968", "html_url": "https://github.com/rust-lang/rust/commit/0cd1516696550e108863bf4b4fb81ce5c4f58968"}], "stats": {"total": 79, "additions": 8, "deletions": 71}, "files": [{"sha": "d99337ee06e118d5ace47f877e4de5cea8edb7c8", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -210,11 +210,8 @@ pub trait MutVisitor: Sized {\n         noop_visit_local(l, self);\n     }\n \n-    fn visit_mac(&mut self, _mac: &mut MacCall) {\n-        panic!(\"visit_mac disabled by default\");\n-        // N.B., see note about macros above. If you really want a visitor that\n-        // works on macros, use this definition in your trait impl:\n-        //   mut_visit::noop_visit_mac(_mac, self);\n+    fn visit_mac(&mut self, mac: &mut MacCall) {\n+        noop_visit_mac(mac, self);\n     }\n \n     fn visit_macro_def(&mut self, def: &mut MacroDef) {"}, {"sha": "1b8026bf439f486e28c7f4da169e2d90147f7440", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -176,13 +176,8 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_lifetime(&mut self, lifetime: &'ast Lifetime) {\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_mac(&mut self, _mac: &'ast MacCall) {\n-        panic!(\"visit_mac disabled by default\");\n-        // N.B., see note about macros above.\n-        // if you really want a visitor that\n-        // works on macros, use this\n-        // definition in your trait impl:\n-        // visit::walk_mac(self, _mac)\n+    fn visit_mac(&mut self, mac: &'ast MacCall) {\n+        walk_mac(self, mac)\n     }\n     fn visit_mac_def(&mut self, _mac: &'ast MacroDef, _id: NodeId) {\n         // Nothing to do"}, {"sha": "773b81d771ca9c15729d91b850a33194d37b71b8", "filename": "compiler/rustc_ast_passes/src/node_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fnode_count.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -114,9 +114,9 @@ impl<'ast> Visitor<'ast> for NodeCounter {\n         self.count += 1;\n         walk_lifetime(self, lifetime)\n     }\n-    fn visit_mac(&mut self, _mac: &MacCall) {\n+    fn visit_mac(&mut self, mac: &MacCall) {\n         self.count += 1;\n-        walk_mac(self, _mac)\n+        walk_mac(self, mac)\n     }\n     fn visit_path(&mut self, path: &Path, _id: NodeId) {\n         self.count += 1;"}, {"sha": "6cef26a13e6b00e3aa469a0fa999dbc3a81af925", "filename": "compiler/rustc_ast_passes/src/show_span.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_ast_passes%2Fsrc%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_ast_passes%2Fsrc%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fshow_span.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -54,10 +54,6 @@ impl<'a> Visitor<'a> for ShowSpanVisitor<'a> {\n         }\n         visit::walk_ty(self, t);\n     }\n-\n-    fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n-        visit::walk_mac(self, mac);\n-    }\n }\n \n pub fn run(span_diagnostic: &rustc_errors::Handler, mode: &str, krate: &ast::Crate) {"}, {"sha": "4e91436199a53f6faad6413ab6392c545961d7b6", "filename": "compiler/rustc_builtin_macros/src/proc_macro_harness.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fproc_macro_harness.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -344,10 +344,6 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         visit::walk_item(self, item);\n         self.in_root = prev_in_root;\n     }\n-\n-    fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n-        visit::walk_mac(self, mac)\n-    }\n }\n \n // Creates a new module which looks like:"}, {"sha": "e68b626e22d9ef5ca676a641a6f2cfd872d2ec10", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -130,10 +130,6 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n         }\n         smallvec![P(item)]\n     }\n-\n-    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n-        // Do nothing.\n-    }\n }\n \n // Beware, this is duplicated in librustc_passes/entry.rs (with\n@@ -201,10 +197,6 @@ impl<'a> MutVisitor for EntryPointCleaner<'a> {\n \n         smallvec![item]\n     }\n-\n-    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n-        // Do nothing.\n-    }\n }\n \n /// Crawl over the crate, inserting test reexports and the test main function"}, {"sha": "a07dd8ede8bbae3439ab64b8d9a853a9bb81e281", "filename": "compiler/rustc_expand/src/config.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fconfig.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -547,11 +547,6 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n         noop_flat_map_assoc_item(configure!(self, item), self)\n     }\n \n-    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n-        // Don't configure interpolated AST (cf. issue #34171).\n-        // Interpolated AST will get configured once the surrounding tokens are parsed.\n-    }\n-\n     fn visit_pat(&mut self, pat: &mut P<ast::Pat>) {\n         self.configure_pat(pat);\n         noop_visit_pat(pat, self)"}, {"sha": "9ac3550d223c9b0881444403749562d93f54676c", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -850,8 +850,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n                 visit::walk_item(self, item);\n             }\n-\n-            fn visit_mac(&mut self, _: &'ast ast::MacCall) {}\n         }\n \n         if !self.cx.ecfg.proc_macro_hygiene() {"}, {"sha": "70eb7e228358b352860d01b580abe2e1f4cf138b", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -27,10 +27,6 @@ impl MutVisitor for Marker {\n     fn visit_span(&mut self, span: &mut Span) {\n         *span = span.apply_mark(self.0, self.1)\n     }\n-\n-    fn visit_mac(&mut self, mac: &mut MacCall) {\n-        mut_visit::noop_visit_mac(mac, self)\n-    }\n }\n \n /// An iterator over the token trees in a delimited token tree (`{ ... }`) or a sequence (`$(...)`)."}, {"sha": "568618fa8df84b2bce325adf84eae9224417781e", "filename": "compiler/rustc_expand/src/mut_visit/tests.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmut_visit%2Ftests.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -21,9 +21,6 @@ impl MutVisitor for ToZzIdentMutVisitor {\n     fn visit_ident(&mut self, ident: &mut Ident) {\n         *ident = Ident::from_str(\"zz\");\n     }\n-    fn visit_mac(&mut self, mac: &mut ast::MacCall) {\n-        mut_visit::noop_visit_mac(mac, self)\n-    }\n }\n \n // Maybe add to `expand.rs`."}, {"sha": "552a4c899dd61c8a02ec7eb01d9f596c5cfc795c", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -386,8 +386,4 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n             |item| !matches!(item.kind, ast::ItemKind::MacCall(_) if !self.cx.ecfg.keep_macs),\n         );\n     }\n-\n-    fn visit_mac(&mut self, _mac: &mut ast::MacCall) {\n-        // Do nothing.\n-    }\n }"}, {"sha": "f406578f997e5db9843874896bb8bb8c2923defb", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -881,12 +881,6 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n             })\n         }\n     }\n-\n-    // in general the pretty printer processes unexpanded code, so\n-    // we override the default `visit_mac` method which panics.\n-    fn visit_mac(&mut self, mac: &mut ast::MacCall) {\n-        noop_visit_mac(mac, self)\n-    }\n }\n \n /// Returns a version string such as \"rustc 1.46.0 (04488afe3 2020-08-24)\""}, {"sha": "ba5b60bd535396adc12546748811e10c133d1d42", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -271,14 +271,8 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_mac(&mut self, mac: &'a ast::MacCall) {\n-        // FIXME(#54110): So, this setup isn't really right. I think\n-        // that (a) the librustc_ast visitor ought to be doing this as\n-        // part of `walk_mac`, and (b) we should be calling\n-        // `visit_path`, *but* that would require a `NodeId`, and I\n-        // want to get #53686 fixed quickly. -nmatsakis\n-        ast_visit::walk_path(self, &mac.path);\n-\n         run_early_pass!(self, check_mac, mac);\n+        ast_visit::walk_mac(self, mac);\n     }\n }\n "}, {"sha": "c06b012d8c01ce402f2be7ddb5ecdccb98f1d20a", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -570,10 +570,6 @@ impl<'a> Parser<'a> {\n     fn make_all_value_bindings_mutable(pat: &mut P<Pat>) -> bool {\n         struct AddMut(bool);\n         impl MutVisitor for AddMut {\n-            fn visit_mac(&mut self, mac: &mut MacCall) {\n-                noop_visit_mac(mac, self);\n-            }\n-\n             fn visit_pat(&mut self, pat: &mut P<Pat>) {\n                 if let PatKind::Ident(BindingMode::ByValue(m @ Mutability::Not), ..) = &mut pat.kind\n                 {"}, {"sha": "697b48718b21f9fb90f25fc06ef378cff182956c", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -338,6 +338,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n \n     fn visit_mac(&mut self, mac: &'v ast::MacCall) {\n         self.record(\"MacCall\", Id::None, mac);\n+        ast_visit::walk_mac(self, mac)\n     }\n \n     fn visit_path_segment(&mut self, path_span: Span, path_segment: &'v ast::PathSegment) {"}, {"sha": "6b56380edf8c0fbdccfe3e9dd9740d2e5d97a3fe", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3237b3886c8d1bd19b78eda6040e2c55e5332a82/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3237b3886c8d1bd19b78eda6040e2c55e5332a82/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=3237b3886c8d1bd19b78eda6040e2c55e5332a82", "patch": "@@ -149,9 +149,6 @@ impl<'a, 'tcx, 'b> Visitor<'tcx> for SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n             _ => walk_pat(self, pat),\n         }\n     }\n-    fn visit_mac(&mut self, _mac: &MacCall) {\n-        // do not check macs\n-    }\n }\n \n #[must_use]\n@@ -356,9 +353,6 @@ impl<'a, 'tcx> Visitor<'tcx> for SimilarNamesLocalVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, _: &Item) {\n         // do not recurse into inner items\n     }\n-    fn visit_mac(&mut self, _mac: &MacCall) {\n-        // do not check macs\n-    }\n }\n \n impl EarlyLintPass for NonExpressiveNames {"}]}