{"sha": "0832d1d02280e17cfa083b068d2def4b1844cd10", "node_id": "C_kwDOAAsO6NoAKDA4MzJkMWQwMjI4MGUxN2NmYTA4M2IwNjhkMmRlZjRiMTg0NGNkMTA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-02T17:37:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-02T17:37:24Z"}, "message": "more use of format! variable capture\n\nCo-authored-by: Joe ST <joe@fbstj.net>", "tree": {"sha": "8d805116f34c80b46bdd7e831582ca3433c036e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d805116f34c80b46bdd7e831582ca3433c036e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0832d1d02280e17cfa083b068d2def4b1844cd10", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiwIJUCRBK7hj4Ov3rIwAAZHQIAHEnkA1nIXtoND3b9jMuASjj\nm8Fyv4cE/QWd8qv/cGeE9Y9iuGlNX5l2UcKi1/Ys2hKCKNWuxT2BXLxJIG9ZqNb+\nPeapj41mqDf5lokd0+S+WxzvZ8MC4XguCKup9sRdTc9R8N8ayJv1X8OQh/k/PCRO\nto9bpbwtLx6BJWPXjyq3RWxt8NnN6K0LzwM9fSE5YKvpw10uYbNXv0Jg/sy/p1gc\ncYnaF9m6ejYbsb9PCfXBZF9wGLpw0jnTRyDBmsrtjDtmw8Lu0Cy7uuLuOIaMsjWx\n5q5LaaF+PidqpZWrq7SAN1VQTUdON6yy+2PyfZyyxBpKZLfiDkNmVDk7B7OozXE=\n=Ecfy\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d805116f34c80b46bdd7e831582ca3433c036e4\nparent d31cbb51505f4ca8c25b1b11abe3d10ad8171b06\nauthor Ralf Jung <post@ralfj.de> 1656783444 -0400\ncommitter GitHub <noreply@github.com> 1656783444 -0400\n\nmore use of format! variable capture\n\nCo-authored-by: Joe ST <joe@fbstj.net>"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0832d1d02280e17cfa083b068d2def4b1844cd10", "html_url": "https://github.com/rust-lang/rust/commit/0832d1d02280e17cfa083b068d2def4b1844cd10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0832d1d02280e17cfa083b068d2def4b1844cd10/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d31cbb51505f4ca8c25b1b11abe3d10ad8171b06", "url": "https://api.github.com/repos/rust-lang/rust/commits/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06", "html_url": "https://github.com/rust-lang/rust/commit/d31cbb51505f4ca8c25b1b11abe3d10ad8171b06"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "86d5bb37d55a59302d3bbbaff2c0b16885a56693", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0832d1d02280e17cfa083b068d2def4b1844cd10/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0832d1d02280e17cfa083b068d2def4b1844cd10/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=0832d1d02280e17cfa083b068d2def4b1844cd10", "patch": "@@ -306,9 +306,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n         if alloc_kind != kind {\n             throw_ub_format!(\n-                \"deallocating {alloc_id:?}, which is {} memory, using {} deallocation operation\",\n-                alloc_kind,\n-                kind\n+                \"deallocating {alloc_id:?}, which is {alloc_kind} memory, using {kind} deallocation operation\"\n             );\n         }\n         if let Some((size, align)) = old_size_and_align {"}, {"sha": "f30769248c0747fb3c2e6922f94d2c3dafe0f525", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0832d1d02280e17cfa083b068d2def4b1844cd10/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0832d1d02280e17cfa083b068d2def4b1844cd10/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=0832d1d02280e17cfa083b068d2def4b1844cd10", "patch": "@@ -357,7 +357,7 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 write!(f, \"{msg}null pointer is not a valid pointer\")\n             }\n             DanglingIntPointer(i, msg) => {\n-                write!(f, \"{msg}{:#x} is not a valid pointer\", i)\n+                write!(f, \"{msg}{i:#x} is not a valid pointer\")\n             }\n             AlignmentCheckFailed { required, has } => write!(\n                 f,"}, {"sha": "698024b23301ea054e9f71dabe38c86525bc8898", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0832d1d02280e17cfa083b068d2def4b1844cd10/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0832d1d02280e17cfa083b068d2def4b1844cd10/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=0832d1d02280e17cfa083b068d2def4b1844cd10", "patch": "@@ -466,7 +466,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             return alloc_id;\n         }\n         let id = alloc_map.reserve();\n-        debug!(\"creating alloc {:?} with id {:?}\", alloc, id);\n+        debug!(\"creating alloc {alloc:?} with id {id:?}\");\n         alloc_map.alloc_map.insert(id, alloc.clone());\n         alloc_map.dedup.insert(alloc, id);\n         id"}]}