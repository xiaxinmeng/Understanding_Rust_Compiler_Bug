{"sha": "b54188429409a6da5f931fa4be5df1f40b377015", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDE4ODQyOTQwOWE2ZGE1ZjkzMWZhNGJlNWRmMWY0MGIzNzcwMTU=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-10-02T10:38:10Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-10-02T10:38:10Z"}, "message": "remove the explicit return value of `print_limit`", "tree": {"sha": "44ca743b32575b55f129a96d8879ad85f3c9d2d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44ca743b32575b55f129a96d8879ad85f3c9d2d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b54188429409a6da5f931fa4be5df1f40b377015", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b54188429409a6da5f931fa4be5df1f40b377015", "html_url": "https://github.com/rust-lang/rust/commit/b54188429409a6da5f931fa4be5df1f40b377015", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b54188429409a6da5f931fa4be5df1f40b377015/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7820cb14421f751c05d6d2d5925236c3429cd93f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7820cb14421f751c05d6d2d5925236c3429cd93f", "html_url": "https://github.com/rust-lang/rust/commit/7820cb14421f751c05d6d2d5925236c3429cd93f"}], "stats": {"total": 41, "additions": 20, "deletions": 21}, "files": [{"sha": "3e9265c121530437f33ad818d2e59de3cf17cf5c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b54188429409a6da5f931fa4be5df1f40b377015/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b54188429409a6da5f931fa4be5df1f40b377015/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b54188429409a6da5f931fa4be5df1f40b377015", "patch": "@@ -1082,30 +1082,29 @@ fn build_manual_memcpy_suggestion<'tcx>(\n         }\n     }\n \n-    let print_limit =\n-        |end: &Expr<'_>, end_str: &str, base: &Expr<'_>, sugg: MinifyingSugg<'static>| -> MinifyingSugg<'static> {\n-            if_chain! {\n-                if let ExprKind::MethodCall(method, _, len_args, _) = end.kind;\n-                if method.ident.name == sym!(len);\n-                if len_args.len() == 1;\n-                if let Some(arg) = len_args.get(0);\n-                if var_def_id(cx, arg) == var_def_id(cx, base);\n-                then {\n-                    if sugg.as_str() == end_str {\n-                        sugg::EMPTY.into()\n-                    } else {\n-                        sugg\n-                    }\n+    let print_limit = |end: &Expr<'_>, end_str: &str, base: &Expr<'_>, sugg: MinifyingSugg<'static>| {\n+        if_chain! {\n+            if let ExprKind::MethodCall(method, _, len_args, _) = end.kind;\n+            if method.ident.name == sym!(len);\n+            if len_args.len() == 1;\n+            if let Some(arg) = len_args.get(0);\n+            if var_def_id(cx, arg) == var_def_id(cx, base);\n+            then {\n+                if sugg.as_str() == end_str {\n+                    sugg::EMPTY.into()\n                 } else {\n-                    match limits {\n-                        ast::RangeLimits::Closed => {\n-                            sugg + &sugg::ONE.into()\n-                        },\n-                        ast::RangeLimits::HalfOpen => sugg,\n-                    }\n+                    sugg\n+                }\n+            } else {\n+                match limits {\n+                    ast::RangeLimits::Closed => {\n+                        sugg + &sugg::ONE.into()\n+                    },\n+                    ast::RangeLimits::HalfOpen => sugg,\n                 }\n             }\n-        };\n+        }\n+    };\n \n     let start_str = Sugg::hir(cx, start, \"\").into();\n     let end_str: MinifyingSugg<'_> = Sugg::hir(cx, end, \"\").into();"}]}