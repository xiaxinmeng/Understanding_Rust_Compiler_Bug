{"sha": "b7dc9341b5a57e120470f8bb0e4831bffab63c89", "node_id": "C_kwDOAAsO6NoAKGI3ZGM5MzQxYjVhNTdlMTIwNDcwZjhiYjBlNDgzMWJmZmFiNjNjODk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-20T04:29:14Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-20T22:06:06Z"}, "message": "Wrap some long comment lines.", "tree": {"sha": "639f79720a77c852b762223dff49ce6568498cb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/639f79720a77c852b762223dff49ce6568498cb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7dc9341b5a57e120470f8bb0e4831bffab63c89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7dc9341b5a57e120470f8bb0e4831bffab63c89", "html_url": "https://github.com/rust-lang/rust/commit/b7dc9341b5a57e120470f8bb0e4831bffab63c89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7dc9341b5a57e120470f8bb0e4831bffab63c89/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432abd86f231c908f6df3cdd779e83f35084be90", "url": "https://api.github.com/repos/rust-lang/rust/commits/432abd86f231c908f6df3cdd779e83f35084be90", "html_url": "https://github.com/rust-lang/rust/commit/432abd86f231c908f6df3cdd779e83f35084be90"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "2bc958df4a74cce38a4e1ab8d8fe0e767bb2a04a", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7dc9341b5a57e120470f8bb0e4831bffab63c89/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7dc9341b5a57e120470f8bb0e4831bffab63c89/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=b7dc9341b5a57e120470f8bb0e4831bffab63c89", "patch": "@@ -261,10 +261,10 @@ impl<'a, 'tcx> Encodable<EncodeContext<'a, 'tcx>> for Span {\n         // This allows us to avoid loading the dependencies of proc-macro crates: all of\n         // the information we need to decode `Span`s is stored in the proc-macro crate.\n         let (tag, metadata_index) = if source_file.is_imported() && !s.is_proc_macro {\n-            // To simplify deserialization, we 'rebase' this span onto the crate it originally came from\n-            // (the crate that 'owns' the file it references. These rebased 'lo' and 'hi' values\n-            // are relative to the source map information for the 'foreign' crate whose CrateNum\n-            // we write into the metadata. This allows `imported_source_files` to binary\n+            // To simplify deserialization, we 'rebase' this span onto the crate it originally came\n+            // from (the crate that 'owns' the file it references. These rebased 'lo' and 'hi'\n+            // values are relative to the source map information for the 'foreign' crate whose\n+            // CrateNum we write into the metadata. This allows `imported_source_files` to binary\n             // search through the 'foreign' crate's source map information, using the\n             // deserialized 'lo' and 'hi' values directly.\n             //\n@@ -672,12 +672,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let exported_symbols_bytes = self.position() - i;\n \n         // Encode the hygiene data,\n-        // IMPORTANT: this *must* be the last thing that we encode (other than `SourceMap`). The process\n-        // of encoding other items (e.g. `optimized_mir`) may cause us to load\n-        // data from the incremental cache. If this causes us to deserialize a `Span`,\n-        // then we may load additional `SyntaxContext`s into the global `HygieneData`.\n-        // Therefore, we need to encode the hygiene data last to ensure that we encode\n-        // any `SyntaxContext`s that might be used.\n+        // IMPORTANT: this *must* be the last thing that we encode (other than `SourceMap`). The\n+        // process of encoding other items (e.g. `optimized_mir`) may cause us to load data from\n+        // the incremental cache. If this causes us to deserialize a `Span`, then we may load\n+        // additional `SyntaxContext`s into the global `HygieneData`. Therefore, we need to encode\n+        // the hygiene data last to ensure that we encode any `SyntaxContext`s that might be used.\n         i = self.position();\n         let (syntax_contexts, expn_data, expn_hashes) = self.encode_hygiene();\n         let hygiene_bytes = self.position() - i;"}]}