{"sha": "1c8d2bdda16854743069988fdb50a0185dfcb472", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjOGQyYmRkYTE2ODU0NzQzMDY5OTg4ZmRiNTBhMDE4NWRmY2I0NzI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-10T22:20:05Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-04-10T22:20:05Z"}, "message": "Workaround rust-lang/rust#49855 by forcing rustc_error in any mode, including NLL.\n\nNOTE: I was careful to make each change in a manner that preserves the\nexisting diagnostic output (usually by ensuring that no lines were\nadded or removed). This means that the resulting source files are not\nas nice to read as they were at the start. But we will have to review\nthese cases by hand anyway as follow-up work, so cleanup could\nreasonably happen then (or not at all).", "tree": {"sha": "1864594cd2b846ec2bc878ac058ff9b560944756", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1864594cd2b846ec2bc878ac058ff9b560944756"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c8d2bdda16854743069988fdb50a0185dfcb472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8d2bdda16854743069988fdb50a0185dfcb472", "html_url": "https://github.com/rust-lang/rust/commit/1c8d2bdda16854743069988fdb50a0185dfcb472", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c8d2bdda16854743069988fdb50a0185dfcb472/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae05961fdf5048cb5af27621390dd6c22aaee102", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae05961fdf5048cb5af27621390dd6c22aaee102", "html_url": "https://github.com/rust-lang/rust/commit/ae05961fdf5048cb5af27621390dd6c22aaee102"}], "stats": {"total": 108, "additions": 54, "deletions": 54}, "files": [{"sha": "cdfee2e8a704957be2e1a96ea93130390af2d409", "filename": "src/test/ui/borrowck/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,9 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n #![allow(dead_code)]\n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     // Original borrow ends at end of function\n     let mut x = 1;\n     let y = &mut x;"}, {"sha": "edc877718ad0af5ea25c6a688af464bf3572bb99", "filename": "src/test/ui/borrowck/mut-borrow-outside-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-outside-loop.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // ensure borrowck messages are correct outside special case\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut void = ();\n \n     let first = &mut void;"}, {"sha": "03c85fbfcd7739ccb23c5d66a89eadc1661beea6", "filename": "src/test/ui/codemap_tests/issue-11715.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fissue-11715.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -93,8 +93,8 @@\n \n \n \n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut x = \"foo\";\n     let y = &mut x;\n     let z = &mut x; //~ ERROR cannot borrow"}, {"sha": "e06b47a8d79dc46e10f0ab3208dd74d29151d693", "filename": "src/test/ui/dropck/dropck-eyepatch-extern-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-extern-crate.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -19,12 +19,12 @@\n //\n // See also dropck-eyepatch.rs for more information about the general\n // structure of the test.\n-\n+#![feature(rustc_attrs)]\n extern crate dropck_eyepatch_extern_crate as other;\n \n use other::{Dt,Dr,Pt,Pr,St,Sr};\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     use std::cell::Cell;\n     let c_long;\n     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)"}, {"sha": "832eeacbec54a2fc47bd7b44db5fde01b8346e92", "filename": "src/test/ui/dropck/dropck-eyepatch-reorder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch-reorder.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(dropck_eyepatch)]\n+#![feature(dropck_eyepatch, rustc_attrs)]\n \n // The point of this test is to test uses of `#[may_dangle]` attribute\n // where the formal declaration order (in the impl generics) does not\n@@ -41,7 +41,7 @@ unsafe impl<'b, #[may_dangle] 'a, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     use std::cell::Cell;\n     let c_long;\n     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)"}, {"sha": "cfa67837485e50ec2bcee32c45aa38c4dcda0b75", "filename": "src/test/ui/dropck/dropck-eyepatch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdropck%2Fdropck-eyepatch.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(dropck_eyepatch)]\n+#![feature(dropck_eyepatch, rustc_attrs)]\n \n // The point of this test is to illustrate that the `#[may_dangle]`\n // attribute specifically allows, in the context of a type\n@@ -64,7 +64,7 @@ unsafe impl<#[may_dangle] 'a, 'b, B: fmt::Debug> Drop for Pr<'a, 'b, B> {\n     fn drop(&mut self) { println!(\"drop {} {:?}\", self.0, self.2); }\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     use std::cell::Cell;\n     let c_long;\n     let (c, mut dt, mut dr, mut pt, mut pr, st, sr)"}, {"sha": "c39972369347a52733e2b01f0c5d25f686a8b2ae", "filename": "src/test/ui/error-codes/E0499.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0499.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut i = 0;\n     let mut x = &mut i;\n     let mut a = &mut i; //~ ERROR E0499"}, {"sha": "9c126bdcde84b40dda7e2b9676bbb9d27d15ecaf", "filename": "src/test/ui/error-codes/E0502.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0502.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,12 +7,12 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n fn bar(x: &mut i32) {}\n fn foo(a: &mut i32) {\n     let ref y = a;\n     bar(a); //~ ERROR E0502\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n }"}, {"sha": "1822a8925d3cd9a41ae55beb96e6e8bfbf01825e", "filename": "src/test/ui/error-codes/E0503.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0503.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut value = 3;\n     let _borrow = &mut value;\n     let _sum = value + 1; //~ ERROR E0503"}, {"sha": "dd2980936c0b2b62db040bd90e7964dbb0e2a1e1", "filename": "src/test/ui/error-codes/E0505.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0505.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0505.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0505.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,12 +7,12 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n struct Value {}\n \n fn eat(val: Value) {}\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let x = Value{};\n     {\n         let _ref_to_val: &Value = &x;"}, {"sha": "74178a69444040631df70d19e0f5910233eccc9f", "filename": "src/test/ui/error-codes/E0597.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ferror-codes%2FE0597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0597.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,12 +7,12 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n struct Foo<'a> {\n     x: Option<&'a u32>,\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut x = Foo { x: None };\n     let y = 0;\n     x.x = Some(&y);"}, {"sha": "752b1fa821f7f9cf59fcaa1610c3ef3d833028de", "filename": "src/test/ui/feature-gate-nll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ffeature-gate-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Ffeature-gate-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-nll.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut x = 33;\n \n     let p = &x;"}, {"sha": "f80aca9fb00e6c357b73554d5c7f69411bf9b152", "filename": "src/test/ui/generator/borrowing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fborrowing.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generators, generator_trait)]\n+#![feature(generators, generator_trait, rustc_attrs)]\n \n use std::ops::Generator;\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let _b = {\n         let a = 3;\n         unsafe { (|| yield &a).resume() }"}, {"sha": "8f4ba64fd57276fc4a121b4d0c203d1e724173a9", "filename": "src/test/ui/generator/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fdropck.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generators, generator_trait, box_leak)]\n+#![feature(generators, generator_trait, box_leak, rustc_attrs)]\n \n use std::cell::RefCell;\n use std::ops::Generator;\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let (cell, mut gen);\n     cell = Box::new(RefCell::new(0));\n     let ref_ = Box::leak(Box::new(Some(cell.borrow_mut())));"}, {"sha": "dd63b9eaa5b1c1627e1f36bd9b9b6bb5fffe1471", "filename": "src/test/ui/generator/pattern-borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fpattern-borrow.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(generators)]\n+#![feature(generators, rustc_attrs)]\n \n enum Test { A(i32), B, }\n \n-fn main() { }\n+fn main() { #![rustc_error] } // rust-lang/rust#49855\n \n fn fun(test: Test) {\n     move || {"}, {"sha": "b251f9a415253eab1a1f71908a854bb4dc83e122", "filename": "src/test/ui/issue-17263.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17263.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(box_syntax)]\n+#![feature(box_syntax, rustc_attrs)]\n \n struct Foo { a: isize, b: isize }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n     let (a, b) = (&mut x.a, &mut x.b);\n     //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time"}, {"sha": "8624527145c2ac8a4e2476c43ca97e290e8794a3", "filename": "src/test/ui/issue-25793.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fissue-25793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fissue-25793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-25793.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n macro_rules! width(\n     ($this:expr) => {\n         $this.width.unwrap()\n@@ -29,4 +29,4 @@ impl HasInfo {\n     }\n }\n \n-fn main() {}\n+fn main() { #![rustc_error] } // rust-lang/rust#49855"}, {"sha": "96f410578ce5a55d62856bd6d8708e5ebdd66bb4", "filename": "src/test/ui/issue-42106.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fissue-42106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fissue-42106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42106.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n fn do_something<T>(collection: &mut Vec<T>) {\n     let _a = &collection;\n     collection.swap(1, 2); //~ ERROR also borrowed as immutable\n }\n \n-fn main() {}\n+fn main() { #![rustc_error] } // rust-lang/rust#49855"}, {"sha": "a7a7d5c503518b0cbad4eca76e6d137c21e31190", "filename": "src/test/ui/lifetimes/borrowck-let-suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fborrowck-let-suggestion.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,11 +7,11 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n fn f() {\n     let x = vec![1].iter();\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     f();\n }"}, {"sha": "60e6c6e298938a4faa5db68a29702f206491c2a5", "filename": "src/test/ui/span/borrowck-let-suggestion-suffixes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-let-suggestion-suffixes.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n fn id<T>(x: T) -> T { x }\n \n fn f() {\n@@ -58,6 +58,6 @@ fn f() {\n //~| NOTE temporary value needs to live until here\n //~| NOTE temporary value needs to live until here\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     f();\n }"}, {"sha": "ca04101cf568a5db9909f5161b4991d1349497b6", "filename": "src/test/ui/span/issue-36537.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-36537.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,8 +7,8 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let p;\n     let a = 42;\n     p = &a;"}, {"sha": "9774303197c59b24af8429b9e88224f2a7eb8136", "filename": "src/test/ui/span/mut-ptr-cant-outlive-ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-ptr-cant-outlive-ref.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n use std::cell::RefCell;\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let m = RefCell::new(0);\n     let p;\n     {"}, {"sha": "a1ed9bc6aa84bb43f10e7c2f21775a9faffb7802", "filename": "src/test/ui/span/range-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Frange-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Frange-2.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n // Test range syntax - borrow errors.\n-\n-pub fn main() {\n+#![feature(rustc_attrs)]\n+pub fn main() { #![rustc_error] // rust-lang/rust#49855\n     let r = {\n         let a = 42;\n         let b = 42;"}, {"sha": "c814941c81124b5bab251f2fbd0d9729e54252be", "filename": "src/test/ui/span/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fregionck-unboxed-closure-lifetimes.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n use std::ops::FnMut;\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut f;\n     {\n         let c = 1;"}, {"sha": "45dff62672befced39f2327641f9a23be4a1935d", "filename": "src/test/ui/span/slice-borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fslice-borrow.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -7,10 +7,10 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-\n+#![feature(rustc_attrs)]\n // Test slicing expressions doesn't defeat the borrow checker.\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let y;\n     {\n         let x: &[isize] = &vec![1, 2, 3, 4, 5];"}, {"sha": "a3532d919bc09e4d4d39ad052a9dd4cdef96bd0e", "filename": "src/test/ui/span/vec_refs_data_with_early_death.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fvec_refs_data_with_early_death.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -17,8 +17,8 @@\n //  element it owns; thus, for data like this, it seems like we could\n //  loosen the restrictions here if we wanted. But it also is not\n //  clear whether such loosening is terribly important.)\n-\n-fn main() {\n+#![feature(rustc_attrs)]\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let mut v = Vec::new();\n \n     let x: i8 = 3;"}, {"sha": "317cd395d0a736f7a08654b6216421e5deecd7ac", "filename": "src/test/ui/span/wf-method-late-bound-regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8d2bdda16854743069988fdb50a0185dfcb472/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fwf-method-late-bound-regions.rs?ref=1c8d2bdda16854743069988fdb50a0185dfcb472", "patch": "@@ -11,7 +11,7 @@\n // A method's receiver must be well-formed, even if it has late-bound regions.\n // Because of this, a method's substs being well-formed does not imply that\n // the method's implied bounds are met.\n-\n+#![feature(rustc_attrs)]\n struct Foo<'b>(Option<&'b ()>);\n \n trait Bar<'b> {\n@@ -22,7 +22,7 @@ impl<'b> Bar<'b> for Foo<'b> {\n     fn xmute<'a>(&'a self, u: &'b u32) -> &'a u32 { u }\n }\n \n-fn main() {\n+fn main() { #![rustc_error] // rust-lang/rust#49855\n     let f = Foo(None);\n     let f2 = f;\n     let dangling = {"}]}