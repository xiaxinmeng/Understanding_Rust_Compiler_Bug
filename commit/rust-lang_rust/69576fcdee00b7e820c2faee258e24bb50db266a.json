{"sha": "69576fcdee00b7e820c2faee258e24bb50db266a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NTc2ZmNkZWUwMGI3ZTgyMGMyZmFlZTI1OGUyNGJiNTBkYjI2NmE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-11T06:48:15Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-13T07:09:03Z"}, "message": "make ENFORCE_VALIDITY a function\n\nmiri needs this extra flexibility", "tree": {"sha": "bbe1dd1085ec36f30cf8beef81d984e4538546ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbe1dd1085ec36f30cf8beef81d984e4538546ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69576fcdee00b7e820c2faee258e24bb50db266a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69576fcdee00b7e820c2faee258e24bb50db266a", "html_url": "https://github.com/rust-lang/rust/commit/69576fcdee00b7e820c2faee258e24bb50db266a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69576fcdee00b7e820c2faee258e24bb50db266a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3272c9845cb6fcd8c15bcd0cb4c229de42f583c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/3272c9845cb6fcd8c15bcd0cb4c229de42f583c7", "html_url": "https://github.com/rust-lang/rust/commit/3272c9845cb6fcd8c15bcd0cb4c229de42f583c7"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "2cfd058831f054da31b36d3ac8b66ee24df658cc", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69576fcdee00b7e820c2faee258e24bb50db266a/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69576fcdee00b7e820c2faee258e24bb50db266a/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=69576fcdee00b7e820c2faee258e24bb50db266a", "patch": "@@ -343,7 +343,11 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     type MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation<()>)>;\n \n     const STATIC_KIND: Option<!> = None; // no copying of statics allowed\n-    const ENFORCE_VALIDITY: bool = false; // for now, we don't\n+\n+    #[inline(always)]\n+    fn enforce_validity(_ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n+        false // for now, we don't enforce validity\n+    }\n \n     fn find_fn(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,"}, {"sha": "85a8376134aa472cd80115ca9d5fa5b0766e9af5", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69576fcdee00b7e820c2faee258e24bb50db266a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69576fcdee00b7e820c2faee258e24bb50db266a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=69576fcdee00b7e820c2faee258e24bb50db266a", "patch": "@@ -524,7 +524,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n         // Validate the return value.\n         if let Some(return_place) = frame.return_place {\n-            if M::ENFORCE_VALIDITY {\n+            if M::enforce_validity(self) {\n                 // Data got changed, better make sure it matches the type!\n                 // It is still possible that the return place held invalid data while\n                 // the function is running, but that's okay because nobody could have"}, {"sha": "560698f3f57a22249661ac13f568ec6a4a5b0100", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69576fcdee00b7e820c2faee258e24bb50db266a/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69576fcdee00b7e820c2faee258e24bb50db266a/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=69576fcdee00b7e820c2faee258e24bb50db266a", "patch": "@@ -86,7 +86,7 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n     const STATIC_KIND: Option<Self::MemoryKinds>;\n \n     /// Whether to enforce the validity invariant\n-    const ENFORCE_VALIDITY: bool;\n+    fn enforce_validity(ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool;\n \n     /// Called before a basic block terminator is executed.\n     /// You can use this to detect endlessly running programs."}, {"sha": "e4055947b6421ffaee8b4b3438b2003da87ce19b", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69576fcdee00b7e820c2faee258e24bb50db266a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69576fcdee00b7e820c2faee258e24bb50db266a/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=69576fcdee00b7e820c2faee258e24bb50db266a", "patch": "@@ -607,7 +607,7 @@ where\n     ) -> EvalResult<'tcx> {\n         self.write_value_no_validate(src_val, dest)?;\n \n-        if M::ENFORCE_VALIDITY {\n+        if M::enforce_validity(self) {\n             // Data got changed, better make sure it matches the type!\n             self.validate_operand(self.place_to_op(dest)?, &mut vec![], None, /*const_mode*/false)?;\n         }\n@@ -729,7 +729,7 @@ where\n     ) -> EvalResult<'tcx> {\n         self.copy_op_no_validate(src, dest)?;\n \n-        if M::ENFORCE_VALIDITY {\n+        if M::enforce_validity(self) {\n             // Data got changed, better make sure it matches the type!\n             self.validate_operand(self.place_to_op(dest)?, &mut vec![], None, /*const_mode*/false)?;\n         }\n@@ -807,7 +807,7 @@ where\n             PlaceTy::from(MPlaceTy { mplace: *dest, layout: src.layout }),\n         )?;\n \n-        if M::ENFORCE_VALIDITY {\n+        if M::enforce_validity(self) {\n             // Data got changed, better make sure it matches the type!\n             self.validate_operand(dest.into(), &mut vec![], None, /*const_mode*/false)?;\n         }"}]}