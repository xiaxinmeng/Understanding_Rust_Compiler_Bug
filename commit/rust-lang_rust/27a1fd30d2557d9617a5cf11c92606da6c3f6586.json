{"sha": "27a1fd30d2557d9617a5cf11c92606da6c3f6586", "node_id": "C_kwDOAAsO6NoAKDI3YTFmZDMwZDI1NTdkOTYxN2E1Y2YxMWM5MjYwNmRhNmMzZjY1ODY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-25T15:02:13Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-09-25T15:02:13Z"}, "message": "Merge branch 'rustup'", "tree": {"sha": "f11f7e04fedd36aeef4268d724ea900e9443776d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f11f7e04fedd36aeef4268d724ea900e9443776d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27a1fd30d2557d9617a5cf11c92606da6c3f6586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27a1fd30d2557d9617a5cf11c92606da6c3f6586", "html_url": "https://github.com/rust-lang/rust/commit/27a1fd30d2557d9617a5cf11c92606da6c3f6586", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27a1fd30d2557d9617a5cf11c92606da6c3f6586/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d82b696594c39d5f463e4560b68d7a2d4e33b2f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d82b696594c39d5f463e4560b68d7a2d4e33b2f0", "html_url": "https://github.com/rust-lang/rust/commit/d82b696594c39d5f463e4560b68d7a2d4e33b2f0"}, {"sha": "887ca1fd2a5c027e0369435c5087a4ad269658d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/887ca1fd2a5c027e0369435c5087a4ad269658d2", "html_url": "https://github.com/rust-lang/rust/commit/887ca1fd2a5c027e0369435c5087a4ad269658d2"}], "stats": {"total": 216, "additions": 111, "deletions": 105}, "files": [{"sha": "a8077feaaabacfcad6ec91662957d4a3865383af", "filename": "build_sysroot/Cargo.lock", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27a1fd30d2557d9617a5cf11c92606da6c3f6586/build_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27a1fd30d2557d9617a5cf11c92606da6c3f6586/build_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2FCargo.lock?ref=27a1fd30d2557d9617a5cf11c92606da6c3f6586", "patch": "@@ -54,11 +54,21 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.79\"\n+version = \"0.1.80\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4f873ce2bd3550b0b565f878b3d04ea8253f4259dc3d20223af2e1ba86f5ecca\"\n+checksum = \"c3feb824e4dde07fb32acc53c8cc1f9e537bb4d7e0a331198000840979d410d3\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -182,7 +192,7 @@ name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc\",\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n  \"compiler_builtins\",\n  \"core\",\n  \"libc\",\n@@ -193,7 +203,7 @@ name = \"panic_unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"alloc\",\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n  \"compiler_builtins\",\n  \"core\",\n  \"libc\",\n@@ -245,7 +255,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"addr2line\",\n  \"alloc\",\n- \"cfg-if\",\n+ \"cfg-if 1.0.0\",\n  \"compiler_builtins\",\n  \"core\",\n  \"dlmalloc\",\n@@ -267,7 +277,7 @@ dependencies = [\n name = \"std_detect\"\n version = \"0.1.5\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 1.0.0\",\n  \"compiler_builtins\",\n  \"libc\",\n  \"rustc-std-workspace-alloc\",\n@@ -289,7 +299,7 @@ dependencies = [\n name = \"test\"\n version = \"0.0.0\"\n dependencies = [\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n  \"core\",\n  \"getopts\",\n  \"libc\",\n@@ -315,7 +325,7 @@ name = \"unwind\"\n version = \"0.0.0\"\n dependencies = [\n  \"cc\",\n- \"cfg-if\",\n+ \"cfg-if 0.1.10\",\n  \"compiler_builtins\",\n  \"core\",\n  \"libc\","}, {"sha": "856aecc49fd1c05f476c91232c9bb0b429c4c907", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/27a1fd30d2557d9617a5cf11c92606da6c3f6586/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a1fd30d2557d9617a5cf11c92606da6c3f6586/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=27a1fd30d2557d9617a5cf11c92606da6c3f6586", "patch": "@@ -188,6 +188,7 @@ fn build_clif_sysroot_for_triple(\n     let mut build_cmd = cargo_command(\"cargo\", \"build\", Some(triple), Path::new(\"build_sysroot\"));\n     let mut rustflags = \"-Zforce-unstable-if-unmarked -Cpanic=abort\".to_string();\n     rustflags.push_str(&format!(\" -Zcodegen-backend={}\", cg_clif_dylib_path.to_str().unwrap()));\n+    rustflags.push_str(&format!(\" --sysroot={}\", target_dir.to_str().unwrap()));\n     if channel == \"release\" {\n         build_cmd.arg(\"--release\");\n         rustflags.push_str(\" -Zmir-opt-level=3\");"}, {"sha": "06e9106e685a4e27f8de2eb8d7f24a512ad40836", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27a1fd30d2557d9617a5cf11c92606da6c3f6586/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/27a1fd30d2557d9617a5cf11c92606da6c3f6586/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=27a1fd30d2557d9617a5cf11c92606da6c3f6586", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-09-15\"\n+channel = \"nightly-2022-09-25\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "25103a2fd503622b916c164bd06518d09258356f", "filename": "scripts/setup_rust_fork.sh", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/27a1fd30d2557d9617a5cf11c92606da6c3f6586/scripts%2Fsetup_rust_fork.sh", "raw_url": "https://github.com/rust-lang/rust/raw/27a1fd30d2557d9617a5cf11c92606da6c3f6586/scripts%2Fsetup_rust_fork.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fsetup_rust_fork.sh?ref=27a1fd30d2557d9617a5cf11c92606da6c3f6586", "patch": "@@ -27,6 +27,21 @@ index d95b5b7f17f..00b6f0e3635 100644\n  [dev-dependencies]\n  rand = \"0.7\"\n  rand_xorshift = \"0.2\"\n+diff --git a/src/bootstrap/config.rs b/src/bootstrap/config.rs\n+index a6333976f2a..c9a872e876c 100644\n+--- a/src/bootstrap/config.rs\n++++ b/src/bootstrap/config.rs\n+@@ -917,6 +917,10 @@ pub fn parse(args: &[String]) -> Config {\n+             config.initial_cargo = config.out.join(config.build.triple).join(\"stage0/bin/cargo\");\n+         }\n+\n++        // Workaround for rustbuild bug\n++        config.initial_rustc = PathBuf::from(\"$(pwd)/../build/rustc-clif\");\n++        config.initial_cargo = PathBuf::from(\"$(rustup which cargo)\");\n++\n+         // NOTE: it's important this comes *after* we set \\`initial_rustc\\` just above.\n+         if config.dry_run {\n+             let dir = config.out.join(\"tmp-dry-run\");\n diff --git a/src/tools/compiletest/src/runtest.rs b/src/tools/compiletest/src/runtest.rs\n index 8431aa7b818..a3ff7e68ce5 100644\n --- a/src/tools/compiletest/src/runtest.rs"}, {"sha": "293dff133864427e855d02e5e01faf0dd8421fa2", "filename": "scripts/test_rustc_tests.sh", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27a1fd30d2557d9617a5cf11c92606da6c3f6586/scripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/27a1fd30d2557d9617a5cf11c92606da6c3f6586/scripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftest_rustc_tests.sh?ref=27a1fd30d2557d9617a5cf11c92606da6c3f6586", "patch": "@@ -30,9 +30,6 @@ rm src/test/incremental/issue-80691-bad-eval-cache.rs # -Cpanic=abort causes abo\n \n # requires compiling with -Cpanic=unwind\n rm src/test/ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs # \"Cannot run dynamic test fn out-of-process\"\n-rm src/test/ui/async-await/async-fn-size-moved-locals.rs # -Cpanic=abort shrinks some generator by one byte\n-rm src/test/ui/async-await/async-fn-size-uninit-locals.rs # same\n-rm src/test/ui/generator/size-moved-locals.rs # same\n rm -r src/test/ui/macros/rfc-2011-nicer-assert-messages/\n \n # vendor intrinsics\n@@ -67,6 +64,7 @@ rm src/test/ui/target-feature/missing-plusminus.rs # error not implemented\n rm src/test/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n rm -r src/test/run-make/emit-named-files # requires full --emit support\n rm src/test/ui/abi/stack-probes.rs # stack probes not yet implemented\n+rm src/test/ui/simd/intrinsic/ptr-cast.rs # simd_expose_addr intrinsic unimplemented\n \n # optimization tests\n # =================="}, {"sha": "1aeb9ff25703da1f4cdeadab0b2b85ef67834dee", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27a1fd30d2557d9617a5cf11c92606da6c3f6586/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a1fd30d2557d9617a5cf11c92606da6c3f6586/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=27a1fd30d2557d9617a5cf11c92606da6c3f6586", "patch": "@@ -850,6 +850,7 @@ pub(crate) fn codegen_place<'tcx>(\n             PlaceElem::Deref => {\n                 cplace = cplace.place_deref(fx);\n             }\n+            PlaceElem::OpaqueCast(ty) => cplace = cplace.place_opaque_cast(fx, ty),\n             PlaceElem::Field(field, _ty) => {\n                 cplace = cplace.place_field(fx, field);\n             }\n@@ -916,7 +917,7 @@ pub(crate) fn codegen_operand<'tcx>(\n             let cplace = codegen_place(fx, *place);\n             cplace.to_cvalue(fx)\n         }\n-        Operand::Constant(const_) => crate::constant::codegen_constant(fx, const_),\n+        Operand::Constant(const_) => crate::constant::codegen_constant_operand(fx, const_),\n     }\n }\n "}, {"sha": "da4a96c4acc84ea8a0c35d7c564dd98cfb04bb2e", "filename": "src/constant.rs", "status": "modified", "additions": 53, "deletions": 82, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/27a1fd30d2557d9617a5cf11c92606da6c3f6586/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a1fd30d2557d9617a5cf11c92606da6c3f6586/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=27a1fd30d2557d9617a5cf11c92606da6c3f6586", "patch": "@@ -5,10 +5,8 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n-use rustc_middle::ty::ConstKind;\n use rustc_span::DUMMY_SP;\n \n-use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n \n use crate::prelude::*;\n@@ -41,36 +39,22 @@ impl ConstantCx {\n pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n     let mut all_constants_ok = true;\n     for constant in &fx.mir.required_consts {\n-        let const_ = match fx.monomorphize(constant.literal) {\n-            ConstantKind::Ty(ct) => ct,\n+        let unevaluated = match fx.monomorphize(constant.literal) {\n+            ConstantKind::Ty(_) => unreachable!(),\n+            ConstantKind::Unevaluated(uv, _) => uv,\n             ConstantKind::Val(..) => continue,\n         };\n-        match const_.kind() {\n-            ConstKind::Value(_) => {}\n-            ConstKind::Unevaluated(unevaluated) => {\n-                if let Err(err) =\n-                    fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None)\n-                {\n-                    all_constants_ok = false;\n-                    match err {\n-                        ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n-                            fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n-                        }\n-                        ErrorHandled::TooGeneric => {\n-                            span_bug!(\n-                                constant.span,\n-                                \"codegen encountered polymorphic constant: {:?}\",\n-                                err\n-                            );\n-                        }\n-                    }\n+\n+        if let Err(err) = fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n+            all_constants_ok = false;\n+            match err {\n+                ErrorHandled::Reported(_) | ErrorHandled::Linted => {\n+                    fx.tcx.sess.span_err(constant.span, \"erroneous constant encountered\");\n+                }\n+                ErrorHandled::TooGeneric => {\n+                    span_bug!(constant.span, \"codegen encountered polymorphic constant: {:?}\", err);\n                 }\n             }\n-            ConstKind::Param(_)\n-            | ConstKind::Infer(_)\n-            | ConstKind::Bound(_, _)\n-            | ConstKind::Placeholder(_)\n-            | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n         }\n     }\n     all_constants_ok\n@@ -96,62 +80,47 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n     CValue::by_val(tls_ptr, layout)\n }\n \n-fn codegen_static_ref<'tcx>(\n-    fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    def_id: DefId,\n-    layout: TyAndLayout<'tcx>,\n-) -> CPlace<'tcx> {\n-    let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n-    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-    if fx.clif_comments.enabled() {\n-        fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n-    }\n-    let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n-    assert!(!layout.is_unsized(), \"unsized statics aren't supported\");\n-    assert!(\n-        matches!(\n-            fx.bcx.func.global_values[local_data_id],\n-            GlobalValueData::Symbol { tls: false, .. }\n-        ),\n-        \"tls static referenced without Rvalue::ThreadLocalRef\"\n-    );\n-    CPlace::for_ptr(crate::pointer::Pointer::new(global_ptr), layout)\n-}\n-\n-pub(crate) fn codegen_constant<'tcx>(\n+pub(crate) fn eval_mir_constant<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     constant: &Constant<'tcx>,\n-) -> CValue<'tcx> {\n-    let const_ = match fx.monomorphize(constant.literal) {\n-        ConstantKind::Ty(ct) => ct,\n-        ConstantKind::Val(val, ty) => return codegen_const_value(fx, val, ty),\n-    };\n-    let const_val = match const_.kind() {\n-        ConstKind::Value(valtree) => fx.tcx.valtree_to_const_val((const_.ty(), valtree)),\n-        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted })\n+) -> (ConstValue<'tcx>, Ty<'tcx>) {\n+    let constant_kind = fx.monomorphize(constant.literal);\n+    let uv = match constant_kind {\n+        ConstantKind::Ty(const_) => match const_.kind() {\n+            ty::ConstKind::Unevaluated(uv) => uv.expand(),\n+            ty::ConstKind::Value(val) => {\n+                return (fx.tcx.valtree_to_const_val((const_.ty(), val)), const_.ty());\n+            }\n+            err => span_bug!(\n+                constant.span,\n+                \"encountered bad ConstKind after monomorphizing: {:?}\",\n+                err\n+            ),\n+        },\n+        ConstantKind::Unevaluated(mir::UnevaluatedConst { def, .. }, _)\n             if fx.tcx.is_static(def.did) =>\n         {\n-            assert!(substs.is_empty());\n-            assert!(promoted.is_none());\n-\n-            return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty())).to_cvalue(fx);\n-        }\n-        ConstKind::Unevaluated(unevaluated) => {\n-            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n-                Ok(const_val) => const_val,\n-                Err(_) => {\n-                    span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n-                }\n-            }\n+            span_bug!(constant.span, \"MIR constant refers to static\");\n         }\n-        ConstKind::Param(_)\n-        | ConstKind::Infer(_)\n-        | ConstKind::Bound(_, _)\n-        | ConstKind::Placeholder(_)\n-        | ConstKind::Error(_) => unreachable!(\"{:?}\", const_),\n+        ConstantKind::Unevaluated(uv, _) => uv,\n+        ConstantKind::Val(val, _) => return (val, constant_kind.ty()),\n     };\n \n-    codegen_const_value(fx, const_val, const_.ty())\n+    (\n+        fx.tcx.const_eval_resolve(ty::ParamEnv::reveal_all(), uv, None).unwrap_or_else(|_err| {\n+            span_bug!(constant.span, \"erroneous constant not captured by required_consts\");\n+        }),\n+        constant_kind.ty(),\n+    )\n+}\n+\n+pub(crate) fn codegen_constant_operand<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    constant: &Constant<'tcx>,\n+) -> CValue<'tcx> {\n+    let (const_val, ty) = eval_mir_constant(fx, constant);\n+\n+    codegen_const_value(fx, const_val, ty)\n }\n \n pub(crate) fn codegen_const_value<'tcx>(\n@@ -490,12 +459,14 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n     operand: &Operand<'tcx>,\n ) -> Option<ConstValue<'tcx>> {\n     match operand {\n-        Operand::Constant(const_) => match const_.literal {\n-            ConstantKind::Ty(const_) => fx\n-                .monomorphize(const_)\n-                .eval_for_mir(fx.tcx, ParamEnv::reveal_all())\n-                .try_to_value(fx.tcx),\n+        Operand::Constant(const_) => match fx.monomorphize(const_.literal) {\n+            ConstantKind::Ty(const_) => Some(\n+                const_.eval_for_mir(fx.tcx, ParamEnv::reveal_all()).try_to_value(fx.tcx).unwrap(),\n+            ),\n             ConstantKind::Val(val, _) => Some(val),\n+            ConstantKind::Unevaluated(uv, _) => {\n+                Some(fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), uv, None).unwrap())\n+            }\n         },\n         // FIXME(rust-lang/rust#85105): Casts like `IMM8 as u32` result in the const being stored\n         // inside a temporary before being passed to the intrinsic requiring the const argument."}, {"sha": "3fcc84d39295f42328b1f1aa515ea7f0932ea543", "filename": "src/inline_asm.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27a1fd30d2557d9617a5cf11c92606da6c3f6586/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a1fd30d2557d9617a5cf11c92606da6c3f6586/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=27a1fd30d2557d9617a5cf11c92606da6c3f6586", "patch": "@@ -27,7 +27,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n         }\n \n         // Used by stdarch\n-        if template[0] == InlineAsmTemplatePiece::String(\"movq %rbx, \".to_string())\n+        if template[0] == InlineAsmTemplatePiece::String(\"mov \".to_string())\n             && matches!(\n                 template[1],\n                 InlineAsmTemplatePiece::Placeholder {\n@@ -36,24 +36,26 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n                     span: _\n                 }\n             )\n-            && template[2] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n-            && template[3] == InlineAsmTemplatePiece::String(\"cpuid\".to_string())\n-            && template[4] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n-            && template[5] == InlineAsmTemplatePiece::String(\"xchgq %rbx, \".to_string())\n+            && template[2] == InlineAsmTemplatePiece::String(\", rbx\".to_string())\n+            && template[3] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n+            && template[4] == InlineAsmTemplatePiece::String(\"cpuid\".to_string())\n+            && template[5] == InlineAsmTemplatePiece::String(\"\\n\".to_string())\n+            && template[6] == InlineAsmTemplatePiece::String(\"xchg \".to_string())\n             && matches!(\n-                template[6],\n+                template[7],\n                 InlineAsmTemplatePiece::Placeholder {\n                     operand_idx: 0,\n                     modifier: Some('r'),\n                     span: _\n                 }\n             )\n+            && template[8] == InlineAsmTemplatePiece::String(\", rbx\".to_string())\n         {\n             assert_eq!(operands.len(), 4);\n             let (leaf, eax_place) = match operands[1] {\n                 InlineAsmOperand::InOut {\n                     reg: InlineAsmRegOrRegClass::Reg(InlineAsmReg::X86(X86InlineAsmReg::ax)),\n-                    late: true,\n+                    late: _,\n                     ref in_value,\n                     out_place: Some(out_place),\n                 } => (\n@@ -68,15 +70,15 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n                         InlineAsmRegOrRegClass::RegClass(InlineAsmRegClass::X86(\n                             X86InlineAsmRegClass::reg,\n                         )),\n-                    late: true,\n+                    late: _,\n                     place: Some(place),\n                 } => crate::base::codegen_place(fx, place),\n                 _ => unreachable!(),\n             };\n             let (sub_leaf, ecx_place) = match operands[2] {\n                 InlineAsmOperand::InOut {\n                     reg: InlineAsmRegOrRegClass::Reg(InlineAsmReg::X86(X86InlineAsmReg::cx)),\n-                    late: true,\n+                    late: _,\n                     ref in_value,\n                     out_place: Some(out_place),\n                 } => (\n@@ -88,7 +90,7 @@ pub(crate) fn codegen_inline_asm<'tcx>(\n             let edx_place = match operands[3] {\n                 InlineAsmOperand::Out {\n                     reg: InlineAsmRegOrRegClass::Reg(InlineAsmReg::X86(X86InlineAsmReg::dx)),\n-                    late: true,\n+                    late: _,\n                     place: Some(place),\n                 } => crate::base::codegen_place(fx, place),\n                 _ => unreachable!(),"}, {"sha": "c9eb005e045d30621c66a4d740ab4b12d8add8ea", "filename": "src/value_and_place.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27a1fd30d2557d9617a5cf11c92606da6c3f6586/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27a1fd30d2557d9617a5cf11c92606da6c3f6586/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=27a1fd30d2557d9617a5cf11c92606da6c3f6586", "patch": "@@ -625,6 +625,14 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n+    pub(crate) fn place_opaque_cast(\n+        self,\n+        fx: &mut FunctionCx<'_, '_, 'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> CPlace<'tcx> {\n+        CPlace { inner: self.inner, layout: fx.layout_of(ty) }\n+    }\n+\n     pub(crate) fn place_field(\n         self,\n         fx: &mut FunctionCx<'_, '_, 'tcx>,"}]}