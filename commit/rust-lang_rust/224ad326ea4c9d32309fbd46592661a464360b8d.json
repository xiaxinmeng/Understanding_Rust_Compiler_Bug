{"sha": "224ad326ea4c9d32309fbd46592661a464360b8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNGFkMzI2ZWE0YzlkMzIzMDlmYmQ0NjU5MjY2MWE0NjQzNjBiOGQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-27T22:33:23Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T17:22:27Z"}, "message": "Account for enclosing item when suggesting new lifetime name", "tree": {"sha": "a802b2c0475c84be062d08b68e662c604ffc5ca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a802b2c0475c84be062d08b68e662c604ffc5ca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/224ad326ea4c9d32309fbd46592661a464360b8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/224ad326ea4c9d32309fbd46592661a464360b8d", "html_url": "https://github.com/rust-lang/rust/commit/224ad326ea4c9d32309fbd46592661a464360b8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/224ad326ea4c9d32309fbd46592661a464360b8d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f7ee34379240e7c29c7dda867905e2d0044bde1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f7ee34379240e7c29c7dda867905e2d0044bde1", "html_url": "https://github.com/rust-lang/rust/commit/8f7ee34379240e7c29c7dda867905e2d0044bde1"}], "stats": {"total": 119, "additions": 96, "deletions": 23}, "files": [{"sha": "c2dd3812fcc2d18840ba9b6d6c55f694c48e5cf9", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=224ad326ea4c9d32309fbd46592661a464360b8d", "patch": "@@ -60,7 +60,7 @@ use rustc_errors::{pluralize, struct_span_err};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::Node;\n+use rustc_hir::{Item, ItemKind, Node};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{\n     self,\n@@ -1685,12 +1685,26 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let hir = &self.tcx.hir();\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n-        let generics = self\n-            .in_progress_tables\n-            .and_then(|table| table.borrow().hir_owner)\n-            .map(|table_owner| self.tcx.generics_of(table_owner.to_def_id()));\n+        let generics =\n+            self.in_progress_tables.and_then(|table| table.borrow().hir_owner).map(|table_owner| {\n+                let hir_id = hir.as_local_hir_id(table_owner);\n+                let parent_id = hir.get_parent_item(hir_id);\n+                (\n+                    // Parent item could be a `mod`, so we check the HIR before calling:\n+                    if let Some(Node::Item(Item {\n+                        kind: ItemKind::Trait(..) | ItemKind::Impl { .. },\n+                        ..\n+                    })) = hir.find(parent_id)\n+                    {\n+                        Some(self.tcx.generics_of(hir.local_def_id(parent_id).to_def_id()))\n+                    } else {\n+                        None\n+                    },\n+                    self.tcx.generics_of(table_owner.to_def_id()),\n+                )\n+            });\n         let type_param_span = match (generics, bound_kind) {\n-            (Some(ref generics), GenericKind::Param(ref param)) => {\n+            (Some((_, ref generics)), GenericKind::Param(ref param)) => {\n                 // Account for the case where `param` corresponds to `Self`,\n                 // which doesn't have the expected type argument.\n                 if !(generics.has_self && param.index == 0) {\n@@ -1727,21 +1741,29 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n         let new_lt = generics\n             .as_ref()\n-            .and_then(|g| {\n+            .and_then(|(parent_g, g)| {\n                 let possible = [\"'a\", \"'b\", \"'c\", \"'d\", \"'e\", \"'f\", \"'g\", \"'h\", \"'i\", \"'j\", \"'k\"];\n-                let lts_names = g\n+                let mut lts_names = g\n                     .params\n                     .iter()\n                     .filter(|p| matches!(p.kind, ty::GenericParamDefKind::Lifetime))\n                     .map(|p| p.name.as_str())\n                     .collect::<Vec<_>>();\n+                if let Some(g) = parent_g {\n+                    lts_names.extend(\n+                        g.params\n+                            .iter()\n+                            .filter(|p| matches!(p.kind, ty::GenericParamDefKind::Lifetime))\n+                            .map(|p| p.name.as_str()),\n+                    );\n+                }\n                 let lts = lts_names.iter().map(|s| -> &str { &*s }).collect::<Vec<_>>();\n                 possible.iter().filter(|&candidate| !lts.contains(&*candidate)).next().map(|s| *s)\n             })\n             .unwrap_or(\"'lt\");\n         let add_lt_sugg = generics\n             .as_ref()\n-            .and_then(|g| g.params.first())\n+            .and_then(|(_, g)| g.params.first())\n             .and_then(|param| param.def_id.as_local())\n             .map(|def_id| {\n                 (hir.span(hir.as_local_hir_id(def_id)).shrink_to_lo(), format!(\"{}, \", new_lt))"}, {"sha": "7ab18e54f7ea2342210629fa6af0286ccbf5f140", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/different_lifetimes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fdifferent_lifetimes.rs?ref=224ad326ea4c9d32309fbd46592661a464360b8d", "patch": "@@ -121,16 +121,14 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             (Some(ret_span), _) => (\n                 ty_sub.span,\n                 ret_span,\n-                \"this parameter and the return type are declared \\\n-                 with different lifetimes...\"\n+                \"this parameter and the return type are declared with different lifetimes...\"\n                     .to_owned(),\n                 format!(\"...but data{} is returned here\", span_label_var1),\n             ),\n             (_, Some(ret_span)) => (\n                 ty_sup.span,\n                 ret_span,\n-                \"this parameter and the return type are declared \\\n-                 with different lifetimes...\"\n+                \"this parameter and the return type are declared with different lifetimes...\"\n                     .to_owned(),\n                 format!(\"...but data{} is returned here\", span_label_var1),\n             ),"}, {"sha": "2072b00f7b2cb3f3512cba02809c1166e7dcf4de", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.nll.stderr", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.nll.stderr?ref=224ad326ea4c9d32309fbd46592661a464360b8d", "patch": "@@ -56,13 +56,30 @@ LL | | }\n    | |_^\n \n error[E0311]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:58:45\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:58\n+   |\n+LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                                                          ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:5\n+   |\n+LL | /     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+LL | |\n+LL | |         move || {\n+LL | |             *dest = g.get();\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+\n+error[E0311]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:68:45\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                             ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 58:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:58:1\n+note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the function body at 68:1...\n+  --> $DIR/missing-lifetimes-in-signature.rs:68:1\n    |\n LL | / fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n LL | |\n@@ -74,7 +91,7 @@ LL | | }\n    | |_^\n \n error[E0621]: explicit lifetime required in the type of `dest`\n-  --> $DIR/missing-lifetimes-in-signature.rs:63:5\n+  --> $DIR/missing-lifetimes-in-signature.rs:73:5\n    |\n LL |   fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                    ------ help: add explicit lifetime `'a` to the type of `dest`: `&'a mut T`\n@@ -85,14 +102,14 @@ LL | |     }\n    | |_____^ lifetime `'a` required\n \n error[E0309]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:69:44\n+  --> $DIR/missing-lifetimes-in-signature.rs:79:44\n    |\n LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n    |                                            ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `G: 'a`...\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0261, E0309, E0621.\n For more information about an error, try `rustc --explain E0261`."}, {"sha": "d3853445dfdfebb01518eb66ac063a0872c38fcb", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs?ref=224ad326ea4c9d32309fbd46592661a464360b8d", "patch": "@@ -54,6 +54,16 @@ where\n     }\n }\n \n+// Same as above, but show that we pay attention to lifetime names from parent item\n+impl<'a> Foo {\n+    fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+        //~^ ERROR the parameter type `G` may not live long enough\n+        move || {\n+            *dest = g.get();\n+        }\n+    }\n+}\n+\n // After applying suggestion for `qux`:\n fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n //~^ ERROR explicit lifetime required in the type of `dest`"}, {"sha": "46fd0e1052ecd17b2c8cd5c27022b7eb3750250d", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/224ad326ea4c9d32309fbd46592661a464360b8d/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=224ad326ea4c9d32309fbd46592661a464360b8d", "patch": "@@ -87,23 +87,49 @@ help: consider introducing an explicit lifetime bound\n LL | fn qux<'b, 'a, G: 'b + 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'b\n    |        ^^^     ^^^^^^^                                                  ^^^^\n \n+error[E0311]: the parameter type `G` may not live long enough\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:58\n+   |\n+LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                                                          ^^^^^^^^^^^^^^^^^^\n+   |\n+note: the parameter type `G` must be valid for the anonymous lifetime #1 defined on the method body at 59:5...\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:5\n+   |\n+LL | /     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+LL | |\n+LL | |         move || {\n+LL | |             *dest = g.get();\n+LL | |         }\n+LL | |     }\n+   | |_____^\n+note: ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:61:9: 63:10 g:G, dest:&mut T]` will meet its required lifetime bounds\n+  --> $DIR/missing-lifetimes-in-signature.rs:59:58\n+   |\n+LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ {\n+   |                                                          ^^^^^^^^^^^^^^^^^^\n+help: consider introducing an explicit lifetime bound\n+   |\n+LL |     fn qux<'c, 'b, G: 'c + Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'c {\n+   |            ^^^     ^^^^^^^                                                           ^^^^\n+\n error[E0621]: explicit lifetime required in the type of `dest`\n-  --> $DIR/missing-lifetimes-in-signature.rs:58:45\n+  --> $DIR/missing-lifetimes-in-signature.rs:68:45\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n    |                                  ------     ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n    |                                  |\n    |                                  help: add explicit lifetime `'a` to the type of `dest`: `&'a mut T`\n \n error[E0309]: the parameter type `G` may not live long enough\n-  --> $DIR/missing-lifetimes-in-signature.rs:69:44\n+  --> $DIR/missing-lifetimes-in-signature.rs:79:44\n    |\n LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n-   |            -                               ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:74:5: 76:6 g:G, dest:&mut T]` will meet its required lifetime bounds\n+   |            -                               ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:84:5: 86:6 g:G, dest:&mut T]` will meet its required lifetime bounds\n    |            |\n    |            help: consider adding an explicit lifetime bound...: `G: 'a`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0261, E0309, E0621.\n For more information about an error, try `rustc --explain E0261`."}]}