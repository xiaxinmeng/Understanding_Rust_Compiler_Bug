{"sha": "f599687f3fdb062a8ff2fe139cbe47249c5f29a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1OTk2ODdmM2ZkYjA2MmE4ZmYyZmUxMzljYmU0NzI0OWM1ZjI5YTE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-30T20:54:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-04-02T07:14:17Z"}, "message": "adjust for span not being passed around any more", "tree": {"sha": "f05ed383c6b4a3ad731cc1903d71b65099c292b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f05ed383c6b4a3ad731cc1903d71b65099c292b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f599687f3fdb062a8ff2fe139cbe47249c5f29a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f599687f3fdb062a8ff2fe139cbe47249c5f29a1", "html_url": "https://github.com/rust-lang/rust/commit/f599687f3fdb062a8ff2fe139cbe47249c5f29a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5130aa55a2d5e846b491a58a19aad8e00554d61f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5130aa55a2d5e846b491a58a19aad8e00554d61f", "html_url": "https://github.com/rust-lang/rust/commit/5130aa55a2d5e846b491a58a19aad8e00554d61f"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "9ff434021150f12fba18587374d1f9bce49dc211", "filename": "src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=f599687f3fdb062a8ff2fe139cbe47249c5f29a1", "patch": "@@ -129,7 +129,7 @@ fn report_msg<'tcx, 'mir>(\n         err.help(help);\n     }\n     // Add backtrace\n-    let frames = ecx.generate_stacktrace(None);\n+    let frames = ecx.generate_stacktrace();\n     for (idx, frame_info) in frames.iter().enumerate() {\n         let is_local = frame_info.instance.def_id().is_local();\n         // No span for non-local frames and the first frame (which is the error site)."}, {"sha": "827bf1f9dde028aa4c0cb5a6a2a3bd2ad259edde", "filename": "src/helpers.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=f599687f3fdb062a8ff2fe139cbe47249c5f29a1", "patch": "@@ -10,7 +10,6 @@ use rustc_middle::ty::{\n     List, TyCtxt,\n };\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n-use rustc_span::source_map::DUMMY_SP;\n \n use rand::RngCore;\n \n@@ -170,13 +169,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // Push frame.\n         let mir = &*this.load_mir(f.def, None)?;\n-        let span = this\n-            .stack()\n-            .last()\n-            .and_then(Frame::current_source_info)\n-            .map(|si| si.span)\n-            .unwrap_or(DUMMY_SP);\n-        this.push_stack_frame(f, span, mir, dest, stack_pop)?;\n+        this.push_stack_frame(f, mir, dest, stack_pop)?;\n \n         // Initialize arguments.\n         let mut callee_args = this.frame().body.args_iter();"}, {"sha": "61c9f71407bf5930d94c8f45a95e99397c05bb58", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=f599687f3fdb062a8ff2fe139cbe47249c5f29a1", "patch": "@@ -18,7 +18,7 @@ use rustc_middle::ty::{\n     Ty,\n };\n use rustc_ast::attr;\n-use rustc_span::{source_map::Span, symbol::{sym, Symbol}};\n+use rustc_span::symbol::{sym, Symbol};\n \n use crate::*;\n \n@@ -253,7 +253,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     #[inline(always)]\n     fn find_mir_or_eval_fn(\n         ecx: &mut InterpCx<'mir, 'tcx, Self>,\n-        _span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n@@ -276,13 +275,12 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     #[inline(always)]\n     fn call_intrinsic(\n         ecx: &mut rustc_mir::interpret::InterpCx<'mir, 'tcx, Self>,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n-        ecx.call_intrinsic(span, instance, args, ret, unwind)\n+        ecx.call_intrinsic(instance, args, ret, unwind)\n     }\n \n     #[inline(always)]"}, {"sha": "b7900bfaa5d5fac6b0894206d2eb562e269476bb", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=f599687f3fdb062a8ff2fe139cbe47249c5f29a1", "patch": "@@ -5,22 +5,20 @@ use rustc_middle::mir;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{Align, LayoutOf};\n use rustc_apfloat::Float;\n-use rustc_span::source_map::Span;\n \n use crate::*;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn call_intrinsic(\n         &mut self,\n-        span: Span,\n         instance: ty::Instance<'tcx>,\n         args: &[OpTy<'tcx, Tag>],\n         ret: Option<(PlaceTy<'tcx, Tag>, mir::BasicBlock)>,\n         unwind: Option<mir::BasicBlock>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        if this.emulate_intrinsic(span, instance, args, ret)? {\n+        if this.emulate_intrinsic(instance, args, ret)? {\n             return Ok(());\n         }\n         let substs = instance.substs;"}, {"sha": "3474945980a90f34e2b5386b856a0b69fed7b6ed", "filename": "src/shims/panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f599687f3fdb062a8ff2fe139cbe47249c5f29a1/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=f599687f3fdb062a8ff2fe139cbe47249c5f29a1", "patch": "@@ -51,7 +51,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n \n-        trace!(\"miri_start_panic: {:?}\", this.frame().span);\n+        trace!(\"miri_start_panic: {:?}\", this.frame().instance);\n \n         // Get the raw pointer stored in arg[0] (the panic payload).\n         let payload = this.read_scalar(args[0])?.not_undef()?;\n@@ -133,7 +133,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let (true, Some(catch_unwind)) = (unwinding, extra.catch_unwind.take()) {\n             // We've just popped a frame that was pushed by `try`,\n             // and we are unwinding, so we should catch that.\n-            trace!(\"unwinding: found catch_panic frame during unwinding: {:?}\", this.frame().span);\n+            trace!(\"unwinding: found catch_panic frame during unwinding: {:?}\", this.frame().instance);\n \n             // We set the return value of `try` to 1, since there was a panic.\n             this.write_scalar(Scalar::from_i32(1), catch_unwind.dest)?;"}]}