{"sha": "f5833e759ecd55c03afeb918263cb35fabc91177", "node_id": "C_kwDOAAsO6NoAKGY1ODMzZTc1OWVjZDU1YzAzYWZlYjkxODI2M2NiMzVmYWJjOTExNzc", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-12-20T16:45:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-04-18T18:59:08Z"}, "message": "Add parser tests", "tree": {"sha": "f339a8d44570204e26687434d7f89eb05946062f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f339a8d44570204e26687434d7f89eb05946062f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5833e759ecd55c03afeb918263cb35fabc91177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5833e759ecd55c03afeb918263cb35fabc91177", "html_url": "https://github.com/rust-lang/rust/commit/f5833e759ecd55c03afeb918263cb35fabc91177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5833e759ecd55c03afeb918263cb35fabc91177/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7cefee027ae8937058e4109911a4ded2e643399b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cefee027ae8937058e4109911a4ded2e643399b", "html_url": "https://github.com/rust-lang/rust/commit/7cefee027ae8937058e4109911a4ded2e643399b"}], "stats": {"total": 649, "additions": 643, "deletions": 6}, "files": [{"sha": "98be691e0e78203464828e339177d3df675b16c2", "filename": "src/test/rustdoc-js-std/parser-errors.js", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-errors.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -0,0 +1,43 @@\n+const QUERY = ['<\"P\">', '\"P\" \"P\"', 'P \"P\"'];\n+\n+const PARSED = [\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 0,\n+        id: \"<\\\"P\\\">\",\n+        nameSplit: null,\n+        original: \"<\\\"P\\\">\",\n+        returned: [],\n+        typeFilter: null,\n+        val: \"<\\\"p\\\">\",\n+        error: \"`\\\"` cannot be used in generics\",\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 0,\n+        id: \"\\\"P\\\" \\\"P\\\"\",\n+        nameSplit: null,\n+        original: \"\\\"P\\\" \\\"P\\\"\",\n+        returned: [],\n+        typeFilter: null,\n+        val: \"\\\"p\\\" \\\"p\\\"\",\n+        error: \"Cannot have more than one literal search element\",\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 0,\n+        id: \"P \\\"P\\\"\",\n+        nameSplit: null,\n+        original: \"P \\\"P\\\"\",\n+        returned: [],\n+        typeFilter: null,\n+        val: \"p \\\"p\\\"\",\n+        error: \"Cannot use literal search when there is more than one element\",\n+    },\n+];"}, {"sha": "ba119af816aef19dea19159000a08ef1dd28d70e", "filename": "src/test/rustdoc-js-std/parser-filter.js", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-filter.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -0,0 +1,61 @@\n+const QUERY = ['fn:foo', 'enum : foo', 'macro<f>:foo'];\n+\n+const PARSED = [\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"foo\",\n+            fullPath: [\"foo\"],\n+            pathWithoutLast: [],\n+            pathLast: \"foo\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        id: \"fn:foo\",\n+        nameSplit: null,\n+        original: \"fn:foo\",\n+        returned: [],\n+        typeFilter: 5,\n+        val: \"fn:foo\",\n+        error: null,\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"foo\",\n+            fullPath: [\"foo\"],\n+            pathWithoutLast: [],\n+            pathLast: \"foo\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        id: \"enum : foo\",\n+        nameSplit: null,\n+        original: \"enum : foo\",\n+        returned: [],\n+        typeFilter: 4,\n+        val: \"enum : foo\",\n+        error: null,\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"foo\",\n+            fullPath: [\"foo\"],\n+            pathWithoutLast: [],\n+            pathLast: \"foo\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        id: \"macro<f>:foo\",\n+        nameSplit: null,\n+        original: \"macro<f>:foo\",\n+        returned: [],\n+        typeFilter: 14,\n+        val: \"macro<f>:foo\",\n+        error: null,\n+    },\n+];"}, {"sha": "4ad65d0d6442acd521f9a5dde2003b90459ad60c", "filename": "src/test/rustdoc-js-std/parser-generics.js", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-generics.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -0,0 +1,81 @@\n+const QUERY = ['<P>', 'A<B<C<D>, E>'];\n+\n+const PARSED = [\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"\",\n+            fullPath: [\"\"],\n+            pathWithoutLast: [],\n+            pathLast: \"\",\n+            generics: [\n+                {\n+                    name: \"p\",\n+                    fullPath: [\"p\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"p\",\n+                    generics: [],\n+                },\n+            ],\n+        }],\n+        foundElems: 1,\n+        id: \"<P>\",\n+        nameSplit: null,\n+        original: \"<P>\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"<p>\",\n+        error: null,\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"a\",\n+            fullPath: [\"a\"],\n+            pathWithoutLast: [],\n+            pathLast: \"a\",\n+            generics: [\n+                {\n+                    name: \"b\",\n+                    fullPath: [\"b\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"b\",\n+                    generics: [\n+                        {\n+                            name: \"c\",\n+                            fullPath: [\"c\"],\n+                            pathWithoutLast: [],\n+                            pathLast: \"c\",\n+                            generics: [\n+                                {\n+                                    name: \"d\",\n+                                    fullPath: [\"d\"],\n+                                    pathWithoutLast: [],\n+                                    pathLast: \"d\",\n+                                    generics: [],\n+                                },\n+                            ],\n+                        },\n+                        {\n+                            name: \"e\",\n+                            fullPath: [\"e\"],\n+                            pathWithoutLast: [],\n+                            pathLast: \"e\",\n+                            generics: [],\n+                        },\n+                    ],\n+                },\n+            ],\n+        }],\n+        foundElems: 1,\n+        id: 'A<B<C<D>, E>',\n+        nameSplit: null,\n+        original: 'A<B<C<D>, E>',\n+        returned: [],\n+        typeFilter: -1,\n+        val: 'a<b<c<d>, e>',\n+        error: null,\n+    }\n+];"}, {"sha": "6542319458ff0805a9c8a575bff990633c5f3e3b", "filename": "src/test/rustdoc-js-std/parser-in_args.js", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-in_args.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-in_args.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-in_args.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -0,0 +1,50 @@\n+const QUERY = ['(whatever)', '(<P>)'];\n+\n+const PARSED = [\n+    {\n+        args: [{\n+            name: \"whatever\",\n+            fullPath: [\"whatever\"],\n+            pathWithoutLast: [],\n+            pathLast: \"whatever\",\n+            generics: [],\n+        }],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 1,\n+        id: \"(whatever)\",\n+        nameSplit: null,\n+        original: \"(whatever)\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"(whatever)\",\n+        error: null,\n+    },\n+    {\n+        args: [{\n+            name: \"\",\n+            fullPath: [\"\"],\n+            pathWithoutLast: [],\n+            pathLast: \"\",\n+            generics: [\n+                {\n+                    name: \"p\",\n+                    fullPath: [\"p\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"p\",\n+                    generics: [],\n+                },\n+            ],\n+        }],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 1,\n+        id: \"(<P>)\",\n+        nameSplit: null,\n+        original: \"(<P>)\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"(<p>)\",\n+        error: null,\n+    },\n+];"}, {"sha": "a94792b06940fad6054536d78f8bc5f874cd8440", "filename": "src/test/rustdoc-js-std/parser-invalid.js", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-invalid.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -0,0 +1,128 @@\n+// This test is mostly to check that the parser still kinda outputs something\n+// (and doesn't enter an infinite loop!) even though the query is completely\n+// invalid.\n+const QUERY = ['-> <P> (p2)', '(p -> p2', 'a b', 'a,b(c)'];\n+\n+const PARSED = [\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 2,\n+        id: \"-> <P> (p2)\",\n+        nameSplit: null,\n+        original: \"-> <P> (p2)\",\n+        returned: [\n+            {\n+                name: \"\",\n+                fullPath: [\"\"],\n+                pathWithoutLast: [],\n+                pathLast: \"\",\n+                generics: [\n+                    {\n+                        name: \"p\",\n+                        fullPath: [\"p\"],\n+                        pathWithoutLast: [],\n+                        pathLast: \"p\",\n+                        generics: [],\n+                    },\n+                ],\n+            },\n+            {\n+                name: \"p2\",\n+                fullPath: [\"p2\"],\n+                pathWithoutLast: [],\n+                pathLast: \"p2\",\n+                generics: [],\n+            },\n+        ],\n+        typeFilter: -1,\n+        val: \"-> <p> (p2)\",\n+        error: null,\n+    },\n+    {\n+        args: [\n+            {\n+                name: \"p\",\n+                fullPath: [\"p\"],\n+                pathWithoutLast: [],\n+                pathLast: \"p\",\n+                generics: [],\n+            },\n+            {\n+                name: \"p2\",\n+                fullPath: [\"p2\"],\n+                pathWithoutLast: [],\n+                pathLast: \"p2\",\n+                generics: [],\n+            },\n+        ],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 2,\n+        id: \"(p -> p2\",\n+        nameSplit: null,\n+        original: \"(p -> p2\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"(p -> p2\",\n+        error: null,\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [\n+            {\n+                name: \"a b\",\n+                fullPath: [\"a b\"],\n+                pathWithoutLast: [],\n+                pathLast: \"a b\",\n+                generics: [],\n+            },\n+        ],\n+        foundElems: 1,\n+        id: \"a b\",\n+        nameSplit: null,\n+        original: \"a b\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"a b\",\n+        error: null,\n+    },\n+    {\n+        args: [\n+            {\n+                name: \"c\",\n+                fullPath: [\"c\"],\n+                pathWithoutLast: [],\n+                pathLast: \"c\",\n+                generics: [],\n+            },\n+        ],\n+        elemName: null,\n+        elems: [\n+            {\n+                name: \"a\",\n+                fullPath: [\"a\"],\n+                pathWithoutLast: [],\n+                pathLast: \"a\",\n+                generics: [],\n+            },\n+            {\n+                name: \"b\",\n+                fullPath: [\"b\"],\n+                pathWithoutLast: [],\n+                pathLast: \"b\",\n+                generics: [],\n+            },\n+        ],\n+        foundElems: 3,\n+        id: \"a,b(c)\",\n+        nameSplit: null,\n+        original: \"a,b(c)\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"a,b(c)\",\n+        error: null,\n+    },\n+];"}, {"sha": "0624930f14a874aaf762c72e41295c9ff0d00fc2", "filename": "src/test/rustdoc-js-std/parser-literal.js", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-literal.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-literal.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-literal.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -0,0 +1,31 @@\n+const QUERY = ['\"R\"<P>'];\n+\n+const PARSED = [\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"r\",\n+            fullPath: [\"r\"],\n+            pathWithoutLast: [],\n+            pathLast: \"r\",\n+            generics: [\n+                {\n+                    name: \"p\",\n+                    fullPath: [\"p\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"p\",\n+                    generics: [],\n+                },\n+            ],\n+        }],\n+        foundElems: 1,\n+        id: \"\\\"R\\\"<P>\",\n+        nameSplit: null,\n+        original: \"\\\"R\\\"<P>\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"\\\"r\\\"<p>\",\n+        error: null,\n+    }\n+];"}, {"sha": "9422eada9bcd52e6f9eb715000b3439fb4bde81a", "filename": "src/test/rustdoc-js-std/parser-paths.js", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-paths.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -0,0 +1,106 @@\n+const QUERY = ['A::B', '::A::B', 'A::B::,C',  'A::B::<f>,C'];\n+\n+const PARSED = [\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"a::b\",\n+            fullPath: [\"a\", \"b\"],\n+            pathWithoutLast: [\"a\"],\n+            pathLast: \"b\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        id: \"A::B\",\n+        nameSplit: null,\n+        original: \"A::B\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"a::b\",\n+        error: null,\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"::a::b\",\n+            fullPath: [\"a\", \"b\"],\n+            pathWithoutLast: [\"a\"],\n+            pathLast: \"b\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        id: '::A::B',\n+        nameSplit: null,\n+        original: '::A::B',\n+        returned: [],\n+        typeFilter: -1,\n+        val: '::a::b',\n+        error: null,\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [\n+            {\n+                name: \"a::b::\",\n+                fullPath: [\"a\", \"b\"],\n+                pathWithoutLast: [\"a\"],\n+                pathLast: \"b\",\n+                generics: [],\n+            },\n+            {\n+                name: \"c\",\n+                fullPath: [\"c\"],\n+                pathWithoutLast: [],\n+                pathLast: \"c\",\n+                generics: [],\n+            },\n+        ],\n+        foundElems: 2,\n+        id: 'A::B::,C',\n+        nameSplit: null,\n+        original: 'A::B::,C',\n+        returned: [],\n+        typeFilter: -1,\n+        val: 'a::b::,c',\n+        error: null,\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [\n+            {\n+                name: \"a::b::\",\n+                fullPath: [\"a\", \"b\"],\n+                pathWithoutLast: [\"a\"],\n+                pathLast: \"b\",\n+                generics: [\n+                    {\n+                        name: \"f\",\n+                        fullPath: [\"f\"],\n+                        pathWithoutLast: [],\n+                        pathLast: \"f\",\n+                        generics: [],\n+                    },\n+                ],\n+            },\n+            {\n+                name: \"c\",\n+                fullPath: [\"c\"],\n+                pathWithoutLast: [],\n+                pathLast: \"c\",\n+                generics: [],\n+            },\n+        ],\n+        foundElems: 2,\n+        id: 'A::B::<f>,C',\n+        nameSplit: null,\n+        original: 'A::B::<f>,C',\n+        returned: [],\n+        typeFilter: -1,\n+        val: 'a::b::<f>,c',\n+        error: null,\n+    },\n+];"}, {"sha": "de7b004159ff26b7fbc744e33940438a195612ed", "filename": "src/test/rustdoc-js-std/parser-quote.js", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-quote.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-quote.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-quote.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -0,0 +1,89 @@\n+const QUERY = ['-> \"p\"', '\"const\": \"p\"', '(\"p\")', '\"p\"<p>'];\n+\n+const PARSED = [\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 1,\n+        id: \"-> \\\"p\\\"\",\n+        nameSplit: null,\n+        original: \"-> \\\"p\\\"\",\n+        returned: [{\n+            name: \"p\",\n+            fullPath: [\"p\"],\n+            pathWithoutLast: [],\n+            pathLast: \"p\",\n+            generics: [],\n+        }],\n+        typeFilter: -1,\n+        val: \"-> \\\"p\\\"\",\n+        error: null,\n+    },\n+    // This one checks that if quotes are used on the type filter, they're\n+    // simply ignored.\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"p\",\n+            fullPath: [\"p\"],\n+            pathWithoutLast: [],\n+            pathLast: \"p\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        id: \"\\\"const\\\": \\\"p\\\"\",\n+        nameSplit: null,\n+        original: \"\\\"const\\\": \\\"p\\\"\",\n+        returned: [],\n+        typeFilter: 17,\n+        val: \"\\\"const\\\": \\\"p\\\"\",\n+        error: null,\n+    },\n+    {\n+        args: [{\n+            name: \"p\",\n+            fullPath: [\"p\"],\n+            pathWithoutLast: [],\n+            pathLast: \"p\",\n+            generics: [],\n+        }],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 1,\n+        id: \"(\\\"p\\\")\",\n+        nameSplit: null,\n+        original: \"(\\\"p\\\")\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"(\\\"p\\\")\",\n+        error: null,\n+    },\n+    // This test checks that a literal item can still have generics.\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [{\n+            name: \"p\",\n+            fullPath: [\"p\"],\n+            pathWithoutLast: [],\n+            pathLast: \"p\",\n+            generics: [{\n+                name: \"p\",\n+                fullPath: [\"p\"],\n+                pathWithoutLast: [],\n+                pathLast: \"p\",\n+                generics: [],\n+            }],\n+        }],\n+        foundElems: 1,\n+        id: \"\\\"p\\\"<p>\",\n+        nameSplit: null,\n+        original: \"\\\"p\\\"<p>\",\n+        returned: [],\n+        typeFilter: -1,\n+        val: \"\\\"p\\\"<p>\",\n+        error: null,\n+    },\n+];"}, {"sha": "92b378f1393c85230ed994082cf5539382875753", "filename": "src/test/rustdoc-js-std/parser-returned.js", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js-std%2Fparser-returned.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -0,0 +1,50 @@\n+const QUERY = ['-> <P>', '-> P'];\n+\n+const PARSED = [\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 1,\n+        id: \"-> <P>\",\n+        nameSplit: null,\n+        original: \"-> <P>\",\n+        returned: [{\n+            name: \"\",\n+            fullPath: [\"\"],\n+            pathWithoutLast: [],\n+            pathLast: \"\",\n+            generics: [\n+                {\n+                    name: \"p\",\n+                    fullPath: [\"p\"],\n+                    pathWithoutLast: [],\n+                    pathLast: \"p\",\n+                    generics: [],\n+                },\n+            ],\n+        }],\n+        typeFilter: -1,\n+        val: \"-> <p>\",\n+        error: null,\n+    },\n+    {\n+        args: [],\n+        elemName: null,\n+        elems: [],\n+        foundElems: 1,\n+        id: \"-> P\",\n+        nameSplit: null,\n+        original: \"-> P\",\n+        returned: [{\n+            name: \"p\",\n+            fullPath: [\"p\"],\n+            pathWithoutLast: [],\n+            pathLast: \"p\",\n+            generics: [],\n+        }],\n+        typeFilter: -1,\n+        val: \"-> p\",\n+        error: null,\n+    },\n+];"}, {"sha": "babfbf98e3ede731d8e762b6c5a933a696076e55", "filename": "src/test/rustdoc-js/generics.js", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js%2Fgenerics.js", "raw_url": "https://github.com/rust-lang/rust/raw/f5833e759ecd55c03afeb918263cb35fabc91177/src%2Ftest%2Frustdoc-js%2Fgenerics.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fgenerics.js?ref=f5833e759ecd55c03afeb918263cb35fabc91177", "patch": "@@ -1,18 +1,18 @@\n // exact-check\n \n const QUERY = [\n-    '\"R\"<\"P\">',\n+    '\"R\"<P>',\n     '\"P\"',\n     'P',\n-    '\"ExtraCreditStructMulti\"<\"ExtraCreditInnerMulti\", \"ExtraCreditInnerMulti\">',\n+    '\"ExtraCreditStructMulti\"<ExtraCreditInnerMulti, ExtraCreditInnerMulti>',\n     'TraitCat',\n     'TraitDog',\n     'Result<String>',\n ];\n \n const EXPECTED = [\n     {\n-        // \"R\"<\"P\">\n+        // \"R\"<P>\n         'returned': [\n             { 'path': 'generics', 'name': 'alef' },\n         ],\n@@ -36,15 +36,13 @@ const EXPECTED = [\n         // P\n         'returned': [\n             { 'path': 'generics', 'name': 'alef' },\n-            { 'path': 'generics', 'name': 'bet' },\n         ],\n         'in_args': [\n             { 'path': 'generics', 'name': 'alpha' },\n-            { 'path': 'generics', 'name': 'beta' },\n         ],\n     },\n     {\n-        // \"ExtraCreditStructMulti\"<\"ExtraCreditInnerMulti\", \"ExtraCreditInnerMulti\">\n+        // \"ExtraCreditStructMulti\"<ExtraCreditInnerMulti, ExtraCreditInnerMulti>\n         'in_args': [\n             { 'path': 'generics', 'name': 'extracreditlabhomework' },\n         ],"}]}