{"sha": "d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTA0ZDRhNDdmOTAyMWFlMWE2YjBiZWM1NjE3YTJjYzdhYzdjMjU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-18T22:03:00Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-20T05:28:46Z"}, "message": "rustc: middle: move Export and ExportMap from resolve to def.", "tree": {"sha": "2a72688d4b36ddbc29f77fbff0ca4a17302af854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a72688d4b36ddbc29f77fbff0ca4a17302af854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "html_url": "https://github.com/rust-lang/rust/commit/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10a862d4f48a183dec5621d2cd81e64701bd29c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/10a862d4f48a183dec5621d2cd81e64701bd29c6", "html_url": "https://github.com/rust-lang/rust/commit/10a862d4f48a183dec5621d2cd81e64701bd29c6"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "deb86397eda2aad6e1329de79a2af3233a191bcd", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "patch": "@@ -21,10 +21,10 @@ use metadata::common::*;\n use metadata::cstore;\n use metadata::decoder;\n use metadata::tyencode;\n+use middle::def;\n use middle::ty::{lookup_item_type};\n use middle::ty::{mod, Ty};\n use middle::stability;\n-use middle;\n use util::nodemap::{FnvHashMap, NodeMap, NodeSet};\n \n use serialize::Encodable;\n@@ -66,7 +66,7 @@ pub type EncodeInlinedItem<'a> = |ecx: &EncodeContext,\n pub struct EncodeParams<'a, 'tcx: 'a> {\n     pub diag: &'a SpanHandler,\n     pub tcx: &'a ty::ctxt<'tcx>,\n-    pub reexports: &'a middle::resolve::ExportMap,\n+    pub reexports: &'a def::ExportMap,\n     pub item_symbols: &'a RefCell<NodeMap<String>>,\n     pub link_meta: &'a LinkMeta,\n     pub cstore: &'a cstore::CStore,\n@@ -77,7 +77,7 @@ pub struct EncodeParams<'a, 'tcx: 'a> {\n pub struct EncodeContext<'a, 'tcx: 'a> {\n     pub diag: &'a SpanHandler,\n     pub tcx: &'a ty::ctxt<'tcx>,\n-    pub reexports: &'a middle::resolve::ExportMap,\n+    pub reexports: &'a def::ExportMap,\n     pub item_symbols: &'a RefCell<NodeMap<String>>,\n     pub link_meta: &'a LinkMeta,\n     pub cstore: &'a cstore::CStore,\n@@ -379,7 +379,7 @@ fn encode_path<PI: Iterator<PathElem>>(rbml_w: &mut Encoder, path: PI) {\n }\n \n fn encode_reexported_static_method(rbml_w: &mut Encoder,\n-                                   exp: &middle::resolve::Export,\n+                                   exp: &def::Export,\n                                    method_def_id: DefId,\n                                    method_name: ast::Name) {\n     debug!(\"(encode reexported static method) {}::{}\",\n@@ -398,7 +398,7 @@ fn encode_reexported_static_method(rbml_w: &mut Encoder,\n \n fn encode_reexported_static_base_methods(ecx: &EncodeContext,\n                                          rbml_w: &mut Encoder,\n-                                         exp: &middle::resolve::Export)\n+                                         exp: &def::Export)\n                                          -> bool {\n     let impl_items = ecx.tcx.impl_items.borrow();\n     match ecx.tcx.inherent_impls.borrow().get(&exp.def_id) {\n@@ -428,7 +428,7 @@ fn encode_reexported_static_base_methods(ecx: &EncodeContext,\n \n fn encode_reexported_static_trait_methods(ecx: &EncodeContext,\n                                           rbml_w: &mut Encoder,\n-                                          exp: &middle::resolve::Export)\n+                                          exp: &def::Export)\n                                           -> bool {\n     match ecx.tcx.trait_items_cache.borrow().get(&exp.def_id) {\n         Some(trait_items) => {\n@@ -449,7 +449,7 @@ fn encode_reexported_static_trait_methods(ecx: &EncodeContext,\n fn encode_reexported_static_methods(ecx: &EncodeContext,\n                                     rbml_w: &mut Encoder,\n                                     mod_path: PathElems,\n-                                    exp: &middle::resolve::Export) {\n+                                    exp: &def::Export) {\n     if let Some(ast_map::NodeItem(item)) = ecx.tcx.map.find(exp.def_id.node) {\n         let path_differs = ecx.tcx.map.with_path(exp.def_id.node, |path| {\n             let (mut a, mut b) = (path, mod_path.clone());"}, {"sha": "ddf5b6f7e37d11d9793a5c4181f4d619084fa2b1", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "patch": "@@ -61,6 +61,15 @@ pub enum Def {\n \n // Definition mapping\n pub type DefMap = RefCell<NodeMap<Def>>;\n+// This is the replacement export map. It maps a module to all of the exports\n+// within.\n+pub type ExportMap = NodeMap<Vec<Export>>;\n+\n+#[deriving(Copy)]\n+pub struct Export {\n+    pub name: ast::Name,    // The name of the target.\n+    pub def_id: ast::DefId, // The definition of the target.\n+}\n \n #[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MethodProvenance {"}, {"sha": "62894c55cc66a4322e7b3691c123f46138a68fc3", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "patch": "@@ -29,7 +29,7 @@ use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::visit::{mod, Visitor};\n \n-type Context<'a, 'tcx> = (&'a MethodMap<'tcx>, &'a resolve::ExportMap);\n+type Context<'a, 'tcx> = (&'a MethodMap<'tcx>, &'a def::ExportMap);\n \n /// A set of AST nodes exported by the crate.\n pub type ExportedItems = NodeSet;\n@@ -136,7 +136,7 @@ impl<'v> Visitor<'v> for ParentVisitor {\n \n struct EmbargoVisitor<'a, 'tcx: 'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n-    export_map: &'a resolve::ExportMap,\n+    export_map: &'a def::ExportMap,\n \n     // This flag is an indicator of whether the previous item in the\n     // hierarchical chain was exported or not. This is the indicator of whether\n@@ -1520,7 +1520,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate(tcx: &ty::ctxt,\n-                   export_map: &resolve::ExportMap,\n+                   export_map: &def::ExportMap,\n                    external_exports: resolve::ExternalExports,\n                    last_private_map: resolve::LastPrivateMap)\n                    -> (ExportedItems, PublicItems) {"}, {"sha": "a27b3b750094c8c4cd05bb42a7bfb7173af14f16", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "patch": "@@ -93,15 +93,6 @@ struct BindingInfo {\n // Map from the name in a pattern to its binding mode.\n type BindingMap = HashMap<Name, BindingInfo>;\n \n-// This is the replacement export map. It maps a module to all of the exports\n-// within.\n-pub type ExportMap = NodeMap<Vec<Export>>;\n-\n-pub struct Export {\n-    pub name: Name,          // The name of the target.\n-    pub def_id: DefId,       // The definition of the target.\n-}\n-\n // This set contains all exported definitions from external crates. The set does\n // not contain any entries from local crates.\n pub type ExternalExports = DefIdSet;"}, {"sha": "d5c97bd6aa6c6756226f5e835a6a7355a7c81692", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "patch": "@@ -46,7 +46,7 @@ use lint;\n use metadata::csearch;\n use middle;\n use middle::const_eval;\n-use middle::def::{mod, DefMap};\n+use middle::def::{mod, DefMap, ExportMap};\n use middle::dependency_format;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem};\n use middle::lang_items::{FnOnceTraitLangItem, TyDescStructLangItem};\n@@ -98,7 +98,7 @@ pub const INITIAL_DISCRIMINANT_VALUE: Disr = 0;\n /// The complete set of all analyses described in this module. This is\n /// produced by the driver and fed to trans and later passes.\n pub struct CrateAnalysis<'tcx> {\n-    pub export_map: middle::resolve::ExportMap,\n+    pub export_map: ExportMap,\n     pub exported_items: middle::privacy::ExportedItems,\n     pub public_items: middle::privacy::PublicItems,\n     pub ty_cx: ty::ctxt<'tcx>,"}, {"sha": "7b962a939906fa5a7882caaec69de29975a00224", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=d9504d4a47f9021ae1a6b0bec5617a2cc7ac7c25", "patch": "@@ -13,7 +13,7 @@ use llvm::{ContextRef, ModuleRef, ValueRef, BuilderRef};\n use llvm::{TargetData};\n use llvm::mk_target_data;\n use metadata::common::LinkMeta;\n-use middle::resolve;\n+use middle::def::ExportMap;\n use middle::traits;\n use trans::adt;\n use trans::base;\n@@ -61,7 +61,7 @@ pub struct SharedCrateContext<'tcx> {\n     metadata_llmod: ModuleRef,\n     metadata_llcx: ContextRef,\n \n-    export_map: resolve::ExportMap,\n+    export_map: ExportMap,\n     reachable: NodeSet,\n     item_symbols: RefCell<NodeMap<String>>,\n     link_meta: LinkMeta,\n@@ -238,7 +238,7 @@ impl<'tcx> SharedCrateContext<'tcx> {\n     pub fn new(crate_name: &str,\n                local_count: uint,\n                tcx: ty::ctxt<'tcx>,\n-               export_map: resolve::ExportMap,\n+               export_map: ExportMap,\n                symbol_hasher: Sha256,\n                link_meta: LinkMeta,\n                reachable: NodeSet)\n@@ -329,7 +329,7 @@ impl<'tcx> SharedCrateContext<'tcx> {\n         self.metadata_llcx\n     }\n \n-    pub fn export_map<'a>(&'a self) -> &'a resolve::ExportMap {\n+    pub fn export_map<'a>(&'a self) -> &'a ExportMap {\n         &self.export_map\n     }\n \n@@ -553,7 +553,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local.item_vals\n     }\n \n-    pub fn export_map<'a>(&'a self) -> &'a resolve::ExportMap {\n+    pub fn export_map<'a>(&'a self) -> &'a ExportMap {\n         &self.shared.export_map\n     }\n "}]}