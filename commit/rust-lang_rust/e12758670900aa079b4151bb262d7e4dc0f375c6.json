{"sha": "e12758670900aa079b4151bb262d7e4dc0f375c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMjc1ODY3MDkwMGFhMDc5YjQxNTFiYjI2MmQ3ZTRkYzBmMzc1YzY=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-11T14:59:05Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-11T14:59:05Z"}, "message": "Improve function names and docs", "tree": {"sha": "74a2b40e05606bbacff0471b6df918d1ec7f8675", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a2b40e05606bbacff0471b6df918d1ec7f8675"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e12758670900aa079b4151bb262d7e4dc0f375c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e12758670900aa079b4151bb262d7e4dc0f375c6", "html_url": "https://github.com/rust-lang/rust/commit/e12758670900aa079b4151bb262d7e4dc0f375c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e12758670900aa079b4151bb262d7e4dc0f375c6/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2fa502617175e90f47e0e50873774e512a3ce62", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2fa502617175e90f47e0e50873774e512a3ce62", "html_url": "https://github.com/rust-lang/rust/commit/e2fa502617175e90f47e0e50873774e512a3ce62"}], "stats": {"total": 67, "additions": 35, "deletions": 32}, "files": [{"sha": "e728f8ad82a90a3827539a07c08a76003862660c", "filename": "crates/core_simd/src/reduction.rs", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e12758670900aa079b4151bb262d7e4dc0f375c6/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12758670900aa079b4151bb262d7e4dc0f375c6/crates%2Fcore_simd%2Fsrc%2Freduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Freduction.rs?ref=e12758670900aa079b4151bb262d7e4dc0f375c6", "patch": "@@ -4,45 +4,48 @@ macro_rules! impl_integer_reductions {\n         where\n             Self: crate::LanesAtMost32\n         {\n-            /// Produces the sum of the lanes of the vector, with wrapping addition.\n+            /// Horizontal wrapping add.  Computes the sum of the lanes of the vector, with wrapping addition.\n             #[inline]\n             pub fn wrapping_sum(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_add_ordered(self, 0) }\n             }\n \n-            /// Produces the sum of the lanes of the vector, with wrapping multiplication.\n+            /// Horizontal wrapping multiply.  Computes the product of the lanes of the vector, with wrapping multiplication.\n             #[inline]\n             pub fn wrapping_product(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_mul_ordered(self, 1) }\n             }\n \n-            /// Sequentially performs bitwise \"and\" between the lanes of the vector.\n+            /// Horizontal bitwise \"and\".  Computes the cumulative bitwise \"and\" across the lanes of\n+            /// the vector.\n             #[inline]\n-            pub fn and_lanes(self) -> $scalar {\n+            pub fn horizontal_and(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_and(self) }\n             }\n \n-            /// Sequentially performs bitwise \"or\" between the lanes of the vector.\n+            /// Horizontal bitwise \"or\".  Computes the cumulative bitwise \"or\" across the lanes of\n+            /// the vector.\n             #[inline]\n-            pub fn or_lanes(self) -> $scalar {\n+            pub fn horizontal_or(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_or(self) }\n             }\n \n-            /// Sequentially performs bitwise \"xor\" between the lanes of the vector.\n+            /// Horizontal bitwise \"xor\".  Computes the cumulative bitwise \"xor\" across the lanes of\n+            /// the vector.\n             #[inline]\n-            pub fn xor_lanes(self) -> $scalar {\n+            pub fn horizontal_xor(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_xor(self) }\n             }\n \n-            /// Returns the maximum lane in the vector.\n+            /// Horizontal maximum.  Computes the maximum lane in the vector.\n             #[inline]\n-            pub fn max_lane(self) -> $scalar {\n+            pub fn horizontal_max(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_max(self) }\n             }\n \n-            /// Returns the minimum lane in the vector.\n+            /// Horizontal minimum.  Computes the minimum lane in the vector.\n             #[inline]\n-            pub fn min_lane(self) -> $scalar {\n+            pub fn horizontal_min(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_min(self) }\n             }\n         }\n@@ -56,7 +59,7 @@ macro_rules! impl_float_reductions {\n             Self: crate::LanesAtMost32\n         {\n \n-            /// Produces the sum of the lanes of the vector.\n+            /// Horizontal add.  Computes the sum of the lanes of the vector.\n             #[inline]\n             pub fn sum(self) -> $scalar {\n                 // LLVM sum is inaccurate on i586\n@@ -67,7 +70,7 @@ macro_rules! impl_float_reductions {\n                 }\n             }\n \n-            /// Produces the sum of the lanes of the vector.\n+            /// Horizontal multiply.  Computes the sum of the lanes of the vector.\n             #[inline]\n             pub fn product(self) -> $scalar {\n                 // LLVM product is inaccurate on i586\n@@ -78,21 +81,21 @@ macro_rules! impl_float_reductions {\n                 }\n             }\n \n-            /// Returns the maximum lane in the vector.\n+            /// Horizontal maximum.  Computes the maximum lane in the vector.\n             ///\n             /// Returns values based on equality, so a vector containing both `0.` and `-0.` may\n             /// return either.  This function will not return `NaN` unless all lanes are `NaN`.\n             #[inline]\n-            pub fn max_lane(self) -> $scalar {\n+            pub fn horizontal_max(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_max(self) }\n             }\n \n-            /// Returns the minimum lane in the vector.\n+            /// Horizontal minimum.  Computes the minimum lane in the vector.\n             ///\n             /// Returns values based on equality, so a vector containing both `0.` and `-0.` may\n             /// return either.  This function will not return `NaN` unless all lanes are `NaN`.\n             #[inline]\n-            pub fn min_lane(self) -> $scalar {\n+            pub fn horizontal_min(self) -> $scalar {\n                 unsafe { crate::intrinsics::simd_reduce_min(self) }\n             }\n         }"}, {"sha": "7ce85b77254af65ce585652db39304a831d93c0e", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e12758670900aa079b4151bb262d7e4dc0f375c6/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12758670900aa079b4151bb262d7e4dc0f375c6/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=e12758670900aa079b4151bb262d7e4dc0f375c6", "patch": "@@ -160,50 +160,50 @@ macro_rules! impl_common_integer_tests {\n                 });\n             }\n \n-            fn and_lanes<const LANES: usize>() {\n+            fn horizontal_and<const LANES: usize>() {\n                 test_helpers::test_1(&|x| {\n                     test_helpers::prop_assert_biteq! (\n-                        $vector::<LANES>::from_array(x).and_lanes(),\n+                        $vector::<LANES>::from_array(x).horizontal_and(),\n                         x.iter().copied().fold(-1i8 as $scalar, <$scalar as core::ops::BitAnd>::bitand),\n                     );\n                     Ok(())\n                 });\n             }\n \n-            fn or_lanes<const LANES: usize>() {\n+            fn horizontal_or<const LANES: usize>() {\n                 test_helpers::test_1(&|x| {\n                     test_helpers::prop_assert_biteq! (\n-                        $vector::<LANES>::from_array(x).or_lanes(),\n+                        $vector::<LANES>::from_array(x).horizontal_or(),\n                         x.iter().copied().fold(0 as $scalar, <$scalar as core::ops::BitOr>::bitor),\n                     );\n                     Ok(())\n                 });\n             }\n \n-            fn xor_lanes<const LANES: usize>() {\n+            fn horizontal_xor<const LANES: usize>() {\n                 test_helpers::test_1(&|x| {\n                     test_helpers::prop_assert_biteq! (\n-                        $vector::<LANES>::from_array(x).xor_lanes(),\n+                        $vector::<LANES>::from_array(x).horizontal_xor(),\n                         x.iter().copied().fold(0 as $scalar, <$scalar as core::ops::BitXor>::bitxor),\n                     );\n                     Ok(())\n                 });\n             }\n \n-            fn max_lane<const LANES: usize>() {\n+            fn horizontal_max<const LANES: usize>() {\n                 test_helpers::test_1(&|x| {\n                     test_helpers::prop_assert_biteq! (\n-                        $vector::<LANES>::from_array(x).max_lane(),\n+                        $vector::<LANES>::from_array(x).horizontal_max(),\n                         x.iter().copied().max().unwrap(),\n                     );\n                     Ok(())\n                 });\n             }\n \n-            fn min_lane<const LANES: usize>() {\n+            fn horizontal_min<const LANES: usize>() {\n                 test_helpers::test_1(&|x| {\n                     test_helpers::prop_assert_biteq! (\n-                        $vector::<LANES>::from_array(x).min_lane(),\n+                        $vector::<LANES>::from_array(x).horizontal_min(),\n                         x.iter().copied().min().unwrap(),\n                     );\n                     Ok(())\n@@ -499,9 +499,9 @@ macro_rules! impl_float_tests {\n                     });\n                 }\n \n-                fn max_lane<const LANES: usize>() {\n+                fn horizontal_max<const LANES: usize>() {\n                     test_helpers::test_1(&|x| {\n-                        let vmax = Vector::<LANES>::from_array(x).max_lane();\n+                        let vmax = Vector::<LANES>::from_array(x).horizontal_max();\n                         let smax = x.iter().copied().fold(Scalar::NAN, Scalar::max);\n                         // 0 and -0 are treated the same\n                         if !(x.contains(&0.) && x.contains(&-0.) && vmax.abs() == 0. && smax.abs() == 0.) {\n@@ -511,9 +511,9 @@ macro_rules! impl_float_tests {\n                     });\n                 }\n \n-                fn min_lane<const LANES: usize>() {\n+                fn horizontal_min<const LANES: usize>() {\n                     test_helpers::test_1(&|x| {\n-                        let vmax = Vector::<LANES>::from_array(x).min_lane();\n+                        let vmax = Vector::<LANES>::from_array(x).horizontal_min();\n                         let smax = x.iter().copied().fold(Scalar::NAN, Scalar::min);\n                         // 0 and -0 are treated the same\n                         if !(x.contains(&0.) && x.contains(&-0.) && vmax.abs() == 0. && smax.abs() == 0.) {"}]}