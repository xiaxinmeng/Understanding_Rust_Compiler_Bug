{"sha": "b446c5b67994bd9822e958e3e26122543086c1bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NDZjNWI2Nzk5NGJkOTgyMmU5NThlM2UyNjEyMjU0MzA4NmMxYmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:02:51Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-30T20:02:51Z"}, "message": "rollup merge of #21495: richo/unexported-unmangled-lint\n\nThe usecase is that functions made visible to systems outside of the\nrust ecosystem require the symbol to be visible.\n\nThis adds a lint for functions that are not exported, but also not mangled.\n\nIt has some gotchas:\n\n[ ]: There is fallout in core that needs taking care of\n[ ]: I'm not convinced the error message is correct\n[ ]: It has no tests\n\n~~However, there's an underlying issue which I'd like feedback on- which is that my belief that that non-pub functions would not have their symbols exported, however that seems not to be the case in the first case that this lint turned up in rustc (`rust_fail`), which intuition suggests has been working.~~\n\nThis seems to be a separate bug in rust, wherein the symbols are exported in binaries, but not in rlibs or dylibs. This lint would catch that case.", "tree": {"sha": "316f8a04f62cf15b6ba69e68b628d8a381fa1ece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/316f8a04f62cf15b6ba69e68b628d8a381fa1ece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b446c5b67994bd9822e958e3e26122543086c1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b446c5b67994bd9822e958e3e26122543086c1bc", "html_url": "https://github.com/rust-lang/rust/commit/b446c5b67994bd9822e958e3e26122543086c1bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b446c5b67994bd9822e958e3e26122543086c1bc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ff540ba3771a1c0a396ca3f7a685a94b4e0f622", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ff540ba3771a1c0a396ca3f7a685a94b4e0f622", "html_url": "https://github.com/rust-lang/rust/commit/9ff540ba3771a1c0a396ca3f7a685a94b4e0f622"}, {"sha": "ff25fd660ac7240f4c8379e74108a462a9aaba77", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff25fd660ac7240f4c8379e74108a462a9aaba77", "html_url": "https://github.com/rust-lang/rust/commit/ff25fd660ac7240f4c8379e74108a462a9aaba77"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "4e2ab82cd4e1b98c829521eb0bc9256270a9dd68", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b446c5b67994bd9822e958e3e26122543086c1bc/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b446c5b67994bd9822e958e3e26122543086c1bc/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=b446c5b67994bd9822e958e3e26122543086c1bc", "patch": "@@ -2037,6 +2037,35 @@ impl LintPass for HardwiredLints {\n     }\n }\n \n+declare_lint! {\n+    PRIVATE_NO_MANGLE_FNS,\n+    Warn,\n+    \"functions marked #[no_mangle] should be exported\"\n+}\n+\n+#[derive(Copy)]\n+pub struct PrivateNoMangleFns;\n+\n+impl LintPass for PrivateNoMangleFns {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(PRIVATE_NO_MANGLE_FNS)\n+    }\n+\n+    fn check_item(&mut self, cx: &Context, it: &ast::Item) {\n+        match it.node {\n+            ast::ItemFn(..) => {\n+                if attr::contains_name(it.attrs.as_slice(), \"no_mangle\") &&\n+                       !cx.exported_items.contains(&it.id) {\n+                    let msg = format!(\"function {} is marked #[no_mangle], but not exported\",\n+                                      it.ident);\n+                    cx.span_lint(PRIVATE_NO_MANGLE_FNS, it.span, msg.as_slice());\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+}\n+\n /// Forbids using the `#[feature(...)]` attribute\n #[derive(Copy)]\n pub struct UnstableFeatures;"}, {"sha": "76f874f2428781f23eef4201371c63256558ddd2", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b446c5b67994bd9822e958e3e26122543086c1bc/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b446c5b67994bd9822e958e3e26122543086c1bc/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=b446c5b67994bd9822e958e3e26122543086c1bc", "patch": "@@ -213,6 +213,7 @@ impl LintStore {\n                      UnstableFeatures,\n                      Stability,\n                      UnconditionalRecursion,\n+                     PrivateNoMangleFns,\n         );\n \n         add_builtin_with_new!(sess,"}, {"sha": "757aecaaaff39db28384601e4950f74e28cd4ac8", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b446c5b67994bd9822e958e3e26122543086c1bc/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b446c5b67994bd9822e958e3e26122543086c1bc/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=b446c5b67994bd9822e958e3e26122543086c1bc", "patch": "@@ -160,6 +160,7 @@ pub fn panicking() -> bool {\n // An uninlined, unmangled function upon which to slap yer breakpoints\n #[inline(never)]\n #[no_mangle]\n+#[allow(private_no_mangle_fns)]\n fn rust_panic(cause: Box<Any + Send>) -> ! {\n     rtdebug!(\"begin_unwind()\");\n \n@@ -237,6 +238,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(private_no_mangle_fns)]\n     extern fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -290,6 +292,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(private_no_mangle_fns)]\n     pub extern \"C\" fn rust_eh_personality(\n         version: c_int,\n         actions: uw::_Unwind_Action,\n@@ -343,6 +346,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(private_no_mangle_fns)]\n     extern \"C\" fn rust_eh_personality(\n         state: uw::_Unwind_State,\n         ue_header: *mut uw::_Unwind_Exception,\n@@ -432,6 +436,7 @@ pub mod eabi {\n \n     #[lang=\"eh_personality\"]\n     #[no_mangle] // referenced from rust_try.ll\n+    #[allow(private_no_mangle_fns)]\n     extern \"C\" fn rust_eh_personality(\n         exceptionRecord: *mut EXCEPTION_RECORD,\n         establisherFrame: *mut c_void,"}, {"sha": "3227a78c2ef00f0037b6484c5430163fbe32e6af", "filename": "src/test/compile-fail/lint-unexported-no-mangle.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b446c5b67994bd9822e958e3e26122543086c1bc/src%2Ftest%2Fcompile-fail%2Flint-unexported-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b446c5b67994bd9822e958e3e26122543086c1bc/src%2Ftest%2Fcompile-fail%2Flint-unexported-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unexported-no-mangle.rs?ref=b446c5b67994bd9822e958e3e26122543086c1bc", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-F private_no_mangle_fns\n+\n+// FIXME(#19495) no_mangle'ing main ICE's.\n+#[no_mangle]\n+fn foo() { //~ ERROR function foo is marked #[no_mangle], but not exported\n+}\n+\n+#[no_mangle]\n+pub fn bar()  {\n+}\n+\n+fn main() {\n+    foo();\n+    bar();\n+}"}]}