{"sha": "712c5cadbbb460a0b313a2fbcdaa9d6e10a25b6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMmM1Y2FkYmJiNDYwYTBiMzEzYTJmYmNkYWE5ZDZlMTBhMjViNmI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-18T22:10:19Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-07-22T11:32:56Z"}, "message": "remove the now-unused multiline error code", "tree": {"sha": "b9b3b597b04b111331628e7464f3a43e7dbe8b04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9b3b597b04b111331628e7464f3a43e7dbe8b04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/712c5cadbbb460a0b313a2fbcdaa9d6e10a25b6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/712c5cadbbb460a0b313a2fbcdaa9d6e10a25b6b", "html_url": "https://github.com/rust-lang/rust/commit/712c5cadbbb460a0b313a2fbcdaa9d6e10a25b6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/712c5cadbbb460a0b313a2fbcdaa9d6e10a25b6b/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c569627cd285788509f654a6a2658126ba72e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c569627cd285788509f654a6a2658126ba72e4", "html_url": "https://github.com/rust-lang/rust/commit/37c569627cd285788509f654a6a2658126ba72e4"}], "stats": {"total": 81, "additions": 4, "deletions": 77}, "files": [{"sha": "5901c42b525826881c2746a00e16c45c9bed4847", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 77, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/712c5cadbbb460a0b313a2fbcdaa9d6e10a25b6b/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/712c5cadbbb460a0b313a2fbcdaa9d6e10a25b6b/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=712c5cadbbb460a0b313a2fbcdaa9d6e10a25b6b", "patch": "@@ -126,20 +126,14 @@ impl Session {\n                                                    sp: S,\n                                                    msg: &str)\n                                                    -> DiagnosticBuilder<'a>  {\n-        match split_msg_into_multilines(msg) {\n-            Some(ref msg) => self.diagnostic().struct_span_err(sp, msg),\n-            None => self.diagnostic().struct_span_err(sp, msg),\n-        }\n+        self.diagnostic().struct_span_err(sp, msg)\n     }\n     pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                              sp: S,\n                                                              msg: &str,\n                                                              code: &str)\n                                                              -> DiagnosticBuilder<'a>  {\n-        match split_msg_into_multilines(msg) {\n-            Some(ref msg) => self.diagnostic().struct_span_err_with_code(sp, msg, code),\n-            None => self.diagnostic().struct_span_err_with_code(sp, msg, code),\n-        }\n+        self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a>  {\n         self.diagnostic().struct_err(msg)\n@@ -178,16 +172,10 @@ impl Session {\n         }\n     }\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n-        match split_msg_into_multilines(msg) {\n-            Some(msg) => self.diagnostic().span_err(sp, &msg),\n-            None => self.diagnostic().span_err(sp, msg)\n-        }\n+        self.diagnostic().span_err(sp, msg)\n     }\n     pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) {\n-        match split_msg_into_multilines(msg) {\n-            Some(msg) => self.diagnostic().span_err_with_code(sp, &msg, code),\n-            None => self.diagnostic().span_err_with_code(sp, msg, code)\n-        }\n+        self.diagnostic().span_err_with_code(sp, &msg, code)\n     }\n     pub fn err(&self, msg: &str) {\n         self.diagnostic().err(msg)\n@@ -343,67 +331,6 @@ impl Session {\n     }\n }\n \n-fn split_msg_into_multilines(msg: &str) -> Option<String> {\n-    // Conditions for enabling multi-line errors:\n-    if !msg.contains(\"mismatched types\") &&\n-        !msg.contains(\"type mismatch resolving\") &&\n-        !msg.contains(\"if and else have incompatible types\") &&\n-        !msg.contains(\"if may be missing an else clause\") &&\n-        !msg.contains(\"match arms have incompatible types\") &&\n-        !msg.contains(\"structure constructor specifies a structure of type\") &&\n-        !msg.contains(\"has an incompatible type for trait\") {\n-            return None\n-    }\n-    let first = msg.match_indices(\"expected\").filter(|s| {\n-        let last = msg[..s.0].chars().rev().next();\n-        last == Some(' ') || last == Some('(')\n-    }).map(|(a, b)| (a - 1, a + b.len()));\n-    let second = msg.match_indices(\"found\").filter(|s| {\n-        msg[..s.0].chars().rev().next() == Some(' ')\n-    }).map(|(a, b)| (a - 1, a + b.len()));\n-\n-    let mut new_msg = String::new();\n-    let mut head = 0;\n-\n-    // Insert `\\n` before expected and found.\n-    for (pos1, pos2) in first.zip(second) {\n-        new_msg = new_msg +\n-        // A `(` may be preceded by a space and it should be trimmed\n-                  msg[head..pos1.0].trim_right() + // prefix\n-                  \"\\n\" +                           // insert before first\n-                  &msg[pos1.0..pos1.1] +           // insert what first matched\n-                  &msg[pos1.1..pos2.0] +           // between matches\n-                  \"\\n   \" +                        // insert before second\n-        //           123\n-        // `expected` is 3 char longer than `found`. To align the types,\n-        // `found` gets 3 spaces prepended.\n-                  &msg[pos2.0..pos2.1];            // insert what second matched\n-\n-        head = pos2.1;\n-    }\n-\n-    let mut tail = &msg[head..];\n-    let third = tail.find(\"(values differ\")\n-                   .or(tail.find(\"(lifetime\"))\n-                   .or(tail.find(\"(cyclic type of infinite size\"));\n-    // Insert `\\n` before any remaining messages which match.\n-    if let Some(pos) = third {\n-        // The end of the message may just be wrapped in `()` without\n-        // `expected`/`found`.  Push this also to a new line and add the\n-        // final tail after.\n-        new_msg = new_msg +\n-        // `(` is usually preceded by a space and should be trimmed.\n-                  tail[..pos].trim_right() + // prefix\n-                  \"\\n\" +                     // insert before paren\n-                  &tail[pos..];              // append the tail\n-\n-        tail = \"\";\n-    }\n-\n-    new_msg.push_str(tail);\n-    return Some(new_msg);\n-}\n-\n pub fn build_session(sopts: config::Options,\n                      dep_graph: &DepGraph,\n                      local_crate_source_file: Option<PathBuf>,"}]}