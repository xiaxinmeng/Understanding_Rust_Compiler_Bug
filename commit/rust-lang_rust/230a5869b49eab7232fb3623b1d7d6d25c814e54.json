{"sha": "230a5869b49eab7232fb3623b1d7d6d25c814e54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMGE1ODY5YjQ5ZWFiNzIzMmZiMzYyM2IxZDdkNmQyNWM4MTRlNTQ=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-08-26T22:11:06Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-08-26T22:13:57Z"}, "message": "Bugfix. `--pretty typed` requires expansion. Closes #691.", "tree": {"sha": "320c9b440e32ec4470c258d9b9675634889d1917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320c9b440e32ec4470c258d9b9675634889d1917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/230a5869b49eab7232fb3623b1d7d6d25c814e54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/230a5869b49eab7232fb3623b1d7d6d25c814e54", "html_url": "https://github.com/rust-lang/rust/commit/230a5869b49eab7232fb3623b1d7d6d25c814e54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/230a5869b49eab7232fb3623b1d7d6d25c814e54/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5815f4f1de1642bf6572d4cb52828a5e0ceaca99", "url": "https://api.github.com/repos/rust-lang/rust/commits/5815f4f1de1642bf6572d4cb52828a5e0ceaca99", "html_url": "https://github.com/rust-lang/rust/commit/5815f4f1de1642bf6572d4cb52828a5e0ceaca99"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "e32c38a9eb83634869a12dd107cab23509c0819c", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/230a5869b49eab7232fb3623b1d7d6d25c814e54/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/230a5869b49eab7232fb3623b1d7d6d25c814e54/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=230a5869b49eab7232fb3623b1d7d6d25c814e54", "patch": "@@ -39,7 +39,7 @@ import std::getopts::optflagopt;\n import std::getopts::opt_present;\n import back::link::output_type;\n \n-tag pp_mode { ppm_normal; ppm_typed; ppm_identified; }\n+tag pp_mode { ppm_normal; ppm_expanded; ppm_typed; ppm_identified; }\n \n fn default_configuration(sess: session::session, argv0: str, input: str) ->\n    ast::crate_cfg {\n@@ -169,7 +169,7 @@ fn compile_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n }\n \n fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n-                      ppm: pp_mode, expand: bool) {\n+                      ppm: pp_mode) {\n     fn ann_paren_for_expr(node: &pprust::ann_node) {\n         alt node { pprust::node_expr(s, expr) { pprust::popen(s); } _ { } }\n     }\n@@ -213,10 +213,14 @@ fn pretty_print_input(sess: session::session, cfg: ast::crate_cfg, input: str,\n     let crate = crate_src.crate;\n     let src = crate_src.src;\n \n-    if expand { crate = syntax::ext::expand::expand_crate(sess, crate); }\n     let ann;\n     alt ppm {\n+      ppm_expanded. {\n+        crate = syntax::ext::expand::expand_crate(sess, crate);\n+        ann = pprust::no_ann();\n+      }\n       ppm_typed. {\n+        crate = syntax::ext::expand::expand_crate(sess, crate);\n         let amap = middle::ast_map::map_crate(*crate);\n         let {def_map: def_map, ext_map: ext_map} =\n             resolve::resolve_crate(sess, amap, crate);\n@@ -254,7 +258,6 @@ options:\n     --lib              compile a library crate\n     --static           use or produce static libraries\n     --pretty [type]    pretty-print the input instead of compiling\n-    --expand [type]    expand and pretty-print the input instead of compiling\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n     --noverify         suppress LLVM verification step (slight speedup)\n@@ -414,18 +417,20 @@ fn build_session(sopts: @session::options) -> session::session {\n fn parse_pretty(sess: session::session, name: &str) -> pp_mode {\n     if str::eq(name, \"normal\") {\n         ret ppm_normal;\n+    } else if str::eq(name, \"expanded\") {\n+        ret ppm_expanded;\n     } else if str::eq(name, \"typed\") {\n         ret ppm_typed;\n     } else if str::eq(name, \"identified\") { ret ppm_identified; }\n-    sess.fatal(\"argument to `pretty` or `expand` must be one of `normal`, \" +\n-                   \"`typed`, or `identified`\");\n+    sess.fatal(\"argument to `pretty` must be one of `normal`, `typed`, or \"\n+               + \"`identified`\");\n }\n \n fn opts() -> [getopts::opt] {\n     ret [optflag(\"h\"), optflag(\"help\"), optflag(\"v\"), optflag(\"version\"),\n          optflag(\"glue\"), optflag(\"emit-llvm\"), optflagopt(\"pretty\"),\n-         optflagopt(\"expand\"), optflag(\"ls\"), optflag(\"parse-only\"),\n-         optflag(\"no-trans\"), optflag(\"O\"), optopt(\"OptLevel\"), optmulti(\"L\"),\n+         optflag(\"ls\"), optflag(\"parse-only\"), optflag(\"no-trans\"), \n+         optflag(\"O\"), optopt(\"OptLevel\"), optmulti(\"L\"),\n          optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optflag(\"g\"),\n          optflag(\"save-temps\"), optopt(\"sysroot\"), optflag(\"stats\"),\n          optflag(\"time-passes\"), optflag(\"time-llvm-passes\"),\n@@ -473,26 +478,14 @@ fn main(args: [str]) {\n     let ifile = match.free[0];\n     let saved_out_filename: str = \"\";\n     let cfg = build_configuration(sess, binary, ifile);\n-    let expand =\n-        option::map::<str,\n-                      pp_mode>(bind parse_pretty(sess, _),\n-                               getopts::opt_default(match, \"expand\",\n-                                                    \"normal\"));\n-    alt expand {\n-      some::<pp_mode>(ppm) {\n-        pretty_print_input(sess, cfg, ifile, ppm, true);\n-        ret;\n-      }\n-      none::<pp_mode>. {/* continue */ }\n-    }\n     let pretty =\n         option::map::<str,\n                       pp_mode>(bind parse_pretty(sess, _),\n                                getopts::opt_default(match, \"pretty\",\n                                                     \"normal\"));\n     alt pretty {\n       some::<pp_mode>(ppm) {\n-        pretty_print_input(sess, cfg, ifile, ppm, false);\n+        pretty_print_input(sess, cfg, ifile, ppm);\n         ret;\n       }\n       none::<pp_mode>. {/* continue */ }"}]}