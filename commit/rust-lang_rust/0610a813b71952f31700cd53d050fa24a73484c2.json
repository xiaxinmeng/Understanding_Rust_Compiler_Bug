{"sha": "0610a813b71952f31700cd53d050fa24a73484c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MTBhODEzYjcxOTUyZjMxNzAwY2Q1M2QwNTBmYTI0YTczNDg0YzI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-12T19:27:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-12T19:27:34Z"}, "message": "Merge pull request #573 from RalfJung/rustc-wrapper\n\nuse RUSTC_WRAPPER for the cargo hook", "tree": {"sha": "517dcc5bf35aaf5bb2941bc3dce77bcb78ca4ce7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517dcc5bf35aaf5bb2941bc3dce77bcb78ca4ce7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0610a813b71952f31700cd53d050fa24a73484c2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcEWEmCRBK7hj4Ov3rIwAAdHIIAGsh9GMtIh48TVTewsK6XHVH\nyllqcafQ9nqDpi28ZfpoW51Ljt4k6lRgHlyjvwLgc0CkqzYLJGzhjtg8rE4VzThr\nXQMfI9pAqwV6lCAEGjbbZOVGcRglkuIBCIFSnzIjT75NzV5mMOBN0qCAZD69dkqE\nFeyUpYvadxmetYDmDTRn9yCBVuIzMwjclztwUt1ysNyFXxfsaDwSOrbh3giSQU83\nQGIHPRABBhCMemt11RJKoRN3oSiDXS78Z4XtXFctkyEcKllGvqtlZCV4RFPmJNEl\ncw8MHkYgG57u20556QJ4rPjDbpoWsxe5msh4ZbvGePQozyUHSm/MldgPC31A9Gw=\n=xsIT\n-----END PGP SIGNATURE-----\n", "payload": "tree 517dcc5bf35aaf5bb2941bc3dce77bcb78ca4ce7\nparent ff140da96fe800aaf0995c480814d374abb75374\nparent ee2b5bb6bbd8867bc964a25a464278d61e5ff112\nauthor Ralf Jung <post@ralfj.de> 1544642854 +0100\ncommitter GitHub <noreply@github.com> 1544642854 +0100\n\nMerge pull request #573 from RalfJung/rustc-wrapper\n\nuse RUSTC_WRAPPER for the cargo hook"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0610a813b71952f31700cd53d050fa24a73484c2", "html_url": "https://github.com/rust-lang/rust/commit/0610a813b71952f31700cd53d050fa24a73484c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0610a813b71952f31700cd53d050fa24a73484c2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff140da96fe800aaf0995c480814d374abb75374", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff140da96fe800aaf0995c480814d374abb75374", "html_url": "https://github.com/rust-lang/rust/commit/ff140da96fe800aaf0995c480814d374abb75374"}, {"sha": "ee2b5bb6bbd8867bc964a25a464278d61e5ff112", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2b5bb6bbd8867bc964a25a464278d61e5ff112", "html_url": "https://github.com/rust-lang/rust/commit/ee2b5bb6bbd8867bc964a25a464278d61e5ff112"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "dfc4238a6c03d7078570ac4db5289ce70f9f23e1", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0610a813b71952f31700cd53d050fa24a73484c2/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/0610a813b71952f31700cd53d050fa24a73484c2/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=0610a813b71952f31700cd53d050fa24a73484c2", "patch": "@@ -12,51 +12,22 @@ os:\n dist: xenial\n \n before_script:\n-# install extra stuff for cross-compilation\n+# Linux: install extra stuff for cross-compilation\n - if [[ \"$TRAVIS_OS_NAME\" == linux ]]; then sudo apt update && sudo apt install gcc-multilib; fi\n-# macOS weirdness (https://github.com/travis-ci/travis-ci/issues/6307, https://github.com/travis-ci/travis-ci/issues/10165)\n-- if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then rvm get stable; fi\n # Compute the rust version we use. We do not use \"language: rust\" to have more control here.\n - |\n   if [[ \"$TRAVIS_EVENT_TYPE\" == cron ]]; then\n     RUST_TOOLCHAIN=nightly\n   else\n     RUST_TOOLCHAIN=$(cat rust-version)\n   fi\n-- |\n-  if [ \"$TRAVIS_OS_NAME\" == osx ]; then\n-    export MIRI_SYSROOT_BASE=~/Library/Caches/miri.miri.miri/\n-  else\n-    export MIRI_SYSROOT_BASE=~/.cache/miri/\n-  fi\n-- |\n-  if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then\n-    FOREIGN_TARGET=i686-apple-darwin\n-  else\n-    FOREIGN_TARGET=i686-unknown-linux-gnu\n-  fi\n # install Rust\n - curl https://build.travis-ci.org/files/rustup-init.sh -sSf | sh -s -- -y --default-toolchain \"$RUST_TOOLCHAIN\"\n - export PATH=$HOME/.cargo/bin:$PATH\n - rustc --version\n \n script:\n-- set -e\n-- |\n-  # Build and install miri\n-  cargo build --release --all-features --all-targets &&\n-  cargo install --all-features --force --path .\n-- |\n-  # Get ourselves a MIR-full libstd for the host and a foreign architecture\n-  cargo miri setup &&\n-  cargo miri setup --target \"$FOREIGN_TARGET\"\n-- |\n-  # Test miri with full MIR, on the host and other architectures\n-  MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST cargo test --release --all-features &&\n-  MIRI_SYSROOT=$MIRI_SYSROOT_BASE MIRI_TARGET=$FOREIGN_TARGET cargo test --release --all-features\n-- |\n-  # Test cargo integration\n-  (cd test-cargo-miri && MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST ./run-test.py)\n+- ./travis.sh\n \n notifications:\n   email:"}, {"sha": "6d2dc1dd2f1a0817aa3371e5608b9135d801c159", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0610a813b71952f31700cd53d050fa24a73484c2/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0610a813b71952f31700cd53d050fa24a73484c2/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=0610a813b71952f31700cd53d050fa24a73484c2", "patch": "@@ -305,8 +305,8 @@ fn main() {\n                 _ => {}\n             }\n         }\n-    } else {\n-        // This arm is executed when cargo-miri runs `cargo rustc` with the `RUSTC` env var set to itself:\n+    } else if let Some(\"rustc\") = std::env::args().nth(1).as_ref().map(AsRef::as_ref) {\n+        // This arm is executed when cargo-miri runs `cargo rustc` with the `RUSTC_WRAPPER` env var set to itself:\n         // Dependencies get dispatched to rustc, the final test/binary to miri.\n \n         let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n@@ -332,11 +332,11 @@ fn main() {\n \n         // this conditional check for the --sysroot flag is there so users can call `cargo-miri` directly\n         // without having to pass --sysroot or anything\n+        let rustc_args = std::env::args().skip(2);\n         let mut args: Vec<String> = if std::env::args().any(|s| s == \"--sysroot\") {\n-            std::env::args().skip(1).collect()\n+            rustc_args.collect()\n         } else {\n-            std::env::args()\n-                .skip(1)\n+            rustc_args\n                 .chain(Some(\"--sysroot\".to_owned()))\n                 .chain(Some(sys_root))\n                 .collect()\n@@ -365,6 +365,8 @@ fn main() {\n             Err(ref e) if miri_enabled => panic!(\"error during miri run: {:?}\", e),\n             Err(ref e) => panic!(\"error during rustc call: {:?}\", e),\n         }\n+    } else {\n+        show_error(format!(\"Must be called with either `miri` or `rustc` as first argument.\"))\n     }\n }\n \n@@ -389,7 +391,7 @@ where\n     let path = std::env::current_exe().expect(\"current executable path invalid\");\n     let exit_status = Command::new(\"cargo\")\n         .args(&args)\n-        .env(\"RUSTC\", path)\n+        .env(\"RUSTC_WRAPPER\", path)\n         .spawn()\n         .expect(\"could not run cargo\")\n         .wait()"}, {"sha": "31f0eb0c1386074bea90a3eefab6d3e1ac554348", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0610a813b71952f31700cd53d050fa24a73484c2/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0610a813b71952f31700cd53d050fa24a73484c2/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=0610a813b71952f31700cd53d050fa24a73484c2", "patch": "@@ -3,7 +3,7 @@\n #![test_runner(test_runner)]\n \n use std::slice::SliceConcatExt;\n-use std::path::{PathBuf, Path};\n+use std::path::PathBuf;\n use std::env;\n \n use compiletest_rs as compiletest;"}, {"sha": "e11d3e17c023bc1f41f4e3347a799159c8eea6b1", "filename": "travis.sh", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0610a813b71952f31700cd53d050fa24a73484c2/travis.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0610a813b71952f31700cd53d050fa24a73484c2/travis.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/travis.sh?ref=0610a813b71952f31700cd53d050fa24a73484c2", "patch": "@@ -0,0 +1,30 @@\n+#!/bin/bash\n+set -e\n+\n+# Determine configuration\n+if [ \"$TRAVIS_OS_NAME\" == osx ]; then\n+  export MIRI_SYSROOT_BASE=~/Library/Caches/miri.miri.miri/\n+  FOREIGN_TARGET=i686-apple-darwin\n+else\n+  export MIRI_SYSROOT_BASE=~/.cache/miri/\n+  FOREIGN_TARGET=i686-unknown-linux-gnu\n+fi\n+\n+echo \"Build and install miri\"\n+cargo build --release --all-features --all-targets &&\n+cargo install --all-features --force --path .\n+echo\n+\n+echo \"Get ourselves a MIR-full libstd for the host and a foreign architecture\"\n+cargo miri setup &&\n+cargo miri setup --target \"$FOREIGN_TARGET\"\n+echo\n+\n+echo \"Test miri with full MIR, on the host and other architectures\"\n+MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST cargo test --release --all-features &&\n+MIRI_SYSROOT=$MIRI_SYSROOT_BASE MIRI_TARGET=$FOREIGN_TARGET cargo test --release --all-features\n+echo\n+\n+echo \"Test cargo integration\"\n+(cd test-cargo-miri && MIRI_SYSROOT=$MIRI_SYSROOT_BASE/HOST ./run-test.py)\n+echo"}]}