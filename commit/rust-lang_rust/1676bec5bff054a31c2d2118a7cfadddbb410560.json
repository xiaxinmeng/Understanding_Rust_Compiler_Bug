{"sha": "1676bec5bff054a31c2d2118a7cfadddbb410560", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NzZiZWM1YmZmMDU0YTMxYzJkMjExOGE3Y2ZhZGRkYmI0MTA1NjA=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-31T15:38:27Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-31T18:48:48Z"}, "message": "Utilize new in_arena method instead of hashing for Lifting interned items", "tree": {"sha": "7603f99b376354a2d667754f1c560b953324b933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7603f99b376354a2d667754f1c560b953324b933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1676bec5bff054a31c2d2118a7cfadddbb410560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1676bec5bff054a31c2d2118a7cfadddbb410560", "html_url": "https://github.com/rust-lang/rust/commit/1676bec5bff054a31c2d2118a7cfadddbb410560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1676bec5bff054a31c2d2118a7cfadddbb410560/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e43b378c11d1f575a06607b4264ab07cd2cc79c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e43b378c11d1f575a06607b4264ab07cd2cc79c", "html_url": "https://github.com/rust-lang/rust/commit/0e43b378c11d1f575a06607b4264ab07cd2cc79c"}], "stats": {"total": 52, "additions": 25, "deletions": 27}, "files": [{"sha": "174a93ed23e099abe4c3175b9b338d5335a8a914", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1676bec5bff054a31c2d2118a7cfadddbb410560/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1676bec5bff054a31c2d2118a7cfadddbb410560/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=1676bec5bff054a31c2d2118a7cfadddbb410560", "patch": "@@ -301,6 +301,17 @@ impl DroplessArena {\n         }\n     }\n \n+    pub fn in_arena<T: ?Sized>(&self, ptr: *const T) -> bool {\n+        let ptr = ptr as *const u8 as *mut u8;\n+        for chunk in &*self.chunks.borrow() {\n+            if chunk.start() <= ptr && ptr < chunk.end() {\n+                return true;\n+            }\n+        }\n+\n+        false\n+    }\n+\n     fn align_for<T>(&self) {\n         let align = mem::align_of::<T>();\n         let final_address = ((self.ptr.get() as usize) + align - 1) & !(align - 1);\n@@ -330,12 +341,11 @@ impl DroplessArena {\n                     }\n                 }\n             } else {\n-                new_capacity = needed_bytes;\n+                new_capacity = cmp::max(needed_bytes, PAGE);\n             }\n             chunk = TypedArenaChunk::<u8>::new(new_capacity);\n             self.ptr.set(chunk.start());\n             self.end.set(chunk.end());\n-            self.align_for::<T>();\n             chunks.push(chunk);\n         }\n     }"}, {"sha": "197d7dc4e20c346c8466e8849318f23afc79ed21", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1676bec5bff054a31c2d2118a7cfadddbb410560/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1676bec5bff054a31c2d2118a7cfadddbb410560/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=1676bec5bff054a31c2d2118a7cfadddbb410560", "patch": "@@ -817,10 +817,8 @@ pub trait Lift<'tcx> {\n impl<'a, 'tcx> Lift<'tcx> for Ty<'a> {\n     type Lifted = Ty<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Ty<'tcx>> {\n-        if let Some(&Interned(ty)) = tcx.interners.type_.borrow().get(&self.sty) {\n-            if *self as *const _ == ty as *const _ {\n-                return Some(ty);\n-            }\n+        if tcx.interners.arena.in_arena(*self as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n         }\n         // Also try in the global tcx if we're not that.\n         if !tcx.is_global() {\n@@ -837,10 +835,8 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> {\n         if self.len() == 0 {\n             return Some(Slice::empty());\n         }\n-        if let Some(&Interned(substs)) = tcx.interners.substs.borrow().get(&self[..]) {\n-            if *self as *const _ == substs as *const _ {\n-                return Some(substs);\n-            }\n+        if tcx.interners.arena.in_arena(&self[..] as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n         }\n         // Also try in the global tcx if we're not that.\n         if !tcx.is_global() {\n@@ -854,10 +850,8 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> {\n impl<'a, 'tcx> Lift<'tcx> for &'a Region {\n     type Lifted = &'tcx Region;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx Region> {\n-        if let Some(&Interned(region)) = tcx.interners.region.borrow().get(*self) {\n-            if *self as *const _ == region as *const _ {\n-                return Some(region);\n-            }\n+        if tcx.interners.arena.in_arena(*self as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n         }\n         // Also try in the global tcx if we're not that.\n         if !tcx.is_global() {\n@@ -875,10 +869,8 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Slice<Ty<'a>> {\n         if self.len() == 0 {\n             return Some(Slice::empty());\n         }\n-        if let Some(&Interned(list)) = tcx.interners.type_list.borrow().get(&self[..]) {\n-            if *self as *const _ == list as *const _ {\n-                return Some(list);\n-            }\n+        if tcx.interners.arena.in_arena(*self as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n         }\n         // Also try in the global tcx if we're not that.\n         if !tcx.is_global() {\n@@ -896,10 +888,8 @@ impl<'a, 'tcx> Lift<'tcx> for &'a Slice<ExistentialPredicate<'a>> {\n         if self.is_empty() {\n             return Some(Slice::empty());\n         }\n-        if let Some(&Interned(eps)) = tcx.interners.existential_predicates.borrow().get(&self[..]) {\n-            if *self as *const _ == eps as *const _ {\n-                return Some(eps);\n-            }\n+        if tcx.interners.arena.in_arena(*self as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n         }\n         // Also try in the global tcx if we're not that.\n         if !tcx.is_global() {\n@@ -914,10 +904,8 @@ impl<'a, 'tcx> Lift<'tcx> for &'a BareFnTy<'a> {\n     type Lifted = &'tcx BareFnTy<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>)\n                              -> Option<&'tcx BareFnTy<'tcx>> {\n-        if let Some(&Interned(fty)) = tcx.interners.bare_fn.borrow().get(*self) {\n-            if *self as *const _ == fty as *const _ {\n-                return Some(fty);\n-            }\n+        if tcx.interners.arena.in_arena(*self as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n         }\n         // Also try in the global tcx if we're not that.\n         if !tcx.is_global() {\n@@ -1201,7 +1189,7 @@ macro_rules! intern_method {\n                     }\n                 }\n \n-                let i = ($alloc_to_ret)(self.global_interners.arena.$alloc_method(v));\n+                let i = ($alloc_to_ret)(self.interners.arena.$alloc_method(v));\n                 self.interners.$name.borrow_mut().insert(Interned(i));\n                 i\n             }"}]}