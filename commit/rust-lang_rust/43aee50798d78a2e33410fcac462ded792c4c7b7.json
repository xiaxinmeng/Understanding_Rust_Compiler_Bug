{"sha": "43aee50798d78a2e33410fcac462ded792c4c7b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWVlNTA3OThkNzhhMmUzMzQxMGZjYWM0NjJkZWQ3OTJjNGM3Yjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T04:00:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:29Z"}, "message": "librustc: De-`@mut` `cstore::CStore`", "tree": {"sha": "5105dcae795655c29dffcef70134c8faf761c2a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5105dcae795655c29dffcef70134c8faf761c2a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43aee50798d78a2e33410fcac462ded792c4c7b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43aee50798d78a2e33410fcac462ded792c4c7b7", "html_url": "https://github.com/rust-lang/rust/commit/43aee50798d78a2e33410fcac462ded792c4c7b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43aee50798d78a2e33410fcac462ded792c4c7b7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d97ca4aad2add186526d7f5b5d87a473fa3f4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d97ca4aad2add186526d7f5b5d87a473fa3f4a", "html_url": "https://github.com/rust-lang/rust/commit/79d97ca4aad2add186526d7f5b5d87a473fa3f4a"}], "stats": {"total": 57, "additions": 29, "deletions": 28}, "files": [{"sha": "7829fad6969019776bf3f4a3cb6a8ee4222a0876", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=43aee50798d78a2e33410fcac462ded792c4c7b7", "patch": "@@ -854,7 +854,7 @@ pub fn build_session_(sopts: @session::options,\n     let target_cfg = build_target_config(sopts, demitter);\n     let p_s = parse::new_parse_sess_special_handler(span_diagnostic_handler,\n                                                     cm);\n-    let cstore = @mut CStore::new(token::get_ident_interner());\n+    let cstore = @CStore::new(token::get_ident_interner());\n     let filesearch = filesearch::mk_filesearch(\n         &sopts.maybe_sysroot,\n         sopts.target_triple,"}, {"sha": "86a16f9720048ac468a52598a8d742d184f30258", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=43aee50798d78a2e33410fcac462ded792c4c7b7", "patch": "@@ -201,7 +201,7 @@ pub enum OutputStyle {\n pub struct Session_ {\n     targ_cfg: @config,\n     opts: @options,\n-    cstore: @mut metadata::cstore::CStore,\n+    cstore: @metadata::cstore::CStore,\n     parse_sess: @mut ParseSess,\n     codemap: @codemap::CodeMap,\n     // For a library crate, this is always none"}, {"sha": "ffb6eb367927398634fb511dc06a929f49dc9195", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=43aee50798d78a2e33410fcac462ded792c4c7b7", "patch": "@@ -30,19 +30,19 @@ pub struct StaticMethodInfo {\n     vis: ast::visibility,\n }\n \n-pub fn get_symbol(cstore: @mut cstore::CStore, def: ast::DefId) -> ~str {\n+pub fn get_symbol(cstore: @cstore::CStore, def: ast::DefId) -> ~str {\n     let cdata = cstore.get_crate_data(def.crate).data();\n     return decoder::get_symbol(cdata, def.node);\n }\n \n-pub fn get_type_param_count(cstore: @mut cstore::CStore, def: ast::DefId)\n+pub fn get_type_param_count(cstore: @cstore::CStore, def: ast::DefId)\n                          -> uint {\n     let cdata = cstore.get_crate_data(def.crate).data();\n     return decoder::get_type_param_count(cdata, def.node);\n }\n \n /// Iterates over all the language items in the given crate.\n-pub fn each_lang_item(cstore: @mut cstore::CStore,\n+pub fn each_lang_item(cstore: @cstore::CStore,\n                       cnum: ast::CrateNum,\n                       f: |ast::NodeId, uint| -> bool)\n                       -> bool {\n@@ -51,7 +51,7 @@ pub fn each_lang_item(cstore: @mut cstore::CStore,\n }\n \n /// Iterates over each child of the given item.\n-pub fn each_child_of_item(cstore: @mut cstore::CStore,\n+pub fn each_child_of_item(cstore: @cstore::CStore,\n                           def_id: ast::DefId,\n                           callback: |decoder::DefLike,\n                                      ast::Ident,\n@@ -68,7 +68,7 @@ pub fn each_child_of_item(cstore: @mut cstore::CStore,\n }\n \n /// Iterates over each top-level crate item.\n-pub fn each_top_level_item_of_crate(cstore: @mut cstore::CStore,\n+pub fn each_top_level_item_of_crate(cstore: @cstore::CStore,\n                                     cnum: ast::CrateNum,\n                                     callback: |decoder::DefLike,\n                                                ast::Ident,\n@@ -131,21 +131,21 @@ pub fn get_method(tcx: ty::ctxt, def: ast::DefId) -> ty::Method {\n     decoder::get_method(tcx.cstore.intr, cdata, def.node, tcx)\n }\n \n-pub fn get_method_name_and_explicit_self(cstore: @mut cstore::CStore,\n+pub fn get_method_name_and_explicit_self(cstore: @cstore::CStore,\n                                          def: ast::DefId)\n                                      -> (ast::Ident, ast::explicit_self_)\n {\n     let cdata = cstore.get_crate_data(def.crate);\n     decoder::get_method_name_and_explicit_self(cstore.intr, cdata, def.node)\n }\n \n-pub fn get_trait_method_def_ids(cstore: @mut cstore::CStore,\n+pub fn get_trait_method_def_ids(cstore: @cstore::CStore,\n                                 def: ast::DefId) -> ~[ast::DefId] {\n     let cdata = cstore.get_crate_data(def.crate);\n     decoder::get_trait_method_def_ids(cdata, def.node)\n }\n \n-pub fn get_item_variances(cstore: @mut cstore::CStore,\n+pub fn get_item_variances(cstore: @cstore::CStore,\n                           def: ast::DefId) -> ty::ItemVariances {\n     let cdata = cstore.get_crate_data(def.crate);\n     decoder::get_item_variances(cdata, def.node)\n@@ -165,27 +165,27 @@ pub fn get_supertraits(tcx: ty::ctxt, def: ast::DefId) -> ~[@ty::TraitRef] {\n     decoder::get_supertraits(cdata, def.node, tcx)\n }\n \n-pub fn get_type_name_if_impl(cstore: @mut cstore::CStore, def: ast::DefId)\n+pub fn get_type_name_if_impl(cstore: @cstore::CStore, def: ast::DefId)\n                           -> Option<ast::Ident> {\n     let cdata = cstore.get_crate_data(def.crate);\n     decoder::get_type_name_if_impl(cdata, def.node)\n }\n \n-pub fn get_static_methods_if_impl(cstore: @mut cstore::CStore,\n+pub fn get_static_methods_if_impl(cstore: @cstore::CStore,\n                                   def: ast::DefId)\n                                -> Option<~[StaticMethodInfo]> {\n     let cdata = cstore.get_crate_data(def.crate);\n     decoder::get_static_methods_if_impl(cstore.intr, cdata, def.node)\n }\n \n-pub fn get_item_attrs(cstore: @mut cstore::CStore,\n+pub fn get_item_attrs(cstore: @cstore::CStore,\n                       def_id: ast::DefId,\n                       f: |~[@ast::MetaItem]|) {\n     let cdata = cstore.get_crate_data(def_id.crate);\n     decoder::get_item_attrs(cdata, def_id.node, f)\n }\n \n-pub fn get_struct_fields(cstore: @mut cstore::CStore,\n+pub fn get_struct_fields(cstore: @cstore::CStore,\n                          def: ast::DefId)\n                       -> ~[ty::field_ty] {\n     let cdata = cstore.get_crate_data(def.crate);\n@@ -247,43 +247,43 @@ pub fn get_impl_vtables(tcx: ty::ctxt,\n     decoder::get_impl_vtables(cdata, def.node, tcx)\n }\n \n-pub fn get_impl_method(cstore: @mut cstore::CStore,\n+pub fn get_impl_method(cstore: @cstore::CStore,\n                        def: ast::DefId,\n                        mname: ast::Ident)\n                     -> Option<ast::DefId> {\n     let cdata = cstore.get_crate_data(def.crate);\n     decoder::get_impl_method(cstore.intr, cdata, def.node, mname)\n }\n \n-pub fn get_item_visibility(cstore: @mut cstore::CStore,\n+pub fn get_item_visibility(cstore: @cstore::CStore,\n                            def_id: ast::DefId)\n                         -> ast::visibility {\n     let cdata = cstore.get_crate_data(def_id.crate);\n     decoder::get_item_visibility(cdata, def_id.node)\n }\n \n-pub fn get_native_libraries(cstore: @mut cstore::CStore,\n+pub fn get_native_libraries(cstore: @cstore::CStore,\n                             crate_num: ast::CrateNum)\n                                 -> ~[(cstore::NativeLibaryKind, ~str)] {\n     let cdata = cstore.get_crate_data(crate_num);\n     decoder::get_native_libraries(cdata)\n }\n \n-pub fn each_impl(cstore: @mut cstore::CStore,\n+pub fn each_impl(cstore: @cstore::CStore,\n                  crate_num: ast::CrateNum,\n                  callback: |ast::DefId|) {\n     let cdata = cstore.get_crate_data(crate_num);\n     decoder::each_impl(cdata, callback)\n }\n \n-pub fn each_implementation_for_type(cstore: @mut cstore::CStore,\n+pub fn each_implementation_for_type(cstore: @cstore::CStore,\n                                     def_id: ast::DefId,\n                                     callback: |ast::DefId|) {\n     let cdata = cstore.get_crate_data(def_id.crate);\n     decoder::each_implementation_for_type(cdata, def_id.node, callback)\n }\n \n-pub fn each_implementation_for_trait(cstore: @mut cstore::CStore,\n+pub fn each_implementation_for_trait(cstore: @cstore::CStore,\n                                      def_id: ast::DefId,\n                                      callback: |ast::DefId|) {\n     let cdata = cstore.get_crate_data(def_id.crate);\n@@ -293,7 +293,7 @@ pub fn each_implementation_for_trait(cstore: @mut cstore::CStore,\n /// If the given def ID describes a method belonging to a trait (either a\n /// default method or an implementation of a trait method), returns the ID of\n /// the trait that the method belongs to. Otherwise, returns `None`.\n-pub fn get_trait_of_method(cstore: @mut cstore::CStore,\n+pub fn get_trait_of_method(cstore: @cstore::CStore,\n                            def_id: ast::DefId,\n                            tcx: ty::ctxt)\n                            -> Option<ast::DefId> {"}, {"sha": "1804e8b1247ea9d950f6edbc31acfd25ffeb84fd", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=43aee50798d78a2e33410fcac462ded792c4c7b7", "patch": "@@ -99,7 +99,7 @@ impl CStore {\n         decoder::get_crate_vers(cdata.data())\n     }\n \n-    pub fn set_crate_data(&mut self, cnum: ast::CrateNum, data: @crate_metadata) {\n+    pub fn set_crate_data(&self, cnum: ast::CrateNum, data: @crate_metadata) {\n         let mut metas = self.metas.borrow_mut();\n         metas.get().insert(cnum, data);\n     }\n@@ -116,7 +116,7 @@ impl CStore {\n         }\n     }\n \n-    pub fn add_used_crate_source(&mut self, src: CrateSource) {\n+    pub fn add_used_crate_source(&self, src: CrateSource) {\n         let mut used_crate_sources = self.used_crate_sources.borrow_mut();\n         if !used_crate_sources.get().contains(&src) {\n             used_crate_sources.get().push(src);\n@@ -135,7 +135,8 @@ impl CStore {\n             .collect()\n     }\n \n-    pub fn add_used_library(&mut self, lib: ~str, kind: NativeLibaryKind) -> bool {\n+    pub fn add_used_library(&self, lib: ~str, kind: NativeLibaryKind)\n+                            -> bool {\n         assert!(!lib.is_empty());\n         let mut used_libraries = self.used_libraries.borrow_mut();\n         if used_libraries.get().iter().any(|&(ref x, _)| x == &lib) {\n@@ -150,7 +151,7 @@ impl CStore {\n         &self.used_libraries\n     }\n \n-    pub fn add_used_link_args(&mut self, args: &str) {\n+    pub fn add_used_link_args(&self, args: &str) {\n         let mut used_link_args = self.used_link_args.borrow_mut();\n         for s in args.split(' ') {\n             used_link_args.get().push(s.to_owned());\n@@ -161,7 +162,7 @@ impl CStore {\n         &self.used_link_args\n     }\n \n-    pub fn add_extern_mod_stmt_cnum(&mut self,\n+    pub fn add_extern_mod_stmt_cnum(&self,\n                                     emod_id: ast::NodeId,\n                                     cnum: ast::CrateNum) {\n         let mut extern_mod_crate_map = self.extern_mod_crate_map.borrow_mut();"}, {"sha": "33bf24fcbc666959573f0bb114f43843d83d35a1", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=43aee50798d78a2e33410fcac462ded792c4c7b7", "patch": "@@ -63,7 +63,7 @@ pub struct EncodeParams<'a> {\n     item_symbols: &'a RefCell<HashMap<ast::NodeId, ~str>>,\n     non_inlineable_statics: &'a RefCell<HashSet<ast::NodeId>>,\n     link_meta: &'a LinkMeta,\n-    cstore: @mut cstore::CStore,\n+    cstore: @cstore::CStore,\n     encode_inlined_item: encode_inlined_item<'a>,\n     reachable: @mut HashSet<ast::NodeId>,\n }"}, {"sha": "2f13443e0719ea4b0db12e9162e7eda26ef5cb1a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43aee50798d78a2e33410fcac462ded792c4c7b7/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=43aee50798d78a2e33410fcac462ded792c4c7b7", "patch": "@@ -266,7 +266,7 @@ struct ctxt_ {\n     diag: @mut syntax::diagnostic::span_handler,\n     interner: RefCell<HashMap<intern_key, ~t_box_>>,\n     next_id: @mut uint,\n-    cstore: @mut metadata::cstore::CStore,\n+    cstore: @metadata::cstore::CStore,\n     sess: session::Session,\n     def_map: resolve::DefMap,\n "}]}