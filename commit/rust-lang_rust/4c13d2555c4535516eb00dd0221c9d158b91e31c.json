{"sha": "4c13d2555c4535516eb00dd0221c9d158b91e31c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjMTNkMjU1NWM0NTM1NTE2ZWIwMGRkMDIyMWM5ZDE1OGI5MWUzMWM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-14T01:21:31Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T17:37:24Z"}, "message": "Add E0746 explanation to the index", "tree": {"sha": "9d5747e60b75d5274ca2992059230a554d933362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d5747e60b75d5274ca2992059230a554d933362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c13d2555c4535516eb00dd0221c9d158b91e31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c13d2555c4535516eb00dd0221c9d158b91e31c", "html_url": "https://github.com/rust-lang/rust/commit/4c13d2555c4535516eb00dd0221c9d158b91e31c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c13d2555c4535516eb00dd0221c9d158b91e31c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93293c56e85a2afdde8664bc08303d5f5853ba29", "url": "https://api.github.com/repos/rust-lang/rust/commits/93293c56e85a2afdde8664bc08303d5f5853ba29", "html_url": "https://github.com/rust-lang/rust/commit/93293c56e85a2afdde8664bc08303d5f5853ba29"}], "stats": {"total": 142, "additions": 140, "deletions": 2}, "files": [{"sha": "180ccb15977dd5126b2b9617f75efbedb166fe1f", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c13d2555c4535516eb00dd0221c9d158b91e31c/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c13d2555c4535516eb00dd0221c9d158b91e31c/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=4c13d2555c4535516eb00dd0221c9d158b91e31c", "patch": "@@ -414,6 +414,7 @@ E0742: include_str!(\"./error_codes/E0742.md\"),\n E0743: include_str!(\"./error_codes/E0743.md\"),\n E0744: include_str!(\"./error_codes/E0744.md\"),\n E0745: include_str!(\"./error_codes/E0745.md\"),\n+E0746: include_str!(\"./error_codes/E0746.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard\n@@ -608,5 +609,4 @@ E0745: include_str!(\"./error_codes/E0745.md\"),\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n     E0727, // `async` generators are not yet supported\n     E0739, // invalid track_caller application/syntax\n-    E0746, // `dyn Trait` return type\n }"}, {"sha": "538c9d720d71b373fe205f1ace1226bb8b901d53", "filename": "src/librustc_error_codes/error_codes/E0746.md", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/4c13d2555c4535516eb00dd0221c9d158b91e31c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "raw_url": "https://github.com/rust-lang/rust/raw/4c13d2555c4535516eb00dd0221c9d158b91e31c/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0746.md?ref=4c13d2555c4535516eb00dd0221c9d158b91e31c", "patch": "@@ -0,0 +1,137 @@\n+Return types cannot be `dyn Trait`s as they must be `Sized`.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0746\n+trait T {\n+    fn bar(&self);\n+}\n+struct S(usize);\n+impl T for S {\n+    fn bar(&self) {}\n+}\n+\n+// Having the trait `T` as return type is invalid because bare traits do not\n+have a statically known size:\n+fn foo() -> dyn T {\n+    S(42)\n+}\n+```\n+\n+To avoid the error there are a couple of options.\n+\n+If there is a single type involved, you can use [`impl Trait`]:\n+\n+```\n+# trait T {\n+#     fn bar(&self);\n+# }\n+# struct S(usize);\n+# impl T for S {\n+#     fn bar(&self) {}\n+# }\n+// The compiler will select `S(usize)` as the materialized return type of this\n+// function, but callers will only be able to access associated items from `T`.\n+fn foo() -> impl T {\n+    S(42)\n+}\n+```\n+\n+If there are multiple types involved, the only way you care to interact with\n+them is through the trait's interface and having to rely on dynamic dispatch is\n+acceptable, then you can use [trait objects] with `Box`, or other container\n+types like `Rc` or `Arc`:\n+\n+```\n+# trait T {\n+#     fn bar(&self);\n+# }\n+# struct S(usize);\n+# impl T for S {\n+#     fn bar(&self) {}\n+# }\n+struct O(&'static str);\n+impl T for O {\n+    fn bar(&self) {}\n+}\n+\n+// This now returns a \"trait object\" and callers are only be able to access\n+// associated items from `T`.\n+fn foo(x: bool) -> Box<dyn T> {\n+    if x {\n+        Box::new(S(42))\n+    } else {\n+        Box::new(O(\"val\"))\n+    }\n+}\n+```\n+\n+Finally, if you wish to still be able to access the original type, you can\n+create a new `enum` with a variant for each type:\n+\n+```\n+# trait T {\n+#     fn bar(&self);\n+# }\n+# struct S(usize);\n+# impl T for S {\n+#     fn bar(&self) {}\n+# }\n+# struct O(&'static str);\n+# impl T for O {\n+#     fn bar(&self) {}\n+# }\n+enum E {\n+    S(S),\n+    O(O),\n+}\n+\n+// The caller can access the original types directly, but it needs to match on\n+// the returned `enum E`.\n+fn foo(x: bool) -> E {\n+    if x {\n+        E::S(S(42))\n+    } else {\n+        E::O(O(\"val\"))\n+    }\n+}\n+```\n+\n+You can even implement the `trait` on the returned `enum` so the callers\n+*don't* have to match on the returned value to invoke the associated items:\n+\n+```\n+# trait T {\n+#     fn bar(&self);\n+# }\n+# struct S(usize);\n+# impl T for S {\n+#     fn bar(&self) {}\n+# }\n+# struct O(&'static str);\n+# impl T for O {\n+#     fn bar(&self) {}\n+# }\n+# enum E {\n+#     S(S),\n+#     O(O),\n+# }\n+impl T for E {\n+    fn bar(&self) {\n+        match self {\n+            E::S(s) => s.bar(),\n+            E::O(o) => o.bar(),\n+        }\n+    }\n+}\n+```\n+\n+If you decide to use trait objects, be aware that these rely on\n+[dynamic dispatch], which has performance implications, as the compiler needs\n+to emit code that will figure out which method to call *at runtime* instead of\n+during compilation. Using trait objects we are trading flexibility for\n+performance.\n+\n+[`impl Trait`]: https://doc.rust-lang.org/book/ch10-02-traits.html#returning-types-that-implement-traits\n+[trait objects]: https://doc.rust-lang.org/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types\n+[dynamic dispatch]: https://doc.rust-lang.org/book/ch17-02-trait-objects.html#trait-objects-perform-dynamic-dispatch"}, {"sha": "1c88ce64749ae27e275edc6f6ca45f0ca1657341", "filename": "src/test/ui/error-codes/E0746.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c13d2555c4535516eb00dd0221c9d158b91e31c/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c13d2555c4535516eb00dd0221c9d158b91e31c/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0746.stderr?ref=4c13d2555c4535516eb00dd0221c9d158b91e31c", "patch": "@@ -24,3 +24,4 @@ LL | fn bar() -> impl Trait {\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0746`."}, {"sha": "ff7438e9affc13d35a5a625ccf49a934d534068e", "filename": "src/test/ui/impl-trait/dyn-trait-return-should-be-impl-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c13d2555c4535516eb00dd0221c9d158b91e31c/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c13d2555c4535516eb00dd0221c9d158b91e31c/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-return-should-be-impl-trait.stderr?ref=4c13d2555c4535516eb00dd0221c9d158b91e31c", "patch": "@@ -116,5 +116,5 @@ LL | fn bat() -> impl Trait {\n \n error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0277, E0308.\n+Some errors have detailed explanations: E0277, E0308, E0746.\n For more information about an error, try `rustc --explain E0277`."}]}