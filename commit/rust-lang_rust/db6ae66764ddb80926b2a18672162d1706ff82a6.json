{"sha": "db6ae66764ddb80926b2a18672162d1706ff82a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNmFlNjY3NjRkZGI4MDkyNmIyYTE4NjcyMTYyZDE3MDZmZjgyYTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-20T15:18:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-24T23:21:20Z"}, "message": "Make traits with assoc types invariant in their inputs.", "tree": {"sha": "6cb2f24f17b1c10ababe13b620f25b9f51ecd904", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb2f24f17b1c10ababe13b620f25b9f51ecd904"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db6ae66764ddb80926b2a18672162d1706ff82a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db6ae66764ddb80926b2a18672162d1706ff82a6", "html_url": "https://github.com/rust-lang/rust/commit/db6ae66764ddb80926b2a18672162d1706ff82a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db6ae66764ddb80926b2a18672162d1706ff82a6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd15657d93c932611f3aee351b6521cdfa77731", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd15657d93c932611f3aee351b6521cdfa77731", "html_url": "https://github.com/rust-lang/rust/commit/0bd15657d93c932611f3aee351b6521cdfa77731"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "40ccab510c4f5d5a63940585064dde05ce9481c4", "filename": "src/librustc/middle/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db6ae66764ddb80926b2a18672162d1706ff82a6/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6ae66764ddb80926b2a18672162d1706ff82a6/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fcombine.rs?ref=db6ae66764ddb80926b2a18672162d1706ff82a6", "patch": "@@ -265,13 +265,7 @@ pub trait Combine<'tcx> : Sized {\n             Err(ty::terr_projection_name_mismatched(\n                 expected_found(self, a.item_name, b.item_name)))\n         } else {\n-            // Note that the trait refs for the projection must be\n-            // *equal*. This is because there is no inherent\n-            // relationship between `<T as Foo>::Bar` and `<U as\n-            // Foo>::Bar` that we can derive based on how `T` relates\n-            // to `U`. Issue #21726 contains further discussion and\n-            // in-depth examples.\n-            let trait_ref = try!(self.equate().trait_refs(&*a.trait_ref, &*b.trait_ref));\n+            let trait_ref = try!(self.trait_refs(&*a.trait_ref, &*b.trait_ref));\n             Ok(ty::ProjectionTy { trait_ref: Rc::new(trait_ref), item_name: a.item_name })\n         }\n     }"}, {"sha": "1fba4a21ccd376a61ab08fbc52609e1cb9b32b50", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/db6ae66764ddb80926b2a18672162d1706ff82a6/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6ae66764ddb80926b2a18672162d1706ff82a6/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=db6ae66764ddb80926b2a18672162d1706ff82a6", "patch": "@@ -203,6 +203,56 @@\n //! failure, but rather because the target type `Foo<Y>` is itself just\n //! not well-formed. Basically we get to assume well-formedness of all\n //! types involved before considering variance.\n+//!\n+//! ### Associated types\n+//!\n+//! Any trait with an associated type is invariant with respect to all\n+//! of its inputs. To see why this makes sense, consider what\n+//! subtyping for a trait reference means:\n+//!\n+//!    <T as Trait> <: <U as Trait>\n+//!\n+//! means that if I know that `T as Trait`,\n+//! I also know that `U as\n+//! Trait`. Moreover, if you think of it as\n+//! dictionary passing style, it means that\n+//! a dictionary for `<T as Trait>` is safe\n+//! to use where a dictionary for `<U as\n+//! Trait>` is expected.\n+//!\n+//! The problem is that when you can\n+//! project types out from `<T as Trait>`,\n+//! the relationship to types projected out\n+//! of `<U as Trait>` is completely unknown\n+//! unless `T==U` (see #21726 for more\n+//! details). Making `Trait` invariant\n+//! ensures that this is true.\n+//!\n+//! *Historical note: we used to preserve this invariant another way,\n+//! by tweaking the subtyping rules and requiring that when a type `T`\n+//! appeared as part of a projection, that was considered an invariant\n+//! location, but this version does away with the need for those\n+//! somewhat \"special-case-feeling\" rules.*\n+//!\n+//! Another related reason is that if we didn't make traits with\n+//! associated types invariant, then projection is no longer a\n+//! function with a single result. Consider:\n+//!\n+//! ```\n+//! trait Identity { type Out; fn foo(&self); }\n+//! impl<T> Identity for T { type Out = T; ... }\n+//! ```\n+//!\n+//! Now if I have `<&'static () as Identity>::Out`, this can be\n+//! validly derived as `&'a ()` for any `'a`:\n+//!\n+//!    <&'a () as Identity> <: <&'static () as Identity>\n+//!    if &'static () < : &'a ()   -- Identity is contravariant in Self\n+//!    if 'static : 'a             -- Subtyping rules for relations\n+//!\n+//! This change otoh means that `<'static () as Identity>::Out` is\n+//! always `&'static ()` (which might then be upcast to `'a ()`,\n+//! separately). This was helpful in solving #21750.\n \n use self::VarianceTerm::*;\n use self::ParamKind::*;\n@@ -613,7 +663,18 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ConstraintContext<'a, 'tcx> {\n                                 &method.fty.sig,\n                                 self.covariant);\n                         }\n-                        ty::TypeTraitItem(_) => {}\n+                        ty::TypeTraitItem(ref data) => {\n+                            // Any trait with an associated type is\n+                            // invariant with respect to all of its\n+                            // inputs. See length discussion in the comment\n+                            // on this module.\n+                            let projection_ty = ty::mk_projection(tcx,\n+                                                                  trait_def.trait_ref.clone(),\n+                                                                  data.name);\n+                            self.add_constraints_from_ty(&trait_def.generics,\n+                                                         projection_ty,\n+                                                         self.invariant);\n+                        }\n                     }\n                 }\n             }\n@@ -893,7 +954,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     trait_def.generics.types.as_slice(),\n                     trait_def.generics.regions.as_slice(),\n                     trait_ref.substs,\n-                    self.invariant);\n+                    variance);\n             }\n \n             ty::ty_trait(ref data) => {"}]}