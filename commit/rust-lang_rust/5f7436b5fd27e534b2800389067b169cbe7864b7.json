{"sha": "5f7436b5fd27e534b2800389067b169cbe7864b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNzQzNmI1ZmQyN2U1MzRiMjgwMDM4OTA2N2IxNjljYmU3ODY0Yjc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-08T17:16:43Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-08T18:21:04Z"}, "message": "Be consistent when describing a move as a 'partial' in diagnostics\n\nWhen an error occurs due to a partial move, we would use the world\n\"partial\" in some parts of the error message, but not in others. This\ncommit ensures that we use the word 'partial' in either all or none of\nthe diagnostic messages.\n\nAdditionally, we no longer describe a move out of a `Box` via `*` as\na 'partial move'. This was a pre-existing issue, but became more\nnoticable when the word 'partial' is used in more places.", "tree": {"sha": "04de4f47c453ae3e53a6ca21e84f44dda28cbfb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04de4f47c453ae3e53a6ca21e84f44dda28cbfb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f7436b5fd27e534b2800389067b169cbe7864b7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl8u7RAACgkQtAh+UQ6Y\nsWT6EhAAkh9+1cqRQmcS5iDSc7CN8/5RjnMKf4631YP8czgLFRJMUCyuYTSbBtTa\nc0rxSj5QjwOSkyhLgfql9RL0JsxrnA0zU55rrLPqG+4HwofV1c9wmtdRp6KyToeZ\n9BsrnxaAirsqQypeusmVCfx+QNAwEd00CSuKD1RdHzmL1TTU8oItnnq+GXoT/84c\nEHwZ0xHRDmlYE5LApnbZJm8g2wNbrVbHs3qQOTXifkz+VqMPSYnc2oict01yHUYZ\nQbKJIK56RD/S+FrDvafjPEZufw0D8cLbRSLV9lka0aEkjSBHxaOT8ddaJv32wFey\nVwIHChOGKTCAjErcBVUjzMiXt/YaHUs7M0rYBgOxlr8xlZZObWwGEJzefUhcwjmH\n90AifIJpzyQ/BTmbtQtfEV+edfQZBk9b3evOZnbsSVfeBzjczbo9hTMXWuhgio6Z\nBAc7AbR73jRISEjnH3nWApP7wNfChmcmKgNSEbatGkXFsaT9MB8t6U6S8WpRxuYO\nq+bR0TSI5LMWaMPKGvDTg+DKhUN8co169t6qkpMeO7zNqttVQxdwTTdawrpO1iY1\nS6ZdyvYFOeUyV/wRloyDT7t5JTFJfc9X4YEwR3yNxr3Gp5bulPsxk+ZnS5qr0VUo\ndLyT4vgG6w1nEqtCX7YTOd1x5SIXojq72XfOwMn2L1QCFz7njIY=\n=PhZD\n-----END PGP SIGNATURE-----", "payload": "tree 04de4f47c453ae3e53a6ca21e84f44dda28cbfb7\nparent c989ac132a81503ceaaa1054da0a3a8c5c305ef0\nauthor Aaron Hill <aa1ronham@gmail.com> 1596907003 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1596910864 -0400\n\nBe consistent when describing a move as a 'partial' in diagnostics\n\nWhen an error occurs due to a partial move, we would use the world\n\"partial\" in some parts of the error message, but not in others. This\ncommit ensures that we use the word 'partial' in either all or none of\nthe diagnostic messages.\n\nAdditionally, we no longer describe a move out of a `Box` via `*` as\na 'partial move'. This was a pre-existing issue, but became more\nnoticable when the word 'partial' is used in more places.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7436b5fd27e534b2800389067b169cbe7864b7", "html_url": "https://github.com/rust-lang/rust/commit/5f7436b5fd27e534b2800389067b169cbe7864b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f7436b5fd27e534b2800389067b169cbe7864b7/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c989ac132a81503ceaaa1054da0a3a8c5c305ef0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c989ac132a81503ceaaa1054da0a3a8c5c305ef0", "html_url": "https://github.com/rust-lang/rust/commit/c989ac132a81503ceaaa1054da0a3a8c5c305ef0"}], "stats": {"total": 557, "additions": 300, "deletions": 257}, "files": [{"sha": "1f4bebadefbd5a2702dbeaaf4572385b02f21fee", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 56, "deletions": 21, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -113,23 +113,32 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n             }\n \n-            let msg = \"\"; //FIXME: add \"partially \" or \"collaterally \"\n+            let is_partial_move = move_site_vec.iter().any(|move_site| {\n+                let move_out = self.move_data.moves[(*move_site).moi];\n+                let moved_place = &self.move_data.move_paths[move_out.path].place;\n+                // `*(_1)` where `_1` is a `Box` is actually a move out.\n+                let is_box_move = moved_place.as_ref().projection == &[ProjectionElem::Deref]\n+                    && self.body.local_decls[moved_place.local].ty.is_box();\n+\n+                !is_box_move\n+                    && used_place != moved_place.as_ref()\n+                    && used_place.is_prefix_of(moved_place.as_ref())\n+            });\n+\n+            let partial_str = if is_partial_move { \"partial \" } else { \"\" };\n+            let partially_str = if is_partial_move { \"partially \" } else { \"\" };\n \n             let mut err = self.cannot_act_on_moved_value(\n                 span,\n                 desired_action.as_noun(),\n-                msg,\n+                partially_str,\n                 self.describe_place_with_options(moved_place, IncludingDowncast(true)),\n             );\n \n             self.add_moved_or_invoked_closure_note(location, used_place, &mut err);\n \n             let mut is_loop_move = false;\n-            let is_partial_move = move_site_vec.iter().any(|move_site| {\n-                let move_out = self.move_data.moves[(*move_site).moi];\n-                let moved_place = &self.move_data.move_paths[move_out.path].place;\n-                used_place != moved_place.as_ref() && used_place.is_prefix_of(moved_place.as_ref())\n-            });\n+\n             for move_site in &move_site_vec {\n                 let move_out = self.move_data.moves[(*move_site).moi];\n                 let moved_place = &self.move_data.move_paths[move_out.path].place;\n@@ -142,13 +151,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 if location == move_out.source {\n                     err.span_label(\n                         span,\n-                        format!(\"value moved{} here, in previous iteration of loop\", move_msg),\n+                        format!(\n+                            \"value {}moved{} here, in previous iteration of loop\",\n+                            partially_str, move_msg\n+                        ),\n                     );\n                     is_loop_move = true;\n                 } else if move_site.traversed_back_edge {\n                     err.span_label(\n                         move_span,\n-                        format!(\"value moved{} here, in previous iteration of loop\", move_msg),\n+                        format!(\n+                            \"value {}moved{} here, in previous iteration of loop\",\n+                            partially_str, move_msg\n+                        ),\n                     );\n                 } else {\n                     if let UseSpans::FnSelfUse { var_span, fn_call_span, fn_span, kind } =\n@@ -162,7 +177,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             FnSelfUseKind::FnOnceCall => {\n                                 err.span_label(\n                                     fn_call_span,\n-                                    &format!(\"{} moved due to this call\", place_name),\n+                                    &format!(\n+                                        \"{} {}moved due to this call\",\n+                                        place_name, partially_str\n+                                    ),\n                                 );\n                                 err.span_note(\n                                     var_span,\n@@ -172,7 +190,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             FnSelfUseKind::Operator { self_arg } => {\n                                 err.span_label(\n                                     fn_call_span,\n-                                    &format!(\"{} moved due to usage in operator\", place_name),\n+                                    &format!(\n+                                        \"{} {}moved due to usage in operator\",\n+                                        place_name, partially_str\n+                                    ),\n                                 );\n                                 if self.fn_self_span_reported.insert(fn_span) {\n                                     err.span_note(\n@@ -186,14 +207,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                     err.span_label(\n                                         fn_call_span,\n                                         &format!(\n-                                            \"{} moved due to this implicit call to `.into_iter()`\",\n-                                            place_name\n+                                            \"{} {}moved due to this implicit call to `.into_iter()`\",\n+                                            place_name, partially_str\n                                         ),\n                                     );\n                                 } else {\n                                     err.span_label(\n                                         fn_call_span,\n-                                        &format!(\"{} moved due to this method call\", place_name),\n+                                        &format!(\n+                                            \"{} {}moved due to this method call\",\n+                                            place_name, partially_str\n+                                        ),\n                                     );\n                                 }\n                                 // Avoid pointing to the same function in multiple different\n@@ -207,10 +231,17 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             }\n                         }\n                     } else {\n-                        err.span_label(move_span, format!(\"value moved{} here\", move_msg));\n+                        err.span_label(\n+                            move_span,\n+                            format!(\"value {}moved{} here\", partially_str, move_msg),\n+                        );\n                         move_spans.var_span_label(\n                             &mut err,\n-                            format!(\"variable moved due to use{}\", move_spans.describe()),\n+                            format!(\n+                                \"variable {}moved due to use{}\",\n+                                partially_str,\n+                                move_spans.describe()\n+                            ),\n                         );\n                     }\n                 }\n@@ -250,9 +281,9 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 err.span_label(\n                     span,\n                     format!(\n-                        \"value {} here {}\",\n+                        \"value {} here after {}move\",\n                         desired_action.as_verb_in_past_tense(),\n-                        if is_partial_move { \"after partial move\" } else { \"after move\" },\n+                        partial_str\n                     ),\n                 );\n             }\n@@ -321,7 +352,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 } else {\n                     None\n                 };\n-                self.note_type_does_not_implement_copy(&mut err, &note_msg, ty, span);\n+                self.note_type_does_not_implement_copy(&mut err, &note_msg, ty, span, partial_str);\n             }\n \n             if let Some((_, mut old_err)) =\n@@ -1398,8 +1429,12 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 for moi in &self.move_data.loc_map[location] {\n                     debug!(\"report_use_of_moved_or_uninitialized: moi={:?}\", moi);\n-                    if mpis.contains(&self.move_data.moves[*moi].path) {\n-                        debug!(\"report_use_of_moved_or_uninitialized: found\");\n+                    let path = self.move_data.moves[*moi].path;\n+                    if mpis.contains(&path) {\n+                        debug!(\n+                            \"report_use_of_moved_or_uninitialized: found {:?}\",\n+                            move_paths[path].place\n+                        );\n                         result.push(MoveSite { moi: *moi, traversed_back_edge: is_back_edge });\n \n                         // Strictly speaking, we could continue our DFS here. There may be"}, {"sha": "79e8b000f3eb8023d35879598e536e5f1dd9d040", "filename": "src/librustc_mir/borrow_check/diagnostics/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmod.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -412,10 +412,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         place_desc: &str,\n         ty: Ty<'tcx>,\n         span: Option<Span>,\n+        move_prefix: &str,\n     ) {\n         let message = format!(\n-            \"move occurs because {} has type `{}`, which does not implement the `Copy` trait\",\n-            place_desc, ty,\n+            \"{}move occurs because {} has type `{}`, which does not implement the `Copy` trait\",\n+            move_prefix, place_desc, ty,\n         );\n         if let Some(span) = span {\n             err.span_label(span, message);"}, {"sha": "1c8da212f108853740a30545914f865f6d07afbb", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -445,7 +445,13 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         None => \"value\".to_string(),\n                     };\n \n-                    self.note_type_does_not_implement_copy(err, &place_desc, place_ty, Some(span));\n+                    self.note_type_does_not_implement_copy(\n+                        err,\n+                        &place_desc,\n+                        place_ty,\n+                        Some(span),\n+                        \"\",\n+                    );\n                 } else {\n                     binds_to.sort();\n                     binds_to.dedup();\n@@ -467,7 +473,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     Some(desc) => format!(\"`{}`\", desc),\n                     None => \"value\".to_string(),\n                 };\n-                self.note_type_does_not_implement_copy(err, &place_desc, place_ty, Some(span));\n+                self.note_type_does_not_implement_copy(err, &place_desc, place_ty, Some(span), \"\");\n \n                 use_spans.args_span_label(err, format!(\"move out of {} occurs here\", place_desc));\n                 use_spans\n@@ -529,6 +535,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     &format!(\"`{}`\", self.local_names[*local].unwrap()),\n                     bind_to.ty,\n                     Some(binding_span),\n+                    \"\",\n                 );\n             }\n         }"}, {"sha": "b7a976a0af6967188eb6f1537723d863cb466930", "filename": "src/test/ui/async-await/issues/issue-66958-non-copy-infered-type-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-66958-non-copy-infered-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-66958-non-copy-infered-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-66958-non-copy-infered-type-arg.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -8,7 +8,7 @@ impl<S> Ia<S> {\n \n     async fn crash(self) {\n         Self::partial(self.0);\n-        Self::full(self); //~ ERROR use of moved value: `self`\n+        Self::full(self); //~ ERROR use of partially moved value: `self`\n     }\n }\n "}, {"sha": "e2a73539874e03577b0d46da8d5797da04ef7abb", "filename": "src/test/ui/async-await/issues/issue-66958-non-copy-infered-type-arg.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-66958-non-copy-infered-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-66958-non-copy-infered-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-66958-non-copy-infered-type-arg.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -1,12 +1,12 @@\n-error[E0382]: use of moved value: `self`\n+error[E0382]: use of partially moved value: `self`\n   --> $DIR/issue-66958-non-copy-infered-type-arg.rs:11:20\n    |\n LL |         Self::partial(self.0);\n-   |                       ------ value moved here\n+   |                       ------ value partially moved here\n LL |         Self::full(self);\n    |                    ^^^^ value used here after partial move\n    |\n-   = note: move occurs because `self.0` has type `S`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `self.0` has type `S`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "489bf70d920a3b0ae3ee2ec88b44f32e1e1ffeed", "filename": "src/test/ui/binding/issue-53114-borrow-checks.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -8,26 +8,26 @@ LL |     drop(m);\n LL |     match m { _ => { } } // #53114: should eventually be accepted too\n    |           ^ value used here after move\n \n-error[E0382]: use of moved value: `mm`\n+error[E0382]: use of partially moved value: `mm`\n   --> $DIR/issue-53114-borrow-checks.rs:27:11\n    |\n LL |     match mm { (_x, _) => { } }\n-   |                 -- value moved here\n+   |                 -- value partially moved here\n LL |     match mm { (_, _y) => { } }\n    |           ^^ value used here after partial move\n    |\n-   = note: move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `mm`\n+error[E0382]: use of partially moved value: `mm`\n   --> $DIR/issue-53114-borrow-checks.rs:29:11\n    |\n LL |     match mm { (_, _y) => { } }\n-   |                    -- value moved here\n+   |                    -- value partially moved here\n LL |\n LL |     match mm { (_, _) => { } }\n    |           ^^ value used here after partial move\n    |\n-   = note: move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `m`\n   --> $DIR/issue-53114-borrow-checks.rs:36:16\n@@ -39,26 +39,26 @@ LL |     drop(m);\n LL |     if let _ = m { } // #53114: should eventually be accepted too\n    |                ^ value used here after move\n \n-error[E0382]: use of moved value: `mm`\n+error[E0382]: use of partially moved value: `mm`\n   --> $DIR/issue-53114-borrow-checks.rs:41:22\n    |\n LL |     if let (_x, _) = mm { }\n-   |             -- value moved here\n+   |             -- value partially moved here\n LL |     if let (_, _y) = mm { }\n    |                      ^^ value used here after partial move\n    |\n-   = note: move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `mm`\n+error[E0382]: use of partially moved value: `mm`\n   --> $DIR/issue-53114-borrow-checks.rs:43:21\n    |\n LL |     if let (_, _y) = mm { }\n-   |                -- value moved here\n+   |                -- value partially moved here\n LL |\n LL |     if let (_, _) = mm { }\n    |                     ^^ value used here after partial move\n    |\n-   = note: move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n \n error: aborting due to 6 previous errors\n "}, {"sha": "ced4d002b384e7b5c276406eb01a5c5bb2c062fe", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -20,7 +20,7 @@ fn move_out_from_begin_field_and_end() {\n         [_, _, (_x, _)] => {}\n     }\n     match a {\n-        [.., _y] => {} //~ ERROR use of moved value\n+        [.., _y] => {} //~ ERROR use of partially moved value\n     }\n }\n \n@@ -42,7 +42,7 @@ fn move_out_by_const_index_and_subslice() {\n         [_x, _, _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_y @ .., _, _] => {}\n     }\n }\n@@ -53,7 +53,7 @@ fn move_out_by_const_index_end_and_subslice() {\n         [.., _x] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_, _, _y @ ..] => {}\n     }\n }\n@@ -64,7 +64,7 @@ fn move_out_by_const_index_field_and_subslice() {\n         [(_x, _), _, _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_y @ .., _, _] => {}\n     }\n }\n@@ -75,7 +75,7 @@ fn move_out_by_const_index_end_field_and_subslice() {\n         [.., (_x, _)] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_, _, _y @ ..] => {}\n     }\n }\n@@ -108,7 +108,7 @@ fn move_out_by_subslice_and_subslice() {\n         [x @ .., _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_, _y @ ..] => {}\n     }\n }"}, {"sha": "d63f03a71dbfeb8bec2e90bd3f1c6c6decc5ae2e", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -9,16 +9,16 @@ LL |         [.., _y] => {}\n    |\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a[..]`\n+error[E0382]: use of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-match.rs:23:14\n    |\n LL |         [_, _, (_x, _)] => {}\n-   |                 -- value moved here\n+   |                 -- value partially moved here\n ...\n LL |         [.., _y] => {}\n    |              ^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:33:15\n@@ -31,49 +31,49 @@ LL |         [.., (_y, _)] => {}\n    |\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:44:11\n    |\n LL |         [_x, _, _] => {}\n-   |          -- value moved here\n+   |          -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:55:11\n    |\n LL |         [.., _x] => {}\n-   |              -- value moved here\n+   |              -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:66:11\n    |\n LL |         [(_x, _), _, _] => {}\n-   |           -- value moved here\n+   |           -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:77:11\n    |\n LL |         [.., (_x, _)] => {}\n-   |               -- value moved here\n+   |               -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:89:11\n@@ -97,16 +97,16 @@ LL |         [.., (_x, _)] => {}\n    |\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:110:11\n    |\n LL |         [x @ .., _] => {}\n-   |          ------ value moved here\n+   |          ------ value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error: aborting due to 10 previous errors\n "}, {"sha": "97db70f34cc7405eb52f6b32e15cbbddfc9a1cee", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -15,7 +15,7 @@ fn move_out_from_begin_and_one_from_end() {\n         [_, _, _x] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [.., _y, _] => {}\n     }\n }\n@@ -26,7 +26,7 @@ fn move_out_from_begin_field_and_end_field() {\n         [_, _, (_x, _)] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [.., (_, _y)] => {}\n     }\n }\n@@ -39,7 +39,7 @@ fn move_out_by_const_index_and_subslice() {\n         [_x, _, _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_, _y @ ..] => {}\n     }\n }\n@@ -50,7 +50,7 @@ fn move_out_by_const_index_end_and_subslice() {\n         [.., _x] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_y @ .., _] => {}\n     }\n }\n@@ -61,7 +61,7 @@ fn move_out_by_const_index_field_and_subslice() {\n         [(_x, _), _, _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_, _y @ ..] => {}\n     }\n }\n@@ -72,7 +72,7 @@ fn move_out_by_const_index_end_field_and_subslice() {\n         [.., (_x, _)] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_y @ .., _] => {}\n     }\n }\n@@ -83,7 +83,7 @@ fn move_out_by_const_subslice_and_index_field() {\n         [_, _y @ ..] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [(_x, _), _, _] => {}\n     }\n }\n@@ -94,7 +94,7 @@ fn move_out_by_const_subslice_and_end_index_field() {\n         [_y @ .., _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [.., (_x, _)] => {}\n     }\n }\n@@ -107,7 +107,7 @@ fn move_out_by_subslice_and_subslice() {\n         [x @ .., _, _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_, _y @ ..] => {}\n     }\n }"}, {"sha": "7c675149894a11fc6e15beaf04cc35c83f9b2d15", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -1,101 +1,101 @@\n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:17:11\n    |\n LL |         [_, _, _x] => {}\n-   |                -- value moved here\n+   |                -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:28:11\n    |\n LL |         [_, _, (_x, _)] => {}\n-   |                 -- value moved here\n+   |                 -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:41:11\n    |\n LL |         [_x, _, _] => {}\n-   |          -- value moved here\n+   |          -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:52:11\n    |\n LL |         [.., _x] => {}\n-   |              -- value moved here\n+   |              -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:63:11\n    |\n LL |         [(_x, _), _, _] => {}\n-   |           -- value moved here\n+   |           -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:74:11\n    |\n LL |         [.., (_x, _)] => {}\n-   |               -- value moved here\n+   |               -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:85:11\n    |\n LL |         [_, _y @ ..] => {}\n-   |             ------- value moved here\n+   |             ------- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:96:11\n    |\n LL |         [_y @ .., _] => {}\n-   |          ------- value moved here\n+   |          ------- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:109:11\n    |\n LL |         [x @ .., _, _] => {}\n-   |          ------ value moved here\n+   |          ------ value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error: aborting due to 9 previous errors\n "}, {"sha": "806354b0116ce58084dcf38f46a67f2e7fdfa867", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -9,16 +9,16 @@ LL |         [.., ref _y] => {}\n    |\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `a[..]`\n+error[E0382]: borrow of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:23:14\n    |\n LL |         [_, _, (_x, _)] => {}\n-   |                 -- value moved here\n+   |                 -- value partially moved here\n ...\n LL |         [.., ref _y] => {}\n    |              ^^^^^^ value borrowed here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:33:15\n@@ -31,49 +31,49 @@ LL |         [.., (ref _y, _)] => {}\n    |\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:44:11\n    |\n LL |         [_x, _, _] => {}\n-   |          -- value moved here\n+   |          -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:55:11\n    |\n LL |         [.., _x] => {}\n-   |              -- value moved here\n+   |              -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:66:11\n    |\n LL |         [(_x, _), _, _] => {}\n-   |           -- value moved here\n+   |           -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:77:11\n    |\n LL |         [.., (_x, _)] => {}\n-   |               -- value moved here\n+   |               -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:89:11\n@@ -97,60 +97,60 @@ LL |         [.., (ref _x, _)] => {}\n    |\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:110:11\n    |\n LL |         [x @ .., _] => {}\n-   |          ------ value moved here\n+   |          ------ value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:123:5\n    |\n LL |         [_, _, _x] => {}\n-   |                -- value moved here\n+   |                -- value partially moved here\n LL |     }\n LL |     a[2] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:131:5\n    |\n LL |         [_, _, (_x, _)] => {}\n-   |                 -- value moved here\n+   |                 -- value partially moved here\n LL |     }\n LL |     a[2].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:139:5\n    |\n LL |         [_, _, _x @ ..] => {}\n-   |                ------- value moved here\n+   |                ------- value partially moved here\n LL |     }\n LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:147:5\n    |\n LL |         [_, _, _x @ ..] => {}\n-   |                ------- value moved here\n+   |                ------- value partially moved here\n LL |     }\n LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error: aborting due to 14 previous errors\n "}, {"sha": "017ca90b81a3f75e218d82fabcc6808b2d36be29", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -15,7 +15,7 @@ fn move_out_from_begin_and_one_from_end() {\n         [_, _, _x] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [.., ref _y, _] => {}\n     }\n }\n@@ -26,7 +26,7 @@ fn move_out_from_begin_field_and_end_field() {\n         [_, _, (_x, _)] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [.., (_, ref _y)] => {}\n     }\n }\n@@ -39,7 +39,7 @@ fn move_out_by_const_index_and_subslice() {\n         [_x, _, _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_, ref _y @ ..] => {}\n     }\n }\n@@ -50,7 +50,7 @@ fn move_out_by_const_index_end_and_subslice() {\n         [.., _x] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [ref _y @ .., _] => {}\n     }\n }\n@@ -61,7 +61,7 @@ fn move_out_by_const_index_field_and_subslice() {\n         [(_x, _), _, _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_, ref _y @ ..] => {}\n     }\n }\n@@ -72,7 +72,7 @@ fn move_out_by_const_index_end_field_and_subslice() {\n         [.., (_x, _)] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [ref _y @ .., _] => {}\n     }\n }\n@@ -83,7 +83,7 @@ fn move_out_by_const_subslice_and_index_field() {\n         [_, _y @ ..] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [(ref _x, _), _, _] => {}\n     }\n }\n@@ -94,7 +94,7 @@ fn move_out_by_const_subslice_and_end_index_field() {\n         [_y @ .., _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [.., (ref _x, _)] => {}\n     }\n }\n@@ -107,7 +107,7 @@ fn move_out_by_subslice_and_subslice() {\n         [x @ .., _, _] => {}\n     }\n     match a {\n-        //~^ ERROR use of moved value\n+        //~^ ERROR use of partially moved value\n         [_, ref _y @ ..] => {}\n     }\n }"}, {"sha": "53f815db140d2c220dc2dd1d70cd0f12ddff0f73", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -1,101 +1,101 @@\n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:17:11\n    |\n LL |         [_, _, _x] => {}\n-   |                -- value moved here\n+   |                -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:28:11\n    |\n LL |         [_, _, (_x, _)] => {}\n-   |                 -- value moved here\n+   |                 -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:41:11\n    |\n LL |         [_x, _, _] => {}\n-   |          -- value moved here\n+   |          -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:52:11\n    |\n LL |         [.., _x] => {}\n-   |              -- value moved here\n+   |              -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:63:11\n    |\n LL |         [(_x, _), _, _] => {}\n-   |           -- value moved here\n+   |           -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:74:11\n    |\n LL |         [.., (_x, _)] => {}\n-   |               -- value moved here\n+   |               -- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:85:11\n    |\n LL |         [_, _y @ ..] => {}\n-   |             ------- value moved here\n+   |             ------- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:96:11\n    |\n LL |         [_y @ .., _] => {}\n-   |          ------- value moved here\n+   |          ------- value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:109:11\n    |\n LL |         [x @ .., _, _] => {}\n-   |          ------ value moved here\n+   |          ------ value partially moved here\n LL |     }\n LL |     match a {\n    |           ^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error: aborting due to 9 previous errors\n "}, {"sha": "004cc433b3459b24f583824905ab390084a525c7", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -8,15 +8,15 @@ LL |     let [.., ref _y] = a;\n    |\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `a[..]`\n+error[E0382]: borrow of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:16:14\n    |\n LL |     let [_, _, (_x, _)] = a;\n-   |                 -- value moved here\n+   |                 -- value partially moved here\n LL |     let [.., ref _y] = a;\n    |              ^^^^^^ value borrowed here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-use.rs:22:15\n@@ -28,45 +28,45 @@ LL |     let [.., (ref _y, _)] = a;\n    |\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `a`\n+error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:30:10\n    |\n LL |     let [_x, _, _] = a;\n-   |          -- value moved here\n+   |          -- value partially moved here\n LL |     let [ref _y @ .., _, _] = a;\n    |          ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `a`\n+error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:36:16\n    |\n LL |     let [.., _x] = a;\n-   |              -- value moved here\n+   |              -- value partially moved here\n LL |     let [_, _, ref _y @ ..] = a;\n    |                ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `a`\n+error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:42:10\n    |\n LL |     let [(_x, _), _, _] = a;\n-   |           -- value moved here\n+   |           -- value partially moved here\n LL |     let [ref _y @ .., _, _] = a;\n    |          ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `a`\n+error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:48:16\n    |\n LL |     let [.., (_x, _)] = a;\n-   |               -- value moved here\n+   |               -- value partially moved here\n LL |     let [_, _, ref _y @ ..] = a;\n    |                ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:54:11\n@@ -88,55 +88,55 @@ LL |     let [.., (ref _x, _)] = a;\n    |\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: borrow of moved value: `a`\n+error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:68:13\n    |\n LL |     let [x @ .., _] = a;\n-   |          ------ value moved here\n+   |          ------ value partially moved here\n LL |     let [_, ref _y @ ..] = a;\n    |             ^^^^^^^^^^^ value borrowed here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:76:5\n    |\n LL |     let [_, _, _x] = a;\n-   |                -- value moved here\n+   |                -- value partially moved here\n LL |     a[2] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:82:5\n    |\n LL |     let [_, _, (_x, _)] = a;\n-   |                 -- value moved here\n+   |                 -- value partially moved here\n LL |     a[2].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:88:5\n    |\n LL |     let [_, _, _x @ ..] = a;\n-   |                ------- value moved here\n+   |                ------- value partially moved here\n LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:94:5\n    |\n LL |     let [_, _, _x @ ..] = a;\n-   |                ------- value moved here\n+   |                ------- value partially moved here\n LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error: aborting due to 14 previous errors\n "}, {"sha": "d3eb3e9f76144c8a7f93b16da853e8c1c3f969ce", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -8,15 +8,15 @@ LL |     let [.., _y] = a;\n    |\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a[..]`\n+error[E0382]: use of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array.rs:16:14\n    |\n LL |     let [_, _, (_x, _)] = a;\n-   |                 -- value moved here\n+   |                 -- value partially moved here\n LL |     let [.., _y] = a;\n    |              ^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:22:15\n@@ -28,45 +28,45 @@ LL |     let [.., (_y, _)] = a;\n    |\n    = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:30:10\n    |\n LL |     let [_x, _, _] = a;\n-   |          -- value moved here\n+   |          -- value partially moved here\n LL |     let [_y @ .., _, _] = a;\n    |          ^^^^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:36:16\n    |\n LL |     let [.., _x] = a;\n-   |              -- value moved here\n+   |              -- value partially moved here\n LL |     let [_, _, _y @ ..] = a;\n    |                ^^^^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:42:10\n    |\n LL |     let [(_x, _), _, _] = a;\n-   |           -- value moved here\n+   |           -- value partially moved here\n LL |     let [_y @ .., _, _] = a;\n    |          ^^^^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:48:16\n    |\n LL |     let [.., (_x, _)] = a;\n-   |               -- value moved here\n+   |               -- value partially moved here\n LL |     let [_, _, _y @ ..] = a;\n    |                ^^^^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:54:11\n@@ -88,15 +88,15 @@ LL |     let [.., (_x, _)] = a;\n    |\n    = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `a`\n+error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:68:13\n    |\n LL |     let [x @ .., _] = a;\n-   |          ------ value moved here\n+   |          ------ value partially moved here\n LL |     let [_, _y @ ..] = a;\n    |             ^^^^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error: aborting due to 10 previous errors\n "}, {"sha": "7951a5b1b5d70e6dfd2d236f4cadc78299608b7d", "filename": "src/test/ui/borrowck/borrowck-uninit-field-access.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-uninit-field-access.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -14,15 +14,15 @@ LL |     let _ = line1.origin.x + 1;\n    |\n    = note: move occurs because `line1.origin` has type `Point`, which does not implement the `Copy` trait\n \n-error[E0382]: use of moved value: `line2`\n+error[E0382]: use of partially moved value: `line2`\n   --> $DIR/borrowck-uninit-field-access.rs:29:5\n    |\n LL |     let _moved = (line2.origin, line2.middle);\n-   |                                 ------------ value moved here\n+   |                                 ------------ value partially moved here\n LL |     line2.consume();\n    |     ^^^^^ value used here after partial move\n    |\n-   = note: move occurs because `line2.middle` has type `Point`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `line2.middle` has type `Point`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b5c275bf28caf444b9fdd144cda811cd67b4a681", "filename": "src/test/ui/borrowck/move-in-pattern-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -15,9 +15,9 @@ fn main() {\n     if let Some(mut x) = s {\n         x = S;\n     }\n-    foo(s); //~ ERROR use of moved value: `s`\n+    foo(s); //~ ERROR use of partially moved value: `s`\n     let mut e = E::V { s: S };\n     let E::V { s: mut x } = e;\n     x = S;\n-    bar(e); //~ ERROR use of moved value: `e`\n+    bar(e); //~ ERROR use of partially moved value: `e`\n }"}, {"sha": "17bc5492756e6fd47d9ec486e2fc979268b81b4b", "filename": "src/test/ui/borrowck/move-in-pattern-mut.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -1,28 +1,28 @@\n-error[E0382]: use of moved value: `s`\n+error[E0382]: use of partially moved value: `s`\n   --> $DIR/move-in-pattern-mut.rs:18:9\n    |\n LL |     if let Some(mut x) = s {\n-   |                 ----- value moved here\n+   |                 ----- value partially moved here\n ...\n LL |     foo(s);\n    |         ^ value used here after partial move\n    |\n-   = note: move occurs because value has type `S`, which does not implement the `Copy` trait\n+   = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving `s.0`\n    |\n LL |     if let Some(ref mut x) = s {\n    |                 ^^^\n \n-error[E0382]: use of moved value: `e`\n+error[E0382]: use of partially moved value: `e`\n   --> $DIR/move-in-pattern-mut.rs:22:9\n    |\n LL |     let E::V { s: mut x } = e;\n-   |                   ----- value moved here\n+   |                   ----- value partially moved here\n LL |     x = S;\n LL |     bar(e);\n    |         ^ value used here after partial move\n    |\n-   = note: move occurs because value has type `S`, which does not implement the `Copy` trait\n+   = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving `e.s`\n    |\n LL |     let E::V { s: ref mut x } = e;"}, {"sha": "145893d3343bcf8feacded7ab4ac59a2bf1b905e", "filename": "src/test/ui/borrowck/move-in-pattern.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.fixed?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -16,9 +16,9 @@ fn main() {\n     if let Some(ref x) = s {\n         let _ = x;\n     }\n-    foo(s); //~ ERROR use of moved value: `s`\n+    foo(s); //~ ERROR use of partially moved value: `s`\n     let e = E::V { s: S };\n     let E::V { s: ref x } = e;\n     let _ = x;\n-    bar(e); //~ ERROR use of moved value: `e`\n+    bar(e); //~ ERROR use of partially moved value: `e`\n }"}, {"sha": "14851d0f6fcffeaee16abf16277a86f431bef061", "filename": "src/test/ui/borrowck/move-in-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -16,9 +16,9 @@ fn main() {\n     if let Some(x) = s {\n         let _ = x;\n     }\n-    foo(s); //~ ERROR use of moved value: `s`\n+    foo(s); //~ ERROR use of partially moved value: `s`\n     let e = E::V { s: S };\n     let E::V { s: x } = e;\n     let _ = x;\n-    bar(e); //~ ERROR use of moved value: `e`\n+    bar(e); //~ ERROR use of partially moved value: `e`\n }"}, {"sha": "21ba92f1fc41cbac70c52b26758e437bee2a232a", "filename": "src/test/ui/borrowck/move-in-pattern.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -1,28 +1,28 @@\n-error[E0382]: use of moved value: `s`\n+error[E0382]: use of partially moved value: `s`\n   --> $DIR/move-in-pattern.rs:19:9\n    |\n LL |     if let Some(x) = s {\n-   |                 - value moved here\n+   |                 - value partially moved here\n ...\n LL |     foo(s);\n    |         ^ value used here after partial move\n    |\n-   = note: move occurs because value has type `S`, which does not implement the `Copy` trait\n+   = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving `s.0`\n    |\n LL |     if let Some(ref x) = s {\n    |                 ^^^\n \n-error[E0382]: use of moved value: `e`\n+error[E0382]: use of partially moved value: `e`\n   --> $DIR/move-in-pattern.rs:23:9\n    |\n LL |     let E::V { s: x } = e;\n-   |                   - value moved here\n+   |                   - value partially moved here\n LL |     let _ = x;\n LL |     bar(e);\n    |         ^ value used here after partial move\n    |\n-   = note: move occurs because value has type `S`, which does not implement the `Copy` trait\n+   = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving `e.s`\n    |\n LL |     let E::V { s: ref x } = e;"}, {"sha": "4417fb926d96dff7cdb93903b019e86fa0560369", "filename": "src/test/ui/moves/moves-based-on-type-cyclic-types-issue-4821.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -10,7 +10,7 @@ fn foo(node: Box<List>) -> isize {\n         Some(right) => consume(right),\n         None => 0\n     };\n-    consume(node) + r //~ ERROR use of moved value: `node`\n+    consume(node) + r //~ ERROR use of partially moved value: `node`\n }\n \n fn consume(v: Box<List>) -> isize {"}, {"sha": "49964e2a947c813069671b8d6790e2f7ea530b20", "filename": "src/test/ui/moves/moves-based-on-type-cyclic-types-issue-4821.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -1,13 +1,13 @@\n-error[E0382]: use of moved value: `node`\n+error[E0382]: use of partially moved value: `node`\n   --> $DIR/moves-based-on-type-cyclic-types-issue-4821.rs:13:13\n    |\n LL |         Some(right) => consume(right),\n-   |              ----- value moved here\n+   |              ----- value partially moved here\n ...\n LL |     consume(node) + r\n    |             ^^^^ value used here after partial move\n    |\n-   = note: move occurs because value has type `std::boxed::Box<List>`, which does not implement the `Copy` trait\n+   = note: partial move occurs because value has type `std::boxed::Box<List>`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving `node.next.0`\n    |\n LL |         Some(ref right) => consume(right),"}, {"sha": "75fc6085f0aaaf3e168a7decdf1f99f7cbc604bf", "filename": "src/test/ui/moves/moves-based-on-type-match-bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -13,9 +13,9 @@ fn f10() {\n         Foo {f} => {}\n     };\n \n-    touch(&x); //~ ERROR borrow of moved value: `x`\n+    touch(&x); //~ ERROR borrow of partially moved value: `x`\n     //~^ value borrowed here after partial move\n-    //~| move occurs because `x.f` has type `std::string::String`\n+    //~| partial move occurs because `x.f` has type `std::string::String`\n }\n \n fn main() {}"}, {"sha": "2ee8d8d0b755cebdee8c5dcf25c90039ed7e1844", "filename": "src/test/ui/moves/moves-based-on-type-match-bindings.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -1,13 +1,13 @@\n-error[E0382]: borrow of moved value: `x`\n+error[E0382]: borrow of partially moved value: `x`\n   --> $DIR/moves-based-on-type-match-bindings.rs:16:11\n    |\n LL |         Foo {f} => {}\n-   |              - value moved here\n+   |              - value partially moved here\n ...\n LL |     touch(&x);\n    |           ^^ value borrowed here after partial move\n    |\n-   = note: move occurs because `x.f` has type `std::string::String`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `x.f` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "d266c6bb6584ffc019980b83dc180f802e12bea1", "filename": "src/test/ui/nll/move-subpaths-moves-root.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = (vec![1, 2, 3], );\n     drop(x.0);\n-    drop(x); //~ ERROR use of moved value\n+    drop(x); //~ ERROR use of partially moved value\n }"}, {"sha": "d86801cf296b599b2cb82cfdc28ec577d7cdc0fa", "filename": "src/test/ui/nll/move-subpaths-moves-root.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmove-subpaths-moves-root.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -1,12 +1,12 @@\n-error[E0382]: use of moved value: `x`\n+error[E0382]: use of partially moved value: `x`\n   --> $DIR/move-subpaths-moves-root.rs:4:10\n    |\n LL |     drop(x.0);\n-   |          --- value moved here\n+   |          --- value partially moved here\n LL |     drop(x);\n    |          ^ value used here after partial move\n    |\n-   = note: move occurs because `x.0` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n+   = note: partial move occurs because `x.0` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "346d118f0f9a9dd91140c4442cefcaf195ba2c4b", "filename": "src/test/ui/ref-suggestion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fref-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fref-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fref-suggestion.rs?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -13,5 +13,5 @@ fn main() {\n         (Some(y), ()) => {},\n         _ => {},\n     }\n-    x; //~ ERROR use of moved value\n+    x; //~ ERROR use of partially moved value\n }"}, {"sha": "313ad087c348ddb83353054702e3f2cd9dbf2529", "filename": "src/test/ui/ref-suggestion.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fref-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Fref-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fref-suggestion.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -18,16 +18,16 @@ LL |     let mut y = x;\n LL |     x;\n    |     ^ value used here after move\n \n-error[E0382]: use of moved value: `x`\n+error[E0382]: use of partially moved value: `x`\n   --> $DIR/ref-suggestion.rs:16:5\n    |\n LL |         (Some(y), ()) => {},\n-   |               - value moved here\n+   |               - value partially moved here\n ...\n LL |     x;\n    |     ^ value used here after partial move\n    |\n-   = note: move occurs because value has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n+   = note: partial move occurs because value has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n help: borrow this field in the pattern to avoid moving `x.0.0`\n    |\n LL |         (Some(ref y), ()) => {},"}, {"sha": "13f9507d8db91ad7f1695480e17b9f5d9332e6dd", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -5,7 +5,7 @@ LL |         let y = *x;\n    |                 -- value moved here\n LL |         drop_unsized(y);\n LL |         println!(\"{}\", &x);\n-   |                        ^^ value borrowed here after partial move\n+   |                        ^^ value borrowed here after move\n    |\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n@@ -27,7 +27,7 @@ LL |         let y = *x;\n    |                 -- value moved here\n LL |         y.foo();\n LL |         println!(\"{}\", &x);\n-   |                        ^^ value borrowed here after partial move\n+   |                        ^^ value borrowed here after move\n    |\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n "}, {"sha": "5b29314ad55a4ab5490c9ae900b57d5456bee7a7", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7436b5fd27e534b2800389067b169cbe7864b7/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=5f7436b5fd27e534b2800389067b169cbe7864b7", "patch": "@@ -14,7 +14,7 @@ error[E0382]: use of moved value: `x`\n LL |         let _y = *x;\n    |                  -- value moved here\n LL |         drop_unsized(x);\n-   |                      ^ value used here after partial move\n+   |                      ^ value used here after move\n    |\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n \n@@ -50,7 +50,7 @@ error[E0382]: use of moved value: `x`\n LL |         let _y = *x;\n    |                  -- value moved here\n LL |         x.foo();\n-   |         ^ value used here after partial move\n+   |         ^ value used here after move\n    |\n    = note: move occurs because `*x` has type `str`, which does not implement the `Copy` trait\n "}]}