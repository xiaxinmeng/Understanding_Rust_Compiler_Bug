{"sha": "86e030391b2e81c44beed94e3070406994caaad5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZTAzMDM5MWIyZTgxYzQ0YmVlZDk0ZTMwNzA0MDY5OTRjYWFhZDU=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-11T18:43:38Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2020-10-14T22:41:08Z"}, "message": "Make sure cold code is as small as possible", "tree": {"sha": "84d578e52be7b14091301403bf443a7135658d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84d578e52be7b14091301403bf443a7135658d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86e030391b2e81c44beed94e3070406994caaad5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86e030391b2e81c44beed94e3070406994caaad5", "html_url": "https://github.com/rust-lang/rust/commit/86e030391b2e81c44beed94e3070406994caaad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86e030391b2e81c44beed94e3070406994caaad5/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5565241f65cf402c3dbcb55dd492f172c473d4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/5565241f65cf402c3dbcb55dd492f172c473d4ce", "html_url": "https://github.com/rust-lang/rust/commit/5565241f65cf402c3dbcb55dd492f172c473d4ce"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "adc38a01a9dabccdd393c2a53e8f5ffe55640d97", "filename": "compiler/rustc_data_structures/src/obligation_forest/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/86e030391b2e81c44beed94e3070406994caaad5/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86e030391b2e81c44beed94e3070406994caaad5/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fobligation_forest%2Fmod.rs?ref=86e030391b2e81c44beed94e3070406994caaad5", "patch": "@@ -526,7 +526,6 @@ impl<O: ForestObligation> ObligationForest<O> {\n             let node = &self.nodes[index];\n             let state = node.state.get();\n             if state == NodeState::Success {\n-                node.state.set(NodeState::Waiting);\n                 // This call site is cold.\n                 self.uninlined_mark_dependents_as_waiting(node);\n             } else {\n@@ -538,6 +537,8 @@ impl<O: ForestObligation> ObligationForest<O> {\n     // This never-inlined function is for the cold call site.\n     #[inline(never)]\n     fn uninlined_mark_dependents_as_waiting(&self, node: &Node<O>) {\n+        // Mark node Waiting in the cold uninlined code instead of the hot inlined\n+        node.state.set(NodeState::Waiting);\n         self.inlined_mark_dependents_as_waiting(node)\n     }\n "}]}