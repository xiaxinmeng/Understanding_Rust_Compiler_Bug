{"sha": "25510cfb13c374d98ab0171b530d0bd887eac2c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTEwY2ZiMTNjMzc0ZDk4YWIwMTcxYjUzMGQwYmQ4ODdlYWMyYzY=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-21T08:30:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-21T08:30:40Z"}, "message": "Merge pull request #2790 from shnewto/vectors-to-indexing-slicing-lint\n\nExtend `indexing_slicing` lint", "tree": {"sha": "272f96f7d963f05fab3c062f86f0dadd569f74d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/272f96f7d963f05fab3c062f86f0dadd569f74d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25510cfb13c374d98ab0171b530d0bd887eac2c6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbK2IwCRBK7hj4Ov3rIwAAdHIIAJuXE6jMN/V5GsUBuOtEozde\nrg7eCLCP+eeMaS7NynSr3bP/5t/GtUBRuonMAkdk1fiyXSn90Ma6ScysCt7+56ES\nLI3Jjf5FrzpCrwB/BwYVDSFEu0cuqgq+bNkRvJrqvh/zeGsJ+iuQaEDE2laQxxYW\nK8PFXrwqTZ1UH64QhOOhidPbjANsPpM9j7dDKmrgn7AshC4Zrabh0t5AYczD28Vw\nWnpUzfsL+d4+Hukhk8zJS8WkLZLECkT1yjWsufID+yUwSEGU732XpHOmtwaU4PNL\nQvAvjSfvql9YiqgMf7Ih2qOhnrszPeINvBO18LwCDNnFb4fLHpRWjyduIZVxpuM=\n=iga/\n-----END PGP SIGNATURE-----\n", "payload": "tree 272f96f7d963f05fab3c062f86f0dadd569f74d0\nparent dbc9e3674f847928ec26872d922d6471bc738646\nparent c479b3bc2856a2c2362cd17b95e28caaaffe0908\nauthor Oliver Schneider <github35764891676564198441@oli-obk.de> 1529569840 +0200\ncommitter GitHub <noreply@github.com> 1529569840 +0200\n\nMerge pull request #2790 from shnewto/vectors-to-indexing-slicing-lint\n\nExtend `indexing_slicing` lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25510cfb13c374d98ab0171b530d0bd887eac2c6", "html_url": "https://github.com/rust-lang/rust/commit/25510cfb13c374d98ab0171b530d0bd887eac2c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25510cfb13c374d98ab0171b530d0bd887eac2c6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc9e3674f847928ec26872d922d6471bc738646", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc9e3674f847928ec26872d922d6471bc738646", "html_url": "https://github.com/rust-lang/rust/commit/dbc9e3674f847928ec26872d922d6471bc738646"}, {"sha": "c479b3bc2856a2c2362cd17b95e28caaaffe0908", "url": "https://api.github.com/repos/rust-lang/rust/commits/c479b3bc2856a2c2362cd17b95e28caaaffe0908", "html_url": "https://github.com/rust-lang/rust/commit/c479b3bc2856a2c2362cd17b95e28caaaffe0908"}], "stats": {"total": 837, "additions": 542, "deletions": 295}, "files": [{"sha": "77aa5e834258d685851e4f2a4d4aa6d995fbffe0", "filename": "clippy_lints/src/array_indexing.rs", "status": "removed", "additions": 0, "deletions": 123, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9e3674f847928ec26872d922d6471bc738646/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9e3674f847928ec26872d922d6471bc738646/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=dbc9e3674f847928ec26872d922d6471bc738646", "patch": "@@ -1,123 +0,0 @@\n-use crate::consts::{constant, Constant};\n-use crate::utils::higher::Range;\n-use crate::utils::{self, higher};\n-use rustc::hir;\n-use rustc::lint::*;\n-use rustc::ty;\n-use syntax::ast::RangeLimits;\n-\n-/// **What it does:** Checks for out of bounds array indexing with a constant\n-/// index.\n-///\n-/// **Why is this bad?** This will always panic at runtime.\n-///\n-/// **Known problems:** Hopefully none.\n-///\n-/// **Example:**\n-/// ```rust\n-/// let x = [1,2,3,4];\n-/// ...\n-/// x[9];\n-/// &x[2..9];\n-/// ```\n-declare_clippy_lint! {\n-    pub OUT_OF_BOUNDS_INDEXING,\n-    correctness,\n-    \"out of bounds constant indexing\"\n-}\n-\n-/// **What it does:** Checks for usage of indexing or slicing.\n-///\n-/// **Why is this bad?** Usually, this can be safely allowed. However, in some\n-/// domains such as kernel development, a panic can cause the whole operating\n-/// system to crash.\n-///\n-/// **Known problems:** Hopefully none.\n-///\n-/// **Example:**\n-/// ```rust\n-/// ...\n-/// x[2];\n-/// &x[0..2];\n-/// ```\n-declare_clippy_lint! {\n-    pub INDEXING_SLICING,\n-    restriction,\n-    \"indexing/slicing usage\"\n-}\n-\n-#[derive(Copy, Clone)]\n-pub struct ArrayIndexing;\n-\n-impl LintPass for ArrayIndexing {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n-    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx hir::Expr) {\n-        if let hir::ExprIndex(ref array, ref index) = e.node {\n-            // Array with known size can be checked statically\n-            let ty = cx.tables.expr_ty(array);\n-            if let ty::TyArray(_, size) = ty.sty {\n-                let size = size.assert_usize(cx.tcx).unwrap().into();\n-\n-                // Index is a constant uint\n-                if let Some((Constant::Int(const_index), _)) = constant(cx, cx.tables, index) {\n-                    if size <= const_index {\n-                        utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"const index is out of bounds\");\n-                    }\n-\n-                    return;\n-                }\n-\n-                // Index is a constant range\n-                if let Some(range) = higher::range(cx, index) {\n-                    if let Some((start, end)) = to_const_range(cx, range, size) {\n-                        if start > size || end > size {\n-                            utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"range is out of bounds\");\n-                        }\n-                        return;\n-                    }\n-                }\n-            }\n-\n-            if let Some(range) = higher::range(cx, index) {\n-                // Full ranges are always valid\n-                if range.start.is_none() && range.end.is_none() {\n-                    return;\n-                }\n-\n-                // Impossible to know if indexing or slicing is correct\n-                utils::span_lint(cx, INDEXING_SLICING, e.span, \"slicing may panic\");\n-            } else {\n-                utils::span_lint(cx, INDEXING_SLICING, e.span, \"indexing may panic\");\n-            }\n-        }\n-    }\n-}\n-\n-/// Returns an option containing a tuple with the start and end (exclusive) of\n-/// the range.\n-fn to_const_range<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, range: Range, array_size: u128) -> Option<(u128, u128)> {\n-    let s = range.start.map(|expr| constant(cx, cx.tables, expr).map(|(c, _)| c));\n-    let start = match s {\n-        Some(Some(Constant::Int(x))) => x,\n-        Some(_) => return None,\n-        None => 0,\n-    };\n-\n-    let e = range.end.map(|expr| constant(cx, cx.tables, expr).map(|(c, _)| c));\n-    let end = match e {\n-        Some(Some(Constant::Int(x))) => if range.limits == RangeLimits::Closed {\n-            x + 1\n-        } else {\n-            x\n-        },\n-        Some(_) => return None,\n-        None => array_size,\n-    };\n-\n-    Some((start, end))\n-}"}, {"sha": "7dd72a5383cd5123e561578446d7b7071b87ac23", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "added", "additions": 183, "deletions": 0, "changes": 183, "blob_url": "https://github.com/rust-lang/rust/blob/25510cfb13c374d98ab0171b530d0bd887eac2c6/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25510cfb13c374d98ab0171b530d0bd887eac2c6/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=25510cfb13c374d98ab0171b530d0bd887eac2c6", "patch": "@@ -0,0 +1,183 @@\n+//! lint on indexing and slicing operations\n+\n+use crate::consts::{constant, Constant};\n+use crate::utils;\n+use crate::utils::higher;\n+use crate::utils::higher::Range;\n+use rustc::hir::*;\n+use rustc::lint::*;\n+use rustc::ty;\n+use syntax::ast::RangeLimits;\n+\n+/// **What it does:** Checks for out of bounds array indexing with a constant\n+/// index.\n+///\n+/// **Why is this bad?** This will always panic at runtime.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let x = [1,2,3,4];\n+///\n+/// // Bad\n+/// x[9];\n+/// &x[2..9];\n+///\n+/// // Good\n+/// x[0];\n+/// x[3];\n+/// ```\n+declare_clippy_lint! {\n+    pub OUT_OF_BOUNDS_INDEXING,\n+    correctness,\n+    \"out of bounds constant indexing\"\n+}\n+\n+/// **What it does:** Checks for usage of indexing or slicing. Arrays are special cased, this lint\n+/// does report on arrays if we can tell that slicing operations are in bounds and does not\n+/// lint on constant `usize` indexing on arrays because that is handled by rustc's `const_err` lint.\n+///\n+/// **Why is this bad?** Indexing and slicing can panic at runtime and there are\n+/// safe alternatives.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:**\n+/// ```rust\n+/// // Vector\n+/// let x = vec![0; 5];\n+///\n+/// // Bad\n+/// x[2];\n+/// &x[2..100];\n+/// &x[2..];\n+/// &x[..100];\n+///\n+/// // Good\n+/// x.get(2);\n+/// x.get(2..100);\n+/// x.get(2..);\n+/// x.get(..100);\n+///\n+/// // Array\n+/// let y = [0, 1, 2, 3];\n+///\n+/// // Bad\n+/// &y[10..100];\n+/// &y[10..];\n+/// &y[..100];\n+///\n+/// // Good\n+/// &y[2..];\n+/// &y[..2];\n+/// &y[0..3];\n+/// y.get(10);\n+/// y.get(10..100);\n+/// y.get(10..);\n+/// y.get(..100);\n+/// ```\n+declare_clippy_lint! {\n+    pub INDEXING_SLICING,\n+    pedantic,\n+    \"indexing/slicing usage\"\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct IndexingSlicing;\n+\n+impl LintPass for IndexingSlicing {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING)\n+    }\n+}\n+\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n+        if let ExprIndex(ref array, ref index) = &expr.node {\n+            let ty = cx.tables.expr_ty(array);\n+            if let Some(range) = higher::range(cx, index) {\n+                // Ranged indexes, i.e. &x[n..m], &x[n..], &x[..n] and &x[..]\n+                if let ty::TyArray(_, s) = ty.sty {\n+                    let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n+                    // Index is a constant range.\n+                    if let Some((start, end)) = to_const_range(cx, range, size) {\n+                        if start > size || end > size {\n+                            utils::span_lint(\n+                                cx,\n+                                OUT_OF_BOUNDS_INDEXING,\n+                                expr.span,\n+                                \"range is out of bounds\",\n+                            );\n+                        }\n+                        return;\n+                    }\n+                }\n+\n+                let help_msg = match (range.start, range.end) {\n+                    (None, Some(_)) => \"Consider using `.get(..n)`or `.get_mut(..n)` instead\",\n+                    (Some(_), None) => \"Consider using `.get(n..)` or .get_mut(n..)` instead\",\n+                    (Some(_), Some(_)) => \"Consider using `.get(n..m)` or `.get_mut(n..m)` instead\",\n+                    (None, None) => return, // [..] is ok.\n+                };\n+\n+                utils::span_help_and_lint(\n+                    cx,\n+                    INDEXING_SLICING,\n+                    expr.span,\n+                    \"slicing may panic.\",\n+                    help_msg,\n+                );\n+            } else {\n+                // Catchall non-range index, i.e. [n] or [n << m]\n+                if let ty::TyArray(..) = ty.sty {\n+                    // Index is a constant uint.\n+                    if let Some(..) = constant(cx, cx.tables, index) {\n+                        // Let rustc's `const_err` lint handle constant `usize` indexing on arrays.\n+                        return;\n+                    }\n+                }\n+\n+                utils::span_help_and_lint(\n+                    cx,\n+                    INDEXING_SLICING,\n+                    expr.span,\n+                    \"indexing may panic.\",\n+                    \"Consider using `.get(n)` or `.get_mut(n)` instead\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+/// Returns an option containing a tuple with the start and end (exclusive) of\n+/// the range.\n+fn to_const_range<'a, 'tcx>(\n+    cx: &LateContext<'a, 'tcx>,\n+    range: Range,\n+    array_size: u128,\n+) -> Option<(u128, u128)> {\n+    let s = range\n+        .start\n+        .map(|expr| constant(cx, cx.tables, expr).map(|(c, _)| c));\n+    let start = match s {\n+        Some(Some(Constant::Int(x))) => x,\n+        Some(_) => return None,\n+        None => 0,\n+    };\n+\n+    let e = range\n+        .end\n+        .map(|expr| constant(cx, cx.tables, expr).map(|(c, _)| c));\n+    let end = match e {\n+        Some(Some(Constant::Int(x))) => if range.limits == RangeLimits::Closed {\n+            x + 1\n+        } else {\n+            x\n+        },\n+        Some(_) => return None,\n+        None => array_size,\n+    };\n+\n+    Some((start, end))\n+}"}, {"sha": "621b21429a9861fb93130da282809def2ccc63b3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/25510cfb13c374d98ab0171b530d0bd887eac2c6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25510cfb13c374d98ab0171b530d0bd887eac2c6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=25510cfb13c374d98ab0171b530d0bd887eac2c6", "patch": "@@ -6,7 +6,7 @@\n #![feature(stmt_expr_attributes)]\n #![feature(range_contains)]\n #![feature(macro_vis_matcher)]\n-#![allow(unknown_lints, indexing_slicing, shadow_reuse, missing_docs_in_private_items)]\n+#![allow(unknown_lints, shadow_reuse, missing_docs_in_private_items)]\n #![recursion_limit = \"256\"]\n #![allow(stable_features)]\n #![feature(iterator_find_map)]\n@@ -99,7 +99,6 @@ pub mod utils;\n // begin lints modules, do not remove this comment, it\u2019s used in `update_lints`\n pub mod approx_const;\n pub mod arithmetic;\n-pub mod array_indexing;\n pub mod assign_ops;\n pub mod attrs;\n pub mod bit_mask;\n@@ -139,6 +138,7 @@ pub mod identity_conversion;\n pub mod identity_op;\n pub mod if_let_redundant_pattern_matching;\n pub mod if_not_else;\n+pub mod indexing_slicing;\n pub mod infallible_destructuring_match;\n pub mod infinite_iter;\n pub mod inherent_impl;\n@@ -355,7 +355,6 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     );\n     reg.register_late_lint_pass(box escape::Pass{too_large_for_stack: conf.too_large_for_stack});\n     reg.register_early_lint_pass(box misc_early::MiscEarly);\n-    reg.register_late_lint_pass(box array_indexing::ArrayIndexing);\n     reg.register_late_lint_pass(box panic_unimplemented::Pass);\n     reg.register_late_lint_pass(box strings::StringLitAsBytes);\n     reg.register_late_lint_pass(box derive::Derive);\n@@ -432,12 +431,11 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box unwrap::Pass);\n     reg.register_late_lint_pass(box duration_subsec::DurationSubsec);\n     reg.register_late_lint_pass(box default_trait_access::DefaultTraitAccess);\n-\n+    reg.register_late_lint_pass(box indexing_slicing::IndexingSlicing);\n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n         arithmetic::INTEGER_ARITHMETIC,\n-        array_indexing::INDEXING_SLICING,\n         assign_ops::ASSIGN_OPS,\n         else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n         inherent_impl::MULTIPLE_INHERENT_IMPL,\n@@ -468,6 +466,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         enum_variants::PUB_ENUM_VARIANT_NAMES,\n         enum_variants::STUTTER,\n         if_not_else::IF_NOT_ELSE,\n+        indexing_slicing::INDEXING_SLICING,\n         infinite_iter::MAYBE_INFINITE_ITER,\n         items_after_statements::ITEMS_AFTER_STATEMENTS,\n         matches::SINGLE_MATCH_ELSE,\n@@ -500,7 +499,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n \n     reg.register_lint_group(\"clippy\", vec![\n         approx_const::APPROX_CONSTANT,\n-        array_indexing::OUT_OF_BOUNDS_INDEXING,\n+        indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         assign_ops::ASSIGN_OP_PATTERN,\n         assign_ops::MISREFACTORED_ASSIGN_OP,\n         attrs::DEPRECATED_SEMVER,\n@@ -863,7 +862,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n \n     reg.register_lint_group(\"clippy_correctness\", vec![\n         approx_const::APPROX_CONSTANT,\n-        array_indexing::OUT_OF_BOUNDS_INDEXING,\n+        indexing_slicing::OUT_OF_BOUNDS_INDEXING,\n         attrs::DEPRECATED_SEMVER,\n         attrs::USELESS_ATTRIBUTE,\n         bit_mask::BAD_BIT_MASK,"}, {"sha": "a01600edac77a06d74891d62bf28486d8e71dd9e", "filename": "tests/ui/array_indexing.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9e3674f847928ec26872d922d6471bc738646/tests%2Fui%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9e3674f847928ec26872d922d6471bc738646/tests%2Fui%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.rs?ref=dbc9e3674f847928ec26872d922d6471bc738646", "patch": "@@ -1,45 +0,0 @@\n-#![feature(plugin)]\n-\n-\n-#![warn(indexing_slicing)]\n-#![warn(out_of_bounds_indexing)]\n-#![allow(no_effect, unnecessary_operation)]\n-\n-fn main() {\n-    let x = [1,2,3,4];\n-    x[0];\n-    x[3];\n-    x[4];\n-    x[1 << 3];\n-    &x[1..5];\n-    &x[0..3];\n-    &x[0..=4];\n-    &x[..=4];\n-    &x[..];\n-    &x[1..];\n-    &x[4..];\n-    &x[5..];\n-    &x[..4];\n-    &x[..5];\n-\n-    let y = &x;\n-    y[0];\n-    &y[1..2];\n-    &y[..];\n-    &y[0..=4];\n-    &y[..=4];\n-\n-    let empty: [i8; 0] = [];\n-    empty[0];\n-    &empty[1..5];\n-    &empty[0..=4];\n-    &empty[..=4];\n-    &empty[..];\n-    &empty[0..];\n-    &empty[0..0];\n-    &empty[0..=0];\n-    &empty[..=0];\n-    &empty[..0];\n-    &empty[1..];\n-    &empty[..4];\n-}"}, {"sha": "d730b012932ac5f317f9b05585ef963e44e6c92b", "filename": "tests/ui/array_indexing.stderr", "status": "removed", "additions": 0, "deletions": 120, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/dbc9e3674f847928ec26872d922d6471bc738646/tests%2Fui%2Farray_indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dbc9e3674f847928ec26872d922d6471bc738646/tests%2Fui%2Farray_indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.stderr?ref=dbc9e3674f847928ec26872d922d6471bc738646", "patch": "@@ -1,120 +0,0 @@\n-error: const index is out of bounds\n-  --> $DIR/array_indexing.rs:12:5\n-   |\n-12 |     x[4];\n-   |     ^^^^\n-   |\n-   = note: `-D out-of-bounds-indexing` implied by `-D warnings`\n-\n-error: const index is out of bounds\n-  --> $DIR/array_indexing.rs:13:5\n-   |\n-13 |     x[1 << 3];\n-   |     ^^^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:14:6\n-   |\n-14 |     &x[1..5];\n-   |      ^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:16:6\n-   |\n-16 |     &x[0..=4];\n-   |      ^^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:17:6\n-   |\n-17 |     &x[..=4];\n-   |      ^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:21:6\n-   |\n-21 |     &x[5..];\n-   |      ^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:23:6\n-   |\n-23 |     &x[..5];\n-   |      ^^^^^^\n-\n-error: indexing may panic\n-  --> $DIR/array_indexing.rs:26:5\n-   |\n-26 |     y[0];\n-   |     ^^^^\n-   |\n-   = note: `-D indexing-slicing` implied by `-D warnings`\n-\n-error: slicing may panic\n-  --> $DIR/array_indexing.rs:27:6\n-   |\n-27 |     &y[1..2];\n-   |      ^^^^^^^\n-\n-error: slicing may panic\n-  --> $DIR/array_indexing.rs:29:6\n-   |\n-29 |     &y[0..=4];\n-   |      ^^^^^^^^\n-\n-error: slicing may panic\n-  --> $DIR/array_indexing.rs:30:6\n-   |\n-30 |     &y[..=4];\n-   |      ^^^^^^^\n-\n-error: const index is out of bounds\n-  --> $DIR/array_indexing.rs:33:5\n-   |\n-33 |     empty[0];\n-   |     ^^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:34:6\n-   |\n-34 |     &empty[1..5];\n-   |      ^^^^^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:35:6\n-   |\n-35 |     &empty[0..=4];\n-   |      ^^^^^^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:36:6\n-   |\n-36 |     &empty[..=4];\n-   |      ^^^^^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:40:6\n-   |\n-40 |     &empty[0..=0];\n-   |      ^^^^^^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:41:6\n-   |\n-41 |     &empty[..=0];\n-   |      ^^^^^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:43:6\n-   |\n-43 |     &empty[1..];\n-   |      ^^^^^^^^^^\n-\n-error: range is out of bounds\n-  --> $DIR/array_indexing.rs:44:6\n-   |\n-44 |     &empty[..4];\n-   |      ^^^^^^^^^^\n-\n-error: aborting due to 19 previous errors\n-"}, {"sha": "e39dc92367c8ecc5c9ddfa3e9a518da13f237e20", "filename": "tests/ui/indexing_slicing.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/25510cfb13c374d98ab0171b530d0bd887eac2c6/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25510cfb13c374d98ab0171b530d0bd887eac2c6/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=25510cfb13c374d98ab0171b530d0bd887eac2c6", "patch": "@@ -0,0 +1,82 @@\n+#![feature(plugin)]\n+#![warn(indexing_slicing)]\n+#![warn(out_of_bounds_indexing)]\n+#![allow(no_effect, unnecessary_operation)]\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+    let index: usize = 1;\n+    let index_from: usize = 2;\n+    let index_to: usize = 3;\n+    x[index];\n+    &x[index..];\n+    &x[..index];\n+    &x[index_from..index_to];\n+    &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n+    x[4]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n+    x[1 << 3]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n+    &x[..=4];\n+    &x[1..5];\n+    &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+    &x[5..];\n+    &x[..5];\n+    &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+    &x[0..=4];\n+    &x[0..][..3];\n+    &x[1..][..5];\n+\n+    &x[4..]; // Ok, should not produce stderr.\n+    &x[..4]; // Ok, should not produce stderr.\n+    &x[..]; // Ok, should not produce stderr.\n+    &x[1..]; // Ok, should not produce stderr.\n+    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok, should not produce stderr.\n+    &x[0..].get(..3); // Ok, should not produce stderr.\n+    x[0]; // Ok, should not produce stderr.\n+    x[3]; // Ok, should not produce stderr.\n+    &x[0..3]; // Ok, should not produce stderr.\n+\n+    let y = &x;\n+    y[0];\n+    &y[1..2];\n+    &y[0..=4];\n+    &y[..=4];\n+\n+    &y[..]; // Ok, should not produce stderr.\n+\n+    let empty: [i8; 0] = [];\n+    empty[0]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n+    &empty[1..5];\n+    &empty[0..=4];\n+    &empty[..=4];\n+    &empty[1..];\n+    &empty[..4];\n+    &empty[0..=0];\n+    &empty[..=0];\n+\n+    &empty[0..]; // Ok, should not produce stderr.\n+    &empty[0..0]; // Ok, should not produce stderr.\n+    &empty[..0]; // Ok, should not produce stderr.\n+    &empty[..]; // Ok, should not produce stderr.\n+\n+    let v = vec![0; 5];\n+    v[0];\n+    v[10];\n+    v[1 << 3];\n+    &v[10..100];\n+    &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n+    &v[10..];\n+    &v[..100];\n+\n+    &v[..]; // Ok, should not produce stderr.\n+\n+    //\n+    // Continue tests at end function to minimize the changes to this file's corresponding stderr.\n+    //\n+\n+    const N: usize = 15; // Out of bounds\n+    const M: usize = 3; // In bounds\n+    x[N]; // Ok, let rustc's `const_err` lint handle `usize` indexing on arrays.\n+    x[M]; // Ok, should not produce stderr.\n+    v[N];\n+    v[M];\n+}"}, {"sha": "ee11dce6d1c2c164e917e9d10df577be72245d31", "filename": "tests/ui/indexing_slicing.stderr", "status": "added", "additions": 271, "deletions": 0, "changes": 271, "blob_url": "https://github.com/rust-lang/rust/blob/25510cfb13c374d98ab0171b530d0bd887eac2c6/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25510cfb13c374d98ab0171b530d0bd887eac2c6/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=25510cfb13c374d98ab0171b530d0bd887eac2c6", "patch": "@@ -0,0 +1,271 @@\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:11:5\n+   |\n+11 |     x[index];\n+   |     ^^^^^^^^\n+   |\n+   = note: `-D indexing-slicing` implied by `-D warnings`\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:12:6\n+   |\n+12 |     &x[index..];\n+   |      ^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:13:6\n+   |\n+13 |     &x[..index];\n+   |      ^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:14:6\n+   |\n+14 |     &x[index_from..index_to];\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:15:6\n+   |\n+15 |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:15:6\n+   |\n+15 |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n+   |      ^^^^^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:18:6\n+   |\n+18 |     &x[..=4];\n+   |      ^^^^^^^\n+   |\n+   = note: `-D out-of-bounds-indexing` implied by `-D warnings`\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:19:6\n+   |\n+19 |     &x[1..5];\n+   |      ^^^^^^^\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:20:6\n+   |\n+20 |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+   |      ^^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:20:6\n+   |\n+20 |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+   |      ^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:21:6\n+   |\n+21 |     &x[5..];\n+   |      ^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:22:6\n+   |\n+22 |     &x[..5];\n+   |      ^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:23:6\n+   |\n+23 |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+   |      ^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:24:6\n+   |\n+24 |     &x[0..=4];\n+   |      ^^^^^^^^\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:25:6\n+   |\n+25 |     &x[0..][..3];\n+   |      ^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:26:6\n+   |\n+26 |     &x[1..][..5];\n+   |      ^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:39:5\n+   |\n+39 |     y[0];\n+   |     ^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:40:6\n+   |\n+40 |     &y[1..2];\n+   |      ^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:41:6\n+   |\n+41 |     &y[0..=4];\n+   |      ^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:42:6\n+   |\n+42 |     &y[..=4];\n+   |      ^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:48:6\n+   |\n+48 |     &empty[1..5];\n+   |      ^^^^^^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:49:6\n+   |\n+49 |     &empty[0..=4];\n+   |      ^^^^^^^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:50:6\n+   |\n+50 |     &empty[..=4];\n+   |      ^^^^^^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:51:6\n+   |\n+51 |     &empty[1..];\n+   |      ^^^^^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:52:6\n+   |\n+52 |     &empty[..4];\n+   |      ^^^^^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:53:6\n+   |\n+53 |     &empty[0..=0];\n+   |      ^^^^^^^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:54:6\n+   |\n+54 |     &empty[..=0];\n+   |      ^^^^^^^^^^^\n+\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:62:5\n+   |\n+62 |     v[0];\n+   |     ^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:63:5\n+   |\n+63 |     v[10];\n+   |     ^^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:64:5\n+   |\n+64 |     v[1 << 3];\n+   |     ^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:65:6\n+   |\n+65 |     &v[10..100];\n+   |      ^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:66:6\n+   |\n+66 |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:66:6\n+   |\n+66 |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n+   |      ^^^^^^^\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:67:6\n+   |\n+67 |     &v[10..];\n+   |      ^^^^^^^\n+   |\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:68:6\n+   |\n+68 |     &v[..100];\n+   |      ^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:80:5\n+   |\n+80 |     v[N];\n+   |     ^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:81:5\n+   |\n+81 |     v[M];\n+   |     ^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: aborting due to 37 previous errors\n+"}]}