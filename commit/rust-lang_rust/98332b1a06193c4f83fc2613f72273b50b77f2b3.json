{"sha": "98332b1a06193c4f83fc2613f72273b50b77f2b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4MzMyYjFhMDYxOTNjNGY4M2ZjMjYxM2Y3MjI3M2I1MGI3N2YyYjM=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-11T23:32:11Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2014-08-12T07:10:26Z"}, "message": "Replace all references to \"Win32\" with \"Windows\".\n\nFor historical reasons, \"Win32\" has been used in Rust codebase to mean \"Windows OS in general\".\nThis is confusing, especially now, that Rust supports Win64 builds.\n\n[breaking-change]", "tree": {"sha": "8f58a1b77eb08e3f0f242b66e5e353479bbd1d26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f58a1b77eb08e3f0f242b66e5e353479bbd1d26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98332b1a06193c4f83fc2613f72273b50b77f2b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98332b1a06193c4f83fc2613f72273b50b77f2b3", "html_url": "https://github.com/rust-lang/rust/commit/98332b1a06193c4f83fc2613f72273b50b77f2b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98332b1a06193c4f83fc2613f72273b50b77f2b3/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48ee81682a39c0b36b2286b75e5c18995fe3c718", "url": "https://api.github.com/repos/rust-lang/rust/commits/48ee81682a39c0b36b2286b75e5c18995fe3c718", "html_url": "https://github.com/rust-lang/rust/commit/48ee81682a39c0b36b2286b75e5c18995fe3c718"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "f3e130cf768604773e621744d0806c08218e77af", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -200,7 +200,7 @@ pub mod write {\n             // OSX has -dead_strip, which doesn't rely on ffunction_sections\n             // FIXME(#13846) this should be enabled for windows\n             let ffunction_sections = sess.targ_cfg.os != abi::OsMacos &&\n-                                     sess.targ_cfg.os != abi::OsWin32;\n+                                     sess.targ_cfg.os != abi::OsWindows;\n             let fdata_sections = ffunction_sections;\n \n             let reloc_model = match sess.opts.cg.relocation_model.as_slice() {\n@@ -858,7 +858,7 @@ pub fn get_cc_prog(sess: &Session) -> String {\n     // instead of hard-coded gcc.\n     // For win32, there is no cc command, so we add a condition to make it use gcc.\n     match sess.targ_cfg.os {\n-        abi::OsWin32 => \"gcc\",\n+        abi::OsWindows => \"gcc\",\n         _ => \"cc\",\n     }.to_string()\n }\n@@ -954,7 +954,7 @@ pub fn filename_for_input(sess: &Session,\n         }\n         config::CrateTypeDylib => {\n             let (prefix, suffix) = match sess.targ_cfg.os {\n-                abi::OsWin32 => (loader::WIN32_DLL_PREFIX, loader::WIN32_DLL_SUFFIX),\n+                abi::OsWindows => (loader::WIN32_DLL_PREFIX, loader::WIN32_DLL_SUFFIX),\n                 abi::OsMacos => (loader::MACOS_DLL_PREFIX, loader::MACOS_DLL_SUFFIX),\n                 abi::OsLinux => (loader::LINUX_DLL_PREFIX, loader::LINUX_DLL_SUFFIX),\n                 abi::OsAndroid => (loader::ANDROID_DLL_PREFIX, loader::ANDROID_DLL_SUFFIX),\n@@ -972,7 +972,7 @@ pub fn filename_for_input(sess: &Session,\n         }\n         config::CrateTypeExecutable => {\n             match sess.targ_cfg.os {\n-                abi::OsWin32 => out_filename.with_extension(\"exe\"),\n+                abi::OsWindows => out_filename.with_extension(\"exe\"),\n                 abi::OsMacos |\n                 abi::OsLinux |\n                 abi::OsAndroid |\n@@ -1388,7 +1388,7 @@ fn link_args(cmd: &mut Command,\n     // subset we wanted.\n     //\n     // FIXME(#11937) we should invoke the system linker directly\n-    if sess.targ_cfg.os != abi::OsWin32 {\n+    if sess.targ_cfg.os != abi::OsWindows {\n         cmd.arg(\"-nodefaultlibs\");\n     }\n \n@@ -1440,7 +1440,7 @@ fn link_args(cmd: &mut Command,\n         cmd.arg(\"-Wl,-dead_strip\");\n     }\n \n-    if sess.targ_cfg.os == abi::OsWin32 {\n+    if sess.targ_cfg.os == abi::OsWindows {\n         // Make sure that we link to the dynamic libgcc, otherwise cross-module\n         // DWARF stack unwinding will not work.\n         // This behavior may be overridden by --link-args \"-static-libgcc\"\n@@ -1715,7 +1715,7 @@ fn add_upstream_rust_crates(cmd: &mut Command, sess: &Session,\n \n     // Converts a library file-stem into a cc -l argument\n     fn unlib<'a>(config: &config::Config, stem: &'a [u8]) -> &'a [u8] {\n-        if stem.starts_with(\"lib\".as_bytes()) && config.os != abi::OsWin32 {\n+        if stem.starts_with(\"lib\".as_bytes()) && config.os != abi::OsWindows {\n             stem.tailn(3)\n         } else {\n             stem"}, {"sha": "263bd0f4d92d7c2dde3ecdbcb49cde13874c4519", "filename": "src/librustc/driver/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fdriver%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fdriver%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fconfig.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -390,7 +390,7 @@ pub fn default_lib_output() -> CrateType {\n \n pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     let tos = match sess.targ_cfg.os {\n-        abi::OsWin32 =>     InternedString::new(\"win32\"),\n+        abi::OsWindows =>   InternedString::new(\"win32\"),\n         abi::OsMacos =>     InternedString::new(\"macos\"),\n         abi::OsLinux =>     InternedString::new(\"linux\"),\n         abi::OsAndroid =>   InternedString::new(\"android\"),\n@@ -410,7 +410,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     };\n \n     let fam = match sess.targ_cfg.os {\n-        abi::OsWin32 => InternedString::new(\"windows\"),\n+        abi::OsWindows => InternedString::new(\"windows\"),\n         _ => InternedString::new(\"unix\")\n     };\n \n@@ -452,8 +452,8 @@ pub fn get_os(triple: &str) -> Option<abi::Os> {\n     None\n }\n static os_names : &'static [(&'static str, abi::Os)] = &[\n-    (\"mingw32\",   abi::OsWin32),\n-    (\"win32\",     abi::OsWin32),\n+    (\"mingw32\",   abi::OsWindows),\n+    (\"win32\",     abi::OsWindows),\n     (\"darwin\",    abi::OsMacos),\n     (\"android\",   abi::OsAndroid),\n     (\"linux\",     abi::OsLinux),"}, {"sha": "cd8ebf5081ba72533dcf6aca8308063ec93f2750", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -615,7 +615,7 @@ impl<'a> Context<'a> {\n     // dynamic libraries\n     fn dylibname(&self) -> Option<(&'static str, &'static str)> {\n         match self.os {\n-            abi::OsWin32 => Some((WIN32_DLL_PREFIX, WIN32_DLL_SUFFIX)),\n+            abi::OsWindows => Some((WIN32_DLL_PREFIX, WIN32_DLL_SUFFIX)),\n             abi::OsMacos => Some((MACOS_DLL_PREFIX, MACOS_DLL_SUFFIX)),\n             abi::OsLinux => Some((LINUX_DLL_PREFIX, LINUX_DLL_SUFFIX)),\n             abi::OsAndroid => Some((ANDROID_DLL_PREFIX, ANDROID_DLL_SUFFIX)),\n@@ -824,7 +824,7 @@ pub fn meta_section_name(os: abi::Os) -> Option<&'static str> {\n     match os {\n         abi::OsMacos => Some(\"__DATA,__note.rustc\"),\n         abi::OsiOS => Some(\"__DATA,__note.rustc\"),\n-        abi::OsWin32 => Some(\".note.rustc\"),\n+        abi::OsWindows => Some(\".note.rustc\"),\n         abi::OsLinux => Some(\".note.rustc\"),\n         abi::OsAndroid => Some(\".note.rustc\"),\n         abi::OsFreebsd => Some(\".note.rustc\"),\n@@ -836,7 +836,7 @@ pub fn read_meta_section_name(os: abi::Os) -> &'static str {\n     match os {\n         abi::OsMacos => \"__note.rustc\",\n         abi::OsiOS => unreachable!(),\n-        abi::OsWin32 => \".note.rustc\",\n+        abi::OsWindows => \".note.rustc\",\n         abi::OsLinux => \".note.rustc\",\n         abi::OsAndroid => \".note.rustc\",\n         abi::OsFreebsd => \".note.rustc\","}, {"sha": "d419a56ec148e3f7f27d0890bf30068692667c4a", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -18,7 +18,7 @@ use middle::trans::cabi_arm;\n use middle::trans::cabi_mips;\n use middle::trans::type_::Type;\n use syntax::abi::{X86, X86_64, Arm, Mips, Mipsel};\n-use syntax::abi::{OsWin32};\n+use syntax::abi::{OsWindows};\n \n #[deriving(Clone, PartialEq)]\n pub enum ArgKind {\n@@ -110,7 +110,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n     match ccx.sess().targ_cfg.arch {\n         X86 => cabi_x86::compute_abi_info(ccx, atys, rty, ret_def),\n         X86_64 =>\n-            if ccx.sess().targ_cfg.os == OsWin32 {\n+            if ccx.sess().targ_cfg.os == OsWindows {\n                 cabi_x86_win64::compute_abi_info(ccx, atys, rty, ret_def)\n             } else {\n                 cabi_x86_64::compute_abi_info(ccx, atys, rty, ret_def)"}, {"sha": "d9812677d64cbec0975b429be362c21f171b723e", "filename": "src/librustc/middle/trans/cabi_x86.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-use syntax::abi::{OsWin32, OsMacos, OsiOS};\n+use syntax::abi::{OsWindows, OsMacos, OsiOS};\n use llvm::*;\n use super::cabi::*;\n use super::common::*;\n@@ -36,7 +36,7 @@ pub fn compute_abi_info(ccx: &CrateContext,\n \n         enum Strategy { RetValue(Type), RetPointer }\n         let strategy = match ccx.sess().targ_cfg.os {\n-            OsWin32 | OsMacos | OsiOS => {\n+            OsWindows | OsMacos | OsiOS => {\n                 match llsize_of_alloc(ccx, rty) {\n                     1 => RetValue(Type::i8(ccx)),\n                     2 => RetValue(Type::i16(ccx)),"}, {"sha": "6e606f3336180380a6c2a08761cbff9f36de06c4", "filename": "src/librustc_back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farchive.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -98,7 +98,7 @@ fn run_ar(handler: &ErrorHandler, maybe_ar_prog: &Option<String>,\n pub fn find_library(name: &str, os: abi::Os, search_paths: &[Path],\n                     handler: &ErrorHandler) -> Path {\n     let (osprefix, osext) = match os {\n-        abi::OsWin32 => (\"\", \"lib\"), _ => (\"lib\", \"a\"),\n+        abi::OsWindows => (\"\", \"lib\"), _ => (\"lib\", \"a\"),\n     };\n     // On Windows, static libraries sometimes show up as libfoo.a and other\n     // times show up as foo.lib"}, {"sha": "134f7105ea76eddfc0726814eeaac726d66061a5", "filename": "src/librustc_back/arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Farm.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -37,7 +37,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a0:0:64-n32\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "322f001c31e1b9dfb3df084f459f11153147c642", "filename": "src/librustc_back/mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmips.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -32,7 +32,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a0:0:64-n32\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             \"E-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "e7ce5b0a429bc4023ad1143647af8c19c15cc69a", "filename": "src/librustc_back/mipsel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Fmipsel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Fmipsel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fmipsel.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -32,7 +32,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 -a0:0:64-n32\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             \"e-p:32:32:32\\\n                 -i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\\\n                 -f32:32:32-f64:64:64\\"}, {"sha": "98fdd5a7fd7db4dcebe2f0f7e2d72bc1d4b8961f", "filename": "src/librustc_back/rpath.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Frpath.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -26,7 +26,7 @@ pub struct RPathConfig<'a> {\n pub fn get_rpath_flags(config: RPathConfig) -> Vec<String> {\n \n     // No rpath on windows\n-    if config.os == abi::OsWin32 {\n+    if config.os == abi::OsWindows {\n         return Vec::new();\n     }\n \n@@ -107,14 +107,14 @@ fn get_rpath_relative_to_output(config: &mut RPathConfig,\n                                 lib: &Path) -> String {\n     use std::os;\n \n-    assert!(config.os != abi::OsWin32);\n+    assert!(config.os != abi::OsWindows);\n \n     // Mac doesn't appear to support $ORIGIN\n     let prefix = match config.os {\n         abi::OsAndroid | abi::OsLinux | abi::OsFreebsd | abi::OsDragonfly\n                           => \"$ORIGIN\",\n         abi::OsMacos => \"@loader_path\",\n-        abi::OsWin32 | abi::OsiOS => unreachable!()\n+        abi::OsWindows | abi::OsiOS => unreachable!()\n     };\n \n     let mut lib = (config.realpath)(&os::make_absolute(lib)).unwrap();"}, {"sha": "21c4fd424748f2f21dfc0b08ebd158708e573d01", "filename": "src/librustc_back/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -34,7 +34,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os)\n                 -n8:16:32\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\".to_string()\n           }\n "}, {"sha": "43c4d646ec940c76425c8c3c58990cea90784292", "filename": "src/librustc_back/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibrustc_back%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fx86_64.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -29,7 +29,7 @@ pub fn get_target_strs(target_triple: String, target_os: abi::Os) -> target_strs\n                 s0:64:64-f80:128:128-n8:16:32:64\".to_string()\n           }\n \n-          abi::OsWin32 => {\n+          abi::OsWindows => {\n             // FIXME: Test this. Copied from linux (#2398)\n             \"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\\\n                 f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\\"}, {"sha": "77b0f91f33b676919e795647cd8d4264b07ee591", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98332b1a06193c4f83fc2613f72273b50b77f2b3/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=98332b1a06193c4f83fc2613f72273b50b77f2b3", "patch": "@@ -11,7 +11,7 @@\n use std::fmt;\n \n #[deriving(PartialEq)]\n-pub enum Os { OsWin32, OsMacos, OsLinux, OsAndroid, OsFreebsd, OsiOS,\n+pub enum Os { OsWindows, OsMacos, OsLinux, OsAndroid, OsFreebsd, OsiOS,\n               OsDragonfly }\n \n #[deriving(PartialEq, Eq, Hash, Encodable, Decodable, Clone)]\n@@ -124,7 +124,7 @@ impl Abi {\n         // Transform this ABI as appropriate for the requested os/arch\n         // combination.\n         Some(match (*self, os, arch) {\n-            (System, OsWin32, X86) => Stdcall,\n+            (System, OsWindows, X86) => Stdcall,\n             (System, _, _) => C,\n             (me, _, _) => me,\n         })\n@@ -147,7 +147,7 @@ impl fmt::Show for Os {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             OsLinux => \"linux\".fmt(f),\n-            OsWin32 => \"win32\".fmt(f),\n+            OsWindows => \"win32\".fmt(f),\n             OsMacos => \"macos\".fmt(f),\n             OsiOS => \"ios\".fmt(f),\n             OsAndroid => \"android\".fmt(f),\n@@ -195,9 +195,9 @@ fn pick_uniplatform() {\n     assert_eq!(Stdcall.for_target(OsLinux, X86), Some(Stdcall));\n     assert_eq!(Stdcall.for_target(OsLinux, Arm), None);\n     assert_eq!(System.for_target(OsLinux, X86), Some(C));\n-    assert_eq!(System.for_target(OsWin32, X86), Some(Stdcall));\n-    assert_eq!(System.for_target(OsWin32, X86_64), Some(C));\n-    assert_eq!(System.for_target(OsWin32, Arm), Some(C));\n-    assert_eq!(Stdcall.for_target(OsWin32, X86), Some(Stdcall));\n-    assert_eq!(Stdcall.for_target(OsWin32, X86_64), Some(Stdcall));\n+    assert_eq!(System.for_target(OsWindows, X86), Some(Stdcall));\n+    assert_eq!(System.for_target(OsWindows, X86_64), Some(C));\n+    assert_eq!(System.for_target(OsWindows, Arm), Some(C));\n+    assert_eq!(Stdcall.for_target(OsWindows, X86), Some(Stdcall));\n+    assert_eq!(Stdcall.for_target(OsWindows, X86_64), Some(Stdcall));\n }"}]}