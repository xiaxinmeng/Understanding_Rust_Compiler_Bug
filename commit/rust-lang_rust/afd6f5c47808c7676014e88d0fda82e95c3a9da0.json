{"sha": "afd6f5c47808c7676014e88d0fda82e95c3a9da0", "node_id": "C_kwDOAAsO6NoAKGFmZDZmNWM0NzgwOGM3Njc2MDE0ZTg4ZDBmZGE4MmU5NWMzYTlkYTA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-03T10:02:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-03T10:02:49Z"}, "message": "Rollup merge of #93562 - sunfishcode:sunfishcode/io-docs, r=joshtriplett\n\nUpdate the documentation for `{As,Into,From}Raw{Fd,Handle,Socket}`.\n\nThis change weakens the descriptions of the\n`{as,into,from}_raw_{fd,handle,socket}` descriptions from saying that\nthey *do* express ownership relations to say that they are *typically used*\nin ways that express ownership relations. This is needed since, for\nexample, std's own [`RawFd`] implements `{As,From,Into}Fd` without any of\nthe ownership relationships.\n\nThis adds proper `# Safety` comments to `from_raw_{fd,handle,socket}`,\nadds the requirement that raw handles be not opened with the\n`FILE_FLAG_OVERLAPPED` flag, and merges the `OwnedHandle::from_raw_handle`\ncomment into the main `FromRawHandle::from_raw_handle` comment.\n\nAnd, this changes `HandleOrNull` and `HandleOrInvalid` to not implement\n`FromRawHandle`, since they are intended for limited use in FFI situations,\nand not for generic use, and they have constraints that are stronger than\nthe those of `FromRawHandle`.\n\n[`RawFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/type.RawFd.html", "tree": {"sha": "5b241d5acad5589b2b914da331a189ec81ccff37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b241d5acad5589b2b914da331a189ec81ccff37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afd6f5c47808c7676014e88d0fda82e95c3a9da0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIJJJCRBK7hj4Ov3rIwAAan8IAJe+MaVNkm0+CWroCQsdiGuZ\nFLsRXANfxXyU8jM2zsmexIaZxB3eEC23mPV8e5jHWNVu7fSKaGBbJz3IKr60/Jon\ncivWkiUF1eOD5z5MmZ+tWEne3Djam/sE7EEGkPR26KCJeyw7kY7P2SOFJcvJ9/ki\nkzhnnqARvzCUU9mWxy/bOdZQ9aore0KVfGITFJ8rrq+f91PKWDgOwJCuzJYcfpf1\nD9ZBG4hL5hX2kzbruNPYrs3iQtXQs3pfRu7bhfQRfr373Rwm3eREtirhZv/5QND3\nIK8sAshtuT2tgt0Yb1gU2QxwJXL2lFpLAe4CTl2HRdhWFXlVDFt9ffIfZO5jK7E=\n=9tqf\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b241d5acad5589b2b914da331a189ec81ccff37\nparent 2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a\nparent 8253cfef7aa346c894259471e1e38a34df65cb58\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646301769 +0100\ncommitter GitHub <noreply@github.com> 1646301769 +0100\n\nRollup merge of #93562 - sunfishcode:sunfishcode/io-docs, r=joshtriplett\n\nUpdate the documentation for `{As,Into,From}Raw{Fd,Handle,Socket}`.\n\nThis change weakens the descriptions of the\n`{as,into,from}_raw_{fd,handle,socket}` descriptions from saying that\nthey *do* express ownership relations to say that they are *typically used*\nin ways that express ownership relations. This is needed since, for\nexample, std's own [`RawFd`] implements `{As,From,Into}Fd` without any of\nthe ownership relationships.\n\nThis adds proper `# Safety` comments to `from_raw_{fd,handle,socket}`,\nadds the requirement that raw handles be not opened with the\n`FILE_FLAG_OVERLAPPED` flag, and merges the `OwnedHandle::from_raw_handle`\ncomment into the main `FromRawHandle::from_raw_handle` comment.\n\nAnd, this changes `HandleOrNull` and `HandleOrInvalid` to not implement\n`FromRawHandle`, since they are intended for limited use in FFI situations,\nand not for generic use, and they have constraints that are stronger than\nthe those of `FromRawHandle`.\n\n[`RawFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/type.RawFd.html\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afd6f5c47808c7676014e88d0fda82e95c3a9da0", "html_url": "https://github.com/rust-lang/rust/commit/afd6f5c47808c7676014e88d0fda82e95c3a9da0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afd6f5c47808c7676014e88d0fda82e95c3a9da0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a", "html_url": "https://github.com/rust-lang/rust/commit/2f8d1a835b4e7feaf625f74d0d5cb9b84dbc845a"}, {"sha": "8253cfef7aa346c894259471e1e38a34df65cb58", "url": "https://api.github.com/repos/rust-lang/rust/commits/8253cfef7aa346c894259471e1e38a34df65cb58", "html_url": "https://github.com/rust-lang/rust/commit/8253cfef7aa346c894259471e1e38a34df65cb58"}], "stats": {"total": 183, "additions": 111, "deletions": 72}, "files": [{"sha": "f9c883dd6bf083d49ffed3dbdafc9ba2a9b3f0b0", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/afd6f5c47808c7676014e88d0fda82e95c3a9da0/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd6f5c47808c7676014e88d0fda82e95c3a9da0/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=afd6f5c47808c7676014e88d0fda82e95c3a9da0", "patch": "@@ -5,6 +5,8 @@\n use crate::fs;\n use crate::io;\n use crate::os::raw;\n+#[cfg(doc)]\n+use crate::os::unix::io::AsFd;\n #[cfg(unix)]\n use crate::os::unix::io::OwnedFd;\n #[cfg(target_os = \"wasi\")]\n@@ -24,9 +26,14 @@ pub type RawFd = raw::c_int;\n pub trait AsRawFd {\n     /// Extracts the raw file descriptor.\n     ///\n-    /// This method does **not** pass ownership of the raw file descriptor\n-    /// to the caller. The descriptor is only guaranteed to be valid while\n-    /// the original object has not yet been destroyed.\n+    /// This function is typically used to **borrow** an owned file descriptor.\n+    /// When used in this way, this method does **not** pass ownership of the\n+    /// raw file descriptor to the caller, and the file descriptor is only\n+    /// guaranteed to be valid while the original object has not yet been\n+    /// destroyed.\n+    ///\n+    /// However, borrowing is not strictly required. See [`AsFd::as_fd`]\n+    /// for an API which strictly borrows a file descriptor.\n     ///\n     /// # Example\n     ///\n@@ -55,15 +62,18 @@ pub trait FromRawFd {\n     /// Constructs a new instance of `Self` from the given raw file\n     /// descriptor.\n     ///\n-    /// This function **consumes ownership** of the specified file\n-    /// descriptor. The returned object will take responsibility for closing\n-    /// it when the object goes out of scope.\n+    /// This function is typically used to **consume ownership** of the\n+    /// specified file descriptor. When used in this way, the returned object\n+    /// will take responsibility for closing it when the object goes out of\n+    /// scope.\n+    ///\n+    /// However, consuming ownership is not strictly required. Use a\n+    /// [`From<OwnedFd>::from`] implementation for an API which strictly\n+    /// consumes ownership.\n     ///\n-    /// This function is also unsafe as the primitives currently returned\n-    /// have the contract that they are the sole owner of the file\n-    /// descriptor they are wrapping. Usage of this function could\n-    /// accidentally allow violating this contract which can cause memory\n-    /// unsafety in code that relies on it being true.\n+    /// # Safety\n+    ///\n+    /// The `fd` passed in must be a valid an open file descriptor.\n     ///\n     /// # Example\n     ///\n@@ -94,9 +104,13 @@ pub trait FromRawFd {\n pub trait IntoRawFd {\n     /// Consumes this object, returning the raw underlying file descriptor.\n     ///\n-    /// This function **transfers ownership** of the underlying file descriptor\n-    /// to the caller. Callers are then the unique owners of the file descriptor\n-    /// and must close the descriptor once it's no longer needed.\n+    /// This function is typically used to **transfer ownership** of the underlying\n+    /// file descriptor to the caller. When used in this way, callers are then the unique\n+    /// owners of the file descriptor and must close it once it's no longer needed.\n+    ///\n+    /// However, transferring ownership is not strictly required. Use a\n+    /// [`Into<OwnedFd>::into`] implementation for an API which strictly\n+    /// transfers ownership.\n     ///\n     /// # Example\n     ///"}, {"sha": "d378d591ba3a9f4c5508ba9c2c6c931ef02d25e8", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/afd6f5c47808c7676014e88d0fda82e95c3a9da0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd6f5c47808c7676014e88d0fda82e95c3a9da0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=afd6f5c47808c7676014e88d0fda82e95c3a9da0", "patch": "@@ -214,29 +214,13 @@ impl IntoRawHandle for OwnedHandle {\n }\n \n impl FromRawHandle for OwnedHandle {\n-    /// Constructs a new instance of `Self` from the given raw handle.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The resource pointed to by `handle` must be open and suitable for\n-    /// assuming ownership. The resource must not require any cleanup other\n-    /// than `CloseHandle`.\n-    ///\n-    /// In particular, it must not be used with handles to open registry\n-    /// keys which need to be closed with [`RegCloseKey`] instead.\n-    ///\n-    /// Note that it *may* have the value `INVALID_HANDLE_VALUE` (-1), which is\n-    /// sometimes a valid handle value. See [here] for the full story.\n-    ///\n-    /// [`RegCloseKey`]: https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regclosekey\n-    /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n         Self { handle }\n     }\n }\n \n-impl FromRawHandle for HandleOrNull {\n+impl HandleOrNull {\n     /// Constructs a new instance of `Self` from the given `RawHandle` returned\n     /// from a Windows API that uses null to indicate failure, such as\n     /// `CreateThread`.\n@@ -246,18 +230,18 @@ impl FromRawHandle for HandleOrNull {\n     ///\n     /// # Safety\n     ///\n-    /// The resource pointed to by `handle` must be either open and otherwise\n-    /// unowned, or null. Note that not all Windows APIs use null for errors;\n-    /// see [here] for the full story.\n+    /// The passed `handle` value must either satisfy the safety requirements\n+    /// of [`FromRawHandle::from_raw_handle`], or be null. Note that not all\n+    /// Windows APIs use null for errors; see [here] for the full story.\n     ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n-    unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n+    pub unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n         Self(OwnedHandle::from_raw_handle(handle))\n     }\n }\n \n-impl FromRawHandle for HandleOrInvalid {\n+impl HandleOrInvalid {\n     /// Constructs a new instance of `Self` from the given `RawHandle` returned\n     /// from a Windows API that uses `INVALID_HANDLE_VALUE` to indicate\n     /// failure, such as `CreateFileW`.\n@@ -267,14 +251,14 @@ impl FromRawHandle for HandleOrInvalid {\n     ///\n     /// # Safety\n     ///\n-    /// The resource pointed to by `handle` must be either open and otherwise\n-    /// unowned, null, or equal to `INVALID_HANDLE_VALUE` (-1). Note that not\n-    /// all Windows APIs use `INVALID_HANDLE_VALUE` for errors; see [here] for\n-    /// the full story.\n+    /// The passed `handle` value must either satisfy the safety requirements\n+    /// of [`FromRawHandle::from_raw_handle`], or be\n+    /// `INVALID_HANDLE_VALUE` (-1). Note that not all Windows APIs use\n+    /// `INVALID_HANDLE_VALUE` for errors; see [here] for the full story.\n     ///\n     /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[inline]\n-    unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n+    pub unsafe fn from_raw_handle(handle: RawHandle) -> Self {\n         Self(OwnedHandle::from_raw_handle(handle))\n     }\n }"}, {"sha": "48c5fd358d9dbbd500c18579bdfcd99cabca3590", "filename": "library/std/src/os/windows/io/raw.rs", "status": "modified", "additions": 72, "deletions": 24, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/afd6f5c47808c7676014e88d0fda82e95c3a9da0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd6f5c47808c7676014e88d0fda82e95c3a9da0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fraw.rs?ref=afd6f5c47808c7676014e88d0fda82e95c3a9da0", "patch": "@@ -5,6 +5,8 @@\n use crate::fs;\n use crate::io;\n use crate::net;\n+#[cfg(doc)]\n+use crate::os::windows::io::{AsHandle, AsSocket};\n use crate::os::windows::io::{OwnedHandle, OwnedSocket};\n use crate::os::windows::raw;\n use crate::sys;\n@@ -22,7 +24,15 @@ pub type RawSocket = raw::SOCKET;\n /// Extracts raw handles.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRawHandle {\n-    /// Extracts the raw handle, without taking any ownership.\n+    /// Extracts the raw handle.\n+    ///\n+    /// This function is typically used to **borrow** an owned handle.\n+    /// When used in this way, this method does **not** pass ownership of the\n+    /// raw handle to the caller, and the handle is only guaranteed\n+    /// to be valid while the original object has not yet been destroyed.\n+    ///\n+    /// However, borrowing is not strictly required. See [`AsHandle::as_handle`]\n+    /// for an API which strictly borrows a handle.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_raw_handle(&self) -> RawHandle;\n }\n@@ -32,15 +42,28 @@ pub trait AsRawHandle {\n pub trait FromRawHandle {\n     /// Constructs a new I/O object from the specified raw handle.\n     ///\n-    /// This function will **consume ownership** of the handle given,\n-    /// passing responsibility for closing the handle to the returned\n-    /// object.\n+    /// This function is typically used to **consume ownership** of the handle\n+    /// given, passing responsibility for closing the handle to the returned\n+    /// object. When used in this way, the returned object\n+    /// will take responsibility for closing it when the object goes out of\n+    /// scope.\n+    ///\n+    /// However, consuming ownership is not strictly required. Use a\n+    /// `From<OwnedHandle>::from` implementation for an API which strictly\n+    /// consumes ownership.\n+    ///\n+    /// # Safety\n     ///\n-    /// This function is also unsafe as the primitives currently returned\n-    /// have the contract that they are the sole owner of the file\n-    /// descriptor they are wrapping. Usage of this function could\n-    /// accidentally allow violating this contract which can cause memory\n-    /// unsafety in code that relies on it being true.\n+    /// The `handle` passed in must:\n+    ///   - be a valid an open handle,\n+    ///   - be a handle for a resource that may be freed via [`CloseHandle`]\n+    ///     (as opposed to `RegCloseKey` or other close functions).\n+    ///\n+    /// Note that the handle *may* have the value `INVALID_HANDLE_VALUE` (-1),\n+    /// which is sometimes a valid handle value. See [here] for the full story.\n+    ///\n+    /// [`CloseHandle`]: https://docs.microsoft.com/en-us/windows/win32/api/handleapi/nf-handleapi-closehandle\n+    /// [here]: https://devblogs.microsoft.com/oldnewthing/20040302-00/?p=40443\n     #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n     unsafe fn from_raw_handle(handle: RawHandle) -> Self;\n }\n@@ -51,9 +74,13 @@ pub trait FromRawHandle {\n pub trait IntoRawHandle {\n     /// Consumes this object, returning the raw underlying handle.\n     ///\n-    /// This function **transfers ownership** of the underlying handle to the\n-    /// caller. Callers are then the unique owners of the handle and must close\n-    /// it once it's no longer needed.\n+    /// This function is typically used to **transfer ownership** of the underlying\n+    /// handle to the caller. When used in this way, callers are then the unique\n+    /// owners of the handle and must close it once it's no longer needed.\n+    ///\n+    /// However, transferring ownership is not strictly required. Use a\n+    /// `Into<OwnedHandle>::into` implementation for an API which strictly\n+    /// transfers ownership.\n     #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n     fn into_raw_handle(self) -> RawHandle;\n }\n@@ -130,24 +157,41 @@ impl IntoRawHandle for fs::File {\n /// Extracts raw sockets.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRawSocket {\n-    /// Extracts the underlying raw socket from this object.\n+    /// Extracts the raw socket.\n+    ///\n+    /// This function is typically used to **borrow** an owned socket.\n+    /// When used in this way, this method does **not** pass ownership of the\n+    /// raw socket to the caller, and the socket is only guaranteed\n+    /// to be valid while the original object has not yet been destroyed.\n+    ///\n+    /// However, borrowing is not strictly required. See [`AsSocket::as_socket`]\n+    /// for an API which strictly borrows a socket.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn as_raw_socket(&self) -> RawSocket;\n }\n \n /// Creates I/O objects from raw sockets.\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n pub trait FromRawSocket {\n-    /// Creates a new I/O object from the given raw socket.\n+    /// Constructs a new I/O object from the specified raw socket.\n+    ///\n+    /// This function is typically used to **consume ownership** of the socket\n+    /// given, passing responsibility for closing the socket to the returned\n+    /// object. When used in this way, the returned object\n+    /// will take responsibility for closing it when the object goes out of\n+    /// scope.\n     ///\n-    /// This function will **consume ownership** of the socket provided and\n-    /// it will be closed when the returned object goes out of scope.\n+    /// However, consuming ownership is not strictly required. Use a\n+    /// `From<OwnedSocket>::from` implementation for an API which strictly\n+    /// consumes ownership.\n     ///\n-    /// This function is also unsafe as the primitives currently returned\n-    /// have the contract that they are the sole owner of the file\n-    /// descriptor they are wrapping. Usage of this function could\n-    /// accidentally allow violating this contract which can cause memory\n-    /// unsafety in code that relies on it being true.\n+    /// # Safety\n+    ///\n+    /// The `socket` passed in must:\n+    ///   - be a valid an open socket,\n+    ///   - be a socket that may be freed via [`closesocket`].\n+    ///\n+    /// [`closesocket`]: https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-closesocket\n     #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n     unsafe fn from_raw_socket(sock: RawSocket) -> Self;\n }\n@@ -158,9 +202,13 @@ pub trait FromRawSocket {\n pub trait IntoRawSocket {\n     /// Consumes this object, returning the raw underlying socket.\n     ///\n-    /// This function **transfers ownership** of the underlying socket to the\n-    /// caller. Callers are then the unique owners of the socket and must close\n-    /// it once it's no longer needed.\n+    /// This function is typically used to **transfer ownership** of the underlying\n+    /// socket to the caller. When used in this way, callers are then the unique\n+    /// owners of the socket and must close it once it's no longer needed.\n+    ///\n+    /// However, transferring ownership is not strictly required. Use a\n+    /// `Into<OwnedSocket>::into` implementation for an API which strictly\n+    /// transfers ownership.\n     #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n     fn into_raw_socket(self) -> RawSocket;\n }"}, {"sha": "a6b979cc22bd3777d33bb0f25f9b34e72c84a698", "filename": "library/std/src/os/windows/io/socket.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/afd6f5c47808c7676014e88d0fda82e95c3a9da0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afd6f5c47808c7676014e88d0fda82e95c3a9da0/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fsocket.rs?ref=afd6f5c47808c7676014e88d0fda82e95c3a9da0", "patch": "@@ -172,13 +172,6 @@ impl IntoRawSocket for OwnedSocket {\n }\n \n impl FromRawSocket for OwnedSocket {\n-    /// Constructs a new instance of `Self` from the given raw socket.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The resource pointed to by `socket` must be open and suitable for\n-    /// assuming ownership. The resource must not require cleanup other than\n-    /// `closesocket`.\n     #[inline]\n     unsafe fn from_raw_socket(socket: RawSocket) -> Self {\n         debug_assert_ne!(socket, c::INVALID_SOCKET as RawSocket);"}]}