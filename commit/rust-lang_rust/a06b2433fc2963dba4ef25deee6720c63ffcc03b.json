{"sha": "a06b2433fc2963dba4ef25deee6720c63ffcc03b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNmIyNDMzZmMyOTYzZGJhNGVmMjVkZWVlNjcyMGM2M2ZmY2MwM2I=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-17T19:29:48Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-07-20T19:01:15Z"}, "message": "Update tests for new NLL mutability errors", "tree": {"sha": "c9136001bb8d382658622906043b0d18c6ec4f12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9136001bb8d382658622906043b0d18c6ec4f12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a06b2433fc2963dba4ef25deee6720c63ffcc03b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a06b2433fc2963dba4ef25deee6720c63ffcc03b", "html_url": "https://github.com/rust-lang/rust/commit/a06b2433fc2963dba4ef25deee6720c63ffcc03b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a06b2433fc2963dba4ef25deee6720c63ffcc03b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13b5f69848bf4ba9213fa60e7873f6ff51fc3afc", "url": "https://api.github.com/repos/rust-lang/rust/commits/13b5f69848bf4ba9213fa60e7873f6ff51fc3afc", "html_url": "https://github.com/rust-lang/rust/commit/13b5f69848bf4ba9213fa60e7873f6ff51fc3afc"}], "stats": {"total": 1216, "additions": 1128, "deletions": 88}, "files": [{"sha": "e5e96451d1360dbf38279cb32dd330a9ec5dc48b", "filename": "src/test/compile-fail/E0594.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fcompile-fail%2FE0594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fcompile-fail%2FE0594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0594.rs?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -15,5 +15,5 @@ static NUM: i32 = 18;\n \n fn main() {\n     NUM = 20; //[ast]~ ERROR E0594\n-              //[mir]~^ ERROR cannot assign to immutable item `NUM`\n+              //[mir]~^ ERROR cannot assign to immutable static item `NUM`\n }"}, {"sha": "57002dd40fc95fd31a90ca8bab41e1caafd939d0", "filename": "src/test/compile-fail/borrowck/borrowck-assign-to-constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-assign-to-constants.rs?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -16,5 +16,5 @@ static foo: isize = 5;\n fn main() {\n     // assigning to various global constants\n     foo = 6; //[ast]~ ERROR cannot assign to immutable static item\n-             //[mir]~^ ERROR cannot assign to immutable item `foo`\n+             //[mir]~^ ERROR cannot assign to immutable static item `foo`\n }"}, {"sha": "6bd52f00788e6bb96385fa1f04e50e7118e2668a", "filename": "src/test/compile-fail/cannot-mutate-captured-non-mut-var.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcannot-mutate-captured-non-mut-var.rs?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -22,10 +22,10 @@ fn main() {\n     let x = 1;\n     to_fn_once(move|| { x = 2; });\n     //[ast]~^ ERROR: cannot assign to immutable captured outer variable\n-    //[mir]~^^ ERROR: cannot assign to immutable item `x`\n+    //[mir]~^^ ERROR: cannot assign to `x`, as it is not declared as mutable\n \n     let s = std::io::stdin();\n     to_fn_once(move|| { s.read_to_end(&mut Vec::new()); });\n     //[ast]~^ ERROR: cannot borrow immutable captured outer variable\n-    //[mir]~^^ ERROR: cannot borrow immutable item `s` as mutable\n+    //[mir]~^^ ERROR: cannot borrow `s` as mutable, as it is not declared as mutable\n }"}, {"sha": "7b1dd9265af0da33abfb1d7d76aeac4c695d94ea", "filename": "src/test/compile-fail/nll/constant-thread-locals-issue-47053.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fcompile-fail%2Fnll%2Fconstant-thread-locals-issue-47053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fcompile-fail%2Fnll%2Fconstant-thread-locals-issue-47053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnll%2Fconstant-thread-locals-issue-47053.rs?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -17,5 +17,5 @@\n static FOO: isize = 5;\n \n fn main() {\n-    FOO = 6; //~ ERROR cannot assign to immutable item `FOO` [E0594]\n+    FOO = 6; //~ ERROR cannot assign to immutable static item `FOO` [E0594]\n }"}, {"sha": "57a86227f764d104d6dfa82b593dbc80eeee2f81", "filename": "src/test/ui/augmented-assignments.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -14,7 +14,7 @@ LL | |     x;  //~ value moved here\n    | |_____move out of `x` occurs here\n    |       borrow later used here\n \n-error[E0596]: cannot borrow immutable item `y` as mutable\n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/augmented-assignments.rs:30:5\n    |\n LL |     let y = Int(2);"}, {"sha": "5a1f1986fcf05c31151405339555760702a06eaf", "filename": "src/test/ui/borrowck/issue-45983.nll.stderr", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-45983.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -14,21 +14,14 @@ LL |     give_any(|y| x = Some(y));\n    |               |\n    |               lifetime `'1` appears in this argument\n \n-error[E0594]: cannot assign to immutable item `x`\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/issue-45983.rs:17:18\n    |\n-LL |     give_any(|y| x = Some(y));\n-   |                  ^^^^^^^^^^^ cannot assign\n-\n-error[E0596]: cannot borrow immutable item `x` as mutable\n-  --> $DIR/issue-45983.rs:17:14\n-   |\n LL |     let x = None;\n    |         - help: consider changing this to be mutable: `mut x`\n LL |     give_any(|y| x = Some(y));\n-   |              ^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |                  ^^^^^^^^^^^ cannot assign\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors occurred: E0594, E0596.\n-For more information about an error, try `rustc --explain E0594`.\n+For more information about this error, try `rustc --explain E0594`."}, {"sha": "ece3c62e6a940b5dd6ef45ae8ab8b0a765b965ff", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `b` as mutable\n+error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n   --> $DIR/mut-borrow-of-mut-ref.rs:18:7\n    |\n LL | fn f(b: &mut i32) {"}, {"sha": "14c41bb81b2c65594af40320298f4e157a95e47b", "filename": "src/test/ui/borrowck/mutability-errors.nll.stderr", "status": "added", "additions": 379, "deletions": 0, "changes": 379, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -0,0 +1,379 @@\n+error[E0594]: cannot assign to `*x` which is behind a `&` reference\n+  --> $DIR/mutability-errors.rs:19:5\n+   |\n+LL | fn named_ref(x: &(i32,)) {\n+   |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n+LL |     *x = (1,); //~ ERROR\n+   |     ^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `x.0` which is behind a `&` reference\n+  --> $DIR/mutability-errors.rs:20:5\n+   |\n+LL | fn named_ref(x: &(i32,)) {\n+   |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n+LL |     *x = (1,); //~ ERROR\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n+\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n+  --> $DIR/mutability-errors.rs:21:5\n+   |\n+LL | fn named_ref(x: &(i32,)) {\n+   |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n+...\n+LL |     &mut *x; //~ ERROR\n+   |     ^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `&` reference\n+  --> $DIR/mutability-errors.rs:22:5\n+   |\n+LL | fn named_ref(x: &(i32,)) {\n+   |                 ------- help: consider changing this to be a mutable reference: `&mut (i32,)`\n+...\n+LL |     &mut x.0; //~ ERROR\n+   |     ^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+\n+error[E0594]: cannot assign to data in a `&` reference\n+  --> $DIR/mutability-errors.rs:26:5\n+   |\n+LL |     *f() = (1,); //~ ERROR\n+   |     ^^^^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to data in a `&` reference\n+  --> $DIR/mutability-errors.rs:27:5\n+   |\n+LL |     f().0 = 1; //~ ERROR\n+   |     ^^^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/mutability-errors.rs:28:5\n+   |\n+LL |     &mut *f(); //~ ERROR\n+   |     ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/mutability-errors.rs:29:5\n+   |\n+LL |     &mut f().0; //~ ERROR\n+   |     ^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to `*x` which is behind a `*const` pointer\n+  --> $DIR/mutability-errors.rs:33:5\n+   |\n+LL | unsafe fn named_ptr(x: *const (i32,)) {\n+   |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n+LL |     *x = (1,); //~ ERROR\n+   |     ^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be written\n+\n+error[E0594]: cannot assign to `x.0` which is behind a `*const` pointer\n+  --> $DIR/mutability-errors.rs:34:5\n+   |\n+LL | unsafe fn named_ptr(x: *const (i32,)) {\n+   |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n+LL |     *x = (1,); //~ ERROR\n+LL |     (*x).0 = 1; //~ ERROR\n+   |     ^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be written\n+\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n+  --> $DIR/mutability-errors.rs:35:5\n+   |\n+LL | unsafe fn named_ptr(x: *const (i32,)) {\n+   |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n+...\n+LL |     &mut *x; //~ ERROR\n+   |     ^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as it is behind a `*const` pointer\n+  --> $DIR/mutability-errors.rs:36:5\n+   |\n+LL | unsafe fn named_ptr(x: *const (i32,)) {\n+   |                        ------------- help: consider changing this to be a mutable pointer: `*mut (i32,)`\n+...\n+LL |     &mut (*x).0; //~ ERROR\n+   |     ^^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n+\n+error[E0594]: cannot assign to data in a `*const` pointer\n+  --> $DIR/mutability-errors.rs:40:5\n+   |\n+LL |     *f() = (1,); //~ ERROR\n+   |     ^^^^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to data in a `*const` pointer\n+  --> $DIR/mutability-errors.rs:41:5\n+   |\n+LL |     (*f()).0 = 1; //~ ERROR\n+   |     ^^^^^^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow data in a `*const` pointer as mutable\n+  --> $DIR/mutability-errors.rs:42:5\n+   |\n+LL |     &mut *f(); //~ ERROR\n+   |     ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow data in a `*const` pointer as mutable\n+  --> $DIR/mutability-errors.rs:43:5\n+   |\n+LL |     &mut (*f()).0; //~ ERROR\n+   |     ^^^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/mutability-errors.rs:50:9\n+   |\n+LL |         x = (1,); //~ ERROR\n+   |         ^^^^^^^^ cannot assign\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/mutability-errors.rs:49:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n+  --> $DIR/mutability-errors.rs:51:9\n+   |\n+LL |         x.0 = 1; //~ ERROR\n+   |         ^^^^^^^ cannot assign\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/mutability-errors.rs:49:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/mutability-errors.rs:52:9\n+   |\n+LL |         &mut x; //~ ERROR\n+   |         ^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/mutability-errors.rs:49:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n+  --> $DIR/mutability-errors.rs:53:9\n+   |\n+LL |         &mut x.0; //~ ERROR\n+   |         ^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/mutability-errors.rs:49:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/mutability-errors.rs:56:9\n+   |\n+LL |         x = (1,); //~ ERROR\n+   |         ^^^^^^^^ cannot assign\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/mutability-errors.rs:55:12\n+   |\n+LL |       fn_ref(move || {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0594]: cannot assign to `x.0`, as `Fn` closures cannot mutate their captured variables\n+  --> $DIR/mutability-errors.rs:57:9\n+   |\n+LL |         x.0 = 1; //~ ERROR\n+   |         ^^^^^^^ cannot assign\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/mutability-errors.rs:55:12\n+   |\n+LL |       fn_ref(move || {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/mutability-errors.rs:58:9\n+   |\n+LL |         &mut x; //~ ERROR\n+   |         ^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/mutability-errors.rs:55:12\n+   |\n+LL |       fn_ref(move || {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `Fn` closures cannot mutate their captured variables\n+  --> $DIR/mutability-errors.rs:59:9\n+   |\n+LL |         &mut x.0; //~ ERROR\n+   |         ^^^^^^^^ cannot borrow as mutable\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/mutability-errors.rs:55:12\n+   |\n+LL |       fn_ref(move || {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/mutability-errors.rs:64:5\n+   |\n+LL | fn imm_local(x: (i32,)) {\n+   |              - help: consider changing this to be mutable: `mut x`\n+LL |     &mut x; //~ ERROR\n+   |     ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+  --> $DIR/mutability-errors.rs:65:5\n+   |\n+LL | fn imm_local(x: (i32,)) {\n+   |              - help: consider changing this to be mutable: `mut x`\n+LL |     &mut x; //~ ERROR\n+LL |     &mut x.0; //~ ERROR\n+   |     ^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/mutability-errors.rs:70:9\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+LL |     || { //~ ERROR\n+LL |         x = (1,);\n+   |         ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/mutability-errors.rs:71:9\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         x.0 = 1;\n+   |         ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/mutability-errors.rs:72:9\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         &mut x;\n+   |         ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+  --> $DIR/mutability-errors.rs:73:9\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         &mut x.0;\n+   |         ^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/mutability-errors.rs:76:9\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         x = (1,); //~ ERROR\n+   |         ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+  --> $DIR/mutability-errors.rs:77:9\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         x.0 = 1; //~ ERROR\n+   |         ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+  --> $DIR/mutability-errors.rs:78:9\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         &mut x; //~ ERROR\n+   |         ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+  --> $DIR/mutability-errors.rs:79:9\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         &mut x.0; //~ ERROR\n+   |         ^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to immutable static item `X`\n+  --> $DIR/mutability-errors.rs:86:5\n+   |\n+LL |     X = (1,); //~ ERROR\n+   |     ^^^^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `X.0`, as `X` is an immutable static item\n+  --> $DIR/mutability-errors.rs:87:5\n+   |\n+LL |     X.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow immutable static item `X` as mutable\n+  --> $DIR/mutability-errors.rs:88:5\n+   |\n+LL |     &mut X; //~ ERROR\n+   |     ^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `X.0` as mutable, as `X` is an immutable static item\n+  --> $DIR/mutability-errors.rs:89:5\n+   |\n+LL |     &mut X.0; //~ ERROR\n+   |     ^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 38 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "0b4548cbebb7df6fd3df325361402ed1ce4587eb", "filename": "src/test/ui/borrowck/mutability-errors.rs", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.rs?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -0,0 +1,92 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// All the possible mutability error cases.\n+\n+#![allow(unused)]\n+\n+type MakeRef = fn() -> &'static (i32,);\n+type MakePtr = fn() -> *const (i32,);\n+\n+fn named_ref(x: &(i32,)) {\n+    *x = (1,); //~ ERROR\n+    x.0 = 1; //~ ERROR\n+    &mut *x; //~ ERROR\n+    &mut x.0; //~ ERROR\n+}\n+\n+fn unnamed_ref(f: MakeRef) {\n+    *f() = (1,); //~ ERROR\n+    f().0 = 1; //~ ERROR\n+    &mut *f(); //~ ERROR\n+    &mut f().0; //~ ERROR\n+}\n+\n+unsafe fn named_ptr(x: *const (i32,)) {\n+    *x = (1,); //~ ERROR\n+    (*x).0 = 1; //~ ERROR\n+    &mut *x; //~ ERROR\n+    &mut (*x).0; //~ ERROR\n+}\n+\n+unsafe fn unnamed_ptr(f: MakePtr) {\n+    *f() = (1,); //~ ERROR\n+    (*f()).0 = 1; //~ ERROR\n+    &mut *f(); //~ ERROR\n+    &mut (*f()).0; //~ ERROR\n+}\n+\n+fn fn_ref<F: Fn()>(f: F) -> F { f }\n+\n+fn ref_closure(mut x: (i32,)) {\n+    fn_ref(|| {\n+        x = (1,); //~ ERROR\n+        x.0 = 1; //~ ERROR\n+        &mut x; //~ ERROR\n+        &mut x.0; //~ ERROR\n+    });\n+    fn_ref(move || {\n+        x = (1,); //~ ERROR\n+        x.0 = 1; //~ ERROR\n+        &mut x; //~ ERROR\n+        &mut x.0; //~ ERROR\n+    });\n+}\n+\n+fn imm_local(x: (i32,)) {\n+    &mut x; //~ ERROR\n+    &mut x.0; //~ ERROR\n+}\n+\n+fn imm_capture(x: (i32,)) {\n+    || { //~ ERROR\n+        x = (1,);\n+        x.0 = 1;\n+        &mut x;\n+        &mut x.0;\n+    };\n+    move || {\n+        x = (1,); //~ ERROR\n+        x.0 = 1; //~ ERROR\n+        &mut x; //~ ERROR\n+        &mut x.0; //~ ERROR\n+    };\n+}\n+\n+static X: (i32,) = (0,);\n+\n+fn imm_static() {\n+    X = (1,); //~ ERROR\n+    X.0 = 1; //~ ERROR\n+    &mut X; //~ ERROR\n+    &mut X.0; //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "d77254f31414b8251eb156c44680b3e3437b920d", "filename": "src/test/ui/borrowck/mutability-errors.stderr", "status": "added", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -0,0 +1,308 @@\n+error[E0594]: cannot assign to immutable borrowed content `*x`\n+  --> $DIR/mutability-errors.rs:19:5\n+   |\n+LL | fn named_ref(x: &(i32,)) {\n+   |                 ------- use `&mut (i32,)` here to make mutable\n+LL |     *x = (1,); //~ ERROR\n+   |     ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to field `x.0` of immutable binding\n+  --> $DIR/mutability-errors.rs:20:5\n+   |\n+LL | fn named_ref(x: &(i32,)) {\n+   |                 ------- use `&mut (i32,)` here to make mutable\n+LL |     *x = (1,); //~ ERROR\n+LL |     x.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0596]: cannot borrow immutable borrowed content `*x` as mutable\n+  --> $DIR/mutability-errors.rs:21:10\n+   |\n+LL | fn named_ref(x: &(i32,)) {\n+   |                 ------- use `&mut (i32,)` here to make mutable\n+...\n+LL |     &mut *x; //~ ERROR\n+   |          ^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n+  --> $DIR/mutability-errors.rs:22:10\n+   |\n+LL | fn named_ref(x: &(i32,)) {\n+   |                 ------- use `&mut (i32,)` here to make mutable\n+...\n+LL |     &mut x.0; //~ ERROR\n+   |          ^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to immutable borrowed content\n+  --> $DIR/mutability-errors.rs:26:5\n+   |\n+LL |     *f() = (1,); //~ ERROR\n+   |     ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to field of immutable binding\n+  --> $DIR/mutability-errors.rs:27:5\n+   |\n+LL |     f().0 = 1; //~ ERROR\n+   |     ^^^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0596]: cannot borrow immutable borrowed content as mutable\n+  --> $DIR/mutability-errors.rs:28:10\n+   |\n+LL |     &mut *f(); //~ ERROR\n+   |          ^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow field of immutable binding as mutable\n+  --> $DIR/mutability-errors.rs:29:10\n+   |\n+LL |     &mut f().0; //~ ERROR\n+   |          ^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to immutable dereference of raw pointer `*x`\n+  --> $DIR/mutability-errors.rs:33:5\n+   |\n+LL |     *x = (1,); //~ ERROR\n+   |     ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to field `x.0` of immutable binding\n+  --> $DIR/mutability-errors.rs:34:5\n+   |\n+LL |     (*x).0 = 1; //~ ERROR\n+   |     ^^^^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0596]: cannot borrow immutable dereference of raw pointer `*x` as mutable\n+  --> $DIR/mutability-errors.rs:35:10\n+   |\n+LL |     &mut *x; //~ ERROR\n+   |          ^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n+  --> $DIR/mutability-errors.rs:36:10\n+   |\n+LL |     &mut (*x).0; //~ ERROR\n+   |          ^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to immutable dereference of raw pointer\n+  --> $DIR/mutability-errors.rs:40:5\n+   |\n+LL |     *f() = (1,); //~ ERROR\n+   |     ^^^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0594]: cannot assign to field of immutable binding\n+  --> $DIR/mutability-errors.rs:41:5\n+   |\n+LL |     (*f()).0 = 1; //~ ERROR\n+   |     ^^^^^^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0596]: cannot borrow immutable dereference of raw pointer as mutable\n+  --> $DIR/mutability-errors.rs:42:10\n+   |\n+LL |     &mut *f(); //~ ERROR\n+   |          ^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow field of immutable binding as mutable\n+  --> $DIR/mutability-errors.rs:43:10\n+   |\n+LL |     &mut (*f()).0; //~ ERROR\n+   |          ^^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n+  --> $DIR/mutability-errors.rs:50:9\n+   |\n+LL |         x = (1,); //~ ERROR\n+   |         ^^^^^^^^\n+   |\n+help: consider changing this closure to take self by mutable reference\n+  --> $DIR/mutability-errors.rs:49:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0387]: cannot assign to data in a captured outer variable in an `Fn` closure\n+  --> $DIR/mutability-errors.rs:51:9\n+   |\n+LL |         x.0 = 1; //~ ERROR\n+   |         ^^^^^^^\n+   |\n+help: consider changing this closure to take self by mutable reference\n+  --> $DIR/mutability-errors.rs:49:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n+  --> $DIR/mutability-errors.rs:52:14\n+   |\n+LL |         &mut x; //~ ERROR\n+   |              ^\n+   |\n+help: consider changing this closure to take self by mutable reference\n+  --> $DIR/mutability-errors.rs:49:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0387]: cannot borrow data mutably in a captured outer variable in an `Fn` closure\n+  --> $DIR/mutability-errors.rs:53:14\n+   |\n+LL |         &mut x.0; //~ ERROR\n+   |              ^^^\n+   |\n+help: consider changing this closure to take self by mutable reference\n+  --> $DIR/mutability-errors.rs:49:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n+  --> $DIR/mutability-errors.rs:56:9\n+   |\n+LL |         x = (1,); //~ ERROR\n+   |         ^^^^^^^^\n+   |\n+   = note: `Fn` closures cannot capture their enclosing environment for modifications\n+help: consider changing this closure to take self by mutable reference\n+  --> $DIR/mutability-errors.rs:55:12\n+   |\n+LL |       fn_ref(move || {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0594]: cannot assign to field `x.0` of immutable binding\n+  --> $DIR/mutability-errors.rs:57:9\n+   |\n+LL |         x.0 = 1; //~ ERROR\n+   |         ^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0596]: cannot borrow captured outer variable in an `Fn` closure as mutable\n+  --> $DIR/mutability-errors.rs:58:14\n+   |\n+LL |         &mut x; //~ ERROR\n+   |              ^\n+   |\n+help: consider changing this closure to take self by mutable reference\n+  --> $DIR/mutability-errors.rs:55:12\n+   |\n+LL |       fn_ref(move || {\n+   |  ____________^\n+LL | |         x = (1,); //~ ERROR\n+LL | |         x.0 = 1; //~ ERROR\n+LL | |         &mut x; //~ ERROR\n+LL | |         &mut x.0; //~ ERROR\n+LL | |     });\n+   | |_____^\n+\n+error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n+  --> $DIR/mutability-errors.rs:59:14\n+   |\n+LL |         &mut x.0; //~ ERROR\n+   |              ^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0596]: cannot borrow immutable argument `x` as mutable\n+  --> $DIR/mutability-errors.rs:64:10\n+   |\n+LL | fn imm_local(x: (i32,)) {\n+   |              - consider changing this to `mut x`\n+LL |     &mut x; //~ ERROR\n+   |          ^ cannot borrow mutably\n+\n+error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n+  --> $DIR/mutability-errors.rs:65:10\n+   |\n+LL | fn imm_local(x: (i32,)) {\n+   |              - consider changing this to `mut x`\n+LL |     &mut x; //~ ERROR\n+LL |     &mut x.0; //~ ERROR\n+   |          ^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0595]: closure cannot assign to immutable argument `x`\n+  --> $DIR/mutability-errors.rs:69:5\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - consider changing this to `mut x`\n+LL |     || { //~ ERROR\n+   |     ^^ cannot borrow mutably\n+\n+error[E0594]: cannot assign to captured outer variable in an `FnMut` closure\n+  --> $DIR/mutability-errors.rs:76:9\n+   |\n+LL | fn imm_capture(x: (i32,)) {\n+   |                - help: consider making `x` mutable: `mut x`\n+...\n+LL |         x = (1,); //~ ERROR\n+   |         ^^^^^^^^\n+\n+error[E0594]: cannot assign to field `x.0` of immutable binding\n+  --> $DIR/mutability-errors.rs:77:9\n+   |\n+LL |         x.0 = 1; //~ ERROR\n+   |         ^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0596]: cannot borrow captured outer variable in an `FnMut` closure as mutable\n+  --> $DIR/mutability-errors.rs:78:14\n+   |\n+LL |         &mut x; //~ ERROR\n+   |              ^\n+\n+error[E0596]: cannot borrow field `x.0` of immutable binding as mutable\n+  --> $DIR/mutability-errors.rs:79:14\n+   |\n+LL |         &mut x.0; //~ ERROR\n+   |              ^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0594]: cannot assign to immutable static item\n+  --> $DIR/mutability-errors.rs:86:5\n+   |\n+LL |     X = (1,); //~ ERROR\n+   |     ^^^^^^^^\n+\n+error[E0594]: cannot assign to field of immutable binding\n+  --> $DIR/mutability-errors.rs:87:5\n+   |\n+LL |     X.0 = 1; //~ ERROR\n+   |     ^^^^^^^ cannot mutably borrow field of immutable binding\n+\n+error[E0596]: cannot borrow immutable static item as mutable\n+  --> $DIR/mutability-errors.rs:88:10\n+   |\n+LL |     &mut X; //~ ERROR\n+   |          ^\n+\n+error[E0596]: cannot borrow field of immutable binding as mutable\n+  --> $DIR/mutability-errors.rs:89:10\n+   |\n+LL |     &mut X.0; //~ ERROR\n+   |          ^^^ cannot mutably borrow field of immutable binding\n+\n+error: aborting due to 35 previous errors\n+\n+Some errors occurred: E0387, E0594, E0595, E0596.\n+For more information about an error, try `rustc --explain E0387`."}, {"sha": "d91c1199b3f8235957aa555be17951cd19ef9bfb", "filename": "src/test/ui/closure-immutable-outer-variable.nll.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-immutable-outer-variable.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,6 +1,8 @@\n-error[E0594]: cannot assign to immutable item `y`\n+error[E0594]: cannot assign to `y`, as it is not declared as mutable\n   --> $DIR/closure-immutable-outer-variable.rs:21:26\n    |\n+LL |     let y = true;\n+   |         - help: consider changing this to be mutable: `mut y`\n LL |     foo(Box::new(move || y = false) as Box<_>); //~ ERROR cannot assign to captured outer variable\n    |                          ^^^^^^^^^ cannot assign\n "}, {"sha": "8251f04d353f767a738d4c7ffdf3a12f7389f562", "filename": "src/test/ui/codemap_tests/huge_multispan_highlight.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fhuge_multispan_highlight.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/huge_multispan_highlight.rs:100:13\n    |\n LL |     let x = \"foo\";"}, {"sha": "eae834e2b1aa8e6f35269ad115588a7537ecffe2", "filename": "src/test/ui/did_you_mean/issue-31424.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-31424.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,10 +1,10 @@\n-error[E0596]: cannot borrow immutable item `self` as mutable\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:17:9\n    |\n LL |         (&mut self).bar(); //~ ERROR cannot borrow\n    |         ^^^^^^^^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable item `self` as mutable\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-31424.rs:23:9\n    |\n LL |     fn bar(self: &mut Self) {"}, {"sha": "004c43a7343f802e19bb0d3963cd896e8f927ab1", "filename": "src/test/ui/did_you_mean/issue-34126.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `self` as mutable\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> $DIR/issue-34126.rs:16:18\n    |\n LL |         self.run(&mut self); //~ ERROR cannot borrow"}, {"sha": "38315a067c07f8729cfbc81bac0b3bee88ac1c15", "filename": "src/test/ui/did_you_mean/issue-34337.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34337.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `key` as mutable\n+error[E0596]: cannot borrow `key` as mutable, as it is not declared as mutable\n   --> $DIR/issue-34337.rs:16:9\n    |\n LL |     get(&mut key); //~ ERROR cannot borrow"}, {"sha": "804e5f0531f852a5b9976b35139a5b025b27c1c1", "filename": "src/test/ui/did_you_mean/issue-35937.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-35937.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `f.v` as mutable\n+error[E0596]: cannot borrow `f.v` as mutable, as `f` is not declared as mutable\n   --> $DIR/issue-35937.rs:17:5\n    |\n LL |     let f = Foo { v: Vec::new() };"}, {"sha": "7cc7ca14638145b1ee37eabe26fffe442761de8a", "filename": "src/test/ui/did_you_mean/issue-37139.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-37139.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/issue-37139.rs:22:18\n    |\n LL |             test(&mut x); //~ ERROR cannot borrow immutable"}, {"sha": "25613561bbaf886cb379a3ef819f242f23a60a9b", "filename": "src/test/ui/did_you_mean/issue-38147-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-1.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*self.s` as mutable\n+error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-1.rs:27:9\n    |\n LL |     fn f(&self) {"}, {"sha": "21fc4079d5b59d29626e162a04f1d6c2aba956a9", "filename": "src/test/ui/did_you_mean/issue-38147-2.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-2.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*self.s` as mutable\n+error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-2.rs:17:9\n    |\n LL |         self.s.push('x');"}, {"sha": "d426c1f37fc1c667a3a44f339ed19d44b0fdbae1", "filename": "src/test/ui/did_you_mean/issue-38147-3.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-3.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*self.s` as mutable\n+error[E0596]: cannot borrow `*self.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-3.rs:17:9\n    |\n LL |         self.s.push('x');"}, {"sha": "eccbe19ac943e36c3da5cc0787653b3fb5c7ac56", "filename": "src/test/ui/did_you_mean/issue-38147-4.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-38147-4.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*f.s` as mutable\n+error[E0596]: cannot borrow `*f.s` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-38147-4.rs:16:5\n    |\n LL | fn f(x: usize, f: &Foo) {"}, {"sha": "00e4cc6b0c35d459ebb2f4910e85c47545c3ba95", "filename": "src/test/ui/did_you_mean/issue-39544.nll.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39544.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,28 +1,28 @@\n-error[E0596]: cannot borrow immutable item `z.x` as mutable\n+error[E0596]: cannot borrow `z.x` as mutable, as `z` is not declared as mutable\n   --> $DIR/issue-39544.rs:21:13\n    |\n LL |     let z = Z { x: X::Y };\n    |         - help: consider changing this to be mutable: `mut z`\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable item `self.x` as mutable\n+error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:26:17\n    |\n LL |     fn foo<'z>(&'z self) {\n    |                -------- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `self.x` as mutable\n+error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:30:17\n    |\n LL |     fn foo1(&self, other: &Z) {\n    |             ----- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `other.x` as mutable\n+error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:31:17\n    |\n LL |     fn foo1(&self, other: &Z) {\n@@ -31,15 +31,15 @@ LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `self.x` as mutable\n+error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:35:17\n    |\n LL |     fn foo2<'a>(&'a self, other: &Z) {\n    |                 -------- help: consider changing this to be a mutable reference: `&mut self`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `other.x` as mutable\n+error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:36:17\n    |\n LL |     fn foo2<'a>(&'a self, other: &Z) {\n@@ -48,15 +48,15 @@ LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `self.x` as mutable\n+error[E0596]: cannot borrow `self.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:40:17\n    |\n LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n    |                       -------- help: consider changing this to be a mutable reference: `&mut Z`\n LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^ `self` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `other.x` as mutable\n+error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:41:17\n    |\n LL |     fn foo3<'a>(self: &'a Self, other: &Z) {\n@@ -65,23 +65,23 @@ LL |         let _ = &mut self.x; //~ ERROR cannot borrow\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `other.x` as mutable\n+error[E0596]: cannot borrow `other.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:45:17\n    |\n LL |     fn foo4(other: &Z) {\n    |                    -- help: consider changing this to be a mutable reference: `&mut Z`\n LL |         let _ = &mut other.x; //~ ERROR cannot borrow\n    |                 ^^^^^^^^^^^^ `other` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `z.x` as mutable\n+error[E0596]: cannot borrow `z.x` as mutable, as `z` is not declared as mutable\n   --> $DIR/issue-39544.rs:51:13\n    |\n LL | pub fn with_arg(z: Z, w: &Z) {\n    |                 - help: consider changing this to be mutable: `mut z`\n LL |     let _ = &mut z.x; //~ ERROR cannot borrow\n    |             ^^^^^^^^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable item `w.x` as mutable\n+error[E0596]: cannot borrow `w.x` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-39544.rs:52:13\n    |\n LL | pub fn with_arg(z: Z, w: &Z) {"}, {"sha": "44ae058cc28034baca8f198864f974ec57ee5620", "filename": "src/test/ui/did_you_mean/issue-40823.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40823.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*buf` as mutable\n+error[E0596]: cannot borrow `*buf` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-40823.rs:13:5\n    |\n LL |     let mut buf = &[1, 2, 3, 4];"}, {"sha": "08708d213d3f68e5071f60a0c99fb7c94414bd85", "filename": "src/test/ui/error-codes/E0017.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -10,7 +10,7 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                       ^^^^^^ statics require immutable values\n \n-error[E0596]: cannot borrow immutable item `X` as mutable\n+error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0017.rs:15:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017"}, {"sha": "a048374a4972502a8ecc027e1ad6897eaddff675", "filename": "src/test/ui/error-codes/E0388.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -10,7 +10,7 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n    |                                       ^^^^^^ statics require immutable values\n \n-error[E0596]: cannot borrow immutable item `X` as mutable\n+error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0388.rs:15:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017"}, {"sha": "ff06256088fa2ec3218f8d5830c10601ae90601f", "filename": "src/test/ui/fn-closure-mutable-capture.nll.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn-closure-mutable-capture.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,8 +1,14 @@\n-error[E0594]: cannot assign to `x` which is behind a `&` reference\n+error[E0594]: cannot assign to `x`, as it is a captured variable in a `Fn` closure\n   --> $DIR/fn-closure-mutable-capture.rs:15:17\n    |\n LL |     bar(move || x = 1);\n    |                 ^^^^^ cannot assign\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/fn-closure-mutable-capture.rs:15:9\n+   |\n+LL |     bar(move || x = 1);\n+   |         ^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "5fe8dc45ccc72ce4afc988d49da9477aab06a0e0", "filename": "src/test/ui/issue-21600.nll.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-21600.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-21600.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-21600.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,14 +1,33 @@\n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/issue-21600.rs:24:20\n    |\n LL |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n    |                    ^ cannot borrow as mutable\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/issue-21600.rs:24:17\n+   |\n+LL |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+   |                 ^^^^^^^^^^^^^^\n \n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n   --> $DIR/issue-21600.rs:24:17\n    |\n LL |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n-   |                 ^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |                 ^^ - mutable borrow occurs due to use of `x` in closure\n+   |                 |\n+   |                 cannot borrow as mutable\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/issue-21600.rs:22:13\n+   |\n+LL |       call_it(|| {\n+   |  _____________^\n+LL | |         call_it(|| x.gen());\n+LL | |         call_it(|| x.gen_mut()); //~ ERROR cannot borrow data mutably in a captured outer\n+LL | |         //~^ ERROR cannot borrow data mutably in a captured outer\n+LL | |     });\n+   | |_____^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "39d54f6e7ae28f65df90fda4a4f04ea7561ce7f4", "filename": "src/test/ui/issue-27282-reborrow-ref-mut-in-guard.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.rs?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     match b {\n         &mut false => {},\n         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n-                             //~^ ERROR cannot borrow immutable item `*r` as mutable\n+        //~^ ERROR cannot borrow `r` as mutable, as it is immutable for the pattern guard\n                              false } => { &mut *r; },\n         &mut true => { println!(\"You might think we should get here\"); },\n         _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),"}, {"sha": "660902880ac2ff833c68449d1f096865d67d1293", "filename": "src/test/ui/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,8 +1,12 @@\n-error[E0596]: cannot borrow immutable item `*r` as mutable\n-  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:26:24\n+error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern guard\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:26:25\n    |\n LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot borrow as mutable\n+   |                         ^^                   - mutable borrow occurs due to use of `r` in closure\n+   |                         |\n+   |                         cannot borrow as mutable\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error: aborting due to previous error\n "}, {"sha": "78ad31a04c88b2112659cc39cab11259cbbf8854", "filename": "src/test/ui/issue-33819.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-33819.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-33819.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-33819.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `v` as mutable\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n   --> $DIR/issue-33819.rs:13:34\n    |\n LL |         Some(ref v) => { let a = &mut v; },"}, {"sha": "e4347f0ece831c270a9b4686661adf501dbbb1d1", "filename": "src/test/ui/issue-36400.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-36400.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-36400.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n   --> $DIR/issue-36400.rs:15:7\n    |\n LL |     let x = Box::new(3);"}, {"sha": "06ff743a0f5ed295a7e360db7bae73e4d9d72c6f", "filename": "src/test/ui/issue-41726.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-41726.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-41726.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-41726.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item as mutable\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n   --> $DIR/issue-41726.rs:15:9\n    |\n LL |         things[src.as_str()].sort(); //~ ERROR cannot borrow immutable"}, {"sha": "1abc448dbb090c2ae64d6563da06b47304f47f84", "filename": "src/test/ui/issue-42344.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-42344.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-42344.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42344.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*TAB[..]` as mutable\n+error[E0596]: cannot borrow `*TAB[..]` as mutable, as `TAB` is an immutable static item\n   --> $DIR/issue-42344.rs:14:5\n    |\n LL |     TAB[0].iter_mut(); //~ ERROR cannot borrow data mutably in a `&` reference [E0389]"}, {"sha": "bda629d48affcd3bd15be3a8fe1e87f1e9371141", "filename": "src/test/ui/issue-46023.ast.nll.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46023.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46023.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46023.ast.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,6 +1,9 @@\n-error[E0594]: cannot assign to immutable item `x`\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/issue-46023.rs:18:9\n    |\n+LL |     let x = 0;\n+   |         - help: consider changing this to be mutable: `mut x`\n+...\n LL |         x = 1;\n    |         ^^^^^ cannot assign\n "}, {"sha": "bda629d48affcd3bd15be3a8fe1e87f1e9371141", "filename": "src/test/ui/issue-46023.mir.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46023.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46023.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46023.mir.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,6 +1,9 @@\n-error[E0594]: cannot assign to immutable item `x`\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/issue-46023.rs:18:9\n    |\n+LL |     let x = 0;\n+   |         - help: consider changing this to be mutable: `mut x`\n+...\n LL |         x = 1;\n    |         ^^^^^ cannot assign\n "}, {"sha": "d5c8cd6d0f8fc6e3012dbe8a0e5d410eb673bfbc", "filename": "src/test/ui/issue-46023.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46023.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46023.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46023.rs?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -16,7 +16,7 @@ fn main() {\n \n     (move || {\n         x = 1;\n-        //[mir]~^ ERROR cannot assign to immutable item `x` [E0594]\n+        //[mir]~^ ERROR cannot assign to `x`, as it is not declared as mutable [E0594]\n         //[ast]~^^ ERROR cannot assign to captured outer variable in an `FnMut` closure [E0594]\n     })()\n }"}, {"sha": "a4ee0d4e2a3a926f1faa3b9cae1076d14335a90f", "filename": "src/test/ui/issue-46604.ast.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46604.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46604.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46604.ast.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -4,7 +4,7 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //[ast]~ ERROR E0017\n    |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n \n-error[E0594]: cannot assign to immutable item `buf[..]`\n+error[E0594]: cannot assign to `buf[..]`, as `buf` is an immutable static item\n   --> $DIR/issue-46604.rs:20:5\n    |\n LL |     buf[0]=2;                                   //[ast]~ ERROR E0389"}, {"sha": "a4ee0d4e2a3a926f1faa3b9cae1076d14335a90f", "filename": "src/test/ui/issue-46604.mir.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46604.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fissue-46604.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-46604.mir.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -4,7 +4,7 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static buf: &mut [u8] = &mut [1u8,2,3,4,5,7];   //[ast]~ ERROR E0017\n    |                         ^^^^^^^^^^^^^^^^^^^^ statics require immutable values\n \n-error[E0594]: cannot assign to immutable item `buf[..]`\n+error[E0594]: cannot assign to `buf[..]`, as `buf` is an immutable static item\n   --> $DIR/issue-46604.rs:20:5\n    |\n LL |     buf[0]=2;                                   //[ast]~ ERROR E0389"}, {"sha": "d5bba6649a2c714bb0cf37bccf24621bb4fa05ff", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -12,7 +12,7 @@ LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n LL |   y.push(z); //~ ERROR lifetime mismatch\n    |   ^ ...but data from `z` flows into `y` here\n \n-error[E0596]: cannot borrow immutable item `y` as mutable\n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/ex3-both-anon-regions-using-fn-items.rs:11:3\n    |\n LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {"}, {"sha": "0608b3be8b33aea599e5bc91c6ab8cebf63705b7", "filename": "src/test/ui/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -12,7 +12,7 @@ LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n LL |   y.push(z); //~ ERROR lifetime mismatch\n    |   ^ ...but data from `z` flows into `y` here\n \n-error[E0596]: cannot borrow immutable item `y` as mutable\n+error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n   --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:3\n    |\n LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {"}, {"sha": "3947f6c0f11fca8e7351d4983284c373cf8e5e6b", "filename": "src/test/ui/macros/span-covering-argument-1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fspan-covering-argument-1.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `foo` as mutable\n+error[E0596]: cannot borrow `foo` as mutable, as it is not declared as mutable\n   --> $DIR/span-covering-argument-1.rs:15:14\n    |\n LL |             let $s = 0;"}, {"sha": "03a22bb79a86ba527831c62b94c634a8dc664952", "filename": "src/test/ui/nll/closure-captures.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.rs?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Some cases with closures that might be problems\n+\n+#![allow(unused)]\n+#![feature(nll)]\n+\n+// Should have one error per assigment\n+\n+fn one_closure(x: i32) {\n+    ||\n+    x = 1; //~ ERROR\n+    move ||\n+    x = 1; //~ ERROR\n+}\n+\n+fn two_closures(x: i32) {\n+    || {\n+        ||\n+        x = 1; //~ ERROR\n+    };\n+    move || {\n+        ||\n+        x = 1; //~ ERROR\n+    };\n+}\n+\n+fn fn_ref<F: Fn()>(f: F) -> F { f }\n+\n+fn two_closures_ref_mut(mut x: i32) {\n+    fn_ref(|| {\n+        || //~ ERROR\n+         x = 1;}\n+    );\n+    fn_ref(move || {\n+        ||  //~ ERROR\n+    x = 1;});\n+}\n+\n+// This still gives two messages, but it requires two things to be fixed.\n+fn two_closures_ref(x: i32) {\n+    fn_ref(|| {\n+        || //~ ERROR\n+         x = 1;} //~ ERROR\n+    );\n+    fn_ref(move || {\n+        ||  //~ ERROR\n+    x = 1;}); //~ ERROR\n+}\n+\n+fn two_closures_two_refs(x: &mut i32) {\n+    fn_ref(|| {\n+        || //~ ERROR\n+        *x = 1;});\n+    fn_ref(move || {\n+        || //~ ERROR\n+        *x = 1;});\n+}\n+\n+fn main() {}"}, {"sha": "a03e104a1b1fbc20ddea5bfc9fe323179ace6ac7", "filename": "src/test/ui/nll/closure-captures.stderr", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-captures.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -0,0 +1,160 @@\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/closure-captures.rs:20:5\n+   |\n+LL | fn one_closure(x: i32) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+LL |     ||\n+LL |     x = 1; //~ ERROR\n+   |     ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/closure-captures.rs:22:5\n+   |\n+LL | fn one_closure(x: i32) {\n+   |                - help: consider changing this to be mutable: `mut x`\n+...\n+LL |     x = 1; //~ ERROR\n+   |     ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/closure-captures.rs:28:9\n+   |\n+LL | fn two_closures(x: i32) {\n+   |                 - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         x = 1; //~ ERROR\n+   |         ^^^^^ cannot assign\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/closure-captures.rs:32:9\n+   |\n+LL | fn two_closures(x: i32) {\n+   |                 - help: consider changing this to be mutable: `mut x`\n+...\n+LL |         x = 1; //~ ERROR\n+   |         ^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/closure-captures.rs:40:9\n+   |\n+LL |         || //~ ERROR\n+   |         ^^ cannot borrow as mutable\n+LL |          x = 1;}\n+   |          - mutable borrow occurs due to use of `x` in closure\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/closure-captures.rs:39:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         || //~ ERROR\n+LL | |          x = 1;}\n+   | |________________^\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/closure-captures.rs:44:9\n+   |\n+LL |         ||  //~ ERROR\n+   |         ^^ cannot borrow as mutable\n+LL |     x = 1;});\n+   |     - mutable borrow occurs due to use of `x` in closure\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/closure-captures.rs:43:12\n+   |\n+LL |       fn_ref(move || {\n+   |  ____________^\n+LL | |         ||  //~ ERROR\n+LL | |     x = 1;});\n+   | |___________^\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/closure-captures.rs:52:10\n+   |\n+LL | fn two_closures_ref(x: i32) {\n+   |                     - help: consider changing this to be mutable: `mut x`\n+...\n+LL |          x = 1;} //~ ERROR\n+   |          ^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/closure-captures.rs:51:9\n+   |\n+LL |         || //~ ERROR\n+   |         ^^ cannot borrow as mutable\n+LL |          x = 1;} //~ ERROR\n+   |          - mutable borrow occurs due to use of `x` in closure\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/closure-captures.rs:50:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         || //~ ERROR\n+LL | |          x = 1;} //~ ERROR\n+   | |________________^\n+\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+  --> $DIR/closure-captures.rs:56:5\n+   |\n+LL | fn two_closures_ref(x: i32) {\n+   |                     - help: consider changing this to be mutable: `mut x`\n+...\n+LL |     x = 1;}); //~ ERROR\n+   |     ^^^^^ cannot assign\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/closure-captures.rs:55:9\n+   |\n+LL |         ||  //~ ERROR\n+   |         ^^ cannot borrow as mutable\n+LL |     x = 1;}); //~ ERROR\n+   |     - mutable borrow occurs due to use of `x` in closure\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/closure-captures.rs:54:12\n+   |\n+LL |       fn_ref(move || {\n+   |  ____________^\n+LL | |         ||  //~ ERROR\n+LL | |     x = 1;}); //~ ERROR\n+   | |___________^\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/closure-captures.rs:61:9\n+   |\n+LL |         || //~ ERROR\n+   |         ^^ cannot borrow as mutable\n+LL |         *x = 1;});\n+   |          - mutable borrow occurs due to use of `x` in closure\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/closure-captures.rs:60:12\n+   |\n+LL |       fn_ref(|| {\n+   |  ____________^\n+LL | |         || //~ ERROR\n+LL | |         *x = 1;});\n+   | |________________^\n+\n+error[E0596]: cannot borrow `x` as mutable, as it is a captured variable in a `Fn` closure\n+  --> $DIR/closure-captures.rs:64:9\n+   |\n+LL |         || //~ ERROR\n+   |         ^^ cannot borrow as mutable\n+LL |         *x = 1;});\n+   |          - mutable borrow occurs due to use of `x` in closure\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/closure-captures.rs:63:12\n+   |\n+LL |       fn_ref(move || {\n+   |  ____________^\n+LL | |         || //~ ERROR\n+LL | |         *x = 1;});\n+   | |________________^\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors occurred: E0594, E0596.\n+For more information about an error, try `rustc --explain E0594`."}, {"sha": "180a330a30e745a2102b426827a03a4ec5c57cd1", "filename": "src/test/ui/nll/generator-upvar-mutability.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fnll%2Fgenerator-upvar-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fnll%2Fgenerator-upvar-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fgenerator-upvar-mutability.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,6 +1,9 @@\n-error[E0594]: cannot assign to immutable item `x`\n+error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/generator-upvar-mutability.rs:18:9\n    |\n+LL |     let x = 0;\n+   |         - help: consider changing this to be mutable: `mut x`\n+LL |     move || {\n LL |         x = 1;\n    |         ^^^^^ cannot assign\n "}, {"sha": "366bfc8fa20a5a013bc9c293f1a52c855836d143", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,60 +1,60 @@\n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:63:24\n    |\n LL | fn deref_mut_field1(x: Own<Point>) {\n    |                     - help: consider changing this to be mutable: `mut x`\n LL |     let __isize = &mut x.y; //~ ERROR cannot borrow\n    |                        ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:75:10\n    |\n LL | fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n    |                               ----------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     &mut x.y //~ ERROR cannot borrow\n    |          ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:98:5\n    |\n LL | fn assign_field1<'a>(x: Own<Point>) {\n    |                      - help: consider changing this to be mutable: `mut x`\n LL |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:102:5\n    |\n LL | fn assign_field2<'a>(x: &'a Own<Point>) {\n    |                         -------------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     x.y = 3; //~ ERROR cannot borrow\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:119:5\n    |\n LL | fn deref_mut_method1(x: Own<Point>) {\n    |                      - help: consider changing this to be mutable: `mut x`\n LL |     x.set(0, 0); //~ ERROR cannot borrow\n    |     ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:131:5\n    |\n LL | fn deref_extend_mut_method1(x: &Own<Point>) -> &mut isize {\n    |                                ----------- help: consider changing this to be a mutable reference: `&mut Own<Point>`\n LL |     x.y_mut() //~ ERROR cannot borrow\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:139:6\n    |\n LL | fn assign_method1<'a>(x: Own<Point>) {\n    |                       - help: consider changing this to be mutable: `mut x`\n LL |     *x.y_mut() = 3; //~ ERROR cannot borrow\n    |      ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:143:6\n    |\n LL | fn assign_method2<'a>(x: &'a Own<Point>) {"}, {"sha": "69bf246ff3fef61d645f38bb58a528901b3c9f45", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.nll.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,28 +1,28 @@\n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:39:25\n    |\n LL | fn deref_mut1(x: Own<isize>) {\n    |               - help: consider changing this to be mutable: `mut x`\n LL |     let __isize = &mut *x; //~ ERROR cannot borrow\n    |                         ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:51:11\n    |\n LL | fn deref_extend_mut1<'a>(x: &'a Own<isize>) -> &'a mut isize {\n    |                             -------------- help: consider changing this to be a mutable reference: `&mut Own<isize>`\n LL |     &mut **x //~ ERROR cannot borrow\n    |           ^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `x` as mutable\n+error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:59:6\n    |\n LL | fn assign1<'a>(x: Own<isize>) {\n    |                - help: consider changing this to be mutable: `mut x`\n LL |     *x = 3; //~ ERROR cannot borrow\n    |      ^ cannot borrow as mutable\n \n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:63:6\n    |\n LL | fn assign2<'a>(x: &'a Own<isize>) {"}, {"sha": "f752015c650b9d825c447eabe7efffd334793404", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -12,15 +12,15 @@ LL | |         f((Box::new(|| {})))\n LL | |     }));\n    | |_______- borrow later used here\n \n-error[E0596]: cannot borrow immutable item `*f` as mutable\n+error[E0596]: cannot borrow `*f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:35:5\n    |\n LL | fn test2<F>(f: &F) where F: FnMut() {\n    |                -- help: consider changing this to be a mutable reference: `&mut F`\n LL |     (*f)();\n    |     ^^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `*f.f` as mutable\n+error[E0596]: cannot borrow `*f.f` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:44:5\n    |\n LL | fn test4(f: &Test) {"}, {"sha": "e9c0505af68b23bced7993396b81269aa1618344", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-call-method-from-mut-aliasable.rs:27:5\n    |\n LL | fn b(x: &Foo) {"}, {"sha": "5e47d3271d49fe436d17a225242ed85b3a4885d5", "filename": "src/test/ui/span/borrowck-fn-in-const-b.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-fn-in-const-b.rs:17:9\n    |\n LL |     fn broken(x: &Vec<String>) {"}, {"sha": "3f0eb97c7af293b16b97bc0c7f053e69843a718c", "filename": "src/test/ui/span/borrowck-object-mutability.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,4 +1,4 @@\n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n   --> $DIR/borrowck-object-mutability.rs:19:5\n    |\n LL | fn borrowed_receiver(x: &Foo) {\n@@ -7,7 +7,7 @@ LL |     x.borrowed();\n LL |     x.borrowed_mut(); //~ ERROR cannot borrow\n    |     ^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `*x` as mutable\n+error[E0596]: cannot borrow `*x` as mutable, as `x` is not declared as mutable\n   --> $DIR/borrowck-object-mutability.rs:29:5\n    |\n LL | fn owned_receiver(x: Box<Foo>) {"}, {"sha": "f264ea1f916769b274b99efbed7166297284daf0", "filename": "src/test/ui/span/mut-arg-hint.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,20 +1,20 @@\n-error[E0596]: cannot borrow immutable item `*a` as mutable\n+error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:13:9\n    |\n LL |     fn foo(mut a: &String) {\n    |                   ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n LL |         a.push_str(\"bar\"); //~ ERROR cannot borrow immutable borrowed content\n    |         ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `*a` as mutable\n+error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:18:5\n    |\n LL | pub fn foo<'a>(mut a: &'a String) {\n    |                       ---------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n LL |     a.push_str(\"foo\"); //~ ERROR cannot borrow immutable borrowed content\n    |     ^ `a` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `*a` as mutable\n+error[E0596]: cannot borrow `*a` as mutable, as it is behind a `&` reference\n   --> $DIR/mut-arg-hint.rs:25:9\n    |\n LL |     pub fn foo(mut a: &String) {"}, {"sha": "215faf6c73c369ab1e2c90f96d9867968c144335", "filename": "src/test/ui/trivial-bounds-inconsistent-copy-reborrow.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a06b2433fc2963dba4ef25deee6720c63ffcc03b/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds-inconsistent-copy-reborrow.nll.stderr?ref=a06b2433fc2963dba4ef25deee6720c63ffcc03b", "patch": "@@ -1,12 +1,12 @@\n-error[E0596]: cannot borrow immutable item `**t` as mutable\n+error[E0596]: cannot borrow `**t` as mutable, as it is behind a `&` reference\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:16:5\n    |\n LL | fn reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {\n    |                        --------------- help: consider changing this to be a mutable reference: `&mut &mut i32`\n LL |     *t //~ ERROR\n    |     ^^ `t` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0596]: cannot borrow immutable item `**t` as mutable\n+error[E0596]: cannot borrow `**t` as mutable, as it is behind a `&` reference\n   --> $DIR/trivial-bounds-inconsistent-copy-reborrow.rs:20:6\n    |\n LL | fn copy_reborrow_mut<'a>(t: &'a &'a mut i32) -> &'a mut i32 where &'a mut i32: Copy {"}]}