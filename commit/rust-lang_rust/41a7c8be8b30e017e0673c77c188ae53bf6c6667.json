{"sha": "41a7c8be8b30e017e0673c77c188ae53bf6c6667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxYTdjOGJlOGIzMGUwMTdlMDY3M2M3N2MxODhhZTUzYmY2YzY2Njc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-04T13:21:59Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-09T14:50:51Z"}, "message": "resolve: Remove some bits relevant only to legacy plugins\n\nThey are unstable and going to be removed anyway and the removed code would complicate the next commit", "tree": {"sha": "453ecf716ff3548f951bf7e5246b88896990b64f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/453ecf716ff3548f951bf7e5246b88896990b64f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41a7c8be8b30e017e0673c77c188ae53bf6c6667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41a7c8be8b30e017e0673c77c188ae53bf6c6667", "html_url": "https://github.com/rust-lang/rust/commit/41a7c8be8b30e017e0673c77c188ae53bf6c6667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41a7c8be8b30e017e0673c77c188ae53bf6c6667/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "441e5aed2501de4dcafff8c1e2442ee4145737be", "url": "https://api.github.com/repos/rust-lang/rust/commits/441e5aed2501de4dcafff8c1e2442ee4145737be", "html_url": "https://github.com/rust-lang/rust/commit/441e5aed2501de4dcafff8c1e2442ee4145737be"}], "stats": {"total": 33, "additions": 11, "deletions": 22}, "files": [{"sha": "a54d498272eea158fc45a96c3788ca475b99776d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/41a7c8be8b30e017e0673c77c188ae53bf6c6667/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a7c8be8b30e017e0673c77c188ae53bf6c6667/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=41a7c8be8b30e017e0673c77c188ae53bf6c6667", "patch": "@@ -620,7 +620,6 @@ enum AmbiguityKind {\n     Import,\n     BuiltinAttr,\n     DeriveHelper,\n-    LegacyHelperVsPrelude,\n     LegacyVsModern,\n     GlobVsOuter,\n     GlobVsGlob,\n@@ -637,8 +636,6 @@ impl AmbiguityKind {\n                 \"built-in attribute vs any other name\",\n             AmbiguityKind::DeriveHelper =>\n                 \"derive helper attribute vs any other name\",\n-            AmbiguityKind::LegacyHelperVsPrelude =>\n-                \"legacy plugin helper attribute vs name from prelude\",\n             AmbiguityKind::LegacyVsModern =>\n                 \"`macro_rules` vs non-`macro_rules` from other module\",\n             AmbiguityKind::GlobVsOuter =>"}, {"sha": "a36db7dac144d622fe30f0bad890a2732d36ff30", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/41a7c8be8b30e017e0673c77c188ae53bf6c6667/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41a7c8be8b30e017e0673c77c188ae53bf6c6667/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=41a7c8be8b30e017e0673c77c188ae53bf6c6667", "patch": "@@ -456,10 +456,9 @@ impl<'a> Resolver<'a> {\n             struct Flags: u8 {\n                 const MACRO_RULES        = 1 << 0;\n                 const MODULE             = 1 << 1;\n-                const PRELUDE            = 1 << 2;\n-                const MISC_SUGGEST_CRATE = 1 << 3;\n-                const MISC_SUGGEST_SELF  = 1 << 4;\n-                const MISC_FROM_PRELUDE  = 1 << 5;\n+                const MISC_SUGGEST_CRATE = 1 << 2;\n+                const MISC_SUGGEST_SELF  = 1 << 3;\n+                const MISC_FROM_PRELUDE  = 1 << 4;\n             }\n         }\n \n@@ -576,12 +575,12 @@ impl<'a> Resolver<'a> {\n                         let binding = (Res::NonMacroAttr(NonMacroAttrKind::Registered),\n                                        ty::Visibility::Public, ident.span, ExpnId::root())\n                                        .to_name_binding(this.arenas);\n-                        Ok((binding, Flags::PRELUDE))\n+                        Ok((binding, Flags::empty()))\n                     }\n                     None => Err(Determinacy::Determined)\n                 }\n                 Scope::MacroUsePrelude => match this.macro_use_prelude.get(&ident.name).cloned() {\n-                    Some(binding) => Ok((binding, Flags::PRELUDE | Flags::MISC_FROM_PRELUDE)),\n+                    Some(binding) => Ok((binding, Flags::MISC_FROM_PRELUDE)),\n                     None => Err(Determinacy::determined(\n                         this.graph_root.unexpanded_invocations.borrow().is_empty()\n                     ))\n@@ -590,7 +589,7 @@ impl<'a> Resolver<'a> {\n                     let binding = (Res::NonMacroAttr(NonMacroAttrKind::Builtin),\n                                    ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n                                    .to_name_binding(this.arenas);\n-                    Ok((binding, Flags::PRELUDE))\n+                    Ok((binding, Flags::empty()))\n                 } else {\n                     Err(Determinacy::Determined)\n                 }\n@@ -599,12 +598,12 @@ impl<'a> Resolver<'a> {\n                     let binding = (Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper),\n                                    ty::Visibility::Public, DUMMY_SP, ExpnId::root())\n                                    .to_name_binding(this.arenas);\n-                    Ok((binding, Flags::PRELUDE))\n+                    Ok((binding, Flags::empty()))\n                 } else {\n                     Err(Determinacy::Determined)\n                 }\n                 Scope::ExternPrelude => match this.extern_prelude_get(ident, !record_used) {\n-                    Some(binding) => Ok((binding, Flags::PRELUDE)),\n+                    Some(binding) => Ok((binding, Flags::empty())),\n                     None => Err(Determinacy::determined(\n                         this.graph_root.unexpanded_invocations.borrow().is_empty()\n                     )),\n@@ -614,7 +613,7 @@ impl<'a> Resolver<'a> {\n                         let binding = (Res::ToolMod,\n                                        ty::Visibility::Public, ident.span, ExpnId::root())\n                                        .to_name_binding(this.arenas);\n-                        Ok((binding, Flags::PRELUDE))\n+                        Ok((binding, Flags::empty()))\n                     }\n                     None => Err(Determinacy::Determined)\n                 }\n@@ -630,7 +629,7 @@ impl<'a> Resolver<'a> {\n                             path_span,\n                         ) {\n                             if use_prelude || this.is_builtin_macro(binding.res()) {\n-                                result = Ok((binding, Flags::PRELUDE | Flags::MISC_FROM_PRELUDE));\n+                                result = Ok((binding, Flags::MISC_FROM_PRELUDE));\n                             }\n                         }\n                     }\n@@ -641,7 +640,7 @@ impl<'a> Resolver<'a> {\n                     Some(prim_ty) => {\n                         let binding = (Res::PrimTy(prim_ty), ty::Visibility::Public,\n                                        DUMMY_SP, ExpnId::root()).to_name_binding(this.arenas);\n-                        Ok((binding, Flags::PRELUDE))\n+                        Ok((binding, Flags::empty()))\n                     }\n                     None => Err(Determinacy::Determined)\n                 }\n@@ -659,20 +658,13 @@ impl<'a> Resolver<'a> {\n                         if res != innermost_res {\n                             let builtin = Res::NonMacroAttr(NonMacroAttrKind::Builtin);\n                             let derive_helper = Res::NonMacroAttr(NonMacroAttrKind::DeriveHelper);\n-                            let legacy_helper =\n-                                Res::NonMacroAttr(NonMacroAttrKind::LegacyPluginHelper);\n \n                             let ambiguity_error_kind = if is_import {\n                                 Some(AmbiguityKind::Import)\n                             } else if innermost_res == builtin || res == builtin {\n                                 Some(AmbiguityKind::BuiltinAttr)\n                             } else if innermost_res == derive_helper || res == derive_helper {\n                                 Some(AmbiguityKind::DeriveHelper)\n-                            } else if innermost_res == legacy_helper &&\n-                                      flags.contains(Flags::PRELUDE) ||\n-                                      res == legacy_helper &&\n-                                      innermost_flags.contains(Flags::PRELUDE) {\n-                                Some(AmbiguityKind::LegacyHelperVsPrelude)\n                             } else if innermost_flags.contains(Flags::MACRO_RULES) &&\n                                       flags.contains(Flags::MODULE) &&\n                                       !this.disambiguate_legacy_vs_modern(innermost_binding,"}]}