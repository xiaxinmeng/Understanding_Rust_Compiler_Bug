{"sha": "a16acc0c105c438a5cf1500eb4c4a5c4388c2dca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNmFjYzBjMTA1YzQzOGE1Y2YxNTAwZWI0YzRhNWM0Mzg4YzJkY2E=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2012-01-05T02:14:47Z"}, "committer": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2012-01-05T04:25:20Z"}, "message": "added preliminary support for per-architecture generation of math constants (for porting)", "tree": {"sha": "6c1ea2cc1e66e304d64d242d2aa30235f9ec6d15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c1ea2cc1e66e304d64d242d2aa30235f9ec6d15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca", "html_url": "https://github.com/rust-lang/rust/commit/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6284190ef9918e05cb9147a2a81100ddcb06fea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6284190ef9918e05cb9147a2a81100ddcb06fea8", "html_url": "https://github.com/rust-lang/rust/commit/6284190ef9918e05cb9147a2a81100ddcb06fea8"}], "stats": {"total": 239, "additions": 216, "deletions": 23}, "files": [{"sha": "5c32594912a719ebdbf6c3af36a3d972314d72bd", "filename": "src/etc/cmathconsts.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca/src%2Fetc%2Fcmathconsts.c", "raw_url": "https://github.com/rust-lang/rust/raw/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca/src%2Fetc%2Fcmathconsts.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcmathconsts.c?ref=a16acc0c105c438a5cf1500eb4c4a5c4388c2dca", "patch": "@@ -0,0 +1,92 @@\n+// This is a helper C program for generating required math constants\n+//\n+// Should only be required when porting to a different target architecture\n+// (or c compiler/libmath)\n+//\n+// Call with <rust machine type of c_float> <rust machine type of c_double>\n+// and ensure that libcore/cmath.rs complies to the output\n+//\n+// Requires a printf that supports \"%a\" specifiers\n+//\n+\n+#include <float.h>\n+#include <math.h>\n+#include <stdio.h>\n+\n+// must match core::ctypes\n+\n+#define C_FLT(x) (float)x\n+#define C_DBL(x) (double)x\n+\n+int main(int argc, char** argv) {\n+  if (argc != 3) {\n+    fprintf(stderr, \"%s <ctypes::c_float> <ctypes::c_double>\\n\", argv[0]);\n+    return 1;\n+  }\n+  char* c_flt = argv[1];\n+  char* c_dbl = argv[2];\n+\n+  printf(\"mod c_float_math_consts {\\n\");\n+  printf(\"    const pi: c_float = %a_%s;\\n\", C_FLT(M_PI), c_flt);\n+  printf(\"    const div_1_pi: c_float = %a_%s;\\n\", C_FLT(M_1_PI), c_flt);\n+  printf(\"    const div_2_pi: c_float = %a_%s;\\n\", C_FLT(M_2_PI), c_flt);\n+  printf(\"    const div_pi_2: c_float = %a_%s;\\n\", C_FLT(M_PI_2), c_flt);\n+  printf(\"    const div_pi_4: c_float = %a_%s;\\n\", C_FLT(M_PI_4), c_flt);\n+  printf(\"    const div_2_sqrtpi: c_float = %a_%s;\\n\",\n+         C_FLT(M_2_SQRTPI), c_flt);\n+  printf(\"    const e: c_float = %a_%s;\\n\", C_FLT(M_E), c_flt);\n+  printf(\"    const log2_e: c_float = %a_%s;\\n\", C_FLT(M_LOG2E), c_flt);\n+  printf(\"    const log10_e: c_float = %a_%s;\\n\", C_FLT(M_LOG10E), c_flt);\n+  printf(\"    const ln_2: c_float = %a_%s;\\n\",  C_FLT(M_LN2), c_flt);\n+  printf(\"    const ln_10: c_float = %a_%s;\\n\",  C_FLT(M_LN10), c_flt);\n+  printf(\"    const sqrt2: c_float = %a_%s;\\n\",  C_FLT(M_SQRT2), c_flt);\n+  printf(\"    const div_1_sqrt2: c_float = %a_%s;\\n\",\n+         C_FLT(M_SQRT1_2), c_flt);\n+  printf(\"}\\n\\n\");\n+\n+  printf(\"mod c_double_math_consts {\\n\");\n+  printf(\"    const pi: c_double = %a_%s;\\n\", C_DBL(M_PI), c_dbl);\n+  printf(\"    const div_1_pi: c_double = %a_%s;\\n\", C_DBL(M_1_PI), c_dbl);\n+  printf(\"    const div_2_pi: c_double = %a_%s;\\n\", C_DBL(M_2_PI), c_dbl);\n+  printf(\"    const div_pi_2: c_double = %a_%s;\\n\", C_DBL(M_PI_2), c_dbl);\n+  printf(\"    const div_pi_4: c_double = %a_%s;\\n\", C_DBL(M_PI_4), c_dbl);\n+  printf(\"    const div_2_sqrtpi: c_double = %a_%s;\\n\",\n+         C_DBL(M_2_SQRTPI), c_dbl);\n+  printf(\"    const e: c_double = %a_%s;\\n\", C_DBL(M_E), c_dbl);\n+  printf(\"    const log2_e: c_double = %a_%s;\\n\", C_DBL(M_LOG2E), c_dbl);\n+  printf(\"    const log10_e: c_double = %a_%s;\\n\", C_DBL(M_LOG10E), c_dbl);\n+  printf(\"    const ln_2: c_double = %a_%s;\\n\", C_DBL(M_LN2), c_dbl);\n+  printf(\"    const ln_10: c_double = %a_%s;\\n\", C_DBL(M_LN10), c_dbl);\n+  printf(\"    const sqrt2: c_double = %a_%s;\\n\", C_DBL(M_SQRT2), c_dbl);\n+  printf(\"    const div_1_sqrt2: c_double = %a_%s;\\n\",\n+         C_DBL(M_SQRT1_2), c_dbl);\n+  printf(\"}\\n\\n\");\n+\n+  printf(\"mod c_float_targ_consts {\\n\");\n+  printf(\"    const radix: uint = %u;\\n\", FLT_RADIX);\n+  printf(\"    const mantissa_digits: uint = %u;\\n\", FLT_MANT_DIG);\n+  printf(\"    const digits: uint = %u;\\n\", FLT_DIG);\n+  printf(\"    const min_exp: uint = %i;\\n\", FLT_MIN_EXP);\n+  printf(\"    const max_exp: uint = %i;\\n\", FLT_MAX_EXP);\n+  printf(\"    const min_10_exp: int = %i;\\n\", FLT_MIN_10_EXP);\n+  printf(\"    const max_10_exp: int = %i;\\n\", FLT_MAX_10_EXP);\n+  printf(\"    const min_value: c_float = %a_%s;\\n\", C_FLT(FLT_MIN), c_flt);\n+  printf(\"    const max_value: c_float = %a_%s;\\n\", C_FLT(FLT_MAX), c_flt);\n+  printf(\"    const epsilon: c_float = %a_%s;\\n\", C_FLT(FLT_EPSILON), c_flt);\n+  printf(\"}\\n\\n\");\n+\n+  printf(\"mod c_double_targ_consts {\\n\");\n+  printf(\"    const radix: uint = %u;\\n\", FLT_RADIX);\n+  printf(\"    const mantissa_digits: uint = %u;\\n\", DBL_MANT_DIG);\n+  printf(\"    const digits: uint = %u;\\n\", DBL_DIG);\n+  printf(\"    const min_exp: uint = %i;\\n\", DBL_MIN_EXP);\n+  printf(\"    const max_exp: uint = %i;\\n\", DBL_MAX_EXP);\n+  printf(\"    const min_10_exp: int = %i;\\n\", DBL_MIN_10_EXP);\n+  printf(\"    const max_10_exp: int = %i;\\n\", DBL_MAX_10_EXP);\n+  printf(\"    const min_value: c_double = %a_%s;\\n\", C_DBL(DBL_MIN), c_dbl);\n+  printf(\"    const max_value: c_double = %a_%s;\\n\", C_DBL(DBL_MAX), c_dbl);\n+  printf(\"    const epsilon: c_double = %a_%s;\\n\", C_DBL(DBL_EPSILON), c_dbl);\n+  printf(\"}\\n\");\n+\n+  return 0;\n+}"}, {"sha": "3eea7147ea922ad17dd7a6ce6553b737c843cb91", "filename": "src/libcore/cmath.rs", "status": "modified", "additions": 102, "deletions": 1, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=a16acc0c105c438a5cf1500eb4c4a5c4388c2dca", "patch": "@@ -1,5 +1,11 @@\n-export c_double;\n export c_float;\n+export c_double;\n+\n+// FIXME export c_float_math_consts;\n+// FIXME export c_double_math_consts;\n+\n+export c_float_targ_consts;\n+export c_double_targ_consts;\n \n import ctypes::c_int;\n import ctypes::c_float;\n@@ -143,6 +149,101 @@ native mod c_float {\n     #[link_name=\"truncf\"] pure fn trunc(n: c_float) -> c_float;\n }\n \n+// PORT check these by running src/etc/machconsts.c for your architecture\n+\n+// FIXME obtain machine float/math constants automatically\n+\n+mod c_float_targ_consts {\n+    const radix: uint = 2;\n+    const mantissa_digits: uint = 24;\n+    const digits: uint = 6;\n+    const min_exp: uint = -125;\n+    const max_exp: uint = 128;\n+    const min_10_exp: int = -37;\n+    const max_10_exp: int = 38;\n+    // FIXME this is wrong! replace with hexadecimal (%a) constants below\n+    const min_value: f32 = 1.175494e-38_f32;\n+    const max_value: f32 = 3.402823e+38_f32;\n+    const epsilon: f32 = 0.000000_f32;\n+}\n+\n+mod c_double_targ_consts {\n+    const radix: uint = 2;\n+    const mantissa_digits: uint = 53;\n+    const digits: uint = 15;\n+    const min_exp: uint = -1021;\n+    const max_exp: uint = 1024;\n+    const min_10_exp: int = -307;\n+    const max_10_exp: int = 308;\n+    // FIXME this is wrong! replace with hexadecimal (%a) constants below\n+    const min_value: f64 = 2.225074e-308_f64;\n+    const max_value: f64 = 1.797693e+308_f64;\n+    const epsilon: f64 = 2.220446e-16_f64;\n+}\n+\n+/*\n+\n+FIXME use these once they can be parsed\n+\n+mod c_float_math_consts {\n+    const pi: c_float = 0x1.921fb6p+1_f32;\n+    const div_1_pi: c_float = 0x1.45f306p-2_f32;\n+    const div_2_pi: c_float = 0x1.45f306p-1_f32;\n+    const div_pi_2: c_float = 0x1.921fb6p+0_f32;\n+    const div_pi_4: c_float = 0x1.921fb6p-1_f32;\n+    const div_2_sqrtpi: c_float = 0x1.20dd76p+0_f32;\n+    const e: c_float = 0x1.5bf0a8p+1_f32;\n+    const log2_e: c_float = 0x1.715476p+0_f32;\n+    const log10_e: c_float = 0x1.bcb7b2p-2_f32;\n+    const ln_2: c_float = 0x1.62e43p-1_f32;\n+    const ln_10: c_float = 0x1.26bb1cp+1_f32;\n+    const sqrt2: c_float = 0x1.6a09e6p+0_f32;\n+    const div_1_sqrt2: c_float = 0x1.6a09e6p-1_f32;\n+}\n+\n+mod c_double_math_consts {\n+    const pi: c_double = 0x1.921fb54442d18p+1_f64;\n+    const div_1_pi: c_double = 0x1.45f306dc9c883p-2_f64;\n+    const div_2_pi: c_double = 0x1.45f306dc9c883p-1_f64;\n+    const div_pi_2: c_double = 0x1.921fb54442d18p+0_f64;\n+    const div_pi_4: c_double = 0x1.921fb54442d18p-1_f64;\n+    const div_2_sqrtpi: c_double = 0x1.20dd750429b6dp+0_f64;\n+    const e: c_double = 0x1.5bf0a8b145769p+1_f64;\n+    const log2_e: c_double = 0x1.71547652b82fep+0_f64;\n+    const log10_e: c_double = 0x1.bcb7b1526e50ep-2_f64;\n+    const ln_2: c_double = 0x1.62e42fefa39efp-1_f64;\n+    const ln_10: c_double = 0x1.26bb1bbb55516p+1_f64;\n+    const sqrt2: c_double = 0x1.6a09e667f3bcdp+0_f64;\n+    const div_1_sqrt2: c_double = 0x1.6a09e667f3bcdp-1_f64;\n+}\n+\n+mod c_float_targ_consts {\n+    const radix: uint = 2;\n+    const mantissa_digits: uint = 24;\n+    const digits: uint = 6;\n+    const min_exp: uint = -125;\n+    const max_exp: uint = 128;\n+    const min_10_exp: int = -37;\n+    const max_10_exp: int = 38;\n+    const min_value: c_float = 0x1p-126_f32;\n+    const max_value: c_float = 0x1.fffffep+127_f32;\n+    const epsilon: c_float = 0x1p-23_f32;\n+}\n+\n+mod c_double_targ_consts {\n+    const radix: uint = 2;\n+    const mantissa_digits: uint = 53;\n+    const digits: uint = 15;\n+    const min_exp: uint = -1021;\n+    const max_exp: uint = 1024;\n+    const min_10_exp: int = -307;\n+    const max_10_exp: int = 308;\n+    const min_value: c_double = 0x1p-1022_f64;\n+    const max_value: c_double = 0x1.fffffffffffffp+1023_f64;\n+    const epsilon: c_double = 0x1p-52_f64;\n+}\n+*/\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "421398d20fd74faf07eaee7a7aede2d0ff0cb106", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=a16acc0c105c438a5cf1500eb4c4a5c4388c2dca", "patch": "@@ -7,33 +7,13 @@ Floating point operations and constants for `f32`\n // PORT\n \n import cmath::c_float::*;\n+import cmath::c_float_targ_consts::*;\n \n type t = f32;\n \n-\n // These are not defined inside consts:: for consistency with\n // the integer types\n \n-// PORT check per architecture\n-\n-// FIXME obtain these in a different way\n-\n-const radix: uint = 2u;\n-\n-const mantissa_digits: uint = 24u;\n-const digits: uint = 6u;\n-\n-const epsilon: f32 = 1.19209290e-07_f32;\n-\n-const min_value: f32 = 1.17549435e-38_f32;\n-const max_value: f32 = 3.40282347e+38_f32;\n-\n-const min_exp: int = -125;\n-const max_exp: int = 128;\n-\n-const min_10_exp: int = -37;\n-const max_10_exp: int = 38;\n-\n /* Const: NaN */\n const NaN: f32 = 0.0_f32/0.0_f32;\n \n@@ -150,6 +130,8 @@ pure fn is_finite(x: f32) -> bool {\n /* Module: consts */\n mod consts {\n \n+    // FIXME replace with mathematical constants from cmath\n+\n     /*\n     Const: pi\n \n@@ -242,6 +224,14 @@ mod consts {\n     const ln_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n+#[cfg(target_os=\"linux\")]\n+#[cfg(target_os=\"macos\")]\n+#[cfg(target_os=\"win32\")]\n+pure fn logarithm(n: f32, b: f32) -> f32 {\n+    ret log2(n) / log2(b);\n+}\n+\n+#[cfg(target_os=\"freebsd\")]\n pure fn logarithm(n: f32, b: f32) -> f32 {\n     ret ln(n) / ln(b);\n }"}, {"sha": "245d7c26478e6d93957396263b499b4af27eb4b3", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a16acc0c105c438a5cf1500eb4c4a5c4388c2dca/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=a16acc0c105c438a5cf1500eb4c4a5c4388c2dca", "patch": "@@ -7,10 +7,10 @@ Floating point operations and constants for `f64`\n // PORT\n \n import cmath::c_double::*;\n+import cmath::c_double_targ_consts::*;\n \n type t = f64;\n \n-\n // These are not defined inside consts:: for consistency with\n // the integer types\n \n@@ -147,6 +147,8 @@ pure fn is_finite(x: f64) -> bool {\n /* Module: consts */\n mod consts {\n \n+    // FIXME replace with mathematical constants from cmath\n+\n     /*\n     Const: pi\n \n@@ -239,6 +241,14 @@ mod consts {\n     const ln_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n+#[cfg(target_os=\"linux\")]\n+#[cfg(target_os=\"macos\")]\n+#[cfg(target_os=\"win32\")]\n+pure fn logarithm(n: f64, b: f64) -> f64 {\n+    ret log2(n) / log2(b);\n+}\n+\n+#[cfg(target_os=\"freebsd\")]\n pure fn logarithm(n: f64, b: f64) -> f64 {\n     ret ln(n) / ln(b);\n }"}]}