{"sha": "2e56b6f98e34edcafe0d7691939c4c33302a1a5c", "node_id": "C_kwDOAAsO6NoAKDJlNTZiNmY5OGUzNGVkY2FmZTBkNzY5MTkzOWM0YzMzMzAyYTFhNWM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-06T02:43:44Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-10-12T20:10:11Z"}, "message": "Include rmeta candidates in \"multiple matching crates\" error\n\nOnly dylib and rlib candidates were included in the error. I think the\nreason is that at the time this error was originally implemented, rmeta\ncrate sources were represented different from dylib and rlib sources.\nI wrote up more detailed analysis in [this comment][1].\n\nThe new version of the code is also a bit easier to read and should be\nmore robust to future changes since it uses `CrateSources::paths()`.\n\n[1]: https://github.com/rust-lang/rust/pull/88675#issuecomment-935282436", "tree": {"sha": "67c20415c735173c844fbad78ef99fbdb3c133a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c20415c735173c844fbad78ef99fbdb3c133a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e56b6f98e34edcafe0d7691939c4c33302a1a5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e56b6f98e34edcafe0d7691939c4c33302a1a5c", "html_url": "https://github.com/rust-lang/rust/commit/2e56b6f98e34edcafe0d7691939c4c33302a1a5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e56b6f98e34edcafe0d7691939c4c33302a1a5c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad49cb6e0c7346bd9ee551f7940a267e1712a439", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad49cb6e0c7346bd9ee551f7940a267e1712a439", "html_url": "https://github.com/rust-lang/rust/commit/ad49cb6e0c7346bd9ee551f7940a267e1712a439"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "c54ea61060271979b26867832579f6288c80a284", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2e56b6f98e34edcafe0d7691939c4c33302a1a5c/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e56b6f98e34edcafe0d7691939c4c33302a1a5c/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=2e56b6f98e34edcafe0d7691939c4c33302a1a5c", "patch": "@@ -232,6 +232,7 @@ use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};\n \n use snap::read::FrameDecoder;\n+use std::fmt::Write as _;\n use std::io::{Read, Result as IoResult, Write};\n use std::path::{Path, PathBuf};\n use std::{cmp, fmt, fs};\n@@ -918,21 +919,22 @@ impl CrateError {\n                 libraries.sort_by_cached_key(|lib| lib.source.paths().next().unwrap().clone());\n                 let candidates = libraries\n                     .iter()\n-                    .filter_map(|lib| {\n+                    .map(|lib| {\n                         let crate_name = &lib.metadata.get_root().name().as_str();\n-                        match (&lib.source.dylib, &lib.source.rlib) {\n-                            (Some((pd, _)), Some((pr, _))) => Some(format!(\n-                                \"\\ncrate `{}`: {}\\n{:>padding$}\",\n-                                crate_name,\n-                                pd.display(),\n-                                pr.display(),\n-                                padding = 8 + crate_name.len()\n-                            )),\n-                            (Some((p, _)), None) | (None, Some((p, _))) => {\n-                                Some(format!(\"\\ncrate `{}`: {}\", crate_name, p.display()))\n-                            }\n-                            (None, None) => None,\n+                        let mut paths = lib.source.paths();\n+\n+                        // This `unwrap()` should be okay because there has to be at least one\n+                        // source file. `CrateSource`'s docs confirm that too.\n+                        let mut s = format!(\n+                            \"\\ncrate `{}`: {}\",\n+                            crate_name,\n+                            paths.next().unwrap().display()\n+                        );\n+                        let padding = 8 + crate_name.len();\n+                        for path in paths {\n+                            write!(s, \"\\n{:>padding$}\", path.display(), padding = padding).unwrap();\n                         }\n+                        s\n                     })\n                     .collect::<String>();\n                 err.note(&format!(\"candidates:{}\", candidates));"}, {"sha": "c6da629df2781c101f39b750b9ae8b5ce486d24e", "filename": "src/test/ui/crate-loading/crateresolve2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e56b6f98e34edcafe0d7691939c4c33302a1a5c/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e56b6f98e34edcafe0d7691939c4c33302a1a5c/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcrate-loading%2Fcrateresolve2.stderr?ref=2e56b6f98e34edcafe0d7691939c4c33302a1a5c", "patch": "@@ -5,6 +5,9 @@ LL | extern crate crateresolve2;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: candidates:\n+           crate `crateresolve2`: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-1.rmeta\n+           crate `crateresolve2`: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-2.rmeta\n+           crate `crateresolve2`: $TEST_BUILD_DIR/crate-loading/crateresolve2/auxiliary/libcrateresolve2-3.rmeta\n \n error: aborting due to previous error\n "}]}