{"sha": "f687d5c43a0c90afba6d3fddab7665772bb0664a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ODdkNWM0M2EwYzkwYWZiYTZkM2ZkZGFiNzY2NTc3MmJiMDY2NGE=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-11T11:30:12Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-11T14:37:25Z"}, "message": "Do not suggest to add type annotations for unnameable types", "tree": {"sha": "a7c16b064af92362d35d26edae7beb8d8e8baf53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7c16b064af92362d35d26edae7beb8d8e8baf53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f687d5c43a0c90afba6d3fddab7665772bb0664a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f687d5c43a0c90afba6d3fddab7665772bb0664a", "html_url": "https://github.com/rust-lang/rust/commit/f687d5c43a0c90afba6d3fddab7665772bb0664a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f687d5c43a0c90afba6d3fddab7665772bb0664a/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66ba81059e15b3466c71fe5b5bf2418702dd1fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/66ba81059e15b3466c71fe5b5bf2418702dd1fd1", "html_url": "https://github.com/rust-lang/rust/commit/66ba81059e15b3466c71fe5b5bf2418702dd1fd1"}], "stats": {"total": 153, "additions": 140, "deletions": 13}, "files": [{"sha": "38678cc76e0deadf03b343ac86fa6868bec5638e", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 41, "deletions": 13, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f687d5c43a0c90afba6d3fddab7665772bb0664a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f687d5c43a0c90afba6d3fddab7665772bb0664a/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=f687d5c43a0c90afba6d3fddab7665772bb0664a", "patch": "@@ -749,6 +749,17 @@ fn infer_placeholder_type(\n     span: Span,\n     item_ident: Ident,\n ) -> Ty<'_> {\n+    fn contains_anonymous(ty: Ty<'_>) -> bool {\n+        for gen_arg in ty.walk() {\n+            if let ty::subst::GenericArgKind::Type(inner_ty) = gen_arg.unpack() {\n+                if let ty::FnDef(..) | ty::Closure(..) | ty::Generator(..) = inner_ty.kind() {\n+                    return true;\n+                }\n+            }\n+        }\n+        false\n+    }\n+\n     let ty = tcx.diagnostic_only_typeck(def_id).node_type(body_id.hir_id);\n \n     // If this came from a free `const` or `static mut?` item,\n@@ -760,24 +771,41 @@ fn infer_placeholder_type(\n             // The parser provided a sub-optimal `HasPlaceholders` suggestion for the type.\n             // We are typeck and have the real type, so remove that and suggest the actual type.\n             err.suggestions.clear();\n-            err.span_suggestion(\n-                span,\n-                \"provide a type for the item\",\n-                format!(\"{}: {}\", item_ident, ty),\n-                Applicability::MachineApplicable,\n-            )\n-            .emit_unless(ty.references_error());\n+\n+            // Suggesting unnameable types won't help.\n+            if !contains_anonymous(ty) {\n+                err.span_suggestion(\n+                    span,\n+                    \"provide a type for the item\",\n+                    format!(\"{}: {}\", item_ident, ty),\n+                    Applicability::MachineApplicable,\n+                );\n+            } else {\n+                err.span_note(\n+                    tcx.hir().body(body_id).value.span,\n+                    &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n+                );\n+            }\n+\n+            err.emit_unless(ty.references_error());\n         }\n         None => {\n             let mut diag = bad_placeholder_type(tcx, vec![span]);\n \n             if !ty.references_error() {\n-                diag.span_suggestion(\n-                    span,\n-                    \"replace with the correct type\",\n-                    ty.to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n+                if !contains_anonymous(ty) {\n+                    diag.span_suggestion(\n+                        span,\n+                        \"replace with the correct type\",\n+                        ty.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    diag.span_note(\n+                        tcx.hir().body(body_id).value.span,\n+                        &format!(\"however, the inferred type `{}` cannot be named\", ty.to_string()),\n+                    );\n+                }\n             }\n \n             diag.emit();"}, {"sha": "ed70bcf5484c1ed9ca567efe033615bce4b21a8b", "filename": "src/test/ui/suggestions/unnamable-types.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f687d5c43a0c90afba6d3fddab7665772bb0664a/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f687d5c43a0c90afba6d3fddab7665772bb0664a/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.rs?ref=f687d5c43a0c90afba6d3fddab7665772bb0664a", "patch": "@@ -0,0 +1,33 @@\n+// Test that we do not suggest to add type annotations for unnamable types.\n+\n+#![crate_type=\"lib\"]\n+#![feature(generators)]\n+\n+const A = 5;\n+//~^ ERROR: missing type for `const` item\n+//~| HELP: provide a type for the item\n+\n+static B: _ = \"abc\";\n+//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE: not allowed in type signatures\n+//~| HELP: replace with the correct type\n+\n+\n+const C: _ = || 42;\n+//~^ ERROR: the type placeholder `_` is not allowed within types on item signatures\n+//~| NOTE: not allowed in type signatures\n+//~| NOTE: however, the inferred type\n+\n+struct S<T> { t: T }\n+const D = S { t: || -> i32 { 42 } };\n+//~^ ERROR: missing type for `const` item\n+//~| NOTE: however, the inferred type\n+\n+fn foo() -> i32 { 42 }\n+const E = S { t: foo };\n+//~^ ERROR: missing type for `const` item\n+//~| NOTE: however, the inferred type\n+\n+const F = || -> i32 { yield 0; return 1; };\n+//~^ ERROR: missing type for `const` item\n+//~| NOTE: however, the inferred type"}, {"sha": "8082707fd3c2a2786e3fb8a12aae6f2c71300d7f", "filename": "src/test/ui/suggestions/unnamable-types.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/f687d5c43a0c90afba6d3fddab7665772bb0664a/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f687d5c43a0c90afba6d3fddab7665772bb0664a/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Funnamable-types.stderr?ref=f687d5c43a0c90afba6d3fddab7665772bb0664a", "patch": "@@ -0,0 +1,66 @@\n+error: missing type for `const` item\n+  --> $DIR/unnamable-types.rs:6:7\n+   |\n+LL | const A = 5;\n+   |       ^ help: provide a type for the item: `A: i32`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/unnamable-types.rs:10:11\n+   |\n+LL | static B: _ = \"abc\";\n+   |           ^\n+   |           |\n+   |           not allowed in type signatures\n+   |           help: replace with the correct type: `&str`\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/unnamable-types.rs:16:10\n+   |\n+LL | const C: _ = || 42;\n+   |          ^ not allowed in type signatures\n+   |\n+note: however, the inferred type `[closure@$DIR/unnamable-types.rs:16:14: 16:19]` cannot be named\n+  --> $DIR/unnamable-types.rs:16:14\n+   |\n+LL | const C: _ = || 42;\n+   |              ^^^^^\n+\n+error: missing type for `const` item\n+  --> $DIR/unnamable-types.rs:22:7\n+   |\n+LL | const D = S { t: || -> i32 { 42 } };\n+   |       ^\n+   |\n+note: however, the inferred type `S<[closure@$DIR/unnamable-types.rs:22:18: 22:34]>` cannot be named\n+  --> $DIR/unnamable-types.rs:22:11\n+   |\n+LL | const D = S { t: || -> i32 { 42 } };\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing type for `const` item\n+  --> $DIR/unnamable-types.rs:27:7\n+   |\n+LL | const E = S { t: foo };\n+   |       ^\n+   |\n+note: however, the inferred type `S<fn() -> i32 {foo}>` cannot be named\n+  --> $DIR/unnamable-types.rs:27:11\n+   |\n+LL | const E = S { t: foo };\n+   |           ^^^^^^^^^^^^\n+\n+error: missing type for `const` item\n+  --> $DIR/unnamable-types.rs:31:7\n+   |\n+LL | const F = || -> i32 { yield 0; return 1; };\n+   |       ^\n+   |\n+note: however, the inferred type `[generator@$DIR/unnamable-types.rs:31:11: 31:43 {i32, ()}]` cannot be named\n+  --> $DIR/unnamable-types.rs:31:11\n+   |\n+LL | const F = || -> i32 { yield 0; return 1; };\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0121`."}]}