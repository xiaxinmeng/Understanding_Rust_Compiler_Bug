{"sha": "820ffc8d7ad9741a078634a42f14ea373d565467", "node_id": "C_kwDOAAsO6NoAKDgyMGZmYzhkN2FkOTc0MWEwNzg2MzRhNDJmMTRlYTM3M2Q1NjU0Njc", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-05-19T21:21:20Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2022-05-27T14:39:54Z"}, "message": "Call the OS function to set the main thread's name on program init\n\nNormally, `Thread::spawn` takes care of setting the thread's name, if\none was provided, but since the main thread wasn't created by calling\n`Thread::spawn`, we need to call that function in `std::rt::init`.\n\nThis is mainly useful for system tools like debuggers and profilers\nwhich might show the thread name to a user. Prior to these changes, gdb\nand WinDbg would show all thread names except the main thread's name to\na user. I've validated that this patch resolves the issue for both\ndebuggers.", "tree": {"sha": "15296c74ee21f2b411a186b6acff5aa81838668c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15296c74ee21f2b411a186b6acff5aa81838668c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/820ffc8d7ad9741a078634a42f14ea373d565467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/820ffc8d7ad9741a078634a42f14ea373d565467", "html_url": "https://github.com/rust-lang/rust/commit/820ffc8d7ad9741a078634a42f14ea373d565467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/820ffc8d7ad9741a078634a42f14ea373d565467/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0672870491e84362f76ddecd50fa229f9b06dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0672870491e84362f76ddecd50fa229f9b06dff", "html_url": "https://github.com/rust-lang/rust/commit/c0672870491e84362f76ddecd50fa229f9b06dff"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "1505878e18c0dcdedb66b266b7f6829f48acb6d0", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/820ffc8d7ad9741a078634a42f14ea373d565467/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820ffc8d7ad9741a078634a42f14ea373d565467/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=820ffc8d7ad9741a078634a42f14ea373d565467", "patch": "@@ -1,5 +1,6 @@\n #![allow(missing_docs, nonstandard_style)]\n \n+use crate::ffi::CStr;\n use crate::io::ErrorKind;\n \n pub use self::rand::hashmap_random_keys;\n@@ -66,6 +67,15 @@ pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     stack_overflow::init();\n     args::init(argc, argv);\n \n+    // Normally, `thread::spawn` will call `Thread::set_name` but since this thread\n+    // already exists, we have to call it ourselves. We only do this on macos\n+    // because some unix-like operating systems such as Linux share process-id and\n+    // thread-id for the main thread and so renaming the main thread will rename the\n+    // process and we only want to enable this on platforms we've tested.\n+    if cfg!(target_os = \"macos\") {\n+        thread::Thread::set_name(&CStr::from_bytes_with_nul_unchecked(b\"main\\0\"));\n+    }\n+\n     unsafe fn sanitize_standard_fds() {\n         #[cfg(not(miri))]\n         // The standard fds are always available in Miri."}, {"sha": "b3f6d2d0aaed4213ab80f487faf552dea345ee92", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/820ffc8d7ad9741a078634a42f14ea373d565467/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820ffc8d7ad9741a078634a42f14ea373d565467/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=820ffc8d7ad9741a078634a42f14ea373d565467", "patch": "@@ -1,6 +1,6 @@\n #![allow(missing_docs, nonstandard_style)]\n \n-use crate::ffi::{OsStr, OsString};\n+use crate::ffi::{CStr, OsStr, OsString};\n use crate::io::ErrorKind;\n use crate::os::windows::ffi::{OsStrExt, OsStringExt};\n use crate::path::PathBuf;\n@@ -49,6 +49,10 @@ cfg_if::cfg_if! {\n // NOTE: this is not guaranteed to run, for example when Rust code is called externally.\n pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n     stack_overflow::init();\n+\n+    // Normally, `thread::spawn` will call `Thread::set_name` but since this thread already\n+    // exists, we have to call it ourselves.\n+    thread::Thread::set_name(&CStr::from_bytes_with_nul_unchecked(b\"main\\0\"));\n }\n \n // SAFETY: must be called only once during runtime cleanup."}, {"sha": "f42a7aec3bdf48e96b64b47033e13e9704fa42fe", "filename": "src/test/debuginfo/thread-names.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/820ffc8d7ad9741a078634a42f14ea373d565467/src%2Ftest%2Fdebuginfo%2Fthread-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/820ffc8d7ad9741a078634a42f14ea373d565467/src%2Ftest%2Fdebuginfo%2Fthread-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fthread-names.rs?ref=820ffc8d7ad9741a078634a42f14ea373d565467", "patch": "@@ -0,0 +1,40 @@\n+// compile-flags:-g\n+// We can't set the main thread name on Linux because it renames the process (#97191)\n+// ignore-linux\n+\n+// === GDB TESTS ==================================================================================\n+//\n+// gdb-command:run\n+//\n+// gdb-command:info threads\n+// gdb-check:  1    Thread [...] [...] \"main\" [...]\n+// gdb-check:* 2    Thread [...] [...] \"my new thread\" [...]\n+\n+// === LLDB TESTS =================================================================================\n+//\n+// lldb-command:run\n+//\n+// lldb-command:thread info 1\n+// lldb-check:thread #1:[...]name = 'main'[...]\n+// lldb-command:thread info 2\n+// lldb-check:thread #2:[...]name = 'my new thread'[...]\n+\n+// === CDB TESTS ==================================================================================\n+//\n+// cdb-command:g\n+//\n+// cdb-command:~\n+// cdb-check:   0  Id: [...] Suspend: 1 Teb: [...] Unfrozen \"main\"\n+// cdb-check:.  [...]  Id: [...] Suspend: 1 Teb: [...] Unfrozen \"my new thread\"\n+\n+use std::thread;\n+\n+fn main() {\n+    let handle = thread::Builder::new().name(\"my new thread\".into()).spawn(|| {\n+        zzz(); // #break\n+    }).unwrap();\n+\n+    handle.join().unwrap();\n+}\n+\n+fn zzz() {}"}]}