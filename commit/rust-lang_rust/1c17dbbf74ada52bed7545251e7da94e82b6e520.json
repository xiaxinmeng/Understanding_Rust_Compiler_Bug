{"sha": "1c17dbbf74ada52bed7545251e7da94e82b6e520", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMTdkYmJmNzRhZGE1MmJlZDc1NDUyNTFlN2RhOTRlODJiNmU1MjA=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-04-06T09:11:50Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-04-10T22:46:49Z"}, "message": "rebasing", "tree": {"sha": "f1983d44c672d11f52d2d12011e5e53dbada27f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1983d44c672d11f52d2d12011e5e53dbada27f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c17dbbf74ada52bed7545251e7da94e82b6e520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c17dbbf74ada52bed7545251e7da94e82b6e520", "html_url": "https://github.com/rust-lang/rust/commit/1c17dbbf74ada52bed7545251e7da94e82b6e520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c17dbbf74ada52bed7545251e7da94e82b6e520/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4419019a90de71646481777ca86b15bef9d00e", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4419019a90de71646481777ca86b15bef9d00e", "html_url": "https://github.com/rust-lang/rust/commit/aa4419019a90de71646481777ca86b15bef9d00e"}], "stats": {"total": 100, "additions": 45, "deletions": 55}, "files": [{"sha": "48b6af7fd4624959168ee809ae0cc72c0a441287", "filename": "src/imports.rs", "status": "modified", "additions": 33, "deletions": 46, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/1c17dbbf74ada52bed7545251e7da94e82b6e520/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c17dbbf74ada52bed7545251e7da94e82b6e520/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=1c17dbbf74ada52bed7545251e7da94e82b6e520", "patch": "@@ -185,7 +185,7 @@ impl UseTree {\n                     } else {\n                         Some(item.attrs.clone())\n                     },\n-                ).normalize(context.config.reorder_imported_names()),\n+                ).normalize(),\n             ),\n             _ => None,\n         }\n@@ -271,7 +271,7 @@ impl UseTree {\n     }\n \n     // Do the adjustments that rustfmt does elsewhere to use paths.\n-    pub fn normalize(mut self, do_sort: bool) -> UseTree {\n+    pub fn normalize(mut self) -> UseTree {\n         let mut last = self.path.pop().expect(\"Empty use tree?\");\n         // Hack around borrow checker.\n         let mut normalize_sole_list = false;\n@@ -340,7 +340,7 @@ impl UseTree {\n                     for seg in &list[0].path {\n                         self.path.push(seg.clone());\n                     }\n-                    return self.normalize(do_sort);\n+                    return self.normalize();\n                 }\n                 _ => unreachable!(),\n             }\n@@ -349,11 +349,9 @@ impl UseTree {\n         // Recursively normalize elements of a list use (including sorting the list).\n         if let UseSegment::List(list) = last {\n             let mut list = list.into_iter()\n-                .map(|ut| ut.normalize(do_sort))\n+                .map(|ut| ut.normalize())\n                 .collect::<Vec<_>>();\n-            if do_sort {\n-                list.sort();\n-            }\n+            list.sort();\n             last = UseSegment::List(list);\n         }\n \n@@ -686,75 +684,64 @@ mod test {\n \n     #[test]\n     fn test_use_tree_normalize() {\n+        assert_eq!(parse_use_tree(\"a::self\").normalize(), parse_use_tree(\"a\"));\n         assert_eq!(\n-            parse_use_tree(\"a::self\").normalize(true),\n-            parse_use_tree(\"a\")\n-        );\n-        assert_eq!(\n-            parse_use_tree(\"a::self as foo\").normalize(true),\n+            parse_use_tree(\"a::self as foo\").normalize(),\n             parse_use_tree(\"a as foo\")\n         );\n+        assert_eq!(parse_use_tree(\"a::{self}\").normalize(), parse_use_tree(\"a\"));\n+        assert_eq!(parse_use_tree(\"a::{b}\").normalize(), parse_use_tree(\"a::b\"));\n         assert_eq!(\n-            parse_use_tree(\"a::{self}\").normalize(true),\n-            parse_use_tree(\"a\")\n-        );\n-        assert_eq!(\n-            parse_use_tree(\"a::{b}\").normalize(true),\n-            parse_use_tree(\"a::b\")\n-        );\n-        assert_eq!(\n-            parse_use_tree(\"a::{b, c::self}\").normalize(true),\n+            parse_use_tree(\"a::{b, c::self}\").normalize(),\n             parse_use_tree(\"a::{b, c}\")\n         );\n         assert_eq!(\n-            parse_use_tree(\"a::{b as bar, c::self}\").normalize(true),\n+            parse_use_tree(\"a::{b as bar, c::self}\").normalize(),\n             parse_use_tree(\"a::{b as bar, c}\")\n         );\n     }\n \n     #[test]\n     fn test_use_tree_ord() {\n-        assert!(parse_use_tree(\"a\").normalize(true) < parse_use_tree(\"aa\").normalize(true));\n-        assert!(parse_use_tree(\"a\").normalize(true) < parse_use_tree(\"a::a\").normalize(true));\n-        assert!(parse_use_tree(\"a\").normalize(true) < parse_use_tree(\"*\").normalize(true));\n-        assert!(parse_use_tree(\"a\").normalize(true) < parse_use_tree(\"{a, b}\").normalize(true));\n-        assert!(parse_use_tree(\"*\").normalize(true) < parse_use_tree(\"{a, b}\").normalize(true));\n+        assert!(parse_use_tree(\"a\").normalize() < parse_use_tree(\"aa\").normalize());\n+        assert!(parse_use_tree(\"a\").normalize() < parse_use_tree(\"a::a\").normalize());\n+        assert!(parse_use_tree(\"a\").normalize() < parse_use_tree(\"*\").normalize());\n+        assert!(parse_use_tree(\"a\").normalize() < parse_use_tree(\"{a, b}\").normalize());\n+        assert!(parse_use_tree(\"*\").normalize() < parse_use_tree(\"{a, b}\").normalize());\n \n         assert!(\n-            parse_use_tree(\"aaaaaaaaaaaaaaa::{bb, cc, dddddddd}\").normalize(true)\n-                < parse_use_tree(\"aaaaaaaaaaaaaaa::{bb, cc, ddddddddd}\").normalize(true)\n-        );\n-        assert!(\n-            parse_use_tree(\"serde::de::{Deserialize}\").normalize(true)\n-                < parse_use_tree(\"serde_json\").normalize(true)\n+            parse_use_tree(\"aaaaaaaaaaaaaaa::{bb, cc, dddddddd}\").normalize()\n+                < parse_use_tree(\"aaaaaaaaaaaaaaa::{bb, cc, ddddddddd}\").normalize()\n         );\n         assert!(\n-            parse_use_tree(\"a::b::c\").normalize(true) < parse_use_tree(\"a::b::*\").normalize(true)\n+            parse_use_tree(\"serde::de::{Deserialize}\").normalize()\n+                < parse_use_tree(\"serde_json\").normalize()\n         );\n+        assert!(parse_use_tree(\"a::b::c\").normalize() < parse_use_tree(\"a::b::*\").normalize());\n         assert!(\n-            parse_use_tree(\"foo::{Bar, Baz}\").normalize(true)\n-                < parse_use_tree(\"{Bar, Baz}\").normalize(true)\n+            parse_use_tree(\"foo::{Bar, Baz}\").normalize()\n+                < parse_use_tree(\"{Bar, Baz}\").normalize()\n         );\n \n         assert!(\n-            parse_use_tree(\"foo::{self as bar}\").normalize(true)\n-                < parse_use_tree(\"foo::{qux as bar}\").normalize(true)\n+            parse_use_tree(\"foo::{self as bar}\").normalize()\n+                < parse_use_tree(\"foo::{qux as bar}\").normalize()\n         );\n         assert!(\n-            parse_use_tree(\"foo::{qux as bar}\").normalize(true)\n-                < parse_use_tree(\"foo::{baz, qux as bar}\").normalize(true)\n+            parse_use_tree(\"foo::{qux as bar}\").normalize()\n+                < parse_use_tree(\"foo::{baz, qux as bar}\").normalize()\n         );\n         assert!(\n-            parse_use_tree(\"foo::{self as bar, baz}\").normalize(true)\n-                < parse_use_tree(\"foo::{baz, qux as bar}\").normalize(true)\n+            parse_use_tree(\"foo::{self as bar, baz}\").normalize()\n+                < parse_use_tree(\"foo::{baz, qux as bar}\").normalize()\n         );\n \n-        assert!(parse_use_tree(\"foo\").normalize(true) < parse_use_tree(\"Foo\").normalize(true));\n-        assert!(parse_use_tree(\"foo\").normalize(true) < parse_use_tree(\"foo::Bar\").normalize(true));\n+        assert!(parse_use_tree(\"foo\").normalize() < parse_use_tree(\"Foo\").normalize());\n+        assert!(parse_use_tree(\"foo\").normalize() < parse_use_tree(\"foo::Bar\").normalize());\n \n         assert!(\n-            parse_use_tree(\"std::cmp::{d, c, b, a}\").normalize(true)\n-                < parse_use_tree(\"std::cmp::{b, e, g, f}\").normalize(true)\n+            parse_use_tree(\"std::cmp::{d, c, b, a}\").normalize()\n+                < parse_use_tree(\"std::cmp::{b, e, g, f}\").normalize()\n         );\n     }\n }"}, {"sha": "9a7d0d2f8817bf174d9cd6ef92be540d8bd6c81e", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c17dbbf74ada52bed7545251e7da94e82b6e520/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c17dbbf74ada52bed7545251e7da94e82b6e520/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1c17dbbf74ada52bed7545251e7da94e82b6e520", "patch": "@@ -42,8 +42,8 @@ use std::time::Duration;\n use syntax::ast;\n pub use syntax::codemap::FileName;\n use syntax::codemap::{CodeMap, FilePathMapping};\n-use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n+use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n \n use checkstyle::{output_footer, output_header};"}, {"sha": "e4065146cc6881bfb5e0c08722168ea9f12608fc", "filename": "src/reorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c17dbbf74ada52bed7545251e7da94e82b6e520/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c17dbbf74ada52bed7545251e7da94e82b6e520/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=1c17dbbf74ada52bed7545251e7da94e82b6e520", "patch": "@@ -207,7 +207,7 @@ impl ReorderableItemKind {\n \n     pub fn in_group(&self) -> bool {\n         match *self {\n-            ReorderableItemKind::ExternCrate => false,\n+            ReorderableItemKind::ExternCrate => true,\n             ReorderableItemKind::Mod => true,\n             ReorderableItemKind::Use => true,\n             ReorderableItemKind::Other => false,"}, {"sha": "b0aa51127d54ef737d93a60ef8a397653dfd604b", "filename": "tests/target/extern.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c17dbbf74ada52bed7545251e7da94e82b6e520/tests%2Ftarget%2Fextern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c17dbbf74ada52bed7545251e7da94e82b6e520/tests%2Ftarget%2Fextern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fextern.rs?ref=1c17dbbf74ada52bed7545251e7da94e82b6e520", "patch": "@@ -1,14 +1,17 @@\n // rustfmt-normalize_comments: true\n \n-extern crate bar;\n-extern crate chrono;\n-extern crate dotenv;\n-extern crate foo;\n extern crate foo;\n extern crate foo as bar;\n+\n+extern crate chrono;\n+extern crate dotenv;\n extern crate futures;\n-extern crate proc_macro;\n+\n+extern crate bar;\n+extern crate foo;\n+\n // #2315\n+extern crate proc_macro;\n extern crate proc_macro2;\n \n extern \"C\" {"}, {"sha": "e4f885c09b1f049d505b5887abb5913d73fcc282", "filename": "tests/target/import-fencepost-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c17dbbf74ada52bed7545251e7da94e82b6e520/tests%2Ftarget%2Fimport-fencepost-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c17dbbf74ada52bed7545251e7da94e82b6e520/tests%2Ftarget%2Fimport-fencepost-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimport-fencepost-length.rs?ref=1c17dbbf74ada52bed7545251e7da94e82b6e520", "patch": "@@ -1,4 +1,4 @@\n+use aaaaaaaaaaaaaaa::bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n use aaaaaaaaaaaaaaa::{bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, ccccccccccccccccccccccccccccccc, dddddddd};\n use aaaaaaaaaaaaaaa::{bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, ccccccccccccccccccccccccccccccc,\n                       ddddddddd};\n-use aaaaaaaaaaaaaaa::bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;"}, {"sha": "236fee95e82befce8a8cd55cf50f18c86ccb96d9", "filename": "tests/target/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c17dbbf74ada52bed7545251e7da94e82b6e520/tests%2Ftarget%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c17dbbf74ada52bed7545251e7da94e82b6e520/tests%2Ftarget%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports.rs?ref=1c17dbbf74ada52bed7545251e7da94e82b6e520", "patch": "@@ -54,9 +54,9 @@ use foo::{baz, qux as bar};\n \n // With absolute paths\n use foo;\n-use Foo;\n use foo::Bar;\n use foo::{Bar, Baz};\n+use Foo;\n use {Bar, Baz};\n \n // Root globs"}]}