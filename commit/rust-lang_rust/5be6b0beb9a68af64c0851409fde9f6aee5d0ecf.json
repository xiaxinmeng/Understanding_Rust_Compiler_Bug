{"sha": "5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZTZiMGJlYjlhNjhhZjY0YzA4NTE0MDlmZGU5ZjZhZWU1ZDBlY2Y=", "commit": {"author": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-15T13:50:44Z"}, "committer": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-04-15T14:59:13Z"}, "message": "basic refactor. Adding PointerCast enum", "tree": {"sha": "b8b05519694c8cbcc4c102838f05697a4bd35934", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8b05519694c8cbcc4c102838f05697a4bd35934"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "html_url": "https://github.com/rust-lang/rust/commit/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/comments", "author": null, "committer": null, "parents": [{"sha": "3750348daff89741e3153e0e120aa70a45ff5b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/3750348daff89741e3153e0e120aa70a45ff5b68", "html_url": "https://github.com/rust-lang/rust/commit/3750348daff89741e3153e0e120aa70a45ff5b68"}], "stats": {"total": 150, "additions": 85, "deletions": 65}, "files": [{"sha": "22c0f0e5c3945869918bce9e092ebaf089ad762a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -35,6 +35,7 @@ use crate::ty::{\n     UserTypeAnnotationIndex,\n };\n use crate::ty::print::{FmtPrinter, Printer};\n+use crate::ty::adjustment::{PointerCast};\n \n pub use crate::mir::interpret::AssertMessage;\n \n@@ -2248,29 +2249,11 @@ pub enum Rvalue<'tcx> {\n     Aggregate(Box<AggregateKind<'tcx>>, Vec<Operand<'tcx>>),\n }\n \n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n pub enum CastKind {\n     Misc,\n-\n-    /// Converts unique, zero-sized type for a fn to fn()\n-    ReifyFnPointer,\n-\n-    /// Converts non capturing closure to fn() or unsafe fn().\n-    /// It cannot convert a closure that requires unsafe.\n-    ClosureFnPointer(hir::Unsafety),\n-\n-    /// Converts safe fn() to unsafe fn()\n-    UnsafeFnPointer,\n-\n-    /// Coerces *mut T to *const T, preserving T.\n-    MutToConstPointer,\n-\n-    /// \"Unsize\" -- convert a thin-or-fat pointer to a fat pointer.\n-    /// codegen must figure out the details once full monomorphization\n-    /// is known. For example, this could be used to cast from a\n-    /// `&[i32;N]` to a `&[i32]`, or a `Box<T>` to a `Box<dyn Trait>`\n-    /// (presuming `T: Trait`).\n-    Unsize,\n+    Pointer(PointerCast),\n }\n \n #[derive(Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]"}, {"sha": "7b81f7c6979098d94a2d26348c0a46dbc7891706", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -5,6 +5,15 @@ use crate::ty::subst::SubstsRef;\n use rustc_macros::HashStable;\n \n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable, HashStable)]\n+pub enum PointerCast {\n+    ReifyFnPointer,\n+    UnsafeFnPointer,\n+    ClosureFnPointer(hir::Unsafety),\n+    MutToConstPointer,\n+    Unsize,\n+}\n+\n /// Represents coercing a value to a different type of value.\n ///\n /// We transform values by following a number of `Adjust` steps in order."}, {"sha": "35e9d918aa6f975cbc0df7d4464c92bab7680e24", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, adjustment::{PointerCast}};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc::mir;\n@@ -37,7 +37,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                bx\n            }\n \n-            mir::Rvalue::Cast(mir::CastKind::Unsize, ref source, _) => {\n+            mir::Rvalue::Cast(mir::CastKind::Pointer(PointerCast::Unsize), ref source, _) => {\n                 // The destination necessarily contains a fat pointer, so if\n                 // it's a scalar pair, it's a fat pointer or newtype thereof.\n                 if bx.cx().is_backend_scalar_pair(dest.layout) {\n@@ -178,7 +178,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let cast = bx.cx().layout_of(self.monomorphize(&mir_cast_ty));\n \n                 let val = match *kind {\n-                    mir::CastKind::ReifyFnPointer => {\n+                    mir::CastKind::Pointer(PointerCast::ReifyFnPointer) => {\n                         match operand.layout.ty.sty {\n                             ty::FnDef(def_id, substs) => {\n                                 if bx.cx().tcx().has_attr(def_id, \"rustc_args_required_const\") {\n@@ -193,7 +193,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::ClosureFnPointer(_) => {\n+                    mir::CastKind::Pointer(PointerCast::ClosureFnPointer(_)) => {\n                         match operand.layout.ty.sty {\n                             ty::Closure(def_id, substs) => {\n                                 let instance = monomorphize::resolve_closure(\n@@ -205,11 +205,11 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::UnsafeFnPointer => {\n+                    mir::CastKind::Pointer(PointerCast::UnsafeFnPointer) => {\n                         // this is a no-op at the LLVM level\n                         operand.val\n                     }\n-                    mir::CastKind::Unsize => {\n+                    mir::CastKind::Pointer(PointerCast::Unsize) => {\n                         assert!(bx.cx().is_backend_scalar_pair(cast));\n                         match operand.val {\n                             OperandValue::Pair(lldata, llextra) => {\n@@ -236,7 +236,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             }\n                         }\n                     }\n-                    mir::CastKind::MutToConstPointer\n+                    mir::CastKind::Pointer(PointerCast::MutToConstPointer)\n                     | mir::CastKind::Misc if bx.cx().is_backend_scalar_pair(operand.layout) => {\n                         if let OperandValue::Pair(data_ptr, meta) = operand.val {\n                             if bx.cx().is_backend_scalar_pair(cast) {\n@@ -254,7 +254,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             bug!(\"Unexpected non-Pair operand\")\n                         }\n                     }\n-                    mir::CastKind::MutToConstPointer\n+                    mir::CastKind::Pointer(PointerCast::MutToConstPointer)\n                     | mir::CastKind::Misc => {\n                         assert!(bx.cx().is_backend_immediate(cast));\n                         let ll_t_out = bx.cx().immediate_backend_type(cast);"}, {"sha": "5ad54080c5a6122ecb4eb67de048c4eea9422c35", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -10,6 +10,7 @@ use rustc::mir::{\n     Projection, ProjectionElem, Rvalue, Statement, StatementKind, TerminatorKind,\n };\n use rustc::ty::{self, TyCtxt};\n+use rustc::ty::adjustment::{PointerCast};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n@@ -580,7 +581,9 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         },\n                         // If we see a unsized cast, then if it is our data we should check\n                         // whether it is being cast to a trait object.\n-                        Rvalue::Cast(CastKind::Unsize, operand, ty) => match operand {\n+                        Rvalue::Cast(\n+                            CastKind::Pointer(PointerCast::Unsize), operand, ty\n+                        ) => match operand {\n                             Operand::Copy(Place::Base(PlaceBase::Local(from)))\n                             | Operand::Move(Place::Base(PlaceBase::Local(from)))\n                                 if *from == target =>"}, {"sha": "d123f3e405936542aac55a38364c6e7b84f81301", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -36,6 +36,7 @@ use rustc::traits::query::type_op;\n use rustc::traits::query::type_op::custom::CustomTypeOp;\n use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::{ObligationCause, PredicateObligations};\n+use rustc::ty::adjustment::{PointerCast};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::subst::{Subst, SubstsRef, UnpackedKind, UserSubsts};\n use rustc::ty::{\n@@ -1972,7 +1973,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n             Rvalue::Cast(cast_kind, op, ty) => {\n                 match cast_kind {\n-                    CastKind::ReifyFnPointer => {\n+                    CastKind::Pointer(PointerCast::ReifyFnPointer) => {\n                         let fn_sig = op.ty(mir, tcx).fn_sig(tcx);\n \n                         // The type that we see in the fcx is like\n@@ -2001,7 +2002,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         }\n                     }\n \n-                    CastKind::ClosureFnPointer(unsafety) => {\n+                    CastKind::Pointer(PointerCast::ClosureFnPointer(unsafety)) => {\n                         let sig = match op.ty(mir, tcx).sty {\n                             ty::Closure(def_id, substs) => {\n                                 substs.closure_sig_ty(def_id, tcx).fn_sig(tcx)\n@@ -2027,7 +2028,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         }\n                     }\n \n-                    CastKind::UnsafeFnPointer => {\n+                    CastKind::Pointer(PointerCast::UnsafeFnPointer) => {\n                         let fn_sig = op.ty(mir, tcx).fn_sig(tcx);\n \n                         // The type that we see in the fcx is like\n@@ -2056,7 +2057,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         }\n                     }\n \n-                    CastKind::Unsize => {\n+                    CastKind::Pointer(PointerCast::Unsize) => {\n                         let &ty = ty;\n                         let trait_ref = ty::TraitRef {\n                             def_id: tcx.lang_items().coerce_unsized_trait().unwrap(),\n@@ -2070,7 +2071,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                         );\n                     }\n \n-                    CastKind::MutToConstPointer => {\n+                    CastKind::Pointer(PointerCast::MutToConstPointer) => {\n                         let ty_from = match op.ty(mir, tcx).sty {\n                             ty::RawPtr(ty::TypeAndMut {\n                                 ty: ty_from,"}, {"sha": "565524247174fe0533435ba0363f5287e04a6fa8", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -10,6 +10,7 @@ use rustc::middle::region;\n use rustc::mir::interpret::InterpError;\n use rustc::mir::*;\n use rustc::ty::{self, CanonicalUserTypeAnnotation, Ty, UpvarSubsts};\n+use rustc::ty::adjustment::{PointerCast};\n use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n@@ -156,23 +157,33 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n             ExprKind::ReifyFnPointer { source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::ReifyFnPointer, source, expr.ty))\n+                block.and(Rvalue::Cast(\n+                    CastKind::Pointer(PointerCast::ReifyFnPointer), source, expr.ty)\n+                )\n             }\n             ExprKind::UnsafeFnPointer { source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::UnsafeFnPointer, source, expr.ty))\n+                block.and(Rvalue::Cast(\n+                    CastKind::Pointer(PointerCast::UnsafeFnPointer), source, expr.ty)\n+                )\n             }\n             ExprKind::ClosureFnPointer { source, unsafety } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::ClosureFnPointer(unsafety), source, expr.ty))\n+                block.and(Rvalue::Cast(\n+                    CastKind::Pointer(PointerCast::ClosureFnPointer(unsafety)), source, expr.ty)\n+                )\n             }\n             ExprKind::MutToConstPointer { source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::MutToConstPointer, source, expr.ty))\n+                block.and(Rvalue::Cast(\n+                    CastKind::Pointer(PointerCast::MutToConstPointer), source, expr.ty)\n+                )\n             }\n             ExprKind::Unsize { source } => {\n                 let source = unpack!(block = this.as_operand(block, scope, source));\n-                block.and(Rvalue::Cast(CastKind::Unsize, source, expr.ty))\n+                block.and(Rvalue::Cast(\n+                    CastKind::Pointer(PointerCast::Unsize), source, expr.ty)\n+                )\n             }\n             ExprKind::Array { fields } => {\n                 // (*) We would (maybe) be closer to codegen if we"}, {"sha": "1eaf3d7ba99822ad7e49b61d000b5b04ed7a25c4", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -11,7 +11,7 @@ use crate::hair::*;\n use crate::hair::pattern::compare_const_vals;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::FxHashMap;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, adjustment::{PointerCast}};\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::layout::VariantIdx;\n use rustc::mir::*;\n@@ -280,8 +280,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             ty = tcx.mk_imm_ref(region, tcx.mk_slice(elem_ty));\n                             if opt_ref_ty.is_some() {\n                                 place = self.temp(ty, test.span);\n-                                self.cfg.push_assign(block, source_info, &place,\n-                                                    Rvalue::Cast(CastKind::Unsize, val, ty));\n+                                self.cfg.push_assign(\n+                                    block, source_info, &place, Rvalue::Cast(\n+                                        CastKind::Pointer(PointerCast::Unsize), val, ty\n+                                    )\n+                                );\n                             }\n                             if opt_ref_test_ty.is_some() {\n                                 let array = self.literal_operand(\n@@ -291,8 +294,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                 );\n \n                                 let slice = self.temp(ty, test.span);\n-                                self.cfg.push_assign(block, source_info, &slice,\n-                                                    Rvalue::Cast(CastKind::Unsize, array, ty));\n+                                self.cfg.push_assign(\n+                                    block, source_info, &slice, Rvalue::Cast(\n+                                        CastKind::Pointer(PointerCast::Unsize), array, ty\n+                                    )\n+                                );\n                                 expect = Operand::Move(slice);\n                             }\n                         },"}, {"sha": "32f218d49cea2bc7859f5eb96568a7865da27648", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -1,5 +1,6 @@\n use rustc::ty::{self, Ty, TypeAndMut};\n use rustc::ty::layout::{self, TyLayout, Size};\n+use rustc::ty::adjustment::{PointerCast};\n use syntax::ast::{FloatTy, IntTy, UintTy};\n \n use rustc_apfloat::ieee::{Single, Double};\n@@ -29,11 +30,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     ) -> EvalResult<'tcx> {\n         use rustc::mir::CastKind::*;\n         match kind {\n-            Unsize => {\n+            Pointer(PointerCast::Unsize) => {\n                 self.unsize_into(src, dest)?;\n             }\n \n-            Misc | MutToConstPointer => {\n+            Misc | Pointer(PointerCast::MutToConstPointer) => {\n                 let src = self.read_immediate(src)?;\n \n                 if self.type_is_fat_ptr(src.layout.ty) {\n@@ -72,7 +73,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 }\n             }\n \n-            ReifyFnPointer => {\n+            Pointer(PointerCast::ReifyFnPointer) => {\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::FnDef(def_id, substs) => {\n@@ -93,7 +94,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 }\n             }\n \n-            UnsafeFnPointer => {\n+            Pointer(PointerCast::UnsafeFnPointer) => {\n                 let src = self.read_immediate(src)?;\n                 match dest.layout.ty.sty {\n                     ty::FnPtr(_) => {\n@@ -104,7 +105,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 }\n             }\n \n-            ClosureFnPointer(_) => {\n+            Pointer(PointerCast::ClosureFnPointer(_)) => {\n                 // The src operand does not matter, just its type\n                 match src.layout.ty.sty {\n                     ty::Closure(def_id, substs) => {"}, {"sha": "2f4b3fa6ca8f7ca3e3e1c0723b52a6d79e45c2b4", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -182,7 +182,7 @@ use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n-use rustc::ty::adjustment::CustomCoerceUnsized;\n+use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::session::config::EntryFnType;\n use rustc::mir::{self, Location, Place, PlaceBase, Promoted, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n@@ -529,7 +529,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             // When doing an cast from a regular pointer to a fat pointer, we\n             // have to instantiate all methods of the trait being cast to, so we\n             // can build the appropriate vtable.\n-            mir::Rvalue::Cast(mir::CastKind::Unsize, ref operand, target_ty) => {\n+            mir::Rvalue::Cast(\n+                mir::CastKind::Pointer(PointerCast::Unsize), ref operand, target_ty\n+            ) => {\n                 let target_ty = self.tcx.subst_and_normalize_erasing_regions(\n                     self.param_substs,\n                     ty::ParamEnv::reveal_all(),\n@@ -554,7 +556,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                                          self.output);\n                 }\n             }\n-            mir::Rvalue::Cast(mir::CastKind::ReifyFnPointer, ref operand, _) => {\n+            mir::Rvalue::Cast(\n+                mir::CastKind::Pointer(PointerCast::ReifyFnPointer), ref operand, _\n+            ) => {\n                 let fn_ty = operand.ty(self.mir, self.tcx);\n                 let fn_ty = self.tcx.subst_and_normalize_erasing_regions(\n                     self.param_substs,\n@@ -563,7 +567,9 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 );\n                 visit_fn_use(self.tcx, fn_ty, false, &mut self.output);\n             }\n-            mir::Rvalue::Cast(mir::CastKind::ClosureFnPointer(_), ref operand, _) => {\n+            mir::Rvalue::Cast(\n+                mir::CastKind::Pointer(PointerCast::ClosureFnPointer(_)), ref operand, _\n+            ) => {\n                 let source_ty = operand.ty(self.mir, self.tcx);\n                 let source_ty = self.tcx.subst_and_normalize_erasing_regions(\n                     self.param_substs,"}, {"sha": "111f54439962097bc1f9deb52e659fcbe8f5efb1", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -12,7 +12,7 @@ use rustc_target::spec::abi::Abi;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::traits::{self, TraitEngine};\n-use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n+use rustc::ty::{self, TyCtxt, Ty, TypeFoldable, adjustment::{PointerCast}};\n use rustc::ty::cast::CastTy;\n use rustc::ty::query::Providers;\n use rustc::mir::*;\n@@ -1106,11 +1106,11 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n             Rvalue::UnaryOp(UnOp::Not, _) |\n             Rvalue::NullaryOp(NullOp::SizeOf, _) |\n             Rvalue::CheckedBinaryOp(..) |\n-            Rvalue::Cast(CastKind::ReifyFnPointer, ..) |\n-            Rvalue::Cast(CastKind::UnsafeFnPointer, ..) |\n-            Rvalue::Cast(CastKind::ClosureFnPointer(_), ..) |\n-            Rvalue::Cast(CastKind::Unsize, ..) |\n-            Rvalue::Cast(CastKind::MutToConstPointer, ..) |\n+            Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), ..) |\n+            Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), ..) |\n+            Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), ..) |\n+            Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), ..) |\n+            Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), ..) |\n             Rvalue::Discriminant(..) |\n             Rvalue::Len(_) |\n             Rvalue::Ref(..) |"}, {"sha": "201dac1524e4da127929e07e8089733943da90c9", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5be6b0beb9a68af64c0851409fde9f6aee5d0ecf/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=5be6b0beb9a68af64c0851409fde9f6aee5d0ecf", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::hir;\n use rustc::mir::*;\n-use rustc::ty::{self, Predicate, TyCtxt};\n+use rustc::ty::{self, Predicate, TyCtxt, adjustment::{PointerCast}};\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n use syntax_pos::Span;\n@@ -152,16 +152,16 @@ fn check_rvalue(\n                 _ => check_operand(tcx, mir, operand, span),\n             }\n         }\n-        Rvalue::Cast(CastKind::MutToConstPointer, operand, _) => {\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer), operand, _) => {\n             check_operand(tcx, mir, operand, span)\n         }\n-        Rvalue::Cast(CastKind::UnsafeFnPointer, _, _) |\n-        Rvalue::Cast(CastKind::ClosureFnPointer(_), _, _) |\n-        Rvalue::Cast(CastKind::ReifyFnPointer, _, _) => Err((\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::UnsafeFnPointer), _, _) |\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::ClosureFnPointer(_)), _, _) |\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::ReifyFnPointer), _, _) => Err((\n             span,\n             \"function pointer casts are not allowed in const fn\".into(),\n         )),\n-        Rvalue::Cast(CastKind::Unsize, _, _) => Err((\n+        Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), _, _) => Err((\n             span,\n             \"unsizing casts are not allowed in const fn\".into(),\n         )),"}]}