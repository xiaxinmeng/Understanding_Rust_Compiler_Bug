{"sha": "ab44b5a408ec42be8e4045120a9a2a1121618384", "node_id": "C_kwDOAAsO6NoAKGFiNDRiNWE0MDhlYzQyYmU4ZTQwNDUxMjBhOWEyYTExMjE2MTgzODQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-29T00:25:49Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-07-29T05:27:16Z"}, "message": "Remove some early `check_*` functions.\n\nThey're not used by rustc or clippy.", "tree": {"sha": "b0e2db2e2d905a19561d14a291dae2885bd0976d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0e2db2e2d905a19561d14a291dae2885bd0976d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab44b5a408ec42be8e4045120a9a2a1121618384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab44b5a408ec42be8e4045120a9a2a1121618384", "html_url": "https://github.com/rust-lang/rust/commit/ab44b5a408ec42be8e4045120a9a2a1121618384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab44b5a408ec42be8e4045120a9a2a1121618384/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdf520fd419cd4dea184332f57206f1cf5ca3e8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf520fd419cd4dea184332f57206f1cf5ca3e8f", "html_url": "https://github.com/rust-lang/rust/commit/bdf520fd419cd4dea184332f57206f1cf5ca3e8f"}], "stats": {"total": 36, "additions": 0, "deletions": 36}, "files": [{"sha": "d13711c3ab59851636b0449dfa2fd3fee538ecf8", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab44b5a408ec42be8e4045120a9a2a1121618384/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab44b5a408ec42be8e4045120a9a2a1121618384/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=ab44b5a408ec42be8e4045120a9a2a1121618384", "patch": "@@ -90,9 +90,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n \n     fn visit_foreign_item(&mut self, it: &'a ast::ForeignItem) {\n         self.with_lint_attrs(it.id, &it.attrs, |cx| {\n-            run_early_pass!(cx, check_foreign_item, it);\n             ast_visit::walk_foreign_item(cx, it);\n-            run_early_pass!(cx, check_foreign_item_post, it);\n         })\n     }\n \n@@ -104,7 +102,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_anon_const(&mut self, c: &'a ast::AnonConst) {\n-        run_early_pass!(self, check_anon_const, c);\n         self.check_id(c.id);\n         ast_visit::walk_anon_const(self, c);\n     }\n@@ -154,22 +151,17 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n                 self.check_id(closure_id);\n             }\n         }\n-\n-        run_early_pass!(self, check_fn_post, fk, span, id);\n     }\n \n     fn visit_variant_data(&mut self, s: &'a ast::VariantData) {\n-        run_early_pass!(self, check_struct_def, s);\n         if let Some(ctor_hir_id) = s.ctor_id() {\n             self.check_id(ctor_hir_id);\n         }\n         ast_visit::walk_struct_def(self, s);\n-        run_early_pass!(self, check_struct_def_post, s);\n     }\n \n     fn visit_field_def(&mut self, s: &'a ast::FieldDef) {\n         self.with_lint_attrs(s.id, &s.attrs, |cx| {\n-            run_early_pass!(cx, check_field_def, s);\n             ast_visit::walk_field_def(cx, s);\n         })\n     }\n@@ -178,7 +170,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         self.with_lint_attrs(v.id, &v.attrs, |cx| {\n             run_early_pass!(cx, check_variant, v);\n             ast_visit::walk_variant(cx, v);\n-            run_early_pass!(cx, check_variant_post, v);\n         })\n     }\n \n@@ -203,7 +194,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n         run_early_pass!(self, check_block, b);\n         self.check_id(b.id);\n         ast_visit::walk_block(self, b);\n-        run_early_pass!(self, check_block_post, b);\n     }\n \n     fn visit_arm(&mut self, a: &'a ast::Arm) {\n@@ -214,8 +204,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_expr_post(&mut self, e: &'a ast::Expr) {\n-        run_early_pass!(self, check_expr_post, e);\n-\n         // Explicitly check for lints associated with 'closure_id', since\n         // it does not have a corresponding AST node\n         match e.kind {\n@@ -242,7 +230,6 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_where_predicate(&mut self, p: &'a ast::WherePredicate) {\n-        run_early_pass!(self, check_where_predicate, p);\n         ast_visit::walk_where_predicate(self, p);\n     }\n \n@@ -256,23 +243,19 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n             ast_visit::AssocCtxt::Trait => {\n                 run_early_pass!(cx, check_trait_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n-                run_early_pass!(cx, check_trait_item_post, item);\n             }\n             ast_visit::AssocCtxt::Impl => {\n                 run_early_pass!(cx, check_impl_item, item);\n                 ast_visit::walk_assoc_item(cx, item, ctxt);\n-                run_early_pass!(cx, check_impl_item_post, item);\n             }\n         });\n     }\n \n     fn visit_lifetime(&mut self, lt: &'a ast::Lifetime, _: ast_visit::LifetimeCtxt) {\n-        run_early_pass!(self, check_lifetime, lt);\n         self.check_id(lt.id);\n     }\n \n     fn visit_path(&mut self, p: &'a ast::Path, id: ast::NodeId) {\n-        run_early_pass!(self, check_path, p, id);\n         self.check_id(id);\n         ast_visit::walk_path(self, p);\n     }"}, {"sha": "d53b96f231d54d283add16aa99a062cf3c4355e7", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ab44b5a408ec42be8e4045120a9a2a1121618384/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab44b5a408ec42be8e4045120a9a2a1121618384/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=ab44b5a408ec42be8e4045120a9a2a1121618384", "patch": "@@ -161,44 +161,25 @@ macro_rules! early_lint_methods {\n             fn check_ident(a: Ident);\n             fn check_crate(a: &ast::Crate);\n             fn check_crate_post(a: &ast::Crate);\n-            fn check_foreign_item(a: &ast::ForeignItem);\n-            fn check_foreign_item_post(a: &ast::ForeignItem);\n             fn check_item(a: &ast::Item);\n             fn check_item_post(a: &ast::Item);\n             fn check_local(a: &ast::Local);\n             fn check_block(a: &ast::Block);\n-            fn check_block_post(a: &ast::Block);\n             fn check_stmt(a: &ast::Stmt);\n             fn check_arm(a: &ast::Arm);\n             fn check_pat(a: &ast::Pat);\n-            fn check_anon_const(a: &ast::AnonConst);\n             fn check_pat_post(a: &ast::Pat);\n             fn check_expr(a: &ast::Expr);\n-            fn check_expr_post(a: &ast::Expr);\n             fn check_ty(a: &ast::Ty);\n             fn check_generic_arg(a: &ast::GenericArg);\n             fn check_generic_param(a: &ast::GenericParam);\n             fn check_generics(a: &ast::Generics);\n-            fn check_where_predicate(a: &ast::WherePredicate);\n             fn check_poly_trait_ref(a: &ast::PolyTraitRef,\n                                     b: &ast::TraitBoundModifier);\n             fn check_fn(a: rustc_ast::visit::FnKind<'_>, c: Span, d_: ast::NodeId);\n-            fn check_fn_post(\n-                a: rustc_ast::visit::FnKind<'_>,\n-                c: Span,\n-                d: ast::NodeId\n-            );\n             fn check_trait_item(a: &ast::AssocItem);\n-            fn check_trait_item_post(a: &ast::AssocItem);\n             fn check_impl_item(a: &ast::AssocItem);\n-            fn check_impl_item_post(a: &ast::AssocItem);\n-            fn check_struct_def(a: &ast::VariantData);\n-            fn check_struct_def_post(a: &ast::VariantData);\n-            fn check_field_def(a: &ast::FieldDef);\n             fn check_variant(a: &ast::Variant);\n-            fn check_variant_post(a: &ast::Variant);\n-            fn check_lifetime(a: &ast::Lifetime);\n-            fn check_path(a: &ast::Path, b: ast::NodeId);\n             fn check_attribute(a: &ast::Attribute);\n             fn check_mac_def(a: &ast::MacroDef, b: ast::NodeId);\n             fn check_mac(a: &ast::MacCall);"}]}