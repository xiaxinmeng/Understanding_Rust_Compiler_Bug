{"sha": "bd0e8a5df339470d3376f97d15021f301687e46b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkMGU4YTVkZjMzOTQ3MGQzMzc2Zjk3ZDE1MDIxZjMwMTY4N2U0NmI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-15T15:06:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-15T15:06:54Z"}, "message": "Rollup merge of #81975 - Amanieu:seal2, r=m-ou-se\n\nSeal the CommandExt, OsStrExt and OsStringExt traits\n\nA crater run (https://github.com/rust-lang/rust/pull/81213#issuecomment-767651811) has shown that this does not break any existing code.\n\nThis also unblocks #77728.\n\nBased on #81213.\n\nr? ````@m-ou-se````\ncc ````@lygstate````", "tree": {"sha": "5432d896c1aba09c1a36dbc5156ad5a55537480b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5432d896c1aba09c1a36dbc5156ad5a55537480b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd0e8a5df339470d3376f97d15021f301687e46b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgKo4OCRBK7hj4Ov3rIwAAdHIIADZ+HPCy2IvgMySouPOIPcD7\nBEh285XlE4B3npseBwVGZsF1jE7CQ/Vy4On4GjMjkTdM1hbLQxBnhchO6s4RJoCq\nc30TaLzz11v6hDQWKchSJHRo/pxU2P91C1SrfZbmLf0mOClGrFdqUZixLZgwLQXW\n2FR3ICG6xHXrC2PPPh3meKVuP6pwDAAQx23f2VYH5zo/VIbIepLivsPvXpANm235\nD5sjWtG5JEsYYGSoUVp0Tpfkkz1evx4D8QRJlC28RZbjFY7j9cN2TQi4mD22e9oL\nLgw8i22DF7/+AvXwmfxi38XC6DhXlyvjeSpUvK/2YtXhHkfbHJyjuzJDB1c4vQY=\n=hxP/\n-----END PGP SIGNATURE-----\n", "payload": "tree 5432d896c1aba09c1a36dbc5156ad5a55537480b\nparent cd27820b1a26046e2040f666b3b66a9a5aa8c4ea\nparent bfd1ccfb271f03aa85488408c3b03a15ad8d7c7f\nauthor Jonas Schievink <jonasschievink@gmail.com> 1613401614 +0100\ncommitter GitHub <noreply@github.com> 1613401614 +0100\n\nRollup merge of #81975 - Amanieu:seal2, r=m-ou-se\n\nSeal the CommandExt, OsStrExt and OsStringExt traits\n\nA crater run (https://github.com/rust-lang/rust/pull/81213#issuecomment-767651811) has shown that this does not break any existing code.\n\nThis also unblocks #77728.\n\nBased on #81213.\n\nr? ````@m-ou-se````\ncc ````@lygstate````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0e8a5df339470d3376f97d15021f301687e46b", "html_url": "https://github.com/rust-lang/rust/commit/bd0e8a5df339470d3376f97d15021f301687e46b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd0e8a5df339470d3376f97d15021f301687e46b/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd27820b1a26046e2040f666b3b66a9a5aa8c4ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd27820b1a26046e2040f666b3b66a9a5aa8c4ea", "html_url": "https://github.com/rust-lang/rust/commit/cd27820b1a26046e2040f666b3b66a9a5aa8c4ea"}, {"sha": "bfd1ccfb271f03aa85488408c3b03a15ad8d7c7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd1ccfb271f03aa85488408c3b03a15ad8d7c7f", "html_url": "https://github.com/rust-lang/rust/commit/bfd1ccfb271f03aa85488408c3b03a15ad8d7c7f"}], "stats": {"total": 84, "additions": 54, "deletions": 30}, "files": [{"sha": "5bb3f6bdcfd7bddae10a6affa87d94339880c0d8", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=bd0e8a5df339470d3376f97d15021f301687e46b", "patch": "@@ -76,6 +76,10 @@ pub struct OsString {\n     inner: Buf,\n }\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for OsString {}\n+\n /// Borrowed reference to an OS string (see [`OsString`]).\n ///\n /// This type represents a borrowed reference to a string in the operating system's preferred\n@@ -100,6 +104,10 @@ pub struct OsStr {\n     inner: Slice,\n }\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for OsStr {}\n+\n impl OsString {\n     /// Constructs a new empty `OsString`.\n     ///"}, {"sha": "d5e00ae4be659710619ea12709cdce813d5b4a9c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=bd0e8a5df339470d3376f97d15021f301687e46b", "patch": "@@ -582,3 +582,11 @@ include!(\"keyword_docs.rs\");\n // is unconditional, so the unstable feature needs to be defined somewhere.\n #[unstable(feature = \"restricted_std\", issue = \"none\")]\n mod __restricted_std_workaround {}\n+\n+mod sealed {\n+    /// This trait being unreachable from outside the crate\n+    /// prevents outside implementations of our extension traits.\n+    /// This allows adding more trait methods in the future.\n+    #[unstable(feature = \"sealed\", issue = \"none\")]\n+    pub trait Sealed {}\n+}"}, {"sha": "6480e654c55f05b9fff3874a747205fbb3647b1e", "filename": "library/std/src/process.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=bd0e8a5df339470d3376f97d15021f301687e46b", "patch": "@@ -498,6 +498,10 @@ pub struct Command {\n     inner: imp::Command,\n }\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for Command {}\n+\n impl Command {\n     /// Constructs a new `Command` for launching the program at\n     /// path `program`, with the following default configuration:\n@@ -1375,6 +1379,10 @@ impl From<fs::File> for Stdio {\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct ExitStatus(imp::ExitStatus);\n \n+/// Allows extension traits within `std`.\n+#[unstable(feature = \"sealed\", issue = \"none\")]\n+impl crate::sealed::Sealed for ExitStatus {}\n+\n impl ExitStatus {\n     /// Was termination successful? Signal termination is not considered a\n     /// success, and success is defined as a zero exit status."}, {"sha": "7559c1f1d9e290d41ef4be7d0baeca3896787a46", "filename": "library/std/src/sys/unix/ext/process.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=bd0e8a5df339470d3376f97d15021f301687e46b", "patch": "@@ -6,20 +6,16 @@ use crate::ffi::OsStr;\n use crate::io;\n use crate::os::unix::io::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::process;\n+use crate::sealed::Sealed;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n-mod private {\n-    /// This trait being unreachable from outside the crate\n-    /// prevents other implementations of the `ExitStatusExt` trait,\n-    /// which allows potentially adding more trait methods in the future.\n-    #[stable(feature = \"none\", since = \"1.51.0\")]\n-    pub trait Sealed {}\n-}\n-\n /// Unix-specific extensions to the [`process::Command`] builder.\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait CommandExt {\n+pub trait CommandExt: Sealed {\n     /// Sets the child process's user ID. This translates to a\n     /// `setuid` call in the child process. Failure in the `setuid`\n     /// call will cause the spawn to fail.\n@@ -193,7 +189,7 @@ impl CommandExt for process::Command {\n /// This trait is sealed: it cannot be implemented outside the standard library.\n /// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait ExitStatusExt: private::Sealed {\n+pub trait ExitStatusExt: Sealed {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of\n     /// a process.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n@@ -228,9 +224,6 @@ pub trait ExitStatusExt: private::Sealed {\n     fn into_raw(self) -> i32;\n }\n \n-#[stable(feature = \"none\", since = \"1.51.0\")]\n-impl private::Sealed for process::ExitStatus {}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl ExitStatusExt for process::ExitStatus {\n     fn from_raw(raw: i32) -> Self {"}, {"sha": "c89b9ff1efa6b98e892b510fcc0af2796bcda054", "filename": "library/std/src/sys/windows/ext/ffi.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fffi.rs?ref=bd0e8a5df339470d3376f97d15021f301687e46b", "patch": "@@ -53,6 +53,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use crate::ffi::{OsStr, OsString};\n+use crate::sealed::Sealed;\n use crate::sys::os_str::Buf;\n use crate::sys_common::wtf8::Wtf8Buf;\n use crate::sys_common::{AsInner, FromInner};\n@@ -61,8 +62,11 @@ use crate::sys_common::{AsInner, FromInner};\n pub use crate::sys_common::wtf8::EncodeWide;\n \n /// Windows-specific extensions to [`OsString`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStringExt {\n+pub trait OsStringExt: Sealed {\n     /// Creates an `OsString` from a potentially ill-formed UTF-16 slice of\n     /// 16-bit code units.\n     ///\n@@ -92,8 +96,11 @@ impl OsStringExt for OsString {\n }\n \n /// Windows-specific extensions to [`OsStr`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStrExt {\n+pub trait OsStrExt: Sealed {\n     /// Re-encodes an `OsStr` as a wide character sequence, i.e., potentially\n     /// ill-formed UTF-16.\n     ///"}, {"sha": "3d680a7f2d94fed6f01c9375bbcfea71034bd1f4", "filename": "library/std/src/sys/windows/ext/process.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=bd0e8a5df339470d3376f97d15021f301687e46b", "patch": "@@ -4,17 +4,10 @@\n \n use crate::os::windows::io::{AsRawHandle, FromRawHandle, IntoRawHandle, RawHandle};\n use crate::process;\n+use crate::sealed::Sealed;\n use crate::sys;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n-mod private {\n-    /// This trait being unreachable from outside the crate\n-    /// prevents other implementations of the `ExitStatusExt` trait,\n-    /// which allows potentially adding more trait methods in the future.\n-    #[stable(feature = \"none\", since = \"1.51.0\")]\n-    pub trait Sealed {}\n-}\n-\n #[stable(feature = \"process_extensions\", since = \"1.2.0\")]\n impl FromRawHandle for process::Stdio {\n     unsafe fn from_raw_handle(handle: RawHandle) -> process::Stdio {\n@@ -85,7 +78,7 @@ impl IntoRawHandle for process::ChildStderr {\n /// This trait is sealed: it cannot be implemented outside the standard library.\n /// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n-pub trait ExitStatusExt: private::Sealed {\n+pub trait ExitStatusExt: Sealed {\n     /// Creates a new `ExitStatus` from the raw underlying `u32` return value of\n     /// a process.\n     #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n@@ -99,12 +92,12 @@ impl ExitStatusExt for process::ExitStatus {\n     }\n }\n \n-#[stable(feature = \"none\", since = \"1.51.0\")]\n-impl private::Sealed for process::ExitStatus {}\n-\n /// Windows-specific extensions to the [`process::Command`] builder.\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"windows_process_extensions\", since = \"1.16.0\")]\n-pub trait CommandExt {\n+pub trait CommandExt: Sealed {\n     /// Sets the [process creation flags][1] to be passed to `CreateProcess`.\n     ///\n     /// These will always be ORed with `CREATE_UNICODE_ENVIRONMENT`."}, {"sha": "302c519740717723dd12bed1e7e61a4b2d313b35", "filename": "library/std/src/sys_common/os_str_bytes.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd0e8a5df339470d3376f97d15021f301687e46b/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fos_str_bytes.rs?ref=bd0e8a5df339470d3376f97d15021f301687e46b", "patch": "@@ -6,6 +6,7 @@ use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n use crate::mem;\n use crate::rc::Rc;\n+use crate::sealed::Sealed;\n use crate::str;\n use crate::sync::Arc;\n use crate::sys_common::bytestring::debug_fmt_bytestring;\n@@ -232,8 +233,11 @@ impl Slice {\n }\n \n /// Platform-specific extensions to [`OsString`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStringExt {\n+pub trait OsStringExt: Sealed {\n     /// Creates an [`OsString`] from a byte vector.\n     ///\n     /// See the module documentation for an example.\n@@ -258,8 +262,11 @@ impl OsStringExt for OsString {\n }\n \n /// Platform-specific extensions to [`OsStr`].\n+///\n+/// This trait is sealed: it cannot be implemented outside the standard library.\n+/// This is so that future additional methods are not breaking changes.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub trait OsStrExt {\n+pub trait OsStrExt: Sealed {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     /// Creates an [`OsStr`] from a byte slice.\n     ///"}]}