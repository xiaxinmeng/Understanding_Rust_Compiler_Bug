{"sha": "0477976867ddf3198ea62efdc2043e38b96eedd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0Nzc5NzY4NjdkZGYzMTk4ZWE2MmVmZGMyMDQzZTM4Yjk2ZWVkZDU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-09-09T10:16:43Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2015-09-10T12:19:01Z"}, "message": "Add error code for private struct field issue", "tree": {"sha": "5181af7c1246c08569c813485b41ff10a1cb0349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5181af7c1246c08569c813485b41ff10a1cb0349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0477976867ddf3198ea62efdc2043e38b96eedd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0477976867ddf3198ea62efdc2043e38b96eedd5", "html_url": "https://github.com/rust-lang/rust/commit/0477976867ddf3198ea62efdc2043e38b96eedd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0477976867ddf3198ea62efdc2043e38b96eedd5/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a056d5869e808b7f26cb536eca1aadda26a8188f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a056d5869e808b7f26cb536eca1aadda26a8188f", "html_url": "https://github.com/rust-lang/rust/commit/a056d5869e808b7f26cb536eca1aadda26a8188f"}], "stats": {"total": 96, "additions": 90, "deletions": 6}, "files": [{"sha": "0f9f00e1b49a9ffa9611b1313362baf5238521a2", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 88, "deletions": 5, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/0477976867ddf3198ea62efdc2043e38b96eedd5/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477976867ddf3198ea62efdc2043e38b96eedd5/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=0477976867ddf3198ea62efdc2043e38b96eedd5", "patch": "@@ -22,6 +22,8 @@ trait Foo {\n }\n \n pub trait Bar : Foo {} // error: private trait in exported type parameter bound\n+pub struct Bar<T: Foo>(pub T); // same error\n+pub fn foo<T: Foo> (t: T) {} // same error\n ```\n \n To solve this error, please ensure that the trait is also public and accessible\n@@ -34,6 +36,8 @@ pub trait Foo { // we set the Foo trait public\n }\n \n pub trait Bar : Foo {} // ok!\n+pub struct Bar<T: Foo>(pub T); // ok!\n+pub fn foo<T: Foo> (t: T) {} // ok!\n ```\n \"##,\n \n@@ -73,8 +77,8 @@ fn foo() {\n }\n ```\n \n-Since we cannot access inside function's elements, the visibility of its\n-elements does not impact outer code. So using the `pub` keyword in this context\n+Since we cannot access items defined inside a function, the visibility of its\n+items does not impact outer code. So using the `pub` keyword in this context\n is invalid.\n \"##,\n \n@@ -122,7 +126,25 @@ pub impl Foo for Bar { // error: unnecessary visibility qualifier\n ```\n \n To fix this error, please remove the visibility qualifier when it is not\n-required.\n+required. Example:\n+\n+```\n+struct Bar;\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+// Directly implemented methods share the visibility of the type itself,\n+// so `pub` is unnecessary here\n+impl Bar {}\n+\n+// Trait methods share the visibility of the trait, so `pub` is\n+// unnecessary in either case\n+pub impl Foo for Bar {\n+    pub fn foo() {}\n+}\n+```\n \"##,\n \n E0450: r##\"\n@@ -138,15 +160,76 @@ let f = Bar::Foo(0); // error: cannot invoke tuple struct constructor with\n                      //        private fields\n ```\n \n-To solve this issue, please ensure that all tuple's fields are public. Example:\n+To solve this issue, please ensure that all of the fields of the tuple struct\n+are public. Alternatively, provide a new() method to the tuple struct to\n+construct it from a given inner value. Example:\n \n ```\n mod Bar {\n     pub struct Foo(pub isize); // we set its field to public\n }\n \n let f = Bar::Foo(0); // ok!\n+\n+// or:\n+mod bar {\n+    pub struct Foo(isize);\n+\n+    impl Foo {\n+        pub fn new(x: isize) {\n+            Foo(x)\n+        }\n+    }\n+}\n+\n+let f = bar::Foo::new(1);\n+```\n+\"##,\n+\n+E0451: r##\"\n+A struct constructor with private fields was invoked. Erroneous code example:\n+\n+```\n+mod Bar {\n+    pub struct Foo {\n+        pub a: isize,\n+        b: isize,\n+    }\n+}\n+\n+let f = Bar::Foo{ a: 0, b: 0 }; // error: field `b` of struct `Bar::Foo`\n+                                //        is private\n+```\n+\n+To fix this error, please ensure that all the fields of the struct, or\n+implement a function for easy instantiation. Examples:\n+\n+```\n+mod Bar {\n+    pub struct Foo {\n+        pub a: isize,\n+        pub b: isize, // we set `b` field public\n+    }\n+}\n+\n+let f = Bar::Foo{ a: 0, b: 0 }; // ok!\n+\n+// or:\n+mod Bar {\n+    pub struct Foo {\n+        pub a: isize,\n+        b: isize, // still private\n+    }\n+\n+    impl Foo {\n+        pub fn new() -> Foo { // we create a method to instantiate `Foo`\n+            Foo { a: 0, b: 0 }\n+        }\n+    }\n+}\n+\n+let f = Bar::Foo::new(); // ok!\n ```\n \"##,\n \n-}\n\\ No newline at end of file\n+}"}, {"sha": "48efd34e2122036abe992980b0489944cfd4a985", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0477976867ddf3198ea62efdc2043e38b96eedd5/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0477976867ddf3198ea62efdc2043e38b96eedd5/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0477976867ddf3198ea62efdc2043e38b96eedd5", "patch": "@@ -717,7 +717,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n             UnnamedField(idx) => format!(\"field #{} of {} is private\",\n                                          idx + 1, struct_desc),\n         };\n-        self.tcx.sess.span_err(span, &msg[..]);\n+        span_err!(self.tcx.sess, span, E0451,\n+                  \"{}\", &msg[..]);\n     }\n \n     // Given the ID of a method, checks to ensure it's in scope."}]}