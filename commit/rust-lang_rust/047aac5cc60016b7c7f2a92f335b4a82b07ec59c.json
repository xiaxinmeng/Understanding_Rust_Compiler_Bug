{"sha": "047aac5cc60016b7c7f2a92f335b4a82b07ec59c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0N2FhYzVjYzYwMDE2YjdjN2YyYTkyZjMzNWI0YTgyYjA3ZWM1OWM=", "commit": {"author": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-03T14:25:51Z"}, "committer": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-03T14:25:51Z"}, "message": "Flesh out struct keyword docs\n\nThe whole keyword docs thing is pretty new in Rust's history and needs\nsome work before it's a shining gem. Here's hoping I can provide that.\n\nI basically shoved in a bunch of the most important information from the\nreference and the book, along with leaving links to both at the end. I\ndon't think keyword docs need to have complete detail, just all the\nbroad strokes, so if someone's confused about a usage of a keyword they\ncan look at the std documentation for that keyword.", "tree": {"sha": "001046222170e710b1fde6cc27473585d64d7a73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/001046222170e710b1fde6cc27473585d64d7a73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/047aac5cc60016b7c7f2a92f335b4a82b07ec59c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/047aac5cc60016b7c7f2a92f335b4a82b07ec59c", "html_url": "https://github.com/rust-lang/rust/commit/047aac5cc60016b7c7f2a92f335b4a82b07ec59c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/047aac5cc60016b7c7f2a92f335b4a82b07ec59c/comments", "author": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3bb23191c7735eb8526db69d620a8c4ad705399", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3bb23191c7735eb8526db69d620a8c4ad705399", "html_url": "https://github.com/rust-lang/rust/commit/f3bb23191c7735eb8526db69d620a8c4ad705399"}], "stats": {"total": 104, "additions": 96, "deletions": 8}, "files": [{"sha": "b5593e44f8b5b6fbe0a714c3c6a8dad28c87538b", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 96, "deletions": 8, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/047aac5cc60016b7c7f2a92f335b4a82b07ec59c/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047aac5cc60016b7c7f2a92f335b4a82b07ec59c/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=047aac5cc60016b7c7f2a92f335b4a82b07ec59c", "patch": "@@ -59,21 +59,109 @@ mod let_keyword { }\n \n #[doc(keyword = \"struct\")]\n //\n-/// The `struct` keyword.\n+/// The keyword used to define structs.\n ///\n-/// The `struct` keyword is used to define a struct type.\n+/// Structs in Rust come in three flavours: Regular structs, tuple structs,\n+/// and empty structs.\n ///\n-/// Example:\n+/// ```rust\n+/// struct Regular {\n+///     field1: f32,\n+///     field2: String,\n+///     pub field3: bool\n+/// }\n ///\n+/// struct Tuple(u32, String);\n+///\n+/// struct Empty;\n /// ```\n-/// struct Foo {\n-///     field1: u32,\n-///     field2: String,\n+///\n+/// Regular structs are the most commonly used. Each field defined within them has a name and a\n+/// type, and once defined can be accessed using `example_struct.field` syntax. The fields of a\n+/// struct share its mutability, so `foo.bar = 2;` would only be valid if `foo` was mutable. Adding\n+/// `pub` to a field makes it visible to code in other modules, as well as allowing it to be\n+/// directly accessed and modified.\n+///\n+/// Tuple structs are similar to regular structs, but its fields have no names. They are used like\n+/// tuples, with deconstruction possible via `let TupleStruct(x, y) = foo;` syntax.  For accessing\n+/// individual variables, the same syntax is used as with regular tuples, namely `foo.0`, `foo.1`,\n+/// etc, starting at zero.\n+///\n+/// Empty structs, or unit-like structs, are most commonly used as markers, for example\n+/// [`PhantomData`]. Empty structs have a size of zero bytes, but unlike empty enums they can be\n+/// instantiated, making them similar to the unit type `()`. Unit-like structs are useful when you\n+/// need to implement a trait on something, but don't need to store any data inside it.\n+///\n+/// # Instantiation\n+///\n+/// Structs can be instantiated in a manner of different ways, each of which can be mixed and\n+/// matched as needed. The most common way to make a new struct is via a constructor method such as\n+/// `new()`, but when that isn't available (or you're writing the constructor itself), struct\n+/// literal syntax is used:\n+///\n+/// ```rust\n+/// # struct Foo { field1: f32, field2: String, etc: bool }\n+/// let example = Foo {\n+///     field1: 42.0,\n+///     field2: \"blah\".to_string(),\n+///     etc: true,\n+/// };\n+/// ```\n+///\n+/// It's only possible to directly instantiate a struct using struct literal syntax when all of its\n+/// fields are visible to you.\n+///\n+/// There are a handful of shortcuts provided to make writing constructors more convenient, most\n+/// common of which is the Field Init shorthand. When there is a variable and a field of the same\n+/// name, the assignment can be simplified from `field: field` into simply `field`. The following\n+/// example of a hypothetical constructor demonstrates this:\n+///\n+/// ```rust\n+/// struct User {\n+///     name: String,\n+///     admin: bool,\n+/// }\n+///\n+/// impl User {\n+///     pub fn new(name: String) -> Self {\n+///         Self {\n+///             name,\n+///             admin: false,\n+///         }\n+///     }\n /// }\n /// ```\n ///\n-/// There are different kinds of structs. For more information, take a look at the\n-/// [Rust Book][book].\n+/// Another shortcut for struct instantiation is available when you need to make a new struct that\n+/// shares most of a previous struct's values called struct update syntax:\n+///\n+/// ```rust\n+/// # struct Foo { field1: String, field2: () }\n+/// # let thing = Foo { field1: \"\".to_string(), field2: () };\n+/// let updated_thing = Foo {\n+///     field1: \"a new value\".to_string(),\n+///     ..thing\n+/// };\n+/// ```\n ///\n+/// Tuple structs are instantiated in the same way as tuples themselves, except with the struct's\n+/// name as a prefix: `Foo(123, false, 0.1)`.\n+///\n+/// Empty structs are instantiated with just their name and nothing else. `let thing =\n+/// EmptyStruct;`\n+///\n+///\n+/// # Style conventions\n+///\n+/// Structs are always written in CamelCase, with few exceptions. While the trailing comma on a\n+/// struct's list of fields can be omitted, it's usually kept for convenience in adding and\n+/// removing fields down the line.\n+///\n+/// For more information on structs, take a look at the [Rust Book][book] or the\n+/// [Reference][reference].\n+///\n+/// [`PhantomData`]: marker/struct.PhantomData.html\n /// [book]: https://doc.rust-lang.org/book/second-edition/ch05-01-defining-structs.html\n+/// [reference]: https://doc.rust-lang.org/reference/items/structs.html\n+\n mod struct_keyword { }"}]}