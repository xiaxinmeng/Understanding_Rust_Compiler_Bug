{"sha": "cfcc8678e5f734c85c02004331757ee9c1f737a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmY2M4Njc4ZTVmNzM0Yzg1YzAyMDA0MzMxNzU3ZWU5YzFmNzM3YTA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-09T23:58:19Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-09T23:59:18Z"}, "message": "rustc: Give our upcall definitions the right values", "tree": {"sha": "aa64c84ddf85cf7fd13f37e7f8b4b164dfeee041", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa64c84ddf85cf7fd13f37e7f8b4b164dfeee041"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfcc8678e5f734c85c02004331757ee9c1f737a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcc8678e5f734c85c02004331757ee9c1f737a0", "html_url": "https://github.com/rust-lang/rust/commit/cfcc8678e5f734c85c02004331757ee9c1f737a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfcc8678e5f734c85c02004331757ee9c1f737a0/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "476442e48ce0dad5dfbb09a7ef874e09339224fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/476442e48ce0dad5dfbb09a7ef874e09339224fc", "html_url": "https://github.com/rust-lang/rust/commit/476442e48ce0dad5dfbb09a7ef874e09339224fc"}], "stats": {"total": 90, "additions": 50, "deletions": 40}, "files": [{"sha": "5e47a25b08b3151262e1abfbd0186581d10dd996", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 50, "deletions": 40, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/cfcc8678e5f734c85c02004331757ee9c1f737a0/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcc8678e5f734c85c02004331757ee9c1f737a0/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=cfcc8678e5f734c85c02004331757ee9c1f737a0", "patch": "@@ -60,66 +60,76 @@ type upcalls = rec(\n     ValueRef start_thread\n );\n \n-fn declare_upcalls(type_names tn, ModuleRef llmod) -> upcalls {\n-    fn decl(type_names tn, ModuleRef llmod, str name, vec[TypeRef] tys)\n-            -> ValueRef {\n+fn declare_upcalls(type_names tn, ModuleRef llmod) -> @upcalls {\n+    fn decl(type_names tn, ModuleRef llmod, str name, vec[TypeRef] tys,\n+            TypeRef rv) -> ValueRef {\n         let vec[TypeRef] arg_tys = vec(T_taskptr(tn));\n         for (TypeRef t in tys) { arg_tys += vec(t); }\n-        auto fn_ty = T_fn(arg_tys, T_void());\n+        auto fn_ty = T_fn(arg_tys, rv);\n         ret trans.decl_cdecl_fn(llmod, \"upcall_\" + name, fn_ty);\n     }\n \n-    auto d = bind decl(tn, llmod, _, _);\n+    auto dv = bind decl(tn, llmod, _, _, T_void());\n+    auto d = bind decl(tn, llmod, _, _, _);\n \n     // FIXME: Sigh... remove this when I fix the typechecker pushdown.\n     // --pcwalton\n     let vec[TypeRef] empty_vec = vec();\n \n-    ret rec(\n-        grow_task=d(\"grow_task\", vec(T_size_t())),\n-        log_int=d(\"log_int\", vec(T_i32(), T_i32())),\n-        log_float=d(\"log_float\", vec(T_i32(), T_f32())),\n-        log_double=d(\"log_double\", vec(T_i32(), T_ptr(T_f64()))),\n-        log_str=d(\"log_str\", vec(T_i32(), T_ptr(T_str()))),\n-        trace_word=d(\"trace_word\", vec(T_int())),\n-        trace_str=d(\"trace_str\", vec(T_ptr(T_i8()))),\n-        new_port=d(\"new_port\", vec(T_size_t())),\n-        del_port=d(\"del_port\", vec(T_opaque_port_ptr(tn))),\n-        new_chan=d(\"new_chan\", vec(T_opaque_port_ptr(tn))),\n-        flush_chan=d(\"flush_chan\", vec(T_opaque_chan_ptr(tn))),\n-        del_chan=d(\"del_chan\", vec(T_opaque_chan_ptr(tn))),\n-        clone_chan=d(\"clone_chan\", vec(T_taskptr(tn), T_opaque_chan_ptr(tn))),\n-        _yield=d(\"yield\", empty_vec),\n-        sleep=d(\"sleep\", vec(T_size_t())),\n-        _join=d(\"join\", vec(T_taskptr(tn))),\n-        send=d(\"send\", vec(T_opaque_chan_ptr(tn), T_ptr(T_i8()))),\n-        recv=d(\"recv\", vec(T_ptr(T_int()), T_opaque_port_ptr(tn))),\n-        _fail=d(\"fail\", vec(T_ptr(T_i8()), T_ptr(T_i8()), T_size_t())),\n-        kill=d(\"kill\", vec(T_taskptr(tn))),\n-        exit=d(\"exit\", empty_vec),\n-        malloc=d(\"malloc\", vec(T_size_t(), T_ptr(T_tydesc(tn)))),\n-        free=d(\"free\", vec(T_ptr(T_i8()), T_int())),\n-        mark=d(\"mark\", vec(T_ptr(T_i8()))),\n-        new_str=d(\"new_str\", vec(T_ptr(T_i8()), T_size_t())),\n-        new_vec=d(\"new_vec\", vec(T_size_t(), T_ptr(T_tydesc(tn)))),\n+    ret @rec(\n+        grow_task=dv(\"grow_task\", vec(T_size_t())),\n+        log_int=dv(\"log_int\", vec(T_i32(), T_i32())),\n+        log_float=dv(\"log_float\", vec(T_i32(), T_f32())),\n+        log_double=dv(\"log_double\", vec(T_i32(), T_ptr(T_f64()))),\n+        log_str=dv(\"log_str\", vec(T_i32(), T_ptr(T_str()))),\n+        trace_word=dv(\"trace_word\", vec(T_int())),\n+        trace_str=dv(\"trace_str\", vec(T_ptr(T_i8()))),\n+        new_port=d(\"new_port\", vec(T_size_t()), T_opaque_port_ptr(tn)),\n+        del_port=dv(\"del_port\", vec(T_opaque_port_ptr(tn))),\n+        new_chan=dv(\"new_chan\", vec(T_opaque_port_ptr(tn))),\n+        flush_chan=dv(\"flush_chan\", vec(T_opaque_chan_ptr(tn))),\n+        del_chan=dv(\"del_chan\", vec(T_opaque_chan_ptr(tn))),\n+        clone_chan=d(\"clone_chan\", vec(T_taskptr(tn), T_opaque_chan_ptr(tn)),\n+                     T_opaque_chan_ptr(tn)),\n+        _yield=dv(\"yield\", empty_vec),\n+        sleep=dv(\"sleep\", vec(T_size_t())),\n+        _join=dv(\"join\", vec(T_taskptr(tn))),\n+        send=dv(\"send\", vec(T_opaque_chan_ptr(tn), T_ptr(T_i8()))),\n+        recv=dv(\"recv\", vec(T_ptr(T_int()), T_opaque_port_ptr(tn))),\n+        _fail=dv(\"fail\", vec(T_ptr(T_i8()), T_ptr(T_i8()), T_size_t())),\n+        kill=dv(\"kill\", vec(T_taskptr(tn))),\n+        exit=dv(\"exit\", empty_vec),\n+        malloc=d(\"malloc\", vec(T_size_t(), T_ptr(T_tydesc(tn))),\n+                               T_ptr(T_i8())),\n+        free=dv(\"free\", vec(T_ptr(T_i8()), T_int())),\n+        mark=d(\"mark\", vec(T_ptr(T_i8())), T_int()),\n+        new_str=d(\"new_str\", vec(T_ptr(T_i8()), T_size_t()), T_ptr(T_str())),\n+        new_vec=d(\"new_vec\", vec(T_size_t(), T_ptr(T_tydesc(tn))),\n+                                 T_opaque_vec_ptr()),\n         vec_grow=d(\"vec_grow\", vec(T_opaque_vec_ptr(), T_size_t(),\n-                                   T_ptr(T_int()), T_ptr(T_tydesc(tn)))),\n+                                   T_ptr(T_int()), T_ptr(T_tydesc(tn))),\n+                   T_opaque_vec_ptr()),\n         require_rust_sym=d(\"require_rust_sym\",\n                            vec(T_ptr(T_crate(tn)), T_size_t(), T_size_t(),\n                                T_size_t(), T_ptr(T_i8()),\n-                               T_ptr(T_ptr(T_i8())))),\n+                               T_ptr(T_ptr(T_i8()))),\n+                           T_int()),\n         require_c_sym=d(\"require_c_sym\",\n                         vec(T_ptr(T_crate(tn)), T_size_t(), T_size_t(),\n-                            T_ptr(T_i8()), T_ptr(T_i8()))),\n+                            T_ptr(T_i8()), T_ptr(T_i8())),\n+                        T_int()),\n         get_type_desc=d(\"get_type_desc\",\n                         vec(T_ptr(T_crate(tn)), T_size_t(), T_size_t(),\n-                            T_size_t(), T_ptr(T_ptr(T_tydesc(tn))))),\n-        new_task=d(\"new_task\", vec(T_ptr(T_i8()))),\n+                            T_size_t(), T_ptr(T_ptr(T_tydesc(tn)))),\n+                        T_ptr(T_tydesc(tn))),\n+        new_task=d(\"new_task\", vec(T_ptr(T_i8())), T_taskptr(tn)),\n         start_task=d(\"start_task\", vec(T_taskptr(tn), T_int(), T_int(),\n-                                       T_int(), T_size_t())),\n-        new_thread=d(\"new_thread\", vec(T_ptr(T_i8()))),\n+                                       T_int(), T_size_t()),\n+                     T_taskptr(tn)),\n+        new_thread=d(\"new_thread\", vec(T_ptr(T_i8())), T_taskptr(tn)),\n         start_thread=d(\"start_thread\", vec(T_taskptr(tn), T_int(), T_int(),\n-                                           T_int(), T_size_t()))\n+                                           T_int(), T_size_t()),\n+                       T_taskptr(tn))\n     );\n }\n "}]}