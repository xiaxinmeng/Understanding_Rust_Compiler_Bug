{"sha": "d62c9c6c6305cbba31069457e33c9d4c6a4b40d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MmM5YzZjNjMwNWNiYmEzMTA2OTQ1N2UzM2M5ZDRjNmE0YjQwZDY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-21T15:23:22Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-01-21T15:23:22Z"}, "message": "Fix lowering with multiple block expressions", "tree": {"sha": "9d39a10e5ad9e09be08e640e00015c5e7541c9a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d39a10e5ad9e09be08e640e00015c5e7541c9a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d62c9c6c6305cbba31069457e33c9d4c6a4b40d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d62c9c6c6305cbba31069457e33c9d4c6a4b40d6", "html_url": "https://github.com/rust-lang/rust/commit/d62c9c6c6305cbba31069457e33c9d4c6a4b40d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d62c9c6c6305cbba31069457e33c9d4c6a4b40d6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8f44cfb9b598efea7cfbabdad356912e9b09afd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f44cfb9b598efea7cfbabdad356912e9b09afd", "html_url": "https://github.com/rust-lang/rust/commit/f8f44cfb9b598efea7cfbabdad356912e9b09afd"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "61cbbbc8f05dff06b01b98084116fca382cfea0f", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d62c9c6c6305cbba31069457e33c9d4c6a4b40d6/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d62c9c6c6305cbba31069457e33c9d4c6a4b40d6/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=d62c9c6c6305cbba31069457e33c9d4c6a4b40d6", "patch": "@@ -151,23 +151,31 @@ impl Ctx {\n     fn collect_inner_items(&mut self, container: &SyntaxNode) {\n         let forced_vis = self.forced_visibility.take();\n \n-        let mut current_block = None;\n+        let mut block_stack = Vec::new();\n         for event in container.preorder().skip(1) {\n-            if let WalkEvent::Enter(node) = event {\n-                match_ast! {\n-                    match node {\n-                        ast::BlockExpr(block) => {\n-                            current_block = Some(self.source_ast_id_map.ast_id(&block));\n-                        },\n-                        ast::Item(item) => {\n-                            let mod_items = self.lower_mod_item(&item, true);\n-                            if let (Some(mod_items), Some(block)) = (mod_items, current_block) {\n-                                if !mod_items.0.is_empty() {\n-                                    self.data().inner_items.entry(block).or_default().extend(mod_items.0.iter().copied());\n+            match event {\n+                WalkEvent::Enter(node) => {\n+                    match_ast! {\n+                        match node {\n+                            ast::BlockExpr(block) => {\n+                                block_stack.push(self.source_ast_id_map.ast_id(&block));\n+                            },\n+                            ast::Item(item) => {\n+                                let mod_items = self.lower_mod_item(&item, true);\n+                                let current_block = block_stack.last();\n+                                if let (Some(mod_items), Some(block)) = (mod_items, current_block) {\n+                                    if !mod_items.0.is_empty() {\n+                                        self.data().inner_items.entry(*block).or_default().extend(mod_items.0.iter().copied());\n+                                    }\n                                 }\n-                            }\n-                        },\n-                        _ => {}\n+                            },\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+                WalkEvent::Leave(node) => {\n+                    if ast::BlockExpr::cast(node).is_some() {\n+                        block_stack.pop();\n                     }\n                 }\n             }"}]}