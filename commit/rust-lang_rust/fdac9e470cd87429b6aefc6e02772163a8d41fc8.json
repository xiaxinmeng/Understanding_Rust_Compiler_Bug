{"sha": "fdac9e470cd87429b6aefc6e02772163a8d41fc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkYWM5ZTQ3MGNkODc0MjliNmFlZmM2ZTAyNzcyMTYzYThkNDFmYzg=", "commit": {"author": {"name": "Le\u0301o Testard", "email": "leo.testard@gmail.com", "date": "2013-11-24T16:29:44Z"}, "committer": {"name": "Le\u0301o Testard", "email": "leo.testard@gmail.com", "date": "2013-11-24T16:29:44Z"}, "message": "Implement cmp traits for Rc<T> and add a ptr_eq method.", "tree": {"sha": "d50730f2b723aedcb9c3673cbe7a2fed4466437f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d50730f2b723aedcb9c3673cbe7a2fed4466437f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdac9e470cd87429b6aefc6e02772163a8d41fc8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdac9e470cd87429b6aefc6e02772163a8d41fc8", "html_url": "https://github.com/rust-lang/rust/commit/fdac9e470cd87429b6aefc6e02772163a8d41fc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdac9e470cd87429b6aefc6e02772163a8d41fc8/comments", "author": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeoTestard", "id": 907750, "node_id": "MDQ6VXNlcjkwNzc1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/907750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeoTestard", "html_url": "https://github.com/LeoTestard", "followers_url": "https://api.github.com/users/LeoTestard/followers", "following_url": "https://api.github.com/users/LeoTestard/following{/other_user}", "gists_url": "https://api.github.com/users/LeoTestard/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeoTestard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeoTestard/subscriptions", "organizations_url": "https://api.github.com/users/LeoTestard/orgs", "repos_url": "https://api.github.com/users/LeoTestard/repos", "events_url": "https://api.github.com/users/LeoTestard/events{/privacy}", "received_events_url": "https://api.github.com/users/LeoTestard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce45bb7f4448fc810b35961c23bc23a27d685754", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce45bb7f4448fc810b35961c23bc23a27d685754", "html_url": "https://github.com/rust-lang/rust/commit/ce45bb7f4448fc810b35961c23bc23a27d685754"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "1b1546e57a32a58bbbb5a5a4d9c2dfded0f6dc31", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fdac9e470cd87429b6aefc6e02772163a8d41fc8/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdac9e470cd87429b6aefc6e02772163a8d41fc8/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=fdac9e470cd87429b6aefc6e02772163a8d41fc8", "patch": "@@ -22,6 +22,7 @@ use ops::Drop;\n use kinds::{Freeze, Send};\n use clone::{Clone, DeepClone};\n use cell::RefCell;\n+use cmp::{Eq, TotalEq, Ord, TotalOrd, Ordering};\n \n struct RcBox<T> {\n     value: T,\n@@ -80,6 +81,60 @@ impl<T> Rc<T> {\n     pub fn borrow<'r>(&'r self) -> &'r T {\n         unsafe { &(*self.ptr).value }\n     }\n+\n+    /// Determine if two reference-counted pointers point to the same object\n+    #[inline]\n+    pub fn ptr_eq(&self, other: &Rc<T>) -> bool {\n+        self.ptr == other.ptr\n+    }\n+}\n+\n+impl<T: Eq> Eq for Rc<T> {\n+    #[inline]\n+    fn eq(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value == (*other.ptr).value }\n+    }\n+\n+    #[inline]\n+    fn ne(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value != (*other.ptr).value }\n+    }\n+}\n+\n+impl<T: TotalEq> TotalEq for Rc<T> {\n+    #[inline]\n+    fn equals(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value.equals(&(*other.ptr).value) }\n+    }\n+}\n+\n+impl<T: Ord> Ord for Rc<T> {\n+    #[inline]\n+    fn lt(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value < (*other.ptr).value }\n+    }\n+\n+    #[inline]\n+    fn le(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value <= (*other.ptr).value }\n+    }\n+\n+    #[inline]\n+    fn ge(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value >= (*other.ptr).value }\n+    }\n+\n+    #[inline]\n+    fn gt(&self, other: &Rc<T>) -> bool {\n+        unsafe { (*self.ptr).value > (*other.ptr).value }\n+    }\n+}\n+\n+impl<T: TotalOrd> TotalOrd for Rc<T> {\n+    #[inline]\n+    fn cmp(&self, other: &Rc<T>) -> Ordering {\n+        unsafe { (*self.ptr).value.cmp(&(*other.ptr).value) }\n+    }\n }\n \n impl<T> Clone for Rc<T> {"}]}