{"sha": "1d4c5d90bde5b96cbb0fe55605e11b0f85aefbb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNGM1ZDkwYmRlNWI5NmNiYjBmZTU1NjA1ZTExYjBmODVhZWZiYjY=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-01-07T22:05:31Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-01-07T22:22:01Z"}, "message": "fmt: add unit tests", "tree": {"sha": "a99934e745341138f83ccc9be0ed9b125d4775be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a99934e745341138f83ccc9be0ed9b125d4775be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d4c5d90bde5b96cbb0fe55605e11b0f85aefbb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d4c5d90bde5b96cbb0fe55605e11b0f85aefbb6", "html_url": "https://github.com/rust-lang/rust/commit/1d4c5d90bde5b96cbb0fe55605e11b0f85aefbb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d4c5d90bde5b96cbb0fe55605e11b0f85aefbb6/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73649f36e8092006560e5d48213fcf067de38a6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/73649f36e8092006560e5d48213fcf067de38a6f", "html_url": "https://github.com/rust-lang/rust/commit/73649f36e8092006560e5d48213fcf067de38a6f"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "312fc18a033c1b23532a7648cca731a8a37c85d6", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/1d4c5d90bde5b96cbb0fe55605e11b0f85aefbb6/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d4c5d90bde5b96cbb0fe55605e11b0f85aefbb6/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=1d4c5d90bde5b96cbb0fe55605e11b0f85aefbb6", "patch": "@@ -335,6 +335,128 @@ pub mod ct {\n \n         Parsed::new(t, i + 1)\n     }\n+\n+    #[cfg(test)]\n+    fn die(s: &str) -> ! { fail s.to_owned() }\n+\n+    #[test]\n+    fn test_parse_count() {\n+        fn test(s: &str, count: Count, next: uint) -> bool {\n+            parse_count(s, 0, s.len()) == Parsed::new(count, next)\n+        }\n+\n+        assert test(\"\", CountImplied, 0);\n+        assert test(\"*\", CountIsNextParam, 1);\n+        assert test(\"*1\", CountIsNextParam, 1);\n+        assert test(\"*1$\", CountIsParam(1), 3);\n+        assert test(\"123\", CountIs(123), 3);\n+    }\n+\n+    #[test]\n+    fn test_parse_flags() {\n+        fn pack(fs: &[Flag]) -> uint {\n+            fs.foldl(0, |&p, &f| p | (1 << f as uint))\n+        }\n+\n+        fn test(s: &str, flags: &[Flag], next: uint) {\n+            let f = parse_flags(s, 0, s.len());\n+            assert pack(f.val) == pack(flags);\n+            assert f.next == next;\n+        }\n+\n+        test(\"\", [], 0);\n+        test(\"!#-+ 0\", [], 0);\n+        test(\"#-+\", [FlagAlternate, FlagLeftJustify, FlagSignAlways], 3);\n+        test(\" 0\", [FlagSpaceForSign, FlagLeftZeroPad], 2);\n+    }\n+\n+    #[test]\n+    fn test_parse_fmt_string() {\n+        assert parse_fmt_string(\"foo %s bar\", die) == ~[\n+            PieceString(~\"foo \"),\n+            PieceConv(Conv {param: None, flags: ~[], width: CountImplied,\n+                            precision: CountImplied, ty: TyStr}),\n+            PieceString(~\" bar\")];\n+\n+        assert parse_fmt_string(\"%s\", die) == ~[\n+            PieceConv(Conv {param: None, flags: ~[], width: CountImplied,\n+                            precision: CountImplied, ty: TyStr })];\n+\n+        assert parse_fmt_string(\"%%%%\", die) == ~[\n+            PieceString(~\"%\"), PieceString(~\"%\")];\n+    }\n+\n+    #[test]\n+    fn test_parse_parameter() {\n+        fn test(s: &str, param: Option<uint>, next: uint) -> bool {\n+            parse_parameter(s, 0, s.len()) == Parsed::new(param, next)\n+        }\n+\n+        assert test(\"\", None, 0);\n+        assert test(\"foo\", None, 0);\n+        assert test(\"123\", None, 0);\n+        assert test(\"123$\", Some(123), 4);\n+    }\n+\n+    #[test]\n+    fn test_parse_precision() {\n+        fn test(s: &str, count: Count, next: uint) -> bool {\n+            parse_precision(s, 0, s.len()) == Parsed::new(count, next)\n+        }\n+\n+        assert test(\"\", CountImplied, 0);\n+        assert test(\".\", CountIs(0), 1);\n+        assert test(\".*\", CountIsNextParam, 2);\n+        assert test(\".*1\", CountIsNextParam, 2);\n+        assert test(\".*1$\", CountIsParam(1), 4);\n+        assert test(\".123\", CountIs(123), 4);\n+    }\n+\n+    #[test]\n+    fn test_parse_type() {\n+        fn test(s: &str, ty: Ty) -> bool {\n+            parse_type(s, 0, s.len(), die) == Parsed::new(ty, 1)\n+        }\n+\n+        assert test(\"b\", TyBool);\n+        assert test(\"c\", TyChar);\n+        assert test(\"d\", TyInt(Signed));\n+        assert test(\"f\", TyFloat);\n+        assert test(\"i\", TyInt(Signed));\n+        assert test(\"o\", TyOctal);\n+        assert test(\"s\", TyStr);\n+        assert test(\"t\", TyBits);\n+        assert test(\"x\", TyHex(CaseLower));\n+        assert test(\"X\", TyHex(CaseUpper));\n+        assert test(\"?\", TyPoly);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_parse_type_missing() {\n+        parse_type(\"\", 0, 0, die);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_parse_type_unknown() {\n+        parse_type(\"!\", 0, 1, die);\n+    }\n+\n+    #[test]\n+    fn test_peek_num() {\n+        let s1 = \"\";\n+        assert peek_num(s1, 0, s1.len()).is_none();\n+\n+        let s2 = \"foo\";\n+        assert peek_num(s2, 0, s2.len()).is_none();\n+\n+        let s3 = \"123\";\n+        assert peek_num(s3, 0, s3.len()) == Some(Parsed::new(123, 3));\n+\n+        let s4 = \"123foo\";\n+        assert peek_num(s4, 0, s4.len()) == Some(Parsed::new(123, 3));\n+    }\n }\n \n // Functions used by the fmt extension at runtime. For now there are a lot of"}]}