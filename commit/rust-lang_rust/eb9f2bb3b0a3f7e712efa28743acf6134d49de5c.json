{"sha": "eb9f2bb3b0a3f7e712efa28743acf6134d49de5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViOWYyYmIzYjBhM2Y3ZTcxMmVmYTI4NzQzYWNmNjEzNGQ0OWRlNWM=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-12T04:01:10Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-12T04:36:41Z"}, "message": "Overcome Sync issues with non-parallel compiler\n\nPer Mark's recommendation at:\nhttps://github.com/rust-lang/rust/pull/78963#issuecomment-725790071", "tree": {"sha": "43ef7d2aa49caaedd6cb0ada913ed8d5e7e169ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43ef7d2aa49caaedd6cb0ada913ed8d5e7e169ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb9f2bb3b0a3f7e712efa28743acf6134d49de5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb9f2bb3b0a3f7e712efa28743acf6134d49de5c", "html_url": "https://github.com/rust-lang/rust/commit/eb9f2bb3b0a3f7e712efa28743acf6134d49de5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb9f2bb3b0a3f7e712efa28743acf6134d49de5c/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0eb07af2deaff2c9f1e7553ea97341787779cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0eb07af2deaff2c9f1e7553ea97341787779cd", "html_url": "https://github.com/rust-lang/rust/commit/bd0eb07af2deaff2c9f1e7553ea97341787779cd"}], "stats": {"total": 31, "additions": 22, "deletions": 9}, "files": [{"sha": "d4f299b3f37b9c1d91ecd70329b53f23a8326e6a", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eb9f2bb3b0a3f7e712efa28743acf6134d49de5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9f2bb3b0a3f7e712efa28743acf6134d49de5c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=eb9f2bb3b0a3f7e712efa28743acf6134d49de5c", "patch": "@@ -611,6 +611,18 @@ pub struct TyS<'tcx> {\n     outer_exclusive_binder: ty::DebruijnIndex,\n }\n \n+impl<'tcx> TyS<'tcx> {\n+    /// A constructor used only for internal testing.\n+    #[allow(rustc::usage_of_ty_tykind)]\n+    pub fn make_for_test(\n+        kind: TyKind<'tcx>,\n+        flags: TypeFlags,\n+        outer_exclusive_binder: ty::DebruijnIndex,\n+    ) -> TyS<'tcx> {\n+        TyS { kind, flags, outer_exclusive_binder }\n+    }\n+}\n+\n // `TyS` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(TyS<'_>, 32);"}, {"sha": "3e305a58c6bb2ee454dec1ac80ed2081e8e60c96", "filename": "compiler/rustc_mir/src/transform/coverage/tests.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb9f2bb3b0a3f7e712efa28743acf6134d49de5c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb9f2bb3b0a3f7e712efa28743acf6134d49de5c/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs?ref=eb9f2bb3b0a3f7e712efa28743acf6134d49de5c", "patch": "@@ -7,18 +7,19 @@ use rustc_data_structures::graph::WithNumNodes;\n use rustc_data_structures::graph::WithSuccessors;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::{self, TyS};\n+use rustc_middle::ty::{self, DebruijnIndex, TyS, TypeFlags};\n use rustc_span::DUMMY_SP;\n \n-use std::lazy::SyncOnceCell;\n-\n-fn dummy_ty<'tcx>() -> &'static TyS<'tcx> {\n-    static DUMMY_TYS: SyncOnceCell<TyS<'_>> = SyncOnceCell::new();\n+fn dummy_ty() -> &'static TyS<'static> {\n+    thread_local! {\n+        static DUMMY_TYS: &'static TyS<'static> = Box::leak(box TyS::make_for_test(\n+            ty::Bool,\n+            TypeFlags::empty(),\n+            DebruijnIndex::from_usize(0),\n+        ));\n+    }\n \n-    &DUMMY_TYS.get_or_init(|| {\n-        let fake_type_bytes = vec![0 as u8; std::mem::size_of::<TyS<'_>>()];\n-        unsafe { std::ptr::read_unaligned::<TyS<'_>>(fake_type_bytes.as_ptr() as *const TyS<'_>) }\n-    })\n+    &DUMMY_TYS.with(|tys| *tys)\n }\n \n struct MockBlocks<'tcx> {"}]}