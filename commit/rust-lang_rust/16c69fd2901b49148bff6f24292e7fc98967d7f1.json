{"sha": "16c69fd2901b49148bff6f24292e7fc98967d7f1", "node_id": "C_kwDOAAsO6NoAKDE2YzY5ZmQyOTAxYjQ5MTQ4YmZmNmYyNDI5MmU3ZmM5ODk2N2Q3ZjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-20T18:04:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-20T18:04:55Z"}, "message": "Auto merge of #2033 - RalfJung:arbitrary-self-dyn, r=RalfJung\n\ntest arbitrary-self dyn receivers\n\nRequires https://github.com/rust-lang/rust/pull/95071", "tree": {"sha": "cdca62d1b077a600ca8d68a562bcabdf48255290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdca62d1b077a600ca8d68a562bcabdf48255290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16c69fd2901b49148bff6f24292e7fc98967d7f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16c69fd2901b49148bff6f24292e7fc98967d7f1", "html_url": "https://github.com/rust-lang/rust/commit/16c69fd2901b49148bff6f24292e7fc98967d7f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16c69fd2901b49148bff6f24292e7fc98967d7f1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64e6fd1b6a8d859591e1c46209ea851485a2e3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64e6fd1b6a8d859591e1c46209ea851485a2e3f", "html_url": "https://github.com/rust-lang/rust/commit/a64e6fd1b6a8d859591e1c46209ea851485a2e3f"}, {"sha": "b066856f34240fdb8789c1ddd0c732a50a27b0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b066856f34240fdb8789c1ddd0c732a50a27b0f8", "html_url": "https://github.com/rust-lang/rust/commit/b066856f34240fdb8789c1ddd0c732a50a27b0f8"}], "stats": {"total": 136, "additions": 135, "deletions": 1}, "files": [{"sha": "561d020f1200f485868def3d0c507c6abc7a60a1", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16c69fd2901b49148bff6f24292e7fc98967d7f1/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/16c69fd2901b49148bff6f24292e7fc98967d7f1/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=16c69fd2901b49148bff6f24292e7fc98967d7f1", "patch": "@@ -1 +1 @@\n-c7ce69faf2a7ea16c15d922985ca27ba70da30ee\n+9bd53718e2537d95d8c092609618c2dcd6f05127"}, {"sha": "9003c478990b2070fcd03da5dfbce02fa1a0d1cf", "filename": "tests/run-pass/dyn-arbitrary-self.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/16c69fd2901b49148bff6f24292e7fc98967d7f1/tests%2Frun-pass%2Fdyn-arbitrary-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16c69fd2901b49148bff6f24292e7fc98967d7f1/tests%2Frun-pass%2Fdyn-arbitrary-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdyn-arbitrary-self.rs?ref=16c69fd2901b49148bff6f24292e7fc98967d7f1", "patch": "@@ -0,0 +1,134 @@\n+#![feature(arbitrary_self_types, unsize, coerce_unsized, dispatch_from_dyn)]\n+#![feature(rustc_attrs)]\n+\n+fn pin_box_dyn() {\n+    use std::pin::Pin;\n+\n+    trait Foo {\n+        fn bar(self: Pin<&mut Self>) -> bool;\n+    }\n+\n+    impl Foo for &'static str {\n+        fn bar(self: Pin<&mut Self>) -> bool {\n+            true\n+        }\n+    }\n+\n+    let mut test: Pin<Box<dyn Foo>> = Box::pin(\"foo\");\n+    test.as_mut().bar();\n+}\n+\n+fn stdlib_pointers() {\n+    use std::{\n+        rc::Rc,\n+        sync::Arc,\n+        pin::Pin,\n+    };\n+    \n+    trait Trait {\n+        fn by_rc(self: Rc<Self>) -> i64;\n+        fn by_arc(self: Arc<Self>) -> i64;\n+        fn by_pin_mut(self: Pin<&mut Self>) -> i64;\n+        fn by_pin_box(self: Pin<Box<Self>>) -> i64;\n+    }\n+    \n+    impl Trait for i64 {\n+        fn by_rc(self: Rc<Self>) -> i64 {\n+            *self\n+        }\n+        fn by_arc(self: Arc<Self>) -> i64 {\n+            *self\n+        }\n+        fn by_pin_mut(self: Pin<&mut Self>) -> i64 {\n+            *self\n+        }\n+        fn by_pin_box(self: Pin<Box<Self>>) -> i64 {\n+            *self\n+        }\n+    }\n+    \n+    let rc = Rc::new(1i64) as Rc<dyn Trait>;\n+    assert_eq!(1, rc.by_rc());\n+\n+    let arc = Arc::new(2i64) as Arc<dyn Trait>;\n+    assert_eq!(2, arc.by_arc());\n+\n+    let mut value = 3i64;\n+    let pin_mut = Pin::new(&mut value) as Pin<&mut dyn Trait>;\n+    assert_eq!(3, pin_mut.by_pin_mut());\n+\n+    let pin_box = Into::<Pin<Box<i64>>>::into(Box::new(4i64)) as Pin<Box<dyn Trait>>;\n+    assert_eq!(4, pin_box.by_pin_box());\n+}\n+\n+fn pointers_and_wrappers() {\n+    use std::{\n+        ops::{Deref, CoerceUnsized, DispatchFromDyn},\n+        marker::Unsize,\n+    };\n+    \n+    struct Ptr<T: ?Sized>(Box<T>);\n+    \n+    impl<T: ?Sized> Deref for Ptr<T> {\n+        type Target = T;\n+    \n+        fn deref(&self) -> &T {\n+            &*self.0\n+        }\n+    }\n+    \n+    impl<T: Unsize<U> + ?Sized, U: ?Sized> CoerceUnsized<Ptr<U>> for Ptr<T> {}\n+    impl<T: Unsize<U> + ?Sized, U: ?Sized> DispatchFromDyn<Ptr<U>> for Ptr<T> {}\n+    \n+    struct Wrapper<T: ?Sized>(T);\n+    \n+    impl<T: ?Sized> Deref for Wrapper<T> {\n+        type Target = T;\n+    \n+        fn deref(&self) -> &T {\n+            &self.0\n+        }\n+    }\n+    \n+    impl<T: CoerceUnsized<U>, U> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n+    impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Wrapper<U>> for Wrapper<T> {}\n+    \n+    \n+    trait Trait {\n+        // This method isn't object-safe yet. Unsized by-value `self` is object-safe (but not callable\n+        // without unsized_locals), but wrappers arond `Self` currently are not.\n+        // FIXME (mikeyhew) uncomment this when unsized rvalues object-safety is implemented\n+        // fn wrapper(self: Wrapper<Self>) -> i32;\n+        fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32;\n+        fn wrapper_ptr(self: Wrapper<Ptr<Self>>) -> i32;\n+        fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32;\n+    }\n+    \n+    impl Trait for i32 {\n+        fn ptr_wrapper(self: Ptr<Wrapper<Self>>) -> i32 {\n+            **self\n+        }\n+        fn wrapper_ptr(self: Wrapper<Ptr<Self>>) -> i32 {\n+            **self\n+        }\n+        fn wrapper_ptr_wrapper(self: Wrapper<Ptr<Wrapper<Self>>>) -> i32 {\n+            ***self\n+        }\n+    }\n+    \n+    let pw = Ptr(Box::new(Wrapper(5))) as Ptr<Wrapper<dyn Trait>>;\n+    assert_eq!(pw.ptr_wrapper(), 5);\n+\n+    let wp = Wrapper(Ptr(Box::new(6))) as Wrapper<Ptr<dyn Trait>>;\n+    assert_eq!(wp.wrapper_ptr(), 6);\n+\n+    let wpw = Wrapper(Ptr(Box::new(Wrapper(7)))) as Wrapper<Ptr<Wrapper<dyn Trait>>>;\n+    assert_eq!(wpw.wrapper_ptr_wrapper(), 7);\n+}\n+\n+\n+fn main() {\n+    pin_box_dyn();\n+    stdlib_pointers();\n+    pointers_and_wrappers();\n+}"}]}