{"sha": "4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOTJhMDJiNjRlNWNiOGNmYjliODg1NjM4ZTFkZmEyMDY3Y2FjZDk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-20T04:28:09Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-02-01T23:06:21Z"}, "message": "Change rustc_on_unimplemented for Iterator and binops", "tree": {"sha": "ba0a00cabf621e0a64f8cf4e6f05a7a88dca8618", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba0a00cabf621e0a64f8cf4e6f05a7a88dca8618"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "html_url": "https://github.com/rust-lang/rust/commit/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4", "html_url": "https://github.com/rust-lang/rust/commit/c1383e4dc4bd6598f5d73d2d6b1054f61b2b99d4"}], "stats": {"total": 571, "additions": 418, "deletions": 153}, "files": [{"sha": "47617b22dd34d4a7e552c23ab3b2697c39f6f277", "filename": "src/libcore/ops/arith.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Flibcore%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Flibcore%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Farith.rs?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -109,7 +109,6 @@\n             all(_Self=\"f32\",  RHS=\"u16\"),\n             all(_Self=\"f32\",  RHS=\"u8\"),\n         ),\n-        message=\"cannot add `{RHS}` to `{Self}`\",\n         label=\"no implementation for `{Self} + {RHS}`, but you can safely cast \\\n                `{RHS}` into `{Self}` using `as {Self}`\",\n     ),\n@@ -146,22 +145,20 @@\n             all(RHS=\"f32\",  _Self=\"u16\"),\n             all(RHS=\"f32\",  _Self=\"u8\"),\n         ),\n-        message=\"cannot add `{RHS}` to `{Self}`\",\n-        label=\"no implementation for `{Self} + {RHS}`, but you can safely turn \\\n+        label=\"no implementation for `{Self} + {RHS}`, but you can safely cast \\\n                `{Self}` into `{RHS}` using `as {RHS}`\",\n     ),\n     on(\n         all(_Self=\"{integer}\", RHS=\"{float}\"),\n         message=\"cannot add a float to an integer\",\n-        label=\"no implementation for `{Self} + {RHS}`\",\n     ),\n     on(\n         all(_Self=\"{float}\", RHS=\"{integer}\"),\n         message=\"cannot add an integer to a float\",\n-        label=\"no implementation for `{Self} + {RHS}`\",\n     ),\n     message=\"cannot add `{RHS}` to `{Self}`\",\n-    label=\"no implementation for `{Self} + {RHS}`\")]\n+    label=\"no implementation for `{Self} + {RHS}`\",\n+)]\n pub trait Add<RHS=Self> {\n     /// The resulting type after applying the `+` operator.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4bd3b684b7ba3cf62983be6aaf5399383bfde4ea", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -6,7 +6,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n    |\n-   = note: required by `f1`\n+note: required by `f1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:26:1\n+   |\n+26 | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:13:5\n@@ -16,7 +20,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n    |\n-   = note: required by `f2`\n+note: required by `f2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:27:1\n+   |\n+27 | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -26,7 +34,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n    |\n-   = note: required by `f3`\n+note: required by `f3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:28:1\n+   |\n+28 | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:15:5\n@@ -36,7 +48,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n    |\n-   = note: required by `f4`\n+note: required by `f4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n+   |\n+29 | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -46,7 +62,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n    |\n-   = note: required by `f5`\n+note: required by `f5`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n+   |\n+30 | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:5\n@@ -56,7 +76,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n    |\n-   = note: required by `g1`\n+note: required by `g1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:33:1\n+   |\n+33 | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -66,7 +90,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n    |\n-   = note: required by `g2`\n+note: required by `g2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n+   |\n+34 | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:5\n@@ -76,7 +104,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n    |\n-   = note: required by `g3`\n+note: required by `g3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n+   |\n+35 | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -86,7 +118,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n    |\n-   = note: required by `g4`\n+note: required by `g4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n+   |\n+36 | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:21:5\n@@ -96,7 +132,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n    |\n-   = note: required by `h1`\n+note: required by `h1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:39:1\n+   |\n+39 | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -106,7 +146,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n    |\n-   = note: required by `h2`\n+note: required by `h2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n+   |\n+40 | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "7ca3e8728fd9c237cb1d84d2869adf25d70a16c7", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -10,7 +10,11 @@ error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<bool>>\n-   = note: required by `Foo::bar`\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n+   |\n+12 |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:35:5\n@@ -23,7 +27,11 @@ error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n              <u8 as Foo<bool>>\n-   = note: required by `Foo::bar`\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n+   |\n+12 |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:36:5\n@@ -37,7 +45,11 @@ error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n              <bool as Foo<u32>>\n              <bool as Foo<u64>>\n            and 2 others\n-   = note: required by `Foo::bar`\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n+   |\n+12 |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2bc7e9e46e7c53a7556914f1ec565906e3d5e4b8", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -15,7 +15,11 @@ error[E0275]: overflow evaluating the requirement `K: std::marker::Send`\n    = note: required because it appears within the type `C`\n    = note: required because it appears within the type `B`\n    = note: required because it appears within the type `A`\n-   = note: required by `is_send`\n+note: required by `is_send`\n+  --> $DIR/recursion_limit.rs:41:1\n+   |\n+41 | fn is_send<T:Send>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b3f7cd218d3e9280294667a1af2695068fcaa63e", "filename": "src/test/ui/feature-gate-abi_unadjusted.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-abi_unadjusted.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,4 +1,4 @@\n-error: unadjusted ABI is an implementation detail and perma-unstable\n+error[E0658]: unadjusted ABI is an implementation detail and perma-unstable\n   --> $DIR/feature-gate-abi_unadjusted.rs:11:1\n    |\n 11 | / extern \"unadjusted\" fn foo() {"}, {"sha": "4b3bfbbe27ac87bcc7a8427061121a5c08b57c10", "filename": "src/test/ui/feature-gate-catch_expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-catch_expr.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,4 +1,4 @@\n-error: `catch` expression is experimental (see issue #31436)\n+error[E0658]: `catch` expression is experimental (see issue #31436)\n   --> $DIR/feature-gate-catch_expr.rs:12:24\n    |\n 12 |       let catch_result = do catch { //~ ERROR `catch` expression is experimental"}, {"sha": "ee81a26921498695e55adaf34d69f92ae5523afe", "filename": "src/test/ui/feature-gate-i128_type2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,28 +1,28 @@\n-error: 128-bit type is unstable (see issue #35118)\n+error[E0658]: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:13:15\n    |\n 13 | fn test1() -> i128 { //~ ERROR 128-bit type is unstable\n    |               ^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error: 128-bit type is unstable (see issue #35118)\n+error[E0658]: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:17:17\n    |\n 17 | fn test1_2() -> u128 { //~ ERROR 128-bit type is unstable\n    |                 ^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error: 128-bit type is unstable (see issue #35118)\n+error[E0658]: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:22:12\n    |\n 22 |     let x: i128 = 0; //~ ERROR 128-bit type is unstable\n    |            ^^^^\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error: 128-bit type is unstable (see issue #35118)\n+error[E0658]: 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:26:12\n    |\n 26 |     let x: u128 = 0; //~ ERROR 128-bit type is unstable\n@@ -32,7 +32,7 @@ error: 128-bit type is unstable (see issue #35118)\n \n error[E0601]: main function not found\n \n-error: repr with 128-bit type is unstable (see issue #35118)\n+error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:30:1\n    |\n 30 | / enum A { //~ ERROR 128-bit type is unstable"}, {"sha": "918c749504aea6faf2540aff33bcb6bbb4e8b63d", "filename": "src/test/ui/feature-gate-intrinsics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-intrinsics.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,4 +1,4 @@\n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-intrinsics.rs:11:1\n    |\n 11 | / extern \"rust-intrinsic\" {   //~ ERROR intrinsics are subject to change\n@@ -8,7 +8,7 @@ error: intrinsics are subject to change\n    |\n    = help: add #![feature(intrinsics)] to the crate attributes to enable\n \n-error: intrinsics are subject to change\n+error[E0658]: intrinsics are subject to change\n   --> $DIR/feature-gate-intrinsics.rs:15:1\n    |\n 15 | / extern \"rust-intrinsic\" fn baz() {  //~ ERROR intrinsics are subject to change"}, {"sha": "deb707752b0664ae49213fbfbcc4c89e2565c937", "filename": "src/test/ui/feature-gate-non_ascii_idents.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-non_ascii_idents.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,28 +1,28 @@\n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:11:1\n    |\n 11 | extern crate core as b\u00e4z; //~ ERROR non-ascii idents\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:13:5\n    |\n 13 | use f\u00f6\u00f6::bar; //~ ERROR non-ascii idents\n    |     ^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:15:1\n    |\n 15 | mod f\u00f6\u00f6 { //~ ERROR non-ascii idents\n    | ^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:19:1\n    |\n 19 | / fn b\u00e4r( //~ ERROR non-ascii idents\n@@ -36,71 +36,71 @@ error: non-ascii idents are not fully supported. (see issue #28979)\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:20:5\n    |\n 20 |     b\u00e4z: isize //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:22:9\n    |\n 22 |     let _\u00f6: isize; //~ ERROR non-ascii idents\n    |         ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:25:10\n    |\n 25 |         (_\u00e4, _) => {} //~ ERROR non-ascii idents\n    |          ^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:29:1\n    |\n 29 | struct F\u00f6\u00f6 { //~ ERROR non-ascii idents\n    | ^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:30:5\n    |\n 30 |     f\u00f6\u00f6: isize //~ ERROR non-ascii idents\n    |     ^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:33:1\n    |\n 33 | enum B\u00e4r { //~ ERROR non-ascii idents\n    | ^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:34:5\n    |\n 34 |     B\u00e4z { //~ ERROR non-ascii idents\n    |     ^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:35:9\n    |\n 35 |         q\u00fcx: isize //~ ERROR non-ascii idents\n    |         ^^^^^^^^^^\n    |\n    = help: add #![feature(non_ascii_idents)] to the crate attributes to enable\n \n-error: non-ascii idents are not fully supported. (see issue #28979)\n+error[E0658]: non-ascii idents are not fully supported. (see issue #28979)\n   --> $DIR/feature-gate-non_ascii_idents.rs:40:5\n    |\n 40 |     fn q\u00fcx();  //~ ERROR non-ascii idents"}, {"sha": "982ebb01016626986f8ef2d3ea58a1b6c66f840c", "filename": "src/test/ui/feature-gate-repr128.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-repr128.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,4 +1,4 @@\n-error: repr with 128-bit type is unstable (see issue #35118)\n+error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-repr128.rs:12:1\n    |\n 12 | / enum A { //~ ERROR repr with 128-bit type is unstable"}, {"sha": "ca8a59249463d2838de88642af888722c3b19fed", "filename": "src/test/ui/feature-gate-unboxed-closures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-unboxed-closures.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,4 +1,4 @@\n-error: rust-call ABI is subject to change (see issue #29625)\n+error[E0658]: rust-call ABI is subject to change (see issue #29625)\n   --> $DIR/feature-gate-unboxed-closures.rs:16:5\n    |\n 16 | /     extern \"rust-call\" fn call_once(self, (a, b): (u32, u32)) -> u32 {"}, {"sha": "14b66cb5c815ab225a0913cfad74598b27c64585", "filename": "src/test/ui/feature-gate-untagged_unions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-untagged_unions.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,4 +1,4 @@\n-error: unions with non-`Copy` fields are unstable (see issue #32836)\n+error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n   --> $DIR/feature-gate-untagged_unions.rs:19:1\n    |\n 19 | / union U3 { //~ ERROR unions with non-`Copy` fields are unstable\n@@ -8,7 +8,7 @@ error: unions with non-`Copy` fields are unstable (see issue #32836)\n    |\n    = help: add #![feature(untagged_unions)] to the crate attributes to enable\n \n-error: unions with non-`Copy` fields are unstable (see issue #32836)\n+error[E0658]: unions with non-`Copy` fields are unstable (see issue #32836)\n   --> $DIR/feature-gate-untagged_unions.rs:23:1\n    |\n 23 | / union U4<T> { //~ ERROR unions with non-`Copy` fields are unstable\n@@ -18,7 +18,7 @@ error: unions with non-`Copy` fields are unstable (see issue #32836)\n    |\n    = help: add #![feature(untagged_unions)] to the crate attributes to enable\n \n-error: unions with `Drop` implementations are unstable (see issue #32836)\n+error[E0658]: unions with `Drop` implementations are unstable (see issue #32836)\n   --> $DIR/feature-gate-untagged_unions.rs:27:1\n    |\n 27 | / union U5 { //~ ERROR unions with `Drop` implementations are unstable"}, {"sha": "4ec5c9ebd2712e3eee5af0c252531e4e1cf05877", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -12,7 +12,11 @@ error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-   = note: required by `send`\n+note: required by `send`\n+  --> $DIR/send-sync.rs:11:1\n+   |\n+11 | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync` is not satisfied in `std::fmt::Arguments<'_>`\n   --> $DIR/send-sync.rs:19:5\n@@ -28,7 +32,11 @@ error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-   = note: required by `sync`\n+note: required by `sync`\n+  --> $DIR/send-sync.rs:12:1\n+   |\n+12 | fn sync<T: Sync>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "e65c8f1546e82d46a2aac8b0ef829fd7201262a3", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -7,7 +7,11 @@ error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not s\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::cell::Cell<i32>`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:26:17: 30:6 a:&std::cell::Cell<i32> _]`\n-   = note: required by `main::assert_send`\n+note: required by `main::assert_send`\n+  --> $DIR/not-send-sync.rs:17:5\n+   |\n+17 |     fn assert_send<T: Send>(_: T) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not satisfied in `[generator@$DIR/not-send-sync.rs:19:17: 23:6 {std::cell::Cell<i32>, ()}]`\n   --> $DIR/not-send-sync.rs:19:5"}, {"sha": "838a3002e3aa7b9872d4c3efdb28e76d9b8f85b8", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -7,7 +7,11 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:21:5: 21:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-   = note: required by `send`\n+note: required by `send`\n+  --> $DIR/auto-trait-leak.rs:24:1\n+   |\n+24 | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n   --> $DIR/auto-trait-leak.rs:30:5\n@@ -18,7 +22,11 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:38:5: 38:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-   = note: required by `send`\n+note: required by `send`\n+  --> $DIR/auto-trait-leak.rs:24:1\n+   |\n+24 | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0391]: unsupported cyclic reference between types/traits detected\n   --> $DIR/auto-trait-leak.rs:44:1"}, {"sha": "55af26dd91ea3d0dffc5b81501d02823d9c4828a", "filename": "src/test/ui/issue-24424.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24424.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -4,7 +4,11 @@ error[E0283]: type annotations required: cannot resolve `T0: Trait0<'l0>`\n 14 | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required by `Trait0`\n+note: required by `Trait0`\n+  --> $DIR/issue-24424.rs:12:1\n+   |\n+12 | trait Trait0<'l0>  {}\n+   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8b30f552d377140a0d49f171ab67e46685819a8b", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,7 +1,7 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:36:21\n+  --> $DIR/suggestions.rs:46:21\n    |\n-36 |         let mut a = (1); // should suggest no `mut`, no parens\n+46 |         let mut a = (1); // should suggest no `mut`, no parens\n    |                     ^^^ help: remove these parentheses\n    |\n note: lint level defined here\n@@ -11,17 +11,17 @@ note: lint level defined here\n    |                     ^^^^^^^^^^^^^\n \n warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/suggestions.rs:31:1\n+  --> $DIR/suggestions.rs:41:1\n    |\n-31 | #[no_debug] // should suggest removal of deprecated attribute\n+41 | #[no_debug] // should suggest removal of deprecated attribute\n    | ^^^^^^^^^^^ help: remove this attribute\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:36:13\n+  --> $DIR/suggestions.rs:46:13\n    |\n-36 |         let mut a = (1); // should suggest no `mut`, no parens\n+46 |         let mut a = (1); // should suggest no `mut`, no parens\n    |             ---^^\n    |             |\n    |             help: remove this `mut`\n@@ -72,18 +72,30 @@ warning: function is marked #[no_mangle], but not exported\n    |\n    = note: #[warn(private_no_mangle_fns)] on by default\n \n+warning: static is marked #[no_mangle], but not exported\n+  --> $DIR/suggestions.rs:31:18\n+   |\n+31 |     #[no_mangle] pub static DAUNTLESS: bool = true;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: function is marked #[no_mangle], but not exported\n+  --> $DIR/suggestions.rs:33:18\n+   |\n+33 |     #[no_mangle] pub fn val_jean() {}\n+   |                  ^^^^^^^^^^^^^^^^^^^^\n+\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:34:5\n+  --> $DIR/suggestions.rs:44:5\n    |\n-34 |     while true { // should suggest `loop`\n+44 |     while true { // should suggest `loop`\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: #[warn(while_true)] on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:41:23\n+  --> $DIR/suggestions.rs:51:23\n    |\n-41 |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n+51 |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n    |                       ------------^^^^^^^^^^^^\n    |                       |\n    |                       help: remove this"}, {"sha": "f9852c5477332f89eb683e93dddf0debcaeea74a", "filename": "src/test/ui/macros/format-foreign.stderr", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-foreign.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,12 +1,8 @@\n error: multiple unused formatting arguments\n-  --> $DIR/format-foreign.rs:12:5\n+  --> $DIR/format-foreign.rs:12:30\n    |\n-12 |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^--------^^-------^^-^^\n-   |                              |         |        |\n-   |                              |         |        unused\n-   |                              |         unused\n-   |                              unused\n+12 |     println!(\"%.*3$s %s!/n\", \"Hello,\", \"World\", 4); //~ ERROR multiple unused formatting arguments\n+   |     -------------------------^^^^^^^^--^^^^^^^--^-- multiple unused arguments in this statement\n    |\n    = help: `%.*3$s` should be written as `{:.2$}`\n    = help: `%s` should be written as `{}`"}, {"sha": "64ea5626c1d62776bbd2146becb7af161228410e", "filename": "src/test/ui/macros/format-unused-lables.stderr", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-unused-lables.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,49 +1,43 @@\n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:12:5\n+  --> $DIR/format-unused-lables.rs:12:22\n    |\n 12 |     println!(\"Test\", 123, 456, 789);\n-   |     ^^^^^^^^^^^^^^^^^---^^---^^---^^\n-   |                      |    |    |\n-   |                      |    |    unused\n-   |                      |    unused\n-   |                      unused\n+   |     -----------------^^^--^^^--^^^-- multiple unused arguments in this statement\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:14:5\n+  --> $DIR/format-unused-lables.rs:16:9\n    |\n-14 | /     println!(\"Test2\",\n-15 | |         123,\n-   | |         --- unused\n-16 | |         456,\n-   | |         --- unused\n-17 | |         789\n-   | |         --- unused\n-18 | |     );\n-   | |______^\n+15 | /     println!(\"Test2\",\n+16 | |         123,  //~ ERROR multiple unused formatting arguments\n+   | |         ^^^\n+17 | |         456,\n+   | |         ^^^\n+18 | |         789\n+   | |         ^^^\n+19 | |     );\n+   | |______- multiple unused arguments in this statement\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: named argument never used\n-  --> $DIR/format-unused-lables.rs:20:35\n+  --> $DIR/format-unused-lables.rs:21:35\n    |\n-20 |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n+21 |     println!(\"Some stuff\", UNUSED=\"args\"); //~ ERROR named argument never used\n    |                                   ^^^^^^\n \n error: multiple unused formatting arguments\n-  --> $DIR/format-unused-lables.rs:22:5\n+  --> $DIR/format-unused-lables.rs:24:9\n    |\n-22 | /     println!(\"Some more $STUFF\",\n-23 | |         \"woo!\",\n-   | |         ------ unused\n-24 | |             STUFF=\n-25 | |        \"things\"\n-   | |        -------- unused\n-26 | |              , UNUSED=\"args\");\n-   | |_______________________------_^\n-   |                         |\n-   |                         unused\n+23 | /     println!(\"Some more $STUFF\",\n+24 | |         \"woo!\",  //~ ERROR multiple unused formatting arguments\n+   | |         ^^^^^^\n+25 | |             STUFF=\n+26 | |        \"things\"\n+   | |        ^^^^^^^^\n+27 | |              , UNUSED=\"args\");\n+   | |_______________________^^^^^^_- multiple unused arguments in this statement\n    |\n    = help: `$STUFF` should be written as `{STUFF}`\n    = note: shell formatting not supported; see the documentation for `std::fmt`"}, {"sha": "53f2f54325d57c834e71c426b799b35cb21ef44a", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -6,7 +6,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `foo`\n+note: required by `foo`\n+  --> $DIR/E0631.rs:13:1\n+   |\n+13 | fn foo<F: Fn(usize)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:18:5\n@@ -16,7 +20,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `bar`\n+note: required by `bar`\n+  --> $DIR/E0631.rs:14:1\n+   |\n+14 | fn bar<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:19:5\n@@ -27,7 +35,11 @@ error[E0631]: type mismatch in function arguments\n 19 |     foo(f); //~ ERROR type mismatch\n    |     ^^^ expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `foo`\n+note: required by `foo`\n+  --> $DIR/E0631.rs:13:1\n+   |\n+13 | fn foo<F: Fn(usize)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:20:5\n@@ -38,7 +50,11 @@ error[E0631]: type mismatch in function arguments\n 20 |     bar(f); //~ ERROR type mismatch\n    |     ^^^ expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `bar`\n+note: required by `bar`\n+  --> $DIR/E0631.rs:14:1\n+   |\n+14 | fn bar<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "4e1523c79d2d401bef75ae12fd9c6821e72074a3", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -14,7 +14,7 @@ error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n    |               |\n    |               expected closure that takes 2 arguments\n \n-error[E0593]: closure is expected to take 2 distinct arguments, but it takes a single 2-tuple as argument\n+error[E0593]: closure is expected to take 2 arguments, but it takes 1 argument\n   --> $DIR/closure-arg-count.rs:19:15\n    |\n 19 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n@@ -39,62 +39,58 @@ help: change the closure to take multiple arguments instead of a single tuple\n    |                       ^^^^^^^^^^^^^^^\n \n error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n-  --> $DIR/closure-arg-count.rs:23:5\n+  --> $DIR/closure-arg-count.rs:21:5\n    |\n-23 |     f(|| panic!());\n+21 |     f(|| panic!());\n    |     ^ -- takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n    |\n-   = note: required by `f`\n+note: required by `f`\n+  --> $DIR/closure-arg-count.rs:13:1\n+   |\n+13 | fn f<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count.rs:26:53\n+error[E0593]: closure is expected to take a single tuple as argument, but it takes 2 distinct arguments\n+  --> $DIR/closure-arg-count.rs:24:53\n    |\n-26 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n-   |                                                     ^^^ ------ takes 2 distinct arguments\n+24 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x| i);\n+   |                                                     ^^^ ------ help: consider changing the closure to accept a tuple: `|(i, x)|`\n    |                                                     |\n-   |                                                     expected closure that takes a single 2-tuple as argument\n-help: change the closure to accept a tuple instead of individual arguments\n-   |\n-26 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n-   |                                                         ^^^^^^^^\n+   |                                                     expected closure that takes a single tuple as argument\n \n-error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count.rs:28:53\n+error[E0593]: closure is expected to take a single tuple as argument, but it takes 2 distinct arguments\n+  --> $DIR/closure-arg-count.rs:26:53\n    |\n-28 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i: usize, x| i);\n-   |                                                     ^^^ ------------- takes 2 distinct arguments\n+26 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i: usize, x| i);\n+   |                                                     ^^^ ------------- help: consider changing the closure to accept a tuple: `|(i, x): (usize, _)|`\n    |                                                     |\n-   |                                                     expected closure that takes a single 2-tuple as argument\n-help: change the closure to accept a tuple instead of individual arguments\n-   |\n-28 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|(i, x)| i);\n-   |                                                         ^^^^^^^^\n+   |                                                     expected closure that takes a single tuple as argument\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n-  --> $DIR/closure-arg-count.rs:30:53\n+  --> $DIR/closure-arg-count.rs:28:53\n    |\n-30 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x, y| i);\n+28 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(|i, x, y| i);\n    |                                                     ^^^ --------- takes 3 distinct arguments\n    |                                                     |\n    |                                                     expected closure that takes a single 2-tuple as argument\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 0 arguments\n-  --> $DIR/closure-arg-count.rs:32:53\n+  --> $DIR/closure-arg-count.rs:30:53\n    |\n-32 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n+30 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(foo);\n    |                                                     ^^^ expected function that takes a single 2-tuple as argument\n ...\n-41 | fn foo() {}\n+37 | fn foo() {}\n    | -------- takes 0 arguments\n \n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 3 distinct arguments\n-  --> $DIR/closure-arg-count.rs:35:53\n+  --> $DIR/closure-arg-count.rs:33:53\n    |\n-34 |     let bar = |i, x, y| i;\n+32 |     let bar = |i, x, y| i;\n    |               --------- takes 3 distinct arguments\n-35 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n+33 |     let _it = vec![1, 2, 3].into_iter().enumerate().map(bar);\n    |                                                     ^^^ expected closure that takes a single 2-tuple as argument\n \n error[E0593]: function is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments"}, {"sha": "dfd02fe23b686e03ceba9ada8e790021c46a0ce1", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -31,15 +31,23 @@ error[E0631]: type mismatch in function arguments\n    |     expected signature of `for<'r> fn(*mut &'r u32) -> _`\n    |     found signature of `fn(*mut &'a u32) -> _`\n    |\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-arg-type-mismatch.rs:18:1\n+   |\n+18 | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n   --> $DIR/closure-arg-type-mismatch.rs:20:5\n    |\n 20 |     baz(f); //~ ERROR type mismatch\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-arg-type-mismatch.rs:18:1\n+   |\n+18 | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "01de7e0749500ba17385bad3a0f0d5b2084f35bf", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -5,7 +5,11 @@ error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.r\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-mismatch.rs:15:1\n+   |\n+15 | fn baz<T: Foo>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-mismatch.rs:18:5\n@@ -16,7 +20,11 @@ error[E0631]: type mismatch in closure arguments\n    |     expected signature of `for<'r> fn(&'r ()) -> _`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-mismatch.rs:15:1\n+   |\n+15 | fn baz<T: Foo>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "64c260c30ed49962815da7923df5bf3d5ed982f3", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -7,7 +7,11 @@ error[E0631]: type mismatch in function arguments\n 21 |     apply(&3, takes_mut);\n    |     ^^^^^ expected signature of `fn(&{integer}) -> _`\n    |\n-   = note: required by `apply`\n+note: required by `apply`\n+  --> $DIR/fn-variance-1.rs:15:1\n+   |\n+15 | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:25:5\n@@ -18,7 +22,11 @@ error[E0631]: type mismatch in function arguments\n 25 |     apply(&mut 3, takes_imm);\n    |     ^^^^^ expected signature of `fn(&mut {integer}) -> _`\n    |\n-   = note: required by `apply`\n+note: required by `apply`\n+  --> $DIR/fn-variance-1.rs:15:1\n+   |\n+15 | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9c9bbd19c7552250c112cd0422b9d2fd0610beee", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -1,12 +1,17 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:23:13\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:25:13\n    |\n-22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+23 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n-23 |     let z = call_it(3, f);\n+24 |     //~^ NOTE found signature of `fn(usize, isize) -> _`\n+25 |     let z = call_it(3, f);\n    |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`\n    |\n-   = note: required by `call_it`\n+note: required by `call_it`\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:17:1\n+   |\n+17 | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "b48b08daa1963900225e900e6e27a2dd7292fba2", "filename": "src/test/ui/on-unimplemented/multiple-impls-complex-filtering.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.rs?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -0,0 +1,61 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test if the on_unimplemented message override works\n+\n+#![feature(on_unimplemented)]\n+#![feature(rustc_attrs)]\n+\n+struct Foo<T>(T);\n+struct Bar<T>(T);\n+\n+#[rustc_on_unimplemented(\n+    on(_Self=\"[i32]\", label=\"trait label if i32\"),\n+    label=\"trait label\",\n+    message=\"trait message\",\n+)]\n+trait Index<Idx: ?Sized> {\n+    type Output: ?Sized;\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}\n+\n+#[rustc_on_unimplemented(\n+    label=\"impl foo {Self} {Idx} {Index}\",\n+)]\n+impl Index<Foo<usize>> for [i32] {\n+    type Output = i32;\n+    fn index(&self, _index: Foo<usize>) -> &i32 {\n+        loop {}\n+    }\n+}\n+\n+#[rustc_on_unimplemented = \"on impl for Bar\"]\n+impl Index<Bar<usize>> for [i32] {\n+    type Output = i32;\n+    fn index(&self, _index: Bar<usize>) -> &i32 {\n+        loop {}\n+    }\n+}\n+\n+#[rustc_error]\n+fn main() {\n+    Index::index(&[] as &[i32], 2usize);\n+    Index::index(&[] as &[i32], 2u32);\n+    Index::index(&[] as &[u32], 2u32);\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n+    Index::index(&[] as &[i32], Foo(2usize));\n+    Index::index(&[] as &[i32], Foo(2u32));\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n+    Index::index(&[] as &[i32], Bar(2u32));\n+    //~^ ERROR E0277\n+    //~| ERROR E0277\n+}"}, {"sha": "2ea9b67f260254401a9301ba393571b7fcf33f6e", "filename": "src/test/ui/on-unimplemented/multiple-impls-complex-filtering.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls-complex-filtering.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -0,0 +1,44 @@\n+error[E0277]: trait message `[i32]`\n+  --> $DIR/multiple-impls-complex-filtering.rs:46:5\n+   |\n+46 |     Index::index(&[] as &[i32], 2usize);\n+   |     ^^^^^^^^^^^^ u32 message\n+   |\n+   = help: the trait `Index<_>` is not implemented for `[i32]`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls-complex-filtering.rs:25:5\n+   |\n+25 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: trait message `[i32]`\n+  --> $DIR/multiple-impls-complex-filtering.rs:46:5\n+   |\n+46 |     Index::index(&[] as &[i32], 2usize);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u32 message\n+   |\n+   = help: the trait `Index<_>` is not implemented for `[i32]`\n+\n+error[E0277]: trait message `[i32]`\n+  --> $DIR/multiple-impls-complex-filtering.rs:47:5\n+   |\n+47 |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^ u32 message\n+   |\n+   = help: the trait `Index<_>` is not implemented for `[i32]`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls-complex-filtering.rs:25:5\n+   |\n+25 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: trait message `[i32]`\n+  --> $DIR/multiple-impls-complex-filtering.rs:47:5\n+   |\n+47 |     Index::index(&[] as &[i32], 2u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u32 message\n+   |\n+   = help: the trait `Index<_>` is not implemented for `[i32]`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "cfac3981be284fbd49069b6abaeaca7da77fc8af", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n    |     ^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:22:5\n+   |\n+22 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:43:5\n@@ -22,7 +26,11 @@ error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n    |     ^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:22:5\n+   |\n+22 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:46:5\n@@ -39,7 +47,11 @@ error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n    |     ^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:22:5\n+   |\n+22 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:49:5"}, {"sha": "ed2da68f081675d10c98648b680908effa89bbc6", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n    |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/on-impl.rs:19:5\n+   |\n+19 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:32:5"}, {"sha": "028200a5558c88a51a482698004472cb8dfa4cda", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIte\n    |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n    |\n    = help: the trait `MyFromIterator<&u8>` is not implemented for `std::option::Option<std::vec::Vec<u8>>`\n-   = note: required by `collect`\n+note: required by `collect`\n+  --> $DIR/on-trait.rs:31:1\n+   |\n+31 | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not satisfied\n   --> $DIR/on-trait.rs:40:21\n@@ -14,7 +18,11 @@ error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not\n    |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`\n    |\n    = help: the trait `Bar::Foo<u8, _, u32>` is not implemented for `std::string::String`\n-   = note: required by `foobar`\n+note: required by `foobar`\n+  --> $DIR/on-trait.rs:21:1\n+   |\n+21 | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9046b90f0e9c3333b7dd62766abf201e7c06c465", "filename": "src/test/ui/span/issue-29595.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -4,7 +4,11 @@ error[E0277]: the trait bound `u8: Tr` is not satisfied\n 17 |     let a: u8 = Tr::C; //~ ERROR the trait bound `u8: Tr` is not satisfied\n    |                 ^^^^^ the trait `Tr` is not implemented for `u8`\n    |\n-   = note: required by `Tr::C`\n+note: required by `Tr::C`\n+  --> $DIR/issue-29595.rs:13:5\n+   |\n+13 |     const C: Self;\n+   |     ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e97823a3d5d5b96496e5acd2e0695da4c56e7555", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -22,7 +22,11 @@ error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n 25 |     try_trait_generic::<()>(); //~ ERROR the trait bound\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n    |\n-   = note: required by `try_trait_generic`\n+note: required by `try_trait_generic`\n+  --> $DIR/try-operator-on-main.rs:30:1\n+   |\n+30 | fn try_trait_generic<T: Try>() -> T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/try-operator-on-main.rs:32:5"}, {"sha": "cf270afdeb173f5ce9cf0b4c30a428232c70213d", "filename": "src/test/ui/type-check/issue-40294.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr?ref=4c92a02b64e5cb8cfb9b885638e1dfa2067cacd9", "patch": "@@ -10,7 +10,11 @@ error[E0283]: type annotations required: cannot resolve `&'a T: Foo`\n 21 | | }\n    | |_^\n    |\n-   = note: required by `Foo`\n+note: required by `Foo`\n+  --> $DIR/issue-40294.rs:11:1\n+   |\n+11 | trait Foo: Sized {\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}