{"sha": "67508f3714296ffb0cf9820e1c1ba46b082227a3", "node_id": "C_kwDOAAsO6NoAKDY3NTA4ZjM3MTQyOTZmZmIwY2Y5ODIwZTFjMWJhNDZiMDgyMjI3YTM", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-06-21T11:42:34Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-06-21T12:06:32Z"}, "message": "Remove `#[doc(hidden)]` logic from `unused_attributes` lint", "tree": {"sha": "fae15cfc2eb2cea4056166f6be890afc54fa14a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae15cfc2eb2cea4056166f6be890afc54fa14a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67508f3714296ffb0cf9820e1c1ba46b082227a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67508f3714296ffb0cf9820e1c1ba46b082227a3", "html_url": "https://github.com/rust-lang/rust/commit/67508f3714296ffb0cf9820e1c1ba46b082227a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67508f3714296ffb0cf9820e1c1ba46b082227a3/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abace0a1f17986d89aedf610819deab2b4afee56", "url": "https://api.github.com/repos/rust-lang/rust/commits/abace0a1f17986d89aedf610819deab2b4afee56", "html_url": "https://github.com/rust-lang/rust/commit/abace0a1f17986d89aedf610819deab2b4afee56"}], "stats": {"total": 253, "additions": 2, "deletions": 251}, "files": [{"sha": "536d45b2399b1e6c554f4126fc34dc15a1512bfe", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 2, "deletions": 74, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/67508f3714296ffb0cf9820e1c1ba46b082227a3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67508f3714296ffb0cf9820e1c1ba46b082227a3/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=67508f3714296ffb0cf9820e1c1ba46b082227a3", "patch": "@@ -4,8 +4,7 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use rustc_ast::tokenstream::DelimSpan;\n-use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MacArgs, MetaItemKind, NestedMetaItem};\n+use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n use rustc_expand::base::resolve_path;\n@@ -899,68 +898,6 @@ impl CheckAttrVisitor<'_> {\n         }\n     }\n \n-    /// Checks `#[doc(hidden)]` attributes. Returns `true` if valid.\n-    fn check_doc_hidden(\n-        &self,\n-        attr: &Attribute,\n-        meta_index: usize,\n-        meta: &NestedMetaItem,\n-        hir_id: HirId,\n-        target: Target,\n-    ) -> bool {\n-        if let Target::AssocConst\n-        | Target::AssocTy\n-        | Target::Method(MethodKind::Trait { body: true }) = target\n-        {\n-            let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n-            let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n-\n-            if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = containing_item.kind {\n-                let meta_items = attr.meta_item_list().unwrap();\n-\n-                let (span, replacement_span) = if meta_items.len() == 1 {\n-                    (attr.span, attr.span)\n-                } else {\n-                    let meta_span = meta.span();\n-                    (\n-                        meta_span,\n-                        meta_span.until(match meta_items.get(meta_index + 1) {\n-                            Some(next_item) => next_item.span(),\n-                            None => match attr.get_normal_item().args {\n-                                MacArgs::Delimited(DelimSpan { close, .. }, ..) => close,\n-                                _ => unreachable!(),\n-                            },\n-                        }),\n-                    )\n-                };\n-\n-                // FIXME: #[doc(hidden)] was previously erroneously allowed on trait impl items,\n-                // so for backward compatibility only emit a warning and do not mark it as invalid.\n-                self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, span, |lint| {\n-                    lint.build(\"`#[doc(hidden)]` is ignored on trait impl items\")\n-                        .warn(\n-                            \"this was previously accepted by the compiler but is \\\n-                             being phased out; it will become a hard error in \\\n-                             a future release!\",\n-                        )\n-                        .note(\n-                            \"whether the impl item is `doc(hidden)` or not \\\n-                             entirely depends on the corresponding trait item\",\n-                        )\n-                        .span_suggestion(\n-                            replacement_span,\n-                            \"remove this attribute\",\n-                            \"\",\n-                            Applicability::MachineApplicable,\n-                        )\n-                        .emit();\n-                });\n-            }\n-        }\n-\n-        true\n-    }\n-\n     /// Checks that an attribute is *not* used at the crate level. Returns `true` if valid.\n     fn check_attr_not_crate_level(\n         &self,\n@@ -1079,7 +1016,7 @@ impl CheckAttrVisitor<'_> {\n         let mut is_valid = true;\n \n         if let Some(mi) = attr.meta() && let Some(list) = mi.meta_item_list() {\n-            for (meta_index, meta) in list.into_iter().enumerate() {\n+            for meta in list {\n                 if let Some(i_meta) = meta.meta_item() {\n                     match i_meta.name_or_empty() {\n                         sym::alias\n@@ -1127,15 +1064,6 @@ impl CheckAttrVisitor<'_> {\n                             is_valid = false;\n                         }\n \n-                        sym::hidden if !self.check_doc_hidden(attr,\n-                            meta_index,\n-                            meta,\n-                            hir_id,\n-                            target,\n-                            ) => {\n-                            is_valid = false;\n-                        }\n-\n                         // no_default_passes: deprecated\n                         // passes: deprecated\n                         // plugins: removed, but rustdoc warns about it itself"}, {"sha": "362ad55707a4a37fc2c715880cd6c6f4df191361", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.fixed", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/abace0a1f17986d89aedf610819deab2b4afee56/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/abace0a1f17986d89aedf610819deab2b4afee56/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.fixed?ref=abace0a1f17986d89aedf610819deab2b4afee56", "patch": "@@ -1,55 +0,0 @@\n-#![feature(inherent_associated_types)]\n-#![allow(dead_code, incomplete_features)]\n-#![crate_type = \"lib\"]\n-#![deny(unused_attributes)]\n-// run-rustfix\n-\n-pub trait Trait {\n-    type It;\n-    const IT: ();\n-    fn it0();\n-    fn it1();\n-    fn it2();\n-}\n-\n-pub struct Implementor;\n-\n-impl Implementor {\n-    #[doc(hidden)] // no error\n-    type Inh = ();\n-\n-    #[doc(hidden)] // no error\n-    const INH: () = ();\n-\n-    #[doc(hidden)] // no error\n-    fn inh() {}\n-}\n-\n-impl Trait for Implementor {\n-    \n-    type It = ();\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    \n-    const IT: () = ();\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(alias = \"aka\")]\n-    fn it0() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(alias = \"this\", )]\n-    fn it1() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc()]\n-    fn it2() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-    //~|  ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-}"}, {"sha": "d493ed6dae2065ba01f36624ac7b70021df6ca7d", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/abace0a1f17986d89aedf610819deab2b4afee56/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abace0a1f17986d89aedf610819deab2b4afee56/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.rs?ref=abace0a1f17986d89aedf610819deab2b4afee56", "patch": "@@ -1,55 +0,0 @@\n-#![feature(inherent_associated_types)]\n-#![allow(dead_code, incomplete_features)]\n-#![crate_type = \"lib\"]\n-#![deny(unused_attributes)]\n-// run-rustfix\n-\n-pub trait Trait {\n-    type It;\n-    const IT: ();\n-    fn it0();\n-    fn it1();\n-    fn it2();\n-}\n-\n-pub struct Implementor;\n-\n-impl Implementor {\n-    #[doc(hidden)] // no error\n-    type Inh = ();\n-\n-    #[doc(hidden)] // no error\n-    const INH: () = ();\n-\n-    #[doc(hidden)] // no error\n-    fn inh() {}\n-}\n-\n-impl Trait for Implementor {\n-    #[doc(hidden)]\n-    type It = ();\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(hidden)]\n-    const IT: () = ();\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(hidden, alias = \"aka\")]\n-    fn it0() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(alias = \"this\", hidden,)]\n-    fn it1() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-\n-    #[doc(hidden, hidden)]\n-    fn it2() {}\n-    //~^^ ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-    //~|  ERROR `#[doc(hidden)]` is ignored\n-    //~|  WARNING this was previously accepted\n-}"}, {"sha": "f167bd460db3edd8ccdb3915eb5dae59a3eee5e3", "filename": "src/test/ui/lint/unused/unused-attr-doc-hidden.stderr", "status": "removed", "additions": 0, "deletions": 67, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/abace0a1f17986d89aedf610819deab2b4afee56/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abace0a1f17986d89aedf610819deab2b4afee56/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Funused-attr-doc-hidden.stderr?ref=abace0a1f17986d89aedf610819deab2b4afee56", "patch": "@@ -1,67 +0,0 @@\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:29:5\n-   |\n-LL |     #[doc(hidden)]\n-   |     ^^^^^^^^^^^^^^ help: remove this attribute\n-   |\n-note: the lint level is defined here\n-  --> $DIR/unused-attr-doc-hidden.rs:4:9\n-   |\n-LL | #![deny(unused_attributes)]\n-   |         ^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:34:5\n-   |\n-LL |     #[doc(hidden)]\n-   |     ^^^^^^^^^^^^^^ help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:39:11\n-   |\n-LL |     #[doc(hidden, alias = \"aka\")]\n-   |           ^^^^^^--\n-   |           |\n-   |           help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:44:27\n-   |\n-LL |     #[doc(alias = \"this\", hidden,)]\n-   |                           ^^^^^^-\n-   |                           |\n-   |                           help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:49:11\n-   |\n-LL |     #[doc(hidden, hidden)]\n-   |           ^^^^^^--\n-   |           |\n-   |           help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: `#[doc(hidden)]` is ignored on trait impl items\n-  --> $DIR/unused-attr-doc-hidden.rs:49:19\n-   |\n-LL |     #[doc(hidden, hidden)]\n-   |                   ^^^^^^ help: remove this attribute\n-   |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n-   = note: whether the impl item is `doc(hidden)` or not entirely depends on the corresponding trait item\n-\n-error: aborting due to 6 previous errors\n-"}]}