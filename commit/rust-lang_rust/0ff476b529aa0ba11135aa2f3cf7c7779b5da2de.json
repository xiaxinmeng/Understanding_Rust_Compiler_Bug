{"sha": "0ff476b529aa0ba11135aa2f3cf7c7779b5da2de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZjQ3NmI1MjlhYTBiYTExMTM1YWEyZjNjZjdjNzc3OWI1ZGEyZGU=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T16:55:07Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-11T17:05:11Z"}, "message": "new lint for unneeded return stmts", "tree": {"sha": "08f35568ef5c92bc006bc622bc9c66df2d584092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08f35568ef5c92bc006bc622bc9c66df2d584092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de", "html_url": "https://github.com/rust-lang/rust/commit/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b074d3ac7118a3f30c1f8782f15bfb081fbcaba", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b074d3ac7118a3f30c1f8782f15bfb081fbcaba", "html_url": "https://github.com/rust-lang/rust/commit/7b074d3ac7118a3f30c1f8782f15bfb081fbcaba"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "7d29d96637d4f0a2dc66c5af68e43e193c91a0f0", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=0ff476b529aa0ba11135aa2f3cf7c7779b5da2de", "patch": "@@ -53,6 +53,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box collapsible_if::CollapsibleIf as LintPassObject);\n     reg.register_lint_pass(box unicode::Unicode as LintPassObject);\n     reg.register_lint_pass(box strings::StringAdd as LintPassObject);\n+    reg.register_lint_pass(box misc::NeedlessReturn as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -73,5 +74,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            collapsible_if::COLLAPSIBLE_IF,\n                                            unicode::ZERO_WIDTH_SPACE,\n                                            strings::STRING_ADD_ASSIGN,\n+                                           misc::NEEDLESS_RETURN,\n                                            ]);\n }"}, {"sha": "305a11abe230581b95ec7ababf63a3faad953d68", "filename": "src/misc.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=0ff476b529aa0ba11135aa2f3cf7c7779b5da2de", "patch": "@@ -269,3 +269,71 @@ fn is_str_arg(cx: &Context, args: &[P<Expr>]) -> bool {\n     args.len() == 1 && if let ty::TyStr =\n         walk_ty(cx.tcx.expr_ty(&*args[0])).sty { true } else { false }\n }\n+\n+declare_lint!(pub NEEDLESS_RETURN, Warn,\n+              \"Warn on using a return statement where an expression would be enough\");\n+\n+#[derive(Copy,Clone)]\n+pub struct NeedlessReturn;\n+\n+impl NeedlessReturn {\n+    // Check the final stmt or expr in a block for unnecessary return.\n+    fn check_block_return(&mut self, cx: &Context, block: &Block) {\n+        if let Some(ref expr) = block.expr {\n+            self.check_final_expr(cx, expr);\n+        } else if let Some(stmt) = block.stmts.last() {\n+            if let StmtSemi(ref expr, _) = stmt.node {\n+                if let ExprRet(Some(ref inner)) = expr.node {\n+                    self.emit_lint(cx, (expr.span, inner.span));\n+                }\n+            }\n+        }\n+    }\n+\n+    // Check a the final expression in a block if it's a return.\n+    fn check_final_expr(&mut self, cx: &Context, expr: &Expr) {\n+        match expr.node {\n+            // simple return is always \"bad\"\n+            ExprRet(Some(ref inner)) => {\n+                self.emit_lint(cx, (expr.span, inner.span));\n+            }\n+            // a whole block? check it!\n+            ExprBlock(ref block) => {\n+                self.check_block_return(cx, block);\n+            }\n+            // an if/if let expr, check both exprs\n+            // note, if without else is going to be a type checking error anyways\n+            // (except for unit type functions) so we don't match it\n+            ExprIf(_, ref ifblock, Some(ref elsexpr)) |\n+            ExprIfLet(_, _, ref ifblock, Some(ref elsexpr)) => {\n+                self.check_block_return(cx, ifblock);\n+                self.check_final_expr(cx, elsexpr);\n+            }\n+            // a match expr, check all arms\n+            ExprMatch(_, ref arms, _) => {\n+                for arm in arms {\n+                    self.check_final_expr(cx, &*arm.body);\n+                }\n+            }\n+            _ => { }\n+        }\n+    }\n+\n+    fn emit_lint(&mut self, cx: &Context, spans: (Span, Span)) {\n+        span_lint(cx, NEEDLESS_RETURN, spans.0, &format!(\n+            \"unneeded return statement. Consider using {} \\\n+             without trailing semicolon\",\n+            snippet(cx, spans.1, \"..\")))\n+    }\n+}\n+\n+impl LintPass for NeedlessReturn {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEEDLESS_RETURN)\n+    }\n+\n+    fn check_fn(&mut self, cx: &Context, _: FnKind, _: &FnDecl,\n+                block: &Block, _: Span, _: ast::NodeId) {\n+        self.check_block_return(cx, block);\n+    }\n+}"}, {"sha": "34d5712799645992e7b3e1c76d4483a79ca26a9b", "filename": "tests/compile-fail/needless_return.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de/tests%2Fcompile-fail%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ff476b529aa0ba11135aa2f3cf7c7779b5da2de/tests%2Fcompile-fail%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_return.rs?ref=0ff476b529aa0ba11135aa2f3cf7c7779b5da2de", "patch": "@@ -0,0 +1,49 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(needless_return)]\n+\n+fn test_end_of_fn() -> bool {\n+    if true {\n+        // no error!\n+        return true;\n+    }\n+    return true;           //~ERROR\n+}\n+\n+fn test_no_semicolon() -> bool {\n+    return true            //~ERROR\n+}\n+\n+fn test_if_block() -> bool {\n+    if true {\n+        return true;       //~ERROR\n+    } else {\n+        return false;      //~ERROR\n+    }\n+}\n+\n+fn test_match(x: bool) -> bool {\n+    match x {\n+        true => {\n+            return false;  //~ERROR\n+        }\n+        false => {\n+            return true    //~ERROR\n+        }\n+    }\n+}\n+\n+fn test_closure() {\n+    let _ = || {\n+        return true;       //~ERROR\n+    };\n+}\n+\n+fn main() {\n+    let _ = test_end_of_fn();\n+    let _ = test_no_semicolon();\n+    let _ = test_if_block();\n+    let _ = test_match(true);\n+    test_closure();\n+}"}]}