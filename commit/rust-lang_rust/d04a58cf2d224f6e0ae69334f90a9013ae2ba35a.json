{"sha": "d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNGE1OGNmMmQyMjRmNmUwYWU2OTMzNGY5MGE5MDEzYWUyYmEzNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-01T00:51:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-01T00:51:26Z"}, "message": "auto merge of #9740 : alexcrichton/rust/concat, r=cmr\n\nThis extension can be used to concatenate string literals at compile time. C has\r\nthis useful ability when placing string literals lexically next to one another,\r\nbut this needs to be handled at the syntax extension level to recursively expand\r\nmacros.\r\n\r\nThe major use case for this is something like:\r\n\r\n    macro_rules! mylog( ($fmt:expr $($arg:tt)*) => {\r\n        error2!(concat!(file!(), \":\", line!(), \" - \", $fmt) $($arg)*);\r\n    })\r\n\r\nWhere the mylog macro will automatically prepend the filename/line number to the\r\nbeginning of every log message.", "tree": {"sha": "38456cf073d07e36a6c385dbc8dd5d275f4981ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38456cf073d07e36a6c385dbc8dd5d275f4981ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "html_url": "https://github.com/rust-lang/rust/commit/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23df6f9775eee7a59e98873ae168a199efb4d649", "url": "https://api.github.com/repos/rust-lang/rust/commits/23df6f9775eee7a59e98873ae168a199efb4d649", "html_url": "https://github.com/rust-lang/rust/commit/23df6f9775eee7a59e98873ae168a199efb4d649"}, {"sha": "a49e65c2edad450cabc0745e94e7c031c5d4f7f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a49e65c2edad450cabc0745e94e7c031c5d4f7f8", "html_url": "https://github.com/rust-lang/rust/commit/a49e65c2edad450cabc0745e94e7c031c5d4f7f8"}], "stats": {"total": 121, "additions": 118, "deletions": 3}, "files": [{"sha": "0023e65cd83917a97cb2f5cc4855c0c979c921dd", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "patch": "@@ -568,6 +568,7 @@ This requirement most often affects name-designator pairs when they occur at the\n * `log_syntax!` : print out the arguments at compile time\n * `trace_macros!` : supply `true` or `false` to enable or disable macro expansion logging\n * `stringify!` : turn the identifier argument into a string literal\n+* `concat!` : concatenates a comma-separated list of literals\n * `concat_idents!` : create a new identifier by concatenating the arguments\n \n # Crates and source files"}, {"sha": "7ce73a4afef70b04fbdfa06ab47db30a054a84c8", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "patch": "@@ -14,6 +14,7 @@ use codemap;\n use codemap::{CodeMap, Span, ExpnInfo};\n use diagnostic::span_handler;\n use ext;\n+use ext::expand;\n use parse;\n use parse::token;\n use parse::token::{ident_to_str, intern, str_to_ident};\n@@ -246,6 +247,9 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"concat_idents\"),\n                             builtin_normal_tt_no_ctxt(\n                                     ext::concat_idents::expand_syntax_ext));\n+    syntax_expanders.insert(intern(\"concat\"),\n+                            builtin_normal_tt_no_ctxt(\n+                                    ext::concat::expand_syntax_ext));\n     syntax_expanders.insert(intern(&\"log_syntax\"),\n                             builtin_normal_tt_no_ctxt(\n                                     ext::log_syntax::expand_syntax_ext));\n@@ -338,6 +342,22 @@ impl ExtCtxt {\n         }\n     }\n \n+    pub fn expand_expr(@self, mut e: @ast::Expr) -> @ast::Expr {\n+        loop {\n+            match e.node {\n+                ast::ExprMac(*) => {\n+                    let extsbox = @mut syntax_expander_table();\n+                    let expander = expand::MacroExpander {\n+                        extsbox: extsbox,\n+                        cx: self,\n+                    };\n+                    e = expand::expand_expr(extsbox, self, e, &expander);\n+                }\n+                _ => return e\n+            }\n+        }\n+    }\n+\n     pub fn codemap(&self) -> @CodeMap { self.parse_sess.cm }\n     pub fn parse_sess(&self) -> @mut parse::ParseSess { self.parse_sess }\n     pub fn cfg(&self) -> ast::CrateConfig { self.cfg.clone() }"}, {"sha": "a89e8d261fe6e3bd058282ce3a1ef67032b50db6", "filename": "src/libsyntax/ext/concat.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fconcat.rs?ref=d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::char;\n+\n+use ast;\n+use codemap;\n+use ext::base;\n+use ext::build::AstBuilder;\n+\n+pub fn expand_syntax_ext(cx: @base::ExtCtxt,\n+                         sp: codemap::Span,\n+                         tts: &[ast::token_tree]) -> base::MacResult {\n+    let es = base::get_exprs_from_tts(cx, sp, tts);\n+    let mut accumulator = ~\"\";\n+    for e in es.move_iter() {\n+        let e = cx.expand_expr(e);\n+        match e.node {\n+            ast::ExprLit(lit) => {\n+                match lit.node {\n+                    ast::lit_str(s, _) |\n+                    ast::lit_float(s, _) |\n+                    ast::lit_float_unsuffixed(s) => {\n+                        accumulator.push_str(s);\n+                    }\n+                    ast::lit_char(c) => {\n+                        accumulator.push_char(char::from_u32(c).unwrap());\n+                    }\n+                    ast::lit_int(i, _) |\n+                    ast::lit_int_unsuffixed(i) => {\n+                        accumulator.push_str(format!(\"{}\", i));\n+                    }\n+                    ast::lit_uint(u, _) => {\n+                        accumulator.push_str(format!(\"{}\", u));\n+                    }\n+                    ast::lit_nil => {}\n+                    ast::lit_bool(b) => {\n+                        accumulator.push_str(format!(\"{}\", b));\n+                    }\n+                    ast::lit_binary(*) => {\n+                        cx.span_err(e.span, \"cannot concatenate a binary literal\");\n+                    }\n+                }\n+            }\n+            _ => {\n+                cx.span_err(e.span, \"expected a literal\");\n+            }\n+        }\n+    }\n+    return base::MRExpr(cx.expr_str(sp, accumulator.to_managed()));\n+}"}, {"sha": "ba946d5fb1f1d8a48fc8eccf0ff4b02e536f1035", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "patch": "@@ -1083,7 +1083,7 @@ struct NoOpFolder {\n \n impl ast_fold for NoOpFolder {}\n \n-struct MacroExpander {\n+pub struct MacroExpander {\n     extsbox: @mut SyntaxEnv,\n     cx: @ExtCtxt,\n }"}, {"sha": "943279d2dc6831ae76661d001ba72158b8221a5c", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "patch": "@@ -735,8 +735,10 @@ pub fn expand_args(ecx: @ExtCtxt, sp: Span,\n         (_, None) => { return MRExpr(ecx.expr_uint(sp, 2)); }\n     };\n     cx.fmtsp = efmt.span;\n-    let (fmt, _fmt_str_style) = expr_to_str(ecx, efmt,\n-                                            \"format argument must be a string literal.\");\n+    // Be sure to recursively expand macros just in case the format string uses\n+    // a macro to build the format expression.\n+    let (fmt, _) = expr_to_str(ecx, ecx.expand_expr(efmt),\n+                               \"format argument must be a string literal.\");\n \n     let mut err = false;\n     do parse::parse_error::cond.trap(|m| {"}, {"sha": "cf2c01e92b43bd145ed38250e8e279b67fa870ae", "filename": "src/libsyntax/syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Flibsyntax%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsyntax.rs?ref=d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "patch": "@@ -77,6 +77,7 @@ pub mod ext {\n     pub mod format;\n     pub mod env;\n     pub mod bytes;\n+    pub mod concat;\n     pub mod concat_idents;\n     pub mod log_syntax;\n     pub mod auto_encode;"}, {"sha": "c34e402c90b9b62c348268dedc5fdaccf67811a5", "filename": "src/test/compile-fail/concat.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Ftest%2Fcompile-fail%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Ftest%2Fcompile-fail%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconcat.rs?ref=d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    concat!(foo);   //~ ERROR: expected a literal\n+    concat!(foo()); //~ ERROR: expected a literal\n+}"}, {"sha": "bcf1c4c63f59337d83a767a11777350d354d3ba1", "filename": "src/test/run-pass/concat.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Ftest%2Frun-pass%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d04a58cf2d224f6e0ae69334f90a9013ae2ba35a/src%2Ftest%2Frun-pass%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconcat.rs?ref=d04a58cf2d224f6e0ae69334f90a9013ae2ba35a", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn main() {\n+    assert_eq!(format!(concat!(\"foo\", \"bar\", \"{}\"), \"baz\"), ~\"foobarbaz\");\n+    assert_eq!(format!(concat!()), ~\"\");\n+\n+    assert_eq!(\n+        concat!(1, 2i, 3u, 4f32, 4.0, 'a', true, ()),\n+        \"12344.0atrue\"\n+    );\n+}"}]}