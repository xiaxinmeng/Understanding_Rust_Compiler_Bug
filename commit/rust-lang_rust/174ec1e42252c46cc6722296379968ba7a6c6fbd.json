{"sha": "174ec1e42252c46cc6722296379968ba7a6c6fbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NGVjMWU0MjI1MmM0NmNjNjcyMjI5NjM3OTk2OGJhN2E2YzZmYmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-09T02:28:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-05-15T19:19:15Z"}, "message": "core::rt: Error handling for TcpStream.read", "tree": {"sha": "ffffd6ad0361817b2c2227a384df2fc1e16c1d1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffffd6ad0361817b2c2227a384df2fc1e16c1d1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/174ec1e42252c46cc6722296379968ba7a6c6fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/174ec1e42252c46cc6722296379968ba7a6c6fbd", "html_url": "https://github.com/rust-lang/rust/commit/174ec1e42252c46cc6722296379968ba7a6c6fbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/174ec1e42252c46cc6722296379968ba7a6c6fbd/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a54bad3d1d306845b04f146c2c31d4a70e9ede3", "html_url": "https://github.com/rust-lang/rust/commit/0a54bad3d1d306845b04f146c2c31d4a70e9ede3"}], "stats": {"total": 104, "additions": 93, "deletions": 11}, "files": [{"sha": "04ee086b9ae4bbbf32aeef2d08b2bb3e17732ec9", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=174ec1e42252c46cc6722296379968ba7a6c6fbd", "patch": "@@ -11,7 +11,7 @@\n #[macro_escape];\n \n // Some basic logging\n-macro_rules! rtdebug_ (\n+macro_rules! rtdebug (\n     ($( $arg:expr),+) => ( {\n         dumb_println(fmt!( $($arg),+ ));\n \n@@ -26,7 +26,7 @@ macro_rules! rtdebug_ (\n )\n \n // An alternate version with no output, for turning off logging\n-macro_rules! rtdebug (\n+macro_rules! rtdebug_ (\n     ($( $arg:expr),+) => ( $(let _ = $arg)*; )\n )\n "}, {"sha": "ab4b83f7cf0ea38121692798b0d7e11e1b8bd33f", "filename": "src/libcore/rt/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fmod.rs?ref=174ec1e42252c46cc6722296379968ba7a6c6fbd", "patch": "@@ -338,6 +338,7 @@ pub enum IoErrorKind {\n     ConnectionFailed,\n     Closed,\n     ConnectionRefused,\n+    ConnectionReset\n }\n \n // XXX: Can't put doc comments on macros"}, {"sha": "4a25334a2fcbc872b19ce9f39cb0976dedeb806e", "filename": "src/libcore/rt/io/net/tcp.rs", "status": "modified", "additions": 82, "deletions": 7, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=174ec1e42252c46cc6722296379968ba7a6c6fbd", "patch": "@@ -13,7 +13,7 @@ use result::{Ok, Err};\n use rt::sched::local_sched::unsafe_borrow_io;\n use rt::io::net::ip::IpAddr;\n use rt::io::{Reader, Writer, Listener};\n-use rt::io::io_error;\n+use rt::io::{io_error, EndOfFile};\n use rt::rtio::{IoFactory,\n                RtioTcpListener, RtioTcpListenerObject,\n                RtioTcpStream, RtioTcpStreamObject};\n@@ -55,8 +55,12 @@ impl Reader for TcpStream {\n         let bytes_read = self.rtstream.read(buf);\n         match bytes_read {\n             Ok(read) => Some(read),\n-            Err(_) => {\n-                abort!(\"XXX\");\n+            Err(ioerr) => {\n+                // EOF is indicated by returning None\n+                if ioerr.kind != EndOfFile {\n+                    io_error::cond.raise(ioerr);\n+                }\n+                return None;\n             }\n         }\n     }\n@@ -69,8 +73,8 @@ impl Writer for TcpStream {\n         let res = self.rtstream.write(buf);\n         match res {\n             Ok(_) => (),\n-            Err(_) => {\n-                abort!(\"XXX\");\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n             }\n         }\n     }\n@@ -106,8 +110,9 @@ impl Listener<TcpStream> for TcpListener {\n             Ok(s) => {\n                 Some(TcpStream::new(s))\n             }\n-            Err(_) => {\n-                abort!(\"XXX\");\n+            Err(ioerr) => {\n+                io_error::cond.raise(ioerr);\n+                return None;\n             }\n         }\n     }\n@@ -174,6 +179,76 @@ mod test {\n         }\n     }\n \n+    #[test]\n+    fn read_eof() {\n+        do run_in_newsched_task {\n+            let addr = next_test_ip4();\n+\n+            do spawntask_immediately {\n+                let mut listener = TcpListener::bind(addr);\n+                let mut stream = listener.accept();\n+                let mut buf = [0];\n+                let nread = stream.read(buf);\n+                assert!(nread.is_none());\n+            }\n+\n+            do spawntask_immediately {\n+                let _stream = TcpStream::connect(addr);\n+                // Close\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    fn read_eof_twice() {\n+        do run_in_newsched_task {\n+            let addr = next_test_ip4();\n+\n+            do spawntask_immediately {\n+                let mut listener = TcpListener::bind(addr);\n+                let mut stream = listener.accept();\n+                let mut buf = [0];\n+                let nread = stream.read(buf);\n+                assert!(nread.is_none());\n+                let nread = stream.read(buf);\n+                assert!(nread.is_none());\n+            }\n+\n+            do spawntask_immediately {\n+                let _stream = TcpStream::connect(addr);\n+                // Close\n+            }\n+        }\n+    }\n+\n+    #[test]\n+    fn write_close() {\n+        do run_in_newsched_task {\n+            let addr = next_test_ip4();\n+\n+            do spawntask_immediately {\n+                let mut listener = TcpListener::bind(addr);\n+                let mut stream = listener.accept();\n+                let buf = [0];\n+                loop {\n+                    let mut stop = false;\n+                    do io_error::cond.trap(|e| {\n+                        assert!(e.kind == ConnectionReset);\n+                        stop = true;\n+                    }).in {\n+                        stream.write(buf);\n+                    }\n+                    if stop { break }\n+                }\n+            }\n+\n+            do spawntask_immediately {\n+                let stream = TcpStream::connect(addr);\n+                // Close\n+            }\n+        }\n+    }\n+\n     #[test]\n     fn multiple_connect_serial() {\n         do run_in_newsched_task {"}, {"sha": "3d9aef6cb61d4948fb35f3583a5dbdab2157304f", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=174ec1e42252c46cc6722296379968ba7a6c6fbd", "patch": "@@ -210,6 +210,10 @@ pub impl UvError {\n             from_c_str(desc_str)\n         }\n     }\n+\n+    fn is_eof(&self) -> bool {\n+        self.code == uvll::EOF\n+    }\n }\n \n impl ToStr for UvError {\n@@ -262,6 +266,7 @@ pub fn uv_error_to_io_error(uverr: UvError) -> IoError {\n             EOF => EndOfFile,\n             EACCES => PermissionDenied,\n             ECONNREFUSED => ConnectionRefused,\n+            ECONNRESET => ConnectionReset,\n             e => {\n                 abort!(\"unknown uv error code: %u\", e as uint);\n             }"}, {"sha": "25d912ce42eb5a2556b8ea5f78cdede833999497", "filename": "src/libcore/rt/uv/uvio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvio.rs?ref=174ec1e42252c46cc6722296379968ba7a6c6fbd", "patch": "@@ -301,7 +301,7 @@ impl RtioTcpStream for UvTcpStream {\n                     assert!(nread >= 0);\n                     Ok(nread as uint)\n                 } else {\n-                    Err(standard_error(OtherIoError))\n+                    Err(uv_error_to_io_error(status.unwrap()))\n                 };\n \n                 unsafe { (*result_cell_ptr).put_back(result); }\n@@ -330,7 +330,7 @@ impl RtioTcpStream for UvTcpStream {\n                 let result = if status.is_none() {\n                     Ok(())\n                 } else {\n-                    Err(standard_error(OtherIoError))\n+                    Err(uv_error_to_io_error(status.unwrap()))\n                 };\n \n                 unsafe { (*result_cell_ptr).put_back(result); }"}, {"sha": "76abf2a195d5c0aa3adb08410bbb587ef4d9b071", "filename": "src/libcore/rt/uv/uvll.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/174ec1e42252c46cc6722296379968ba7a6c6fbd/src%2Flibcore%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fuvll.rs?ref=174ec1e42252c46cc6722296379968ba7a6c6fbd", "patch": "@@ -39,6 +39,7 @@ pub static EOF: c_int = 1;\n pub static EADDRINFO: c_int = 2;\n pub static EACCES: c_int = 3;\n pub static ECONNREFUSED: c_int = 12;\n+pub static ECONNRESET: c_int = 13;\n \n pub struct uv_err_t {\n     code: c_int,"}]}