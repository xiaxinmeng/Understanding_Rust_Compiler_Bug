{"sha": "a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YzJlZWYyYWViMjNmNTJlZmM0YTRiZmQyNDAyOTJkNDNhNjE3OTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-11T09:36:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-11T09:36:16Z"}, "message": "Rollup merge of #66059 - RalfJung:panic-on-non-zero, r=eddyb\n\nmem::zeroed/uninit: panic on types that do not permit zero-initialization\n\nr? @eddyb @oli-obk\n\nCc https://github.com/rust-lang/rust/issues/62825\n\nAlso see [this summary comment](https://github.com/rust-lang/rust/pull/66059#issuecomment-586734747)", "tree": {"sha": "a794d20513cc74cde83c05adb18370dc879e629b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a794d20513cc74cde83c05adb18370dc879e629b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeaLEQCRBK7hj4Ov3rIwAAdHIIACYD7LO7dV+fsz1szH6kMZp9\ngBFIPr086SBA3mTCZkMu0ksi/j0jnRYI56PrHRw2ZGmX3ulER6ucEsIFTEFLH+c7\nBNNwJBuIS9p/yqiiC6dWzvzCBBoszVQhiM65EmgmsmUYyjpEZbXDxl0Ykw/hBMpH\nm2qg3b5oKO+Cok6u9ooJo0G2OYsgYIeICa8etD5x0BnHBgh/8BEBZ/kFTGb8h51u\nJw/GAD6lR5gNVhwE076FMuV4Ph8IeStGYK0TsiBG26PvRHe1HMJm2QMvMzs3NNFb\nxIDgvcQDByDzlijFdfvhV/Pe27HOCza7kIpXq4GQ+xdy4GXRsuih/PDOUQjejs0=\n=aknz\n-----END PGP SIGNATURE-----\n", "payload": "tree a794d20513cc74cde83c05adb18370dc879e629b\nparent 15812785344d913d779d9738fe3cca8de56f71d5\nparent a09c33e36205991bb633a848d1e9c7604ae43ce8\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583919376 +0100\ncommitter GitHub <noreply@github.com> 1583919376 +0100\n\nRollup merge of #66059 - RalfJung:panic-on-non-zero, r=eddyb\n\nmem::zeroed/uninit: panic on types that do not permit zero-initialization\n\nr? @eddyb @oli-obk\n\nCc https://github.com/rust-lang/rust/issues/62825\n\nAlso see [this summary comment](https://github.com/rust-lang/rust/pull/66059#issuecomment-586734747)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "html_url": "https://github.com/rust-lang/rust/commit/a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15812785344d913d779d9738fe3cca8de56f71d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/15812785344d913d779d9738fe3cca8de56f71d5", "html_url": "https://github.com/rust-lang/rust/commit/15812785344d913d779d9738fe3cca8de56f71d5"}, {"sha": "a09c33e36205991bb633a848d1e9c7604ae43ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a09c33e36205991bb633a848d1e9c7604ae43ce8", "html_url": "https://github.com/rust-lang/rust/commit/a09c33e36205991bb633a848d1e9c7604ae43ce8"}], "stats": {"total": 539, "additions": 370, "deletions": 169}, "files": [{"sha": "721a2d26a71655744d2b21c38736eea6c3f2f3bd", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "patch": "@@ -1007,6 +1007,16 @@ extern \"rust-intrinsic\" {\n     /// This will statically either panic, or do nothing.\n     pub fn panic_if_uninhabited<T>();\n \n+    /// A guard for unsafe functions that cannot ever be executed if `T` does not permit\n+    /// zero-initialization: This will statically either panic, or do nothing.\n+    #[cfg(not(bootstrap))]\n+    pub fn panic_if_zero_invalid<T>();\n+\n+    /// A guard for unsafe functions that cannot ever be executed if `T` has invalid\n+    /// bit patterns: This will statically either panic, or do nothing.\n+    #[cfg(not(bootstrap))]\n+    pub fn panic_if_any_invalid<T>();\n+\n     /// Gets a reference to a static `Location` indicating where it was called.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"47809\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;"}, {"sha": "8add875dcbed3b8c5a902f127bd5b84e30b94a82", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "patch": "@@ -496,6 +496,9 @@ pub const fn needs_drop<T>() -> bool {\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_zeroed\"]\n pub unsafe fn zeroed<T>() -> T {\n+    #[cfg(not(bootstrap))]\n+    intrinsics::panic_if_zero_invalid::<T>();\n+    #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::init()\n }\n@@ -529,6 +532,9 @@ pub unsafe fn zeroed<T>() -> T {\n #[allow(deprecated)]\n #[rustc_diagnostic_item = \"mem_uninitialized\"]\n pub unsafe fn uninitialized<T>() -> T {\n+    #[cfg(not(bootstrap))]\n+    intrinsics::panic_if_any_invalid::<T>();\n+    #[cfg(bootstrap)]\n     intrinsics::panic_if_uninhabited::<T>();\n     intrinsics::uninit()\n }"}, {"sha": "dedb3035cedb35d1f6cf30fc30a3e33b728bf74c", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "patch": "@@ -1904,36 +1904,6 @@ impl<'tcx, T: HasTyCtxt<'tcx>> HasTyCtxt<'tcx> for LayoutCx<'tcx, T> {\n     }\n }\n \n-pub trait MaybeResult<T> {\n-    type Error;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self;\n-    fn to_result(self) -> Result<T, Self::Error>;\n-}\n-\n-impl<T> MaybeResult<T> for T {\n-    type Error = !;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self {\n-        let Ok(x) = x;\n-        x\n-    }\n-    fn to_result(self) -> Result<T, Self::Error> {\n-        Ok(self)\n-    }\n-}\n-\n-impl<T, E> MaybeResult<T> for Result<T, E> {\n-    type Error = E;\n-\n-    fn from(x: Result<T, Self::Error>) -> Self {\n-        x\n-    }\n-    fn to_result(self) -> Result<T, Self::Error> {\n-        self\n-    }\n-}\n-\n pub type TyLayout<'tcx> = ::rustc_target::abi::TyLayout<'tcx, Ty<'tcx>>;\n \n impl<'tcx> LayoutOf for LayoutCx<'tcx, TyCtxt<'tcx>> {"}, {"sha": "c8d352cd2dd988361543f0aa80bd393a4f8cdfae", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 92, "deletions": 35, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "patch": "@@ -434,6 +434,89 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         helper.do_call(self, &mut bx, fn_abi, llfn, &args, None, cleanup);\n     }\n \n+    /// Returns `true` if this is indeed a panic intrinsic and codegen is done.\n+    fn codegen_panic_intrinsic(\n+        &mut self,\n+        helper: &TerminatorCodegenHelper<'tcx>,\n+        bx: &mut Bx,\n+        intrinsic: Option<&str>,\n+        instance: Option<Instance<'tcx>>,\n+        span: Span,\n+        destination: &Option<(mir::Place<'tcx>, mir::BasicBlock)>,\n+        cleanup: Option<mir::BasicBlock>,\n+    ) -> bool {\n+        // Emit a panic or a no-op for `panic_if_uninhabited`.\n+        // These are intrinsics that compile to panics so that we can get a message\n+        // which mentions the offending type, even from a const context.\n+        #[derive(Debug, PartialEq)]\n+        enum PanicIntrinsic {\n+            IfUninhabited,\n+            IfZeroInvalid,\n+            IfAnyInvalid,\n+        };\n+        let panic_intrinsic = intrinsic.and_then(|i| match i {\n+            // FIXME: Move to symbols instead of strings.\n+            \"panic_if_uninhabited\" => Some(PanicIntrinsic::IfUninhabited),\n+            \"panic_if_zero_invalid\" => Some(PanicIntrinsic::IfZeroInvalid),\n+            \"panic_if_any_invalid\" => Some(PanicIntrinsic::IfAnyInvalid),\n+            _ => None,\n+        });\n+        if let Some(intrinsic) = panic_intrinsic {\n+            use PanicIntrinsic::*;\n+            let ty = instance.unwrap().substs.type_at(0);\n+            let layout = bx.layout_of(ty);\n+            let do_panic = match intrinsic {\n+                IfUninhabited => layout.abi.is_uninhabited(),\n+                // We unwrap as the error type is `!`.\n+                IfZeroInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ true).unwrap(),\n+                // We unwrap as the error type is `!`.\n+                IfAnyInvalid => !layout.might_permit_raw_init(bx, /*zero:*/ false).unwrap(),\n+            };\n+            if do_panic {\n+                let msg_str = if layout.abi.is_uninhabited() {\n+                    // Use this error even for the other intrinsics as it is more precise.\n+                    format!(\"attempted to instantiate uninhabited type `{}`\", ty)\n+                } else if intrinsic == IfZeroInvalid {\n+                    format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty)\n+                } else {\n+                    format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty)\n+                };\n+                let msg = bx.const_str(Symbol::intern(&msg_str));\n+                let location = self.get_caller_location(bx, span).immediate();\n+\n+                // Obtain the panic entry point.\n+                // FIXME: dedup this with `codegen_assert_terminator` above.\n+                let def_id =\n+                    common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n+                let instance = ty::Instance::mono(bx.tcx(), def_id);\n+                let fn_abi = FnAbi::of_instance(bx, instance, &[]);\n+                let llfn = bx.get_fn_addr(instance);\n+\n+                if let Some((_, target)) = destination.as_ref() {\n+                    helper.maybe_sideeffect(self.mir, bx, &[*target]);\n+                }\n+                // Codegen the actual panic invoke/call.\n+                helper.do_call(\n+                    self,\n+                    bx,\n+                    fn_abi,\n+                    llfn,\n+                    &[msg.0, msg.1, location],\n+                    destination.as_ref().map(|(_, bb)| (ReturnDest::Nothing, *bb)),\n+                    cleanup,\n+                );\n+            } else {\n+                // a NOP\n+                let target = destination.as_ref().unwrap().1;\n+                helper.maybe_sideeffect(self.mir, bx, &[target]);\n+                helper.funclet_br(self, bx, target)\n+            }\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     fn codegen_call_terminator(\n         &mut self,\n         helper: TerminatorCodegenHelper<'tcx>,\n@@ -520,41 +603,15 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             bug!(\"`miri_start_panic` should never end up in compiled code\");\n         }\n \n-        // Emit a panic or a no-op for `panic_if_uninhabited`.\n-        if intrinsic == Some(\"panic_if_uninhabited\") {\n-            let ty = instance.unwrap().substs.type_at(0);\n-            let layout = bx.layout_of(ty);\n-            if layout.abi.is_uninhabited() {\n-                let msg_str = format!(\"Attempted to instantiate uninhabited type {}\", ty);\n-                let msg = bx.const_str(Symbol::intern(&msg_str));\n-                let location = self.get_caller_location(&mut bx, span).immediate();\n-\n-                // Obtain the panic entry point.\n-                let def_id =\n-                    common::langcall(bx.tcx(), Some(span), \"\", lang_items::PanicFnLangItem);\n-                let instance = ty::Instance::mono(bx.tcx(), def_id);\n-                let fn_abi = FnAbi::of_instance(&bx, instance, &[]);\n-                let llfn = bx.get_fn_addr(instance);\n-\n-                if let Some((_, target)) = destination.as_ref() {\n-                    helper.maybe_sideeffect(self.mir, &mut bx, &[*target]);\n-                }\n-                // Codegen the actual panic invoke/call.\n-                helper.do_call(\n-                    self,\n-                    &mut bx,\n-                    fn_abi,\n-                    llfn,\n-                    &[msg.0, msg.1, location],\n-                    destination.as_ref().map(|(_, bb)| (ReturnDest::Nothing, *bb)),\n-                    cleanup,\n-                );\n-            } else {\n-                // a NOP\n-                let target = destination.as_ref().unwrap().1;\n-                helper.maybe_sideeffect(self.mir, &mut bx, &[target]);\n-                helper.funclet_br(self, &mut bx, target)\n-            }\n+        if self.codegen_panic_intrinsic(\n+            &helper,\n+            &mut bx,\n+            intrinsic,\n+            instance,\n+            span,\n+            destination,\n+            cleanup,\n+        ) {\n             return;\n         }\n "}, {"sha": "7020939fa20b234e8318fb9ecf9ac4241be88f3f", "filename": "src/librustc_index/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_index%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_index%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fvec.rs?ref=a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "patch": "@@ -196,7 +196,7 @@ macro_rules! newtype_index {\n \n             #[inline]\n             fn index(self) -> usize {\n-                usize::from(self)\n+                self.as_usize()\n             }\n         }\n "}, {"sha": "2f8bbd66c322b2606b4f5fbb53fa25841f893b5e", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "patch": "@@ -937,6 +937,7 @@ impl<'a, Ty> Deref for TyLayout<'a, Ty> {\n     }\n }\n \n+/// Trait for context types that can compute layouts of things.\n pub trait LayoutOf {\n     type Ty;\n     type TyLayout;\n@@ -947,6 +948,38 @@ pub trait LayoutOf {\n     }\n }\n \n+/// The `TyLayout` above will always be a `MaybeResult<TyLayout<'_, Self>>`.\n+/// We can't add the bound due to the lifetime, but this trait is still useful when\n+/// writing code that's generic over the `LayoutOf` impl.\n+pub trait MaybeResult<T> {\n+    type Error;\n+\n+    fn from(x: Result<T, Self::Error>) -> Self;\n+    fn to_result(self) -> Result<T, Self::Error>;\n+}\n+\n+impl<T> MaybeResult<T> for T {\n+    type Error = !;\n+\n+    fn from(Ok(x): Result<T, Self::Error>) -> Self {\n+        x\n+    }\n+    fn to_result(self) -> Result<T, Self::Error> {\n+        Ok(self)\n+    }\n+}\n+\n+impl<T, E> MaybeResult<T> for Result<T, E> {\n+    type Error = E;\n+\n+    fn from(x: Result<T, Self::Error>) -> Self {\n+        x\n+    }\n+    fn to_result(self) -> Result<T, Self::Error> {\n+        self\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum PointerKind {\n     /// Most general case, we know no restrictions to tell LLVM.\n@@ -987,13 +1020,17 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n     {\n         Ty::for_variant(self, cx, variant_index)\n     }\n+\n+    /// Callers might want to use `C: LayoutOf<Ty=Ty, TyLayout: MaybeResult<Self>>`\n+    /// to allow recursion (see `might_permit_zero_init` below for an example).\n     pub fn field<C>(self, cx: &C, i: usize) -> C::TyLayout\n     where\n         Ty: TyLayoutMethods<'a, C>,\n         C: LayoutOf<Ty = Ty>,\n     {\n         Ty::field(self, cx, i)\n     }\n+\n     pub fn pointee_info_at<C>(self, cx: &C, offset: Size) -> Option<PointeeInfo>\n     where\n         Ty: TyLayoutMethods<'a, C>,\n@@ -1017,4 +1054,52 @@ impl<'a, Ty> TyLayout<'a, Ty> {\n             Abi::Aggregate { sized } => sized && self.size.bytes() == 0,\n         }\n     }\n+\n+    /// Determines if this type permits \"raw\" initialization by just transmuting some\n+    /// memory into an instance of `T`.\n+    /// `zero` indicates if the memory is zero-initialized, or alternatively\n+    /// left entirely uninitialized.\n+    /// This is conservative: in doubt, it will answer `true`.\n+    ///\n+    /// FIXME: Once we removed all the conservatism, we could alternatively\n+    /// create an all-0/all-undef constant and run the const value validator to see if\n+    /// this is a valid value for the given type.\n+    pub fn might_permit_raw_init<C, E>(self, cx: &C, zero: bool) -> Result<bool, E>\n+    where\n+        Self: Copy,\n+        Ty: TyLayoutMethods<'a, C>,\n+        C: LayoutOf<Ty = Ty, TyLayout: MaybeResult<Self, Error = E>> + HasDataLayout,\n+    {\n+        let scalar_allows_raw_init = move |s: &Scalar| -> bool {\n+            if zero {\n+                let range = &s.valid_range;\n+                // The range must contain 0.\n+                range.contains(&0) || (*range.start() > *range.end()) // wrap-around allows 0\n+            } else {\n+                // The range must include all values. `valid_range_exclusive` handles\n+                // the wrap-around using target arithmetic; with wrap-around then the full\n+                // range is one where `start == end`.\n+                let range = s.valid_range_exclusive(cx);\n+                range.start == range.end\n+            }\n+        };\n+\n+        // Check the ABI.\n+        let valid = match &self.abi {\n+            Abi::Uninhabited => false, // definitely UB\n+            Abi::Scalar(s) => scalar_allows_raw_init(s),\n+            Abi::ScalarPair(s1, s2) => scalar_allows_raw_init(s1) && scalar_allows_raw_init(s2),\n+            Abi::Vector { element: s, count } => *count == 0 || scalar_allows_raw_init(s),\n+            Abi::Aggregate { .. } => true, // Cannot be excluded *right now*.\n+        };\n+        if !valid {\n+            // This is definitely not okay.\n+            trace!(\"might_permit_raw_init({:?}, zero={}): not valid\", self.details, zero);\n+            return Ok(false);\n+        }\n+\n+        // If we have not found an error yet, we need to recursively descend.\n+        // FIXME(#66151): For now, we are conservative and do not do this.\n+        Ok(true)\n+    }\n }"}, {"sha": "3c397eb444d1d206ba680970326e3cfbf2556997", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "patch": "@@ -10,6 +10,9 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(bool_to_option)]\n #![feature(nll)]\n+#![feature(never_type)]\n+#![feature(associated_type_bounds)]\n+#![feature(exhaustive_patterns)]\n \n #[macro_use]\n extern crate log;"}, {"sha": "d2a358c3e09b868d1c6f1789424f930f8f249a61", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "patch": "@@ -147,7 +147,9 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             ),\n             \"rustc_peek\" => (1, vec![param(0)], param(0)),\n             \"caller_location\" => (0, vec![], tcx.caller_location_ty()),\n-            \"panic_if_uninhabited\" => (1, Vec::new(), tcx.mk_unit()),\n+            \"panic_if_uninhabited\" | \"panic_if_zero_invalid\" | \"panic_if_any_invalid\" => {\n+                (1, Vec::new(), tcx.mk_unit())\n+            }\n             \"init\" => (1, Vec::new(), param(0)),\n             \"uninit\" => (1, Vec::new(), param(0)),\n             \"forget\" => (1, vec![param(0)], tcx.mk_unit()),"}, {"sha": "02f8ecaa4eec536ab33ba29b12bc86d914fe55f8", "filename": "src/test/ui/intrinsics/panic-uninitialized-zeroed.rs", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c2eef2aeb23f52efc4a4bfd240292d43a61798/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fpanic-uninitialized-zeroed.rs?ref=a7c2eef2aeb23f52efc4a4bfd240292d43a61798", "patch": "@@ -0,0 +1,170 @@\n+// run-pass\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+// This test checks panic emitted from `mem::{uninitialized,zeroed}`.\n+\n+#![feature(never_type)]\n+#![allow(deprecated, invalid_value)]\n+\n+use std::{\n+    mem::{self, MaybeUninit, ManuallyDrop},\n+    panic,\n+    ptr::NonNull,\n+    num,\n+};\n+\n+#[allow(dead_code)]\n+struct Foo {\n+    x: u8,\n+    y: !,\n+}\n+\n+enum Bar {}\n+\n+#[allow(dead_code)]\n+enum OneVariant { Variant(i32) }\n+\n+// An enum with ScalarPair layout\n+#[allow(dead_code)]\n+enum LR {\n+    Left(i64),\n+    Right(i64),\n+}\n+#[allow(dead_code, non_camel_case_types)]\n+enum LR_NonZero {\n+    Left(num::NonZeroI64),\n+    Right(num::NonZeroI64),\n+}\n+\n+fn test_panic_msg<T>(op: impl (FnOnce() -> T) + panic::UnwindSafe, msg: &str) {\n+    let err = panic::catch_unwind(op).err();\n+    assert_eq!(\n+        err.as_ref().and_then(|a| a.downcast_ref::<String>()).map(|s| &**s),\n+        Some(msg)\n+    );\n+}\n+\n+fn main() {\n+    unsafe {\n+        // Uninhabited types\n+        test_panic_msg(\n+            || mem::uninitialized::<!>(),\n+            \"attempted to instantiate uninhabited type `!`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<!>(),\n+            \"attempted to instantiate uninhabited type `!`\"\n+        );\n+        test_panic_msg(\n+            || MaybeUninit::<!>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `!`\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<Foo>(),\n+            \"attempted to instantiate uninhabited type `Foo`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<Foo>(),\n+            \"attempted to instantiate uninhabited type `Foo`\"\n+        );\n+        test_panic_msg(\n+            || MaybeUninit::<Foo>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `Foo`\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<Bar>(),\n+            \"attempted to instantiate uninhabited type `Bar`\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<Bar>(),\n+            \"attempted to instantiate uninhabited type `Bar`\"\n+        );\n+        test_panic_msg(\n+            || MaybeUninit::<Bar>::uninit().assume_init(),\n+            \"attempted to instantiate uninhabited type `Bar`\"\n+        );\n+\n+        // Types that do not like zero-initialziation\n+        test_panic_msg(\n+            || mem::uninitialized::<fn()>(),\n+            \"attempted to leave type `fn()` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<fn()>(),\n+            \"attempted to zero-initialize type `fn()`, which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<*const dyn Send>(),\n+            \"attempted to leave type `*const dyn std::marker::Send` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<*const dyn Send>(),\n+            \"attempted to zero-initialize type `*const dyn std::marker::Send`, which is invalid\"\n+        );\n+\n+        /* FIXME(#66151) we conservatively do not error here yet.\n+        test_panic_msg(\n+            || mem::uninitialized::<LR_NonZero>(),\n+            \"attempted to leave type `LR_NonZero` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<LR_NonZero>(),\n+            \"attempted to zero-initialize type `LR_NonZero`, which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<ManuallyDrop<LR_NonZero>>(),\n+            \"attempted to leave type `std::mem::ManuallyDrop<LR_NonZero>` uninitialized, \\\n+             which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<ManuallyDrop<LR_NonZero>>(),\n+            \"attempted to zero-initialize type `std::mem::ManuallyDrop<LR_NonZero>`, \\\n+             which is invalid\"\n+        );\n+\n+        test_panic_msg(\n+            || mem::uninitialized::<(NonNull<u32>, u32, u32)>(),\n+            \"attempted to leave type `(std::ptr::NonNull<u32>, u32, u32)` uninitialized, \\\n+                which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::zeroed::<(NonNull<u32>, u32, u32)>(),\n+            \"attempted to zero-initialize type `(std::ptr::NonNull<u32>, u32, u32)`, \\\n+                which is invalid\"\n+        );\n+        */\n+\n+        // Types that can be zero, but not uninit.\n+        test_panic_msg(\n+            || mem::uninitialized::<bool>(),\n+            \"attempted to leave type `bool` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::uninitialized::<LR>(),\n+            \"attempted to leave type `LR` uninitialized, which is invalid\"\n+        );\n+        test_panic_msg(\n+            || mem::uninitialized::<ManuallyDrop<LR>>(),\n+            \"attempted to leave type `std::mem::ManuallyDrop<LR>` uninitialized, which is invalid\"\n+        );\n+\n+        // Some things that should work.\n+        let _val = mem::zeroed::<bool>();\n+        let _val = mem::zeroed::<LR>();\n+        let _val = mem::zeroed::<ManuallyDrop<LR>>();\n+        let _val = mem::zeroed::<OneVariant>();\n+        let _val = mem::zeroed::<Option<&'static i32>>();\n+        let _val = mem::zeroed::<MaybeUninit<NonNull<u32>>>();\n+        let _val = mem::uninitialized::<MaybeUninit<bool>>();\n+\n+        // These are UB because they have not been officially blessed, but we await the resolution\n+        // of <https://github.com/rust-lang/unsafe-code-guidelines/issues/71> before doing\n+        // anything about that.\n+        let _val = mem::uninitialized::<i32>();\n+        let _val = mem::uninitialized::<*const ()>();\n+    }\n+}"}, {"sha": "e0c30160b9e94be9ff2ceb286ad6d04151e26029", "filename": "src/test/ui/never_type/panic-uninitialized-zeroed.rs", "status": "removed", "additions": 0, "deletions": 102, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15812785344d913d779d9738fe3cca8de56f71d5/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fpanic-uninitialized-zeroed.rs?ref=15812785344d913d779d9738fe3cca8de56f71d5", "patch": "@@ -1,102 +0,0 @@\n-// run-pass\n-// ignore-wasm32-bare compiled with panic=abort by default\n-// This test checks that instantiating an uninhabited type via `mem::{uninitialized,zeroed}` results\n-// in a runtime panic.\n-\n-#![feature(never_type)]\n-#![allow(deprecated, invalid_value)]\n-\n-use std::{mem, panic};\n-\n-#[allow(dead_code)]\n-struct Foo {\n-    x: u8,\n-    y: !,\n-}\n-\n-enum Bar {}\n-\n-fn main() {\n-    unsafe {\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::uninitialized::<!>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type !\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::zeroed::<!>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type !\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::MaybeUninit::<!>::uninit().assume_init()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type !\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::uninitialized::<Foo>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::zeroed::<Foo>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Foo>::uninit().assume_init()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Foo\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::uninitialized::<Bar>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::zeroed::<Bar>()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar\"\n-            })),\n-            Some(true)\n-        );\n-\n-        assert_eq!(\n-            panic::catch_unwind(|| {\n-                mem::MaybeUninit::<Bar>::uninit().assume_init()\n-            }).err().and_then(|a| a.downcast_ref::<String>().map(|s| {\n-                s == \"Attempted to instantiate uninhabited type Bar\"\n-            })),\n-            Some(true)\n-        );\n-    }\n-}"}]}