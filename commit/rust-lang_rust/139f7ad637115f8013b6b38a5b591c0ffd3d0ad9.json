{"sha": "139f7ad637115f8013b6b38a5b591c0ffd3d0ad9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzOWY3YWQ2MzcxMTVmODAxM2I2YjM4YTViNTkxYzBmZmQzZDBhZDk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-04T12:24:27Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-30T17:37:53Z"}, "message": "Only compute the trait_map once.", "tree": {"sha": "6173a9c5c2785ed62b097fb720d18880741cb337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6173a9c5c2785ed62b097fb720d18880741cb337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9", "html_url": "https://github.com/rust-lang/rust/commit/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59579907ab52ad2369735622185a26f158bf0f0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/59579907ab52ad2369735622185a26f158bf0f0f", "html_url": "https://github.com/rust-lang/rust/commit/59579907ab52ad2369735622185a26f158bf0f0f"}], "stats": {"total": 46, "additions": 19, "deletions": 27}, "files": [{"sha": "7202774292f532685cde5993bbfa621d184f687d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=139f7ad637115f8013b6b38a5b591c0ffd3d0ad9", "patch": "@@ -43,7 +43,8 @@ use rustc_ast::walk_list;\n use rustc_ast::{self as ast, *};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::captures::Captures;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n@@ -198,7 +199,7 @@ pub trait ResolverAstLowering {\n \n     fn next_node_id(&mut self) -> NodeId;\n \n-    fn trait_map(&self) -> &NodeMap<Vec<hir::TraitCandidate>>;\n+    fn trait_map(&mut self) -> NodeMap<Vec<hir::TraitCandidate>>;\n \n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId>;\n \n@@ -501,14 +502,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let proc_macros =\n             c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n \n-        let trait_map = self\n-            .resolver\n-            .trait_map()\n-            .iter()\n-            .filter_map(|(&k, v)| {\n-                self.node_id_to_hir_id.get(k).and_then(|id| id.as_ref()).map(|id| (*id, v.clone()))\n-            })\n-            .collect();\n+        let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n+        for (k, v) in self.resolver.trait_map().into_iter() {\n+            if let Some(Some(hir_id)) = self.node_id_to_hir_id.get(k) {\n+                let map = trait_map.entry(hir_id.owner).or_default();\n+                map.insert(hir_id.local_id, StableVec::new(v.to_vec()));\n+            }\n+        }\n \n         let mut def_id_to_hir_id = IndexVec::default();\n "}, {"sha": "8600276f05d2f7db72163ae6e4bc46027d092209", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=139f7ad637115f8013b6b38a5b591c0ffd3d0ad9", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-filelength\n use crate::def::{CtorKind, DefKind, Res};\n use crate::def_id::DefId;\n-crate use crate::hir_id::HirId;\n+crate use crate::hir_id::{HirId, ItemLocalId};\n use crate::{itemlikevisit, LangItem};\n \n use rustc_ast::util::parser::ExprPrecedence;\n@@ -10,6 +10,8 @@ use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, TraitObject\n pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::StableVec;\n use rustc_data_structures::sync::{par_for_each_in, Send, Sync};\n use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::Spanned;\n@@ -658,7 +660,9 @@ pub struct Crate<'hir> {\n     /// they are declared in the static array generated by proc_macro_harness.\n     pub proc_macros: Vec<HirId>,\n \n-    pub trait_map: BTreeMap<HirId, Vec<TraitCandidate>>,\n+    /// Map indicating what traits are in scope for places where this\n+    /// is relevant; generated by resolve.\n+    pub trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, StableVec<TraitCandidate>>>,\n \n     /// Collected attributes from HIR nodes.\n     pub attrs: BTreeMap<HirId, &'hir [Attribute]>,"}, {"sha": "9d7a1000b63adc7abfdf3ca7dbae26718b55dfc0", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=139f7ad637115f8013b6b38a5b591c0ffd3d0ad9", "patch": "@@ -1128,7 +1128,6 @@ rustc_queries! {\n     }\n     query in_scope_traits_map(_: LocalDefId)\n         -> Option<&'tcx FxHashMap<ItemLocalId, StableVec<TraitCandidate>>> {\n-        eval_always\n         desc { \"traits in scope at a block\" }\n     }\n "}, {"sha": "19a768689b8883879d6d54321856a6dd0c06c0e9", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=139f7ad637115f8013b6b38a5b591c0ffd3d0ad9", "patch": "@@ -966,10 +966,6 @@ pub struct GlobalCtxt<'tcx> {\n     /// Resolutions of `extern crate` items produced by resolver.\n     extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n \n-    /// Map indicating what traits are in scope for places where this\n-    /// is relevant; generated by resolve.\n-    trait_map: FxHashMap<LocalDefId, FxHashMap<ItemLocalId, StableVec<TraitCandidate>>>,\n-\n     /// Export map produced by name resolution.\n     export_map: ExportMap<LocalDefId>,\n \n@@ -1150,12 +1146,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         let common_consts = CommonConsts::new(&interners, &common_types);\n         let cstore = resolutions.cstore;\n \n-        let mut trait_map: FxHashMap<_, FxHashMap<_, _>> = FxHashMap::default();\n-        for (hir_id, v) in krate.trait_map.iter() {\n-            let map = trait_map.entry(hir_id.owner).or_default();\n-            map.insert(hir_id.local_id, StableVec::new(v.to_vec()));\n-        }\n-\n         GlobalCtxt {\n             sess: s,\n             lint_store,\n@@ -1169,7 +1159,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             consts: common_consts,\n             visibilities: resolutions.visibilities,\n             extern_crate_map: resolutions.extern_crate_map,\n-            trait_map,\n             export_map: resolutions.export_map,\n             maybe_unused_trait_imports: resolutions.maybe_unused_trait_imports,\n             maybe_unused_extern_crates: resolutions.maybe_unused_extern_crates,\n@@ -2793,7 +2782,7 @@ fn ptr_eq<T, U>(t: *const T, u: *const U) -> bool {\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    providers.in_scope_traits_map = |tcx, id| tcx.gcx.trait_map.get(&id);\n+    providers.in_scope_traits_map = |tcx, id| tcx.hir_crate(()).trait_map.get(&id);\n     providers.module_exports = |tcx, id| tcx.gcx.export_map.get(&id).map(|v| &v[..]);\n     providers.crate_name = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);"}, {"sha": "7f97be9434ce02b125ad691bb31205dcc820da74", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/139f7ad637115f8013b6b38a5b591c0ffd3d0ad9/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=139f7ad637115f8013b6b38a5b591c0ffd3d0ad9", "patch": "@@ -1138,8 +1138,8 @@ impl ResolverAstLowering for Resolver<'_> {\n         self.next_node_id()\n     }\n \n-    fn trait_map(&self) -> &NodeMap<Vec<TraitCandidate>> {\n-        &self.trait_map\n+    fn trait_map(&mut self) -> NodeMap<Vec<TraitCandidate>> {\n+        std::mem::take(&mut self.trait_map)\n     }\n \n     fn opt_local_def_id(&self, node: NodeId) -> Option<LocalDefId> {"}]}