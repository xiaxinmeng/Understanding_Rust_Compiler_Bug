{"sha": "6249989e6c133792ff457896d4723c0eb0f42137", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNDk5ODllNmMxMzM3OTJmZjQ1Nzg5NmQ0NzIzYzBlYjBmNDIxMzc=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-27T16:59:09Z"}, "committer": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-27T16:59:21Z"}, "message": "Process second review", "tree": {"sha": "a1739442c9f79c5c6addc0efc7d25a7da678ce02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1739442c9f79c5c6addc0efc7d25a7da678ce02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6249989e6c133792ff457896d4723c0eb0f42137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6249989e6c133792ff457896d4723c0eb0f42137", "html_url": "https://github.com/rust-lang/rust/commit/6249989e6c133792ff457896d4723c0eb0f42137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6249989e6c133792ff457896d4723c0eb0f42137/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3", "html_url": "https://github.com/rust-lang/rust/commit/f6eb44cd9e2a27d2004386c71fb6c72f79ba83b3"}], "stats": {"total": 79, "additions": 35, "deletions": 44}, "files": [{"sha": "37715a903a4ebbda2d826767d5fe38b07c1495a5", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 28, "deletions": 35, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6249989e6c133792ff457896d4723c0eb0f42137/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6249989e6c133792ff457896d4723c0eb0f42137/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=6249989e6c133792ff457896d4723c0eb0f42137", "patch": "@@ -470,12 +470,12 @@ impl Ty {\n         }\n         // add placeholders for args that were not provided\n         // TODO: handle defaults\n-        for _ in segment\n+        let supplied_params = segment\n             .args_and_bindings\n             .as_ref()\n             .map(|ga| ga.args.len())\n-            .unwrap_or(0)..def_generics.params.len()\n-        {\n+            .unwrap_or(0);\n+        for _ in supplied_params..def_generics.params.len() {\n             substs.push(Ty::Unknown);\n         }\n         assert_eq!(substs.len(), def_generics.params.len());\n@@ -507,7 +507,20 @@ impl Ty {\n                 }\n                 sig_mut.output.walk_mut(f);\n             }\n-            Ty::FnDef { substs, .. } | Ty::Adt { substs, .. } => {\n+            Ty::FnDef { substs, sig, .. } => {\n+                let sig_mut = Arc::make_mut(sig);\n+                for input in &mut sig_mut.input {\n+                    input.walk_mut(f);\n+                }\n+                sig_mut.output.walk_mut(f);\n+                // Without an Arc::make_mut_slice, we can't avoid the clone here:\n+                let mut v: Vec<_> = substs.0.iter().cloned().collect();\n+                for t in &mut v {\n+                    t.walk_mut(f);\n+                }\n+                substs.0 = v.into();\n+            }\n+            Ty::Adt { substs, .. } => {\n                 // Without an Arc::make_mut_slice, we can't avoid the clone here:\n                 let mut v: Vec<_> = substs.0.iter().cloned().collect();\n                 for t in &mut v {\n@@ -579,7 +592,7 @@ impl Ty {\n     /// or function); so if `self` is `Option<u32>`, this returns the `u32`.\n     fn substs(&self) -> Option<Substs> {\n         match self {\n-            Ty::Adt { substs, .. } => Some(substs.clone()),\n+            Ty::Adt { substs, .. } | Ty::FnDef { substs, .. } => Some(substs.clone()),\n             _ => None,\n         }\n     }\n@@ -617,9 +630,6 @@ impl fmt::Display for Ty {\n             Ty::FnDef {\n                 name, substs, sig, ..\n             } => {\n-                // don't have access to the param types here :-(\n-                // we could store them in the def, but not sure if it\n-                // is worth it\n                 write!(f, \"fn {}\", name)?;\n                 if substs.0.len() > 0 {\n                     join(substs.0.iter())\n@@ -1156,33 +1166,18 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             .into();\n         let typable = typable?;\n         let ty = self.db.type_for_def(typable);\n+        let generics = GenericParams::default();\n+        let substs = Ty::substs_from_path(\n+            self.db,\n+            &self.module,\n+            self.impl_block.as_ref(),\n+            &generics,\n+            path,\n+            typable,\n+        );\n+        let ty = ty.apply_substs(substs);\n         let ty = self.insert_type_vars(ty);\n \n-        // try to get generic parameters from the path and add them to the\n-        // function type substitutions\n-        if let Ty::FnDef { ref def, .. } = ty {\n-            let last_seg_bindings = path\n-                .segments\n-                .last()\n-                .and_then(|segment| segment.args_and_bindings.as_ref());\n-            if let Some(generic_args) = last_seg_bindings {\n-                let generic_params = def.generic_params(self.db);\n-                if generic_args.args.len() == generic_params.params.len() {\n-                    let substs = Ty::substs_from_path(\n-                        self.db,\n-                        &self.module,\n-                        self.impl_block.as_ref(),\n-                        &generic_params,\n-                        path,\n-                        (*def).into(),\n-                    );\n-                    return Some(ty.apply_substs(substs));\n-                } else {\n-                    // ERROR: incorrect number of type params\n-                }\n-            }\n-        }\n-\n         Some(ty)\n     }\n \n@@ -1408,8 +1403,6 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 Ty::Unknown\n             }\n             Expr::Call { callee, args } => {\n-                // TODO: we should use turbofish hints like this:\n-                // f::<u32>(x)\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let (param_tys, ret_ty) = match &callee_ty {\n                     Ty::FnPtr(sig) => (sig.input.clone(), sig.output.clone()),"}, {"sha": "a993232642020beb9bd20a6d1737b4b16a00b5a4", "filename": "crates/ra_hir/src/ty/snapshots/tests__infer_type_param.snap", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6249989e6c133792ff457896d4723c0eb0f42137/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_param.snap", "raw_url": "https://github.com/rust-lang/rust/raw/6249989e6c133792ff457896d4723c0eb0f42137/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_param.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fsnapshots%2Ftests__infer_type_param.snap?ref=6249989e6c133792ff457896d4723c0eb0f42137", "patch": "@@ -1,5 +1,5 @@\n ---\n-created: \"2019-01-26T18:16:16.568375+00:00\"\n+created: \"2019-01-27T16:54:18.368427685+00:00\"\n creator: insta@0.5.2\n expression: \"&result\"\n source: crates/ra_hir/src/ty/tests.rs\n@@ -10,7 +10,7 @@ source: crates/ra_hir/src/ty/tests.rs\n [44; 45) 'x': &[unknown]\n [56; 65) '{     x }': &[unknown]\n [62; 63) 'x': &[unknown]\n-[77; 197) '{     ...(1); }': ()\n+[77; 157) '{     ...(1); }': ()\n [87; 88) 'y': u32\n [91; 96) '10u32': u32\n [102; 104) 'id': fn id<u32>(T) -> T\n@@ -20,7 +20,7 @@ source: crates/ra_hir/src/ty/tests.rs\n [127; 132) 'clone': fn clone<bool>(&T) -> T\n [127; 135) 'clone(z)': bool\n [133; 134) 'z': &bool\n-[173; 191) 'id::<i...tring>': fn id<i32>(T) -> T\n-[173; 194) 'id::<i...ng>(1)': i32\n-[192; 193) '1': i32\n+[141; 151) 'id::<i128>': fn id<i128>(T) -> T\n+[141; 154) 'id::<i128>(1)': i128\n+[152; 153) '1': i128\n ", "previous_filename": "crates/ra_hir/src/ty/snapshots/tests__generic_fn.snap"}, {"sha": "ac12d974b89a0b94b5dc9b7b5e02921862b8bb42", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6249989e6c133792ff457896d4723c0eb0f42137/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6249989e6c133792ff457896d4723c0eb0f42137/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=6249989e6c133792ff457896d4723c0eb0f42137", "patch": "@@ -597,7 +597,7 @@ fn test() {\n #[test]\n fn infer_type_param() {\n     check_inference(\n-        \"generic_fn\",\n+        \"infer_type_param\",\n         r#\"\n fn id<T>(x: T) -> T {\n     x\n@@ -611,9 +611,7 @@ fn test() {\n     let y = 10u32;\n     id(y);\n     let x: bool = clone(z);\n-\n-    // bad turbofish - ignore!\n-    id::<i128, String>(1);\n+    id::<i128>(1);\n }\n \"#,\n     );"}]}