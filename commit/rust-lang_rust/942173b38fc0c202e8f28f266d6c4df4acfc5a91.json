{"sha": "942173b38fc0c202e8f28f266d6c4df4acfc5a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjE3M2IzOGZjMGMyMDJlOGYyOGYyNjZkNmM0ZGY0YWNmYzVhOTE=", "commit": {"author": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-03-18T14:42:07Z"}, "committer": {"name": "Stjepan Glavina", "email": "stjepang@gmail.com", "date": "2017-03-21T19:46:20Z"}, "message": "Fix grammar", "tree": {"sha": "7c7cd0b6305f686d3fd55d2e56eaa25cd13b445b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c7cd0b6305f686d3fd55d2e56eaa25cd13b445b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/942173b38fc0c202e8f28f266d6c4df4acfc5a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/942173b38fc0c202e8f28f266d6c4df4acfc5a91", "html_url": "https://github.com/rust-lang/rust/commit/942173b38fc0c202e8f28f266d6c4df4acfc5a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/942173b38fc0c202e8f28f266d6c4df4acfc5a91/comments", "author": null, "committer": null, "parents": [{"sha": "cfe6e13b119b311c8846b762d1dabe0d58eb5e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe6e13b119b311c8846b762d1dabe0d58eb5e5c", "html_url": "https://github.com/rust-lang/rust/commit/cfe6e13b119b311c8846b762d1dabe0d58eb5e5c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "9cd7009ad290868bdd80cb3acae7e50208731ecb", "filename": "src/libcore/slice/sort.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/942173b38fc0c202e8f28f266d6c4df4acfc5a91/src%2Flibcore%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942173b38fc0c202e8f28f266d6c4df4acfc5a91/src%2Flibcore%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fsort.rs?ref=942173b38fc0c202e8f28f266d6c4df4acfc5a91", "patch": "@@ -156,7 +156,7 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     // The partitioning algorithm repeats the following steps until completion:\n     //\n     // 1. Trace a block from the left side to identify elements greater than or equal to the pivot.\n-    // 2. Trace a block from the right side to identify elements less than the pivot.\n+    // 2. Trace a block from the right side to identify elements smaller than the pivot.\n     // 3. Exchange the identified elements between the left and right side.\n     //\n     // We keep the following variables for a block of elements:\n@@ -166,14 +166,14 @@ fn partition_in_blocks<T, F>(v: &mut [T], pivot: &T, is_less: &mut F) -> usize\n     // 3. `end` - End pointer into the `offsets` array.\n     // 4. `offsets - Indices of out-of-order elements within the block.\n \n-    // The current block on the left side: `v[l .. l + block_l]`.\n+    // The current block on the left side (from `l` to `l.offset(block_l)`).\n     let mut l = v.as_mut_ptr();\n     let mut block_l = BLOCK;\n     let mut start_l = ptr::null_mut();\n     let mut end_l = ptr::null_mut();\n     let mut offsets_l: [u8; BLOCK] = unsafe { mem::uninitialized() };\n \n-    // The current block on the right side: `v[r - block_r .. r]`.\n+    // The current block on the right side (from `r.offset(-block_r)` to `r`).\n     let mut r = unsafe { l.offset(v.len() as isize) };\n     let mut block_r = BLOCK;\n     let mut start_r = ptr::null_mut();"}]}