{"sha": "3bbb3e33295f4de11efb904192df1a3764d89e8d", "node_id": "C_kwDOAAsO6NoAKDNiYmIzZTMzMjk1ZjRkZTExZWZiOTA0MTkyZGYxYTM3NjRkODllOGQ", "commit": {"author": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2022-04-01T06:04:19Z"}, "committer": {"name": "Peter Jaszkowiak", "email": "p.jaszkow@gmail.com", "date": "2022-04-01T06:04:19Z"}, "message": "single_element_loop: handle arrays for Edition2021\n\nalso handle `.iter_mut()`, `.into_iter()`,\nand wrapping in parens if necessary", "tree": {"sha": "28c8f031215f56b6094388150220bb058e1db77d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28c8f031215f56b6094388150220bb058e1db77d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bbb3e33295f4de11efb904192df1a3764d89e8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbb3e33295f4de11efb904192df1a3764d89e8d", "html_url": "https://github.com/rust-lang/rust/commit/3bbb3e33295f4de11efb904192df1a3764d89e8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bbb3e33295f4de11efb904192df1a3764d89e8d/comments", "author": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pitaj", "id": 803701, "node_id": "MDQ6VXNlcjgwMzcwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/803701?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pitaj", "html_url": "https://github.com/pitaj", "followers_url": "https://api.github.com/users/pitaj/followers", "following_url": "https://api.github.com/users/pitaj/following{/other_user}", "gists_url": "https://api.github.com/users/pitaj/gists{/gist_id}", "starred_url": "https://api.github.com/users/pitaj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pitaj/subscriptions", "organizations_url": "https://api.github.com/users/pitaj/orgs", "repos_url": "https://api.github.com/users/pitaj/repos", "events_url": "https://api.github.com/users/pitaj/events{/privacy}", "received_events_url": "https://api.github.com/users/pitaj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ebe766695e66a97775e4992d3d08f74ce2a7270", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ebe766695e66a97775e4992d3d08f74ce2a7270", "html_url": "https://github.com/rust-lang/rust/commit/8ebe766695e66a97775e4992d3d08f74ce2a7270"}], "stats": {"total": 188, "additions": 172, "deletions": 16}, "files": [{"sha": "a0bd7ad0ac647fb7d0f606e932b15a7e5a5031b3", "filename": "clippy_lints/src/loops/single_element_loop.rs", "status": "modified", "additions": 63, "deletions": 7, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3bbb3e33295f4de11efb904192df1a3764d89e8d/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbb3e33295f4de11efb904192df1a3764d89e8d/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs?ref=3bbb3e33295f4de11efb904192df1a3764d89e8d", "patch": "@@ -2,9 +2,12 @@ use super::SINGLE_ELEMENT_LOOP;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::{indent_of, snippet_with_applicability};\n use if_chain::if_chain;\n+use rustc_ast::util::parser::PREC_PREFIX;\n+use rustc_ast::Mutability;\n use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, Pat};\n+use rustc_hir::{is_range_literal, BorrowKind, Expr, ExprKind, Pat};\n use rustc_lint::LateContext;\n+use rustc_span::edition::Edition;\n \n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n@@ -13,31 +16,84 @@ pub(super) fn check<'tcx>(\n     body: &'tcx Expr<'_>,\n     expr: &'tcx Expr<'_>,\n ) {\n-    let arg_expr = match arg.kind {\n-        ExprKind::AddrOf(BorrowKind::Ref, _, ref_arg) => ref_arg,\n-        ExprKind::MethodCall(method, [arg], _) if method.ident.name == rustc_span::sym::iter => arg,\n+    let (arg_expression, prefix) = match arg.kind {\n+        ExprKind::AddrOf(\n+            BorrowKind::Ref,\n+            Mutability::Not,\n+            Expr {\n+                kind: ExprKind::Array([arg]),\n+                ..\n+            },\n+        ) => (arg, \"&\"),\n+        ExprKind::AddrOf(\n+            BorrowKind::Ref,\n+            Mutability::Mut,\n+            Expr {\n+                kind: ExprKind::Array([arg]),\n+                ..\n+            },\n+        ) => (arg, \"&mut \"),\n+        ExprKind::MethodCall(\n+            method,\n+            [\n+                Expr {\n+                    kind: ExprKind::Array([arg]),\n+                    ..\n+                },\n+            ],\n+            _,\n+        ) if method.ident.name == rustc_span::sym::iter => (arg, \"&\"),\n+        ExprKind::MethodCall(\n+            method,\n+            [\n+                Expr {\n+                    kind: ExprKind::Array([arg]),\n+                    ..\n+                },\n+            ],\n+            _,\n+        ) if method.ident.name.as_str() == \"iter_mut\" => (arg, \"&mut \"),\n+        ExprKind::MethodCall(\n+            method,\n+            [\n+                Expr {\n+                    kind: ExprKind::Array([arg]),\n+                    ..\n+                },\n+            ],\n+            _,\n+        ) if method.ident.name == rustc_span::sym::into_iter => (arg, \"\"),\n+        // Only check for arrays edition 2021 or later, as this case will trigger a compiler error otherwise.\n+        ExprKind::Array([arg]) if cx.tcx.sess.edition() >= Edition::Edition2021 => (arg, \"\"),\n         _ => return,\n     };\n     if_chain! {\n-        if let ExprKind::Array([arg_expression]) = arg_expr.kind;\n         if let ExprKind::Block(block, _) = body.kind;\n         if !block.stmts.is_empty();\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n             let pat_snip = snippet_with_applicability(cx, pat.span, \"..\", &mut applicability);\n-            let arg_snip = snippet_with_applicability(cx, arg_expression.span, \"..\", &mut applicability);\n+            let mut arg_snip = snippet_with_applicability(cx, arg_expression.span, \"..\", &mut applicability);\n             let mut block_str = snippet_with_applicability(cx, block.span, \"..\", &mut applicability).into_owned();\n             block_str.remove(0);\n             block_str.pop();\n             let indent = \" \".repeat(indent_of(cx, block.stmts[0].span).unwrap_or(0));\n \n+            // Reference iterator from `&(mut) []` or `[].iter(_mut)()`.\n+            if !prefix.is_empty() && (\n+                // Precedence of internal expression is less than or equal to precedence of `&expr`.\n+                arg_expression.precedence().order() <= PREC_PREFIX || is_range_literal(arg_expression)\n+            ) {\n+                arg_snip = format!(\"({arg_snip})\").into();\n+            }\n+\n             span_lint_and_sugg(\n                 cx,\n                 SINGLE_ELEMENT_LOOP,\n                 expr.span,\n                 \"for loop over a single element\",\n                 \"try\",\n-                format!(\"{{\\n{}let {} = &{};{}}}\", indent, pat_snip, arg_snip, block_str),\n+                format!(\"{{\\n{indent}let {pat_snip} = {prefix}{arg_snip};{block_str}}}\"),\n                 applicability,\n             )\n         }"}, {"sha": "63d31ff83f9b5c508f09fa556ba5ee2421bd0cc4", "filename": "tests/ui/single_element_loop.fixed", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3bbb3e33295f4de11efb904192df1a3764d89e8d/tests%2Fui%2Fsingle_element_loop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3bbb3e33295f4de11efb904192df1a3764d89e8d/tests%2Fui%2Fsingle_element_loop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_element_loop.fixed?ref=3bbb3e33295f4de11efb904192df1a3764d89e8d", "patch": "@@ -6,11 +6,31 @@ fn main() {\n     let item1 = 2;\n     {\n         let item = &item1;\n-        println!(\"{}\", item);\n+        dbg!(item);\n     }\n \n     {\n         let item = &item1;\n-        println!(\"{:?}\", item);\n+        dbg!(item);\n+    }\n+\n+    {\n+        let item = &(0..5);\n+        dbg!(item);\n+    }\n+\n+    {\n+        let item = &mut (0..5);\n+        dbg!(item);\n+    }\n+\n+    {\n+        let item = 0..5;\n+        dbg!(item);\n+    }\n+\n+    {\n+        let item = 0..5;\n+        dbg!(item);\n     }\n }"}, {"sha": "2cda5a329d254fb496dec9dca41bfa899142ed4c", "filename": "tests/ui/single_element_loop.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bbb3e33295f4de11efb904192df1a3764d89e8d/tests%2Fui%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bbb3e33295f4de11efb904192df1a3764d89e8d/tests%2Fui%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_element_loop.rs?ref=3bbb3e33295f4de11efb904192df1a3764d89e8d", "patch": "@@ -5,10 +5,26 @@\n fn main() {\n     let item1 = 2;\n     for item in &[item1] {\n-        println!(\"{}\", item);\n+        dbg!(item);\n     }\n \n     for item in [item1].iter() {\n-        println!(\"{:?}\", item);\n+        dbg!(item);\n+    }\n+\n+    for item in &[0..5] {\n+        dbg!(item);\n+    }\n+\n+    for item in [0..5].iter_mut() {\n+        dbg!(item);\n+    }\n+\n+    for item in [0..5] {\n+        dbg!(item);\n+    }\n+\n+    for item in [0..5].into_iter() {\n+        dbg!(item);\n     }\n }"}, {"sha": "0aeb8da1a2e23e6dac4c85f1be745ede77c4c830", "filename": "tests/ui/single_element_loop.stderr", "status": "modified", "additions": 69, "deletions": 5, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/3bbb3e33295f4de11efb904192df1a3764d89e8d/tests%2Fui%2Fsingle_element_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bbb3e33295f4de11efb904192df1a3764d89e8d/tests%2Fui%2Fsingle_element_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_element_loop.stderr?ref=3bbb3e33295f4de11efb904192df1a3764d89e8d", "patch": "@@ -2,7 +2,7 @@ error: for loop over a single element\n   --> $DIR/single_element_loop.rs:7:5\n    |\n LL | /     for item in &[item1] {\n-LL | |         println!(\"{}\", item);\n+LL | |         dbg!(item);\n LL | |     }\n    | |_____^\n    |\n@@ -11,25 +11,89 @@ help: try\n    |\n LL ~     {\n LL +         let item = &item1;\n-LL +         println!(\"{}\", item);\n+LL +         dbg!(item);\n LL +     }\n    |\n \n error: for loop over a single element\n   --> $DIR/single_element_loop.rs:11:5\n    |\n LL | /     for item in [item1].iter() {\n-LL | |         println!(\"{:?}\", item);\n+LL | |         dbg!(item);\n LL | |     }\n    | |_____^\n    |\n help: try\n    |\n LL ~     {\n LL +         let item = &item1;\n-LL +         println!(\"{:?}\", item);\n+LL +         dbg!(item);\n LL +     }\n    |\n \n-error: aborting due to 2 previous errors\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:15:5\n+   |\n+LL | /     for item in &[0..5] {\n+LL | |         dbg!(item);\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     {\n+LL +         let item = &(0..5);\n+LL +         dbg!(item);\n+LL +     }\n+   |\n+\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:19:5\n+   |\n+LL | /     for item in [0..5].iter_mut() {\n+LL | |         dbg!(item);\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     {\n+LL +         let item = &mut (0..5);\n+LL +         dbg!(item);\n+LL +     }\n+   |\n+\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:23:5\n+   |\n+LL | /     for item in [0..5] {\n+LL | |         dbg!(item);\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     {\n+LL +         let item = 0..5;\n+LL +         dbg!(item);\n+LL +     }\n+   |\n+\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:27:5\n+   |\n+LL | /     for item in [0..5].into_iter() {\n+LL | |         dbg!(item);\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     {\n+LL +         let item = 0..5;\n+LL +         dbg!(item);\n+LL +     }\n+   |\n+\n+error: aborting due to 6 previous errors\n "}]}