{"sha": "133e1d677333fe683a75fac6d6344e7073fb96af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzM2UxZDY3NzMzM2ZlNjgzYTc1ZmFjNmQ2MzQ0ZTcwNzNmYjk2YWY=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:17:28Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:17:28Z"}, "message": "clippy", "tree": {"sha": "97746abec73963a52630d87a22af2a0e03017aa2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97746abec73963a52630d87a22af2a0e03017aa2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/133e1d677333fe683a75fac6d6344e7073fb96af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/133e1d677333fe683a75fac6d6344e7073fb96af", "html_url": "https://github.com/rust-lang/rust/commit/133e1d677333fe683a75fac6d6344e7073fb96af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/133e1d677333fe683a75fac6d6344e7073fb96af/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61", "html_url": "https://github.com/rust-lang/rust/commit/6ce37fab95ddd9ac8716ae96dc2f86251a8c4a61"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "679aaec9fcd6c4402da0ea5ddff7756f950b4c52", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/133e1d677333fe683a75fac6d6344e7073fb96af/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133e1d677333fe683a75fac6d6344e7073fb96af/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=133e1d677333fe683a75fac6d6344e7073fb96af", "patch": "@@ -4,7 +4,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n+use rustc_middle::ty::{GenericPredicates, PredicateAtom, ProjectionPredicate, TraitPredicate};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{BytePos, Span};\n \n@@ -42,8 +42,8 @@ fn get_trait_predicates_for_trait_id<'tcx>(\n     let mut preds = Vec::new();\n     for (pred, _) in generics.predicates {\n         if_chain! {\n-            if let PredicateKind::Trait(poly_trait_pred, _) = pred.kind();\n-            let trait_pred = cx.tcx.erase_late_bound_regions(&poly_trait_pred);\n+            if let PredicateAtom::Trait(poly_trait_pred, _) = pred.skip_binders();\n+            let trait_pred = cx.tcx.erase_late_bound_regions(&ty::Binder::bind(poly_trait_pred));\n             if let Some(trait_def_id) = trait_id;\n             if trait_def_id == trait_pred.trait_ref.def_id;\n             then {\n@@ -60,8 +60,8 @@ fn get_projection_pred<'tcx>(\n     pred: TraitPredicate<'tcx>,\n ) -> Option<ProjectionPredicate<'tcx>> {\n     generics.predicates.iter().find_map(|(proj_pred, _)| {\n-        if let PredicateKind::Projection(proj_pred) = proj_pred.kind() {\n-            let projection_pred = cx.tcx.erase_late_bound_regions(proj_pred);\n+        if let ty::PredicateAtom::Projection(proj_pred) = proj_pred.skip_binders() {\n+            let projection_pred = cx.tcx.erase_late_bound_regions(&ty::Binder::bind(proj_pred));\n             if projection_pred.projection_ty.substs == pred.trait_ref.substs {\n                 return Some(projection_pred);\n             }"}]}