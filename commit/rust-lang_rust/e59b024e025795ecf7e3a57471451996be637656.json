{"sha": "e59b024e025795ecf7e3a57471451996be637656", "node_id": "C_kwDOAAsO6NoAKGU1OWIwMjRlMDI1Nzk1ZWNmN2UzYTU3NDcxNDUxOTk2YmU2Mzc2NTY", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-10T14:48:05Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-01-17T17:06:30Z"}, "message": "Pass target_features set instead of has_feature closure\n\nThis avoids unnecessary monomorphizations in codegen backends", "tree": {"sha": "f6fb1e70e3dfcd9f88a8d72b482da21e9c7c65c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6fb1e70e3dfcd9f88a8d72b482da21e9c7c65c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e59b024e025795ecf7e3a57471451996be637656", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e59b024e025795ecf7e3a57471451996be637656", "html_url": "https://github.com/rust-lang/rust/commit/e59b024e025795ecf7e3a57471451996be637656", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e59b024e025795ecf7e3a57471451996be637656/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48abe3c6fa29dbedc611e22c6acde7d0022219f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/48abe3c6fa29dbedc611e22c6acde7d0022219f4", "html_url": "https://github.com/rust-lang/rust/commit/48abe3c6fa29dbedc611e22c6acde7d0022219f4"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "c242c75ed18ffcf9adb84a9284965fa23e6cb510", "filename": "src/inline_asm.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e59b024e025795ecf7e3a57471451996be637656/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e59b024e025795ecf7e3a57471451996be637656/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=e59b024e025795ecf7e3a57471451996be637656", "patch": "@@ -182,11 +182,7 @@ struct InlineAssemblyGenerator<'a, 'tcx> {\n impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n     fn allocate_registers(&mut self) {\n         let sess = self.tcx.sess;\n-        let map = allocatable_registers(\n-            self.arch,\n-            |feature| sess.target_features.contains(&feature),\n-            &sess.target,\n-        );\n+        let map = allocatable_registers(self.arch, &sess.target_features, &sess.target);\n         let mut allocated = FxHashMap::<_, (bool, bool)>::default();\n         let mut regs = vec![None; self.operands.len()];\n \n@@ -319,7 +315,7 @@ impl<'tcx> InlineAssemblyGenerator<'_, 'tcx> {\n         // Allocate stack slots for saving clobbered registers\n         let abi_clobber = InlineAsmClobberAbi::parse(\n             self.arch,\n-            |feature| self.tcx.sess.target_features.contains(&feature),\n+            &self.tcx.sess.target_features,\n             &self.tcx.sess.target,\n             sym::C,\n         )"}]}