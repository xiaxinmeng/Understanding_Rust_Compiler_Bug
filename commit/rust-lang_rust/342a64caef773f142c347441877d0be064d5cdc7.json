{"sha": "342a64caef773f142c347441877d0be064d5cdc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MmE2NGNhZWY3NzNmMTQyYzM0NzQ0MTg3N2QwYmUwNjRkNWNkYzc=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-02-17T22:20:59Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:31Z"}, "message": "Check that asm const operands are actually constants", "tree": {"sha": "313d53aeb12a1bd931049e006804d86544abec2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/313d53aeb12a1bd931049e006804d86544abec2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342a64caef773f142c347441877d0be064d5cdc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342a64caef773f142c347441877d0be064d5cdc7", "html_url": "https://github.com/rust-lang/rust/commit/342a64caef773f142c347441877d0be064d5cdc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342a64caef773f142c347441877d0be064d5cdc7/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e7b24608631cc1405872631a155fb4e8d52329e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7b24608631cc1405872631a155fb4e8d52329e", "html_url": "https://github.com/rust-lang/rust/commit/1e7b24608631cc1405872631a155fb4e8d52329e"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "13a8b9a1000c957523c1bd11a8991a566cd775f7", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 65, "deletions": 16, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/342a64caef773f142c347441877d0be064d5cdc7/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342a64caef773f142c347441877d0be064d5cdc7/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=342a64caef773f142c347441877d0be064d5cdc7", "patch": "@@ -113,14 +113,17 @@ pub enum Candidate {\n     /// the attribute currently provides the semantic requirement that arguments\n     /// must be constant.\n     Argument { bb: BasicBlock, index: usize },\n+\n+    /// `const` operand in asm!.\n+    InlineAsm { bb: BasicBlock, index: usize },\n }\n \n impl Candidate {\n     /// Returns `true` if we should use the \"explicit\" rules for promotability for this `Candidate`.\n     fn forces_explicit_promotion(&self) -> bool {\n         match self {\n             Candidate::Ref(_) | Candidate::Repeat(_) => false,\n-            Candidate::Argument { .. } => true,\n+            Candidate::Argument { .. } | Candidate::InlineAsm { .. } => true,\n         }\n     }\n }\n@@ -216,25 +219,39 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n     fn visit_terminator_kind(&mut self, kind: &TerminatorKind<'tcx>, location: Location) {\n         self.super_terminator_kind(kind, location);\n \n-        if let TerminatorKind::Call { ref func, .. } = *kind {\n-            if let ty::FnDef(def_id, _) = func.ty(self.ccx.body, self.ccx.tcx).kind {\n-                let fn_sig = self.ccx.tcx.fn_sig(def_id);\n-                if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n-                    let name = self.ccx.tcx.item_name(def_id);\n-                    // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n-                    if name.as_str().starts_with(\"simd_shuffle\") {\n-                        self.candidates.push(Candidate::Argument { bb: location.block, index: 2 });\n+        match *kind {\n+            TerminatorKind::Call { ref func, .. } => {\n+                if let ty::FnDef(def_id, _) = func.ty(self.ccx.body, self.ccx.tcx).kind {\n+                    let fn_sig = self.ccx.tcx.fn_sig(def_id);\n+                    if let Abi::RustIntrinsic | Abi::PlatformIntrinsic = fn_sig.abi() {\n+                        let name = self.ccx.tcx.item_name(def_id);\n+                        // FIXME(eddyb) use `#[rustc_args_required_const(2)]` for shuffles.\n+                        if name.as_str().starts_with(\"simd_shuffle\") {\n+                            self.candidates\n+                                .push(Candidate::Argument { bb: location.block, index: 2 });\n+\n+                            return; // Don't double count `simd_shuffle` candidates\n+                        }\n+                    }\n \n-                        return; // Don't double count `simd_shuffle` candidates\n+                    if let Some(constant_args) = args_required_const(self.ccx.tcx, def_id) {\n+                        for index in constant_args {\n+                            self.candidates.push(Candidate::Argument { bb: location.block, index });\n+                        }\n                     }\n                 }\n-\n-                if let Some(constant_args) = args_required_const(self.ccx.tcx, def_id) {\n-                    for index in constant_args {\n-                        self.candidates.push(Candidate::Argument { bb: location.block, index });\n+            }\n+            TerminatorKind::InlineAsm { ref operands, .. } => {\n+                for (index, op) in operands.iter().enumerate() {\n+                    match op {\n+                        InlineAsmOperand::Const { .. } => {\n+                            self.candidates.push(Candidate::InlineAsm { bb: location.block, index })\n+                        }\n+                        _ => {}\n                     }\n                 }\n             }\n+            _ => {}\n         }\n     }\n \n@@ -402,6 +419,18 @@ impl<'tcx> Validator<'_, 'tcx> {\n                     _ => bug!(),\n                 }\n             }\n+            Candidate::InlineAsm { bb, index } => {\n+                assert!(self.explicit);\n+\n+                let terminator = self.body[bb].terminator();\n+                match &terminator.kind {\n+                    TerminatorKind::InlineAsm { operands, .. } => match &operands[index] {\n+                        InlineAsmOperand::Const { value } => self.validate_operand(value),\n+                        _ => bug!(),\n+                    },\n+                    _ => bug!(),\n+                }\n+            }\n         }\n     }\n \n@@ -747,7 +776,9 @@ pub fn validate_candidates(\n             }\n \n             match candidate {\n-                Candidate::Argument { bb, index } if !is_promotable => {\n+                Candidate::Argument { bb, index } | Candidate::InlineAsm { bb, index }\n+                    if !is_promotable =>\n+                {\n                     let span = ccx.body[bb].terminator().source_info.span;\n                     let msg = format!(\"argument {} is required to be a constant\", index + 1);\n                     ccx.tcx.sess.span_err(span, &msg);\n@@ -1024,6 +1055,24 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                         _ => bug!(),\n                     }\n                 }\n+                Candidate::InlineAsm { bb, index } => {\n+                    let terminator = blocks[bb].terminator_mut();\n+                    match terminator.kind {\n+                        TerminatorKind::InlineAsm { ref mut operands, .. } => {\n+                            match &mut operands[index] {\n+                                InlineAsmOperand::Const { ref mut value } => {\n+                                    let ty = value.ty(local_decls, self.tcx);\n+                                    let span = terminator.source_info.span;\n+\n+                                    Rvalue::Use(mem::replace(value, promoted_operand(ty, span)))\n+                                }\n+                                _ => bug!(),\n+                            }\n+                        }\n+\n+                        _ => bug!(),\n+                    }\n+                }\n             }\n         };\n \n@@ -1080,7 +1129,7 @@ pub fn promote_candidates<'tcx>(\n                     }\n                 }\n             }\n-            Candidate::Argument { .. } => {}\n+            Candidate::Argument { .. } | Candidate::InlineAsm { .. } => {}\n         }\n \n         // Declare return place local so that `mir::Body::new` doesn't complain."}]}