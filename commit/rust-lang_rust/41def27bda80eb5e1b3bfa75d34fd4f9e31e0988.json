{"sha": "41def27bda80eb5e1b3bfa75d34fd4f9e31e0988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxZGVmMjdiZGE4MGViNWUxYjNiZmE3NWQzNGZkNGY5ZTMxZTA5ODg=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-12-17T12:37:26Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-12-22T15:06:22Z"}, "message": "Add `--pretty everybody_loops` option.\n\nThis prints out a transformed version of the input source code where\nevery function body is replaced with `loop { }`.\n\nAll such bodies are (1.) trivial and (2.) guaranteed to pass the\ntype-checker in a valid compiler; therefore they make very nice input\nto start with when narrowing down a bug exposed by a large test input\n(such as librustc itself).", "tree": {"sha": "bbef161ea1145e345fb5ee7e3d62241e13db4da9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbef161ea1145e345fb5ee7e3d62241e13db4da9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41def27bda80eb5e1b3bfa75d34fd4f9e31e0988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41def27bda80eb5e1b3bfa75d34fd4f9e31e0988", "html_url": "https://github.com/rust-lang/rust/commit/41def27bda80eb5e1b3bfa75d34fd4f9e31e0988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41def27bda80eb5e1b3bfa75d34fd4f9e31e0988/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e711e2d89b4ad588d1f7225288b714f0b751cf7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e711e2d89b4ad588d1f7225288b714f0b751cf7d", "html_url": "https://github.com/rust-lang/rust/commit/e711e2d89b4ad588d1f7225288b714f0b751cf7d"}], "stats": {"total": 75, "additions": 74, "deletions": 1}, "files": [{"sha": "266907e0bcdbeb50bd7bf11c03229deab5c97746", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 74, "deletions": 1, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/41def27bda80eb5e1b3bfa75d34fd4f9e31e0988/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41def27bda80eb5e1b3bfa75d34fd4f9e31e0988/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=41def27bda80eb5e1b3bfa75d34fd4f9e31e0988", "patch": "@@ -30,7 +30,10 @@ use rustc_borrowck::graphviz as borrowck_dot;\n \n use syntax::ast;\n use syntax::ast_map::{mod, blocks, NodePrinter};\n+use syntax::codemap;\n+use syntax::fold::{mod, Folder};\n use syntax::print::{pp, pprust};\n+use syntax::ptr::P;\n \n use graphviz as dot;\n \n@@ -42,6 +45,7 @@ use arena::TypedArena;\n #[deriving(Copy, PartialEq, Show)]\n pub enum PpSourceMode {\n     PpmNormal,\n+    PpmEveryBodyLoops,\n     PpmExpanded,\n     PpmTyped,\n     PpmIdentified,\n@@ -61,6 +65,7 @@ pub fn parse_pretty(sess: &Session, name: &str) -> (PpMode, Option<UserIdentifie\n     let opt_second = split.next();\n     let first = match first {\n         \"normal\"       => PpmSource(PpmNormal),\n+        \"everybody_loops\" => PpmSource(PpmEveryBodyLoops),\n         \"expanded\"     => PpmSource(PpmExpanded),\n         \"typed\"        => PpmSource(PpmTyped),\n         \"expanded,identified\" => PpmSource(PpmExpandedIdentified),\n@@ -105,7 +110,7 @@ impl PpSourceMode {\n         F: FnOnce(&PrinterSupport, B) -> A,\n     {\n         match *self {\n-            PpmNormal | PpmExpanded => {\n+            PpmNormal | PpmEveryBodyLoops | PpmExpanded => {\n                 let annotation = NoAnn { sess: sess, ast_map: ast_map };\n                 f(&annotation, payload)\n             }\n@@ -384,6 +389,7 @@ impl UserIdentifiedItem {\n fn needs_ast_map(ppm: &PpMode, opt_uii: &Option<UserIdentifiedItem>) -> bool {\n     match *ppm {\n         PpmSource(PpmNormal) |\n+        PpmSource(PpmEveryBodyLoops) |\n         PpmSource(PpmIdentified) => opt_uii.is_some(),\n \n         PpmSource(PpmExpanded) |\n@@ -397,6 +403,7 @@ fn needs_ast_map(ppm: &PpMode, opt_uii: &Option<UserIdentifiedItem>) -> bool {\n fn needs_expansion(ppm: &PpMode) -> bool {\n     match *ppm {\n         PpmSource(PpmNormal) |\n+        PpmSource(PpmEveryBodyLoops) |\n         PpmSource(PpmIdentified) => false,\n \n         PpmSource(PpmExpanded) |\n@@ -407,13 +414,79 @@ fn needs_expansion(ppm: &PpMode) -> bool {\n     }\n }\n \n+struct ReplaceBodyWithLoop {\n+    within_static_or_const: bool,\n+}\n+\n+impl ReplaceBodyWithLoop {\n+    fn new() -> ReplaceBodyWithLoop {\n+        ReplaceBodyWithLoop { within_static_or_const: false }\n+    }\n+}\n+\n+impl fold::Folder for ReplaceBodyWithLoop {\n+    fn fold_item_underscore(&mut self, i: ast::Item_) -> ast::Item_ {\n+        match i {\n+            ast::ItemStatic(..) | ast::ItemConst(..) => {\n+                self.within_static_or_const = true;\n+                let ret = fold::noop_fold_item_underscore(i, self);\n+                self.within_static_or_const = false;\n+                return ret;\n+            }\n+            _ => {\n+                fold::noop_fold_item_underscore(i, self)\n+            }\n+        }\n+    }\n+\n+\n+    fn fold_block(&mut self, b: P<ast::Block>) -> P<ast::Block> {\n+        fn expr_to_block(rules: ast::BlockCheckMode,\n+                         e: Option<P<ast::Expr>>) -> P<ast::Block> {\n+            P(ast::Block {\n+                expr: e,\n+                view_items: vec![], stmts: vec![], rules: rules,\n+                id: ast::DUMMY_NODE_ID, span: codemap::DUMMY_SP,\n+            })\n+        }\n+\n+        if !self.within_static_or_const {\n+\n+            let empty_block = expr_to_block(ast::DefaultBlock, None);\n+            let loop_expr = P(ast::Expr {\n+                node: ast::ExprLoop(empty_block, None),\n+                id: ast::DUMMY_NODE_ID, span: codemap::DUMMY_SP\n+            });\n+\n+            expr_to_block(b.rules, Some(loop_expr))\n+\n+        } else {\n+            fold::noop_fold_block(b, self)\n+        }\n+    }\n+\n+    // in general the pretty printer processes unexpanded code, so\n+    // we override the default `fold_mac` method which panics.\n+    fn fold_mac(&mut self, _macro: ast::Mac) -> ast::Mac {\n+        fold::noop_fold_mac(_macro, self)\n+    }\n+}\n+\n pub fn pretty_print_input(sess: Session,\n                           cfg: ast::CrateConfig,\n                           input: &Input,\n                           ppm: PpMode,\n                           opt_uii: Option<UserIdentifiedItem>,\n                           ofile: Option<Path>) {\n     let krate = driver::phase_1_parse_input(&sess, cfg, input);\n+\n+    let krate = if let PpmSource(PpmEveryBodyLoops) = ppm {\n+        let mut fold = ReplaceBodyWithLoop::new();\n+        fold.fold_crate(krate)\n+    } else {\n+        krate\n+    };\n+\n     let id = link::find_crate_name(Some(&sess), krate.attrs.as_slice(), input);\n \n     let is_expanded = needs_expansion(&ppm);"}]}