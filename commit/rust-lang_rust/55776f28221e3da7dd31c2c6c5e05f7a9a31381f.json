{"sha": "55776f28221e3da7dd31c2c6c5e05f7a9a31381f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1Nzc2ZjI4MjIxZTNkYTdkZDMxYzJjNmM1ZTA1ZjdhOWEzMTM4MWY=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-05-19T22:03:48Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-05-28T19:42:21Z"}, "message": "Parse macros in patterns\n\nFixes #6830.", "tree": {"sha": "5f4732c2ee2c787da7a62883048749d7fa35c7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f4732c2ee2c787da7a62883048749d7fa35c7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55776f28221e3da7dd31c2c6c5e05f7a9a31381f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55776f28221e3da7dd31c2c6c5e05f7a9a31381f", "html_url": "https://github.com/rust-lang/rust/commit/55776f28221e3da7dd31c2c6c5e05f7a9a31381f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55776f28221e3da7dd31c2c6c5e05f7a9a31381f/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2f6dd53c95c866e206798976cfcc2f9a9b2fe2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f6dd53c95c866e206798976cfcc2f9a9b2fe2a", "html_url": "https://github.com/rust-lang/rust/commit/b2f6dd53c95c866e206798976cfcc2f9a9b2fe2a"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "65ad83d4b4fb15948635ab7cf55fc8adc6605bc1", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/55776f28221e3da7dd31c2c6c5e05f7a9a31381f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55776f28221e3da7dd31c2c6c5e05f7a9a31381f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=55776f28221e3da7dd31c2c6c5e05f7a9a31381f", "patch": "@@ -2911,15 +2911,28 @@ impl<'a> Parser<'a> {\n                 pat = PatRange(start, end);\n             } else if is_plain_ident(&self.token) && !can_be_enum_or_struct {\n                 let name = self.parse_path(NoTypesAllowed).path;\n-                let sub;\n-                if self.eat(&token::AT) {\n-                    // parse foo @ pat\n-                    sub = Some(self.parse_pat());\n+                if self.eat(&token::NOT) {\n+                    // macro invocation\n+                    let ket = token::close_delimiter_for(&self.token)\n+                                    .unwrap_or_else(|| self.fatal(\"expected open delimiter\"));\n+                    self.bump();\n+\n+                    let tts = self.parse_seq_to_end(&ket,\n+                                                    seq_sep_none(),\n+                                                    |p| p.parse_token_tree());\n+\n+                    let mac = MacInvocTT(name, tts, EMPTY_CTXT);\n+                    pat = ast::PatMac(codemap::Spanned {node: mac, span: self.span});\n                 } else {\n-                    // or just foo\n-                    sub = None;\n+                    let sub = if self.eat(&token::AT) {\n+                        // parse foo @ pat\n+                        Some(self.parse_pat())\n+                    } else {\n+                        // or just foo\n+                        None\n+                    };\n+                    pat = PatIdent(BindByValue(MutImmutable), name, sub);\n                 }\n-                pat = PatIdent(BindByValue(MutImmutable), name, sub);\n             } else {\n                 // parse an enum pat\n                 let enum_path = self.parse_path(LifetimeAndTypesWithColons)"}]}