{"sha": "a9b5b36769b224080779c14e5d297ef21049cde9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YjViMzY3NjliMjI0MDgwNzc5YzE0ZTVkMjk3ZWYyMTA0OWNkZTk=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-10T13:14:26Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-11-10T13:53:08Z"}, "message": "Fix `to_digit_is_some` dogfood errors", "tree": {"sha": "ac3cd5c949c13444840948787b27187ad3a7c8b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac3cd5c949c13444840948787b27187ad3a7c8b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b5b36769b224080779c14e5d297ef21049cde9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b5b36769b224080779c14e5d297ef21049cde9", "html_url": "https://github.com/rust-lang/rust/commit/a9b5b36769b224080779c14e5d297ef21049cde9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b5b36769b224080779c14e5d297ef21049cde9/comments", "author": null, "committer": null, "parents": [{"sha": "5817a4fa0606f10797bd79d641b39d47a40d67e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5817a4fa0606f10797bd79d641b39d47a40d67e6", "html_url": "https://github.com/rust-lang/rust/commit/5817a4fa0606f10797bd79d641b39d47a40d67e6"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "8ddd54bb7a3899583e6964c37f3eae85438b6419", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9b5b36769b224080779c14e5d297ef21049cde9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b5b36769b224080779c14e5d297ef21049cde9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=a9b5b36769b224080779c14e5d297ef21049cde9", "patch": "@@ -364,7 +364,7 @@ impl LiteralDigitGrouping {\n                 if_chain! {\n                     if let Some(src) = snippet_opt(cx, lit.span);\n                     if let Some(firstch) = src.chars().next();\n-                    if char::to_digit(firstch, 10).is_some();\n+                    if char::is_digit(firstch, 10);\n                     then {\n                         let digit_info = DigitInfo::new(&src, false);\n                         let _ = Self::do_lint(digit_info.digits, digit_info.suffix, in_macro).map_err(|warning_type| {\n@@ -378,7 +378,7 @@ impl LiteralDigitGrouping {\n                 if_chain! {\n                     if let Some(src) = snippet_opt(cx, lit.span);\n                     if let Some(firstch) = src.chars().next();\n-                    if char::to_digit(firstch, 10).is_some();\n+                    if char::is_digit(firstch, 10);\n                     then {\n                         let digit_info = DigitInfo::new(&src, true);\n                         // Separate digits into integral and fractional parts.\n@@ -512,7 +512,7 @@ impl DecimalLiteralRepresentation {\n             if let LitKind::Int(val, _) = lit.kind;\n             if let Some(src) = snippet_opt(cx, lit.span);\n             if let Some(firstch) = src.chars().next();\n-            if char::to_digit(firstch, 10).is_some();\n+            if char::is_digit(firstch, 10);\n             let digit_info = DigitInfo::new(&src, false);\n             if digit_info.radix == Radix::Decimal;\n             if val >= u128::from(self.threshold);"}]}