{"sha": "39d85b0d4112818141bec1bf7a87d4d0db5e55a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDg1YjBkNDExMjgxODE0MWJlYzFiZjdhODdkNGQwZGI1ZTU1YTY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-30T06:00:32Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-30T06:00:32Z"}, "message": "Combine a sigle argument and a short callee", "tree": {"sha": "e2304d4551ee97487cb0f297a230ce427157ad87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2304d4551ee97487cb0f297a230ce427157ad87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d85b0d4112818141bec1bf7a87d4d0db5e55a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d85b0d4112818141bec1bf7a87d4d0db5e55a6", "html_url": "https://github.com/rust-lang/rust/commit/39d85b0d4112818141bec1bf7a87d4d0db5e55a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d85b0d4112818141bec1bf7a87d4d0db5e55a6/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d6ae7abee93ee9341f8d7e28f89b7748e50383", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d6ae7abee93ee9341f8d7e28f89b7748e50383", "html_url": "https://github.com/rust-lang/rust/commit/c3d6ae7abee93ee9341f8d7e28f89b7748e50383"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "e9e0226e28640e976567cb53058f036a04337324", "filename": "src/expr.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/39d85b0d4112818141bec1bf7a87d4d0db5e55a6/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d85b0d4112818141bec1bf7a87d4d0db5e55a6/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=39d85b0d4112818141bec1bf7a87d4d0db5e55a6", "patch": "@@ -1814,6 +1814,9 @@ where\n     };\n     let used_width = extra_offset(callee_str, shape);\n     let one_line_width = shape.width.checked_sub(used_width + 2 * paren_overhead)?;\n+    // 1 = \"(\"\n+    let combine_arg_with_callee =\n+        callee_str.len() + 1 <= context.config.tab_spaces() && args.len() == 1;\n \n     // 1 = \"(\" or \")\"\n     let one_line_shape = shape\n@@ -1838,6 +1841,7 @@ where\n         one_line_width,\n         args_max_width,\n         force_trailing_comma,\n+        combine_arg_with_callee,\n     )?;\n \n     if !context.use_block_indent() && need_block_indent(&list_str, nested_shape) && !extendable {\n@@ -1878,6 +1882,7 @@ fn rewrite_call_args<'a, T>(\n     one_line_width: usize,\n     args_max_width: usize,\n     force_trailing_comma: bool,\n+    combine_arg_with_callee: bool,\n ) -> Option<(bool, String)>\n where\n     T: Rewrite + Spanned + ToExpr + 'a,\n@@ -1907,6 +1912,7 @@ where\n         nested_shape,\n         one_line_width,\n         args_max_width,\n+        combine_arg_with_callee,\n     );\n \n     let fmt = ListFormatting {\n@@ -1937,19 +1943,22 @@ fn try_overflow_last_arg<'a, T>(\n     nested_shape: Shape,\n     one_line_width: usize,\n     args_max_width: usize,\n+    combine_arg_with_callee: bool,\n ) -> DefinitiveListTactic\n where\n     T: Rewrite + Spanned + ToExpr + 'a,\n {\n-    let overflow_last = can_be_overflowed(context, args);\n+    let overflow_last = combine_arg_with_callee || can_be_overflowed(context, args);\n \n     // Replace the last item with its first line to see if it fits with\n     // first arguments.\n     let placeholder = if overflow_last {\n         let mut context = context.clone();\n-        if let Some(expr) = args[args.len() - 1].to_expr() {\n-            if let ast::ExprKind::MethodCall(..) = expr.node {\n-                context.force_one_line_chain = true;\n+        if !combine_arg_with_callee {\n+            if let Some(expr) = args[args.len() - 1].to_expr() {\n+                if let ast::ExprKind::MethodCall(..) = expr.node {\n+                    context.force_one_line_chain = true;\n+                }\n             }\n         }\n         last_arg_shape(args, item_vec, one_line_shape, args_max_width).and_then(|arg_shape| {"}]}