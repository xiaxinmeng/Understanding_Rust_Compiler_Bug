{"sha": "cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkYWYzYTQzOTM5MjdkZGZiYTA3MWNmYmZlODZkOTViNjhlN2FlM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-08T06:15:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-08T06:15:52Z"}, "message": "Auto merge of #21999 - tomjakubowski:rustdoc-fixes, r=alexcrichton\n\nr? @alexcrichton", "tree": {"sha": "9828694d7a89d98659c4f8b7c79d466dabb0b435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9828694d7a89d98659c4f8b7c79d466dabb0b435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "html_url": "https://github.com/rust-lang/rust/commit/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16de18db448ca5de45bff90579990259518e1fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16de18db448ca5de45bff90579990259518e1fc", "html_url": "https://github.com/rust-lang/rust/commit/f16de18db448ca5de45bff90579990259518e1fc"}, {"sha": "e43c478035d82556168432d9be1027eca75af495", "url": "https://api.github.com/repos/rust-lang/rust/commits/e43c478035d82556168432d9be1027eca75af495", "html_url": "https://github.com/rust-lang/rust/commit/e43c478035d82556168432d9be1027eca75af495"}], "stats": {"total": 180, "additions": 155, "deletions": 25}, "files": [{"sha": "ef0c3fbb252fa4e7f12f56595bc95eddfbd2ec74", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -1466,7 +1466,7 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n     encode_def_id(rbml_w, local_def(nitem.id));\n     encode_visibility(rbml_w, nitem.vis);\n     match nitem.node {\n-      ast::ForeignItemFn(..) => {\n+      ast::ForeignItemFn(ref fndecl, _) => {\n         encode_family(rbml_w, FN_FAMILY);\n         encode_bounds_and_type(rbml_w, ecx,\n                                &lookup_item_type(ecx.tcx,local_def(nitem.id)));\n@@ -1478,6 +1478,7 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n         let stab = stability::lookup(ecx.tcx, ast_util::local_def(nitem.id));\n         encode_stability(rbml_w, stab);\n         encode_symbol(ecx, rbml_w, nitem.id);\n+        encode_method_argument_names(rbml_w, &*fndecl);\n       }\n       ast::ForeignItemStatic(_, mutbl) => {\n         if mutbl {"}, {"sha": "dfa5b01270efd3dfc79c9ecda7f62b1bc1b359d4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -306,13 +306,14 @@ fn build_impl(cx: &DocContext, tcx: &ty::ctxt,\n                 let mut item = method.clean(cx);\n                 item.inner = match item.inner.clone() {\n                     clean::TyMethodItem(clean::TyMethod {\n-                        unsafety, decl, self_, generics\n+                        unsafety, decl, self_, generics, abi\n                     }) => {\n                         clean::MethodItem(clean::Method {\n                             unsafety: unsafety,\n                             decl: decl,\n                             self_: self_,\n                             generics: generics,\n+                            abi: abi\n                         })\n                     }\n                     _ => panic!(\"not a tymethod\"),"}, {"sha": "7ab9d8c6672c42976df9630c088ab319853d49af", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -27,6 +27,7 @@ pub use self::FunctionRetTy::*;\n pub use self::TraitMethod::*;\n \n use syntax;\n+use syntax::abi;\n use syntax::ast;\n use syntax::ast_util;\n use syntax::ast_util::PostExpansionMethod;\n@@ -945,6 +946,7 @@ pub struct Method {\n     pub self_: SelfTy,\n     pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n+    pub abi: abi::Abi\n }\n \n impl Clean<Item> for ast::Method {\n@@ -973,6 +975,7 @@ impl Clean<Item> for ast::Method {\n                 self_: self.pe_explicit_self().node.clean(cx),\n                 unsafety: self.pe_unsafety().clone(),\n                 decl: decl,\n+                abi: self.pe_abi()\n             }),\n         }\n     }\n@@ -984,6 +987,7 @@ pub struct TyMethod {\n     pub decl: FnDecl,\n     pub generics: Generics,\n     pub self_: SelfTy,\n+    pub abi: abi::Abi\n }\n \n impl Clean<Item> for ast::TypeMethod {\n@@ -1011,6 +1015,7 @@ impl Clean<Item> for ast::TypeMethod {\n                 decl: decl,\n                 self_: self.explicit_self.node.clean(cx),\n                 generics: self.generics.clean(cx),\n+                abi: self.abi\n             }),\n         }\n     }\n@@ -1301,6 +1306,7 @@ impl<'tcx> Clean<Item> for ty::Method<'tcx> {\n                 generics: (&self.generics, subst::FnSpace).clean(cx),\n                 self_: self_,\n                 decl: (self.def_id, &sig).clean(cx),\n+                abi: self.fty.abi\n             })\n         }\n     }"}, {"sha": "cc2cf21095e413fc820db076e4a16b0e6a2f9bd2", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -460,7 +460,8 @@ impl fmt::Display for clean::Type {\n                 f.write_str(name)\n             }\n             clean::ResolvedPath{ did, ref typarams, ref path } => {\n-                try!(resolved_path(f, did, path, false));\n+                // Paths like Self::Output should be rendered with all segments\n+                try!(resolved_path(f, did, path, path.segments[0].name == \"Self\"));\n                 tybounds(f, typarams)\n             }\n             clean::Infer => write!(f, \"_\"),"}, {"sha": "b30b251e8ba6f1aceb29a1d8051a2a7d74121778", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -50,6 +50,7 @@ use externalfiles::ExternalHtml;\n \n use serialize::json;\n use serialize::json::ToJson;\n+use syntax::abi;\n use syntax::ast;\n use syntax::ast_util;\n use rustc::util::nodemap::NodeSet;\n@@ -1809,15 +1810,22 @@ fn assoc_type(w: &mut fmt::Formatter, it: &clean::Item,\n }\n \n fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n-    fn method(w: &mut fmt::Formatter, it: &clean::Item, unsafety: ast::Unsafety,\n-           g: &clean::Generics, selfty: &clean::SelfTy,\n-           d: &clean::FnDecl) -> fmt::Result {\n-        write!(w, \"{}fn <a href='#{ty}.{name}' class='fnname'>{name}</a>\\\n+    fn method(w: &mut fmt::Formatter, it: &clean::Item,\n+              unsafety: ast::Unsafety, abi: abi::Abi,\n+              g: &clean::Generics, selfty: &clean::SelfTy,\n+              d: &clean::FnDecl) -> fmt::Result {\n+        use syntax::abi::Abi;\n+\n+        write!(w, \"{}{}fn <a href='#{ty}.{name}' class='fnname'>{name}</a>\\\n                    {generics}{decl}{where_clause}\",\n                match unsafety {\n                    ast::Unsafety::Unsafe => \"unsafe \",\n                    _ => \"\",\n                },\n+               match abi {\n+                   Abi::Rust => String::new(),\n+                   a => format!(\"extern {} \", a.to_string())\n+               },\n                ty = shortty(it),\n                name = it.name.as_ref().unwrap(),\n                generics = *g,\n@@ -1826,10 +1834,10 @@ fn render_method(w: &mut fmt::Formatter, meth: &clean::Item) -> fmt::Result {\n     }\n     match meth.inner {\n         clean::TyMethodItem(ref m) => {\n-            method(w, meth, m.unsafety, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl)\n         }\n         clean::MethodItem(ref m) => {\n-            method(w, meth, m.unsafety, &m.generics, &m.self_, &m.decl)\n+            method(w, meth, m.unsafety, m.abi, &m.generics, &m.self_, &m.decl)\n         }\n         clean::AssociatedTypeItem(ref typ) => {\n             assoc_type(w, meth, typ)"}, {"sha": "74fca83f5f9157adb269616c7a19c4cfed6107e7", "filename": "src/test/run-make/rustdoc-assoc-types/Makefile", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-assoc-types%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-assoc-types%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-assoc-types%2FMakefile?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -0,0 +1,5 @@\n+-include ../tools.mk\n+\n+all: lib.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc lib.rs\n+\t$(HTMLDOCCK) $(TMPDIR)/doc lib.rs"}, {"sha": "3e6e0ad56007289d55a8f6ca47a4389cd41bc678", "filename": "src/test/run-make/rustdoc-assoc-types/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-assoc-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-assoc-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-assoc-types%2Flib.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+// @has lib/trait.Index.html\n+pub trait Index<I: ?Sized> {\n+    // @has - '//*[@id=\"associatedtype.Output\"]//code' 'type Output: ?Sized'\n+    type Output: ?Sized;\n+    // @has - '//*[@id=\"tymethod.index\"]//code' \\\n+    //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n+    fn index<'a>(&'a self, index: I) -> &'a Self::Output;\n+}"}, {"sha": "c87684f59ea01057d9f46888e7d0e561ed598b67", "filename": "src/test/run-make/rustdoc-extern-method/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2FMakefile?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all: foo.rs bar.rs\n+\t$(HOST_RPATH_ENV) $(RUSTC) foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc foo.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -L $(TMPDIR) -w html -o $(TMPDIR)/doc bar.rs\n+\t$(HTMLDOCCK) $(TMPDIR)/doc bar.rs\n+"}, {"sha": "672090c13a23376ef59adf3665d903d6c8b13893", "filename": "src/test/run-make/rustdoc-extern-method/bar.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Fbar.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+\n+// @has bar/trait.Foo.html //pre \"pub trait Foo\"\n+// @has - '//*[@id=\"tymethod.foo\"]//code' 'extern \"rust-call\" fn foo'\n+// @has - '//*[@id=\"tymethod.foo_\"]//code' 'extern \"rust-call\" fn foo_'\n+pub use foo::Foo;\n+\n+// @has bar/trait.Bar.html //pre \"pub trait Bar\"\n+pub trait Bar {\n+    // @has - '//*[@id=\"tymethod.bar\"]//code' 'extern \"rust-call\" fn bar'\n+    extern \"rust-call\" fn bar(&self, _: ());\n+    // @has - '//*[@id=\"method.bar_\"]//code' 'extern \"rust-call\" fn bar_'\n+    extern \"rust-call\" fn bar_(&self, _: ()) { }\n+}"}, {"sha": "fc5f03e8bd36a4abb029c6328fff6c61c64800c6", "filename": "src/test/run-make/rustdoc-extern-method/foo.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-extern-method%2Ffoo.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+pub trait Foo {\n+    extern \"rust-call\" fn foo(&self, _: ()) -> i32;\n+    extern \"rust-call\" fn foo_(&self, _: ()) -> i32 { 0 }\n+}"}, {"sha": "c312efe12f5f7c055abc9dce6f07af57462a9006", "filename": "src/test/run-make/rustdoc-ffi/Makefile", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-ffi%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-ffi%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-ffi%2FMakefile?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -0,0 +1,8 @@\n+-include ../tools.mk\n+\n+all: lib.rs\n+\t$(HOST_RPATH_ENV) $(RUSTC) lib.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -w html -o $(TMPDIR)/doc lib.rs\n+\t$(HOST_RPATH_ENV) $(RUSTDOC) -L $(TMPDIR) -w html -o $(TMPDIR)/doc user.rs\n+\t$(HTMLDOCCK) $(TMPDIR)/doc lib.rs\n+\t$(HTMLDOCCK) $(TMPDIR)/doc user.rs"}, {"sha": "e06dbe76dbbe74e1be2032bb9f8c6b94ae6a8be5", "filename": "src/test/run-make/rustdoc-ffi/lib.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-ffi%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-ffi%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-ffi%2Flib.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+extern \"C\" {\n+    // @has lib/fn.foreigner.html //pre 'pub unsafe fn foreigner(cold_as_ice: u32)'\n+    pub fn foreigner(cold_as_ice: u32);\n+}"}, {"sha": "09d7a7c536c0a19c46150978434cfefc5b8f1cfe", "filename": "src/test/run-make/rustdoc-ffi/user.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-ffi%2Fuser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-ffi%2Fuser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-ffi%2Fuser.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type=\"lib\"]\n+\n+extern crate lib;\n+\n+// @has user/fn.foreigner.html //pre 'pub unsafe fn foreigner(cold_as_ice: u32)'\n+pub use lib::foreigner;"}, {"sha": "3906d9ee8ae84833c951a3df0d0fb202592c03bb", "filename": "src/test/run-make/rustdoc-hidden-line/foo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -32,5 +32,4 @@\n pub fn foo() {}\n \n // @!has foo/fn.foo.html invisible\n-// @matches - //pre '#.*\\[.*derive.*\\(.*Eq.*\\).*\\].*//.*Bar'\n-\n+// @matches - //pre \"#\\[derive\\(PartialEq\\)\\] // Bar\""}, {"sha": "b5fcbf46c5c98207eec54bd47fda67f5c2b4744d", "filename": "src/test/run-make/rustdoc-negative-impl/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-negative-impl%2Ffoo.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -15,8 +15,8 @@ pub struct Alpha;\n // @matches foo/struct.Bravo.html '//pre' \"pub struct Bravo<B>\"\n pub struct Bravo<B>;\n \n-// @matches foo/struct.Alpha.html '//*[@class=\"impl\"]//code' \"impl !.*Send.* for .*Alpha\"\n+// @matches foo/struct.Alpha.html '//*[@class=\"impl\"]//code' \"impl !Send for Alpha\"\n impl !Send for Alpha {}\n \n-// @matches foo/struct.Bravo.html '//*[@class=\"impl\"]//code' \"impl<B> !.*Send.* for .*Bravo.*<B>\"\n+// @matches foo/struct.Bravo.html '//*[@class=\"impl\"]//code' \"impl<B> !Send for Bravo<B>\"\n impl<B> !Send for Bravo<B> {}"}, {"sha": "68fde60564e2a8c96bdc25f29029eec503c42a73", "filename": "src/test/run-make/rustdoc-where/foo.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-where%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e/src%2Ftest%2Frun-make%2Frustdoc-where%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-where%2Ffoo.rs?ref=cdaf3a4393927ddfba071cfbfe86d95b68e7ae3e", "patch": "@@ -10,29 +10,30 @@\n \n pub trait MyTrait {}\n \n-// @matches foo/struct.Alpha.html '//pre' \"Alpha.*where.*A:.*MyTrait\"\n+// @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A> where A: MyTrait\"\n pub struct Alpha<A> where A: MyTrait;\n-// @matches foo/trait.Bravo.html '//pre' \"Bravo.*where.*B:.*MyTrait\"\n+// @has foo/trait.Bravo.html '//pre' \"pub trait Bravo<B> where B: MyTrait\"\n pub trait Bravo<B> where B: MyTrait {}\n-// @matches foo/fn.charlie.html '//pre' \"charlie.*where.*C:.*MyTrait\"\n+// @has foo/fn.charlie.html '//pre' \"pub fn charlie<C>() where C: MyTrait\"\n pub fn charlie<C>() where C: MyTrait {}\n \n pub struct Delta<D>;\n-// @matches foo/struct.Delta.html '//*[@class=\"impl\"]//code' \"impl.*Delta.*where.*D:.*MyTrait\"\n+// @has foo/struct.Delta.html '//*[@class=\"impl\"]//code' \\\n+//          \"impl<D> Delta<D> where D: MyTrait\"\n impl<D> Delta<D> where D: MyTrait {\n     pub fn delta() {}\n }\n \n pub struct Echo<E>;\n-// @matches foo/struct.Echo.html '//*[@class=\"impl\"]//code' \\\n-//          \"impl.*MyTrait.*for.*Echo.*where.*E:.*MyTrait\"\n-// @matches foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n-//          \"impl.*MyTrait.*for.*Echo.*where.*E:.*MyTrait\"\n+// @has foo/struct.Echo.html '//*[@class=\"impl\"]//code' \\\n+//          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n+// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n+//          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n impl<E> MyTrait for Echo<E> where E: MyTrait {}\n \n pub enum Foxtrot<F> {}\n-// @matches foo/enum.Foxtrot.html '//*[@class=\"impl\"]//code' \\\n-//          \"impl.*MyTrait.*for.*Foxtrot.*where.*F:.*MyTrait\"\n-// @matches foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n-//          \"impl.*MyTrait.*for.*Foxtrot.*where.*F:.*MyTrait\"\n+// @has foo/enum.Foxtrot.html '//*[@class=\"impl\"]//code' \\\n+//          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n+// @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//code' \\\n+//          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n impl<F> MyTrait for Foxtrot<F> where F: MyTrait {}"}]}