{"sha": "c3b266f50f5f7a05761a06fbe30c14451e86ca31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYjI2NmY1MGY1ZjdhMDU3NjFhMDZmYmUzMGMxNDQ1MWU4NmNhMzE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-03T14:36:01Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-06-07T01:36:59Z"}, "message": "Rewrite deque to use dvec", "tree": {"sha": "ff7c84feff8e209ec9d2f60d4fb18c4d7df9761a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff7c84feff8e209ec9d2f60d4fb18c4d7df9761a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3b266f50f5f7a05761a06fbe30c14451e86ca31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b266f50f5f7a05761a06fbe30c14451e86ca31", "html_url": "https://github.com/rust-lang/rust/commit/c3b266f50f5f7a05761a06fbe30c14451e86ca31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3b266f50f5f7a05761a06fbe30c14451e86ca31/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b828df93f666494a9d79b91264a4ef953688d001", "url": "https://api.github.com/repos/rust-lang/rust/commits/b828df93f666494a9d79b91264a4ef953688d001", "html_url": "https://github.com/rust-lang/rust/commit/b828df93f666494a9d79b91264a4ef953688d001"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "4cef3245661840bc7fc8c7bba165d5e9fdf8636a", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c3b266f50f5f7a05761a06fbe30c14451e86ca31/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b266f50f5f7a05761a06fbe30c14451e86ca31/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=c3b266f50f5f7a05761a06fbe30c14451e86ca31", "patch": "@@ -1,6 +1,7 @@\n #[doc = \"A deque. Untested as of yet. Likely buggy\"];\n \n import option::{some, none};\n+import dvec::{dvec, extensions};\n \n iface t<T> {\n     fn size() -> uint;\n@@ -23,7 +24,7 @@ fn create<T: copy>() -> t<T> {\n       * Grow is only called on full elts, so nelts is also len(elts), unlike\n       * elsewhere.\n       */\n-    fn grow<T: copy>(nelts: uint, lo: uint, elts: [mut cell<T>]) ->\n+    fn grow<T: copy>(nelts: uint, lo: uint, -elts: [mut cell<T>]) ->\n        [mut cell<T>] {\n         assert (nelts == vec::len(elts));\n         let mut rv = [mut];\n@@ -39,38 +40,38 @@ fn create<T: copy>() -> t<T> {\n \n         ret rv;\n     }\n-    fn get<T: copy>(elts: [mut cell<T>], i: uint) -> T {\n-        ret alt elts[i] { some(t) { t } _ { fail } };\n+    fn get<T: copy>(elts: dvec<cell<T>>, i: uint) -> T {\n+        alt elts.get_elt(i) { some(t) { t } _ { fail } }\n     }\n \n     type repr<T> = {mut nelts: uint,\n                     mut lo: uint,\n                     mut hi: uint,\n-                    mut elts: [mut cell<T>]};\n+                    elts: dvec<cell<T>>};\n \n     impl <T: copy> of t<T> for repr<T> {\n         fn size() -> uint { ret self.nelts; }\n         fn add_front(t: T) {\n             let oldlo: uint = self.lo;\n             if self.lo == 0u {\n-                self.lo = vec::len(self.elts) - 1u;\n+                self.lo = self.elts.len() - 1u;\n             } else { self.lo -= 1u; }\n             if self.lo == self.hi {\n-                self.elts = grow(self.nelts, oldlo, self.elts);\n-                self.lo = vec::len(self.elts) - 1u;\n+                self.elts.swap({ |v| grow(self.nelts, oldlo, v) });\n+                self.lo = self.elts.len() - 1u;\n                 self.hi = self.nelts;\n             }\n-            self.elts[self.lo] = some(t);\n+            self.elts.set_elt(self.lo, some(t));\n             self.nelts += 1u;\n         }\n         fn add_back(t: T) {\n             if self.lo == self.hi && self.nelts != 0u {\n-                self.elts = grow(self.nelts, self.lo, self.elts);\n+                self.elts.swap({ |v| grow(self.nelts, self.lo, v) });\n                 self.lo = 0u;\n                 self.hi = self.nelts;\n             }\n-            self.elts[self.hi] = some(t);\n-            self.hi = (self.hi + 1u) % vec::len(self.elts);\n+            self.elts.set_elt(self.hi, some(t));\n+            self.hi = (self.hi + 1u) % self.elts.len();\n             self.nelts += 1u;\n         }\n         /**\n@@ -79,24 +80,24 @@ fn create<T: copy>() -> t<T> {\n          */\n         fn pop_front() -> T {\n             let t: T = get(self.elts, self.lo);\n-            self.elts[self.lo] = none;\n-            self.lo = (self.lo + 1u) % vec::len(self.elts);\n+            self.elts.set_elt(self.lo, none);\n+            self.lo = (self.lo + 1u) % self.elts.len();\n             self.nelts -= 1u;\n             ret t;\n         }\n         fn pop_back() -> T {\n             if self.hi == 0u {\n-                self.hi = vec::len(self.elts) - 1u;\n+                self.hi = self.elts.len() - 1u;\n             } else { self.hi -= 1u; }\n             let t: T = get(self.elts, self.hi);\n-            self.elts[self.hi] = none;\n+            self.elts.set_elt(self.hi, none);\n             self.nelts -= 1u;\n             ret t;\n         }\n         fn peek_front() -> T { ret get(self.elts, self.lo); }\n         fn peek_back() -> T { ret get(self.elts, self.hi - 1u); }\n         fn get(i: int) -> T {\n-            let idx = (self.lo + (i as uint)) % vec::len(self.elts);\n+            let idx = (self.lo + (i as uint)) % self.elts.len();\n             ret get(self.elts, idx);\n         }\n     }\n@@ -105,7 +106,10 @@ fn create<T: copy>() -> t<T> {\n         mut nelts: 0u,\n         mut lo: 0u,\n         mut hi: 0u,\n-        mut elts: vec::to_mut(vec::from_elem(initial_capacity, none))\n+        elts:\n+            dvec::from_vec(\n+                vec::to_mut(\n+                    vec::from_elem(initial_capacity, none)))\n     };\n     repr as t::<T>\n }"}]}