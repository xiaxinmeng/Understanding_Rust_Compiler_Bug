{"sha": "bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZDEyODMzY2M0Y2U3YzZiNDA4NWJhOGRjNDdmYzE2N2M4M2Y4ZWE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-19T19:01:49Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-19T19:06:39Z"}, "message": "Show const params in completions", "tree": {"sha": "a5cf5bb4506fca6ff759980a0f44bb8cff006bcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5cf5bb4506fca6ff759980a0f44bb8cff006bcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "html_url": "https://github.com/rust-lang/rust/commit/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf889bcf3be44720ca1c26fccec0374dfc7f3763", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf889bcf3be44720ca1c26fccec0374dfc7f3763", "html_url": "https://github.com/rust-lang/rust/commit/bf889bcf3be44720ca1c26fccec0374dfc7f3763"}], "stats": {"total": 53, "additions": 41, "deletions": 12}, "files": [{"sha": "809e1645ad0a7865464d0e72d701ee94d8b6aef4", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "patch": "@@ -29,6 +29,10 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     }\n \n     ctx.scope.process_all_names(&mut |name, res| {\n+        if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n+            mark::hit!(skip_lifetime_completion);\n+            return;\n+        }\n         if ctx.use_item_syntax.is_some() {\n             if let (ScopeDef::Unknown, Some(name_ref)) = (&res, &ctx.name_ref_syntax) {\n                 if name_ref.syntax().text() == name.to_string().as_str() {\n@@ -37,7 +41,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n                 }\n             }\n         }\n-        acc.add_resolution(ctx, name.to_string(), &res)\n+        acc.add_resolution(ctx, name.to_string(), &res);\n     });\n }\n \n@@ -234,6 +238,24 @@ fn main() {\n                 fn quux() fn quux<T>()\n             \"#]],\n         );\n+        check(\n+            r#\"fn quux<const C: usize>() { $0 }\"#,\n+            expect![[r#\"\n+                tp C\n+                fn quux() fn quux<const C: usize>()\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn does_not_complete_lifetimes() {\n+        mark::check!(skip_lifetime_completion);\n+        check(\n+            r#\"fn quux<'a>() { $0 }\"#,\n+            expect![[r#\"\n+                fn quux() fn quux<'a>()\n+            \"#]],\n+        );\n     }\n \n     #[test]"}, {"sha": "6f48322dbb832b094ee3361cc99cf2179b22c8f4", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "patch": "@@ -2045,7 +2045,7 @@ impl Callable {\n pub enum ScopeDef {\n     ModuleDef(ModuleDef),\n     MacroDef(MacroDef),\n-    GenericParam(TypeParam),\n+    GenericParam(GenericParam),\n     ImplSelfType(Impl),\n     AdtSelfType(Adt),\n     Local(Local),"}, {"sha": "0a30b4f5b087f7d5df96f12e1c5bc0898048ebcd", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "patch": "@@ -814,7 +814,7 @@ impl<'a> SemanticsScope<'a> {\n                 }\n                 resolver::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n                 resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n-                resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(TypeParam { id }),\n+                resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(id.into()),\n                 resolver::ScopeDef::Local(pat_id) => {\n                     let parent = resolver.body_owner().unwrap().into();\n                     ScopeDef::Local(Local { parent, pat_id })"}, {"sha": "a505bf2be8a47d9911037658eb9351744b363eac", "filename": "crates/hir_def/src/resolver.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea/crates%2Fhir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fresolver.rs?ref=bed12833cc4ce7c6b4085ba8dc47fc167c83f8ea", "patch": "@@ -21,8 +21,9 @@ use crate::{\n     per_ns::PerNs,\n     visibility::{RawVisibility, Visibility},\n     AdtId, AssocContainerId, ConstId, ConstParamId, ContainerId, DefWithBodyId, EnumId,\n-    EnumVariantId, FunctionId, GenericDefId, HasModule, ImplId, LocalModuleId, Lookup, ModuleDefId,\n-    ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId, VariantId,\n+    EnumVariantId, FunctionId, GenericDefId, GenericParamId, HasModule, ImplId, LifetimeParamId,\n+    LocalModuleId, Lookup, ModuleDefId, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n+    TypeParamId, VariantId,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -484,7 +485,7 @@ pub enum ScopeDef {\n     PerNs(PerNs),\n     ImplSelfType(ImplId),\n     AdtSelfType(AdtId),\n-    GenericParam(TypeParamId),\n+    GenericParam(GenericParamId),\n     Local(PatId),\n }\n \n@@ -527,15 +528,21 @@ impl Scope {\n             Scope::LocalItemsScope(body) => body.item_scope.entries().for_each(|(name, def)| {\n                 f(name.clone(), ScopeDef::PerNs(def));\n             }),\n-            Scope::GenericParams { params, def } => {\n+            &Scope::GenericParams { ref params, def: parent } => {\n                 for (local_id, param) in params.types.iter() {\n-                    if let Some(name) = &param.name {\n-                        f(\n-                            name.clone(),\n-                            ScopeDef::GenericParam(TypeParamId { local_id, parent: *def }),\n-                        )\n+                    if let Some(ref name) = param.name {\n+                        let id = TypeParamId { local_id, parent };\n+                        f(name.clone(), ScopeDef::GenericParam(id.into()))\n                     }\n                 }\n+                for (local_id, param) in params.consts.iter() {\n+                    let id = ConstParamId { local_id, parent };\n+                    f(param.name.clone(), ScopeDef::GenericParam(id.into()))\n+                }\n+                for (local_id, param) in params.lifetimes.iter() {\n+                    let id = LifetimeParamId { local_id, parent };\n+                    f(param.name.clone(), ScopeDef::GenericParam(id.into()))\n+                }\n             }\n             Scope::ImplDefScope(i) => {\n                 f(name![Self], ScopeDef::ImplSelfType(*i));"}]}