{"sha": "615c23f6ecc07e87501f2f52190e3fb08b50a17e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNWMyM2Y2ZWNjMDdlODc1MDFmMmY1MjE5MGUzZmIwOGI1MGExN2U=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-03-30T21:49:52Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-21T18:37:38Z"}, "message": "Remove unused parameter from in(_opt)?_scope", "tree": {"sha": "2d71ba94d8b70fcc20a6c3f1e7e18ffdaa447ad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d71ba94d8b70fcc20a6c3f1e7e18ffdaa447ad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/615c23f6ecc07e87501f2f52190e3fb08b50a17e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/615c23f6ecc07e87501f2f52190e3fb08b50a17e", "html_url": "https://github.com/rust-lang/rust/commit/615c23f6ecc07e87501f2f52190e3fb08b50a17e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/615c23f6ecc07e87501f2f52190e3fb08b50a17e/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a0defd5a93523067ef239936cc2e0755220904", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a0defd5a93523067ef239936cc2e0755220904", "html_url": "https://github.com/rust-lang/rust/commit/50a0defd5a93523067ef239936cc2e0755220904"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "d93223a4292c4399f7233ac9acb0004b04071af1", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=615c23f6ecc07e87501f2f52190e3fb08b50a17e", "patch": "@@ -23,8 +23,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             safety_mode\n         } =\n             self.hir.mirror(ast_block);\n-        self.in_opt_scope(opt_destruction_scope.map(|de|(de, source_info)), block, move |this| {\n-            this.in_scope((region_scope, source_info), LintLevel::Inherited, block, move |this| {\n+        self.in_opt_scope(opt_destruction_scope.map(|de|(de, source_info)), move |this| {\n+            this.in_scope((region_scope, source_info), LintLevel::Inherited, move |this| {\n                 if targeted_by_break {\n                     // This is a `break`-able block\n                     let exit_block = this.cfg.start_new_block();\n@@ -83,9 +83,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 StmtKind::Expr { scope, expr } => {\n                     this.block_context.push(BlockFrame::Statement { ignores_expr_result: true });\n                     unpack!(block = this.in_opt_scope(\n-                        opt_destruction_scope.map(|de|(de, source_info)), block, |this| {\n+                        opt_destruction_scope.map(|de|(de, source_info)), |this| {\n                             let si = (scope, source_info);\n-                            this.in_scope(si, LintLevel::Inherited, block, |this| {\n+                            this.in_scope(si, LintLevel::Inherited, |this| {\n                                 let expr = this.hir.mirror(expr);\n                                 this.stmt_expr(block, expr, Some(stmt_span))\n                             })\n@@ -128,9 +128,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             Some((None, initializer_span)),\n                         );\n                         unpack!(block = this.in_opt_scope(\n-                            opt_destruction_scope.map(|de|(de, source_info)), block, |this| {\n+                            opt_destruction_scope.map(|de|(de, source_info)), |this| {\n                                 let scope = (init_scope, source_info);\n-                                this.in_scope(scope, lint_level, block, |this| {\n+                                this.in_scope(scope, lint_level, |this| {\n                                     this.expr_into_pattern(block, pattern, init)\n                                 })\n                             }));"}, {"sha": "ed80cb1a16369e6286917c16d0dfe05d2a54031f", "filename": "src/librustc_mir/build/expr/as_operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_operand.rs?ref=615c23f6ecc07e87501f2f52190e3fb08b50a17e", "patch": "@@ -57,7 +57,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         {\n             let source_info = this.source_info(expr.span);\n             let region_scope = (region_scope, source_info);\n-            return this.in_scope(region_scope, lint_level, block, |this| {\n+            return this.in_scope(region_scope, lint_level, |this| {\n                 this.as_operand(block, scope, value)\n             });\n         }"}, {"sha": "a956eacb0699fd3cd1276a0687645addc1282bf6", "filename": "src/librustc_mir/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_place.rs?ref=615c23f6ecc07e87501f2f52190e3fb08b50a17e", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 region_scope,\n                 lint_level,\n                 value,\n-            } => this.in_scope((region_scope, source_info), lint_level, block, |this| {\n+            } => this.in_scope((region_scope, source_info), lint_level, |this| {\n                 if mutability == Mutability::Not {\n                     this.as_read_only_place(block, value)\n                 } else {"}, {"sha": "a0b504a99de9a7981778362410688bec60663dd7", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=615c23f6ecc07e87501f2f52190e3fb08b50a17e", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 value,\n             } => {\n                 let region_scope = (region_scope, source_info);\n-                this.in_scope(region_scope, lint_level, block, |this| {\n+                this.in_scope(region_scope, lint_level, |this| {\n                     this.as_rvalue(block, scope, value)\n                 })\n             }"}, {"sha": "c60e197010067990548fa54b228925b7c0a4b026", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=615c23f6ecc07e87501f2f52190e3fb08b50a17e", "patch": "@@ -43,7 +43,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             value,\n         } = expr.kind\n         {\n-            return this.in_scope((region_scope, source_info), lint_level, block, |this| {\n+            return this.in_scope((region_scope, source_info), lint_level, |this| {\n                 this.as_temp(block, temp_lifetime, value, mutability)\n             });\n         }"}, {"sha": "7bdfdf0b0895f9579fe4a0cd16cd9f2ae809ebf6", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=615c23f6ecc07e87501f2f52190e3fb08b50a17e", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 value,\n             } => {\n                 let region_scope = (region_scope, source_info);\n-                this.in_scope(region_scope, lint_level, block, |this| {\n+                this.in_scope(region_scope, lint_level, |this| {\n                     this.into(destination, block, value)\n                 })\n             }"}, {"sha": "ac690f89264bfdd0d84f163ecbc3f79df3534733", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=615c23f6ecc07e87501f2f52190e3fb08b50a17e", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 value,\n             } => {\n                 let value = this.hir.mirror(value);\n-                this.in_scope((region_scope, source_info), lint_level, block, |this| {\n+                this.in_scope((region_scope, source_info), lint_level, |this| {\n                     this.stmt_expr(block, value, opt_stmt_span)\n                 })\n             }"}, {"sha": "b432ed47d0b8d42b0e6519c6e9ec46cff786b35e", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=615c23f6ecc07e87501f2f52190e3fb08b50a17e", "patch": "@@ -702,13 +702,13 @@ fn construct_fn<'a, 'gcx, 'tcx, A>(hir: Cx<'a, 'gcx, 'tcx>,\n     let mut block = START_BLOCK;\n     let source_info = builder.source_info(span);\n     let call_site_s = (call_site_scope, source_info);\n-    unpack!(block = builder.in_scope(call_site_s, LintLevel::Inherited, block, |builder| {\n+    unpack!(block = builder.in_scope(call_site_s, LintLevel::Inherited, |builder| {\n         if should_abort_on_panic(tcx, fn_def_id, abi) {\n             builder.schedule_abort();\n         }\n \n         let arg_scope_s = (arg_scope, source_info);\n-        unpack!(block = builder.in_scope(arg_scope_s, LintLevel::Inherited, block, |builder| {\n+        unpack!(block = builder.in_scope(arg_scope_s, LintLevel::Inherited, |builder| {\n             builder.args_and_body(block, &arguments, arg_scope, &body.value)\n         }));\n         // Attribute epilogue to function's closing brace"}, {"sha": "471304012c9a803bf54a5f0446be9e409d45a9ee", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/615c23f6ecc07e87501f2f52190e3fb08b50a17e/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=615c23f6ecc07e87501f2f52190e3fb08b50a17e", "patch": "@@ -279,13 +279,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n     pub fn in_opt_scope<F, R>(&mut self,\n                               opt_scope: Option<(region::Scope, SourceInfo)>,\n-                              mut block: BasicBlock,\n                               f: F)\n                               -> BlockAnd<R>\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n-        debug!(\"in_opt_scope(opt_scope={:?}, block={:?})\", opt_scope, block);\n+        debug!(\"in_opt_scope(opt_scope={:?})\", opt_scope);\n         if let Some(region_scope) = opt_scope { self.push_scope(region_scope); }\n+        let mut block;\n         let rv = unpack!(block = f(self));\n         if let Some(region_scope) = opt_scope {\n             unpack!(block = self.pop_scope(region_scope, block));\n@@ -299,12 +299,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn in_scope<F, R>(&mut self,\n                           region_scope: (region::Scope, SourceInfo),\n                           lint_level: LintLevel,\n-                          mut block: BasicBlock,\n                           f: F)\n                           -> BlockAnd<R>\n         where F: FnOnce(&mut Builder<'a, 'gcx, 'tcx>) -> BlockAnd<R>\n     {\n-        debug!(\"in_scope(region_scope={:?}, block={:?})\", region_scope, block);\n+        debug!(\"in_scope(region_scope={:?})\", region_scope);\n         let source_scope = self.source_scope;\n         let tcx = self.hir.tcx();\n         if let LintLevel::Explicit(current_hir_id) = lint_level {\n@@ -330,6 +329,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             }\n         }\n         self.push_scope(region_scope);\n+        let mut block;\n         let rv = unpack!(block = f(self));\n         unpack!(block = self.pop_scope(region_scope, block));\n         self.source_scope = source_scope;"}]}