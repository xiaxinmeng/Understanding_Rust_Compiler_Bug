{"sha": "3f90bbc5562ba462a4608697517cab0e4ef8955b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOTBiYmM1NTYyYmE0NjJhNDYwODY5NzUxN2NhYjBlNGVmODk1NWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-04T23:39:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-07-13T05:29:10Z"}, "message": "dump scc graphviz too", "tree": {"sha": "91615fff16906b5602b1dea121ddff92465467b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91615fff16906b5602b1dea121ddff92465467b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f90bbc5562ba462a4608697517cab0e4ef8955b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f90bbc5562ba462a4608697517cab0e4ef8955b", "html_url": "https://github.com/rust-lang/rust/commit/3f90bbc5562ba462a4608697517cab0e4ef8955b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f90bbc5562ba462a4608697517cab0e4ef8955b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5e77a3c75d1268880c7613c60593748ab6de4c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e77a3c75d1268880c7613c60593748ab6de4c5", "html_url": "https://github.com/rust-lang/rust/commit/d5e77a3c75d1268880c7613c60593748ab6de4c5"}], "stats": {"total": 98, "additions": 90, "deletions": 8}, "files": [{"sha": "acd9223e42545c40453e49f78377eb415ecd4df4", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3f90bbc5562ba462a4608697517cab0e4ef8955b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f90bbc5562ba462a4608697517cab0e4ef8955b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=3f90bbc5562ba462a4608697517cab0e4ef8955b", "patch": "@@ -295,9 +295,16 @@ fn dump_mir_results<'a, 'gcx, 'tcx>(\n     // Also dump the inference graph constraints as a graphviz file.\n     let _: io::Result<()> = do catch {\n         let mut file =\n-            pretty::create_dump_file(infcx.tcx, \"regioncx.dot\", None, \"nll\", &0, source)?;\n+            pretty::create_dump_file(infcx.tcx, \"regioncx.all.dot\", None, \"nll\", &0, source)?;\n         regioncx.dump_graphviz_raw_constraints(&mut file)?;\n     };\n+\n+    // Also dump the inference graph constraints as a graphviz file.\n+    let _: io::Result<()> = do catch {\n+        let mut file =\n+            pretty::create_dump_file(infcx.tcx, \"regioncx.scc.dot\", None, \"nll\", &0, source)?;\n+        regioncx.dump_graphviz_scc_constraints(&mut file)?;\n+    };\n }\n \n fn dump_annotation<'a, 'gcx, 'tcx>("}, {"sha": "13d754f5cab5c2c6877b1e3ad15bdafa98539ace", "filename": "src/librustc_mir/borrow_check/nll/region_infer/graphviz.rs", "status": "modified", "additions": 82, "deletions": 7, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/3f90bbc5562ba462a4608697517cab0e4ef8955b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f90bbc5562ba462a4608697517cab0e4ef8955b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fgraphviz.rs?ref=3f90bbc5562ba462a4608697517cab0e4ef8955b", "patch": "@@ -12,22 +12,37 @@\n //! libgraphviz traits, specialized to attaching borrowck analysis\n //! data to rendered labels.\n \n+use super::*;\n+use borrow_check::nll::constraints::OutlivesConstraint;\n use dot::{self, IntoCow};\n use rustc_data_structures::indexed_vec::Idx;\n use std::borrow::Cow;\n use std::io::{self, Write};\n-use super::*;\n-use borrow_check::nll::constraints::OutlivesConstraint;\n \n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Write out the region constraint graph.\n-    pub(crate) fn dump_graphviz_raw_constraints(&self, mut w: &mut dyn Write) -> io::Result<()> {\n+    crate fn dump_graphviz_raw_constraints(&self, mut w: &mut dyn Write) -> io::Result<()> {\n         dot::render(&RawConstraints { regioncx: self }, &mut w)\n     }\n+\n+    /// Write out the region constraint graph.\n+    crate fn dump_graphviz_scc_constraints(&self, mut w: &mut dyn Write) -> io::Result<()> {\n+        let mut nodes_per_scc: IndexVec<ConstraintSccIndex, _> = self.constraint_sccs\n+            .all_sccs()\n+            .map(|_| Vec::new())\n+            .collect();\n+\n+        for region in self.definitions.indices() {\n+            let scc = self.constraint_sccs.scc(region);\n+            nodes_per_scc[scc].push(region);\n+        }\n+\n+        dot::render(&SccConstraints { regioncx: self, nodes_per_scc }, &mut w)\n+    }\n }\n \n struct RawConstraints<'a, 'tcx: 'a> {\n-    regioncx: &'a RegionInferenceContext<'tcx>\n+    regioncx: &'a RegionInferenceContext<'tcx>,\n }\n \n impl<'a, 'this, 'tcx> dot::Labeller<'this> for RawConstraints<'a, 'tcx> {\n@@ -63,14 +78,74 @@ impl<'a, 'this, 'tcx> dot::GraphWalk<'this> for RawConstraints<'a, 'tcx> {\n         (&self.regioncx.constraints.raw[..]).into_cow()\n     }\n \n-    // Render `a: b` as `a <- b`, indicating the flow\n+    // Render `a: b` as `a -> b`, indicating the flow\n     // of data during inference.\n \n     fn source(&'this self, edge: &OutlivesConstraint) -> RegionVid {\n-        edge.sub\n+        edge.sup\n     }\n \n     fn target(&'this self, edge: &OutlivesConstraint) -> RegionVid {\n-        edge.sup\n+        edge.sub\n+    }\n+}\n+\n+struct SccConstraints<'a, 'tcx: 'a> {\n+    regioncx: &'a RegionInferenceContext<'tcx>,\n+    nodes_per_scc: IndexVec<ConstraintSccIndex, Vec<RegionVid>>,\n+}\n+\n+impl<'a, 'this, 'tcx> dot::Labeller<'this> for SccConstraints<'a, 'tcx> {\n+    type Node = ConstraintSccIndex;\n+    type Edge = (ConstraintSccIndex, ConstraintSccIndex);\n+\n+    fn graph_id(&'this self) -> dot::Id<'this> {\n+        dot::Id::new(format!(\"RegionInferenceContext\")).unwrap()\n+    }\n+    fn node_id(&'this self, n: &ConstraintSccIndex) -> dot::Id<'this> {\n+        dot::Id::new(format!(\"r{}\", n.index())).unwrap()\n+    }\n+    fn node_shape(&'this self, _node: &ConstraintSccIndex) -> Option<dot::LabelText<'this>> {\n+        Some(dot::LabelText::LabelStr(Cow::Borrowed(\"box\")))\n+    }\n+    fn node_label(&'this self, n: &ConstraintSccIndex) -> dot::LabelText<'this> {\n+        let nodes = &self.nodes_per_scc[*n];\n+        dot::LabelText::LabelStr(format!(\"{:?} = {:?}\", n, nodes).into_cow())\n+    }\n+}\n+\n+impl<'a, 'this, 'tcx> dot::GraphWalk<'this> for SccConstraints<'a, 'tcx> {\n+    type Node = ConstraintSccIndex;\n+    type Edge = (ConstraintSccIndex, ConstraintSccIndex);\n+\n+    fn nodes(&'this self) -> dot::Nodes<'this, ConstraintSccIndex> {\n+        let vids: Vec<ConstraintSccIndex> = self.regioncx.constraint_sccs.all_sccs().collect();\n+        vids.into_cow()\n+    }\n+    fn edges(&'this self) -> dot::Edges<'this, (ConstraintSccIndex, ConstraintSccIndex)> {\n+        let edges: Vec<_> = self.regioncx\n+            .constraint_sccs\n+            .all_sccs()\n+            .flat_map(|scc_a| {\n+                self.regioncx\n+                    .constraint_sccs\n+                    .successors(scc_a)\n+                    .iter()\n+                    .map(move |&scc_b| (scc_a, scc_b))\n+            })\n+            .collect();\n+\n+        edges.into_cow()\n+    }\n+\n+    // Render `a: b` as `a -> b`, indicating the flow\n+    // of data during inference.\n+\n+    fn source(&'this self, edge: &(ConstraintSccIndex, ConstraintSccIndex)) -> ConstraintSccIndex {\n+        edge.0\n+    }\n+\n+    fn target(&'this self, edge: &(ConstraintSccIndex, ConstraintSccIndex)) -> ConstraintSccIndex {\n+        edge.1\n     }\n }"}]}