{"sha": "ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4", "node_id": "C_kwDOAAsO6NoAKGJhMmFjM2UyNjM2MGE4MjdmY2MwZTc0MWQzZTgzMWNhN2U5YWE0ZjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-26T23:46:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-26T23:46:21Z"}, "message": "Auto merge of #7860 - dswij:question-mark-fp, r=giraffate\n\nFix `question_mark` FP on custom error type\n\nCloses #7859\n\n#7840 aims to ignore `question_mark` when the return type is custom, which is [covered here](https://github.com/rust-lang/rust-clippy/blob/df65291edd6b89a241fed483ab165c32df468746/tests/ui/question_mark.rs#L144-L149). But this fails when there is a call in conditional predicate\n\nchangelog: [`question_mark`] Fix false positive when there is call in conditional predicate", "tree": {"sha": "2f47b5c227c7e6ff55778186162b39bb32fe29d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f47b5c227c7e6ff55778186162b39bb32fe29d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4", "html_url": "https://github.com/rust-lang/rust/commit/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a48367e21cd2bd489eb01f576556a11eeb0efce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a48367e21cd2bd489eb01f576556a11eeb0efce9", "html_url": "https://github.com/rust-lang/rust/commit/a48367e21cd2bd489eb01f576556a11eeb0efce9"}, {"sha": "fb0fbad5caa97da949cb2c6dbc56a1185bb53af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0fbad5caa97da949cb2c6dbc56a1185bb53af9", "html_url": "https://github.com/rust-lang/rust/commit/fb0fbad5caa97da949cb2c6dbc56a1185bb53af9"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "f63ef163bcbd0f1b76ddfd92fcac4d38b50a48bc", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4", "patch": "@@ -172,23 +172,17 @@ impl QuestionMark {\n         }\n     }\n \n-    fn expression_returns_unmodified_err(\n-        cx: &LateContext<'_>,\n-        expression: &Expr<'_>,\n-        origin_hir_id: &Expr<'_>,\n-    ) -> bool {\n-        match expression.kind {\n+    fn expression_returns_unmodified_err(cx: &LateContext<'_>, expr: &Expr<'_>, cond_expr: &Expr<'_>) -> bool {\n+        match expr.kind {\n             ExprKind::Block(block, _) => {\n                 if let Some(return_expression) = Self::return_expression(block) {\n-                    return Self::expression_returns_unmodified_err(cx, return_expression, origin_hir_id);\n+                    return Self::expression_returns_unmodified_err(cx, return_expression, cond_expr);\n                 }\n \n                 false\n             },\n-            ExprKind::Ret(Some(expr)) | ExprKind::Call(expr, _) => {\n-                Self::expression_returns_unmodified_err(cx, expr, origin_hir_id)\n-            },\n-            ExprKind::Path(_) => path_to_local(expression) == path_to_local(origin_hir_id),\n+            ExprKind::Ret(Some(ret_expr)) => Self::expression_returns_unmodified_err(cx, ret_expr, cond_expr),\n+            ExprKind::Path(_) => path_to_local(expr) == path_to_local(cond_expr),\n             _ => false,\n         }\n     }"}, {"sha": "e93469e5f556bd55737c0628961e540e7caf5be1", "filename": "tests/ui/question_mark.fixed", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4/tests%2Fui%2Fquestion_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4/tests%2Fui%2Fquestion_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.fixed?ref=ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4", "patch": "@@ -104,7 +104,11 @@ fn func() -> Option<i32> {\n     Some(0)\n }\n \n-fn result_func(x: Result<i32, &str>) -> Result<i32, &str> {\n+fn func_returning_result() -> Result<i32, i32> {\n+    Ok(1)\n+}\n+\n+fn result_func(x: Result<i32, i32>) -> Result<i32, i32> {\n     let _ = x?;\n \n     x?;\n@@ -113,9 +117,22 @@ fn result_func(x: Result<i32, &str>) -> Result<i32, &str> {\n     let y = if let Ok(x) = x {\n         x\n     } else {\n-        return Err(\"some error\");\n+        return Err(0);\n+    };\n+\n+    // issue #7859\n+    // no warning\n+    let _ = if let Ok(x) = func_returning_result() {\n+        x\n+    } else {\n+        return Err(0);\n     };\n \n+    // no warning\n+    if func_returning_result().is_err() {\n+        return func_returning_result();\n+    }\n+\n     Ok(y)\n }\n "}, {"sha": "dd179e9bee8f87d57c6623617d0b646fb154c684", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4", "patch": "@@ -134,7 +134,11 @@ fn func() -> Option<i32> {\n     Some(0)\n }\n \n-fn result_func(x: Result<i32, &str>) -> Result<i32, &str> {\n+fn func_returning_result() -> Result<i32, i32> {\n+    Ok(1)\n+}\n+\n+fn result_func(x: Result<i32, i32>) -> Result<i32, i32> {\n     let _ = if let Ok(x) = x { x } else { return x };\n \n     if x.is_err() {\n@@ -145,9 +149,22 @@ fn result_func(x: Result<i32, &str>) -> Result<i32, &str> {\n     let y = if let Ok(x) = x {\n         x\n     } else {\n-        return Err(\"some error\");\n+        return Err(0);\n+    };\n+\n+    // issue #7859\n+    // no warning\n+    let _ = if let Ok(x) = func_returning_result() {\n+        x\n+    } else {\n+        return Err(0);\n     };\n \n+    // no warning\n+    if func_returning_result().is_err() {\n+        return func_returning_result();\n+    }\n+\n     Ok(y)\n }\n "}, {"sha": "8d782b71dd6a47ae8368b0d8f8c7ba89b13b34b6", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=ba2ac3e26360a827fcc0e741d3e831ca7e9aa4f4", "patch": "@@ -101,13 +101,13 @@ LL | |     }\n    | |_____^ help: replace it with: `f()?;`\n \n error: this if-let-else may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:138:13\n+  --> $DIR/question_mark.rs:142:13\n    |\n LL |     let _ = if let Ok(x) = x { x } else { return x };\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x?`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:140:5\n+  --> $DIR/question_mark.rs:144:5\n    |\n LL | /     if x.is_err() {\n LL | |         return x;"}]}