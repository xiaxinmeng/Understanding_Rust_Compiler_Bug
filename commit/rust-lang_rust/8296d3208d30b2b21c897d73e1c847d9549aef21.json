{"sha": "8296d3208d30b2b21c897d73e1c847d9549aef21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOTZkMzIwOGQzMGIyYjIxYzg5N2Q3M2UxYzg0N2Q5NTQ5YWVmMjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T16:56:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-15T17:01:05Z"}, "message": "Simplify", "tree": {"sha": "e4a120d9f7ef03e63acd24411a8befb486ccd644", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a120d9f7ef03e63acd24411a8befb486ccd644"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8296d3208d30b2b21c897d73e1c847d9549aef21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8296d3208d30b2b21c897d73e1c847d9549aef21", "html_url": "https://github.com/rust-lang/rust/commit/8296d3208d30b2b21c897d73e1c847d9549aef21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8296d3208d30b2b21c897d73e1c847d9549aef21/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "448575aa4aed72a935f7681ba33419c8d08c1492", "url": "https://api.github.com/repos/rust-lang/rust/commits/448575aa4aed72a935f7681ba33419c8d08c1492", "html_url": "https://github.com/rust-lang/rust/commit/448575aa4aed72a935f7681ba33419c8d08c1492"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "bd7f0aedc1e014167e9c298233e665e007a7a637", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8296d3208d30b2b21c897d73e1c847d9549aef21/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8296d3208d30b2b21c897d73e1c847d9549aef21/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=8296d3208d30b2b21c897d73e1c847d9549aef21", "patch": "@@ -23,8 +23,7 @@ impl ast::BinExpr {\n     pub fn replace_op(&self, op: SyntaxKind) -> Option<ast::BinExpr> {\n         let op_node: SyntaxElement = self.op_details()?.0.into();\n         let to_insert: Option<SyntaxElement> = Some(tokens::op(op).into());\n-        let replace_range = op_node.clone()..=op_node;\n-        Some(replace_children(self, replace_range, to_insert.into_iter()))\n+        Some(replace_children(self, single_node(op_node), to_insert.into_iter()))\n     }\n }\n \n@@ -43,8 +42,7 @@ impl ast::FnDef {\n             return insert_children(self, InsertPosition::Last, to_insert.into_iter());\n         };\n         to_insert.push(body.syntax().clone().into());\n-        let replace_range = old_body_or_semi.clone()..=old_body_or_semi;\n-        replace_children(self, replace_range, to_insert.into_iter())\n+        replace_children(self, single_node(old_body_or_semi), to_insert.into_iter())\n     }\n }\n \n@@ -109,7 +107,7 @@ impl ast::ItemList {\n         let to_insert = iter::once(ws.ws().into());\n         match existing_ws {\n             None => insert_children(self, InsertPosition::After(l_curly), to_insert),\n-            Some(ws) => replace_children(self, ws.clone().into()..=ws.into(), to_insert),\n+            Some(ws) => replace_children(self, single_node(ws), to_insert),\n         }\n     }\n }\n@@ -352,6 +350,11 @@ fn insert_children<N: AstNode>(\n     N::cast(new_syntax).unwrap()\n }\n \n+fn single_node(element: impl Into<SyntaxElement>) -> RangeInclusive<SyntaxElement> {\n+    let element = element.into();\n+    element.clone()..=element\n+}\n+\n #[must_use]\n fn replace_children<N: AstNode>(\n     parent: &N,"}]}