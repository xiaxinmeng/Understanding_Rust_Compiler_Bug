{"sha": "257eaf523f7faabfc9845a238ec3776fc45fcd81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1N2VhZjUyM2Y3ZmFhYmZjOTg0NWEyMzhlYzM3NzZmYzQ1ZmNkODE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-14T04:55:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-05-19T23:17:00Z"}, "message": "Introduce `InternedString::intern`.\n\n`InternedString::intern(x)` is preferable to\n`Symbol::intern(x).as_interned_str()`, because the former involves one\ncall to `with_interner` while the latter involves two.\n\nThe case within InternedString::decode() is particularly hot, and this\nchange reduces the number of `with_interner` calls by up to 13%.", "tree": {"sha": "1d863bfd60039acbd2611d740653bfdd8277a355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d863bfd60039acbd2611d740653bfdd8277a355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/257eaf523f7faabfc9845a238ec3776fc45fcd81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/257eaf523f7faabfc9845a238ec3776fc45fcd81", "html_url": "https://github.com/rust-lang/rust/commit/257eaf523f7faabfc9845a238ec3776fc45fcd81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/257eaf523f7faabfc9845a238ec3776fc45fcd81/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96be5b1889a28d0d44b54a18c8d0467da109656", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96be5b1889a28d0d44b54a18c8d0467da109656", "html_url": "https://github.com/rust-lang/rust/commit/b96be5b1889a28d0d44b54a18c8d0467da109656"}], "stats": {"total": 126, "additions": 60, "deletions": 66}, "files": [{"sha": "a26468b0fb6ce0560bc1a1cb46c404dddd0a1872", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -1,6 +1,6 @@\n use crate::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use crate::hir::HirId;\n-use syntax::symbol::{Symbol, InternedString};\n+use syntax::symbol::InternedString;\n use crate::ty::{Instance, TyCtxt};\n use crate::util::nodemap::FxHashMap;\n use rustc_data_structures::base_n;\n@@ -280,7 +280,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> CodegenUnitNameBuilder<'a, 'gcx, 'tcx> {\n             cgu_name\n         } else {\n             let cgu_name = &cgu_name.as_str()[..];\n-            Symbol::intern(&CodegenUnit::mangle_name(cgu_name)).as_interned_str()\n+            InternedString::intern(&CodegenUnit::mangle_name(cgu_name))\n         }\n     }\n \n@@ -336,6 +336,6 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> CodegenUnitNameBuilder<'a, 'gcx, 'tcx> {\n             write!(cgu_name, \".{}\", special_suffix).unwrap();\n         }\n \n-        Symbol::intern(&cgu_name[..]).as_interned_str()\n+        InternedString::intern(&cgu_name[..])\n     }\n }"}, {"sha": "55216f644a180626fdf1eb15369ce64999fe8c1a", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -18,7 +18,8 @@ use crate::ty::{self, Ty, TyCtxt, TypeFoldable, Predicate, ToPredicate};\n use crate::ty::subst::{Subst, InternalSubsts};\n use std::borrow::Cow;\n use std::iter::{self};\n-use syntax::ast::{self, Name};\n+use syntax::ast::{self};\n+use syntax::symbol::InternedString;\n use syntax_pos::Span;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n@@ -539,7 +540,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n         // are implemented\n         let unsized_self_ty: Ty<'tcx> = self.mk_ty_param(\n             ::std::u32::MAX,\n-            Name::intern(\"RustaceansAreAwesome\").as_interned_str(),\n+            InternedString::intern(\"RustaceansAreAwesome\"),\n         );\n \n         // `Receiver[Self => U]`"}, {"sha": "404fadbc78afce2119335eff2afcfde7e9876c04", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -312,17 +312,15 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n     }\n \n     fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n-        use syntax::symbol::Symbol;\n-\n         match t.sty {\n             ty::Bound(debruijn, bound_ty) if debruijn == self.binder_index => {\n                 self.types.insert(\n                     bound_ty.var.as_u32(),\n                     match bound_ty.kind {\n                         ty::BoundTyKind::Param(name) => name,\n-                        ty::BoundTyKind::Anon => Symbol::intern(\n-                            &format!(\"^{}\", bound_ty.var.as_u32())\n-                        ).as_interned_str(),\n+                        ty::BoundTyKind::Anon =>\n+                            InternedString::intern(&format!(\"^{}\", bound_ty.var.as_u32()),\n+                        ),\n                     }\n                 );\n             }\n@@ -334,8 +332,6 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n     }\n \n     fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n-        use syntax::symbol::Symbol;\n-\n         match r {\n             ty::ReLateBound(index, br) if *index == self.binder_index => {\n                 match br {\n@@ -344,9 +340,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n                     }\n \n                     ty::BoundRegion::BrAnon(var) => {\n-                        self.regions.insert(Symbol::intern(\n-                            &format!(\"'^{}\", var)\n-                        ).as_interned_str());\n+                        self.regions.insert(InternedString::intern(&format!(\"'^{}\", var)));\n                     }\n \n                     _ => (),"}, {"sha": "e1c432d5b6da14e9a805f630f4f282fd8fc7f612", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -3405,7 +3405,7 @@ impl_stable_hash_for!(struct self::SymbolName {\n impl SymbolName {\n     pub fn new(name: &str) -> SymbolName {\n         SymbolName {\n-            name: Symbol::intern(name).as_interned_str()\n+            name: InternedString::intern(name)\n         }\n     }\n "}, {"sha": "91b708d7dbe10339d00813f79f85cfd108a4f57b", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -7,10 +7,8 @@ use crate::middle::region;\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n use crate::ty::subst::{Kind, Subst, UnpackedKind};\n use crate::mir::interpret::ConstValue;\n-use syntax::symbol::{keywords, Symbol};\n-\n use rustc_target::spec::abi::Abi;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::{keywords, InternedString};\n \n use std::cell::Cell;\n use std::fmt::{self, Write as _};\n@@ -1285,10 +1283,10 @@ impl<F: fmt::Write> FmtPrinter<'_, 'gcx, 'tcx, F> {\n     {\n         fn name_by_region_index(index: usize) -> InternedString {\n             match index {\n-                0 => Symbol::intern(\"'r\"),\n-                1 => Symbol::intern(\"'s\"),\n-                i => Symbol::intern(&format!(\"'t{}\", i-2)),\n-            }.as_interned_str()\n+                0 => InternedString::intern(\"'r\"),\n+                1 => InternedString::intern(\"'s\"),\n+                i => InternedString::intern(&format!(\"'t{}\", i-2)),\n+            }\n         }\n \n         // Replace any anonymous late-bound regions with named"}, {"sha": "2fb318a47befd80f6919cd0b22c9eb56bbe3f8f4", "filename": "src/librustc/ty/query/values.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fvalues.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -1,7 +1,7 @@\n use crate::ty::{self, Ty, TyCtxt, AdtSizedConstraint};\n use crate::ty::util::NeedsDrop;\n \n-use syntax::symbol::Symbol;\n+use syntax::symbol::InternedString;\n \n pub(super) trait Value<'tcx>: Sized {\n     fn from_cycle_error<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self;\n@@ -28,7 +28,7 @@ impl<'tcx> Value<'tcx> for Ty<'tcx> {\n \n impl<'tcx> Value<'tcx> for ty::SymbolName {\n     fn from_cycle_error<'a>(_: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n-        ty::SymbolName { name: Symbol::intern(\"<error>\").as_interned_str() }\n+        ty::SymbolName { name: InternedString::intern(\"<error>\") }\n     }\n }\n "}, {"sha": "6915687ceba930d0bde8a5844293a7e7465ca89e", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -101,7 +101,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_mir::monomorphize::item::{InstantiationMode, MonoItem, MonoItemExt};\n use rustc_mir::monomorphize::Instance;\n \n-use syntax_pos::symbol::{Symbol, InternedString};\n+use syntax_pos::symbol::InternedString;\n \n use log::debug;\n \n@@ -238,13 +238,13 @@ fn compute_symbol_name(tcx: TyCtxt<'_, 'tcx, 'tcx>, instance: Instance<'tcx>) ->\n     if def_id.is_local() {\n         if tcx.plugin_registrar_fn(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return Symbol::intern(&tcx.sess.generate_plugin_registrar_symbol(disambiguator))\n-                .as_interned_str();\n+            return\n+                InternedString::intern(&tcx.sess.generate_plugin_registrar_symbol(disambiguator));\n         }\n         if tcx.proc_macro_decls_static(LOCAL_CRATE) == Some(def_id) {\n             let disambiguator = tcx.sess.local_crate_disambiguator();\n-            return Symbol::intern(&tcx.sess.generate_proc_macro_decls_symbol(disambiguator))\n-                .as_interned_str();\n+            return\n+                InternedString::intern(&tcx.sess.generate_proc_macro_decls_symbol(disambiguator));\n         }\n     }\n \n@@ -322,7 +322,7 @@ fn compute_symbol_name(tcx: TyCtxt<'_, 'tcx, 'tcx>, instance: Instance<'tcx>) ->\n         let _ = printer.write_str(\"{{vtable-shim}}\");\n     }\n \n-    Symbol::intern(&printer.path.finish(hash)).as_interned_str()\n+    InternedString::intern(&printer.path.finish(hash))\n }\n \n // Follow C++ namespace-mangling style, see"}, {"sha": "4d8acd241acd893f17910c81d87d8b09d8b979b6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -12,7 +12,6 @@ use rustc::ty::subst::{SubstsRef, UnpackedKind};\n use rustc::ty::{self, RegionKind, RegionVid, Ty, TyCtxt};\n use rustc::ty::print::RegionHighlightMode;\n use rustc_errors::DiagnosticBuilder;\n-use syntax::ast::Name;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n use syntax_pos::symbol::InternedString;\n@@ -791,6 +790,6 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let c = *counter;\n         *counter += 1;\n \n-        Name::intern(&format!(\"'{:?}\", c)).as_interned_str()\n+        InternedString::intern(&format!(\"'{:?}\", c))\n     }\n }"}, {"sha": "6b40245d39a8eae5fb7c094cb85f3d8bd0d122d0", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -10,7 +10,7 @@ use syntax::attr::InlineAttr;\n use std::fmt::{self, Write};\n use std::iter;\n use rustc::mir::mono::Linkage;\n-use syntax_pos::symbol::Symbol;\n+use syntax_pos::symbol::InternedString;\n use syntax::source_map::Span;\n pub use rustc::mir::mono::MonoItem;\n \n@@ -61,7 +61,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n             MonoItem::GlobalAsm(hir_id) => {\n                 let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n                 ty::SymbolName {\n-                    name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id)).as_interned_str()\n+                    name: InternedString::intern(&format!(\"global_asm_{:?}\", def_id))\n                 }\n             }\n         }"}, {"sha": "394d1f06029cb6459f2e579b50d770d9dddbd32a", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 19, "deletions": 24, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -12,7 +12,7 @@ use rustc::lint::builtin::{SAFE_EXTERN_STATICS, SAFE_PACKED_BORROWS, UNUSED_UNSA\n use rustc::mir::*;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext};\n \n-use syntax::symbol::{Symbol, sym};\n+use syntax::symbol::{InternedString, sym};\n \n use std::ops::Bound;\n \n@@ -167,9 +167,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     (CastTy::FnPtr, CastTy::Int(_)) => {\n                         self.register_violations(&[UnsafetyViolation {\n                             source_info: self.source_info,\n-                            description: Symbol::intern(\"cast of pointer to int\").as_interned_str(),\n-                            details: Symbol::intern(\"casting pointers to integers in constants\")\n-                                     .as_interned_str(),\n+                            description: InternedString::intern(\"cast of pointer to int\"),\n+                            details: InternedString::intern(\n+                                \"casting pointers to integers in constants\"),\n                             kind: UnsafetyViolationKind::General,\n                         }], &[]);\n                     },\n@@ -185,9 +185,8 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 if let ty::RawPtr(_) | ty::FnPtr(..) = lhs.ty(self.mir, self.tcx).sty {\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info: self.source_info,\n-                        description: Symbol::intern(\"pointer operation\").as_interned_str(),\n-                        details: Symbol::intern(\"operations on pointers in constants\")\n-                                 .as_interned_str(),\n+                        description: InternedString::intern(\"pointer operation\"),\n+                        details: InternedString::intern(\"operations on pointers in constants\"),\n                         kind: UnsafetyViolationKind::General,\n                     }], &[]);\n                 }\n@@ -212,13 +211,11 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                             self.source_scope_local_data[source_info.scope].lint_root;\n                         self.register_violations(&[UnsafetyViolation {\n                             source_info,\n-                            description: Symbol::intern(\"borrow of packed field\").as_interned_str(),\n-                            details:\n-                                Symbol::intern(\"fields of packed structs might be misaligned: \\\n-                                                dereferencing a misaligned pointer or even just \\\n-                                                creating a misaligned reference is undefined \\\n-                                                behavior\")\n-                                    .as_interned_str(),\n+                            description: InternedString::intern(\"borrow of packed field\"),\n+                            details: InternedString::intern(\n+                                \"fields of packed structs might be misaligned: dereferencing a \\\n+                                misaligned pointer or even just creating a misaligned reference \\\n+                                is undefined behavior\"),\n                             kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n                         }], &[]);\n                     }\n@@ -315,12 +312,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.source_scope_local_data[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n-                        description: Symbol::intern(\"use of extern static\").as_interned_str(),\n-                        details:\n-                            Symbol::intern(\"extern statics are not controlled by the Rust type \\\n-                                            system: invalid data, aliasing violations or data \\\n-                                            races will cause undefined behavior\")\n-                                .as_interned_str(),\n+                        description: InternedString::intern(\"use of extern static\"),\n+                        details: InternedString::intern(\n+                            \"extern statics are not controlled by the Rust type system: invalid \\\n+                            data, aliasing violations or data races will cause undefined behavior\"),\n                         kind: UnsafetyViolationKind::ExternStatic(lint_root)\n                     }], &[]);\n                 }\n@@ -340,8 +335,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n             source_info,\n-            description: Symbol::intern(description).as_interned_str(),\n-            details: Symbol::intern(details).as_interned_str(),\n+            description: InternedString::intern(description),\n+            details: InternedString::intern(details),\n             kind,\n         }], &[]);\n     }\n@@ -441,8 +436,8 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n                                 let source_info = self.source_info;\n                                 self.register_violations(&[UnsafetyViolation {\n                                     source_info,\n-                                    description: Symbol::intern(description).as_interned_str(),\n-                                    details: Symbol::intern(details).as_interned_str(),\n+                                    description: InternedString::intern(description),\n+                                    details: InternedString::intern(details),\n                                     kind: UnsafetyViolationKind::GeneralAndConstFn,\n                                 }], &[]);\n                             }"}, {"sha": "c6191e6b579ce45c036876db9c47656585997c97", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::subst::Subst;\n use crate::require_same_types;\n \n use rustc_target::spec::abi::Abi;\n-use syntax::symbol::Symbol;\n+use syntax::symbol::InternedString;\n \n use rustc::hir;\n \n@@ -80,7 +80,7 @@ pub fn intrisic_operation_unsafety(intrinsic: &str) -> hir::Unsafety {\n /// and in libcore/intrinsics.rs\n pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       it: &hir::ForeignItem) {\n-    let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)).as_interned_str());\n+    let param = |n| tcx.mk_ty_param(n, InternedString::intern(&format!(\"P{}\", n)));\n     let name = it.ident.as_str();\n \n     let mk_va_list_ty = || {\n@@ -397,7 +397,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                it: &hir::ForeignItem) {\n     let param = |n| {\n-        let name = Symbol::intern(&format!(\"P{}\", n)).as_interned_str();\n+        let name = InternedString::intern(&format!(\"P{}\", n));\n         tcx.mk_ty_param(n, name)\n     };\n "}, {"sha": "711d79f95f53a658d42a1fff866a78c9a78ff4e5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -39,7 +39,7 @@ use syntax::ast::{Ident, MetaItemKind};\n use syntax::attr::{InlineAttr, OptimizeAttr, list_contains_name, mark_used};\n use syntax::source_map::Spanned;\n use syntax::feature_gate;\n-use syntax::symbol::{keywords, Symbol, sym};\n+use syntax::symbol::{InternedString, keywords, Symbol, sym};\n use syntax_pos::{Span, DUMMY_SP};\n \n use rustc::hir::def::{CtorKind, Res, DefKind};\n@@ -1082,7 +1082,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n                 .enumerate()\n                 .map(|(i, &arg)| ty::GenericParamDef {\n                     index: type_start + i as u32,\n-                    name: Symbol::intern(arg).as_interned_str(),\n+                    name: InternedString::intern(arg),\n                     def_id,\n                     pure_wrt_drop: false,\n                     kind: ty::GenericParamDefKind::Type {\n@@ -1097,7 +1097,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n             params.extend(upvars.iter().zip((dummy_args.len() as u32)..).map(|(_, i)| {\n                 ty::GenericParamDef {\n                     index: type_start + i,\n-                    name: Symbol::intern(\"<upvar>\").as_interned_str(),\n+                    name: InternedString::intern(\"<upvar>\"),\n                     def_id,\n                     pure_wrt_drop: false,\n                     kind: ty::GenericParamDefKind::Type {"}, {"sha": "e0425220c3fdcac95458f12e008a877ed39e45b6", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/257eaf523f7faabfc9845a238ec3776fc45fcd81/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=257eaf523f7faabfc9845a238ec3776fc45fcd81", "patch": "@@ -1134,6 +1134,13 @@ pub struct InternedString {\n }\n \n impl InternedString {\n+    /// Maps a string to its interned representation.\n+    pub fn intern(string: &str) -> Self {\n+        InternedString {\n+            symbol: Symbol::intern(string)\n+        }\n+    }\n+\n     pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n         let str = with_interner(|interner| {\n             interner.get(self.symbol) as *const str\n@@ -1236,7 +1243,7 @@ impl fmt::Display for InternedString {\n \n impl Decodable for InternedString {\n     fn decode<D: Decoder>(d: &mut D) -> Result<InternedString, D::Error> {\n-        Ok(Symbol::intern(&d.read_str()?).as_interned_str())\n+        Ok(InternedString::intern(&d.read_str()?))\n     }\n }\n "}]}