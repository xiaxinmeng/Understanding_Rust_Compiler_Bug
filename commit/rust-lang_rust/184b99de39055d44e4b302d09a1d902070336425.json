{"sha": "184b99de39055d44e4b302d09a1d902070336425", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NGI5OWRlMzkwNTVkNDRlNGIzMDJkMDlhMWQ5MDIwNzAzMzY0MjU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-07-07T06:20:01Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-07-07T06:20:01Z"}, "message": "Merge branch 'pr-2889'", "tree": {"sha": "c6a6e7df6da05ff8ce465d1f6fd16435d9bdd92a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6a6e7df6da05ff8ce465d1f6fd16435d9bdd92a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/184b99de39055d44e4b302d09a1d902070336425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/184b99de39055d44e4b302d09a1d902070336425", "html_url": "https://github.com/rust-lang/rust/commit/184b99de39055d44e4b302d09a1d902070336425", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/184b99de39055d44e4b302d09a1d902070336425/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e92e7afb480799298225656f97dd1525f81bc47", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e92e7afb480799298225656f97dd1525f81bc47", "html_url": "https://github.com/rust-lang/rust/commit/5e92e7afb480799298225656f97dd1525f81bc47"}, {"sha": "aad450ef923091ba4699891df0fe518f0d3686f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad450ef923091ba4699891df0fe518f0d3686f6", "html_url": "https://github.com/rust-lang/rust/commit/aad450ef923091ba4699891df0fe518f0d3686f6"}], "stats": {"total": 113, "additions": 80, "deletions": 33}, "files": [{"sha": "d0f1ebdd1daf34e522473ce7ce3210af09beef95", "filename": "Cargo.toml", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -45,6 +45,46 @@ clippy_lints = { version = \"0.0.211\", path = \"clippy_lints\" }\n regex = \"1\"\n semver = \"0.9\"\n \n+# Not actually needed right now but required to make sure that clippy/ and cargo build\n+# with the same set of features in rust-lang/rust\n+num-traits = \"0.2\" # enable the default feature\n+backtrace = \"0.3\"\n+\n+# keep in sync with `cargo`'s `Cargo.toml'\n+[target.'cfg(windows)'.dependencies.winapi]\n+version = \"0.3\"\n+features = [\n+  # keep in sync with `cargo`'s `Cargo.toml'\n+  \"handleapi\",\n+  \"jobapi\",\n+  \"jobapi2\",\n+  \"minwindef\",\n+  \"ntdef\",\n+  \"ntstatus\",\n+  \"processenv\",\n+  \"processthreadsapi\",\n+  \"psapi\",\n+  \"synchapi\",\n+  \"winerror\",\n+  \"winbase\",\n+  \"wincon\",\n+  \"winnt\",\n+  # no idea where these come from\n+  \"basetsd\",\n+  \"lmcons\",\n+  \"memoryapi\",\n+  \"minschannel\",\n+  \"minwinbase\",\n+  \"ntsecapi\",\n+  \"profileapi\",\n+  \"schannel\",\n+  \"securitybaseapi\",\n+  \"synchapi\",\n+  \"sysinfoapi\",\n+  \"timezoneapi\",\n+  \"wincrypt\",\n+]\n+\n [dev-dependencies]\n cargo_metadata = \"0.5\"\n compiletest_rs = \"0.3.7\""}, {"sha": "6fc6637900dfde2141f959139c590be28ce571b9", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -13,7 +13,6 @@ use std::mem;\n use std::rc::Rc;\n use syntax::ast::{FloatTy, LitKind};\n use syntax::ptr::P;\n-use rustc::middle::const_val::ConstVal;\n use crate::utils::{sext, unsext, clip};\n \n #[derive(Debug, Copy, Clone)]\n@@ -428,15 +427,15 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n pub fn miri_to_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, result: &ty::Const<'tcx>) -> Option<Constant> {\n     use rustc::mir::interpret::{Scalar, ConstValue};\n     match result.val {\n-        ConstVal::Value(ConstValue::Scalar(Scalar::Bits{ bits: b, ..})) => match result.ty.sty {\n+        ConstValue::Scalar(Scalar::Bits{ bits: b, ..}) => match result.ty.sty {\n             ty::TyBool => Some(Constant::Bool(b == 1)),\n             ty::TyUint(_) | ty::TyInt(_) => Some(Constant::Int(b)),\n             ty::TyFloat(FloatTy::F32) => Some(Constant::F32(f32::from_bits(b as u32))),\n             ty::TyFloat(FloatTy::F64) => Some(Constant::F64(f64::from_bits(b as u64))),\n             // FIXME: implement other conversion\n             _ => None,\n         },\n-        ConstVal::Value(ConstValue::ScalarPair(Scalar::Ptr(ptr), Scalar::Bits { bits: n, .. })) => match result.ty.sty {\n+        ConstValue::ScalarPair(Scalar::Ptr(ptr), Scalar::Bits { bits: n, .. }) => match result.ty.sty {\n             ty::TyRef(_, tam, _) => match tam.sty {\n                 ty::TyStr => {\n                     let alloc = tcx"}, {"sha": "9a0263f2f68c2a2e6cf0b958e44989954cb9fac4", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -44,7 +44,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EnumGlobUse {\n \n impl EnumGlobUse {\n     fn lint_item(&self, cx: &LateContext, item: &Item) {\n-        if item.vis == Visibility::Public {\n+        if item.vis.node == VisibilityKind::Public {\n             return; // re-exports are fine\n         }\n         if let ItemUse(ref path, UseKind::Glob) = item.node {"}, {"sha": "c718e1f417c99f28cdf8b2eea8942e74cf125f5b", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -108,7 +108,8 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             return;\n         }\n         if let Categorization::Rvalue(..) = cmt.cat {\n-            if let Some(NodeStmt(st)) = map.find(map.get_parent_node(cmt.id)) {\n+            let id = map.hir_to_node_id(cmt.hir_id);\n+            if let Some(NodeStmt(st)) = map.find(map.get_parent_node(id)) {\n                 if let StmtDecl(ref decl, _) = st.node {\n                     if let DeclLocal(ref loc) = decl.node {\n                         if let Some(ref ex) = loc.init {"}, {"sha": "c6bf264ff38f59deb9749c199746d78e2573d16f", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -342,16 +342,23 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n                 self.record(&None);\n             },\n             TyPath(ref path) => {\n-                self.collect_anonymous_lifetimes(path, ty);\n-            },\n-            TyImplTraitExistential(exist_ty_id, _, _) => {\n-                if let ItemExistential(ref exist_ty) = self.cx.tcx.hir.expect_item(exist_ty_id.id).node {\n-                    for bound in &exist_ty.bounds {\n-                        if let GenericBound::Outlives(_) = *bound {\n-                            self.record(&None);\n+                if let QPath::Resolved(_, ref path) = *path {\n+                    if let Def::Existential(def_id) = path.def {\n+                        let node_id = self.cx.tcx.hir.as_local_node_id(def_id).unwrap();\n+                        if let ItemExistential(ref exist_ty) = self.cx.tcx.hir.expect_item(node_id).node {\n+                            for bound in &exist_ty.bounds {\n+                                if let GenericBound::Outlives(_) = *bound {\n+                                    self.record(&None);\n+                                }\n+                            }\n+                        } else {\n+                            unreachable!()\n                         }\n+                        walk_ty(self, ty);\n+                        return;\n                     }\n                 }\n+                self.collect_anonymous_lifetimes(path, ty);\n             }\n             TyTraitObject(ref bounds, ref lt) => {\n                 if !lt.is_elided() {"}, {"sha": "1d1d0ef8faa1d879be5356b5b622fe16946e5502", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -840,7 +840,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                             .iter()\n                             .any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics));\n                         then {\n-                            let lint = if item.vis == hir::Visibility::Public {\n+                            let lint = if item.vis.node == hir::VisibilityKind::Public {\n                                 WRONG_PUB_SELF_CONVENTION\n                             } else {\n                                 WRONG_SELF_CONVENTION"}, {"sha": "ccc4c9df6e7feb986f65efd1803e11f185f6f86c", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -51,14 +51,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             return;\n         }\n         println!(\"impl item `{}`\", item.ident.name);\n-        match item.vis {\n-            hir::Visibility::Public => println!(\"public\"),\n-            hir::Visibility::Crate(_) => println!(\"visible crate wide\"),\n-            hir::Visibility::Restricted { ref path, .. } => println!(\n+        match item.vis.node {\n+            hir::VisibilityKind::Public => println!(\"public\"),\n+            hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n+            hir::VisibilityKind::Restricted { ref path, .. } => println!(\n                 \"visible in module `{}`\",\n                 print::to_string(print::NO_ANN, |s| s.print_path(path, false))\n             ),\n-            hir::Visibility::Inherited => println!(\"visibility inherited from outer item\"),\n+            hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n         }\n         if item.defaultness.is_default() {\n             println!(\"default\");\n@@ -343,14 +343,14 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n fn print_item(cx: &LateContext, item: &hir::Item) {\n     let did = cx.tcx.hir.local_def_id(item.id);\n     println!(\"item `{}`\", item.name);\n-    match item.vis {\n-        hir::Visibility::Public => println!(\"public\"),\n-        hir::Visibility::Crate(_) => println!(\"visible crate wide\"),\n-        hir::Visibility::Restricted { ref path, .. } => println!(\n+    match item.vis.node {\n+        hir::VisibilityKind::Public => println!(\"public\"),\n+        hir::VisibilityKind::Crate(_) => println!(\"visible crate wide\"),\n+        hir::VisibilityKind::Restricted { ref path, .. } => println!(\n             \"visible in module `{}`\",\n             print::to_string(print::NO_ANN, |s| s.print_path(path, false))\n         ),\n-        hir::Visibility::Inherited => println!(\"visibility inherited from outer item\"),\n+        hir::VisibilityKind::Inherited => println!(\"visibility inherited from outer item\"),\n     }\n     match item.node {\n         hir::ItemExternCrate(ref _renamed_from) => {"}, {"sha": "f0e3961600c108d805ab3145f583b2655fca15d4", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n         if let ItemStatic(ref ty, MutImmutable, body_id) = item.node {\n             if is_lint_ref_type(ty) {\n                 self.declared_lints.insert(item.name, item.span);\n-            } else if is_lint_array_type(ty) && item.vis == Visibility::Inherited && item.name == \"ARRAY\" {\n+            } else if is_lint_array_type(ty) && item.vis.node == VisibilityKind::Inherited && item.name == \"ARRAY\" {\n                 let mut collector = LintCollector {\n                     output: &mut self.registered_lints,\n                     cx,"}, {"sha": "4d89f8ddffbbfbe424edea905fdfbeee756b089c", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -2,18 +2,18 @@\n //! about.\n \n pub const ANY_TRAIT: [&str; 3] = [\"std\", \"any\", \"Any\"];\n-pub const ARC: [&str; 3] = [\"alloc\", \"arc\", \"Arc\"];\n+pub const ARC: [&str; 3] = [\"alloc\", \"sync\", \"Arc\"];\n pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n pub const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n-pub const BINARY_HEAP: [&str; 3] = [\"alloc\", \"binary_heap\", \"BinaryHeap\"];\n+pub const BINARY_HEAP: [&str; 4] = [\"alloc\", \"collections\", \"binary_heap\", \"BinaryHeap\"];\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BOX: [&str; 3] = [\"std\", \"boxed\", \"Box\"];\n pub const BOX_NEW: [&str; 4] = [\"std\", \"boxed\", \"Box\", \"new\"];\n-pub const BTREEMAP: [&str; 4] = [\"alloc\", \"btree\", \"map\", \"BTreeMap\"];\n-pub const BTREEMAP_ENTRY: [&str; 4] = [\"alloc\", \"btree\", \"map\", \"Entry\"];\n-pub const BTREESET: [&str; 4] = [\"alloc\", \"btree\", \"set\", \"BTreeSet\"];\n+pub const BTREEMAP: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\"];\n+pub const BTREEMAP_ENTRY: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"map\", \"Entry\"];\n+pub const BTREESET: [&str; 5] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\"];\n pub const CLONE: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n pub const CLONE_TRAIT: [&str; 3] = [\"core\", \"clone\", \"Clone\"];\n pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n@@ -47,7 +47,7 @@ pub const IO_PRINT: [&str; 4] = [\"std\", \"io\", \"stdio\", \"_print\"];\n pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const ITERATOR: [&str; 4] = [\"core\", \"iter\", \"iterator\", \"Iterator\"];\n-pub const LINKED_LIST: [&str; 3] = [\"alloc\", \"linked_list\", \"LinkedList\"];\n+pub const LINKED_LIST: [&str; 4] = [\"alloc\", \"collections\", \"linked_list\", \"LinkedList\"];\n pub const LINT: [&str; 2] = [\"lint\", \"Lint\"];\n pub const LINT_ARRAY: [&str; 2] = [\"lint\", \"LintArray\"];\n pub const MEM_FORGET: [&str; 3] = [\"core\", \"mem\", \"forget\"];\n@@ -101,7 +101,7 @@ pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n pub const UNINIT: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"uninit\"];\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];\n-pub const VEC_DEQUE: [&str; 3] = [\"alloc\", \"vec_deque\", \"VecDeque\"];\n+pub const VEC_DEQUE: [&str; 4] = [\"alloc\", \"collections\", \"vec_deque\", \"VecDeque\"];\n pub const VEC_FROM_ELEM: [&str; 3] = [\"alloc\", \"vec\", \"from_elem\"];\n-pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"arc\", \"Weak\"];\n+pub const WEAK_ARC: [&str; 3] = [\"alloc\", \"sync\", \"Weak\"];\n pub const WEAK_RC: [&str; 3] = [\"alloc\", \"rc\", \"Weak\"];"}, {"sha": "1318ed78717da7d072ba711da6c88d2b59d2c417", "filename": "tests/ui/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/184b99de39055d44e4b302d09a1d902070336425/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/184b99de39055d44e4b302d09a1d902070336425/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=184b99de39055d44e4b302d09a1d902070336425", "patch": "@@ -6,7 +6,7 @@\n #![allow(dead_code, needless_pass_by_value)]\n \n extern crate alloc;\n-use alloc::linked_list::LinkedList;\n+use alloc::collections::linked_list::LinkedList;\n \n trait Foo {\n     type Baz = LinkedList<u8>;"}]}