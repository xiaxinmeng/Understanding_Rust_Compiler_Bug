{"sha": "c0560c275587db1131414dd395092ea5b80070b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNTYwYzI3NTU4N2RiMTEzMTQxNGRkMzk1MDkyZWE1YjgwMDcwYjY=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-11-19T13:55:57Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-11-30T20:18:56Z"}, "message": "Back to #method for links on char", "tree": {"sha": "9de7014e9c9619bb08c6ac55ad589d7746b6765c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de7014e9c9619bb08c6ac55ad589d7746b6765c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0560c275587db1131414dd395092ea5b80070b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0560c275587db1131414dd395092ea5b80070b6", "html_url": "https://github.com/rust-lang/rust/commit/c0560c275587db1131414dd395092ea5b80070b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0560c275587db1131414dd395092ea5b80070b6/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af40c0430181c57a0fce8e74fea1e128889d7cb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/af40c0430181c57a0fce8e74fea1e128889d7cb3", "html_url": "https://github.com/rust-lang/rust/commit/af40c0430181c57a0fce8e74fea1e128889d7cb3"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "2baea7842a796ed12293d701b8e872f66d0d49d7", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c0560c275587db1131414dd395092ea5b80070b6/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0560c275587db1131414dd395092ea5b80070b6/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=c0560c275587db1131414dd395092ea5b80070b6", "patch": "@@ -112,7 +112,7 @@ impl char {\n     /// For an unsafe version of this function which ignores these checks, see\n     /// [`from_u32_unchecked`].\n     ///\n-    /// [`from_u32_unchecked`]: crate::primitive::char::from_u32_unchecked()\n+    /// [`from_u32_unchecked`]: #method.from_u32_unchecked\n     ///\n     /// # Examples\n     ///\n@@ -163,7 +163,7 @@ impl char {\n     ///\n     /// For a safe version of this function, see the [`from_u32`] function.\n     ///\n-    /// [`from_u32`]: crate::primitive::char::from_u32()\n+    /// [`from_u32`]: #method.from_u32\n     ///\n     /// # Examples\n     ///\n@@ -256,7 +256,7 @@ impl char {\n     ///\n     /// For a more comprehensive understanding of 'digit', see [`is_numeric()`].\n     ///\n-    /// [`is_numeric()`]: crate::primitive::char::is_numeric()\n+    /// [`is_numeric()`]: #method.is_numeric\n     ///\n     /// # Panics\n     ///\n@@ -481,7 +481,7 @@ impl char {\n     /// * All other characters are given hexadecimal Unicode escapes; see\n     ///   [`escape_unicode`].\n     ///\n-    /// [`escape_unicode`]: crate::primitive::char::escape_unicode()\n+    /// [`escape_unicode`]: #method.escape_unicode\n     ///\n     /// # Examples\n     ///\n@@ -582,7 +582,7 @@ impl char {\n     /// See the documentation for [`len_utf8()`] for more explanation of this\n     /// concept. This function is a mirror, but for UTF-16 instead of UTF-8.\n     ///\n-    /// [`len_utf8()`]: crate::primitive::char::len_utf8()\n+    /// [`len_utf8()`]: #method.len_utf8\n     ///\n     /// # Examples\n     ///\n@@ -797,8 +797,8 @@ impl char {\n \n     /// Returns `true` if this `char` satisfies either [`is_alphabetic()`] or [`is_numeric()`].\n     ///\n-    /// [`is_alphabetic()`]: crate::primitive::char::is_alphabetic()\n-    /// [`is_numeric()`]: crate::primitive::char::is_numeric()\n+    /// [`is_alphabetic()`]: #method.is_alphabetic\n+    /// [`is_numeric()`]: #method.is_numeric\n     ///\n     /// # Examples\n     ///\n@@ -1085,8 +1085,8 @@ impl char {\n     /// assert_eq!('\u2764', non_ascii.to_ascii_uppercase());\n     /// ```\n     ///\n-    /// [`make_ascii_uppercase()`]: crate::primitive::char::make_ascii_uppercase()\n-    /// [`to_uppercase()`]: crate::primitive::char::to_uppercase()\n+    /// [`make_ascii_uppercase()`]: #method.make_ascii_uppercase\n+    /// [`to_uppercase()`]: #method.to_uppercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> char {\n@@ -1113,8 +1113,8 @@ impl char {\n     /// assert_eq!('\u2764', non_ascii.to_ascii_lowercase());\n     /// ```\n     ///\n-    /// [`make_ascii_lowercase()`]: crate::primitive::char::make_ascii_lowercase()\n-    /// [`to_lowercase()`]: crate::primitive::char::to_lowercase()\n+    /// [`make_ascii_lowercase()`]: #method.make_ascii_lowercase\n+    /// [`to_lowercase()`]: #method.to_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> char {\n@@ -1160,7 +1160,7 @@ impl char {\n     /// assert_eq!('A', ascii);\n     /// ```\n     ///\n-    /// [`to_ascii_uppercase()`]: crate::primitive::char::to_ascii_uppercase()\n+    /// [`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_uppercase(&mut self) {\n@@ -1185,7 +1185,7 @@ impl char {\n     /// assert_eq!('a', ascii);\n     /// ```\n     ///\n-    /// [`to_ascii_lowercase()`]: crate::primitive::char::to_ascii_lowercase()\n+    /// [`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn make_ascii_lowercase(&mut self) {"}]}