{"sha": "941e062fd41fd4eb73a1254d8da1acf9d751ce62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MWUwNjJmZDQxZmQ0ZWI3M2ExMjU0ZDhkYTFhY2Y5ZDc1MWNlNjI=", "commit": {"author": {"name": "bootandy", "email": "bootandy@gmail.com", "date": "2018-02-15T14:56:12Z"}, "committer": {"name": "bootandy", "email": "bootandy@gmail.com", "date": "2018-02-19T17:14:53Z"}, "message": "Fix: point to correct problem part of code\n\nFix span so it no longer contains the whole train-wreck of code and only\npoints to the problem function (for the unwrap_or lint).\n\nhttps://github.com/rust-lang-nursery/rust-clippy/issues/2422\n\nUpdate ui test methods - it had several cases where the error message\nspan is now shorter", "tree": {"sha": "72e00e709bae6880076f46b711dc8b95f2efae7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72e00e709bae6880076f46b711dc8b95f2efae7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/941e062fd41fd4eb73a1254d8da1acf9d751ce62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/941e062fd41fd4eb73a1254d8da1acf9d751ce62", "html_url": "https://github.com/rust-lang/rust/commit/941e062fd41fd4eb73a1254d8da1acf9d751ce62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/941e062fd41fd4eb73a1254d8da1acf9d751ce62/comments", "author": {"login": "bootandy", "id": 311785, "node_id": "MDQ6VXNlcjMxMTc4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/311785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bootandy", "html_url": "https://github.com/bootandy", "followers_url": "https://api.github.com/users/bootandy/followers", "following_url": "https://api.github.com/users/bootandy/following{/other_user}", "gists_url": "https://api.github.com/users/bootandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/bootandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bootandy/subscriptions", "organizations_url": "https://api.github.com/users/bootandy/orgs", "repos_url": "https://api.github.com/users/bootandy/repos", "events_url": "https://api.github.com/users/bootandy/events{/privacy}", "received_events_url": "https://api.github.com/users/bootandy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bootandy", "id": 311785, "node_id": "MDQ6VXNlcjMxMTc4NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/311785?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bootandy", "html_url": "https://github.com/bootandy", "followers_url": "https://api.github.com/users/bootandy/followers", "following_url": "https://api.github.com/users/bootandy/following{/other_user}", "gists_url": "https://api.github.com/users/bootandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/bootandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bootandy/subscriptions", "organizations_url": "https://api.github.com/users/bootandy/orgs", "repos_url": "https://api.github.com/users/bootandy/repos", "events_url": "https://api.github.com/users/bootandy/events{/privacy}", "received_events_url": "https://api.github.com/users/bootandy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b3487a916b22312cc67fef0d3ec49985fc1197b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b3487a916b22312cc67fef0d3ec49985fc1197b", "html_url": "https://github.com/rust-lang/rust/commit/6b3487a916b22312cc67fef0d3ec49985fc1197b"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "b65775ea7b30552e2877fa9fb44543bb8629296c", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/941e062fd41fd4eb73a1254d8da1acf9d751ce62/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941e062fd41fd4eb73a1254d8da1acf9d751ce62/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=941e062fd41fd4eb73a1254d8da1acf9d751ce62", "patch": "@@ -913,6 +913,10 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n             return;\n         }\n \n+        let start_point = self_expr.span.hi();\n+        let end_point = span.hi();\n+        let span_replace_word = Span::new(start_point, end_point, span.ctxt());\n+\n         // don't lint for constant values\n         let owner_def = cx.tcx.hir.get_parent_did(arg.id);\n         let promotable = cx.tcx.rvalue_promotable_map(owner_def).contains(&arg.hir_id.local_id);\n@@ -939,14 +943,13 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n             (false, false) => format!(\"|| {}\", snippet(cx, arg.span, \"..\")).into(),\n             (false, true) => snippet(cx, fun_span, \"..\"),\n         };\n-\n         span_lint_and_sugg(\n             cx,\n             OR_FUN_CALL,\n-            span,\n+            span_replace_word ,\n             &format!(\"use of `{}` followed by a function call\", name),\n             \"try this\",\n-            format!(\"{}.{}_{}({})\", snippet(cx, self_expr.span, \"_\"), name, suffix, sugg),\n+            format!(\".{}_{}({})\", name, suffix, sugg),\n         );\n     }\n "}, {"sha": "952a5ee124e7622bfe76ab26fc950c31941a7d6e", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/941e062fd41fd4eb73a1254d8da1acf9d751ce62/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/941e062fd41fd4eb73a1254d8da1acf9d751ce62/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=941e062fd41fd4eb73a1254d8da1acf9d751ce62", "patch": "@@ -350,10 +350,10 @@ error: unnecessary structure name repetition\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:307:5\n+   --> $DIR/methods.rs:307:21\n     |\n 307 |     with_constructor.unwrap_or(make());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n+    |                     ^^^^^^^^^^^^^^^^^^ help: try this: `.unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n@@ -364,22 +364,22 @@ error: use of `unwrap_or` followed by a call to `new`\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:313:5\n+   --> $DIR/methods.rs:313:20\n     |\n 313 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n+    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `.unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:316:5\n+   --> $DIR/methods.rs:316:13\n     |\n 316 |     with_err.unwrap_or(make());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n+    |             ^^^^^^^^^^^^^^^^^^ help: try this: `.unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:319:5\n+   --> $DIR/methods.rs:319:18\n     |\n 319 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n+    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `.unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n    --> $DIR/methods.rs:322:5\n@@ -394,34 +394,34 @@ error: use of `unwrap_or` followed by a call to `default`\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:328:5\n+   --> $DIR/methods.rs:328:13\n     |\n 328 |     with_vec.unwrap_or(vec![]);\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n+    |             ^^^^^^^^^^^^^^^^^^ help: try this: `.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:333:5\n+   --> $DIR/methods.rs:333:20\n     |\n 333 |     without_default.unwrap_or(Foo::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n+    |                    ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `.unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:336:5\n+   --> $DIR/methods.rs:336:18\n     |\n 336 |     map.entry(42).or_insert(String::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n+    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `.or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:339:5\n+   --> $DIR/methods.rs:339:20\n     |\n 339 |     btree.entry(42).or_insert(String::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n+    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `.or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:342:13\n+   --> $DIR/methods.rs:342:20\n     |\n 342 |     let _ = stringy.unwrap_or(\"\".to_owned());\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n+    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `.unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n    --> $DIR/methods.rs:353:23"}, {"sha": "b95e58ee9a350cba06b1e4c9154840f071758b57", "filename": "tests/ui/unwrap_or.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/941e062fd41fd4eb73a1254d8da1acf9d751ce62/tests%2Fui%2Funwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/941e062fd41fd4eb73a1254d8da1acf9d751ce62/tests%2Fui%2Funwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.rs?ref=941e062fd41fd4eb73a1254d8da1acf9d751ce62", "patch": "@@ -0,0 +1,5 @@\n+#![warn(clippy)]\n+\n+fn main() {\n+    let s = Some(String::from(\"test string\")).unwrap_or(\"Fail\".to_string()).len();\n+}"}, {"sha": "e9bf57ba0ec63b18db25aee512ead7a8f4d527d8", "filename": "tests/ui/unwrap_or.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/941e062fd41fd4eb73a1254d8da1acf9d751ce62/tests%2Fui%2Funwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/941e062fd41fd4eb73a1254d8da1acf9d751ce62/tests%2Fui%2Funwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.stderr?ref=941e062fd41fd4eb73a1254d8da1acf9d751ce62", "patch": "@@ -0,0 +1,10 @@\n+error: use of `unwrap_or` followed by a function call\n+ --> $DIR/unwrap_or.rs:4:46\n+  |\n+4 |     let s = Some(String::from(\"test string\")).unwrap_or(\"Fail\".to_string()).len();\n+  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `.unwrap_or_else(|| \"Fail\".to_string())`\n+  |\n+  = note: `-D or-fun-call` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/unwrap_or.stdout", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/941e062fd41fd4eb73a1254d8da1acf9d751ce62/tests%2Fui%2Funwrap_or.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/941e062fd41fd4eb73a1254d8da1acf9d751ce62/tests%2Fui%2Funwrap_or.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or.stdout?ref=941e062fd41fd4eb73a1254d8da1acf9d751ce62"}]}