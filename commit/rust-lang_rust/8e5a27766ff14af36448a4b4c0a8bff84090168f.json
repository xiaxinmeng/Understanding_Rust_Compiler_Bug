{"sha": "8e5a27766ff14af36448a4b4c0a8bff84090168f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNWEyNzc2NmZmMTRhZjM2NDQ4YTRiNGMwYThiZmY4NDA5MDE2OGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-14T02:59:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-14T02:59:44Z"}, "message": "Auto merge of #75510 - tmandry:rollup-tb9mllu, r=tmandry\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #74650 (Correctly parse `{} && false` in tail expression)\n - #75319 (Fix ICE #75307 in `format`)\n - #75417 (Don't spill operands onto the stack in naked functions)\n - #75452 (self-profile: Cache more query key strings when doing self-profiling.)\n - #75459 (fix LocalInfo doc comment)\n - #75462 (Remove unused tcx parameter)\n - #75467 (Fix E0741 error code explanation)\n - #75471 (Change registered \"program name\" for -Cllvm-args usage messages)\n - #75477 (Expand function pointer docs)\n - #75479 (make rustc-docs component available to rustup)\n - #75496 (Prioritization WG: Open Zulip topics only for `I-prioritize` issues)\n - #75500 (Disable zlib in LLVM on aarch64-apple-darwin)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "546c656169f02561ab78fc78448cc9557aecb2a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/546c656169f02561ab78fc78448cc9557aecb2a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e5a27766ff14af36448a4b4c0a8bff84090168f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e5a27766ff14af36448a4b4c0a8bff84090168f", "html_url": "https://github.com/rust-lang/rust/commit/8e5a27766ff14af36448a4b4c0a8bff84090168f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e5a27766ff14af36448a4b4c0a8bff84090168f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81dc88f88f92ba8ad7465f9cba10c12d3a7b70f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/81dc88f88f92ba8ad7465f9cba10c12d3a7b70f1", "html_url": "https://github.com/rust-lang/rust/commit/81dc88f88f92ba8ad7465f9cba10c12d3a7b70f1"}, {"sha": "e8acafd9d3451775e6d537732a694b36e3739330", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8acafd9d3451775e6d537732a694b36e3739330", "html_url": "https://github.com/rust-lang/rust/commit/e8acafd9d3451775e6d537732a694b36e3739330"}], "stats": {"total": 454, "additions": 235, "deletions": 219}, "files": [{"sha": "bca1732b84d95677af4fbb4742c3b7d11beea5ab", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 48, "deletions": 9, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -1058,6 +1058,8 @@ mod prim_ref {}\n /// not be null, so if you want to pass a function pointer over FFI and be able to accommodate null\n /// pointers, make your type `Option<fn()>` with your required signature.\n ///\n+/// ### Safety\n+///\n /// Plain function pointers are obtained by casting either plain functions, or closures that don't\n /// capture an environment:\n ///\n@@ -1095,23 +1097,60 @@ mod prim_ref {}\n /// let really_safe_ptr: unsafe fn(usize) -> usize = add_one;\n /// ```\n ///\n-/// On top of that, function pointers can vary based on what ABI they use. This is achieved by\n-/// adding the `extern` keyword to the type name, followed by the ABI in question. For example,\n-/// `fn()` is different from `extern \"C\" fn()`, which itself is different from `extern \"stdcall\"\n-/// fn()`, and so on for the various ABIs that Rust supports. Non-`extern` functions have an ABI\n-/// of `\"Rust\"`, and `extern` functions without an explicit ABI have an ABI of `\"C\"`. For more\n-/// information, see [the nomicon's section on foreign calling conventions][nomicon-abi].\n+/// ### ABI\n+///\n+/// On top of that, function pointers can vary based on what ABI they use. This\n+/// is achieved by adding the `extern` keyword before the type, followed by the\n+/// ABI in question. The default ABI is \"Rust\", i.e., `fn()` is the exact same\n+/// type as `extern \"Rust\" fn()`. A pointer to a function with C ABI would have\n+/// type `extern \"C\" fn()`.\n+///\n+/// `extern \"ABI\" { ... }` blocks declare functions with ABI \"ABI\". The default\n+/// here is \"C\", i.e., functions declared in an `extern {...}` block have \"C\"\n+/// ABI.\n+///\n+/// For more information and a list of supported ABIs, see [the nomicon's\n+/// section on foreign calling conventions][nomicon-abi].\n ///\n-/// [nomicon-abi]: ../nomicon/ffi.html#foreign-calling-conventions\n+/// ### Variadic functions\n ///\n /// Extern function declarations with the \"C\" or \"cdecl\" ABIs can also be *variadic*, allowing them\n-/// to be called with a variable number of arguments. Normal rust functions, even those with an\n+/// to be called with a variable number of arguments. Normal Rust functions, even those with an\n /// `extern \"ABI\"`, cannot be variadic. For more information, see [the nomicon's section on\n /// variadic functions][nomicon-variadic].\n ///\n /// [nomicon-variadic]: ../nomicon/ffi.html#variadic-functions\n ///\n-/// These markers can be combined, so `unsafe extern \"stdcall\" fn()` is a valid type.\n+/// ### Creating function pointers\n+///\n+/// When `bar` is the name of a function, then the expression `bar` is *not* a\n+/// function pointer. Rather, it denotes a value of an unnameable type that\n+/// uniquely identifies the function `bar`. The value is zero-sized because the\n+/// type already identifies the function. This has the advantage that \"calling\"\n+/// the value (it implements the `Fn*` traits) does not require dynamic\n+/// dispatch.\n+///\n+/// This zero-sized type *coerces* to a regular function pointer. For example:\n+///\n+/// ```rust\n+/// use std::mem;\n+///\n+/// fn bar(x: i32) {}\n+///\n+/// let not_bar_ptr = bar; // `not_bar_ptr` is zero-sized, uniquely identifying `bar`\n+/// assert_eq!(mem::size_of_val(&not_bar_ptr), 0);\n+///\n+/// let bar_ptr: fn(i32) = not_bar_ptr; // force coercion to function pointer\n+/// assert_eq!(mem::size_of_val(&bar_ptr), mem::size_of::<usize>());\n+///\n+/// let footgun = &bar; // this is a shared reference to the zero-sized type identifying `bar`\n+/// ```\n+///\n+/// The last line shows that `&bar` is not a function pointer either. Rather, it\n+/// is a reference to the function-specific ZST. `&bar` is basically never what you\n+/// want when `bar` is a function.\n+///\n+/// ### Traits\n ///\n /// Function pointers implement the following traits:\n ///"}, {"sha": "3ab50e114c750426a13c04e9b4d616a7276af938", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -178,7 +178,7 @@ impl Step for Llvm {\n             .define(\"LLVM_TARGET_ARCH\", target_native.split('-').next().unwrap())\n             .define(\"LLVM_DEFAULT_TARGET_TRIPLE\", target_native);\n \n-        if !target.contains(\"netbsd\") {\n+        if !target.contains(\"netbsd\") && target != \"aarch64-apple-darwin\" {\n             cfg.define(\"LLVM_ENABLE_ZLIB\", \"ON\");\n         } else {\n             // FIXME: Enable zlib on NetBSD too"}, {"sha": "2ee94965756a5e0d72fc8bbe084b628f1c49f799", "filename": "src/librustc_ast/util/parser.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_ast%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_ast%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Futil%2Fparser.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -222,7 +222,6 @@ impl AssocOp {\n             Greater | // `{ 42 } > 3`\n             GreaterEqual | // `{ 42 } >= 3`\n             AssignOp(_) | // `{ 42 } +=`\n-            LAnd | // `{ 42 } &&foo`\n             As | // `{ 42 } as usize`\n             // Equal | // `{ 42 } == { 42 }`    Accepting these here would regress incorrect\n             // NotEqual | // `{ 42 } != { 42 }  struct literals parser recovery."}, {"sha": "78cead02b7b7cc6fcdfaf1121a45a4b7032ae6e2", "filename": "src/librustc_builtin_macros/format.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_builtin_macros%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_builtin_macros%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fformat.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -149,7 +149,7 @@ fn parse_args<'a>(\n                 return Err(err);\n             } else {\n                 // ...after that delegate to `expect` to also include the other expected tokens.\n-                return Err(p.expect(&token::Comma).err().unwrap());\n+                let _ = p.expect(&token::Comma)?;\n             }\n         }\n         first = false;\n@@ -359,24 +359,18 @@ impl<'a, 'b> Context<'a, 'b> {\n             // for `println!(\"{7:7$}\", 1);`\n             refs.sort();\n             refs.dedup();\n-            let (arg_list, mut sp) = if refs.len() == 1 {\n-                let spans: Vec<_> = spans.into_iter().filter_map(|sp| sp.copied()).collect();\n-                (\n-                    format!(\"argument {}\", refs[0]),\n-                    if spans.is_empty() {\n-                        MultiSpan::from_span(self.fmtsp)\n-                    } else {\n-                        MultiSpan::from_spans(spans)\n-                    },\n-                )\n+            let spans: Vec<_> = spans.into_iter().filter_map(|sp| sp.copied()).collect();\n+            let sp = if self.arg_spans.is_empty() || spans.is_empty() {\n+                MultiSpan::from_span(self.fmtsp)\n+            } else {\n+                MultiSpan::from_spans(spans)\n+            };\n+            let arg_list = if refs.len() == 1 {\n+                format!(\"argument {}\", refs[0])\n             } else {\n-                let pos = MultiSpan::from_spans(spans.into_iter().map(|s| *s.unwrap()).collect());\n                 let reg = refs.pop().unwrap();\n-                (format!(\"arguments {head} and {tail}\", head = refs.join(\", \"), tail = reg,), pos)\n+                format!(\"arguments {head} and {tail}\", head = refs.join(\", \"), tail = reg)\n             };\n-            if self.arg_spans.is_empty() {\n-                sp = MultiSpan::from_span(self.fmtsp);\n-            }\n \n             e = self.ecx.struct_span_err(\n                 sp,\n@@ -1067,10 +1061,9 @@ pub fn expand_preparsed_format_args(\n         let args_unused = errs_len;\n \n         let mut diag = {\n-            if errs_len == 1 {\n-                let (sp, msg) = errs.into_iter().next().unwrap();\n-                let mut diag = cx.ecx.struct_span_err(sp, msg);\n-                diag.span_label(sp, msg);\n+            if let [(sp, msg)] = &errs[..] {\n+                let mut diag = cx.ecx.struct_span_err(*sp, *msg);\n+                diag.span_label(*sp, *msg);\n                 diag\n             } else {\n                 let mut diag = cx.ecx.struct_span_err("}, {"sha": "f0b50459837e93d3bb8793ad0800e64144e69f29", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -73,7 +73,8 @@ unsafe fn configure_llvm(sess: &Session) {\n                 llvm_c_strs.push(s);\n             }\n         };\n-        add(\"rustc\", true); // fake program name\n+        // Set the llvm \"program name\" to make usage and invalid argument messages more clear.\n+        add(\"rustc -Cllvm-args=\\\"...\\\" with\", true);\n         if sess.time_llvm_passes() {\n             add(\"-time-passes\", false);\n         }"}, {"sha": "d8a530d98faa7df9f0228b1b11a10af891e030c1", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -1,6 +1,7 @@\n use crate::traits::*;\n use rustc_hir::def_id::CrateNum;\n use rustc_index::vec::IndexVec;\n+use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n use rustc_middle::ty;\n use rustc_session::config::DebugInfo;\n@@ -216,6 +217,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             LocalRef::Operand(None) => return,\n \n             LocalRef::Operand(Some(operand)) => {\n+                // Don't spill operands onto the stack in naked functions.\n+                // See: https://github.com/rust-lang/rust/issues/42779\n+                let attrs = bx.tcx().codegen_fn_attrs(self.instance.def_id());\n+                if attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n+                    return;\n+                }\n+\n                 // \"Spill\" the value onto the stack, for debuginfo,\n                 // without forcing non-debuginfo uses of the local\n                 // to also load from the stack every single time."}, {"sha": "9cfefb1de632ba96313a0a738d1b14c15e146c14", "filename": "src/librustc_error_codes/error_codes/E0477.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0477.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_error_codes%2Ferror_codes%2FE0477.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0477.md?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -37,8 +37,7 @@ fn i_want_static_closure<F>(a: F)\n \n fn print_string(s: Mutex<MyString<'static>>) {\n \n-    i_want_static_closure(move || {     // error: this closure has lifetime 'a\n-                                        //        rather than 'static\n+    i_want_static_closure(move || {     // ok!\n         println!(\"{}\", s.lock().unwrap().data);\n     });\n }"}, {"sha": "98fd68927f1c20eb37c60785ade4b27f4e4d3880", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -857,9 +857,12 @@ pub struct LocalDecl<'tcx> {\n #[cfg(target_arch = \"x86_64\")]\n static_assert_size!(LocalDecl<'_>, 56);\n \n-/// Extra information about a some locals that's used for diagnostics. (Not\n-/// used for non-StaticRef temporaries, the return place, or anonymous function\n-/// parameters.)\n+/// Extra information about a some locals that's used for diagnostics and for\n+/// classifying variables into local variables, statics, etc, which is needed e.g.\n+/// for unsafety checking.\n+///\n+/// Not used for non-StaticRef temporaries, the return place, or anonymous\n+/// function parameters.\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum LocalInfo<'tcx> {\n     /// A user-defined local variable or function parameter"}, {"sha": "9b1837356e3053df7778812c8de0e2b1864b1d49", "filename": "src/librustc_middle/ty/query/profiling_support.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fprofiling_support.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -1,8 +1,9 @@\n use crate::ty::context::TyCtxt;\n+use crate::ty::WithOptConstParam;\n use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_query_system::query::QueryCache;\n use rustc_query_system::query::QueryState;\n@@ -154,6 +155,49 @@ impl SpecIntoSelfProfilingString for DefIndex {\n     }\n }\n \n+impl SpecIntoSelfProfilingString for LocalDefId {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId {\n+        builder.def_id_to_string_id(DefId { krate: LOCAL_CRATE, index: self.local_def_index })\n+    }\n+}\n+\n+impl<T: SpecIntoSelfProfilingString> SpecIntoSelfProfilingString for WithOptConstParam<T> {\n+    fn spec_to_self_profile_string(\n+        &self,\n+        builder: &mut QueryKeyStringBuilder<'_, '_, '_>,\n+    ) -> StringId {\n+        // We print `WithOptConstParam` values as tuples to make them shorter\n+        // and more readable, without losing information:\n+        //\n+        // \"WithOptConstParam { did: foo::bar, const_param_did: Some(foo::baz) }\"\n+        // becomes \"(foo::bar, foo::baz)\" and\n+        // \"WithOptConstParam { did: foo::bar, const_param_did: None }\"\n+        // becomes \"(foo::bar, _)\".\n+\n+        let did = StringComponent::Ref(self.did.to_self_profile_string(builder));\n+\n+        let const_param_did = if let Some(const_param_did) = self.const_param_did {\n+            let const_param_did = builder.def_id_to_string_id(const_param_did);\n+            StringComponent::Ref(const_param_did)\n+        } else {\n+            StringComponent::Value(\"_\")\n+        };\n+\n+        let components = [\n+            StringComponent::Value(\"(\"),\n+            did,\n+            StringComponent::Value(\", \"),\n+            const_param_did,\n+            StringComponent::Value(\")\"),\n+        ];\n+\n+        builder.profiler.alloc_string(&components[..])\n+    }\n+}\n+\n impl<T0, T1> SpecIntoSelfProfilingString for (T0, T1)\n where\n     T0: SpecIntoSelfProfilingString,"}, {"sha": "215a0c7dfdf2712dbb1c6ad3909775e41d35b688", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -10,7 +10,6 @@ use rustc_hir::lang_items;\n use rustc_hir::{GeneratorKind, HirIdMap, Node};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::TyCtxtInferExt;\n-use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n@@ -798,22 +797,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         argument_scope: region::Scope,\n         ast_body: &'tcx hir::Expr<'tcx>,\n     ) -> BlockAnd<()> {\n-        let tcx = self.hir.tcx();\n-        let attrs = tcx.codegen_fn_attrs(fn_def_id);\n-        let naked = attrs.flags.contains(CodegenFnAttrFlags::NAKED);\n-\n         // Allocate locals for the function arguments\n         for &ArgInfo(ty, _, arg_opt, _) in arguments.iter() {\n             let source_info =\n                 SourceInfo::outermost(arg_opt.map_or(self.fn_span, |arg| arg.pat.span));\n             let arg_local = self.local_decls.push(LocalDecl::with_source_info(ty, source_info));\n \n-            // Emit function argument debuginfo only for non-naked functions.\n-            // See: https://github.com/rust-lang/rust/issues/42779\n-            if naked {\n-                continue;\n-            }\n-\n             // If this is a simple binding pattern, give debuginfo a nice name.\n             if let Some(arg) = arg_opt {\n                 if let Some(ident) = arg.pat.simple_ident() {\n@@ -826,6 +815,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n         }\n \n+        let tcx = self.hir.tcx();\n         let tcx_hir = tcx.hir();\n         let hir_typeck_results = self.hir.typeck_results();\n "}, {"sha": "8e2bee2646806c023dfbd5f889b4a7412c34135e", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -318,11 +318,18 @@ impl<'a> Parser<'a> {\n             // want to keep their span info to improve diagnostics in these cases in a later stage.\n             (true, Some(AssocOp::Multiply)) | // `{ 42 } *foo = bar;` or `{ 42 } * 3`\n             (true, Some(AssocOp::Subtract)) | // `{ 42 } -5`\n-            (true, Some(AssocOp::LAnd)) | // `{ 42 } &&x` (#61475)\n             (true, Some(AssocOp::Add)) // `{ 42 } + 42\n             // If the next token is a keyword, then the tokens above *are* unambiguously incorrect:\n             // `if x { a } else { b } && if y { c } else { d }`\n-            if !self.look_ahead(1, |t| t.is_reserved_ident()) => {\n+            if !self.look_ahead(1, |t| t.is_used_keyword()) => {\n+                // These cases are ambiguous and can't be identified in the parser alone.\n+                let sp = self.sess.source_map().start_point(self.token.span);\n+                self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);\n+                false\n+            }\n+            (true, Some(AssocOp::LAnd)) => {\n+                // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`. Separated from the\n+                // above due to #74233.\n                 // These cases are ambiguous and can't be identified in the parser alone.\n                 let sp = self.sess.source_map().start_point(self.token.span);\n                 self.sess.ambiguous_block_expr_parse.borrow_mut().insert(sp, lhs.span);"}, {"sha": "1839e1af45eeff7d004dc1bacc5efbacec42a89e", "filename": "src/librustc_query_system/query/caches.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fcaches.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -43,9 +43,8 @@ pub trait QueryCache: QueryStorage {\n         OnHit: FnOnce(&Self::Stored, DepNodeIndex) -> R,\n         OnMiss: FnOnce(Self::Key, QueryLookup<'_, CTX, Self::Key, Self::Sharded>) -> R;\n \n-    fn complete<CTX: QueryContext>(\n+    fn complete(\n         &self,\n-        tcx: CTX,\n         lock_sharded_storage: &mut Self::Sharded,\n         key: Self::Key,\n         value: Self::Value,\n@@ -112,9 +111,8 @@ impl<K: Eq + Hash, V: Clone> QueryCache for DefaultCache<K, V> {\n     }\n \n     #[inline]\n-    fn complete<CTX: QueryContext>(\n+    fn complete(\n         &self,\n-        _: CTX,\n         lock_sharded_storage: &mut Self::Sharded,\n         key: K,\n         value: V,\n@@ -195,9 +193,8 @@ impl<'tcx, K: Eq + Hash, V: 'tcx> QueryCache for ArenaCache<'tcx, K, V> {\n     }\n \n     #[inline]\n-    fn complete<CTX: QueryContext>(\n+    fn complete(\n         &self,\n-        _: CTX,\n         lock_sharded_storage: &mut Self::Sharded,\n         key: K,\n         value: V,"}, {"sha": "ae042cc808126bec5a2085fd74399789368d412a", "filename": "src/librustc_query_system/query/plumbing.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_query_system%2Fquery%2Fplumbing.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -264,7 +264,7 @@ where\n     /// Completes the query by updating the query cache with the `result`,\n     /// signals the waiter and forgets the JobOwner, so it won't poison the query\n     #[inline(always)]\n-    fn complete(self, tcx: CTX, result: C::Value, dep_node_index: DepNodeIndex) -> C::Stored {\n+    fn complete(self, result: C::Value, dep_node_index: DepNodeIndex) -> C::Stored {\n         // We can move out of `self` here because we `mem::forget` it below\n         let key = unsafe { ptr::read(&self.key) };\n         let state = self.state;\n@@ -278,7 +278,7 @@ where\n                 QueryResult::Started(job) => job,\n                 QueryResult::Poisoned => panic!(),\n             };\n-            let result = state.cache.complete(tcx, &mut lock.cache, key, result, dep_node_index);\n+            let result = state.cache.complete(&mut lock.cache, key, result, dep_node_index);\n             (job, result)\n         };\n \n@@ -432,7 +432,7 @@ where\n             tcx.store_diagnostics_for_anon_node(dep_node_index, diagnostics);\n         }\n \n-        return job.complete(tcx, result, dep_node_index);\n+        return job.complete(result, dep_node_index);\n     }\n \n     let dep_node = query.to_dep_node(tcx, &key);\n@@ -458,7 +458,7 @@ where\n             })\n         });\n         if let Some((result, dep_node_index)) = loaded {\n-            return job.complete(tcx, result, dep_node_index);\n+            return job.complete(result, dep_node_index);\n         }\n     }\n \n@@ -609,7 +609,7 @@ where\n         }\n     }\n \n-    let result = job.complete(tcx, result, dep_node_index);\n+    let result = job.complete(result, dep_node_index);\n \n     (result, dep_node_index)\n }"}, {"sha": "4ea76a4a9e2abb462ce0cd3c6d8148f5c2032edd", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -34,6 +34,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_await(err, expr, expected, expr_ty);\n+        self.suggest_missing_parentheses(err, expr);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n     }\n "}, {"sha": "6957b6b2a05d08f74b458e558776caf5e9bd9b5a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -5401,6 +5401,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn suggest_missing_parentheses(&self, err: &mut DiagnosticBuilder<'_>, expr: &hir::Expr<'_>) {\n+        let sp = self.tcx.sess.source_map().start_point(expr.span);\n+        if let Some(sp) = self.tcx.sess.parse_sess.ambiguous_block_expr_parse.borrow().get(&sp) {\n+            // `{ 42 } &&x` (#61475) or `{ 42 } && if x { 1 } else { 0 }`\n+            self.tcx.sess.parse_sess.expr_parentheses_needed(err, *sp, None);\n+        }\n+    }\n+\n     fn note_need_for_fn_pointer(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "493c1b9f0ba6b9a2655d506a4c62b551a21b4fe1", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -18,7 +18,7 @@ pub fn naked_empty() {\n // CHECK-NEXT: define void @naked_with_args(i{{[0-9]+( %0)?}})\n pub fn naked_with_args(a: isize) {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %_1 = alloca i{{[0-9]+}}\n+    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n     // CHECK: ret void\n }\n@@ -39,7 +39,7 @@ pub fn naked_with_return() -> isize {\n #[naked]\n pub fn naked_with_args_and_return(a: isize) -> isize {\n     // CHECK-NEXT: {{.+}}:\n-    // CHECK-NEXT: %_1 = alloca i{{[0-9]+}}\n+    // CHECK-NEXT: %a = alloca i{{[0-9]+}}\n     &a; // keep variable in an alloca\n     // CHECK: ret i{{[0-9]+}} %{{[0-9]+}}\n     a"}, {"sha": "5f3a1eb44e4e55179eeb49b90ae3182d6198aed7", "filename": "src/test/debuginfo/function-arguments-naked.rs", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/81dc88f88f92ba8ad7465f9cba10c12d3a7b70f1/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81dc88f88f92ba8ad7465f9cba10c12d3a7b70f1/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ffunction-arguments-naked.rs?ref=81dc88f88f92ba8ad7465f9cba10c12d3a7b70f1", "patch": "@@ -1,42 +0,0 @@\n-// min-lldb-version: 310\n-\n-// We have to ignore android because of this issue:\n-// https://github.com/rust-lang/rust/issues/74847\n-// ignore-android\n-//\n-// We need to use inline assembly, so just use one platform\n-// only-x86_64\n-\n-// compile-flags:-g\n-\n-// === GDB TESTS ===================================================================================\n-\n-// gdb-command:run\n-\n-// gdb-command:info args\n-// gdb-check:No arguments.\n-// gdb-command:continue\n-\n-// === LLDB TESTS ==================================================================================\n-\n-// lldb-command:run\n-\n-// lldb-command:frame variable\n-// lldbg-check:(unsigned long) = 111 (unsigned long) = 222\n-// lldbr-check:(unsigned long) = 111 (unsigned long) = 222\n-// lldb-command:continue\n-\n-\n-#![feature(asm)]\n-#![feature(naked_functions)]\n-#![feature(omit_gdb_pretty_printer_section)]\n-#![omit_gdb_pretty_printer_section]\n-\n-fn main() {\n-    naked(111, 222);\n-}\n-\n-#[naked]\n-extern \"C\" fn naked(x: usize, y: usize) {\n-    unsafe { asm!(\"ret\"); } // #break\n-}"}, {"sha": "2fe112a3b95d4001627246bbe5a19f02174a4987", "filename": "src/test/ui/issues/issue-75307.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fissues%2Fissue-75307.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fissues%2Fissue-75307.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75307.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    format!(r\"{}{}{}\", named_arg=1); //~ ERROR invalid reference to positional arguments 1 and 2\n+}"}, {"sha": "4a5d997e00d74a7daca2d07678606aaeb46f7564", "filename": "src/test/ui/issues/issue-75307.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fissues%2Fissue-75307.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fissues%2Fissue-75307.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-75307.stderr?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -0,0 +1,10 @@\n+error: invalid reference to positional arguments 1 and 2 (there is 1 argument)\n+  --> $DIR/issue-75307.rs:2:13\n+   |\n+LL |     format!(r\"{}{}{}\", named_arg=1);\n+   |             ^^^^^^^^^\n+   |\n+   = note: positional arguments are zero-based\n+\n+error: aborting due to previous error\n+"}, {"sha": "3a18bdc3b730a8477a27a00e361d769ef4f8033a", "filename": "src/test/ui/parser/expr-as-stmt-2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -0,0 +1,10 @@\n+// This is not autofixable because we give extra suggestions to end the first expression with `;`.\n+fn foo(a: Option<u32>, b: Option<u32>) -> bool {\n+    if let Some(x) = a { true } else { false }\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+    && //~ ERROR mismatched types\n+    if let Some(y) = a { true } else { false }\n+}\n+\n+fn main() {}"}, {"sha": "ee07c36763356d64e6fd5ce8d1380bac7508cfc9", "filename": "src/test/ui/parser/expr-as-stmt-2.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt-2.rs:3:26\n+   |\n+LL |     if let Some(x) = a { true } else { false }\n+   |     ---------------------^^^^------------------ help: consider using a semicolon here\n+   |     |                    |\n+   |     |                    expected `()`, found `bool`\n+   |     expected this to be `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt-2.rs:3:40\n+   |\n+LL |     if let Some(x) = a { true } else { false }\n+   |     -----------------------------------^^^^^--- help: consider using a semicolon here\n+   |     |                                  |\n+   |     |                                  expected `()`, found `bool`\n+   |     expected this to be `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/expr-as-stmt-2.rs:6:5\n+   |\n+LL |   fn foo(a: Option<u32>, b: Option<u32>) -> bool {\n+   |                                             ---- expected `bool` because of return type\n+LL |       if let Some(x) = a { true } else { false }\n+   |       ------------------------------------------ help: parentheses are required to parse this as an expression: `(if let Some(x) = a { true } else { false })`\n+...\n+LL | /     &&\n+LL | |     if let Some(y) = a { true } else { false }\n+   | |______________________________________________^ expected `bool`, found `&&bool`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "02816ef2791b0dcaa5b83ec0a694795e5083e730", "filename": "src/test/ui/parser/expr-as-stmt.fixed", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.fixed?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -25,12 +25,6 @@ fn baz() -> i32 {\n     //~^ ERROR mismatched types\n }\n \n-fn qux(a: Option<u32>, b: Option<u32>) -> bool {\n-    (if let Some(x) = a { true } else { false })\n-    && //~ ERROR expected expression\n-    if let Some(y) = a { true } else { false }\n-}\n-\n fn moo(x: u32) -> bool {\n     (match x {\n         _ => 1,"}, {"sha": "93baa8278f890b7bd431c0d86bf63c1d001d5721", "filename": "src/test/ui/parser/expr-as-stmt.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -25,12 +25,6 @@ fn baz() -> i32 {\n     //~^ ERROR mismatched types\n }\n \n-fn qux(a: Option<u32>, b: Option<u32>) -> bool {\n-    if let Some(x) = a { true } else { false }\n-    && //~ ERROR expected expression\n-    if let Some(y) = a { true } else { false }\n-}\n-\n fn moo(x: u32) -> bool {\n     match x {\n         _ => 1,"}, {"sha": "324aed0ad7cf6df71e5ecb701edbe007e6fad0a6", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -22,16 +22,8 @@ LL |     { 42 } + foo;\n    |     |\n    |     help: parentheses are required to parse this as an expression: `({ 42 })`\n \n-error: expected expression, found `&&`\n-  --> $DIR/expr-as-stmt.rs:30:5\n-   |\n-LL |     if let Some(x) = a { true } else { false }\n-   |     ------------------------------------------ help: parentheses are required to parse this as an expression: `(if let Some(x) = a { true } else { false })`\n-LL |     &&\n-   |     ^^ expected expression\n-\n error: expected expression, found `>`\n-  --> $DIR/expr-as-stmt.rs:37:7\n+  --> $DIR/expr-as-stmt.rs:31:7\n    |\n LL |     } > 0\n    |       ^ expected expression\n@@ -75,7 +67,7 @@ LL |     { 3 } * 3\n    |     |\n    |     help: parentheses are required to parse this as an expression: `({ 3 })`\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0308, E0614.\n For more information about an error, try `rustc --explain E0308`."}, {"sha": "289bae24f810ecb73c41a9cb0bf88ccb4d463eb0", "filename": "src/test/ui/unknown-llvm-arg.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Funknown-llvm-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Funknown-llvm-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-llvm-arg.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Cllvm-args=-not-a-real-llvm-arg\n+// normalize-stderr-test \"--help\" -> \"-help\"\n+// normalize-stderr-test \"\\n(\\n|.)*\" -> \"\"\n+\n+// I'm seeing \"--help\" locally, but \"-help\" in CI, so I'm normalizing it to just \"-help\".\n+\n+// Note that the rustc-supplied \"program name\", given when invoking LLVM, is used by LLVM to\n+// generate user-facing error messages and a usage (--help) messages. If the program name is\n+// `rustc`, the usage message in response to `--llvm-args=\"--help\"` starts with:\n+// ```\n+//   USAGE: rustc [options]\n+// ```\n+// followed by the list of options not to `rustc` but to `llvm`.\n+//\n+// On the other hand, if the program name is set to `rustc -Cllvm-args=\"...\" with`, the usage\n+// message is more clear:\n+// ```\n+//   USAGE: rustc -Cllvm-args=\"...\" with [options]\n+// ```\n+// This test captures the effect of the current program name setting on LLVM command line\n+// error messages.\n+fn main() {}"}, {"sha": "e1d3cfea28fdf41df3e7c11796eff408ee56f106", "filename": "src/test/ui/unknown-llvm-arg.stderr", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Funknown-llvm-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftest%2Fui%2Funknown-llvm-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-llvm-arg.stderr?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -0,0 +1 @@\n+rustc -Cllvm-args=\"...\" with: Unknown command line argument '-not-a-real-llvm-arg'.  Try: 'rustc -Cllvm-args=\"...\" with -help'\n\\ No newline at end of file"}, {"sha": "0a71361c992f9c5cbabc57948a24c1c5e44d3938", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -447,6 +447,7 @@ impl Builder {\n         let mut package = |name, targets| self.package(name, &mut manifest.pkg, targets);\n         package(\"rustc\", HOSTS);\n         package(\"rustc-dev\", HOSTS);\n+        package(\"rustc-docs\", HOSTS);\n         package(\"cargo\", HOSTS);\n         package(\"rust-mingw\", MINGW);\n         package(\"rust-std\", TARGETS);"}, {"sha": "707e381b06e47b840cd15e6e90cbcfda5015f187", "filename": "triagebot.toml", "status": "modified", "additions": 0, "deletions": 91, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/8e5a27766ff14af36448a4b4c0a8bff84090168f/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/8e5a27766ff14af36448a4b4c0a8bff84090168f/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=8e5a27766ff14af36448a4b4c0a8bff84090168f", "patch": "@@ -99,94 +99,3 @@ message_on_add = \"\"\"\\\n - Needs `I-nominated`?\n \"\"\"\n message_on_remove = \"Issue #{number}'s prioritization request has been removed.\"\n-\n-[notify-zulip.\"I-nominated\"]\n-required_labels = [\"T-compiler\"]\n-zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n-topic = \"I-nominated #{number} {title}\"\n-message_on_add = \"\"\"\\\n-@*WG-prioritization/alerts* #{number} has been nominated for discussion in `T-compiler` meeting.\n-\n-# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-i-nominated-issues)\n-- Already discussed?\n-- Worth the meeting time?\n-- Add agenda entry:\n-  - Why nominated?\n-  - Assignee?\n-  - Issue? PR? What's the status?\n-  - Summary and important details?\n-\"\"\"\n-message_on_remove = \"#{number}'s nomination has been removed.\"\n-\n-[notify-zulip.\"beta-nominated\"]\n-zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n-topic = \"Backport #{number} {title}\"\n-message_on_add = \"\"\"\\\n-@*WG-prioritization/alerts* PR #{number} has been requested for beta backport.\n-\n-# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-stablebeta-nominations)\n-Prepare agenda entry:\n-- Why nominated?\n-- Author, assignee?\n-- Important details?\n-\"\"\"\n-message_on_remove = \"PR #{number}'s beta backport request has been removed.\"\n-\n-[notify-zulip.\"stable-nominated\"]\n-zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n-topic = \"Backport #{number} {title}\"\n-message_on_add = \"\"\"\\\n-@*WG-prioritization/alerts* PR #{number} has been requested for stable backport.\n-\n-# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-stablebeta-nominations)\n-Prepare agenda entry:\n-- Why nominated?\n-- Author, assignee?\n-- Important details?\n-\"\"\"\n-message_on_remove = \"PR #{number}'s stable backport request has been removed.\"\n-\n-[notify-zulip.\"S-waiting-on-team\"]\n-required_labels = [\"T-compiler\"]\n-zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n-topic = \"S-waiting-on-team #{number} {title}\"\n-message_on_add = \"\"\"\\\n-@*WG-prioritization/alerts* PR #{number} is waiting on `T-compiler`.\n-\n-# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-prs-waiting-on-team)\n-- Prepare agenda entry:\n-  - What is it waiting for?\n-  - Important details?\n-- Could be resolved quickly? Tag `I-nominated`.\n-\"\"\"\n-message_on_remove = \"PR #{number}'s is no longer waiting on `T-compiler`.\"\n-\n-[notify-zulip.\"P-critical\"]\n-zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n-topic = \"P-critical #{number} {title}\"\n-message_on_add = \"\"\"\\\n-@*WG-prioritization/alerts* issue #{number} has been assigned `P-critical`.\n-\n-# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-p-critical-and-unassigned-p-high-regressions)\n-- Notify people/groups?\n-- Assign if possible?\n-- Add to agenda:\n-  - Assignee?\n-  - Summary and important details?\n-- Other actions to move forward?\n-\"\"\"\n-\n-[notify-zulip.\"P-high\"]\n-required_labels = [\"regression-from-stable-to-[bn]*\"] # only nightly and beta regressions\n-zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n-topic = \"P-high regression #{number} {title}\"\n-message_on_add = \"\"\"\\\n-@*WG-prioritization/alerts* issue #{number} has been assigned `P-high` and is a regression.\n-\n-# [Procedure](https://forge.rust-lang.org/compiler/prioritization/procedure.html#summarize-p-critical-and-unassigned-p-high-regressions)\n-Is issue assigned? If not:\n-- Try to find an assignee?\n-- Otherwise add to agenda:\n-  - Mark as unassigned.\n-  - Summary and important details?\n-\"\"\""}]}