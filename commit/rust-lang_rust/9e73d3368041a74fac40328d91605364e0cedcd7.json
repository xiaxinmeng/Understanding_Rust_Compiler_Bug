{"sha": "9e73d3368041a74fac40328d91605364e0cedcd7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNzNkMzM2ODA0MWE3NGZhYzQwMzI4ZDkxNjA1MzY0ZTBjZWRjZDc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-08-10T23:56:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-10T23:56:30Z"}, "message": "Rollup merge of #75098 - Ryan1729:clippy-pointer-cast-lint-experiment, r=oli-obk\n\nClippy pointer cast lint experiment\n\nThis PR is an experiment about exposing more parts of `rustc_typeck` for use in `clippy`. In particular, the code that checks where a cast is valid or not was exposed, which necessitated exposing [`FnCtxt`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/struct.FnCtxt.html), and figuring out how to create an instance of that type inside `clippy`.\n\nThis was prompted by [this clippy issue](https://github.com/rust-lang/rust-clippy/issues/2064).\n\nr? @oli-obk", "tree": {"sha": "27d789fd52956c9a474200829567d464d586ff9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27d789fd52956c9a474200829567d464d586ff9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e73d3368041a74fac40328d91605364e0cedcd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e73d3368041a74fac40328d91605364e0cedcd7", "html_url": "https://github.com/rust-lang/rust/commit/9e73d3368041a74fac40328d91605364e0cedcd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e73d3368041a74fac40328d91605364e0cedcd7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "url": "https://api.github.com/repos/rust-lang/rust/commits/01bba2c532c1f8bfc1463d672c6b2fc79bd96495", "html_url": "https://github.com/rust-lang/rust/commit/01bba2c532c1f8bfc1463d672c6b2fc79bd96495"}, {"sha": "873e5f5c19818cd0106764fc649c1edadf24972a", "url": "https://api.github.com/repos/rust-lang/rust/commits/873e5f5c19818cd0106764fc649c1edadf24972a", "html_url": "https://github.com/rust-lang/rust/commit/873e5f5c19818cd0106764fc649c1edadf24972a"}], "stats": {"total": 352, "additions": 350, "deletions": 2}, "files": [{"sha": "a6e6949101775cebc31d7fb7b807991d90a3f831", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9e73d3368041a74fac40328d91605364e0cedcd7/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9e73d3368041a74fac40328d91605364e0cedcd7/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9e73d3368041a74fac40328d91605364e0cedcd7", "patch": "@@ -1730,6 +1730,7 @@ Released 2018-09-13\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float\n [`transmute_ptr_to_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr\n [`transmute_ptr_to_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ref\n+[`transmutes_expressible_as_ptr_casts`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmutes_expressible_as_ptr_casts\n [`transmuting_null`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmuting_null\n [`trivial_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivial_regex\n [`trivially_copy_pass_by_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#trivially_copy_pass_by_ref"}, {"sha": "828ee91059601d2f9a5361c1b404b5e05cca217a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e73d3368041a74fac40328d91605364e0cedcd7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e73d3368041a74fac40328d91605364e0cedcd7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9e73d3368041a74fac40328d91605364e0cedcd7", "patch": "@@ -788,6 +788,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &to_digit_is_some::TO_DIGIT_IS_SOME,\n         &trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         &transmute::CROSSPOINTER_TRANSMUTE,\n+        &transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n         &transmute::TRANSMUTE_BYTES_TO_STR,\n         &transmute::TRANSMUTE_FLOAT_TO_INT,\n         &transmute::TRANSMUTE_INT_TO_BOOL,\n@@ -1417,6 +1418,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(&to_digit_is_some::TO_DIGIT_IS_SOME),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),\n+        LintId::of(&transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n         LintId::of(&transmute::TRANSMUTE_BYTES_TO_STR),\n         LintId::of(&transmute::TRANSMUTE_FLOAT_TO_INT),\n         LintId::of(&transmute::TRANSMUTE_INT_TO_BOOL),\n@@ -1617,6 +1619,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&swap::MANUAL_SWAP),\n         LintId::of(&temporary_assignment::TEMPORARY_ASSIGNMENT),\n         LintId::of(&transmute::CROSSPOINTER_TRANSMUTE),\n+        LintId::of(&transmute::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS),\n         LintId::of(&transmute::TRANSMUTE_BYTES_TO_STR),\n         LintId::of(&transmute::TRANSMUTE_FLOAT_TO_INT),\n         LintId::of(&transmute::TRANSMUTE_INT_TO_BOOL),"}, {"sha": "f077c14618316e51a305d848015ebc2ab2a36e4d", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 103, "deletions": 2, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/9e73d3368041a74fac40328d91605364e0cedcd7/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e73d3368041a74fac40328d91605364e0cedcd7/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=9e73d3368041a74fac40328d91605364e0cedcd7", "patch": "@@ -7,8 +7,10 @@ use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, GenericArg, Mutability, QPath, TyKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, cast::CastKind, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::DUMMY_SP;\n+use rustc_typeck::check::{cast::CastCheck, FnCtxt, Inherited};\n use std::borrow::Cow;\n \n declare_clippy_lint! {\n@@ -48,6 +50,29 @@ declare_clippy_lint! {\n     \"transmutes that have the same to and from types or could be a cast/coercion\"\n }\n \n+// FIXME: Merge this lint with USELESS_TRANSMUTE once that is out of the nursery.\n+declare_clippy_lint! {\n+    /// **What it does:**Checks for transmutes that could be a pointer cast.\n+    ///\n+    /// **Why is this bad?** Readability. The code tricks people into thinking that\n+    /// something complex is going on.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust,ignore\n+    /// core::intrinsics::transmute::<*const [i32], *const [u16]>(p)\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// p as *const [u16]\n+    /// ```\n+    pub TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+    complexity,\n+    \"transmutes that could be a pointer cast\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for transmutes between a type `T` and `*T`.\n     ///\n@@ -269,6 +294,7 @@ declare_clippy_lint! {\n     correctness,\n     \"transmute between collections of layout-incompatible types\"\n }\n+\n declare_lint_pass!(Transmute => [\n     CROSSPOINTER_TRANSMUTE,\n     TRANSMUTE_PTR_TO_REF,\n@@ -281,6 +307,7 @@ declare_lint_pass!(Transmute => [\n     TRANSMUTE_INT_TO_FLOAT,\n     TRANSMUTE_FLOAT_TO_INT,\n     UNSOUND_COLLECTION_TRANSMUTE,\n+    TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n ]);\n \n // used to check for UNSOUND_COLLECTION_TRANSMUTE\n@@ -601,7 +628,25 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             );\n                         }\n                     },\n-                    _ => return,\n+                    (_, _) if can_be_expressed_as_pointer_cast(cx, e, from_ty, to_ty) => span_lint_and_then(\n+                        cx,\n+                        TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n+                        e.span,\n+                        &format!(\n+                            \"transmute from `{}` to `{}` which could be expressed as a pointer cast instead\",\n+                            from_ty,\n+                            to_ty\n+                        ),\n+                        |diag| {\n+                            if let Some(arg) = sugg::Sugg::hir_opt(cx, &args[0]) {\n+                                let sugg = arg.as_ty(&to_ty.to_string()).to_string();\n+                                diag.span_suggestion(e.span, \"try\", sugg, Applicability::MachineApplicable);\n+                            }\n+                        }\n+                    ),\n+                    _ => {\n+                        return;\n+                    },\n                 }\n             }\n         }\n@@ -648,3 +693,59 @@ fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx>, to: Ty<'\n         false\n     }\n }\n+\n+/// Check if the type conversion can be expressed as a pointer cast, instead of\n+/// a transmute. In certain cases, including some invalid casts from array\n+/// references to pointers, this may cause additional errors to be emitted and/or\n+/// ICE error messages. This function will panic if that occurs.\n+fn can_be_expressed_as_pointer_cast<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    e: &'tcx Expr<'_>,\n+    from_ty: Ty<'tcx>,\n+    to_ty: Ty<'tcx>,\n+) -> bool {\n+    use CastKind::*;\n+    matches!(\n+        check_cast(cx, e, from_ty, to_ty),\n+        Some(PtrPtrCast | PtrAddrCast | AddrPtrCast | ArrayPtrCast | FnPtrPtrCast | FnPtrAddrCast)\n+    )\n+}\n+\n+/// If a cast from from_ty to to_ty is valid, returns an Ok containing the kind of\n+/// the cast. In certain cases, including some invalid casts from array references\n+/// to pointers, this may cause additional errors to be emitted and/or ICE error\n+/// messages. This function will panic if that occurs.\n+fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>, to_ty: Ty<'tcx>) -> Option<CastKind> {\n+    let hir_id = e.hir_id;\n+    let local_def_id = hir_id.owner;\n+\n+    Inherited::build(cx.tcx, local_def_id).enter(|inherited| {\n+        let fn_ctxt = FnCtxt::new(&inherited, cx.param_env, hir_id);\n+\n+        // If we already have errors, we can't be sure we can pointer cast.\n+        assert!(\n+            !fn_ctxt.errors_reported_since_creation(),\n+            \"Newly created FnCtxt contained errors\"\n+        );\n+\n+        if let Ok(check) = CastCheck::new(\n+            &fn_ctxt, e, from_ty, to_ty,\n+            // We won't show any error to the user, so we don't care what the span is here.\n+            DUMMY_SP, DUMMY_SP,\n+        ) {\n+            let res = check.do_check(&fn_ctxt);\n+\n+            // do_check's documentation says that it might return Ok and create\n+            // errors in the fcx instead of returing Err in some cases. Those cases\n+            // should be filtered out before getting here.\n+            assert!(\n+                !fn_ctxt.errors_reported_since_creation(),\n+                \"`fn_ctxt` contained errors after cast check!\"\n+            );\n+\n+            res.ok()\n+        } else {\n+            None\n+        }\n+    })\n+}"}, {"sha": "1f3f70631fb29ca5422b47e596cbe007d9a1f49f", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9e73d3368041a74fac40328d91605364e0cedcd7/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e73d3368041a74fac40328d91605364e0cedcd7/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=9e73d3368041a74fac40328d91605364e0cedcd7", "patch": "@@ -2215,6 +2215,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"transmute\",\n     },\n+    Lint {\n+        name: \"transmutes_expressible_as_ptr_casts\",\n+        group: \"complexity\",\n+        desc: \"transmutes that could be a pointer cast\",\n+        deprecation: None,\n+        module: \"transmute\",\n+    },\n     Lint {\n         name: \"transmuting_null\",\n         group: \"correctness\","}, {"sha": "98288dde6d845acbad6d27df59e2a1732ba3c5a8", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.fixed", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9e73d3368041a74fac40328d91605364e0cedcd7/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9e73d3368041a74fac40328d91605364e0cedcd7/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.fixed?ref=9e73d3368041a74fac40328d91605364e0cedcd7", "patch": "@@ -0,0 +1,90 @@\n+// run-rustfix\n+#![warn(clippy::transmutes_expressible_as_ptr_casts)]\n+// These two warnings currrently cover the cases transmutes_expressible_as_ptr_casts\n+// would otherwise be responsible for\n+#![warn(clippy::useless_transmute)]\n+#![warn(clippy::transmute_ptr_to_ptr)]\n+#![allow(unused_unsafe)]\n+#![allow(dead_code)]\n+\n+use std::mem::{size_of, transmute};\n+\n+// rustc_typeck::check::cast contains documentation about when a cast `e as U` is \n+// valid, which we quote from below.\n+fn main() {\n+    // We should see an error message for each transmute, and no error messages for\n+    // the casts, since the casts are the recommended fixes.\n+\n+    // e is an integer and U is *U_0, while U_0: Sized; addr-ptr-cast\n+    let _ptr_i32_transmute = unsafe {\n+        usize::MAX as *const i32\n+    };\n+    let ptr_i32 = usize::MAX as *const i32;\n+\n+    // e has type *T, U is *U_0, and either U_0: Sized ...\n+    let _ptr_i8_transmute = unsafe {\n+        ptr_i32 as *const i8\n+    };\n+    let _ptr_i8 = ptr_i32 as *const i8;\n+\n+    let slice_ptr = &[0,1,2,3] as *const [i32];\n+\n+    // ... or pointer_kind(T) = pointer_kind(U_0); ptr-ptr-cast\n+    let _ptr_to_unsized_transmute = unsafe {\n+        slice_ptr as *const [u16]\n+    };\n+    let _ptr_to_unsized = slice_ptr as *const [u16];\n+    // TODO: We could try testing vtable casts here too, but maybe\n+    // we should wait until std::raw::TraitObject is stabilized?\n+\n+    // e has type *T and U is a numeric type, while T: Sized; ptr-addr-cast\n+    let _usize_from_int_ptr_transmute = unsafe {\n+        ptr_i32 as usize\n+    };\n+    let _usize_from_int_ptr = ptr_i32 as usize;\n+\n+    let array_ref: &[i32; 4] = &[1,2,3,4];\n+\n+    // e has type &[T; n] and U is *const T; array-ptr-cast\n+    let _array_ptr_transmute = unsafe {\n+        array_ref as *const [i32; 4]\n+    };\n+    let _array_ptr = array_ref as *const [i32; 4];\n+\n+    fn foo(_: usize) -> u8 { 42 }\n+\n+    // e is a function pointer type and U has type *T, while T: Sized; fptr-ptr-cast\n+    let _usize_ptr_transmute = unsafe {\n+        foo as *const usize\n+    };\n+    let _usize_ptr_transmute = foo as *const usize;\n+\n+    // e is a function pointer type and U is an integer; fptr-addr-cast\n+    let _usize_from_fn_ptr_transmute = unsafe {\n+        foo as usize\n+    };\n+    let _usize_from_fn_ptr = foo as *const usize;\n+}\n+\n+// If a ref-to-ptr cast of this form where the pointer type points to a type other\n+// than the referenced type, calling `CastCheck::do_check` has been observed to\n+// cause an ICE error message. `do_check` is currently called inside the\n+// `transmutes_expressible_as_ptr_casts` check, but other, more specific lints\n+// currently prevent it from being called in these cases. This test is meant to\n+// fail if the ordering of the checks ever changes enough to cause these cases to\n+// fall through into `do_check`.\n+fn trigger_do_check_to_emit_error(in_param: &[i32; 1]) -> *const u8 {\n+    unsafe { in_param as *const [i32; 1] as *const u8 }\n+}\n+\n+#[repr(C)]\n+struct Single(u64);\n+\n+#[repr(C)]\n+struct Pair(u32, u32);\n+\n+fn cannot_be_expressed_as_pointer_cast(in_param: Single) -> Pair {\n+    assert_eq!(size_of::<Single>(), size_of::<Pair>());\n+\n+    unsafe { transmute::<Single, Pair>(in_param) }\n+}"}, {"sha": "fd5055c08f63379f2bdf86da911a7922a166e605", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/9e73d3368041a74fac40328d91605364e0cedcd7/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e73d3368041a74fac40328d91605364e0cedcd7/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.rs?ref=9e73d3368041a74fac40328d91605364e0cedcd7", "patch": "@@ -0,0 +1,90 @@\n+// run-rustfix\n+#![warn(clippy::transmutes_expressible_as_ptr_casts)]\n+// These two warnings currrently cover the cases transmutes_expressible_as_ptr_casts\n+// would otherwise be responsible for\n+#![warn(clippy::useless_transmute)]\n+#![warn(clippy::transmute_ptr_to_ptr)]\n+#![allow(unused_unsafe)]\n+#![allow(dead_code)]\n+\n+use std::mem::{size_of, transmute};\n+\n+// rustc_typeck::check::cast contains documentation about when a cast `e as U` is \n+// valid, which we quote from below.\n+fn main() {\n+    // We should see an error message for each transmute, and no error messages for\n+    // the casts, since the casts are the recommended fixes.\n+\n+    // e is an integer and U is *U_0, while U_0: Sized; addr-ptr-cast\n+    let _ptr_i32_transmute = unsafe {\n+        transmute::<usize, *const i32>(usize::MAX)\n+    };\n+    let ptr_i32 = usize::MAX as *const i32;\n+\n+    // e has type *T, U is *U_0, and either U_0: Sized ...\n+    let _ptr_i8_transmute = unsafe {\n+        transmute::<*const i32, *const i8>(ptr_i32)\n+    };\n+    let _ptr_i8 = ptr_i32 as *const i8;\n+\n+    let slice_ptr = &[0,1,2,3] as *const [i32];\n+\n+    // ... or pointer_kind(T) = pointer_kind(U_0); ptr-ptr-cast\n+    let _ptr_to_unsized_transmute = unsafe {\n+        transmute::<*const [i32], *const [u16]>(slice_ptr)\n+    };\n+    let _ptr_to_unsized = slice_ptr as *const [u16];\n+    // TODO: We could try testing vtable casts here too, but maybe\n+    // we should wait until std::raw::TraitObject is stabilized?\n+\n+    // e has type *T and U is a numeric type, while T: Sized; ptr-addr-cast\n+    let _usize_from_int_ptr_transmute = unsafe {\n+        transmute::<*const i32, usize>(ptr_i32)\n+    };\n+    let _usize_from_int_ptr = ptr_i32 as usize;\n+\n+    let array_ref: &[i32; 4] = &[1,2,3,4];\n+\n+    // e has type &[T; n] and U is *const T; array-ptr-cast\n+    let _array_ptr_transmute = unsafe {\n+        transmute::<&[i32; 4], *const [i32; 4]>(array_ref)\n+    };\n+    let _array_ptr = array_ref as *const [i32; 4];\n+\n+    fn foo(_: usize) -> u8 { 42 }\n+\n+    // e is a function pointer type and U has type *T, while T: Sized; fptr-ptr-cast\n+    let _usize_ptr_transmute = unsafe {\n+        transmute::<fn(usize) -> u8, *const usize>(foo)\n+    };\n+    let _usize_ptr_transmute = foo as *const usize;\n+\n+    // e is a function pointer type and U is an integer; fptr-addr-cast\n+    let _usize_from_fn_ptr_transmute = unsafe {\n+        transmute::<fn(usize) -> u8, usize>(foo)\n+    };\n+    let _usize_from_fn_ptr = foo as *const usize;\n+}\n+\n+// If a ref-to-ptr cast of this form where the pointer type points to a type other\n+// than the referenced type, calling `CastCheck::do_check` has been observed to\n+// cause an ICE error message. `do_check` is currently called inside the\n+// `transmutes_expressible_as_ptr_casts` check, but other, more specific lints\n+// currently prevent it from being called in these cases. This test is meant to\n+// fail if the ordering of the checks ever changes enough to cause these cases to\n+// fall through into `do_check`.\n+fn trigger_do_check_to_emit_error(in_param: &[i32; 1]) -> *const u8 {\n+    unsafe { transmute::<&[i32; 1], *const u8>(in_param) }\n+}\n+\n+#[repr(C)]\n+struct Single(u64);\n+\n+#[repr(C)]\n+struct Pair(u32, u32);\n+\n+fn cannot_be_expressed_as_pointer_cast(in_param: Single) -> Pair {\n+    assert_eq!(size_of::<Single>(), size_of::<Pair>());\n+\n+    unsafe { transmute::<Single, Pair>(in_param) }\n+}"}, {"sha": "46597acc6c0d272ce9c7175855290c94593559bf", "filename": "tests/ui/transmutes_expressible_as_ptr_casts.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9e73d3368041a74fac40328d91605364e0cedcd7/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e73d3368041a74fac40328d91605364e0cedcd7/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutes_expressible_as_ptr_casts.stderr?ref=9e73d3368041a74fac40328d91605364e0cedcd7", "patch": "@@ -0,0 +1,56 @@\n+error: transmute from an integer to a pointer\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:20:9\n+   |\n+LL |         transmute::<usize, *const i32>(usize::MAX)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `usize::MAX as *const i32`\n+   |\n+   = note: `-D clippy::useless-transmute` implied by `-D warnings`\n+\n+error: transmute from a pointer to a pointer\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:26:9\n+   |\n+LL |         transmute::<*const i32, *const i8>(ptr_i32)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as *const i8`\n+   |\n+   = note: `-D clippy::transmute-ptr-to-ptr` implied by `-D warnings`\n+\n+error: transmute from a pointer to a pointer\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:34:9\n+   |\n+LL |         transmute::<*const [i32], *const [u16]>(slice_ptr)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `slice_ptr as *const [u16]`\n+\n+error: transmute from `*const i32` to `usize` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:42:9\n+   |\n+LL |         transmute::<*const i32, usize>(ptr_i32)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ptr_i32 as usize`\n+   |\n+   = note: `-D clippy::transmutes-expressible-as-ptr-casts` implied by `-D warnings`\n+\n+error: transmute from a reference to a pointer\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:50:9\n+   |\n+LL |         transmute::<&[i32; 4], *const [i32; 4]>(array_ref)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `array_ref as *const [i32; 4]`\n+\n+error: transmute from `fn(usize) -> u8 {main::foo}` to `*const usize` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:58:9\n+   |\n+LL |         transmute::<fn(usize) -> u8, *const usize>(foo)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as *const usize`\n+\n+error: transmute from `fn(usize) -> u8 {main::foo}` to `usize` which could be expressed as a pointer cast instead\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:64:9\n+   |\n+LL |         transmute::<fn(usize) -> u8, usize>(foo)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `foo as usize`\n+\n+error: transmute from a reference to a pointer\n+  --> $DIR/transmutes_expressible_as_ptr_casts.rs:77:14\n+   |\n+LL |     unsafe { transmute::<&[i32; 1], *const u8>(in_param) }\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `in_param as *const [i32; 1] as *const u8`\n+\n+error: aborting due to 8 previous errors\n+"}]}