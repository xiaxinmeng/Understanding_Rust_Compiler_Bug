{"sha": "b99482801fd09f33c70329bc72fc6efebd7cd3b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5OTQ4MjgwMWZkMDlmMzNjNzAzMjliYzcyZmM2ZWZlYmQ3Y2QzYjU=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-04-09T05:54:06Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-10T22:21:59Z"}, "message": "Stop using transmute_mut in RefCell\n\nThis is supposedly undefined behavior now that Unsafe exists, so we'll\nuse Cell instead.", "tree": {"sha": "09d9ccf58873c8b4c244a265b06b0ed08b9b6adf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09d9ccf58873c8b4c244a265b06b0ed08b9b6adf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b99482801fd09f33c70329bc72fc6efebd7cd3b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b99482801fd09f33c70329bc72fc6efebd7cd3b5", "html_url": "https://github.com/rust-lang/rust/commit/b99482801fd09f33c70329bc72fc6efebd7cd3b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b99482801fd09f33c70329bc72fc6efebd7cd3b5/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e63b12f5f1c4974bcb90455b01146938f73f328", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e63b12f5f1c4974bcb90455b01146938f73f328", "html_url": "https://github.com/rust-lang/rust/commit/6e63b12f5f1c4974bcb90455b01146938f73f328"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "ec064f4f5ec735c697063566f738f6b482735380", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b99482801fd09f33c70329bc72fc6efebd7cd3b5/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b99482801fd09f33c70329bc72fc6efebd7cd3b5/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=b99482801fd09f33c70329bc72fc6efebd7cd3b5", "patch": "@@ -10,7 +10,6 @@\n \n //! Types dealing with dynamic mutability\n \n-use cast;\n use clone::Clone;\n use cmp::Eq;\n use fmt;\n@@ -70,7 +69,7 @@ impl<T: Copy + fmt::Show> fmt::Show for Cell<T> {\n /// A mutable memory location with dynamically checked borrow rules\n pub struct RefCell<T> {\n     value: Unsafe<T>,\n-    borrow: BorrowFlag,\n+    borrow: Cell<BorrowFlag>,\n     nocopy: marker::NoCopy,\n     noshare: marker::NoShare,\n }\n@@ -86,33 +85,29 @@ impl<T> RefCell<T> {\n     pub fn new(value: T) -> RefCell<T> {\n         RefCell {\n             value: Unsafe::new(value),\n+            borrow: Cell::new(UNUSED),\n             nocopy: marker::NoCopy,\n             noshare: marker::NoShare,\n-            borrow: UNUSED,\n         }\n     }\n \n     /// Consumes the `RefCell`, returning the wrapped value.\n     pub fn unwrap(self) -> T {\n-        assert!(self.borrow == UNUSED);\n+        assert!(self.borrow.get() == UNUSED);\n         unsafe{self.value.unwrap()}\n     }\n \n-    unsafe fn as_mut<'a>(&'a self) -> &'a mut RefCell<T> {\n-        cast::transmute_mut(self)\n-    }\n-\n     /// Attempts to immutably borrow the wrapped value.\n     ///\n     /// The borrow lasts until the returned `Ref` exits scope. Multiple\n     /// immutable borrows can be taken out at the same time.\n     ///\n     /// Returns `None` if the value is currently mutably borrowed.\n     pub fn try_borrow<'a>(&'a self) -> Option<Ref<'a, T>> {\n-        match self.borrow {\n+        match self.borrow.get() {\n             WRITING => None,\n-            _ => {\n-                unsafe { self.as_mut().borrow += 1; }\n+            borrow => {\n+                self.borrow.set(borrow + 1);\n                 Some(Ref { parent: self })\n             }\n         }\n@@ -140,11 +135,10 @@ impl<T> RefCell<T> {\n     ///\n     /// Returns `None` if the value is currently borrowed.\n     pub fn try_borrow_mut<'a>(&'a self) -> Option<RefMut<'a, T>> {\n-        match self.borrow {\n-            UNUSED => unsafe {\n-                let mut_self = self.as_mut();\n-                mut_self.borrow = WRITING;\n-                Some(RefMut { parent: mut_self })\n+        match self.borrow.get() {\n+            UNUSED => {\n+                self.borrow.set(WRITING);\n+                Some(RefMut { parent: self })\n             },\n             _ => None\n         }\n@@ -186,8 +180,9 @@ pub struct Ref<'b, T> {\n #[unsafe_destructor]\n impl<'b, T> Drop for Ref<'b, T> {\n     fn drop(&mut self) {\n-        assert!(self.parent.borrow != WRITING && self.parent.borrow != UNUSED);\n-        unsafe { self.parent.as_mut().borrow -= 1; }\n+        let borrow = self.parent.borrow.get();\n+        assert!(borrow != WRITING && borrow != UNUSED);\n+        self.parent.borrow.set(borrow - 1);\n     }\n }\n \n@@ -200,14 +195,15 @@ impl<'b, T> Deref<T> for Ref<'b, T> {\n \n /// Wraps a mutable borrowed reference to a value in a `RefCell` box.\n pub struct RefMut<'b, T> {\n-    parent: &'b mut RefCell<T>\n+    parent: &'b RefCell<T>\n }\n \n #[unsafe_destructor]\n impl<'b, T> Drop for RefMut<'b, T> {\n     fn drop(&mut self) {\n-        assert!(self.parent.borrow == WRITING);\n-        self.parent.borrow = UNUSED;\n+        let borrow = self.parent.borrow.get();\n+        assert!(borrow == WRITING);\n+        self.parent.borrow.set(UNUSED);\n     }\n }\n "}]}