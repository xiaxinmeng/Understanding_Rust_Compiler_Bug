{"sha": "34534152f5ad64d4d1fbc50ef475bc68cb7ac750", "node_id": "C_kwDOAAsO6NoAKDM0NTM0MTUyZjVhZDY0ZDRkMWZiYzUwZWY0NzViYzY4Y2I3YWM3NTA", "commit": {"author": {"name": "Kai Luo", "email": "gluokai@gmail.com", "date": "2023-01-04T10:00:09Z"}, "committer": {"name": "Kai Luo", "email": "gluokai@gmail.com", "date": "2023-01-04T10:00:09Z"}, "message": "[LSDA] Take ttype_index into account when taking action\n\nIf cs_action != 0, we should check the ttype_index field in\naction record. If ttype_index == 0, a clean up action is taken.", "tree": {"sha": "797cffcbaf2625c113c673a01363a1451507d50f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/797cffcbaf2625c113c673a01363a1451507d50f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34534152f5ad64d4d1fbc50ef475bc68cb7ac750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34534152f5ad64d4d1fbc50ef475bc68cb7ac750", "html_url": "https://github.com/rust-lang/rust/commit/34534152f5ad64d4d1fbc50ef475bc68cb7ac750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34534152f5ad64d4d1fbc50ef475bc68cb7ac750/comments", "author": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbe82928729c29ea953c95defb81b302dd704fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe82928729c29ea953c95defb81b302dd704fae", "html_url": "https://github.com/rust-lang/rust/commit/fbe82928729c29ea953c95defb81b302dd704fae"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "e7bd700b8b89e3b83c1068e05f332b93d5212b72", "filename": "library/std/src/personality/dwarf/eh.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/34534152f5ad64d4d1fbc50ef475bc68cb7ac750/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34534152f5ad64d4d1fbc50ef475bc68cb7ac750/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs?ref=34534152f5ad64d4d1fbc50ef475bc68cb7ac750", "patch": "@@ -84,7 +84,7 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>) -> Result\n             let cs_start = read_encoded_pointer(&mut reader, context, call_site_encoding)?;\n             let cs_len = read_encoded_pointer(&mut reader, context, call_site_encoding)?;\n             let cs_lpad = read_encoded_pointer(&mut reader, context, call_site_encoding)?;\n-            let cs_action = reader.read_uleb128();\n+            let cs_action_entry = reader.read_uleb128();\n             // Callsite table is sorted by cs_start, so if we've passed the ip, we\n             // may stop searching.\n             if ip < func_start + cs_start {\n@@ -95,7 +95,15 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>) -> Result\n                     return Ok(EHAction::None);\n                 } else {\n                     let lpad = lpad_base + cs_lpad;\n-                    return Ok(interpret_cs_action(cs_action, lpad));\n+                    if cs_action_entry == 0 {\n+                        return Ok(interpret_cs_action(0, lpad));\n+                    } else {\n+                        let action_record =\n+                            (action_table as *mut u8).offset(cs_action_entry as isize - 1);\n+                        let mut action_reader = DwarfReader::new(action_record);\n+                        let ttype_index = action_reader.read_sleb128();\n+                        return Ok(interpret_cs_action(ttype_index as u64, lpad));\n+                    }\n                 }\n             }\n         }"}]}