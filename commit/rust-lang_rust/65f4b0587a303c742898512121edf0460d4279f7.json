{"sha": "65f4b0587a303c742898512121edf0460d4279f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZjRiMDU4N2EzMDNjNzQyODk4NTEyMTIxZWRmMDQ2MGQ0Mjc5Zjc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T00:07:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T02:10:23Z"}, "message": "rt: Generate intrinsics", "tree": {"sha": "5f3980c41de3263afd1859738d0af764e146cad3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f3980c41de3263afd1859738d0af764e146cad3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65f4b0587a303c742898512121edf0460d4279f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65f4b0587a303c742898512121edf0460d4279f7", "html_url": "https://github.com/rust-lang/rust/commit/65f4b0587a303c742898512121edf0460d4279f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65f4b0587a303c742898512121edf0460d4279f7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bda40e2e4ada8d091ddd29a2b1b42f7792a1964e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda40e2e4ada8d091ddd29a2b1b42f7792a1964e", "html_url": "https://github.com/rust-lang/rust/commit/bda40e2e4ada8d091ddd29a2b1b42f7792a1964e"}], "stats": {"total": 156, "additions": 85, "deletions": 71}, "files": [{"sha": "8de1682732dca39af538f15519ba64ca4496e9b5", "filename": "src/rt/intrinsics/intrinsics.i386.ll.in", "status": "modified", "additions": 43, "deletions": 36, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in?ref=65f4b0587a303c742898512121edf0460d4279f7", "patch": "@@ -10,21 +10,21 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %struct.rust_vec = type { i32, i32, [0 x i8] }\n %struct.rust_fn = type { i32*, %struct.rust_box* }\n %struct.rust_box = type opaque\n-%struct.rust_task = type { %struct.rust_task_user, i32, %class.context, %struct.stk_seg*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, i32, i32, %class.memory_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task = type { %struct.rust_task_user, i32, [8 x i8], %class.context, %struct.stk_seg*, i32, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i32, %class.timer, i32*, i32, i32, %class.memory_region, %class.boxed_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, i32, %\"class.debug::task_debug_info\", i32, [8 x i8] }\n %struct.rust_task_user = type { i32, i32, %struct.chan_handle, i32 }\n %struct.chan_handle = type { i32, i32 }\n-%class.context = type { %struct.registers_t, %class.context* }\n-%struct.registers_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32 }\n-%struct.stk_seg = type { %struct.stk_seg*, i32, i32, i32, [0 x i8] }\n-%struct.rust_scheduler = type { %class.rust_thread, i32, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i32, %union.pthread_attr_t, %struct.rust_env*, %class.context }\n+%class.context = type { %struct.registers_t, %class.context*, [12 x i8] }\n+%struct.registers_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i16, i16, i32, i32, [12 x i8] }\n+%struct.stk_seg = type { %struct.stk_seg*, %struct.stk_seg*, i32, i32, i32, [0 x i8] }\n+%struct.rust_scheduler = type { %class.rust_thread, i32, i32, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i32, %union.pthread_attr_t, %struct.rust_env*, [8 x i8], %class.context }\n %class.rust_thread = type { i32 (...)**, i8, i32 }\n %class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n %class.rust_srv = type { i32 (...)**, %struct.rust_env*, %class.memory_region }\n-%struct.rust_env = type { i32, i32, i8*, i8, i8, i8* }\n+%struct.rust_env = type { i32, i32, i32, i8*, i8, i8, i8* }\n %class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %class.array_list, i8, i8, %class.lock_and_signal }\n %class.array_list = type { i32, %\"struct.memory_region::alloc_header\"**, i32 }\n %\"struct.memory_region::alloc_header\" = type { i8 }\n-%class.lock_and_signal = type { i32 (...)**, %union.pthread_cond_t, %union.pthread_mutex_t, i32, i8, i8 }\n+%class.lock_and_signal = type { i32 (...)**, %union.pthread_cond_t, %union.pthread_mutex_t, i32 }\n %union.pthread_cond_t = type { %struct.anon, [4 x i8] }\n %struct.anon = type { i32, i32, i64, i64, i64, i8*, i32, i32 }\n %union.pthread_mutex_t = type { %\"struct.<anonymous union>::__pthread_mutex_s\" }\n@@ -33,7 +33,8 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n %class.indexed_list = type { i32 (...)**, %class.array_list.1 }\n %class.array_list.1 = type { i32, %struct.rust_task**, i32 }\n-%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i32 }\n+%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_hashable_dict*, %struct.rust_scheduler*, i32 }\n+%struct.rust_hashable_dict = type { %struct.UT_hash_handle, [0 x i8*] }\n %struct.randctx = type { i32, [256 x i32], [256 x i32], i32, i32, i32 }\n %class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %class.array_list.3, %struct.randctx, i32, %class.hash_map, i32, i32, i32, %struct.rust_env* }\n %class.array_list.3 = type { i32, %struct.rust_scheduler**, i32 }\n@@ -42,72 +43,78 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %union.pthread_attr_t = type { i32, [32 x i8] }\n %struct.rust_cond = type { i8 }\n %class.timer = type { i32 (...)**, i64, i64 }\n+%class.boxed_region = type { %class.memory_region*, %struct.rust_opaque_box* }\n+%struct.rust_opaque_box = type { i32, %struct.type_desc*, %struct.rust_opaque_box*, %struct.rust_opaque_box* }\n %class.hash_map.4 = type { %\"struct.hash_map<int, rust_port *>::map_entry\"* }\n %\"struct.hash_map<int, rust_port *>::map_entry\" = type opaque\n %class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n %struct.rust_obstack_chunk = type { %struct.rust_obstack_chunk*, i32, i32, i32, [0 x i8] }\n+%\"class.debug::task_debug_info\" = type { %\"class.std::map\" }\n %\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n-%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n-%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i32 }\n+%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i32 }\n %\"struct.std::less\" = type { i8 }\n %\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n-%\"class.debug::task_debug_info\" = type { %\"class.std::map.5\" }\n-%\"class.std::map.5\" = type { %\"class.std::_Rb_tree.6\" }\n-%\"class.std::_Rb_tree.6\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" }\n-%\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i32 }\n \n define void @rust_intrinsic_vec_len(i32* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n-  %1 = load %struct.rust_vec** %vp, align 4, !tbaa !0\n-  %2 = getelementptr inbounds %struct.rust_vec* %1, i32 0, i32 0\n-  %3 = load i32* %2, align 4, !tbaa !3\n-  %4 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %5 = load i32* %4, align 4, !tbaa !3\n-  %6 = udiv i32 %3, %5\n-  store i32 %6, i32* %retptr, align 4, !tbaa !3\n+entry:\n+  %0 = load %struct.rust_vec** %vp, align 4, !tbaa !0\n+  %fill = getelementptr inbounds %struct.rust_vec* %0, i32 0, i32 0\n+  %1 = load i32* %fill, align 4, !tbaa !3\n+  %size = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n+  %2 = load i32* %size, align 4, !tbaa !3\n+  %div = udiv i32 %1, %2\n+  store i32 %div, i32* %retptr, align 4, !tbaa !3\n   ret void\n }\n \n define void @rust_intrinsic_ptr_offset(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %ptr, i32 %count) nounwind {\n-  %1 = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n-  %2 = load i32* %1, align 4, !tbaa !3\n-  %3 = mul i32 %2, %count\n-  %4 = getelementptr inbounds i8* %ptr, i32 %3\n-  store i8* %4, i8** %retptr, align 4, !tbaa !0\n+entry:\n+  %size = getelementptr inbounds %struct.type_desc* %ty, i32 0, i32 1\n+  %0 = load i32* %size, align 4, !tbaa !3\n+  %mul = mul i32 %0, %count\n+  %arrayidx = getelementptr inbounds i8* %ptr, i32 %mul\n+  store i8* %arrayidx, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n define void @rust_intrinsic_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) nounwind {\n-  %1 = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n-  %2 = load i32* %1, align 4, !tbaa !3\n-  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %retptr, i8* %src, i32 %2, i32 1, i1 false)\n+entry:\n+  %size = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n+  %0 = load i32* %size, align 4, !tbaa !3\n+  tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %retptr, i8* %src, i32 %0, i32 1, i1 false)\n   ret void\n }\n \n declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind\n \n define void @rust_intrinsic_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {\n+entry:\n   store i8* %valptr, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n define void @rust_intrinsic_call_with_retptr(i8** %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_fn* nocapture %recvfn) {\n-  %1 = getelementptr inbounds %struct.rust_fn* %recvfn, i32 0, i32 0\n-  %2 = load i32** %1, align 4, !tbaa !0\n-  %3 = bitcast i32* %2 to void (i8**, i8*, i8**)*\n-  %4 = getelementptr inbounds %struct.rust_fn* %recvfn, i32 0, i32 1\n-  %5 = load %struct.rust_box** %4, align 4, !tbaa !0\n-  %6 = bitcast %struct.rust_box* %5 to i8*\n-  tail call void %3(i8** null, i8* %6, i8** %retptr)\n+entry:\n+  %fn1 = getelementptr inbounds %struct.rust_fn* %recvfn, i32 0, i32 0\n+  %0 = load i32** %fn1, align 4, !tbaa !0\n+  %1 = bitcast i32* %0 to void (i8**, i8*, i8**)*\n+  %env2 = getelementptr inbounds %struct.rust_fn* %recvfn, i32 0, i32 1\n+  %2 = load %struct.rust_box** %env2, align 4, !tbaa !0\n+  %3 = bitcast %struct.rust_box* %2 to i8*\n+  tail call void %1(i8** null, i8* %3, i8** %retptr)\n   ret void\n }\n \n define void @rust_intrinsic_get_type_desc(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* %ty) nounwind {\n+entry:\n   %ty.c = bitcast %struct.type_desc* %ty to i8*\n   store i8* %ty.c, i8** %retptr, align 4, !tbaa !0\n   ret void\n }\n \n define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i32 %time_in_us, i8* %killed) {\n+entry:\n   tail call void @rust_task_sleep(%struct.rust_task* %task, i32 %time_in_us, i8* %killed)\n   ret void\n }"}, {"sha": "55040a65959e3cd476a4a7eb9541e3e2bc6d4526", "filename": "src/rt/intrinsics/intrinsics.x86_64.ll.in", "status": "modified", "additions": 42, "deletions": 35, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/65f4b0587a303c742898512121edf0460d4279f7/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in?ref=65f4b0587a303c742898512121edf0460d4279f7", "patch": "@@ -10,21 +10,21 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %struct.rust_vec = type { i64, i64, [0 x i8] }\n %struct.rust_fn = type { i64*, %struct.rust_box* }\n %struct.rust_box = type opaque\n-%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, i32, i32, %class.memory_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, %\"class.std::map\", i32, %\"class.debug::task_debug_info\" }\n+%struct.rust_task = type { %struct.rust_task_user, i64, %class.context, %struct.stk_seg*, i64, %struct.rust_scheduler*, %class.rust_crate_cache*, %class.rust_kernel*, i8*, %class.rust_task_list*, %struct.rust_cond*, i8*, %struct.rust_task*, i32, i64, %class.timer, i64*, i32, i32, %class.memory_region, %class.boxed_region, i8, i8, i8, %class.lock_and_signal, %class.hash_map.4, %class.rust_obstack, i32, %\"class.debug::task_debug_info\", i64, [8 x i8] }\n %struct.rust_task_user = type { i64, i64, %struct.chan_handle, i64 }\n %struct.chan_handle = type { i64, i64 }\n-%class.context = type { %struct.registers_t, %class.context* }\n+%class.context = type { %struct.registers_t, %class.context*, [8 x i8] }\n %struct.registers_t = type { [22 x i64] }\n-%struct.stk_seg = type { %struct.stk_seg*, i64, i32, [0 x i8] }\n+%struct.stk_seg = type { %struct.stk_seg*, %struct.stk_seg*, i64, i32, [0 x i8] }\n %struct.rust_scheduler = type { %class.rust_thread, i64, i64, %class.rust_log, i32, %class.rust_srv*, i8*, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_task_list, %class.rust_crate_cache, %struct.randctx, %class.rust_kernel*, i32, i32, %class.lock_and_signal, i64, %union.pthread_attr_t, %struct.rust_env*, %class.context }\n %class.rust_thread = type { i32 (...)**, i8, i64 }\n %class.rust_log = type { i32 (...)**, %class.rust_srv*, %struct.rust_scheduler*, i8 }\n %class.rust_srv = type { i32 (...)**, %struct.rust_env*, %class.memory_region }\n-%struct.rust_env = type { i64, i64, i8*, i8, i8, i8* }\n+%struct.rust_env = type { i64, i64, i64, i8*, i8, i8, i8* }\n %class.memory_region = type { i32 (...)**, %class.rust_srv*, %class.memory_region*, i32, %class.array_list, i8, i8, %class.lock_and_signal }\n %class.array_list = type { i64, %\"struct.memory_region::alloc_header\"**, i64 }\n %\"struct.memory_region::alloc_header\" = type { i8 }\n-%class.lock_and_signal = type { i32 (...)**, %union.pthread_cond_t, %union.pthread_mutex_t, i64, i8, i8 }\n+%class.lock_and_signal = type { i32 (...)**, %union.pthread_cond_t, %union.pthread_mutex_t, i64 }\n %union.pthread_cond_t = type { %struct.anon }\n %struct.anon = type { i32, i32, i64, i64, i64, i8*, i32, i32 }\n %union.pthread_mutex_t = type { %\"struct.<anonymous union>::__pthread_mutex_s\" }\n@@ -33,81 +33,88 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %class.rust_task_list = type { %class.indexed_list, %struct.rust_scheduler*, i8* }\n %class.indexed_list = type { i32 (...)**, %class.array_list.1 }\n %class.array_list.1 = type { i64, %struct.rust_task**, i64 }\n-%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_scheduler*, i64 }\n+%class.rust_crate_cache = type { %struct.type_desc*, %struct.rust_hashable_dict*, %struct.rust_scheduler*, i64 }\n+%struct.rust_hashable_dict = type { %struct.UT_hash_handle, [0 x i8*] }\n %struct.randctx = type { i64, [256 x i64], [256 x i64], i64, i64, i64 }\n-%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %class.array_list.3, %struct.randctx, i64, %class.hash_map, i64, i32, i32, %struct.rust_env* }\n+%class.rust_kernel = type { i32 (...)**, %class.memory_region, %class.rust_log, %class.rust_srv*, %class.lock_and_signal, %class.array_list.3, %struct.randctx, i64, %class.hash_map, i32, i64, i32, %struct.rust_env* }\n %class.array_list.3 = type { i64, %struct.rust_scheduler**, i64 }\n %class.hash_map = type { %\"struct.hash_map<long, rust_task *>::map_entry\"* }\n %\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n %union.pthread_attr_t = type { i64, [48 x i8] }\n %struct.rust_cond = type { i8 }\n %class.timer = type { i32 (...)**, i64, i64 }\n+%class.boxed_region = type { %class.memory_region*, %struct.rust_opaque_box* }\n+%struct.rust_opaque_box = type { i64, %struct.type_desc*, %struct.rust_opaque_box*, %struct.rust_opaque_box* }\n %class.hash_map.4 = type { %\"struct.hash_map<long, rust_port *>::map_entry\"* }\n %\"struct.hash_map<long, rust_port *>::map_entry\" = type opaque\n %class.rust_obstack = type { %struct.rust_obstack_chunk*, %struct.rust_task* }\n %struct.rust_obstack_chunk = type { %struct.rust_obstack_chunk*, i64, i64, i64, [0 x i8] }\n+%\"class.debug::task_debug_info\" = type { %\"class.std::map\" }\n %\"class.std::map\" = type { %\"class.std::_Rb_tree\" }\n-%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" }\n-%\"struct.std::_Rb_tree<void *, std::pair<void *const, const type_desc *>, std::_Select1st<std::pair<void *const, const type_desc *> >, std::less<void *>, std::allocator<std::pair<void *const, const type_desc *> > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i64 }\n+%\"class.std::_Rb_tree\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" }\n+%\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i64 }\n %\"struct.std::less\" = type { i8 }\n %\"struct.std::_Rb_tree_node_base\" = type { i32, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"*, %\"struct.std::_Rb_tree_node_base\"* }\n-%\"class.debug::task_debug_info\" = type { %\"class.std::map.5\" }\n-%\"class.std::map.5\" = type { %\"class.std::_Rb_tree.6\" }\n-%\"class.std::_Rb_tree.6\" = type { %\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" }\n-%\"struct.std::_Rb_tree<void *, std::pair<void *const, std::basic_string<char> >, std::_Select1st<std::pair<void *const, std::basic_string<char> > >, std::less<void *>, std::allocator<std::pair<void *const, std::basic_string<char> > > >::_Rb_tree_impl\" = type { %\"struct.std::less\", %\"struct.std::_Rb_tree_node_base\", i64 }\n \n define void @rust_intrinsic_vec_len(i64* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind uwtable {\n-  %1 = load %struct.rust_vec** %vp, align 8, !tbaa !0\n-  %2 = getelementptr inbounds %struct.rust_vec* %1, i64 0, i32 0\n-  %3 = load i64* %2, align 8, !tbaa !3\n-  %4 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n-  %5 = load i64* %4, align 8, !tbaa !3\n-  %6 = udiv i64 %3, %5\n-  store i64 %6, i64* %retptr, align 8, !tbaa !3\n+entry:\n+  %0 = load %struct.rust_vec** %vp, align 8, !tbaa !0\n+  %fill = getelementptr inbounds %struct.rust_vec* %0, i64 0, i32 0\n+  %1 = load i64* %fill, align 8, !tbaa !3\n+  %size = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n+  %2 = load i64* %size, align 8, !tbaa !3\n+  %div = udiv i64 %1, %2\n+  store i64 %div, i64* %retptr, align 8, !tbaa !3\n   ret void\n }\n \n define void @rust_intrinsic_ptr_offset(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %ptr, i64 %count) nounwind uwtable {\n-  %1 = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n-  %2 = load i64* %1, align 8, !tbaa !3\n-  %3 = mul i64 %2, %count\n-  %4 = getelementptr inbounds i8* %ptr, i64 %3\n-  store i8* %4, i8** %retptr, align 8, !tbaa !0\n+entry:\n+  %size = getelementptr inbounds %struct.type_desc* %ty, i64 0, i32 1\n+  %0 = load i64* %size, align 8, !tbaa !3\n+  %mul = mul i64 %0, %count\n+  %arrayidx = getelementptr inbounds i8* %ptr, i64 %mul\n+  store i8* %arrayidx, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n define void @rust_intrinsic_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) nounwind uwtable {\n-  %1 = getelementptr inbounds %struct.type_desc* %t1, i64 0, i32 1\n-  %2 = load i64* %1, align 8, !tbaa !3\n-  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %retptr, i8* %src, i64 %2, i32 1, i1 false)\n+entry:\n+  %size = getelementptr inbounds %struct.type_desc* %t1, i64 0, i32 1\n+  %0 = load i64* %size, align 8, !tbaa !3\n+  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %retptr, i8* %src, i64 %0, i32 1, i1 false)\n   ret void\n }\n \n declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind\n \n define void @rust_intrinsic_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind uwtable {\n+entry:\n   store i8* %valptr, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n define void @rust_intrinsic_call_with_retptr(i8** %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_fn* nocapture %recvfn) uwtable {\n-  %1 = getelementptr inbounds %struct.rust_fn* %recvfn, i64 0, i32 0\n-  %2 = load i64** %1, align 8, !tbaa !0\n-  %3 = bitcast i64* %2 to void (i8**, i8*, i8**)*\n-  %4 = getelementptr inbounds %struct.rust_fn* %recvfn, i64 0, i32 1\n-  %5 = load %struct.rust_box** %4, align 8, !tbaa !0\n-  %6 = bitcast %struct.rust_box* %5 to i8*\n-  tail call void %3(i8** null, i8* %6, i8** %retptr)\n+entry:\n+  %fn1 = getelementptr inbounds %struct.rust_fn* %recvfn, i64 0, i32 0\n+  %0 = load i64** %fn1, align 8, !tbaa !0\n+  %1 = bitcast i64* %0 to void (i8**, i8*, i8**)*\n+  %env2 = getelementptr inbounds %struct.rust_fn* %recvfn, i64 0, i32 1\n+  %2 = load %struct.rust_box** %env2, align 8, !tbaa !0\n+  %3 = bitcast %struct.rust_box* %2 to i8*\n+  tail call void %1(i8** null, i8* %3, i8** %retptr)\n   ret void\n }\n \n define void @rust_intrinsic_get_type_desc(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* %ty) nounwind uwtable {\n+entry:\n   %ty.c = bitcast %struct.type_desc* %ty to i8*\n   store i8* %ty.c, i8** %retptr, align 8, !tbaa !0\n   ret void\n }\n \n define void @rust_intrinsic_task_sleep(i8** nocapture %retptr, i8* nocapture %env, %struct.rust_task* %task, i64 %time_in_us, i8* %killed) uwtable {\n+entry:\n   tail call void @rust_task_sleep(%struct.rust_task* %task, i64 %time_in_us, i8* %killed)\n   ret void\n }"}]}