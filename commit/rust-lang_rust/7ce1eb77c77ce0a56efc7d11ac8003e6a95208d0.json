{"sha": "7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjZTFlYjc3Yzc3Y2UwYTU2ZWZjN2QxMWFjODAwM2U2YTk1MjA4ZDA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-04-21T11:28:31Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-04-21T20:58:15Z"}, "message": "Update ui test", "tree": {"sha": "04f62abcf127f53f03f0c8e8df7739198ec74f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04f62abcf127f53f03f0c8e8df7739198ec74f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "html_url": "https://github.com/rust-lang/rust/commit/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d3284ebc18f3d4087d71352421726b2240a7c20", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d3284ebc18f3d4087d71352421726b2240a7c20", "html_url": "https://github.com/rust-lang/rust/commit/7d3284ebc18f3d4087d71352421726b2240a7c20"}], "stats": {"total": 40, "additions": 10, "deletions": 30}, "files": [{"sha": "d21b5f739bd7b5510712cc7eac3c43c44cfdf034", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "patch": "@@ -65,8 +65,8 @@ use check::{Diverges, FnCtxt};\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{Coercion, InferResult, InferOk, TypeTrace};\n-use rustc::infer::type_variable::{TypeVariableOrigin};\n-use rustc::traits::{self, /*FulfillmentContext,*/ ObligationCause, ObligationCauseCode};\n+use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::traits::{self, ObligationCause, ObligationCauseCode};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow};\n use rustc::ty::{self, LvaluePreference, TypeAndMut,\n                 Ty, ClosureSubsts};\n@@ -724,28 +724,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Same as `try_coerce()`, but without side-effects.\n-    pub fn can_coerce(&self,\n-                      expr_ty: Ty<'tcx>,\n-                      target: Ty<'tcx>)\n-                      -> bool {\n-        // FIXME: This is a hack, but coercion wasn't made to be run\n-        // in a probe. It leaks obligations and bounds and things out\n-        // into the environment. For now we just save-and-restore the\n-        // fulfillment context.\n-        /*let saved_fulfillment_cx =\n-            mem::replace(\n-                &mut *self.inh.fulfillment_cx.borrow_mut(),\n-                FulfillmentContext::new());*/\n+    pub fn can_coerce(&self, expr_ty: Ty<'tcx>, target: Ty<'tcx>) -> bool {\n         let source = self.resolve_type_vars_with_obligations(expr_ty);\n         debug!(\"coercion::can({:?} -> {:?})\", source, target);\n \n         let cause = self.cause(syntax_pos::DUMMY_SP, ObligationCauseCode::ExprAssignable);\n         let coerce = Coerce::new(self, cause);\n-        let result = self.probe(|_| coerce.coerce::<hir::Expr>(&[], source, target)).is_ok();\n-\n-        //*self.inh.fulfillment_cx.borrow_mut() = saved_fulfillment_cx;\n-\n-        result\n+        self.probe(|_| coerce.coerce::<hir::Expr>(&[], source, target)).is_ok()\n     }\n \n     /// Given some expressions, their known unified type and another expression,"}, {"sha": "4cc3f2dacdfe996a77e4fc4c641595ce49109871", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "patch": "@@ -93,7 +93,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                                              ast::DUMMY_NODE_ID);\n                 if suggestions.len() > 0 {\n                     err.help(&format!(\"here are some functions which \\\n-                                       might fulfill your needs:\\n - {}\",\n+                                       might fulfill your needs:\\n{}\",\n                                       self.get_best_match(&suggestions).join(\"\\n\")));\n                 }\n             }"}, {"sha": "bc3122bf71c0e21056a40d31e75e4a41f6e032ed", "filename": "src/test/ui/span/coerce-suggestions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.rs?ref=7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "patch": "@@ -32,7 +32,6 @@ fn main() {\n     //~| NOTE types differ in mutability\n     //~| NOTE expected type `&mut std::string::String`\n     //~| NOTE found type `&std::string::String`\n-    //~| HELP try with `&mut y`\n     test2(&y);\n     //~^ ERROR E0308\n     //~| NOTE types differ in mutability"}, {"sha": "220b2f471da9ad7aef33e4d22a67ab811adbb778", "filename": "src/test/ui/span/coerce-suggestions.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fcoerce-suggestions.stderr?ref=7ce1eb77c77ce0a56efc7d11ac8003e6a95208d0", "patch": "@@ -18,11 +18,7 @@ error[E0308]: mismatched types\n    |\n    = note: expected type `&str`\n               found type `std::string::String`\n-   = help: here are some functions which might fulfill your needs:\n-           - .as_str()\n-           - .trim()\n-           - .trim_left()\n-           - .trim_right()\n+   = help: try with `&String::new()`\n \n error[E0308]: mismatched types\n   --> $DIR/coerce-suggestions.rs:30:10\n@@ -34,18 +30,18 @@ error[E0308]: mismatched types\n               found type `&std::string::String`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-suggestions.rs:36:11\n+  --> $DIR/coerce-suggestions.rs:35:11\n    |\n-36 |     test2(&y);\n+35 |     test2(&y);\n    |           ^^ types differ in mutability\n    |\n    = note: expected type `&mut i32`\n               found type `&std::string::String`\n \n error[E0308]: mismatched types\n-  --> $DIR/coerce-suggestions.rs:42:9\n+  --> $DIR/coerce-suggestions.rs:41:9\n    |\n-42 |     f = box f;\n+41 |     f = box f;\n    |         ^^^^^ cyclic type of infinite size\n    |\n    = note: expected type `_`"}]}