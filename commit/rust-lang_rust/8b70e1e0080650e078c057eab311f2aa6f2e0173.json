{"sha": "8b70e1e0080650e078c057eab311f2aa6f2e0173", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNzBlMWUwMDgwNjUwZTA3OGMwNTdlYWIzMTFmMmFhNmYyZTAxNzM=", "commit": {"author": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2015-08-20T22:47:21Z"}, "committer": {"name": "Richard Diamond", "email": "wichard@vitalitystudios.com", "date": "2015-08-21T22:50:39Z"}, "message": "Add a `allow_asm` option so virtual ISA based targets (JS/PNaCl/WAsm) can disallow the asm! macro.", "tree": {"sha": "8d718571da2940b8508316492aa4bc9dcc92de37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d718571da2940b8508316492aa4bc9dcc92de37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b70e1e0080650e078c057eab311f2aa6f2e0173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b70e1e0080650e078c057eab311f2aa6f2e0173", "html_url": "https://github.com/rust-lang/rust/commit/8b70e1e0080650e078c057eab311f2aa6f2e0173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b70e1e0080650e078c057eab311f2aa6f2e0173/comments", "author": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DiamondLovesYou", "id": 650357, "node_id": "MDQ6VXNlcjY1MDM1Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/650357?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DiamondLovesYou", "html_url": "https://github.com/DiamondLovesYou", "followers_url": "https://api.github.com/users/DiamondLovesYou/followers", "following_url": "https://api.github.com/users/DiamondLovesYou/following{/other_user}", "gists_url": "https://api.github.com/users/DiamondLovesYou/gists{/gist_id}", "starred_url": "https://api.github.com/users/DiamondLovesYou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DiamondLovesYou/subscriptions", "organizations_url": "https://api.github.com/users/DiamondLovesYou/orgs", "repos_url": "https://api.github.com/users/DiamondLovesYou/repos", "events_url": "https://api.github.com/users/DiamondLovesYou/events{/privacy}", "received_events_url": "https://api.github.com/users/DiamondLovesYou/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aca2057ed5fb7af3f8905b2bc01f72fa001c35c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/aca2057ed5fb7af3f8905b2bc01f72fa001c35c8", "html_url": "https://github.com/rust-lang/rust/commit/aca2057ed5fb7af3f8905b2bc01f72fa001c35c8"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "1047f51e95ffc261216f44f1038208825a4efcca", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b70e1e0080650e078c057eab311f2aa6f2e0173/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b70e1e0080650e078c057eab311f2aa6f2e0173/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=8b70e1e0080650e078c057eab311f2aa6f2e0173", "patch": "@@ -112,6 +112,7 @@ pub mod middle {\n     pub mod check_static_recursion;\n     pub mod check_loop;\n     pub mod check_match;\n+    pub mod check_no_asm;\n     pub mod check_rvalues;\n     pub mod const_eval;\n     pub mod dataflow;"}, {"sha": "aa1b7457aa90a39d925fd377e17cd4e4599de0cf", "filename": "src/librustc/middle/check_no_asm.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8b70e1e0080650e078c057eab311f2aa6f2e0173/src%2Flibrustc%2Fmiddle%2Fcheck_no_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b70e1e0080650e078c057eab311f2aa6f2e0173/src%2Flibrustc%2Fmiddle%2Fcheck_no_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_no_asm.rs?ref=8b70e1e0080650e078c057eab311f2aa6f2e0173", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// Run over the whole crate and check for ExprInlineAsm.\n+/// Inline asm isn't allowed on virtual ISA based targets, so we reject it\n+/// here.\n+\n+use session::Session;\n+\n+use syntax::ast;\n+use syntax::visit::Visitor;\n+use syntax::visit;\n+\n+pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n+    if sess.target.target.options.allow_asm { return; }\n+\n+    visit::walk_crate(&mut CheckNoAsm { sess: sess, }, krate);\n+}\n+\n+#[derive(Copy, Clone)]\n+struct CheckNoAsm<'a> {\n+    sess: &'a Session,\n+}\n+\n+impl<'a, 'v> Visitor<'v> for CheckNoAsm<'a> {\n+    fn visit_expr(&mut self, e: &ast::Expr) {\n+        match e.node {\n+            ast::ExprInlineAsm(_) => self.sess.span_err(e.span,\n+                                                        \"asm! is unsupported on this target\"),\n+            _ => {},\n+        }\n+        visit::walk_expr(self, e)\n+    }\n+}"}, {"sha": "b603aad481db7c5fa792064f7568660c4b71f788", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b70e1e0080650e078c057eab311f2aa6f2e0173/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b70e1e0080650e078c057eab311f2aa6f2e0173/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=8b70e1e0080650e078c057eab311f2aa6f2e0173", "patch": "@@ -168,6 +168,8 @@ pub struct TargetOptions {\n     /// currently only \"gnu\" is used to fall into LLVM. Unknown strings cause\n     /// the system linker to be used.\n     pub archive_format: String,\n+    /// Is asm!() allowed? Defaults to true.\n+    pub allow_asm: bool,\n     /// Whether the target uses a custom unwind resumption routine.\n     /// By default LLVM lowers `resume` instructions into calls to `_Unwind_Resume`\n     /// defined in libgcc.  If this option is enabled, the target must provide\n@@ -217,6 +219,7 @@ impl Default for TargetOptions {\n             custom_unwind_resume: false,\n             lib_allocation_crate: \"alloc_system\".to_string(),\n             exe_allocation_crate: \"alloc_system\".to_string(),\n+            allow_asm: true,\n         }\n     }\n }\n@@ -310,6 +313,7 @@ impl Target {\n         key!(no_compiler_rt, bool);\n         key!(pre_link_args, list);\n         key!(post_link_args, list);\n+        key!(allow_asm, bool);\n \n         base\n     }"}, {"sha": "f08c962a1c265ce0489eb756b48d0dc39faf53fe", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b70e1e0080650e078c057eab311f2aa6f2e0173/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b70e1e0080650e078c057eab311f2aa6f2e0173/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8b70e1e0080650e078c057eab311f2aa6f2e0173", "patch": "@@ -563,6 +563,9 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     time(time_passes, \"checking that all macro invocations are gone\", ||\n          syntax::ext::expand::check_for_macros(&sess.parse_sess, &krate));\n \n+    time(time_passes, \"checking for inline asm in case the target doesn't support it\", ||\n+         middle::check_no_asm::check_crate(sess, &krate));\n+\n     // One final feature gating of the true AST that gets compiled\n     // later, to make sure we've got everything (e.g. configuration\n     // can insert new attributes via `cfg_attr`)"}]}