{"sha": "fcd0cd0adef72e2bc00016eccd97af2ebf70c12c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZDBjZDBhZGVmNzJlMmJjMDAwMTZlY2NkOTdhZjJlYmY3MGMxMmM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-15T17:24:18Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-19T18:52:55Z"}, "message": "Don't try to use a path to a type alias as a path to the adt it aliases", "tree": {"sha": "4be1a154592d8996294b6102febda30292558a33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4be1a154592d8996294b6102febda30292558a33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c", "html_url": "https://github.com/rust-lang/rust/commit/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b210b3168a572c84710bc160915592307f7a3ac5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b210b3168a572c84710bc160915592307f7a3ac5", "html_url": "https://github.com/rust-lang/rust/commit/b210b3168a572c84710bc160915592307f7a3ac5"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "f704ee61c8847e951b7f7f3fbb4193bb85e5db0e", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=fcd0cd0adef72e2bc00016eccd97af2ebf70c12c", "patch": "@@ -452,16 +452,23 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     ty::Adt(_adt_def, substs),\n                     hir::TyKind::Path(hir::QPath::Resolved(None, path)),\n                 ) => {\n-                    if let Some(last_segment) = path.segments.last() {\n-                        if let Some(name) = self.match_adt_and_segment(\n-                            substs,\n-                            needle_fr,\n-                            last_segment,\n-                            counter,\n-                            diag,\n-                            search_stack,\n-                        ) {\n-                            return Some(name);\n+                    match path.def {\n+                        // Type parameters of the type alias have no reason to\n+                        // be the same as those of the ADT.\n+                        // FIXME: We should be able to do something similar to\n+                        // match_adt_and_segment in this case.\n+                        hir::def::Def::TyAlias(_) => (),\n+                        _ => if let Some(last_segment) = path.segments.last() {\n+                            if let Some(name) = self.match_adt_and_segment(\n+                                substs,\n+                                needle_fr,\n+                                last_segment,\n+                                counter,\n+                                diag,\n+                                search_stack,\n+                            ) {\n+                                return Some(name);\n+                            }\n                         }\n                     }\n                 }"}, {"sha": "6e480dcaac08fe9820bce20c4ec87b28dc7268e2", "filename": "src/test/ui/nll/type-alias-free-regions.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.rs?ref=fcd0cd0adef72e2bc00016eccd97af2ebf70c12c", "patch": "@@ -0,0 +1,33 @@\n+// Test that we don't assume that type aliases have the same type parameters\n+// as the type they alias and then panic when we see this.\n+\n+#![feature(nll)]\n+\n+type a<'a> = &'a isize;\n+type b<'a> = Box<a<'a>>;\n+\n+struct c<'a> {\n+    f: Box<b<'a>>\n+}\n+\n+trait FromBox<'a> {\n+    fn from_box(b: Box<b>) -> Self;\n+}\n+\n+impl<'a> FromBox<'a> for c<'a> {\n+    fn from_box(b: Box<b>) -> Self {\n+        c { f: b } //~ ERROR\n+    }\n+}\n+\n+trait FromTuple<'a> {\n+    fn from_tuple( b: (b,)) -> Self;\n+}\n+\n+impl<'a> FromTuple<'a> for c<'a> {\n+    fn from_tuple(b: (b,)) -> Self {\n+        c { f: Box::new(b.0) } //~ ERROR\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "05f2c9309446a1e42e6c624f98acaf5833cb7a4f", "filename": "src/test/ui/nll/type-alias-free-regions.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fcd0cd0adef72e2bc00016eccd97af2ebf70c12c/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-alias-free-regions.stderr?ref=fcd0cd0adef72e2bc00016eccd97af2ebf70c12c", "patch": "@@ -0,0 +1,22 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/type-alias-free-regions.rs:19:9\n+   |\n+LL | impl<'a> FromBox<'a> for c<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     fn from_box(b: Box<b>) -> Self {\n+   |                 - has type `std::boxed::Box<std::boxed::Box<&'1 isize>>`\n+LL |         c { f: b } //~ ERROR\n+   |         ^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/type-alias-free-regions.rs:29:9\n+   |\n+LL | impl<'a> FromTuple<'a> for c<'a> {\n+   |      -- lifetime `'a` defined here\n+LL |     fn from_tuple(b: (b,)) -> Self {\n+   |                   - has type `(std::boxed::Box<&'1 isize>,)`\n+LL |         c { f: Box::new(b.0) } //~ ERROR\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'a`\n+\n+error: aborting due to 2 previous errors\n+"}]}