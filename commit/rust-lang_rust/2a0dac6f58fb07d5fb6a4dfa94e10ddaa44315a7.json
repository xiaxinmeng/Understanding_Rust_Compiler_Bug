{"sha": "2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMGRhYzZmNThmYjA3ZDVmYjZhNGRmYTk0ZTEwZGRhYTQ0MzE1YTc=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-04T06:09:45Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T19:06:22Z"}, "message": "Handle fallout for vector addition\n\nAdding two vectors now results in a Vec<T> instead of a ~[T].\n\nImplement Add on Vec<T>.", "tree": {"sha": "141785eae7b1d17aa580e6cbe70dd5c3040aefdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/141785eae7b1d17aa580e6cbe70dd5c3040aefdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7", "html_url": "https://github.com/rust-lang/rust/commit/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc42b619362c344aacdb84ff00243b3e32168cad", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc42b619362c344aacdb84ff00243b3e32168cad", "html_url": "https://github.com/rust-lang/rust/commit/cc42b619362c344aacdb84ff00243b3e32168cad"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "78d5afec7b48f34912dbe4619095a10fc1c1d2fc", "filename": "src/libcore/should_not_exist.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7/src%2Flibcore%2Fshould_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7/src%2Flibcore%2Fshould_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fshould_not_exist.rs?ref=2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7", "patch": "@@ -150,20 +150,3 @@ impl<A: Clone> Clone for ~[A] {\n         self.iter().map(|a| a.clone()).collect()\n     }\n }\n-\n-#[cfg(not(test))]\n-impl<'a,T:Clone, V: Vector<T>> Add<V, ~[T]> for &'a [T] {\n-    #[inline]\n-    fn add(&self, rhs: &V) -> ~[T] {\n-        let first = self.iter().map(|t| t.clone());\n-        first.chain(rhs.as_slice().iter().map(|t| t.clone())).collect()\n-    }\n-}\n-\n-#[cfg(not(test))]\n-impl<T:Clone, V: Vector<T>> Add<V, ~[T]> for ~[T] {\n-    #[inline]\n-    fn add(&self, rhs: &V) -> ~[T] {\n-        self.as_slice() + rhs.as_slice()\n-    }\n-}"}, {"sha": "d260ca4651318190d24625b59ef1fb5a2824cb1a", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7", "patch": "@@ -279,6 +279,26 @@ impl<T: Clone> Iterator<~[T]> for Permutations<T> {\n     }\n }\n \n+#[cfg(not(test))]\n+impl<'a,T:Clone, V: Vector<T>> Add<V, Vec<T>> for &'a [T] {\n+    #[inline]\n+    fn add(&self, rhs: &V) -> Vec<T> {\n+        let rhs = rhs.as_slice();\n+        let mut res = Vec::with_capacity(self.len() + rhs.len());\n+        res.push_all(*self);\n+        res.push_all(rhs);\n+        res\n+    }\n+}\n+\n+#[cfg(not(test))]\n+impl<T:Clone, V: Vector<T>> Add<V, Vec<T>> for ~[T] {\n+    #[inline]\n+    fn add(&self, rhs: &V) -> Vec<T> {\n+        self.as_slice() + rhs.as_slice()\n+    }\n+}\n+\n /// Extension methods for vector slices with cloneable elements\n pub trait CloneableVector<T> {\n     /// Copy `self` into a new owned vector"}, {"sha": "e2a9f6a5c4821c481ace94816a41577fcdf4c6fa", "filename": "src/libstd/unstable/dynamic_lib.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7/src%2Flibstd%2Funstable%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fdynamic_lib.rs?ref=2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7", "patch": "@@ -18,13 +18,16 @@ A simple wrapper over the platform's dynamic library facilities\n \n use c_str::ToCStr;\n use cast;\n+use iter::Iterator;\n use ops::*;\n use option::*;\n use os;\n use path::GenericPath;\n use path;\n use result::*;\n+use slice::{Vector,OwnedVector};\n use str;\n+use vec::Vec;\n \n pub struct DynamicLibrary { handle: *u8}\n \n@@ -73,8 +76,10 @@ impl DynamicLibrary {\n             (\"LD_LIBRARY_PATH\", ':' as u8)\n         };\n         let newenv = os::getenv_as_bytes(envvar).unwrap_or(box []);\n-        let newenv = newenv + &[sep] + path.as_vec();\n-        os::setenv(envvar, str::from_utf8(newenv).unwrap());\n+        let mut newenv = newenv.move_iter().collect::<Vec<_>>();\n+        newenv.push_all(&[sep]);\n+        newenv.push_all(path.as_vec());\n+        os::setenv(envvar, str::from_utf8(newenv.as_slice()).unwrap());\n     }\n \n     /// Access the value at the symbol of the dynamic library"}, {"sha": "fe122c7873add6d682c43fb9b3915855a3a55335", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=2a0dac6f58fb07d5fb6a4dfa94e10ddaa44315a7", "patch": "@@ -22,7 +22,7 @@ use mem::{size_of, move_val_init};\n use mem;\n use num;\n use num::{CheckedMul, CheckedAdd};\n-use ops::Drop;\n+use ops::{Add, Drop};\n use option::{None, Option, Some, Expect};\n use ptr::RawPtr;\n use ptr;\n@@ -1370,6 +1370,16 @@ impl<T> Vector<T> for Vec<T> {\n     }\n }\n \n+impl<T: Clone, V: Vector<T>> Add<V, Vec<T>> for Vec<T> {\n+    #[inline]\n+    fn add(&self, rhs: &V) -> Vec<T> {\n+        let mut res = Vec::with_capacity(self.len() + rhs.as_slice().len());\n+        res.push_all(self.as_slice());\n+        res.push_all(rhs.as_slice());\n+        res\n+    }\n+}\n+\n #[unsafe_destructor]\n impl<T> Drop for Vec<T> {\n     fn drop(&mut self) {"}]}