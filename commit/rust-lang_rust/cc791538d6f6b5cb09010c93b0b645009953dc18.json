{"sha": "cc791538d6f6b5cb09010c93b0b645009953dc18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjNzkxNTM4ZDZmNmI1Y2IwOTAxMGM5M2IwYjY0NTAwOTk1M2RjMTg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T15:05:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T15:05:00Z"}, "message": "Simplify", "tree": {"sha": "a4835c3780617428219433f2405459d729bd00b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4835c3780617428219433f2405459d729bd00b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc791538d6f6b5cb09010c93b0b645009953dc18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc791538d6f6b5cb09010c93b0b645009953dc18", "html_url": "https://github.com/rust-lang/rust/commit/cc791538d6f6b5cb09010c93b0b645009953dc18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc791538d6f6b5cb09010c93b0b645009953dc18/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12266d5e56c80a06dbfb4a78c070b57ac96ac7f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/12266d5e56c80a06dbfb4a78c070b57ac96ac7f5", "html_url": "https://github.com/rust-lang/rust/commit/12266d5e56c80a06dbfb4a78c070b57ac96ac7f5"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "48777223aa2899dc4ced859f7148d05d3daf7cc5", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/cc791538d6f6b5cb09010c93b0b645009953dc18/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc791538d6f6b5cb09010c93b0b645009953dc18/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=cc791538d6f6b5cb09010c93b0b645009953dc18", "patch": "@@ -19,7 +19,7 @@ pub struct DocumentHighlight {\n     pub access: Option<ReferenceAccess>,\n }\n \n-// Feature: Highlight related\n+// Feature: Highlight Related\n //\n // Highlights exit points, yield points or the definition and all references of the item at the cursor location in the current file.\n pub(crate) fn highlight_related(\n@@ -78,7 +78,7 @@ fn highlight_exit_points(token: SyntaxToken) -> Option<Vec<DocumentHighlight>> {\n     fn hl(body: Option<ast::Expr>) -> Option<Vec<DocumentHighlight>> {\n         let mut highlights = Vec::new();\n         let body = body?;\n-        walk(body.syntax(), |node| {\n+        walk(&body, |node| {\n             match_ast! {\n                 match node {\n                     ast::ReturnExpr(expr) => if let Some(token) = expr.return_token() {\n@@ -93,11 +93,11 @@ fn highlight_exit_points(token: SyntaxToken) -> Option<Vec<DocumentHighlight>> {\n                             range: token.text_range(),\n                         });\n                     },\n-                    ast::EffectExpr(effect) => if effect.async_token().is_some() {\n-                        return true;\n-                    },\n+                    // All the following are different contexts so skip them\n+                    ast::EffectExpr(effect) => return effect.async_token().is_some() || effect.try_token().is_some(),\n                     ast::ClosureExpr(__) => return true,\n                     ast::Item(__) => return true,\n+                    // Don't look into const args\n                     ast::Path(__) => return true,\n                     _ => (),\n                 }\n@@ -118,8 +118,8 @@ fn highlight_exit_points(token: SyntaxToken) -> Option<Vec<DocumentHighlight>> {\n             match anc {\n                 ast::Fn(fn_) => hl(fn_.body().map(ast::Expr::BlockExpr)),\n                 ast::ClosureExpr(closure) => hl(closure.body()),\n-                ast::EffectExpr(effect) => if effect.async_token().is_some() {\n-                    None\n+                ast::EffectExpr(effect) => if effect.async_token().is_some() || effect.try_token().is_some() {\n+                    hl(effect.block_expr().map(ast::Expr::BlockExpr))\n                 } else {\n                     continue;\n                 },\n@@ -133,12 +133,12 @@ fn highlight_exit_points(token: SyntaxToken) -> Option<Vec<DocumentHighlight>> {\n fn highlight_yield_points(token: SyntaxToken) -> Option<Vec<DocumentHighlight>> {\n     fn hl(\n         async_token: Option<SyntaxToken>,\n-        body: Option<ast::BlockExpr>,\n+        body: Option<ast::Expr>,\n     ) -> Option<Vec<DocumentHighlight>> {\n         let mut highlights = Vec::new();\n         highlights.push(DocumentHighlight { access: None, range: async_token?.text_range() });\n         if let Some(body) = body {\n-            walk(body.syntax(), |node| {\n+            walk(&body, |node| {\n                 match_ast! {\n                     match node {\n                         ast::AwaitExpr(expr) => if let Some(token) = expr.await_token() {\n@@ -147,11 +147,11 @@ fn highlight_yield_points(token: SyntaxToken) -> Option<Vec<DocumentHighlight>>\n                                 range: token.text_range(),\n                             });\n                         },\n-                        ast::EffectExpr(effect) => if effect.async_token().is_some() {\n-                            return true;\n-                        },\n+                        // All the following are different contexts so skip them\n+                        ast::EffectExpr(effect) => return effect.async_token().is_some() || effect.try_token().is_some(),\n                         ast::ClosureExpr(__) => return true,\n                         ast::Item(__) => return true,\n+                        // Don't look into const args\n                         ast::Path(__) => return true,\n                         _ => (),\n                     }\n@@ -164,18 +164,19 @@ fn highlight_yield_points(token: SyntaxToken) -> Option<Vec<DocumentHighlight>>\n     for anc in token.ancestors() {\n         return match_ast! {\n             match anc {\n-                ast::Fn(fn_) => hl(fn_.async_token(), fn_.body()),\n-                ast::EffectExpr(effect) => hl(effect.async_token(), effect.block_expr()),\n-                ast::ClosureExpr(__) => None,\n+                ast::Fn(fn_) => hl(fn_.async_token(), fn_.body().map(ast::Expr::BlockExpr)),\n+                ast::EffectExpr(effect) => hl(effect.async_token(), effect.block_expr().map(ast::Expr::BlockExpr)),\n+                ast::ClosureExpr(closure) => hl(closure.async_token(), closure.body()),\n                 _ => continue,\n             }\n         };\n     }\n     None\n }\n \n-fn walk(syntax: &SyntaxNode, mut cb: impl FnMut(SyntaxNode) -> bool) {\n-    let mut preorder = syntax.preorder();\n+/// Preorder walk the expression node skipping a node's subtrees if the callback returns `true` for the node.\n+fn walk(expr: &ast::Expr, mut cb: impl FnMut(SyntaxNode) -> bool) {\n+    let mut preorder = expr.syntax().preorder();\n     while let Some(event) = preorder.next() {\n         let node = match event {\n             WalkEvent::Enter(node) => node,"}]}