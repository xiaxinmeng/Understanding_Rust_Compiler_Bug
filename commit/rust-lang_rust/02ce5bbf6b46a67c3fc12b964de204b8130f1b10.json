{"sha": "02ce5bbf6b46a67c3fc12b964de204b8130f1b10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyY2U1YmJmNmI0NmE2N2MzZmMxMmI5NjRkZTIwNGI4MTMwZjFiMTA=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-27T10:43:05Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-27T10:43:05Z"}, "message": "Shutdown/cancelation story for main cargo watch thread", "tree": {"sha": "171733bb09f299cb50d8bb45aba1e86c14390acd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171733bb09f299cb50d8bb45aba1e86c14390acd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02ce5bbf6b46a67c3fc12b964de204b8130f1b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02ce5bbf6b46a67c3fc12b964de204b8130f1b10", "html_url": "https://github.com/rust-lang/rust/commit/02ce5bbf6b46a67c3fc12b964de204b8130f1b10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02ce5bbf6b46a67c3fc12b964de204b8130f1b10/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2d10694ccfcd12dad8796fc86966ea10ca3fc01", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2d10694ccfcd12dad8796fc86966ea10ca3fc01", "html_url": "https://github.com/rust-lang/rust/commit/a2d10694ccfcd12dad8796fc86966ea10ca3fc01"}], "stats": {"total": 47, "additions": 32, "deletions": 15}, "files": [{"sha": "4af26ff8c606cd5cc55d528584ec902efdbb0e70", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 32, "deletions": 15, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/02ce5bbf6b46a67c3fc12b964de204b8130f1b10/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02ce5bbf6b46a67c3fc12b964de204b8130f1b10/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=02ce5bbf6b46a67c3fc12b964de204b8130f1b10", "patch": "@@ -32,12 +32,13 @@ pub struct CheckOptions {\n /// CheckWatcher wraps the shared state and communication machinery used for\n /// running `cargo check` (or other compatible command) and providing\n /// diagnostics based on the output.\n+/// The spawned thread is shut down when this struct is dropped.\n #[derive(Debug)]\n pub struct CheckWatcher {\n     pub task_recv: Receiver<CheckTask>,\n     pub cmd_send: Sender<CheckCommand>,\n     pub shared: Arc<RwLock<CheckWatcherSharedState>>,\n-    handle: JoinHandle<()>,\n+    handle: Option<JoinHandle<()>>,\n }\n \n impl CheckWatcher {\n@@ -52,8 +53,7 @@ impl CheckWatcher {\n             let mut check = CheckWatcherState::new(options, workspace_root, shared_);\n             check.run(&task_send, &cmd_recv);\n         });\n-\n-        CheckWatcher { task_recv, cmd_send, handle, shared }\n+        CheckWatcher { task_recv, cmd_send, handle: Some(handle), shared }\n     }\n \n     /// Schedule a re-start of the cargo check worker.\n@@ -62,13 +62,21 @@ impl CheckWatcher {\n     }\n }\n \n-pub struct CheckWatcherState {\n-    options: CheckOptions,\n-    workspace_root: PathBuf,\n-    running: bool,\n-    watcher: WatchThread,\n-    last_update_req: Option<Instant>,\n-    shared: Arc<RwLock<CheckWatcherSharedState>>,\n+impl std::ops::Drop for CheckWatcher {\n+    fn drop(&mut self) {\n+        if let Some(handle) = self.handle.take() {\n+            // Replace our reciever with dummy one, so we can drop and close the\n+            // one actually communicating with the thread\n+            let recv = std::mem::replace(&mut self.task_recv, crossbeam_channel::never());\n+\n+            // Dropping the original reciever finishes the thread loop\n+            drop(recv);\n+\n+            // Join the thread, it should finish shortly. We don't really care\n+            // whether it panicked, so it is safe to ignore the result\n+            let _ = handle.join();\n+        }\n+    }\n }\n \n #[derive(Debug)]\n@@ -153,6 +161,14 @@ pub enum CheckCommand {\n     Update,\n }\n \n+struct CheckWatcherState {\n+    options: CheckOptions,\n+    workspace_root: PathBuf,\n+    watcher: WatchThread,\n+    last_update_req: Option<Instant>,\n+    shared: Arc<RwLock<CheckWatcherSharedState>>,\n+}\n+\n impl CheckWatcherState {\n     pub fn new(\n         options: CheckOptions,\n@@ -163,27 +179,28 @@ impl CheckWatcherState {\n         CheckWatcherState {\n             options,\n             workspace_root,\n-            running: false,\n             watcher,\n             last_update_req: None,\n             shared,\n         }\n     }\n \n     pub fn run(&mut self, task_send: &Sender<CheckTask>, cmd_recv: &Receiver<CheckCommand>) {\n-        self.running = true;\n-        while self.running {\n+        loop {\n             select! {\n                 recv(&cmd_recv) -> cmd => match cmd {\n                     Ok(cmd) => self.handle_command(cmd),\n                     Err(RecvError) => {\n                         // Command channel has closed, so shut down\n-                        self.running = false;\n+                        break;\n                     },\n                 },\n                 recv(self.watcher.message_recv) -> msg => match msg {\n                     Ok(msg) => self.handle_message(msg, task_send),\n-                    Err(RecvError) => {},\n+                    Err(RecvError) => {\n+                        // Task channel has closed, so shut down\n+                        break;\n+                    },\n                 }\n             };\n "}]}