{"sha": "680182d0a0853a3a76fd1cae9838feb5b0acf31c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MDE4MmQwYTA4NTNhM2E3NmZkMWNhZTk4MzhmZWI1YjBhY2YzMWM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-13T11:28:13Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-13T11:54:32Z"}, "message": "Restore cargo-fmt gating", "tree": {"sha": "69121d32a0a4e6484945fe1afa7724ea11ed223a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69121d32a0a4e6484945fe1afa7724ea11ed223a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/680182d0a0853a3a76fd1cae9838feb5b0acf31c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/680182d0a0853a3a76fd1cae9838feb5b0acf31c", "html_url": "https://github.com/rust-lang/rust/commit/680182d0a0853a3a76fd1cae9838feb5b0acf31c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/680182d0a0853a3a76fd1cae9838feb5b0acf31c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e19847af361721f0f2b0e1a70cd58559d2ca196", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e19847af361721f0f2b0e1a70cd58559d2ca196", "html_url": "https://github.com/rust-lang/rust/commit/1e19847af361721f0f2b0e1a70cd58559d2ca196"}], "stats": {"total": 31, "additions": 12, "deletions": 19}, "files": [{"sha": "2854631c6f70b24192b77b168115f4afc6fb7b63", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/680182d0a0853a3a76fd1cae9838feb5b0acf31c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680182d0a0853a3a76fd1cae9838feb5b0acf31c/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=680182d0a0853a3a76fd1cae9838feb5b0acf31c", "patch": "@@ -227,11 +227,9 @@ impl Module {\n                     Some((name, def))\n                 }\n             })\n-            .flat_map(|(name, def)|\n-                ScopeDef::all_items(def)\n-                    .into_iter()\n-                    .map(move |item| (name.clone(), item))\n-            )\n+            .flat_map(|(name, def)| {\n+                ScopeDef::all_items(def).into_iter().map(move |item| (name.clone(), item))\n+            })\n             .collect()\n     }\n \n@@ -1298,10 +1296,8 @@ impl ScopeDef {\n         let mut items = ArrayVec::new();\n \n         match (def.take_types(), def.take_values()) {\n-            (Some(m1), None) => \n-                items.push(ScopeDef::ModuleDef(m1.into())),\n-            (None, Some(m2)) =>\n-                items.push(ScopeDef::ModuleDef(m2.into())),\n+            (Some(m1), None) => items.push(ScopeDef::ModuleDef(m1.into())),\n+            (None, Some(m2)) => items.push(ScopeDef::ModuleDef(m2.into())),\n             (Some(m1), Some(m2)) => {\n                 // Some items, like unit structs and enum variants, are\n                 // returned as both a type and a value. Here we want\n@@ -1312,8 +1308,8 @@ impl ScopeDef {\n                 } else {\n                     items.push(ScopeDef::ModuleDef(m1.into()));\n                 }\n-            },\n-            (None, None) => {},\n+            }\n+            (None, None) => {}\n         };\n \n         if let Some(macro_def_id) = def.take_macros() {"}, {"sha": "788bb3eb7a343bf4a4d135d76ea0ce0886b69ad4", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/680182d0a0853a3a76fd1cae9838feb5b0acf31c/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680182d0a0853a3a76fd1cae9838feb5b0acf31c/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=680182d0a0853a3a76fd1cae9838feb5b0acf31c", "patch": "@@ -349,8 +349,8 @@ impl<'a, DB: HirDatabase> SemanticsScope<'a, DB> {\n                     for item in items {\n                         f(name.clone(), item);\n                     }\n-                    return\n-                },\n+                    return;\n+                }\n                 resolver::ScopeDef::ImplSelfType(it) => ScopeDef::ImplSelfType(it.into()),\n                 resolver::ScopeDef::AdtSelfType(it) => ScopeDef::AdtSelfType(it.into()),\n                 resolver::ScopeDef::GenericParam(id) => ScopeDef::GenericParam(TypeParam { id }),"}, {"sha": "65b3bf6e6439c6b11a30bcbc203c96c779957d4f", "filename": "crates/ra_ide/src/completion/complete_path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/680182d0a0853a3a76fd1cae9838feb5b0acf31c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680182d0a0853a3a76fd1cae9838feb5b0acf31c/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=680182d0a0853a3a76fd1cae9838feb5b0acf31c", "patch": "@@ -1005,5 +1005,4 @@ mod tests {\n         \"###\n         );\n     }\n-\n }"}, {"sha": "e1472e85d8963b36a056a7c7c001d7952e333082", "filename": "xtask/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/680182d0a0853a3a76fd1cae9838feb5b0acf31c/xtask%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/680182d0a0853a3a76fd1cae9838feb5b0acf31c/xtask%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Flib.rs?ref=680182d0a0853a3a76fd1cae9838feb5b0acf31c", "patch": "@@ -38,13 +38,11 @@ pub fn project_root() -> PathBuf {\n }\n \n pub fn run_rustfmt(mode: Mode) -> Result<()> {\n+    let _dir = pushd(project_root());\n     ensure_rustfmt()?;\n \n-    if mode == Mode::Verify {\n-        run!(\"rustup run {} -- cargo fmt -- --check\", TOOLCHAIN)?;\n-    } else {\n-        run!(\"rustup run {} -- cargo fmt\", TOOLCHAIN)?;\n-    }\n+    let check = if mode == Mode::Verify { \"--check\" } else { \"\" };\n+    run!(\"rustup run {} -- cargo fmt -- {}\", TOOLCHAIN, check)?;\n     Ok(())\n }\n "}]}