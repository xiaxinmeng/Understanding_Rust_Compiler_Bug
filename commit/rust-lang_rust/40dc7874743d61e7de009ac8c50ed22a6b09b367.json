{"sha": "40dc7874743d61e7de009ac8c50ed22a6b09b367", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwZGM3ODc0NzQzZDYxZTdkZTAwOWFjOGM1MGVkMjJhNmIwOWIzNjc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T16:07:48Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T18:12:08Z"}, "message": "Rollup merge of #56981 - RalfJung:miri-infallible-alloc, r=oli-obk\n\nmiri: allocation is infallible", "tree": {"sha": "35bf5b658776e68403eadd67b03f3127780fcca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35bf5b658776e68403eadd67b03f3127780fcca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40dc7874743d61e7de009ac8c50ed22a6b09b367", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlwefnkACgkQ/vbIBR0O\nATw7FQ/+ObQ15gIAEfHnqFn/WUWm+39ITJN2BP9Rlb+F271137hi9YgwkxEyvop8\ny1DMo5kzUyJJOI8UpCIl5rHyacVohagxoaxHe5GJyA+vWYvzH9dgpeh5xTokEeWt\npe/H43FAreLmW4kpar7p9SF72tJtJ0EB2ZhoxTKD0kXwXfLEUzflwHffgY+w8XRD\nj6CNpgCWPxFdF6qDqiBzYu8ZoViUxrlZ38OR3kpAVZ9pi/a0/hVOOvK66zBm2b8O\nDXPVRaA1HyYjyFFGRw7NUwQ3WVQeSa/jGhwAy8V/gqKwTwiU3XUR6ok/XCEUlf/c\nYpv1jU0nRBwFwt0rzONeFrAwhgb7aLk5H1scp7dcR3kep31osl1AEONp9ngFx6Jc\nRWIijXdQlsX/zdSRdxFGLU5uBVML8nwbuK7jbJoCjO0mQPL3OnEw0lYxBfLGJrK7\n+x1iWqRP2p5xRg5AqEqGgokhW3txNIvGr/US2RVEG2feUl94knmlBoL1/cL3oiJH\nIsIqJJxBnSP8qxSxiCakNL8udcMXLc1EqJUDG4raCwCGpvCaQ82OK4+8Jnra+3qO\n91YOY8SVVRm8KLzRyOhDyI3HGDiOmeeKOoIWT3J1FHkBC6txxUzdsPOG8ofN3Qzq\n9y8uqE4tfEodfSZPjBegQXgglIqCHW6n0b5ZBjQVIudFYvGZ2LQ=\n=9kdy\n-----END PGP SIGNATURE-----", "payload": "tree 35bf5b658776e68403eadd67b03f3127780fcca9\nparent 10d949aa3eab2f4f27ac50c5fbcb95ffbe8b11e5\nparent 81a45e20385009db9b964be3ed18801477f0a3dc\nauthor kennytm <kennytm@gmail.com> 1545494868 +0800\ncommitter kennytm <kennytm@gmail.com> 1545502328 +0800\n\nRollup merge of #56981 - RalfJung:miri-infallible-alloc, r=oli-obk\n\nmiri: allocation is infallible\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40dc7874743d61e7de009ac8c50ed22a6b09b367", "html_url": "https://github.com/rust-lang/rust/commit/40dc7874743d61e7de009ac8c50ed22a6b09b367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40dc7874743d61e7de009ac8c50ed22a6b09b367/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10d949aa3eab2f4f27ac50c5fbcb95ffbe8b11e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/10d949aa3eab2f4f27ac50c5fbcb95ffbe8b11e5", "html_url": "https://github.com/rust-lang/rust/commit/10d949aa3eab2f4f27ac50c5fbcb95ffbe8b11e5"}, {"sha": "81a45e20385009db9b964be3ed18801477f0a3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/81a45e20385009db9b964be3ed18801477f0a3dc", "html_url": "https://github.com/rust-lang/rust/commit/81a45e20385009db9b964be3ed18801477f0a3dc"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "4c183d59a637cfde4870d6f5b0551f651f7cf156", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=40dc7874743d61e7de009ac8c50ed22a6b09b367", "patch": "@@ -187,7 +187,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     }\n     let layout = ecx.layout_of(mir.return_ty().subst(tcx, cid.instance.substs))?;\n     assert!(!layout.is_unsized());\n-    let ret = ecx.allocate(layout, MemoryKind::Stack)?;\n+    let ret = ecx.allocate(layout, MemoryKind::Stack);\n \n     let name = ty::tls::with(|tcx| tcx.item_path_str(cid.instance.def_id()));\n     let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n@@ -490,8 +490,8 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n         _ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer,\n         _kind: MemoryKind<Self::MemoryKinds>,\n-    ) -> EvalResult<'tcx, Pointer> {\n-        Ok(ptr)\n+    ) -> Pointer {\n+        ptr\n     }\n \n     #[inline(always)]"}, {"sha": "144d79f236ce872de7585babf0fd1629aa6e8a28", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=40dc7874743d61e7de009ac8c50ed22a6b09b367", "patch": "@@ -185,7 +185,7 @@ pub trait Machine<'a, 'mir, 'tcx>: Sized {\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         ptr: Pointer,\n         kind: MemoryKind<Self::MemoryKinds>,\n-    ) -> EvalResult<'tcx, Pointer<Self::PointerTag>>;\n+    ) -> Pointer<Self::PointerTag>;\n \n     /// Executed when evaluating the `*` operator: Following a reference.\n     /// This has the chance to adjust the tag.  It should not change anything else!"}, {"sha": "f1c7b2be6fb860ee636df9c90cf4ff65c180cc50", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=40dc7874743d61e7de009ac8c50ed22a6b09b367", "patch": "@@ -131,20 +131,20 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         &mut self,\n         alloc: Allocation<M::PointerTag, M::AllocExtra>,\n         kind: MemoryKind<M::MemoryKinds>,\n-    ) -> EvalResult<'tcx, AllocId> {\n+    ) -> AllocId {\n         let id = self.tcx.alloc_map.lock().reserve();\n         self.alloc_map.insert(id, (kind, alloc));\n-        Ok(id)\n+        id\n     }\n \n     pub fn allocate(\n         &mut self,\n         size: Size,\n         align: Align,\n         kind: MemoryKind<M::MemoryKinds>,\n-    ) -> EvalResult<'tcx, Pointer> {\n+    ) -> Pointer {\n         let extra = AllocationExtra::memory_allocated(size, &self.extra);\n-        Ok(Pointer::from(self.allocate_with(Allocation::undef(size, align, extra), kind)?))\n+        Pointer::from(self.allocate_with(Allocation::undef(size, align, extra), kind))\n     }\n \n     pub fn reallocate(\n@@ -162,7 +162,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n         // For simplicities' sake, we implement reallocate as \"alloc, copy, dealloc\".\n         // This happens so rarely, the perf advantage is outweighed by the maintenance cost.\n-        let new_ptr = self.allocate(new_size, new_align, kind)?;\n+        let new_ptr = self.allocate(new_size, new_align, kind);\n         self.copy(\n             ptr.into(),\n             old_align,"}, {"sha": "7143d66ad9246ef190a233d6de9cd24815f620af", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=40dc7874743d61e7de009ac8c50ed22a6b09b367", "patch": "@@ -382,7 +382,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             _ => {\n                 trace!(\"Forcing allocation for local of type {:?}\", layout.ty);\n                 Operand::Indirect(\n-                    *self.allocate(layout, MemoryKind::Stack)?\n+                    *self.allocate(layout, MemoryKind::Stack)\n                 )\n             }\n         })"}, {"sha": "e316b54f8ca7da77424243e9f7e51e20cf04b3ae", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=40dc7874743d61e7de009ac8c50ed22a6b09b367", "patch": "@@ -911,7 +911,7 @@ where\n                         // that might e.g., be an inner field of a struct with `Scalar` layout,\n                         // that has different alignment than the outer field.\n                         let local_layout = self.layout_of_local(&self.stack[frame], local)?;\n-                        let ptr = self.allocate(local_layout, MemoryKind::Stack)?;\n+                        let ptr = self.allocate(local_layout, MemoryKind::Stack);\n                         // We don't have to validate as we can assume the local\n                         // was already valid for its type.\n                         self.write_immediate_to_mplace_no_validate(value, ptr)?;\n@@ -933,15 +933,15 @@ where\n         &mut self,\n         layout: TyLayout<'tcx>,\n         kind: MemoryKind<M::MemoryKinds>,\n-    ) -> EvalResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n+    ) -> MPlaceTy<'tcx, M::PointerTag> {\n         if layout.is_unsized() {\n             assert!(self.tcx.features().unsized_locals, \"cannot alloc memory for unsized type\");\n             // FIXME: What should we do here? We should definitely also tag!\n-            Ok(MPlaceTy::dangling(layout, self))\n+            MPlaceTy::dangling(layout, self)\n         } else {\n-            let ptr = self.memory.allocate(layout.size, layout.align.abi, kind)?;\n-            let ptr = M::tag_new_allocation(self, ptr, kind)?;\n-            Ok(MPlaceTy::from_aligned_ptr(ptr, layout))\n+            let ptr = self.memory.allocate(layout.size, layout.align.abi, kind);\n+            let ptr = M::tag_new_allocation(self, ptr, kind);\n+            MPlaceTy::from_aligned_ptr(ptr, layout)\n         }\n     }\n "}, {"sha": "22936a9b0a0cf795769068998c09ecb6d7968c68", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=40dc7874743d61e7de009ac8c50ed22a6b09b367", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             ptr_size * (3 + methods.len() as u64),\n             ptr_align,\n             MemoryKind::Vtable,\n-        )?.with_default_tag();\n+        ).with_default_tag();\n         let tcx = &*self.tcx;\n \n         let drop = ::monomorphize::resolve_drop_in_place(*tcx, ty);"}, {"sha": "cfa899eb5a62a11410e9d34b831bcca263e7eaa2", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40dc7874743d61e7de009ac8c50ed22a6b09b367/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=40dc7874743d61e7de009ac8c50ed22a6b09b367", "patch": "@@ -346,7 +346,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n             Rvalue::Cast(kind, ref operand, _) => {\n                 let (op, span) = self.eval_operand(operand, source_info)?;\n                 self.use_ecx(source_info, |this| {\n-                    let dest = this.ecx.allocate(place_layout, MemoryKind::Stack)?;\n+                    let dest = this.ecx.allocate(place_layout, MemoryKind::Stack);\n                     this.ecx.cast(op, kind, dest.into())?;\n                     Ok((dest.into(), span))\n                 })"}]}