{"sha": "726b4dd8bdd063e1c623355244d3be907fc31e90", "node_id": "C_kwDOAAsO6NoAKDcyNmI0ZGQ4YmRkMDYzZTFjNjIzMzU1MjQ0ZDNiZTkwN2ZjMzFlOTA", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-05T15:06:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-05T15:06:37Z"}, "message": "Merge #10704\n\n10704: internal: Short-circuit `descend_into_macros_single` r=Veykril a=Veykril\n\nThere is no need to descend everything if all we are interested in is the first mapping.\r\nThis bring `descend_into_macros` timing in highlighting in `rust-analyzer/src/config.rs` from `154ms - descend_into_macros (2190 calls)` to `24ms - descend_into_macros (2190 calls)` since we use the single variant there(will regress once we want to highlight multiple namespaces again though).\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "4164d83d19cafbcc0f93415764231853b664b269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4164d83d19cafbcc0f93415764231853b664b269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/726b4dd8bdd063e1c623355244d3be907fc31e90", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhhUh9CRBK7hj4Ov3rIwAAkHwIAFrSqmysOt2KXevFzQ7wRi1a\nr/OHsTohHD5q3sUsjsKuG+JNr/ybik1ZwBmlfRrniAxs1OPniw87WCEWKpUGHJiC\nDL28tRHOSeSUwquGo0jkrkaPODhSLxJEfGBMCu+hA5OLKQk/MQbjG3Tq9w9zJNiY\n6t4U1MD2gvTLTICi4bJLlPsqt94WxJjuvv702ltS0xHzufgqprrE3ByT4nUpvSla\ndxINtsCfgrOwRVRRbM5Ew6vxD3ZUxdivsG9+V1/vInI0nbVyBC8tqNzCBVRpcRSq\nISaAcMjHzQ+mPhClaaiK5LmqL7+hcFWHWtLxQE7G+1IoMqX/KBvs7TFzHf5OsDQ=\n=Nsy3\n-----END PGP SIGNATURE-----\n", "payload": "tree 4164d83d19cafbcc0f93415764231853b664b269\nparent 274d9f90aed4320f223fe98916fc0cd71ad6f92f\nparent 4d768bede000a01f9b8acfc8df80df3f6bb3f853\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1636124797 +0000\ncommitter GitHub <noreply@github.com> 1636124797 +0000\n\nMerge #10704\n\n10704: internal: Short-circuit `descend_into_macros_single` r=Veykril a=Veykril\n\nThere is no need to descend everything if all we are interested in is the first mapping.\r\nThis bring `descend_into_macros` timing in highlighting in `rust-analyzer/src/config.rs` from `154ms - descend_into_macros (2190 calls)` to `24ms - descend_into_macros (2190 calls)` since we use the single variant there(will regress once we want to highlight multiple namespaces again though).\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/726b4dd8bdd063e1c623355244d3be907fc31e90", "html_url": "https://github.com/rust-lang/rust/commit/726b4dd8bdd063e1c623355244d3be907fc31e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/726b4dd8bdd063e1c623355244d3be907fc31e90/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "274d9f90aed4320f223fe98916fc0cd71ad6f92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/274d9f90aed4320f223fe98916fc0cd71ad6f92f", "html_url": "https://github.com/rust-lang/rust/commit/274d9f90aed4320f223fe98916fc0cd71ad6f92f"}, {"sha": "4d768bede000a01f9b8acfc8df80df3f6bb3f853", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d768bede000a01f9b8acfc8df80df3f6bb3f853", "html_url": "https://github.com/rust-lang/rust/commit/4d768bede000a01f9b8acfc8df80df3f6bb3f853"}], "stats": {"total": 136, "additions": 84, "deletions": 52}, "files": [{"sha": "0f63de9e725c2533395b93c095bbe271aa7cf97d", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 79, "deletions": 49, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/726b4dd8bdd063e1c623355244d3be907fc31e90/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726b4dd8bdd063e1c623355244d3be907fc31e90/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=726b4dd8bdd063e1c623355244d3be907fc31e90", "patch": "@@ -18,7 +18,7 @@ use smallvec::{smallvec, SmallVec};\n use syntax::{\n     algo::skip_trivia_token,\n     ast::{self, HasAttrs, HasGenericParams, HasLoopBody},\n-    match_ast, AstNode, Direction, SyntaxNode, SyntaxNodePtr, SyntaxToken, TextRange, TextSize,\n+    match_ast, AstNode, Direction, SyntaxNode, SyntaxNodePtr, SyntaxToken, TextSize,\n };\n \n use crate::{\n@@ -178,10 +178,12 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.speculative_expand_attr(actual_macro_call, speculative_args, token_to_map)\n     }\n \n+    /// Descend the token into macrocalls to its first mapped counterpart.\n     pub fn descend_into_macros_single(&self, token: SyntaxToken) -> SyntaxToken {\n-        self.imp.descend_into_macros(token).pop().unwrap()\n+        self.imp.descend_into_macros_single(token)\n     }\n \n+    /// Descend the token into macrocalls to all its mapped counterparts.\n     pub fn descend_into_macros(&self, token: SyntaxToken) -> SmallVec<[SyntaxToken; 1]> {\n         self.imp.descend_into_macros(token)\n     }\n@@ -509,72 +511,102 @@ impl<'db> SemanticsImpl<'db> {\n         };\n \n         if first == last {\n-            self.descend_into_macros_impl(first, |InFile { value, .. }| {\n-                if let Some(node) = value.ancestors().find_map(N::cast) {\n-                    res.push(node)\n-                }\n-            });\n+            self.descend_into_macros_impl(\n+                first,\n+                |InFile { value, .. }| {\n+                    if let Some(node) = value.ancestors().find_map(N::cast) {\n+                        res.push(node)\n+                    }\n+                },\n+                false,\n+            );\n         } else {\n             // Descend first and last token, then zip them to look for the node they belong to\n             let mut scratch: SmallVec<[_; 1]> = smallvec![];\n-            self.descend_into_macros_impl(first, |token| {\n-                scratch.push(token);\n-            });\n+            self.descend_into_macros_impl(\n+                first,\n+                |token| {\n+                    scratch.push(token);\n+                },\n+                false,\n+            );\n \n             let mut scratch = scratch.into_iter();\n-            self.descend_into_macros_impl(last, |InFile { value: last, file_id: last_fid }| {\n-                if let Some(InFile { value: first, file_id: first_fid }) = scratch.next() {\n-                    if first_fid == last_fid {\n-                        if let Some(p) = first.parent() {\n-                            let range = first.text_range().cover(last.text_range());\n-                            let node = find_root(&p)\n-                                .covering_element(range)\n-                                .ancestors()\n-                                .take_while(|it| it.text_range() == range)\n-                                .find_map(N::cast);\n-                            if let Some(node) = node {\n-                                res.push(node);\n+            self.descend_into_macros_impl(\n+                last,\n+                |InFile { value: last, file_id: last_fid }| {\n+                    if let Some(InFile { value: first, file_id: first_fid }) = scratch.next() {\n+                        if first_fid == last_fid {\n+                            if let Some(p) = first.parent() {\n+                                let range = first.text_range().cover(last.text_range());\n+                                let node = find_root(&p)\n+                                    .covering_element(range)\n+                                    .ancestors()\n+                                    .take_while(|it| it.text_range() == range)\n+                                    .find_map(N::cast);\n+                                if let Some(node) = node {\n+                                    res.push(node);\n+                                }\n                             }\n                         }\n                     }\n-                }\n-            });\n+                },\n+                false,\n+            );\n         }\n         res\n     }\n \n     fn descend_into_macros(&self, token: SyntaxToken) -> SmallVec<[SyntaxToken; 1]> {\n         let mut res = smallvec![];\n-        self.descend_into_macros_impl(token, |InFile { value, .. }| res.push(value));\n+        self.descend_into_macros_impl(token, |InFile { value, .. }| res.push(value), false);\n         res\n     }\n \n-    fn descend_into_macros_impl(&self, token: SyntaxToken, mut f: impl FnMut(InFile<SyntaxToken>)) {\n+    fn descend_into_macros_single(&self, token: SyntaxToken) -> SyntaxToken {\n+        let mut res = token.clone();\n+        self.descend_into_macros_impl(token, |InFile { value, .. }| res = value, true);\n+        res\n+    }\n+\n+    fn descend_into_macros_impl(\n+        &self,\n+        token: SyntaxToken,\n+        mut f: impl FnMut(InFile<SyntaxToken>),\n+        single: bool,\n+    ) {\n         let _p = profile::span(\"descend_into_macros\");\n         let parent = match token.parent() {\n             Some(it) => it,\n             None => return,\n         };\n         let sa = self.analyze(&parent);\n-        let mut stack: SmallVec<[_; 1]> = smallvec![InFile::new(sa.file_id, token)];\n+        let mut stack: SmallVec<[_; 4]> = smallvec![InFile::new(sa.file_id, token)];\n         let mut cache = self.expansion_info_cache.borrow_mut();\n         let mut mcache = self.macro_call_cache.borrow_mut();\n \n         let mut process_expansion_for_token =\n-            |stack: &mut SmallVec<_>, file_id, item, token: InFile<&_>| {\n-                let mapped_tokens = cache\n-                    .entry(file_id)\n-                    .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n-                    .as_ref()?\n-                    .map_token_down(self.db.upcast(), item, token)?;\n+            |stack: &mut SmallVec<_>, macro_file, item, token: InFile<&_>| {\n+                let expansion_info = cache\n+                    .entry(macro_file)\n+                    .or_insert_with(|| macro_file.expansion_info(self.db.upcast()))\n+                    .as_ref()?;\n+\n+                {\n+                    let InFile { file_id, value } = expansion_info.expanded();\n+                    self.cache(value, file_id);\n+                }\n+\n+                let mut mapped_tokens =\n+                    expansion_info.map_token_down(self.db.upcast(), item, token)?;\n \n                 let len = stack.len();\n                 // requeue the tokens we got from mapping our current token down\n-                stack.extend(mapped_tokens.inspect(|token| {\n-                    if let Some(parent) = token.value.parent() {\n-                        self.cache(find_root(&parent), token.file_id);\n-                    }\n-                }));\n+                if single {\n+                    stack.extend(mapped_tokens.next());\n+                } else {\n+                    stack.extend(mapped_tokens);\n+                }\n                 // if the length changed we have found a mapping for the token\n                 (stack.len() != len).then(|| ())\n             };\n@@ -606,17 +638,15 @@ impl<'db> SemanticsImpl<'db> {\n                 }\n \n                 // or are we inside a function-like macro call\n-                if let Some(macro_call) = token.value.ancestors().find_map(ast::MacroCall::cast) {\n-                    let tt = macro_call.token_tree()?;\n-                    let l_delim = match tt.left_delimiter_token() {\n-                        Some(it) => it.text_range().end(),\n-                        None => tt.syntax().text_range().start(),\n-                    };\n-                    let r_delim = match tt.right_delimiter_token() {\n-                        Some(it) => it.text_range().start(),\n-                        None => tt.syntax().text_range().end(),\n-                    };\n-                    if !TextRange::new(l_delim, r_delim).contains_range(token.value.text_range()) {\n+                if let Some(tt) =\n+                    // FIXME replace map.while_some with take_while once stable\n+                    token.value.ancestors().map(ast::TokenTree::cast).while_some().last()\n+                {\n+                    let macro_call = tt.syntax().parent().and_then(ast::MacroCall::cast)?;\n+                    if tt.left_delimiter_token().map_or(false, |it| it == token.value) {\n+                        return None;\n+                    }\n+                    if tt.right_delimiter_token().map_or(false, |it| it == token.value) {\n                         return None;\n                     }\n "}, {"sha": "a0a79b2b4c16c222c0728371ebe1a358ea791079", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/726b4dd8bdd063e1c623355244d3be907fc31e90/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/726b4dd8bdd063e1c623355244d3be907fc31e90/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=726b4dd8bdd063e1c623355244d3be907fc31e90", "patch": "@@ -18,7 +18,7 @@ pub mod eager;\n use base_db::ProcMacroKind;\n use either::Either;\n \n-pub use mbe::{ExpandError, ExpandResult};\n+pub use mbe::{ExpandError, ExpandResult, Origin};\n \n use std::{hash::Hash, iter, sync::Arc};\n \n@@ -380,9 +380,11 @@ pub struct ExpansionInfo {\n     exp_map: Arc<mbe::TokenMap>,\n }\n \n-pub use mbe::Origin;\n-\n impl ExpansionInfo {\n+    pub fn expanded(&self) -> InFile<SyntaxNode> {\n+        self.expanded.clone()\n+    }\n+\n     pub fn call_node(&self) -> Option<InFile<SyntaxNode>> {\n         Some(self.arg.with_value(self.arg.value.parent()?))\n     }"}]}