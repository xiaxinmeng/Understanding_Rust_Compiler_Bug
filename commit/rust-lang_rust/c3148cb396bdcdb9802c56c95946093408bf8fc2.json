{"sha": "c3148cb396bdcdb9802c56c95946093408bf8fc2", "node_id": "C_kwDOAAsO6NoAKGMzMTQ4Y2IzOTZiZGNkYjk4MDJjNTZjOTU5NDYwOTM0MDhiZjhmYzI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-13T18:12:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-13T18:12:39Z"}, "message": "Slightly cleanup HasFormatSpecifier::lex_format_specifier", "tree": {"sha": "ef0285b99363fb875288e1368266483e059d5413", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef0285b99363fb875288e1368266483e059d5413"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3148cb396bdcdb9802c56c95946093408bf8fc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3148cb396bdcdb9802c56c95946093408bf8fc2", "html_url": "https://github.com/rust-lang/rust/commit/c3148cb396bdcdb9802c56c95946093408bf8fc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3148cb396bdcdb9802c56c95946093408bf8fc2/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3393c9a579040f3d41cf4b9ddeeacb275042da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3393c9a579040f3d41cf4b9ddeeacb275042da7", "html_url": "https://github.com/rust-lang/rust/commit/a3393c9a579040f3d41cf4b9ddeeacb275042da7"}], "stats": {"total": 359, "additions": 146, "deletions": 213}, "files": [{"sha": "3b0a1c5ddcdd146b29fd0c455e5f4e8de35a521a", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 146, "deletions": 213, "changes": 359, "blob_url": "https://github.com/rust-lang/rust/blob/c3148cb396bdcdb9802c56c95946093408bf8fc2/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3148cb396bdcdb9802c56c95946093408bf8fc2/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=c3148cb396bdcdb9802c56c95946093408bf8fc2", "patch": "@@ -288,124 +288,142 @@ pub trait HasFormatSpecifier: AstToken {\n             Some(char_ranges) => char_ranges,\n             None => return,\n         };\n-        let mut chars = char_ranges.iter().peekable();\n+        let mut chars = char_ranges\n+            .iter()\n+            .filter_map(|(range, res)| Some((*range, *res.as_ref().ok()?)))\n+            .peekable();\n \n         while let Some((range, first_char)) = chars.next() {\n-            match first_char {\n-                Ok('{') => {\n-                    // Format specifier, see syntax at https://doc.rust-lang.org/std/fmt/index.html#syntax\n-                    if let Some((_, Ok('{'))) = chars.peek() {\n-                        // Escaped format specifier, `{{`\n-                        chars.next();\n-                        continue;\n-                    }\n+            if let '{' = first_char {\n+                // Format specifier, see syntax at https://doc.rust-lang.org/std/fmt/index.html#syntax\n+                if let Some((_, '{')) = chars.peek() {\n+                    // Escaped format specifier, `{{`\n+                    chars.next();\n+                    continue;\n+                }\n \n-                    callback(*range, FormatSpecifier::Open);\n+                callback(range, FormatSpecifier::Open);\n \n-                    // check for integer/identifier\n-                    match chars\n-                        .peek()\n-                        .and_then(|next| next.1.as_ref().ok())\n-                        .copied()\n-                        .unwrap_or_default()\n-                    {\n-                        '0'..='9' => {\n-                            // integer\n-                            read_integer(&mut chars, &mut callback);\n+                // check for integer/identifier\n+                let (_, int_char) = chars.peek().copied().unwrap_or_default();\n+                match int_char {\n+                    // integer\n+                    '0'..='9' => read_integer(&mut chars, &mut callback),\n+                    // identifier\n+                    c if c == '_' || c.is_alphabetic() => {\n+                        read_identifier(&mut chars, &mut callback)\n+                    }\n+                    _ => {}\n+                }\n+\n+                if let Some((_, ':')) = chars.peek() {\n+                    skip_char_and_emit(&mut chars, FormatSpecifier::Colon, &mut callback);\n+\n+                    // check for fill/align\n+                    let mut cloned = chars.clone().take(2);\n+                    let (_, first) = cloned.next().unwrap_or_default();\n+                    let (_, second) = cloned.next().unwrap_or_default();\n+                    match second {\n+                        '<' | '^' | '>' => {\n+                            // alignment specifier, first char specifies fillment\n+                            skip_char_and_emit(&mut chars, FormatSpecifier::Fill, &mut callback);\n+                            skip_char_and_emit(&mut chars, FormatSpecifier::Align, &mut callback);\n                         }\n-                        c if c == '_' || c.is_alphabetic() => {\n-                            // identifier\n-                            read_identifier(&mut chars, &mut callback);\n+                        _ => {\n+                            if let '<' | '^' | '>' = first {\n+                                skip_char_and_emit(\n+                                    &mut chars,\n+                                    FormatSpecifier::Align,\n+                                    &mut callback,\n+                                );\n+                            }\n+                        }\n+                    }\n+\n+                    // check for sign\n+                    match chars.peek().copied().unwrap_or_default().1 {\n+                        '+' | '-' => {\n+                            skip_char_and_emit(&mut chars, FormatSpecifier::Sign, &mut callback);\n                         }\n                         _ => {}\n                     }\n \n-                    if let Some((_, Ok(':'))) = chars.peek() {\n-                        skip_char_and_emit(&mut chars, FormatSpecifier::Colon, &mut callback);\n-\n-                        // check for fill/align\n-                        let mut cloned = chars.clone().take(2);\n-                        let first = cloned\n-                            .next()\n-                            .and_then(|next| next.1.as_ref().ok())\n-                            .copied()\n-                            .unwrap_or_default();\n-                        let second = cloned\n-                            .next()\n-                            .and_then(|next| next.1.as_ref().ok())\n-                            .copied()\n-                            .unwrap_or_default();\n-                        match second {\n-                            '<' | '^' | '>' => {\n-                                // alignment specifier, first char specifies fillment\n+                    // check for `#`\n+                    if let Some((_, '#')) = chars.peek() {\n+                        skip_char_and_emit(&mut chars, FormatSpecifier::NumberSign, &mut callback);\n+                    }\n+\n+                    // check for `0`\n+                    let mut cloned = chars.clone().take(2);\n+                    let first = cloned.next().map(|next| next.1);\n+                    let second = cloned.next().map(|next| next.1);\n+\n+                    if first == Some('0') && second != Some('$') {\n+                        skip_char_and_emit(&mut chars, FormatSpecifier::Zero, &mut callback);\n+                    }\n+\n+                    // width\n+                    match chars.peek().copied().unwrap_or_default().1 {\n+                        '0'..='9' => {\n+                            read_integer(&mut chars, &mut callback);\n+                            if let Some((_, '$')) = chars.peek() {\n                                 skip_char_and_emit(\n                                     &mut chars,\n-                                    FormatSpecifier::Fill,\n+                                    FormatSpecifier::DollarSign,\n                                     &mut callback,\n                                 );\n+                            }\n+                        }\n+                        c if c == '_' || c.is_alphabetic() => {\n+                            read_identifier(&mut chars, &mut callback);\n+\n+                            if chars.peek().map(|&(_, c)| c) == Some('?') {\n                                 skip_char_and_emit(\n                                     &mut chars,\n-                                    FormatSpecifier::Align,\n+                                    FormatSpecifier::QuestionMark,\n                                     &mut callback,\n                                 );\n                             }\n-                            _ => match first {\n-                                '<' | '^' | '>' => {\n+\n+                            // can be either width (indicated by dollar sign, or type in which case\n+                            // the next sign has to be `}`)\n+                            let next = chars.peek().map(|&(_, c)| c);\n+\n+                            match next {\n+                                Some('$') => skip_char_and_emit(\n+                                    &mut chars,\n+                                    FormatSpecifier::DollarSign,\n+                                    &mut callback,\n+                                ),\n+                                Some('}') => {\n                                     skip_char_and_emit(\n                                         &mut chars,\n-                                        FormatSpecifier::Align,\n+                                        FormatSpecifier::Close,\n                                         &mut callback,\n                                     );\n+                                    continue;\n                                 }\n-                                _ => {}\n-                            },\n+                                _ => continue,\n+                            };\n                         }\n+                        _ => {}\n+                    }\n \n-                        // check for sign\n-                        match chars\n-                            .peek()\n-                            .and_then(|next| next.1.as_ref().ok())\n-                            .copied()\n-                            .unwrap_or_default()\n-                        {\n-                            '+' | '-' => {\n+                    // precision\n+                    if let Some((_, '.')) = chars.peek() {\n+                        skip_char_and_emit(&mut chars, FormatSpecifier::Dot, &mut callback);\n+\n+                        match chars.peek().copied().unwrap_or_default().1 {\n+                            '*' => {\n                                 skip_char_and_emit(\n                                     &mut chars,\n-                                    FormatSpecifier::Sign,\n+                                    FormatSpecifier::Asterisk,\n                                     &mut callback,\n                                 );\n                             }\n-                            _ => {}\n-                        }\n-\n-                        // check for `#`\n-                        if let Some((_, Ok('#'))) = chars.peek() {\n-                            skip_char_and_emit(\n-                                &mut chars,\n-                                FormatSpecifier::NumberSign,\n-                                &mut callback,\n-                            );\n-                        }\n-\n-                        // check for `0`\n-                        let mut cloned = chars.clone().take(2);\n-                        let first = cloned.next().and_then(|next| next.1.as_ref().ok()).copied();\n-                        let second = cloned.next().and_then(|next| next.1.as_ref().ok()).copied();\n-\n-                        if first == Some('0') && second != Some('$') {\n-                            skip_char_and_emit(&mut chars, FormatSpecifier::Zero, &mut callback);\n-                        }\n-\n-                        // width\n-                        match chars\n-                            .peek()\n-                            .and_then(|next| next.1.as_ref().ok())\n-                            .copied()\n-                            .unwrap_or_default()\n-                        {\n                             '0'..='9' => {\n                                 read_integer(&mut chars, &mut callback);\n-                                if let Some((_, Ok('$'))) = chars.peek() {\n+                                if let Some((_, '$')) = chars.peek() {\n                                     skip_char_and_emit(\n                                         &mut chars,\n                                         FormatSpecifier::DollarSign,\n@@ -415,178 +433,93 @@ pub trait HasFormatSpecifier: AstToken {\n                             }\n                             c if c == '_' || c.is_alphabetic() => {\n                                 read_identifier(&mut chars, &mut callback);\n-\n-                                if chars.peek().and_then(|next| next.1.as_ref().ok()).copied()\n-                                    == Some('?')\n-                                {\n-                                    skip_char_and_emit(\n-                                        &mut chars,\n-                                        FormatSpecifier::QuestionMark,\n-                                        &mut callback,\n-                                    );\n+                                if chars.peek().map(|&(_, c)| c) != Some('$') {\n+                                    continue;\n                                 }\n-\n-                                // can be either width (indicated by dollar sign, or type in which case\n-                                // the next sign has to be `}`)\n-                                let next =\n-                                    chars.peek().and_then(|next| next.1.as_ref().ok()).copied();\n-\n-                                match next {\n-                                    Some('$') => skip_char_and_emit(\n-                                        &mut chars,\n-                                        FormatSpecifier::DollarSign,\n-                                        &mut callback,\n-                                    ),\n-                                    Some('}') => {\n-                                        skip_char_and_emit(\n-                                            &mut chars,\n-                                            FormatSpecifier::Close,\n-                                            &mut callback,\n-                                        );\n-                                        continue;\n-                                    }\n-                                    _ => continue,\n-                                };\n+                                skip_char_and_emit(\n+                                    &mut chars,\n+                                    FormatSpecifier::DollarSign,\n+                                    &mut callback,\n+                                );\n+                            }\n+                            _ => {\n+                                continue;\n                             }\n-                            _ => {}\n                         }\n+                    }\n \n-                        // precision\n-                        if let Some((_, Ok('.'))) = chars.peek() {\n-                            skip_char_and_emit(&mut chars, FormatSpecifier::Dot, &mut callback);\n-\n-                            match chars\n-                                .peek()\n-                                .and_then(|next| next.1.as_ref().ok())\n-                                .copied()\n-                                .unwrap_or_default()\n-                            {\n-                                '*' => {\n-                                    skip_char_and_emit(\n-                                        &mut chars,\n-                                        FormatSpecifier::Asterisk,\n-                                        &mut callback,\n-                                    );\n-                                }\n-                                '0'..='9' => {\n-                                    read_integer(&mut chars, &mut callback);\n-                                    if let Some((_, Ok('$'))) = chars.peek() {\n-                                        skip_char_and_emit(\n-                                            &mut chars,\n-                                            FormatSpecifier::DollarSign,\n-                                            &mut callback,\n-                                        );\n-                                    }\n-                                }\n-                                c if c == '_' || c.is_alphabetic() => {\n-                                    read_identifier(&mut chars, &mut callback);\n-                                    if chars.peek().and_then(|next| next.1.as_ref().ok()).copied()\n-                                        != Some('$')\n-                                    {\n-                                        continue;\n-                                    }\n-                                    skip_char_and_emit(\n-                                        &mut chars,\n-                                        FormatSpecifier::DollarSign,\n-                                        &mut callback,\n-                                    );\n-                                }\n-                                _ => {\n-                                    continue;\n-                                }\n-                            }\n+                    // type\n+                    match chars.peek().copied().unwrap_or_default().1 {\n+                        '?' => {\n+                            skip_char_and_emit(\n+                                &mut chars,\n+                                FormatSpecifier::QuestionMark,\n+                                &mut callback,\n+                            );\n                         }\n+                        c if c == '_' || c.is_alphabetic() => {\n+                            read_identifier(&mut chars, &mut callback);\n \n-                        // type\n-                        match chars\n-                            .peek()\n-                            .and_then(|next| next.1.as_ref().ok())\n-                            .copied()\n-                            .unwrap_or_default()\n-                        {\n-                            '?' => {\n+                            if chars.peek().map(|&(_, c)| c) == Some('?') {\n                                 skip_char_and_emit(\n                                     &mut chars,\n                                     FormatSpecifier::QuestionMark,\n                                     &mut callback,\n                                 );\n                             }\n-                            c if c == '_' || c.is_alphabetic() => {\n-                                read_identifier(&mut chars, &mut callback);\n-\n-                                if chars.peek().and_then(|next| next.1.as_ref().ok()).copied()\n-                                    == Some('?')\n-                                {\n-                                    skip_char_and_emit(\n-                                        &mut chars,\n-                                        FormatSpecifier::QuestionMark,\n-                                        &mut callback,\n-                                    );\n-                                }\n-                            }\n-                            _ => {}\n                         }\n-                    }\n-\n-                    match chars.peek() {\n-                        Some((_, Ok('}'))) => {\n-                            skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n-                        }\n-                        Some((_, _)) | None => continue,\n+                        _ => {}\n                     }\n                 }\n-                _ => {\n-                    while let Some((_, Ok(next_char))) = chars.peek() {\n-                        if next_char == &'{' {\n-                            break;\n-                        }\n-                        chars.next();\n-                    }\n+\n+                if let Some((_, '}')) = chars.peek() {\n+                    skip_char_and_emit(&mut chars, FormatSpecifier::Close, &mut callback);\n                 }\n-            };\n+                continue;\n+            }\n         }\n \n-        fn skip_char_and_emit<'a, I, F>(\n+        fn skip_char_and_emit<I, F>(\n             chars: &mut std::iter::Peekable<I>,\n             emit: FormatSpecifier,\n             callback: &mut F,\n         ) where\n-            I: Iterator<Item = &'a (TextRange, Result<char, rustc_lexer::unescape::EscapeError>)>,\n+            I: Iterator<Item = (TextRange, char)>,\n             F: FnMut(TextRange, FormatSpecifier),\n         {\n             let (range, _) = chars.next().unwrap();\n-            callback(*range, emit);\n+            callback(range, emit);\n         }\n \n-        fn read_integer<'a, I, F>(chars: &mut std::iter::Peekable<I>, callback: &mut F)\n+        fn read_integer<I, F>(chars: &mut std::iter::Peekable<I>, callback: &mut F)\n         where\n-            I: Iterator<Item = &'a (TextRange, Result<char, rustc_lexer::unescape::EscapeError>)>,\n+            I: Iterator<Item = (TextRange, char)>,\n             F: FnMut(TextRange, FormatSpecifier),\n         {\n             let (mut range, c) = chars.next().unwrap();\n-            assert!(c.as_ref().unwrap().is_ascii_digit());\n-            while let Some((r, Ok(next_char))) = chars.peek() {\n+            assert!(c.is_ascii_digit());\n+            while let Some(&(r, next_char)) = chars.peek() {\n                 if next_char.is_ascii_digit() {\n                     chars.next();\n-                    range = range.cover(*r);\n+                    range = range.cover(r);\n                 } else {\n                     break;\n                 }\n             }\n             callback(range, FormatSpecifier::Integer);\n         }\n \n-        fn read_identifier<'a, I, F>(chars: &mut std::iter::Peekable<I>, callback: &mut F)\n+        fn read_identifier<I, F>(chars: &mut std::iter::Peekable<I>, callback: &mut F)\n         where\n-            I: Iterator<Item = &'a (TextRange, Result<char, rustc_lexer::unescape::EscapeError>)>,\n+            I: Iterator<Item = (TextRange, char)>,\n             F: FnMut(TextRange, FormatSpecifier),\n         {\n             let (mut range, c) = chars.next().unwrap();\n-            assert!(c.as_ref().unwrap().is_alphabetic() || *c.as_ref().unwrap() == '_');\n-            while let Some((r, Ok(next_char))) = chars.peek() {\n-                if *next_char == '_' || next_char.is_ascii_digit() || next_char.is_alphabetic() {\n+            assert!(c.is_alphabetic() || c == '_');\n+            while let Some(&(r, next_char)) = chars.peek() {\n+                if next_char == '_' || next_char.is_ascii_digit() || next_char.is_alphabetic() {\n                     chars.next();\n-                    range = range.cover(*r);\n+                    range = range.cover(r);\n                 } else {\n                     break;\n                 }"}]}