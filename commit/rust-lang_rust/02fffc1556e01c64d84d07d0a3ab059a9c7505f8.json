{"sha": "02fffc1556e01c64d84d07d0a3ab059a9c7505f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZmZmYzE1NTZlMDFjNjRkODRkMDdkMGEzYWIwNTlhOWM3NTA1Zjg=", "commit": {"author": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-01-11T07:57:38Z"}, "committer": {"name": "Ben Lewis", "email": "benlewisj@gmail.com", "date": "2020-01-13T18:47:45Z"}, "message": "Code review changes and fix rustdoc test.", "tree": {"sha": "06b7e43f4b24b98b9a0c69e257b8603ede63bd56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06b7e43f4b24b98b9a0c69e257b8603ede63bd56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02fffc1556e01c64d84d07d0a3ab059a9c7505f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02fffc1556e01c64d84d07d0a3ab059a9c7505f8", "html_url": "https://github.com/rust-lang/rust/commit/02fffc1556e01c64d84d07d0a3ab059a9c7505f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6c4025fac3c3a60581af72998230d46aa6f5ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c4025fac3c3a60581af72998230d46aa6f5ade", "html_url": "https://github.com/rust-lang/rust/commit/a6c4025fac3c3a60581af72998230d46aa6f5ade"}], "stats": {"total": 60, "additions": 16, "deletions": 44}, "files": [{"sha": "47f067590b9d5e0803928734380999f45327a7a9", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=02fffc1556e01c64d84d07d0a3ab059a9c7505f8", "patch": "@@ -148,18 +148,18 @@ pub struct GlobalId<'tcx> {\n     pub promoted: Option<mir::Promoted>,\n }\n \n-/// Input argument for `tcx.lit_to_const`\n+/// Input argument for `tcx.lit_to_const`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, HashStable)]\n pub struct LitToConstInput<'tcx> {\n-    /// The absolute value of the resultant constant\n+    /// The absolute value of the resultant constant.\n     pub lit: &'tcx LitKind,\n-    /// The type of the constant\n+    /// The type of the constant.\n     pub ty: Ty<'tcx>,\n-    /// If the constant is negative\n+    /// If the constant is negative.\n     pub neg: bool,\n }\n \n-/// Error type for `tcx.lit_to_const`\n+/// Error type for `tcx.lit_to_const`.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, HashStable)]\n pub enum LitToConstError {\n     UnparseableFloat,"}, {"sha": "205e25f7f8f0c6d19c1303dac6986cd2c6f46134", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=02fffc1556e01c64d84d07d0a3ab059a9c7505f8", "patch": "@@ -8,9 +8,8 @@ pub(crate) use self::check_match::check_match;\n \n use crate::hair::util::UserAnnotatedTyHelpers;\n \n-use rustc::mir::interpret::{\n-    get_slice_bytes, sign_extend, ConstValue, ErrorHandled, LitToConstError, LitToConstInput,\n-};\n+use rustc::mir::interpret::{get_slice_bytes, sign_extend, ConstValue, ErrorHandled};\n+use rustc::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc::mir::UserTypeProjection;\n use rustc::mir::{BorrowKind, Field, Mutability};\n use rustc::ty::layout::VariantIdx;"}, {"sha": "a3be264ddc12837e222c0287fe6c0c9698e5d147", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=02fffc1556e01c64d84d07d0a3ab059a9c7505f8", "patch": "@@ -1,4 +1,4 @@\n-// ignore-tidy-filelength FIXME(#67418) Split up this file\n+// ignore-tidy-filelength FIXME(#67418) Split up this file.\n //! Conversion from AST representation of types to the `ty.rs` representation.\n //! The main routine here is `ast_ty_to_ty()`; each use is parameterized by an\n //! instance of `AstConv`.\n@@ -2716,7 +2716,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         if let Some(lit_input) = lit_input {\n             // If an error occurred, ignore that it's a literal and leave reporting the error up to\n-            // mir\n+            // mir.\n             if let Ok(c) = tcx.at(expr.span).lit_to_const(lit_input) {\n                 return c;\n             }"}, {"sha": "331eb109ec0b47ec8ce22ce666ec6611df87dc03", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 33, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=02fffc1556e01c64d84d07d0a3ab059a9c7505f8", "patch": "@@ -1441,17 +1441,8 @@ pub struct MacroDef {\n     pub legacy: bool,\n }\n \n-#[derive(\n-    Clone,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug,\n-    Copy,\n-    Hash,\n-    Eq,\n-    PartialEq,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug, Copy, Hash, Eq, PartialEq)]\n+#[derive(HashStable_Generic)]\n pub enum StrStyle {\n     /// A regular string, like `\"foo\"`.\n     Cooked,\n@@ -1501,17 +1492,8 @@ impl StrLit {\n }\n \n /// Type of the integer literal based on provided suffix.\n-#[derive(\n-    Clone,\n-    Copy,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug,\n-    Hash,\n-    Eq,\n-    PartialEq,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, Eq, PartialEq)]\n+#[derive(HashStable_Generic)]\n pub enum LitIntType {\n     /// e.g. `42_i32`.\n     Signed(IntTy),\n@@ -1522,17 +1504,8 @@ pub enum LitIntType {\n }\n \n /// Type of the float literal based on provided suffix.\n-#[derive(\n-    Clone,\n-    Copy,\n-    RustcEncodable,\n-    RustcDecodable,\n-    Debug,\n-    Hash,\n-    Eq,\n-    PartialEq,\n-    HashStable_Generic\n-)]\n+#[derive(Clone, Copy, RustcEncodable, RustcDecodable, Debug, Hash, Eq, PartialEq)]\n+#[derive(HashStable_Generic)]\n pub enum LitFloatType {\n     /// A float literal with a suffix (`1f32` or `1E10f32`).\n     Suffixed(FloatTy),"}, {"sha": "54bdd768f8a73290db714bc78ad23bff9eb52595", "filename": "src/test/rustdoc/const-generics/add-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02fffc1556e01c64d84d07d0a3ab059a9c7505f8/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fadd-impl.rs?ref=02fffc1556e01c64d84d07d0a3ab059a9c7505f8", "patch": "@@ -11,7 +11,7 @@ pub struct Simd<T, const WIDTH: usize> {\n     inner: T,\n }\n \n-// @has foo/struct.Simd.html '//div[@id=\"implementations-list\"]/h3/code' 'impl Add<Simd<u8, 16>> for Simd<u8, 16>'\n+// @has foo/struct.Simd.html '//div[@id=\"implementations-list\"]/h3/code' 'impl Add<Simd<u8, 16usize>> for Simd<u8, 16>'\n impl Add for Simd<u8, 16> {\n     type Output = Self;\n "}]}