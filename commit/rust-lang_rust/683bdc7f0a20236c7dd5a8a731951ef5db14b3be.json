{"sha": "683bdc7f0a20236c7dd5a8a731951ef5db14b3be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4M2JkYzdmMGEyMDIzNmM3ZGQ1YThhNzMxOTUxZWY1ZGIxNGIzYmU=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-04T00:00:09Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-04T00:00:09Z"}, "message": "Add comments", "tree": {"sha": "9ce7fec9e385845aa7d087c98c30217b0fcfce74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ce7fec9e385845aa7d087c98c30217b0fcfce74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/683bdc7f0a20236c7dd5a8a731951ef5db14b3be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/683bdc7f0a20236c7dd5a8a731951ef5db14b3be", "html_url": "https://github.com/rust-lang/rust/commit/683bdc7f0a20236c7dd5a8a731951ef5db14b3be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/683bdc7f0a20236c7dd5a8a731951ef5db14b3be/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08504fbb0b05abdd9543f08102b0d6275dde210c", "url": "https://api.github.com/repos/rust-lang/rust/commits/08504fbb0b05abdd9543f08102b0d6275dde210c", "html_url": "https://github.com/rust-lang/rust/commit/08504fbb0b05abdd9543f08102b0d6275dde210c"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "6d153bf02b3ba2d2593ff53e4b1e5618504349af", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/683bdc7f0a20236c7dd5a8a731951ef5db14b3be/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/683bdc7f0a20236c7dd5a8a731951ef5db14b3be/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=683bdc7f0a20236c7dd5a8a731951ef5db14b3be", "patch": "@@ -2071,35 +2071,55 @@ impl str {\n             return String::new();\n         }\n \n-        // n = 2^j + k (2^j > k)\n-\n-        // 2^j:\n-        let mut s = Vec::with_capacity(self.len() * n);\n-        s.extend(self.as_bytes());\n-        let mut m = n >> 1;\n-        while m > 0 {\n-            let len = s.len();\n-            unsafe {\n-                ptr::copy_nonoverlapping(s.as_ptr(), (s.as_mut_ptr() as *mut u8).add(len), len);\n-                s.set_len(len * 2);\n+        // If `n` is larger than zero, it can be split as\n+        // `n = 2^expn + rem (2^expn > rem, expn >= 0, rem >= 0)`.\n+        // `2^expn` is the number represented by the leftmost '1' bit of `n`,\n+        // and `rem` is the remaining part of `n`.\n+\n+        // Using `Vec` to access `set_len()`.\n+        let mut buf = Vec::with_capacity(self.len() * n);\n+\n+        // `2^expn` repetition is done by doubling `buf` `expn`-times.\n+        buf.extend(self.as_bytes());\n+        {\n+            let mut m = n >> 1;\n+            // If `m > 0`, there are remaining bits up to the leftmost '1'.\n+            while m > 0 {\n+                // `buf.extend(buf)`:\n+                unsafe {\n+                    ptr::copy_nonoverlapping(\n+                        buf.as_ptr(),\n+                        (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n+                        buf.len(),\n+                    );\n+                    // `buf` has capacity of `self.len() * n`.\n+                    let buf_len = buf.len();\n+                    buf.set_len(buf_len * 2);\n+                }\n+\n+                m >>= 1;\n             }\n-            m >>= 1;\n         }\n \n-        // k:\n-        let res_len = n * self.len();\n-        if res_len > s.len() {\n+        // `rem` (`= n - 2^expn`) repetition is done by copying\n+        // first `rem` repetitions from `buf` itself.\n+        let rem_len = self.len() * n - buf.len(); // `self.len() * rem`\n+        if rem_len > 0 {\n+            // `buf.extend(buf[0 .. rem_len])`:\n             unsafe {\n+                // This is non-overlapping since `2^expn > rem`.\n                 ptr::copy_nonoverlapping(\n-                    s.as_ptr(),\n-                    (s.as_mut_ptr() as *mut u8).add(s.len()),\n-                    res_len - s.len(),\n+                    buf.as_ptr(),\n+                    (buf.as_mut_ptr() as *mut u8).add(buf.len()),\n+                    rem_len,\n                 );\n-                s.set_len(res_len);\n+                // `buf.len() + rem_len` equals to `buf.capacity()` (`self.len() * n`).\n+                let buf_len = buf.len();\n+                buf.set_len(buf_len + rem_len);\n             }\n         }\n \n-        unsafe { String::from_utf8_unchecked(s) }\n+        unsafe { String::from_utf8_unchecked(buf) }\n     }\n \n     /// Checks if all characters in this string are within the ASCII range."}]}