{"sha": "98ac8d46251cbe8807e5db54e8f0c2f23b7288d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YWM4ZDQ2MjUxY2JlODgwN2U1ZGI1NGU4ZjBjMmYyM2I3Mjg4ZDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-25T04:05:25Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-25T04:12:16Z"}, "message": "syntax: Clean up the bad_expr_word functions", "tree": {"sha": "bc1c5fa71d31bf1174e927b44bd2d2706c6a7dc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc1c5fa71d31bf1174e927b44bd2d2706c6a7dc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5", "html_url": "https://github.com/rust-lang/rust/commit/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ee90cc7be7b74fd8e63ef79a19844343ad1dd9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ee90cc7be7b74fd8e63ef79a19844343ad1dd9c", "html_url": "https://github.com/rust-lang/rust/commit/7ee90cc7be7b74fd8e63ef79a19844343ad1dd9c"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "711543d17f37f068243af72bf3dd7d04fea7f158", "filename": "src/librustsyntax/parse/common.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5/src%2Flibrustsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fcommon.rs?ref=98ac8d46251cbe8807e5db54e8f0c2f23b7288d5", "patch": "@@ -43,7 +43,7 @@ fn parse_path_list_ident(p: parser) -> ast::path_list_ident {\n }\n \n fn parse_value_ident(p: parser) -> ast::ident {\n-    check_bad_word(p);\n+    check_bad_expr_word(p);\n     ret parse_ident(p);\n }\n \n@@ -87,11 +87,19 @@ fn expect_keyword(p: parser, word: str) {\n     }\n }\n \n-fn check_bad_word(p: parser) {\n-    if token::is_bad_expr_word(p.token, p.bad_expr_words,\n-                               *p.reader.interner) {\n+fn is_bad_expr_word(p: parser, word: str) -> bool {\n+    p.bad_expr_words.contains_key(word)\n+}\n+\n+fn check_bad_expr_word(p: parser) {\n+    alt p.token {\n+      token::IDENT(_, false) {\n         let w = token_to_str(p.reader, p.token);\n-        p.fatal(\"found \" + w + \" in expression position\");\n+        if is_bad_expr_word(p, w) {\n+            p.fatal(\"found `\" + w + \"` in expression position\");\n+        }\n+      }\n+      _ { }\n     }\n }\n "}, {"sha": "f68fb7383bfcb6380864b1235e94905e428f3049", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=98ac8d46251cbe8807e5db54e8f0c2f23b7288d5", "patch": "@@ -543,7 +543,7 @@ fn parse_path(p: parser) -> @ast::path {\n fn parse_value_path(p: parser) -> @ast::path {\n     let pt = parse_path(p);\n     let last_word = vec::last(pt.idents);\n-    if p.bad_expr_words.contains_key(last_word) {\n+    if is_bad_expr_word(p, last_word) {\n         p.fatal(\"found \" + last_word + \" in expression position\");\n     }\n     pt\n@@ -802,7 +802,7 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n     } else if p.token == token::MOD_SEP ||\n                   is_ident(p.token) && !is_keyword(p, \"true\") &&\n                       !is_keyword(p, \"false\") {\n-        check_bad_word(p);\n+        check_bad_expr_word(p);\n         let pth = parse_path_and_ty_param_substs(p, true);\n         hi = pth.span.hi;\n         ex = ast::expr_path(pth);\n@@ -1370,7 +1370,7 @@ fn parse_pat(p: parser) -> @ast::pat {\n                 p.bump();\n                 subpat = parse_pat(p);\n             } else {\n-                if p.bad_expr_words.contains_key(fieldname) {\n+                if is_bad_expr_word(p, fieldname) {\n                     p.fatal(\"found \" + fieldname + \" in binding position\");\n                 }\n                 subpat = @{id: p.get_id(),\n@@ -2098,7 +2098,7 @@ fn parse_item_enum(p: parser, attrs: [ast::attribute]) -> @ast::item {\n     let mut variants: [ast::variant] = [];\n     // Newtype syntax\n     if p.token == token::EQ {\n-        if p.bad_expr_words.contains_key(id) {\n+        if is_bad_expr_word(p, id) {\n             p.fatal(\"found \" + id + \" in enum constructor position\");\n         }\n         p.bump();"}, {"sha": "3212bdaab2638ff5850b028cd77aab18dd14909a", "filename": "src/librustsyntax/parse/token.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98ac8d46251cbe8807e5db54e8f0c2f23b7288d5/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Ftoken.rs?ref=98ac8d46251cbe8807e5db54e8f0c2f23b7288d5", "patch": "@@ -200,17 +200,6 @@ fn is_bar(t: token::token) -> bool {\n     alt t { token::BINOP(token::OR) | token::OROR { true } _ { false } }\n }\n \n-fn is_bad_expr_word(t: token,\n-                    bad_expr_words: hashmap<str, ()>,\n-                    in: interner<str>) -> bool {\n-    alt t {\n-      token::IDENT(_, false) {\n-        bad_expr_words.contains_key(to_str(in, t))\n-      }\n-      _ { false }\n-    }\n-}\n-\n #[doc = \"\n All the valid words that have meaning in the Rust language. Some of these are\n nonetheless valid as identifiers becasue they are unambiguous."}]}