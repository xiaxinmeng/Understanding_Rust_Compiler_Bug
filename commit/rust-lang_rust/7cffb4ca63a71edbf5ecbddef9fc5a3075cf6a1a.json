{"sha": "7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "node_id": "C_kwDOAAsO6NoAKDdjZmZiNGNhNjNhNzFlZGJmNWVjYmRkZWY5ZmM1YTMwNzVjZjZhMWE", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-08-26T12:08:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-26T12:08:48Z"}, "message": "Rollup merge of #101006 - GuillaumeGomez:doc-cfg-reexport, r=notriddle\n\nFix doc cfg on reexports\n\nFixes #83428.\n\nThe problem was that the newly inlined item cfg propagation was not working since its real parent is different than its current one.\n\nFor the implementation, I decided to put it directly into `CfgPropagation` instead of inside `inline.rs` because I thought it would be simpler to maintain and to not forget if new kind of items are added if it's all done in one place.\n\nr? `@notriddle`", "tree": {"sha": "90489c484a92c1557e2f6e7c4460a2d28c777da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90489c484a92c1557e2f6e7c4460a2d28c777da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCLfQCRBK7hj4Ov3rIwAAqRwIAGg3a0VGd9Wyb4cg6BhQG2CQ\ngodqy6VPq+1zi3dY2bAas2zgvioQutvGyoUHbi+mXRy86SHZTlPXmghEQKiz1gZS\ngzxXliFKpvbzTAfK6dmeb3Bsj+yPG7jU6onNMtEfMovM9EiFf71dCJFuVL2n7elG\nz8TeUw44bAckvv5o6j0xdPuMpGdeZ+gppIxqK0uVn6KwSwXUW/BobzUUD0lJivJt\n13sCZo2sr7FtjGw9YriQRcMCHy2/lCyt8L3XfHY4yCLOSFwWic2FZiXb41qvo2MA\nRrc/5Lr0Z3PnDKIoQYzvfkaxkd3SlB4laM8VZb0d8aHoekmthRGeQL6Qwhc9JXg=\n=rv8Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 90489c484a92c1557e2f6e7c4460a2d28c777da7\nparent 378f851e95b706701af64de4c80f655b9654661c\nparent 2ed945407f050385b6d4c34580f9b59db02a1b68\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1661515728 +0200\ncommitter GitHub <noreply@github.com> 1661515728 +0200\n\nRollup merge of #101006 - GuillaumeGomez:doc-cfg-reexport, r=notriddle\n\nFix doc cfg on reexports\n\nFixes #83428.\n\nThe problem was that the newly inlined item cfg propagation was not working since its real parent is different than its current one.\n\nFor the implementation, I decided to put it directly into `CfgPropagation` instead of inside `inline.rs` because I thought it would be simpler to maintain and to not forget if new kind of items are added if it's all done in one place.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "html_url": "https://github.com/rust-lang/rust/commit/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "378f851e95b706701af64de4c80f655b9654661c", "url": "https://api.github.com/repos/rust-lang/rust/commits/378f851e95b706701af64de4c80f655b9654661c", "html_url": "https://github.com/rust-lang/rust/commit/378f851e95b706701af64de4c80f655b9654661c"}, {"sha": "2ed945407f050385b6d4c34580f9b59db02a1b68", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed945407f050385b6d4c34580f9b59db02a1b68", "html_url": "https://github.com/rust-lang/rust/commit/2ed945407f050385b6d4c34580f9b59db02a1b68"}], "stats": {"total": 112, "additions": 104, "deletions": 8}, "files": [{"sha": "f367edcbf5a81eed12d6f1437586f9d73f4befac", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "patch": "@@ -300,7 +300,7 @@ pub(crate) fn build_impls(\n }\n \n /// `parent_module` refers to the parent of the re-export, not the original item\n-fn merge_attrs(\n+pub(crate) fn merge_attrs(\n     cx: &mut DocContext<'_>,\n     parent_module: Option<DefId>,\n     old_attrs: Attrs<'_>,"}, {"sha": "909a47d07b1666f92ecf4f44e7478066b3655b09", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "patch": "@@ -482,7 +482,7 @@ impl Item {\n         cx: &mut DocContext<'_>,\n         cfg: Option<Arc<Cfg>>,\n     ) -> Item {\n-        trace!(\"name={:?}, def_id={:?}\", name, def_id);\n+        trace!(\"name={:?}, def_id={:?} cfg={:?}\", name, def_id, cfg);\n \n         // Primitives and Keywords are written in the source code as private modules.\n         // The modules need to be private so that nobody actually uses them, but the\n@@ -801,6 +801,31 @@ impl ItemKind {\n             | KeywordItem => [].iter(),\n         }\n     }\n+\n+    /// Returns `true` if this item does not appear inside an impl block.\n+    pub(crate) fn is_non_assoc(&self) -> bool {\n+        matches!(\n+            self,\n+            StructItem(_)\n+                | UnionItem(_)\n+                | EnumItem(_)\n+                | TraitItem(_)\n+                | ModuleItem(_)\n+                | ExternCrateItem { .. }\n+                | FunctionItem(_)\n+                | TypedefItem(_)\n+                | OpaqueTyItem(_)\n+                | StaticItem(_)\n+                | ConstantItem(_)\n+                | TraitAliasItem(_)\n+                | ForeignFunctionItem(_)\n+                | ForeignStaticItem(_)\n+                | ForeignTypeItem\n+                | MacroItem(_)\n+                | ProcMacroItem(_)\n+                | PrimitiveItem(_)\n+        )\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "6272f47f460cac99f3ed07e57a4cce06f29a38c4", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "patch": "@@ -516,7 +516,14 @@ fn portability(item: &clean::Item, parent: Option<&clean::Item>) -> Option<Strin\n         (cfg, _) => cfg.as_deref().cloned(),\n     };\n \n-    debug!(\"Portability {:?} - {:?} = {:?}\", item.cfg, parent.and_then(|p| p.cfg.as_ref()), cfg);\n+    debug!(\n+        \"Portability {:?} {:?} (parent: {:?}) - {:?} = {:?}\",\n+        item.name,\n+        item.cfg,\n+        parent,\n+        parent.and_then(|p| p.cfg.as_ref()),\n+        cfg\n+    );\n \n     Some(format!(\"<div class=\\\"stab portability\\\">{}</div>\", cfg?.render_long_html()))\n }"}, {"sha": "912601dda20b127846984710d19428c264bbc4db", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "patch": "@@ -477,7 +477,7 @@ fn extra_info_tags(item: &clean::Item, parent: &clean::Item, tcx: TyCtxt<'_>) ->\n         (cfg, _) => cfg.as_deref().cloned(),\n     };\n \n-    debug!(\"Portability {:?} - {:?} = {:?}\", item.cfg, parent.cfg, cfg);\n+    debug!(\"Portability name={:?} {:?} - {:?} = {:?}\", item.name, item.cfg, parent.cfg, cfg);\n     if let Some(ref cfg) = cfg {\n         tags += &tag_html(\"portability\", &cfg.render_long_plain(), &cfg.render_short_html());\n     }"}, {"sha": "21d295bb1f88e9fa761e661023f8b2d9c73b5824", "filename": "src/librustdoc/passes/propagate_doc_cfg.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fpropagate_doc_cfg.rs?ref=7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "patch": "@@ -2,29 +2,53 @@\n use std::sync::Arc;\n \n use crate::clean::cfg::Cfg;\n+use crate::clean::inline::{load_attrs, merge_attrs};\n use crate::clean::{Crate, Item};\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::passes::Pass;\n \n+use rustc_hir::def_id::LocalDefId;\n+\n pub(crate) const PROPAGATE_DOC_CFG: Pass = Pass {\n     name: \"propagate-doc-cfg\",\n     run: propagate_doc_cfg,\n     description: \"propagates `#[doc(cfg(...))]` to child items\",\n };\n \n-pub(crate) fn propagate_doc_cfg(cr: Crate, _: &mut DocContext<'_>) -> Crate {\n-    CfgPropagator { parent_cfg: None }.fold_crate(cr)\n+pub(crate) fn propagate_doc_cfg(cr: Crate, cx: &mut DocContext<'_>) -> Crate {\n+    CfgPropagator { parent_cfg: None, parent: None, cx }.fold_crate(cr)\n }\n \n-struct CfgPropagator {\n+struct CfgPropagator<'a, 'tcx> {\n     parent_cfg: Option<Arc<Cfg>>,\n+    parent: Option<LocalDefId>,\n+    cx: &'a mut DocContext<'tcx>,\n }\n \n-impl DocFolder for CfgPropagator {\n+impl<'a, 'tcx> DocFolder for CfgPropagator<'a, 'tcx> {\n     fn fold_item(&mut self, mut item: Item) -> Option<Item> {\n         let old_parent_cfg = self.parent_cfg.clone();\n \n+        if item.kind.is_non_assoc() &&\n+            let Some(def_id) = item.item_id.as_def_id().and_then(|def_id| def_id.as_local()) {\n+            let hir = self.cx.tcx.hir();\n+            let hir_id = hir.local_def_id_to_hir_id(def_id);\n+            let expected_parent = hir.get_parent_item(hir_id);\n+\n+            // If parents are different, it means that `item` is a reexport and we need to compute\n+            // the actual `cfg` by iterating through its \"real\" parents.\n+            if self.parent != Some(expected_parent) {\n+                let mut attrs = Vec::new();\n+                for (parent_hir_id, _) in hir.parent_iter(hir_id) {\n+                    let def_id = hir.local_def_id(parent_hir_id).to_def_id();\n+                    attrs.extend_from_slice(load_attrs(self.cx, def_id));\n+                }\n+                let (_, cfg) =\n+                    merge_attrs(self.cx, None, item.attrs.other_attrs.as_slice(), Some(&attrs));\n+                item.cfg = cfg;\n+            }\n+        }\n         let new_cfg = match (self.parent_cfg.take(), item.cfg.take()) {\n             (None, None) => None,\n             (Some(rc), None) | (None, Some(rc)) => Some(rc),\n@@ -37,8 +61,15 @@ impl DocFolder for CfgPropagator {\n         self.parent_cfg = new_cfg.clone();\n         item.cfg = new_cfg;\n \n+        let old_parent =\n+            if let Some(def_id) = item.item_id.as_def_id().and_then(|def_id| def_id.as_local()) {\n+                self.parent.replace(def_id)\n+            } else {\n+                self.parent.take()\n+            };\n         let result = self.fold_item_recur(item);\n         self.parent_cfg = old_parent_cfg;\n+        self.parent = old_parent;\n \n         Some(result)\n     }"}, {"sha": "addb6709db1da8a25fe823eda5029fa7a057e8d5", "filename": "src/test/rustdoc/cfg_doc_reexport.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Ftest%2Frustdoc%2Fcfg_doc_reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a/src%2Ftest%2Frustdoc%2Fcfg_doc_reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcfg_doc_reexport.rs?ref=7cffb4ca63a71edbf5ecbddef9fc5a3075cf6a1a", "patch": "@@ -0,0 +1,33 @@\n+#![feature(doc_cfg)]\n+#![feature(no_core)]\n+\n+#![crate_name = \"foo\"]\n+#![no_core]\n+\n+// @has 'foo/index.html'\n+// @has - '//*[@class=\"item-left module-item\"]/*[@class=\"stab portability\"]' 'foobar'\n+// @has - '//*[@class=\"item-left module-item\"]/*[@class=\"stab portability\"]' 'bar'\n+\n+#[doc(cfg(feature = \"foobar\"))]\n+mod imp_priv {\n+    // @has 'foo/struct.BarPriv.html'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n+    //    'Available on crate feature foobar only.'\n+    pub struct BarPriv {}\n+    impl BarPriv {\n+        pub fn test() {}\n+    }\n+}\n+#[doc(cfg(feature = \"foobar\"))]\n+pub use crate::imp_priv::*;\n+\n+pub mod bar {\n+    // @has 'foo/bar/struct.Bar.html'\n+    // @has - '//*[@id=\"main-content\"]/*[@class=\"item-info\"]/*[@class=\"stab portability\"]' \\\n+    //    'Available on crate feature bar only.'\n+    #[doc(cfg(feature = \"bar\"))]\n+    pub struct Bar;\n+}\n+\n+#[doc(cfg(feature = \"bar\"))]\n+pub use bar::Bar;"}]}