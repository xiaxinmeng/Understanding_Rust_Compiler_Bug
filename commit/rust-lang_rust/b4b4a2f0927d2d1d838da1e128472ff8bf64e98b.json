{"sha": "b4b4a2f0927d2d1d838da1e128472ff8bf64e98b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YjRhMmYwOTI3ZDJkMWQ4MzhkYTFlMTI4NDcyZmY4YmY2NGU5OGI=", "commit": {"author": {"name": "James Whaley", "email": "juicy66173@gmail.com", "date": "2020-09-21T17:27:43Z"}, "committer": {"name": "James Whaley", "email": "juicy66173@gmail.com", "date": "2020-09-21T17:27:43Z"}, "message": "Reduce boilerplate for BytePos and CharPos", "tree": {"sha": "de59ba614bd4af98390921dd66c9872c188ca00a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de59ba614bd4af98390921dd66c9872c188ca00a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4b4a2f0927d2d1d838da1e128472ff8bf64e98b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEUoOwabZGvfY7bAwn8DJ4ph7tssoFAl9o4qkACgkQ8DJ4ph7t\nsspuLg/8CG0UW+pzRgi8GiN9uZYj1gqk9XHG8Q5FlA0+t46CM2jkqE3fb0JYqVK5\nRzVE9XcuQ3kvjN9d1Gqkhqnw696b8GcLRjcfjANTi9L9O9Fc6S6lSTb3DI7qDO4X\ns46Gy14OVcD6Ycs431rRx+APH/GFPS/RIxbmSfAZxf8thdr1FIch/YJUyBMyN4N3\nIn02rMYCj6f7hFBO7as6zMUhywPyfMbwNSrrLNDJ9z65bsioOwhWvfgawez7TFOb\n3ajJ3pMeY6Ajnl6ckRNiPIsrYN0wbC0p1p1WRJ/GXKoRq3gWkT233biiSGQRLVmY\ncj0ogFMe8vuuqAl54g1Wxf3gxUGfORrDbiriYRQzgP79eGBuFDyJkLi2aqICbmux\nSbN+a5rejxAzqvULYr6BM9MoOZudTobAh2WwEeCDKXWPQdQA6OM6a74B9kcDrrPg\ntP+F7Ln5kv9Dhuv0DjJQhypXu+5q0FCGyTo2omYUikI78YJTt0wZO/ldgdMNGx2B\nu+UVuBBvrRIXHYRXbty42i5zTNugGqtYAySGjrxbTWY+h9vIeQlLQdutt5nwr1vc\nZESjyAbi0j5uPFSaMMrjqV2x8uXnS7ARl72+cSmac9XwqSXRGleW+Zte2KRPbjC+\nsWfTZPzGWFxbLCJbDlqvhuQLA2Td3vTPNAuUK2bzAmmO80btKGw=\n=XMQZ\n-----END PGP SIGNATURE-----", "payload": "tree de59ba614bd4af98390921dd66c9872c188ca00a\nparent e0bf356f9e5f6a8cca1eb656e900ffba79340fa1\nauthor James Whaley <juicy66173@gmail.com> 1600709263 +0100\ncommitter James Whaley <juicy66173@gmail.com> 1600709263 +0100\n\nReduce boilerplate for BytePos and CharPos\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4b4a2f0927d2d1d838da1e128472ff8bf64e98b", "html_url": "https://github.com/rust-lang/rust/commit/b4b4a2f0927d2d1d838da1e128472ff8bf64e98b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4b4a2f0927d2d1d838da1e128472ff8bf64e98b/comments", "author": {"login": "Juici", "id": 19672035, "node_id": "MDQ6VXNlcjE5NjcyMDM1", "avatar_url": "https://avatars.githubusercontent.com/u/19672035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Juici", "html_url": "https://github.com/Juici", "followers_url": "https://api.github.com/users/Juici/followers", "following_url": "https://api.github.com/users/Juici/following{/other_user}", "gists_url": "https://api.github.com/users/Juici/gists{/gist_id}", "starred_url": "https://api.github.com/users/Juici/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Juici/subscriptions", "organizations_url": "https://api.github.com/users/Juici/orgs", "repos_url": "https://api.github.com/users/Juici/repos", "events_url": "https://api.github.com/users/Juici/events{/privacy}", "received_events_url": "https://api.github.com/users/Juici/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Juici", "id": 19672035, "node_id": "MDQ6VXNlcjE5NjcyMDM1", "avatar_url": "https://avatars.githubusercontent.com/u/19672035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Juici", "html_url": "https://github.com/Juici", "followers_url": "https://api.github.com/users/Juici/followers", "following_url": "https://api.github.com/users/Juici/following{/other_user}", "gists_url": "https://api.github.com/users/Juici/gists{/gist_id}", "starred_url": "https://api.github.com/users/Juici/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Juici/subscriptions", "organizations_url": "https://api.github.com/users/Juici/orgs", "repos_url": "https://api.github.com/users/Juici/repos", "events_url": "https://api.github.com/users/Juici/events{/privacy}", "received_events_url": "https://api.github.com/users/Juici/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0bf356f9e5f6a8cca1eb656e900ffba79340fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0bf356f9e5f6a8cca1eb656e900ffba79340fa1", "html_url": "https://github.com/rust-lang/rust/commit/e0bf356f9e5f6a8cca1eb656e900ffba79340fa1"}], "stats": {"total": 137, "additions": 55, "deletions": 82}, "files": [{"sha": "ad3a866463d45ba03ef0982ffb6ea29e10e2bc42", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 55, "deletions": 82, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/b4b4a2f0927d2d1d838da1e128472ff8bf64e98b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4b4a2f0927d2d1d838da1e128472ff8bf64e98b/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=b4b4a2f0927d2d1d838da1e128472ff8bf64e98b", "patch": "@@ -1558,58 +1558,71 @@ pub trait Pos {\n     fn to_u32(&self) -> u32;\n }\n \n-/// A byte offset. Keep this small (currently 32-bits), as AST contains\n-/// a lot of them.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n-pub struct BytePos(pub u32);\n-\n-/// A character offset. Because of multibyte UTF-8 characters, a byte offset\n-/// is not equivalent to a character offset. The `SourceMap` will convert `BytePos`\n-/// values to `CharPos` values as necessary.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug)]\n-pub struct CharPos(pub usize);\n+macro_rules! impl_pos {\n+    (\n+        $(\n+            $(#[$attr:meta])*\n+            $vis:vis struct $ident:ident($inner_vis:vis $inner_ty:ty);\n+        )*\n+    ) => {\n+        $(\n+            $(#[$attr])*\n+            $vis struct $ident($inner_vis $inner_ty);\n+\n+            impl Pos for $ident {\n+                #[inline(always)]\n+                fn from_usize(n: usize) -> $ident {\n+                    $ident(n as $inner_ty)\n+                }\n \n-// FIXME: lots of boilerplate in these impls, but so far my attempts to fix\n-// have been unsuccessful.\n+                #[inline(always)]\n+                fn to_usize(&self) -> usize {\n+                    self.0 as usize\n+                }\n \n-impl Pos for BytePos {\n-    #[inline(always)]\n-    fn from_usize(n: usize) -> BytePos {\n-        BytePos(n as u32)\n-    }\n+                #[inline(always)]\n+                fn from_u32(n: u32) -> $ident {\n+                    $ident(n as $inner_ty)\n+                }\n \n-    #[inline(always)]\n-    fn to_usize(&self) -> usize {\n-        self.0 as usize\n-    }\n+                #[inline(always)]\n+                fn to_u32(&self) -> u32 {\n+                    self.0 as u32\n+                }\n+            }\n \n-    #[inline(always)]\n-    fn from_u32(n: u32) -> BytePos {\n-        BytePos(n)\n-    }\n+            impl Add for $ident {\n+                type Output = $ident;\n \n-    #[inline(always)]\n-    fn to_u32(&self) -> u32 {\n-        self.0\n-    }\n-}\n+                #[inline(always)]\n+                fn add(self, rhs: $ident) -> $ident {\n+                    $ident((self.to_usize() + rhs.to_usize()) as $inner_ty)\n+                }\n+            }\n \n-impl Add for BytePos {\n-    type Output = BytePos;\n+            impl Sub for $ident {\n+                type Output = $ident;\n \n-    #[inline(always)]\n-    fn add(self, rhs: BytePos) -> BytePos {\n-        BytePos((self.to_usize() + rhs.to_usize()) as u32)\n-    }\n+                #[inline(always)]\n+                fn sub(self, rhs: $ident) -> $ident {\n+                    $ident((self.to_usize() - rhs.to_usize()) as $inner_ty)\n+                }\n+            }\n+        )*\n+    };\n }\n \n-impl Sub for BytePos {\n-    type Output = BytePos;\n+impl_pos! {\n+    /// A byte offset. Keep this small (currently 32-bits), as AST contains\n+    /// a lot of them.\n+    #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n+    pub struct BytePos(pub u32);\n \n-    #[inline(always)]\n-    fn sub(self, rhs: BytePos) -> BytePos {\n-        BytePos((self.to_usize() - rhs.to_usize()) as u32)\n-    }\n+    /// A character offset. Because of multibyte UTF-8 characters, a byte offset\n+    /// is not equivalent to a character offset. The `SourceMap` will convert `BytePos`\n+    /// values to `CharPos` values as necessary.\n+    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug)]\n+    pub struct CharPos(pub usize);\n }\n \n impl<S: rustc_serialize::Encoder> Encodable<S> for BytePos {\n@@ -1624,46 +1637,6 @@ impl<D: rustc_serialize::Decoder> Decodable<D> for BytePos {\n     }\n }\n \n-impl Pos for CharPos {\n-    #[inline(always)]\n-    fn from_usize(n: usize) -> CharPos {\n-        CharPos(n)\n-    }\n-\n-    #[inline(always)]\n-    fn to_usize(&self) -> usize {\n-        self.0\n-    }\n-\n-    #[inline(always)]\n-    fn from_u32(n: u32) -> CharPos {\n-        CharPos(n as usize)\n-    }\n-\n-    #[inline(always)]\n-    fn to_u32(&self) -> u32 {\n-        self.0 as u32\n-    }\n-}\n-\n-impl Add for CharPos {\n-    type Output = CharPos;\n-\n-    #[inline(always)]\n-    fn add(self, rhs: CharPos) -> CharPos {\n-        CharPos(self.to_usize() + rhs.to_usize())\n-    }\n-}\n-\n-impl Sub for CharPos {\n-    type Output = CharPos;\n-\n-    #[inline(always)]\n-    fn sub(self, rhs: CharPos) -> CharPos {\n-        CharPos(self.to_usize() - rhs.to_usize())\n-    }\n-}\n-\n // _____________________________________________________________________________\n // Loc, SourceFileAndLine, SourceFileAndBytePos\n //"}]}