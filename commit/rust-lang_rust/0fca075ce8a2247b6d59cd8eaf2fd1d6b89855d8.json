{"sha": "0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8", "node_id": "C_kwDOAAsO6NoAKDBmY2EwNzVjZThhMjI0N2I2ZDU5Y2Q4ZWFmMmZkMWQ2Yjg5ODU1ZDg", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-10-12T09:07:30Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-10-24T09:16:31Z"}, "message": "suggest type annotation for local statement initialed by ref expression", "tree": {"sha": "8e1bb98c54d7130d707c12dfb24de5c58b7a7a44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e1bb98c54d7130d707c12dfb24de5c58b7a7a44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8", "html_url": "https://github.com/rust-lang/rust/commit/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "url": "https://api.github.com/repos/rust-lang/rust/commits/56f132565eb31eeb9ec7e1800a6ab2ca354e710e", "html_url": "https://github.com/rust-lang/rust/commit/56f132565eb31eeb9ec7e1800a6ab2ca354e710e"}], "stats": {"total": 164, "additions": 160, "deletions": 4}, "files": [{"sha": "be14234afe28d37d0aaa434fe553c6b0617a6937", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8", "patch": "@@ -714,7 +714,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &hir::Expr<'tcx>,\n         checked_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n-    ) -> Option<(Span, String, String, Applicability, bool /* verbose */)> {\n+    ) -> Option<(\n+        Span,\n+        String,\n+        String,\n+        Applicability,\n+        bool, /* verbose */\n+        bool, /* suggest `&` or `&mut` type annotation */\n+    )> {\n         let sess = self.sess();\n         let sp = expr.span;\n \n@@ -746,6 +753,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     String::new(),\n                                     Applicability::MachineApplicable,\n                                     true,\n+                                    false,\n                                 ));\n                             }\n                         }\n@@ -760,6 +768,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     \"b\".to_string(),\n                                     Applicability::MachineApplicable,\n                                     true,\n+                                    false,\n                                 ));\n                     }\n                 }\n@@ -817,6 +826,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 sugg.2,\n                                 Applicability::MachineApplicable,\n                                 false,\n+                                false,\n                             ));\n                         }\n \n@@ -844,13 +854,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 format!(\"{prefix}&mut {sugg_expr}\"),\n                                 Applicability::MachineApplicable,\n                                 false,\n+                                false,\n                             ),\n                             hir::Mutability::Not => (\n                                 sp,\n                                 \"consider borrowing here\".to_string(),\n                                 format!(\"{prefix}&{sugg_expr}\"),\n                                 Applicability::MachineApplicable,\n                                 false,\n+                                false,\n                             ),\n                         });\n                     }\n@@ -880,6 +892,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             String::new(),\n                             Applicability::MachineApplicable,\n                             true,\n+                            true\n                         ));\n                     }\n                     return None;\n@@ -893,6 +906,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         String::new(),\n                         Applicability::MachineApplicable,\n                         true,\n+                        true,\n                     ));\n                 }\n             }\n@@ -959,6 +973,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             src,\n                             applicability,\n                             true,\n+                            false,\n                         ));\n                     }\n                 }\n@@ -999,6 +1014,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 Applicability::MachineApplicable\n                             },\n                             true,\n+                            false,\n                         ));\n                     }\n \n@@ -1050,6 +1066,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             suggestion,\n                             Applicability::MachineApplicable,\n                             true,\n+                            false,\n                         ));\n                     }\n                 }"}, {"sha": "4db9c56f98fee3440daa27e6aafa5e4002c283bf", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8", "patch": "@@ -327,17 +327,58 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n     ) -> bool {\n         let expr = expr.peel_blocks();\n-        if let Some((sp, msg, suggestion, applicability, verbose)) =\n+        if let Some((sp, msg, suggestion, applicability, verbose, annotation)) =\n             self.check_ref(expr, found, expected)\n         {\n             if verbose {\n                 err.span_suggestion_verbose(sp, &msg, suggestion, applicability);\n             } else {\n                 err.span_suggestion(sp, &msg, suggestion, applicability);\n             }\n+            if annotation {\n+                let suggest_annotation = match expr.peel_drop_temps().kind {\n+                    hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Not, _) => \"&\",\n+                    hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Mut, _) => \"&mut \",\n+                    _ => return true,\n+                };\n+                let mut tuple_indexes = Vec::new();\n+                let mut expr_id = expr.hir_id;\n+                for (parent_id, node) in self.tcx.hir().parent_iter(expr.hir_id) {\n+                    match node {\n+                        Node::Expr(&Expr { kind: ExprKind::Tup(subs), .. }) => {\n+                            tuple_indexes.push(\n+                                subs.iter()\n+                                    .enumerate()\n+                                    .find(|(_, sub_expr)| sub_expr.hir_id == expr_id)\n+                                    .unwrap()\n+                                    .0,\n+                            );\n+                            expr_id = parent_id;\n+                        }\n+                        Node::Local(local) => {\n+                            if let Some(mut ty) = local.ty {\n+                                while let Some(index) = tuple_indexes.pop() {\n+                                    match ty.kind {\n+                                        TyKind::Tup(tys) => ty = &tys[index],\n+                                        _ => return true,\n+                                    }\n+                                }\n+                                let annotation_span = ty.span;\n+                                err.span_suggestion(\n+                                    annotation_span.with_hi(annotation_span.lo()),\n+                                    format!(\"alternatively, consider changing the type annotation\"),\n+                                    suggest_annotation,\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                            break;\n+                        }\n+                        _ => break,\n+                    }\n+                }\n+            }\n             return true;\n-        } else if self.suggest_else_fn_with_closure(err, expr, found, expected)\n-        {\n+        } else if self.suggest_else_fn_with_closure(err, expr, found, expected) {\n             return true;\n         } else if self.suggest_fn_call(err, expr, found, |output| self.can_coerce(output, expected))\n             && let ty::FnDef(def_id, ..) = &found.kind()"}, {"sha": "8ed2b9c9a6330d4107496d00f2f191b233db98ac", "filename": "src/test/ui/suggestions/format-borrow.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr?ref=0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8", "patch": "@@ -11,6 +11,10 @@ help: consider removing the borrow\n LL -     let a: String = &String::from(\"a\");\n LL +     let a: String = String::from(\"a\");\n    |\n+help: alternatively, consider changing the type annotation\n+   |\n+LL |     let a: &String = &String::from(\"a\");\n+   |            +\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:4:21\n@@ -25,6 +29,10 @@ help: consider removing the borrow\n LL -     let b: String = &format!(\"b\");\n LL +     let b: String = format!(\"b\");\n    |\n+help: alternatively, consider changing the type annotation\n+   |\n+LL |     let b: &String = &format!(\"b\");\n+   |            +\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:6:21\n@@ -39,6 +47,10 @@ help: consider removing the borrow\n LL -     let c: String = &mut format!(\"c\");\n LL +     let c: String = format!(\"c\");\n    |\n+help: alternatively, consider changing the type annotation\n+   |\n+LL |     let c: &mut String = &mut format!(\"c\");\n+   |            ++++\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:8:21\n@@ -53,6 +65,10 @@ help: consider removing the borrow\n LL -     let d: String = &mut (format!(\"d\"));\n LL +     let d: String = format!(\"d\"));\n    |\n+help: alternatively, consider changing the type annotation\n+   |\n+LL |     let d: &mut String = &mut (format!(\"d\"));\n+   |            ++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c1a791d8d857a9c3f4c385cdff5aa7908eb202ff", "filename": "src/test/ui/suggestions/issue-102892.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102892.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102892.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102892.rs?ref=0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8", "patch": "@@ -0,0 +1,25 @@\n+#![allow(dead_code, unused_variables)]\n+\n+use std::sync::Arc;\n+\n+#[derive(Debug)]\n+struct A;\n+#[derive(Debug)]\n+struct B;\n+\n+fn process_without_annot(arc: &Arc<(A, B)>) {\n+    let (a, b) = **arc; // suggests putting `&**arc` here; with that, fixed!\n+}\n+\n+fn process_with_annot(arc: &Arc<(A, B)>) {\n+    let (a, b): (A, B) = &**arc; // suggests putting `&**arc` here too\n+    //~^ ERROR mismatched types\n+}\n+\n+fn process_with_tuple_annot(mutation: &mut (A, B), arc: &Arc<(A, B)>) {\n+    let (a, b): ((A, B), A) = (&mut *mutation, &(**arc).0); // suggests putting `&**arc` here too\n+    //~^ ERROR mismatched types\n+    //~| ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "a3dbc7cb861ffe6331c9f024399570ddc1a1a538", "filename": "src/test/ui/suggestions/issue-102892.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102892.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102892.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-102892.stderr?ref=0fca075ce8a2247b6d59cd8eaf2fd1d6b89855d8", "patch": "@@ -0,0 +1,57 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102892.rs:15:26\n+   |\n+LL |     let (a, b): (A, B) = &**arc; // suggests putting `&**arc` here too\n+   |                 ------   ^^^^^^ expected tuple, found `&(A, B)`\n+   |                 |\n+   |                 expected due to this\n+   |\n+   = note:  expected tuple `(A, B)`\n+           found reference `&(A, B)`\n+help: consider removing the borrow\n+   |\n+LL -     let (a, b): (A, B) = &**arc; // suggests putting `&**arc` here too\n+LL +     let (a, b): (A, B) = **arc; // suggests putting `&**arc` here too\n+   |\n+help: alternatively, consider changing the type annotation\n+   |\n+LL |     let (a, b): &(A, B) = &**arc; // suggests putting `&**arc` here too\n+   |                 +\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102892.rs:20:32\n+   |\n+LL |     let (a, b): ((A, B), A) = (&mut *mutation, &(**arc).0); // suggests putting `&**arc` here too\n+   |                                ^^^^^^^^^^^^^^ expected tuple, found `&mut (A, B)`\n+   |\n+   = note:          expected tuple `(A, B)`\n+           found mutable reference `&mut (A, B)`\n+help: consider removing the borrow\n+   |\n+LL -     let (a, b): ((A, B), A) = (&mut *mutation, &(**arc).0); // suggests putting `&**arc` here too\n+LL +     let (a, b): ((A, B), A) = (*mutation, &(**arc).0); // suggests putting `&**arc` here too\n+   |\n+help: alternatively, consider changing the type annotation\n+   |\n+LL |     let (a, b): (&mut (A, B), A) = (&mut *mutation, &(**arc).0); // suggests putting `&**arc` here too\n+   |                  ++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102892.rs:20:48\n+   |\n+LL |     let (a, b): ((A, B), A) = (&mut *mutation, &(**arc).0); // suggests putting `&**arc` here too\n+   |                                                ^^^^^^^^^^ expected struct `A`, found `&A`\n+   |\n+help: consider removing the borrow\n+   |\n+LL -     let (a, b): ((A, B), A) = (&mut *mutation, &(**arc).0); // suggests putting `&**arc` here too\n+LL +     let (a, b): ((A, B), A) = (&mut *mutation, (**arc).0); // suggests putting `&**arc` here too\n+   |\n+help: alternatively, consider changing the type annotation\n+   |\n+LL |     let (a, b): ((A, B), &A) = (&mut *mutation, &(**arc).0); // suggests putting `&**arc` here too\n+   |                          +\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}