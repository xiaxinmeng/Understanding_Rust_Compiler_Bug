{"sha": "90e9d8ee6258079e25d49480fcafb41945aa6fbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZTlkOGVlNjI1ODA3OWUyNWQ0OTQ4MGZjYWZiNDE5NDVhYTZmYmU=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-21T23:44:26Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-03-22T14:47:34Z"}, "message": "test: Remove Freeze / NoFreeze from tests", "tree": {"sha": "983df398a470ccaf25176090823c93f41f1eae8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/983df398a470ccaf25176090823c93f41f1eae8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90e9d8ee6258079e25d49480fcafb41945aa6fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90e9d8ee6258079e25d49480fcafb41945aa6fbe", "html_url": "https://github.com/rust-lang/rust/commit/90e9d8ee6258079e25d49480fcafb41945aa6fbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90e9d8ee6258079e25d49480fcafb41945aa6fbe/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4ddee6327eadbc6ef3cfb75d272f490259a4257", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4ddee6327eadbc6ef3cfb75d272f490259a4257", "html_url": "https://github.com/rust-lang/rust/commit/b4ddee6327eadbc6ef3cfb75d272f490259a4257"}], "stats": {"total": 149, "additions": 32, "deletions": 117}, "files": [{"sha": "e49ed1f9cf71798f71c4905cba246e6a9d12b1eb", "filename": "src/test/auxiliary/trait_superkinds_in_metadata.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_superkinds_in_metadata.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -13,6 +13,6 @@\n \n #[crate_type=\"lib\"];\n \n-pub trait RequiresFreeze : Freeze { }\n-pub trait RequiresRequiresFreezeAndSend : RequiresFreeze + Send { }\n+pub trait RequiresShare : Share { }\n+pub trait RequiresRequiresShareAndSend : RequiresShare + Send { }\n pub trait RequiresPod : Pod { }"}, {"sha": "954ec82e40fa0a057f907d4dba22afd99e0b824f", "filename": "src/test/compile-fail/borrowck-borrow-of-mut-base-ptr.rs", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b4ddee6327eadbc6ef3cfb75d272f490259a4257/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-of-mut-base-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ddee6327eadbc6ef3cfb75d272f490259a4257/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-of-mut-base-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-of-mut-base-ptr.rs?ref=b4ddee6327eadbc6ef3cfb75d272f490259a4257", "patch": "@@ -1,25 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that attempt to freeze an `&mut` pointer while referent is\n-// claimed yields an error.\n-//\n-// Example from src/middle/borrowck/doc.rs\n-\n-fn foo<'a>(mut t0: &'a mut int,\n-           mut t1: &'a mut int) {\n-    let p: &mut int = &mut *t0; // Claims `*t0`\n-    let mut t2 = &t0;           //~ ERROR cannot borrow `t0`\n-    let q: &int = &**t2;        // Freezes `*t0` but not through `*p`\n-    *p += 1;                    // violates type of `*q`\n-}\n-\n-fn main() {\n-}"}, {"sha": "e085b35cbb113aab56f301ad139b84d0b7ef969d", "filename": "src/test/compile-fail/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-in-metadata.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -16,12 +16,12 @@\n // Mostly tests correctness of metadata.\n \n extern crate trait_superkinds_in_metadata;\n-use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n+use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n \n struct X<T>(T);\n \n-impl <T:Freeze> RequiresFreeze for X<T> { }\n+impl <T:Share> RequiresShare for X<T> { }\n \n-impl <T:Freeze> RequiresRequiresFreezeAndSend for X<T> { } //~ ERROR cannot implement this trait\n+impl <T:Share> RequiresRequiresShareAndSend for X<T> { } //~ ERROR cannot implement this trait\n \n fn main() { }"}, {"sha": "caf968612922b300f3b136f78d645eb286eaeb53", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -13,10 +13,7 @@\n \n trait Foo : Send { }\n \n-impl <'a> Foo for &'a mut () { } //~ ERROR cannot implement this trait\n-\n-trait Bar : Freeze { }\n-\n-impl <'a> Bar for &'a mut () { } //~ ERROR cannot implement this trait\n+impl <'a> Foo for &'a mut () { }\n+//~^ ERROR which does not fulfill `Send`, cannot implement this trait\n \n fn main() { }"}, {"sha": "5ffaebe405e1c2398d4b8d447f3aff5d70ab947e", "filename": "src/test/compile-fail/closure-bounds-subtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-bounds-subtype.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -12,7 +12,7 @@\n fn take_any(_: ||:) {\n }\n \n-fn take_const_owned(_: ||:Freeze+Send) {\n+fn take_const_owned(_: ||:Share+Send) {\n }\n \n fn give_any(f: ||:) {\n@@ -21,7 +21,7 @@ fn give_any(f: ||:) {\n \n fn give_owned(f: ||:Send) {\n     take_any(f);\n-    take_const_owned(f); //~ ERROR expected bounds `Send+Freeze` but found bounds `Send`\n+    take_const_owned(f); //~ ERROR expected bounds `Send+Share` but found bounds `Send`\n }\n \n fn main() {}"}, {"sha": "4da1247819491e14c489caa19c7f7b3a6970c0d6", "filename": "src/test/compile-fail/kindck-freeze.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/b4ddee6327eadbc6ef3cfb75d272f490259a4257/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4ddee6327eadbc6ef3cfb75d272f490259a4257/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs?ref=b4ddee6327eadbc6ef3cfb75d272f490259a4257", "patch": "@@ -1,57 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test which of the builtin types are considered freezeable.\n-\n-\n-fn assert_freeze<T:Freeze>() { }\n-trait Dummy { }\n-\n-fn test<'a,T,U:Freeze>(_: &'a int) {\n-    // lifetime pointers are ok...\n-    assert_freeze::<&'static int>();\n-    assert_freeze::<&'a int>();\n-    assert_freeze::<&'a str>();\n-    assert_freeze::<&'a [int]>();\n-\n-    // ...unless they are mutable\n-    assert_freeze::<&'static mut int>(); //~ ERROR does not fulfill `Freeze`\n-    assert_freeze::<&'a mut int>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // ~ pointers are ok\n-    assert_freeze::<~int>();\n-    assert_freeze::<~str>();\n-    assert_freeze::<Vec<int> >();\n-\n-    // but not if they own a bad thing\n-    assert_freeze::<~&'a mut int>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // careful with object types, who knows what they close over...\n-    assert_freeze::<&'a Dummy>(); //~ ERROR does not fulfill `Freeze`\n-    assert_freeze::<~Dummy>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // ...unless they are properly bounded\n-    assert_freeze::<&'a Dummy:Freeze>();\n-    assert_freeze::<&'static Dummy:Freeze>();\n-    assert_freeze::<~Dummy:Freeze>();\n-\n-    // ...but even then the pointer overrides\n-    assert_freeze::<&'a mut Dummy:Freeze>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // closures are like an `&mut` object\n-    assert_freeze::<||>(); //~ ERROR does not fulfill `Freeze`\n-\n-    // unsafe ptrs are ok unless they point at unfreezeable things\n-    assert_freeze::<*int>();\n-    assert_freeze::<*&'a mut int>(); //~ ERROR does not fulfill `Freeze`\n-}\n-\n-fn main() {\n-}"}, {"sha": "e480ebfd3781f1406af53effbe047918c21bd9d7", "filename": "src/test/compile-fail/mutable-enum-indirect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum-indirect.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -13,11 +13,11 @@\n \n use std::kinds::marker;\n \n-enum Foo { A(marker::NoFreeze) }\n+enum Foo { A(marker::NoShare) }\n \n-fn bar<T: Freeze>(_: T) {}\n+fn bar<T: Share>(_: T) {}\n \n fn main() {\n-    let x = A(marker::NoFreeze);\n+    let x = A(marker::NoShare);\n     bar(&x); //~ ERROR type parameter with an incompatible type\n }"}, {"sha": "e4d2c801070b9ee93a293d95fc30834d5d0c38e6", "filename": "src/test/compile-fail/proc-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fproc-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Fproc-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fproc-bounds.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn is_send<T: Send>() {}\n-fn is_freeze<T: Freeze>() {}\n+fn is_freeze<T: Share>() {}\n fn is_static<T: 'static>() {}\n \n fn main() {"}, {"sha": "958a97412bce74effa7df82697b569c98c4bc1dd", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -14,7 +14,7 @@ trait Foo {\n fn a(_x: ~Foo:Send) {\n }\n \n-fn c(x: ~Foo:Freeze+Send) {\n+fn c(x: ~Foo:Share+Send) {\n     a(x);\n }\n "}, {"sha": "988057bc7b13ce5fb0d474a10257866b03d3a437", "filename": "src/test/compile-fail/trait-bounds-sugar.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -18,11 +18,11 @@ fn a(_x: ~Foo) { // should be same as ~Foo:Send\n fn b(_x: &'static Foo) { // should be same as &'static Foo:'static\n }\n \n-fn c(x: ~Foo:Freeze) {\n+fn c(x: ~Foo:Share) {\n     a(x); //~ ERROR expected bounds `Send`\n }\n \n-fn d(x: &'static Foo:Freeze) {\n+fn d(x: &'static Foo:Share) {\n     b(x); //~ ERROR expected bounds `'static`\n }\n "}, {"sha": "7b09c589320999fc55d115bf823e43acdaff31f0", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -13,11 +13,11 @@\n trait Tr { }\n impl Tr for int { }\n \n-fn foo(x: ~Tr: Freeze) -> ~Tr: Freeze { x }\n+fn foo(x: ~Tr: Share) -> ~Tr: Share { x }\n \n fn main() {\n-    let x: ~Tr: Freeze;\n+    let x: ~Tr: Share;\n \n-    ~1 as ~Tr: Freeze;\n+    ~1 as ~Tr: Share;\n }\n "}, {"sha": "8c41e4f57c4bbfc0531cb57a0736842c94281261", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -16,15 +16,15 @@\n // even when using them cross-crate.\n \n extern crate trait_superkinds_in_metadata;\n-use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n+use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n \n #[deriving(Eq)]\n struct X<T>(T);\n \n-impl <T: Freeze> RequiresFreeze for X<T> { }\n-impl <T: Freeze+Send> RequiresRequiresFreezeAndSend for X<T> { }\n+impl <T: Share> RequiresShare for X<T> { }\n+impl <T: Share+Send> RequiresRequiresShareAndSend for X<T> { }\n \n-fn foo<T: RequiresRequiresFreezeAndSend>(val: T, chan: Sender<T>) {\n+fn foo<T: RequiresRequiresShareAndSend>(val: T, chan: Sender<T>) {\n     chan.send(val);\n }\n "}, {"sha": "7b2977d031c13de04ed61d0c2eaa4fa668848234", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -15,14 +15,14 @@\n // Tests (correct) usage of trait super-builtin-kinds cross-crate.\n \n extern crate trait_superkinds_in_metadata;\n-use trait_superkinds_in_metadata::{RequiresRequiresFreezeAndSend, RequiresFreeze};\n+use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n use trait_superkinds_in_metadata::{RequiresPod};\n \n struct X<T>(T);\n \n-impl <T:Freeze> RequiresFreeze for X<T> { }\n+impl <T:Share> RequiresShare for X<T> { }\n \n-impl <T:Freeze+Send> RequiresRequiresFreezeAndSend for X<T> { }\n+impl <T:Share+Send> RequiresRequiresShareAndSend for X<T> { }\n \n impl <T:Pod> RequiresPod for X<T> { }\n "}, {"sha": "900e266584bd31bf1f0d0330c3a5b93e4d66e61d", "filename": "src/test/run-pass/proc-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Fproc-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Fproc-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fproc-bounds.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -12,18 +12,18 @@ fn foo<T>() {}\n fn bar<T>(_: T) {}\n \n fn is_send<T: Send>() {}\n-fn is_freeze<T: Freeze>() {}\n+fn is_freeze<T: Share>() {}\n fn is_static<T: 'static>() {}\n \n pub fn main() {\n     foo::<proc()>();\n     foo::<proc:()>();\n     foo::<proc:Send()>();\n-    foo::<proc:Send + Freeze()>();\n-    foo::<proc:'static + Send + Freeze()>();\n+    foo::<proc:Send + Share()>();\n+    foo::<proc:'static + Send + Share()>();\n \n     is_send::<proc:Send()>();\n-    is_freeze::<proc:Freeze()>();\n+    is_freeze::<proc:Share()>();\n     is_static::<proc:'static()>();\n \n "}, {"sha": "acc3ca508b2f2fed9e0ea1224be39150417e74bb", "filename": "src/test/run-pass/trait-bounds-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-basic.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -17,7 +17,7 @@ fn a(_x: ~Foo:) {\n fn b(_x: ~Foo:Send) {\n }\n \n-fn c(x: ~Foo:Freeze+Send) {\n+fn c(x: ~Foo:Share+Send) {\n     a(x);\n }\n "}, {"sha": "7ba36cbc0dfd8ef5a1a962246a7ddef832dc2244", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90e9d8ee6258079e25d49480fcafb41945aa6fbe/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=90e9d8ee6258079e25d49480fcafb41945aa6fbe", "patch": "@@ -11,7 +11,7 @@\n // except according to those terms.\n \n // Tests that a heterogeneous list of existential types can be put inside an Arc\n-// and shared between tasks as long as all types fulfill Freeze+Send.\n+// and shared between tasks as long as all types fulfill Send.\n \n // ignore-fast\n "}]}