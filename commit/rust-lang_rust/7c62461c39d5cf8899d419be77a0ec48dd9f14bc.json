{"sha": "7c62461c39d5cf8899d419be77a0ec48dd9f14bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNjI0NjFjMzlkNWNmODg5OWQ0MTliZTc3YTBlYzQ4ZGQ5ZjE0YmM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-06T13:39:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "introduce `trivial_noop` to accommodate micro-optimizations", "tree": {"sha": "778161fdce643303a763cdb9352012b78fd7e627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/778161fdce643303a763cdb9352012b78fd7e627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c62461c39d5cf8899d419be77a0ec48dd9f14bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c62461c39d5cf8899d419be77a0ec48dd9f14bc", "html_url": "https://github.com/rust-lang/rust/commit/7c62461c39d5cf8899d419be77a0ec48dd9f14bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c62461c39d5cf8899d419be77a0ec48dd9f14bc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b4fe442809271b862e487e6af6cccad05771785", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b4fe442809271b862e487e6af6cccad05771785", "html_url": "https://github.com/rust-lang/rust/commit/9b4fe442809271b862e487e6af6cccad05771785"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "7a405f0a7093f2faeb782f37a95917ce69619309", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c62461c39d5cf8899d419be77a0ec48dd9f14bc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c62461c39d5cf8899d419be77a0ec48dd9f14bc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=7c62461c39d5cf8899d419be77a0ec48dd9f14bc", "patch": "@@ -736,6 +736,10 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         describe_op: impl Fn() -> String,\n         op: impl TypeOp<'gcx, 'tcx, Output = R>,\n     ) -> Result<R, TypeError<'tcx>> {\n+        if let Some(r) = op.trivial_noop() {\n+            return Ok(r);\n+        }\n+\n         let (r, opt_data) = self.fully_perform_op_and_get_region_constraint_data(\n             || format!(\"{} at {:?}\", describe_op(), locations),\n             op,\n@@ -818,11 +822,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         sup: Ty<'tcx>,\n         locations: Locations,\n     ) -> UnitResult<'tcx> {\n-        // Micro-optimization.\n-        if sub == sup {\n-            return Ok(());\n-        }\n-\n         self.fully_perform_op(\n             locations,\n             || format!(\"sub_types({:?} <: {:?})\", sub, sup),\n@@ -831,11 +830,6 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n     }\n \n     fn eq_types(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, locations: Locations) -> UnitResult<'tcx> {\n-        // Micro-optimization.\n-        if a == b {\n-            return Ok(());\n-        }\n-\n         self.fully_perform_op(\n             locations,\n             || format!(\"eq_types({:?} = {:?})\", a, b),"}, {"sha": "97453231273bfeb43f12d37cd07efef0c8ed81a4", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7c62461c39d5cf8899d419be77a0ec48dd9f14bc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c62461c39d5cf8899d419be77a0ec48dd9f14bc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs?ref=7c62461c39d5cf8899d419be77a0ec48dd9f14bc", "patch": "@@ -16,6 +16,9 @@ use rustc::ty::Ty;\n pub(super) trait TypeOp<'gcx, 'tcx> {\n     type Output;\n \n+    /// Micro-optimization point: true if this is trivially true.\n+    fn trivial_noop(&self) -> Option<Self::Output>;\n+\n     fn perform(\n         self,\n         type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>,\n@@ -41,6 +44,10 @@ where\n {\n     type Output = R;\n \n+    fn trivial_noop(&self) -> Option<Self::Output> {\n+        None\n+    }\n+\n     fn perform(self, type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R> {\n         (self.closure)(type_checker)\n     }\n@@ -60,6 +67,14 @@ impl<'tcx> Subtype<'tcx> {\n impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n     type Output = ();\n \n+    fn trivial_noop(&self) -> Option<Self::Output> {\n+        if self.sub == self.sup {\n+            Some(())\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn perform(self, type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n         type_checker.infcx\n             .at(&ObligationCause::dummy(), type_checker.param_env)\n@@ -81,11 +96,17 @@ impl<'tcx> Eq<'tcx> {\n impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Eq<'tcx> {\n     type Output = ();\n \n+    fn trivial_noop(&self) -> Option<Self::Output> {\n+        if self.a == self.b {\n+            Some(())\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn perform(self, type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, Self::Output> {\n         type_checker.infcx\n             .at(&ObligationCause::dummy(), type_checker.param_env)\n             .eq(self.a, self.b)\n     }\n }\n-\n-"}]}