{"sha": "8b147624ff906a11134d2e18be071c6cb8ec4beb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMTQ3NjI0ZmY5MDZhMTExMzRkMmUxOGJlMDcxYzZjYjhlYzRiZWI=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-12T11:39:48Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-13T04:22:46Z"}, "message": "Add lowering of array lengths in types\n\nNow e.g.\n\n```rust\nfn a(b: [u8; 2]) {\n}\n```\n\nwill know about the length of b.", "tree": {"sha": "28df73a940497bc170ec9f080329657f4b1370b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28df73a940497bc170ec9f080329657f4b1370b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b147624ff906a11134d2e18be071c6cb8ec4beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b147624ff906a11134d2e18be071c6cb8ec4beb", "html_url": "https://github.com/rust-lang/rust/commit/8b147624ff906a11134d2e18be071c6cb8ec4beb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b147624ff906a11134d2e18be071c6cb8ec4beb/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "312f1fe20a6a0a8e69834c66f51b9abc9db5e0ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/312f1fe20a6a0a8e69834c66f51b9abc9db5e0ce", "html_url": "https://github.com/rust-lang/rust/commit/312f1fe20a6a0a8e69834c66f51b9abc9db5e0ce"}], "stats": {"total": 193, "additions": 114, "deletions": 79}, "files": [{"sha": "00c09a23dfcdca9efde0b72d5a6f741135164c27", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 50, "deletions": 3, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=8b147624ff906a11134d2e18be071c6cb8ec4beb", "patch": "@@ -2,6 +2,7 @@\n //! be directly created from an ast::TypeRef, without further queries.\n \n use hir_expand::{name::Name, AstId, InFile};\n+use std::convert::TryInto;\n use syntax::ast;\n \n use crate::{body::LowerCtx, path::Path};\n@@ -79,7 +80,7 @@ pub enum TypeRef {\n     Path(Path),\n     RawPtr(Box<TypeRef>, Mutability),\n     Reference(Box<TypeRef>, Option<LifetimeRef>, Mutability),\n-    Array(Box<TypeRef> /*, Expr*/),\n+    Array(Box<TypeRef>, ConstScalar),\n     Slice(Box<TypeRef>),\n     /// A fn pointer. Last element of the vector is the return type.\n     Fn(Vec<TypeRef>, bool /*varargs*/),\n@@ -140,7 +141,12 @@ impl TypeRef {\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n             ast::Type::ArrayType(inner) => {\n-                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())))\n+                let len = inner\n+                    .expr()\n+                    .map(ConstScalar::usize_from_literal_expr)\n+                    .unwrap_or(ConstScalar::Unknown);\n+\n+                TypeRef::Array(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())), len)\n             }\n             ast::Type::SliceType(inner) => {\n                 TypeRef::Slice(Box::new(TypeRef::from_ast_opt(&ctx, inner.ty())))\n@@ -212,7 +218,7 @@ impl TypeRef {\n                 }\n                 TypeRef::RawPtr(type_ref, _)\n                 | TypeRef::Reference(type_ref, ..)\n-                | TypeRef::Array(type_ref)\n+                | TypeRef::Array(type_ref, _)\n                 | TypeRef::Slice(type_ref) => go(&type_ref, f),\n                 TypeRef::ImplTrait(bounds) | TypeRef::DynTrait(bounds) => {\n                     for bound in bounds {\n@@ -298,3 +304,44 @@ impl TypeBound {\n         }\n     }\n }\n+\n+/// A concrete constant value\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub enum ConstScalar {\n+    // for now, we only support the trivial case of constant evaluating the length of an array\n+    // Note that this is u64 because the target usize may be bigger than our usize\n+    Usize(u64),\n+\n+    /// Case of an unknown value that rustc might know but we don't\n+    Unknown,\n+}\n+\n+impl std::fmt::Display for ConstScalar {\n+    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n+        match self {\n+            ConstScalar::Usize(us) => write!(fmt, \"{}\", us),\n+            ConstScalar::Unknown => write!(fmt, \"_\"),\n+        }\n+    }\n+}\n+\n+impl ConstScalar {\n+    fn usize_from_literal_expr(expr: ast::Expr) -> ConstScalar {\n+        match expr {\n+            ast::Expr::Literal(lit) => {\n+                let lkind = lit.kind();\n+                match lkind {\n+                    ast::LiteralKind::IntNumber(num)\n+                        if num.suffix() == None || num.suffix() == Some(\"usize\") =>\n+                    {\n+                        num.value().and_then(|v| v.try_into().ok())\n+                    }\n+                    _ => None,\n+                }\n+            }\n+            _ => None,\n+        }\n+        .map(ConstScalar::Usize)\n+        .unwrap_or(ConstScalar::Unknown)\n+    }\n+}"}, {"sha": "0044b1cffc25bc784f2854b188156cd5c564a7ce", "filename": "crates/hir_ty/src/consts.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/312f1fe20a6a0a8e69834c66f51b9abc9db5e0ce/crates%2Fhir_ty%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312f1fe20a6a0a8e69834c66f51b9abc9db5e0ce/crates%2Fhir_ty%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fconsts.rs?ref=312f1fe20a6a0a8e69834c66f51b9abc9db5e0ce", "patch": "@@ -1,21 +0,0 @@\n-//! Handling of concrete const values\n-\n-/// A concrete constant value\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub enum ConstScalar {\n-    // for now, we only support the trivial case of constant evaluating the length of an array\n-    // Note that this is u64 because the target usize may be bigger than our usize\n-    Usize(u64),\n-\n-    /// Case of an unknown value that rustc might know but we don't\n-    Unknown,\n-}\n-\n-impl std::fmt::Display for ConstScalar {\n-    fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> Result<(), std::fmt::Error> {\n-        match self {\n-            ConstScalar::Usize(us) => write!(fmt, \"{}\", us),\n-            ConstScalar::Unknown => write!(fmt, \"_\"),\n-        }\n-    }\n-}"}, {"sha": "7bbd1a1f7dad6474651de8f11757bb11e6c3f4cf", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=8b147624ff906a11134d2e18be071c6cb8ec4beb", "patch": "@@ -962,11 +962,10 @@ impl HirDisplay for TypeRef {\n                 write!(f, \"{}\", mutability)?;\n                 inner.hir_fmt(f)?;\n             }\n-            TypeRef::Array(inner) => {\n+            TypeRef::Array(inner, len) => {\n                 write!(f, \"[\")?;\n                 inner.hir_fmt(f)?;\n-                // FIXME: Array length?\n-                write!(f, \"; _]\")?;\n+                write!(f, \"; {}]\", len)?;\n             }\n             TypeRef::Slice(inner) => {\n                 write!(f, \"[\")?;"}, {"sha": "5e942075249ab2f4ec9bfa9d6f55917c6ff64ec0", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=8b147624ff906a11134d2e18be071c6cb8ec4beb", "patch": "@@ -8,16 +8,15 @@ use hir_def::{\n     expr::{Array, BinaryOp, Expr, ExprId, Literal, Statement, UnaryOp},\n     path::{GenericArg, GenericArgs},\n     resolver::resolver_for_expr,\n+    type_ref::ConstScalar,\n     AssocContainerId, FieldId, Lookup,\n };\n use hir_expand::name::{name, Name};\n use stdx::always;\n use syntax::ast::RangeOp;\n \n use crate::{\n-    autoderef,\n-    consts::ConstScalar,\n-    dummy_usize_const,\n+    autoderef, dummy_usize_const,\n     lower::lower_to_chalk_mutability,\n     mapping::from_chalk,\n     method_resolution, op,\n@@ -737,7 +736,8 @@ impl<'a> InferenceContext<'a> {\n                                 TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n                             ),\n                         );\n-                        // FIXME: support length for Repeat array expressions\n+                        // FIXME: we don't know the length here because hir Exprs don't actually\n+                        // get the value out of the AST, even though it is there.\n                         None\n                     }\n                 };"}, {"sha": "7b41197477a75d2fa6cd1170a2ddec9e7a875d02", "filename": "crates/hir_ty/src/interner.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=8b147624ff906a11134d2e18be071c6cb8ec4beb", "patch": "@@ -1,11 +1,12 @@\n //! Implementation of the Chalk `Interner` trait, which allows customizing the\n //! representation of the various objects Chalk deals with (types, goals etc.).\n \n-use crate::{chalk_db, consts::ConstScalar, tls, GenericArg};\n+use crate::{chalk_db, tls, GenericArg};\n use base_db::salsa::InternId;\n use chalk_ir::{Goal, GoalData};\n use hir_def::{\n     intern::{impl_internable, InternStorage, Internable, Interned},\n+    type_ref::ConstScalar,\n     TypeAliasId,\n };\n use smallvec::SmallVec;"}, {"sha": "be3f55bdf3e76f1041aa40a58c0161223c0b0ec7", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=8b147624ff906a11134d2e18be071c6cb8ec4beb", "patch": "@@ -12,7 +12,6 @@ mod chalk_db;\n mod chalk_ext;\n mod infer;\n mod interner;\n-mod consts;\n mod lower;\n mod mapping;\n mod op;\n@@ -38,9 +37,13 @@ use chalk_ir::{\n     interner::HasInterner,\n     UintTy,\n };\n-use hir_def::{expr::ExprId, type_ref::Rawness, TypeParamId};\n+use hir_def::{\n+    expr::ExprId,\n+    type_ref::{ConstScalar, Rawness},\n+    TypeParamId,\n+};\n \n-use crate::{consts::ConstScalar, db::HirDatabase, display::HirDisplay, utils::generics};\n+use crate::{db::HirDatabase, display::HirDisplay, utils::generics};\n \n pub use autoderef::autoderef;\n pub use builder::TyBuilder;"}, {"sha": "f7015e5ff9ac310210d1a9c39767887f85b4386b", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=8b147624ff906a11134d2e18be071c6cb8ec4beb", "patch": "@@ -9,7 +9,9 @@ use std::cell::{Cell, RefCell};\n use std::{iter, sync::Arc};\n \n use base_db::CrateId;\n-use chalk_ir::{cast::Cast, fold::Shift, interner::HasInterner, Mutability, Safety};\n+use chalk_ir::{\n+    cast::Cast, fold::Shift, interner::HasInterner, Mutability, Safety, Scalar, UintTy,\n+};\n use hir_def::{\n     adt::StructKind,\n     body::{Expander, LowerCtx},\n@@ -30,16 +32,15 @@ use syntax::ast;\n \n use crate::{\n     db::HirDatabase,\n-    dummy_usize_const,\n     mapping::ToChalk,\n     static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics, Generics,\n     },\n-    AliasEq, AliasTy, Binders, BoundVar, CallableSig, DebruijnIndex, DynTy, FnPointer, FnSig,\n-    FnSubst, ImplTraitId, Interner, OpaqueTy, PolyFnSig, ProjectionTy, QuantifiedWhereClause,\n-    QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits, Substitution,\n-    TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, WhereClause,\n+    AliasEq, AliasTy, Binders, BoundVar, CallableSig, ConstData, ConstValue, DebruijnIndex, DynTy,\n+    FnPointer, FnSig, FnSubst, ImplTraitId, Interner, OpaqueTy, PolyFnSig, ProjectionTy,\n+    QuantifiedWhereClause, QuantifiedWhereClauses, ReturnTypeImplTrait, ReturnTypeImplTraits,\n+    Substitution, TraitEnvironment, TraitRef, TraitRefExt, Ty, TyBuilder, TyKind, WhereClause,\n };\n \n #[derive(Debug)]\n@@ -172,11 +173,16 @@ impl<'a> TyLoweringContext<'a> {\n                 let inner_ty = self.lower_ty(inner);\n                 TyKind::Raw(lower_to_chalk_mutability(*mutability), inner_ty).intern(&Interner)\n             }\n-            TypeRef::Array(inner) => {\n+            TypeRef::Array(inner, len) => {\n                 let inner_ty = self.lower_ty(inner);\n-                // FIXME: we don't have length info here because we don't store an expression for\n-                // the length\n-                TyKind::Array(inner_ty, dummy_usize_const()).intern(&Interner)\n+\n+                let const_len = ConstData {\n+                    ty: TyKind::Scalar(Scalar::Uint(UintTy::Usize)).intern(&Interner),\n+                    value: ConstValue::Concrete(chalk_ir::ConcreteConst { interned: *len }),\n+                }\n+                .intern(&Interner);\n+\n+                TyKind::Array(inner_ty, const_len).intern(&Interner)\n             }\n             TypeRef::Slice(inner) => {\n                 let inner_ty = self.lower_ty(inner);"}, {"sha": "c2afaf6ece3ed85ec144c17f46369760d5fa172d", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=8b147624ff906a11134d2e18be071c6cb8ec4beb", "patch": "@@ -64,42 +64,42 @@ fn coerce_places() {\n             81..92 '{ loop {} }': T\n             83..90 'loop {}': !\n             88..90 '{}': ()\n-            121..132 '{ loop {} }': *mut [T; _]\n+            121..132 '{ loop {} }': *mut [T; 2]\n             123..130 'loop {}': !\n             128..130 '{}': ()\n             159..172 '{     gen() }': *mut [U]\n-            165..168 'gen': fn gen<U>() -> *mut [U; _]\n-            165..170 'gen()': *mut [U; _]\n+            165..168 'gen': fn gen<U>() -> *mut [U; 2]\n+            165..170 'gen()': *mut [U; 2]\n             185..419 '{     ...rr); }': ()\n-            195..198 'arr': &[u8; _]\n+            195..198 'arr': &[u8; 1]\n             211..215 '&[1]': &[u8; 1]\n             212..215 '[1]': [u8; 1]\n             213..214 '1': u8\n             226..227 'a': &[u8]\n-            236..239 'arr': &[u8; _]\n+            236..239 'arr': &[u8; 1]\n             249..250 'b': u8\n             253..254 'f': fn f<u8>(&[u8]) -> u8\n             253..259 'f(arr)': u8\n-            255..258 'arr': &[u8; _]\n+            255..258 'arr': &[u8; 1]\n             269..270 'c': &[u8]\n             279..286 '{ arr }': &[u8]\n-            281..284 'arr': &[u8; _]\n+            281..284 'arr': &[u8; 1]\n             296..297 'd': u8\n             300..301 'g': fn g<u8>(S<&[u8]>) -> u8\n             300..315 'g(S { a: arr })': u8\n             302..314 'S { a: arr }': S<&[u8]>\n-            309..312 'arr': &[u8; _]\n-            325..326 'e': [&[u8]; _]\n+            309..312 'arr': &[u8; 1]\n+            325..326 'e': [&[u8]; 1]\n             340..345 '[arr]': [&[u8]; 1]\n-            341..344 'arr': &[u8; _]\n-            355..356 'f': [&[u8]; _]\n+            341..344 'arr': &[u8; 1]\n+            355..356 'f': [&[u8]; 2]\n             370..378 '[arr; 2]': [&[u8]; _]\n-            371..374 'arr': &[u8; _]\n+            371..374 'arr': &[u8; 1]\n             376..377 '2': usize\n             388..389 'g': (&[u8], &[u8])\n             406..416 '(arr, arr)': (&[u8], &[u8])\n-            407..410 'arr': &[u8; _]\n-            412..415 'arr': &[u8; _]\n+            407..410 'arr': &[u8; 1]\n+            412..415 'arr': &[u8; 1]\n         \"#]],\n     );\n }\n@@ -159,7 +159,7 @@ fn infer_custom_coerce_unsized() {\n         impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n         impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n         \"#,\n-        expect![[r\"\n+        expect![[r#\"\n             257..258 'x': A<[T]>\n             278..283 '{ x }': A<[T]>\n             280..281 'x': A<[T]>\n@@ -169,23 +169,23 @@ fn infer_custom_coerce_unsized() {\n             333..334 'x': C<[T]>\n             354..359 '{ x }': C<[T]>\n             356..357 'x': C<[T]>\n-            369..370 'a': A<[u8; _]>\n-            384..385 'b': B<[u8; _]>\n-            399..400 'c': C<[u8; _]>\n+            369..370 'a': A<[u8; 2]>\n+            384..385 'b': B<[u8; 2]>\n+            399..400 'c': C<[u8; 2]>\n             414..480 '{     ...(c); }': ()\n             424..425 'd': A<[{unknown}]>\n             428..432 'foo1': fn foo1<{unknown}>(A<[{unknown}]>) -> A<[{unknown}]>\n             428..435 'foo1(a)': A<[{unknown}]>\n-            433..434 'a': A<[u8; _]>\n+            433..434 'a': A<[u8; 2]>\n             445..446 'e': B<[u8]>\n             449..453 'foo2': fn foo2<u8>(B<[u8]>) -> B<[u8]>\n             449..456 'foo2(b)': B<[u8]>\n-            454..455 'b': B<[u8; _]>\n+            454..455 'b': B<[u8; 2]>\n             466..467 'f': C<[u8]>\n             470..474 'foo3': fn foo3<u8>(C<[u8]>) -> C<[u8]>\n             470..477 'foo3(c)': C<[u8]>\n-            475..476 'c': C<[u8; _]>\n-        \"]],\n+            475..476 'c': C<[u8; 2]>\n+        \"#]],\n     );\n }\n "}, {"sha": "b36e77e91e596c65ff6d5fe17883214b4c752f5f", "filename": "crates/hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=8b147624ff906a11134d2e18be071c6cb8ec4beb", "patch": "@@ -345,19 +345,19 @@ fn infer_pattern_match_arr() {\n         \"#,\n         expect![[r#\"\n             10..179 '{     ...   } }': ()\n-            20..23 'arr': [f64; _]\n+            20..23 'arr': [f64; 2]\n             36..46 '[0.0, 1.0]': [f64; 2]\n             37..40 '0.0': f64\n             42..45 '1.0': f64\n             52..177 'match ...     }': ()\n-            58..61 'arr': [f64; _]\n-            72..80 '[1.0, a]': [f64; _]\n+            58..61 'arr': [f64; 2]\n+            72..80 '[1.0, a]': [f64; 2]\n             73..76 '1.0': f64\n             73..76 '1.0': f64\n             78..79 'a': f64\n             84..110 '{     ...     }': ()\n             98..99 'a': f64\n-            120..126 '[b, c]': [f64; _]\n+            120..126 '[b, c]': [f64; 2]\n             121..122 'b': f64\n             124..125 'c': f64\n             130..171 '{     ...     }': ()"}, {"sha": "19775a4ece409de46fb0d8a03ae3697074a3c09d", "filename": "crates/hir_ty/src/tests/simple.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b147624ff906a11134d2e18be071c6cb8ec4beb/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=8b147624ff906a11134d2e18be071c6cb8ec4beb", "patch": "@@ -1313,7 +1313,7 @@ fn infer_array() {\n             255..256 'a': [&str; 1]\n             258..263 '[\"b\"]': [&str; 1]\n             259..262 '\"b\"': &str\n-            274..275 'x': [u8; _]\n+            274..275 'x': [u8; 0]\n             287..289 '[]': [u8; 0]\n         \"#]],\n     );\n@@ -2409,38 +2409,38 @@ fn infer_operator_overload() {\n             320..422 '{     ...     }': V2\n             334..335 'x': f32\n             338..342 'self': V2\n-            338..344 'self.0': [f32; _]\n+            338..344 'self.0': [f32; 2]\n             338..347 'self.0[0]': {unknown}\n             338..358 'self.0...s.0[0]': f32\n             345..346 '0': i32\n             350..353 'rhs': V2\n-            350..355 'rhs.0': [f32; _]\n+            350..355 'rhs.0': [f32; 2]\n             350..358 'rhs.0[0]': {unknown}\n             356..357 '0': i32\n             372..373 'y': f32\n             376..380 'self': V2\n-            376..382 'self.0': [f32; _]\n+            376..382 'self.0': [f32; 2]\n             376..385 'self.0[1]': {unknown}\n             376..396 'self.0...s.0[1]': f32\n             383..384 '1': i32\n             388..391 'rhs': V2\n-            388..393 'rhs.0': [f32; _]\n+            388..393 'rhs.0': [f32; 2]\n             388..396 'rhs.0[1]': {unknown}\n             394..395 '1': i32\n-            406..408 'V2': V2([f32; _]) -> V2\n+            406..408 'V2': V2([f32; 2]) -> V2\n             406..416 'V2([x, y])': V2\n             409..415 '[x, y]': [f32; 2]\n             410..411 'x': f32\n             413..414 'y': f32\n             436..519 '{     ... vb; }': ()\n             446..448 'va': V2\n-            451..453 'V2': V2([f32; _]) -> V2\n+            451..453 'V2': V2([f32; 2]) -> V2\n             451..465 'V2([0.0, 1.0])': V2\n             454..464 '[0.0, 1.0]': [f32; 2]\n             455..458 '0.0': f32\n             460..463 '1.0': f32\n             475..477 'vb': V2\n-            480..482 'V2': V2([f32; _]) -> V2\n+            480..482 'V2': V2([f32; 2]) -> V2\n             480..494 'V2([0.0, 1.0])': V2\n             483..493 '[0.0, 1.0]': [f32; 2]\n             484..487 '0.0': f32"}]}