{"sha": "da03950f62a43ff3ca32f931a3edecc71a214f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMDM5NTBmNjJhNDNmZjNjYTMyZjkzMWEzZWRlY2M3MWEyMTRmM2I=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-01-18T16:36:12Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-05-26T07:59:21Z"}, "message": "Move length computation to `ExactSizeIterator` impls\n\nand reuse it in `size_hint`.", "tree": {"sha": "e507f96a86da4c33f16bb9ddfa8ba63c541d2b2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e507f96a86da4c33f16bb9ddfa8ba63c541d2b2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da03950f62a43ff3ca32f931a3edecc71a214f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da03950f62a43ff3ca32f931a3edecc71a214f3b", "html_url": "https://github.com/rust-lang/rust/commit/da03950f62a43ff3ca32f931a3edecc71a214f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da03950f62a43ff3ca32f931a3edecc71a214f3b/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baa9680a3449a585481bd4b124f3e1f108262877", "url": "https://api.github.com/repos/rust-lang/rust/commits/baa9680a3449a585481bd4b124f3e1f108262877", "html_url": "https://github.com/rust-lang/rust/commit/baa9680a3449a585481bd4b124f3e1f108262877"}], "stats": {"total": 60, "additions": 36, "deletions": 24}, "files": [{"sha": "38337c7493eefba1ed011dbc609559e1f386e94d", "filename": "src/libcore/char.rs", "status": "modified", "additions": 36, "deletions": 24, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/da03950f62a43ff3ca32f931a3edecc71a214f3b/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da03950f62a43ff3ca32f931a3edecc71a214f3b/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=da03950f62a43ff3ca32f931a3edecc71a214f3b", "patch": "@@ -413,12 +413,12 @@ pub struct EscapeUnicode {\n \n #[derive(Clone, Debug)]\n enum EscapeUnicodeState {\n-    Backslash,\n-    Type,\n-    LeftBrace,\n-    Value,\n-    RightBrace,\n     Done,\n+    RightBrace,\n+    Value,\n+    LeftBrace,\n+    Type,\n+    Backslash,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -457,16 +457,9 @@ impl Iterator for EscapeUnicode {\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let n = match self.state {\n-            EscapeUnicodeState::Backslash => 5,\n-            EscapeUnicodeState::Type => 4,\n-            EscapeUnicodeState::LeftBrace => 3,\n-            EscapeUnicodeState::Value => 2,\n-            EscapeUnicodeState::RightBrace => 1,\n-            EscapeUnicodeState::Done => 0,\n-        };\n-        let n = n + self.hex_digit_idx;\n+        let n = self.len();\n         (n, Some(n))\n     }\n \n@@ -489,7 +482,20 @@ impl Iterator for EscapeUnicode {\n }\n \n #[stable(feature = \"exact_size_escape\", since = \"1.11.0\")]\n-impl ExactSizeIterator for EscapeUnicode { }\n+impl ExactSizeIterator for EscapeUnicode {\n+    #[inline]\n+    fn len(&self) -> usize {\n+        // The match is a single memory access with no branching\n+        self.hex_digit_idx + match self.state {\n+            EscapeUnicodeState::Done => 0,\n+            EscapeUnicodeState::RightBrace => 1,\n+            EscapeUnicodeState::Value => 2,\n+            EscapeUnicodeState::LeftBrace => 3,\n+            EscapeUnicodeState::Type => 4,\n+            EscapeUnicodeState::Backslash => 5,\n+        }\n+    }\n+}\n \n /// An iterator that yields the literal escape code of a `char`.\n ///\n@@ -506,9 +512,9 @@ pub struct EscapeDefault {\n \n #[derive(Clone, Debug)]\n enum EscapeDefaultState {\n-    Backslash(char),\n-    Char(char),\n     Done,\n+    Char(char),\n+    Backslash(char),\n     Unicode(EscapeUnicode),\n }\n \n@@ -531,13 +537,10 @@ impl Iterator for EscapeDefault {\n         }\n     }\n \n+    #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        match self.state {\n-            EscapeDefaultState::Char(_) => (1, Some(1)),\n-            EscapeDefaultState::Backslash(_) => (2, Some(2)),\n-            EscapeDefaultState::Unicode(ref iter) => iter.size_hint(),\n-            EscapeDefaultState::Done => (0, Some(0)),\n-        }\n+        let n = self.len();\n+        (n, Some(n))\n     }\n \n     #[inline]\n@@ -583,7 +586,16 @@ impl Iterator for EscapeDefault {\n }\n \n #[stable(feature = \"exact_size_escape\", since = \"1.11.0\")]\n-impl ExactSizeIterator for EscapeDefault { }\n+impl ExactSizeIterator for EscapeDefault {\n+    fn len(&self) -> usize {\n+        match self.state {\n+            EscapeDefaultState::Done => 0,\n+            EscapeDefaultState::Char(_) => 1,\n+            EscapeDefaultState::Backslash(_) => 2,\n+            EscapeDefaultState::Unicode(ref iter) => iter.len(),\n+        }\n+    }\n+}\n \n /// An iterator over `u8` entries represending the UTF-8 encoding of a `char`\n /// value."}]}