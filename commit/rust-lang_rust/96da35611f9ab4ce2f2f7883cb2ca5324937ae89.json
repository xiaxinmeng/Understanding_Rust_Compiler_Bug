{"sha": "96da35611f9ab4ce2f2f7883cb2ca5324937ae89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ZGEzNTYxMWY5YWI0Y2UyZjJmNzg4M2NiMmNhNTMyNDkzN2FlODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-10T08:06:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-10T08:06:00Z"}, "message": "auto merge of #9090 : jbclements/rust/let-var-hygiene, r=luqmana\n\nThis appears to fix issue #9049. It also re-enables the ICE check on comparing idents for equality; it appears that ICEs are better than seg faults.", "tree": {"sha": "69f411ddf6693f69bae7c1e90bd78564f1dfeee0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69f411ddf6693f69bae7c1e90bd78564f1dfeee0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96da35611f9ab4ce2f2f7883cb2ca5324937ae89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96da35611f9ab4ce2f2f7883cb2ca5324937ae89", "html_url": "https://github.com/rust-lang/rust/commit/96da35611f9ab4ce2f2f7883cb2ca5324937ae89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96da35611f9ab4ce2f2f7883cb2ca5324937ae89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "485446b97ff9c59939b8e583adf447b0ad211bd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/485446b97ff9c59939b8e583adf447b0ad211bd8", "html_url": "https://github.com/rust-lang/rust/commit/485446b97ff9c59939b8e583adf447b0ad211bd8"}, {"sha": "634bddde0577b7630f39bcf7edf2f52e22982dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/634bddde0577b7630f39bcf7edf2f52e22982dd5", "html_url": "https://github.com/rust-lang/rust/commit/634bddde0577b7630f39bcf7edf2f52e22982dd5"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "d54a079a2bfeb2f7a42b71179b4407c408faf2ef", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96da35611f9ab4ce2f2f7883cb2ca5324937ae89/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96da35611f9ab4ce2f2f7883cb2ca5324937ae89/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=96da35611f9ab4ce2f2f7883cb2ca5324937ae89", "patch": "@@ -671,7 +671,8 @@ fn enter_opt<'r>(bcx: @mut Block,\n                     let mut reordered_patterns = ~[];\n                     let r = ty::lookup_struct_fields(tcx, struct_id);\n                     for field in r.iter() {\n-                            match field_pats.iter().find(|p| p.ident == field.ident) {\n+                            match field_pats.iter().find(|p| p.ident.name\n+                                                         == field.ident.name) {\n                                 None => reordered_patterns.push(dummy),\n                                 Some(fp) => reordered_patterns.push(fp.pat)\n                             }\n@@ -752,7 +753,7 @@ fn enter_rec_or_struct<'r>(bcx: @mut Block,\n             ast::PatStruct(_, ref fpats, _) => {\n                 let mut pats = ~[];\n                 for fname in fields.iter() {\n-                    match fpats.iter().find(|p| p.ident == *fname) {\n+                    match fpats.iter().find(|p| p.ident.name == fname.name) {\n                         None => pats.push(dummy),\n                         Some(pat) => pats.push(pat.pat)\n                     }\n@@ -1102,7 +1103,7 @@ fn collect_record_or_struct_fields(bcx: @mut Block,\n     fn extend(idents: &mut ~[ast::Ident], field_pats: &[ast::FieldPat]) {\n         for field_pat in field_pats.iter() {\n             let field_ident = field_pat.ident;\n-            if !idents.iter().any(|x| *x == field_ident) {\n+            if !idents.iter().any(|x| x.name == field_ident.name) {\n                 idents.push(field_ident);\n             }\n         }"}, {"sha": "300fb64863ca8c0fad6b781b21d1562cc5e83855", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96da35611f9ab4ce2f2f7883cb2ca5324937ae89/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96da35611f9ab4ce2f2f7883cb2ca5324937ae89/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=96da35611f9ab4ce2f2f7883cb2ca5324937ae89", "patch": "@@ -256,7 +256,8 @@ impl Reflector {\n               let fields = ty::struct_fields(tcx, did, substs);\n               let mut named_fields = false;\n               if !fields.is_empty() {\n-                  named_fields = fields[0].ident != special_idents::unnamed_field;\n+                  named_fields =\n+                        fields[0].ident.name != special_idents::unnamed_field.name;\n               }\n \n               let extra = ~[self.c_slice(ty_to_str(tcx, t).to_managed()),"}, {"sha": "3604762728965f11a2243ece93488f46d601bf76", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/96da35611f9ab4ce2f2f7883cb2ca5324937ae89/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96da35611f9ab4ce2f2f7883cb2ca5324937ae89/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=96da35611f9ab4ce2f2f7883cb2ca5324937ae89", "patch": "@@ -28,25 +28,15 @@ use extra::serialize::{Encodable, Decodable, Encoder, Decoder};\n // table) and a SyntaxContext to track renaming and\n // macro expansion per Flatt et al., \"Macros\n // That Work Together\"\n-#[deriving(Clone, Eq, IterBytes, ToStr)]\n+#[deriving(Clone, IterBytes, ToStr)]\n pub struct Ident { name: Name, ctxt: SyntaxContext }\n \n impl Ident {\n     /// Construct an identifier with the given name and an empty context:\n     pub fn new(name: Name) -> Ident { Ident {name: name, ctxt: EMPTY_CTXT}}\n }\n \n-// defining eq in this way is a way of guaranteeing that later stages of the\n-// compiler don't compare identifiers unhygienically. Unfortunately, some tests\n-// (specifically debuginfo in no-opt) want to do these comparisons, and that\n-// seems fine.  If only I could find a nice way to statically ensure that\n-// the compiler \"proper\" never compares identifiers.... I'm leaving this\n-// code here (commented out) for potential use in debugging. Specifically, if\n-// there's a bug where \"identifiers aren't matching\", it may be because\n-// they should be compared using mtwt_resolve. In such a case, re-enabling this\n-// code (and disabling deriving(Eq) for Idents) could help to isolate the\n-// problem\n-/* impl Eq for Ident {\n+impl Eq for Ident {\n     fn eq(&self, other: &Ident) -> bool {\n         if (self.ctxt == other.ctxt) {\n             self.name == other.name\n@@ -64,7 +54,6 @@ impl Ident {\n         ! self.eq(other)\n     }\n }\n-*/\n \n /// A SyntaxContext represents a chain of macro-expandings\n /// and renamings. Each macro expansion corresponds to"}, {"sha": "83d10627d2e4c5533061218b4987019dcf774a29", "filename": "src/test/run-pass/match-in-macro.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/96da35611f9ab4ce2f2f7883cb2ca5324937ae89/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96da35611f9ab4ce2f2f7883cb2ca5324937ae89/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-in-macro.rs?ref=96da35611f9ab4ce2f2f7883cb2ca5324937ae89", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    B { b1: int, bb1: int},\n+}\n+\n+macro_rules! match_inside_expansion(\n+    () => (\n+        match B { b1:29 , bb1: 100} {\n+            B { b1:b2 , bb1:bb2 } => b2+bb2\n+        }\n+    )\n+)\n+\n+fn main() {\n+    assert_eq!(match_inside_expansion!(),129);\n+}"}]}