{"sha": "bda083fa706c1a5a26a5c197960197086a84b4b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYTA4M2ZhNzA2YzFhNWEyNmE1YzE5Nzk2MDE5NzA4NmE4NGI0Yjk=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-10-01T09:55:52Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-10-01T13:24:23Z"}, "message": "Avoid unnecessary temporaries when ref'ing a DST value\n\nA DST value and a fat pointer to it have the same representation, all we\nhave to do is to adjust the type of the datum holding the pointer.", "tree": {"sha": "aae79fcb6c7a6f2568b7fcb8980b690eb1101607", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aae79fcb6c7a6f2568b7fcb8980b690eb1101607"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bda083fa706c1a5a26a5c197960197086a84b4b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bda083fa706c1a5a26a5c197960197086a84b4b9", "html_url": "https://github.com/rust-lang/rust/commit/bda083fa706c1a5a26a5c197960197086a84b4b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bda083fa706c1a5a26a5c197960197086a84b4b9/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5ba127734f7754a326d3197229e94c8a5a3be23", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5ba127734f7754a326d3197229e94c8a5a3be23", "html_url": "https://github.com/rust-lang/rust/commit/e5ba127734f7754a326d3197229e94c8a5a3be23"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "9d006771445d17da4f5bbc0271e503e394716bba", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bda083fa706c1a5a26a5c197960197086a84b4b9/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda083fa706c1a5a26a5c197960197086a84b4b9/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=bda083fa706c1a5a26a5c197960197086a84b4b9", "patch": "@@ -1691,29 +1691,20 @@ fn trans_uniq_expr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     immediate_rvalue_bcx(bcx, val, box_ty).to_expr_datumblock()\n }\n \n-fn ref_fat_ptr<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n-                           lval: Datum<'tcx, Lvalue>)\n-                           -> DatumBlock<'blk, 'tcx, Expr> {\n-    let dest_ty = bcx.tcx().mk_imm_ref(bcx.tcx().mk_region(ty::ReStatic), lval.ty);\n-    let scratch = rvalue_scratch_datum(bcx, dest_ty, \"__fat_ptr\");\n-    memcpy_ty(bcx, scratch.val, lval.val, scratch.ty);\n-\n-    DatumBlock::new(bcx, scratch.to_expr_datum())\n-}\n-\n fn trans_addr_of<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                              expr: &hir::Expr,\n                              subexpr: &hir::Expr)\n                              -> DatumBlock<'blk, 'tcx, Expr> {\n     let _icx = push_ctxt(\"trans_addr_of\");\n     let mut bcx = bcx;\n     let sub_datum = unpack_datum!(bcx, trans_to_lvalue(bcx, subexpr, \"addr_of\"));\n+    let ty = expr_ty(bcx, expr);\n     if !type_is_sized(bcx.tcx(), sub_datum.ty) {\n-        // DST lvalue, close to a fat pointer\n-        ref_fat_ptr(bcx, sub_datum)\n+        // Always generate an lvalue datum, because this pointer doesn't own\n+        // the data and cleanup is scheduled elsewhere.\n+        DatumBlock::new(bcx, Datum::new(sub_datum.val, ty, LvalueExpr(sub_datum.kind)))\n     } else {\n         // Sized value, ref to a thin pointer\n-        let ty = expr_ty(bcx, expr);\n         immediate_rvalue_bcx(bcx, sub_datum.val, ty).to_expr_datumblock()\n     }\n }"}, {"sha": "08eec0045f78a07631b52149568e07078ffd3449", "filename": "src/test/codegen/refs.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bda083fa706c1a5a26a5c197960197086a84b4b9/src%2Ftest%2Fcodegen%2Frefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bda083fa706c1a5a26a5c197960197086a84b4b9/src%2Ftest%2Fcodegen%2Frefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frefs.rs?ref=bda083fa706c1a5a26a5c197960197086a84b4b9", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+#![crate_type = \"lib\"]\n+\n+// Hack to get the correct size for the length part in slices\n+// CHECK: @helper([[USIZE:i[0-9]+]])\n+#[no_mangle]\n+fn helper(_: usize) {\n+}\n+\n+// CHECK-LABEL: @ref_dst\n+#[no_mangle]\n+pub fn ref_dst(s: &[u8]) {\n+    // We used to generate an extra alloca and memcpy to ref the dst, so check that we copy\n+    // directly to the alloca for \"x\"\n+// CHECK: [[SRC:%[0-9]+]] = bitcast { i8*, [[USIZE]] }* %s to i8*\n+// CHECK: [[DST:%[0-9]+]] = bitcast { i8*, [[USIZE]] }* %x to i8*\n+// CHECK: call void @llvm.memcpy.{{.*}}(i8* [[DST]], i8* [[SRC]],\n+    let x = &*s;\n+}"}]}