{"sha": "cb1eb9d0c41739fc6abf4361c263013004463072", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMWViOWQwYzQxNzM5ZmM2YWJmNDM2MWMyNjMwMTMwMDQ0NjMwNzI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-04T00:24:12Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:38Z"}, "message": "Remove automatic built-in SIMD operators.\n\nThese should now go via the intrinsics, and implement the standard traits.", "tree": {"sha": "81f23709faf6148a0b83ff1522ce5160bfb57044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f23709faf6148a0b83ff1522ce5160bfb57044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb1eb9d0c41739fc6abf4361c263013004463072", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb1eb9d0c41739fc6abf4361c263013004463072", "html_url": "https://github.com/rust-lang/rust/commit/cb1eb9d0c41739fc6abf4361c263013004463072", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb1eb9d0c41739fc6abf4361c263013004463072/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d8b489bc93b2f8754a0de386bd4e960b05a5b47", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d8b489bc93b2f8754a0de386bd4e960b05a5b47", "html_url": "https://github.com/rust-lang/rust/commit/8d8b489bc93b2f8754a0de386bd4e960b05a5b47"}], "stats": {"total": 50, "additions": 4, "deletions": 46}, "files": [{"sha": "59856a4a9c639c022859aad6f5b140e389cabd84", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/cb1eb9d0c41739fc6abf4361c263013004463072/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb1eb9d0c41739fc6abf4361c263013004463072/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=cb1eb9d0c41739fc6abf4361c263013004463072", "patch": "@@ -82,18 +82,6 @@ pub fn check_binop<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     check_expr(fcx, lhs_expr);\n     let lhs_ty = fcx.resolve_type_vars_if_possible(fcx.expr_ty(lhs_expr));\n \n-    // Annoyingly, SIMD ops don't fit into the PartialEq/PartialOrd\n-    // traits, because their return type is not bool. Perhaps this\n-    // should change, but for now if LHS is SIMD we go down a\n-    // different path that bypassess all traits.\n-    if lhs_ty.is_simd() {\n-        check_expr_coercable_to_type(fcx, rhs_expr, lhs_ty);\n-        let rhs_ty = fcx.resolve_type_vars_if_possible(fcx.expr_ty(lhs_expr));\n-        let return_ty = enforce_builtin_binop_types(fcx, lhs_expr, lhs_ty, rhs_expr, rhs_ty, op);\n-        fcx.write_ty(expr.id, return_ty);\n-        return;\n-    }\n-\n     match BinOpCategory::from(op) {\n         BinOpCategory::Shortcircuit => {\n             // && and || are a simple case.\n@@ -154,12 +142,6 @@ fn enforce_builtin_binop_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         }\n \n         BinOpCategory::Shift => {\n-            // For integers, the shift amount can be of any integral\n-            // type. For simd, the type must match exactly.\n-            if lhs_ty.is_simd() {\n-                demand::suptype(fcx, rhs_expr.span, lhs_ty, rhs_ty);\n-            }\n-\n             // result type is same as LHS always\n             lhs_ty\n         }\n@@ -174,27 +156,7 @@ fn enforce_builtin_binop_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         BinOpCategory::Comparison => {\n             // both LHS and RHS and result will have the same type\n             demand::suptype(fcx, rhs_expr.span, lhs_ty, rhs_ty);\n-\n-            // if this is simd, result is same as lhs, else bool\n-            if lhs_ty.is_simd() {\n-                let unit_ty = lhs_ty.simd_type(tcx);\n-                debug!(\"enforce_builtin_binop_types: lhs_ty={:?} unit_ty={:?}\",\n-                       lhs_ty,\n-                       unit_ty);\n-                if !unit_ty.is_integral() {\n-                    tcx.sess.span_err(\n-                        lhs_expr.span,\n-                        &format!(\"binary comparison operation `{}` not supported \\\n-                                  for floating point SIMD vector `{}`\",\n-                                 ast_util::binop_to_string(op.node),\n-                                 lhs_ty));\n-                    tcx.types.err\n-                } else {\n-                    lhs_ty\n-                }\n-            } else {\n-                tcx.mk_bool()\n-            }\n+            tcx.mk_bool()\n         }\n     }\n }\n@@ -427,29 +389,25 @@ fn is_builtin_binop<'tcx>(lhs: Ty<'tcx>,\n \n         BinOpCategory::Shift => {\n             lhs.references_error() || rhs.references_error() ||\n-                lhs.is_integral() && rhs.is_integral() ||\n-                lhs.is_simd() && rhs.is_simd()\n+                lhs.is_integral() && rhs.is_integral()\n         }\n \n         BinOpCategory::Math => {\n             lhs.references_error() || rhs.references_error() ||\n                 lhs.is_integral() && rhs.is_integral() ||\n-                lhs.is_floating_point() && rhs.is_floating_point() ||\n-                lhs.is_simd() && rhs.is_simd()\n+                lhs.is_floating_point() && rhs.is_floating_point()\n         }\n \n         BinOpCategory::Bitwise => {\n             lhs.references_error() || rhs.references_error() ||\n                 lhs.is_integral() && rhs.is_integral() ||\n                 lhs.is_floating_point() && rhs.is_floating_point() ||\n-                lhs.is_simd() && rhs.is_simd() ||\n                 lhs.is_bool() && rhs.is_bool()\n         }\n \n         BinOpCategory::Comparison => {\n             lhs.references_error() || rhs.references_error() ||\n-                lhs.is_scalar() && rhs.is_scalar() ||\n-                lhs.is_simd() && rhs.is_simd()\n+                lhs.is_scalar() && rhs.is_scalar()\n         }\n     }\n }"}]}