{"sha": "62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyYmE4NWI3YWFmNGFjMWRiYmY4Yjg5NjA1ZmYyNGQ0MGY5Mzk2OWY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-14T04:34:20Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-08-17T21:41:40Z"}, "message": "Rebase cleanup: is_simd lost its parameter.", "tree": {"sha": "e785c9a74eaea37cfdafe37bd11dab8d7b30af3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e785c9a74eaea37cfdafe37bd11dab8d7b30af3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f", "html_url": "https://github.com/rust-lang/rust/commit/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b242497d3a3b3fc4e56cf80053dfbecf1b1d308", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b242497d3a3b3fc4e56cf80053dfbecf1b1d308", "html_url": "https://github.com/rust-lang/rust/commit/4b242497d3a3b3fc4e56cf80053dfbecf1b1d308"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "dbfd76d3082c5faf620ab8817ef26505cfa3e6d5", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f", "patch": "@@ -1358,10 +1358,10 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n \n     if let Some(cmp_op) = comparison {\n         assert_eq!(arg_tys.len(), 2);\n-        require!(arg_tys[0].is_simd(tcx),\n+        require!(arg_tys[0].is_simd(),\n                  \"SIMD comparison intrinsic monomorphized for non-SIMD argument type `{}`\",\n                  arg_tys[0]);\n-        require!(ret_ty.is_simd(tcx),\n+        require!(ret_ty.is_simd(),\n                  \"SIMD comparison intrinsic monomorphized for non-SIMD return type `{}`\",\n                  ret_ty);\n \n@@ -1393,10 +1393,10 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n                                           \"bad `simd_shuffle` instruction only caught in trans?\")\n         };\n \n-        require!(arg_tys[0].is_simd(tcx),\n+        require!(arg_tys[0].is_simd(),\n                  \"SIMD shuffle intrinsic monomorphized with non-SIMD input type `{}`\",\n                  arg_tys[0]);\n-        require!(ret_ty.is_simd(tcx),\n+        require!(ret_ty.is_simd(),\n                  \"SIMD shuffle intrinsic monomorphized for non-SIMD return type `{}`\",\n                  ret_ty);\n \n@@ -1451,7 +1451,7 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n     }\n \n     if name == \"simd_insert\" {\n-        require!(arg_tys[0].is_simd(tcx),\n+        require!(arg_tys[0].is_simd(),\n                  \"SIMD insert intrinsic monomorphized for non-SIMD input type\");\n \n         let elem_ty = arg_tys[0].simd_type(tcx);\n@@ -1460,7 +1460,7 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n         return InsertElement(bcx, llargs[0], llargs[2], llargs[1])\n     }\n     if name == \"simd_extract\" {\n-        require!(arg_tys[0].is_simd(tcx),\n+        require!(arg_tys[0].is_simd(),\n                  \"SIMD insert intrinsic monomorphized for non-SIMD input type\");\n \n         let elem_ty = arg_tys[0].simd_type(tcx);\n@@ -1470,10 +1470,10 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n     }\n \n     if name == \"simd_cast\" {\n-        require!(arg_tys[0].is_simd(tcx),\n+        require!(arg_tys[0].is_simd(),\n                  \"SIMD cast intrinsic monomorphized with non-SIMD input type `{}`\",\n                  arg_tys[0]);\n-        require!(ret_ty.is_simd(tcx),\n+        require!(ret_ty.is_simd(),\n                  \"SIMD cast intrinsic monomorphized with non-SIMD return type `{}`\",\n                  ret_ty);\n         require!(arg_tys[0].simd_size(tcx) == ret_ty.simd_size(tcx),\n@@ -1614,7 +1614,7 @@ fn generic_simd_intrinsic<'blk, 'tcx, 'a>\n         ($($name: ident: $($($p: ident),* => $call: expr),*;)*) => {\n             $(\n                 if name == stringify!($name) {\n-                    require!(arg_tys[0].is_simd(tcx),\n+                    require!(arg_tys[0].is_simd(),\n                              \"`{}` intrinsic monomorphized with non-SIMD type `{}`\",\n                              name, arg_tys[0]);\n                     let in_ = arg_tys[0].simd_type(tcx);"}, {"sha": "fe59054dd08407e7c339c354316a19c30ec89dce", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=62ba85b7aaf4ac1dbbf8b89605ff24d40f93969f", "patch": "@@ -481,7 +481,7 @@ fn match_intrinsic_type_to_type<'tcx, 'a>(\n         },\n         Pointer(_) => unimplemented!(),\n         Vector(ref inner_expected, len) => {\n-            if !t.is_simd(tcx) {\n+            if !t.is_simd() {\n                 simple_error(&format!(\"non-simd type `{}`\", t),\n                              \"simd type\");\n                 return;"}]}