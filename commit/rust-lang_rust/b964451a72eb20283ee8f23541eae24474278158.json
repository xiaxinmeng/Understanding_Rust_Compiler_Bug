{"sha": "b964451a72eb20283ee8f23541eae24474278158", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NjQ0NTFhNzJlYjIwMjgzZWU4ZjIzNTQxZWFlMjQ0NzQyNzgxNTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-25T23:00:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-25T23:00:15Z"}, "message": "Rollup merge of #71140 - oli-obk:static_cycle, r=RalfJung\n\n[breaking change] Disallow statics initializing themselves\n\nfixes #71078\n\nSelf-initialization is unsound because it breaks privacy assumptions that unsafe code can make. In\n\n```rust\npub mod foo {\n    #[derive(Debug, Copy, Clone)]\n    pub struct Foo {\n        x: (),\n    }\n}\n\npub static FOO: foo::Foo = FOO;\n```\n\nunsafe could could expect that ony functions inside the `foo` module were able to create a value of type `Foo`.", "tree": {"sha": "2da08db096a823c52e089e473aa46751645a8732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da08db096a823c52e089e473aa46751645a8732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b964451a72eb20283ee8f23541eae24474278158", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJepMEACRBK7hj4Ov3rIwAAdHIIAIuWu02fNUl1Wk+n1lVwDcIH\nbY/zosocIAuWwdvq8GjEp+GEcEtwCYekqIx/+8ptKuPephgKIZaOScK1L8UoM522\nCUyRa0EBz0Cv0aQ9NDhXaQBYhMxtbTxptjUkWjQJ20yDU7nPhtZnWQco2QyGgtn6\ny3aqay1c/0x8O0eMGXPzuTuSBkq6JJt8H78nDmg4WM7SSR4UvBHMATafWI1ZbeNt\nVHwJGbHnvJjGnY56WmRZ1jv08W8fFJ7NWvWmRw+9yxXRo0d2RtRkmEK494hdA3FZ\n5yGLs0Ek/J56HD/FaZOyhNc9mwbjdNg6mObrZhH5ULIOCnnpCv32Nm2IFpA1qe8=\n=NqXT\n-----END PGP SIGNATURE-----\n", "payload": "tree 2da08db096a823c52e089e473aa46751645a8732\nparent e51cbc8376857f40ed053f54fc1fbe90f6817cdd\nparent e4ab4ee020479d9312560e29056313ee9836c6d2\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587855615 +0200\ncommitter GitHub <noreply@github.com> 1587855615 +0200\n\nRollup merge of #71140 - oli-obk:static_cycle, r=RalfJung\n\n[breaking change] Disallow statics initializing themselves\n\nfixes #71078\n\nSelf-initialization is unsound because it breaks privacy assumptions that unsafe code can make. In\n\n```rust\npub mod foo {\n    #[derive(Debug, Copy, Clone)]\n    pub struct Foo {\n        x: (),\n    }\n}\n\npub static FOO: foo::Foo = FOO;\n```\n\nunsafe could could expect that ony functions inside the `foo` module were able to create a value of type `Foo`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b964451a72eb20283ee8f23541eae24474278158", "html_url": "https://github.com/rust-lang/rust/commit/b964451a72eb20283ee8f23541eae24474278158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b964451a72eb20283ee8f23541eae24474278158/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e51cbc8376857f40ed053f54fc1fbe90f6817cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e51cbc8376857f40ed053f54fc1fbe90f6817cdd", "html_url": "https://github.com/rust-lang/rust/commit/e51cbc8376857f40ed053f54fc1fbe90f6817cdd"}, {"sha": "e4ab4ee020479d9312560e29056313ee9836c6d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4ab4ee020479d9312560e29056313ee9836c6d2", "html_url": "https://github.com/rust-lang/rust/commit/e4ab4ee020479d9312560e29056313ee9836c6d2"}], "stats": {"total": 54, "additions": 44, "deletions": 10}, "files": [{"sha": "0d0ed465c1cc6a1e9b4b0045e08a5ee525e2b1b1", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b964451a72eb20283ee8f23541eae24474278158/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b964451a72eb20283ee8f23541eae24474278158/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=b964451a72eb20283ee8f23541eae24474278158", "patch": "@@ -400,7 +400,18 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n                 // We can still be zero-sized in this branch, in which case we have to\n                 // return `None`.\n-                if size.bytes() == 0 { None } else { Some(ptr) }\n+                if size.bytes() == 0 {\n+                    // We may be reading from a static.\n+                    // In order to ensure that `static FOO: Type = FOO;` causes a cycle error\n+                    // instead of magically pulling *any* ZST value from the ether, we need to\n+                    // actually access the referenced allocation. The caller is likely\n+                    // to short-circuit on `None`, so we trigger the access here to\n+                    // make sure it happens.\n+                    self.get_raw(ptr.alloc_id)?;\n+                    None\n+                } else {\n+                    Some(ptr)\n+                }\n             }\n         })\n     }"}, {"sha": "4d76a23005065be3317121b21d12addfafc10755", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b964451a72eb20283ee8f23541eae24474278158/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b964451a72eb20283ee8f23541eae24474278158/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b964451a72eb20283ee8f23541eae24474278158", "patch": "@@ -248,13 +248,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         };\n \n+        let alloc = self.memory.get_raw(ptr.alloc_id)?;\n+\n         match mplace.layout.abi {\n             Abi::Scalar(..) => {\n-                let scalar = self.memory.get_raw(ptr.alloc_id)?.read_scalar(\n-                    self,\n-                    ptr,\n-                    mplace.layout.size,\n-                )?;\n+                let scalar = alloc.read_scalar(self, ptr, mplace.layout.size)?;\n                 Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))\n             }\n             Abi::ScalarPair(ref a, ref b) => {\n@@ -267,8 +265,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let b_offset = a_size.align_to(b.align(self).abi);\n                 assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields\n                 let b_ptr = ptr.offset(b_offset, self)?;\n-                let a_val = self.memory.get_raw(ptr.alloc_id)?.read_scalar(self, a_ptr, a_size)?;\n-                let b_val = self.memory.get_raw(ptr.alloc_id)?.read_scalar(self, b_ptr, b_size)?;\n+                let a_val = alloc.read_scalar(self, a_ptr, a_size)?;\n+                let b_val = alloc.read_scalar(self, b_ptr, b_size)?;\n                 Ok(Some(ImmTy { imm: Immediate::ScalarPair(a_val, b_val), layout: mplace.layout }))\n             }\n             _ => Ok(None),"}, {"sha": "768df58e1e32e65ed229813af56a6b2309a32c63", "filename": "src/test/ui/consts/recursive-zst-static.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b964451a72eb20283ee8f23541eae24474278158/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b964451a72eb20283ee8f23541eae24474278158/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.rs?ref=b964451a72eb20283ee8f23541eae24474278158", "patch": "@@ -1,6 +1,10 @@\n-// build-pass\n+// This test ensures that we do not allow ZST statics to initialize themselves without ever\n+// actually creating a value of that type. This is important, as the ZST may have private fields\n+// that users can reasonably expect to only get initialized by their own code. Thus unsafe code\n+// can depend on this fact and will thus do unsound things when it is violated.\n+// See https://github.com/rust-lang/rust/issues/71078 for more details.\n \n-static FOO: () = FOO;\n+static FOO: () = FOO; //~ cycle detected when const-evaluating `FOO`\n \n fn main() {\n     FOO"}, {"sha": "e21dcf691ab0af41a084a28200f7fe6d1ce390da", "filename": "src/test/ui/consts/recursive-zst-static.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b964451a72eb20283ee8f23541eae24474278158/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b964451a72eb20283ee8f23541eae24474278158/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frecursive-zst-static.stderr?ref=b964451a72eb20283ee8f23541eae24474278158", "patch": "@@ -0,0 +1,21 @@\n+error[E0391]: cycle detected when const-evaluating `FOO`\n+  --> $DIR/recursive-zst-static.rs:7:18\n+   |\n+LL | static FOO: () = FOO;\n+   |                  ^^^\n+   |\n+note: ...which requires const-evaluating `FOO`...\n+  --> $DIR/recursive-zst-static.rs:7:1\n+   |\n+LL | static FOO: () = FOO;\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires const-evaluating `FOO`, completing the cycle\n+note: cycle used when const-evaluating + checking `FOO`\n+  --> $DIR/recursive-zst-static.rs:7:1\n+   |\n+LL | static FOO: () = FOO;\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}]}