{"sha": "91510db6d8d89e8907a0cbf33e6068259b3bc88b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNTEwZGI2ZDhkODllODkwN2EwY2JmMzNlNjA2ODI1OWIzYmM4OGI=", "commit": {"author": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2019-06-15T18:48:50Z"}, "committer": {"name": "Muhammad Mominul Huque", "email": "mominul2082@gmail.com", "date": "2019-06-15T18:48:50Z"}, "message": "Fall down of failures", "tree": {"sha": "8c491ef6e810bd1fc4935ab027a10d6de76f0b51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c491ef6e810bd1fc4935ab027a10d6de76f0b51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91510db6d8d89e8907a0cbf33e6068259b3bc88b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE84DWFaalCZAXJAejN68UFUDeVX0FAl0FPZIACgkQN68UFUDe\nVX27Ew//eSPMlYcSMYtM8XI3Y75TWoEyWZaKqsMu4YNGwijHxewSbZ3Ja9LpN/z7\nMU7wDEJ421t4BWKWo48HfVcoFVKckBO5D8MlEpeoOWcOJHnI6JJbsUEWuxmv9MDP\nJzDqY2jiEUf7iI5N6aOmj8yPLqooNgRzkpFAWRb0UhQmlzE9pNgcO65FM7TettYw\nbC83O3WstmZ287vRSOFJ6UtMbeQ1JAGvRxyx+dXDu1l8JTU2UHk1IaXmw6N7p33S\nfqojCfkelCOn+RkFN1PR9pFk5eERltbVASy1ZfqvIZp4J30S/WnXbSjziM53RaU1\nzQTtiRDkZRjgMtAiek0uBMjBKTay5yFVjscNfcvYYq5/cJLfCDMdN6c3F0CEjKXe\nigl41jmhP+iuHOhp2Pnq3zF5RsVOApJlyb+jOUmnrLnDOJnC9WMQBT91o1gcjd6q\nPnMRRWa0o5ocxz5LeFCLCJ4MhKpKfFaOu6eL1LBdrBlJknzsVzZyIe7Yi60v/R61\n4p+PknkLBEs6TEzrn7gOfV0LAcGUJPD8mn9+TakPxr4Hk81EfoAHR1PARPxVNX7w\nBS9evGsD00SKnQ9gajk5J91tKDHR5WUVBiAu8TTRdRYgYnQVpaqtO7chGhUvjYtd\nq6fhYUbSPzkYkZiY5AuPtHcC9sdzTH+7cLExuBBAgdauByN6l74=\n=DyRd\n-----END PGP SIGNATURE-----", "payload": "tree 8c491ef6e810bd1fc4935ab027a10d6de76f0b51\nparent 41c56c8a0d01d395e49cd199e6050b02a91cff1d\nauthor Muhammad Mominul Huque <mominul2082@gmail.com> 1560624530 +0600\ncommitter Muhammad Mominul Huque <mominul2082@gmail.com> 1560624530 +0600\n\nFall down of failures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91510db6d8d89e8907a0cbf33e6068259b3bc88b", "html_url": "https://github.com/rust-lang/rust/commit/91510db6d8d89e8907a0cbf33e6068259b3bc88b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91510db6d8d89e8907a0cbf33e6068259b3bc88b/comments", "author": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mominul", "id": 9459891, "node_id": "MDQ6VXNlcjk0NTk4OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/9459891?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mominul", "html_url": "https://github.com/mominul", "followers_url": "https://api.github.com/users/mominul/followers", "following_url": "https://api.github.com/users/mominul/following{/other_user}", "gists_url": "https://api.github.com/users/mominul/gists{/gist_id}", "starred_url": "https://api.github.com/users/mominul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mominul/subscriptions", "organizations_url": "https://api.github.com/users/mominul/orgs", "repos_url": "https://api.github.com/users/mominul/repos", "events_url": "https://api.github.com/users/mominul/events{/privacy}", "received_events_url": "https://api.github.com/users/mominul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41c56c8a0d01d395e49cd199e6050b02a91cff1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/41c56c8a0d01d395e49cd199e6050b02a91cff1d", "html_url": "https://github.com/rust-lang/rust/commit/41c56c8a0d01d395e49cd199e6050b02a91cff1d"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "83f8dd33c49bac26cda735b94981969fbf90efab", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91510db6d8d89e8907a0cbf33e6068259b3bc88b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/91510db6d8d89e8907a0cbf33e6068259b3bc88b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=91510db6d8d89e8907a0cbf33e6068259b3bc88b", "patch": "@@ -1225,9 +1225,8 @@ name = \"ra_tools\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"teraron 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"teraron 0.0.1 (git+https://github.com/mominul/teraron.git?branch=failure)\",\n  \"walkdir 2.2.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1683,9 +1682,8 @@ dependencies = [\n [[package]]\n name = \"teraron\"\n version = \"0.0.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+source = \"git+https://github.com/mominul/teraron.git?branch=failure#e421b697309661dfee00b4ca3804bd4de09ce2b7\"\n dependencies = [\n- \"failure 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ron 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tera 0.11.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2143,7 +2141,7 @@ dependencies = [\n \"checksum synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02353edf96d6e4dc81aea2d8490a7e9db177bf8acb0e951c24940bf866cb313f\"\n \"checksum tempfile 3.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7dc4738f2e68ed2855de5ac9cdbe05c9216773ecde4739b2f095002ab03a13ef\"\n \"checksum tera 0.11.20 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4b505279e19d8f7d24b1a9dc58327c9c36174b1a2c7ebdeac70792d017cb64f3\"\n-\"checksum teraron 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d89ad4617d1dec55331067fadaa041e813479e1779616f3d3ce9308bf46184e\"\n+\"checksum teraron 0.0.1 (git+https://github.com/mominul/teraron.git?branch=failure)\" = \"<none>\"\n \"checksum termion 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dde0593aeb8d47accea5392b39350015b5eccb12c0d98044d856983d89548dea\"\n \"checksum termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72b620c5ea021d75a735c943269bb07d30c9b77d6ac6b236bc8b5c496ef05625\"\n \"checksum text_unit 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e08bbcb7a3adbda0eb23431206b653bdad3d8dea311e72d36bf2215e27a42579\""}, {"sha": "a34c8d482e8a9cecd3d7fb92faa4ab678390b736", "filename": "crates/ra_tools/Cargo.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91510db6d8d89e8907a0cbf33e6068259b3bc88b/crates%2Fra_tools%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/91510db6d8d89e8907a0cbf33e6068259b3bc88b/crates%2Fra_tools%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2FCargo.toml?ref=91510db6d8d89e8907a0cbf33e6068259b3bc88b", "patch": "@@ -6,8 +6,7 @@ authors = [\"rust-analyzer developers\"]\n publish = false\n \n [dependencies]\n-teraron = \"0.0.1\"\n+teraron = { git = \"https://github.com/mominul/teraron.git\", branch = \"failure\" }\n walkdir = \"2.1.3\"\n itertools = \"0.8.0\"\n clap = \"2.32.0\"\n-failure = \"0.1.4\""}, {"sha": "95bb55cae98a7f5a489ccbaf3c66374fb3cf1b27", "filename": "crates/ra_tools/src/bin/pre-commit.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91510db6d8d89e8907a0cbf33e6068259b3bc88b/crates%2Fra_tools%2Fsrc%2Fbin%2Fpre-commit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91510db6d8d89e8907a0cbf33e6068259b3bc88b/crates%2Fra_tools%2Fsrc%2Fbin%2Fpre-commit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fbin%2Fpre-commit.rs?ref=91510db6d8d89e8907a0cbf33e6068259b3bc88b", "patch": "@@ -1,7 +1,5 @@\n use std::process::Command;\n \n-use failure::bail;\n-\n use ra_tools::{Result, run_rustfmt, run, project_root, Overwrite};\n \n fn main() -> Result<()> {\n@@ -19,7 +17,10 @@ fn update_staged() -> Result<()> {\n         .current_dir(&root)\n         .output()?;\n     if !output.status.success() {\n-        bail!(\"`git diff --diff-filter=MAR --name-only --cached` exited with {}\", output.status);\n+        Err(format!(\n+            \"`git diff --diff-filter=MAR --name-only --cached` exited with {}\",\n+            output.status\n+        ))?;\n     }\n     for line in String::from_utf8(output.stdout)?.lines() {\n         run(&format!(\"git update-index --add {}\", root.join(line).to_string_lossy()), \".\")?;"}, {"sha": "821209567db7735f6ab8446c4efd978e0ed45664", "filename": "crates/ra_tools/src/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91510db6d8d89e8907a0cbf33e6068259b3bc88b/crates%2Fra_tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91510db6d8d89e8907a0cbf33e6068259b3bc88b/crates%2Fra_tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Flib.rs?ref=91510db6d8d89e8907a0cbf33e6068259b3bc88b", "patch": "@@ -3,15 +3,15 @@ use std::{\n     collections::HashMap,\n     path::{Path, PathBuf},\n     process::{Command, Output, Stdio},\n-    io::{Error, ErrorKind}\n+    io::{Error as IoError, ErrorKind},\n+    error::Error\n };\n \n-use failure::bail;\n use itertools::Itertools;\n \n pub use teraron::{Mode, Overwrite, Verify};\n \n-pub type Result<T> = std::result::Result<T, failure::Error>;\n+pub type Result<T> = std::result::Result<T, Box<dyn Error>>;\n \n pub const GRAMMAR: &str = \"crates/ra_syntax/src/grammar.ron\";\n const GRAMMAR_DIR: &str = \"crates/ra_parser/src/grammar\";\n@@ -128,7 +128,7 @@ pub fn install_format_hook() -> Result<()> {\n             fs::copy(\"./target/debug/pre-commit\", result_path)?;\n         }\n     } else {\n-        return Err(Error::new(ErrorKind::AlreadyExists, \"Git hook already created\").into());\n+        Err(IoError::new(ErrorKind::AlreadyExists, \"Git hook already created\"))?;\n     }\n     Ok(())\n }\n@@ -224,7 +224,7 @@ where\n     f(cmd.args(args).current_dir(proj_dir).stderr(Stdio::inherit()));\n     let output = cmd.output()?;\n     if !output.status.success() {\n-        bail!(\"`{}` exited with {}\", cmdline, output.status);\n+        Err(format!(\"`{}` exited with {}\", cmdline, output.status))?;\n     }\n     Ok(output)\n }\n@@ -256,11 +256,11 @@ fn tests_from_dir(dir: &Path) -> Result<Tests> {\n         for (_, test) in collect_tests(&text) {\n             if test.ok {\n                 if let Some(old_test) = res.ok.insert(test.name.clone(), test) {\n-                    bail!(\"Duplicate test: {}\", old_test.name)\n+                    Err(format!(\"Duplicate test: {}\", old_test.name))?\n                 }\n             } else {\n                 if let Some(old_test) = res.err.insert(test.name.clone(), test) {\n-                    bail!(\"Duplicate test: {}\", old_test.name)\n+                    Err(format!(\"Duplicate test: {}\", old_test.name))?\n                 }\n             }\n         }"}, {"sha": "846e0223e0c44721d3de81e6c29f7c7078ba6683", "filename": "crates/ra_tools/src/main.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/91510db6d8d89e8907a0cbf33e6068259b3bc88b/crates%2Fra_tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91510db6d8d89e8907a0cbf33e6068259b3bc88b/crates%2Fra_tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tools%2Fsrc%2Fmain.rs?ref=91510db6d8d89e8907a0cbf33e6068259b3bc88b", "patch": "@@ -1,6 +1,5 @@\n use clap::{App, SubCommand};\n use core::str;\n-use failure::bail;\n use ra_tools::{\n     generate, gen_tests, install_format_hook, run, run_with_output, run_rustfmt,\n     Overwrite, Result, run_fuzzer, run_clippy,\n@@ -64,10 +63,8 @@ fn verify_installed_extensions() -> Result<()> {\n         run_with_output(r\"code --list-extensions\", \".\")?\n     };\n     if !str::from_utf8(&exts.stdout)?.contains(\"ra-lsp\") {\n-        bail!(\n-            \"Could not install the Visual Studio Code extension. Please make sure you \\\n-             have at least NodeJS 10.x installed and try again.\"\n-        );\n+        Err(\"Could not install the Visual Studio Code extension. Please make sure you \\\n+             have at least NodeJS 10.x installed and try again.\")?;\n     }\n     Ok(())\n }\n@@ -79,7 +76,7 @@ fn fix_path_for_mac() -> Result<()> {\n         const ROOT_DIR: &str = \"\";\n         let home_dir = match env::var(\"HOME\") {\n             Ok(home) => home,\n-            Err(e) => bail!(\"Failed getting HOME from environment with error: {}.\", e),\n+            Err(e) => Err(format!(\"Failed getting HOME from environment with error: {}.\", e))?,\n         };\n \n         [ROOT_DIR, &home_dir]\n@@ -93,7 +90,7 @@ fn fix_path_for_mac() -> Result<()> {\n     if !vscode_path.is_empty() {\n         let vars = match env::var_os(\"PATH\") {\n             Some(path) => path,\n-            None => bail!(\"Could not get PATH variable from env.\"),\n+            None => Err(\"Could not get PATH variable from env.\")?,\n         };\n \n         let mut paths = env::split_paths(&vars).collect::<Vec<_>>();"}]}