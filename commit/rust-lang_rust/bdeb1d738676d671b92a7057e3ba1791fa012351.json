{"sha": "bdeb1d738676d671b92a7057e3ba1791fa012351", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZWIxZDczODY3NmQ2NzFiOTJhNzA1N2UzYmExNzkxZmEwMTIzNTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-09-29T18:34:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-09-29T18:34:53Z"}, "message": "Ignore win-tcb test on non-windows", "tree": {"sha": "c01ded276c178c2e7eb57d2b81456ca775a597d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c01ded276c178c2e7eb57d2b81456ca775a597d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdeb1d738676d671b92a7057e3ba1791fa012351", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdeb1d738676d671b92a7057e3ba1791fa012351", "html_url": "https://github.com/rust-lang/rust/commit/bdeb1d738676d671b92a7057e3ba1791fa012351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdeb1d738676d671b92a7057e3ba1791fa012351/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2acd6b77413817d89a067603fe54fdc9baa66df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/2acd6b77413817d89a067603fe54fdc9baa66df0", "html_url": "https://github.com/rust-lang/rust/commit/2acd6b77413817d89a067603fe54fdc9baa66df0"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "1a909db92e3283711fc00a60061fd0b116065d43", "filename": "src/test/run-pass/issue-13259-windows-tcb-trash.rs", "status": "modified", "additions": 42, "deletions": 22, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/bdeb1d738676d671b92a7057e3ba1791fa012351/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdeb1d738676d671b92a7057e3ba1791fa012351/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13259-windows-tcb-trash.rs?ref=bdeb1d738676d671b92a7057e3ba1791fa012351", "patch": "@@ -1,28 +1,48 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n extern crate libc;\n-use libc::{c_void, LPVOID, DWORD};\n-use libc::types::os::arch::extra::LPWSTR;\n \n-extern \"system\" {\n-    fn FormatMessageW(flags: DWORD,\n-                      lpSrc: LPVOID,\n-                      msgId: DWORD,\n-                      langId: DWORD,\n-                      buf: LPWSTR,\n-                      nsize: DWORD,\n-                      args: *const c_void)\n-                      -> DWORD;\n+#[cfg(windows)]\n+mod imp {\n+    use libc::{c_void, LPVOID, DWORD};\n+    use libc::types::os::arch::extra::LPWSTR;\n+\n+    extern \"system\" {\n+        fn FormatMessageW(flags: DWORD,\n+                          lpSrc: LPVOID,\n+                          msgId: DWORD,\n+                          langId: DWORD,\n+                          buf: LPWSTR,\n+                          nsize: DWORD,\n+                          args: *const c_void)\n+                          -> DWORD;\n+    }\n+\n+    pub fn test() {\n+        let mut buf: [u16, ..50] = [0, ..50];\n+        let ret = unsafe {\n+            FormatMessageW(0x1000, 0 as *mut c_void, 1, 0x400,\n+                           buf.as_mut_ptr(), buf.len() as u32, 0 as *const c_void)\n+        };\n+        // On some 32-bit Windowses (Win7-8 at least) this will fail with segmented\n+        // stacks taking control of pvArbitrary\n+        assert!(ret != 0);\n+    }\n }\n \n-fn test() {\n-    let mut buf: [u16, ..50] = [0, ..50];\n-    let ret = unsafe {\n-        FormatMessageW(0x1000, 0 as *mut c_void, 1, 0x400,\n-                       buf.as_mut_ptr(), buf.len() as u32, 0 as *const c_void)\n-    };\n-    // On some 32-bit Windowses (Win7-8 at least) this will fail with segmented\n-    // stacks taking control of pvArbitrary\n-    assert!(ret != 0);\n+#[cfg(not(windows))]\n+mod imp {\n+    pub fn test() { }\n }\n+\n fn main() {\n-    test()\n-}\n\\ No newline at end of file\n+    imp::test()\n+}"}]}