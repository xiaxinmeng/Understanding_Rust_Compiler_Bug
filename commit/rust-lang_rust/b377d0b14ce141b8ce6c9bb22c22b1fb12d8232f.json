{"sha": "b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNzdkMGIxNGNlMTQxYjhjZTZjOWJiMjJjMjJiMWZiMTJkODIzMmY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-02-05T08:03:39Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-02-05T10:10:04Z"}, "message": "Fix span for closure return type when annotated.\n\nThis commit adjusts the span used to label closure return types so that\nif the user specifies the return type, i.e. `|_| -> X {}` instead of\n`|_| {}`, we correctly highlight all of it and not just the last\ncharacter.", "tree": {"sha": "b8a2924beaa9a67ffe4bc982f567313c3b41dbd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8a2924beaa9a67ffe4bc982f567313c3b41dbd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlxZYPwACgkQAXYLT59T\n8VRzTA//QF/3BPiqbmku/3Tm3h3hXNvnEeb1EIqL4BBt8pqYtfiDZkP2Jt+EWjJ0\nX2K+yJQGF7jQXIoXaQsn5Lk110jD56JAMU/E2TtGuK7ywKUbPYrcmypPhOuKX+Lp\na45JHnYtJWv4GPRZ5+aXWh7J1VLu7q6bEG81edpHuwm8CYDJ8Z2vAG7w/L33p6oK\n2jq/GwVrjdY9cACs9lEVS2lU9CVWBpsy8UzVib5rYHZcW7hoTZz59JO8Wup9ypP+\nrVd/zXoayjt+E5dnX1588+sdvaULiMCh3xP6Jb9/Y/vnoPRjesebSW7PjpGkAvj7\nELqRqjNSsbTW0WYfN/umx1xoTAAcD2j6kg4eZ/Dj/M/Z8ws/YY4kMIft+9bcr1gb\nKmirfy48bH20dIkKFqs5j4tC1zArCUNgpKd/nDKdtm/FaBiJc1o7Dvcix7nUcO2t\no4AL/gSNRrZy2fK5SQ6LWaSClHTHJ0TwQFYqEZQyZs+udvsq8vW+np6cvyGszWv+\nM4onZbXxb5DSUO3nk4ouiE3juEhg26w7eJADR/N7gmbcAF3WR/mkj/XDIIfWduLQ\nxzsybewGogU3r9i4Vby0VXN+iW27SaS+OKjhEKDnKJevTA7DMZwrAJ5Vr6q0T7/L\nCnbJb2mhSGxmQzJvakjLwoHOUNod6YPyWV1uYodgbSMYDYH4gYI=\n=wfld\n-----END PGP SIGNATURE-----", "payload": "tree b8a2924beaa9a67ffe4bc982f567313c3b41dbd0\nparent 8ae730a442cc8af6a487a137ae9ba78f89edbba6\nauthor David Wood <david@davidtw.co> 1549353819 +0100\ncommitter David Wood <david@davidtw.co> 1549361404 +0100\n\nFix span for closure return type when annotated.\n\nThis commit adjusts the span used to label closure return types so that\nif the user specifies the return type, i.e. `|_| -> X {}` instead of\n`|_| {}`, we correctly highlight all of it and not just the last\ncharacter.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f", "html_url": "https://github.com/rust-lang/rust/commit/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ae730a442cc8af6a487a137ae9ba78f89edbba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ae730a442cc8af6a487a137ae9ba78f89edbba6", "html_url": "https://github.com/rust-lang/rust/commit/8ae730a442cc8af6a487a137ae9ba78f89edbba6"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "6adab3128d7073420b782d0827ce52294664e972", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f", "patch": "@@ -681,10 +681,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let (return_span, mir_description) = match tcx.hir().get(mir_node_id) {\n             hir::Node::Expr(hir::Expr {\n-                node: hir::ExprKind::Closure(_, _, _, span, gen_move),\n+                node: hir::ExprKind::Closure(_, return_ty, _, span, gen_move),\n                 ..\n             }) => (\n-                tcx.sess.source_map().end_point(*span),\n+                match return_ty.output {\n+                    hir::FunctionRetTy::DefaultReturn(_) => tcx.sess.source_map().end_point(*span),\n+                    hir::FunctionRetTy::Return(_) => return_ty.output.span(),\n+                },\n                 if gen_move.is_some() {\n                     \" of generator\"\n                 } else {"}, {"sha": "d4338905ed2df6ee2fdc6c07d858a06d96bebecf", "filename": "src/test/ui/nll/issue-58053.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f/src%2Ftest%2Fui%2Fnll%2Fissue-58053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f/src%2Ftest%2Fui%2Fnll%2Fissue-58053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58053.rs?ref=b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f", "patch": "@@ -0,0 +1,14 @@\n+#![allow(warnings)]\n+#![feature(nll)]\n+\n+fn main() {\n+    let i = &3;\n+\n+    let f = |x: &i32| -> &i32 { x };\n+    //~^ ERROR lifetime may not live long enough\n+    let j = f(i);\n+\n+    let g = |x: &i32| { x };\n+    //~^ ERROR lifetime may not live long enough\n+    let k = g(i);\n+}"}, {"sha": "9048983318b361a97f5c76f5b1587b388828a419", "filename": "src/test/ui/nll/issue-58053.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f/src%2Ftest%2Fui%2Fnll%2Fissue-58053.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f/src%2Ftest%2Fui%2Fnll%2Fissue-58053.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-58053.stderr?ref=b377d0b14ce141b8ce6c9bb22c22b1fb12d8232f", "patch": "@@ -0,0 +1,20 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-58053.rs:7:33\n+   |\n+LL |     let f = |x: &i32| -> &i32 { x };\n+   |                 -        ----   ^ returning this value requires that `'1` must outlive `'2`\n+   |                 |        |\n+   |                 |        return type of closure is &'2 i32\n+   |                 let's call the lifetime of this reference `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-58053.rs:11:25\n+   |\n+LL |     let g = |x: &i32| { x };\n+   |                 -   -   ^ returning this value requires that `'1` must outlive `'2`\n+   |                 |   |\n+   |                 |   return type of closure is &'2 i32\n+   |                 let's call the lifetime of this reference `'1`\n+\n+error: aborting due to 2 previous errors\n+"}]}