{"sha": "9a43492f59bfc38ed819e361c3cf99aa7b972e15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNDM0OTJmNTliZmMzOGVkODE5ZTM2MWMzY2Y5OWFhN2I5NzJlMTU=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-20T17:57:54Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-08-23T02:34:14Z"}, "message": "Improve TwoWaySearcher comments.", "tree": {"sha": "9feccda45edfa531ed779aa79618d141085d4503", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9feccda45edfa531ed779aa79618d141085d4503"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a43492f59bfc38ed819e361c3cf99aa7b972e15", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a43492f59bfc38ed819e361c3cf99aa7b972e15", "html_url": "https://github.com/rust-lang/rust/commit/9a43492f59bfc38ed819e361c3cf99aa7b972e15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a43492f59bfc38ed819e361c3cf99aa7b972e15/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9419e9265950a16f873dbed49c715fd7ea4e08e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9419e9265950a16f873dbed49c715fd7ea4e08e7", "html_url": "https://github.com/rust-lang/rust/commit/9419e9265950a16f873dbed49c715fd7ea4e08e7"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "363ceaaa2b0dd2c0a7830c68afe8d26be5e211e4", "filename": "src/libcore/str.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a43492f59bfc38ed819e361c3cf99aa7b972e15/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a43492f59bfc38ed819e361c3cf99aa7b972e15/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=9a43492f59bfc38ed819e361c3cf99aa7b972e15", "patch": "@@ -439,9 +439,13 @@ impl TwoWaySearcher {\n         let byteset = needle.iter()\n                             .fold(0, |a, &b| (1 << ((b & 0x3f) as uint)) | a);\n \n-        // Check if the needle is periodic. If so, during searching when we\n-        // find a mismatch, we must only advance the position by the length\n-        // of the period, not the length of the entire needle\n+\n+        // The logic here (calculating critPos and period, the final if statement to see which\n+        // period to use for the TwoWaySearcher) is essentially an implementation of the\n+        // \"small-period\" function from the paper (p. 670)\n+        //\n+        // In the paper they check whether `needle.slice_to(critPos)` is a suffix of\n+        // `needle.slice(critPos, critPos + period)`, which is precisely what this does\n         if needle.slice_to(critPos) == needle.slice(period, period + critPos) {\n             TwoWaySearcher {\n                 critPos: critPos,\n@@ -513,6 +517,9 @@ impl TwoWaySearcher {\n         }\n     }\n \n+    // returns (i, p) where i is the \"critical position\", the starting index of\n+    // of maximal suffix, and p is the period of the suffix\n+    // see p. 668 of the paper\n     #[inline]\n     fn maximal_suffix(arr: &[u8], reversed: bool) -> (uint, uint) {\n         let mut left = -1; // Corresponds to i in the paper"}]}