{"sha": "e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZmE1M2U1OTNhODU0YTYwOWFlOWVmZTVhMWJiZTE1MjY1ZjBhNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-20T23:16:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-20T23:16:47Z"}, "message": "Auto merge of #23512 - oli-obk:result_ok_unwrap, r=alexcrichton\n\nbecause then the call to `unwrap()` will not print the error object.", "tree": {"sha": "31d6cf6dcb795deb1b8bda95d58cfbf02002000b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31d6cf6dcb795deb1b8bda95d58cfbf02002000b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "html_url": "https://github.com/rust-lang/rust/commit/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68d69415637186755482d2584e6ba82b67bc1d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d69415637186755482d2584e6ba82b67bc1d89", "html_url": "https://github.com/rust-lang/rust/commit/68d69415637186755482d2584e6ba82b67bc1d89"}, {"sha": "b4a1e59146c70a12d8c4c1f85c08a2ecf9fb3d2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a1e59146c70a12d8c4c1f85c08a2ecf9fb3d2e", "html_url": "https://github.com/rust-lang/rust/commit/b4a1e59146c70a12d8c4c1f85c08a2ecf9fb3d2e"}], "stats": {"total": 115, "additions": 62, "deletions": 53}, "files": [{"sha": "8dd91fd6500c43b3ddfbfe4a34feb8a6228679a9", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -78,7 +78,7 @@\n //! let bad_result: Result<int, int> = bad_result.or_else(|i| Ok(11));\n //!\n //! // Consume the result and return the contents with `unwrap`.\n-//! let final_awesome_result = good_result.ok().unwrap();\n+//! let final_awesome_result = good_result.unwrap();\n //! ```\n //!\n //! # Results must be used\n@@ -460,7 +460,7 @@ impl<T, E> Result<T, E> {\n     ///         line.trim_right().parse::<int>().unwrap_or(0)\n     ///     });\n     ///     // Add the value if there were no errors, otherwise add 0\n-    ///     sum += val.ok().unwrap_or(0);\n+    ///     sum += val.unwrap_or(0);\n     /// }\n     ///\n     /// assert!(sum == 10);"}, {"sha": "bffcb93bc6d06382d7d5d20f71be447d7291d1cf", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -43,6 +43,7 @@ use std::io::SeekFrom;\n use std::io::prelude::*;\n use std::num::FromPrimitive;\n use std::rc::Rc;\n+use std::fmt::Debug;\n \n use rbml::reader;\n use rbml::writer::Encoder;\n@@ -313,9 +314,11 @@ trait def_id_encoder_helpers {\n     fn emit_def_id(&mut self, did: ast::DefId);\n }\n \n-impl<S:serialize::Encoder> def_id_encoder_helpers for S {\n+impl<S:serialize::Encoder> def_id_encoder_helpers for S\n+    where <S as serialize::serialize::Encoder>::Error: Debug\n+{\n     fn emit_def_id(&mut self, did: ast::DefId) {\n-        did.encode(self).ok().unwrap()\n+        did.encode(self).unwrap()\n     }\n }\n \n@@ -325,15 +328,18 @@ trait def_id_decoder_helpers {\n                          cdata: &cstore::crate_metadata) -> ast::DefId;\n }\n \n-impl<D:serialize::Decoder> def_id_decoder_helpers for D {\n+impl<D:serialize::Decoder> def_id_decoder_helpers for D\n+    where <D as serialize::serialize::Decoder>::Error: Debug\n+{\n     fn read_def_id(&mut self, dcx: &DecodeContext) -> ast::DefId {\n-        let did: ast::DefId = Decodable::decode(self).ok().unwrap();\n+        let did: ast::DefId = Decodable::decode(self).unwrap();\n         did.tr(dcx)\n     }\n \n     fn read_def_id_nodcx(&mut self,\n-                         cdata: &cstore::crate_metadata) -> ast::DefId {\n-        let did: ast::DefId = Decodable::decode(self).ok().unwrap();\n+                         cdata: &cstore::crate_metadata)\n+                         -> ast::DefId {\n+        let did: ast::DefId = Decodable::decode(self).unwrap();\n         decoder::translate_def_id(cdata, did)\n     }\n }\n@@ -1784,7 +1790,7 @@ impl<'a, 'tcx> rbml_decoder_decoder_helpers<'tcx> for reader::Decoder<'a> {\n     fn read_closure_kind<'b, 'c>(&mut self, _dcx: &DecodeContext<'b, 'c, 'tcx>)\n                                  -> ty::ClosureKind\n     {\n-        Decodable::decode(self).ok().unwrap()\n+        Decodable::decode(self).unwrap()\n     }\n \n     fn read_closure_ty<'b, 'c>(&mut self, dcx: &DecodeContext<'b, 'c, 'tcx>)"}, {"sha": "3a6966ab112905bee06966be07b48ff0c911175c", "filename": "src/librustc/middle/cfg/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fgraphviz.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -54,10 +54,10 @@ fn replace_newline_with_backslash_l(s: String) -> String {\n }\n \n impl<'a, 'ast> dot::Labeller<'a, Node<'a>, Edge<'a>> for LabelledCFG<'a, 'ast> {\n-    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(&self.name[..]).ok().unwrap() }\n+    fn graph_id(&'a self) -> dot::Id<'a> { dot::Id::new(&self.name[..]).unwrap() }\n \n     fn node_id(&'a self, &(i,_): &Node<'a>) -> dot::Id<'a> {\n-        dot::Id::new(format!(\"N{}\", i.node_id())).ok().unwrap()\n+        dot::Id::new(format!(\"N{}\", i.node_id())).unwrap()\n     }\n \n     fn node_label(&'a self, &(i, n): &Node<'a>) -> dot::LabelText<'a> {"}, {"sha": "5be3310926c8764efa6ca14d2bc42a43070428e3", "filename": "src/librustc/middle/infer/region_inference/graphviz.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -69,13 +69,13 @@ pub fn maybe_print_constraints_for<'a, 'tcx>(region_vars: &RegionVarBindings<'a,\n         return;\n     }\n \n-    let requested_output = env::var(\"RUST_REGION_GRAPH\").ok();\n+    let requested_output = env::var(\"RUST_REGION_GRAPH\");\n     debug!(\"requested_output: {:?} requested_node: {:?}\",\n            requested_output, requested_node);\n \n     let output_path = {\n         let output_template = match requested_output {\n-            Some(ref s) if &**s == \"help\" => {\n+            Ok(ref s) if &**s == \"help\" => {\n                 static PRINTED_YET: AtomicBool = ATOMIC_BOOL_INIT;\n                 if !PRINTED_YET.load(Ordering::SeqCst) {\n                     print_help_message();\n@@ -84,8 +84,8 @@ pub fn maybe_print_constraints_for<'a, 'tcx>(region_vars: &RegionVarBindings<'a,\n                 return;\n             }\n \n-            Some(other_path) => other_path,\n-            None => \"/tmp/constraints.node%.dot\".to_string(),\n+            Ok(other_path) => other_path,\n+            Err(_) => \"/tmp/constraints.node%.dot\".to_string(),\n         };\n \n         if output_template.len() == 0 {\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> ConstraintGraph<'a, 'tcx> {\n \n impl<'a, 'tcx> dot::Labeller<'a, Node, Edge> for ConstraintGraph<'a, 'tcx> {\n     fn graph_id(&self) -> dot::Id {\n-        dot::Id::new(&*self.graph_name).ok().unwrap()\n+        dot::Id::new(&*self.graph_name).unwrap()\n     }\n     fn node_id(&self, n: &Node) -> dot::Id {\n         let node_id = match self.node_ids.get(n) {"}, {"sha": "7d77eb23b6ed01c5f961e1aed739e48c92b2f5c1", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -491,7 +491,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for StaticInitializerCtxt<'a, 'tcx> {\n         if let ast::ExprAddrOf(mutbl, ref base) = ex.node {\n             let param_env = ty::empty_parameter_environment(self.bccx.tcx);\n             let mc = mc::MemCategorizationContext::new(&param_env);\n-            let base_cmt = mc.cat_expr(&**base).ok().unwrap();\n+            let base_cmt = mc.cat_expr(&**base).unwrap();\n             let borrow_kind = ty::BorrowKind::from_mutbl(mutbl);\n             // Check that we don't allow borrows of unsafe static items.\n             if check_aliasability(self.bccx, ex.span, euv::AddrOf,"}, {"sha": "4b319cdd437f986b72e2f99f19695892d4208578", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -1537,7 +1537,7 @@ mod tests {\n     #[test]\n     fn binary_file() {\n         let mut bytes = [0; 1024];\n-        StdRng::new().ok().unwrap().fill_bytes(&mut bytes);\n+        StdRng::new().unwrap().fill_bytes(&mut bytes);\n \n         let tmpdir = tmpdir();\n "}, {"sha": "87e5a2a448855f97da265eeeccc38aa1c2ae16fe", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -277,7 +277,7 @@ mod tests {\n     fn read_to_end() {\n         let mut reader = Cursor::new(vec!(0, 1, 2, 3, 4, 5, 6, 7));\n         let mut v = Vec::new();\n-        reader.read_to_end(&mut v).ok().unwrap();\n+        reader.read_to_end(&mut v).unwrap();\n         assert_eq!(v, [0, 1, 2, 3, 4, 5, 6, 7]);\n     }\n "}, {"sha": "872411170438cfda13687f5366493105895c849e", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -617,7 +617,7 @@ mod tests {\n                  unique_local: bool, global: bool,\n                  u_link_local: bool, u_site_local: bool, u_global: bool,\n                  m_scope: Option<Ipv6MulticastScope>) {\n-            let ip: Ipv6Addr = str_addr.parse().ok().unwrap();\n+            let ip: Ipv6Addr = str_addr.parse().unwrap();\n             assert_eq!(str_addr, ip.to_string());\n \n             assert_eq!(ip.is_unspecified(), unspec);"}, {"sha": "980406b1ce95a99df1af7be33d30afdb628950fa", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -1608,7 +1608,7 @@ mod test {\n         use rand::{StdRng, Rng};\n \n         let mut bytes = [0; 1024];\n-        StdRng::new().ok().unwrap().fill_bytes(&mut bytes);\n+        StdRng::new().unwrap().fill_bytes(&mut bytes);\n \n         let tmpdir = tmpdir();\n "}, {"sha": "123dad978f55ad4d30748650f6bfe05b7c840e66", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -592,7 +592,7 @@ impl<T: Send> Sender<T> {\n                                 // asleep (we're looking at it), so the receiver\n                                 // can't go away.\n                                 (*a.get()).send(t).ok().unwrap();\n-                        token.signal();\n+                                token.signal();\n                                 (a, Ok(()))\n                             }\n                         }"}, {"sha": "7db64cfb936b5199813f1e9bf8ed84dbc23b6a00", "filename": "src/libstd/sys/unix/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -454,7 +454,7 @@ fn output(w: &mut Write, idx: int, addr: *mut libc::c_void,\n #[allow(dead_code)]\n fn output_fileline(w: &mut Write, file: &[u8], line: libc::c_int,\n                    more: bool) -> io::Result<()> {\n-    let file = str::from_utf8(file).ok().unwrap_or(\"<unknown>\");\n+    let file = str::from_utf8(file).unwrap_or(\"<unknown>\");\n     // prior line: \"  ##: {:2$} - func\"\n     try!(write!(w, \"      {:3$}at {}:{}\", \"\", file, line, HEX_WIDTH));\n     if more {"}, {"sha": "a3d495f82ef0351713126cc46ca8fb96d9097561", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -391,7 +391,7 @@ mod tests {\n         let mut reader = FileDesc::new(reader, true);\n         let mut writer = FileDesc::new(writer, true);\n \n-        writer.write(b\"test\").ok().unwrap();\n+        writer.write(b\"test\").unwrap();\n         let mut buf = [0; 4];\n         match reader.read(&mut buf) {\n             Ok(4) => {"}, {"sha": "17c8b21f8b3bcf51cc6861253fd19bd7b67fc91c", "filename": "src/libstd/sys/unix/helper_signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Funix%2Fhelper_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Funix%2Fhelper_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fhelper_signal.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -23,7 +23,7 @@ pub fn new() -> (signal, signal) {\n }\n \n pub fn signal(fd: libc::c_int) {\n-    FileDesc::new(fd, false).write(&[0]).ok().unwrap();\n+    FileDesc::new(fd, false).write(&[0]).unwrap();\n }\n \n pub fn close(fd: libc::c_int) {"}, {"sha": "b6d2aca9a52365a4eed5a3d66bea8e920f06ad7e", "filename": "src/libstd/sys/unix/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftimer.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -204,7 +204,7 @@ fn helper(input: libc::c_int, messages: Receiver<Req>, _: ()) {\n \n                 // drain the file descriptor\n                 let mut buf = [0];\n-                assert_eq!(fd.read(&mut buf).ok().unwrap(), 1);\n+                assert_eq!(fd.read(&mut buf).unwrap(), 1);\n             }\n \n             -1 if os::errno() == libc::EINTR as i32 => {}"}, {"sha": "17fdd6755c6d951bc08c34b8fc41a6196f72b8ec", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -757,10 +757,10 @@ impl UnixAcceptor {\n \n impl Clone for UnixAcceptor {\n     fn clone(&self) -> UnixAcceptor {\n-        let name = to_utf16(&self.listener.name).ok().unwrap();\n+        let name = to_utf16(&self.listener.name).unwrap();\n         UnixAcceptor {\n             inner: self.inner.clone(),\n-            event: Event::new(true, false).ok().unwrap(),\n+            event: Event::new(true, false).unwrap(),\n             deadline: 0,\n             listener: UnixListener {\n                 name: self.listener.name.clone(),"}, {"sha": "99414c771f057a0338ade01f7c2cef1ed97495d7", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -869,7 +869,7 @@ mod test {\n             Err(e) => {\n                 type T = &'static str;\n                 assert!(e.is::<T>());\n-                assert_eq!(*e.downcast::<T>().ok().unwrap(), \"static string\");\n+                assert_eq!(*e.downcast::<T>().unwrap(), \"static string\");\n             }\n             Ok(()) => panic!()\n         }\n@@ -883,7 +883,7 @@ mod test {\n             Err(e) => {\n                 type T = String;\n                 assert!(e.is::<T>());\n-                assert_eq!(*e.downcast::<T>().ok().unwrap(), \"owned string\".to_string());\n+                assert_eq!(*e.downcast::<T>().unwrap(), \"owned string\".to_string());\n             }\n             Ok(()) => panic!()\n         }\n@@ -897,9 +897,9 @@ mod test {\n             Err(e) => {\n                 type T = Box<Any + Send>;\n                 assert!(e.is::<T>());\n-                let any = e.downcast::<T>().ok().unwrap();\n+                let any = e.downcast::<T>().unwrap();\n                 assert!(any.is::<u16>());\n-                assert_eq!(*any.downcast::<u16>().ok().unwrap(), 413);\n+                assert_eq!(*any.downcast::<u16>().unwrap(), 413);\n             }\n             Ok(()) => panic!()\n         }"}, {"sha": "06255f46779259a67bda3460369cbb3a4e3c0954", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -64,7 +64,7 @@\n //!     fn encode(&self, s: &mut S) -> Result<(), E> {\n //!         s.emit_struct(\"Spanned\", 2, |this| {\n //!             this.emit_struct_field(\"node\", 0, |this| self.node.encode(this))\n-//!                 .ok().unwrap();\n+//!                 .unwrap();\n //!             this.emit_struct_field(\"span\", 1, |this| self.span.encode(this))\n //!         })\n //!     }\n@@ -79,9 +79,9 @@\n //!         d.read_struct(\"Spanned\", 2, |this| {\n //!             Ok(Spanned {\n //!                 node: this.read_struct_field(\"node\", 0, |this| Decodable::decode(this))\n-//!                     .ok().unwrap(),\n+//!                     .unwrap(),\n //!                 span: this.read_struct_field(\"span\", 1, |this| Decodable::decode(this))\n-//!                     .ok().unwrap(),\n+//!                     .unwrap(),\n //!             })\n //!         })\n //!     }"}, {"sha": "e0953a8ace68d5c646ee23fa436766fca91b9ad5", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -623,7 +623,7 @@ impl<'a> StringReader<'a> {\n         // find the integer representing the name\n         self.scan_digits(base);\n         let encoded_name : u32 = self.with_str_from(start_bpos, |s| {\n-            num::from_str_radix(s, 10).ok().unwrap_or_else(|| {\n+            num::from_str_radix(s, 10).unwrap_or_else(|_| {\n                 panic!(\"expected digits representing a name, got {:?}, {}, range [{:?},{:?}]\",\n                       s, whence, start_bpos, self.last_pos);\n             })\n@@ -641,7 +641,7 @@ impl<'a> StringReader<'a> {\n         let start_bpos = self.last_pos;\n         self.scan_digits(base);\n         let encoded_ctxt : ast::SyntaxContext = self.with_str_from(start_bpos, |s| {\n-            num::from_str_radix(s, 10).ok().unwrap_or_else(|| {\n+            num::from_str_radix(s, 10).unwrap_or_else(|_| {\n                 panic!(\"expected digits representing a ctxt, got {:?}, {}\", s, whence);\n             })\n         });"}, {"sha": "309320b52ffe4aa641abdf485537f5452eb7f64a", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -181,21 +181,24 @@ impl<T: Write+Send+'static> TerminfoTerminal<T> {\n             }\n         };\n \n-        let entry = open(&term[..]);\n-        if entry.is_err() {\n-            if env::var(\"MSYSCON\").ok().map_or(false, |s| {\n-                    \"mintty.exe\" == s\n-                }) {\n-                // msys terminal\n-                return Some(box TerminfoTerminal {out: out,\n-                                                  ti: msys_terminfo(),\n-                                                  num_colors: 8} as Box<Terminal<T>+Send>);\n-            }\n-            debug!(\"error finding terminfo entry: {:?}\", entry.err().unwrap());\n-            return None;\n-        }\n+        let mut file = match open(&term[..]) {\n+            Ok(f) => f,\n+            Err(err) => return match env::var(\"MSYSCON\") {\n+                Ok(ref val) if &val[..] == \"mintty.exe\" => {\n+                    // msys terminal\n+                    Some(box TerminfoTerminal{\n+                        out: out,\n+                        ti: msys_terminfo(),\n+                        num_colors: 8,\n+                    } as Box<Terminal<T>+Send>)\n+                },\n+                _ => {\n+                    debug!(\"error finding terminfo entry: {:?}\", err);\n+                    None\n+                },\n+            },\n+        };\n \n-        let mut file = entry.unwrap();\n         let ti = parse(&mut file, false);\n         if ti.is_err() {\n             debug!(\"error parsing terminfo entry: {:?}\", ti.err().unwrap());"}, {"sha": "b808ea472a28a93b0621662bbacff81727e9c6b2", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -12,7 +12,7 @@ use std::thread;\n \n pub fn main() {\n     let t = thread::spawn(move|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) );\n-    t.join().ok().unwrap();\n+    t.join().ok().unwrap(); // forget Err value, since it doesn't implement Debug\n }\n \n fn child(args: (int, int, int, int, int, int, int, int, int)) {"}, {"sha": "66cc8d658c0a63ac3acdffb8816f39480c4614d8", "filename": "src/test/run-pass/unit-like-struct-drop-run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2fa53e593a854a609ae9efe5a1bbe15265f0a6f/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit-like-struct-drop-run.rs?ref=e2fa53e593a854a609ae9efe5a1bbe15265f0a6f", "patch": "@@ -26,6 +26,6 @@ pub fn main() {\n         let _b = Foo;\n     }).join();\n \n-    let s = x.err().unwrap().downcast::<&'static str>().ok().unwrap();\n+    let s = x.err().unwrap().downcast::<&'static str>().unwrap();\n     assert_eq!(&**s, \"This panic should happen.\");\n }"}]}