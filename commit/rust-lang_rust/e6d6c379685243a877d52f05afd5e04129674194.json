{"sha": "e6d6c379685243a877d52f05afd5e04129674194", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2ZDZjMzc5Njg1MjQzYTg3N2Q1MmYwNWFmZDVlMDQxMjk2NzQxOTQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-05T08:54:18Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-09T02:47:08Z"}, "message": "Reimplement pretty printing", "tree": {"sha": "97b571e4be3aae780c7ca884632cb8cf133765e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97b571e4be3aae780c7ca884632cb8cf133765e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6d6c379685243a877d52f05afd5e04129674194", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d6c379685243a877d52f05afd5e04129674194", "html_url": "https://github.com/rust-lang/rust/commit/e6d6c379685243a877d52f05afd5e04129674194", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6d6c379685243a877d52f05afd5e04129674194/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5a0dd7c6e906ba736c9cf26d5db55cf9787c61f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5a0dd7c6e906ba736c9cf26d5db55cf9787c61f", "html_url": "https://github.com/rust-lang/rust/commit/e5a0dd7c6e906ba736c9cf26d5db55cf9787c61f"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "97c438838190825221fe6864fd30344629a9612e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e6d6c379685243a877d52f05afd5e04129674194", "patch": "@@ -1639,6 +1639,7 @@ pub type FreevarMap = NodeMap<Vec<Freevar>>;\n \n pub type CaptureModeMap = NodeMap<CaptureClause>;\n \n+#[derive(Clone)]\n pub struct TraitCandidate {\n     pub def_id: DefId,\n     pub import_id: Option<NodeId>,"}, {"sha": "700ed62f216d309eeefbd407e40a10bee6c7ebbd", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e6d6c379685243a877d52f05afd5e04129674194", "patch": "@@ -108,6 +108,7 @@ pub type Disr = ConstInt;\n \n /// The complete set of all analyses described in this module. This is\n /// produced by the driver and fed to trans and later passes.\n+#[derive(Clone)]\n pub struct CrateAnalysis<'a> {\n     pub export_map: ExportMap,\n     pub access_levels: middle::privacy::AccessLevels,"}, {"sha": "1c20f0f2f3943991b1794c5326f4c1ddbac0b31d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=e6d6c379685243a877d52f05afd5e04129674194", "patch": "@@ -61,6 +61,7 @@ use syntax::visit;\n use syntax;\n use syntax_ext;\n \n+#[derive(Clone)]\n pub struct Resolutions {\n     pub def_map: RefCell<DefMap>,\n     pub freevars: FreevarMap,\n@@ -209,6 +210,8 @@ pub fn compile_input(sess: &Session,\n                                                                          &arenas,\n                                                                          &cstore,\n                                                                          &hir_map,\n+                                                                         &analysis,\n+                                                                         &resolutions,\n                                                                          &expanded_crate,\n                                                                          &hir_map.krate(),\n                                                                          &id),\n@@ -384,6 +387,7 @@ pub struct CompileState<'a, 'b, 'ast: 'a, 'tcx: 'b> where 'ast: 'tcx {\n     pub expanded_crate: Option<&'a ast::Crate>,\n     pub hir_crate: Option<&'a hir::Crate>,\n     pub ast_map: Option<&'a hir_map::Map<'ast>>,\n+    pub resolutions: Option<&'a Resolutions>,\n     pub mir_map: Option<&'b MirMap<'tcx>>,\n     pub analysis: Option<&'a ty::CrateAnalysis<'a>>,\n     pub tcx: Option<&'b TyCtxt<'tcx>>,\n@@ -408,6 +412,7 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n             expanded_crate: None,\n             hir_crate: None,\n             ast_map: None,\n+            resolutions: None,\n             analysis: None,\n             mir_map: None,\n             tcx: None,\n@@ -454,6 +459,8 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n                               arenas: &'ast ty::CtxtArenas<'ast>,\n                               cstore: &'a CStore,\n                               hir_map: &'a hir_map::Map<'ast>,\n+                              analysis: &'a ty::CrateAnalysis,\n+                              resolutions: &'a Resolutions,\n                               krate: &'a ast::Crate,\n                               hir_crate: &'a hir::Crate,\n                               crate_name: &'a str)\n@@ -463,6 +470,8 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n             arenas: Some(arenas),\n             cstore: Some(cstore),\n             ast_map: Some(hir_map),\n+            analysis: Some(analysis),\n+            resolutions: Some(resolutions),\n             expanded_crate: Some(krate),\n             hir_crate: Some(hir_crate),\n             out_file: out_file.as_ref().map(|s| &**s),"}, {"sha": "4da36be94e009bdfa1fa2efd5eb0032a364cbca0", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=e6d6c379685243a877d52f05afd5e04129674194", "patch": "@@ -469,6 +469,8 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 control.after_write_deps.callback = box move |state| {\n                     pretty::print_after_write_deps(state.session,\n                                                    state.ast_map.unwrap(),\n+                                                   state.analysis.unwrap(),\n+                                                   state.resolutions.unwrap(),\n                                                    state.input,\n                                                    &state.expanded_crate.take().unwrap(),\n                                                    state.crate_name.unwrap(),"}, {"sha": "8d8984000c7e48ccfbf8d5feff57141643f66b7e", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6d6c379685243a877d52f05afd5e04129674194/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=e6d6c379685243a877d52f05afd5e04129674194", "patch": "@@ -15,7 +15,8 @@ pub use self::PpSourceMode::*;\n pub use self::PpMode::*;\n use self::NodesMatchingUII::*;\n \n-use {driver, abort_on_err};\n+use abort_on_err;\n+use driver::{self, Resolutions};\n \n use rustc::dep_graph::DepGraph;\n use rustc::ty::{self, TyCtxt};\n@@ -25,7 +26,6 @@ use rustc::session::Session;\n use rustc::session::config::Input;\n use rustc_borrowck as borrowck;\n use rustc_borrowck::graphviz as borrowck_dot;\n-use rustc_resolve as resolve;\n \n use rustc_mir::pretty::write_mir_pretty;\n use rustc_mir::graphviz::write_mir_graphviz;\n@@ -202,6 +202,8 @@ impl PpSourceMode {\n     fn call_with_pp_support_hir<'tcx, A, B, F>(&self,\n                                                sess: &'tcx Session,\n                                                ast_map: &hir_map::Map<'tcx>,\n+                                               analysis: &ty::CrateAnalysis,\n+                                               resolutions: &Resolutions,\n                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                                id: &str,\n                                                payload: B,\n@@ -226,12 +228,12 @@ impl PpSourceMode {\n                 f(&annotation, payload, ast_map.forest.krate())\n             }\n             PpmTyped => {\n-                /*\n                 abort_on_err(driver::phase_3_run_analysis_passes(sess,\n                                                                  ast_map.clone(),\n+                                                                 analysis.clone(),\n+                                                                 resolutions.clone(),\n                                                                  arenas,\n                                                                  id,\n-                                                                 resolve::MakeGlobMap::No,\n                                                                  |tcx, _, _, _| {\n                     let annotation = TypedAnnotation {\n                         tcx: tcx,\n@@ -241,8 +243,6 @@ impl PpSourceMode {\n                       payload,\n                       ast_map.forest.krate())\n                 }), sess)\n-                */\n-                unimplemented!()\n             }\n             _ => panic!(\"Should use call_with_pp_support\"),\n         }\n@@ -814,6 +814,8 @@ pub fn print_after_parsing(sess: &Session,\n \n pub fn print_after_write_deps<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                               ast_map: &hir_map::Map<'tcx>,\n+                                              analysis: &ty::CrateAnalysis,\n+                                              resolutions: &Resolutions,\n                                               input: &Input,\n                                               krate: &ast::Crate,\n                                               crate_name: &str,\n@@ -825,7 +827,8 @@ pub fn print_after_write_deps<'tcx, 'a: 'tcx>(sess: &'a Session,\n     let _ignore = dep_graph.in_ignore();\n \n     if ppm.needs_analysis() {\n-        print_with_analysis(sess, ast_map, crate_name, arenas, ppm, opt_uii, ofile);\n+        print_with_analysis(sess, ast_map, analysis, resolutions,\n+                            crate_name, arenas, ppm, opt_uii, ofile);\n         return;\n     }\n \n@@ -856,6 +859,8 @@ pub fn print_after_write_deps<'tcx, 'a: 'tcx>(sess: &'a Session,\n             let out: &mut Write = &mut out;\n             s.call_with_pp_support_hir(sess,\n                                        ast_map,\n+                                       analysis,\n+                                       resolutions,\n                                        arenas,\n                                        crate_name,\n                                        box out,\n@@ -877,6 +882,8 @@ pub fn print_after_write_deps<'tcx, 'a: 'tcx>(sess: &'a Session,\n             let out: &mut Write = &mut out;\n             s.call_with_pp_support_hir(sess,\n                                        ast_map,\n+                                       analysis,\n+                                       resolutions,\n                                        arenas,\n                                        crate_name,\n                                        (out,uii),\n@@ -917,6 +924,8 @@ pub fn print_after_write_deps<'tcx, 'a: 'tcx>(sess: &'a Session,\n // Instead, we call that function ourselves.\n fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                        ast_map: &hir_map::Map<'tcx>,\n+                                       analysis: &ty::CrateAnalysis,\n+                                       resolutions: &Resolutions,\n                                        crate_name: &str,\n                                        arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                        ppm: PpMode,\n@@ -930,14 +939,14 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n         None\n     };\n \n-    /*\n     let mut out = Vec::new();\n \n     abort_on_err(driver::phase_3_run_analysis_passes(sess,\n                                                      ast_map.clone(),\n+                                                     analysis.clone(),\n+                                                     resolutions.clone(),\n                                                      arenas,\n                                                      crate_name,\n-                                                     resolve::MakeGlobMap::No,\n                                                      |tcx, mir_map, _, _| {\n         match ppm {\n             PpmMir | PpmMirCFG => {\n@@ -1002,6 +1011,4 @@ fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n     }), sess).unwrap();\n \n     write_output(out, ofile);\n-    */\n-    unimplemented!()\n }"}]}