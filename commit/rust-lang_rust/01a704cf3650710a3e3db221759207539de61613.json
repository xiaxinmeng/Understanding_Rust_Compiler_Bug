{"sha": "01a704cf3650710a3e3db221759207539de61613", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYTcwNGNmMzY1MDcxMGEzZTNkYjIyMTc1OTIwNzUzOWRlNjE2MTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-03T20:30:34Z"}, "committer": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2019-02-03T21:46:53Z"}, "message": "Apply suggestions from code review\n\nCo-Authored-By: Matthias247 <matthias.einwag@live.com>", "tree": {"sha": "84bd28f8b59cba5239b6e452cf1d6d820f30409f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84bd28f8b59cba5239b6e452cf1d6d820f30409f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01a704cf3650710a3e3db221759207539de61613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01a704cf3650710a3e3db221759207539de61613", "html_url": "https://github.com/rust-lang/rust/commit/01a704cf3650710a3e3db221759207539de61613", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01a704cf3650710a3e3db221759207539de61613/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a4b22d3291913a8f2158a1b7c195bc30c9286e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a4b22d3291913a8f2158a1b7c195bc30c9286e", "html_url": "https://github.com/rust-lang/rust/commit/d9a4b22d3291913a8f2158a1b7c195bc30c9286e"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "adaca50434557795c44161cc28df437a2c3a2bb1", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01a704cf3650710a3e3db221759207539de61613/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01a704cf3650710a3e3db221759207539de61613/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=01a704cf3650710a3e3db221759207539de61613", "patch": "@@ -8,15 +8,17 @@ use marker::Unpin;\n /// A `RawWaker` allows the implementor of a task executor to create a `Waker`\n /// which provides customized wakeup behavior.\n ///\n-/// It consists of a data pointer and a virtual function pointer table (vtable) that\n+/// [vtable]: https://en.wikipedia.org/wiki/Virtual_method_table\n+///\n+/// It consists of a data pointer and a [virtual function pointer table (vtable)][vtable] that\n /// customizes the behavior of the `RawWaker`.\n #[derive(PartialEq)]\n pub struct RawWaker {\n     /// A data pointer, which can be used to store arbitrary data as required\n     /// by the executor. This could be e.g. a type-erased pointer to an `Arc`\n     /// that is associated with the task.\n     /// The value of this field gets passed to all functions that are part of\n-    /// the vtable as first parameter.\n+    /// the vtable as the first parameter.\n     pub data: *const (),\n     /// Virtual function pointer table that customizes the behavior of this waker.\n     pub vtable: &'static RawWakerVTable,\n@@ -30,7 +32,7 @@ impl fmt::Debug for RawWaker {\n }\n \n /// A virtual function pointer table (vtable) that specifies the behavior\n-/// of a `RawWaker`.\n+/// of a [`RawWaker`].\n ///\n /// The pointer passed to all functions inside the vtable is the `data` pointer\n /// from the enclosing `RawWaker` object.\n@@ -105,7 +107,7 @@ impl Waker {\n     /// contract to make it usable for `Waker` and is therefore unsafe.\n     pub unsafe fn new_unchecked(waker: RawWaker) -> Waker {\n         Waker {\n-            waker: waker,\n+            waker,\n         }\n     }\n }"}]}