{"sha": "8bae517c2d540dcf62bff12ba7404a23a4233d99", "node_id": "C_kwDOAAsO6NoAKDhiYWU1MTdjMmQ1NDBkY2Y2MmJmZjEyYmE3NDA0YTIzYTQyMzNkOTk", "commit": {"author": {"name": "Allen Hsu", "email": "allen.hsusp+git@gmail.com", "date": "2022-08-12T02:51:58Z"}, "committer": {"name": "Allen Hsu", "email": "allen.hsusp+git@gmail.com", "date": "2022-08-12T02:51:58Z"}, "message": "Lint trait duplication in one pass.", "tree": {"sha": "2cbe4ccfc3e003d2dcb9b2c2b0e784115203d108", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cbe4ccfc3e003d2dcb9b2c2b0e784115203d108"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bae517c2d540dcf62bff12ba7404a23a4233d99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bae517c2d540dcf62bff12ba7404a23a4233d99", "html_url": "https://github.com/rust-lang/rust/commit/8bae517c2d540dcf62bff12ba7404a23a4233d99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bae517c2d540dcf62bff12ba7404a23a4233d99/comments", "author": null, "committer": null, "parents": [{"sha": "3ddc04f4db1f768f74fe9e21a4ef119c186295a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ddc04f4db1f768f74fe9e21a4ef119c186295a0", "html_url": "https://github.com/rust-lang/rust/commit/3ddc04f4db1f768f74fe9e21a4ef119c186295a0"}], "stats": {"total": 63, "additions": 23, "deletions": 40}, "files": [{"sha": "0434720f79b578f8d447f100901ad51a3938c0a7", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 19, "deletions": 36, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8bae517c2d540dcf62bff12ba7404a23a4233d99/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bae517c2d540dcf62bff12ba7404a23a4233d99/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=8bae517c2d540dcf62bff12ba7404a23a4233d99", "patch": "@@ -103,7 +103,6 @@ impl<'tcx> LateLintPass<'tcx> for TraitBounds {\n     fn check_generics(&mut self, cx: &LateContext<'tcx>, gen: &'tcx Generics<'_>) {\n         self.check_type_repetition(cx, gen);\n         check_trait_bound_duplication(cx, gen);\n-        check_bounds_or_where_duplication(cx, gen);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n@@ -234,7 +233,7 @@ impl TraitBounds {\n }\n \n fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n-    if gen.span.from_expansion() || gen.params.is_empty() || gen.predicates.is_empty() {\n+    if gen.span.from_expansion() {\n         return;\n     }\n \n@@ -254,9 +253,9 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n                 if let WherePredicate::BoundPredicate(bound_predicate) = pred;\n                 if let TyKind::Path(QPath::Resolved(_, path)) =  bound_predicate.bounded_ty.kind;\n                 then {\n-                    return Some(bound_predicate.bounds.iter().filter_map(|t| {\n-                        Some((path.res, into_comparable_trait_ref(t.trait_ref()?)))\n-                    }))\n+                    return Some(\n+                        rollup_traits(cx, bound_predicate.bounds, \"these where clauses contain repeated elements\")\n+                        .into_keys().map(|trait_ref| (path.res, trait_ref)))\n                 }\n             }\n             None\n@@ -277,19 +276,18 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n             if !bound_predicate.span.from_expansion();\n             if let TyKind::Path(QPath::Resolved(_, path)) =  bound_predicate.bounded_ty.kind;\n             then {\n-                for t in bound_predicate.bounds {\n-                    if let Some(trait_ref) = t.trait_ref() {\n-                        let key = (path.res, into_comparable_trait_ref(trait_ref));\n-                        if where_predicates.contains(&key) {\n-                            span_lint_and_help(\n-                                cx,\n-                                TRAIT_DUPLICATION_IN_BOUNDS,\n-                                t.span(),\n-                                \"this trait bound is already specified in the where clause\",\n-                                None,\n-                                \"consider removing this trait bound\",\n-                                );\n-                        }\n+                let traits = rollup_traits(cx, bound_predicate.bounds, \"these bounds contain repeated elements\");\n+                for (trait_ref, span) in traits {\n+                    let key = (path.res, trait_ref);\n+                    if where_predicates.contains(&key) {\n+                        span_lint_and_help(\n+                            cx,\n+                            TRAIT_DUPLICATION_IN_BOUNDS,\n+                            span,\n+                            \"this trait bound is already specified in the where clause\",\n+                            None,\n+                            \"consider removing this trait bound\",\n+                            );\n                     }\n                 }\n             }\n@@ -300,23 +298,6 @@ fn check_trait_bound_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n #[derive(PartialEq, Eq, Hash, Debug)]\n struct ComparableTraitRef(Res, Vec<Res>);\n \n-fn check_bounds_or_where_duplication(cx: &LateContext<'_>, gen: &'_ Generics<'_>) {\n-    if gen.span.from_expansion() {\n-        return;\n-    }\n-\n-    for predicate in gen.predicates {\n-        if let WherePredicate::BoundPredicate(ref bound_predicate) = predicate {\n-            let msg = if predicate.in_where_clause() {\n-                \"these where clauses contain repeated elements\"\n-            } else {\n-                \"these bounds contain repeated elements\"\n-            };\n-            rollup_traits(cx, bound_predicate.bounds, msg);\n-        }\n-    }\n-}\n-\n fn get_trait_info_from_bound<'a>(bound: &'a GenericBound<'_>) -> Option<(Res, &'a [PathSegment<'a>], Span)> {\n     if let GenericBound::Trait(t, tbm) = bound {\n         let trait_path = t.trait_ref.path;\n@@ -358,7 +339,7 @@ fn into_comparable_trait_ref(trait_ref: &TraitRef<'_>) -> ComparableTraitRef {\n     )\n }\n \n-fn rollup_traits(cx: &LateContext<'_>, bounds: &[GenericBound<'_>], msg: &str) {\n+fn rollup_traits(cx: &LateContext<'_>, bounds: &[GenericBound<'_>], msg: &str) -> FxHashMap<ComparableTraitRef, Span> {\n     let mut map = FxHashMap::default();\n     let mut repeated_res = false;\n \n@@ -400,4 +381,6 @@ fn rollup_traits(cx: &LateContext<'_>, bounds: &[GenericBound<'_>], msg: &str) {\n             );\n         }\n     }\n+\n+    map\n }"}, {"sha": "aa44114eb6c5ffe1ee6a53cbb90e066751ba3fee", "filename": "tests/ui/trait_duplication_in_bounds_unfixable.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bae517c2d540dcf62bff12ba7404a23a4233d99/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bae517c2d540dcf62bff12ba7404a23a4233d99/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait_duplication_in_bounds_unfixable.stderr?ref=8bae517c2d540dcf62bff12ba7404a23a4233d99", "patch": "@@ -1,8 +1,8 @@\n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:15\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:23\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n-   |               ^^^^^\n+   |                       ^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/trait_duplication_in_bounds_unfixable.rs:1:9\n@@ -12,10 +12,10 @@ LL | #![deny(clippy::trait_duplication_in_bounds)]\n    = help: consider removing this trait bound\n \n error: this trait bound is already specified in the where clause\n-  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:23\n+  --> $DIR/trait_duplication_in_bounds_unfixable.rs:6:15\n    |\n LL | fn bad_foo<T: Clone + Default, Z: Copy>(arg0: T, arg1: Z)\n-   |                       ^^^^^^^\n+   |               ^^^^^\n    |\n    = help: consider removing this trait bound\n "}]}