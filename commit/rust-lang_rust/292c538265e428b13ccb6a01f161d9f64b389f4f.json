{"sha": "292c538265e428b13ccb6a01f161d9f64b389f4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MmM1MzgyNjVlNDI4YjEzY2NiNmEwMWYxNjFkOWY2NGIzODlmNGY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-18T17:03:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-18T17:03:44Z"}, "message": "Rollup merge of #69920 - Centril:hir-cleanup, r=Zoxc\n\nRemove some imports to the rustc crate\n\n- When we have `NestedVisitorMap::None`, we use `type Map = dyn intravisit::Map<'v>;` instead of the actual map. This doesn't actually result in dynamic dispatch (in the future we may want to use an associated type default to simplify the code).\n\n- Use `rustc_session::` imports instead of `rustc::{session, lint}`.\n\nr? @Zoxc", "tree": {"sha": "89ced9cadd0a52bcd8405b826f574caea7a3b7b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ced9cadd0a52bcd8405b826f574caea7a3b7b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/292c538265e428b13ccb6a01f161d9f64b389f4f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeclRwCRBK7hj4Ov3rIwAAdHIIAIBEemg2bb1g+kqi0BjLWolD\n/4FwAchZbfcOg/NndMpRxDkrMsiXj6x6T9AEAO4nGgPrrNr4niQcW4E8IsX96i/5\nI8+JsN41LrMy1L587WQduGdpVtKDwpSpxJOFUCR8LytUWrLNrtTojq7oFTLhRUU7\n8vS5llUEg4RmSBXOQqev/6mM9DMsJqe5p71AHWA15o3S+8E58i8zJB0YtQ65gvub\ntRsl7KkacjyA9i01N+iQpjJgJ5TGRg/ymH4T0iIDUMbnhjsx+GcAB56hO2cyvq7K\n+X3CXJPdDPi7Mq9BW//75Q4I5suE4cX601wn6//RHKVCfNvZEbP6a3/0PEkAd7E=\n=9sJB\n-----END PGP SIGNATURE-----\n", "payload": "tree 89ced9cadd0a52bcd8405b826f574caea7a3b7b2\nparent 252184969b7191e8be9b485b14a4f0fd216947da\nparent 4392a8b73c3f51315c593344f4e7386ebc6e78e5\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584551024 +0100\ncommitter GitHub <noreply@github.com> 1584551024 +0100\n\nRollup merge of #69920 - Centril:hir-cleanup, r=Zoxc\n\nRemove some imports to the rustc crate\n\n- When we have `NestedVisitorMap::None`, we use `type Map = dyn intravisit::Map<'v>;` instead of the actual map. This doesn't actually result in dynamic dispatch (in the future we may want to use an associated type default to simplify the code).\n\n- Use `rustc_session::` imports instead of `rustc::{session, lint}`.\n\nr? @Zoxc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/292c538265e428b13ccb6a01f161d9f64b389f4f", "html_url": "https://github.com/rust-lang/rust/commit/292c538265e428b13ccb6a01f161d9f64b389f4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/292c538265e428b13ccb6a01f161d9f64b389f4f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "252184969b7191e8be9b485b14a4f0fd216947da", "url": "https://api.github.com/repos/rust-lang/rust/commits/252184969b7191e8be9b485b14a4f0fd216947da", "html_url": "https://github.com/rust-lang/rust/commit/252184969b7191e8be9b485b14a4f0fd216947da"}, {"sha": "4392a8b73c3f51315c593344f4e7386ebc6e78e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4392a8b73c3f51315c593344f4e7386ebc6e78e5", "html_url": "https://github.com/rust-lang/rust/commit/4392a8b73c3f51315c593344f4e7386ebc6e78e5"}], "stats": {"total": 754, "additions": 369, "deletions": 385}, "files": [{"sha": "99bcfd7c7ccc11d6f63ce8c02bffb7d76437eb94", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -3624,6 +3624,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_metadata\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n ]\n@@ -3677,6 +3678,7 @@ dependencies = [\n  \"rustc_parse\",\n  \"rustc_plugin_impl\",\n  \"rustc_save_analysis\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n@@ -3791,6 +3793,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_macros\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"smallvec 1.0.0\",\n@@ -3903,6 +3906,7 @@ dependencies = [\n  \"rustc_expand\",\n  \"rustc_hir\",\n  \"rustc_index\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"serialize\",\n@@ -3933,6 +3937,7 @@ dependencies = [\n  \"rustc_infer\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n@@ -4013,6 +4018,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_lint\",\n  \"rustc_metadata\",\n+ \"rustc_session\",\n  \"rustc_span\",\n ]\n \n@@ -4027,6 +4033,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n  \"rustc_hir\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_typeck\",\n ]\n@@ -4068,6 +4075,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_parse\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"serde_json\",\n ]\n@@ -4174,6 +4182,7 @@ dependencies = [\n  \"rustc_data_structures\",\n  \"rustc_hir\",\n  \"rustc_infer\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\",\n@@ -4193,6 +4202,7 @@ dependencies = [\n  \"rustc_hir\",\n  \"rustc_index\",\n  \"rustc_infer\",\n+ \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n  \"rustc_trait_selection\","}, {"sha": "8fd86b3232d002abbb1c307f80f3e39a351aef10", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,8 +1,6 @@\n-use crate::hir::map::definitions::Definitions;\n-use crate::hir::map::DefPathHash;\n+use crate::hir::map::definitions::{DefPathHash, Definitions};\n use crate::ich::{self, CachingSourceMapView};\n use crate::middle::cstore::CrateStore;\n-use crate::session::Session;\n use crate::ty::{fast_reject, TyCtxt};\n \n use rustc_ast::ast;\n@@ -11,6 +9,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIndex};\n+use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, SourceFile};"}, {"sha": "8d0f604de6d7623daf29d6c4a7a16a6e3f252f6b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -83,7 +83,6 @@ pub mod infer;\n pub mod lint;\n pub mod middle;\n pub mod mir;\n-pub use rustc_session as session;\n pub mod traits;\n pub mod ty;\n "}, {"sha": "d4d01a716db97c32602f677796c4e47594b88f53", "filename": "src/librustc/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n-pub use rustc_session::lint::{builtin, Level, Lint, LintId, LintPass};\n+use rustc_session::lint::{builtin, Level, Lint, LintId};\n use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::{DesugaringKind, ExpnKind, MultiSpan};"}, {"sha": "9f5a56903aa6e9ede938d32daf717c3351b7afe8", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -2,10 +2,9 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n-use crate::hir::map as hir_map;\n-use crate::hir::map::definitions::{DefKey, DefPathTable};\n-use crate::session::search_paths::PathKind;\n-use crate::session::CrateDisambiguator;\n+pub use self::NativeLibraryKind::*;\n+\n+use crate::hir::map::definitions::{DefKey, DefPath, DefPathHash, DefPathTable};\n use crate::ty::TyCtxt;\n \n use rustc_ast::ast;\n@@ -14,15 +13,16 @@ use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_macros::HashStable;\n+use rustc_session::search_paths::PathKind;\n+pub use rustc_session::utils::NativeLibraryKind;\n+use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use rustc_target::spec::Target;\n+\n use std::any::Any;\n use std::path::{Path, PathBuf};\n \n-pub use self::NativeLibraryKind::*;\n-pub use rustc_session::utils::NativeLibraryKind;\n-\n // lonely orphan structs and enums looking for a better home\n \n /// Where a crate came from on the local filesystem. One of these three options\n@@ -197,8 +197,8 @@ pub trait CrateStore {\n \n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n-    fn def_path(&self, def: DefId) -> hir_map::DefPath;\n-    fn def_path_hash(&self, def: DefId) -> hir_map::DefPathHash;\n+    fn def_path(&self, def: DefId) -> DefPath;\n+    fn def_path_hash(&self, def: DefId) -> DefPathHash;\n     fn def_path_table(&self, cnum: CrateNum) -> &DefPathTable;\n \n     // \"queries\" used in resolve that aren't tracked for incremental compilation"}, {"sha": "ee5f822d3134c69267363292b1caab4b78b49b23", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -4,7 +4,7 @@\n //! For all the gory details, see the provider of the `dependency_formats`\n //! query.\n \n-use crate::session::config;\n+use rustc_session::config;\n \n /// A list of dependencies for a certain crate type.\n ///"}, {"sha": "6de53c703e1653411dec153b85a0fc319ec168b5", "filename": "src/librustc/middle/limits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flimits.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -5,13 +5,13 @@\n //! this via an attribute on the crate like `#![recursion_limit=\"22\"]`. This pass\n //! just peeks and looks for that attribute.\n \n-use crate::session::Session;\n-use core::num::IntErrorKind;\n use rustc::bug;\n use rustc_ast::ast;\n+use rustc_data_structures::sync::Once;\n+use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n \n-use rustc_data_structures::sync::Once;\n+use std::num::IntErrorKind;\n \n pub fn update_limits(sess: &Session, krate: &ast::Crate) {\n     update_limit(sess, krate, &sess.recursion_limit, sym::recursion_limit, 128);"}, {"sha": "46525bdedad3554ab6669d0540ba4b5ef3815d13", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -3,7 +3,6 @@\n \n pub use self::StabilityLevel::*;\n \n-use crate::session::{DiagnosticMessageId, Session};\n use crate::ty::{self, TyCtxt};\n use rustc_ast::ast::CRATE_NODE_ID;\n use rustc_attr::{self as attr, ConstStability, Deprecation, RustcDeprecation, Stability};\n@@ -17,6 +16,7 @@ use rustc_hir::{self, HirId};\n use rustc_session::lint::builtin::{DEPRECATED, DEPRECATED_IN_FUTURE, SOFT_UNSTABLE};\n use rustc_session::lint::{BuiltinLintDiagnostics, Lint, LintBuffer};\n use rustc_session::parse::feature_err_issue;\n+use rustc_session::{DiagnosticMessageId, Session};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{MultiSpan, Span};\n "}, {"sha": "27d82d25803c74b14101365a53df035bac2559c8", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,6 +1,5 @@\n use crate::dep_graph::{DepConstructor, DepNode, WorkProduct, WorkProductId};\n use crate::ich::{Fingerprint, NodeIdHashingMode, StableHashingContext};\n-use crate::session::config::OptLevel;\n use crate::ty::print::obsolete::DefPathBasedNames;\n use crate::ty::{subst::InternalSubsts, Instance, InstanceDef, SymbolName, TyCtxt};\n use rustc_attr::InlineAttr;\n@@ -9,6 +8,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::HirId;\n+use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n use std::fmt;"}, {"sha": "041dfc7d169a4c217a083d9ab31ea89f1526605f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,30 +1,28 @@\n-use crate::session::{self, DataTypeKind};\n+use crate::ich::StableHashingContext;\n+use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n+use crate::ty::subst::Subst;\n use crate::ty::{self, subst::SubstsRef, ReprOptions, Ty, TyCtxt, TypeFoldable};\n \n use rustc_ast::ast::{self, Ident, IntTy, UintTy};\n use rustc_attr as attr;\n-use rustc_span::DUMMY_SP;\n-\n-use std::cmp;\n-use std::fmt;\n-use std::iter;\n-use std::mem;\n-use std::ops::Bound;\n-\n-use crate::ich::StableHashingContext;\n-use crate::mir::{GeneratorLayout, GeneratorSavedLocal};\n-use crate::ty::subst::Subst;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir as hir;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-\n+use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use rustc_span::DUMMY_SP;\n use rustc_target::abi::call::{\n     ArgAbi, ArgAttribute, ArgAttributes, Conv, FnAbi, PassMode, Reg, RegKind,\n };\n pub use rustc_target::abi::*;\n use rustc_target::spec::{abi::Abi as SpecAbi, HasTargetSpec};\n \n+use std::cmp;\n+use std::fmt;\n+use std::iter;\n+use std::mem;\n+use std::ops::Bound;\n+\n pub trait IntegerExt {\n     fn to_ty<'tcx>(&self, tcx: TyCtxt<'tcx>, signed: bool) -> Ty<'tcx>;\n     fn from_attr<C: HasDataLayout>(cx: &C, ity: attr::IntType) -> Integer;\n@@ -1651,7 +1649,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                         if min_size < field_end {\n                             min_size = field_end;\n                         }\n-                        session::FieldInfo {\n+                        FieldInfo {\n                             name: name.to_string(),\n                             offset: offset.bytes(),\n                             size: field_layout.size.bytes(),\n@@ -1661,13 +1659,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 })\n                 .collect();\n \n-            session::VariantInfo {\n+            VariantInfo {\n                 name: n.map(|n| n.to_string()),\n-                kind: if layout.is_unsized() {\n-                    session::SizeKind::Min\n-                } else {\n-                    session::SizeKind::Exact\n-                },\n+                kind: if layout.is_unsized() { SizeKind::Min } else { SizeKind::Exact },\n                 align: layout.align.abi.bytes(),\n                 size: if min_size.bytes() == 0 { layout.size.bytes() } else { min_size.bytes() },\n                 fields: field_info,"}, {"sha": "74d677298d3f85f7161ec482f12d31810f0cbe3e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -9,7 +9,6 @@ pub use self::Variance::*;\n use crate::arena::Arena;\n use crate::hir::exports::ExportMap;\n use crate::hir::map as hir_map;\n-\n use crate::ich::Fingerprint;\n use crate::ich::StableHashingContext;\n use crate::infer::canonical::Canonical;\n@@ -19,7 +18,6 @@ use crate::middle::resolve_lifetime::ObjectLifetimeDefault;\n use crate::mir::interpret::ErrorHandled;\n use crate::mir::GeneratorLayout;\n use crate::mir::ReadOnlyBodyAndCache;\n-use crate::session::DataTypeKind;\n use crate::traits::{self, Reveal};\n use crate::ty;\n use crate::ty::layout::VariantIdx;\n@@ -42,6 +40,7 @@ use rustc_hir::{Constness, GlobMap, Node, TraitMap};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Encodable, Encoder};\n+use rustc_session::DataTypeKind;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;"}, {"sha": "e3859ed12a2ebb2c31297b79df514125c018da98", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -19,8 +19,6 @@ use crate::mir::interpret::GlobalId;\n use crate::mir::interpret::{ConstEvalRawResult, ConstEvalResult, ConstValue};\n use crate::mir::interpret::{LitToConstError, LitToConstInput};\n use crate::mir::mono::CodegenUnit;\n-use crate::session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n-use crate::session::CrateDisambiguator;\n use crate::traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n     CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n@@ -49,6 +47,8 @@ use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex};\n use rustc_hir::{Crate, HirIdSet, ItemLocalId, TraitCandidate};\n use rustc_index::vec::IndexVec;\n+use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n+use rustc_session::CrateDisambiguator;\n use rustc_target::spec::PanicStrategy;\n \n use rustc_ast::ast;"}, {"sha": "62c2bd801ee33626c8643f68def62de45d2c5d60", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -3,7 +3,6 @@ use crate::hir::map::definitions::DefPathHash;\n use crate::ich::{CachingSourceMapView, Fingerprint};\n use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use crate::mir::{self, interpret};\n-use crate::session::{CrateDisambiguator, Session};\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n use crate::ty::{self, Ty};\n@@ -19,6 +18,7 @@ use rustc_serialize::{\n     opaque, Decodable, Decoder, Encodable, Encoder, SpecializedDecoder, SpecializedEncoder,\n     UseSpecializedDecodable, UseSpecializedEncodable,\n };\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::hygiene::{ExpnId, SyntaxContext};\n use rustc_span::source_map::{SourceMap, StableSourceFileId};\n use rustc_span::{BytePos, SourceFile, Span, DUMMY_SP};"}, {"sha": "43a6b7ac04cd9c15c6e9ba3a3ca1f929c67ec850", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -37,7 +37,6 @@\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n-use rustc::hir::map::Map;\n use rustc::{bug, span_bug};\n use rustc_ast::ast;\n use rustc_ast::ast::*;\n@@ -1463,7 +1462,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         impl<'r, 'a, 'v, 'hir> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n-            type Map = Map<'v>;\n+            type Map = intravisit::ErasedMap<'v>;\n \n             fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None"}, {"sha": "b5b0a3089ce0f55054a9667bcf688e4e50bd76f0", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,14 +1,14 @@\n use super::{AnonymousLifetimeMode, ImplTraitContext, LoweringContext, ParamMode};\n use super::{GenericArgsCtor, ParenthesizedGenericArgs};\n \n-use rustc::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc::span_bug;\n use rustc_ast::ast::{self, *};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, PartialRes, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::GenericArg;\n+use rustc_session::lint::builtin::ELIDED_LIFETIMES_IN_PATHS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::Span;\n "}, {"sha": "072607fff85c73cb9f020dfa3f626c7c2db83b91", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -3,8 +3,6 @@\n use std::ffi::CString;\n \n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n-use rustc::session::config::{OptLevel, Sanitizer};\n-use rustc::session::Session;\n use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -13,6 +11,8 @@ use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_session::config::{OptLevel, Sanitizer};\n+use rustc_session::Session;\n use rustc_target::abi::call::Conv;\n use rustc_target::spec::PanicStrategy;\n "}, {"sha": "239ca57ba41434d38b13858dc9157473d00c5bc6", "filename": "src/librustc_codegen_llvm/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Farchive.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -9,9 +9,9 @@ use std::str;\n \n use crate::llvm::archive_ro::{ArchiveRO, Child};\n use crate::llvm::{self, ArchiveKind};\n-use rustc::session::Session;\n use rustc_codegen_ssa::back::archive::{find_library, ArchiveBuilder};\n use rustc_codegen_ssa::{looks_like_rust_object_file, METADATA_FILENAME, RLIB_BYTECODE_EXTENSION};\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n struct ArchiveConfig<'a> {"}, {"sha": "1b64750f51febd12f10cb21c8abb0525524951b5", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -9,7 +9,6 @@ use log::{debug, info};\n use rustc::bug;\n use rustc::dep_graph::WorkProduct;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n-use rustc::session::config::{self, Lto};\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule, ThinShared};\n use rustc_codegen_ssa::back::symbol_export;\n use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n@@ -19,6 +18,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{FatalError, Handler};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n+use rustc_session::config::{self, Lto};\n \n use std::ffi::{CStr, CString};\n use std::fs::File;"}, {"sha": "2327b96e26c36597a125f1bbf945707d493d4771", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -15,8 +15,6 @@ use crate::LlvmCodegenBackend;\n use crate::ModuleLlvm;\n use log::debug;\n use rustc::bug;\n-use rustc::session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_codegen_ssa::back::write::{run_assembler, CodegenContext, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n@@ -25,6 +23,8 @@ use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_errors::{FatalError, Handler};\n use rustc_fs_util::{link_or_copy, path_to_c_string};\n use rustc_hir::def_id::LOCAL_CRATE;\n+use rustc_session::config::{self, Lto, OutputType, Passes, Sanitizer, SwitchWithOptPath};\n+use rustc_session::Session;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n use std::ffi::CString;"}, {"sha": "0d063d82c6934ff700ba8fd8476d937abfa776ee", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -28,13 +28,13 @@ use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::exported_symbols;\n use rustc::mir::mono::{Linkage, Visibility};\n-use rustc::session::config::DebugInfo;\n use rustc::ty::TyCtxt;\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n use rustc_codegen_ssa::mono_item::MonoItemExt;\n use rustc_codegen_ssa::traits::*;\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc_session::config::DebugInfo;\n use rustc_span::symbol::Symbol;\n \n use std::ffi::CString;"}, {"sha": "b37d63fce659235a79dbe3db9fa704069579922b", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -7,7 +7,6 @@ use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n use libc::{c_char, c_uint};\n use log::debug;\n-use rustc::session::config::{self, Sanitizer};\n use rustc::ty::layout::{self, Align, Size, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_codegen_ssa::base::to_immediate;\n@@ -19,6 +18,7 @@ use rustc_codegen_ssa::MemFlags;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n+use rustc_session::config::{self, Sanitizer};\n use rustc_target::spec::{HasTargetSpec, Target};\n use std::borrow::Cow;\n use std::ffi::CStr;"}, {"sha": "7b1526e9da154747ebf41057ca8282fb6bc67f7c", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,31 +1,30 @@\n use crate::attributes;\n+use crate::callee::get_fn;\n use crate::debuginfo;\n use crate::llvm;\n use crate::llvm_util;\n-use crate::value::Value;\n-use rustc::dep_graph::DepGraphSafe;\n-\n use crate::type_::Type;\n-use rustc_codegen_ssa::traits::*;\n+use crate::value::Value;\n \n-use crate::callee::get_fn;\n use rustc::bug;\n+use rustc::dep_graph::DepGraphSafe;\n use rustc::mir::mono::CodegenUnit;\n-use rustc::session::config::{self, CFGuard, DebugInfo};\n-use rustc::session::Session;\n use rustc::ty::layout::{\n     HasParamEnv, LayoutError, LayoutOf, PointeeInfo, Size, TyLayout, VariantIdx,\n };\n use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc_codegen_ssa::base::wants_msvc_seh;\n+use rustc_codegen_ssa::traits::*;\n use rustc_data_structures::base_n;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n-use rustc_target::spec::{HasTargetSpec, Target};\n-\n+use rustc_session::config::{self, CFGuard, DebugInfo};\n+use rustc_session::Session;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::Symbol;\n+use rustc_target::spec::{HasTargetSpec, Target};\n+\n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n use std::str;"}, {"sha": "e4cbffb6db3c30704e351dff1988d71c9d545d79", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -6,8 +6,8 @@ use crate::builder::Builder;\n use crate::common::CodegenCx;\n use crate::value::Value;\n use rustc::bug;\n-use rustc::session::config::DebugInfo;\n use rustc_codegen_ssa::traits::*;\n+use rustc_session::config::DebugInfo;\n \n use rustc_ast::attr;\n use rustc_span::symbol::sym;"}, {"sha": "6a7ed4e1dc384266eeefcecc13c58b047cf179dd", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -24,7 +24,6 @@ use rustc::ich::NodeIdHashingMode;\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::interpret::truncate;\n use rustc::mir::{self, Field, GeneratorLayout};\n-use rustc::session::config::{self, DebugInfo};\n use rustc::ty::layout::{\n     self, Align, Integer, IntegerExt, LayoutOf, PrimitiveExt, Size, TyLayout, VariantIdx,\n };\n@@ -42,6 +41,7 @@ use rustc_fs_util::path_to_c_string;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_session::config::{self, DebugInfo};\n use rustc_span::symbol::{Interner, Symbol};\n use rustc_span::{self, FileName, Span};\n use rustc_target::abi::HasDataLayout;"}, {"sha": "85decff35b9e054267083b0f9f1629774541516e", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -20,12 +20,12 @@ use crate::builder::Builder;\n use crate::common::CodegenCx;\n use crate::value::Value;\n use rustc::mir;\n-use rustc::session::config::{self, DebugInfo};\n use rustc::ty::{self, Instance, ParamEnv, Ty};\n use rustc_codegen_ssa::debuginfo::type_names;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext, VariableKind};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::IndexVec;\n+use rustc_session::config::{self, DebugInfo};\n \n use libc::c_uint;\n use log::debug;"}, {"sha": "fa730d289b16bca1dd37c2e3046087a9ec12c4f8", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -15,31 +15,30 @@\n #![recursion_limit = \"256\"]\n \n use back::write::{create_informational_target_machine, create_target_machine};\n-use rustc_span::symbol::Symbol;\n \n pub use llvm_util::target_features;\n-use rustc::dep_graph::WorkProduct;\n+use rustc::dep_graph::{DepGraph, WorkProduct};\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n+use rustc::ty::{self, TyCtxt};\n+use rustc::util::common::ErrorReported;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_ssa::back::lto::{LtoModuleCodegen, SerializedModule, ThinModule};\n use rustc_codegen_ssa::back::write::{CodegenContext, FatLTOInput, ModuleConfig};\n use rustc_codegen_ssa::traits::*;\n+use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_ssa::{CodegenResults, CompiledModule};\n+use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_errors::{FatalError, Handler};\n+use rustc_serialize::json;\n+use rustc_session::config::{self, OptLevel, OutputFilenames, PrintRequest};\n+use rustc_session::Session;\n+use rustc_span::symbol::Symbol;\n+\n use std::any::Any;\n use std::ffi::CStr;\n use std::fs;\n use std::sync::Arc;\n \n-use rustc::dep_graph::DepGraph;\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc::session::config::{self, OptLevel, OutputFilenames, PrintRequest};\n-use rustc::session::Session;\n-use rustc::ty::{self, TyCtxt};\n-use rustc::util::common::ErrorReported;\n-use rustc_codegen_ssa::ModuleCodegen;\n-use rustc_codegen_utils::codegen_backend::CodegenBackend;\n-use rustc_serialize::json;\n-\n mod back {\n     pub mod archive;\n     pub mod bytecode;"}, {"sha": "c17c06718f506a3f82dac0c51a8477a64a031883", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -694,8 +694,8 @@ pub mod debuginfo {\n     }\n \n     impl DebugEmissionKind {\n-        pub fn from_generic(kind: rustc::session::config::DebugInfo) -> Self {\n-            use rustc::session::config::DebugInfo;\n+        pub fn from_generic(kind: rustc_session::config::DebugInfo) -> Self {\n+            use rustc_session::config::DebugInfo;\n             match kind {\n                 DebugInfo::None => DebugEmissionKind::NoDebug,\n                 DebugInfo::Limited => DebugEmissionKind::LineTablesOnly,"}, {"sha": "5e924c9af8481457d5a9af061676ac8844494e10", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -2,10 +2,10 @@ use crate::back::write::create_informational_target_machine;\n use crate::llvm;\n use libc::c_int;\n use rustc::bug;\n-use rustc::session::config::PrintRequest;\n-use rustc::session::Session;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_feature::UnstableFeatures;\n+use rustc_session::config::PrintRequest;\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};"}, {"sha": "f83b4b2b0c025adb24d3c9c76fb45b42ae1a9020", "filename": "src/librustc_codegen_ssa/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Farchive.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,4 +1,4 @@\n-use rustc::session::Session;\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n use std::io;"}, {"sha": "af413d3cdfe6862ec25013ae7f902500101b4098", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,15 +1,15 @@\n use rustc::middle::cstore::{EncodedMetadata, LibSource, NativeLibrary, NativeLibraryKind};\n use rustc::middle::dependency_format::Linkage;\n-use rustc::session::config::{\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_fs_util::fix_windows_verbatim_for_gcc;\n+use rustc_hir::def_id::CrateNum;\n+use rustc_session::config::{\n     self, CFGuard, DebugInfo, OutputFilenames, OutputType, PrintRequest, Sanitizer,\n };\n-use rustc::session::search_paths::PathKind;\n+use rustc_session::search_paths::PathKind;\n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n-use rustc::session::{filesearch, Session};\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_fs_util::fix_windows_verbatim_for_gcc;\n-use rustc_hir::def_id::CrateNum;\n+use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkerFlavor, PanicStrategy, RelroLevel};\n "}, {"sha": "6b30ae8559db9e146d95f1587b7126a4eae6521a", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -2,19 +2,19 @@ use super::archive;\n use super::command::Command;\n use super::symbol_export;\n \n-use rustc_data_structures::fx::FxHashMap;\n use std::ffi::{OsStr, OsString};\n use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufWriter};\n use std::path::{Path, PathBuf};\n \n use rustc::middle::dependency_format::Linkage;\n-use rustc::session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel};\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_serialize::{json, Encoder};\n+use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel};\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n "}, {"sha": "8368d98884a5d5dfccde1621dec110fc42c7584c", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -3,7 +3,6 @@ use std::sync::Arc;\n \n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::middle::exported_symbols::{metadata_symbol_name, ExportedSymbol, SymbolExportLevel};\n-use rustc::session::config::{self, Sanitizer};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::Instance;\n@@ -16,6 +15,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n+use rustc_session::config::{self, Sanitizer};\n \n pub fn threshold(tcx: TyCtxt<'_>) -> SymbolExportLevel {\n     crates_export_threshold(&tcx.sess.crate_types.borrow())"}, {"sha": "303ee385658480c4063ddf151306afe028db85bd", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -14,10 +14,6 @@ use jobserver::{Acquired, Client};\n use rustc::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::exported_symbols::SymbolExportLevel;\n-use rustc::session::config::{\n-    self, Lto, OutputFilenames, OutputType, Passes, Sanitizer, SwitchWithOptPath,\n-};\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_ast::attr;\n use rustc_data_structures::fx::FxHashMap;\n@@ -34,6 +30,10 @@ use rustc_incremental::{\n     copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir, in_incr_comp_dir_sess,\n };\n use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n+use rustc_session::config::{\n+    self, Lto, OutputFilenames, OutputType, Passes, Sanitizer, SwitchWithOptPath,\n+};\n+use rustc_session::Session;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{sym, Symbol};"}, {"sha": "e57cae30b7795446777e956f0157dd74002b30bf", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -31,8 +31,6 @@ use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::middle::lang_items;\n use rustc::middle::lang_items::StartFnLangItem;\n use rustc::mir::mono::{CodegenUnit, CodegenUnitNameBuilder, MonoItem};\n-use rustc::session::config::{self, EntryFnType, Lto};\n-use rustc::session::Session;\n use rustc::ty::layout::{self, Align, HasTyCtxt, LayoutOf, TyLayout, VariantIdx};\n use rustc::ty::layout::{FAT_PTR_ADDR, FAT_PTR_EXTRA};\n use rustc::ty::query::Providers;\n@@ -46,6 +44,8 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_index::vec::Idx;\n use rustc_session::cgu_reuse_tracker::CguReuse;\n+use rustc_session::config::{self, EntryFnType, Lto};\n+use rustc_session::Session;\n use rustc_span::Span;\n \n use std::cmp;"}, {"sha": "147b23995023f04585159205f1a6bcb2d27360ae", "filename": "src/librustc_codegen_ssa/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fcommon.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,8 +1,8 @@\n #![allow(non_camel_case_types, non_snake_case)]\n \n-use rustc::session::Session;\n use rustc::ty::{Ty, TyCtxt};\n use rustc_errors::struct_span_err;\n+use rustc_session::Session;\n use rustc_span::Span;\n \n use crate::base;"}, {"sha": "d2afbdc23e1fdd586e3518c47fefb0ca9b314a57", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -21,12 +21,12 @@ use rustc::dep_graph::WorkProduct;\n use rustc::middle::cstore::{CrateSource, LibSource, NativeLibrary};\n use rustc::middle::dependency_format::Dependencies;\n use rustc::middle::lang_items::LangItem;\n-use rustc::session::config::{OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc::ty::query::Providers;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::CrateNum;\n+use rustc_session::config::{OutputFilenames, OutputType, RUST_CGU_EXT};\n use rustc_span::symbol::Symbol;\n use std::path::{Path, PathBuf};\n "}, {"sha": "cbe5f51115246c02ca27492f06b4626fc35cee1b", "filename": "src/librustc_codegen_ssa/mir/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fdebuginfo.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,10 +1,10 @@\n use crate::traits::*;\n use rustc::mir;\n-use rustc::session::config::DebugInfo;\n use rustc::ty;\n use rustc::ty::layout::{LayoutOf, Size};\n use rustc_hir::def_id::CrateNum;\n use rustc_index::vec::IndexVec;\n+use rustc_session::config::DebugInfo;\n \n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};"}, {"sha": "7acae300a2f0276a7dca59695443e36f7a3a90c4", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -3,12 +3,12 @@ use super::CodegenObject;\n use crate::ModuleCodegen;\n \n use rustc::middle::cstore::EncodedMetadata;\n-use rustc::session::{config, Session};\n use rustc::ty::layout::{HasTyCtxt, LayoutOf, TyLayout};\n use rustc::ty::Ty;\n use rustc::ty::TyCtxt;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n+use rustc_session::{config, Session};\n use rustc_span::symbol::Symbol;\n \n use std::sync::Arc;"}, {"sha": "6863b474cb6de95923105b5b55cc4e6531f9d454", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,8 +1,8 @@\n use super::BackendTypes;\n use rustc::mir::mono::CodegenUnit;\n-use rustc::session::Session;\n use rustc::ty::{self, Instance, Ty};\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_session::Session;\n use std::cell::RefCell;\n use std::sync::Arc;\n "}, {"sha": "7ab59029bc8a9fbf9676a726a367a263469ad54e", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -21,3 +21,4 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n+rustc_session = { path = \"../librustc_session\" }"}, {"sha": "561692e70669aaa0ad54c3f4a9a7da62adf7f1a9", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -10,11 +10,11 @@ use std::any::Any;\n \n use rustc::dep_graph::DepGraph;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n-use rustc::session::config::{OutputFilenames, PrintRequest};\n-use rustc::session::Session;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc::util::common::ErrorReported;\n+use rustc_session::config::{OutputFilenames, PrintRequest};\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n \n pub use rustc_data_structures::sync::MetadataRef;"}, {"sha": "1f53eec514bbf682f36c0fcd60b1cf517460a5e6", "filename": "src/librustc_codegen_utils/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_utils%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_utils%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flink.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,6 +1,6 @@\n-use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n-use rustc::session::Session;\n use rustc_ast::{ast, attr};\n+use rustc_session::config::{self, Input, OutputFilenames, OutputType};\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use std::path::{Path, PathBuf};"}, {"sha": "eb3fe49a5e9cc6f1d46b05d76ae0b2a92e94ad29", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -89,12 +89,12 @@\n \n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n-use rustc::session::config::SymbolManglingVersion;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Instance, TyCtxt};\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_hir::Node;\n+use rustc_session::config::SymbolManglingVersion;\n \n use rustc_span::symbol::Symbol;\n "}, {"sha": "3e6449582319fedf36ef8bbb6d88d7b9c1114631", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -33,6 +33,7 @@ rustc_interface = { path = \"../librustc_interface\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n+rustc_session = { path = \"../librustc_session\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }"}, {"sha": "34f0c182499dbc410a3f63c5be42030635122f8d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -18,12 +18,7 @@ extern crate lazy_static;\n \n pub extern crate rustc_plugin_impl as plugin;\n \n-use rustc::lint::{Lint, LintId};\n use rustc::middle::cstore::MetadataLoader;\n-use rustc::session::config::nightly_options;\n-use rustc::session::config::{ErrorOutputType, Input, OutputType, PrintRequest};\n-use rustc::session::{config, DiagnosticOutput, Session};\n-use rustc::session::{early_error, early_warn};\n use rustc::ty::TyCtxt;\n use rustc::util::common::ErrorReported;\n use rustc_codegen_ssa::CodegenResults;\n@@ -43,6 +38,11 @@ use rustc_metadata::locator;\n use rustc_save_analysis as save;\n use rustc_save_analysis::DumpHandler;\n use rustc_serialize::json::{self, ToJson};\n+use rustc_session::config::nightly_options;\n+use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest};\n+use rustc_session::lint::{Lint, LintId};\n+use rustc_session::{config, DiagnosticOutput, Session};\n+use rustc_session::{early_error, early_warn};\n \n use std::borrow::Cow;\n use std::cmp::max;\n@@ -652,7 +652,7 @@ impl RustcDefaultCalls {\n         odir: &Option<PathBuf>,\n         ofile: &Option<PathBuf>,\n     ) -> Compilation {\n-        use rustc::session::config::PrintRequest::*;\n+        use rustc_session::config::PrintRequest::*;\n         // PrintRequest::NativeStaticLibs is special - printed during linking\n         // (empty iterator returns true)\n         if sess.opts.prints.iter().all(|&p| p == PrintRequest::NativeStaticLibs) {"}, {"sha": "1e5cc55a82853058dee3fd7ae236b4ed56adbda5", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,8 +1,6 @@\n //! The various pretty-printing routines.\n \n use rustc::hir::map as hir_map;\n-use rustc::session::config::{Input, PpMode, PpSourceMode};\n-use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_ast::ast;\n@@ -11,6 +9,8 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::print as pprust_hir;\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n+use rustc_session::config::{Input, PpMode, PpSourceMode};\n+use rustc_session::Session;\n use rustc_span::FileName;\n \n use std::cell::Cell;"}, {"sha": "26f1fa267f9b5e828877dd1101c17c5ac652d94d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -5,7 +5,7 @@\n //! There are various `Emitter` implementations that generate different output formats such as\n //! JSON and human readable output.\n //!\n-//! The output types are defined in `librustc::session::config::ErrorOutputType`.\n+//! The output types are defined in `rustc_session::config::ErrorOutputType`.\n \n use Destination::*;\n "}, {"sha": "316b31f069855e8ae69a98dbb9d04fbe4f516949", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -127,6 +127,25 @@ pub trait Map<'hir> {\n     fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir>;\n }\n \n+/// An erased version of `Map<'hir>`, using dynamic dispatch.\n+/// NOTE: This type is effectively only usable with `NestedVisitorMap::None`.\n+pub struct ErasedMap<'hir>(&'hir dyn Map<'hir>);\n+\n+impl<'hir> Map<'hir> for ErasedMap<'hir> {\n+    fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n+        self.0.body(id)\n+    }\n+    fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+        self.0.item(id)\n+    }\n+    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n+        self.0.trait_item(id)\n+    }\n+    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n+        self.0.impl_item(id)\n+    }\n+}\n+\n /// Specifies what nested things a visitor wants to visit. The most\n /// common choice is `OnlyBodies`, which will cause the visitor to\n /// visit fn bodies for fns that it encounters, but skip over nested"}, {"sha": "048a81b81bab3879f19c1be80f51dafe0ca21c13", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -14,8 +14,8 @@ use std::fs;\n use std::io::{self, Read};\n use std::path::Path;\n \n-use rustc::session::config::nightly_options;\n use rustc_serialize::opaque::Encoder;\n+use rustc_session::config::nightly_options;\n \n /// The first few bytes of files generated by incremental compilation.\n const FILE_MAGIC: &[u8] = b\"RSIC\";"}, {"sha": "4926f726f35935779407db28373def3eeaf241f4", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -103,11 +103,11 @@\n //! unsupported file system and emit a warning in that case. This is not yet\n //! implemented.\n \n-use rustc::session::{CrateDisambiguator, Session};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::{base_n, flock};\n use rustc_fs_util::{link_or_copy, LinkOrCopy};\n+use rustc_session::{CrateDisambiguator, Session};\n \n use std::fs as std_fs;\n use std::io;"}, {"sha": "8a11586250dec543d49909ba45584509b32b20ae", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,12 +1,12 @@\n //! Code to save/load the dep-graph from files.\n \n use rustc::dep_graph::{PreviousDepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n-use rustc::session::Session;\n use rustc::ty::query::OnDiskCache;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_serialize::opaque::Decoder;\n use rustc_serialize::Decodable as RustcDecodable;\n+use rustc_session::Session;\n use std::path::Path;\n \n use super::data::*;"}, {"sha": "b465a11c99c069bdbe3c97b9088f02d05d812278", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,10 +1,10 @@\n use rustc::dep_graph::{DepGraph, DepKind, WorkProduct, WorkProductId};\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::join;\n use rustc_serialize::opaque::Encoder;\n use rustc_serialize::Encodable as RustcEncodable;\n+use rustc_session::Session;\n use std::fs;\n use std::path::PathBuf;\n "}, {"sha": "aa3588b284b2812455f5dd3d18195e82fc78f09d", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -2,8 +2,8 @@\n \n use crate::persist::fs::*;\n use rustc::dep_graph::{WorkProduct, WorkProductFileKind, WorkProductId};\n-use rustc::session::Session;\n use rustc_fs_util::link_or_copy;\n+use rustc_session::Session;\n use std::fs as std_fs;\n use std::path::PathBuf;\n "}, {"sha": "9ecd056430c204b571120e7b3e37d019410501bc", "filename": "src/librustc_infer/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_infer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_infer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -18,6 +18,7 @@ rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_index = { path = \"../librustc_index\" }\n rustc_macros = { path = \"../librustc_macros\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "391fce946bf43b37fa9b0bddedeb0d39f7213ff5", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -5,7 +5,6 @@ pub use self::LateBoundRegionConversionTime::*;\n pub use self::RegionVariableOrigin::*;\n pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n-pub use rustc::ty::IntVarValue;\n \n use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n \n@@ -16,24 +15,25 @@ use rustc::middle::free_region::RegionRelations;\n use rustc::middle::region;\n use rustc::mir;\n use rustc::mir::interpret::ConstEvalResult;\n-use rustc::session::config::BorrowckMode;\n use rustc::traits::select;\n use rustc::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::relate::RelateResult;\n use rustc::ty::subst::{GenericArg, InternalSubsts, SubstsRef};\n+pub use rustc::ty::IntVarValue;\n use rustc::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n use rustc::ty::{ConstVid, FloatVid, IntVid, TyVid};\n-\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::unify as ut;\n use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_session::config::BorrowckMode;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n+\n use std::cell::{Cell, Ref, RefCell};\n use std::collections::BTreeMap;\n use std::fmt;"}, {"sha": "c5ebcf0696fba163a68f8074bd7ba32902ab33b2", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,10 +1,6 @@\n pub use crate::passes::BoxedResolver;\n use crate::util;\n \n-use rustc::lint;\n-use rustc::session::config::{self, ErrorOutputType, Input, OutputFilenames};\n-use rustc::session::early_error;\n-use rustc::session::{DiagnosticOutput, Session};\n use rustc::ty;\n use rustc::util::common::ErrorReported;\n use rustc_ast::ast::{self, MetaItemKind};\n@@ -16,7 +12,11 @@ use rustc_data_structures::OnDrop;\n use rustc_errors::registry::Registry;\n use rustc_lint::LintStore;\n use rustc_parse::new_parser_from_source_str;\n+use rustc_session::config::{self, ErrorOutputType, Input, OutputFilenames};\n+use rustc_session::early_error;\n+use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n+use rustc_session::{DiagnosticOutput, Session};\n use rustc_span::edition;\n use rustc_span::source_map::{FileLoader, FileName, SourceMap};\n use std::path::PathBuf;"}, {"sha": "ee323b204b7a01f28a3b965028d97dfc2f282a36", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -6,13 +6,8 @@ use log::{info, log_enabled, warn};\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map::Definitions;\n-use rustc::lint;\n use rustc::middle;\n use rustc::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n-use rustc::session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n-use rustc::session::config::{PpMode, PpSourceMode};\n-use rustc::session::search_paths::PathKind;\n-use rustc::session::Session;\n use rustc::ty::steal::Steal;\n use rustc::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc::util::common::ErrorReported;\n@@ -34,6 +29,11 @@ use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str};\n use rustc_passes::{self, hir_stats, layout_test};\n use rustc_plugin_impl as plugin;\n use rustc_resolve::{Resolver, ResolverArenas};\n+use rustc_session::config::{self, CrateType, Input, OutputFilenames, OutputType};\n+use rustc_session::config::{PpMode, PpSourceMode};\n+use rustc_session::lint;\n+use rustc_session::search_paths::PathKind;\n+use rustc_session::Session;\n use rustc_span::symbol::Symbol;\n use rustc_span::FileName;\n use rustc_trait_selection::traits;"}, {"sha": "3514829dca7f777034b4a87c90e073f719195db8", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -3,8 +3,6 @@ use crate::passes::{self, BoxedResolver, QueryContext};\n \n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n-use rustc::session::config::{OutputFilenames, OutputType};\n-use rustc::session::Session;\n use rustc::ty::steal::Steal;\n use rustc::ty::{GlobalCtxt, ResolverOutputs};\n use rustc::util::common::ErrorReported;\n@@ -15,6 +13,8 @@ use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::Crate;\n use rustc_incremental::DepGraphFuture;\n use rustc_lint::LintStore;\n+use rustc_session::config::{OutputFilenames, OutputType};\n+use rustc_session::Session;\n use std::any::Any;\n use std::cell::{Ref, RefCell, RefMut};\n use std::mem;"}, {"sha": "db5ada9291435f5b8c9f7b02c1488df1dd6bc419", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -2,16 +2,16 @@ extern crate getopts;\n \n use crate::interface::parse_cfgspecs;\n \n-use rustc::lint::Level;\n use rustc::middle::cstore;\n-use rustc::session::config::{build_configuration, build_session_options, to_crate_config};\n-use rustc::session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n-use rustc::session::config::{ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n-use rustc::session::config::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n-use rustc::session::search_paths::SearchPath;\n-use rustc::session::{build_session, Session};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n+use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n+use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n+use rustc_session::config::{ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n+use rustc_session::config::{Externs, OutputType, OutputTypes, SymbolManglingVersion};\n+use rustc_session::lint::Level;\n+use rustc_session::search_paths::SearchPath;\n+use rustc_session::{build_session, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel};"}, {"sha": "5c4de9e7155c63c30f4a34cd86527d771fbb514a", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,5 +1,4 @@\n use log::info;\n-use rustc::lint;\n use rustc::ty;\n use rustc_ast::ast::{AttrVec, BlockCheckMode};\n use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n@@ -18,7 +17,7 @@ use rustc_metadata::dynamic_lib::DynamicLibrary;\n use rustc_resolve::{self, Resolver};\n use rustc_session as session;\n use rustc_session::config::{ErrorOutputType, Input, OutputFilenames};\n-use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::lint::{self, BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::parse::CrateConfig;\n use rustc_session::CrateDisambiguator;\n use rustc_session::{config, early_error, filesearch, DiagnosticOutput, Session};"}, {"sha": "408031028b102dac8f11d1e594a81560161e47fd", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -22,7 +22,6 @@\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n-use rustc::hir::map::Map;\n use rustc::lint::LintDiagnosticBuilder;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n use rustc_ast::ast::{self, Expr};\n@@ -1071,7 +1070,7 @@ impl TypeAliasBounds {\n             err: &'a mut DiagnosticBuilder<'db>,\n         }\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n-            type Map = Map<'v>;\n+            type Map = intravisit::ErasedMap<'v>;\n \n             fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None"}, {"sha": "088cba83ef998164cb7c1f11fb621709a01a44f6", "filename": "src/librustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -26,6 +26,7 @@ stable_deref_trait = \"1.0.0\"\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_expand = { path = \"../librustc_expand\" }\n rustc_span = { path = \"../librustc_span\" }\n+rustc_session = { path = \"../librustc_session\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"errhandlingapi\", \"libloaderapi\"] }"}, {"sha": "9616e1249dc9874c2f69e8567ae3781a0a6d38f7", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -6,19 +6,18 @@ use crate::rmeta::{CrateDep, CrateMetadata, CrateNumMap, CrateRoot, MetadataBlob\n use rustc::hir::map::Definitions;\n use rustc::middle::cstore::DepKind;\n use rustc::middle::cstore::{CrateSource, ExternCrate, ExternCrateSource, MetadataLoaderDyn};\n-use rustc::session::config;\n-use rustc::session::search_paths::PathKind;\n-use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::TyCtxt;\n-use rustc_ast::ast;\n-use rustc_ast::attr;\n use rustc_ast::expand::allocator::{global_allocator_spans, AllocatorKind};\n+use rustc_ast::{ast, attr};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::struct_span_err;\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_index::vec::IndexVec;\n+use rustc_session::config;\n+use rustc_session::search_paths::PathKind;\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};"}, {"sha": "4cfaf03b7a5f63ae59e9a33b41271768695d98ee", "filename": "src/librustc_metadata/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdependency_format.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -56,10 +56,10 @@ use crate::creader::CStore;\n use rustc::middle::cstore::LinkagePreference::{self, RequireDynamic, RequireStatic};\n use rustc::middle::cstore::{self, DepKind};\n use rustc::middle::dependency_format::{Dependencies, DependencyList, Linkage};\n-use rustc::session::config;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::CrateNum;\n+use rustc_session::config;\n use rustc_target::spec::PanicStrategy;\n \n crate fn calculate(tcx: TyCtxt<'_>) -> Dependencies {"}, {"sha": "e401dc0f6e7d49d698c1fd17143f42c219c90a94", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -31,7 +31,7 @@ pub mod dynamic_lib;\n pub mod locator;\n \n pub fn validate_crate_name(\n-    sess: Option<&rustc::session::Session>,\n+    sess: Option<&rustc_session::Session>,\n     s: &str,\n     sp: Option<rustc_span::Span>,\n ) {"}, {"sha": "1ede629e7ef7dc9af47c52d7aa5427c4df418dfe", "filename": "src/librustc_metadata/locator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flocator.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -216,13 +216,13 @@ use crate::creader::Library;\n use crate::rmeta::{rustc_version, MetadataBlob, METADATA_HEADER};\n \n use rustc::middle::cstore::{CrateSource, MetadataLoader};\n-use rustc::session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n-use rustc::session::search_paths::PathKind;\n-use rustc::session::{config, CrateDisambiguator, Session};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_session::filesearch::{FileDoesntMatch, FileMatches, FileSearch};\n+use rustc_session::search_paths::PathKind;\n+use rustc_session::{config, CrateDisambiguator, Session};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_target::spec::{Target, TargetTriple};"}, {"sha": "64bbf393ba0f1ca9e4d429703581b52ceb3bd10a", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,12 +1,12 @@\n use rustc::middle::cstore::{self, NativeLibrary};\n-use rustc::session::parse::feature_err;\n-use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc_attr as attr;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;"}, {"sha": "cf0f88160586678bb72fe584b1b598cc424ca5af", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -14,36 +14,35 @@ use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n use rustc::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc::mir::{self, interpret, BodyAndCache, Promoted};\n-use rustc::session::Session;\n use rustc::ty::codec::TyDecoder;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::util::common::record_time;\n+use rustc_ast::ast::{self, Ident};\n+use rustc_attr as attr;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{AtomicCell, Lock, LockGuard, Lrc, Once};\n+use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n+use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_index::vec::{Idx, IndexVec};\n+use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n+use rustc_session::Session;\n+use rustc_span::source_map::{self, respan, Spanned};\n+use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n \n+use log::debug;\n+use proc_macro::bridge::client::ProcMacro;\n use std::io;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::u32;\n \n-use log::debug;\n-use proc_macro::bridge::client::ProcMacro;\n-use rustc_ast::ast::{self, Ident};\n-use rustc_attr as attr;\n-use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n-use rustc_expand::proc_macro::{AttrProcMacro, BangProcMacro, ProcMacroDerive};\n-use rustc_serialize::{opaque, Decodable, Decoder, SpecializedDecoder};\n-use rustc_span::source_map::{self, respan, Spanned};\n-use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::{self, hygiene::MacroKind, BytePos, Pos, Span, DUMMY_SP};\n-\n pub use cstore_impl::{provide, provide_extern};\n \n mod cstore_impl;"}, {"sha": "cc2bd51f92f3e132889605a34621ec60c6cdf81d", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -10,7 +10,6 @@ use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::middle::cstore::{CrateSource, CrateStore, EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n-use rustc::session::{CrateDisambiguator, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::query::QueryConfig;\n use rustc::ty::{self, TyCtxt};\n@@ -20,6 +19,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::Symbol;\n "}, {"sha": "90179520a623313c05af550bf11898a629b7fd9f", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -12,33 +12,31 @@ use rustc::traits::specialization_graph;\n use rustc::ty::codec::{self as ty_codec, TyEncoder};\n use rustc::ty::layout::VariantIdx;\n use rustc::ty::{self, SymbolName, Ty, TyCtxt};\n+use rustc_ast::ast;\n+use rustc_ast::attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_data_structures::sync::Lrc;\n+use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{AnonConst, GenericParamKind};\n use rustc_index::vec::Idx;\n-\n-use rustc::session::config::{self, CrateType};\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::Lrc;\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n-\n-use log::{debug, trace};\n-use rustc_ast::ast;\n-use rustc_ast::attr;\n+use rustc_session::config::{self, CrateType};\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, FileName, SourceFile, Span};\n+\n+use log::{debug, trace};\n use std::hash::Hash;\n use std::num::NonZeroUsize;\n use std::path::Path;\n use std::u32;\n \n-use rustc_hir as hir;\n-use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-\n struct EncodeContext<'tcx> {\n     opaque: opaque::Encoder,\n     tcx: TyCtxt<'tcx>,"}, {"sha": "defa306b6d6feec2bf790b4a4c3fd14cd12a1ce4", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -7,8 +7,6 @@ use rustc::middle::cstore::{DepKind, ForeignModule, LinkagePreference, NativeLib\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::middle::lang_items;\n use rustc::mir;\n-use rustc::session::config::SymbolManglingVersion;\n-use rustc::session::CrateDisambiguator;\n use rustc::ty::{self, ReprOptions, Ty};\n use rustc_ast::ast::{self, MacroDef};\n use rustc_attr as attr;\n@@ -19,6 +17,8 @@ use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, DefIndex};\n use rustc_index::vec::IndexVec;\n use rustc_serialize::opaque::Encoder;\n+use rustc_session::config::SymbolManglingVersion;\n+use rustc_session::CrateDisambiguator;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::Symbol;\n use rustc_span::{self, Span};"}, {"sha": "256a80076b92338ddc61f89859f2fdccf4e51e7e", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -27,6 +27,7 @@ rustc_infer = { path = \"../librustc_infer\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_trait_selection = { path = \"../librustc_trait_selection\" }\n rustc_ast = { path = \"../librustc_ast\" }"}, {"sha": "6c1901455fda95f4868f550e6c65862af19c59e3", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,7 +1,5 @@\n //! This query borrow-checks the MIR to (further) ensure it is not broken.\n \n-use rustc::lint::builtin::MUTABLE_BORROW_RESERVATION_CONFLICT;\n-use rustc::lint::builtin::UNUSED_MUT;\n use rustc::mir::{\n     read_only, traversal, Body, BodyAndCache, ClearCrossCrate, Local, Location, Mutability,\n     Operand, Place, PlaceElem, PlaceRef, ReadOnlyBodyAndCache,\n@@ -11,7 +9,7 @@ use rustc::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKi\n use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, RegionVid, TyCtxt};\n-\n+use rustc_ast::ast::Name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n@@ -20,6 +18,8 @@ use rustc_hir::{def_id::DefId, HirId, Node};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_session::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT, UNUSED_MUT};\n+use rustc_span::{Span, DUMMY_SP};\n \n use either::Either;\n use smallvec::SmallVec;\n@@ -28,9 +28,6 @@ use std::collections::BTreeMap;\n use std::mem;\n use std::rc::Rc;\n \n-use rustc_ast::ast::Name;\n-use rustc_span::{Span, DUMMY_SP};\n-\n use crate::dataflow;\n use crate::dataflow::generic::{Analysis, BorrowckFlowState as Flows, BorrowckResults};\n use crate::dataflow::indexes::{BorrowIndex, InitIndex, MoveOutIndex, MovePathIndex};"}, {"sha": "dd0f9ff75b9fe45627ad10c2af088b1b927d3aa7", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,16 +1,14 @@\n+use rustc::mir::traversal;\n+use rustc::mir::{self, BasicBlock, BasicBlockData, Body, Location, Statement, Terminator};\n+use rustc::ty::{self, TyCtxt};\n use rustc_ast::ast::{self, MetaItem};\n use rustc_ast_pretty::pprust;\n-use rustc_span::symbol::{sym, Symbol};\n-\n use rustc_data_structures::work_queue::WorkQueue;\n+use rustc_hir::def_id::DefId;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_index::vec::Idx;\n-\n-use rustc::mir::traversal;\n-use rustc::mir::{self, BasicBlock, BasicBlockData, Body, Location, Statement, Terminator};\n-use rustc::session::Session;\n-use rustc::ty::{self, TyCtxt};\n-use rustc_hir::def_id::DefId;\n+use rustc_session::Session;\n+use rustc_span::symbol::{sym, Symbol};\n \n use std::borrow::Borrow;\n use std::fmt;"}, {"sha": "51760500b03c9e6e3c4a5f80d02b041d8a4e3f07", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -183,7 +183,6 @@ use rustc::mir::interpret::{ErrorHandled, GlobalAlloc, Scalar};\n use rustc::mir::mono::{InstantiationMode, MonoItem};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::{self, Local, Location};\n-use rustc::session::config::EntryFnType;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n@@ -194,6 +193,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_index::bit_set::GrowableBitSet;\n+use rustc_session::config::EntryFnType;\n use smallvec::SmallVec;\n use std::iter;\n "}, {"sha": "af7af7388bd28a62b8bb77236d8debb59d221449", "filename": "src/librustc_mir/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fops.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,9 +1,9 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n-use rustc::session::config::nightly_options;\n-use rustc::session::parse::feature_err;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::DefId;\n+use rustc_session::config::nightly_options;\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, Symbol};\n "}, {"sha": "437a154a9b80faa68eaeefe15d2466c7660b2400", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,5 +1,3 @@\n-use rustc::hir::map::Map;\n-use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n use rustc::ty::cast::CastTy;\n@@ -11,6 +9,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit;\n use rustc_hir::Node;\n+use rustc_session::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc_span::symbol::{sym, Symbol};\n \n use std::ops::Bound;\n@@ -451,7 +450,7 @@ struct UnusedUnsafeVisitor<'a> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None"}, {"sha": "ca23c44f64668f19fb61788009b8384fc85d0b3d", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -4,7 +4,6 @@\n use std::borrow::Cow;\n use std::cell::Cell;\n \n-use rustc::lint;\n use rustc::mir::interpret::{InterpResult, Scalar};\n use rustc::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n@@ -25,6 +24,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def::DefKind;\n use rustc_hir::HirId;\n use rustc_index::vec::IndexVec;\n+use rustc_session::lint;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n "}, {"sha": "795bcb57d0678cc4aff9a4d01c5ecf1ed56913e4", "filename": "src/librustc_mir/transform/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fdump_mir.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -8,8 +8,8 @@ use std::io;\n use crate::transform::{MirPass, MirSource};\n use crate::util as mir_util;\n use rustc::mir::{Body, BodyAndCache};\n-use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::ty::TyCtxt;\n+use rustc_session::config::{OutputFilenames, OutputType};\n \n pub struct Marker(pub &'static str);\n "}, {"sha": "769f3fdcc013fcb64ca46389d1ec93f57213ca57", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,25 +1,22 @@\n //! Inlining pass for MIR functions\n \n-use rustc_hir::def_id::DefId;\n-\n-use rustc_index::bit_set::BitSet;\n-use rustc_index::vec::{Idx, IndexVec};\n-\n use rustc::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc::mir::visit::*;\n use rustc::mir::*;\n-use rustc::session::config::Sanitizer;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, Instance, InstanceDef, ParamEnv, Ty, TyCtxt, TypeFoldable};\n+use rustc_attr as attr;\n+use rustc_hir::def_id::DefId;\n+use rustc_index::bit_set::BitSet;\n+use rustc_index::vec::{Idx, IndexVec};\n+use rustc_session::config::Sanitizer;\n+use rustc_target::spec::abi::Abi;\n \n use super::simplify::{remove_dead_blocks, CfgSimplifier};\n use crate::transform::{MirPass, MirSource};\n use std::collections::VecDeque;\n use std::iter;\n \n-use rustc_attr as attr;\n-use rustc_target::spec::abi::Abi;\n-\n const DEFAULT_THRESHOLD: usize = 50;\n const HINT_THRESHOLD: usize = 100;\n "}, {"sha": "3eb9d23a32a259472cc4e2d17c118dfc194f3799", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,5 +1,4 @@\n use crate::{shim, util};\n-use rustc::hir::map::Map;\n use rustc::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -86,7 +85,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             }\n             intravisit::walk_struct_def(self, v)\n         }\n-        type Map = Map<'tcx>;\n+        type Map = intravisit::ErasedMap<'tcx>;\n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }"}, {"sha": "82810f356759d4fdc68cdcd799e057dfe4860946", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -235,17 +235,15 @@ use rustc_index::vec::Idx;\n use super::{compare_const_vals, PatternFoldable, PatternFolder};\n use super::{FieldPat, Pat, PatKind, PatRange};\n \n-use rustc::ty::layout::{Integer, IntegerExt, Size, VariantIdx};\n-use rustc::ty::{self, Const, Ty, TyCtxt, TypeFoldable, VariantDef};\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::{HirId, RangeEnd};\n-\n-use rustc::lint;\n use rustc::mir::interpret::{truncate, AllocId, ConstValue, Pointer, Scalar};\n use rustc::mir::Field;\n+use rustc::ty::layout::{Integer, IntegerExt, Size, VariantIdx};\n+use rustc::ty::{self, Const, Ty, TyCtxt, TypeFoldable, VariantDef};\n use rustc::util::common::ErrorReported;\n-\n use rustc_attr::{SignedInt, UnsignedInt};\n+use rustc_hir::def_id::DefId;\n+use rustc_hir::{HirId, RangeEnd};\n+use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n \n use arena::TypedArena;"}, {"sha": "f71ec5e9ac000f768f1d063c70447e7761ef35c7", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -4,7 +4,6 @@ use super::_match::{expand_pattern, is_useful, MatchCheckCtxt, Matrix, PatStack}\n \n use super::{PatCtxt, PatKind, PatternError};\n \n-use rustc::hir::map::Map;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_ast::ast::Mutability;\n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder};\n@@ -43,7 +42,7 @@ struct MatchVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -753,7 +752,7 @@ fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     }\n \n     impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None"}, {"sha": "ae951e810e32e6cc09e1c8b0dd0455d59e01981a", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,16 +1,14 @@\n-use rustc::lint;\n use rustc::mir::Field;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n+use rustc_index::vec::Idx;\n use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n+use rustc_session::lint;\n+use rustc_span::Span;\n use rustc_trait_selection::traits::predicate_for_trait_def;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, PredicateObligation};\n \n-use rustc_index::vec::Idx;\n-\n-use rustc_span::Span;\n-\n use std::cell::Cell;\n \n use super::{FieldPat, Pat, PatCtxt, PatKind};\n@@ -182,7 +180,7 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n         let kind = match cv.ty.kind {\n             ty::Float(_) => {\n                 tcx.struct_span_lint_hir(\n-                    ::rustc::lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n+                    lint::builtin::ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n                     id,\n                     span,\n                     |lint| lint.build(\"floating-point types cannot be used in patterns\").emit(),"}, {"sha": "8b1ddf7461a766a01b65bb65fa326cf9fed36c39", "filename": "src/librustc_mir_build/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir_build%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_mir_build%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flints.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,11 +1,11 @@\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::lint::builtin::UNCONDITIONAL_RECURSION;\n use rustc::mir::{self, Body, TerminatorKind};\n use rustc::ty::subst::InternalSubsts;\n use rustc::ty::{self, AssocItem, AssocItemContainer, Instance, TyCtxt};\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::FnKind;\n use rustc_index::bit_set::BitSet;\n+use rustc_session::lint::builtin::UNCONDITIONAL_RECURSION;\n \n crate fn check<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();"}, {"sha": "30737360b9c20098f3c81f3d40712cd82b4e45aa", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -8,15 +8,15 @@\n //! through, but errors for structured control flow in a `const` should be emitted here.\n \n use rustc::hir::map::Map;\n-use rustc::session::config::nightly_options;\n-use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_ast::ast::Mutability;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_session::config::nightly_options;\n+use rustc_session::parse::feature_err;\n use rustc_span::{sym, Span, Symbol};\n \n use std::fmt;"}, {"sha": "4466dea89b0c1806185fd5f872f890fb4aa1de70", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "598d6bb3c48312afe7528ff7c208dff0e6de8795", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,6 +1,4 @@\n use rustc::hir::map::Map;\n-use rustc::session::config::EntryFnType;\n-use rustc::session::{config, Session};\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_ast::attr;\n@@ -9,6 +7,8 @@ use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ImplItem, Item, ItemKind, TraitItem};\n+use rustc_session::config::EntryFnType;\n+use rustc_session::{config, Session};\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n "}, {"sha": "1b46aaeefcb18f28e98169353468a78315d78090", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::Map;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -122,7 +121,7 @@ impl ExprVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ItemVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -139,7 +138,7 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ExprVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "556d6b40db46637582facf7c23e6ce196ef486c5", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -97,7 +97,6 @@ use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_ast::ast;\n@@ -108,6 +107,7 @@ use rustc_hir::def::*;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, HirId, HirIdMap, HirIdSet, Node};\n+use rustc_session::lint;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n@@ -1370,7 +1370,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n // Checking for error conditions\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "121e03680396cedbaf00a70435413f2ce6d17228", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -5,10 +5,8 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n-use rustc::session::config;\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -17,10 +15,10 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::def_id::{CrateNum, DefId};\n-use rustc_hir::intravisit;\n-use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirIdSet, Node};\n+use rustc_session::config;\n use rustc_target::spec::abi::Abi;\n \n // Returns true if the given item must be inlined because it may be\n@@ -83,7 +81,7 @@ struct ReachableContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "e771696a5b6bf9678935529ad070d3178caef8c0", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -6,7 +6,6 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n-use rustc::hir::map::Map;\n use rustc::middle::region::*;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n@@ -696,7 +695,7 @@ impl<'tcx> RegionResolutionVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "11311a3e8aa682d4aaa94f67213178f95ff830bf", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -2,11 +2,8 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::stability::{DeprecationEntry, Index};\n-use rustc::session::parse::feature_err;\n-use rustc::session::Session;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_ast::ast::Attribute;\n@@ -18,6 +15,9 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Generics, HirId, Item, StructField, Variant};\n+use rustc_session::lint;\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n use rustc_trait_selection::traits::misc::can_type_implement_copy;"}, {"sha": "43f39e6c610c8ba5d96f3ebb86e4d55ad0b2e236", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,6 +1,5 @@\n //! Upvar (closure capture) collection from cross-body HIR uses of `Res::Local`s.\n \n-use rustc::hir::map::Map;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n@@ -44,7 +43,7 @@ struct LocalCollector {\n }\n \n impl Visitor<'tcx> for LocalCollector {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -73,7 +72,7 @@ impl CaptureCollector<'_, '_> {\n }\n \n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "cde489e8d2c1eca8d4a202036acb4f2eb09fb89b", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -2,15 +2,13 @@\n \n use rustc::middle::lang_items;\n use rustc::middle::lang_items::whitelisted;\n-use rustc::session::config;\n-\n-use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items::WEAK_ITEMS_REFS;\n+use rustc_session::config;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n@@ -85,9 +83,9 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    type Map = Map<'v>;\n+    type Map = intravisit::ErasedMap<'v>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Map<'v>> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "372d6a534c8d4fd462439607c6a76cc3cce39261", "filename": "src/librustc_plugin_impl/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_plugin_impl%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_plugin_impl%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -17,4 +17,5 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_lint = { path = \"../librustc_lint\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n rustc_ast = { path = \"../librustc_ast\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "0810cf56d178370add97a81aa9842399c8f7593c", "filename": "src/librustc_plugin_impl/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_plugin_impl%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_plugin_impl%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fload.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -2,10 +2,10 @@\n \n use crate::Registry;\n use rustc::middle::cstore::MetadataLoader;\n-use rustc::session::Session;\n use rustc_ast::ast::{Crate, Ident};\n use rustc_errors::struct_span_err;\n use rustc_metadata::locator;\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n "}, {"sha": "9854e0f6c53f3a6ed76838efe6cd81bbb95cc528", "filename": "src/librustc_privacy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_privacy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_privacy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -14,6 +14,7 @@ rustc_attr = { path = \"../librustc_attr\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "f5b3de2512527196845a23808abcf3c360583147", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -5,7 +5,6 @@\n \n use rustc::bug;\n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::fold::TypeVisitor;\n use rustc::ty::query::Providers;\n@@ -20,6 +19,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, DeepVisitor, NestedVisitorMap, Visitor};\n use rustc_hir::{AssocItemKind, HirIdSet, Node, PatKind};\n+use rustc_session::lint;\n use rustc_span::hygiene::Transparency;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n@@ -1447,7 +1447,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n-    type Map = Map<'v>;\n+    type Map = intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "35876176e3e4b0381381a6404e3392abaa086533", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -26,12 +26,13 @@\n use crate::imports::ImportKind;\n use crate::Resolver;\n \n-use rustc::{lint, ty};\n+use rustc::ty;\n use rustc_ast::ast;\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::visit::{self, Visitor};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::pluralize;\n+use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n \n@@ -232,7 +233,7 @@ impl Resolver<'_> {\n                     if let ImportKind::MacroUse = import.kind {\n                         if !import.span.is_dummy() {\n                             self.lint_buffer.buffer_lint(\n-                                lint::builtin::MACRO_USE_EXTERN_CRATE,\n+                                MACRO_USE_EXTERN_CRATE,\n                                 import.id,\n                                 import.span,\n                                 \"deprecated `#[macro_use]` attribute used to \\\n@@ -247,9 +248,8 @@ impl Resolver<'_> {\n                     self.maybe_unused_extern_crates.push((import.id, import.span));\n                 }\n                 ImportKind::MacroUse => {\n-                    let lint = lint::builtin::UNUSED_IMPORTS;\n                     let msg = \"unused `#[macro_use]` import\";\n-                    self.lint_buffer.buffer_lint(lint, import.id, import.span, msg);\n+                    self.lint_buffer.buffer_lint(UNUSED_IMPORTS, import.id, import.span, msg);\n                 }\n                 _ => {}\n             }\n@@ -314,7 +314,7 @@ impl Resolver<'_> {\n             };\n \n             visitor.r.lint_buffer.buffer_lint_with_diagnostic(\n-                lint::builtin::UNUSED_IMPORTS,\n+                UNUSED_IMPORTS,\n                 unused.use_tree_id,\n                 ms,\n                 &msg,"}, {"sha": "6f567ab65a70c01ea3990c8d78cabd1ca211bf4e", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -3,7 +3,6 @@ use std::ptr;\n \n use log::debug;\n use rustc::bug;\n-use rustc::session::Session;\n use rustc::ty::{self, DefIdTree};\n use rustc_ast::ast::{self, Ident, Path};\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n@@ -14,6 +13,7 @@ use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, Symbol};"}, {"sha": "663e61ad2add4c0b79d5b09882bc2c045df7af60", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -10,7 +10,6 @@ use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n use rustc::hir::exports::Export;\n-use rustc::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc::ty;\n use rustc::{bug, span_bug};\n use rustc_ast::ast::{Ident, Name, NodeId};\n@@ -21,6 +20,7 @@ use rustc_data_structures::ptr_key::PtrKey;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir::def::{self, PartialRes};\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::DiagnosticMessageId;\n use rustc_span::hygiene::ExpnId;"}, {"sha": "4a3c9f338d90379ea99b7008e8aea431c7a62cf5", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -11,7 +11,7 @@ use crate::{path_names_to_string, BindingError, CrateLint, LexicalScopeBinding};\n use crate::{Module, ModuleOrUniformRoot, NameBindingKind, ParentScope, PathResult};\n use crate::{ResolutionError, Resolver, Segment, UseError};\n \n-use rustc::{bug, lint, span_bug};\n+use rustc::{bug, span_bug};\n use rustc_ast::ast::*;\n use rustc_ast::ptr::P;\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n@@ -23,6 +23,7 @@ use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::TraitCandidate;\n+use rustc_session::lint;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use smallvec::{smallvec, SmallVec};"}, {"sha": "41380b2a4b78a2b787e15b6a370400e4449f9aeb", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -5,7 +5,6 @@ use crate::path_names_to_string;\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n-use rustc::session::config::nightly_options;\n use rustc_ast::ast::{self, Expr, ExprKind, Ident, Item, ItemKind, NodeId, Path, Ty, TyKind};\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashSet;\n@@ -15,6 +14,7 @@ use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind};\n use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_hir::PrimTy;\n+use rustc_session::config::nightly_options;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;"}, {"sha": "47d04964842e4971401a799a90cd5020c99aaf6c", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -7,7 +7,6 @@\n \n use crate::late::diagnostics::{ForLifetimeSpanType, MissingLifetimeSpot};\n use rustc::hir::map::Map;\n-use rustc::lint;\n use rustc::middle::resolve_lifetime::*;\n use rustc::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc::{bug, span_bug};\n@@ -22,6 +21,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n+use rustc_session::lint;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::Span;\n use std::borrow::Cow;\n@@ -1123,7 +1123,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     gather.visit_body(body);\n \n     impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n@@ -2173,7 +2173,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             impl<'a> Visitor<'a> for SelfVisitor<'a> {\n-                type Map = Map<'a>;\n+                type Map = intravisit::ErasedMap<'a>;\n \n                 fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                     NestedVisitorMap::None\n@@ -2264,7 +2264,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         impl<'v, 'a> Visitor<'v> for GatherLifetimes<'a> {\n-            type Map = Map<'v>;\n+            type Map = intravisit::ErasedMap<'v>;\n \n             fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                 NestedVisitorMap::None\n@@ -2855,7 +2855,7 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n@@ -2898,7 +2898,7 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for AllCollector {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None"}, {"sha": "8164998d55fd7e23ebaca4f4956f504ae9aba22b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -18,7 +18,6 @@ use Determinacy::*;\n \n use rustc::hir::exports::ExportMap;\n use rustc::hir::map::{DefKey, Definitions};\n-use rustc::lint;\n use rustc::middle::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc::span_bug;\n use rustc::ty::query::Providers;\n@@ -42,6 +41,7 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE}\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc_hir::{GlobMap, TraitMap};\n use rustc_metadata::creader::{CStore, CrateLoader};\n+use rustc_session::lint;\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnId, ExpnKind, MacroKind, SyntaxContext, Transparency};"}, {"sha": "6f2e0bce3acaf63e9d2cf15dfa92099b79d295bd", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -7,9 +7,7 @@ use crate::{AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy};\n use crate::{CrateLint, ParentScope, ResolutionError, Resolver, Scope, ScopeSet, Weak};\n use crate::{ModuleKind, ModuleOrUniformRoot, NameBinding, PathResult, Segment, ToNameBinding};\n use rustc::middle::stability;\n-use rustc::session::parse::feature_err;\n-use rustc::session::Session;\n-use rustc::{lint, span_bug, ty};\n+use rustc::{span_bug, ty};\n use rustc_ast::ast::{self, Ident, NodeId};\n use rustc_ast_pretty::pprust;\n use rustc_attr::{self as attr, StabilityLevel};\n@@ -21,6 +19,9 @@ use rustc_expand::expand::{AstFragment, AstFragmentKind, Invocation, InvocationK\n use rustc_feature::is_builtin_attr_name;\n use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id;\n+use rustc_session::lint::builtin::UNUSED_MACROS;\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{self, ExpnData, ExpnId, ExpnKind};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -329,12 +330,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n     fn check_unused_macros(&mut self) {\n         for (&node_id, &span) in self.unused_macros.iter() {\n-            self.lint_buffer.buffer_lint(\n-                lint::builtin::UNUSED_MACROS,\n-                node_id,\n-                span,\n-                \"unused macro definition\",\n-            );\n+            self.lint_buffer.buffer_lint(UNUSED_MACROS, node_id, span, \"unused macro definition\");\n         }\n     }\n "}, {"sha": "4717664b6ba8000d4bf00850734bb7ddcb450889", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -18,6 +18,7 @@ rustc_hir = { path = \"../librustc_hir\" }\n rustc_parse = { path = \"../librustc_parse\" }\n serde_json = \"1\"\n rustc_ast = { path = \"../librustc_ast\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_span = { path = \"../librustc_span\" }\n rls-data = \"0.19\"\n rls-span = \"0.5\""}, {"sha": "8d1a39eab89d8a16080184555e7cd4a10da11083", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -13,7 +13,6 @@\n //! DumpVisitor walks the AST and processes it, and Dumper is used for\n //! recording the output.\n \n-use rustc::session::config::Input;\n use rustc::span_bug;\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc_ast::ast::{self, Attribute, NodeId, PatKind};\n@@ -25,6 +24,7 @@ use rustc_ast_pretty::pprust::{bounds_to_string, generic_params_to_string, ty_to\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def::{DefKind as HirDefKind, Res};\n use rustc_hir::def_id::DefId;\n+use rustc_session::config::Input;\n use rustc_span::source_map::{respan, DUMMY_SP};\n use rustc_span::*;\n "}, {"sha": "98d81c6252242c3bec73c27aa30a5c2dfc5eb7f4", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -10,7 +10,6 @@ mod sig;\n \n use rustc::middle::cstore::ExternCrate;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, DefIdTree, TyCtxt};\n use rustc::{bug, span_bug};\n use rustc_ast::ast::{self, Attribute, NodeId, PatKind, DUMMY_NODE_ID};\n@@ -22,6 +21,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind as HirDefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;\n+use rustc_session::config::{CrateType, Input, OutputType};\n use rustc_span::source_map::Spanned;\n use rustc_span::*;\n "}, {"sha": "6620941c440465bc2c12c54c1af038c6cab81342", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,7 +1,7 @@\n use crate::generated_code;\n-use rustc::session::Session;\n use rustc_ast::token::{self, TokenKind};\n use rustc_parse::lexer::{self, StringReader};\n+use rustc_session::Session;\n use rustc_span::*;\n \n #[derive(Clone)]"}, {"sha": "785d8b892bee5703203cb855f8c98ba2b3ad62f7", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,6 +1,5 @@\n use crate::infer::InferCtxtExt as _;\n use crate::traits::{self, PredicateObligation};\n-use rustc::session::config::nightly_options;\n use rustc::ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder, TypeVisitor};\n use rustc::ty::free_region_map::FreeRegionRelations;\n use rustc::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n@@ -13,6 +12,7 @@ use rustc_hir::Node;\n use rustc_infer::infer::error_reporting::unexpected_hidden_region_diagnostic;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{self, InferCtxt, InferOk};\n+use rustc_session::config::nightly_options;\n use rustc_span::Span;\n \n pub type OpaqueTypeMap<'tcx> = DefIdMap<OpaqueTypeDecl<'tcx>>;"}, {"sha": "ef62958a3f7d0a99a0b13a55730bd5a9bbea4c34", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -12,7 +12,6 @@ use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCod\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc::mir::interpret::ErrorHandled;\n-use rustc::session::DiagnosticMessageId;\n use rustc::ty::error::ExpectedFound;\n use rustc::ty::fast_reject;\n use rustc::ty::fold::TypeFolder;\n@@ -25,6 +24,7 @@ use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder}\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::{Node, QPath, TyKind, WhereBoundPredicate, WherePredicate};\n+use rustc_session::DiagnosticMessageId;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{ExpnKind, Span, DUMMY_SP};\n use std::fmt;"}, {"sha": "dd03f9358c819c219e1d442aa67f3d7dac0b5d5b", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1567,7 +1567,7 @@ struct ReturnsVisitor<'v> {\n }\n \n impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n-    type Map = rustc::hir::map::Map<'v>;\n+    type Map = hir::intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n         hir::intravisit::NestedVisitorMap::None"}, {"sha": "cf0b4b82eea7261590744284c8be8fe9ac8e2778", "filename": "src/librustc_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -15,5 +15,6 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_span = { path = \"../librustc_span\" }\n+rustc_session = { path = \"../librustc_session\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_trait_selection = { path = \"../librustc_trait_selection\" }"}, {"sha": "4b522997537b7bf905d7a23b08e6ae93137bff08", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,10 +1,10 @@\n use rustc::hir::map as hir_map;\n-use rustc::session::CrateDisambiguator;\n use rustc::ty::subst::Subst;\n use rustc::ty::{self, ToPredicate, Ty, TyCtxt, WithConstness};\n use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n use rustc_trait_selection::traits;"}, {"sha": "e61a36f844f87bc3bc660a077d963a877bc18df7", "filename": "src/librustc_typeck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2FCargo.toml?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -19,6 +19,7 @@ rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_target = { path = \"../librustc_target\" }\n+rustc_session = { path = \"../librustc_session\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n rustc_ast = { path = \"../librustc_ast\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "9a8d161572bcfd3e28879e70f4e429cda5536e02", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -6,13 +6,10 @@\n // ignore-tidy-filelength\n \n use crate::collect::PlaceholderHirTyCollector;\n-use crate::lint;\n use crate::middle::lang_items::SizedTraitLangItem;\n use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::ErrorReported;\n-use rustc::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n-use rustc::session::{parse::feature_err, Session};\n use rustc::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc::ty::{self, Const, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc::ty::{GenericParamDef, GenericParamDefKind};\n@@ -26,15 +23,18 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::print;\n use rustc_hir::{Constness, ExprKind, GenericArg, GenericArgs};\n+use rustc_session::lint::builtin::{AMBIGUOUS_ASSOCIATED_ITEMS, LATE_BOUND_LIFETIME_ARGUMENTS};\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n use rustc_target::spec::abi;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::astconv_object_safety_violations;\n use rustc_trait_selection::traits::error_reporting::report_object_safety_error;\n use rustc_trait_selection::traits::wf::object_region_bounds;\n-use smallvec::SmallVec;\n \n+use smallvec::SmallVec;\n use std::collections::BTreeSet;\n use std::iter;\n use std::slice;\n@@ -340,7 +340,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     let mut multispan = MultiSpan::from_span(span);\n                     multispan.push_span_label(span_late, note.to_string());\n                     tcx.struct_span_lint_hir(\n-                        lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n+                        LATE_BOUND_LIFETIME_ARGUMENTS,\n                         args.args[0].id(),\n                         multispan,\n                         |lint| lint.build(msg).emit(),"}, {"sha": "2315b42aec54c7b4ced0bf96c6beb1d9490f0964", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,19 +1,18 @@\n use super::method::MethodCallee;\n use super::{FnCtxt, Needs, PlaceOp};\n \n-use rustc::session::DiagnosticMessageId;\n use rustc::ty::adjustment::{Adjust, Adjustment, OverloadedDeref};\n use rustc::ty::{self, TraitRef, Ty, TyCtxt, WithConstness};\n use rustc::ty::{ToPredicate, TypeFoldable};\n+use rustc_ast::ast::Ident;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_infer::infer::{InferCtxt, InferOk};\n+use rustc_session::DiagnosticMessageId;\n+use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, TraitEngine};\n \n-use rustc_ast::ast::Ident;\n-use rustc_span::Span;\n-\n use std::iter;\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "2875d38a996a04e72934315a5972dc831747b621", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -31,11 +31,9 @@\n use super::FnCtxt;\n \n use crate::hir::def_id::DefId;\n-use crate::lint;\n use crate::type_error_struct;\n use crate::util::common::ErrorReported;\n use rustc::middle::lang_items;\n-use rustc::session::Session;\n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::cast::{CastKind, CastTy};\n use rustc::ty::error::TypeError;\n@@ -44,6 +42,8 @@ use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use rustc_ast::ast;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n+use rustc_session::lint;\n+use rustc_session::Session;\n use rustc_span::Span;\n use rustc_trait_selection::traits;\n use rustc_trait_selection::traits::error_reporting::report_object_safety_error;"}, {"sha": "b0d74651847a90080ad4a88b8fb8acaebb4394fd", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -52,7 +52,6 @@\n \n use crate::astconv::AstConv;\n use crate::check::{FnCtxt, Needs};\n-use rustc::session::parse::feature_err;\n use rustc::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n@@ -66,11 +65,13 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n+\n use smallvec::{smallvec, SmallVec};\n use std::ops::Deref;\n "}, {"sha": "a2832d92d4aebdbc62a2843d3bc1420671bd623e", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::Map;\n use rustc::ty::error::{ExpectedFound, TypeError};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::util::ExplicitSelf;\n@@ -890,7 +889,7 @@ fn compare_synthetic_generics<'tcx>(\n                                     }\n                                 }\n                             }\n-                            type Map = Map<'v>;\n+                            type Map = intravisit::ErasedMap<'v>;\n                             fn nested_visit_map(\n                                 &mut self,\n                             ) -> intravisit::NestedVisitorMap<Self::Map>"}, {"sha": "cdf68256a7a88198d6a3cd65fd3db0aad64b5efa", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -4,7 +4,6 @@\n //! types computed here.\n \n use super::FnCtxt;\n-use rustc::hir::map::Map;\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -209,7 +208,7 @@ pub fn resolve_interior<'a, 'tcx>(\n // librustc/middle/region.rs since `expr_count` is compared against the results\n // there.\n impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "45b1c7d6ea7409f19927698d519efc45dfa59a7d", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -8,9 +8,7 @@ use crate::check::FnCtxt;\n use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n \n-use rustc::lint;\n use rustc::middle::stability;\n-use rustc::session::config::nightly_options;\n use rustc::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc::ty::GenericParamDefKind;\n use rustc::ty::{\n@@ -28,6 +26,8 @@ use rustc_infer::infer::canonical::{Canonical, QueryResponse};\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n+use rustc_session::config::nightly_options;\n+use rustc_session::lint;\n use rustc_span::{symbol::Symbol, Span, DUMMY_SP};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::query::method_autoderef::MethodAutoderefBadTy;"}, {"sha": "94a582dfcfe80ca0bc323fa413cb089f721ddced", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -4,7 +4,6 @@\n use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use rustc::hir::map as hir_map;\n-use rustc::hir::map::Map;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_ast::ast;\n@@ -1347,7 +1346,7 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n     }\n \n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None"}, {"sha": "bfb0d25dea208bd3f5de0544ad4ebb8da0491409", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -90,10 +90,8 @@ pub mod writeback;\n use crate::astconv::{AstConv, GenericArgCountMismatch, PathSeg};\n use crate::middle::lang_items;\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::hir::map::Map;\n use rustc::middle::region;\n use rustc::mir::interpret::ConstValue;\n-use rustc::session::parse::feature_err;\n use rustc::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability, PointerCast,\n };\n@@ -124,6 +122,10 @@ use rustc_infer::infer::error_reporting::TypeAnnotationNeeded::E0282;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use rustc_infer::infer::{self, InferCtxt, InferOk, InferResult, TyCtxtInferExt};\n+use rustc_session::config::{self, EntryFnType};\n+use rustc_session::lint;\n+use rustc_session::parse::feature_err;\n+use rustc_session::Session;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -146,10 +148,7 @@ use std::mem::replace;\n use std::ops::{self, Deref};\n use std::slice;\n \n-use crate::lint;\n use crate::require_c_abi_if_c_variadic;\n-use crate::session::config::EntryFnType;\n-use crate::session::Session;\n use crate::util::common::{indenter, ErrorReported};\n use crate::TypeAndSubsts;\n \n@@ -1177,7 +1176,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -5790,7 +5789,7 @@ fn fatally_break_rust(sess: &Session) {\n     handler.note_without_error(&format!(\n         \"rustc {} running on {}\",\n         option_env!(\"CFG_VERSION\").unwrap_or(\"unknown_version\"),\n-        crate::session::config::host_triple(),\n+        config::host_triple(),\n     ));\n }\n "}, {"sha": "57a89614eb18c5100a44d175912746e80207ed5f", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -76,7 +76,6 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n-use rustc::hir::map::Map;\n use rustc::ty::adjustment;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, Ty};\n@@ -408,7 +407,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "44b960ad22bffd074fa84048cdb4b825eb882573", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -35,7 +35,6 @@ use super::FnCtxt;\n use crate::expr_use_visitor as euv;\n use crate::mem_categorization as mc;\n use crate::mem_categorization::PlaceBase;\n-use rustc::hir::map::Map;\n use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxIndexMap;\n@@ -60,7 +59,7 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "3255d7b435c8fb55ce387c055494107c45613e29", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -2,7 +2,6 @@ use crate::check::{FnCtxt, Inherited};\n use crate::constrained_generic_params::{identify_constrained_generic_params, Parameter};\n \n use rustc::middle::lang_items;\n-use rustc::session::parse::feature_err;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::trait_def::TraitSpecializationKind;\n use rustc::ty::{\n@@ -11,17 +10,17 @@ use rustc::ty::{\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n use rustc_hir::ItemKind;\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::may_define_opaque_type;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n \n-use rustc_hir as hir;\n-use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n-\n /// Helper type of a temporary returned by `.for_item(...)`.\n /// This is necessary because we can't write the following bound:\n ///"}, {"sha": "9d574ee50a4c5d7c6d5d505f7d8e240aaf2fe983", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -4,7 +4,6 @@\n \n use crate::check::FnCtxt;\n \n-use rustc::hir::map::Map;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -243,7 +242,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n // traffic in node-ids or update tables in the type context etc.\n \n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "d0414af5b213866e85f833224d2a1e99cfa55074", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,4 +1,3 @@\n-use crate::lint;\n use rustc::ty::TyCtxt;\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxHashMap;\n@@ -7,6 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdSet, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::print::visibility_qualified;\n+use rustc_session::lint;\n use rustc_span::Span;\n \n pub fn check_crate(tcx: TyCtxt<'_>) {"}, {"sha": "7145b948f2f5a96159222a942ca280c39853bb7f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -17,14 +17,12 @@\n use crate::astconv::{AstConv, Bounds, SizedByDefault};\n use crate::check::intrinsic::intrinsic_operation_unsafety;\n use crate::constrained_generic_params as cgp;\n-use crate::lint;\n use crate::middle::lang_items;\n use crate::middle::resolve_lifetime as rl;\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::mir::mono::Linkage;\n-use rustc::session::parse::feature_err;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::util::Discr;\n@@ -42,6 +40,8 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericParamKind, Node, Unsafety};\n+use rustc_session::lint;\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n@@ -105,7 +105,7 @@ pub struct ItemCtxt<'tcx> {\n crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n \n impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n-    type Map = Map<'v>;\n+    type Map = intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -1060,7 +1060,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n \n     impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n-        type Map = Map<'tcx>;\n+        type Map = intravisit::ErasedMap<'tcx>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None"}, {"sha": "41c205bc11b3594de9f7ea67f9cc117d6224e50e", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,5 +1,4 @@\n use rustc::hir::map::Map;\n-use rustc::session::parse::feature_err;\n use rustc::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc::ty::util::IntTypeExt;\n use rustc::ty::{self, DefIdTree, Ty, TyCtxt, TypeFoldable};\n@@ -11,6 +10,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::Node;\n+use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_trait_selection::traits;"}, {"sha": "e487e0d265c3ef0387ac3755d0be2f69ef882d2d", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -88,10 +88,7 @@ mod outlives;\n mod structured_errors;\n mod variance;\n \n-use rustc::lint;\n use rustc::middle;\n-use rustc::session;\n-use rustc::session::config::EntryFnType;\n use rustc::ty::query::Providers;\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -103,6 +100,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_infer::infer::{InferOk, TyCtxtInferExt};\n use rustc_infer::traits::TraitEngineExt as _;\n+use rustc_session::config::EntryFnType;\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt as _;"}, {"sha": "a4f8472ae28913bf7b3d8027edeccec5225a3784", "filename": "src/librustc_typeck/structured_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,6 +1,6 @@\n-use rustc::session::Session;\n use rustc::ty::{Ty, TypeFoldable};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_session::Session;\n use rustc_span::Span;\n \n pub trait StructuredDiagnostic<'tcx> {"}, {"sha": "179c5bfacf32ea047d7a1721dabe2e68146c5795", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -4,15 +4,14 @@ use std::ffi::OsStr;\n use std::fmt;\n use std::path::PathBuf;\n \n-use rustc::lint::Level;\n-use rustc::session;\n-use rustc::session::config::{\n+use rustc_session::config::{self, parse_crate_types_from_list, parse_externs, CrateType};\n+use rustc_session::config::{\n     build_codegen_options, build_debugging_options, get_cmd_lint_options, host_triple,\n     nightly_options,\n };\n-use rustc::session::config::{parse_crate_types_from_list, parse_externs, CrateType};\n-use rustc::session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n-use rustc::session::search_paths::SearchPath;\n+use rustc_session::config::{CodegenOptions, DebuggingOptions, ErrorOutputType, Externs};\n+use rustc_session::lint::Level;\n+use rustc_session::search_paths::SearchPath;\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_target::spec::TargetTriple;\n \n@@ -299,9 +298,9 @@ impl Options {\n             return Err(0);\n         }\n \n-        let color = session::config::parse_color(&matches);\n-        let (json_rendered, _artifacts) = session::config::parse_json(&matches);\n-        let error_format = session::config::parse_error_format(&matches, color, json_rendered);\n+        let color = config::parse_color(&matches);\n+        let (json_rendered, _artifacts) = config::parse_json(&matches);\n+        let error_format = config::parse_error_format(&matches, color, json_rendered);\n \n         let codegen_options = build_codegen_options(matches, error_format);\n         let debugging_options = build_debugging_options(matches, error_format);"}, {"sha": "f0b9ad2852f5115a480e5bcd99c88e705b654810", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,23 +1,22 @@\n use rustc::middle::cstore::CrateStore;\n use rustc::middle::privacy::AccessLevels;\n-use rustc::session::config::ErrorOutputType;\n-use rustc::session::DiagnosticOutput;\n-use rustc::session::{self, config};\n use rustc::ty::{Ty, TyCtxt};\n+use rustc_ast::ast::CRATE_NODE_ID;\n+use rustc_attr as attr;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_driver::abort_on_err;\n+use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::json::JsonEmitter;\n use rustc_feature::UnstableFeatures;\n use rustc_hir::def::Namespace::TypeNS;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use rustc_hir::HirId;\n use rustc_interface::interface;\n use rustc_resolve as resolve;\n+use rustc_session::config::ErrorOutputType;\n use rustc_session::lint;\n-\n-use rustc_ast::ast::CRATE_NODE_ID;\n-use rustc_attr as attr;\n-use rustc_errors::emitter::{Emitter, EmitterWriter};\n-use rustc_errors::json::JsonEmitter;\n+use rustc_session::DiagnosticOutput;\n+use rustc_session::{config, Session};\n use rustc_span::source_map;\n use rustc_span::symbol::sym;\n use rustc_span::DUMMY_SP;\n@@ -34,8 +33,8 @@ use crate::html::render::RenderInfo;\n \n use crate::passes::{self, Condition::*, ConditionalPass};\n \n-pub use rustc::session::config::{CodegenOptions, DebuggingOptions, Input, Options};\n-pub use rustc::session::search_paths::SearchPath;\n+pub use rustc_session::config::{CodegenOptions, DebuggingOptions, Input, Options};\n+pub use rustc_session::search_paths::SearchPath;\n \n pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n@@ -68,7 +67,7 @@ pub struct DocContext<'tcx> {\n }\n \n impl<'tcx> DocContext<'tcx> {\n-    pub fn sess(&self) -> &session::Session {\n+    pub fn sess(&self) -> &Session {\n         &self.tcx.sess\n     }\n "}, {"sha": "3c1f0509bba4d04b98e6b02e75cdc3e26f3a42f1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -49,8 +49,8 @@ use std::env;\n use std::panic;\n use std::process;\n \n-use rustc::session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n-use rustc::session::{early_error, early_warn};\n+use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGroup};\n+use rustc_session::{early_error, early_warn};\n \n #[macro_use]\n mod externalfiles;"}, {"sha": "72106afbe0e759092ef13f46d288e906d5033971", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,4 +1,3 @@\n-use rustc::lint;\n use rustc::ty;\n use rustc_ast::ast::{self, Ident};\n use rustc_errors::Applicability;\n@@ -12,6 +11,7 @@ use rustc_hir::def::{\n };\n use rustc_hir::def_id::DefId;\n use rustc_resolve::ParentScope;\n+use rustc_session::lint;\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n "}, {"sha": "38f371783e994d257462b0e88e25c03f54c6657c", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,9 +1,9 @@\n //! Contains information about \"passes\", used to modify crate information during the documentation\n //! process.\n \n-use rustc::lint;\n use rustc::middle::privacy::AccessLevels;\n use rustc_hir::def_id::{DefId, DefIdSet};\n+use rustc_session::lint;\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use std::mem;\n use std::ops::Range;"}, {"sha": "c5aa4677d56595fad27ec1adea342cf5807eba25", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,5 +1,4 @@\n use rustc::hir::map::Map;\n-use rustc::session::{self, config, DiagnosticOutput};\n use rustc::util::common::ErrorReported;\n use rustc_ast::ast;\n use rustc_ast::with_globals;\n@@ -8,6 +7,7 @@ use rustc_feature::UnstableFeatures;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_interface::interface;\n+use rustc_session::{self, config, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::sym;\n@@ -52,7 +52,7 @@ pub fn run(options: Options) -> i32 {\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n         unstable_features: UnstableFeatures::from_environment(),\n-        lint_cap: Some(::rustc::lint::Level::Allow),\n+        lint_cap: Some(rustc_session::lint::Level::Allow),\n         actually_rustdoc: true,\n         debugging_opts: config::DebuggingOptions { ..config::basic_debugging_options() },\n         edition: options.edition,\n@@ -854,7 +854,7 @@ impl Tester for Collector {\n }\n \n struct HirCollector<'a, 'hir> {\n-    sess: &'a session::Session,\n+    sess: &'a Session,\n     collector: &'a mut Collector,\n     map: Map<'hir>,\n     codes: ErrorCodes,"}, {"sha": "d975af52f5bb88007d5a61b4628a8f5d236dbb20", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -7,14 +7,12 @@ extern crate rustc_data_structures;\n extern crate rustc_hir;\n extern crate rustc_target;\n extern crate rustc_driver;\n+extern crate rustc_session;\n extern crate rustc_span;\n \n use std::any::Any;\n use std::sync::Arc;\n use std::path::Path;\n-use rustc_span::symbol::Symbol;\n-use rustc::session::Session;\n-use rustc::session::config::OutputFilenames;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n@@ -23,6 +21,9 @@ use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::sync::MetadataRef;\n use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_session::Session;\n+use rustc_session::config::OutputFilenames;\n+use rustc_span::symbol::Symbol;\n use rustc_target::spec::Target;\n \n pub struct NoLlvmMetadataLoader;\n@@ -89,7 +90,7 @@ impl CodegenBackend for TheBackend {\n         outputs: &OutputFilenames,\n     ) -> Result<(), ErrorReported> {\n         use std::io::Write;\n-        use rustc::session::config::CrateType;\n+        use rustc_session::config::CrateType;\n         use rustc_codegen_utils::link::out_filename;\n         let crate_name = codegen_results.downcast::<Symbol>()\n             .expect(\"in link: codegen_results is not a Symbol\");"}, {"sha": "af84faa7511c61ba9777d853669ac82ab09cce5c", "filename": "src/test/run-make-fulldeps/issue-19371/foo.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/292c538265e428b13ccb6a01f161d9f64b389f4f/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fissue-19371%2Ffoo.rs?ref=292c538265e428b13ccb6a01f161d9f64b389f4f", "patch": "@@ -1,13 +1,12 @@\n #![feature(rustc_private)]\n \n-extern crate rustc;\n extern crate rustc_interface;\n extern crate rustc_driver;\n+extern crate rustc_session;\n extern crate rustc_span;\n \n-use rustc::session::DiagnosticOutput;\n-use rustc::session::config::{Input, Options,\n-                             OutputType, OutputTypes};\n+use rustc_session::DiagnosticOutput;\n+use rustc_session::config::{Input, Options, OutputType, OutputTypes};\n use rustc_interface::interface;\n use rustc_span::source_map::FileName;\n "}]}