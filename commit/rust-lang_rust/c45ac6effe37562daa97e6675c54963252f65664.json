{"sha": "c45ac6effe37562daa97e6675c54963252f65664", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NWFjNmVmZmUzNzU2MmRhYTk3ZTY2NzVjNTQ5NjMyNTJmNjU2NjQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-09T16:23:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-09T16:23:51Z"}, "message": "Merge #7942\n\n7942: Show whether a binding is mutable or not on hover r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "9f00979cde7fa508ab0b583fa0deeaa79236b7db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f00979cde7fa508ab0b583fa0deeaa79236b7db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c45ac6effe37562daa97e6675c54963252f65664", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgR6EXCRBK7hj4Ov3rIwAAdHIIAI0/4Vd4u4Oi4HaxjcXK+RKl\ntT8/z95GPAGuH3rTT+1XCHFqIgLIAEubXrrCNav6/RBsesqqMtqo2lBarUm9O0Xl\ns4Zj9WOj1CzUlxYGQ0qPdiainlgn5QA4T0NassUNDK+0gt+/B679s42UzsLoLZvX\nSzdVQLVNMCNtpRoDxdGmAL5unbD8qwkXi0k6oqB0nNxbYov75Y+kwsuxAod2T76O\nRMx021wK8c7UOfrY1tfEqbnEDZO417jHRoDLJf1Bxr+dR+tT7VQMsdgfpgGN7zXg\nebIMcd2tcg3bIA9rYf0KwWJh02NNi6TunTiZftls7glkii+W318Y0Be9exVuabY=\n=eCM0\n-----END PGP SIGNATURE-----\n", "payload": "tree 9f00979cde7fa508ab0b583fa0deeaa79236b7db\nparent c2359608c926d4828f2b112e7069978449851d58\nparent 814d617d348c23507fd444e58515c9bff6b73105\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1615307031 +0000\ncommitter GitHub <noreply@github.com> 1615307031 +0000\n\nMerge #7942\n\n7942: Show whether a binding is mutable or not on hover r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c45ac6effe37562daa97e6675c54963252f65664", "html_url": "https://github.com/rust-lang/rust/commit/c45ac6effe37562daa97e6675c54963252f65664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c45ac6effe37562daa97e6675c54963252f65664/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2359608c926d4828f2b112e7069978449851d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2359608c926d4828f2b112e7069978449851d58", "html_url": "https://github.com/rust-lang/rust/commit/c2359608c926d4828f2b112e7069978449851d58"}, {"sha": "814d617d348c23507fd444e58515c9bff6b73105", "url": "https://api.github.com/repos/rust-lang/rust/commits/814d617d348c23507fd444e58515c9bff6b73105", "html_url": "https://github.com/rust-lang/rust/commit/814d617d348c23507fd444e58515c9bff6b73105"}], "stats": {"total": 81, "additions": 48, "deletions": 33}, "files": [{"sha": "638398e292abe7a5751586c7d7c306a4ac0f221b", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c45ac6effe37562daa97e6675c54963252f65664/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45ac6effe37562daa97e6675c54963252f65664/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c45ac6effe37562daa97e6675c54963252f65664", "patch": "@@ -1296,13 +1296,7 @@ impl Local {\n \n     pub fn is_mut(self, db: &dyn HirDatabase) -> bool {\n         let body = db.body(self.parent.into());\n-        match &body[self.pat_id] {\n-            Pat::Bind { mode, .. } => match mode {\n-                BindingAnnotation::Mutable | BindingAnnotation::RefMut => true,\n-                _ => false,\n-            },\n-            _ => false,\n-        }\n+        matches!(&body[self.pat_id], Pat::Bind { mode: BindingAnnotation::Mutable, .. })\n     }\n \n     pub fn parent(self, _db: &dyn HirDatabase) -> DefWithBody {"}, {"sha": "2df9266b41cbacefddae28c128813ef2b6bdd44b", "filename": "crates/ide/src/display/short_label.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c45ac6effe37562daa97e6675c54963252f65664/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45ac6effe37562daa97e6675c54963252f65664/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=c45ac6effe37562daa97e6675c54963252f65664", "patch": "@@ -71,11 +71,7 @@ impl ShortLabel for ast::TypeAlias {\n \n impl ShortLabel for ast::Const {\n     fn short_label(&self) -> Option<String> {\n-        let mut new_buf = short_label_from_ty(self, self.ty(), \"const \")?;\n-        if let Some(expr) = self.body() {\n-            format_to!(new_buf, \" = {}\", expr.syntax());\n-        }\n-        Some(new_buf)\n+        short_label_from_ty(self, self.ty(), \"const \")\n     }\n }\n "}, {"sha": "ea45086ce8fc9408bcfe61c98c9ee4755916781d", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c45ac6effe37562daa97e6675c54963252f65664/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45ac6effe37562daa97e6675c54963252f65664/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c45ac6effe37562daa97e6675c54963252f65664", "patch": "@@ -1,3 +1,4 @@\n+use either::Either;\n use hir::{\n     Adt, AsAssocItem, AssocItemContainer, FieldSource, GenericParam, HasAttrs, HasSource,\n     HirDisplay, Module, ModuleDef, ModuleSource, Semantics,\n@@ -366,7 +367,7 @@ fn hover_for_definition(\n                 .and_then(|fd| hover_for_builtin(fd, it))\n                 .or_else(|| Some(Markup::fenced_block(&it.name()))),\n         },\n-        Definition::Local(it) => Some(Markup::fenced_block(&it.ty(db).display(db))),\n+        Definition::Local(it) => hover_for_local(it, db),\n         Definition::SelfType(impl_def) => {\n             impl_def.target_ty(db).as_adt().and_then(|adt| match adt {\n                 Adt::Struct(it) => from_def_source(db, it, mod_path),\n@@ -405,6 +406,29 @@ fn hover_for_definition(\n     }\n }\n \n+fn hover_for_local(it: hir::Local, db: &RootDatabase) -> Option<Markup> {\n+    let ty = it.ty(db);\n+    let ty = ty.display(db);\n+    let is_mut = if it.is_mut(db) { \"mut \" } else { \"\" };\n+    let desc = match it.source(db).value {\n+        Either::Left(ident) => {\n+            let name = it.name(db).unwrap();\n+            let let_kw = if ident\n+                .syntax()\n+                .parent()\n+                .map_or(false, |p| p.kind() == LET_STMT || p.kind() == CONDITION)\n+            {\n+                \"let \"\n+            } else {\n+                \"\"\n+            };\n+            format!(\"{}{}{}: {}\", let_kw, is_mut, name, ty)\n+        }\n+        Either::Right(_) => format!(\"{}self: {}\", is_mut, ty),\n+    };\n+    hover_markup(None, Some(desc), None)\n+}\n+\n fn hover_for_keyword(\n     sema: &Semantics<RootDatabase>,\n     links_in_hover: bool,\n@@ -574,7 +598,7 @@ fn main() {\n                 *iter*\n \n                 ```rust\n-                Iter<Scan<OtherStruct<OtherStruct<i32>>, |&mut u32, &u32, &mut u32| -> Option<u32>, u32>>\n+                let mut iter: Iter<Scan<OtherStruct<OtherStruct<i32>>, |&mut u32, &u32, &mut u32| -> Option<u32>, u32>>\n                 ```\n             \"#]],\n         );\n@@ -798,7 +822,7 @@ fn main() {\n                 ```\n \n                 ```rust\n-                const foo: u32 = 123\n+                const foo: u32\n                 ```\n             \"#]],\n         );\n@@ -831,7 +855,7 @@ fn main() {\n                 *zz*\n \n                 ```rust\n-                Test<i32, u8>\n+                let zz: Test<i32, u8>\n                 ```\n             \"#]],\n         );\n@@ -870,7 +894,7 @@ fn main() { let b$0ar = Some(12); }\n                 *bar*\n \n                 ```rust\n-                Option<i32>\n+                let bar: Option<i32>\n                 ```\n             \"#]],\n         );\n@@ -938,7 +962,7 @@ fn main() {\n                 *foo*\n \n                 ```rust\n-                i32\n+                foo: i32\n                 ```\n             \"#]],\n         )\n@@ -952,7 +976,7 @@ fn main() {\n                 *foo*\n \n                 ```rust\n-                i32\n+                foo: i32\n                 ```\n             \"#]],\n         )\n@@ -966,7 +990,7 @@ fn main() {\n                 *foo*\n \n                 ```rust\n-                i32\n+                foo: i32\n                 ```\n             \"#]],\n         )\n@@ -980,7 +1004,7 @@ fn main() {\n                 *foo*\n \n                 ```rust\n-                i32\n+                foo: i32\n                 ```\n             \"#]],\n         )\n@@ -1000,7 +1024,7 @@ fn main() {\n                 *_x*\n \n                 ```rust\n-                impl Deref<Target = u8> + DerefMut<Target = u8>\n+                _x: impl Deref<Target = u8> + DerefMut<Target = u8>\n                 ```\n             \"#]],\n         )\n@@ -1022,7 +1046,7 @@ fn main() { let foo_$0test = Thing::new(); }\n                 *foo_test*\n \n                 ```rust\n-                Thing\n+                let foo_test: Thing\n                 ```\n             \"#]],\n         )\n@@ -1081,7 +1105,7 @@ fn main() {\n                 ```\n \n                 ```rust\n-                const C: u32 = 1\n+                const C: u32\n                 ```\n             \"#]],\n         )\n@@ -1182,7 +1206,7 @@ fn y() {\n                 *x*\n \n                 ```rust\n-                i32\n+                let x: i32\n                 ```\n             \"#]],\n         )\n@@ -1259,7 +1283,7 @@ fn foo(bar:u32) { let a = id!(ba$0r); }\n                 *bar*\n \n                 ```rust\n-                u32\n+                bar: u32\n                 ```\n             \"#]],\n         );\n@@ -1277,7 +1301,7 @@ fn foo(bar:u32) { let a = id!(ba$0r); }\n                 *bar*\n \n                 ```rust\n-                u32\n+                bar: u32\n                 ```\n             \"#]],\n         );\n@@ -3302,7 +3326,7 @@ fn main() {\n                 *f*\n \n                 ```rust\n-                &i32\n+                f: &i32\n                 ```\n             \"#]],\n         );\n@@ -3321,7 +3345,7 @@ impl Foo {\n                 *self*\n \n                 ```rust\n-                &Foo\n+                self: &Foo\n                 ```\n             \"#]],\n         );\n@@ -3341,7 +3365,7 @@ impl Foo {\n                 *self*\n \n                 ```rust\n-                Arc<Foo>\n+                self: Arc<Foo>\n                 ```\n             \"#]],\n         );\n@@ -3537,7 +3561,7 @@ fn foo() {\n                 ```\n \n                 ```rust\n-                const FOO: usize = 3\n+                const FOO: usize\n                 ```\n \n                 ---"}, {"sha": "b0cfdd8b7dc5721e773dbbf4957dab707a203f37", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c45ac6effe37562daa97e6675c54963252f65664/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c45ac6effe37562daa97e6675c54963252f65664/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=c45ac6effe37562daa97e6675c54963252f65664", "patch": "@@ -330,10 +330,11 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 HlTag::Symbol(SymbolKind::Local)\n             };\n             let mut h = Highlight::new(tag);\n-            if local.is_mut(db) || local.ty(db).is_mutable_reference() {\n+            let ty = local.ty(db);\n+            if local.is_mut(db) || ty.is_mutable_reference() {\n                 h |= HlMod::Mutable;\n             }\n-            if local.ty(db).as_callable(db).is_some() || local.ty(db).impls_fnonce(db) {\n+            if ty.as_callable(db).is_some() || ty.impls_fnonce(db) {\n                 h |= HlMod::Callable;\n             }\n             return h;"}]}