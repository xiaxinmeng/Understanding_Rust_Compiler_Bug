{"sha": "24175e8c9f9c4b0f7b45e3320b318438c8d0ad37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MTc1ZThjOWY5YzRiMGY3YjQ1ZTMzMjBiMzE4NDM4YzhkMGFkMzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-03T07:52:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-12-03T07:52:21Z"}, "message": "Auto merge of #38056 - clarcharr:master, r=alexcrichton\n\nAdd String::split_off.\n\nThis seems to match up with the latest version of the collection reform, and seems useful enough to add. First pull request!", "tree": {"sha": "6f186b68b36d7949cf0a3aefbaf513be5ab047d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f186b68b36d7949cf0a3aefbaf513be5ab047d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37", "html_url": "https://github.com/rust-lang/rust/commit/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08faff49c3206a6f6b6f2a08f2bf309808a070ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/08faff49c3206a6f6b6f2a08f2bf309808a070ba", "html_url": "https://github.com/rust-lang/rust/commit/08faff49c3206a6f6b6f2a08f2bf309808a070ba"}, {"sha": "cbf734f9abe06d240db086f55a0bd4387b77eb94", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbf734f9abe06d240db086f55a0bd4387b77eb94", "html_url": "https://github.com/rust-lang/rust/commit/cbf734f9abe06d240db086f55a0bd4387b77eb94"}], "stats": {"total": 73, "additions": 73, "deletions": 0}, "files": [{"sha": "ddde9d06d817667e494265c34506389ad968dfcf", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=24175e8c9f9c4b0f7b45e3320b318438c8d0ad37", "patch": "@@ -1260,6 +1260,39 @@ impl String {\n         self.len() == 0\n     }\n \n+    /// Divide one string into two at an index.\n+    ///\n+    /// The argument, `mid`, should be a byte offset from the start of the string. It must also\n+    /// be on the boundary of a UTF-8 code point.\n+    ///\n+    /// The two strings returned go from the start of the string to `mid`, and from `mid` to the end\n+    /// of the string.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `mid` is not on a `UTF-8` code point boundary, or if it is beyond the last\n+    /// code point of the string.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(string_split_off)]\n+    /// # fn main() {\n+    /// let mut hello = String::from(\"Hello, World!\");\n+    /// let world = hello.split_off(7);\n+    /// assert_eq!(hello, \"Hello, \");\n+    /// assert_eq!(world, \"World!\");\n+    /// # }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"string_split_off\", issue = \"38080\")]\n+    pub fn split_off(&mut self, mid: usize) -> String {\n+        assert!(self.is_char_boundary(mid));\n+        assert!(mid <= self.len());\n+        let other = self.vec.split_off(mid);\n+        unsafe { String::from_utf8_unchecked(other) }\n+    }\n+\n     /// Truncates this `String`, removing all contents.\n     ///\n     /// While this means the `String` will have a length of zero, it does not"}, {"sha": "58ce78eab9a17f064e67f2016e86a031af65ea93", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=24175e8c9f9c4b0f7b45e3320b318438c8d0ad37", "patch": "@@ -25,6 +25,7 @@\n #![feature(step_by)]\n #![feature(str_escape)]\n #![feature(str_replacen)]\n+#![feature(string_split_off)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]"}, {"sha": "cb4fcb58452da4da9295fdc493d91c23d68893b3", "filename": "src/libcollectionstest/string.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37/src%2Flibcollectionstest%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24175e8c9f9c4b0f7b45e3320b318438c8d0ad37/src%2Flibcollectionstest%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fstring.rs?ref=24175e8c9f9c4b0f7b45e3320b318438c8d0ad37", "patch": "@@ -231,6 +231,45 @@ fn test_pop() {\n     assert_eq!(data, \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\");\n }\n \n+#[test]\n+fn test_split_off_empty() {\n+    let orig = \"Hello, world!\";\n+    let mut split = String::from(orig);\n+    let empty: String = split.split_off(orig.len());\n+    assert!(empty.is_empty());\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_split_off_past_end() {\n+    let orig = \"Hello, world!\";\n+    let mut split = String::from(orig);\n+    split.split_off(orig.len() + 1);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_split_off_mid_char() {\n+    let mut orig = String::from(\"\u5c71\");\n+    orig.split_off(1);\n+}\n+\n+#[test]\n+fn test_split_off_ascii() {\n+    let mut ab = String::from(\"ABCD\");\n+    let cd = ab.split_off(2);\n+    assert_eq!(ab, \"AB\");\n+    assert_eq!(cd, \"CD\");\n+}\n+\n+#[test]\n+fn test_split_off_unicode() {\n+    let mut nihon = String::from(\"\u65e5\u672c\u8a9e\");\n+    let go = nihon.split_off(\"\u65e5\u672c\".len());\n+    assert_eq!(nihon, \"\u65e5\u672c\");\n+    assert_eq!(go, \"\u8a9e\");\n+}\n+\n #[test]\n fn test_str_truncate() {\n     let mut s = String::from(\"12345\");"}]}