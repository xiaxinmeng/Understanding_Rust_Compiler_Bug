{"sha": "22a0e4fa6e08acf2de50ed87cfb909092ab0459d", "node_id": "C_kwDOAAsO6NoAKDIyYTBlNGZhNmUwOGFjZjJkZTUwZWQ4N2NmYjkwOTA5MmFiMDQ1OWQ", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-13T20:50:34Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2023-01-13T20:50:34Z"}, "message": "Do not incorrectly suggest restricting implied bounds\n\nWhen we have already suggested bounds that imply the about to be\nsuggested bound, skip them.", "tree": {"sha": "bd05b53302ecfbd1799062a9524e777aedbf2077", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd05b53302ecfbd1799062a9524e777aedbf2077"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a0e4fa6e08acf2de50ed87cfb909092ab0459d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a0e4fa6e08acf2de50ed87cfb909092ab0459d", "html_url": "https://github.com/rust-lang/rust/commit/22a0e4fa6e08acf2de50ed87cfb909092ab0459d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a0e4fa6e08acf2de50ed87cfb909092ab0459d/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81ba427a7b15d614a74812ef3fd1467c85d4768d", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ba427a7b15d614a74812ef3fd1467c85d4768d", "html_url": "https://github.com/rust-lang/rust/commit/81ba427a7b15d614a74812ef3fd1467c85d4768d"}], "stats": {"total": 54, "additions": 38, "deletions": 16}, "files": [{"sha": "f49fde04e8444f0b0ac09600d3c9ea31fad1691a", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 35, "deletions": 13, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/22a0e4fa6e08acf2de50ed87cfb909092ab0459d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a0e4fa6e08acf2de50ed87cfb909092ab0459d/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=22a0e4fa6e08acf2de50ed87cfb909092ab0459d", "patch": "@@ -505,19 +505,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             }\n                             _ => None,\n                         };\n-                        if let Some(hir::Node::Item(hir::Item { kind, .. })) = node {\n-                            if let Some(g) = kind.generics() {\n-                                let key = (\n-                                    g.tail_span_for_predicate_suggestion(),\n-                                    g.add_where_or_trailing_comma(),\n-                                );\n-                                type_params\n-                                    .entry(key)\n-                                    .or_insert_with(FxHashSet::default)\n-                                    .insert(obligation.to_owned());\n-                            }\n+                        if let Some(hir::Node::Item(hir::Item { kind, .. })) = node\n+                            && let Some(g) = kind.generics()\n+                        {\n+                            let key = (\n+                                g.tail_span_for_predicate_suggestion(),\n+                                g.add_where_or_trailing_comma(),\n+                            );\n+                            type_params\n+                                .entry(key)\n+                                .or_insert_with(FxHashSet::default)\n+                                .insert(obligation.to_owned());\n+                            return true;\n                         }\n                     }\n+                    false\n                 };\n             let mut bound_span_label = |self_ty: Ty<'_>, obligation: &str, quiet: &str| {\n                 let msg = format!(\n@@ -732,19 +734,39 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 unsatisfied_bounds = true;\n             }\n \n+            let mut suggested_bounds = FxHashSet::default();\n             // The requirements that didn't have an `impl` span to show.\n             let mut bound_list = unsatisfied_predicates\n                 .iter()\n                 .filter_map(|(pred, parent_pred, _cause)| {\n+                    let mut suggested = false;\n                     format_pred(*pred).map(|(p, self_ty)| {\n-                        collect_type_param_suggestions(self_ty, *pred, &p);\n+                        if let Some(parent) = parent_pred && suggested_bounds.contains(parent) {\n+                            // We don't suggest `PartialEq` when we already suggest `Eq`.\n+                        } else if !suggested_bounds.contains(pred) {\n+                            if collect_type_param_suggestions(self_ty, *pred, &p) {\n+                                suggested = true;\n+                                suggested_bounds.insert(pred);\n+                            }\n+                        }\n                         (\n                             match parent_pred {\n                                 None => format!(\"`{}`\", &p),\n                                 Some(parent_pred) => match format_pred(*parent_pred) {\n                                     None => format!(\"`{}`\", &p),\n                                     Some((parent_p, _)) => {\n-                                        collect_type_param_suggestions(self_ty, *parent_pred, &p);\n+                                        if !suggested\n+                                            && !suggested_bounds.contains(pred)\n+                                            && !suggested_bounds.contains(parent_pred)\n+                                        {\n+                                            if collect_type_param_suggestions(\n+                                                self_ty,\n+                                                *parent_pred,\n+                                                &p,\n+                                            ) {\n+                                                suggested_bounds.insert(pred);\n+                                            }\n+                                        }\n                                         format!(\"`{}`\\nwhich is required by `{}`\", p, parent_p)\n                                     }\n                                 },"}, {"sha": "08174d8d8d53ad476ed5212c055012b1a15136ea", "filename": "tests/ui/missing-trait-bounds/issue-35677.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a0e4fa6e08acf2de50ed87cfb909092ab0459d/tests%2Fui%2Fmissing-trait-bounds%2Fissue-35677.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/22a0e4fa6e08acf2de50ed87cfb909092ab0459d/tests%2Fui%2Fmissing-trait-bounds%2Fissue-35677.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-trait-bounds%2Fissue-35677.fixed?ref=22a0e4fa6e08acf2de50ed87cfb909092ab0459d", "patch": "@@ -3,7 +3,7 @@\n use std::collections::HashSet;\n use std::hash::Hash;\n \n-fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool where T: Eq, T: Hash, T: PartialEq {\n+fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool where T: Eq, T: Hash {\n     this.is_subset(other)\n     //~^ ERROR the method\n }"}, {"sha": "05d3de80d8449b4b8e7da07684b29174989854a5", "filename": "tests/ui/missing-trait-bounds/issue-35677.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22a0e4fa6e08acf2de50ed87cfb909092ab0459d/tests%2Fui%2Fmissing-trait-bounds%2Fissue-35677.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22a0e4fa6e08acf2de50ed87cfb909092ab0459d/tests%2Fui%2Fmissing-trait-bounds%2Fissue-35677.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-trait-bounds%2Fissue-35677.stderr?ref=22a0e4fa6e08acf2de50ed87cfb909092ab0459d", "patch": "@@ -11,8 +11,8 @@ LL |     this.is_subset(other)\n            `T: Hash`\n help: consider restricting the type parameters to satisfy the trait bounds\n    |\n-LL | fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool where T: Eq, T: Hash, T: PartialEq {\n-   |                                                                ++++++++++++++++++++++++++++++++++\n+LL | fn is_subset<T>(this: &HashSet<T>, other: &HashSet<T>) -> bool where T: Eq, T: Hash {\n+   |                                                                ++++++++++++++++++++\n \n error: aborting due to previous error\n "}]}