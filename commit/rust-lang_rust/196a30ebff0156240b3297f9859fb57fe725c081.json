{"sha": "196a30ebff0156240b3297f9859fb57fe725c081", "node_id": "C_kwDOAAsO6NoAKDE5NmEzMGViZmYwMTU2MjQwYjMyOTdmOTg1OWZiNTdmZTcyNWMwODE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-01T20:04:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-06-01T20:04:35Z"}, "message": "Fix typo", "tree": {"sha": "7cfbaf8d9ac80ee39d8cf9e5bd4ce8c065281dfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cfbaf8d9ac80ee39d8cf9e5bd4ce8c065281dfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/196a30ebff0156240b3297f9859fb57fe725c081", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/196a30ebff0156240b3297f9859fb57fe725c081", "html_url": "https://github.com/rust-lang/rust/commit/196a30ebff0156240b3297f9859fb57fe725c081", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/196a30ebff0156240b3297f9859fb57fe725c081/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d60691996af1cc19723f06f180e0bc8d9b750ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d60691996af1cc19723f06f180e0bc8d9b750ed", "html_url": "https://github.com/rust-lang/rust/commit/3d60691996af1cc19723f06f180e0bc8d9b750ed"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "7efec3f51f7a8c8021858538531ce6d318f2c0ca", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/196a30ebff0156240b3297f9859fb57fe725c081/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/196a30ebff0156240b3297f9859fb57fe725c081/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=196a30ebff0156240b3297f9859fb57fe725c081", "patch": "@@ -2417,7 +2417,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         let mut span: MultiSpan = vec![t_sp].into();\n                         span.push_span_label(\n                             i_sp,\n-                            &format!(\"`Self` is or type `{type_name}` in this `impl`\"),\n+                            &format!(\"`Self` is on type `{type_name}` in this `impl`\"),\n                         );\n                         let mut postfix = \"\";\n                         if generics == 0 {"}, {"sha": "37384e56bc9efa42429c9f40a9ca15a1534f3dba", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/196a30ebff0156240b3297f9859fb57fe725c081/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/196a30ebff0156240b3297f9859fb57fe725c081/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=196a30ebff0156240b3297f9859fb57fe725c081", "patch": "@@ -41,7 +41,7 @@ LL | struct S;\n    |        ^ `Self` corresponds to this type, which doesn't have type parameters\n ...\n LL | impl Tr for S {\n-   | ------------- `Self` is or type `S` in this `impl`\n+   | ------------- `Self` is on type `S` in this `impl`\n help: the `Self` type doesn't accept type parameters\n    |\n LL -         let z = Self::<u8> {};\n@@ -61,7 +61,7 @@ LL | struct S;\n    |        ^ `Self` corresponds to this type, which doesn't have type parameters\n ...\n LL | impl S {\n-   | ------ `Self` is or type `S` in this `impl`\n+   | ------ `Self` is on type `S` in this `impl`\n help: the `Self` type doesn't accept type parameters\n    |\n LL -         let z = Self::<u8> {};"}, {"sha": "b1b0ec99999c6789d6f7e546a4a3990ca0214442", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/196a30ebff0156240b3297f9859fb57fe725c081/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/196a30ebff0156240b3297f9859fb57fe725c081/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=196a30ebff0156240b3297f9859fb57fe725c081", "patch": "@@ -36,7 +36,7 @@ LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n    |      ^^^^ `Self` corresponds to this type\n ...\n LL | impl<T> Enum<T> {\n-   | --------------- `Self` is or type `Enum` in this `impl`\n+   | --------------- `Self` is on type `Enum` in this `impl`\n help: the `Self` type doesn't accept type parameters, use the concrete type's name `Enum` instead if you want to specify its type parameters\n    |\n LL |         Enum::<()>::TSVariant(());\n@@ -74,7 +74,7 @@ LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n    |      ^^^^ `Self` corresponds to this type\n ...\n LL | impl<T> Enum<T> {\n-   | --------------- `Self` is or type `Enum` in this `impl`\n+   | --------------- `Self` is on type `Enum` in this `impl`\n help: the `Self` type doesn't accept type parameters, use the concrete type's name `Enum` instead if you want to specify its type parameters\n    |\n LL |         Enum::<()>::TSVariant::<()>(());\n@@ -136,7 +136,7 @@ LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n    |      ^^^^ `Self` corresponds to this type\n ...\n LL | impl<T> Enum<T> {\n-   | --------------- `Self` is or type `Enum` in this `impl`\n+   | --------------- `Self` is on type `Enum` in this `impl`\n help: the `Self` type doesn't accept type parameters, use the concrete type's name `Enum` instead if you want to specify its type parameters\n    |\n LL |         Enum::<()>::SVariant { v: () };\n@@ -167,7 +167,7 @@ LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n    |      ^^^^ `Self` corresponds to this type\n ...\n LL | impl<T> Enum<T> {\n-   | --------------- `Self` is or type `Enum` in this `impl`\n+   | --------------- `Self` is on type `Enum` in this `impl`\n help: the `Self` type doesn't accept type parameters, use the concrete type's name `Enum` instead if you want to specify its type parameters\n    |\n LL |         Enum::<()>::SVariant::<()> { v: () };\n@@ -217,7 +217,7 @@ LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n    |      ^^^^ `Self` corresponds to this type\n ...\n LL | impl<T> Enum<T> {\n-   | --------------- `Self` is or type `Enum` in this `impl`\n+   | --------------- `Self` is on type `Enum` in this `impl`\n help: the `Self` type doesn't accept type parameters, use the concrete type's name `Enum` instead if you want to specify its type parameters\n    |\n LL |         Enum::<()>::UVariant;\n@@ -236,7 +236,7 @@ LL | enum Enum<T> { TSVariant(T), SVariant { v: T }, UVariant }\n    |      ^^^^ `Self` corresponds to this type\n ...\n LL | impl<T> Enum<T> {\n-   | --------------- `Self` is or type `Enum` in this `impl`\n+   | --------------- `Self` is on type `Enum` in this `impl`\n help: the `Self` type doesn't accept type parameters, use the concrete type's name `Enum` instead if you want to specify its type parameters\n    |\n LL |         Enum::<()>::UVariant::<()>;"}]}