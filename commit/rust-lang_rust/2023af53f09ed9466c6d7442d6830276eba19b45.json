{"sha": "2023af53f09ed9466c6d7442d6830276eba19b45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMjNhZjUzZjA5ZWQ5NDY2YzZkNzQ0MmQ2ODMwMjc2ZWJhMTliNDU=", "commit": {"author": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-06-09T03:43:57Z"}, "committer": {"name": "Zac Pullar-Strecker", "email": "zacmps@gmail.com", "date": "2020-06-30T08:02:46Z"}, "message": "Hover doc link rewriting", "tree": {"sha": "84924a0e47a70b0255b1811f127147e9a9d92682", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84924a0e47a70b0255b1811f127147e9a9d92682"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2023af53f09ed9466c6d7442d6830276eba19b45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2023af53f09ed9466c6d7442d6830276eba19b45", "html_url": "https://github.com/rust-lang/rust/commit/2023af53f09ed9466c6d7442d6830276eba19b45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2023af53f09ed9466c6d7442d6830276eba19b45/comments", "author": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zacps", "id": 9827696, "node_id": "MDQ6VXNlcjk4Mjc2OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/9827696?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zacps", "html_url": "https://github.com/zacps", "followers_url": "https://api.github.com/users/zacps/followers", "following_url": "https://api.github.com/users/zacps/following{/other_user}", "gists_url": "https://api.github.com/users/zacps/gists{/gist_id}", "starred_url": "https://api.github.com/users/zacps/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zacps/subscriptions", "organizations_url": "https://api.github.com/users/zacps/orgs", "repos_url": "https://api.github.com/users/zacps/repos", "events_url": "https://api.github.com/users/zacps/events{/privacy}", "received_events_url": "https://api.github.com/users/zacps/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bd717139918e15e537dcd833bb003e85d24b3d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd717139918e15e537dcd833bb003e85d24b3d1", "html_url": "https://github.com/rust-lang/rust/commit/2bd717139918e15e537dcd833bb003e85d24b3d1"}], "stats": {"total": 399, "additions": 382, "deletions": 17}, "files": [{"sha": "bc36f0fab1893ead5ab799ab49ca234aad6d94d0", "filename": "Cargo.lock", "status": "modified", "additions": 225, "deletions": 11, "changes": 236, "blob_url": "https://github.com/rust-lang/rust/blob/2023af53f09ed9466c6d7442d6830276eba19b45/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2023af53f09ed9466c6d7442d6830276eba19b45/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2023af53f09ed9466c6d7442d6830276eba19b45", "patch": "@@ -94,6 +94,27 @@ version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n \n+[[package]]\n+name = \"block-buffer\"\n+version = \"0.7.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\n+dependencies = [\n+ \"block-padding\",\n+ \"byte-tools\",\n+ \"byteorder\",\n+ \"generic-array\",\n+]\n+\n+[[package]]\n+name = \"block-padding\"\n+version = \"0.1.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5\"\n+dependencies = [\n+ \"byte-tools\",\n+]\n+\n [[package]]\n name = \"bstr\"\n version = \"0.2.13\"\n@@ -103,6 +124,12 @@ dependencies = [\n  \"memchr\",\n ]\n \n+[[package]]\n+name = \"byte-tools\"\n+version = \"0.3.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n+\n [[package]]\n name = \"byteorder\"\n version = \"1.3.4\"\n@@ -196,15 +223,18 @@ dependencies = [\n ]\n \n [[package]]\n-name = \"clicolors-control\"\n-version = \"1.0.1\"\n+name = \"clap\"\n+version = \"2.33.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"90082ee5dcdd64dc4e9e0d37fbf3ee325419e39c0092191e0393df65518f741e\"\n+checksum = \"bdfa80d47f954d53a35a64987ca1422f495b8d6483c0fe9f7117b36c2a792129\"\n dependencies = [\n+ \"ansi_term\",\n  \"atty\",\n- \"lazy_static\",\n- \"libc\",\n- \"winapi 0.3.9\",\n+ \"bitflags\",\n+ \"strsim\",\n+ \"textwrap\",\n+ \"unicode-width\",\n+ \"vec_map\",\n ]\n \n [[package]]\n@@ -216,13 +246,29 @@ dependencies = [\n  \"bitflags\",\n ]\n \n+[[package]]\n+name = \"comrak\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e17058cc536cf290563e88787d7b9e6030ce4742943017cc2ffb71f88034021c\"\n+dependencies = [\n+ \"clap\",\n+ \"entities\",\n+ \"lazy_static\",\n+ \"pest\",\n+ \"pest_derive\",\n+ \"regex\",\n+ \"twoway\",\n+ \"typed-arena\",\n+ \"unicode_categories\",\n+]\n+\n [[package]]\n name = \"console\"\n-version = \"0.10.3\"\n+version = \"0.11.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2586208b33573b7f76ccfbe5adb076394c88deaf81b84d7213969805b0a952a7\"\n+checksum = \"8c0994e656bba7b922d8dd1245db90672ffb701e684e45be58f20719d69abc5a\"\n dependencies = [\n- \"clicolors-control\",\n  \"encode_unicode\",\n  \"lazy_static\",\n  \"libc\",\n@@ -309,6 +355,15 @@ version = \"2.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \n+[[package]]\n+name = \"digest\"\n+version = \"0.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\n+dependencies = [\n+ \"generic-array\",\n+]\n+\n [[package]]\n name = \"drop_bomb\"\n version = \"0.1.4\"\n@@ -342,6 +397,12 @@ version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n \n+[[package]]\n+name = \"entities\"\n+version = \"1.0.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b5320ae4c3782150d900b79807611a59a99fc9a1d61d686faafc24b93fc8d7ca\"\n+\n [[package]]\n name = \"env_logger\"\n version = \"0.7.1\"\n@@ -351,6 +412,12 @@ dependencies = [\n  \"log\",\n ]\n \n+[[package]]\n+name = \"fake-simd\"\n+version = \"0.1.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n+\n [[package]]\n name = \"filetime\"\n version = \"0.2.10\"\n@@ -434,6 +501,15 @@ version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3dcaa9ae7725d12cdb85b3ad99a434db70b468c09ded17e012d86b5c1010f7a7\"\n \n+[[package]]\n+name = \"generic-array\"\n+version = \"0.12.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec\"\n+dependencies = [\n+ \"typenum\",\n+]\n+\n [[package]]\n name = \"getrandom\"\n version = \"0.1.14\"\n@@ -544,9 +620,9 @@ dependencies = [\n \n [[package]]\n name = \"insta\"\n-version = \"0.16.0\"\n+version = \"0.16.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8386e795fb3927131ea4cede203c529a333652eb6dc4ff29616b832b27e9b096\"\n+checksum = \"617e921abc813f96a3b00958c079e7bf1e2db998f8a04f1546dd967373a418ee\"\n dependencies = [\n  \"console\",\n  \"difference\",\n@@ -711,6 +787,12 @@ dependencies = [\n  \"url\",\n ]\n \n+[[package]]\n+name = \"maplit\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3e2e65a1a2e43cfcb47a895c4c8b10d1f4a61097f9f254f183aee60cad9c651d\"\n+\n [[package]]\n name = \"matchers\"\n version = \"0.0.1\"\n@@ -881,6 +963,12 @@ version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0b631f7e854af39a1739f401cf34a8a013dfe09eac4fa4dba91e9768bd28168d\"\n \n+[[package]]\n+name = \"opaque-debug\"\n+version = \"0.2.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n+\n [[package]]\n name = \"parking_lot\"\n version = \"0.11.0\"\n@@ -936,6 +1024,49 @@ version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \n+[[package]]\n+name = \"pest\"\n+version = \"2.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"10f4872ae94d7b90ae48754df22fd42ad52ce740b8f370b03da4835417403e53\"\n+dependencies = [\n+ \"ucd-trie\",\n+]\n+\n+[[package]]\n+name = \"pest_derive\"\n+version = \"2.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"833d1ae558dc601e9a60366421196a8d94bc0ac980476d0b67e1d0988d72b2d0\"\n+dependencies = [\n+ \"pest\",\n+ \"pest_generator\",\n+]\n+\n+[[package]]\n+name = \"pest_generator\"\n+version = \"2.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"99b8db626e31e5b81787b9783425769681b347011cc59471e33ea46d2ea0cf55\"\n+dependencies = [\n+ \"pest\",\n+ \"pest_meta\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"pest_meta\"\n+version = \"2.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"54be6e404f5317079812fc8f9f5279de376d8856929e21c184ecf6bbd692a11d\"\n+dependencies = [\n+ \"maplit\",\n+ \"pest\",\n+ \"sha-1\",\n+]\n+\n [[package]]\n name = \"petgraph\"\n version = \"0.5.1\"\n@@ -1133,6 +1264,7 @@ dependencies = [\n name = \"ra_ide\"\n version = \"0.1.0\"\n dependencies = [\n+ \"comrak\",\n  \"either\",\n  \"indexmap\",\n  \"insta\",\n@@ -1143,15 +1275,18 @@ dependencies = [\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n+ \"ra_hir_def\",\n  \"ra_ide_db\",\n  \"ra_prof\",\n+ \"ra_project_model\",\n  \"ra_ssr\",\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"rand\",\n  \"rustc-hash\",\n  \"stdx\",\n  \"test_utils\",\n+ \"url\",\n ]\n \n [[package]]\n@@ -1653,6 +1788,18 @@ dependencies = [\n  \"yaml-rust\",\n ]\n \n+[[package]]\n+name = \"sha-1\"\n+version = \"0.8.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f7d94d0bede923b3cea61f3f1ff57ff8cdfd77b400fb8f9998949e0cf04163df\"\n+dependencies = [\n+ \"block-buffer\",\n+ \"digest\",\n+ \"fake-simd\",\n+ \"opaque-debug\",\n+]\n+\n [[package]]\n name = \"sharded-slab\"\n version = \"0.0.9\"\n@@ -1687,6 +1834,12 @@ dependencies = [\n name = \"stdx\"\n version = \"0.1.0\"\n \n+[[package]]\n+name = \"strsim\"\n+version = \"0.8.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n+\n [[package]]\n name = \"superslice\"\n version = \"1.0.0\"\n@@ -1766,6 +1919,15 @@ version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f03e7efdedc3bc78cb2337f1e2785c39e45f5ef762d9e4ebb137fff7380a6d8a\"\n \n+[[package]]\n+name = \"textwrap\"\n+version = \"0.11.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n+dependencies = [\n+ \"unicode-width\",\n+]\n+\n [[package]]\n name = \"thin-dst\"\n version = \"1.1.0\"\n@@ -1878,6 +2040,40 @@ dependencies = [\n  \"tracing-serde\",\n ]\n \n+[[package]]\n+name = \"twoway\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6b40075910de3a912adbd80b5d8bad6ad10a23eeb1f5bf9d4006839e899ba5bc\"\n+dependencies = [\n+ \"memchr\",\n+ \"unchecked-index\",\n+]\n+\n+[[package]]\n+name = \"typed-arena\"\n+version = \"1.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a9b2228007eba4120145f785df0f6c92ea538f5a3635a612ecf4e334c8c1446d\"\n+\n+[[package]]\n+name = \"typenum\"\n+version = \"1.12.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"373c8a200f9e67a0c95e62a4f52fbf80c23b4381c05a17845531982fa99e6b33\"\n+\n+[[package]]\n+name = \"ucd-trie\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n+\n+[[package]]\n+name = \"unchecked-index\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"eeba86d422ce181a719445e51872fa30f1f7413b62becb52e95ec91aa262d85c\"\n+\n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\"\n@@ -1902,12 +2098,24 @@ version = \"1.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0\"\n \n+[[package]]\n+name = \"unicode-width\"\n+version = \"0.1.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3\"\n+\n [[package]]\n name = \"unicode-xid\"\n version = \"0.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\n \n+[[package]]\n+name = \"unicode_categories\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"39ec24b3121d976906ece63c9daad25b85969647682eee313cb5779fdd69e14e\"\n+\n [[package]]\n name = \"url\"\n version = \"2.1.1\"\n@@ -1920,6 +2128,12 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"vec_map\"\n+version = \"0.8.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\n+\n [[package]]\n name = \"vfs\"\n version = \"0.1.0\""}, {"sha": "e5fdf5aa128a29efeddd56d83dde85d302a81feb", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=2023af53f09ed9466c6d7442d6830276eba19b45", "patch": "@@ -17,6 +17,8 @@ itertools = \"0.9.0\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n rand = { version = \"0.7.3\", features = [\"small_rng\"] }\n+comrak = \"0.7.0\"\n+url = \"*\"\n \n stdx = { path = \"../stdx\" }\n \n@@ -30,6 +32,8 @@ ra_prof = { path = \"../ra_prof\" }\n test_utils = { path = \"../test_utils\" }\n ra_assists = { path = \"../ra_assists\" }\n ra_ssr = { path = \"../ra_ssr\" }\n+ra_project_model = { path = \"../ra_project_model\" }\n+ra_hir_def = { path = \"../ra_hir_def\" }\n \n # ra_ide should depend only on the top-level `hir` package. if you need\n # something from some `hir_xxx` subpackage, reexport the API via `hir`."}, {"sha": "0791951841bf4835e54c75dcb0fe5469c637772c", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 98, "deletions": 4, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=2023af53f09ed9466c6d7442d6830276eba19b45", "patch": "@@ -1,8 +1,8 @@\n use std::iter::once;\n \n use hir::{\n-    Adt, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource, HirDisplay,\n-    Module, ModuleDef, ModuleSource, Semantics,\n+    Adt, AsAssocItem, AssocItemContainer, FieldSource, HasSource, HirDisplay, ModuleDef,\n+    ModuleSource, Semantics, Module, Documentation\n };\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n@@ -11,6 +11,8 @@ use ra_ide_db::{\n     RootDatabase,\n };\n use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n+use ra_project_model::ProjectWorkspace;\n+use ra_hir_def::{item_scope::ItemInNs, db::DefDatabase, ModuleDefId};\n \n use crate::{\n     display::{\n@@ -65,6 +67,13 @@ pub struct HoverGotoTypeData {\n     pub nav: NavigationTarget,\n }\n \n+use std::path::{Path, PathBuf};\n+use std::sync::Arc;\n+use comrak::{parse_document,format_commonmark, ComrakOptions, Arena};\n+use comrak::nodes::NodeValue;\n+use url::Url;\n+use ra_ide_db::imports_locator::ImportsLocator;\n+\n /// Contains the results when hovering over an item\n #[derive(Debug, Default)]\n pub struct HoverResult {\n@@ -118,7 +127,7 @@ impl HoverResult {\n //\n // Shows additional information, like type of an expression or documentation for definition when \"focusing\" code.\n // Focusing is usually hovering with a mouse, but can also be triggered with a shortcut.\n-pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeInfo<HoverResult>> {\n+pub(crate) fn hover(db: &RootDatabase, position: FilePosition, workspaces: Arc<Vec<ProjectWorkspace>>) -> Option<RangeInfo<HoverResult>> {\n     let sema = Semantics::new(db);\n     let file = sema.parse(position.file_id).syntax().clone();\n     let token = pick_best(file.token_at_offset(position.offset))?;\n@@ -138,7 +147,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         }\n     } {\n         let range = sema.original_range(&node).range;\n-        res.extend(hover_text_from_name_kind(db, name_kind));\n+        let text = hover_text_from_name_kind(db, name_kind.clone()).map(|text| rewrite_links(db, &text, &name_kind, workspaces).unwrap_or(text));\n+        res.extend(text);\n \n         if !res.is_empty() {\n             if let Some(action) = show_implementations_action(db, name_kind) {\n@@ -379,6 +389,90 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n     }\n }\n \n+/// Rewrite documentation links in markdown to point to local documentation/docs.rs\n+fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Definition, workspaces: Arc<Vec<ProjectWorkspace>>) -> Option<String> {\n+    // FIXME: Fail early\n+    if let (Some(name), Some(module)) = (definition.name(db), definition.module(db)) {\n+        let krate_name = module.krate().display_name(db)?;\n+        let arena = Arena::new();\n+        let doc = parse_document(&arena, markdown, &ComrakOptions::default());\n+        let path = module.path_to_root(db);\n+        let mut doc_target_dirs = workspaces\n+            .iter()\n+            .filter_map(|workspace| if let ProjectWorkspace::Cargo{cargo: cargo_workspace, ..} = workspace {Some(cargo_workspace)} else {None})\n+            .map(|workspace| workspace.workspace_root())\n+            // TODO: `target` is configurable in cargo config, we should respect it\n+            .map(|root| root.join(\"target/doc\"));\n+\n+        iter_nodes(doc, &|node| {\n+            match &mut node.data.borrow_mut().value {\n+                &mut NodeValue::Link(ref mut link) => {\n+                    match Url::parse(&String::from_utf8(link.url.clone()).unwrap()) {\n+                        // If this is a valid absolute URL don't touch it\n+                        Ok(_) => (),\n+                        // If contains .html            file-based link to new page\n+                        // If starts with #fragment     file-based link to fragment on current page\n+                        // If contains ::               module-based link\n+                        Err(_) => {\n+                            let link_str = String::from_utf8(link.url.clone()).unwrap();\n+                            let resolved = try_resolve_path(db, &mut doc_target_dirs.clone(), definition, &link_str)\n+                                .or_else(|| try_resolve_intra(db, &mut doc_target_dirs.clone(), definition, &link_str));\n+\n+                            if let Some(resolved) = resolved {\n+                                link.url = resolved.as_bytes().to_vec();\n+                            }\n+\n+                        }\n+                    }\n+                },\n+                _ => ()\n+            }\n+        });\n+        let mut out = Vec::new();\n+        format_commonmark(doc, &ComrakOptions::default(), &mut out);\n+        Some(String::from_utf8(out).unwrap())\n+    } else {\n+        // eprintln!(\"WARN: Unable to determine name or module for hover; link rewriting disabled.\");\n+        None\n+    }\n+}\n+\n+/// Try to resolve path to local documentation via intra-doc-links (i.e. `super::gateway::Shard`)\n+fn try_resolve_intra(db: &RootDatabase, doc_target_dirs: impl Iterator<Item = PathBuf>, definition: &Definition, link: &str) -> Option<String> {\n+    None\n+}\n+\n+/// Try to resolve path to local documentation via path-based links (i.e. `../gateway/struct.Shard.html`)\n+fn try_resolve_path(db: &RootDatabase, doc_target_dirs: impl Iterator<Item = PathBuf>, definition: &Definition, link: &str) -> Option<String> {\n+    let ns = if let Definition::ModuleDef(moddef) = definition {\n+        ItemInNs::Types(moddef.clone().into())\n+    } else {\n+        return None;\n+    };\n+    let krate = definition.module(db)?.krate();\n+    let import_map = db.import_map(krate.into());\n+    let base = import_map.path_of(ns).unwrap();\n+    let base = base.segments.iter().map(|name| format!(\"{}\", name)).collect::<PathBuf>();\n+\n+    doc_target_dirs\n+        .map(|dir| dir.join(format!(\"{}\", krate.display_name(db).unwrap())).join(base.join(\"..\").join(link)))\n+        .inspect(|path| eprintln!(\"candidate {}\", path.display()))\n+        .filter(|path| path.exists())\n+        // slice out the UNC '\\?\\' added by canonicalize\n+        .map(|path| format!(\"file:///{}\", path.display()))\n+        // \\. is treated as an escape in vscode's markdown hover rendering\n+        .map(|path_str| path_str.replace(\"\\\\\", \"/\"))\n+        .next()\n+}\n+\n+fn iter_nodes<'a, F>(node: &'a comrak::nodes::AstNode<'a>, f: &F)\n+    where F : Fn(&'a comrak::nodes::AstNode<'a>) {\n+    f(node);\n+    for c in node.children() {\n+        iter_nodes(c, f);\n+    }\n+}\n+\n fn pick_best(tokens: TokenAtOffset<SyntaxToken>) -> Option<SyntaxToken> {\n     return tokens.max_by_key(priority);\n     fn priority(n: &SyntaxToken) -> usize {"}, {"sha": "d56d52d30b0f5ced0b62e5c158af9f2ac302f4cb", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=2023af53f09ed9466c6d7442d6830276eba19b45", "patch": "@@ -54,6 +54,7 @@ use ra_ide_db::{\n     LineIndexDatabase,\n };\n use ra_syntax::{SourceFile, TextRange, TextSize};\n+use ra_project_model::ProjectWorkspace;\n \n use crate::display::ToNav;\n \n@@ -389,8 +390,8 @@ impl Analysis {\n     }\n \n     /// Returns a short text describing element at position.\n-    pub fn hover(&self, position: FilePosition) -> Cancelable<Option<RangeInfo<HoverResult>>> {\n-        self.with_db(|db| hover::hover(db, position))\n+    pub fn hover(&self, position: FilePosition, workspaces: Arc<Vec<ProjectWorkspace>>) -> Cancelable<Option<RangeInfo<HoverResult>>> {\n+        self.with_db(|db| hover::hover(db, position, workspaces))\n     }\n \n     /// Computes parameter information for the given call expression."}, {"sha": "f746bf1e725f3ab67afa0fd1cad3cdc56178fad6", "filename": "crates/ra_syntax/src/ast/test.txt", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_syntax%2Fsrc%2Fast%2Ftest.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_syntax%2Fsrc%2Fast%2Ftest.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftest.txt?ref=2023af53f09ed9466c6d7442d6830276eba19b45", "patch": "@@ -0,0 +1,15 @@\n+The context is a general utility struct provided on event dispatches, which\n+helps with dealing with the current \"context\" of the event dispatch.\n+The context also acts as a general high-level interface over the associated\n+[`Shard`] which received the event, or the low-level [`http`] module.\n+\n+The context contains \"shortcuts\", like for interacting with the shard.\n+Methods like [`set_activity`] will unlock the shard and perform an update for\n+you to save a bit of work.\n+\n+A context will only live for the event it was dispatched for. After the\n+event handler finished, it is destroyed and will not be re-used.\n+\n+[`Shard`]: ../gateway/struct.Shard.html\n+[`http`]: ../http/index.html\n+[`set_activity`]: #method.set_activity"}, {"sha": "323d78bbc3db367cb2cbe02c41272efc41da08b1", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=2023af53f09ed9466c6d7442d6830276eba19b45", "patch": "@@ -146,3 +146,39 @@ impl Iterator for CommentIter {\n         self.iter.by_ref().find_map(|el| el.into_token().and_then(ast::Comment::cast))\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use comrak::{parse_document,format_commonmark, ComrakOptions, Arena};\n+    use comrak::nodes::{AstNode, NodeValue};\n+\n+    fn iter_nodes<'a, F>(node: &'a AstNode<'a>, f: &F)\n+        where F : Fn(&'a AstNode<'a>) {\n+        f(node);\n+        for c in node.children() {\n+            iter_nodes(c, f);\n+        }\n+    }\n+\n+    #[allow(non_snake_case)]\n+    #[test]\n+    fn test_link_rewrite() {\n+        let src = include_str!(\"./test.txt\");\n+\n+        let arena = Arena::new();\n+        let doc = parse_document(&arena, src, &ComrakOptions::default());\n+\n+        iter_nodes(doc, &|node| {\n+            match &mut node.data.borrow_mut().value {\n+                &mut NodeValue::Link(ref mut link) => {\n+                    link.url = \"https://www.google.com\".as_bytes().to_vec();\n+                },\n+                _ => ()\n+            }\n+        });\n+\n+        let mut out = Vec::new();\n+        format_commonmark(doc, &ComrakOptions::default(), &mut out);\n+        panic!(\"{}\", String::from_utf8(out).unwrap());\n+    }\n+}"}, {"sha": "19da25f967634cbdb2cdd30bdb495ddcb55ddd53", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2023af53f09ed9466c6d7442d6830276eba19b45/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=2023af53f09ed9466c6d7442d6830276eba19b45", "patch": "@@ -5,6 +5,7 @@\n use std::{\n     io::Write as _,\n     process::{self, Stdio},\n+    sync::Arc\n };\n \n use lsp_server::ErrorCode;"}]}