{"sha": "1b5db85314a35416b617e8b7d0a3baa72922a2f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNWRiODUzMTRhMzU0MTZiNjE3ZThiN2QwYTNiYWE3MjkyMmEyZjM=", "commit": {"author": {"name": "Fabian Zaiser", "email": "fabian.zaiser@gmail.com", "date": "2018-03-28T14:22:37Z"}, "committer": {"name": "Fabian Zaiser", "email": "fabian.zaiser@gmail.com", "date": "2018-03-28T14:22:37Z"}, "message": "Fix #![feature]s.", "tree": {"sha": "bbcb65596ba3b3c1b504d182a7466a1c769f3082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbcb65596ba3b3c1b504d182a7466a1c769f3082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5db85314a35416b617e8b7d0a3baa72922a2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5db85314a35416b617e8b7d0a3baa72922a2f3", "html_url": "https://github.com/rust-lang/rust/commit/1b5db85314a35416b617e8b7d0a3baa72922a2f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5db85314a35416b617e8b7d0a3baa72922a2f3/comments", "author": {"login": "fanzier", "id": 5846332, "node_id": "MDQ6VXNlcjU4NDYzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5846332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanzier", "html_url": "https://github.com/fanzier", "followers_url": "https://api.github.com/users/fanzier/followers", "following_url": "https://api.github.com/users/fanzier/following{/other_user}", "gists_url": "https://api.github.com/users/fanzier/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanzier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanzier/subscriptions", "organizations_url": "https://api.github.com/users/fanzier/orgs", "repos_url": "https://api.github.com/users/fanzier/repos", "events_url": "https://api.github.com/users/fanzier/events{/privacy}", "received_events_url": "https://api.github.com/users/fanzier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fanzier", "id": 5846332, "node_id": "MDQ6VXNlcjU4NDYzMzI=", "avatar_url": "https://avatars.githubusercontent.com/u/5846332?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fanzier", "html_url": "https://github.com/fanzier", "followers_url": "https://api.github.com/users/fanzier/followers", "following_url": "https://api.github.com/users/fanzier/following{/other_user}", "gists_url": "https://api.github.com/users/fanzier/gists{/gist_id}", "starred_url": "https://api.github.com/users/fanzier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fanzier/subscriptions", "organizations_url": "https://api.github.com/users/fanzier/orgs", "repos_url": "https://api.github.com/users/fanzier/repos", "events_url": "https://api.github.com/users/fanzier/events{/privacy}", "received_events_url": "https://api.github.com/users/fanzier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece87c3f4e76fd996dbbbaf8202f2adecff06c1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e", "html_url": "https://github.com/rust-lang/rust/commit/ece87c3f4e76fd996dbbbaf8202f2adecff06c1e"}], "stats": {"total": 77, "additions": 40, "deletions": 37}, "files": [{"sha": "1346435a21a4d26fad4a6aad90d643fe39afbd6f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 40, "deletions": 37, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/1b5db85314a35416b617e8b7d0a3baa72922a2f3/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5db85314a35416b617e8b7d0a3baa72922a2f3/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=1b5db85314a35416b617e8b7d0a3baa72922a2f3", "patch": "@@ -642,11 +642,11 @@ returning `None` if `rhs == 0` or the division results in overflow.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!((\", stringify!($SelfT),\n+#![feature(euclidean_division)]\n+assert_eq!((\", stringify!($SelfT),\n \"::min_value() + 1).checked_div_euc(-1), Some(\", stringify!($Max), \"));\n assert_eq!(\", stringify!($SelfT), \"::min_value().checked_div_euc(-1), None);\n-assert_eq!((1\", stringify!($SelfT), \").checked_div_euc(0), None);\",\n-$EndFeature, \"\n+assert_eq!((1\", stringify!($SelfT), \").checked_div_euc(0), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -695,12 +695,12 @@ $EndFeature, \"\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n+#![feature(euclidean_division)]\n+use std::\", stringify!($SelfT), \";\n \n assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(2), Some(1));\n assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(0), None);\n-assert_eq!(\", stringify!($SelfT), \"::MIN.checked_mod_euc(-1), None);\",\n-$EndFeature, \"\n+assert_eq!(\", stringify!($SelfT), \"::MIN.checked_mod_euc(-1), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -1063,9 +1063,9 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n+#![feature(euclidean_division)]\n assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euc(10), 10);\n-assert_eq!((-128i8).wrapping_div_euc(-1), -128);\",\n-$EndFeature, \"\n+assert_eq!((-128i8).wrapping_div_euc(-1), -128);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -1119,9 +1119,9 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_mod_euc(10), 0);\n-assert_eq!((-128i8).wrapping_mod_euc(-1), 0);\",\n-$EndFeature, \"\n+#![feature(euclidean_division)]\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_mod_euc(10), 0);\n+assert_eq!((-128i8).wrapping_mod_euc(-1), 0);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -1410,12 +1410,12 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n+#![feature(euclidean_division)]\n+use std::\", stringify!($SelfT), \";\n \n assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euc(2), (2, false));\n assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_div_euc(-1), (\", stringify!($SelfT),\n-\"::MIN, true));\",\n-$EndFeature, \"\n+\"::MIN, true));\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n@@ -1476,11 +1476,11 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-\", $Feature, \"use std::\", stringify!($SelfT), \";\n+#![feature(euclidean_division)]\n+use std::\", stringify!($SelfT), \";\n \n assert_eq!(5\", stringify!($SelfT), \".overflowing_mod_euc(2), (1, false));\n-assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_mod_euc(-1), (0, true));\",\n-$EndFeature, \"\n+assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_mod_euc(-1), (0, true));\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -1704,14 +1704,14 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-\", $Feature, \"let a: \", stringify!($SelfT), \" = 7; // or any other integer type\n+#![feature(euclidean_division)]\n+let a: \", stringify!($SelfT), \" = 7; // or any other integer type\n let b = 4;\n \n assert_eq!(a.div_euc(b), 1); // 7 >= 4 * 1\n assert_eq!(a.div_euc(-b), -1); // 7 >= -4 * -1\n assert_eq!((-a).div_euc(b), -2); // -7 >= 4 * -2\n-assert_eq!((-a).div_euc(-b), 2); // -7 >= -4 * 2\",\n-$EndFeature, \"\n+assert_eq!((-a).div_euc(-b), 2); // -7 >= -4 * 2\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -1740,14 +1740,14 @@ This function will panic if `rhs` is 0.\n Basic usage:\n \n ```\n-\", $Feature, \"let a: \", stringify!($SelfT), \" = 7; // or any other integer type\n+#![feature(euclidean_division)]\n+let a: \", stringify!($SelfT), \" = 7; // or any other integer type\n let b = 4;\n \n assert_eq!(a.mod_euc(b), 3);\n assert_eq!((-a).mod_euc(b), 1);\n assert_eq!(a.mod_euc(-b), 3);\n-assert_eq!((-a).mod_euc(-b), 1);\",\n-$EndFeature, \"\n+assert_eq!((-a).mod_euc(-b), 1);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -2362,7 +2362,8 @@ if `rhs == 0`.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(128\", stringify!($SelfT), \".checked_div(2), Some(64));\n+#![feature(euclidean_division)]\n+assert_eq!(128\", stringify!($SelfT), \".checked_div(2), Some(64));\n assert_eq!(1\", stringify!($SelfT), \".checked_div_euc(0), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n@@ -2409,9 +2410,9 @@ if `rhs == 0`.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(2), Some(1));\n-assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(0), None);\",\n-$EndFeature, \"\n+#![feature(euclidean_division)]\n+assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(2), Some(1));\n+assert_eq!(5\", stringify!($SelfT), \".checked_mod_euc(0), None);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -2715,7 +2716,8 @@ are accounted for in the wrapping operations.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euc(10), 10);\", $EndFeature, \"\n+#![feature(euclidean_division)]\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_div_euc(10), 10);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -2759,7 +2761,8 @@ are accounted for in the wrapping operations.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq!(100\", stringify!($SelfT), \".wrapping_mod_euc(10), 0);\", $EndFeature, \"\n+#![feature(euclidean_division)]\n+assert_eq!(100\", stringify!($SelfT), \".wrapping_mod_euc(10), 0);\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -3018,8 +3021,8 @@ This function will panic if `rhs` is 0.\n Basic usage\n \n ```\n-\", $Feature, \"assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euc(2), (2, false));\",\n-$EndFeature, \"\n+#![feature(euclidean_division)]\n+assert_eq!(5\", stringify!($SelfT), \".overflowing_div_euc(2), (2, false));\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n@@ -3071,8 +3074,8 @@ This function will panic if `rhs` is 0.\n Basic usage\n \n ```\n-\", $Feature, \"assert_eq!(5\", stringify!($SelfT), \".overflowing_mod_euc(2), (1, false));\",\n-$EndFeature, \"\n+#![feature(euclidean_division)]\n+assert_eq!(5\", stringify!($SelfT), \".overflowing_mod_euc(2), (1, false));\n ```\"),\n             #[inline]\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n@@ -3248,8 +3251,8 @@ For unsigned types, this is just the same as `self / rhs`.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq(7\", stringify!($SelfT), \".div_euc(4), 1); // or any other integer type\",\n-$EndFeature, \"\n+#![feature(euclidean_division)]\n+assert_eq(7\", stringify!($SelfT), \".div_euc(4), 1); // or any other integer type\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]\n@@ -3270,8 +3273,8 @@ For unsigned types, this is just the same as `self % rhs`.\n Basic usage:\n \n ```\n-\", $Feature, \"assert_eq(7\", stringify!($SelfT), \".mod_euc(4), 3); // or any other integer type\",\n-$EndFeature, \"\n+#![feature(euclidean_division)]\n+assert_eq(7\", stringify!($SelfT), \".mod_euc(4), 3); // or any other integer type\n ```\"),\n             #[unstable(feature = \"euclidean_division\", issue = \"49048\")]\n             #[inline]"}]}