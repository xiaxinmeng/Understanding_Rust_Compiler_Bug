{"sha": "22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "node_id": "C_kwDOAAsO6NoAKDIyYTdhMTlmOTMzM2JjMWZjYmE5N2NlNDQ0YTM1MTVjYjVmYjMzZTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T08:50:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-31T08:50:35Z"}, "message": "Auto merge of #98112 - saethlin:mir-alignment-checks, r=oli-obk\n\nInsert alignment checks for pointer dereferences when debug assertions are enabled\n\nCloses https://github.com/rust-lang/rust/issues/54915\n\n- [x] Jake tells me this sounds like a place to use `MirPatch`, but I can't figure out how to insert a new basic block with a new terminator in the middle of an existing basic block, using `MirPatch`. (if nobody else backs up this point I'm checking this as \"not actually a good idea\" because the code looks pretty clean to me after rearranging it a bit)\n- [x] Using `CastKind::PointerExposeAddress` is definitely wrong, we don't want to expose. Calling a function to get the pointer address seems quite excessive. ~I'll see if I can add a new `CastKind`.~ `CastKind::Transmute` to the rescue!\n- [x] Implement a more helpful panic message like slice bounds checking.\n\nr? `@oli-obk`", "tree": {"sha": "8ac7da60c0ee60d36ef565024a75f848c98a19b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ac7da60c0ee60d36ef565024a75f848c98a19b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "html_url": "https://github.com/rust-lang/rust/commit/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec7bb8da11f3e5cc73be397b78d2aea4157df300", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec7bb8da11f3e5cc73be397b78d2aea4157df300", "html_url": "https://github.com/rust-lang/rust/commit/ec7bb8da11f3e5cc73be397b78d2aea4157df300"}, {"sha": "750707801b42c0da6beeccd587925130ba2bad99", "url": "https://api.github.com/repos/rust-lang/rust/commits/750707801b42c0da6beeccd587925130ba2bad99", "html_url": "https://github.com/rust-lang/rust/commit/750707801b42c0da6beeccd587925130ba2bad99"}], "stats": {"total": 393, "additions": 372, "deletions": 21}, "files": [{"sha": "98112fe08305ebbec63546ac07b61a1aa7eb2f06", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -379,6 +379,18 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                             source_info.span,\n                         );\n                     }\n+                    AssertKind::MisalignedPointerDereference { ref required, ref found } => {\n+                        let required = codegen_operand(fx, required).load_scalar(fx);\n+                        let found = codegen_operand(fx, found).load_scalar(fx);\n+                        let location = fx.get_caller_location(source_info).load_scalar(fx);\n+\n+                        codegen_panic_inner(\n+                            fx,\n+                            rustc_hir::LangItem::PanicBoundsCheck,\n+                            &[required, found, location],\n+                            source_info.span,\n+                        );\n+                    }\n                     _ => {\n                         let msg_str = msg.description();\n                         codegen_panic(fx, msg_str, source_info);"}, {"sha": "c086d1b7f5a38d5a3e3363ce77a17c47800dd757", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -600,6 +600,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // and `#[track_caller]` adds an implicit third argument.\n                 (LangItem::PanicBoundsCheck, vec![index, len, location])\n             }\n+            AssertKind::MisalignedPointerDereference { ref required, ref found } => {\n+                let required = self.codegen_operand(bx, required).immediate();\n+                let found = self.codegen_operand(bx, found).immediate();\n+                // It's `fn panic_bounds_check(index: usize, len: usize)`,\n+                // and `#[track_caller]` adds an implicit third argument.\n+                (LangItem::PanicMisalignedPointerDereference, vec![required, found, location])\n+            }\n             _ => {\n                 let msg = bx.const_str(msg.description());\n                 // It's `pub fn panic(expr: &str)`, with the wide reference being passed"}, {"sha": "c87ea18af4f427fda5c6255da9118332e6a5529c", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -544,6 +544,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n             RemainderByZero(op) => RemainderByZero(eval_to_int(op)?),\n             ResumedAfterReturn(generator_kind) => ResumedAfterReturn(*generator_kind),\n             ResumedAfterPanic(generator_kind) => ResumedAfterPanic(*generator_kind),\n+            MisalignedPointerDereference { ref required, ref found } => {\n+                MisalignedPointerDereference {\n+                    required: eval_to_int(required)?,\n+                    found: eval_to_int(found)?,\n+                }\n+            }\n         };\n         Err(ConstEvalErrKind::AssertFailure(err).into())\n     }"}, {"sha": "eac8fd29429319c4fe82ec1e446395b7422fa0db", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -240,6 +240,7 @@ language_item_table! {\n     PanicDisplay,            sym::panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n     ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n     PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::Exact(0);\n+    PanicMisalignedPointerDereference,        sym::panic_misaligned_pointer_dereference,  panic_misaligned_pointer_dereference_fn,      Target::Fn,             GenericRequirement::Exact(0);\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct,         GenericRequirement::None;\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;"}, {"sha": "de7e8bc861d2c8e2ef057c07b2cefaa691600777", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1277,7 +1277,7 @@ impl<O> AssertKind<O> {\n \n     /// Getting a description does not require `O` to be printable, and does not\n     /// require allocation.\n-    /// The caller is expected to handle `BoundsCheck` separately.\n+    /// The caller is expected to handle `BoundsCheck` and `MisalignedPointerDereference` separately.\n     pub fn description(&self) -> &'static str {\n         use AssertKind::*;\n         match self {\n@@ -1296,7 +1296,9 @@ impl<O> AssertKind<O> {\n             ResumedAfterReturn(GeneratorKind::Async(_)) => \"`async fn` resumed after completion\",\n             ResumedAfterPanic(GeneratorKind::Gen) => \"generator resumed after panicking\",\n             ResumedAfterPanic(GeneratorKind::Async(_)) => \"`async fn` resumed after panicking\",\n-            BoundsCheck { .. } => bug!(\"Unexpected AssertKind\"),\n+            BoundsCheck { .. } | MisalignedPointerDereference { .. } => {\n+                bug!(\"Unexpected AssertKind\")\n+            }\n         }\n     }\n \n@@ -1353,6 +1355,13 @@ impl<O> AssertKind<O> {\n             Overflow(BinOp::Shl, _, r) => {\n                 write!(f, \"\\\"attempt to shift left by `{{}}`, which would overflow\\\", {:?}\", r)\n             }\n+            MisalignedPointerDereference { required, found } => {\n+                write!(\n+                    f,\n+                    \"\\\"misaligned pointer dereference: address must be a multiple of {{}} but is {{}}\\\", {:?}, {:?}\",\n+                    required, found\n+                )\n+            }\n             _ => write!(f, \"\\\"{}\\\"\", self.description()),\n         }\n     }\n@@ -1397,6 +1406,13 @@ impl<O: fmt::Debug> fmt::Debug for AssertKind<O> {\n             Overflow(BinOp::Shl, _, r) => {\n                 write!(f, \"attempt to shift left by `{:#?}`, which would overflow\", r)\n             }\n+            MisalignedPointerDereference { required, found } => {\n+                write!(\n+                    f,\n+                    \"misaligned pointer dereference: address must be a multiple of {:?} but is {:?}\",\n+                    required, found\n+                )\n+            }\n             _ => write!(f, \"{}\", self.description()),\n         }\n     }"}, {"sha": "413a7629b9a11bb82a4bf6b07b4d99e79f00ec3f", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -760,6 +760,7 @@ pub enum AssertKind<O> {\n     RemainderByZero(O),\n     ResumedAfterReturn(GeneratorKind),\n     ResumedAfterPanic(GeneratorKind),\n+    MisalignedPointerDereference { required: O, found: O },\n }\n \n #[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]"}, {"sha": "7aa446ae966c62ceed8c406a81e95634caa7a263", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -610,6 +610,10 @@ macro_rules! make_mir_visitor {\n                     ResumedAfterReturn(_) | ResumedAfterPanic(_) => {\n                         // Nothing to visit\n                     }\n+                    MisalignedPointerDereference { required, found } => {\n+                        self.visit_operand(required, location);\n+                        self.visit_operand(found, location);\n+                    }\n                 }\n             }\n "}, {"sha": "996416ef22ef06eedde35639c2fa3c15cca62226", "filename": "compiler/rustc_mir_transform/src/check_alignment.rs", "status": "added", "additions": 227, "deletions": 0, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_alignment.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -0,0 +1,227 @@\n+use crate::MirPass;\n+use rustc_hir::def_id::DefId;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::*;\n+use rustc_middle::mir::{\n+    interpret::{ConstValue, Scalar},\n+    visit::{PlaceContext, Visitor},\n+};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeAndMut};\n+use rustc_session::Session;\n+\n+pub struct CheckAlignment;\n+\n+impl<'tcx> MirPass<'tcx> for CheckAlignment {\n+    fn is_enabled(&self, sess: &Session) -> bool {\n+        sess.opts.debug_assertions\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let basic_blocks = body.basic_blocks.as_mut();\n+        let local_decls = &mut body.local_decls;\n+\n+        for block in (0..basic_blocks.len()).rev() {\n+            let block = block.into();\n+            for statement_index in (0..basic_blocks[block].statements.len()).rev() {\n+                let location = Location { block, statement_index };\n+                let statement = &basic_blocks[block].statements[statement_index];\n+                let source_info = statement.source_info;\n+\n+                let mut finder = PointerFinder {\n+                    local_decls,\n+                    tcx,\n+                    pointers: Vec::new(),\n+                    def_id: body.source.def_id(),\n+                };\n+                for (pointer, pointee_ty) in finder.find_pointers(statement) {\n+                    debug!(\"Inserting alignment check for {:?}\", pointer.ty(&*local_decls, tcx).ty);\n+\n+                    let new_block = split_block(basic_blocks, location);\n+                    insert_alignment_check(\n+                        tcx,\n+                        local_decls,\n+                        &mut basic_blocks[block],\n+                        pointer,\n+                        pointee_ty,\n+                        source_info,\n+                        new_block,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'a> PointerFinder<'tcx, 'a> {\n+    fn find_pointers(&mut self, statement: &Statement<'tcx>) -> Vec<(Place<'tcx>, Ty<'tcx>)> {\n+        self.pointers.clear();\n+        self.visit_statement(statement, Location::START);\n+        core::mem::take(&mut self.pointers)\n+    }\n+}\n+\n+struct PointerFinder<'tcx, 'a> {\n+    local_decls: &'a mut LocalDecls<'tcx>,\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    pointers: Vec<(Place<'tcx>, Ty<'tcx>)>,\n+}\n+\n+impl<'tcx, 'a> Visitor<'tcx> for PointerFinder<'tcx, 'a> {\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, _location: Location) {\n+        if let PlaceContext::NonUse(_) = context {\n+            return;\n+        }\n+        if !place.is_indirect() {\n+            return;\n+        }\n+\n+        let pointer = Place::from(place.local);\n+        let pointer_ty = pointer.ty(&*self.local_decls, self.tcx).ty;\n+\n+        // We only want to check unsafe pointers\n+        if !pointer_ty.is_unsafe_ptr() {\n+            trace!(\"Indirect, but not an unsafe ptr, not checking {:?}\", pointer_ty);\n+            return;\n+        }\n+\n+        let Some(pointee) = pointer_ty.builtin_deref(true) else {\n+            debug!(\"Indirect but no builtin deref: {:?}\", pointer_ty);\n+            return;\n+        };\n+        let mut pointee_ty = pointee.ty;\n+        if pointee_ty.is_array() || pointee_ty.is_slice() || pointee_ty.is_str() {\n+            pointee_ty = pointee_ty.sequence_element_type(self.tcx);\n+        }\n+\n+        if !pointee_ty.is_sized(self.tcx, self.tcx.param_env_reveal_all_normalized(self.def_id)) {\n+            debug!(\"Unsafe pointer, but unsized: {:?}\", pointer_ty);\n+            return;\n+        }\n+\n+        if [self.tcx.types.bool, self.tcx.types.i8, self.tcx.types.u8, self.tcx.types.str_]\n+            .contains(&pointee_ty)\n+        {\n+            debug!(\"Trivially aligned pointee type: {:?}\", pointer_ty);\n+            return;\n+        }\n+\n+        self.pointers.push((pointer, pointee_ty))\n+    }\n+}\n+\n+fn split_block(\n+    basic_blocks: &mut IndexVec<BasicBlock, BasicBlockData<'_>>,\n+    location: Location,\n+) -> BasicBlock {\n+    let block_data = &mut basic_blocks[location.block];\n+\n+    // Drain every statement after this one and move the current terminator to a new basic block\n+    let new_block = BasicBlockData {\n+        statements: block_data.statements.split_off(location.statement_index),\n+        terminator: block_data.terminator.take(),\n+        is_cleanup: block_data.is_cleanup,\n+    };\n+\n+    basic_blocks.push(new_block)\n+}\n+\n+fn insert_alignment_check<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    local_decls: &mut LocalDecls<'tcx>,\n+    block_data: &mut BasicBlockData<'tcx>,\n+    pointer: Place<'tcx>,\n+    pointee_ty: Ty<'tcx>,\n+    source_info: SourceInfo,\n+    new_block: BasicBlock,\n+) {\n+    // Cast the pointer to a *const ()\n+    let const_raw_ptr = tcx.mk_ptr(TypeAndMut { ty: tcx.types.unit, mutbl: Mutability::Not });\n+    let rvalue = Rvalue::Cast(CastKind::PtrToPtr, Operand::Copy(pointer), const_raw_ptr);\n+    let thin_ptr = local_decls.push(LocalDecl::with_source_info(const_raw_ptr, source_info)).into();\n+    block_data\n+        .statements\n+        .push(Statement { source_info, kind: StatementKind::Assign(Box::new((thin_ptr, rvalue))) });\n+\n+    // Transmute the pointer to a usize (equivalent to `ptr.addr()`)\n+    let rvalue = Rvalue::Cast(CastKind::Transmute, Operand::Copy(thin_ptr), tcx.types.usize);\n+    let addr = local_decls.push(LocalDecl::with_source_info(tcx.types.usize, source_info)).into();\n+    block_data\n+        .statements\n+        .push(Statement { source_info, kind: StatementKind::Assign(Box::new((addr, rvalue))) });\n+\n+    // Get the alignment of the pointee\n+    let alignment =\n+        local_decls.push(LocalDecl::with_source_info(tcx.types.usize, source_info)).into();\n+    let rvalue = Rvalue::NullaryOp(NullOp::AlignOf, pointee_ty);\n+    block_data.statements.push(Statement {\n+        source_info,\n+        kind: StatementKind::Assign(Box::new((alignment, rvalue))),\n+    });\n+\n+    // Subtract 1 from the alignment to get the alignment mask\n+    let alignment_mask =\n+        local_decls.push(LocalDecl::with_source_info(tcx.types.usize, source_info)).into();\n+    let one = Operand::Constant(Box::new(Constant {\n+        span: source_info.span,\n+        user_ty: None,\n+        literal: ConstantKind::Val(\n+            ConstValue::Scalar(Scalar::from_target_usize(1, &tcx)),\n+            tcx.types.usize,\n+        ),\n+    }));\n+    block_data.statements.push(Statement {\n+        source_info,\n+        kind: StatementKind::Assign(Box::new((\n+            alignment_mask,\n+            Rvalue::BinaryOp(BinOp::Sub, Box::new((Operand::Copy(alignment), one))),\n+        ))),\n+    });\n+\n+    // BitAnd the alignment mask with the pointer\n+    let alignment_bits =\n+        local_decls.push(LocalDecl::with_source_info(tcx.types.usize, source_info)).into();\n+    block_data.statements.push(Statement {\n+        source_info,\n+        kind: StatementKind::Assign(Box::new((\n+            alignment_bits,\n+            Rvalue::BinaryOp(\n+                BinOp::BitAnd,\n+                Box::new((Operand::Copy(addr), Operand::Copy(alignment_mask))),\n+            ),\n+        ))),\n+    });\n+\n+    // Check if the alignment bits are all zero\n+    let is_ok = local_decls.push(LocalDecl::with_source_info(tcx.types.bool, source_info)).into();\n+    let zero = Operand::Constant(Box::new(Constant {\n+        span: source_info.span,\n+        user_ty: None,\n+        literal: ConstantKind::Val(\n+            ConstValue::Scalar(Scalar::from_target_usize(0, &tcx)),\n+            tcx.types.usize,\n+        ),\n+    }));\n+    block_data.statements.push(Statement {\n+        source_info,\n+        kind: StatementKind::Assign(Box::new((\n+            is_ok,\n+            Rvalue::BinaryOp(BinOp::Eq, Box::new((Operand::Copy(alignment_bits), zero.clone()))),\n+        ))),\n+    });\n+\n+    // Set this block's terminator to our assert, continuing to new_block if we pass\n+    block_data.terminator = Some(Terminator {\n+        source_info,\n+        kind: TerminatorKind::Assert {\n+            cond: Operand::Copy(is_ok),\n+            expected: true,\n+            target: new_block,\n+            msg: AssertKind::MisalignedPointerDereference {\n+                required: Operand::Copy(alignment),\n+                found: Operand::Copy(addr),\n+            },\n+            cleanup: None,\n+        },\n+    });\n+}"}, {"sha": "b52de4b72c9e8b0a462d551440e81a2e692a2264", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -90,6 +90,7 @@ mod separate_const_switch;\n mod shim;\n mod ssa;\n // This pass is public to allow external drivers to perform MIR cleanup\n+mod check_alignment;\n pub mod simplify;\n mod simplify_branches;\n mod simplify_comparison_integral;\n@@ -545,6 +546,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         tcx,\n         body,\n         &[\n+            &check_alignment::CheckAlignment,\n             &reveal_all::RevealAll, // has to be done before inlining, since inlined code is in RevealAll mode.\n             &lower_slice_len::LowerSliceLenCalls, // has to be done before inlining, otherwise actual call will be almost always inlined. Also simple, so can just do first\n             &unreachable_prop::UnreachablePropagation,"}, {"sha": "d5dc1d0b315ec68fe2b8a82ff20509fd00b3ae3d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1069,6 +1069,7 @@ symbols! {\n         panic_implementation,\n         panic_info,\n         panic_location,\n+        panic_misaligned_pointer_dereference,\n         panic_nounwind,\n         panic_runtime,\n         panic_str,"}, {"sha": "efeb726ab8eb86e767954ba8983aa69ff5f6a7d7", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -162,6 +162,20 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {len} but the index is {index}\")\n }\n \n+#[cold]\n+#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n+#[track_caller]\n+#[cfg_attr(not(bootstrap), lang = \"panic_misaligned_pointer_dereference\")] // needed by codegen for panic on misaligned pointer deref\n+fn panic_misaligned_pointer_dereference(required: usize, found: usize) -> ! {\n+    if cfg!(feature = \"panic_immediate_abort\") {\n+        super::intrinsics::abort()\n+    }\n+\n+    panic!(\n+        \"misaligned pointer dereference: address must be a multiple of {required:#x} but is {found:#x}\"\n+    )\n+}\n+\n /// Panic because we cannot unwind out of a function.\n ///\n /// This function is called directly by the codegen backend, and must not have"}, {"sha": "acc97c4b8a0a4d4984bd883b58ad4497021f9f0b", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -220,6 +220,34 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                     },\n                 )?;\n             }\n+            MisalignedPointerDereference { required, found } => {\n+                // Forward to `panic_misaligned_pointer_dereference` lang item.\n+\n+                // First arg: required.\n+                let required = this.read_scalar(&this.eval_operand(required, None)?)?;\n+                // Second arg: found.\n+                let found = this.read_scalar(&this.eval_operand(found, None)?)?;\n+\n+                // Call the lang item.\n+                let panic_misaligned_pointer_dereference =\n+                    this.tcx.lang_items().panic_misaligned_pointer_dereference_fn().unwrap();\n+                let panic_misaligned_pointer_dereference =\n+                    ty::Instance::mono(this.tcx.tcx, panic_misaligned_pointer_dereference);\n+                this.call_function(\n+                    panic_misaligned_pointer_dereference,\n+                    Abi::Rust,\n+                    &[required.into(), found.into()],\n+                    None,\n+                    StackPopCleanup::Goto {\n+                        ret: None,\n+                        unwind: match unwind {\n+                            Some(cleanup) => StackPopUnwind::Cleanup(cleanup),\n+                            None => StackPopUnwind::Skip,\n+                        },\n+                    },\n+                )?;\n+            }\n+\n             _ => {\n                 // Forward everything else to `panic` lang item.\n                 this.start_panic("}, {"sha": "6bb95ae4bcb337bf63719ebf08aaadad6862c26a", "filename": "src/tools/miri/tests/fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Falignment.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,4 +1,5 @@\n //@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@compile-flags: -Cdebug-assertions=no\n \n fn main() {\n     // No retry needed, this fails reliably."}, {"sha": "29976836b0ba6a8d97332241a9cd90579c30a92c", "filename": "src/tools/miri/tests/fail/unaligned_pointers/atomic_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-symbolic-alignment-check\n+//@compile-flags: -Zmiri-symbolic-alignment-check -Cdebug-assertions=no\n #![feature(core_intrinsics)]\n \n fn main() {"}, {"sha": "8a40e527f0ebb570882a9eaf76708f8100059509", "filename": "src/tools/miri/tests/fail/unaligned_pointers/drop_in_place.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdrop_in_place.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,3 +1,5 @@\n+//@compile-flags: -Cdebug-assertions=no\n+\n #[repr(transparent)]\n struct HasDrop(u8);\n "}, {"sha": "6d31ded75c6909112c15433e99ddfca648d5ef30", "filename": "src/tools/miri/tests/fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,5 +1,5 @@\n // should find the bug even without validation and stacked borrows, but gets masked by optimizations\n-//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Zmir-opt-level=0\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Zmir-opt-level=0 -Cdebug-assertions=no\n \n #[repr(align(256))]\n #[derive(Debug)]"}, {"sha": "c1041ee32a48816c5e9d7d3c492882765e2ed2a0", "filename": "src/tools/miri/tests/fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,4 +1,4 @@\n-//@compile-flags: -Zmiri-symbolic-alignment-check -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-symbolic-alignment-check -Zmiri-permissive-provenance -Cdebug-assertions=no\n // With the symbolic alignment check, even with intptrcast and without\n // validation, we want to be *sure* to catch bugs that arise from pointers being\n // insufficiently aligned. The only way to achieve that is not not let programs"}, {"sha": "4a8cf405ae2956f4dbc570a54af9727a11d9339b", "filename": "src/tools/miri/tests/fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation/SB\n-//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Cdebug-assertions=no\n \n #![allow(dead_code, unused_variables)]\n "}, {"sha": "921bcd6ce242b125a035d3d56f09da65cd73d091", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Cdebug-assertions=no\n \n fn main() {\n     // Try many times as this might work by chance."}, {"sha": "8f597659f73c73478e56a453e5999d77e39d6712", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Cdebug-assertions=no\n \n fn main() {\n     // No retry needed, this fails reliably."}, {"sha": "a7fcf30c6ea0a8ee1a722b0c4d4b3dc644b069f1", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Cdebug-assertions=no\n \n fn main() {\n     // Try many times as this might work by chance."}, {"sha": "b8b01e113c9609e62434e52e1825018daf777c5b", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Cdebug-assertions=no\n \n fn main() {\n     // Make sure we notice when a u16 is loaded at offset 1 into a u8 allocation."}, {"sha": "b414b905472e494845a7df8fa3a9869a79c2225e", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Cdebug-assertions=no\n use std::ptr;\n \n fn main() {"}, {"sha": "04dbe3fd8d4978ee91b3d5b5d9a2a4fd2471dd3e", "filename": "src/tools/miri/tests/fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,6 +1,6 @@\n // This should fail even without validation\n // Some optimizations remove ZST accesses, thus masking this UB.\n-//@compile-flags: -Zmir-opt-level=0 -Zmiri-disable-validation\n+//@compile-flags: -Zmir-opt-level=0 -Zmiri-disable-validation -Cdebug-assertions=no\n \n fn main() {\n     // Try many times as this might work by chance."}, {"sha": "68aa19a88db0997832c3d7c3a6fbd085d2a83a9a", "filename": "src/tools/miri/tests/panic/alignment-assertion.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -0,0 +1,9 @@\n+//@compile-flags: -Zmiri-disable-alignment-check -Cdebug-assertions=yes\n+\n+fn main() {\n+    let mut x = [0u32; 2];\n+    let ptr: *mut u8 = x.as_mut_ptr().cast::<u8>();\n+    unsafe {\n+        *(ptr.add(1).cast::<u32>()) = 42;\n+    }\n+}"}, {"sha": "26cf51b0cd2e3d45a00b4b5a4b10aeb390dd32bb", "filename": "src/tools/miri/tests/panic/alignment-assertion.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpanic%2Falignment-assertion.stderr?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -0,0 +1,2 @@\n+thread 'main' panicked at 'misaligned pointer dereference: address must be a multiple of 0x4 but is $HEX', $DIR/alignment-assertion.rs:LL:CC\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "e8c0e027673c2d96e6c0a6bbbb552823ff7666b0", "filename": "src/tools/miri/tests/pass/disable-alignment-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdisable-alignment-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdisable-alignment-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdisable-alignment-check.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,6 +1,6 @@\n //@revisions: stack tree\n //@[tree]compile-flags: -Zmiri-tree-borrows\n-//@compile-flags: -Zmiri-disable-alignment-check\n+//@compile-flags: -Zmiri-disable-alignment-check -Cdebug-assertions=no\n \n fn main() {\n     let mut x = [0u8; 20];"}, {"sha": "41aa9a46103edc7b167595cb133ecfe7265b3c96", "filename": "tests/assembly/static-relocation-model.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fassembly%2Fstatic-relocation-model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fassembly%2Fstatic-relocation-model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Fstatic-relocation-model.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -6,6 +6,7 @@\n // [A64] needs-llvm-components: aarch64\n // [ppc64le] compile-flags: --target powerpc64le-unknown-linux-gnu -Crelocation-model=static\n // [ppc64le] needs-llvm-components: powerpc\n+// ignore-debug: alignment checks insert panics that we don't have a lang item for\n \n #![feature(no_core, lang_items)]\n #![no_core]"}, {"sha": "19e7e8b1f6e17fc5a721bba38a9bb4d9110a6108", "filename": "tests/codegen/issues/issue-37945.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fcodegen%2Fissues%2Fissue-37945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fcodegen%2Fissues%2Fissue-37945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fissues%2Fissue-37945.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -4,6 +4,7 @@\n // ignore-emscripten\n // ignore-gnux32\n // ignore 32-bit platforms (LLVM has a bug with them)\n+// ignore-debug\n \n // Check that LLVM understands that `Iter` pointer is not null. Issue #37945.\n "}, {"sha": "30e5cd0584d2719bbf0b30f8d1025083a9d8dbc3", "filename": "tests/codegen/virtual-function-elimination.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fcodegen%2Fvirtual-function-elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fcodegen%2Fvirtual-function-elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvirtual-function-elimination.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: -Zvirtual-function-elimination -Clto -O -Csymbol-mangling-version=v0\n // ignore-32bit\n+// ignore-debug\n \n // CHECK: @vtable.0 = {{.*}}, !type ![[TYPE0:[0-9]+]], !vcall_visibility ![[VCALL_VIS0:[0-9]+]]\n // CHECK: @vtable.1 = {{.*}}, !type ![[TYPE1:[0-9]+]], !vcall_visibility ![[VCALL_VIS0:[0-9]+]]"}, {"sha": "a4f0ad465e2180ca9004ce42813ea263e26ea23f", "filename": "tests/mir-opt/inline/inline_into_box_place.main.Inline.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.diff?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -8,10 +8,10 @@\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline_into_box_place.rs:+1:9: +1:11\n       }\n-+     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline_into_box_place.rs:7:38: 7:48\n++     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline_into_box_place.rs:8:38: 8:48\n +         let mut _3: alloc::raw_vec::RawVec<u32>; // in scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +     }\n-+     scope 3 (inlined Box::<Vec<u32>>::new) { // at $DIR/inline_into_box_place.rs:7:29: 7:49\n++     scope 3 (inlined Box::<Vec<u32>>::new) { // at $DIR/inline_into_box_place.rs:8:29: 8:49\n +         debug x => _2;                   // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n +         let mut _4: usize;               // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n +         let mut _5: usize;               // in scope 3 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n@@ -28,7 +28,7 @@\n +         StorageLive(_3);                 // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n +         _3 = const _;                    // scope 2 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n--                                          // + span: $DIR/inline_into_box_place.rs:7:38: 7:46\n+-                                          // + span: $DIR/inline_into_box_place.rs:8:38: 8:46\n -                                          // + user_ty: UserType(2)\n -                                          // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }\n +                                          // + span: $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n@@ -47,7 +47,7 @@\n       bb1: {\n -         _1 = Box::<Vec<u32>>::new(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at $DIR/inline_into_box_place.rs:+1:29: +1:49\n -                                          // mir::Constant\n--                                          // + span: $DIR/inline_into_box_place.rs:7:29: 7:37\n+-                                          // + span: $DIR/inline_into_box_place.rs:8:29: 8:37\n -                                          // + user_ty: UserType(1)\n -                                          // + literal: Const { ty: fn(Vec<u32>) -> Box<Vec<u32>> {Box::<Vec<u32>>::new}, val: Value(<ZST>) }\n +         StorageDead(_1);                 // scope 0 at $DIR/inline_into_box_place.rs:+2:1: +2:2"}, {"sha": "02823e4e1b7456a72421cd326389ca0c379a2c22", "filename": "tests/mir-opt/inline/inline_into_box_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Finline_into_box_place.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -1,5 +1,6 @@\n // ignore-endian-big\n // ignore-wasm32-bare compiled with panic=abort by default\n+// ignore-debug MIR alignment checks in std alter the diff, breaking the test\n // compile-flags: -Z mir-opt-level=4\n \n // EMIT_MIR inline_into_box_place.main.Inline.diff"}, {"sha": "536157754867c47d5abcbd8e37bc6b08667db133", "filename": "tests/run-make/fmt-write-bloat/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Frun-make%2Ffmt-write-bloat%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Frun-make%2Ffmt-write-bloat%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Ffmt-write-bloat%2FMakefile?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -11,11 +11,11 @@ else\n \n NM = nm\n \n-PANIC_SYMS = panic_bounds_check pad_integral Display Debug\n+PANIC_SYMS = panic_bounds_check Debug\n \n # Allow for debug_assert!() in debug builds of std.\n ifdef NO_DEBUG_ASSERTIONS\n-PANIC_SYMS += panicking panic_fmt\n+PANIC_SYMS += panicking panic_fmt pad_integral Display Debug\n endif\n \n all: main.rs"}, {"sha": "68a5384b30d78050da349edeacff67f90667ebc5", "filename": "tests/ui/mir/mir_alignment_check.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fui%2Fmir%2Fmir_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fui%2Fmir%2Fmir_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Fmir_alignment_check.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -0,0 +1,12 @@\n+// run-fail\n+// ignore-wasm32-bare: No panic messages\n+// compile-flags: -C debug-assertions\n+// error-pattern: misaligned pointer dereference: address must be a multiple of 0x4 but is\n+\n+fn main() {\n+    let mut x = [0u32; 2];\n+    let ptr: *mut u8 = x.as_mut_ptr().cast::<u8>();\n+    unsafe {\n+        *(ptr.add(1).cast::<u32>()) = 42;\n+    }\n+}"}, {"sha": "0f05f916cb93968282da94ccc7257c271f9e6ca6", "filename": "tests/ui/process/signal-exit-status.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fui%2Fprocess%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22a7a19f9333bc1fcba97ce444a3515cb5fb33e6/tests%2Fui%2Fprocess%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprocess%2Fsignal-exit-status.rs?ref=22a7a19f9333bc1fcba97ce444a3515cb5fb33e6", "patch": "@@ -4,14 +4,16 @@\n // ignore-windows\n // ignore-fuchsia code returned as ZX_TASK_RETCODE_EXCEPTION_KILL, FIXME (#58590)\n \n+#![feature(core_intrinsics)]\n+\n use std::env;\n use std::process::Command;\n \n pub fn main() {\n     let args: Vec<String> = env::args().collect();\n     if args.len() >= 2 && args[1] == \"signal\" {\n-        // Raise a segfault.\n-        unsafe { *(1 as *mut isize) = 0; }\n+        // Raise an aborting signal without UB\n+        core::intrinsics::abort();\n     } else {\n         let status = Command::new(&args[0]).arg(\"signal\").status().unwrap();\n         assert!(status.code().is_none());"}]}