{"sha": "c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxZWE3MmQ4OGZiOTczOWFlODJhNmU1YTJmMGJmOWJiZjk4Mzg1NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T03:09:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-01T03:09:36Z"}, "message": "auto merge of #6113 : brson/rust/task-drop, r=graydon", "tree": {"sha": "894737eb63086f90a147ccd4036c1462d1f9a36e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/894737eb63086f90a147ccd4036c1462d1f9a36e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "html_url": "https://github.com/rust-lang/rust/commit/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb527bff09e057ff6eeefe893c44e19b9d29a920", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb527bff09e057ff6eeefe893c44e19b9d29a920", "html_url": "https://github.com/rust-lang/rust/commit/cb527bff09e057ff6eeefe893c44e19b9d29a920"}, {"sha": "c1fdace588034ae76f7ccb920ddadd9c2722a5cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1fdace588034ae76f7ccb920ddadd9c2722a5cd", "html_url": "https://github.com/rust-lang/rust/commit/c1fdace588034ae76f7ccb920ddadd9c2722a5cd"}], "stats": {"total": 77, "additions": 21, "deletions": 56}, "files": [{"sha": "2a4817727f4cfdf5ace03d220ea8a20fc026c131", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 21, "deletions": 56, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=c1ea72d88fb9739ae82a6e5a2f0bf9bbf9838558", "patch": "@@ -42,6 +42,7 @@ use result;\n use task::rt::{task_id, sched_id, rust_task};\n use util;\n use util::replace;\n+use unstable::finally::Finally;\n \n #[cfg(test)] use comm::SharedChan;\n \n@@ -591,76 +592,40 @@ pub fn get_scheduler() -> Scheduler {\n  * ~~~\n  */\n pub unsafe fn unkillable<U>(f: &fn() -> U) -> U {\n-    struct AllowFailure {\n-        t: *rust_task,\n-        drop {\n-            unsafe {\n-                rt::rust_task_allow_kill(self.t);\n-            }\n-        }\n-    }\n-\n-    fn AllowFailure(t: *rust_task) -> AllowFailure{\n-        AllowFailure {\n-            t: t\n-        }\n-    }\n-\n     let t = rt::rust_get_task();\n-    let _allow_failure = AllowFailure(t);\n-    rt::rust_task_inhibit_kill(t);\n-    f()\n+    do (|| {\n+        rt::rust_task_inhibit_kill(t);\n+        f()\n+    }).finally {\n+        rt::rust_task_allow_kill(t);\n+    }\n }\n \n /// The inverse of unkillable. Only ever to be used nested in unkillable().\n pub unsafe fn rekillable<U>(f: &fn() -> U) -> U {\n-    struct DisallowFailure {\n-        t: *rust_task,\n-        drop {\n-            unsafe {\n-                rt::rust_task_inhibit_kill(self.t);\n-            }\n-        }\n-    }\n-\n-    fn DisallowFailure(t: *rust_task) -> DisallowFailure {\n-        DisallowFailure {\n-            t: t\n-        }\n-    }\n-\n     let t = rt::rust_get_task();\n-    let _allow_failure = DisallowFailure(t);\n-    rt::rust_task_allow_kill(t);\n-    f()\n+    do (|| {\n+        rt::rust_task_allow_kill(t);\n+        f()\n+    }).finally {\n+        rt::rust_task_inhibit_kill(t);\n+    }\n }\n \n /**\n  * A stronger version of unkillable that also inhibits scheduling operations.\n  * For use with exclusive ARCs, which use pthread mutexes directly.\n  */\n pub unsafe fn atomically<U>(f: &fn() -> U) -> U {\n-    struct DeferInterrupts {\n-        t: *rust_task,\n-        drop {\n-            unsafe {\n-                rt::rust_task_allow_yield(self.t);\n-                rt::rust_task_allow_kill(self.t);\n-            }\n-        }\n-    }\n-\n-    fn DeferInterrupts(t: *rust_task) -> DeferInterrupts {\n-        DeferInterrupts {\n-            t: t\n-        }\n-    }\n-\n     let t = rt::rust_get_task();\n-    let _interrupts = DeferInterrupts(t);\n-    rt::rust_task_inhibit_kill(t);\n-    rt::rust_task_inhibit_yield(t);\n-    f()\n+    do (|| {\n+        rt::rust_task_inhibit_kill(t);\n+        rt::rust_task_inhibit_yield(t);\n+        f()\n+    }).finally {\n+        rt::rust_task_allow_yield(t);\n+        rt::rust_task_allow_kill(t);\n+    }\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]"}]}