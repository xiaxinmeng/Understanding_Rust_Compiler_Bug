{"sha": "8aea0ec511d141b5c53d419960c688b13bb6c061", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZWEwZWM1MTFkMTQxYjVjNTNkNDE5OTYwYzY4OGIxM2JiNmMwNjE=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:57:14Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-24T22:57:14Z"}, "message": "vscode: migrate syntax_tree to rust-analyzer-api.ts", "tree": {"sha": "37c2a1098d06c2349682ea666a9cdd7dde06eda0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c2a1098d06c2349682ea666a9cdd7dde06eda0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aea0ec511d141b5c53d419960c688b13bb6c061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aea0ec511d141b5c53d419960c688b13bb6c061", "html_url": "https://github.com/rust-lang/rust/commit/8aea0ec511d141b5c53d419960c688b13bb6c061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aea0ec511d141b5c53d419960c688b13bb6c061/comments", "author": null, "committer": null, "parents": [{"sha": "9ea63d5a86b8217c25f0db49a535105b345ceae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ea63d5a86b8217c25f0db49a535105b345ceae1", "html_url": "https://github.com/rust-lang/rust/commit/9ea63d5a86b8217c25f0db49a535105b345ceae1"}], "stats": {"total": 27, "additions": 7, "deletions": 20}, "files": [{"sha": "7218bfb90082f5e7ae118a7e76b3ed9bb6dfb8e1", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8aea0ec511d141b5c53d419960c688b13bb6c061/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/8aea0ec511d141b5c53d419960c688b13bb6c061/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=8aea0ec511d141b5c53d419960c688b13bb6c061", "patch": "@@ -1,5 +1,5 @@\n import * as vscode from 'vscode';\n-import * as lc from 'vscode-languageclient';\n+import * as ra from '../rust-analyzer-api';\n \n import { Ctx, Cmd } from '../ctx';\n \n@@ -61,13 +61,8 @@ function afterLs(f: () => void) {\n     setTimeout(f, 10);\n }\n \n-interface SyntaxTreeParams {\n-    textDocument: lc.TextDocumentIdentifier;\n-    range?: lc.Range;\n-}\n \n-class TextDocumentContentProvider\n-    implements vscode.TextDocumentContentProvider {\n+class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n     uri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n \n@@ -79,23 +74,15 @@ class TextDocumentContentProvider\n         const client = this.ctx.client;\n         if (!editor || !client) return '';\n \n-        let range: lc.Range | undefined;\n-\n         // When the range based query is enabled we take the range of the selection\n-        if (uri.query === 'range=true') {\n-            range = editor.selection.isEmpty\n-                ? undefined\n-                : client.code2ProtocolConverter.asRange(editor.selection);\n-        }\n+        const range = uri.query === 'range=true' && !editor.selection.isEmpty\n+            ? client.code2ProtocolConverter.asRange(editor.selection)\n+            : null;\n \n-        const request: SyntaxTreeParams = {\n+        return client.sendRequest(ra.syntaxTree, {\n             textDocument: { uri: editor.document.uri.toString() },\n             range,\n-        };\n-        return client.sendRequest<string>(\n-            'rust-analyzer/syntaxTree',\n-            request,\n-        );\n+        });\n     }\n \n     get onDidChange(): vscode.Event<vscode.Uri> {"}]}