{"sha": "3947591ee82702f124af9248463036155b83b907", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5NDc1OTFlZTgyNzAyZjEyNGFmOTI0ODQ2MzAzNjE1NWI4M2I5MDc=", "commit": {"author": {"name": "Avi Dessauer", "email": "avi.the.coder@gmail.com", "date": "2020-06-30T23:05:14Z"}, "committer": {"name": "Jacob Hughes", "email": "j@jacobhughes.me", "date": "2020-09-23T01:54:16Z"}, "message": "Remove now unneeded check_stability argument", "tree": {"sha": "df5e6342e3cc3f66d3edb657ed4b8e5d5d872fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5e6342e3cc3f66d3edb657ed4b8e5d5d872fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3947591ee82702f124af9248463036155b83b907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3947591ee82702f124af9248463036155b83b907", "html_url": "https://github.com/rust-lang/rust/commit/3947591ee82702f124af9248463036155b83b907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3947591ee82702f124af9248463036155b83b907/comments", "author": {"login": "Avi-D-coder", "id": 29133776, "node_id": "MDQ6VXNlcjI5MTMzNzc2", "avatar_url": "https://avatars.githubusercontent.com/u/29133776?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Avi-D-coder", "html_url": "https://github.com/Avi-D-coder", "followers_url": "https://api.github.com/users/Avi-D-coder/followers", "following_url": "https://api.github.com/users/Avi-D-coder/following{/other_user}", "gists_url": "https://api.github.com/users/Avi-D-coder/gists{/gist_id}", "starred_url": "https://api.github.com/users/Avi-D-coder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Avi-D-coder/subscriptions", "organizations_url": "https://api.github.com/users/Avi-D-coder/orgs", "repos_url": "https://api.github.com/users/Avi-D-coder/repos", "events_url": "https://api.github.com/users/Avi-D-coder/events{/privacy}", "received_events_url": "https://api.github.com/users/Avi-D-coder/received_events", "type": "User", "site_admin": false}, "committer": {"login": "exrook", "id": 534850, "node_id": "MDQ6VXNlcjUzNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/534850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exrook", "html_url": "https://github.com/exrook", "followers_url": "https://api.github.com/users/exrook/followers", "following_url": "https://api.github.com/users/exrook/following{/other_user}", "gists_url": "https://api.github.com/users/exrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/exrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exrook/subscriptions", "organizations_url": "https://api.github.com/users/exrook/orgs", "repos_url": "https://api.github.com/users/exrook/repos", "events_url": "https://api.github.com/users/exrook/events{/privacy}", "received_events_url": "https://api.github.com/users/exrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1892f1a798f8b0c24136d0be65fa4cc23e0ff74", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1892f1a798f8b0c24136d0be65fa4cc23e0ff74", "html_url": "https://github.com/rust-lang/rust/commit/a1892f1a798f8b0c24136d0be65fa4cc23e0ff74"}], "stats": {"total": 26, "additions": 9, "deletions": 17}, "files": [{"sha": "0fb73db83e8c54aeca72a4f7a1c66c04f31ffe19", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3947591ee82702f124af9248463036155b83b907/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3947591ee82702f124af9248463036155b83b907/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=3947591ee82702f124af9248463036155b83b907", "patch": "@@ -293,15 +293,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// If `id` is `Some(_)`, this function will also check if the item at `def_id` has been\n     /// deprecated. If the item is indeed deprecated, we will emit a deprecation lint attached to\n     /// `id`.\n-    pub fn eval_stability(\n-        self,\n-        def_id: DefId,\n-        id: Option<HirId>,\n-        span: Span,\n-        check_deprecation: bool,\n-    ) -> EvalResult {\n+    pub fn eval_stability(self, def_id: DefId, id: Option<HirId>, span: Span) -> EvalResult {\n         // Deprecated attributes apply in-crate and cross-crate.\n-        if let (Some(id), true) = (id, check_deprecation) {\n+        if let Some(id) = id {\n             if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n                 let parent_def_id = self.hir().local_def_id(self.hir().get_parent_item(id));\n                 let skip = self\n@@ -398,10 +392,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not\n     /// exist, emits an error.\n     ///\n-    /// Additionally, this function will also check if the item is deprecated. If so, and `id` is\n-    /// not `None`, a deprecated lint attached to `id` will be emitted.\n+    /// This function will also check if the item is deprecated.\n+    /// If so, and `id` is not `None`, a deprecated lint attached to `id` will be emitted.\n     pub fn check_stability(self, def_id: DefId, id: Option<HirId>, span: Span) {\n-        self.check_stability_internal(def_id, id, span, true, |span, def_id| {\n+        self.check_stability_internal(def_id, id, span, |span, def_id| {\n             // The API could be uncallable for other reasons, for example when a private module\n             // was referenced.\n             self.sess.delay_span_bug(span, &format!(\"encountered unmarked API: {:?}\", def_id));\n@@ -413,22 +407,21 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// If the item defined by `def_id` is unstable and the corresponding `#![feature]` does not\n     /// exist, emits an error.\n     ///\n-    /// Additionally when `inherit_dep` is `true`, this function will also check if the item is deprecated. If so, and `id` is\n-    /// not `None`, a deprecated lint attached to `id` will be emitted.\n+    /// This function will also check if the item is deprecated.\n+    /// If so, and `id` is not `None`, a deprecated lint attached to `id` will be emitted.\n     pub fn check_stability_internal(\n         self,\n         def_id: DefId,\n         id: Option<HirId>,\n         span: Span,\n-        check_deprecation: bool,\n         unmarked: impl FnOnce(Span, DefId) -> (),\n     ) {\n         let soft_handler = |lint, span, msg: &_| {\n             self.struct_span_lint_hir(lint, id.unwrap_or(hir::CRATE_HIR_ID), span, |lint| {\n                 lint.build(msg).emit()\n             })\n         };\n-        match self.eval_stability(def_id, id, span, check_deprecation) {\n+        match self.eval_stability(def_id, id, span) {\n             EvalResult::Allow => {}\n             EvalResult::Deny { feature, reason, issue, is_soft } => {\n                 report_unstable(self.sess, feature, reason, issue, is_soft, span, soft_handler)"}, {"sha": "ad4c28928fc63d797b42c4fa89483335c03c522c", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3947591ee82702f124af9248463036155b83b907/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3947591ee82702f124af9248463036155b83b907/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=3947591ee82702f124af9248463036155b83b907", "patch": "@@ -366,7 +366,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             param.def_id,\n                             Some(arg.id()),\n                             arg.span(),\n-                            false,\n                             |_, _| (),\n                         )\n                     }"}, {"sha": "8a62031ec887caed2885f04f843ec053dfcc8701", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3947591ee82702f124af9248463036155b83b907/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3947591ee82702f124af9248463036155b83b907/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=3947591ee82702f124af9248463036155b83b907", "patch": "@@ -1227,7 +1227,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n         if let Some(uc) = unstable_candidates {\n             applicable_candidates.retain(|&(p, _)| {\n                 if let stability::EvalResult::Deny { feature, .. } =\n-                    self.tcx.eval_stability(p.item.def_id, None, self.span, true)\n+                    self.tcx.eval_stability(p.item.def_id, None, self.span)\n                 {\n                     uc.push((p, feature));\n                     return false;"}]}