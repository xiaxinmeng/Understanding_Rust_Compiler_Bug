{"sha": "7f41cf4cef551d887de539842d11945b6bfaa8b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNDFjZjRjZWY1NTFkODg3ZGU1Mzk4NDJkMTE5NDViNmJmYWE4YjY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-26T23:41:32Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T20:12:46Z"}, "message": "Check associated opaque types don't use unconstrained lifetimes", "tree": {"sha": "2f5cda4c006088e01d4563cf9e69b63fbcfbc1c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f5cda4c006088e01d4563cf9e69b63fbcfbc1c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f41cf4cef551d887de539842d11945b6bfaa8b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f41cf4cef551d887de539842d11945b6bfaa8b6", "html_url": "https://github.com/rust-lang/rust/commit/7f41cf4cef551d887de539842d11945b6bfaa8b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f41cf4cef551d887de539842d11945b6bfaa8b6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "033bd8c7af79d362b4e861543b63991e7300948f", "url": "https://api.github.com/repos/rust-lang/rust/commits/033bd8c7af79d362b4e861543b63991e7300948f", "html_url": "https://github.com/rust-lang/rust/commit/033bd8c7af79d362b4e861543b63991e7300948f"}], "stats": {"total": 71, "additions": 57, "deletions": 14}, "files": [{"sha": "0b4b8a49054fafa4de7162cf023ea20ce445df97", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=7f41cf4cef551d887de539842d11945b6bfaa8b6", "patch": "@@ -120,11 +120,23 @@ fn enforce_impl_params_are_constrained(\n     let lifetimes_in_associated_types: FxHashSet<_> = impl_item_refs\n         .iter()\n         .map(|item_ref| tcx.hir().local_def_id(item_ref.id.hir_id))\n-        .filter(|&def_id| {\n+        .flat_map(|def_id| {\n             let item = tcx.associated_item(def_id);\n-            item.kind == ty::AssocKind::Type && item.defaultness.has_value()\n+            match item.kind {\n+                ty::AssocKind::Type => {\n+                    if item.defaultness.has_value() {\n+                        cgp::parameters_for(&tcx.type_of(def_id), true)\n+                    } else {\n+                        Vec::new()\n+                    }\n+                }\n+                ty::AssocKind::OpaqueTy => {\n+                    let predicates = tcx.predicates_of(def_id).instantiate_identity(tcx);\n+                    cgp::parameters_for(&predicates, true)\n+                }\n+                ty::AssocKind::Method | ty::AssocKind::Const => Vec::new(),\n+            }\n         })\n-        .flat_map(|def_id| cgp::parameters_for(&tcx.type_of(def_id), true))\n         .collect();\n \n     for param in &impl_generics.params {"}, {"sha": "2907c21c6203c5372564697326236eb644e36763", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-const.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-const.rs?ref=7f41cf4cef551d887de539842d11945b6bfaa8b6", "patch": "@@ -6,7 +6,7 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-trait UnwrapItemsExt<const C: usize> {\n+trait UnwrapItemsExt<'a, const C: usize> {\n     type Iter;\n     fn unwrap_items(self) -> Self::Iter;\n }\n@@ -18,18 +18,16 @@ trait MyTrait<'a, const C: usize> {\n     const MY_CONST: usize;\n }\n \n-impl<'a, const C: usize> MyTrait<'a, {C}> for MyStruct<{C}> {\n+impl<'a, const C: usize> MyTrait<'a, { C }> for MyStruct<{ C }> {\n     type MyItem = u8;\n     const MY_CONST: usize = C;\n }\n \n-impl<'a, I, const C: usize> UnwrapItemsExt<{C}> for I\n-where\n-{\n-    type Iter = impl MyTrait<'a, {C}>;\n+impl<'a, I, const C: usize> UnwrapItemsExt<'a, { C }> for I {\n+    type Iter = impl MyTrait<'a, { C }>;\n \n     fn unwrap_items(self) -> Self::Iter {\n-        MyStruct::<{C}> {}\n+        MyStruct::<{ C }> {}\n     }\n }\n "}, {"sha": "3f34b00ec77e1b139d044e01e4f5118da263f1b8", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.rs?ref=7f41cf4cef551d887de539842d11945b6bfaa8b6", "patch": "@@ -0,0 +1,26 @@\n+// Tests that we don't allow unconstrained lifetime parameters in impls when\n+// the lifetime is used in an associated opaque type.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait UnwrapItemsExt {\n+    type Iter;\n+    fn unwrap_items(self) -> Self::Iter;\n+}\n+\n+struct MyStruct {}\n+\n+trait MyTrait<'a> {}\n+\n+impl<'a> MyTrait<'a> for MyStruct {}\n+\n+impl<'a, I> UnwrapItemsExt for I {\n+    //~^ ERROR the lifetime parameter `'a` is not constrained\n+    type Iter = impl MyTrait<'a>;\n+\n+    fn unwrap_items(self) -> Self::Iter {\n+        MyStruct {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e594dc577b1cd1378ce73a76b2bdaed35921cf75", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime-unconstrained.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime-unconstrained.stderr?ref=7f41cf4cef551d887de539842d11945b6bfaa8b6", "patch": "@@ -0,0 +1,9 @@\n+error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n+  --> $DIR/assoc-type-lifetime-unconstrained.rs:17:6\n+   |\n+LL | impl<'a, I> UnwrapItemsExt for I {\n+   |      ^^ unconstrained lifetime parameter\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0207`."}, {"sha": "39f785d8cc55d5d6e58d6a306112e5fe5c108ede", "filename": "src/test/ui/type-alias-impl-trait/assoc-type-lifetime.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f41cf4cef551d887de539842d11945b6bfaa8b6/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassoc-type-lifetime.rs?ref=7f41cf4cef551d887de539842d11945b6bfaa8b6", "patch": "@@ -4,7 +4,7 @@\n \n #![feature(type_alias_impl_trait)]\n \n-trait UnwrapItemsExt {\n+trait UnwrapItemsExt<'a> {\n     type Iter;\n     fn unwrap_items(self) -> Self::Iter;\n }\n@@ -15,9 +15,7 @@ trait MyTrait<'a> {}\n \n impl<'a> MyTrait<'a> for MyStruct {}\n \n-impl<'a, I> UnwrapItemsExt for I\n-where\n-{\n+impl<'a, I> UnwrapItemsExt<'a> for I {\n     type Iter = impl MyTrait<'a>;\n \n     fn unwrap_items(self) -> Self::Iter {"}]}