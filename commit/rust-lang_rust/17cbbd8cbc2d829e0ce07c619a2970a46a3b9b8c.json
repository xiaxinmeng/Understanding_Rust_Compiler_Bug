{"sha": "17cbbd8cbc2d829e0ce07c619a2970a46a3b9b8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Y2JiZDhjYmMyZDgyOWUwY2UwN2M2MTlhMjk3MGE0NmEzYjliOGM=", "commit": {"author": {"name": "calebcartwright", "email": "caleb.cartwright@outlook.com", "date": "2019-07-13T01:59:29Z"}, "committer": {"name": "calebcartwright", "email": "caleb.cartwright@outlook.com", "date": "2019-07-13T01:59:29Z"}, "message": "feat: add --manifest-path support to cargo fmt", "tree": {"sha": "645ee8c8ddbeae1020ce0d6e04aefc1d583a0b35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/645ee8c8ddbeae1020ce0d6e04aefc1d583a0b35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17cbbd8cbc2d829e0ce07c619a2970a46a3b9b8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17cbbd8cbc2d829e0ce07c619a2970a46a3b9b8c", "html_url": "https://github.com/rust-lang/rust/commit/17cbbd8cbc2d829e0ce07c619a2970a46a3b9b8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17cbbd8cbc2d829e0ce07c619a2970a46a3b9b8c/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679c8d5f106e8442bf8c4a54609a63df9eb3863c", "url": "https://api.github.com/repos/rust-lang/rust/commits/679c8d5f106e8442bf8c4a54609a63df9eb3863c", "html_url": "https://github.com/rust-lang/rust/commit/679c8d5f106e8442bf8c4a54609a63df9eb3863c"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "f32f7b5f1be2660dd48df1f2db335a8e84a294ef", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/17cbbd8cbc2d829e0ce07c619a2970a46a3b9b8c/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17cbbd8cbc2d829e0ce07c619a2970a46a3b9b8c/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=17cbbd8cbc2d829e0ce07c619a2970a46a3b9b8c", "patch": "@@ -41,6 +41,10 @@ pub struct Opts {\n     #[structopt(short = \"p\", long = \"package\", value_name = \"package\")]\n     packages: Vec<String>,\n \n+    /// Specify path to Cargo.toml\n+    #[structopt(long = \"manifest-path\", value_name = \"manifest-path\")]\n+    manifest_path: Option<String>,\n+\n     /// Options passed to rustfmt\n     // 'raw = true' to make `--` explicit.\n     #[structopt(name = \"rustfmt_options\", raw(raw = \"true\"))]\n@@ -90,7 +94,27 @@ fn execute() -> i32 {\n \n     let strategy = CargoFmtStrategy::from_opts(&opts);\n \n-    handle_command_status(format_crate(verbosity, &strategy, opts.rustfmt_options))\n+    if opts.manifest_path.is_some() {\n+        let specified_manifest_path = opts.manifest_path.unwrap();\n+        if !specified_manifest_path.ends_with(\"Cargo.toml\") {\n+            print_usage_to_stderr(\"the manifest-path must be a path to a Cargo.toml file\");\n+            return FAILURE;\n+        }\n+        let manifest_path = PathBuf::from(specified_manifest_path);\n+        handle_command_status(format_crate(\n+            verbosity,\n+            &strategy,\n+            opts.rustfmt_options,\n+            Some(&manifest_path),\n+        ))\n+    } else {\n+        handle_command_status(format_crate(\n+            verbosity,\n+            &strategy,\n+            opts.rustfmt_options,\n+            None,\n+        ))\n+    }\n }\n \n fn print_usage_to_stderr(reason: &str) {\n@@ -142,14 +166,15 @@ fn format_crate(\n     verbosity: Verbosity,\n     strategy: &CargoFmtStrategy,\n     rustfmt_args: Vec<String>,\n+    manifest_path: Option<&Path>,\n ) -> Result<i32, io::Error> {\n     let targets = if rustfmt_args\n         .iter()\n         .any(|s| [\"--print-config\", \"-h\", \"--help\", \"-V\", \"--version\"].contains(&s.as_str()))\n     {\n         BTreeSet::new()\n     } else {\n-        get_targets(strategy)?\n+        get_targets(strategy, manifest_path)?\n     };\n \n     // Currently only bin and lib files get formatted.\n@@ -227,13 +252,20 @@ impl CargoFmtStrategy {\n }\n \n /// Based on the specified `CargoFmtStrategy`, returns a set of main source files.\n-fn get_targets(strategy: &CargoFmtStrategy) -> Result<BTreeSet<Target>, io::Error> {\n+fn get_targets(\n+    strategy: &CargoFmtStrategy,\n+    manifest_path: Option<&Path>,\n+) -> Result<BTreeSet<Target>, io::Error> {\n     let mut targets = BTreeSet::new();\n \n     match *strategy {\n-        CargoFmtStrategy::Root => get_targets_root_only(&mut targets)?,\n-        CargoFmtStrategy::All => get_targets_recursive(None, &mut targets, &mut BTreeSet::new())?,\n-        CargoFmtStrategy::Some(ref hitlist) => get_targets_with_hitlist(hitlist, &mut targets)?,\n+        CargoFmtStrategy::Root => get_targets_root_only(manifest_path, &mut targets)?,\n+        CargoFmtStrategy::All => {\n+            get_targets_recursive(manifest_path, &mut targets, &mut BTreeSet::new())?\n+        }\n+        CargoFmtStrategy::Some(ref hitlist) => {\n+            get_targets_with_hitlist(manifest_path, hitlist, &mut targets)?\n+        }\n     }\n \n     if targets.is_empty() {\n@@ -246,12 +278,22 @@ fn get_targets(strategy: &CargoFmtStrategy) -> Result<BTreeSet<Target>, io::Erro\n     }\n }\n \n-fn get_targets_root_only(targets: &mut BTreeSet<Target>) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(None, false)?;\n-    let current_dir = env::current_dir()?.canonicalize()?;\n-    let current_dir_manifest = current_dir.join(\"Cargo.toml\");\n+fn get_targets_root_only(\n+    manifest_path: Option<&Path>,\n+    targets: &mut BTreeSet<Target>,\n+) -> Result<(), io::Error> {\n+    let metadata = get_cargo_metadata(manifest_path, false)?;\n     let workspace_root_path = PathBuf::from(&metadata.workspace_root).canonicalize()?;\n-    let in_workspace_root = workspace_root_path == current_dir;\n+    let (in_workspace_root, current_dir_manifest) = if manifest_path.is_some() {\n+        let target_manifest = manifest_path.unwrap().canonicalize()?;\n+        (workspace_root_path == target_manifest, target_manifest)\n+    } else {\n+        let current_dir = env::current_dir()?.canonicalize()?;\n+        (\n+            workspace_root_path == current_dir,\n+            current_dir.join(\"Cargo.toml\"),\n+        )\n+    };\n \n     let package_targets = match metadata.packages.len() {\n         1 => metadata.packages.into_iter().next().unwrap().targets,\n@@ -319,10 +361,11 @@ fn get_targets_recursive(\n }\n \n fn get_targets_with_hitlist(\n+    manifest_path: Option<&Path>,\n     hitlist: &[String],\n     targets: &mut BTreeSet<Target>,\n ) -> Result<(), io::Error> {\n-    let metadata = get_cargo_metadata(None, false)?;\n+    let metadata = get_cargo_metadata(manifest_path, false)?;\n \n     let mut workspace_hitlist: BTreeSet<&String> = BTreeSet::from_iter(hitlist);\n "}]}