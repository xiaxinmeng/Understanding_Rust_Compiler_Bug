{"sha": "c996c4d316ce9023c3ef296a583e0c8bf7ce5880", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5OTZjNGQzMTZjZTkwMjNjM2VmMjk2YTU4M2UwYzhiZjdjZTU4ODA=", "commit": {"author": {"name": "Philip Munksgaard", "email": "pmunksgaard@gmail.com", "date": "2018-09-18T06:55:15Z"}, "committer": {"name": "Philip Munksgaard", "email": "pmunksgaard@gmail.com", "date": "2018-09-19T12:32:09Z"}, "message": "Add support for running doc test in specific edition", "tree": {"sha": "382480f791ae97c80d89f4e7b92815cbcccbe1fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/382480f791ae97c80d89f4e7b92815cbcccbe1fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c996c4d316ce9023c3ef296a583e0c8bf7ce5880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c996c4d316ce9023c3ef296a583e0c8bf7ce5880", "html_url": "https://github.com/rust-lang/rust/commit/c996c4d316ce9023c3ef296a583e0c8bf7ce5880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c996c4d316ce9023c3ef296a583e0c8bf7ce5880/comments", "author": {"login": "Munksgaard", "id": 230613, "node_id": "MDQ6VXNlcjIzMDYxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/230613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Munksgaard", "html_url": "https://github.com/Munksgaard", "followers_url": "https://api.github.com/users/Munksgaard/followers", "following_url": "https://api.github.com/users/Munksgaard/following{/other_user}", "gists_url": "https://api.github.com/users/Munksgaard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Munksgaard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Munksgaard/subscriptions", "organizations_url": "https://api.github.com/users/Munksgaard/orgs", "repos_url": "https://api.github.com/users/Munksgaard/repos", "events_url": "https://api.github.com/users/Munksgaard/events{/privacy}", "received_events_url": "https://api.github.com/users/Munksgaard/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Munksgaard", "id": 230613, "node_id": "MDQ6VXNlcjIzMDYxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/230613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Munksgaard", "html_url": "https://github.com/Munksgaard", "followers_url": "https://api.github.com/users/Munksgaard/followers", "following_url": "https://api.github.com/users/Munksgaard/following{/other_user}", "gists_url": "https://api.github.com/users/Munksgaard/gists{/gist_id}", "starred_url": "https://api.github.com/users/Munksgaard/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Munksgaard/subscriptions", "organizations_url": "https://api.github.com/users/Munksgaard/orgs", "repos_url": "https://api.github.com/users/Munksgaard/repos", "events_url": "https://api.github.com/users/Munksgaard/events{/privacy}", "received_events_url": "https://api.github.com/users/Munksgaard/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b80cb47889e0ad9400b6708ce2b4c4b364b71982", "url": "https://api.github.com/repos/rust-lang/rust/commits/b80cb47889e0ad9400b6708ce2b4c4b364b71982", "html_url": "https://github.com/rust-lang/rust/commit/b80cb47889e0ad9400b6708ce2b4c4b364b71982"}], "stats": {"total": 54, "additions": 34, "deletions": 20}, "files": [{"sha": "173db236f7cd5ddd3fc20635864a2fb5cb2ae1b4", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c996c4d316ce9023c3ef296a583e0c8bf7ce5880/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c996c4d316ce9023c3ef296a583e0c8bf7ce5880/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c996c4d316ce9023c3ef296a583e0c8bf7ce5880", "patch": "@@ -37,6 +37,7 @@ use std::fmt::{self, Write};\n use std::borrow::Cow;\n use std::ops::Range;\n use std::str;\n+use syntax::edition::Edition;\n \n use html::toc::TocBuilder;\n use html::highlight;\n@@ -577,6 +578,7 @@ pub struct LangString {\n     pub compile_fail: bool,\n     pub error_codes: Vec<String>,\n     pub allow_fail: bool,\n+    pub edition: Option<Edition>\n }\n \n impl LangString {\n@@ -591,6 +593,7 @@ impl LangString {\n             compile_fail: false,\n             error_codes: Vec::new(),\n             allow_fail: false,\n+            edition: None,\n         }\n     }\n \n@@ -625,6 +628,11 @@ impl LangString {\n                     seen_rust_tags = !seen_other_tags || seen_rust_tags;\n                     data.no_run = true;\n                 }\n+                x if allow_error_code_check && x.starts_with(\"edition\") => {\n+                    // allow_error_code_check is true if we're on nightly, which\n+                    // is needed for edition support\n+                    data.edition = x[7..].parse::<Edition>().ok();\n+                }\n                 x if allow_error_code_check && x.starts_with(\"E\") && x.len() == 5 => {\n                     if x[1..].parse::<u32>().is_ok() {\n                         data.error_codes.push(x.to_owned());\n@@ -925,12 +933,14 @@ mod tests {\n     use super::{ErrorCodes, LangString, Markdown, MarkdownHtml, IdMap};\n     use super::plain_summary_line;\n     use std::cell::RefCell;\n+    use syntax::edition::Edition;\n \n     #[test]\n     fn test_lang_string_parse() {\n         fn t(s: &str,\n             should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n-            compile_fail: bool, allow_fail: bool, error_codes: Vec<String>) {\n+            compile_fail: bool, allow_fail: bool, error_codes: Vec<String>,\n+             edition: Option<Edition>) {\n             assert_eq!(LangString::parse(s, ErrorCodes::Yes), LangString {\n                 should_panic,\n                 no_run,\n@@ -941,30 +951,34 @@ mod tests {\n                 error_codes,\n                 original: s.to_owned(),\n                 allow_fail,\n+                edition,\n             })\n         }\n \n         fn v() -> Vec<String> {\n             Vec::new()\n         }\n \n-        // marker                | should_panic| no_run| ignore| rust | test_harness| compile_fail\n-        //                       | allow_fail | error_codes\n-        t(\"\",                      false,        false,  false,  true,  false, false, false, v());\n-        t(\"rust\",                  false,        false,  false,  true,  false, false, false, v());\n-        t(\"sh\",                    false,        false,  false,  false, false, false, false, v());\n-        t(\"ignore\",                false,        false,  true,   true,  false, false, false, v());\n-        t(\"should_panic\",          true,         false,  false,  true,  false, false, false, v());\n-        t(\"no_run\",                false,        true,   false,  true,  false, false, false, v());\n-        t(\"test_harness\",          false,        false,  false,  true,  true,  false, false, v());\n-        t(\"compile_fail\",          false,        true,   false,  true,  false, true,  false, v());\n-        t(\"allow_fail\",            false,        false,  false,  true,  false, false, true,  v());\n-        t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, false, v());\n-        t(\"{.sh .should_panic}\",   true,         false,  false,  false, false, false, false, v());\n-        t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, false, v());\n-        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,  false, false, v());\n-        t(\"text, no_run\",          false,        true,   false,  false, false, false, false, v());\n-        t(\"text,no_run\",           false,        true,   false,  false, false, false, false, v());\n+        // ignore-tidy-linelength\n+        // marker                | should_panic | no_run | ignore | rust | test_harness\n+        //                       | compile_fail | allow_fail | error_codes | edition\n+        t(\"\",                      false,         false,   false,   true,  false, false, false, v(), None);\n+        t(\"rust\",                  false,         false,   false,   true,  false, false, false, v(), None);\n+        t(\"sh\",                    false,         false,   false,   false, false, false, false, v(), None);\n+        t(\"ignore\",                false,         false,   true,    true,  false, false, false, v(), None);\n+        t(\"should_panic\",          true,          false,   false,   true,  false, false, false, v(), None);\n+        t(\"no_run\",                false,         true,    false,   true,  false, false, false, v(), None);\n+        t(\"test_harness\",          false,         false,   false,   true,  true,  false, false, v(), None);\n+        t(\"compile_fail\",          false,         true,    false,   true,  false, true,  false, v(), None);\n+        t(\"allow_fail\",            false,         false,   false,   true,  false, false, true,  v(), None);\n+        t(\"{.no_run .example}\",    false,         true,    false,   true,  false, false, false, v(), None);\n+        t(\"{.sh .should_panic}\",   true,          false,   false,   false, false, false, false, v(), None);\n+        t(\"{.example .rust}\",      false,         false,   false,   true,  false, false, false, v(), None);\n+        t(\"{.test_harness .rust}\", false,         false,   false,   true,  true,  false, false, v(), None);\n+        t(\"text, no_run\",          false,         true,    false,   false, false, false, false, v(), None);\n+        t(\"text,no_run\",           false,         true,    false,   false, false, false, false, v(), None);\n+        t(\"edition2015\",           false,         false,   false,   true,  false, false, false, v(), Some(Edition::Edition2015));\n+        t(\"edition2018\",           false,         false,   false,   true,  false, false, false, v(), Some(Edition::Edition2018));\n     }\n \n     #[test]"}, {"sha": "c33888d1a49e505bc104ae458b98f16ffba528b6", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c996c4d316ce9023c3ef296a583e0c8bf7ce5880/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c996c4d316ce9023c3ef296a583e0c8bf7ce5880/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c996c4d316ce9023c3ef296a583e0c8bf7ce5880", "patch": "@@ -545,7 +545,7 @@ impl Collector {\n         let opts = self.opts.clone();\n         let maybe_sysroot = self.maybe_sysroot.clone();\n         let linker = self.linker.clone();\n-        let edition = self.edition;\n+        let edition = config.edition.unwrap_or(self.edition);\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {"}, {"sha": "5819cd7f480a039ded2eef959be9cac7845bfada", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c996c4d316ce9023c3ef296a583e0c8bf7ce5880/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c996c4d316ce9023c3ef296a583e0c8bf7ce5880/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=c996c4d316ce9023c3ef296a583e0c8bf7ce5880", "patch": "@@ -12,7 +12,7 @@ use std::fmt;\n use std::str::FromStr;\n \n /// The edition of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable, Eq)]\n #[non_exhaustive]\n pub enum Edition {\n     // editions must be kept in order, oldest to newest"}]}