{"sha": "d4011e12708bc760f02ed27d6226e27317ed8629", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MDExZTEyNzA4YmM3NjBmMDJlZDI3ZDYyMjZlMjczMTdlZDg2Mjk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-05T08:56:47Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-05T18:32:05Z"}, "message": "Use DiagnosticInfo for anchor failure\n\nThis gets rid of a lot of parameters, as well as fixing a diagnostic\nbug.", "tree": {"sha": "7e1717b5cea53a94e01a08fe72b6360fbf109dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e1717b5cea53a94e01a08fe72b6360fbf109dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4011e12708bc760f02ed27d6226e27317ed8629", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4011e12708bc760f02ed27d6226e27317ed8629", "html_url": "https://github.com/rust-lang/rust/commit/d4011e12708bc760f02ed27d6226e27317ed8629", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4011e12708bc760f02ed27d6226e27317ed8629/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e4ef54d79fa87701d4a11712f900994846b811e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e4ef54d79fa87701d4a11712f900994846b811e", "html_url": "https://github.com/rust-lang/rust/commit/6e4ef54d79fa87701d4a11712f900994846b811e"}], "stats": {"total": 82, "additions": 30, "deletions": 52}, "files": [{"sha": "09823d4b05948c1ddcab94e9aed7e4279d0597d3", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 15, "deletions": 47, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d4011e12708bc760f02ed27d6226e27317ed8629/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4011e12708bc760f02ed27d6226e27317ed8629/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=d4011e12708bc760f02ed27d6226e27317ed8629", "patch": "@@ -251,6 +251,7 @@ struct ResolutionInfo {\n     extra_fragment: Option<String>,\n }\n \n+#[derive(Clone)]\n struct DiagnosticInfo<'a> {\n     item: &'a Item,\n     dox: &'a str,\n@@ -949,19 +950,19 @@ impl LinkCollector<'_, '_> {\n             return None;\n         }\n \n+        let diag_info = DiagnosticInfo {\n+            item,\n+            dox,\n+            ori_link: &ori_link.link,\n+            link_range: ori_link.range.clone(),\n+        };\n+\n         let link = ori_link.link.replace(\"`\", \"\");\n         let no_backticks_range = range_between_backticks(&ori_link);\n         let parts = link.split('#').collect::<Vec<_>>();\n         let (link, extra_fragment) = if parts.len() > 2 {\n             // A valid link can't have multiple #'s\n-            anchor_failure(\n-                self.cx,\n-                &item,\n-                &link,\n-                dox,\n-                ori_link.range,\n-                AnchorFailure::MultipleAnchors,\n-            );\n+            anchor_failure(self.cx, diag_info, AnchorFailure::MultipleAnchors);\n             return None;\n         } else if parts.len() == 2 {\n             if parts[0].trim().is_empty() {\n@@ -1092,20 +1093,14 @@ impl LinkCollector<'_, '_> {\n             return None;\n         }\n \n-        let diag_info = DiagnosticInfo {\n-            item,\n-            dox,\n-            ori_link: &ori_link.link,\n-            link_range: ori_link.range.clone(),\n-        };\n         let (mut res, mut fragment) = self.resolve_with_disambiguator_cached(\n             ResolutionInfo {\n                 module_id,\n                 dis: disambiguator,\n                 path_str: path_str.to_owned(),\n                 extra_fragment,\n             },\n-            diag_info,\n+            diag_info.clone(), // this struct should really be Copy, but Range is not :(\n             matches!(ori_link.kind, LinkType::Reference | LinkType::Shortcut),\n         )?;\n \n@@ -1123,10 +1118,7 @@ impl LinkCollector<'_, '_> {\n                     if fragment.is_some() {\n                         anchor_failure(\n                             self.cx,\n-                            &item,\n-                            path_str,\n-                            dox,\n-                            ori_link.range,\n+                            diag_info,\n                             AnchorFailure::RustdocAnchorConflict(prim),\n                         );\n                         return None;\n@@ -1360,14 +1352,7 @@ impl LinkCollector<'_, '_> {\n                         None\n                     }\n                     Err(ErrorKind::AnchorFailure(msg)) => {\n-                        anchor_failure(\n-                            self.cx,\n-                            diag.item,\n-                            diag.ori_link,\n-                            diag.dox,\n-                            diag.link_range,\n-                            msg,\n-                        );\n+                        anchor_failure(self.cx, diag, msg);\n                         None\n                     }\n                 }\n@@ -1384,29 +1369,15 @@ impl LinkCollector<'_, '_> {\n                             Ok(res)\n                         }\n                         Err(ErrorKind::AnchorFailure(msg)) => {\n-                            anchor_failure(\n-                                self.cx,\n-                                diag.item,\n-                                diag.ori_link,\n-                                diag.dox,\n-                                diag.link_range,\n-                                msg,\n-                            );\n+                            anchor_failure(self.cx, diag, msg);\n                             return None;\n                         }\n                         Err(ErrorKind::Resolve(box kind)) => Err(kind),\n                     },\n                     value_ns: match self.resolve(path_str, ValueNS, base_node, extra_fragment) {\n                         Ok(res) => Ok(res),\n                         Err(ErrorKind::AnchorFailure(msg)) => {\n-                            anchor_failure(\n-                                self.cx,\n-                                diag.item,\n-                                diag.ori_link,\n-                                diag.dox,\n-                                diag.link_range,\n-                                msg,\n-                            );\n+                            anchor_failure(self.cx, diag, msg);\n                             return None;\n                         }\n                         Err(ErrorKind::Resolve(box kind)) => Err(kind),\n@@ -2004,10 +1975,7 @@ fn resolution_failure(\n /// Report an anchor failure.\n fn anchor_failure(\n     cx: &DocContext<'_>,\n-    item: &Item,\n-    ori_link: &str,\n-    dox: &str,\n-    link_range: Range<usize>,\n+    DiagnosticInfo { item, ori_link, dox, link_range }: DiagnosticInfo<'_>,\n     failure: AnchorFailure,\n ) {\n     let msg = match failure {"}, {"sha": "6785cb7abeaee3ea26bc305e606fba6b7a995a90", "filename": "src/test/rustdoc-ui/intra-doc/anchors.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4011e12708bc760f02ed27d6226e27317ed8629/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4011e12708bc760f02ed27d6226e27317ed8629/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs?ref=d4011e12708bc760f02ed27d6226e27317ed8629", "patch": "@@ -43,3 +43,7 @@ pub fn enum_link() {}\n /// [u32#hello]\n //~^ ERROR `u32#hello` contains an anchor\n pub fn x() {}\n+\n+/// [prim@usize#x]\n+//~^ ERROR `prim@usize#x` contains an anchor\n+pub mod usize {}"}, {"sha": "787a68ed969ef113faa084d10e2632593d3a1d78", "filename": "src/test/rustdoc-ui/intra-doc/anchors.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d4011e12708bc760f02ed27d6226e27317ed8629/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4011e12708bc760f02ed27d6226e27317ed8629/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr?ref=d4011e12708bc760f02ed27d6226e27317ed8629", "patch": "@@ -1,15 +1,21 @@\n-error: `Foo::f#hola` contains an anchor, but links to fields are already anchored\n-  --> $DIR/anchors.rs:25:15\n+error: `prim@usize#x` contains an anchor, but links to builtin types are already anchored\n+  --> $DIR/anchors.rs:47:6\n    |\n-LL | /// Or maybe [Foo::f#hola].\n-   |               ^^^^^^^^^^^ contains invalid anchor\n+LL | /// [prim@usize#x]\n+   |      ^^^^^^^^^^^^ contains invalid anchor\n    |\n note: the lint level is defined here\n   --> $DIR/anchors.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: `Foo::f#hola` contains an anchor, but links to fields are already anchored\n+  --> $DIR/anchors.rs:25:15\n+   |\n+LL | /// Or maybe [Foo::f#hola].\n+   |               ^^^^^^^^^^^ contains invalid anchor\n+\n error: `hello#people#!` contains multiple anchors\n   --> $DIR/anchors.rs:31:28\n    |\n@@ -28,5 +34,5 @@ error: `u32#hello` contains an anchor, but links to builtin types are already an\n LL | /// [u32#hello]\n    |      ^^^^^^^^^ contains invalid anchor\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}