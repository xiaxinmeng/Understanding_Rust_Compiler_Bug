{"sha": "b4d76b42fd12d963eddafb7e1d9b8559951f73be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZDc2YjQyZmQxMmQ5NjNlZGRhZmI3ZTFkOWI4NTU5OTUxZjczYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T20:20:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-12T20:20:58Z"}, "message": "Auto merge of #7560 - xFrednet:7289-configuration-for-every-type-lint, r=camsteffen\n\nUse `avoid-breaking-exported-api` configuration in types module\n\nThis PR empowers our lovely `avoid-breaking-exported-api` configuration value to also influence the emission of lints inside the `types` module.\n\n(That's pretty much it, not really a change worthy of writing a fairy tale about. Don't get me wrong, I would love to write a short one, but I sadly need to study now).\n\n---\n\nCloses: rust-lang/rust-clippy#7489\n\nchangelog: The `avoid-breaking-exported-api` configuration now also works for [`box_vec`], [`redundant_allocation`], [`rc_buffer`], [`vec_box`], [`option_option`], [`linkedlist`], [`rc_mutex`]\n\nchangelog: [`rc_mutex`]: update the lint message to comply with the normal format\n\n---\n\nr? `@camsteffen,` as you implemented the configuration value\n\ncc: `@flip1995,` as we've discussed this change in rust-lang/rust-clippy#7308", "tree": {"sha": "a2976cce333f6e856bd6a65c8d8a6917715488c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2976cce333f6e856bd6a65c8d8a6917715488c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4d76b42fd12d963eddafb7e1d9b8559951f73be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4d76b42fd12d963eddafb7e1d9b8559951f73be", "html_url": "https://github.com/rust-lang/rust/commit/b4d76b42fd12d963eddafb7e1d9b8559951f73be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4d76b42fd12d963eddafb7e1d9b8559951f73be/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bfc26ec8e7a454786668e7e52ffe527fc649735", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bfc26ec8e7a454786668e7e52ffe527fc649735", "html_url": "https://github.com/rust-lang/rust/commit/7bfc26ec8e7a454786668e7e52ffe527fc649735"}, {"sha": "c02dcd5405cc11270bef963c37837a944a672f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c02dcd5405cc11270bef963c37837a944a672f6a", "html_url": "https://github.com/rust-lang/rust/commit/c02dcd5405cc11270bef963c37837a944a672f6a"}], "stats": {"total": 255, "additions": 167, "deletions": 88}, "files": [{"sha": "18600498e1c46ce78baa382b779cc1517734d4ff", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -1840,7 +1840,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box serde_api::SerdeApi);\n     let vec_box_size_threshold = conf.vec_box_size_threshold;\n     let type_complexity_threshold = conf.type_complexity_threshold;\n-    store.register_late_pass(move || box types::Types::new(vec_box_size_threshold, type_complexity_threshold));\n+    let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n+    store.register_late_pass(move || box types::Types::new(\n+        vec_box_size_threshold,\n+        type_complexity_threshold,\n+        avoid_breaking_exported_api,\n+    ));\n     store.register_late_pass(|| box booleans::NonminimalBool);\n     store.register_late_pass(|| box needless_bitwise_bool::NeedlessBitwiseBool);\n     store.register_late_pass(|| box eq_op::EqOp);"}, {"sha": "9588de8459cfe3f337b2351cc6afc5b6c6e8b800", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 64, "deletions": 17, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -295,6 +295,7 @@ declare_clippy_lint! {\n pub struct Types {\n     vec_box_size_threshold: u64,\n     type_complexity_threshold: u64,\n+    avoid_breaking_exported_api: bool,\n }\n \n impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER, RC_MUTEX, TYPE_COMPLEXITY]);\n@@ -308,19 +309,31 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n             false\n         };\n \n+        let is_exported = cx.access_levels.is_exported(cx.tcx.hir().local_def_id(id));\n+\n         self.check_fn_decl(\n             cx,\n             decl,\n             CheckTyContext {\n                 is_in_trait_impl,\n+                is_exported,\n                 ..CheckTyContext::default()\n             },\n         );\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n+        let is_exported = cx.access_levels.is_exported(item.def_id);\n+\n         match item.kind {\n-            ItemKind::Static(ty, _, _) | ItemKind::Const(ty, _) => self.check_ty(cx, ty, CheckTyContext::default()),\n+            ItemKind::Static(ty, _, _) | ItemKind::Const(ty, _) => self.check_ty(\n+                cx,\n+                ty,\n+                CheckTyContext {\n+                    is_exported,\n+                    ..CheckTyContext::default()\n+                },\n+            ),\n             // functions, enums, structs, impls and traits are covered\n             _ => (),\n         }\n@@ -342,15 +355,31 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n \n     fn check_field_def(&mut self, cx: &LateContext<'_>, field: &hir::FieldDef<'_>) {\n-        self.check_ty(cx, field.ty, CheckTyContext::default());\n+        let is_exported = cx.access_levels.is_exported(cx.tcx.hir().local_def_id(field.hir_id));\n+\n+        self.check_ty(\n+            cx,\n+            field.ty,\n+            CheckTyContext {\n+                is_exported,\n+                ..CheckTyContext::default()\n+            },\n+        );\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'_>, item: &TraitItem<'_>) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &TraitItem<'_>) {\n+        let is_exported = cx.access_levels.is_exported(item.def_id);\n+\n+        let context = CheckTyContext {\n+            is_exported,\n+            ..CheckTyContext::default()\n+        };\n+\n         match item.kind {\n             TraitItemKind::Const(ty, _) | TraitItemKind::Type(_, Some(ty)) => {\n-                self.check_ty(cx, ty, CheckTyContext::default());\n+                self.check_ty(cx, ty, context);\n             },\n-            TraitItemKind::Fn(ref sig, _) => self.check_fn_decl(cx, sig.decl, CheckTyContext::default()),\n+            TraitItemKind::Fn(ref sig, _) => self.check_fn_decl(cx, sig.decl, context),\n             TraitItemKind::Type(..) => (),\n         }\n     }\n@@ -370,10 +399,11 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n }\n \n impl Types {\n-    pub fn new(vec_box_size_threshold: u64, type_complexity_threshold: u64) -> Self {\n+    pub fn new(vec_box_size_threshold: u64, type_complexity_threshold: u64, avoid_breaking_exported_api: bool) -> Self {\n         Self {\n             vec_box_size_threshold,\n             type_complexity_threshold,\n+            avoid_breaking_exported_api,\n         }\n     }\n \n@@ -410,17 +440,24 @@ impl Types {\n                 let hir_id = hir_ty.hir_id;\n                 let res = cx.qpath_res(qpath, hir_id);\n                 if let Some(def_id) = res.opt_def_id() {\n-                    let mut triggered = false;\n-                    triggered |= box_vec::check(cx, hir_ty, qpath, def_id);\n-                    triggered |= redundant_allocation::check(cx, hir_ty, qpath, def_id);\n-                    triggered |= rc_buffer::check(cx, hir_ty, qpath, def_id);\n-                    triggered |= vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);\n-                    triggered |= option_option::check(cx, hir_ty, qpath, def_id);\n-                    triggered |= linked_list::check(cx, hir_ty, def_id);\n-                    triggered |= rc_mutex::check(cx, hir_ty, qpath, def_id);\n-\n-                    if triggered {\n-                        return;\n+                    if self.is_type_change_allowed(context) {\n+                        // All lints that are being checked in this block are guarded by\n+                        // the `avoid_breaking_exported_api` configuration. When adding a\n+                        // new lint, please also add the name to the configuration documentation\n+                        // in `clippy_lints::utils::conf.rs`\n+\n+                        let mut triggered = false;\n+                        triggered |= box_vec::check(cx, hir_ty, qpath, def_id);\n+                        triggered |= redundant_allocation::check(cx, hir_ty, qpath, def_id);\n+                        triggered |= rc_buffer::check(cx, hir_ty, qpath, def_id);\n+                        triggered |= vec_box::check(cx, hir_ty, qpath, def_id, self.vec_box_size_threshold);\n+                        triggered |= option_option::check(cx, hir_ty, qpath, def_id);\n+                        triggered |= linked_list::check(cx, hir_ty, def_id);\n+                        triggered |= rc_mutex::check(cx, hir_ty, qpath, def_id);\n+\n+                        if triggered {\n+                            return;\n+                        }\n                     }\n                 }\n                 match *qpath {\n@@ -487,11 +524,21 @@ impl Types {\n             _ => {},\n         }\n     }\n+\n+    /// This function checks if the type is allowed to change in the current context\n+    /// based on the `avoid_breaking_exported_api` configuration\n+    fn is_type_change_allowed(&self, context: CheckTyContext) -> bool {\n+        !(context.is_exported && self.avoid_breaking_exported_api)\n+    }\n }\n \n+#[allow(clippy::struct_excessive_bools)]\n #[derive(Clone, Copy, Default)]\n struct CheckTyContext {\n     is_in_trait_impl: bool,\n+    /// `true` for types on local variables.\n     is_local: bool,\n+    /// `true` for types that are part of the public API.\n+    is_exported: bool,\n     is_nested_call: bool,\n }"}, {"sha": "12db7afb81ca113dd822582d6b16c65e815a3b39", "filename": "clippy_lints/src/types/rc_mutex.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_mutex.rs?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::is_ty_param_diagnostic_item;\n use if_chain::if_chain;\n use rustc_hir::{self as hir, def_id::DefId, QPath};\n@@ -11,13 +11,14 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n     if_chain! {\n         if cx.tcx.is_diagnostic_item(sym::Rc, def_id) ;\n         if let Some(_) = is_ty_param_diagnostic_item(cx, qpath, sym!(mutex_type)) ;\n-\n-        then{\n-            span_lint(\n+        then {\n+            span_lint_and_help(\n                 cx,\n                 RC_MUTEX,\n                 hir_ty.span,\n-                \"found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\",\n+                \"usage of `Rc<Mutex<_>>`\",\n+                None,\n+                \"consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\",\n             );\n             return true;\n         }"}, {"sha": "9ee2e3024520bda298fb1d33d73a66d8dc39051e", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -132,7 +132,7 @@ macro_rules! define_Conf {\n \n // N.B., this macro is parsed by util/lintlib.py\n define_Conf! {\n-    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION.\n+    /// Lint: ENUM_VARIANT_NAMES, LARGE_TYPES_PASSED_BY_VALUE, TRIVIALLY_COPY_PASS_BY_REF, UNNECESSARY_WRAPS, UPPER_CASE_ACRONYMS, WRONG_SELF_CONVENTION, BOX_VEC, REDUNDANT_ALLOCATION, RC_BUFFER, VEC_BOX, OPTION_OPTION, LINKEDLIST, RC_MUTEX.\n     ///\n     /// Suppress lints whenever the suggested change would cause breakage for other crates.\n     (avoid_breaking_exported_api: bool = true),"}, {"sha": "1d6366972dacfb529ce1e2295934d95adab58878", "filename": "tests/ui/box_vec.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -1,6 +1,10 @@\n #![warn(clippy::all)]\n-#![allow(clippy::boxed_local, clippy::needless_pass_by_value)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(\n+    clippy::boxed_local,\n+    clippy::needless_pass_by_value,\n+    clippy::blacklisted_name,\n+    unused\n+)]\n \n macro_rules! boxit {\n     ($init:expr, $x:ty) => {\n@@ -11,22 +15,22 @@ macro_rules! boxit {\n fn test_macro() {\n     boxit!(Vec::new(), Vec<u8>);\n }\n-pub fn test(foo: Box<Vec<bool>>) {\n-    println!(\"{:?}\", foo.get(0))\n-}\n+fn test(foo: Box<Vec<bool>>) {}\n \n-pub fn test2(foo: Box<dyn Fn(Vec<u32>)>) {\n+fn test2(foo: Box<dyn Fn(Vec<u32>)>) {\n     // pass if #31 is fixed\n     foo(vec![1, 2, 3])\n }\n \n-pub fn test_local_not_linted() {\n+fn test_local_not_linted() {\n     let _: Box<Vec<bool>>;\n }\n \n-fn main() {\n-    test(Box::new(Vec::new()));\n-    test2(Box::new(|v| println!(\"{:?}\", v)));\n-    test_macro();\n-    test_local_not_linted();\n+// All of these test should be allowed because they are part of the\n+// public api and `avoid_breaking_exported_api` is `false` by default.\n+pub fn pub_test(foo: Box<Vec<bool>>) {}\n+pub fn pub_test_ret() -> Box<Vec<bool>> {\n+    Box::new(Vec::new())\n }\n+\n+fn main() {}"}, {"sha": "58c1f13fb877b1ba77deda63048b0ed41bf36314", "filename": "tests/ui/box_vec.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -1,8 +1,8 @@\n error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n-  --> $DIR/box_vec.rs:14:18\n+  --> $DIR/box_vec.rs:18:14\n    |\n-LL | pub fn test(foo: Box<Vec<bool>>) {\n-   |                  ^^^^^^^^^^^^^^\n+LL | fn test(foo: Box<Vec<bool>>) {}\n+   |              ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::box-vec` implied by `-D warnings`\n    = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation"}, {"sha": "690ea810a6214072f1a1614304624f22cb30befc", "filename": "tests/ui/linkedlist.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Flinkedlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Flinkedlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkedlist.rs?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -1,6 +1,6 @@\n #![feature(associated_type_defaults)]\n #![warn(clippy::linkedlist)]\n-#![allow(dead_code, clippy::needless_pass_by_value)]\n+#![allow(unused, dead_code, clippy::needless_pass_by_value)]\n \n extern crate alloc;\n use alloc::collections::linked_list::LinkedList;\n@@ -20,24 +20,29 @@ impl Foo for LinkedList<u8> {\n     const BAR: Option<LinkedList<u8>> = None;\n }\n \n-struct Bar;\n+pub struct Bar {\n+    priv_linked_list_field: LinkedList<u8>,\n+    pub pub_linked_list_field: LinkedList<u8>,\n+}\n impl Bar {\n     fn foo(_: LinkedList<u8>) {}\n }\n \n-pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n-    println!(\"{:?}\", my_favourite_linked_list)\n-}\n-\n-pub fn test_ret() -> Option<LinkedList<u8>> {\n-    unimplemented!();\n+// All of these test should be trigger the lint because they are not\n+// part of the public api\n+fn test(my_favorite_linked_list: LinkedList<u8>) {}\n+fn test_ret() -> Option<LinkedList<u8>> {\n+    None\n }\n-\n-pub fn test_local_not_linted() {\n+fn test_local_not_linted() {\n     let _: LinkedList<u8>;\n }\n \n-fn main() {\n-    test(LinkedList::new());\n-    test_local_not_linted();\n+// All of these test should be allowed because they are part of the\n+// public api and `avoid_breaking_exported_api` is `false` by default.\n+pub fn pub_test(the_most_awesome_linked_list: LinkedList<u8>) {}\n+pub fn pub_test_ret() -> Option<LinkedList<u8>> {\n+    None\n }\n+\n+fn main() {}"}, {"sha": "51327df13211879da10fb77801a1c6a2e44be1c2", "filename": "tests/ui/linkedlist.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Flinkedlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Flinkedlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flinkedlist.stderr?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -40,28 +40,36 @@ LL |     const BAR: Option<LinkedList<u8>>;\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/linkedlist.rs:25:15\n+  --> $DIR/linkedlist.rs:24:29\n+   |\n+LL |     priv_linked_list_field: LinkedList<u8>,\n+   |                             ^^^^^^^^^^^^^^\n+   |\n+   = help: a `VecDeque` might work\n+\n+error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n+  --> $DIR/linkedlist.rs:28:15\n    |\n LL |     fn foo(_: LinkedList<u8>) {}\n    |               ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/linkedlist.rs:28:39\n+  --> $DIR/linkedlist.rs:33:34\n    |\n-LL | pub fn test(my_favourite_linked_list: LinkedList<u8>) {\n-   |                                       ^^^^^^^^^^^^^^\n+LL | fn test(my_favorite_linked_list: LinkedList<u8>) {}\n+   |                                  ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n error: you seem to be using a `LinkedList`! Perhaps you meant some other data structure?\n-  --> $DIR/linkedlist.rs:32:29\n+  --> $DIR/linkedlist.rs:34:25\n    |\n-LL | pub fn test_ret() -> Option<LinkedList<u8>> {\n-   |                             ^^^^^^^^^^^^^^\n+LL | fn test_ret() -> Option<LinkedList<u8>> {\n+   |                         ^^^^^^^^^^^^^^\n    |\n    = help: a `VecDeque` might work\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "18e8a2e01e0227cc02478346c42822a45e4b1314", "filename": "tests/ui/rc_mutex.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Frc_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Frc_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.rs?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -1,13 +1,17 @@\n #![warn(clippy::rc_mutex)]\n-#![allow(clippy::blacklisted_name)]\n+#![allow(unused, clippy::blacklisted_name)]\n \n use std::rc::Rc;\n use std::sync::Mutex;\n \n-pub struct MyStruct {\n+pub struct MyStructWithPrivItem {\n     foo: Rc<Mutex<i32>>,\n }\n \n+pub struct MyStructWithPubItem {\n+    pub foo: Rc<Mutex<i32>>,\n+}\n+\n pub struct SubT<T> {\n     foo: T,\n }\n@@ -17,18 +21,16 @@ pub enum MyEnum {\n     Two,\n }\n \n-pub fn test1<T>(foo: Rc<Mutex<T>>) {}\n-\n-pub fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+// All of these test should be trigger the lint because they are not\n+// part of the public api\n+fn test1<T>(foo: Rc<Mutex<T>>) {}\n+fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n \n-pub fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n+// All of these test should be allowed because they are part of the\n+// public api and `avoid_breaking_exported_api` is `false` by default.\n+pub fn pub_test1<T>(foo: Rc<Mutex<T>>) {}\n+pub fn pub_test2(foo: Rc<Mutex<MyEnum>>) {}\n+pub fn pub_test3(foo: Rc<Mutex<SubT<usize>>>) {}\n \n-fn main() {\n-    test1(Rc::new(Mutex::new(1)));\n-    test2(Rc::new(Mutex::new(MyEnum::One)));\n-    test3(Rc::new(Mutex::new(SubT { foo: 1 })));\n-\n-    let _my_struct = MyStruct {\n-        foo: Rc::new(Mutex::new(1)),\n-    };\n-}\n+fn main() {}"}, {"sha": "fe84361d781622b746522ed52e138bac237b2f46", "filename": "tests/ui/rc_mutex.stderr", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Frc_mutex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b4d76b42fd12d963eddafb7e1d9b8559951f73be/tests%2Fui%2Frc_mutex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_mutex.stderr?ref=b4d76b42fd12d963eddafb7e1d9b8559951f73be", "patch": "@@ -1,28 +1,35 @@\n-error: found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n+error: usage of `Rc<Mutex<_>>`\n   --> $DIR/rc_mutex.rs:8:10\n    |\n LL |     foo: Rc<Mutex<i32>>,\n    |          ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::rc-mutex` implied by `-D warnings`\n+   = help: consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n \n-error: found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n-  --> $DIR/rc_mutex.rs:20:22\n+error: usage of `Rc<Mutex<_>>`\n+  --> $DIR/rc_mutex.rs:26:18\n    |\n-LL | pub fn test1<T>(foo: Rc<Mutex<T>>) {}\n-   |                      ^^^^^^^^^^^^\n+LL | fn test1<T>(foo: Rc<Mutex<T>>) {}\n+   |                  ^^^^^^^^^^^^\n+   |\n+   = help: consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n \n-error: found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n-  --> $DIR/rc_mutex.rs:22:19\n+error: usage of `Rc<Mutex<_>>`\n+  --> $DIR/rc_mutex.rs:27:15\n+   |\n+LL | fn test2(foo: Rc<Mutex<MyEnum>>) {}\n+   |               ^^^^^^^^^^^^^^^^^\n    |\n-LL | pub fn test2(foo: Rc<Mutex<MyEnum>>) {}\n-   |                   ^^^^^^^^^^^^^^^^^\n+   = help: consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n \n-error: found `Rc<Mutex<_>>`. Consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n-  --> $DIR/rc_mutex.rs:24:19\n+error: usage of `Rc<Mutex<_>>`\n+  --> $DIR/rc_mutex.rs:28:15\n+   |\n+LL | fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-LL | pub fn test3(foo: Rc<Mutex<SubT<usize>>>) {}\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider using `Rc<RefCell<_>>` or `Arc<Mutex<_>>` instead\n \n error: aborting due to 4 previous errors\n "}]}