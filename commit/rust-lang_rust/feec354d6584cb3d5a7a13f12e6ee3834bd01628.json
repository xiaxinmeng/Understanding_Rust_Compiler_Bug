{"sha": "feec354d6584cb3d5a7a13f12e6ee3834bd01628", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlZWMzNTRkNjU4NGNiM2Q1YTdhMTNmMTJlNmVlMzgzNGJkMDE2Mjg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-04T18:27:58Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-02-04T18:32:32Z"}, "message": "Introduce CPlace::Stack", "tree": {"sha": "34be2d5b7ba0dfe8bbbd8ff621137a13bea7f715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34be2d5b7ba0dfe8bbbd8ff621137a13bea7f715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/feec354d6584cb3d5a7a13f12e6ee3834bd01628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/feec354d6584cb3d5a7a13f12e6ee3834bd01628", "html_url": "https://github.com/rust-lang/rust/commit/feec354d6584cb3d5a7a13f12e6ee3834bd01628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/feec354d6584cb3d5a7a13f12e6ee3834bd01628/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e24c1212fe58539038733eb01fce42804b37d80", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e24c1212fe58539038733eb01fce42804b37d80", "html_url": "https://github.com/rust-lang/rust/commit/3e24c1212fe58539038733eb01fce42804b37d80"}], "stats": {"total": 90, "additions": 38, "deletions": 52}, "files": [{"sha": "bbe2609863e874afed549e90aea2f9fd5900c836", "filename": "src/abi.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/feec354d6584cb3d5a7a13f12e6ee3834bd01628/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feec354d6584cb3d5a7a13f12e6ee3834bd01628/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=feec354d6584cb3d5a7a13f12e6ee3834bd01628", "patch": "@@ -340,23 +340,23 @@ fn local_place<'a, 'tcx: 'a>(\n         fx.bcx.declare_var(mir_var(local), fx.clif_type(layout.ty).unwrap());\n         CPlace::Var(local, layout)\n     } else {\n-        let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-            kind: StackSlotKind::ExplicitSlot,\n-            size: layout.size.bytes() as u32,\n-            offset: None,\n-        });\n+        let place = CPlace::new_stack_slot(fx, layout.ty);\n \n         #[cfg(debug_assertions)]\n         {\n             let TyLayout { ty, details } = layout;\n             let ty::layout::LayoutDetails { size, align, abi: _, variants: _, fields: _ } = details;\n+            let stack_slot = match place {\n+                CPlace::Stack(stack_slot, _) => stack_slot,\n+                _ => unreachable!(),\n+            };\n             fx.add_entity_comment(stack_slot, format!(\n                 \"{:?}: {:?} size={} align={},{}\",\n                 local, ty, size.bytes(), align.abi.bytes(), align.pref.bytes(),\n             ));\n         }\n \n-        CPlace::from_stack_slot(fx, stack_slot, layout.ty)\n+        place\n     };\n \n     let prev_place = fx.local_map.insert(local, place);\n@@ -606,7 +606,7 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n     let return_ptr = match output_pass_mode {\n         PassMode::NoPass => None,\n         PassMode::ByRef => match ret_place {\n-            Some(ret_place) => Some(ret_place.cplace_to_addr(fx)),\n+            Some(ret_place) => Some(ret_place.to_addr(fx)),\n             None => Some(fx.bcx.ins().iconst(fx.pointer_type, 0)),\n         },\n         PassMode::ByVal(_) => None,"}, {"sha": "8914addadad4f93d62172eda7cb980b89386eaef", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/feec354d6584cb3d5a7a13f12e6ee3834bd01628/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feec354d6584cb3d5a7a13f12e6ee3834bd01628/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=feec354d6584cb3d5a7a13f12e6ee3834bd01628", "patch": "@@ -258,7 +258,7 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                     // we don't actually need to drop anything\n                 } else {\n                     let drop_place = trans_place(fx, location);\n-                    let arg_place = CPlace::temp(\n+                    let arg_place = CPlace::new_stack_slot(\n                         fx,\n                         fx.tcx.mk_ref(\n                             &ty::RegionKind::ReErased,\n@@ -937,7 +937,7 @@ pub fn trans_checked_int_binop<'a, 'tcx: 'a>(\n     // TODO: check for overflow\n     let has_overflow = fx.bcx.ins().iconst(types::I8, 0);\n \n-    let out_place = CPlace::temp(fx, out_ty);\n+    let out_place = CPlace::new_stack_slot(fx, out_ty);\n     let out_layout = out_place.layout();\n     out_place.write_cvalue(fx, CValue::ByValPair(res, has_overflow, out_layout));\n "}, {"sha": "248878a4be36b58df1a1e0d59529d1d8b6b773eb", "filename": "src/common.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/feec354d6584cb3d5a7a13f12e6ee3834bd01628/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feec354d6584cb3d5a7a13f12e6ee3834bd01628/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=feec354d6584cb3d5a7a13f12e6ee3834bd01628", "patch": "@@ -245,42 +245,27 @@ impl<'tcx> CValue<'tcx> {\n pub enum CPlace<'tcx> {\n     Var(Local, TyLayout<'tcx>),\n     Addr(Value, Option<Value>, TyLayout<'tcx>),\n+    Stack(StackSlot, TyLayout<'tcx>),\n }\n \n impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     pub fn layout(&self) -> TyLayout<'tcx> {\n         match *self {\n-            CPlace::Var(_, layout) | CPlace::Addr(_, _, layout) => layout,\n+            CPlace::Var(_, layout)\n+            | CPlace::Addr(_, _, layout)\n+            | CPlace::Stack(_, layout) => layout,\n         }\n     }\n \n-    pub fn temp(fx: &mut FunctionCx<'a, 'tcx, impl Backend>, ty: Ty<'tcx>) -> CPlace<'tcx> {\n+    pub fn new_stack_slot(fx: &mut FunctionCx<'a, 'tcx, impl Backend>, ty: Ty<'tcx>) -> CPlace<'tcx> {\n         let layout = fx.layout_of(ty);\n         assert!(!layout.is_unsized());\n         let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n             kind: StackSlotKind::ExplicitSlot,\n             size: layout.size.bytes() as u32,\n             offset: None,\n         });\n-        CPlace::Addr(\n-            fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0),\n-            None,\n-            layout,\n-        )\n-    }\n-\n-    pub fn from_stack_slot(\n-        fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n-        stack_slot: StackSlot,\n-        ty: Ty<'tcx>,\n-    ) -> CPlace<'tcx> {\n-        let layout = fx.layout_of(ty);\n-        assert!(!layout.is_unsized());\n-        CPlace::Addr(\n-            fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0),\n-            None,\n-            layout,\n-        )\n+        CPlace::Stack(stack_slot, layout)\n     }\n \n     pub fn to_cvalue(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> CValue<'tcx> {\n@@ -290,10 +275,13 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                 assert!(extra.is_none(), \"unsized values are not yet supported\");\n                 CValue::ByRef(addr, layout)\n             }\n+            CPlace::Stack(stack_slot, layout) => {\n+                CValue::ByRef(fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0), layout)\n+            }\n         }\n     }\n \n-    pub fn cplace_to_addr(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value {\n+    pub fn to_addr(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> Value {\n         match self.to_addr_maybe_unsized(fx) {\n             (addr, None) => addr,\n             (_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n@@ -306,6 +294,9 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n     ) -> (Value, Option<Value>) {\n         match self {\n             CPlace::Addr(addr, extra, _layout) => (addr, extra),\n+            CPlace::Stack(stack_slot, _layout) => {\n+                (fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0), None)\n+            }\n             CPlace::Var(_, _) => bug!(\"Expected CPlace::Addr, found CPlace::Var\"),\n         }\n     }\n@@ -363,6 +354,9 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                 return;\n             }\n             CPlace::Addr(addr, None, dst_layout) => (addr, dst_layout),\n+            CPlace::Stack(stack_slot, dst_layout) => {\n+                (fx.bcx.ins().stack_addr(fx.pointer_type, stack_slot, 0), dst_layout)\n+            }\n             CPlace::Addr(_, _, _) => bug!(\"Can't write value to unsized place {:?}\", self),\n         };\n \n@@ -409,7 +403,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         index: Value,\n     ) -> CPlace<'tcx> {\n         let (elem_layout, addr) = match self.layout().ty.sty {\n-            ty::Array(elem_ty, _) => (fx.layout_of(elem_ty), self.cplace_to_addr(fx)),\n+            ty::Array(elem_ty, _) => (fx.layout_of(elem_ty), self.to_addr(fx)),\n             ty::Slice(elem_ty) => (\n                 fx.layout_of(elem_ty),\n                 self.to_addr_maybe_unsized(fx).0,\n@@ -432,7 +426,7 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n         } else {\n             match self.layout().abi {\n                 Abi::ScalarPair(ref a, ref b) => {\n-                    let addr = self.cplace_to_addr(fx);\n+                    let addr = self.to_addr(fx);\n                     let ptr =\n                         fx.bcx\n                             .ins()\n@@ -455,14 +449,14 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n \n     pub fn write_place_ref(self, fx: &mut FunctionCx<'a, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n         if !self.layout().is_unsized() {\n-            let ptr = CValue::ByVal(self.cplace_to_addr(fx), dest.layout());\n+            let ptr = CValue::ByVal(self.to_addr(fx), dest.layout());\n             dest.write_cvalue(fx, ptr);\n         } else {\n             let (value, extra) = self.to_addr_maybe_unsized(fx);\n \n             match dest.layout().abi {\n                 Abi::ScalarPair(ref a, _) => {\n-                    let dest_addr = dest.cplace_to_addr(fx);\n+                    let dest_addr = dest.to_addr(fx);\n                     fx.bcx\n                         .ins()\n                         .store(MemFlags::new(), value, dest_addr, 0);\n@@ -488,6 +482,10 @@ impl<'a, 'tcx: 'a> CPlace<'tcx> {\n                 assert!(!layout.is_unsized());\n                 CPlace::Addr(addr, extra, layout)\n             }\n+            CPlace::Stack(stack_slot, _) => {\n+                assert!(!layout.is_unsized());\n+                CPlace::Stack(stack_slot, layout)\n+            }\n         }\n     }\n "}, {"sha": "a00ab64d889bada72963d06d54ef7ca58af7efe2", "filename": "src/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/feec354d6584cb3d5a7a13f12e6ee3834bd01628/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/feec354d6584cb3d5a7a13f12e6ee3834bd01628/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=feec354d6584cb3d5a7a13f12e6ee3834bd01628", "patch": "@@ -298,32 +298,20 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n         init, <T> () {\n             let layout = fx.layout_of(T);\n-            let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-                kind: StackSlotKind::ExplicitSlot,\n-                size: layout.size.bytes() as u32,\n-                offset: None,\n-            });\n-            let addr = fx.bcx.ins().stack_addr(pointer_ty(fx.tcx), stack_slot, 0);\n+            let inited_place = CPlace::new_stack_slot(fx, T);\n+            let addr = inited_place.to_addr(fx);\n             let zero_val = fx.bcx.ins().iconst(types::I8, 0);\n             let len_val = fx.bcx.ins().iconst(pointer_ty(fx.tcx), layout.size.bytes() as i64);\n             fx.bcx.call_memset(fx.module.target_config(), addr, zero_val, len_val);\n \n-            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, T);\n-            let uninit_val = uninit_place.to_cvalue(fx);\n-            ret.write_cvalue(fx, uninit_val);\n+            let inited_val = inited_place.to_cvalue(fx);\n+            ret.write_cvalue(fx, inited_val);\n         };\n         write_bytes, (v dst, v val, v count) {\n             fx.bcx.call_memset(fx.module.target_config(), dst, val, count);\n         };\n         uninit, <T> () {\n-            let layout = fx.layout_of(T);\n-            let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-                kind: StackSlotKind::ExplicitSlot,\n-                size: layout.size.bytes() as u32,\n-                offset: None,\n-            });\n-\n-            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, T);\n+            let uninit_place = CPlace::new_stack_slot(fx, T);\n             let uninit_val = uninit_place.to_cvalue(fx);\n             ret.write_cvalue(fx, uninit_val);\n         };"}]}