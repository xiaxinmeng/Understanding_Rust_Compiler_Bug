{"sha": "3b5d92c92336be12d0390cf8e93b76514c20d810", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNWQ5MmM5MjMzNmJlMTJkMDM5MGNmOGU5M2I3NjUxNGMyMGQ4MTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T21:31:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-03T21:31:07Z"}, "message": "auto merge of #16953 : nick29581/rust/dst-bug-7, r=pcwalton\n\nCloses #16947 \r\n\r\nr?", "tree": {"sha": "f499eaa4b608e2f2f649bce6c51022c594da4b9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f499eaa4b608e2f2f649bce6c51022c594da4b9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b5d92c92336be12d0390cf8e93b76514c20d810", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5d92c92336be12d0390cf8e93b76514c20d810", "html_url": "https://github.com/rust-lang/rust/commit/3b5d92c92336be12d0390cf8e93b76514c20d810", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b5d92c92336be12d0390cf8e93b76514c20d810/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "821afc4ce8367ed3d9e536925007aac5e8e3835e", "url": "https://api.github.com/repos/rust-lang/rust/commits/821afc4ce8367ed3d9e536925007aac5e8e3835e", "html_url": "https://github.com/rust-lang/rust/commit/821afc4ce8367ed3d9e536925007aac5e8e3835e"}, {"sha": "7d72bdb226b9f7918de997e2e10315c9d9a0a62d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d72bdb226b9f7918de997e2e10315c9d9a0a62d", "html_url": "https://github.com/rust-lang/rust/commit/7d72bdb226b9f7918de997e2e10315c9d9a0a62d"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "2034e4159a2836cc6d75542b9bfaf7cef3f01599", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d92c92336be12d0390cf8e93b76514c20d810/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d92c92336be12d0390cf8e93b76514c20d810/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=3b5d92c92336be12d0390cf8e93b76514c20d810", "patch": "@@ -1859,6 +1859,19 @@ pub fn cast_type_kind(tcx: &ty::ctxt, t: ty::t) -> cast_kind {\n     }\n }\n \n+fn cast_is_noop(t_in: ty::t, t_out: ty::t) -> bool {\n+    if ty::type_is_boxed(t_in) || ty::type_is_boxed(t_out) {\n+        return false;\n+    }\n+\n+    match (ty::deref(t_in, true), ty::deref(t_out, true)) {\n+        (Some(ty::mt{ ty: t_in, .. }), Some(ty::mt{ ty: t_out, .. })) => {\n+            t_in == t_out\n+        }\n+        _ => false\n+    }\n+}\n+\n fn trans_imm_cast<'a>(bcx: &'a Block<'a>,\n                       expr: &ast::Expr,\n                       id: ast::NodeId)\n@@ -1877,7 +1890,13 @@ fn trans_imm_cast<'a>(bcx: &'a Block<'a>,\n \n     // Convert the value to be cast into a ValueRef, either by-ref or\n     // by-value as appropriate given its type:\n-    let datum = unpack_datum!(bcx, trans(bcx, expr));\n+    let mut datum = unpack_datum!(bcx, trans(bcx, expr));\n+\n+    if cast_is_noop(datum.ty, t_out) {\n+        datum.ty = t_out;\n+        return DatumBlock::new(bcx, datum);\n+    }\n+\n     let newval = match (k_in, k_out) {\n         (cast_integral, cast_integral) => {\n             let llexpr = datum.to_llscalarish(bcx);"}, {"sha": "c70e85051749c20aca2abec4d80334eb004f7d1d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d92c92336be12d0390cf8e93b76514c20d810/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d92c92336be12d0390cf8e93b76514c20d810/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3b5d92c92336be12d0390cf8e93b76514c20d810", "patch": "@@ -1502,10 +1502,9 @@ fn check_cast(fcx: &FnCtxt,\n     } else if ty::type_is_region_ptr(t_e) && ty::type_is_unsafe_ptr(t_1) {\n         fn types_compatible(fcx: &FnCtxt, sp: Span,\n                             t1: ty::t, t2: ty::t) -> bool {\n-            if !ty::type_is_vec(t1) {\n-                // If the type being casted from is not a vector, this special\n-                // case does not apply.\n-                return false\n+            match ty::get(t1).sty {\n+                ty::ty_vec(_, Some(_)) => {}\n+                _ => return false\n             }\n             if ty::type_needs_infer(t2) {\n                 // This prevents this special case from going off when casting\n@@ -1529,7 +1528,7 @@ fn check_cast(fcx: &FnCtxt,\n         // need to special-case obtaining an unsafe pointer\n         // from a region pointer to a vector.\n \n-        /* this cast is only allowed from &[T] to *T or\n+        /* this cast is only allowed from &[T, ..n] to *T or\n         &T to *T. */\n         match (&ty::get(t_e).sty, &ty::get(t_1).sty) {\n             (&ty::ty_rptr(_, ty::mt { ty: mt1, mutbl: ast::MutImmutable }),"}, {"sha": "ef4a9edaa743e76b56e5707b0a31020b1f8eaf7d", "filename": "src/test/run-pass/dst-raw.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b5d92c92336be12d0390cf8e93b76514c20d810/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5d92c92336be12d0390cf8e93b76514c20d810/src%2Ftest%2Frun-pass%2Fdst-raw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-raw.rs?ref=3b5d92c92336be12d0390cf8e93b76514c20d810", "patch": "@@ -53,6 +53,15 @@ pub fn main() {\n         assert!(len == 3);\n     }\n \n+    // raw slice with explicit cast\n+    let a = &[1i, 2, 3] as *const [_];\n+    unsafe {\n+        let b = (*a)[2];\n+        assert!(b == 3);\n+        let len = (*a).len();\n+        assert!(len == 3);\n+    }\n+\n     // raw DST struct with slice\n     let c: *const Foo<[_]> = &Foo {f: [1i, 2, 3]};\n     unsafe {\n@@ -85,6 +94,14 @@ pub fn main() {\n         assert!(len == 3);\n     }\n \n+    let a = &mut [1i, 2, 3] as *mut [_];\n+    unsafe {\n+        let b = (*a)[2];\n+        assert!(b == 3);\n+        let len = (*a).len();\n+        assert!(len == 3);\n+    }\n+\n     let c: *mut Foo<[_]> = &mut Foo {f: [1i, 2, 3]};\n     unsafe {\n         let b = (&*c).f[0];"}]}