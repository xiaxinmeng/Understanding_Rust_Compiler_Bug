{"sha": "01198da2a2a6f3ce4ccf2017121867aed0b097cb", "node_id": "C_kwDOAAsO6NoAKDAxMTk4ZGEyYTJhNmYzY2U0Y2NmMjAxNzEyMTg2N2FlZDBiMDk3Y2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T08:51:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-05T08:51:18Z"}, "message": "Auto merge of #12159 - Veykril:completions-rev, r=Veykril\n\ninternal: Lift out macro bang property from completion PathKind enum", "tree": {"sha": "eb33512c5970b8b201acb1b5756ef098addf1cd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb33512c5970b8b201acb1b5756ef098addf1cd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01198da2a2a6f3ce4ccf2017121867aed0b097cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01198da2a2a6f3ce4ccf2017121867aed0b097cb", "html_url": "https://github.com/rust-lang/rust/commit/01198da2a2a6f3ce4ccf2017121867aed0b097cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01198da2a2a6f3ce4ccf2017121867aed0b097cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e789d73424d571b71dd1a4ddefc09b4d80de81c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e789d73424d571b71dd1a4ddefc09b4d80de81c6", "html_url": "https://github.com/rust-lang/rust/commit/e789d73424d571b71dd1a4ddefc09b4d80de81c6"}, {"sha": "8b092ec3371349d8353e9e7948921cae76d3d70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b092ec3371349d8353e9e7948921cae76d3d70f", "html_url": "https://github.com/rust-lang/rust/commit/8b092ec3371349d8353e9e7948921cae76d3d70f"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "7a02a3b33330270f60bdffe6a4688e0ab6074231", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01198da2a2a6f3ce4ccf2017121867aed0b097cb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01198da2a2a6f3ce4ccf2017121867aed0b097cb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=01198da2a2a6f3ce4ccf2017121867aed0b097cb", "patch": "@@ -161,10 +161,10 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n             (_, ItemInNs::Types(hir::ModuleDef::Module(_))) => true,\n             // and so are macros(except for attributes)\n             (\n-                PathKind::Expr | PathKind::Type | PathKind::Mac | PathKind::Pat,\n+                PathKind::Expr | PathKind::Type | PathKind::Item | PathKind::Pat,\n                 ItemInNs::Macros(mac),\n             ) => mac.is_fn_like(ctx.db),\n-            (PathKind::Mac, _) => true,\n+            (PathKind::Item, _) => true,\n \n             (PathKind::Expr, ItemInNs::Types(_) | ItemInNs::Values(_)) => true,\n "}, {"sha": "53262ae267bc605cb05afa42c7ab846861b5a742", "filename": "crates/ide-completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01198da2a2a6f3ce4ccf2017121867aed0b097cb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01198da2a2a6f3ce4ccf2017121867aed0b097cb/crates%2Fide-completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=01198da2a2a6f3ce4ccf2017121867aed0b097cb", "patch": "@@ -19,7 +19,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         Some(PathCompletionCtx {\n             is_absolute_path: false,\n             qualifier: None,\n-            kind: None | Some(PathKind::Expr | PathKind::Type | PathKind::Mac),\n+            kind: None | Some(PathKind::Expr | PathKind::Type | PathKind::Item),\n             ..\n         }) => (),\n         _ => return,"}, {"sha": "a41d89859a93fbc3b03f0769765b1377d160c523", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/01198da2a2a6f3ce4ccf2017121867aed0b097cb/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01198da2a2a6f3ce4ccf2017121867aed0b097cb/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=01198da2a2a6f3ce4ccf2017121867aed0b097cb", "patch": "@@ -47,19 +47,26 @@ pub(crate) enum Visible {\n pub(super) enum PathKind {\n     Expr,\n     Type,\n-    Attr { kind: AttrKind, annotated_item_kind: Option<SyntaxKind> },\n+    Attr {\n+        kind: AttrKind,\n+        annotated_item_kind: Option<SyntaxKind>,\n+    },\n     Derive,\n-    // This should be removed in favor of `has_macro_bang` in PathCompletionContext\n-    Mac,\n+    /// Path in item position, that is inside an (Assoc)ItemList\n+    Item,\n     Pat,\n-    Vis { has_in_token: bool },\n+    Vis {\n+        has_in_token: bool,\n+    },\n     Use,\n }\n \n #[derive(Debug)]\n pub(crate) struct PathCompletionCtx {\n     /// If this is a call with () already there (or {} in case of record patterns)\n     pub(super) has_call_parens: bool,\n+    /// If this has a macro call bang !\n+    pub(super) has_macro_bang: bool,\n     /// Whether this path stars with a `::`.\n     pub(super) is_absolute_path: bool,\n     /// The qualifier of the current path if it exists.\n@@ -942,6 +949,7 @@ impl<'a> CompletionContext<'a> {\n             has_type_args: false,\n             can_be_stmt: false,\n             in_loop_body: false,\n+            has_macro_bang: false,\n             kind: None,\n         };\n         let mut pat_ctx = None;\n@@ -970,7 +978,21 @@ impl<'a> CompletionContext<'a> {\n                         pat_ctx = Some(pattern_context_for(original_file, it.into()));\n                         Some(PathKind::Pat)\n                     },\n-                    ast::MacroCall(it) => it.excl_token().and(Some(PathKind::Mac)),\n+                    ast::MacroCall(it) => {\n+                        path_ctx.has_macro_bang = it.excl_token().is_some();\n+                        match it.syntax().parent().map(|it| it.kind()) {\n+                            Some(SyntaxKind::MACRO_PAT) => Some(PathKind::Pat),\n+                            Some(SyntaxKind::MACRO_TYPE) => Some(PathKind::Type),\n+                            Some(SyntaxKind::MACRO_EXPR) => Some(PathKind::Expr),\n+                            Some(\n+                                SyntaxKind::ITEM_LIST\n+                                | SyntaxKind::ASSOC_ITEM_LIST\n+                                | SyntaxKind::EXTERN_ITEM_LIST\n+                                | SyntaxKind::SOURCE_FILE\n+                            ) => Some(PathKind::Item),\n+                            _ => return Some(None),\n+                        }\n+                    },\n                     ast::Meta(meta) => (|| {\n                         let attr = meta.parent_attr()?;\n                         let kind = attr.kind();\n@@ -989,6 +1011,10 @@ impl<'a> CompletionContext<'a> {\n                     })(),\n                     ast::Visibility(it) => Some(PathKind::Vis { has_in_token: it.in_token().is_some() }),\n                     ast::UseTree(_) => Some(PathKind::Use),\n+                    ast::ItemList(_) => Some(PathKind::Item),\n+                    ast::AssocItemList(_) => Some(PathKind::Item),\n+                    ast::ExternItemList(_) => Some(PathKind::Item),\n+                    ast::SourceFile(_) => Some(PathKind::Item),\n                     _ => return None,\n                 }\n             };"}, {"sha": "cbf51af7cc0dacb210214af4aa85b9ca636ed5e2", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01198da2a2a6f3ce4ccf2017121867aed0b097cb/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01198da2a2a6f3ce4ccf2017121867aed0b097cb/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=01198da2a2a6f3ce4ccf2017121867aed0b097cb", "patch": "@@ -5,7 +5,7 @@ use ide_db::SymbolKind;\n use syntax::SmolStr;\n \n use crate::{\n-    context::PathKind,\n+    context::{PathCompletionCtx, PathKind},\n     item::{Builder, CompletionItem},\n     render::RenderContext,\n };\n@@ -33,8 +33,12 @@ fn render(\n     let is_fn_like = macro_.is_fn_like(completion.db);\n     let (bra, ket) = if is_fn_like { guess_macro_braces(&name, docs_str) } else { (\"\", \"\") };\n \n-    let needs_bang =\n-        is_fn_like && !matches!(completion.path_kind(), Some(PathKind::Mac | PathKind::Use));\n+    let needs_bang = match completion.path_context {\n+        Some(PathCompletionCtx { kind, has_macro_bang, .. }) => {\n+            is_fn_like && kind != Some(PathKind::Use) && !has_macro_bang\n+        }\n+        _ => is_fn_like,\n+    };\n \n     let mut item = CompletionItem::new(\n         SymbolKind::from(macro_.kind(completion.db)),"}]}