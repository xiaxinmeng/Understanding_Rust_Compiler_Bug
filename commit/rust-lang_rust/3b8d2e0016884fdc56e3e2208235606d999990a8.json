{"sha": "3b8d2e0016884fdc56e3e2208235606d999990a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiOGQyZTAwMTY4ODRmZGM1NmUzZTIyMDgyMzU2MDZkOTk5OTkwYTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-25T13:56:34Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:10Z"}, "message": "Rename ConstVal::to_u128 to to_raw_bits", "tree": {"sha": "d4d490fed15c895c25af89ab55d1765ec0ec39b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4d490fed15c895c25af89ab55d1765ec0ec39b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b8d2e0016884fdc56e3e2208235606d999990a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53IACgkQpp+NIls6\n19lgHxAAq5R4+EBKWIg1g+ja+yXAnjxVc/82nNbeM1kXMQYdFIqVb0QDI2eoHG3+\nTGJ2B4qvFdIhLY7xWWpQYE9W5DgS6i8EopJ5CK04uoJUdKEcBeR0EjFZj7YgVD3d\nhGWDTNbXx17aHX5UN64/4r6hjsX3+l4CAHGlXgWkuacNZGF+2DAi+pkDNC3T7vb+\ndRQ5x1MtBmCcCj92VmIpCWAcgINcHrHBHouf4GuH9qfibAuHSUpN185BR2092ShJ\nvds/up9nzt6c5u9o+yf/EqkOdITssOJmt0jcvWU984/6PgPVh6j3KiDDHwBNsRnJ\nOBfJBDa5I/uUI4l1ED2RwHdyVZj4OkJ1p4MDehZuSjudQKn5wwjVi8xoE8nWmBmZ\nfT3yiO/qWfDnuXlYumzwKKrUhi5zkNnTfcZDBISNNh2+kbcUHnRSwJoInmET8t0I\naHKyoRpEARoig874dvo3rRYw6QkQwImuWvXj95XgrDrjJTCJO+EVBB/ARendvaYs\nRp2tokPyg4O5Yj1cAv35FN6+D21jvMNXM/lMFQNnmuSBavmSmspuyWrHP7RKFMKq\nwlGwVne9ny4l5CBERDxaj03dL0OTRAehO564hRTdsRGNuqko9tczdE6ytO4fO9tO\nF/fLNEiM54RgatgHqjAI79tlF0d9jQOqFX5Oq8K3BjxG5TJhz9I=\n=/8ZU\n-----END PGP SIGNATURE-----", "payload": "tree d4d490fed15c895c25af89ab55d1765ec0ec39b7\nparent 2f2c90e733a703f69cf13ae79ec623901d42ba2c\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1516888594 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494450 +0100\n\nRename ConstVal::to_u128 to to_raw_bits\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b8d2e0016884fdc56e3e2208235606d999990a8", "html_url": "https://github.com/rust-lang/rust/commit/3b8d2e0016884fdc56e3e2208235606d999990a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b8d2e0016884fdc56e3e2208235606d999990a8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f2c90e733a703f69cf13ae79ec623901d42ba2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f2c90e733a703f69cf13ae79ec623901d42ba2c", "html_url": "https://github.com/rust-lang/rust/commit/2f2c90e733a703f69cf13ae79ec623901d42ba2c"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "a40147aa2a1f42ce08d871973574e00e885db4ce", "filename": "src/librustc/middle/const_val.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=3b8d2e0016884fdc56e3e2208235606d999990a8", "patch": "@@ -39,7 +39,7 @@ pub struct ByteArray<'tcx> {\n impl<'tcx> serialize::UseSpecializedDecodable for ByteArray<'tcx> {}\n \n impl<'tcx> ConstVal<'tcx> {\n-    pub fn to_u128(&self) -> Option<u128> {\n+    pub fn to_raw_bits(&self) -> Option<u128> {\n         match *self {\n             ConstVal::Value(Value::ByVal(PrimVal::Bytes(b))) => {\n                 Some(b)\n@@ -48,7 +48,7 @@ impl<'tcx> ConstVal<'tcx> {\n         }\n     }\n     pub fn unwrap_u64(&self) -> u64 {\n-        match self.to_u128() {\n+        match self.to_raw_bits() {\n             Some(val) => {\n                 assert_eq!(val as u64 as u128, val);\n                 val as u64"}, {"sha": "30d63b8443e3dec8eb152f728f207b72fb27dd75", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=3b8d2e0016884fdc56e3e2208235606d999990a8", "patch": "@@ -913,7 +913,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n         // Always promote `[T; 0]` (even when e.g. borrowed mutably).\n         let promotable = match expr_ty.sty {\n-            ty::TyArray(_, len) if len.val.to_u128() == Some(0) => true,\n+            ty::TyArray(_, len) if len.val.to_raw_bits() == Some(0) => true,\n             _ => promotable,\n         };\n "}, {"sha": "3e653cf126a8d521c6ecf7bf6658581a7ff6ae4b", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=3b8d2e0016884fdc56e3e2208235606d999990a8", "patch": "@@ -262,7 +262,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n                 }))\n             },\n             TyArray(ty, len) => {\n-                match len.val.to_u128() {\n+                match len.val.to_raw_bits() {\n                     // If the array is definitely non-empty, it's uninhabited if\n                     // the type of its elements is uninhabited.\n                     Some(n) if n != 0 => ty.uninhabited_from(visited, tcx),"}, {"sha": "4a5d9e228815e5e7fb79f1c4371632a091fb0ce0", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=3b8d2e0016884fdc56e3e2208235606d999990a8", "patch": "@@ -127,7 +127,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 indices.entry(value)\n                        .or_insert_with(|| {\n-                           options.push(value.val.to_u128().expect(\"switching on int\"));\n+                           options.push(value.val.to_raw_bits().expect(\"switching on int\"));\n                            options.len() - 1\n                        });\n                 true"}, {"sha": "3b9bbc0ba8b44f84bf4e45852b8346761905739a", "filename": "src/librustc_mir/const_eval/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_mir%2Fconst_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_mir%2Fconst_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2F_match.rs?ref=3b8d2e0016884fdc56e3e2208235606d999990a8", "patch": "@@ -446,7 +446,7 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n                 }))\n             }).collect()\n         }\n-        ty::TyArray(ref sub_ty, len) if len.val.to_u128().is_some() => {\n+        ty::TyArray(ref sub_ty, len) if len.val.to_raw_bits().is_some() => {\n             let len = len.val.unwrap_u64();\n             if len != 0 && cx.is_uninhabited(sub_ty) {\n                 vec![]"}, {"sha": "9dd48952208a9bed86565fb603ffdbaca8bf1927", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=3b8d2e0016884fdc56e3e2208235606d999990a8", "patch": "@@ -41,7 +41,7 @@ impl MirPass for SimplifyBranches {\n                 TerminatorKind::SwitchInt { discr: Operand::Constant(box Constant {\n                     literal: Literal::Value { ref value }, ..\n                 }), ref values, ref targets, .. } => {\n-                    if let Some(constint) = value.val.to_u128() {\n+                    if let Some(constint) = value.val.to_raw_bits() {\n                         let (otherwise, targets) = targets.split_last().unwrap();\n                         let mut ret = TerminatorKind::Goto { target: *otherwise };\n                         for (&v, t) in values.iter().zip(targets.iter()) {"}, {"sha": "fbdeb3334abd92f641c9694c6130c2038868a4f4", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=3b8d2e0016884fdc56e3e2208235606d999990a8", "patch": "@@ -804,7 +804,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n             }\n             ty::TyArray(ety, size) => self.open_drop_for_array(\n-                ety, size.val.to_u128().map(|i| i as u64)),\n+                ety, size.val.to_raw_bits().map(|i| i as u64)),\n             ty::TySlice(ety) => self.open_drop_for_array(ety, None),\n \n             _ => bug!(\"open drop from non-ADT `{:?}`\", ty)"}, {"sha": "56f2b30190f1a76ab5845a54ca088e54f17eb869", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8d2e0016884fdc56e3e2208235606d999990a8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3b8d2e0016884fdc56e3e2208235606d999990a8", "patch": "@@ -4040,7 +4040,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             };\n \n             if let Ok(count) = count {\n-                let zero_or_one = count.val.to_u128().map_or(false, |count| count <= 1);\n+                let zero_or_one = count.val.to_raw_bits().map_or(false, |count| count <= 1);\n                 if !zero_or_one {\n                     // For [foo, ..n] where n > 1, `foo` must have\n                     // Copy type:"}]}