{"sha": "9cae1fb94a50b768b184248ccccbadf082edf9d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljYWUxZmI5NGE1MGI3NjhiMTg0MjQ4Y2NjY2JhZGYwODJlZGY5ZDY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-23T01:15:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-23T01:15:39Z"}, "message": "Rollup merge of #81917 - rust-lang:relnotes-1.51.0, r=Mark-Simulacrum\n\nUpdate RELEASES.md for 1.51.0\n\n### [Rendered](https://github.com/rust-lang/rust/blob/relnotes-1.51.0/RELEASES.md)\n\nr? `@Mark-Simulacrum`\ncc `@rust-lang/release`", "tree": {"sha": "4712b6de8ac6d49273186481e00d340493d683c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4712b6de8ac6d49273186481e00d340493d683c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cae1fb94a50b768b184248ccccbadf082edf9d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWUE7CRBK7hj4Ov3rIwAAdHIIAGa9XwFpp3PKRmFq10bdDOqb\nLtoH0s49SGczZbg71kVi1+ZUa9sb8tu33gxOzv+Q2F305JQ1fiIxucHFOK7TPbw+\niqYVIeYdu1LxRX/12nMPYACzJcyUDhQ9Y5RujW9mONd8zj5xlvoqZSwMNxcY//Ea\nkHPXsMUNbCezH/z/VxAsnblgy+YKkV/dOx/37wtkCTCevbPguW+1oP4Z06wii1zs\nHJ7GlpzF8OM31e+0WIvy96+UZbgt7pQ0ifEhCYH6poG/kjhTDejArDKo1vRLHgBg\ntnLacWx1gy7eZdoGObohviHcRKkbQiReLaMQd5zKNrP1RyYd8X4XTpZvxIacXD0=\n=59fq\n-----END PGP SIGNATURE-----\n", "payload": "tree 4712b6de8ac6d49273186481e00d340493d683c6\nparent 0e96c62423434d2475630f704ec4f2811d896ed4\nparent c64e796d24210963b55fd3acbb8f145dffe52e20\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1616462139 +0900\ncommitter GitHub <noreply@github.com> 1616462139 +0900\n\nRollup merge of #81917 - rust-lang:relnotes-1.51.0, r=Mark-Simulacrum\n\nUpdate RELEASES.md for 1.51.0\n\n### [Rendered](https://github.com/rust-lang/rust/blob/relnotes-1.51.0/RELEASES.md)\n\nr? `@Mark-Simulacrum`\ncc `@rust-lang/release`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cae1fb94a50b768b184248ccccbadf082edf9d6", "html_url": "https://github.com/rust-lang/rust/commit/9cae1fb94a50b768b184248ccccbadf082edf9d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cae1fb94a50b768b184248ccccbadf082edf9d6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e96c62423434d2475630f704ec4f2811d896ed4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e96c62423434d2475630f704ec4f2811d896ed4", "html_url": "https://github.com/rust-lang/rust/commit/0e96c62423434d2475630f704ec4f2811d896ed4"}, {"sha": "c64e796d24210963b55fd3acbb8f145dffe52e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/c64e796d24210963b55fd3acbb8f145dffe52e20", "html_url": "https://github.com/rust-lang/rust/commit/c64e796d24210963b55fd3acbb8f145dffe52e20"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "579a8110483872fb4a35fe30929349e07ce1e51f", "filename": "RELEASES.md", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/9cae1fb94a50b768b184248ccccbadf082edf9d6/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/9cae1fb94a50b768b184248ccccbadf082edf9d6/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=9cae1fb94a50b768b184248ccccbadf082edf9d6", "patch": "@@ -1,3 +1,174 @@\n+Version 1.51.0 (2021-03-25)\n+============================\n+\n+Language\n+--------\n+- [You can now parameterize items such as functions, traits, and `struct`s by constant\n+  values in addition to by types and lifetimes.][79135] Also known as \"const generics\"\n+  E.g. you can now write the following. Note: Only values of primitive integers, \n+  `bool`, or `char` types are currently permitted.\n+  ```rust\n+  struct GenericArray<T, const LENGTH: usize> {\n+      inner: [T; LENGTH]\n+  }\n+\n+  impl<T, const LENGTH: usize> GenericArray<T, LENGTH> {\n+      const fn last(&self) -> Option<&T> {\n+          if LENGTH == 0 {\n+              None\n+          } else {\n+              Some(&self.inner[LENGTH - 1])\n+          }\n+      }\n+  }\n+  ```\n+\n+\n+Compiler\n+--------\n+\n+- [Added the `-Csplit-debuginfo` codegen option for macOS platforms.][79570]\n+  This option controls whether debug information is split across multiple files\n+  or packed into a single file. **Note** This option is unstable on other platforms.\n+- [Added tier 3\\* support for `aarch64_be-unknown-linux-gnu`,\n+  `aarch64-unknown-linux-gnu_ilp32`, and `aarch64_be-unknown-linux-gnu_ilp32` targets.][81455]\n+- [Added tier 3 support for `i386-unknown-linux-gnu` and `i486-unknown-linux-gnu` targets.][80662]\n+- [The `target-cpu=native` option will now detect individual features of CPUs.][80749]\n+- [Rust now uses `inline-asm` for stack probes when used with LLVM 11.0.1+][77885]\n+\n+\\* Refer to Rust's [platform support page][forge-platform-support] for more\n+information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+\n+- [`Box::downcast` is now also implemented for any `dyn Any + Send + Sync` object.][80945]\n+- [`str` now implements `AsMut<str>`.][80279]\n+- [`u64` and `u128` now implement `From<char>`.][79502]\n+- [`Error` is now implemented for `&T` where `T` implements `Error`.][75180]\n+- [`Poll::{map_ok, map_err}` are now implemented for `Poll<Option<Result<T, E>>>`.][80968]\n+- [`unsigned_abs` is now implemented for all signed integer types.][80959]\n+- [`io::Empty` now implements `io::Seek`.][78044]\n+- [`rc::Weak<T>` and `sync::Weak<T>`'s methods such as `as_ptr` are now implemented for\n+  `T: ?Sized` types.][80764]\n+\n+Stabilized APIs\n+---------------\n+\n+- [`Arc::decrement_strong_count`]\n+- [`Arc::increment_strong_count`]\n+- [`Once::call_once_force`]\n+- [`Peekable::next_if_eq`]\n+- [`Peekable::next_if`]\n+- [`Seek::stream_position`]\n+- [`array::IntoIter`]\n+- [`panic::panic_any`]\n+- [`ptr::addr_of!`]\n+- [`ptr::addr_of_mut!`]\n+- [`slice::fill_with`]\n+- [`slice::split_inclusive_mut`]\n+- [`slice::split_inclusive`]\n+- [`slice::strip_prefix`]\n+- [`slice::strip_suffix`]\n+- [`str::split_inclusive`]\n+- [`sync::OnceState`]\n+- [`task::Wake`]\n+\n+Cargo\n+-----\n+- [Added the `split-debuginfo` profile option to control the -Csplit-debuginfo\n+  codegen option.][cargo/9112]\n+- [Added the `resolver` field to `Cargo.toml` to enable the new feature resolver\n+  and CLI option behavior.][cargo/8997] Version 2 of the feature resolver will try\n+  to avoid unifying features of dependencies where that unification could be unwanted.\n+  Such as using the same dependency with a `std` feature in a build scripts and\n+  proc-macros, while using the `no-std` feature in the final binary. See the\n+  [Cargo book documentation][feature-resolver@2.0] for more information on the feature.\n+\n+Rustdoc\n+-------\n+\n+- [Rustdoc will now include documentation for methods available from `Deref` traits.][80653]\n+- [You can now provide a `--default-theme` flag which sets the default theme to use for\n+  documentation.][79642]\n+\n+Various improvements to intra-doc links:\n+\n+- [You can link to non-path primitives such as `slice`.][80181]\n+- [You can link to associated items.][74489]\n+- [You can now include generic parameters when linking to items, like `Vec<T>`.][76934]\n+\n+Misc\n+----\n+- [You can now pass `--include-ignored` to tests (e.g. with\n+  `cargo test -- --include-ignored`) to include testing tests marked `#[ignore]`.][80053]\n+\n+Compatibility Notes\n+-------------------\n+\n+- [WASI platforms no longer use the `wasm-bindgen` ABI, and instead use the wasm32 ABI.][79998]\n+- [`rustc` no longer promotes division, modulo and indexing operations to `const` that\n+  could fail.][80579]\n+- [The minimum version of glibc for the following platforms has been bumped to version 2.31\n+  for the distributed artifacts.][81521]\n+    - `armv5te-unknown-linux-gnueabi`\n+    - `sparc64-unknown-linux-gnu`\n+    - `thumbv7neon-unknown-linux-gnueabihf`\n+    - `armv7-unknown-linux-gnueabi`\n+    - `x86_64-unknown-linux-gnux32`\n+\n+Internal Only\n+-------------\n+\n+- [Consistently avoid constructing optimized MIR when not doing codegen][80718]\n+\n+[79135]: https://github.com/rust-lang/rust/pull/79135\n+[74489]: https://github.com/rust-lang/rust/pull/74489\n+[76934]: https://github.com/rust-lang/rust/pull/76934\n+[79570]: https://github.com/rust-lang/rust/pull/79570\n+[80181]: https://github.com/rust-lang/rust/pull/80181\n+[79642]: https://github.com/rust-lang/rust/pull/79642\n+[80945]: https://github.com/rust-lang/rust/pull/80945\n+[80279]: https://github.com/rust-lang/rust/pull/80279\n+[80053]: https://github.com/rust-lang/rust/pull/80053\n+[79502]: https://github.com/rust-lang/rust/pull/79502\n+[75180]: https://github.com/rust-lang/rust/pull/75180\n+[79135]: https://github.com/rust-lang/rust/pull/79135\n+[81521]: https://github.com/rust-lang/rust/pull/81521\n+[80968]: https://github.com/rust-lang/rust/pull/80968\n+[80959]: https://github.com/rust-lang/rust/pull/80959\n+[80718]: https://github.com/rust-lang/rust/pull/80718\n+[80653]: https://github.com/rust-lang/rust/pull/80653\n+[80579]: https://github.com/rust-lang/rust/pull/80579\n+[79998]: https://github.com/rust-lang/rust/pull/79998\n+[78044]: https://github.com/rust-lang/rust/pull/78044\n+[81455]: https://github.com/rust-lang/rust/pull/81455\n+[80764]: https://github.com/rust-lang/rust/pull/80764\n+[80749]: https://github.com/rust-lang/rust/pull/80749\n+[80662]: https://github.com/rust-lang/rust/pull/80662\n+[77885]: https://github.com/rust-lang/rust/pull/77885\n+[cargo/8997]: https://github.com/rust-lang/cargo/pull/8997\n+[cargo/9112]: https://github.com/rust-lang/cargo/pull/9112\n+[feature-resolver@2.0]: https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2\n+[`Once::call_once_force`]: https://doc.rust-lang.org/stable/std/sync/struct.Once.html#method.call_once_force\n+[`sync::OnceState`]: https://doc.rust-lang.org/stable/std/sync/struct.OnceState.html\n+[`panic::panic_any`]: https://doc.rust-lang.org/stable/std/panic/fn.panic_any.html\n+[`slice::strip_prefix`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.strip_prefix\n+[`slice::strip_suffix`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.strip_prefix\n+[`Arc::increment_strong_count`]: https://doc.rust-lang.org/nightly/std/sync/struct.Arc.html#method.increment_strong_count\n+[`Arc::decrement_strong_count`]: https://doc.rust-lang.org/nightly/std/sync/struct.Arc.html#method.decrement_strong_count\n+[`slice::fill_with`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.fill_with\n+[`ptr::addr_of!`]: https://doc.rust-lang.org/nightly/std/ptr/macro.addr_of.html\n+[`ptr::addr_of_mut!`]: https://doc.rust-lang.org/nightly/std/ptr/macro.addr_of_mut.html\n+[`array::IntoIter`]: https://doc.rust-lang.org/nightly/std/array/struct.IntoIter.html\n+[`slice::split_inclusive`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_inclusive\n+[`slice::split_inclusive_mut`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_inclusive_mut\n+[`str::split_inclusive`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_inclusive\n+[`task::Wake`]: https://doc.rust-lang.org/nightly/std/task/trait.Wake.html\n+[`Seek::stream_position`]: https://doc.rust-lang.org/nightly/std/io/trait.Seek.html#method.stream_position\n+[`Peekable::next_if`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if\n+[`Peekable::next_if_eq`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if_eq\n+\n Version 1.50.0 (2021-02-11)\n ============================\n "}]}