{"sha": "d3c041a08696b722da3276846e0064dd03742940", "node_id": "C_kwDOAAsO6NoAKGQzYzA0MWEwODY5NmI3MjJkYTMyNzY4NDZlMDA2NGRkMDM3NDI5NDA", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-10-03T15:29:38Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2022-10-06T14:00:45Z"}, "message": "extend `box-default` lint, add suggestion", "tree": {"sha": "6ba9ebe0d9062081334ebce92f43457fd8c49a43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ba9ebe0d9062081334ebce92f43457fd8c49a43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3c041a08696b722da3276846e0064dd03742940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c041a08696b722da3276846e0064dd03742940", "html_url": "https://github.com/rust-lang/rust/commit/d3c041a08696b722da3276846e0064dd03742940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3c041a08696b722da3276846e0064dd03742940/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac0e10aa68325235069a842f47499852b2dee79e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0e10aa68325235069a842f47499852b2dee79e", "html_url": "https://github.com/rust-lang/rust/commit/ac0e10aa68325235069a842f47499852b2dee79e"}], "stats": {"total": 260, "additions": 212, "deletions": 48}, "files": [{"sha": "f35a79dcc73905c11bbd6021b386ea1ba5677452", "filename": "clippy_lints/src/box_default.rs", "status": "modified", "additions": 81, "deletions": 13, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/d3c041a08696b722da3276846e0064dd03742940/clippy_lints%2Fsrc%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c041a08696b722da3276846e0064dd03742940/clippy_lints%2Fsrc%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbox_default.rs?ref=d3c041a08696b722da3276846e0064dd03742940", "patch": "@@ -1,5 +1,12 @@\n-use clippy_utils::{diagnostics::span_lint_and_help, is_default_equivalent, path_def_id};\n-use rustc_hir::{Expr, ExprKind, QPath};\n+use clippy_utils::{\n+    diagnostics::span_lint_and_sugg, get_parent_node, is_default_equivalent, macros::macro_backtrace, match_path,\n+    path_def_id, paths, ty::expr_sig,\n+};\n+use rustc_errors::Applicability;\n+use rustc_hir::{\n+    intravisit::{walk_ty, Visitor},\n+    Block, Expr, ExprKind, Local, Node, QPath, TyKind,\n+};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -15,12 +22,6 @@ declare_clippy_lint! {\n     /// Second, `Box::default()` can be faster\n     /// [in certain cases](https://nnethercote.github.io/perf-book/standard-library-types.html#box).\n     ///\n-    /// ### Known problems\n-    /// The lint may miss some cases (e.g. Box::new(String::from(\"\"))).\n-    /// On the other hand, it will trigger on cases where the `default`\n-    /// code comes from a macro that does something different based on\n-    /// e.g. target operating system.\n-    ///\n     /// ### Example\n     /// ```rust\n     /// let x: Box<String> = Box::new(Default::default());\n@@ -41,21 +42,88 @@ impl LateLintPass<'_> for BoxDefault {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if let ExprKind::Call(box_new, [arg]) = expr.kind\n             && let ExprKind::Path(QPath::TypeRelative(ty, seg)) = box_new.kind\n-            && let ExprKind::Call(..) = arg.kind\n+            && let ExprKind::Call(arg_path, ..) = arg.kind\n             && !in_external_macro(cx.sess(), expr.span)\n-            && expr.span.eq_ctxt(arg.span)\n+            && (expr.span.eq_ctxt(arg.span) || is_vec_expn(cx, arg))\n             && seg.ident.name == sym::new\n             && path_def_id(cx, ty) == cx.tcx.lang_items().owned_box()\n             && is_default_equivalent(cx, arg)\n         {\n-            span_lint_and_help(\n+            let arg_ty = cx.typeck_results().expr_ty(arg);\n+            span_lint_and_sugg(\n                 cx,\n                 BOX_DEFAULT,\n                 expr.span,\n                 \"`Box::new(_)` of default value\",\n-                None,\n-                \"use `Box::default()` instead\",\n+                \"try\",\n+                if is_plain_default(arg_path) || given_type(cx, expr) {\n+                    \"Box::default()\".into()\n+                } else {\n+                    format!(\"Box::<{arg_ty}>::default()\")\n+                },\n+                Applicability::MachineApplicable\n             );\n         }\n     }\n }\n+\n+fn is_plain_default(arg_path: &Expr<'_>) -> bool {\n+    // we need to match the actual path so we don't match e.g. \"u8::default\"\n+    if let ExprKind::Path(QPath::Resolved(None, path)) = &arg_path.kind {\n+        // avoid generic parameters\n+        match_path(path, &paths::DEFAULT_TRAIT_METHOD) && path.segments.iter().all(|seg| seg.args.is_none())\n+    } else {\n+        false\n+    }\n+}\n+\n+fn is_vec_expn(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    macro_backtrace(expr.span)\n+        .next()\n+        .map_or(false, |call| cx.tcx.is_diagnostic_item(sym::vec_macro, call.def_id))\n+}\n+\n+#[derive(Default)]\n+struct InferVisitor(bool);\n+\n+impl<'tcx> Visitor<'tcx> for InferVisitor {\n+    fn visit_ty(&mut self, t: &rustc_hir::Ty<'_>) {\n+        self.0 |= matches!(t.kind, TyKind::Infer);\n+        if !self.0 {\n+            walk_ty(self, t);\n+        }\n+    }\n+}\n+\n+fn given_type(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    match get_parent_node(cx.tcx, expr.hir_id) {\n+        Some(Node::Local(Local { ty: Some(ty), .. })) => {\n+            let mut v = InferVisitor::default();\n+            v.visit_ty(ty);\n+            !v.0\n+        },\n+        Some(\n+            Node::Expr(Expr {\n+                kind: ExprKind::Call(path, args),\n+                ..\n+            }) | Node::Block(Block {\n+                expr:\n+                    Some(Expr {\n+                        kind: ExprKind::Call(path, args),\n+                        ..\n+                    }),\n+                ..\n+            }),\n+        ) => {\n+            if let Some(index) = args.iter().position(|arg| arg.hir_id == expr.hir_id) &&\n+                let Some(sig) = expr_sig(cx, path) &&\n+                let Some(input) = sig.input(index)\n+            {\n+                input.no_bound_vars().is_some()\n+            } else {\n+                false\n+            }\n+        },\n+        _ => false,\n+    }\n+}"}, {"sha": "e6492d76260e2d69fd726321aa10c70edc01a335", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d3c041a08696b722da3276846e0064dd03742940/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c041a08696b722da3276846e0064dd03742940/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=d3c041a08696b722da3276846e0064dd03742940", "patch": "@@ -815,13 +815,37 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n                 false\n             }\n         },\n-        ExprKind::Call(repl_func, _) => is_default_equivalent_call(cx, repl_func),\n+        ExprKind::Call(repl_func, []) => is_default_equivalent_call(cx, repl_func),\n+        ExprKind::Call(from_func, [ref arg]) => is_default_equivalent_from(cx, from_func, arg),\n         ExprKind::Path(qpath) => is_res_lang_ctor(cx, cx.qpath_res(qpath, e.hir_id), OptionNone),\n         ExprKind::AddrOf(rustc_hir::BorrowKind::Ref, _, expr) => matches!(expr.kind, ExprKind::Array([])),\n         _ => false,\n     }\n }\n \n+fn is_default_equivalent_from(cx: &LateContext<'_>, from_func: &Expr<'_>, arg: &Expr<'_>) -> bool {\n+    if let ExprKind::Path(QPath::TypeRelative(ty, seg)) = from_func.kind &&\n+        seg.ident.name == sym::from\n+    {\n+        match arg.kind {\n+            ExprKind::Lit(hir::Lit {\n+                node: LitKind::Str(ref sym, _),\n+                ..\n+            }) => return sym.is_empty() && is_path_diagnostic_item(cx, ty, sym::String),\n+            ExprKind::Array([]) => return is_path_diagnostic_item(cx, ty, sym::Vec),\n+            ExprKind::Repeat(_, ArrayLen::Body(len)) => {\n+                if let ExprKind::Lit(ref const_lit) = cx.tcx.hir().body(len.body).value.kind &&\n+                    let LitKind::Int(v, _) = const_lit.node\n+                {\n+                        return v == 0 && is_path_diagnostic_item(cx, ty, sym::Vec);\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n+    false\n+}\n+\n /// Checks if the top level expression can be moved into a closure as is.\n /// Currently checks for:\n /// * Break/Continue outside the given loop HIR ids."}, {"sha": "1c670c7733377f04f3dcaefdd4158b7ff59332f2", "filename": "src/docs/box_default.txt", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d3c041a08696b722da3276846e0064dd03742940/src%2Fdocs%2Fbox_default.txt", "raw_url": "https://github.com/rust-lang/rust/raw/d3c041a08696b722da3276846e0064dd03742940/src%2Fdocs%2Fbox_default.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fbox_default.txt?ref=d3c041a08696b722da3276846e0064dd03742940", "patch": "@@ -7,12 +7,6 @@ First, it's more complex, involving two calls instead of one.\n Second, `Box::default()` can be faster\n [in certain cases](https://nnethercote.github.io/perf-book/standard-library-types.html#box).\n \n-### Known problems\n-The lint may miss some cases (e.g. Box::new(String::from(\"\"))).\n-On the other hand, it will trigger on cases where the `default`\n-code comes from a macro that does something different based on\n-e.g. target operating system.\n-\n ### Example\n ```\n let x: Box<String> = Box::new(Default::default());"}, {"sha": "7fbb272ce5a3ec105f64ecb2c088b84755fb7587", "filename": "tests/ui/box_default.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d3c041a08696b722da3276846e0064dd03742940/tests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d3c041a08696b722da3276846e0064dd03742940/tests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.fixed?ref=d3c041a08696b722da3276846e0064dd03742940", "patch": "@@ -0,0 +1,43 @@\n+// run-rustfix\n+#![warn(clippy::box_default)]\n+\n+#[derive(Default)]\n+struct ImplementsDefault;\n+\n+struct OwnDefault;\n+\n+impl OwnDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+macro_rules! outer {\n+    ($e: expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() {\n+    let _string: Box<String> = Box::default();\n+    let _byte = Box::<u8>::default();\n+    let _vec = Box::<std::vec::Vec<u8>>::default();\n+    let _impl = Box::<ImplementsDefault>::default();\n+    let _impl2 = Box::<ImplementsDefault>::default();\n+    let _impl3: Box<ImplementsDefault> = Box::default();\n+    let _own = Box::new(OwnDefault::default()); // should not lint\n+    let _in_macro = outer!(Box::<std::string::String>::default());\n+    let _string_default = outer!(Box::<std::string::String>::default());\n+    let _vec2: Box<Vec<ImplementsDefault>> = Box::default();\n+    let _vec3: Box<Vec<bool>> = Box::default();\n+    let _vec4: Box<_> = Box::<std::vec::Vec<bool>>::default();\n+    let _more = ret_ty_fn();\n+    call_ty_fn(Box::default());\n+}\n+\n+fn ret_ty_fn() -> Box<bool> {\n+    Box::<bool>::default()\n+}\n+\n+#[allow(clippy::boxed_local)]\n+fn call_ty_fn(_b: Box<u8>) {}"}, {"sha": "64c4f3887af7d0f11c3fcc34654bf0b528a6714c", "filename": "tests/ui/box_default.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d3c041a08696b722da3276846e0064dd03742940/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3c041a08696b722da3276846e0064dd03742940/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=d3c041a08696b722da3276846e0064dd03742940", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n #![warn(clippy::box_default)]\n \n #[derive(Default)]\n@@ -26,6 +27,17 @@ fn main() {\n     let _impl3: Box<ImplementsDefault> = Box::new(Default::default());\n     let _own = Box::new(OwnDefault::default()); // should not lint\n     let _in_macro = outer!(Box::new(String::new()));\n-    // false negative: default is from different expansion\n+    let _string_default = outer!(Box::new(String::from(\"\")));\n     let _vec2: Box<Vec<ImplementsDefault>> = Box::new(vec![]);\n+    let _vec3: Box<Vec<bool>> = Box::new(Vec::from([]));\n+    let _vec4: Box<_> = Box::new(Vec::from([false; 0]));\n+    let _more = ret_ty_fn();\n+    call_ty_fn(Box::new(u8::default()));\n }\n+\n+fn ret_ty_fn() -> Box<bool> {\n+    Box::new(bool::default())\n+}\n+\n+#[allow(clippy::boxed_local)]\n+fn call_ty_fn(_b: Box<u8>) {}"}, {"sha": "313255fc950eed54f1dfa222e8e416d944f46ae5", "filename": "tests/ui/box_default.stderr", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/d3c041a08696b722da3276846e0064dd03742940/tests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3c041a08696b722da3276846e0064dd03742940/tests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.stderr?ref=d3c041a08696b722da3276846e0064dd03742940", "patch": "@@ -1,59 +1,82 @@\n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:21:32\n+  --> $DIR/box_default.rs:22:32\n    |\n LL |     let _string: Box<String> = Box::new(Default::default());\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n    |\n-   = help: use `Box::default()` instead\n    = note: `-D clippy::box-default` implied by `-D warnings`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:22:17\n+  --> $DIR/box_default.rs:23:17\n    |\n LL |     let _byte = Box::new(u8::default());\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use `Box::default()` instead\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<u8>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:23:16\n+  --> $DIR/box_default.rs:24:16\n    |\n LL |     let _vec = Box::new(Vec::<u8>::new());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use `Box::default()` instead\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<std::vec::Vec<u8>>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:24:17\n+  --> $DIR/box_default.rs:25:17\n    |\n LL |     let _impl = Box::new(ImplementsDefault::default());\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use `Box::default()` instead\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:25:18\n+  --> $DIR/box_default.rs:26:18\n    |\n LL |     let _impl2 = Box::new(<ImplementsDefault as Default>::default());\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use `Box::default()` instead\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:26:42\n+  --> $DIR/box_default.rs:27:42\n    |\n LL |     let _impl3: Box<ImplementsDefault> = Box::new(Default::default());\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: use `Box::default()` instead\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n \n error: `Box::new(_)` of default value\n-  --> $DIR/box_default.rs:28:28\n+  --> $DIR/box_default.rs:29:28\n    |\n LL |     let _in_macro = outer!(Box::new(String::new()));\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<std::string::String>::default()`\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:30:34\n+   |\n+LL |     let _string_default = outer!(Box::new(String::from(\"\")));\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<std::string::String>::default()`\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:31:46\n+   |\n+LL |     let _vec2: Box<Vec<ImplementsDefault>> = Box::new(vec![]);\n+   |                                              ^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:32:33\n+   |\n+LL |     let _vec3: Box<Vec<bool>> = Box::new(Vec::from([]));\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:33:25\n+   |\n+LL |     let _vec4: Box<_> = Box::new(Vec::from([false; 0]));\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<std::vec::Vec<bool>>::default()`\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:35:16\n+   |\n+LL |     call_ty_fn(Box::new(u8::default()));\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::default()`\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:39:5\n    |\n-   = help: use `Box::default()` instead\n+LL |     Box::new(bool::default())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<bool>::default()`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 13 previous errors\n "}]}