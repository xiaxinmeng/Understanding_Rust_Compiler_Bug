{"sha": "bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMmY2YTUwMTFmOTM4MDIzZDBlYWQ2NGE3NDZlMGZhODJmOTFlZTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-30T13:55:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-30T13:55:11Z"}, "message": "Merge pull request #2821 from mati865/rust-2018-migration\n\nRust 2018 migration", "tree": {"sha": "470bd57cf874fd86841144ee944b7fa59992a3b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/470bd57cf874fd86841144ee944b7fa59992a3b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbDq0/CRBK7hj4Ov3rIwAAdHIIAIJWH0STEZqN+ooqCeceqCsU\nbE1iGnnecYKpPl+cD188VQ9oW+zYO0uYxwzBDZEoGOR0UAEbSWj/c8STLcYzt7gt\nBrvqbKncj9CcfBiMu5i977XtWvT/+WszriGF7jRbEnKDafU/Z8M8gd6W91uw4XEo\nCSa2mtmeTncaie+mNnhpSZoXFZO9xVLn6BY3wCLlAhb4pcKSKo6O3YrgfHjtGSqc\n3JZTTErGrZ3s049R2fIIg4gvfgA2EyHXBbw7fzhCowYsB02wQb516An+Q4eEAb00\noEMe3svCzGWusSYvs+/r+OX1dQbUfjuzQ/GRHg0z+y9DnDrFWrKLJ1/oiE6xjz0=\n=sxn/\n-----END PGP SIGNATURE-----\n", "payload": "tree 470bd57cf874fd86841144ee944b7fa59992a3b6\nparent b799c1eeb5a86392664ba30d3309382b46ad4ad7\nparent cc8c52c961d273eed81753b75cab8cc83baa4387\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1527688511 +0200\ncommitter GitHub <noreply@github.com> 1527688511 +0200\n\nMerge pull request #2821 from mati865/rust-2018-migration\n\nRust 2018 migration"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "html_url": "https://github.com/rust-lang/rust/commit/bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b799c1eeb5a86392664ba30d3309382b46ad4ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b799c1eeb5a86392664ba30d3309382b46ad4ad7", "html_url": "https://github.com/rust-lang/rust/commit/b799c1eeb5a86392664ba30d3309382b46ad4ad7"}, {"sha": "cc8c52c961d273eed81753b75cab8cc83baa4387", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8c52c961d273eed81753b75cab8cc83baa4387", "html_url": "https://github.com/rust-lang/rust/commit/cc8c52c961d273eed81753b75cab8cc83baa4387"}], "stats": {"total": 376, "additions": 192, "deletions": 184}, "files": [{"sha": "feafb83f3c53718330c439ee4fbf3391476d2f15", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,3 +1,5 @@\n+cargo-features = [\"edition\"]\n+\n [package]\n name = \"clippy\"\n version = \"0.0.206\"\n@@ -15,6 +17,7 @@ license = \"MPL-2.0\"\n keywords = [\"clippy\", \"lint\", \"plugin\"]\n categories = [\"development-tools\", \"development-tools::cargo-plugins\"]\n build = \"build.rs\"\n+edition = \"2018\"\n \n [badges]\n travis-ci = { repository = \"rust-lang-nursery/rust-clippy\" }"}, {"sha": "28785f633c31032eb09a5fadc898aebf7f94d030", "filename": "ci/integration-tests.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/ci%2Fintegration-tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/ci%2Fintegration-tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fintegration-tests.sh?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,5 +1,5 @@\n set -x\n-cargo install --force\n+cargo install --force --path .\n \n echo \"Running integration test for crate ${INTEGRATION}\"\n "}, {"sha": "b3e45129d804f72adf2d4d9bc87ed488cfa632ce", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,3 +1,5 @@\n+cargo-features = [\"edition\"]\n+\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n@@ -14,6 +16,7 @@ repository = \"https://github.com/rust-lang-nursery/rust-clippy\"\n readme = \"README.md\"\n license = \"MPL-2.0\"\n keywords = [\"clippy\", \"lint\", \"plugin\"]\n+edition = \"2018\"\n \n [dependencies]\n cargo_metadata = \"0.5\""}, {"sha": "704546a1eb3e94bbaa229e6100c5c4023ceaec13", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::*;\n use std::f64::consts as f64;\n use syntax::ast::{FloatTy, Lit, LitKind};\n use syntax::symbol;\n-use utils::span_lint;\n+use crate::utils::span_lint;\n \n /// **What it does:** Checks for floating point literals that approximate\n /// constants which are defined in"}, {"sha": "ff32fcb784322ae021cf1e88af1bb89bb38e2e8c", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir;\n use rustc::lint::*;\n use syntax::codemap::Span;\n-use utils::span_lint;\n+use crate::utils::span_lint;\n \n /// **What it does:** Checks for plain integer arithmetic.\n ///"}, {"sha": "6002960fe2cde7dafd13f2236974e05ff77a187f", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,10 +1,10 @@\n-use consts::{constant, Constant};\n+use crate::consts::{constant, Constant};\n use rustc::hir;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::RangeLimits;\n-use utils::higher::Range;\n-use utils::{self, higher};\n+use crate::utils::higher::Range;\n+use crate::utils::{self, higher};\n \n /// **What it does:** Checks for out of bounds array indexing with a constant\n /// index."}, {"sha": "44398a9710fb6db82d06dabc5ad9dd2c4da4f0ba", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,8 +2,8 @@ use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::*;\n use syntax::ast;\n-use utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n-use utils::{higher, sugg};\n+use crate::utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n+use crate::utils::{higher, sugg};\n \n /// **What it does:** Checks for compound assignment operations (`+=` and\n /// similar).\n@@ -145,7 +145,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                              $($trait_name:ident:$full_trait_name:ident),+) => {\n                                 match $op {\n                                     $(hir::$full_trait_name => {\n-                                        let [krate, module] = ::utils::paths::OPS_MODULE;\n+                                        let [krate, module] = crate::utils::paths::OPS_MODULE;\n                                         let path = [krate, module, concat!(stringify!($trait_name), \"Assign\")];\n                                         let trait_id = if let Some(trait_id) = get_trait_def_id($cx, &path) {\n                                             trait_id"}, {"sha": "04ef9d00215b56b08a5e952bf5dbf670200524e9", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,13 +1,13 @@\n //! checks for attributes\n \n-use reexport::*;\n+use crate::reexport::*;\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty::{self, TyCtxt};\n use semver::Version;\n use syntax::ast::{AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use syntax::codemap::Span;\n-use utils::{\n+use crate::utils::{\n     in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then,\n     without_block_comments,\n };"}, {"sha": "f77b61bf28043d7b8641a7e4577dd51c02f4693b", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,9 +2,9 @@ use rustc::hir::*;\n use rustc::lint::*;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n-use utils::{span_lint, span_lint_and_then};\n-use utils::sugg::Sugg;\n-use consts::{constant, Constant};\n+use crate::utils::{span_lint, span_lint_and_then};\n+use crate::utils::sugg::Sugg;\n+use crate::consts::{constant, Constant};\n \n /// **What it does:** Checks for incompatible bit masks in comparisons.\n ///"}, {"sha": "f1e8be4dba9df8d2d9d1d0733fcd29abfafdab9c", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::span_lint;\n+use crate::utils::span_lint;\n \n /// **What it does:** Checks for usage of blacklisted names for variables, such\n /// as `foo`."}, {"sha": "5f484341186362b1caa1b4568d81c97a84609a20", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use utils::*;\n+use crate::utils::*;\n \n /// **What it does:** Checks for `if` conditions that use blocks to contain an\n /// expression."}, {"sha": "c814c1abcd1327cda58ed329cecf96318786a4eb", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::*;\n use syntax::ast::{LitKind, NodeId, DUMMY_NODE_ID};\n use syntax::codemap::{dummy_spanned, Span, DUMMY_SP};\n use syntax::util::ThinVec;\n-use utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq};\n+use crate::utils::{in_macro, paths, match_type, snippet_opt, span_lint_and_then, SpanlessEq};\n \n /// **What it does:** Checks for boolean expressions that can be written more\n /// concisely."}, {"sha": "165c46164bbc255f6bcb9cd1e2cb21fec71ae159", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::{Name, UintTy};\n-use utils::{contains_name, get_pat_name, match_type, paths, single_segment_path, snippet, span_lint_and_sugg,\n+use crate::utils::{contains_name, get_pat_name, match_type, paths, single_segment_path, snippet, span_lint_and_sugg,\n             walk_ptrs_ty};\n \n /// **What it does:** Checks for naive byte counts"}, {"sha": "786148f6eec63a7f9783f73d437594cba239bd9c", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -15,8 +15,8 @@\n use rustc::lint::*;\n use syntax::ast;\n \n-use utils::{in_macro, snippet_block, span_lint_and_sugg, span_lint_and_then};\n-use utils::sugg::Sugg;\n+use crate::utils::{in_macro, snippet_block, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::sugg::Sugg;\n \n /// **What it does:** Checks for nested `if` statements which can be collapsed\n /// by `&&`-combining their conditions and for `else { if ... }` expressions"}, {"sha": "bde5ee4dc8b60e5453ac463d1cb1cb43fe028dad", "filename": "clippy_lints/src/const_static_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconst_static_lifetime.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use syntax::ast::*;\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n-use utils::{in_macro, snippet, span_lint_and_then};\n+use crate::utils::{in_macro, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for constants with an explicit `'static` lifetime.\n ///"}, {"sha": "c700af1e6e39f6e617429a54b0026c78dd17fe31", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -14,7 +14,7 @@ use std::rc::Rc;\n use syntax::ast::{FloatTy, LitKind};\n use syntax::ptr::P;\n use rustc::middle::const_val::ConstVal;\n-use utils::{sext, unsext, clip};\n+use crate::utils::{sext, unsext, clip};\n \n #[derive(Debug, Copy, Clone)]\n pub enum FloatWidth {"}, {"sha": "abbc46811667963214c3e92eb67c15f0cd515c80", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -5,8 +5,8 @@ use std::collections::HashMap;\n use std::collections::hash_map::Entry;\n use syntax::symbol::LocalInternedString;\n use syntax::util::small_vector::SmallVector;\n-use utils::{SpanlessEq, SpanlessHash};\n-use utils::{get_parent_expr, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{SpanlessEq, SpanlessHash};\n+use crate::utils::{get_parent_expr, in_macro, snippet, span_lint_and_then, span_note_and_lint};\n \n /// **What it does:** Checks for consecutive `if`s with the same condition.\n ///"}, {"sha": "ea5f5cf9b589176f7337ca3d7eec8a1493b5266e", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use syntax::ast::{Attribute, NodeId};\n use syntax::codemap::Span;\n \n-use utils::{in_macro, is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n+use crate::utils::{in_macro, is_allowed, match_type, paths, span_help_and_lint, LimitStack};\n \n /// **What it does:** Checks for methods with high cyclomatic complexity.\n ///"}, {"sha": "364c019c486c5769822c78ff911e04dac3deac97", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,8 +2,8 @@ use rustc::lint::*;\n use rustc::ty::{self, Ty};\n use rustc::hir::*;\n use syntax::codemap::Span;\n-use utils::paths;\n-use utils::{is_automatically_derived, is_copy, match_path, span_lint_and_then};\n+use crate::utils::paths;\n+use crate::utils::{is_automatically_derived, is_copy, match_path, span_lint_and_then};\n \n /// **What it does:** Checks for deriving `Hash` but implementing `PartialEq`\n /// explicitly or vice versa."}, {"sha": "dfd59af9adb369b18001228edcac67a2acd2baad", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,7 +4,7 @@ use rustc::lint::*;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n use syntax_pos::Pos;\n-use utils::span_lint;\n+use crate::utils::span_lint;\n use url::Url;\n \n /// **What it does:** Checks for the presence of `_`, `::` or camel-case words"}, {"sha": "ba398c820647a1501f2f5e6475cfab6109dcd02e", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::*;\n use rustc::lint::*;\n use syntax::codemap::Span;\n \n-use utils::{snippet, span_lint_and_sugg, SpanlessEq};\n+use crate::utils::{snippet, span_lint_and_sugg, SpanlessEq};\n \n /// **What it does:** Checks for double comparions that could be simpified to a single expression.\n ///"}, {"sha": "eb271a899c4735af8608864f7c3f10afa140f08f", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::ty;\n use rustc::hir::*;\n-use utils::{is_copy, match_def_path, opt_def_id, paths, span_note_and_lint};\n+use crate::utils::{is_copy, match_def_path, opt_def_id, paths, span_note_and_lint};\n \n /// **What it does:** Checks for calls to `std::mem::drop` with a reference\n /// instead of an owned value."}, {"sha": "96c215df405b194b4dfeaff802372d4fa197a7f7", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,7 +3,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n \n-use utils::{in_external_macro, span_lint_and_sugg};\n+use crate::utils::{in_external_macro, span_lint_and_sugg};\n \n /// **What it does:** Checks for usage of if expressions with an `else if` branch,\n /// but without a final `else` branch."}, {"sha": "3265338ce12ceaae2819705c14ad5d762fbf7d22", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::span_lint_and_then;\n+use crate::utils::span_lint_and_then;\n \n /// **What it does:** Checks for `enum`s with no variants.\n ///"}, {"sha": "24e1b2d83876ad2863e9b46136dadcadb82c3fa7", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,8 +2,8 @@ use rustc::hir::*;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::*;\n use syntax::codemap::Span;\n-use utils::SpanlessEq;\n-use utils::{get_item_name, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::SpanlessEq;\n+use crate::utils::{get_item_name, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n \n /// **What it does:** Checks for uses of `contains_key` + `insert` on `HashMap`\n /// or `BTreeMap`."}, {"sha": "f191150f3e7916dde79fa179594f6a2c6f111414", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -6,8 +6,8 @@ use rustc::hir::*;\n use rustc::ty;\n use rustc::ty::subst::Substs;\n use syntax::ast::{IntTy, UintTy};\n-use utils::span_lint;\n-use consts::{Constant, miri_to_const};\n+use crate::utils::span_lint;\n+use crate::consts::{Constant, miri_to_const};\n use rustc::ty::util::IntTypeExt;\n use rustc::mir::interpret::GlobalId;\n "}, {"sha": "943a5406b54fe7dd020ebb39c07ff973654b779d", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::def::Def;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n-use utils::span_lint;\n+use crate::utils::span_lint;\n \n /// **What it does:** Checks for `use Enum::*`.\n ///"}, {"sha": "f11edbeefa31fc56eb3222f79d69625e211a2da9", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,8 +4,8 @@ use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::symbol::LocalInternedString;\n-use utils::{span_help_and_lint, span_lint};\n-use utils::{camel_case_from, camel_case_until, in_macro};\n+use crate::utils::{span_help_and_lint, span_lint};\n+use crate::utils::{camel_case_from, camel_case_until, in_macro};\n \n /// **What it does:** Detects enumeration variants that are prefixed or suffixed\n /// by the same characters."}, {"sha": "51b64afa6ea6a17091cbb56134faa7a07fb44cc3", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::*;\n-use utils::{in_macro, implements_trait, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq};\n+use crate::utils::{in_macro, implements_trait, is_copy, multispan_sugg, snippet, span_lint, span_lint_and_then, SpanlessEq};\n \n /// **What it does:** Checks for equal operands to comparison, logical and\n /// bitwise, difference and division binary operators (`==`, `>`, etc., `&&`,"}, {"sha": "faf297fd5b257cfcb53360952435bdf22dc0e465", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,8 +1,8 @@\n-use consts::{constant_simple, Constant};\n+use crate::consts::{constant_simple, Constant};\n use rustc::hir::*;\n use rustc::lint::*;\n use syntax::codemap::Span;\n-use utils::{in_macro, span_lint};\n+use crate::utils::{in_macro, span_lint};\n \n /// **What it does:** Checks for erasing operations, e.g. `x * 0`.\n ///"}, {"sha": "9482c3782d41be8d7375a783f0534e2e1fd24e81", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -9,7 +9,7 @@ use rustc::ty::layout::LayoutOf;\n use rustc::util::nodemap::NodeSet;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n-use utils::span_lint;\n+use crate::utils::span_lint;\n \n pub struct Pass {\n     pub too_large_for_stack: u64,"}, {"sha": "30ea9f2446ad2268a2e7e4d5cf3e85b9a312fb5f", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::ty;\n use rustc::hir::*;\n-use utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then};\n+use crate::utils::{is_adjusted, iter_input_pats, snippet_opt, span_lint_and_then};\n \n #[allow(missing_copy_implementations)]\n pub struct EtaPass;"}, {"sha": "e58dbdd2289a0a4d644185ae12c8214fd5d39949", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::*;\n use rustc::ty;\n use rustc::lint::*;\n use syntax::ast;\n-use utils::{get_parent_expr, span_lint, span_note_and_lint};\n+use crate::utils::{get_parent_expr, span_lint, span_note_and_lint};\n \n /// **What it does:** Checks for a read and a write to the same variable where\n /// whether the read occurs before or after the write depends on the evaluation"}, {"sha": "9915c87c40724b263344f8548ac5412c64cdd860", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -6,7 +6,7 @@ use std::f64;\n use std::fmt;\n use syntax::ast::*;\n use syntax_pos::symbol::Symbol;\n-use utils::span_lint_and_sugg;\n+use crate::utils::span_lint_and_sugg;\n \n /// **What it does:** Checks for float literals with a precision greater\n /// than that supported by the underlying type"}, {"sha": "feff746ba0cda993b81b1de2dda65a5309eed76e", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::hir::*;\n use rustc::lint::*;\n-use utils::{is_expn_of, match_def_path, resolve_node, span_lint};\n-use utils::opt_def_id;\n+use crate::utils::{is_expn_of, match_def_path, resolve_node, span_lint};\n+use crate::utils::opt_def_id;\n \n /// **What it does:** Checks for usage of `write!()` / `writeln()!` which can be\n /// replaced with `(e)print!()` / `(e)println!()`"}, {"sha": "33611a90c4d453e56c08ef8e2e846571352a4892", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,8 +2,8 @@ use rustc::lint::*;\n use rustc::hir;\n use rustc::ty;\n use syntax_pos::Span;\n-use utils::{match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty, is_expn_of};\n-use utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT};\n+use crate::utils::{match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty, is_expn_of};\n+use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT};\n \n /// **What it does:** Checks for impls of `From<..>` that contain `panic!()` or `unwrap()`\n ///"}, {"sha": "072b68d6beb9f19c292bcb142afa043897ca5b88", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,8 +3,8 @@ use rustc::lint::*;\n use rustc::ty;\n use syntax::ast::LitKind;\n use syntax_pos::Span;\n-use utils::paths;\n-use utils::{in_macro, is_expn_of, last_path_segment, match_def_path, match_type, opt_def_id, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty};\n+use crate::utils::paths;\n+use crate::utils::{in_macro, is_expn_of, last_path_segment, match_def_path, match_type, opt_def_id, resolve_node, snippet, span_lint_and_then, walk_ptrs_ty};\n \n /// **What it does:** Checks for the use of `format!(\"string literal with no\n /// argument\")` and `format!(\"{}\", foo)` where `foo` is a string."}, {"sha": "8008bb3ed669362b17f472a78c384e0834b9fe29", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use syntax::ast;\n-use utils::{differing_macro_contexts, in_macro, snippet_opt, span_note_and_lint};\n+use crate::utils::{differing_macro_contexts, in_macro, snippet_opt, span_note_and_lint};\n use syntax::ptr::P;\n \n /// **What it does:** Checks for use of the non-existent `=*`, `=!` and `=-`"}, {"sha": "536f4dd47729af41d692d1759d8c4972c2d02f4e", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -7,7 +7,7 @@ use std::collections::HashSet;\n use syntax::ast;\n use rustc_target::spec::abi::Abi;\n use syntax::codemap::Span;\n-use utils::{iter_input_pats, span_lint, type_is_unsafe_function};\n+use crate::utils::{iter_input_pats, span_lint, type_is_unsafe_function};\n \n /// **What it does:** Checks for functions with too many parameters.\n ///"}, {"sha": "d8b8e8f073b2cbdfacc334f614cf1233de8e8a88", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,8 +1,8 @@\n use rustc::lint::*;\n use rustc::hir::*;\n use syntax::ast::NodeId;\n-use utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, span_lint_and_then};\n-use utils::{opt_def_id, paths, resolve_node};\n+use crate::utils::{in_macro, match_def_path, match_trait_method, same_tys, snippet, span_lint_and_then};\n+use crate::utils::{opt_def_id, paths, resolve_node};\n \n /// **What it does:** Checks for always-identical `Into`/`From` conversions.\n ///"}, {"sha": "e983e5746a11ccf3f677feca4949b3e5959fd018", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,8 +1,8 @@\n-use consts::{constant_simple, Constant};\n+use crate::consts::{constant_simple, Constant};\n use rustc::hir::*;\n use rustc::lint::*;\n use syntax::codemap::Span;\n-use utils::{in_macro, snippet, span_lint, unsext, clip};\n+use crate::utils::{in_macro, snippet, span_lint, unsext, clip};\n use rustc::ty;\n \n /// **What it does:** Checks for identity operations, e.g. `x + 0`."}, {"sha": "63b4a2b28379eb75c752e32e216a168daf6d24f5", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{match_qpath, paths, snippet, span_lint_and_then};\n+use crate::utils::{match_qpath, paths, snippet, span_lint_and_then};\n \n /// **What it does:*** Lint for redundant pattern matching over `Result` or\n /// `Option`"}, {"sha": "22ca1a61c9b238774801c1fb5a0c9d55ba4c54f9", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,7 +4,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n \n-use utils::{in_external_macro, span_help_and_lint};\n+use crate::utils::{in_external_macro, span_help_and_lint};\n \n /// **What it does:** Checks for usage of `!` or `!=` in an if condition with an\n /// else branch."}, {"sha": "cb31c1cd044a0862ae12af6dfc0cc45a812cf8e0", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::*;\n-use utils::{get_trait_def_id, higher, implements_trait, match_qpath, paths, span_lint};\n+use crate::utils::{get_trait_def_id, higher, implements_trait, match_qpath, paths, span_lint};\n \n /// **What it does:** Checks for iteration that is guaranteed to be infinite.\n ///"}, {"sha": "ab50ea6f1318dc60034d6f0ce3faaa1ddb35ef68", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,8 +3,8 @@\n use rustc::lint::*;\n use rustc::hir::*;\n use syntax::ast::{Attribute, Name};\n-use utils::span_lint_and_then;\n-use utils::sugg::DiagnosticBuilderExt;\n+use crate::utils::span_lint_and_then;\n+use crate::utils::sugg::DiagnosticBuilderExt;\n \n /// **What it does:** Checks for `#[inline]` on trait methods without bodies\n ///"}, {"sha": "8daf3d296c74957cbf11cdff50bdd00c8e4b2952", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,7 +3,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n \n-use utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::{snippet_opt, span_lint_and_then};\n \n /// **What it does:** Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n ///"}, {"sha": "0ebdda9ec886a031ebb633d3e3920cc944d1cbf5", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::ty;\n use rustc::hir::*;\n-use utils::{match_def_path, opt_def_id, paths, span_help_and_lint};\n+use crate::utils::{match_def_path, opt_def_id, paths, span_help_and_lint};\n \n /// **What it does:** Checks for creation of references to zeroed or uninitialized memory.\n ///"}, {"sha": "685c91c04575bde6925d8d1bc8583ce022b07846", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::lint::*;\n use syntax::ast::*;\n-use utils::{in_macro, span_lint};\n+use crate::utils::{in_macro, span_lint};\n \n /// **What it does:** Checks for items declared after some statement in a block.\n ///"}, {"sha": "ca136f06aec8069100e2c95b580eaf163d49456c", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@\n \n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::{snippet_opt, span_lint_and_then};\n use rustc::ty::layout::LayoutOf;\n \n /// **What it does:** Checks for large size differences between variants on"}, {"sha": "fe9eb2e2d38c3b5b16c2c1960c81aec62d24a8dd", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -5,7 +5,7 @@ use rustc::ty;\n use std::collections::HashSet;\n use syntax::ast::{Lit, LitKind, Name};\n use syntax::codemap::{Span, Spanned};\n-use utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n \n /// **What it does:** Checks for getting the length of something via `.len()`\n /// just to compare to zero, and suggests using `.is_empty()` where applicable."}, {"sha": "b114a285f97a26baa21bac8cfa78bf83e5a21e6a", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,7 +3,7 @@ use rustc::hir;\n use rustc::hir::BindingAnnotation;\n use rustc::hir::def::Def;\n use syntax::ast;\n-use utils::{snippet, span_lint_and_then};\n+use crate::utils::{snippet, span_lint_and_then};\n \n /// **What it does:** Checks for variable declarations immediately followed by a\n /// conditional affectation."}, {"sha": "f6a5559c3650bc7e2a29ad508585411b5f6531fe", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -11,6 +11,7 @@\n #![allow(stable_features)]\n #![feature(iterator_find_map)]\n #![feature(macro_at_most_once_rep)]\n+#![feature(rust_2018_preview)]\n \n extern crate cargo_metadata;\n #[macro_use]"}, {"sha": "42f8da7c96cc45a7125a32425bf344936611daf4", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,11 +1,11 @@\n-use reexport::*;\n+use crate::reexport::*;\n use rustc::lint::*;\n use rustc::hir::def::Def;\n use rustc::hir::*;\n use rustc::hir::intravisit::*;\n use std::collections::{HashMap, HashSet};\n use syntax::codemap::Span;\n-use utils::{in_external_macro, last_path_segment, span_lint};\n+use crate::utils::{in_external_macro, last_path_segment, span_lint};\n use syntax::symbol::keywords;\n \n /// **What it does:** Checks for lifetime annotations which can be removed by"}, {"sha": "61b3e7a139c5a1ec7a8eb6f0946986d9b59567f0", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,7 +4,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax_pos;\n-use utils::{in_external_macro, snippet_opt, span_lint_and_sugg};\n+use crate::utils::{in_external_macro, snippet_opt, span_lint_and_sugg};\n \n /// **What it does:** Warns if a long integral or floating-point constant does\n /// not contain underscores."}, {"sha": "4d312b79818390c35d2fdc344ff78613d476b7bb", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,5 +1,5 @@\n use itertools::Itertools;\n-use reexport::*;\n+use crate::reexport::*;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n use rustc::hir::def_id;\n@@ -17,13 +17,13 @@ use std::collections::{HashMap, HashSet};\n use std::iter::{once, Iterator};\n use syntax::ast;\n use syntax::codemap::Span;\n-use utils::{sugg, sext};\n-use consts::{constant, Constant};\n+use crate::utils::{sugg, sext};\n+use crate::consts::{constant, Constant};\n \n-use utils::{get_enclosing_block, get_parent_expr, higher, in_external_macro, is_integer_literal, is_refutable,\n+use crate::utils::{get_enclosing_block, get_parent_expr, higher, in_external_macro, is_integer_literal, is_refutable,\n             last_path_segment, match_trait_method, match_type, match_var, multispan_sugg, snippet, snippet_opt,\n             span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then};\n-use utils::paths;\n+use crate::utils::paths;\n \n /// **What it does:** Checks for for-loops that manually copy items between\n /// slices that could be optimized by having a memcpy."}, {"sha": "23c5434a7502d55903a22b8440efd8e4d2aa5efd", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc::hir::*;\n use rustc::ty;\n use syntax::ast;\n-use utils::{get_arg_name, is_adjusted, iter_input_pats, match_qpath, match_trait_method, match_type,\n+use crate::utils::{get_arg_name, is_adjusted, iter_input_pats, match_qpath, match_trait_method, match_type,\n             paths, remove_blocks, snippet, span_help_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n \n /// **What it does:** Checks for mapping `clone()` over an iterator."}, {"sha": "a1f4b70a4dcfd8c777439bb70eae2d72d74f0533", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,8 +3,8 @@ use rustc::lint::*;\n use rustc::ty;\n use rustc_errors::{Applicability};\n use syntax::codemap::Span;\n-use utils::{in_macro, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n-use utils::paths;\n+use crate::utils::{in_macro, iter_input_pats, match_type, method_chain_args, snippet, span_lint_and_then};\n+use crate::utils::paths;\n \n #[derive(Clone)]\n pub struct Pass;"}, {"sha": "8ab0482bacfdba2bb87bd2f46c6f78b28f0f8415", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -5,11 +5,11 @@ use std::cmp::Ordering;\n use std::collections::Bound;\n use syntax::ast::LitKind;\n use syntax::codemap::Span;\n-use utils::paths;\n-use utils::{expr_block, in_external_macro, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg,\n+use crate::utils::paths;\n+use crate::utils::{expr_block, in_external_macro, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg,\n             remove_blocks, snippet, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty};\n-use utils::sugg::Sugg;\n-use consts::{constant, Constant};\n+use crate::utils::sugg::Sugg;\n+use crate::consts::{constant, Constant};\n \n /// **What it does:** Checks for matches with a single arm where an `if let`\n /// will usually suffice."}, {"sha": "816c1bb6fbf07ca1e95fc5434412b91ac1990dd5", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::{Expr, ExprCall, ExprPath};\n-use utils::{match_def_path, opt_def_id, paths, span_lint};\n+use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n \n /// **What it does:** Checks for usage of `std::mem::forget(t)` where `t` is\n /// `Drop`."}, {"sha": "461efb27f280fd7db062d9e1ecd941fcc0b19a9e", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -7,13 +7,13 @@ use std::fmt;\n use std::iter;\n use syntax::ast;\n use syntax::codemap::{Span, BytePos};\n-use utils::{get_arg_name, get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, is_self, is_self_ty,\n+use crate::utils::{get_arg_name, get_trait_def_id, implements_trait, in_external_macro, in_macro, is_copy, is_self, is_self_ty,\n             iter_input_pats, last_path_segment, match_def_path, match_path, match_qpath, match_trait_method,\n             match_type, method_chain_args, match_var, return_ty, remove_blocks, same_tys, single_segment_path, snippet,\n             span_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n-use utils::paths;\n-use utils::sugg;\n-use consts::{constant, Constant};\n+use crate::utils::paths;\n+use crate::utils::sugg;\n+use crate::consts::{constant, Constant};\n \n #[derive(Clone)]\n pub struct Pass;"}, {"sha": "8c511d8f0ad93ffe43d52edfe2082d49640a4eb6", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,8 +1,8 @@\n-use consts::{constant_simple, Constant};\n+use crate::consts::{constant_simple, Constant};\n use rustc::lint::*;\n use rustc::hir::*;\n use std::cmp::{Ordering, PartialOrd};\n-use utils::{match_def_path, opt_def_id, paths, span_lint};\n+use crate::utils::{match_def_path, opt_def_id, paths, span_lint};\n \n /// **What it does:** Checks for expressions where `std::cmp::min` and `max` are\n /// used to clamp values, but switched so that the result is constant."}, {"sha": "a1cb1910e20370586544e467c10a99f027e4052d", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,15 +1,15 @@\n-use reexport::*;\n+use crate::reexport::*;\n use rustc::hir::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::lint::*;\n use rustc::ty;\n use syntax::codemap::{ExpnFormat, Span};\n-use utils::{get_item_name, get_parent_expr, implements_trait, in_constant, in_macro, is_integer_literal,\n+use crate::utils::{get_item_name, get_parent_expr, implements_trait, in_constant, in_macro, is_integer_literal,\n             iter_input_pats, last_path_segment, match_qpath, match_trait_method, paths, snippet, span_lint,\n             span_lint_and_then, walk_ptrs_ty};\n-use utils::sugg::Sugg;\n+use crate::utils::sugg::Sugg;\n use syntax::ast::{LitKind, CRATE_NODE_ID};\n-use consts::{constant, Constant};\n+use crate::consts::{constant, Constant};\n \n /// **What it does:** Checks for function arguments and let bindings denoted as\n /// `ref`."}, {"sha": "1108cfcaf528b47c207f217b0220eb88d3678b44", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,7 +4,7 @@ use std::char;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n-use utils::{constants, in_external_macro, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n+use crate::utils::{constants, in_external_macro, snippet, snippet_opt, span_help_and_lint, span_lint, span_lint_and_then};\n \n /// **What it does:** Checks for structure field patterns bound to wildcards.\n ///"}, {"sha": "94d1ab0ae120a285a27e5e14cecf32a29afcb021", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -24,7 +24,7 @@ use rustc::ty;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::Span;\n-use utils::in_macro;\n+use crate::utils::in_macro;\n \n /// **What it does:** Warns if there is missing doc for any documentable item\n /// (public or private)."}, {"sha": "26837313a063272e9e2c964810173e20dca985d3", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@ use rustc::hir;\n use rustc::hir::intravisit;\n use rustc::lint::*;\n use rustc::ty;\n-use utils::{higher, in_external_macro, span_lint};\n+use crate::utils::{higher, in_external_macro, span_lint};\n \n /// **What it does:** Checks for instances of `mut mut` references.\n ///"}, {"sha": "4537f279b1e87dfd9a9802be8b92879c3ca0dca9", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n use rustc::hir::*;\n-use utils::span_lint;\n+use crate::utils::span_lint;\n \n /// **What it does:** Detects giving a mutable reference to a function that only\n /// requires an immutable reference."}, {"sha": "e5679bb7ba5039df7c12b97ee8c5f80f9ce74427", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -6,7 +6,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::{self, Ty};\n use rustc::hir::Expr;\n use syntax::ast;\n-use utils::{match_type, paths, span_lint};\n+use crate::utils::{match_type, paths, span_lint};\n \n /// **What it does:** Checks for usages of `Mutex<X>` where an atomic will do.\n ///"}, {"sha": "885cb4b72cb2ee7dc3986be0eac616e4a68de18b", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -6,8 +6,8 @@ use rustc::lint::*;\n use rustc::hir::*;\n use syntax::ast::LitKind;\n use syntax::codemap::Spanned;\n-use utils::{snippet, span_lint, span_lint_and_sugg};\n-use utils::sugg::Sugg;\n+use crate::utils::{snippet, span_lint, span_lint_and_sugg};\n+use crate::utils::sugg::Sugg;\n \n /// **What it does:** Checks for expressions of the form `if c { true } else {\n /// false }`"}, {"sha": "84d5292d8c518ae467870eddbf61bcddec751a25", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -6,7 +6,7 @@ use rustc::lint::*;\n use rustc::hir::{BindingAnnotation, Expr, ExprAddrOf, MutImmutable, Pat, PatKind};\n use rustc::ty;\n use rustc::ty::adjustment::{Adjust, Adjustment};\n-use utils::{in_macro, snippet_opt, span_lint_and_then};\n+use crate::utils::{in_macro, snippet_opt, span_lint_and_then};\n \n /// **What it does:** Checks for address of operations (`&`) that are going to\n /// be dereferenced immediately by the compiler."}, {"sha": "91cc01891a97d2ca70966b57104d815a9ca25bfb", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,7 +4,7 @@\n \n use rustc::lint::*;\n use rustc::hir::{BindingAnnotation, MutImmutable, Pat, PatKind};\n-use utils::{in_macro, snippet, span_lint_and_then};\n+use crate::utils::{in_macro, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for useless borrowed references.\n ///"}, {"sha": "4f6a8d9e2cb000b7732c085445012d9922b9f023", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -32,7 +32,7 @@ use syntax::ast;\n use syntax::codemap::{original_sp, DUMMY_SP};\n use std::borrow::Cow;\n \n-use utils::{in_macro, snippet, snippet_block, span_help_and_lint, trim_multiline};\n+use crate::utils::{in_macro, snippet, snippet_block, span_help_and_lint, trim_multiline};\n \n /// **What it does:** The lint checks for `if`-statements appearing in loops\n /// that contain a `continue` statement in either their main blocks or their"}, {"sha": "36f5eaa8e1846d5e4491b6edb78be68420c1d28a", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -10,9 +10,9 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast::NodeId;\n use syntax_pos::Span;\n use syntax::errors::DiagnosticBuilder;\n-use utils::{get_trait_def_id, implements_trait, in_macro, is_copy, is_self, match_type, multispan_sugg, paths,\n+use crate::utils::{get_trait_def_id, implements_trait, in_macro, is_copy, is_self, match_type, multispan_sugg, paths,\n             snippet, snippet_opt, span_lint_and_then};\n-use utils::ptr::get_spans;\n+use crate::utils::ptr::get_spans;\n use std::collections::{HashMap, HashSet};\n use std::borrow::Cow;\n "}, {"sha": "87b92a53dd02ce0da9fba0d1799cc66b8b0d0246", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n use rustc::hir::{Expr, ExprStruct};\n-use utils::span_lint;\n+use crate::utils::span_lint;\n \n /// **What it does:** Checks for needlessly including a base struct on update\n /// when all fields are changed anyway."}, {"sha": "efcc1695eb6adc830c2b5dec755c37337810b0c9", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,8 +2,8 @@ use rustc::hir::*;\n use rustc::lint::*;\n use syntax::codemap::{Span, Spanned};\n \n-use consts::{self, Constant};\n-use utils::span_lint;\n+use crate::consts::{self, Constant};\n+use crate::utils::span_lint;\n \n /// **What it does:** Checks for multiplication by -1 as a form of negation.\n ///"}, {"sha": "8df4577650f3e575e335063a9c4d96bb90f76779", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,9 +3,9 @@ use rustc::hir;\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n use syntax::codemap::Span;\n-use utils::paths;\n-use utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint_and_then};\n-use utils::sugg::DiagnosticBuilderExt;\n+use crate::utils::paths;\n+use crate::utils::{get_trait_def_id, implements_trait, in_external_macro, return_ty, same_tys, span_lint_and_then};\n+use crate::utils::sugg::DiagnosticBuilderExt;\n \n /// **What it does:** Checks for types with a `fn new() -> Self` method and no\n /// implementation of\n@@ -153,7 +153,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n }\n \n fn create_new_without_default_suggest_msg(ty: Ty) -> String {\n-    #[rustfmt_skip]\n+    #[cfg_attr(rustfmt, rustfmt_skip)]\n     format!(\n \"impl Default for {} {{\n     fn default() -> Self {{"}, {"sha": "8d351f874213149fba38c6a8ba09d61564af1954", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::hir::def::Def;\n use rustc::hir::{BiAnd, BiOr, BlockCheckMode, Expr, Expr_, Stmt, StmtSemi, UnsafeSource};\n-use utils::{has_drop, in_macro, snippet_opt, span_lint, span_lint_and_sugg};\n+use crate::utils::{has_drop, in_macro, snippet_opt, span_lint, span_lint_and_sugg};\n use std::ops::Deref;\n \n /// **What it does:** Checks for statements which have no effect."}, {"sha": "69a02b0c50d5c2117633241eb597d2beee0322b6", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,7 +4,7 @@ use syntax::symbol::LocalInternedString;\n use syntax::ast::*;\n use syntax::attr;\n use syntax::visit::{walk_block, walk_expr, walk_pat, Visitor};\n-use utils::{in_macro, span_lint, span_lint_and_then};\n+use crate::utils::{in_macro, span_lint, span_lint_and_then};\n \n /// **What it does:** Checks for names that are very similar and thus confusing.\n ///"}, {"sha": "a2573b91f961c24f7e605c448fb1f9c904c48982", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};\n+use crate::utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};\n \n /// **What it does:*** Checks for unnecessary `ok()` in if let.\n ///"}, {"sha": "142447ee345d3207e1456c2f17451d01d111287a", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@ use rustc::hir::{Expr, ExprLit, ExprMethodCall};\n use rustc::lint::*;\n use syntax::ast::LitKind;\n use syntax::codemap::{Span, Spanned};\n-use utils::{match_type, paths, span_lint, walk_ptrs_ty};\n+use crate::utils::{match_type, paths, span_lint, walk_ptrs_ty};\n \n /// **What it does:** Checks for duplicate open options as well as combinations\n /// that make no sense."}, {"sha": "3a95471d0a288f5610f6ccac212d545c221ee688", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::span_lint;\n+use crate::utils::span_lint;\n \n /// **What it does:** Detects classic underflow/overflow checks.\n ///"}, {"sha": "f00a15dd4012c04c36bde95dc82d9781e37aa193", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,7 +3,7 @@ use rustc::lint::*;\n use syntax::ast::LitKind;\n use syntax::ptr::P;\n use syntax::ext::quote::rt::Span;\n-use utils::{is_direct_expn_of, is_expn_of, match_def_path, opt_def_id, paths, resolve_node, span_lint};\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, opt_def_id, paths, resolve_node, span_lint};\n \n /// **What it does:** Checks for missing parameters in `panic!`.\n ///"}, {"sha": "1d80b78558bf33ba1aec51be01ad1aed397e2fff", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{is_automatically_derived, span_lint};\n+use crate::utils::{is_automatically_derived, span_lint};\n \n /// **What it does:** Checks for manual re-implementations of `PartialEq::ne`.\n ///"}, {"sha": "7f5dd2abc0e003849397706cba83b53eddd7a441", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::Spanned;\n-use utils::{in_macro, snippet, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet, span_lint_and_sugg};\n \n /// **What it does:** Checks for operations where precedence may be unclear\n /// and suggests to add parentheses. Currently it catches the following:"}, {"sha": "2d5330f7b6b88a377bfdf59439368a826e5d59cf", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -9,8 +9,8 @@ use rustc::ty;\n use syntax::ast::NodeId;\n use syntax::codemap::Span;\n use syntax_pos::MultiSpan;\n-use utils::{match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then, walk_ptrs_hir_ty};\n-use utils::ptr::get_spans;\n+use crate::utils::{match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then, walk_ptrs_hir_ty};\n+use crate::utils::ptr::get_spans;\n \n /// **What it does:** This lint checks for function arguments of type `&String`\n /// or `&Vec` unless the references are mutable. It will also suggest you"}, {"sha": "ab98eef36e6685be81efa9077c57d87af11b9891", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,11 +1,11 @@\n use rustc::lint::*;\n use rustc::hir::*;\n use rustc::hir::def::Def;\n-use utils::sugg::Sugg;\n+use crate::utils::sugg::Sugg;\n use syntax::ptr::P;\n \n-use utils::{match_def_path, match_type, span_lint_and_then};\n-use utils::paths::*;\n+use crate::utils::{match_def_path, match_type, span_lint_and_then};\n+use crate::utils::paths::*;\n \n /// **What it does:** Checks for expressions that could be replaced by the question mark operator\n ///"}, {"sha": "4947479115e6e9af5d2dfddfa934d099fedecb38", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,9 +2,9 @@ use rustc::lint::*;\n use rustc::hir::*;\n use syntax::ast::RangeLimits;\n use syntax::codemap::Spanned;\n-use utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then};\n-use utils::{get_trait_def_id, higher, implements_trait};\n-use utils::sugg::Sugg;\n+use crate::utils::{is_integer_literal, paths, snippet, span_lint, span_lint_and_then};\n+use crate::utils::{get_trait_def_id, higher, implements_trait};\n+use crate::utils::sugg::Sugg;\n \n /// **What it does:** Checks for calling `.step_by(0)` on iterators,\n /// which never terminates.\n@@ -93,7 +93,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n \n             // Range with step_by(0).\n             if name == \"step_by\" && args.len() == 2 && has_step_by(cx, &args[0]) {\n-                use consts::{constant, Constant};\n+                use crate::consts::{constant, Constant};\n                 if let Some((Constant::Int(0), _)) = constant(cx, cx.tables, &args[1]) {\n                     span_lint(\n                         cx,"}, {"sha": "e63e978e26b76d90df12997d7d183e9dd097c9b5", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{in_macro, is_range_expression, match_var, span_lint_and_sugg};\n+use crate::utils::{in_macro, is_range_expression, match_var, span_lint_and_sugg};\n \n /// **What it does:** Checks for fields in struct literals where shorthands\n /// could be used."}, {"sha": "d8179816236bd732aeaa9931d3b2dacbf418341e", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use syntax::ast::{Expr, ExprKind, UnOp};\n use rustc::lint::*;\n-use utils::{snippet, span_lint_and_sugg};\n+use crate::utils::{snippet, span_lint_and_sugg};\n \n /// **What it does:** Checks for usage of `*&` and `*&mut` in expressions.\n ///"}, {"sha": "6395125578c78979397acc4385d7966a10431ad7", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,8 +4,8 @@ use rustc::lint::*;\n use std::collections::HashSet;\n use syntax::ast::{LitKind, NodeId, StrStyle};\n use syntax::codemap::{BytePos, Span};\n-use utils::{is_expn_of, match_def_path, match_type, opt_def_id, paths, span_help_and_lint, span_lint};\n-use consts::{constant, Constant};\n+use crate::utils::{is_expn_of, match_def_path, match_type, opt_def_id, paths, span_help_and_lint, span_lint};\n+use crate::consts::{constant, Constant};\n \n /// **What it does:** Checks [regex](https://crates.io/crates/regex) creation\n /// (with `Regex::new`,`RegexBuilder::new` or `RegexSet::new`) for correct"}, {"sha": "d6d9125a49ca4bff1670f5e2806d946dd215e2f5", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::hir;\n use rustc::hir::def::Def;\n-use utils::{match_def_path, span_lint_and_sugg};\n+use crate::utils::{match_def_path, span_lint_and_sugg};\n \n /// **What it does:** Checks for usage of `ATOMIC_X_INIT`, `ONCE_INIT`, and\n /// `uX/iX::MIN/MAX`."}, {"sha": "73fbc172c1010208f0228c789f5bb02e4c174251", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,7 +3,7 @@ use syntax::ast;\n use syntax::codemap::Span;\n use syntax::visit::FnKind;\n \n-use utils::{in_external_macro, in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n+use crate::utils::{in_external_macro, in_macro, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n \n /// **What it does:** Checks for return statements at the end of a block.\n ///"}, {"sha": "a56a05470f20d3e87f2ffbdc2b85e2f5cd3142d0", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{get_trait_def_id, paths, span_lint};\n+use crate::utils::{get_trait_def_id, paths, span_lint};\n \n /// **What it does:** Checks for mis-uses of the serde API.\n ///"}, {"sha": "12ba6970675efd5ab3af1fb8dd2510b94d3b1cc1", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,10 +1,10 @@\n-use reexport::*;\n+use crate::reexport::*;\n use rustc::lint::*;\n use rustc::hir::*;\n use rustc::hir::intravisit::FnKind;\n use rustc::ty;\n use syntax::codemap::Span;\n-use utils::{contains_name, higher, in_external_macro, iter_input_pats, snippet, span_lint_and_then};\n+use crate::utils::{contains_name, higher, in_external_macro, iter_input_pats, snippet, span_lint_and_then};\n \n /// **What it does:** Checks for bindings that shadow other bindings already in\n /// scope, while just changing reference level or mutability."}, {"sha": "5b4a2d1f5049ad4b9ede2441afca20aa20a61a1a", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,8 +1,8 @@\n use rustc::hir::*;\n use rustc::lint::*;\n use syntax::codemap::Spanned;\n-use utils::SpanlessEq;\n-use utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n+use crate::utils::SpanlessEq;\n+use crate::utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n \n /// **What it does:** Checks for string appends of the form `x = x + y` (without\n /// `let`!).\n@@ -146,7 +146,7 @@ impl LintPass for StringLitAsBytes {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         use syntax::ast::LitKind;\n-        use utils::{in_macro, snippet};\n+        use crate::utils::{in_macro, snippet};\n \n         if let ExprMethodCall(ref path, _, ref args) = e.node {\n             if path.name == \"as_bytes\" {"}, {"sha": "bd7a8f7c76152a72dccf848b7b8af69bcdf8e86d", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use syntax::ast;\n-use utils::{get_trait_def_id, span_lint};\n+use crate::utils::{get_trait_def_id, span_lint};\n \n /// **What it does:** Lints for suspicious operations in impls of arithmetic operators, e.g.\n /// subtracting elements in an Add impl.\n@@ -149,7 +149,7 @@ fn check_binop<'a>(\n     expected_ops: &[hir::BinOp_],\n ) -> Option<&'a str> {\n     let mut trait_ids = vec![];\n-    let [krate, module] = ::utils::paths::OPS_MODULE;\n+    let [krate, module] = crate::utils::paths::OPS_MODULE;\n \n     for t in traits {\n         let path = [krate, module, t];"}, {"sha": "8de4638d13d012104539fbe67789eb867e2618ee", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,8 +1,8 @@\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty;\n-use utils::{differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n-use utils::sugg::Sugg;\n+use crate::utils::{differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq};\n+use crate::utils::sugg::Sugg;\n \n /// **What it does:** Checks for manual swapping.\n ///"}, {"sha": "cd13ab0d51ff1da86370bd7232b5eeaecab3bd63", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::hir::{Expr, ExprAssign, ExprField, ExprStruct, ExprTup};\n-use utils::is_adjusted;\n-use utils::span_lint;\n+use crate::utils::is_adjusted;\n+use crate::utils::span_lint;\n \n /// **What it does:** Checks for construction of a structure or tuple just to\n /// assign a value in it."}, {"sha": "ace42c2fecd7604389911be912942e1228786768", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,8 +3,8 @@ use rustc::ty::{self, Ty};\n use rustc::hir::*;\n use std::borrow::Cow;\n use syntax::ast;\n-use utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n-use utils::{opt_def_id, sugg};\n+use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then};\n+use crate::utils::{opt_def_id, sugg};\n \n /// **What it does:** Checks for transmutes that can't ever be correct on any\n /// architecture."}, {"sha": "2e2f35d4cd1f9abec65668d2060bd28489666ca6", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,4 +1,4 @@\n-use reexport::*;\n+use crate::reexport::*;\n use rustc::hir;\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n@@ -12,11 +12,11 @@ use std::borrow::Cow;\n use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n-use utils::{comparisons, differing_macro_contexts, higher, in_constant, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n+use crate::utils::{comparisons, differing_macro_contexts, higher, in_constant, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n             match_type, multispan_sugg, opt_def_id, same_tys, snippet, snippet_opt, span_help_and_lint, span_lint,\n             span_lint_and_sugg, span_lint_and_then, clip, unsext, sext, int_bits};\n-use utils::paths;\n-use consts::{constant, Constant};\n+use crate::utils::paths;\n+use crate::consts::{constant, Constant};\n \n /// Handles all the linting of funky types\n #[allow(missing_copy_implementations)]\n@@ -1290,9 +1290,9 @@ fn detect_absurd_comparison<'a, 'tcx>(\n     lhs: &'tcx Expr,\n     rhs: &'tcx Expr,\n ) -> Option<(ExtremeExpr<'tcx>, AbsurdComparisonResult)> {\n-    use types::ExtremeType::*;\n-    use types::AbsurdComparisonResult::*;\n-    use utils::comparisons::*;\n+    use crate::types::ExtremeType::*;\n+    use crate::types::AbsurdComparisonResult::*;\n+    use crate::utils::comparisons::*;\n \n     // absurd comparison only makes sense on primitive types\n     // primitive types don't implement comparison operators with each other\n@@ -1337,7 +1337,7 @@ fn detect_absurd_comparison<'a, 'tcx>(\n }\n \n fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -> Option<ExtremeExpr<'tcx>> {\n-    use types::ExtremeType::*;\n+    use crate::types::ExtremeType::*;\n \n     let ty = cx.tables.expr_ty(expr);\n \n@@ -1362,8 +1362,8 @@ fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) -\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        use types::ExtremeType::*;\n-        use types::AbsurdComparisonResult::*;\n+        use crate::types::ExtremeType::*;\n+        use crate::types::AbsurdComparisonResult::*;\n \n         if let ExprBinary(ref cmp, ref lhs, ref rhs) = expr.node {\n             if let Some((culprit, result)) = detect_absurd_comparison(cx, cmp.node, lhs, rhs) {\n@@ -1562,7 +1562,7 @@ fn upcast_comparison_bounds_err<'a, 'tcx>(\n     rhs: &'tcx Expr,\n     invert: bool,\n ) {\n-    use utils::comparisons::*;\n+    use crate::utils::comparisons::*;\n \n     if let Some((lb, ub)) = lhs_bounds {\n         if let Some(norm_rhs_val) = node_as_const_fullint(cx, rhs) {"}, {"sha": "0cb192e89b29a375c3c75087193ae6fa271a9ec9", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::*;\n use syntax::ast::{LitKind, NodeId};\n use syntax::codemap::Span;\n use unicode_normalization::UnicodeNormalization;\n-use utils::{is_allowed, snippet, span_help_and_lint};\n+use crate::utils::{is_allowed, snippet, span_help_and_lint};\n \n /// **What it does:** Checks for the Unicode zero-width space in the code.\n ///"}, {"sha": "85cf97a97f3ac58b0276825b09573c347fbb63c1", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,7 +2,7 @@ use rustc::lint::*;\n use syntax::ast::*;\n use syntax::codemap::Span;\n use syntax::symbol::LocalInternedString;\n-use utils::span_lint;\n+use crate::utils::span_lint;\n \n /// **What it does:** Checks for imports that remove \"unsafe\" from an item's\n /// name."}, {"sha": "1ef20e4a46c931986280825c4300f999e4235c4b", "filename": "clippy_lints/src/unused_io_amount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_io_amount.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir;\n-use utils::{is_try, match_qpath, match_trait_method, paths, span_lint};\n+use crate::utils::{is_try, match_qpath, match_trait_method, paths, span_lint};\n \n /// **What it does:** Checks for unused written/read amount.\n ///"}, {"sha": "c7a33ab33b27cbe05f9ac420e1ea830e3c19bfce", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -5,7 +5,7 @@ use std::collections::HashMap;\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::symbol::LocalInternedString;\n-use utils::{in_macro, span_lint};\n+use crate::utils::{in_macro, span_lint};\n \n /// **What it does:** Checks for unused labels.\n ///"}, {"sha": "581a8d47677ec6caf7045beba9eb755beb2c76a4", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_path, NestedVisitorMap, Visitor};\n-use utils::{in_macro, span_lint_and_then};\n+use crate::utils::{in_macro, span_lint_and_then};\n use syntax::ast::NodeId;\n use syntax_pos::symbol::keywords::SelfType;\n "}, {"sha": "93ddd0ad07b03f507ffad387c54de9464ad29fb4", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::{Expr, Expr_, QPath, Ty_, Pat, PatKind, BindingAnnotation, StmtS\n use rustc::hir::intravisit::{NestedVisitorMap, Visitor};\n use syntax::ast::{Attribute, LitKind, DUMMY_NODE_ID};\n use std::collections::HashMap;\n-use utils::get_attr;\n+use crate::utils::get_attr;\n \n /// **What it does:** Generates clippy code that detects the offending pattern\n ///"}, {"sha": "99504d76906e80f5def2a687a32586026aadf47f", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -96,8 +96,8 @@ macro_rules! define_Conf {\n                     -> Result<define_Conf!(TY $($ty)+), D::Error> {\n                         type T = define_Conf!(TY $($ty)+);\n                         Ok(T::deserialize(deserializer).unwrap_or_else(|e| {\n-                            ::utils::conf::ERRORS.lock().expect(\"no threading here\")\n-                                                        .push(::utils::conf::Error::Toml(e.to_string()));\n+                            crate::utils::conf::ERRORS.lock().expect(\"no threading here\")\n+                                                        .push(crate::utils::conf::Error::Toml(e.to_string()));\n                             super::$rust_name()\n                         }))\n                     }"}, {"sha": "69f1792012a1c97efcc52d79eb3132a14f1d1387", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -6,7 +6,7 @@\n use rustc::{hir, ty};\n use rustc::lint::LateContext;\n use syntax::ast;\n-use utils::{is_expn_of, match_def_path, match_qpath, opt_def_id, paths, resolve_node};\n+use crate::utils::{is_expn_of, match_def_path, match_qpath, opt_def_id, paths, resolve_node};\n \n /// Convert a hir binary operator to the corresponding `ast` type.\n pub fn binop(op: hir::BinOp_) -> ast::BinOpKind {"}, {"sha": "15df7b72a8d087eb166242450cd54b9bf7597c88", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,12 +1,12 @@\n-use consts::{constant_simple, constant_context};\n+use crate::consts::{constant_simple, constant_context};\n use rustc::lint::*;\n use rustc::hir::*;\n use rustc::ty::{TypeckTables};\n use std::hash::{Hash, Hasher};\n use std::collections::hash_map::DefaultHasher;\n use syntax::ast::Name;\n use syntax::ptr::P;\n-use utils::differing_macro_contexts;\n+use crate::utils::differing_macro_contexts;\n \n /// Type used to check whether two ast are the same. This is different from the\n /// operator"}, {"sha": "0b2f157d2b3fecd65cbc2f74707ccf04f07fc3bb", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -6,7 +6,7 @@ use rustc::lint::*;\n use rustc::hir;\n use rustc::hir::print;\n use syntax::ast::Attribute;\n-use utils::get_attr;\n+use crate::utils::get_attr;\n \n /// **What it does:** Dumps every ast/hir node which has the `#[clippy_dump]`\n /// attribute"}, {"sha": "1de0975ab4216bf7db678d2b22fe3a3c7369ce77", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc::hir::*;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n-use utils::{match_qpath, paths, span_lint};\n+use crate::utils::{match_qpath, paths, span_lint};\n use syntax::symbol::LocalInternedString;\n use syntax::ast::{Crate as AstCrate, ItemKind, Name, NodeId};\n use syntax::codemap::Span;"}, {"sha": "4a30b134a69c148390fc744f09c0a501d0d24976", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,4 +1,4 @@\n-use reexport::*;\n+use crate::reexport::*;\n use rustc::hir;\n use rustc::hir::*;\n use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};"}, {"sha": "dd286a69547cc50df31e03b8d6a6a3361bb21616", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -4,7 +4,7 @@ use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::LateContext;\n use syntax::ast::Name;\n use syntax::codemap::Span;\n-use utils::{get_pat_name, match_var, snippet};\n+use crate::utils::{get_pat_name, match_var, snippet};\n \n pub fn get_spans(\n     cx: &LateContext,"}, {"sha": "6add947cf9e20d52c165ea5f331c6ea16dac6f1b", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -14,7 +14,7 @@ use syntax::parse::token;\n use syntax::print::pprust::token_to_string;\n use syntax::util::parser::AssocOp;\n use syntax::ast;\n-use utils::{higher, snippet, snippet_opt};\n+use crate::utils::{higher, snippet, snippet_opt};\n use syntax_pos::{BytePos, Pos};\n \n /// A helper type to build suggestion correctly handling parenthesis."}, {"sha": "0d8997f4f36eebe24a001a690b4d5731d0e346de", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -2,8 +2,8 @@ use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty::{self, Ty};\n use syntax::codemap::Span;\n-use utils::{higher, is_copy, snippet, span_lint_and_sugg};\n-use consts::constant;\n+use crate::utils::{higher, is_copy, snippet, span_lint_and_sugg};\n+use crate::consts::constant;\n \n /// **What it does:** Checks for usage of `&vec![..]` when using `&[..]` would\n /// be possible."}, {"sha": "274dd952f098298ab82898f101e71147c2a5dced", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -6,8 +6,8 @@ use syntax::ast::LitKind;\n use syntax::ptr;\n use syntax::symbol::LocalInternedString;\n use syntax_pos::Span;\n-use utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint, span_lint_and_sugg};\n-use utils::{opt_def_id, paths, last_path_segment};\n+use crate::utils::{is_expn_of, match_def_path, match_path, resolve_node, span_lint, span_lint_and_sugg};\n+use crate::utils::{opt_def_id, paths, last_path_segment};\n \n /// **What it does:** This lint warns when you use `println!(\"\")` to\n /// print a newline."}, {"sha": "aaba018484508df27b3bbdab84d555edcc50f679", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,7 +1,7 @@\n-use consts::{constant_simple, Constant};\n+use crate::consts::{constant_simple, Constant};\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::span_help_and_lint;\n+use crate::utils::span_help_and_lint;\n \n /// **What it does:** Checks for `0.0 / 0.0`.\n ///"}, {"sha": "61e5c104befc3e663a78f091e509a498c7cd6b22", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb2f6a5011f938023d0ead64a746e0fa82f91ee6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bb2f6a5011f938023d0ead64a746e0fa82f91ee6", "patch": "@@ -1,5 +1,6 @@\n // error-pattern:cargo-clippy\n #![feature(plugin_registrar)]\n+#![feature(rust_2018_preview)]\n #![feature(rustc_private)]\n #![feature(macro_vis_matcher)]\n #![allow(unknown_lints)]"}]}