{"sha": "40c4ed49941ec3dbfb399336a293f348f23958df", "node_id": "C_kwDOAAsO6NoAKDQwYzRlZDQ5OTQxZWMzZGJmYjM5OTMzNmEyOTNmMzQ4ZjIzOTU4ZGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-02T06:14:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-02T06:14:52Z"}, "message": "Rollup merge of #110955 - fee1-dead-contrib:sus-operation, r=compiler-errors\n\nuplift `clippy::clone_double_ref` as `suspicious_double_ref_op`\n\nSplit from #109842.\n\nr? ``@compiler-errors``", "tree": {"sha": "5ca01e9a01b760ed0a93e8b8c4bf067ba94de4c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ca01e9a01b760ed0a93e8b8c4bf067ba94de4c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40c4ed49941ec3dbfb399336a293f348f23958df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkUKpcCRBK7hj4Ov3rIwAAjMwIAGX7xbiyIL6Ro2ZCsfQVsJ+u\n3FsltR6POv0gNBoRgyOhhJqWmZ6FzkxviKwmiEDpV5deOT/A5KQuomMAGCw1Kdty\nO8UB23p+I6b3O4xkcu6DiyxMOStkT2KIST9ru1stCrxQ7AY4LrS8KUfySYmJVuBZ\n3SfouO49vtIbDM/ddORqVD0QKQBFtNS65oxY1Vs6aZhuMu/XUBmjvOOk0xP1yblI\nB7Lnu/R4vkstgd57ojaVqJ3yMlEje2votTQtMbcgNHHT5vB6/ZdWcahkks4RqBZA\np10oSG4nFDLr3cjxk5H/0ogqCC1dzDPfK2swp3xBWTlryJZ0EZynscMjItg/bUQ=\n=2n5H\n-----END PGP SIGNATURE-----\n", "payload": "tree 5ca01e9a01b760ed0a93e8b8c4bf067ba94de4c7\nparent f47a63ca3dac0467fa42a950a7232e97989fc8b8\nparent 475378f0c6fb6261fd73b54a902a2d7d55ee47cb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1683008092 +0530\ncommitter GitHub <noreply@github.com> 1683008092 +0530\n\nRollup merge of #110955 - fee1-dead-contrib:sus-operation, r=compiler-errors\n\nuplift `clippy::clone_double_ref` as `suspicious_double_ref_op`\n\nSplit from #109842.\n\nr? ``@compiler-errors``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40c4ed49941ec3dbfb399336a293f348f23958df", "html_url": "https://github.com/rust-lang/rust/commit/40c4ed49941ec3dbfb399336a293f348f23958df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40c4ed49941ec3dbfb399336a293f348f23958df/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f47a63ca3dac0467fa42a950a7232e97989fc8b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47a63ca3dac0467fa42a950a7232e97989fc8b8", "html_url": "https://github.com/rust-lang/rust/commit/f47a63ca3dac0467fa42a950a7232e97989fc8b8"}, {"sha": "475378f0c6fb6261fd73b54a902a2d7d55ee47cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/475378f0c6fb6261fd73b54a902a2d7d55ee47cb", "html_url": "https://github.com/rust-lang/rust/commit/475378f0c6fb6261fd73b54a902a2d7d55ee47cb"}], "stats": {"total": 437, "additions": 237, "deletions": 200}, "files": [{"sha": "4baac4b5afc9d2634676844db6ba2f4c0e2be3c9", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -40,7 +40,6 @@ use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n use itertools::Itertools;\n-use std::borrow::Borrow;\n use std::cell::OnceCell;\n use std::collections::BTreeSet;\n use std::ffi::OsString;\n@@ -576,17 +575,17 @@ fn link_dwarf_object<'a>(\n \n     impl<Relocations> ThorinSession<Relocations> {\n         fn alloc_mmap(&self, data: Mmap) -> &Mmap {\n-            (*self.arena_mmap.alloc(data)).borrow()\n+            &*self.arena_mmap.alloc(data)\n         }\n     }\n \n     impl<Relocations> thorin::Session<Relocations> for ThorinSession<Relocations> {\n         fn alloc_data(&self, data: Vec<u8>) -> &[u8] {\n-            (*self.arena_data.alloc(data)).borrow()\n+            &*self.arena_data.alloc(data)\n         }\n \n         fn alloc_relocation(&self, data: Relocations) -> &Relocations {\n-            (*self.arena_relocations.alloc(data)).borrow()\n+            &*self.arena_relocations.alloc(data)\n         }\n \n         fn read_input(&self, path: &Path) -> std::io::Result<&[u8]> {"}, {"sha": "71cf644eb50195626cad82dda2f03e10841f58f2", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -50,6 +50,14 @@ lint_deprecated_lint_name =\n lint_renamed_or_removed_lint = {$msg}\n     .suggestion = use the new name\n \n+lint_suspicious_double_ref_op =\n+    using `.{$call}()` on a double reference, which returns `{$ty}` instead of {$op ->\n+        *[should_not_happen] [{$op}]\n+        [deref] dereferencing\n+        [borrow] borrowing\n+        [clone] cloning\n+    } the inner type\n+\n lint_unknown_lint =\n     unknown lint: `{$name}`\n     .suggestion = did you mean"}, {"sha": "d7bacc6485f15a85cb2547dc990873d45c25314f", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -1150,6 +1150,14 @@ pub struct NoopMethodCallDiag<'a> {\n     pub label: Span,\n }\n \n+#[derive(LintDiagnostic)]\n+#[diag(lint_suspicious_double_ref_op)]\n+pub struct SuspiciousDoubleRefDiag<'a> {\n+    pub call: Symbol,\n+    pub ty: Ty<'a>,\n+    pub op: &'static str,\n+}\n+\n // pass_by_value.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_pass_by_value)]"}, {"sha": "d054966459d855ba6d3e15ad21e04bde8c29494b", "filename": "compiler/rustc_lint/src/noop_method_call.rs", "status": "modified", "additions": 63, "deletions": 18, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnoop_method_call.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -1,10 +1,11 @@\n use crate::context::LintContext;\n-use crate::lints::NoopMethodCallDiag;\n+use crate::lints::{NoopMethodCallDiag, SuspiciousDoubleRefDiag};\n use crate::LateContext;\n use crate::LateLintPass;\n use rustc_hir::def::DefKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_middle::ty;\n+use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::symbol::sym;\n \n declare_lint! {\n@@ -35,14 +36,44 @@ declare_lint! {\n     \"detects the use of well-known noop methods\"\n }\n \n-declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL]);\n+declare_lint! {\n+    /// The `suspicious_double_ref_op` lint checks for usage of `.clone()`/`.borrow()`/`.deref()`\n+    /// on an `&&T` when `T: !Deref/Borrow/Clone`, which means the call will return the inner `&T`,\n+    /// instead of performing the operation on the underlying `T` and can be confusing.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # #![allow(unused)]\n+    /// struct Foo;\n+    /// let foo = &&Foo;\n+    /// let clone: &Foo = foo.clone();\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Since `Foo` doesn't implement `Clone`, running `.clone()` only dereferences the double\n+    /// reference, instead of cloning the inner type which should be what was intended.\n+    pub SUSPICIOUS_DOUBLE_REF_OP,\n+    Warn,\n+    \"suspicious call of trait method on `&&T`\"\n+}\n+\n+declare_lint_pass!(NoopMethodCall => [NOOP_METHOD_CALL, SUSPICIOUS_DOUBLE_REF_OP]);\n \n impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // We only care about method calls.\n-        let ExprKind::MethodCall(call, receiver, ..) = &expr.kind else {\n-            return\n+        let ExprKind::MethodCall(call, receiver, _, call_span) = &expr.kind else {\n+            return;\n         };\n+\n+        if call_span.from_expansion() {\n+            return;\n+        }\n+\n         // We only care about method calls corresponding to the `Clone`, `Deref` and `Borrow`\n         // traits and ignore any other method call.\n         let did = match cx.typeck_results().type_dependent_def(expr.hir_id) {\n@@ -70,25 +101,39 @@ impl<'tcx> LateLintPass<'tcx> for NoopMethodCall {\n         };\n         // (Re)check that it implements the noop diagnostic.\n         let Some(name) = cx.tcx.get_diagnostic_name(i.def_id()) else { return };\n-        if !matches!(\n-            name,\n-            sym::noop_method_borrow | sym::noop_method_clone | sym::noop_method_deref\n-        ) {\n-            return;\n-        }\n+\n+        let op = match name {\n+            sym::noop_method_borrow => \"borrow\",\n+            sym::noop_method_clone => \"clone\",\n+            sym::noop_method_deref => \"deref\",\n+            _ => return,\n+        };\n+\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n         let expr_ty = cx.typeck_results().expr_ty_adjusted(expr);\n-        if receiver_ty != expr_ty {\n-            // This lint will only trigger if the receiver type and resulting expression \\\n-            // type are the same, implying that the method call is unnecessary.\n+        let arg_adjustments = cx.typeck_results().expr_adjustments(receiver);\n+\n+        // If there is any user defined auto-deref step, then we don't want to warn.\n+        // https://github.com/rust-lang/rust-clippy/issues/9272\n+        if arg_adjustments.iter().any(|adj| matches!(adj.kind, Adjust::Deref(Some(_)))) {\n             return;\n         }\n+\n         let expr_span = expr.span;\n         let span = expr_span.with_lo(receiver.span.hi());\n-        cx.emit_spanned_lint(\n-            NOOP_METHOD_CALL,\n-            span,\n-            NoopMethodCallDiag { method: call.ident.name, receiver_ty, label: span },\n-        );\n+\n+        if receiver_ty == expr_ty {\n+            cx.emit_spanned_lint(\n+                NOOP_METHOD_CALL,\n+                span,\n+                NoopMethodCallDiag { method: call.ident.name, receiver_ty, label: span },\n+            );\n+        } else {\n+            cx.emit_spanned_lint(\n+                SUSPICIOUS_DOUBLE_REF_OP,\n+                span,\n+                SuspiciousDoubleRefDiag { call: call.ident.name, ty: expr_ty, op },\n+            )\n+        }\n     }\n }"}, {"sha": "aafe5ced2e97f61cb8bd5197a7b1f565e17d20d9", "filename": "library/core/tests/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/library%2Fcore%2Ftests%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/library%2Fcore%2Ftests%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fclone.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -1,4 +1,5 @@\n #[test]\n+#[cfg_attr(not(bootstrap), allow(suspicious_double_ref_op))]\n fn test_borrowed_clone() {\n     let x = 5;\n     let y: &i32 = &x;"}, {"sha": "297120da284b91c2dfbdc4292b24c27dff931624", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -167,7 +167,7 @@ pub(crate) fn print_generic_bounds<'a, 'tcx: 'a>(\n     display_fn(move |f| {\n         let mut bounds_dup = FxHashSet::default();\n \n-        for (i, bound) in bounds.iter().filter(|b| bounds_dup.insert(b.clone())).enumerate() {\n+        for (i, bound) in bounds.iter().filter(|b| bounds_dup.insert(*b)).enumerate() {\n             if i > 0 {\n                 f.write_str(\" + \")?;\n             }"}, {"sha": "fa726a649370e7825b4a99be0a0cdfa086df4009", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -313,7 +313,6 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::methods::CHARS_NEXT_CMP_INFO,\n     crate::methods::CLEAR_WITH_DRAIN_INFO,\n     crate::methods::CLONED_INSTEAD_OF_COPIED_INFO,\n-    crate::methods::CLONE_DOUBLE_REF_INFO,\n     crate::methods::CLONE_ON_COPY_INFO,\n     crate::methods::CLONE_ON_REF_PTR_INFO,\n     crate::methods::COLLAPSIBLE_STR_REPLACE_INFO,"}, {"sha": "65fd50dff58465b3995189c1a51eea6e3aba507a", "filename": "src/tools/clippy/clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 38, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -1,15 +1,13 @@\n-use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::get_parent_node;\n use clippy_utils::source::snippet_with_context;\n-use clippy_utils::sugg;\n use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, ByRef, Expr, ExprKind, MatchSource, Node, PatKind, QPath};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, adjustment::Adjust, print::with_forced_trimmed_paths};\n use rustc_span::symbol::{sym, Symbol};\n \n-use super::CLONE_DOUBLE_REF;\n use super::CLONE_ON_COPY;\n \n /// Checks for the `CLONE_ON_COPY` lint.\n@@ -42,41 +40,7 @@ pub(super) fn check(\n \n     let ty = cx.typeck_results().expr_ty(expr);\n     if let ty::Ref(_, inner, _) = arg_ty.kind() {\n-        if let ty::Ref(_, innermost, _) = inner.kind() {\n-            span_lint_and_then(\n-                cx,\n-                CLONE_DOUBLE_REF,\n-                expr.span,\n-                &with_forced_trimmed_paths!(format!(\n-                    \"using `clone` on a double-reference; \\\n-                    this will copy the reference of type `{ty}` instead of cloning the inner type\"\n-                )),\n-                |diag| {\n-                    if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n-                        let mut ty = innermost;\n-                        let mut n = 0;\n-                        while let ty::Ref(_, inner, _) = ty.kind() {\n-                            ty = inner;\n-                            n += 1;\n-                        }\n-                        let refs = \"&\".repeat(n + 1);\n-                        let derefs = \"*\".repeat(n);\n-                        let explicit = with_forced_trimmed_paths!(format!(\"<{refs}{ty}>::clone({snip})\"));\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"try dereferencing it\",\n-                            with_forced_trimmed_paths!(format!(\"{refs}({derefs}{}).clone()\", snip.deref())),\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                        diag.span_suggestion(\n-                            expr.span,\n-                            \"or try being explicit if you are sure, that you want to clone a reference\",\n-                            explicit,\n-                            Applicability::MaybeIncorrect,\n-                        );\n-                    }\n-                },\n-            );\n+        if let ty::Ref(..) = inner.kind() {\n             return; // don't report clone_on_copy\n         }\n     }"}, {"sha": "e4a659d3ce73c1e650db16792f8b9404defded77", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -984,29 +984,6 @@ declare_clippy_lint! {\n     \"using 'clone' on a ref-counted pointer\"\n }\n \n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for usage of `.clone()` on an `&&T`.\n-    ///\n-    /// ### Why is this bad?\n-    /// Cloning an `&&T` copies the inner `&T`, instead of\n-    /// cloning the underlying `T`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// fn main() {\n-    ///     let x = vec![1];\n-    ///     let y = &&x;\n-    ///     let z = y.clone();\n-    ///     println!(\"{:p} {:p}\", *y, z); // prints out the same pointer\n-    /// }\n-    /// ```\n-    #[clippy::version = \"pre 1.29.0\"]\n-    pub CLONE_DOUBLE_REF,\n-    correctness,\n-    \"using `clone` on `&&T`\"\n-}\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for usage of `.to_string()` on an `&&T` where\n@@ -3258,7 +3235,6 @@ impl_lint_pass!(Methods => [\n     CHARS_LAST_CMP,\n     CLONE_ON_COPY,\n     CLONE_ON_REF_PTR,\n-    CLONE_DOUBLE_REF,\n     COLLAPSIBLE_STR_REPLACE,\n     ITER_OVEREAGER_CLONED,\n     CLONED_INSTEAD_OF_COPIED,"}, {"sha": "5e81a01a461ab4c6508affd27e48128d4374885d", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -30,6 +30,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::stutter\", \"clippy::module_name_repetitions\"),\n     (\"clippy::to_string_in_display\", \"clippy::recursive_format_impl\"),\n     (\"clippy::zero_width_space\", \"clippy::invisible_characters\"),\n+    (\"clippy::clone_double_ref\", \"suspicious_double_ref_op\"),\n     (\"clippy::drop_bounds\", \"drop_bounds\"),\n     (\"clippy::for_loop_over_option\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),"}, {"sha": "60482c66da7c437a7f213622c9a4f05aa73b45ad", "filename": "src/tools/clippy/tests/ui/explicit_deref_methods.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.fixed?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused_variables)]\n #![allow(\n     clippy::borrow_deref_ref,\n-    clippy::clone_double_ref,\n+    suspicious_double_ref_op,\n     clippy::explicit_auto_deref,\n     clippy::needless_borrow,\n     clippy::uninlined_format_args"}, {"sha": "e3613e216bb223ac7e935d803dd22e810c70b9f1", "filename": "src/tools/clippy/tests/ui/explicit_deref_methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fexplicit_deref_methods.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -3,7 +3,7 @@\n #![allow(unused_variables)]\n #![allow(\n     clippy::borrow_deref_ref,\n-    clippy::clone_double_ref,\n+    suspicious_double_ref_op,\n     clippy::explicit_auto_deref,\n     clippy::needless_borrow,\n     clippy::uninlined_format_args"}, {"sha": "ff19a042825d8a60106661d557612f5d245e8ce1", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -36,6 +36,7 @@\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n #![allow(named_arguments_used_positionally)]\n+#![allow(suspicious_double_ref_op)]\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n@@ -67,6 +68,7 @@\n #![warn(clippy::module_name_repetitions)]\n #![warn(clippy::recursive_format_impl)]\n #![warn(clippy::invisible_characters)]\n+#![warn(suspicious_double_ref_op)]\n #![warn(drop_bounds)]\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]"}, {"sha": "38b1647c0cca03be2d083b2858109470b9fe8e60", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -36,6 +36,7 @@\n #![allow(enum_intrinsics_non_enums)]\n #![allow(non_fmt_panics)]\n #![allow(named_arguments_used_positionally)]\n+#![allow(suspicious_double_ref_op)]\n #![allow(temporary_cstring_as_ptr)]\n #![allow(unknown_lints)]\n #![allow(unused_labels)]\n@@ -67,6 +68,7 @@\n #![warn(clippy::stutter)]\n #![warn(clippy::to_string_in_display)]\n #![warn(clippy::zero_width_space)]\n+#![warn(clippy::clone_double_ref)]\n #![warn(clippy::drop_bounds)]\n #![warn(clippy::for_loop_over_option)]\n #![warn(clippy::for_loop_over_result)]"}, {"sha": "70d15408b9fc14eade2bc5d36ced6c9cc23e8ed9", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 49, "deletions": 43, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -1,256 +1,262 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:42:9\n+  --> $DIR/rename.rs:43:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:43:9\n+  --> $DIR/rename.rs:44:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:45:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:46:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:47:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::derive_hash_xor_eq)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n+error: lint `clippy::clone_double_ref` has been renamed to `suspicious_double_ref_op`\n+  --> $DIR/rename.rs:71:9\n+   |\n+LL | #![warn(clippy::clone_double_ref)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `suspicious_double_ref_op`\n+\n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:82:9\n+  --> $DIR/rename.rs:84:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:83:9\n+  --> $DIR/rename.rs:85:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 42 previous errors\n+error: aborting due to 43 previous errors\n "}, {"sha": "7ceed3c75fd85a5b50815a13c0f1ca23644c9048", "filename": "src/tools/clippy/tests/ui/unnecessary_clone.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -42,14 +42,6 @@ fn clone_on_copy_generic<T: Copy>(t: T) {\n     Some(t).clone();\n }\n \n-fn clone_on_double_ref() {\n-    let x = vec![1];\n-    let y = &&x;\n-    let z: &Vec<_> = y.clone();\n-\n-    println!(\"{:p} {:p}\", *y, z);\n-}\n-\n mod many_derefs {\n     struct A;\n     struct B;\n@@ -84,11 +76,6 @@ mod many_derefs {\n         let _: E = a.clone();\n         let _: E = *****a;\n     }\n-\n-    fn check(mut encoded: &[u8]) {\n-        let _ = &mut encoded.clone();\n-        let _ = &encoded.clone();\n-    }\n }\n \n mod issue2076 {"}, {"sha": "5686ab6b4531ee60ca0c671ec6d0af45a29a84e5", "filename": "src/tools/clippy/tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -44,63 +44,17 @@ error: using `clone` on type `Option<T>` which implements the `Copy` trait\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n-error: using `clone` on a double-reference; this will copy the reference of type `&Vec<i32>` instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:48:22\n-   |\n-LL |     let z: &Vec<_> = y.clone();\n-   |                      ^^^^^^^^^\n-   |\n-   = note: `#[deny(clippy::clone_double_ref)]` on by default\n-help: try dereferencing it\n-   |\n-LL |     let z: &Vec<_> = &(*y).clone();\n-   |                      ~~~~~~~~~~~~~\n-help: or try being explicit if you are sure, that you want to clone a reference\n-   |\n-LL |     let z: &Vec<_> = <&Vec<i32>>::clone(y);\n-   |                      ~~~~~~~~~~~~~~~~~~~~~\n-\n error: using `clone` on type `E` which implements the `Copy` trait\n-  --> $DIR/unnecessary_clone.rs:84:20\n+  --> $DIR/unnecessary_clone.rs:76:20\n    |\n LL |         let _: E = a.clone();\n    |                    ^^^^^^^^^ help: try dereferencing it: `*****a`\n \n-error: using `clone` on a double-reference; this will copy the reference of type `&[u8]` instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:89:22\n-   |\n-LL |         let _ = &mut encoded.clone();\n-   |                      ^^^^^^^^^^^^^^^\n-   |\n-help: try dereferencing it\n-   |\n-LL |         let _ = &mut &(*encoded).clone();\n-   |                      ~~~~~~~~~~~~~~~~~~~\n-help: or try being explicit if you are sure, that you want to clone a reference\n-   |\n-LL |         let _ = &mut <&[u8]>::clone(encoded);\n-   |                      ~~~~~~~~~~~~~~~~~~~~~~~\n-\n-error: using `clone` on a double-reference; this will copy the reference of type `&[u8]` instead of cloning the inner type\n-  --> $DIR/unnecessary_clone.rs:90:18\n-   |\n-LL |         let _ = &encoded.clone();\n-   |                  ^^^^^^^^^^^^^^^\n-   |\n-help: try dereferencing it\n-   |\n-LL |         let _ = &&(*encoded).clone();\n-   |                  ~~~~~~~~~~~~~~~~~~~\n-help: or try being explicit if you are sure, that you want to clone a reference\n-   |\n-LL |         let _ = &<&[u8]>::clone(encoded);\n-   |                  ~~~~~~~~~~~~~~~~~~~~~~~\n-\n error: using `.clone()` on a ref-counted pointer\n-  --> $DIR/unnecessary_clone.rs:108:14\n+  --> $DIR/unnecessary_clone.rs:95:14\n    |\n LL |         Some(try_opt!(Some(rc)).clone())\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `Rc::<u8>::clone(&try_opt!(Some(rc)))`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 9 previous errors\n "}, {"sha": "dbcf2a5131b5b449356c79b018e1261a0b70d4e1", "filename": "tests/ui/lint/noop-method-call.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/tests%2Fui%2Flint%2Fnoop-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/tests%2Fui%2Flint%2Fnoop-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fnoop-method-call.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -19,18 +19,17 @@ fn main() {\n     let clone_type_ref = &CloneType(1u32);\n     let clone_type_ref_clone: CloneType<u32> = clone_type_ref.clone();\n \n-    // Calling clone on a double reference doesn't warn since the method call itself\n-    // peels the outer reference off\n     let clone_type_ref = &&CloneType(1u32);\n     let clone_type_ref_clone: &CloneType<u32> = clone_type_ref.clone();\n+    //~^ WARNING using `.clone()` on a double reference, which returns `&CloneType<u32>`\n \n     let non_deref_type = &PlainType(1u32);\n     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n     //~^ WARNING call to `.deref()` on a reference in this situation does nothing\n \n-    // Dereferencing a &&T does not warn since it has collapsed the double reference\n     let non_deref_type = &&PlainType(1u32);\n     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n+    //~^ WARNING using `.deref()` on a double reference, which returns `&PlainType<u32>`\n \n     let non_borrow_type = &PlainType(1u32);\n     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n@@ -41,7 +40,8 @@ fn main() {\n     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n \n     let xs = [\"a\", \"b\", \"c\"];\n-    let _v: Vec<&str> = xs.iter().map(|x| x.clone()).collect(); // ok, but could use `*x` instead\n+    let _v: Vec<&str> = xs.iter().map(|x| x.clone()).collect(); // could use `*x` instead\n+    //~^ WARNING using `.clone()` on a double reference, which returns `&str`\n }\n \n fn generic<T>(non_clone_type: &PlainType<T>) {"}, {"sha": "37cd1a0fc18eab7a2922d6e04f2d41b5edcce53d", "filename": "tests/ui/lint/noop-method-call.stderr", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/tests%2Fui%2Flint%2Fnoop-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/tests%2Fui%2Flint%2Fnoop-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fnoop-method-call.stderr?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -11,22 +11,42 @@ note: the lint level is defined here\n LL | #![warn(noop_method_call)]\n    |         ^^^^^^^^^^^^^^^^\n \n+warning: using `.clone()` on a double reference, which returns `&CloneType<u32>` instead of cloning the inner type\n+  --> $DIR/noop-method-call.rs:23:63\n+   |\n+LL |     let clone_type_ref_clone: &CloneType<u32> = clone_type_ref.clone();\n+   |                                                               ^^^^^^^^\n+   |\n+   = note: `#[warn(suspicious_double_ref_op)]` on by default\n+\n warning: call to `.deref()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:28:63\n+  --> $DIR/noop-method-call.rs:27:63\n    |\n LL |     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n    |                                                               ^^^^^^^^ unnecessary method call\n    |\n    = note: the type `&PlainType<u32>` which `deref` is being called on is the same as the type returned from `deref`, so the method call does not do anything and can be removed\n \n+warning: using `.deref()` on a double reference, which returns `&PlainType<u32>` instead of dereferencing the inner type\n+  --> $DIR/noop-method-call.rs:31:63\n+   |\n+LL |     let non_deref_type_deref: &PlainType<u32> = non_deref_type.deref();\n+   |                                                               ^^^^^^^^\n+\n warning: call to `.borrow()` on a reference in this situation does nothing\n-  --> $DIR/noop-method-call.rs:36:66\n+  --> $DIR/noop-method-call.rs:35:66\n    |\n LL |     let non_borrow_type_borrow: &PlainType<u32> = non_borrow_type.borrow();\n    |                                                                  ^^^^^^^^^ unnecessary method call\n    |\n    = note: the type `&PlainType<u32>` which `borrow` is being called on is the same as the type returned from `borrow`, so the method call does not do anything and can be removed\n \n+warning: using `.clone()` on a double reference, which returns `&str` instead of cloning the inner type\n+  --> $DIR/noop-method-call.rs:43:44\n+   |\n+LL |     let _v: Vec<&str> = xs.iter().map(|x| x.clone()).collect(); // could use `*x` instead\n+   |                                            ^^^^^^^^\n+\n warning: call to `.clone()` on a reference in this situation does nothing\n   --> $DIR/noop-method-call.rs:48:19\n    |\n@@ -43,5 +63,5 @@ LL |     non_clone_type.clone();\n    |\n    = note: the type `&PlainType<u32>` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n \n-warning: 5 warnings emitted\n+warning: 8 warnings emitted\n "}, {"sha": "b9bcd31c2a8b0bfdbb219411965e87f24fdd6b53", "filename": "tests/ui/lint/suspicious-double-ref-op.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.rs?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -0,0 +1,30 @@\n+#![feature(lazy_cell)]\n+#![deny(suspicious_double_ref_op, noop_method_call)]\n+\n+pub fn clone_on_double_ref() {\n+    let x = vec![1];\n+    let y = &&x;\n+    let z: &Vec<_> = y.clone();\n+    //~^ ERROR using `.clone()` on a double reference, which returns `&Vec<i32>`\n+\n+    println!(\"{:p} {:p}\", *y, z);\n+}\n+\n+use std::sync::LazyLock;\n+\n+pub static STRS: LazyLock<&str> = LazyLock::new(|| \"First\");\n+\n+// https://github.com/rust-lang/rust-clippy/issues/9272\n+fn rust_clippy_issue_9272() {\n+    let str = STRS.clone();\n+    println!(\"{str}\")\n+}\n+\n+fn check(mut encoded: &[u8]) {\n+    let _ = &mut encoded.clone();\n+    //~^ ERROR call to `.clone()` on a reference in this situation does nothing\n+    let _ = &encoded.clone();\n+    //~^ ERROR call to `.clone()` on a reference in this situation does nothing\n+}\n+\n+fn main() {}"}, {"sha": "d15487ca23865c308a676891d7fcce3c87ebd120", "filename": "tests/ui/lint/suspicious-double-ref-op.stderr", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/40c4ed49941ec3dbfb399336a293f348f23958df/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/40c4ed49941ec3dbfb399336a293f348f23958df/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fsuspicious-double-ref-op.stderr?ref=40c4ed49941ec3dbfb399336a293f348f23958df", "patch": "@@ -0,0 +1,35 @@\n+error: using `.clone()` on a double reference, which returns `&Vec<i32>` instead of cloning the inner type\n+  --> $DIR/suspicious-double-ref-op.rs:7:23\n+   |\n+LL |     let z: &Vec<_> = y.clone();\n+   |                       ^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/suspicious-double-ref-op.rs:2:9\n+   |\n+LL | #![deny(suspicious_double_ref_op, noop_method_call)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: call to `.clone()` on a reference in this situation does nothing\n+  --> $DIR/suspicious-double-ref-op.rs:24:25\n+   |\n+LL |     let _ = &mut encoded.clone();\n+   |                         ^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type `&[u8]` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+note: the lint level is defined here\n+  --> $DIR/suspicious-double-ref-op.rs:2:35\n+   |\n+LL | #![deny(suspicious_double_ref_op, noop_method_call)]\n+   |                                   ^^^^^^^^^^^^^^^^\n+\n+error: call to `.clone()` on a reference in this situation does nothing\n+  --> $DIR/suspicious-double-ref-op.rs:26:21\n+   |\n+LL |     let _ = &encoded.clone();\n+   |                     ^^^^^^^^ unnecessary method call\n+   |\n+   = note: the type `&[u8]` which `clone` is being called on is the same as the type returned from `clone`, so the method call does not do anything and can be removed\n+\n+error: aborting due to 3 previous errors\n+"}]}