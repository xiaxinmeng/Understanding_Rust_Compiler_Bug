{"sha": "ee05eafe6c657c3d3710655e11d88d61bc5febf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDVlYWZlNmM2NTdjM2QzNzEwNjU1ZTExZDg4ZDYxYmM1ZmViZjA=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-02T05:07:40Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-02T07:03:31Z"}, "message": "Add config for cargo-watch trace", "tree": {"sha": "23969e46b774a475e334771b715485287b20d1f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23969e46b774a475e334771b715485287b20d1f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee05eafe6c657c3d3710655e11d88d61bc5febf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee05eafe6c657c3d3710655e11d88d61bc5febf0", "html_url": "https://github.com/rust-lang/rust/commit/ee05eafe6c657c3d3710655e11d88d61bc5febf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee05eafe6c657c3d3710655e11d88d61bc5febf0/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b84d0fc1a307f6103ea2c2620a106db821696434", "url": "https://api.github.com/repos/rust-lang/rust/commits/b84d0fc1a307f6103ea2c2620a106db821696434", "html_url": "https://github.com/rust-lang/rust/commit/b84d0fc1a307f6103ea2c2620a106db821696434"}], "stats": {"total": 82, "additions": 67, "deletions": 15}, "files": [{"sha": "722a86c9bb36f56a7f7d8db9de0586f44606231c", "filename": "docs/user/README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee05eafe6c657c3d3710655e11d88d61bc5febf0/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/ee05eafe6c657c3d3710655e11d88d61bc5febf0/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=ee05eafe6c657c3d3710655e11d88d61bc5febf0", "patch": "@@ -60,6 +60,7 @@ for details.\n * `rust-analyzer.enableCargoWatchOnStartup`: prompt to install & enable `cargo\n   watch` for live error highlighting (note, this **does not** use rust-analyzer)\n * `rust-analyzer.trace.server`: enables internal logging\n+* `rust-analyzer.trace.cargo-watch`: enables cargo-watch logging\n \n \n ## Emacs"}, {"sha": "cc364d478704e8d12bf05546592d8c1b1ca7f825", "filename": "editors/code/package.json", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee05eafe6c657c3d3710655e11d88d61bc5febf0/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/ee05eafe6c657c3d3710655e11d88d61bc5febf0/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=ee05eafe6c657c3d3710655e11d88d61bc5febf0", "patch": "@@ -194,6 +194,17 @@\n                     ],\n                     \"default\": \"off\",\n                     \"description\": \"Trace requests to the ra_lsp_server\"\n+                },\n+                \"rust-analyzer.trace.cargo-watch\": {\n+                    \"type\": \"string\",\n+                    \"scope\": \"window\",\n+                    \"enum\": [\n+                        \"off\",\n+                        \"error\",\n+                        \"verbose\"\n+                    ],\n+                    \"default\": \"off\",\n+                    \"description\": \"Trace output of cargo-watch\"\n                 }\n             }\n         },"}, {"sha": "9864ce01ac818c38dacc991eb10398c07c51be21", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 34, "deletions": 7, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ee05eafe6c657c3d3710655e11d88d61bc5febf0/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ee05eafe6c657c3d3710655e11d88d61bc5febf0/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=ee05eafe6c657c3d3710655e11d88d61bc5febf0", "patch": "@@ -1,6 +1,7 @@\n import * as child_process from 'child_process';\n import * as path from 'path';\n import * as vscode from 'vscode';\n+import { Server } from '../server';\n import { terminate } from '../utils/processes';\n import { StatusDisplay } from './watch_status';\n \n@@ -10,6 +11,7 @@ export class CargoWatchProvider {\n     private cargoProcess?: child_process.ChildProcess;\n     private outBuffer: string = '';\n     private statusDisplay?: StatusDisplay;\n+    private outputChannel?: vscode.OutputChannel;\n \n     public activate(subscriptions: vscode.Disposable[]) {\n         subscriptions.push(this);\n@@ -18,7 +20,10 @@ export class CargoWatchProvider {\n         );\n \n         this.statusDisplay = new StatusDisplay(subscriptions);\n-\n+        this.outputChannel = vscode.window.createOutputChannel(\n+            'Cargo Watch Trace'\n+        );\n+            \n         // Start the cargo watch with json message\n         this.cargoProcess = child_process.spawn(\n             'cargo',\n@@ -31,17 +36,23 @@ export class CargoWatchProvider {\n         );\n \n         this.cargoProcess.stdout.on('data', (s: string) => {\n-            this.processOutput(s);\n-            console.log(s);\n+            this.processOutput(s, (line) => {\n+                this.logInfo(line);\n+                this.parseLine(line);\n+            });\n         });\n \n         this.cargoProcess.stderr.on('data', (s: string) => {\n-            console.error('Error on cargo watch : ' + s);\n+            this.processOutput(s, (line) => {\n+                this.logError('Error on cargo-watch : {\\n' + line + '}\\n' );\n+            });\n         });\n \n         this.cargoProcess.on('error', (err: Error) => {\n-            console.error('Error on spawn cargo process : ' + err);\n+            this.logError('Error on cargo-watch process : {\\n' + err.message + '}\\n');\n         });\n+\n+        this.logInfo('cargo-watch started.');\n     }\n \n     public dispose(): void {\n@@ -54,6 +65,22 @@ export class CargoWatchProvider {\n             this.cargoProcess.kill();\n             terminate(this.cargoProcess);\n         }\n+\n+        if(this.outputChannel) {\n+            this.outputChannel.dispose();\n+        }\n+    }\n+\n+    private logInfo(line: string) {\n+        if (Server.config.cargoWatchOptions.trace === 'verbose') {\n+            this.outputChannel!.append(line);\n+        }                \n+    }\n+\n+    private logError(line: string) {\n+        if (Server.config.cargoWatchOptions.trace === 'error' || Server.config.cargoWatchOptions.trace === 'verbose' ) {\n+            this.outputChannel!.append(line);\n+        }                \n     }\n \n     private parseLine(line: string) {\n@@ -124,14 +151,14 @@ export class CargoWatchProvider {\n         }\n     }\n \n-    private processOutput(chunk: string) {\n+    private processOutput(chunk: string, cb: (line: string) => void  ) {\n         // The stdout is not line based, convert it to line based for proceess.\n         this.outBuffer += chunk;\n         let eolIndex = this.outBuffer.indexOf('\\n');\n         while (eolIndex >= 0) {\n             // line includes the EOL\n             const line = this.outBuffer.slice(0, eolIndex + 1);\n-            this.parseLine(line);\n+            cb(line);\n             this.outBuffer = this.outBuffer.slice(eolIndex + 1);\n \n             eolIndex = this.outBuffer.indexOf('\\n');"}, {"sha": "3589edceecd5535ba159345fe70c318ab1718d56", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee05eafe6c657c3d3710655e11d88d61bc5febf0/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ee05eafe6c657c3d3710655e11d88d61bc5febf0/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=ee05eafe6c657c3d3710655e11d88d61bc5febf0", "patch": "@@ -137,11 +137,11 @@ export async function handleSingle(runnable: Runnable) {\n export async function interactivelyStartCargoWatch(\n     context: vscode.ExtensionContext\n ) {\n-    if (Server.config.enableCargoWatchOnStartup === 'disabled') {\n+    if (Server.config.cargoWatchOptions.enableOnStartup === 'disabled') {\n         return;\n     }\n \n-    if (Server.config.enableCargoWatchOnStartup === 'ask') {\n+    if (Server.config.cargoWatchOptions.enableOnStartup === 'ask') {\n         const watch = await vscode.window.showInformationMessage(\n             'Start watching changes with cargo? (Executes `cargo watch`, provides inline diagnostics)',\n             'yes',"}, {"sha": "c95d138780040ebe9c3a59315d41fe8de481eb4b", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ee05eafe6c657c3d3710655e11d88d61bc5febf0/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ee05eafe6c657c3d3710655e11d88d61bc5febf0/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=ee05eafe6c657c3d3710655e11d88d61bc5febf0", "patch": "@@ -4,14 +4,20 @@ import { Server } from './server';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n-export type CargoWatchOptions = 'ask' | 'enabled' | 'disabled';\n+export type CargoWatchStartupOptions = 'ask' | 'enabled' | 'disabled';\n+export type CargoWatchTraceOptions = 'off' | 'error' | 'verbose';\n+\n+export interface CargoWatchOptions {\n+    enableOnStartup: CargoWatchStartupOptions,\n+    trace: CargoWatchTraceOptions,\n+};\n \n export class Config {\n     public highlightingOn = true;\n     public enableEnhancedTyping = true;\n     public raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n     public showWorkspaceLoadedNotification = true;\n-    public enableCargoWatchOnStartup: CargoWatchOptions = 'ask';\n+    public cargoWatchOptions: CargoWatchOptions = { enableOnStartup: 'ask', trace: 'off' };\n \n     private prevEnhancedTyping: null | boolean = null;\n \n@@ -73,10 +79,17 @@ export class Config {\n         }\n \n         if (config.has('enableCargoWatchOnStartup')) {\n-            this.enableCargoWatchOnStartup = config.get<CargoWatchOptions>(\n-                'enableCargoWatchOnStartup',\n-                'ask'\n-            );\n+            this.cargoWatchOptions.enableOnStartup =\n+                config.get<CargoWatchStartupOptions>(\n+                    'enableCargoWatchOnStartup',\n+                    'ask'\n+                );\n+            this.cargoWatchOptions.trace =\n+                config.get<CargoWatchTraceOptions>(\n+                    'trace.cargo-watch',\n+                    'off'\n+                );\n+\n         }\n     }\n }"}]}