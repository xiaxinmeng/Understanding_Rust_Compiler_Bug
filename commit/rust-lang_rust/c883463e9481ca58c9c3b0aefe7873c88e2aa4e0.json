{"sha": "c883463e9481ca58c9c3b0aefe7873c88e2aa4e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ODM0NjNlOTQ4MWNhNThjOWMzYjBhZWZlNzg3M2M4OGUyYWE0ZTA=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-02-16T16:07:30Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2016-04-08T22:39:04Z"}, "message": "Implement feature extraction from `TargetMachine`\n\nAdd the `LLVMRustHasFeature` function to check whether a\n`TargetMachine` has a given feature.", "tree": {"sha": "29f9b4ceea3652d1ca5635f2fc2e778927d6abe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29f9b4ceea3652d1ca5635f2fc2e778927d6abe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0", "html_url": "https://github.com/rust-lang/rust/commit/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a35f9d23d983dac2c38c0a97627785f7c5dbfd", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a35f9d23d983dac2c38c0a97627785f7c5dbfd", "html_url": "https://github.com/rust-lang/rust/commit/64a35f9d23d983dac2c38c0a97627785f7c5dbfd"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "834a11d37fa40d18e0c4f79df8dc2821f50f7018", "filename": "mk/rustllvm.mk", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0/mk%2Frustllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0/mk%2Frustllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frustllvm.mk?ref=c883463e9481ca58c9c3b0aefe7873c88e2aa4e0", "patch": "@@ -43,6 +43,9 @@ $$(RT_OUTPUT_DIR_$(1))/$$(call CFG_STATIC_LIB_NAME_$(1),rustllvm): \\\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(call CFG_CREATE_ARCHIVE_$(1),$$@) $$^\n \n+RUSTLLVM_COMPONENTS_$(1) = $$(shell echo $$(LLVM_ALL_COMPONENTS_$(1)) |\\\n+\ttr 'a-z-' 'A-Z_'| sed -e 's/^ //;s/\\([^ ]*\\)/\\-DLLVM_COMPONENT_\\1/g')\n+\n # On MSVC we need to double-escape arguments that llvm-config printed which\n # start with a '/'. The shell we're running in will auto-translate the argument\n # `/foo` to `C:/msys64/foo` but we really want it to be passed through as `/foo`\n@@ -51,6 +54,7 @@ $(1)/rustllvm/%.o: $(S)src/rustllvm/%.cpp $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n \t@$$(call E, compile: $$@)\n \t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@,) \\\n \t\t$$(subst  /,//,$$(LLVM_CXXFLAGS_$(1))) \\\n+\t\t$$(RUSTLLVM_COMPONENTS_$(1)) \\\n \t\t$$(EXTRA_RUSTLLVM_CXXFLAGS_$(1)) \\\n \t\t$$(RUSTLLVM_INCS_$(1)) \\\n \t\t$$<"}, {"sha": "0c6db2cb8ba8d63c39ebf6796b6ad213e0a48dc9", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=c883463e9481ca58c9c3b0aefe7873c88e2aa4e0", "patch": "@@ -100,6 +100,13 @@ fn main() {\n         }\n         cfg.flag(flag);\n     }\n+\n+    for component in &components[..] {\n+        let mut flag = String::from(\"-DLLVM_COMPONENT_\");\n+        flag.push_str(&component.to_uppercase());\n+        cfg.flag(&flag);\n+    }\n+\n     cfg.file(\"../rustllvm/ExecutionEngineWrapper.cpp\")\n        .file(\"../rustllvm/PassWrapper.cpp\")\n        .file(\"../rustllvm/RustWrapper.cpp\")"}, {"sha": "f28935fbcc2c680c429ca1b77f96abe8e509c39e", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=c883463e9481ca58c9c3b0aefe7873c88e2aa4e0", "patch": "@@ -2013,6 +2013,9 @@ extern {\n     pub fn LLVMRustFindAndCreatePass(Pass: *const c_char) -> PassRef;\n     pub fn LLVMRustAddPass(PM: PassManagerRef, Pass: PassRef);\n \n+    pub fn LLVMRustHasFeature(T: TargetMachineRef,\n+                              s: *const c_char) -> bool;\n+\n     pub fn LLVMRustCreateTargetMachine(Triple: *const c_char,\n                                        CPU: *const c_char,\n                                        Features: *const c_char,"}, {"sha": "b3d4e35d7b09c75560a9bba4f2c069dda4be76c7", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c883463e9481ca58c9c3b0aefe7873c88e2aa4e0/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=c883463e9481ca58c9c3b0aefe7873c88e2aa4e0", "patch": "@@ -97,6 +97,75 @@ LLVMRustAddPass(LLVMPassManagerRef PM, Pass *pass) {\n     pm->add(pass);\n }\n \n+#ifdef LLVM_COMPONENT_X86\n+#define SUBTARGET_X86 SUBTARGET(X86)\n+#else\n+#define SUBTARGET_X86\n+#endif\n+\n+#ifdef LLVM_COMPONENT_ARM\n+#define SUBTARGET_ARM SUBTARGET(ARM)\n+#else\n+#define SUBTARGET_ARM\n+#endif\n+\n+#ifdef LLVM_COMPONENT_AARCH64\n+#define SUBTARGET_AARCH64 SUBTARGET(AArch64)\n+#else\n+#define SUBTARGET_AARCH64\n+#endif\n+\n+#ifdef LLVM_COMPONENT_MIPS\n+#define SUBTARGET_MIPS SUBTARGET(Mips)\n+#else\n+#define SUBTARGET_MIPS\n+#endif\n+\n+#ifdef LLVM_COMPONENT_POWERPC\n+#define SUBTARGET_PPC SUBTARGET(PPC)\n+#else\n+#define SUBTARGET_PPC\n+#endif\n+\n+#define GEN_SUBTARGETS    \\\n+        SUBTARGET_X86     \\\n+        SUBTARGET_ARM     \\\n+        SUBTARGET_AARCH64 \\\n+        SUBTARGET_MIPS    \\\n+        SUBTARGET_PPC\n+\n+#define SUBTARGET(x) namespace llvm {                \\\n+    extern const SubtargetFeatureKV x##FeatureKV[];  \\\n+    extern const SubtargetFeatureKV x##SubTypeKV[];  \\\n+  }\n+\n+GEN_SUBTARGETS\n+#undef SUBTARGET\n+\n+extern \"C\" bool\n+LLVMRustHasFeature(LLVMTargetMachineRef TM,\n+\t\t   const char *feature) {\n+    TargetMachine *Target = unwrap(TM);\n+    const MCSubtargetInfo *MCInfo = Target->getMCSubtargetInfo();\n+    const FeatureBitset &Bits = MCInfo->getFeatureBits();\n+    const llvm::SubtargetFeatureKV *FeatureEntry;\n+\n+#define SUBTARGET(x)                                        \\\n+    if (MCInfo->isCPUStringValid(x##SubTypeKV[0].Key)) {    \\\n+        FeatureEntry = x##FeatureKV;                       \\\n+    } else\n+\n+    GEN_SUBTARGETS {\n+        return false;\n+    }\n+#undef SUBTARGET\n+\n+    while (strcmp(feature, FeatureEntry->Key) != 0)\n+        FeatureEntry++;\n+\n+    return (Bits & FeatureEntry->Value) == FeatureEntry->Value;\n+}\n+\n extern \"C\" LLVMTargetMachineRef\n LLVMRustCreateTargetMachine(const char *triple,\n                             const char *cpu,"}]}