{"sha": "060dba67b7523a69223a9aef7c9fe2494ec27535", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MGRiYTY3Yjc1MjNhNjkyMjNhOWFlZjdjOWZlMjQ5NGVjMjc1MzU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-01-21T01:15:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-01-22T05:41:46Z"}, "message": "Add loop head span to hir", "tree": {"sha": "fecb07734e8e5b40293546ce53d410972f13316e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fecb07734e8e5b40293546ce53d410972f13316e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/060dba67b7523a69223a9aef7c9fe2494ec27535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/060dba67b7523a69223a9aef7c9fe2494ec27535", "html_url": "https://github.com/rust-lang/rust/commit/060dba67b7523a69223a9aef7c9fe2494ec27535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/060dba67b7523a69223a9aef7c9fe2494ec27535/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a701ff981d8768e2b81a053bf9189ff67a2bb7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/a701ff981d8768e2b81a053bf9189ff67a2bb7ea", "html_url": "https://github.com/rust-lang/rust/commit/a701ff981d8768e2b81a053bf9189ff67a2bb7ea"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "31360158e2b4e3afc5ccda8ee96f67cd5e8fc540", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -10,9 +10,9 @@ use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_session::parse::feature_err;\n-use rustc_span::hygiene::ForLoopLoc;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::{hygiene::ForLoopLoc, DUMMY_SP};\n use rustc_target::asm;\n use std::collections::hash_map::Entry;\n use std::fmt::Write;\n@@ -102,6 +102,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         this.lower_block(body, false),\n                         opt_label,\n                         hir::LoopSource::Loop,\n+                        DUMMY_SP,\n                     )\n                 }),\n                 ExprKind::TryBlock(ref body) => self.lower_expr_try_block(body),\n@@ -453,7 +454,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             self.expr_match(span, scrutinee, arena_vec![self; then_arm, else_arm], desugar);\n \n         // `[opt_ident]: loop { ... }`\n-        hir::ExprKind::Loop(self.block_expr(self.arena.alloc(match_expr)), opt_label, source)\n+        hir::ExprKind::Loop(\n+            self.block_expr(self.arena.alloc(match_expr)),\n+            opt_label,\n+            source,\n+            span.with_hi(cond.span.hi()),\n+        )\n     }\n \n     /// Desugar `try { <stmts>; <expr> }` into `{ <stmts>; ::std::ops::Try::from_ok(<expr>) }`,\n@@ -748,7 +754,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // loop { .. }\n         let loop_expr = self.arena.alloc(hir::Expr {\n             hir_id: loop_hir_id,\n-            kind: hir::ExprKind::Loop(loop_block, None, hir::LoopSource::Loop),\n+            kind: hir::ExprKind::Loop(loop_block, None, hir::LoopSource::Loop, span),\n             span,\n             attrs: ThinVec::new(),\n         });\n@@ -1709,7 +1715,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         );\n \n         // `[opt_ident]: loop { ... }`\n-        let kind = hir::ExprKind::Loop(loop_block, opt_label, hir::LoopSource::ForLoop);\n+        let kind = hir::ExprKind::Loop(\n+            loop_block,\n+            opt_label,\n+            hir::LoopSource::ForLoop,\n+            e.span.with_hi(orig_head_span.hi()),\n+        );\n         let loop_expr = self.arena.alloc(hir::Expr {\n             hir_id: self.lower_node_id(e.id),\n             kind,"}, {"sha": "35170fa7c1d0250cd27e7430b13a0b61c3fcf927", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -1617,7 +1617,9 @@ pub enum ExprKind<'hir> {\n     /// A conditionless loop (can be exited with `break`, `continue`, or `return`).\n     ///\n     /// I.e., `'label: loop { <block> }`.\n-    Loop(&'hir Block<'hir>, Option<Label>, LoopSource),\n+    ///\n+    /// The `Span` is the loop header (`for x in y`/`while let pat = expr`).\n+    Loop(&'hir Block<'hir>, Option<Label>, LoopSource, Span),\n     /// A `match` block, with a source that indicates whether or not it is\n     /// the result of a desugaring, and if so, which kind.\n     Match(&'hir Expr<'hir>, &'hir [Arm<'hir>], MatchSource),"}, {"sha": "6c1bee2335a00552c8a260ebe887546f5ca72243", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -1151,7 +1151,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>)\n             visitor.visit_expr(then);\n             walk_list!(visitor, visit_expr, else_opt);\n         }\n-        ExprKind::Loop(ref block, ref opt_label, _) => {\n+        ExprKind::Loop(ref block, ref opt_label, _, _) => {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);\n         }"}, {"sha": "f1c2a6b7e6e85af5f75e70c3e8089d836f66ffbe", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -1396,7 +1396,7 @@ impl<'a> State<'a> {\n             hir::ExprKind::If(ref test, ref blk, ref elseopt) => {\n                 self.print_if(&test, &blk, elseopt.as_ref().map(|e| &**e));\n             }\n-            hir::ExprKind::Loop(ref blk, opt_label, _) => {\n+            hir::ExprKind::Loop(ref blk, opt_label, _, _) => {\n                 if let Some(label) = opt_label {\n                     self.print_ident(label.ident);\n                     self.word_space(\":\");"}, {"sha": "2962cbe8157f64b0f98bcbe710b36d7ec99388a1", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -546,9 +546,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             scrutinee: discr.to_ref(),\n             arms: arms.iter().map(|a| convert_arm(cx, a)).collect(),\n         },\n-        hir::ExprKind::Loop(ref body, _, _) => {\n-            ExprKind::Loop { body: block::to_expr_ref(cx, body) }\n-        }\n+        hir::ExprKind::Loop(ref body, ..) => ExprKind::Loop { body: block::to_expr_ref(cx, body) },\n         hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n             lhs: source.to_ref(),\n             name: Field::new(cx.tcx.field_index(expr.hir_id, cx.typeck_results)),"}, {"sha": "8950f9b33b6dac3ee4d1084d27839a3eca5de028", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -199,7 +199,7 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n             // Skip the following checks if we are not currently in a const context.\n             _ if self.const_kind.is_none() => {}\n \n-            hir::ExprKind::Loop(_, _, source) => {\n+            hir::ExprKind::Loop(_, _, source, _) => {\n                 self.const_check_violated(NonConstExpr::Loop(*source), e.span);\n             }\n "}, {"sha": "c11dc231d482c446ee672934fc472b4ece4bd391", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -844,7 +844,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n             // Note that labels have been resolved, so we don't need to look\n             // at the label ident\n-            hir::ExprKind::Loop(ref blk, _, _) => self.propagate_through_loop(expr, &blk, succ),\n+            hir::ExprKind::Loop(ref blk, ..) => self.propagate_through_loop(expr, &blk, succ),\n \n             hir::ExprKind::If(ref cond, ref then, ref else_opt) => {\n                 //"}, {"sha": "ed3bfce510c1090c8614ba74a5293ce6c1cd3731", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n \n     fn visit_expr(&mut self, e: &'hir hir::Expr<'hir>) {\n         match e.kind {\n-            hir::ExprKind::Loop(ref b, _, source) => {\n+            hir::ExprKind::Loop(ref b, _, source, _) => {\n                 self.with_context(Loop(source), |v| v.visit_block(&b));\n             }\n             hir::ExprKind::Closure(_, ref function_decl, b, span, movability) => {\n@@ -89,8 +89,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                     Err(hir::LoopIdError::UnresolvedLabel) => None,\n                 };\n \n-                if let Some(loop_id) = loop_id {\n-                    if let Node::Block(_) = self.hir_map.find(loop_id).unwrap() {\n+                if let Some(Node::Block(_)) = loop_id.and_then(|id| self.hir_map.find(id)) {\n                         return;\n                     }\n                 }"}, {"sha": "64356f73f6c65f6e76c74249a4d1f6cdbedc2c18", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -252,7 +252,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n                 terminating(then.hir_id.local_id);\n             }\n \n-            hir::ExprKind::Loop(ref body, _, _) => {\n+            hir::ExprKind::Loop(ref body, _, _, _) => {\n                 terminating(body.hir_id.local_id);\n             }\n "}, {"sha": "95ac2a31dd321a0930e46dd0d126f76d5878f5a1", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -1173,7 +1173,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     }\n \n     fn expression_label(ex: &hir::Expr<'_>) -> Option<Ident> {\n-        if let hir::ExprKind::Loop(_, Some(label), _) = ex.kind { Some(label.ident) } else { None }\n+        if let hir::ExprKind::Loop(_, Some(label), ..) = ex.kind { Some(label.ident) } else { None }\n     }\n \n     fn check_if_label_shadows_lifetime(tcx: TyCtxt<'_>, mut scope: ScopeRef<'_>, label: Ident) {"}, {"sha": "8f463af73c4774f037dfdedd5e9ce8d054f557b5", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -266,7 +266,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             ExprKind::Ret(ref expr_opt) => self.check_expr_return(expr_opt.as_deref(), expr),\n-            ExprKind::Loop(ref body, _, source) => {\n+            ExprKind::Loop(ref body, _, source, _) => {\n                 self.check_expr_loop(body, source, expected, expr)\n             }\n             ExprKind::Match(ref discrim, ref arms, match_src) => {"}, {"sha": "24364c6954e490e5d4f9a5dc3ba8f2a8f9a95041", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n             | hir::ExprKind::ConstBlock(..)\n             | hir::ExprKind::Err => {}\n \n-            hir::ExprKind::Loop(ref blk, _, _) => {\n+            hir::ExprKind::Loop(ref blk, ..) => {\n                 self.walk_block(blk);\n             }\n "}, {"sha": "bbcea387de2cb81bb38838ce5cf1e001d5a91230", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -533,7 +533,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n         }\n \n         // check for never_loop\n-        if let ExprKind::Loop(ref block, _, _) = expr.kind {\n+        if let ExprKind::Loop(ref block, _, _, _) = expr.kind {\n             match never_loop_block(block, expr.hir_id) {\n                 NeverLoopResult::AlwaysBreak => span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\"),\n                 NeverLoopResult::MayContinueMainLoop | NeverLoopResult::Otherwise => (),\n@@ -543,7 +543,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n         // check for `loop { if let {} else break }` that could be `while let`\n         // (also matches an explicit \"match\" instead of \"if let\")\n         // (even if the \"match\" or \"if let\" is used for declaration)\n-        if let ExprKind::Loop(ref block, _, LoopSource::Loop) = expr.kind {\n+        if let ExprKind::Loop(ref block, _, LoopSource::Loop, _) = expr.kind {\n             // also check for empty `loop {}` statements, skipping those in #[panic_handler]\n             if block.stmts.is_empty() && block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n                 let msg = \"empty `loop {}` wastes CPU cycles\";\n@@ -738,7 +738,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n         | ExprKind::Assign(ref e1, ref e2, _)\n         | ExprKind::AssignOp(_, ref e1, ref e2)\n         | ExprKind::Index(ref e1, ref e2) => never_loop_expr_all(&mut [&**e1, &**e2].iter().cloned(), main_loop_id),\n-        ExprKind::Loop(ref b, _, _) => {\n+        ExprKind::Loop(ref b, _, _, _) => {\n             // Break can come from the inner loop so remove them.\n             absorb_break(&never_loop_block(b, main_loop_id))\n         },\n@@ -1314,7 +1314,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SameItemPushVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n             // Non-determinism may occur ... don't give a lint\n-            ExprKind::Loop(_, _, _) | ExprKind::Match(_, _, _) => self.should_lint = false,\n+            ExprKind::Loop(..) | ExprKind::Match(..) => self.should_lint = false,\n             ExprKind::Block(block, _) => self.visit_block(block),\n             _ => {},\n         }"}, {"sha": "bb4d84834043a4f2a6ef8ac501992a46a5d8315a", "filename": "src/tools/clippy/clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_continue.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -221,7 +221,7 @@ where\n {\n     if let ast::ExprKind::While(_, loop_block, label)\n     | ast::ExprKind::ForLoop(_, _, loop_block, label)\n-    | ast::ExprKind::Loop(loop_block, label) = &expr.kind\n+    | ast::ExprKind::Loop(loop_block, label, _) = &expr.kind\n     {\n         func(loop_block, label.as_ref());\n     }"}, {"sha": "d5b1767e945b9ea4a81b4b9a07d5ed70d56c0cb1", "filename": "src/tools/clippy/clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060dba67b7523a69223a9aef7c9fe2494ec27535/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060dba67b7523a69223a9aef7c9fe2494ec27535/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fshadow.rs?ref=060dba67b7523a69223a9aef7c9fe2494ec27535", "patch": "@@ -325,7 +325,7 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n         | ExprKind::Field(ref e, _)\n         | ExprKind::AddrOf(_, _, ref e)\n         | ExprKind::Box(ref e) => check_expr(cx, e, bindings),\n-        ExprKind::Block(ref block, _) | ExprKind::Loop(ref block, _, _) => check_block(cx, block, bindings),\n+        ExprKind::Block(ref block, _) | ExprKind::Loop(ref block, ..) => check_block(cx, block, bindings),\n         // ExprKind::Call\n         // ExprKind::MethodCall\n         ExprKind::Array(v) | ExprKind::Tup(v) => {"}]}