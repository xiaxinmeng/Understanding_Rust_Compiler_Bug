{"sha": "3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNmY0MTAyNmJlYTJhOTlhYjA5ZDE1ZjNkYmVkODM4YWYxZWJjYWM=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-02-11T16:31:42Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-02-19T23:54:58Z"}, "message": "store the normalized types of field accesses\n\nFixes #31504", "tree": {"sha": "cdf9f047e67d8de172878986e66f115bdd5aeef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdf9f047e67d8de172878986e66f115bdd5aeef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "html_url": "https://github.com/rust-lang/rust/commit/3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "350b50df0035b5bb0520d5a84adfc117c5ce9752", "url": "https://api.github.com/repos/rust-lang/rust/commits/350b50df0035b5bb0520d5a84adfc117c5ce9752", "html_url": "https://github.com/rust-lang/rust/commit/350b50df0035b5bb0520d5a84adfc117c5ce9752"}], "stats": {"total": 206, "additions": 150, "deletions": 56}, "files": [{"sha": "ea6b4df8104d5996f2c914e0788663e16a08e8a3", "filename": "src/librustc/middle/ty/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fcontext.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -131,6 +131,12 @@ pub struct Tables<'tcx> {\n     /// equivalents. This table is not used in trans (since regions\n     /// are erased there) and hence is not serialized to metadata.\n     pub liberated_fn_sigs: NodeMap<ty::FnSig<'tcx>>,\n+\n+    /// For each FRU expression, record the normalized types of the fields\n+    /// of the struct - this is needed because it is non-trivial to\n+    /// normalize while preserving regions. This table is used only in\n+    /// MIR construction and hence is not serialized to metadata.\n+    pub fru_field_types: NodeMap<Vec<Ty<'tcx>>>\n }\n \n impl<'tcx> Tables<'tcx> {\n@@ -144,6 +150,7 @@ impl<'tcx> Tables<'tcx> {\n             closure_tys: DefIdMap(),\n             closure_kinds: DefIdMap(),\n             liberated_fn_sigs: NodeMap(),\n+            fru_field_types: NodeMap()\n         }\n     }\n "}, {"sha": "ce7b1ceb355401d02b08fd3a4c5362affffee396", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -502,7 +502,7 @@ pub struct Projection<'tcx, B, V> {\n #[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable)]\n pub enum ProjectionElem<'tcx, V> {\n     Deref,\n-    Field(Field),\n+    Field(Field, Ty<'tcx>),\n     Index(V),\n \n     /// These indices are generated by slice patterns. Easiest to explain\n@@ -553,8 +553,8 @@ impl Field {\n }\n \n impl<'tcx> Lvalue<'tcx> {\n-    pub fn field(self, f: Field) -> Lvalue<'tcx> {\n-        self.elem(ProjectionElem::Field(f))\n+    pub fn field(self, f: Field, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n+        self.elem(ProjectionElem::Field(f, ty))\n     }\n \n     pub fn deref(self) -> Lvalue<'tcx> {\n@@ -594,8 +594,8 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n                         write!(fmt, \"({:?} as {})\", data.base, adt_def.variants[index].name),\n                     ProjectionElem::Deref =>\n                         write!(fmt, \"(*{:?})\", data.base),\n-                    ProjectionElem::Field(field) =>\n-                        write!(fmt, \"{:?}.{:?}\", data.base, field.index()),\n+                    ProjectionElem::Field(field, ty) =>\n+                        write!(fmt, \"({:?}.{:?}: {:?})\", data.base, field.index(), ty),\n                     ProjectionElem::Index(ref index) =>\n                         write!(fmt, \"{:?}[{:?}]\", data.base, index),\n                     ProjectionElem::ConstantIndex { offset, min_length, from_end: false } =>"}, {"sha": "20e083f840f8cf908af68e039912957a0480ec06", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -73,23 +73,7 @@ impl<'tcx> LvalueTy<'tcx> {\n                         tcx.sess.bug(&format!(\"cannot downcast non-enum type: `{:?}`\", self))\n                     }\n                 },\n-            ProjectionElem::Field(field) => {\n-                let field_ty = match self {\n-                    LvalueTy::Ty { ty } => match ty.sty {\n-                        ty::TyStruct(adt_def, substs) =>\n-                            adt_def.struct_variant().fields[field.index()].ty(tcx, substs),\n-                        ty::TyTuple(ref tys) =>\n-                            tys[field.index()],\n-                        ty::TyClosure(_, ref closure_substs) =>\n-                            closure_substs.upvar_tys[field.index()],\n-                        _ =>\n-                            tcx.sess.bug(&format!(\"cannot get field of type: `{:?}`\", ty)),\n-                    },\n-                    LvalueTy::Downcast { adt_def, substs, variant_index } =>\n-                        adt_def.variants[variant_index].fields[field.index()].ty(tcx, substs),\n-                };\n-                LvalueTy::Ty { ty: field_ty }\n-            }\n+            ProjectionElem::Field(_, fty) => LvalueTy::Ty { ty: fty }\n         }\n     }\n }"}, {"sha": "b2c7507ed7b282aedca237bd5e6d53c0fa258908", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -41,7 +41,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             }\n             ExprKind::Field { lhs, name } => {\n                 let lvalue = unpack!(block = this.as_lvalue(block, lhs));\n-                let lvalue = lvalue.field(name);\n+                let lvalue = lvalue.field(name, expr.ty);\n                 block.and(lvalue)\n             }\n             ExprKind::Deref { arg } => {"}, {"sha": "53b106d6d867948b2a4294b8a504b3174bc60d8d", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -139,33 +139,30 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                           .collect();\n                 block.and(Rvalue::Aggregate(AggregateKind::Closure(closure_id, substs), upvars))\n             }\n-            ExprKind::Adt { adt_def, variant_index, substs, fields, base } => { // see (*) above\n+            ExprKind::Adt {\n+                adt_def, variant_index, substs, fields, base\n+            } => { // see (*) above\n                 // first process the set of fields that were provided\n                 // (evaluating them in order given by user)\n                 let fields_map: FnvHashMap<_, _> =\n                     fields.into_iter()\n                           .map(|f| (f.name, unpack!(block = this.as_operand(block, f.expr))))\n                           .collect();\n \n-                // if base expression is given, evaluate it now\n-                let base = base.map(|base| unpack!(block = this.as_lvalue(block, base)));\n-\n-                // get list of all fields that we will need\n                 let field_names = this.hir.all_fields(adt_def, variant_index);\n \n-                // for the actual values we use, take either the\n-                // expr the user specified or, if they didn't\n-                // specify something for this field name, create a\n-                // path relative to the base (which must have been\n-                // supplied, or the IR is internally\n-                // inconsistent).\n-                let fields: Vec<_> =\n+                let fields = if let Some(FruInfo { base, field_types }) = base {\n+                    let base = unpack!(block = this.as_lvalue(block, base));\n                     field_names.into_iter()\n-                               .map(|n| match fields_map.get(&n) {\n-                                   Some(v) => v.clone(),\n-                                   None => Operand::Consume(base.clone().unwrap().field(n)),\n-                               })\n-                               .collect();\n+                        .zip(field_types.into_iter())\n+                        .map(|(n, ty)| match fields_map.get(&n) {\n+                            Some(v) => v.clone(),\n+                            None => Operand::Consume(base.clone().field(n, ty))\n+                        })\n+                        .collect()\n+                } else {\n+                    field_names.iter().map(|n| fields_map[n].clone()).collect()\n+                };\n \n                 block.and(Rvalue::Aggregate(AggregateKind::Adt(adt_def, variant_index, substs),\n                                             fields))"}, {"sha": "02f32da2b83fc23d796bda27ff78ebc1a09d93e6", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -404,7 +404,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n             subpatterns.iter()\n                        .map(|subpattern| {\n                            // e.g., `(x as Variant).0`\n-                           let lvalue = downcast_lvalue.clone().field(subpattern.field);\n+                           let lvalue = downcast_lvalue.clone().field(subpattern.field,\n+                                                                      subpattern.field_ty());\n                            // e.g., `(x as Variant).0 @ P1`\n                            MatchPair::new(lvalue, &subpattern.pattern)\n                        });"}, {"sha": "c295ed168badb0307928a7b05c6d10209bb718e0", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -21,7 +21,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                                    -> Vec<MatchPair<'pat, 'tcx>> {\n         subpatterns.iter()\n                    .map(|fieldpat| {\n-                       let lvalue = lvalue.clone().field(fieldpat.field);\n+                       let lvalue = lvalue.clone().field(fieldpat.field,\n+                                                         fieldpat.field_ty());\n                        MatchPair::new(lvalue, &fieldpat.pattern)\n                    })\n                    .collect()"}, {"sha": "facc2541652e8875304d30cb0fed99bdb8a31a8a", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -248,21 +248,31 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                             variant_index: 0,\n                             substs: substs,\n                             fields: field_refs,\n-                            base: base.to_ref(),\n+                            base: base.as_ref().map(|base| {\n+                                FruInfo {\n+                                    base: base.to_ref(),\n+                                    field_types: cx.tcx.tables\n+                                        .borrow()\n+                                        .fru_field_types[&self.id]\n+                                        .clone()\n+                                }\n+                            })\n                         }\n                     }\n                     ty::TyEnum(adt, substs) => {\n                         match cx.tcx.def_map.borrow()[&self.id].full_def() {\n                             Def::Variant(enum_id, variant_id) => {\n                                 debug_assert!(adt.did == enum_id);\n+                                assert!(base.is_none());\n+\n                                 let index = adt.variant_index_with_id(variant_id);\n                                 let field_refs = field_refs(&adt.variants[index], fields);\n                                 ExprKind::Adt {\n                                     adt_def: adt,\n                                     variant_index: index,\n                                     substs: substs,\n                                     fields: field_refs,\n-                                    base: base.to_ref(),\n+                                    base: None\n                                 }\n                             }\n                             ref def => {\n@@ -810,11 +820,16 @@ fn convert_var<'a, 'tcx: 'a>(cx: &mut Cx<'a, 'tcx>,\n             };\n             match upvar_capture {\n                 ty::UpvarCapture::ByValue => field_kind,\n-                ty::UpvarCapture::ByRef(_) => {\n+                ty::UpvarCapture::ByRef(borrow) => {\n                     ExprKind::Deref {\n                         arg: Expr {\n                             temp_lifetime: temp_lifetime,\n-                            ty: var_ty,\n+                            ty: cx.tcx.mk_ref(\n+                                cx.tcx.mk_region(borrow.region),\n+                                ty::TypeAndMut {\n+                                    ty: var_ty,\n+                                    mutbl: borrow.kind.to_mutbl_lossy()\n+                                }),\n                             span: expr.span,\n                             kind: field_kind,\n                         }.to_ref()"}, {"sha": "6f4375d53ec4bf95f24531532d08b93682fa575d", "filename": "src/librustc_mir/hair/cx/pattern.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fpattern.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -314,3 +314,20 @@ impl<'patcx, 'cx, 'tcx> PatCx<'patcx, 'cx, 'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> FieldPattern<'tcx> {\n+    pub fn field_ty(&self) -> Ty<'tcx> {\n+        debug!(\"field_ty({:?},ty={:?})\", self, self.pattern.ty);\n+        let r = match *self.pattern.kind {\n+            PatternKind::Binding { mode: BindingMode::ByRef(..), ..} => {\n+                match self.pattern.ty.sty {\n+                    ty::TyRef(_, mt) => mt.ty,\n+                    _ => unreachable!()\n+                }\n+            }\n+            _ => self.pattern.ty\n+        };\n+        debug!(\"field_ty -> {:?}\", r);\n+        r\n+    }\n+}"}, {"sha": "e8edd4067e2f827dd0971a80b130aa17e2b896c1", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -229,7 +229,7 @@ pub enum ExprKind<'tcx> {\n         variant_index: usize,\n         substs: &'tcx Substs<'tcx>,\n         fields: Vec<FieldExprRef<'tcx>>,\n-        base: Option<ExprRef<'tcx>>,\n+        base: Option<FruInfo<'tcx>>\n     },\n     Closure {\n         closure_id: DefId,\n@@ -256,6 +256,12 @@ pub struct FieldExprRef<'tcx> {\n     pub expr: ExprRef<'tcx>,\n }\n \n+#[derive(Clone, Debug)]\n+pub struct FruInfo<'tcx> {\n+    pub base: ExprRef<'tcx>,\n+    pub field_types: Vec<Ty<'tcx>>\n+}\n+\n #[derive(Clone, Debug)]\n pub struct Arm<'tcx> {\n     pub patterns: Vec<Pattern<'tcx>>,"}, {"sha": "8f4d452df51fab80a150d2aaa766c7b3dee17d2a", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -47,6 +47,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'tcx> {\n \n     fn visit_lvalue(&mut self, lvalue: &Lvalue<'tcx>, context: visit::LvalueContext) {\n         self.super_lvalue(lvalue, context);\n+        debug!(\"visiting lvalue {:?}\", lvalue);\n         let lv_ty = self.mir.lvalue_ty(self.tcx(), lvalue).to_ty(self.tcx());\n         self.sanitize_type(lvalue, lv_ty);\n     }"}, {"sha": "826fb025bc1f72438caa76e675104b7d14b1f0f7", "filename": "src/librustc_trans/trans/mir/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Flvalue.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -126,7 +126,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             }\n                         })\n                     }\n-                    mir::ProjectionElem::Field(ref field) => {\n+                    mir::ProjectionElem::Field(ref field, _) => {\n                         let base_ty = tr_base.ty.to_ty(tcx);\n                         let base_repr = adt::represent_type(ccx, base_ty);\n                         let discr = match tr_base.ty {"}, {"sha": "7ab4975c8b8aed6ae2fb89d4e1228c0fa8fd0a68", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -3179,8 +3179,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             check_struct_fields_on_error(fcx, expr.id, fields, base_expr);\n             return;\n         }\n-        let (adt, variant) = match fcx.def_struct_variant(def, path.span) {\n-            Some((adt, variant)) => (adt, variant),\n+        let variant = match fcx.def_struct_variant(def, path.span) {\n+            Some((_, variant)) => variant,\n             None => {\n                 span_err!(fcx.tcx().sess, path.span, E0071,\n                           \"`{}` does not name a structure\",\n@@ -3195,12 +3195,23 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n \n         check_expr_struct_fields(fcx, expr_ty, expr.span, variant, fields,\n                                  base_expr.is_none());\n-\n         if let &Some(ref base_expr) = base_expr {\n             check_expr_has_type(fcx, base_expr, expr_ty);\n-            if adt.adt_kind() == ty::AdtKind::Enum {\n-                span_err!(tcx.sess, base_expr.span, E0436,\n-                          \"functional record update syntax requires a struct\");\n+            match expr_ty.sty {\n+                ty::TyStruct(adt, substs) => {\n+                    fcx.inh.tables.borrow_mut().fru_field_types.insert(\n+                        expr.id,\n+                        adt.struct_variant().fields.iter().map(|f| {\n+                            fcx.normalize_associated_types_in(\n+                                expr.span, &f.ty(tcx, substs)\n+                            )\n+                        }).collect()\n+                    );\n+                }\n+                _ => {\n+                    span_err!(tcx.sess, base_expr.span, E0436,\n+                              \"functional record update syntax requires a struct\");\n+                }\n             }\n         }\n     }"}, {"sha": "9b8b6dedb6345a1818b7f087e5edca423721dc08", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -43,6 +43,7 @@ pub fn resolve_type_vars_in_expr(fcx: &FnCtxt, e: &hir::Expr) {\n     wbcx.visit_upvar_borrow_map();\n     wbcx.visit_closures();\n     wbcx.visit_liberated_fn_sigs();\n+    wbcx.visit_fru_field_types();\n }\n \n pub fn resolve_type_vars_in_fn(fcx: &FnCtxt,\n@@ -64,6 +65,7 @@ pub fn resolve_type_vars_in_fn(fcx: &FnCtxt,\n     wbcx.visit_upvar_borrow_map();\n     wbcx.visit_closures();\n     wbcx.visit_liberated_fn_sigs();\n+    wbcx.visit_fru_field_types();\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -371,6 +373,13 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         }\n     }\n \n+    fn visit_fru_field_types(&self) {\n+        for (&node_id, ftys) in self.fcx.inh.tables.borrow().fru_field_types.iter() {\n+            let ftys = self.resolve(ftys, ResolvingFieldTypes(node_id));\n+            self.tcx().tables.borrow_mut().fru_field_types.insert(node_id, ftys);\n+        }\n+    }\n+\n     fn resolve<T:TypeFoldable<'tcx>>(&self, t: &T, reason: ResolveReason) -> T {\n         t.fold_with(&mut Resolver::new(self.fcx, reason))\n     }\n@@ -387,6 +396,7 @@ enum ResolveReason {\n     ResolvingUpvar(ty::UpvarId),\n     ResolvingClosure(DefId),\n     ResolvingFnSig(ast::NodeId),\n+    ResolvingFieldTypes(ast::NodeId)\n }\n \n impl ResolveReason {\n@@ -401,6 +411,9 @@ impl ResolveReason {\n             ResolvingFnSig(id) => {\n                 tcx.map.span(id)\n             }\n+            ResolvingFieldTypes(id) => {\n+                tcx.map.span(id)\n+            }\n             ResolvingClosure(did) => {\n                 if let Some(node_id) = tcx.map.as_local_node_id(did) {\n                     tcx.expr_span(node_id)\n@@ -478,14 +491,14 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                               \"cannot determine a type for this closure\")\n                 }\n \n-                ResolvingFnSig(id) => {\n+                ResolvingFnSig(id) | ResolvingFieldTypes(id) => {\n                     // any failures here should also fail when\n                     // resolving the patterns, closure types, or\n                     // something else.\n                     let span = self.reason.span(self.tcx);\n                     self.tcx.sess.delay_span_bug(\n                         span,\n-                        &format!(\"cannot resolve some aspect of fn sig for {:?}\", id));\n+                        &format!(\"cannot resolve some aspect of data for {:?}\", id));\n                 }\n             }\n         }"}, {"sha": "1f75369b94a8617ecd54c1f5a080049217038760", "filename": "src/test/run-pass/mir_struct_with_assoc_ty.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Ftest%2Frun-pass%2Fmir_struct_with_assoc_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6f41026bea2a99ab09d15f3dbed838af1ebcac/src%2Ftest%2Frun-pass%2Fmir_struct_with_assoc_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_struct_with_assoc_ty.rs?ref=3c6f41026bea2a99ab09d15f3dbed838af1ebcac", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+use std::marker::PhantomData;\n+\n+pub trait DataBind {\n+    type Data;\n+}\n+\n+impl<T> DataBind for Global<T> {\n+    type Data = T;\n+}\n+\n+pub struct Global<T>(PhantomData<T>);\n+\n+pub struct Data {\n+    pub offsets: <Global<[u32; 2]> as DataBind>::Data,\n+}\n+\n+#[rustc_mir]\n+fn create_data() -> Data {\n+    let mut d = Data { offsets: [1, 2] };\n+    d.offsets[0] = 3;\n+    d\n+}\n+\n+\n+fn main() {\n+    let d = create_data();\n+    assert_eq!(d.offsets[0], 3);\n+    assert_eq!(d.offsets[1], 2);\n+}"}]}