{"sha": "7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTEyMzJiNWVhOGY2YWIwMTFlZmUyY2UzZmI5N2Q5NTUzNDJmZGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-07T11:38:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-07T11:38:13Z"}, "message": "libcore: ignore tests in Miri instead of removing them entirely", "tree": {"sha": "034ef55e7fabf4da05989eed650176b974863828", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/034ef55e7fabf4da05989eed650176b974863828"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "html_url": "https://github.com/rust-lang/rust/commit/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a953cd9aa8b4c8b821bc672a4408900758e7e63", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a953cd9aa8b4c8b821bc672a4408900758e7e63", "html_url": "https://github.com/rust-lang/rust/commit/0a953cd9aa8b4c8b821bc672a4408900758e7e63"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "361758f859e2e03afdd7f3939f4520077abf81f7", "filename": "src/libcore/tests/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fdec2flt%2Fmod.rs?ref=7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "patch": "@@ -53,7 +53,7 @@ fn large() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn subnormals() {\n     test_literal!(5e-324);\n     test_literal!(91e-324);\n@@ -65,7 +65,7 @@ fn subnormals() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn infinity() {\n     test_literal!(1e400);\n     test_literal!(1e309);"}, {"sha": "2f94ea2fc4b70494737f01f8e5eb123fc94805ba", "filename": "src/libcore/tests/num/flt2dec/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fmod.rs?ref=7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "patch": "@@ -256,7 +256,6 @@ pub fn f32_shortest_sanity_test<F>(mut f: F) where F: FnMut(&Decoded, &mut [u8])\n     check_shortest!(f(minf32) => b\"1\", -44);\n }\n \n-#[cfg(not(miri))] // Miri is too slow\n pub fn f32_exact_sanity_test<F>(mut f: F)\n         where F: FnMut(&Decoded, &mut [u8], i16) -> (usize, i16) {\n     let minf32 = ldexp_f32(1.0, -149);\n@@ -362,7 +361,6 @@ pub fn f64_shortest_sanity_test<F>(mut f: F) where F: FnMut(&Decoded, &mut [u8])\n     check_shortest!(f(minf64) => b\"5\", -323);\n }\n \n-#[cfg(not(miri))] // Miri is too slow\n pub fn f64_exact_sanity_test<F>(mut f: F)\n         where F: FnMut(&Decoded, &mut [u8], i16) -> (usize, i16) {\n     let minf64 = ldexp_f64(1.0, -1074);"}, {"sha": "3d985c6796b16908e96c71ba32f9523f9d622282", "filename": "src/libcore/tests/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "patch": "@@ -22,7 +22,7 @@ fn shortest_sanity_test() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn exact_sanity_test() {\n     // This test ends up running what I can only assume is some corner-ish case\n     // of the `exp2` library function, defined in whatever C runtime we're"}, {"sha": "a2c7f1b0e83e0e2d8dfd6fac4947342ee4468b82", "filename": "src/libcore/tests/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "patch": "@@ -36,7 +36,7 @@ fn shortest_sanity_test() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn exact_sanity_test() {\n     // See comments in dragon.rs's exact_sanity_test for why this test is\n     // ignored on MSVC"}, {"sha": "54dbe3004cde68d8c23e0375844c1a78e4e32f0f", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "patch": "@@ -291,7 +291,7 @@ fn write_unaligned_drop() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n+#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_zst() {\n     // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n     // all, because no amount of elements will align the pointer.\n@@ -306,7 +306,7 @@ fn align_offset_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n+#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_stride1() {\n     // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n     // number of bytes.\n@@ -323,7 +323,7 @@ fn align_offset_stride1() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn align_offset_weird_strides() {\n     #[repr(packed)]\n     struct A3(u16, u8);"}, {"sha": "e65d99bbb833e3c23d09af073dc0c2b581831d1d", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "patch": "@@ -1172,7 +1172,7 @@ fn test_rotate_right() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn brute_force_rotate_test_0() {\n     // In case of edge cases involving multiple algorithms\n     let n = 300;\n@@ -1291,7 +1291,7 @@ fn sort_unstable() {\n \n #[test]\n #[cfg(not(target_arch = \"wasm32\"))]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn partition_at_index() {\n     use core::cmp::Ordering::{Equal, Greater, Less};\n     use rand::rngs::StdRng;\n@@ -1494,7 +1494,7 @@ pub mod memchr {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n+#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1518,7 +1518,7 @@ fn test_align_to_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n+#[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_non_trivial() {\n     #[repr(align(8))] struct U64(u64, u64);\n     #[repr(align(8))] struct U64U64U32(u64, u64, u32);"}]}