{"sha": "00204c2f52ec0280bda17de347c79f88e9c6b479", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMjA0YzJmNTJlYzAyODBiZGExN2RlMzQ3Yzc5Zjg4ZTljNmI0Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-23T19:43:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-23T19:43:36Z"}, "message": "Auto merge of #50494 - F001:as_cell, r=alexcrichton\n\nImplement rfc 1789: Conversions from `&mut T` to `&Cell<T>`\n\nI'm surprised that RFC 1789 has not been implemented for several months. Tracking issue: https://github.com/rust-lang/rust/issues/43038\n\nPlease note: when I was writing tests for `&Cell<[i32]>`, I found it is not easy to get the length of the contained slice. So I designed a `get_with` method which might be useful for similar cases. This method is not designed in the RFC, and it certainly needs to be reviewed by core team. I think it has some connections with `Cell::update` https://github.com/rust-lang/rust/issues/50186 , which is also in design phase.", "tree": {"sha": "e6eee7e83e405655321d9a35a1238e1b23e069c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6eee7e83e405655321d9a35a1238e1b23e069c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00204c2f52ec0280bda17de347c79f88e9c6b479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00204c2f52ec0280bda17de347c79f88e9c6b479", "html_url": "https://github.com/rust-lang/rust/commit/00204c2f52ec0280bda17de347c79f88e9c6b479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00204c2f52ec0280bda17de347c79f88e9c6b479/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dbbd81f7ed83943b870407ef44aecf6664e7679", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbbd81f7ed83943b870407ef44aecf6664e7679", "html_url": "https://github.com/rust-lang/rust/commit/8dbbd81f7ed83943b870407ef44aecf6664e7679"}, {"sha": "489101cc45d21d3909a728d16864e26599c12bee", "url": "https://api.github.com/repos/rust-lang/rust/commits/489101cc45d21d3909a728d16864e26599c12bee", "html_url": "https://github.com/rust-lang/rust/commit/489101cc45d21d3909a728d16864e26599c12bee"}], "stats": {"total": 154, "additions": 111, "deletions": 43}, "files": [{"sha": "b6087628ea6a487ac9ccf7641335bc070a8c5274", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 90, "deletions": 43, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/00204c2f52ec0280bda17de347c79f88e9c6b479/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00204c2f52ec0280bda17de347c79f88e9c6b479/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=00204c2f52ec0280bda17de347c79f88e9c6b479", "patch": "@@ -236,7 +236,7 @@ use ptr;\n /// See the [module-level documentation](index.html) for more.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(transparent)]\n-pub struct Cell<T> {\n+pub struct Cell<T: ?Sized> {\n     value: UnsafeCell<T>,\n }\n \n@@ -287,10 +287,10 @@ impl<T:Copy> Cell<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-unsafe impl<T> Send for Cell<T> where T: Send {}\n+unsafe impl<T: ?Sized> Send for Cell<T> where T: Send {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> !Sync for Cell<T> {}\n+impl<T: ?Sized> !Sync for Cell<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T:Copy> Clone for Cell<T> {\n@@ -381,46 +381,6 @@ impl<T> Cell<T> {\n         }\n     }\n \n-    /// Returns a raw pointer to the underlying data in this cell.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let ptr = c.as_ptr();\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n-    pub fn as_ptr(&self) -> *mut T {\n-        self.value.get()\n-    }\n-\n-    /// Returns a mutable reference to the underlying data.\n-    ///\n-    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n-    /// that we possess the only reference.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let mut c = Cell::new(5);\n-    /// *c.get_mut() += 1;\n-    ///\n-    /// assert_eq!(c.get(), 6);\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n-    pub fn get_mut(&mut self) -> &mut T {\n-        unsafe {\n-            &mut *self.value.get()\n-        }\n-    }\n-\n     /// Sets the contained value.\n     ///\n     /// # Examples\n@@ -499,6 +459,70 @@ impl<T> Cell<T> {\n     }\n }\n \n+impl<T: ?Sized> Cell<T> {\n+    /// Returns a raw pointer to the underlying data in this cell.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let ptr = c.as_ptr();\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n+    pub fn as_ptr(&self) -> *mut T {\n+        self.value.get()\n+    }\n+\n+    /// Returns a mutable reference to the underlying data.\n+    ///\n+    /// This call borrows `Cell` mutably (at compile-time) which guarantees\n+    /// that we possess the only reference.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let mut c = Cell::new(5);\n+    /// *c.get_mut() += 1;\n+    ///\n+    /// assert_eq!(c.get(), 6);\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_get_mut\", since = \"1.11.0\")]\n+    pub fn get_mut(&mut self) -> &mut T {\n+        unsafe {\n+            &mut *self.value.get()\n+        }\n+    }\n+\n+    /// Returns a `&Cell<T>` from a `&mut T`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(as_cell)]\n+    /// use std::cell::Cell;\n+    ///\n+    /// let slice: &mut [i32] = &mut [1, 2, 3];\n+    /// let cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\n+    /// let slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n+    ///\n+    /// assert_eq!(slice_cell.len(), 3);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"as_cell\", issue=\"43038\")]\n+    pub fn from_mut(t: &mut T) -> &Cell<T> {\n+        unsafe {\n+            &*(t as *mut T as *const Cell<T>)\n+        }\n+    }\n+}\n+\n impl<T: Default> Cell<T> {\n     /// Takes the value of the cell, leaving `Default::default()` in its place.\n     ///\n@@ -522,6 +546,29 @@ impl<T: Default> Cell<T> {\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<Cell<U>> for Cell<T> {}\n \n+impl<T> Cell<[T]> {\n+    /// Returns a `&[Cell<T>]` from a `&Cell<[T]>`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(as_cell)]\n+    /// use std::cell::Cell;\n+    ///\n+    /// let slice: &mut [i32] = &mut [1, 2, 3];\n+    /// let cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\n+    /// let slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n+    ///\n+    /// assert_eq!(slice_cell.len(), 3);\n+    /// ```\n+    #[unstable(feature = \"as_cell\", issue=\"43038\")]\n+    pub fn as_slice_of_cells(&self) -> &[Cell<T>] {\n+        unsafe {\n+            &*(self as *const Cell<[T]> as *const [Cell<T>])\n+        }\n+    }\n+}\n+\n /// A mutable memory location with dynamically checked borrow rules\n ///\n /// See the [module-level documentation](index.html) for more."}, {"sha": "88f7fbc86df6ed4533cba915169b0107fcc2167b", "filename": "src/test/run-pass/rfc-1789-as-cell/from-mut.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/00204c2f52ec0280bda17de347c79f88e9c6b479/src%2Ftest%2Frun-pass%2Frfc-1789-as-cell%2Ffrom-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00204c2f52ec0280bda17de347c79f88e9c6b479/src%2Ftest%2Frun-pass%2Frfc-1789-as-cell%2Ffrom-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1789-as-cell%2Ffrom-mut.rs?ref=00204c2f52ec0280bda17de347c79f88e9c6b479", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(as_cell)]\n+\n+use std::cell::Cell;\n+\n+fn main() {\n+    let slice: &mut [i32] = &mut [1, 2, 3];\n+    let cell_slice: &Cell<[i32]> = Cell::from_mut(slice);\n+    let slice_cell: &[Cell<i32>] = cell_slice.as_slice_of_cells();\n+\n+    assert_eq!(slice_cell.len(), 3);\n+}"}]}