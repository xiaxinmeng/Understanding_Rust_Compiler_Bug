{"sha": "53d308fdf86b7e499811650b89789c9c7161faab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZDMwOGZkZjg2YjdlNDk5ODExNjUwYjg5Nzg5YzljNzE2MWZhYWI=", "commit": {"author": {"name": "Ryan Scheel", "email": "Ryan.havvy@gmail.com", "date": "2018-08-11T10:13:29Z"}, "committer": {"name": "Havvy (Ryan Scheel)", "email": "ryan.havvy@gmail.com", "date": "2018-08-11T12:26:12Z"}, "message": "Show that Command can be reused and remodified\n\nThe prior documentation did not make it clear this was possible.", "tree": {"sha": "c1e088d963e1327e4019fff13f2ffafc2f525577", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1e088d963e1327e4019fff13f2ffafc2f525577"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53d308fdf86b7e499811650b89789c9c7161faab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53d308fdf86b7e499811650b89789c9c7161faab", "html_url": "https://github.com/rust-lang/rust/commit/53d308fdf86b7e499811650b89789c9c7161faab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53d308fdf86b7e499811650b89789c9c7161faab/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0aa8d0320266b5579428312095fe49af05ada972", "url": "https://api.github.com/repos/rust-lang/rust/commits/0aa8d0320266b5579428312095fe49af05ada972", "html_url": "https://github.com/rust-lang/rust/commit/0aa8d0320266b5579428312095fe49af05ada972"}], "stats": {"total": 33, "additions": 33, "deletions": 0}, "files": [{"sha": "ad64ed66e8ec7967ba2d09a53204be4f22791104", "filename": "src/libstd/process.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/53d308fdf86b7e499811650b89789c9c7161faab/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53d308fdf86b7e499811650b89789c9c7161faab/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=53d308fdf86b7e499811650b89789c9c7161faab", "patch": "@@ -381,6 +381,39 @@ impl fmt::Debug for ChildStderr {\n ///\n /// let hello = output.stdout;\n /// ```\n+///\n+/// `Command` can be reused to spawn multiple processes. The builder methods\n+/// change the command without needing to immediately spawn the process.\n+///\n+/// ```no_run\n+/// use std::process::Command;\n+///\n+/// let mut echo_hello = Command::new(\"sh\");\n+/// echo_hello.arg(\"-c\")\n+///            .arg(\"echo hello\");\n+/// let hello_1 = echo_hello.output().expect(\"failed to execute process\");\n+/// let hello_2 = echo_hello.output().expect(\"failed to execute process\");\n+/// ```\n+///\n+/// Similarly, you can call builder methods after spawning a process and then\n+/// spawn a new process with the modified settings.\n+///\n+/// ```no_run\n+/// use std::process::Command;\n+///\n+/// let mut list_dir = Command::new(\"ls\");\n+///\n+/// // Execute `ls` in the current directory of the program.\n+/// list_dir.status().expect(\"process failed to execute\");\n+///\n+/// println!(\"\");\n+///\n+/// // Change `ls` to execute in the root directory.\n+/// list_dir.current_dir(\"/\");\n+///\n+/// // And then execute `ls` again but in the root directory.\n+/// list_dir.status().expect(\"process failed to execute\");\n+/// ```\n #[stable(feature = \"process\", since = \"1.0.0\")]\n pub struct Command {\n     inner: imp::Command,"}]}