{"sha": "4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOWIxYjEzZGRjM2YzMTIwYmI3YWVlMTA2YTI2MTYxM2RmY2IwMDA=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-01-06T03:36:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:08:14Z"}, "message": "Initial changes to librustc to support const trait fns.", "tree": {"sha": "ccb56eb46e7647c39fb1dc559e5c71656ae3593b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccb56eb46e7647c39fb1dc559e5c71656ae3593b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg4V4ACgkQpp+NIls6\n19lRGg//UMkN8CXsrnLbbF8FFzhDB6JWAPEIOuhAfFkVChDqkXDJj60yCDAQ0NTl\nwtGY3gHTz+G0JuLrRFLELS6YXe6HOlKIvQOtmKe3K6QGZ/Kc9FXjCWbhF6Jj0fvo\nHk7mydY/Psz9mmT0U0gik75cR9o6Vs4FbjtccNBQMKMudR2tjUTm/RqfoJpoGaB7\nGd+bdSentClo5fYteFjVdKD5tF+EZ23e0UcW1MKKmnutJ419YXyokVsHwvMcY2xR\nT5o+Hu5EG4M3sl3dZYvBfLRd2jIWcF1Pn0htl0iYN+5lpL/zTLigoiER14AGFkB9\nRCNQ0YzTzeoyiS2RFvGsuSttoSuEn6A7y66kG0XplUiET0tLe+qVzEu/NwzV3s3V\nbDrWgpze75V9ppueU+VcAlvEiH7kYoBkUa90MWjzhtoNzH/QMZFkLPS4u909wZx0\ntlhd3QpZUJaomCZa+cpFj58K94SV7Lhn6oxi1KjCZTzQ7lJFhi2cqJ2RvDhLK4fV\nS+i9KyuVu8HhDgvk4w4oezv+igVwumK9xttmXgQ0wjGPgMfVXVFeyULyBQV31HKP\n6eU89LiWWR/AGDJAPGEcIzB0hmylffvfWFvVQ/sG4jLb4X0ymf6xLQQl9ivNMHy3\nJphJlrjxN21S0dYSZ7ExjFCras0akcHiDaJRkZeDDZzq91cwvfk=\n=SIav\n-----END PGP SIGNATURE-----", "payload": "tree ccb56eb46e7647c39fb1dc559e5c71656ae3593b\nparent 28572d2c1fae5ab4c6bcade0c1a9fa485da0ec61\nauthor Alexander Regueiro <alexreg@me.com> 1515209799 +0000\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520492894 +0100\n\nInitial changes to librustc to support const trait fns.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "html_url": "https://github.com/rust-lang/rust/commit/4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c9b1b13ddc3f3120bb7aee106a261613dfcb000/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28572d2c1fae5ab4c6bcade0c1a9fa485da0ec61", "url": "https://api.github.com/repos/rust-lang/rust/commits/28572d2c1fae5ab4c6bcade0c1a9fa485da0ec61", "html_url": "https://github.com/rust-lang/rust/commit/28572d2c1fae5ab4c6bcade0c1a9fa485da0ec61"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "34b3aa53d6bcf807e0e818ad4eef538128942bfb", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c9b1b13ddc3f3120bb7aee106a261613dfcb000/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9b1b13ddc3f3120bb7aee106a261613dfcb000/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "patch": "@@ -220,7 +220,6 @@ impl serialize::UseSpecializedDecodable for DefId {}\n pub struct LocalDefId(DefIndex);\n \n impl LocalDefId {\n-\n     #[inline]\n     pub fn from_def_id(def_id: DefId) -> LocalDefId {\n         assert!(def_id.is_local());"}, {"sha": "d991fb0f67b11350d8139bb08faac6c74b9f9fea", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c9b1b13ddc3f3120bb7aee106a261613dfcb000/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9b1b13ddc3f3120bb7aee106a261613dfcb000/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "patch": "@@ -21,7 +21,7 @@ use rustc::middle::cstore::{LinkagePreference, ExternConstBody,\n use rustc::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex,\n-                         CRATE_DEF_INDEX, LOCAL_CRATE};\n+                         CRATE_DEF_INDEX, LOCAL_CRATE, LocalDefId};\n use rustc::ich::Fingerprint;\n use rustc::middle::lang_items;\n use rustc::mir::{self, interpret};\n@@ -273,6 +273,13 @@ impl<'a, 'tcx> SpecializedDecoder<DefIndex> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> SpecializedDecoder<LocalDefId> for DecodeContext<'a, 'tcx> {\n+    #[inline]\n+    fn specialized_decode(&mut self) -> Result<LocalDefId, Self::Error> {\n+        self.specialized_decode().map(|i| LocalDefId::from_def_id(i))\n+    }\n+}\n+\n impl<'a, 'tcx> SpecializedDecoder<interpret::AllocId> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<interpret::AllocId, Self::Error> {\n         const MAX1: usize = usize::max_value() - 1;"}, {"sha": "04ac32af7ccb848add6bd9bcd6576a23ef8bd3d0", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c9b1b13ddc3f3120bb7aee106a261613dfcb000/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9b1b13ddc3f3120bb7aee106a261613dfcb000/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "patch": "@@ -16,7 +16,7 @@ use schema::*;\n use rustc::middle::cstore::{LinkMeta, LinkagePreference, NativeLibrary,\n                             EncodedMetadata};\n use rustc::hir::def::CtorKind;\n-use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::ich::Fingerprint;\n use rustc::middle::dependency_format::Linkage;\n@@ -181,6 +181,13 @@ impl<'a, 'tcx> SpecializedEncoder<Span> for EncodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> SpecializedEncoder<LocalDefId> for EncodeContext<'a, 'tcx> {\n+    #[inline]\n+    fn specialized_encode(&mut self, def_id: &LocalDefId) -> Result<(), Self::Error> {\n+        self.specialized_encode(&def_id.to_def_id())\n+    }\n+}\n+\n impl<'a, 'tcx> SpecializedEncoder<Ty<'tcx>> for EncodeContext<'a, 'tcx> {\n     fn specialized_encode(&mut self, ty: &Ty<'tcx>) -> Result<(), Self::Error> {\n         ty_codec::encode_with_shorthand(self, ty, |ecx| &mut ecx.type_shorthands)"}, {"sha": "d1e6f27069c0d2a0f860b9b5ac686ca0bcc26aef", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c9b1b13ddc3f3120bb7aee106a261613dfcb000/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c9b1b13ddc3f3120bb7aee106a261613dfcb000/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4c9b1b13ddc3f3120bb7aee106a261613dfcb000", "patch": "@@ -51,7 +51,6 @@ use std::collections::hash_map::Entry;\n use std::collections::VecDeque;\n use std::fmt;\n \n-use rustc_const_math::ConstInt;\n use std::default::Default;\n use std::{mem, slice, vec};\n use std::iter::{FromIterator, once};\n@@ -2507,9 +2506,7 @@ impl Clean<Type> for hir::Ty {\n                         ty: cx.tcx.types.usize\n                     })\n                 });\n-                let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n-                    n.to_string()\n-                } else if let ConstVal::Unevaluated(def_id, _) = n.val {\n+                let n = if let ConstVal::Unevaluated(def_id, _) = n.val {\n                     if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n                         print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n                     } else {\n@@ -2640,9 +2637,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                         n = new_n;\n                     }\n                 };\n-                let n = if let ConstVal::Integral(ConstInt::Usize(n)) = n.val {\n-                    n.to_string()\n-                } else if let ConstVal::Unevaluated(def_id, _) = n.val {\n+                let n = if let ConstVal::Unevaluated(def_id, _) = n.val {\n                     if let Some(node_id) = cx.tcx.hir.as_local_node_id(def_id) {\n                         print_const_expr(cx, cx.tcx.hir.body_owned_by(node_id))\n                     } else {"}]}