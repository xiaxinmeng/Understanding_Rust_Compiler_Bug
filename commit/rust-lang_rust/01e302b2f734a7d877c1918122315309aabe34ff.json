{"sha": "01e302b2f734a7d877c1918122315309aabe34ff", "node_id": "C_kwDOAAsO6NoAKDAxZTMwMmIyZjczNGE3ZDg3N2MxOTE4MTIyMzE1MzA5YWFiZTM0ZmY", "commit": {"author": {"name": "nixx quality", "email": "nixx@is-fantabulo.us", "date": "2021-12-05T20:50:05Z"}, "committer": {"name": "nixx quality", "email": "nixx@is-fantabulo.us", "date": "2021-12-05T22:04:56Z"}, "message": "Fix dogfood", "tree": {"sha": "d79a5260fc3d7712100e87a9702d52ed5049244d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d79a5260fc3d7712100e87a9702d52ed5049244d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01e302b2f734a7d877c1918122315309aabe34ff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEDPrAgDZrvxhrA4a/rK+guXX6Y/kFAmGtN44ACgkQrK+guXX6\nY/nlAw//aEm9jZt9o4qJjI55V/5n2G2qxKm5EGggnhHyBV/GfdGuF6xVQvwrNthY\n0UGKJqeOpOKwU2qhBsEr598n33XMo916XrIj2z6bAHxUDi+fxovJ3p85g8Xja59Z\n0Y4WppSNZL78Ufb8pM+8audIzpFZaDqEfIwRLZYBEim3ORTK9RJHWA8AeO5jRMbC\nvYtm568dwtSdXn6eyf/1bHOXAHOWKc0mv9gaQ+sES00AAwA5HwhOorH9TPAOPPXB\nCMqEdMK3WmiEaHFoWqouK2xICTpSANxopfD/fIcL6KI2c7JETzkfiF/L61NDFE9W\nXgVM9+M8M9asIFVvdGa9Ccb52STHHy99HJ9K5opGshHXLp8cCDf0DK0jq19Bh33S\n+LIOBqlUWeDwpbnfaL+IfDllQE93i4YSXVbD4uy1V29LZv6YNEYfpQVLOO4Wsosw\nwBHcwOHkkTiNBdiY1JE5mkG3KfttumtyL3M0Et7LdFCs7vhe+Yl7bg+EjnHIwj+e\nuAxKT3PguLNrgIEv0zArstgUxMSnsqK8v6GQCNxZW674STXeUq14Fgbsw51O2w3O\nAhPpyXvTJOp7lxSX67uUdAN+NMYuZcL/7AN3d2wyAt4a0jhE8kawKL/yNjeOX7C0\n7kuMW78LKUJPzjWBS2VhL+hilctd81NqBElFm9MvdkVzpTiPvRw=\n=lHnf\n-----END PGP SIGNATURE-----", "payload": "tree d79a5260fc3d7712100e87a9702d52ed5049244d\nparent e3c60444ce6652198c0986c98fe7bd0f8de5f987\nauthor nixx quality <nixx@is-fantabulo.us> 1638737405 +0100\ncommitter nixx quality <nixx@is-fantabulo.us> 1638741896 +0100\n\nFix dogfood\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01e302b2f734a7d877c1918122315309aabe34ff", "html_url": "https://github.com/rust-lang/rust/commit/01e302b2f734a7d877c1918122315309aabe34ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01e302b2f734a7d877c1918122315309aabe34ff/comments", "author": {"login": "nixxquality", "id": 2478713, "node_id": "MDQ6VXNlcjI0Nzg3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2478713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixxquality", "html_url": "https://github.com/nixxquality", "followers_url": "https://api.github.com/users/nixxquality/followers", "following_url": "https://api.github.com/users/nixxquality/following{/other_user}", "gists_url": "https://api.github.com/users/nixxquality/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixxquality/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixxquality/subscriptions", "organizations_url": "https://api.github.com/users/nixxquality/orgs", "repos_url": "https://api.github.com/users/nixxquality/repos", "events_url": "https://api.github.com/users/nixxquality/events{/privacy}", "received_events_url": "https://api.github.com/users/nixxquality/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nixxquality", "id": 2478713, "node_id": "MDQ6VXNlcjI0Nzg3MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2478713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nixxquality", "html_url": "https://github.com/nixxquality", "followers_url": "https://api.github.com/users/nixxquality/followers", "following_url": "https://api.github.com/users/nixxquality/following{/other_user}", "gists_url": "https://api.github.com/users/nixxquality/gists{/gist_id}", "starred_url": "https://api.github.com/users/nixxquality/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nixxquality/subscriptions", "organizations_url": "https://api.github.com/users/nixxquality/orgs", "repos_url": "https://api.github.com/users/nixxquality/repos", "events_url": "https://api.github.com/users/nixxquality/events{/privacy}", "received_events_url": "https://api.github.com/users/nixxquality/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3c60444ce6652198c0986c98fe7bd0f8de5f987", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c60444ce6652198c0986c98fe7bd0f8de5f987", "html_url": "https://github.com/rust-lang/rust/commit/e3c60444ce6652198c0986c98fe7bd0f8de5f987"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "58c686d95b3f91caed5e57466b807e33ca9ab8a7", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=01e302b2f734a7d877c1918122315309aabe34ff", "patch": "@@ -190,7 +190,7 @@ fn unit_closure<'tcx>(\n /// Anything else will return `a`.\n fn let_binding_name(cx: &LateContext<'_>, var_arg: &hir::Expr<'_>) -> String {\n     match &var_arg.kind {\n-        hir::ExprKind::Field(_, _) => snippet(cx, var_arg.span, \"_\").replace(\".\", \"_\"),\n+        hir::ExprKind::Field(_, _) => snippet(cx, var_arg.span, \"_\").replace('.', \"_\"),\n         hir::ExprKind::Path(_) => format!(\"_{}\", snippet(cx, var_arg.span, \"\")),\n         _ => \"a\".to_string(),\n     }"}, {"sha": "a04d589f880fa9aca9e43677f0076129bc9cdd69", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=01e302b2f734a7d877c1918122315309aabe34ff", "patch": "@@ -112,7 +112,7 @@ fn is_offending_macro<'a>(cx: &EarlyContext<'_>, span: Span, mac_braces: &'a Mac\n         if snip.starts_with(&format!(\"{}!\", name));\n         if unnested_or_local();\n         // make formatting consistent\n-        let c = snip.replace(\" \", \"\");\n+        let c = snip.replace(' ', \"\");\n         if !c.starts_with(&format!(\"{}!{}\", name, braces.0));\n         if !mac_braces.done.contains(&span.ctxt().outer_expn_data().call_site);\n         then {"}, {"sha": "d386663e49858eda7d123d04dd2bad7fb0de7a82", "filename": "clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=01e302b2f734a7d877c1918122315309aabe34ff", "patch": "@@ -76,7 +76,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n             let self_id = cx.tcx.hir().local_def_id_to_hir_id(self_local_did);\n             if let Some(Node::Item(x)) = cx.tcx.hir().find(self_id);\n             let type_name = x.ident.name.as_str().to_lowercase();\n-            if impl_item.ident.name.as_str() == type_name || impl_item.ident.name.as_str().replace(\"_\", \"\") == type_name;\n+            if impl_item.ident.name.as_str() == type_name || impl_item.ident.name.as_str().replace('_', \"\") == type_name;\n \n             then {\n                 span_lint("}, {"sha": "afd7be89a4e289c94764d31c0eb27f12de4ff5de", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=01e302b2f734a7d877c1918122315309aabe34ff", "patch": "@@ -106,9 +106,9 @@ fn check_str(cx: &LateContext<'_>, span: Span, id: HirId) {\n             \"invisible character detected\",\n             \"consider replacing the string with\",\n             string\n-                .replace(\"\\u{200B}\", \"\\\\u{200B}\")\n-                .replace(\"\\u{ad}\", \"\\\\u{AD}\")\n-                .replace(\"\\u{2060}\", \"\\\\u{2060}\"),\n+                .replace('\\u{200B}', \"\\\\u{200B}\")\n+                .replace('\\u{ad}', \"\\\\u{AD}\")\n+                .replace('\\u{2060}', \"\\\\u{2060}\"),\n             Applicability::MachineApplicable,\n         );\n     }"}, {"sha": "5bf0cffdbad16a52983d0f7f48e2ad476c4cd8e4", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01e302b2f734a7d877c1918122315309aabe34ff/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=01e302b2f734a7d877c1918122315309aabe34ff", "patch": "@@ -583,10 +583,10 @@ impl Write {\n             let replacement: String = match lit.token.kind {\n                 LitKind::Integer | LitKind::Float | LitKind::Err => continue,\n                 LitKind::StrRaw(_) | LitKind::ByteStrRaw(_) if matches!(fmtstr.style, StrStyle::Raw(_)) => {\n-                    lit.token.symbol.as_str().replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n+                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::Str | LitKind::ByteStr if matches!(fmtstr.style, StrStyle::Cooked) => {\n-                    lit.token.symbol.as_str().replace(\"{\", \"{{\").replace(\"}\", \"}}\")\n+                    lit.token.symbol.as_str().replace('{', \"{{\").replace('}', \"}}\")\n                 },\n                 LitKind::StrRaw(_) | LitKind::Str | LitKind::ByteStrRaw(_) | LitKind::ByteStr => continue,\n                 LitKind::Byte | LitKind::Char => match &*lit.token.symbol.as_str() {"}]}