{"sha": "635533bebb353bf6004cd9513f620980dde2d625", "node_id": "C_kwDOAAsO6NoAKDYzNTUzM2JlYmIzNTNiZjYwMDRjZDk1MTNmNjIwOTgwZGRlMmQ2MjU", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2021-12-08T10:41:31Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2021-12-09T23:40:41Z"}, "message": "manually implement `Hash` for `DefId`\n\nThis also reorders the fields to reduce the assembly operations for hashing\nand changes two UI tests that depended on the former ordering because of\nhashmap iteration order.", "tree": {"sha": "45794b68539097dea27e2e53d091b9712e358014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45794b68539097dea27e2e53d091b9712e358014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/635533bebb353bf6004cd9513f620980dde2d625", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/635533bebb353bf6004cd9513f620980dde2d625", "html_url": "https://github.com/rust-lang/rust/commit/635533bebb353bf6004cd9513f620980dde2d625", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/635533bebb353bf6004cd9513f620980dde2d625/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abba5edf480f8ba6be4aa8791bd343dd12efb969", "url": "https://api.github.com/repos/rust-lang/rust/commits/abba5edf480f8ba6be4aa8791bd343dd12efb969", "html_url": "https://github.com/rust-lang/rust/commit/abba5edf480f8ba6be4aa8791bd343dd12efb969"}], "stats": {"total": 70, "additions": 48, "deletions": 22}, "files": [{"sha": "6d8fea2030b61e8bc23348330963a6e2aab3de54", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/635533bebb353bf6004cd9513f620980dde2d625/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/635533bebb353bf6004cd9513f620980dde2d625/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=635533bebb353bf6004cd9513f620980dde2d625", "patch": "@@ -7,6 +7,7 @@ use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::borrow::Borrow;\n use std::fmt;\n+use std::hash::{Hash, Hasher};\n \n rustc_index::newtype_index! {\n     pub struct CrateNum {\n@@ -146,9 +147,6 @@ impl StableCrateId {\n     /// Computes the stable ID for a crate with the given name and\n     /// `-Cmetadata` arguments.\n     pub fn new(crate_name: &str, is_exe: bool, mut metadata: Vec<String>) -> StableCrateId {\n-        use std::hash::Hash;\n-        use std::hash::Hasher;\n-\n         let mut hasher = StableHasher::new();\n         crate_name.hash(&mut hasher);\n \n@@ -205,10 +203,38 @@ impl<D: Decoder> Decodable<D> for DefIndex {\n /// index and a def index.\n ///\n /// You can create a `DefId` from a `LocalDefId` using `local_def_id.to_def_id()`.\n-#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Copy)]\n+#[derive(Clone, PartialEq, Eq, PartialOrd, Ord, Copy)]\n+// On below-64 bit systems we can simply use the derived `Hash` impl\n+#[cfg_attr(not(target_pointer_width = \"64\"), derive(Hash))]\n+// Note that the order is essential here, see below why\n pub struct DefId {\n-    pub krate: CrateNum,\n     pub index: DefIndex,\n+    pub krate: CrateNum,\n+}\n+\n+// On 64-bit systems, we can hash the whole `DefId` as one `u64` instead of two `u32`s. This\n+// improves performance without impairing `FxHash` quality. So the below code gets compiled to a\n+// noop on little endian systems because the memory layout of `DefId` is as follows:\n+//\n+// ```\n+//     +-1--------------31-+-32-------------63-+\n+//     ! index             ! krate             !\n+//     +-------------------+-------------------+\n+// ```\n+//\n+// The order here has direct impact on `FxHash` quality because we have far more `DefIndex` per\n+// crate than we have `Crate`s within one compilation. Or in other words, this arrangement puts\n+// more entropy in the low bits than the high bits. The reason this matters is that `FxHash`, which\n+// is used throughout rustc, has problems distributing the entropy from the high bits, so reversing\n+// the order would lead to a large number of collisions and thus far worse performance.\n+//\n+// On 64-bit big-endian systems, this compiles to a 64-bit rotation by 32 bits, which is still\n+// faster than another `FxHash` round.\n+#[cfg(target_pointer_width = \"64\")]\n+impl Hash for DefId {\n+    fn hash<H: Hasher>(&self, h: &mut H) {\n+        (((self.krate.as_u32() as u64) << 32) | (self.index.as_u32() as u64)).hash(h)\n+    }\n }\n \n impl DefId {"}, {"sha": "52d2cc88cbe7f2668ad6484b3c829d0053d95668", "filename": "src/test/ui/coherence/coherence-orphan.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/635533bebb353bf6004cd9513f620980dde2d625/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/635533bebb353bf6004cd9513f620980dde2d625/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-orphan.stderr?ref=635533bebb353bf6004cd9513f620980dde2d625", "patch": "@@ -1,14 +1,3 @@\n-error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n-  --> $DIR/coherence-orphan.rs:17:1\n-   |\n-LL | impl !Send for Vec<isize> { }\n-   | ^^^^^^^^^^^^^^^----------\n-   | |              |\n-   | |              `Vec` is not defined in the current crate\n-   | impl doesn't use only types from inside the current crate\n-   |\n-   = note: define and implement a trait or new type instead\n-\n error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n   --> $DIR/coherence-orphan.rs:10:1\n    |\n@@ -21,6 +10,17 @@ LL | impl TheTrait<usize> for isize { }\n    |\n    = note: define and implement a trait or new type instead\n \n+error[E0117]: only traits defined in the current crate can be implemented for arbitrary types\n+  --> $DIR/coherence-orphan.rs:17:1\n+   |\n+LL | impl !Send for Vec<isize> { }\n+   | ^^^^^^^^^^^^^^^----------\n+   | |              |\n+   | |              `Vec` is not defined in the current crate\n+   | impl doesn't use only types from inside the current crate\n+   |\n+   = note: define and implement a trait or new type instead\n+\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0117`."}, {"sha": "4b2597eed3c3d48ad2bc7aafa13f143d85b438af", "filename": "src/test/ui/methods/method-ambig-two-traits-cross-crate.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/635533bebb353bf6004cd9513f620980dde2d625/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/635533bebb353bf6004cd9513f620980dde2d625/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-cross-crate.stderr?ref=635533bebb353bf6004cd9513f620980dde2d625", "patch": "@@ -4,20 +4,20 @@ error[E0034]: multiple applicable items in scope\n LL | fn main() { 1_usize.me(); }\n    |                     ^^ multiple `me` found\n    |\n-note: candidate #1 is defined in an impl of the trait `Me2` for the type `usize`\n+   = note: candidate #1 is defined in an impl of the trait `Me` for the type `usize`\n+note: candidate #2 is defined in an impl of the trait `Me2` for the type `usize`\n   --> $DIR/method-ambig-two-traits-cross-crate.rs:10:22\n    |\n LL | impl Me2 for usize { fn me(&self) -> usize { *self } }\n    |                      ^^^^^^^^^^^^^^^^^^^^^\n-   = note: candidate #2 is defined in an impl of the trait `Me` for the type `usize`\n help: disambiguate the associated function for candidate #1\n    |\n-LL | fn main() { Me2::me(&1_usize); }\n-   |             ~~~~~~~~~~~~~~~~~\n-help: disambiguate the associated function for candidate #2\n-   |\n LL | fn main() { Me::me(&1_usize); }\n    |             ~~~~~~~~~~~~~~~~\n+help: disambiguate the associated function for candidate #2\n+   |\n+LL | fn main() { Me2::me(&1_usize); }\n+   |             ~~~~~~~~~~~~~~~~~\n \n error: aborting due to previous error\n "}]}