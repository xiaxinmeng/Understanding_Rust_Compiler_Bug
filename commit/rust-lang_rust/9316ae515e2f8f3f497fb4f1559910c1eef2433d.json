{"sha": "9316ae515e2f8f3f497fb4f1559910c1eef2433d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTZhZTUxNWUyZjhmM2Y0OTdmYjRmMTU1OTkxMGMxZWVmMjQzM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-07-24T18:42:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-24T18:42:06Z"}, "message": "Auto merge of #35006 - Manishearth:rollup, r=Manishearth\n\nRollup of 7 pull requests\n\n- Successful merges: #34965, #34972, #34975, #34976, #34977, #34988, #34989\n- Failed merges:", "tree": {"sha": "55141cdef2ce60b07578873cd760ec87ad91a263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55141cdef2ce60b07578873cd760ec87ad91a263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9316ae515e2f8f3f497fb4f1559910c1eef2433d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9316ae515e2f8f3f497fb4f1559910c1eef2433d", "html_url": "https://github.com/rust-lang/rust/commit/9316ae515e2f8f3f497fb4f1559910c1eef2433d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9316ae515e2f8f3f497fb4f1559910c1eef2433d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c50f4e484d1c871538ee99032ec2986177b8062", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c50f4e484d1c871538ee99032ec2986177b8062", "html_url": "https://github.com/rust-lang/rust/commit/2c50f4e484d1c871538ee99032ec2986177b8062"}, {"sha": "52c293c2bb3be96f3a8cc4043037e90e5ed4dda8", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c293c2bb3be96f3a8cc4043037e90e5ed4dda8", "html_url": "https://github.com/rust-lang/rust/commit/52c293c2bb3be96f3a8cc4043037e90e5ed4dda8"}], "stats": {"total": 103, "additions": 73, "deletions": 30}, "files": [{"sha": "1f8eea56fc69cf5cbfa66fe5ea9610514e6f66ea", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=9316ae515e2f8f3f497fb4f1559910c1eef2433d", "patch": "@@ -544,14 +544,21 @@ impl<T> [T] {\n     ///\n     /// # Example\n     ///\n-    /// Print the adjacent pairs of a slice (i.e. `[1,2]`, `[2,3]`,\n-    /// `[3,4]`):\n+    /// ```\n+    /// let slice = ['r', 'u', 's', 't'];\n+    /// let mut iter = slice.windows(2);\n+    /// assert_eq!(iter.next().unwrap(), &['r', 'u']);\n+    /// assert_eq!(iter.next().unwrap(), &['u', 's']);\n+    /// assert_eq!(iter.next().unwrap(), &['s', 't']);\n+    /// assert!(iter.next().is_none());\n+    /// ```\n     ///\n-    /// ```rust\n-    /// let v = &[1, 2, 3, 4];\n-    /// for win in v.windows(2) {\n-    ///     println!(\"{:?}\", win);\n-    /// }\n+    /// If the slice is shorter than `size`:\n+    ///\n+    /// ```\n+    /// let slice = ['f', 'o', 'o'];\n+    /// let mut iter = slice.windows(4);\n+    /// assert!(iter.next().is_none());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "967baccd2740a7f724dbd17ca5a732aab33ac847", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=9316ae515e2f8f3f497fb4f1559910c1eef2433d", "patch": "@@ -593,11 +593,12 @@ impl<T> Vec<T> {\n     /// ```\n     ///\n     /// In this example, there is a memory leak since the memory locations\n-    /// owned by the vector were not freed prior to the `set_len` call:\n+    /// owned by the inner vectors were not freed prior to the `set_len` call:\n     ///\n     /// ```\n-    /// let mut vec = vec!['r', 'u', 's', 't'];\n-    ///\n+    /// let mut vec = vec![vec![1, 0, 0],\n+    ///                    vec![0, 1, 0],\n+    ///                    vec![0, 0, 1]];\n     /// unsafe {\n     ///     vec.set_len(0);\n     /// }"}, {"sha": "27fdbd383017f08ea3e38350b47e0a6b9c9a84aa", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=9316ae515e2f8f3f497fb4f1559910c1eef2433d", "patch": "@@ -234,6 +234,16 @@ pub trait BuildHasher {\n     type Hasher: Hasher;\n \n     /// Creates a new hasher.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::hash_map::RandomState;\n+    /// use std::hash::BuildHasher;\n+    ///\n+    /// let s = RandomState::new();\n+    /// let new_s = s.build_hasher();\n+    /// ```\n     #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n     fn build_hasher(&self) -> Self::Hasher;\n }"}, {"sha": "4643686786be64c861c6a8a34140421928a7cc16", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=9316ae515e2f8f3f497fb4f1559910c1eef2433d", "patch": "@@ -1105,11 +1105,25 @@ fn cast_const<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, val: ConstVal, ty: ty::Ty)\n         Float(f) => cast_const_float(tcx, f, ty),\n         Char(c) => cast_const_int(tcx, Infer(c as u64), ty),\n         Function(_) => Err(UnimplementedConstVal(\"casting fn pointers\")),\n-        ByteStr(_) => match ty.sty {\n+        ByteStr(b) => match ty.sty {\n             ty::TyRawPtr(_) => {\n                 Err(ErrKind::UnimplementedConstVal(\"casting a bytestr to a raw ptr\"))\n             },\n-            ty::TyRef(..) => Err(ErrKind::UnimplementedConstVal(\"casting a bytestr to slice\")),\n+            ty::TyRef(_, ty::TypeAndMut { ref ty, mutbl: hir::MutImmutable }) => match ty.sty {\n+                ty::TyArray(ty, n) if ty == tcx.types.u8 && n == b.len() => Ok(ByteStr(b)),\n+                ty::TySlice(_) => {\n+                    Err(ErrKind::UnimplementedConstVal(\"casting a bytestr to slice\"))\n+                },\n+                _ => Err(CannotCast),\n+            },\n+            _ => Err(CannotCast),\n+        },\n+        Str(s) => match ty.sty {\n+            ty::TyRawPtr(_) => Err(ErrKind::UnimplementedConstVal(\"casting a str to a raw ptr\")),\n+            ty::TyRef(_, ty::TypeAndMut { ref ty, mutbl: hir::MutImmutable }) => match ty.sty {\n+                ty::TyStr => Ok(Str(s)),\n+                _ => Err(CannotCast),\n+            },\n             _ => Err(CannotCast),\n         },\n         _ => Err(CannotCast),"}, {"sha": "1ea0f8d70a8eb70c5102ba9e041e093356d3178b", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=9316ae515e2f8f3f497fb4f1559910c1eef2433d", "patch": "@@ -392,7 +392,7 @@ impl char {\n         C::len_utf16(self)\n     }\n \n-    /// Returns an interator over the bytes of this character as UTF-8.\n+    /// Returns an iterator over the bytes of this character as UTF-8.\n     ///\n     /// The returned iterator also has an `as_slice()` method to view the\n     /// encoded bytes as a byte slice.\n@@ -415,7 +415,7 @@ impl char {\n         C::encode_utf8(self)\n     }\n \n-    /// Returns an interator over the `u16` entries of this character as UTF-16.\n+    /// Returns an iterator over the `u16` entries of this character as UTF-16.\n     ///\n     /// The returned iterator also has an `as_slice()` method to view the\n     /// encoded form as a slice."}, {"sha": "ed5ac3bc0c1605773a46052603da33761f8582cc", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9316ae515e2f8f3f497fb4f1559910c1eef2433d", "patch": "@@ -1699,6 +1699,17 @@ impl<'a, K, V, S> Extend<(&'a K, &'a V)> for HashMap<K, V, S>\n /// A particular instance `RandomState` will create the same instances of\n /// `Hasher`, but the hashers created by two different `RandomState`\n /// instances are unlikely to produce the same result for the same values.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::HashMap;\n+/// use std::collections::hash_map::RandomState;\n+///\n+/// let s = RandomState::new();\n+/// let mut map = HashMap::with_hasher(s);\n+/// map.insert(1, 2);\n+/// ```\n #[derive(Clone)]\n #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n pub struct RandomState {\n@@ -1708,6 +1719,14 @@ pub struct RandomState {\n \n impl RandomState {\n     /// Constructs a new `RandomState` that is initialized with random keys.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::hash_map::RandomState;\n+    ///\n+    /// let s = RandomState::new();\n+    /// ```\n     #[inline]\n     #[allow(deprecated)] // rand\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]"}, {"sha": "c96be8fec2b02abb4ffffecddaa0884187641303", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=9316ae515e2f8f3f497fb4f1559910c1eef2433d", "patch": "@@ -193,20 +193,6 @@ impl MultiSpan {\n         }\n     }\n \n-    pub fn from_span(primary_span: Span) -> MultiSpan {\n-        MultiSpan {\n-            primary_spans: vec![primary_span],\n-            span_labels: vec![]\n-        }\n-    }\n-\n-    pub fn from_spans(vec: Vec<Span>) -> MultiSpan {\n-        MultiSpan {\n-            primary_spans: vec,\n-            span_labels: vec![]\n-        }\n-    }\n-\n     pub fn push_span_label(&mut self, span: Span, label: String) {\n         self.span_labels.push((span, label));\n     }\n@@ -254,7 +240,10 @@ impl MultiSpan {\n \n impl From<Span> for MultiSpan {\n     fn from(span: Span) -> MultiSpan {\n-        MultiSpan::from_span(span)\n+        MultiSpan {\n+            primary_spans: vec![span],\n+            span_labels: vec![]\n+        }\n     }\n }\n "}, {"sha": "7297c71a6d668b7aa2844d4f9714858166f53cd3", "filename": "src/test/run-pass/const-byte-str-cast.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Ftest%2Frun-pass%2Fconst-byte-str-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9316ae515e2f8f3f497fb4f1559910c1eef2433d/src%2Ftest%2Frun-pass%2Fconst-byte-str-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-byte-str-cast.rs?ref=9316ae515e2f8f3f497fb4f1559910c1eef2433d", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,4 +12,7 @@\n \n pub fn main() {\n     let _ = b\"x\" as &[u8];\n+    let _ = b\"y\" as &[u8; 1];\n+    let _ = b\"z\" as *const u8;\n+    let _ = \"\u00e4\" as *const str;\n }"}]}