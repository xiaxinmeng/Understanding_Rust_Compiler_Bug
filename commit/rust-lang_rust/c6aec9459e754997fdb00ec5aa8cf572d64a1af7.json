{"sha": "c6aec9459e754997fdb00ec5aa8cf572d64a1af7", "node_id": "C_kwDOAAsO6NoAKGM2YWVjOTQ1OWU3NTQ5OTdmZGIwMGVjNWFhOGNmNTcyZDY0YTFhZjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-01T20:47:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-01T20:47:33Z"}, "message": "Rollup merge of #112155 - nnethercote:debug_dump, r=wesleywiser\n\nImprove CGU debug printing.\n\n- Add more total and per-CGU measurements.\n- Ensure CGUs are sorted by name before the first `debug_dump` calls, for deterministic output.\n- Print items within CGUs in sorted-by-name order, for deterministic output.\n- Add some assertions and comments clarifying sortedness of CGUs at various points.\n\nAn example, before:\n```\nINITIAL PARTITIONING (5 CodegenUnits, max=29, min=1, max/min=29.0):\nCodegenUnit scev95ysd7g4b0z estimated size 2:\n - fn <() as std::process::Termination>::report [(External, Hidden)] [h082b15a6d07338dcE] estimated size 2\n\nCodegenUnit 1j0frgtl72rsz24q estimated size 29:\n - fn std::rt::lang_start::<()>::{closure#0} [(External, Hidden)] [h695c7b5d6a212565E] estimated size 17\n - fn std::rt::lang_start::<()> [(External, Hidden)] [h4ca942948e9cb931E] estimated size 12\n\nCodegenUnit 5dbzi1e5qm0d7kj2 estimated size 4:\n - fn <[closure@std::rt::lang_start<()>::{closure#0}] as std::ops::FnOnce<()>>::call_once - shim [(External, Hidden)] [h24eaa44f03b2b233E] estimated size 1\n - fn <fn() as std::ops::FnOnce<()>>::call_once - shim(fn()) [(External, Hidden)] [hf338f5339c3711acE] estimated size 1\n - fn <[closure@std::rt::lang_start<()>::{closure#0}] as std::ops::FnOnce<()>>::call_once - shim(vtable) [(External, Hidden)] [h595d414cbb7651d5E] estimated size 1\n - fn std::ptr::drop_in_place::<[closure@std::rt::lang_start<()>::{closure#0}]> - shim(None) [(External, Hidden)] [h17a19dcdb40600daE] estimated size 1\n\nCodegenUnit 220m1mqa2mlbg7r3 estimated size 1:\n - fn main [(External, Hidden)] [hb29587cdb6db5f42E] estimated size 1\n\nCodegenUnit 4ulbh241f7tvyn7x estimated size 6:\n - fn std::sys_common::backtrace::__rust_begin_short_backtrace::<fn(), ()> [(External, Hidden)] [h41dada2c21a1259dE] estimated size 6\n```\nand after:\n```\nINITIAL PARTITIONING (9 items, total_size=42; 5 CGUs, max_size=29, min_size=1, max_size/min_size=29.0):\n- CGU[0] 1j0frgtl72rsz24q (2 items, size=29):\n  - fn std::rt::lang_start::<()> [(External, Hidden)] [h4ca942948e9cb931E] (size=12)\n  - fn std::rt::lang_start::<()>::{closure#0} [(External, Hidden)] [h695c7b5d6a212565E] (size=17)\n\n- CGU[1] 220m1mqa2mlbg7r3 (1 items, size=1):\n  - fn main [(External, Hidden)] [hb29587cdb6db5f42E] (size=1)\n\n- CGU[2] 4ulbh241f7tvyn7x (1 items, size=6):\n  - fn std::sys_common::backtrace::__rust_begin_short_backtrace::<fn(), ()> [(External, Hidden)] [h41dada2c21a1259dE] (size=6)\n\n- CGU[3] 5dbzi1e5qm0d7kj2 (4 items, size=4):\n  - fn <[closure@std::rt::lang_start<()>::{closure#0}] as std::ops::FnOnce<()>>::call_once - shim(vtable) [(External, Hidden)] [h595d414cbb7651d5E] (size=1)\n  - fn <[closure@std::rt::lang_start<()>::{closure#0}] as std::ops::FnOnce<()>>::call_once - shim [(External, Hidden)] [h24eaa44f03b2b233E] (size=1)\n  - fn <fn() as std::ops::FnOnce<()>>::call_once - shim(fn()) [(External, Hidden)] [hf338f5339c3711acE] (size=1)\n  - fn std::ptr::drop_in_place::<[closure@std::rt::lang_start<()>::{closure#0}]> - shim(None) [(External, Hidden)] [h17a19dcdb40600daE] (size=1)\n\n- CGU[4] scev95ysd7g4b0z (1 items, size=2):\n  - fn <() as std::process::Termination>::report [(External, Hidden)] [h082b15a6d07338dcE] (size=2)\n```\n\nr? ``@wesleywiser``", "tree": {"sha": "9da217518a0b22e80626e9001d3ed7cf1b306f75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9da217518a0b22e80626e9001d3ed7cf1b306f75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6aec9459e754997fdb00ec5aa8cf572d64a1af7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkeQPlCRBK7hj4Ov3rIwAAZ1gIAD0GpOIznOtJCGRQlahbTwJA\nsjTF9XpnSxcnYo9xw1tUZ7mbB1ZYDUDpsVfRP7JQcGf1va1eR/CTfgMcyKmxwtBF\nmITZnxkTXycWIRAiUlENtRDXDILp9XgwLg6hh3ZMiJrOyScO5kVgQJTzPO8xCTOo\niqUsvIPSVgqjofjSPx84JoNNODdd7cmn8LIC1OJ83xT4t+Uyv9BncJmVUVCNdIp9\nyZsMGoZ31qIKl/dnAVQ+xcc3DQPCJFoi0StUhvCVWwH17XUPHSQnpeg8uHMntXbL\nbSmm47JVA5CmPQb8UWzk/pA94UuNeKqTVc3ITSLT7FbA2NcZ7wYKT8iT1fQL0XQ=\n=JPSI\n-----END PGP SIGNATURE-----\n", "payload": "tree 9da217518a0b22e80626e9001d3ed7cf1b306f75\nparent a66ba9b10b78063e4bd6afbc601786eed3159ade\nparent 1191bea6ab6402bd10ea69cd2aa837331cd452b3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1685652453 +0200\ncommitter GitHub <noreply@github.com> 1685652453 +0200\n\nRollup merge of #112155 - nnethercote:debug_dump, r=wesleywiser\n\nImprove CGU debug printing.\n\n- Add more total and per-CGU measurements.\n- Ensure CGUs are sorted by name before the first `debug_dump` calls, for deterministic output.\n- Print items within CGUs in sorted-by-name order, for deterministic output.\n- Add some assertions and comments clarifying sortedness of CGUs at various points.\n\nAn example, before:\n```\nINITIAL PARTITIONING (5 CodegenUnits, max=29, min=1, max/min=29.0):\nCodegenUnit scev95ysd7g4b0z estimated size 2:\n - fn <() as std::process::Termination>::report [(External, Hidden)] [h082b15a6d07338dcE] estimated size 2\n\nCodegenUnit 1j0frgtl72rsz24q estimated size 29:\n - fn std::rt::lang_start::<()>::{closure#0} [(External, Hidden)] [h695c7b5d6a212565E] estimated size 17\n - fn std::rt::lang_start::<()> [(External, Hidden)] [h4ca942948e9cb931E] estimated size 12\n\nCodegenUnit 5dbzi1e5qm0d7kj2 estimated size 4:\n - fn <[closure@std::rt::lang_start<()>::{closure#0}] as std::ops::FnOnce<()>>::call_once - shim [(External, Hidden)] [h24eaa44f03b2b233E] estimated size 1\n - fn <fn() as std::ops::FnOnce<()>>::call_once - shim(fn()) [(External, Hidden)] [hf338f5339c3711acE] estimated size 1\n - fn <[closure@std::rt::lang_start<()>::{closure#0}] as std::ops::FnOnce<()>>::call_once - shim(vtable) [(External, Hidden)] [h595d414cbb7651d5E] estimated size 1\n - fn std::ptr::drop_in_place::<[closure@std::rt::lang_start<()>::{closure#0}]> - shim(None) [(External, Hidden)] [h17a19dcdb40600daE] estimated size 1\n\nCodegenUnit 220m1mqa2mlbg7r3 estimated size 1:\n - fn main [(External, Hidden)] [hb29587cdb6db5f42E] estimated size 1\n\nCodegenUnit 4ulbh241f7tvyn7x estimated size 6:\n - fn std::sys_common::backtrace::__rust_begin_short_backtrace::<fn(), ()> [(External, Hidden)] [h41dada2c21a1259dE] estimated size 6\n```\nand after:\n```\nINITIAL PARTITIONING (9 items, total_size=42; 5 CGUs, max_size=29, min_size=1, max_size/min_size=29.0):\n- CGU[0] 1j0frgtl72rsz24q (2 items, size=29):\n  - fn std::rt::lang_start::<()> [(External, Hidden)] [h4ca942948e9cb931E] (size=12)\n  - fn std::rt::lang_start::<()>::{closure#0} [(External, Hidden)] [h695c7b5d6a212565E] (size=17)\n\n- CGU[1] 220m1mqa2mlbg7r3 (1 items, size=1):\n  - fn main [(External, Hidden)] [hb29587cdb6db5f42E] (size=1)\n\n- CGU[2] 4ulbh241f7tvyn7x (1 items, size=6):\n  - fn std::sys_common::backtrace::__rust_begin_short_backtrace::<fn(), ()> [(External, Hidden)] [h41dada2c21a1259dE] (size=6)\n\n- CGU[3] 5dbzi1e5qm0d7kj2 (4 items, size=4):\n  - fn <[closure@std::rt::lang_start<()>::{closure#0}] as std::ops::FnOnce<()>>::call_once - shim(vtable) [(External, Hidden)] [h595d414cbb7651d5E] (size=1)\n  - fn <[closure@std::rt::lang_start<()>::{closure#0}] as std::ops::FnOnce<()>>::call_once - shim [(External, Hidden)] [h24eaa44f03b2b233E] (size=1)\n  - fn <fn() as std::ops::FnOnce<()>>::call_once - shim(fn()) [(External, Hidden)] [hf338f5339c3711acE] (size=1)\n  - fn std::ptr::drop_in_place::<[closure@std::rt::lang_start<()>::{closure#0}]> - shim(None) [(External, Hidden)] [h17a19dcdb40600daE] (size=1)\n\n- CGU[4] scev95ysd7g4b0z (1 items, size=2):\n  - fn <() as std::process::Termination>::report [(External, Hidden)] [h082b15a6d07338dcE] (size=2)\n```\n\nr? ``@wesleywiser``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6aec9459e754997fdb00ec5aa8cf572d64a1af7", "html_url": "https://github.com/rust-lang/rust/commit/c6aec9459e754997fdb00ec5aa8cf572d64a1af7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6aec9459e754997fdb00ec5aa8cf572d64a1af7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a66ba9b10b78063e4bd6afbc601786eed3159ade", "url": "https://api.github.com/repos/rust-lang/rust/commits/a66ba9b10b78063e4bd6afbc601786eed3159ade", "html_url": "https://github.com/rust-lang/rust/commit/a66ba9b10b78063e4bd6afbc601786eed3159ade"}, {"sha": "1191bea6ab6402bd10ea69cd2aa837331cd452b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1191bea6ab6402bd10ea69cd2aa837331cd452b3", "html_url": "https://github.com/rust-lang/rust/commit/1191bea6ab6402bd10ea69cd2aa837331cd452b3"}], "stats": {"total": 71, "additions": 43, "deletions": 28}, "files": [{"sha": "1511e25523559edd20cd0013fc0d0f7b9f20fc12", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6aec9459e754997fdb00ec5aa8cf572d64a1af7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aec9459e754997fdb00ec5aa8cf572d64a1af7/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=c6aec9459e754997fdb00ec5aa8cf572d64a1af7", "patch": "@@ -291,10 +291,12 @@ impl<'tcx> CodegenUnit<'tcx> {\n         self.primary = true;\n     }\n \n+    /// The order of these items is non-determinstic.\n     pub fn items(&self) -> &FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)> {\n         &self.items\n     }\n \n+    /// The order of these items is non-determinstic.\n     pub fn items_mut(&mut self) -> &mut FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)> {\n         &mut self.items\n     }"}, {"sha": "89dadc782f2dad06518109c76f4eb9c13f875842", "filename": "compiler/rustc_monomorphize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6aec9459e754997fdb00ec5aa8cf572d64a1af7/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aec9459e754997fdb00ec5aa8cf572d64a1af7/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Flib.rs?ref=c6aec9459e754997fdb00ec5aa8cf572d64a1af7", "patch": "@@ -1,4 +1,5 @@\n #![feature(array_windows)]\n+#![feature(is_sorted)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n #![deny(rustc::untranslatable_diagnostic)]"}, {"sha": "015361f8ad5b71d18061e65a13c3d73f44b558a0", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 40, "deletions": 28, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/c6aec9459e754997fdb00ec5aa8cf572d64a1af7/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6aec9459e754997fdb00ec5aa8cf572d64a1af7/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=c6aec9459e754997fdb00ec5aa8cf572d64a1af7", "patch": "@@ -126,11 +126,14 @@ struct PartitioningCx<'a, 'tcx> {\n }\n \n struct PlacedRootMonoItems<'tcx> {\n+    /// The codegen units, sorted by name to make things deterministic.\n     codegen_units: Vec<CodegenUnit<'tcx>>,\n+\n     roots: FxHashSet<MonoItem<'tcx>>,\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n }\n \n+// The output CGUs are sorted by name.\n fn partition<'tcx, I>(\n     tcx: TyCtxt<'tcx>,\n     mono_items: &mut I,\n@@ -143,6 +146,7 @@ where\n     let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning\");\n \n     let cx = &PartitioningCx { tcx, target_cgu_count: max_cgu_count, inlining_map };\n+\n     // In the first step, we place all regular monomorphizations into their\n     // respective 'home' codegen unit. Regular monomorphizations are all\n     // functions and statics defined in the local crate.\n@@ -225,8 +229,8 @@ where\n         dead_code_cgu.make_code_coverage_dead_code_cgu();\n     }\n \n-    // Finally, sort by codegen unit name, so that we get deterministic results.\n-    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n+    // Ensure CGUs are sorted by name, so that we get deterministic results.\n+    assert!(codegen_units.is_sorted_by(|a, b| Some(a.name().as_str().cmp(b.name().as_str()))));\n \n     debug_dump(tcx, \"FINAL\", &codegen_units);\n \n@@ -301,27 +305,22 @@ where\n         codegen_units.insert(codegen_unit_name, CodegenUnit::new(codegen_unit_name));\n     }\n \n-    let codegen_units = codegen_units.into_values().collect();\n+    let mut codegen_units: Vec<_> = codegen_units.into_values().collect();\n+    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n+\n     PlacedRootMonoItems { codegen_units, roots, internalization_candidates }\n }\n \n+// This function requires the CGUs to be sorted by name on input, and ensures\n+// they are sorted by name on return, for deterministic behaviour.\n fn merge_codegen_units<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,\n     codegen_units: &mut Vec<CodegenUnit<'tcx>>,\n ) {\n     assert!(cx.target_cgu_count >= 1);\n \n-    // Note that at this point in time the `codegen_units` here may not be\n-    // in a deterministic order (but we know they're deterministically the\n-    // same set). We want this merging to produce a deterministic ordering\n-    // of codegen units from the input.\n-    //\n-    // Due to basically how we've implemented the merging below (merge the\n-    // two smallest into each other) we're sure to start off with a\n-    // deterministic order (sorted by name). This'll mean that if two cgus\n-    // have the same size the stable sort below will keep everything nice\n-    // and deterministic.\n-    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n+    // A sorted order here ensures merging is deterministic.\n+    assert!(codegen_units.is_sorted_by(|a, b| Some(a.name().as_str().cmp(b.name().as_str()))));\n \n     // This map keeps track of what got merged into what.\n     let mut cgu_contents: FxHashMap<Symbol, Vec<Symbol>> =\n@@ -400,6 +399,9 @@ fn merge_codegen_units<'tcx>(\n             cgu.set_name(numbered_codegen_unit_name);\n         }\n     }\n+\n+    // A sorted order here ensures what follows can be deterministic.\n+    codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n }\n \n /// For symbol internalization, we need to know whether a symbol/mono-item is\n@@ -859,36 +861,46 @@ fn default_visibility(tcx: TyCtxt<'_>, id: DefId, is_generic: bool) -> Visibilit\n         _ => Visibility::Hidden,\n     }\n }\n+\n fn debug_dump<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx>, label: &str, cgus: &[CodegenUnit<'tcx>]) {\n     let dump = move || {\n         use std::fmt::Write;\n \n         let num_cgus = cgus.len();\n-        let max = cgus.iter().map(|cgu| cgu.size_estimate()).max().unwrap();\n-        let min = cgus.iter().map(|cgu| cgu.size_estimate()).min().unwrap();\n-        let ratio = max as f64 / min as f64;\n+        let num_items: usize = cgus.iter().map(|cgu| cgu.items().len()).sum();\n+        let total_size: usize = cgus.iter().map(|cgu| cgu.size_estimate()).sum();\n+        let max_size = cgus.iter().map(|cgu| cgu.size_estimate()).max().unwrap();\n+        let min_size = cgus.iter().map(|cgu| cgu.size_estimate()).min().unwrap();\n+        let max_min_size_ratio = max_size as f64 / min_size as f64;\n \n         let s = &mut String::new();\n         let _ = writeln!(\n             s,\n-            \"{label} ({num_cgus} CodegenUnits, max={max}, min={min}, max/min={ratio:.1}):\"\n+            \"{label} ({num_items} items, total_size={total_size}; {num_cgus} CGUs, \\\n+             max_size={max_size}, min_size={min_size}, max_size/min_size={max_min_size_ratio:.1}):\"\n         );\n-        for cgu in cgus {\n-            let _ =\n-                writeln!(s, \"CodegenUnit {} estimated size {}:\", cgu.name(), cgu.size_estimate());\n+        for (i, cgu) in cgus.iter().enumerate() {\n+            let num_items = cgu.items().len();\n+            let _ = writeln!(\n+                s,\n+                \"- CGU[{i}] {} ({num_items} items, size={}):\",\n+                cgu.name(),\n+                cgu.size_estimate()\n+            );\n \n-            for (mono_item, linkage) in cgu.items() {\n-                let symbol_name = mono_item.symbol_name(tcx).name;\n+            // The order of `cgu.items()` is non-deterministic; sort it by name\n+            // to give deterministic output.\n+            let mut items: Vec<_> = cgu.items().iter().collect();\n+            items.sort_by_key(|(item, _)| item.symbol_name(tcx).name);\n+            for (item, linkage) in items {\n+                let symbol_name = item.symbol_name(tcx).name;\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map_or(\"<no hash>\", |i| &symbol_name[i..]);\n \n+                let size = item.size_estimate(tcx);\n                 let _ = with_no_trimmed_paths!(writeln!(\n                     s,\n-                    \" - {} [{:?}] [{}] estimated size {}\",\n-                    mono_item,\n-                    linkage,\n-                    symbol_hash,\n-                    mono_item.size_estimate(tcx)\n+                    \"  - {item} [{linkage:?}] [{symbol_hash}] (size={size})\"\n                 ));\n             }\n "}]}