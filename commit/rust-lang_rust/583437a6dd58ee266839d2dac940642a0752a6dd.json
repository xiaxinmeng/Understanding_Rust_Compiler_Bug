{"sha": "583437a6dd58ee266839d2dac940642a0752a6dd", "node_id": "C_kwDOAAsO6NoAKDU4MzQzN2E2ZGQ1OGVlMjY2ODM5ZDJkYWM5NDA2NDJhMDc1MmE2ZGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-27T07:54:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-27T07:54:16Z"}, "message": "Auto merge of #89203 - GuillaumeGomez:cleanup-rustdoc-types, r=camelid\n\nClean up clean/types.rs file by making the implementations follow the type declaration\n\nThis PR doesn't change anything, it simply moves things around: when reading the code, I realized a few times that a type declaration and implementations on it might be separated by some other type declarations, which makes the reading much more complicated. I put back impl and declaration together.\n\nr? `@camelid`", "tree": {"sha": "96286fdd5008031ca551a00806f0f93166b8b130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96286fdd5008031ca551a00806f0f93166b8b130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/583437a6dd58ee266839d2dac940642a0752a6dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/583437a6dd58ee266839d2dac940642a0752a6dd", "html_url": "https://github.com/rust-lang/rust/commit/583437a6dd58ee266839d2dac940642a0752a6dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/583437a6dd58ee266839d2dac940642a0752a6dd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04006d8e3b5043131ec56a5f3605b1edcb33194d", "url": "https://api.github.com/repos/rust-lang/rust/commits/04006d8e3b5043131ec56a5f3605b1edcb33194d", "html_url": "https://github.com/rust-lang/rust/commit/04006d8e3b5043131ec56a5f3605b1edcb33194d"}, {"sha": "1c2334950435bb7b6cc26015ab6205fde3958b19", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2334950435bb7b6cc26015ab6205fde3958b19", "html_url": "https://github.com/rust-lang/rust/commit/1c2334950435bb7b6cc26015ab6205fde3958b19"}], "stats": {"total": 82, "additions": 40, "deletions": 42}, "files": [{"sha": "68a35e55c268e6e3e98a71613f589b8aa9879f64", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 40, "deletions": 42, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/583437a6dd58ee266839d2dac940642a0752a6dd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/583437a6dd58ee266839d2dac940642a0752a6dd/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=583437a6dd58ee266839d2dac940642a0752a6dd", "patch": "@@ -908,18 +908,10 @@ impl<'a> FromIterator<&'a DocFragment> for String {\n     }\n }\n \n-/// The attributes on an [`Item`], including attributes like `#[derive(...)]` and `#[inline]`,\n-/// as well as doc comments.\n-#[derive(Clone, Debug, Default)]\n-crate struct Attributes {\n-    crate doc_strings: Vec<DocFragment>,\n-    crate other_attrs: Vec<ast::Attribute>,\n-}\n-\n-#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n /// A link that has not yet been rendered.\n ///\n /// This link will be turned into a rendered link by [`Item::links`].\n+#[derive(Clone, Debug, PartialEq, Eq, Hash)]\n crate struct ItemLink {\n     /// The original link written in the markdown\n     pub(crate) link: String,\n@@ -944,6 +936,14 @@ pub struct RenderedLink {\n     pub(crate) href: String,\n }\n \n+/// The attributes on an [`Item`], including attributes like `#[derive(...)]` and `#[inline]`,\n+/// as well as doc comments.\n+#[derive(Clone, Debug, Default)]\n+crate struct Attributes {\n+    crate doc_strings: Vec<DocFragment>,\n+    crate other_attrs: Vec<ast::Attribute>,\n+}\n+\n impl Attributes {\n     crate fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n         self.other_attrs.lists(name)\n@@ -1419,37 +1419,6 @@ crate enum Type {\n     ImplTrait(Vec<GenericBound>),\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]\n-/// N.B. this has to be different from `hir::PrimTy` because it also includes types that aren't\n-/// paths, like `Unit`.\n-crate enum PrimitiveType {\n-    Isize,\n-    I8,\n-    I16,\n-    I32,\n-    I64,\n-    I128,\n-    Usize,\n-    U8,\n-    U16,\n-    U32,\n-    U64,\n-    U128,\n-    F32,\n-    F64,\n-    Char,\n-    Bool,\n-    Str,\n-    Slice,\n-    Array,\n-    Tuple,\n-    Unit,\n-    RawPointer,\n-    Reference,\n-    Fn,\n-    Never,\n-}\n-\n crate trait GetDefId {\n     /// Use this method to get the [`DefId`] of a [`clean`] AST node.\n     /// This will return [`None`] when called on a primitive [`clean::Type`].\n@@ -1565,9 +1534,7 @@ impl Type {\n         };\n         Some((&self_, trait_did, *name))\n     }\n-}\n \n-impl Type {\n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n         let t: PrimitiveType = match *self {\n             ResolvedPath { did, .. } => return Some(did),\n@@ -1604,6 +1571,37 @@ impl GetDefId for Type {\n     }\n }\n \n+/// N.B. this has to be different from `hir::PrimTy` because it also includes types that aren't\n+/// paths, like `Unit`.\n+#[derive(Clone, PartialEq, Eq, Hash, Copy, Debug)]\n+crate enum PrimitiveType {\n+    Isize,\n+    I8,\n+    I16,\n+    I32,\n+    I64,\n+    I128,\n+    Usize,\n+    U8,\n+    U16,\n+    U32,\n+    U64,\n+    U128,\n+    F32,\n+    F64,\n+    Char,\n+    Bool,\n+    Str,\n+    Slice,\n+    Array,\n+    Tuple,\n+    Unit,\n+    RawPointer,\n+    Reference,\n+    Fn,\n+    Never,\n+}\n+\n impl PrimitiveType {\n     crate fn from_hir(prim: hir::PrimTy) -> PrimitiveType {\n         use ast::{FloatTy, IntTy, UintTy};"}]}