{"sha": "bf537eefb5dd05894344d49abf8598e5f67f3abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNTM3ZWVmYjVkZDA1ODk0MzQ0ZDQ5YWJmODU5OGU1ZjY3ZjNhYmY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-21T15:56:01Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-21T17:02:07Z"}, "message": "Fixed mbe trival subtree", "tree": {"sha": "c799742747218557ca1498216a383eddf472ff8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c799742747218557ca1498216a383eddf472ff8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf537eefb5dd05894344d49abf8598e5f67f3abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf537eefb5dd05894344d49abf8598e5f67f3abf", "html_url": "https://github.com/rust-lang/rust/commit/bf537eefb5dd05894344d49abf8598e5f67f3abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf537eefb5dd05894344d49abf8598e5f67f3abf/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f61915bde4c5d8d4fe2e9b8dfa9445008730b79", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f61915bde4c5d8d4fe2e9b8dfa9445008730b79", "html_url": "https://github.com/rust-lang/rust/commit/1f61915bde4c5d8d4fe2e9b8dfa9445008730b79"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "1de399fee45ce130b90904225064c772d4a4a087", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bf537eefb5dd05894344d49abf8598e5f67f3abf/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf537eefb5dd05894344d49abf8598e5f67f3abf/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=bf537eefb5dd05894344d49abf8598e5f67f3abf", "patch": "@@ -5,6 +5,7 @@ use ra_syntax::{\n     ast, AstNode, AstToken, NodeOrToken, Parse, SmolStr, SyntaxKind, SyntaxKind::*, SyntaxNode,\n     SyntaxTreeBuilder, TextRange, TextUnit, T,\n };\n+use std::iter::successors;\n use tt::buffer::{Cursor, TokenBuffer};\n \n use crate::subtree_source::SubtreeTokenSource;\n@@ -160,6 +161,31 @@ impl Convertor {\n \n         let first_child = tt.first_child_or_token()?;\n         let last_child = tt.last_child_or_token()?;\n+\n+        // ignore trivial first_child and last_child\n+        let first_child = successors(Some(first_child), |it| {\n+            if it.kind().is_trivia() {\n+                it.next_sibling_or_token()\n+            } else {\n+                None\n+            }\n+        })\n+        .last()\n+        .unwrap();\n+        if first_child.kind().is_trivia() {\n+            return Some(tt::Subtree { token_trees: vec![], delimiter: tt::Delimiter::None });\n+        }\n+\n+        let last_child = successors(Some(last_child), |it| {\n+            if it.kind().is_trivia() {\n+                it.prev_sibling_or_token()\n+            } else {\n+                None\n+            }\n+        })\n+        .last()\n+        .unwrap();\n+\n         let (delimiter, skip_first) = match (first_child.kind(), last_child.kind()) {\n             (T!['('], T![')']) => (tt::Delimiter::Parenthesis, true),\n             (T!['{'], T!['}']) => (tt::Delimiter::Brace, true),\n@@ -363,6 +389,7 @@ mod tests {\n     use super::*;\n     use crate::tests::{create_rules, expand};\n     use ra_parser::TokenSource;\n+    use ra_syntax::algo::{insert_children, InsertPosition};\n \n     #[test]\n     fn convert_tt_token_source() {\n@@ -423,4 +450,45 @@ mod tests {\n         let expansion = expand(&rules, \"stmts!();\");\n         assert!(token_tree_to_syntax_node(&expansion, FragmentKind::Expr).is_err());\n     }\n+\n+    #[test]\n+    fn test_token_tree_last_child_is_white_space() {\n+        let source_file = ast::SourceFile::parse(\"f!({} );\").ok().unwrap();\n+        let macro_call = source_file.syntax().descendants().find_map(ast::MacroCall::cast).unwrap();\n+        let token_tree = macro_call.token_tree().unwrap();\n+\n+        // Token Tree now is :\n+        // TokenTree\n+        // - T!['(']\n+        // - TokenTree\n+        //   - T!['{']\n+        //   - T!['}']\n+        // - WHITE_SPACE\n+        // - T![')']\n+\n+        let rbrace =\n+            token_tree.syntax().descendants_with_tokens().find(|it| it.kind() == T!['}']).unwrap();\n+        let space = token_tree\n+            .syntax()\n+            .descendants_with_tokens()\n+            .find(|it| it.kind() == SyntaxKind::WHITESPACE)\n+            .unwrap();\n+\n+        // reorder th white space, such that the white is inside the inner token-tree.\n+        let token_tree = insert_children(\n+            &rbrace.parent().unwrap(),\n+            InsertPosition::Last,\n+            &mut std::iter::once(space),\n+        );\n+\n+        // Token Tree now is :\n+        // TokenTree\n+        // - T!['{']\n+        // - T!['}']\n+        // - WHITE_SPACE\n+        let token_tree = ast::TokenTree::cast(token_tree).unwrap();\n+        let tt = ast_to_token_tree(&token_tree).unwrap().0;\n+\n+        assert_eq!(tt.delimiter, tt::Delimiter::Brace);\n+    }\n }"}]}