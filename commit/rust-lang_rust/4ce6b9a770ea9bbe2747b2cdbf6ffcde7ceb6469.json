{"sha": "4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZTZiOWE3NzBlYTliYmUyNzQ3YjJjZGJmNmZmY2RlN2NlYjY0Njk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-24T10:07:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-24T10:07:22Z"}, "message": "Auto merge of #46859 - gereeter:uninhabited-unions, r=eddyb\n\nOnly mark unions as uninhabited if all of their fields are uninhabited\n\nFixes #46845.", "tree": {"sha": "2842e5a7d92b6f579faee315a05cb52b304e6a52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2842e5a7d92b6f579faee315a05cb52b304e6a52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469", "html_url": "https://github.com/rust-lang/rust/commit/4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a24d9c3940f60e527c571680d64e80e0889abe", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a24d9c3940f60e527c571680d64e80e0889abe", "html_url": "https://github.com/rust-lang/rust/commit/11a24d9c3940f60e527c571680d64e80e0889abe"}, {"sha": "da9791767bf9d4c334e22a1c4718e325279be984", "url": "https://api.github.com/repos/rust-lang/rust/commits/da9791767bf9d4c334e22a1c4718e325279be984", "html_url": "https://github.com/rust-lang/rust/commit/da9791767bf9d4c334e22a1c4718e325279be984"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "bf76f6e7d1dd589794525902c58790324604b3a3", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469", "patch": "@@ -1352,17 +1352,6 @@ impl<'a, 'tcx> LayoutDetails {\n                     }).collect::<Result<Vec<_>, _>>()\n                 }).collect::<Result<Vec<_>, _>>()?;\n \n-                let (inh_first, inh_second) = {\n-                    let mut inh_variants = (0..variants.len()).filter(|&v| {\n-                        variants[v].iter().all(|f| f.abi != Abi::Uninhabited)\n-                    });\n-                    (inh_variants.next(), inh_variants.next())\n-                };\n-                if inh_first.is_none() {\n-                    // Uninhabited because it has no variants, or only uninhabited ones.\n-                    return Ok(tcx.intern_layout(LayoutDetails::uninhabited(0)));\n-                }\n-\n                 if def.is_union() {\n                     let packed = def.repr.packed();\n                     if packed && def.repr.align > 0 {\n@@ -1400,6 +1389,17 @@ impl<'a, 'tcx> LayoutDetails {\n                     }));\n                 }\n \n+                let (inh_first, inh_second) = {\n+                    let mut inh_variants = (0..variants.len()).filter(|&v| {\n+                        variants[v].iter().all(|f| f.abi != Abi::Uninhabited)\n+                    });\n+                    (inh_variants.next(), inh_variants.next())\n+                };\n+                if inh_first.is_none() {\n+                    // Uninhabited because it has no variants, or only uninhabited ones.\n+                    return Ok(tcx.intern_layout(LayoutDetails::uninhabited(0)));\n+                }\n+\n                 let is_struct = !def.is_enum() ||\n                     // Only one variant is inhabited.\n                     (inh_second.is_none() &&"}, {"sha": "235d3982a9c0c897f7dfd8c3127d40cb8206e656", "filename": "src/test/run-pass/issue-46845.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469/src%2Ftest%2Frun-pass%2Fissue-46845.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469/src%2Ftest%2Frun-pass%2Fissue-46845.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-46845.rs?ref=4ce6b9a770ea9bbe2747b2cdbf6ffcde7ceb6469", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// To work around #46855\n+// compile-flags: -Z mir-opt-level=0\n+// Regression test for the inhabitedness of unions with uninhabited variants, issue #46845\n+\n+use std::mem;\n+\n+#[derive(Copy, Clone)]\n+enum Never { }\n+\n+// A single uninhabited variant shouldn't make the whole union uninhabited.\n+union Foo {\n+    a: u64,\n+    _b: Never\n+}\n+\n+// If all the variants are uninhabited, however, the union should be uninhabited.\n+union Bar {\n+    _a: (Never, u64),\n+    _b: (u64, Never)\n+}\n+\n+fn main() {\n+    assert_eq!(mem::size_of::<Foo>(), 8);\n+    assert_eq!(mem::size_of::<Bar>(), 0);\n+\n+    let f = [Foo { a: 42 }, Foo { a: 10 }];\n+    println!(\"{}\", unsafe { f[0].a });\n+    assert_eq!(unsafe { f[1].a }, 10);\n+}"}]}