{"sha": "21205f4f9e61469b55a853cf6be478cd6bc7a073", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMjA1ZjRmOWU2MTQ2OWI1NWE4NTNjZjZiZTQ3OGNkNmJjN2EwNzM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-30T03:17:37Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-10-08T22:53:42Z"}, "message": "Cache ids between lowering runs\n\nSo that lowering is reproducible", "tree": {"sha": "b94d564d03e377f438378e0b2cc2b42d7a688832", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b94d564d03e377f438378e0b2cc2b42d7a688832"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21205f4f9e61469b55a853cf6be478cd6bc7a073", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21205f4f9e61469b55a853cf6be478cd6bc7a073", "html_url": "https://github.com/rust-lang/rust/commit/21205f4f9e61469b55a853cf6be478cd6bc7a073", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21205f4f9e61469b55a853cf6be478cd6bc7a073/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce80094632c727ef87b465fc87873cce1c471ad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce80094632c727ef87b465fc87873cce1c471ad6", "html_url": "https://github.com/rust-lang/rust/commit/ce80094632c727ef87b465fc87873cce1c471ad6"}], "stats": {"total": 110, "additions": 86, "deletions": 24}, "files": [{"sha": "0a1df25f115a6ef92741ec4d77e91859ea342079", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=21205f4f9e61469b55a853cf6be478cd6bc7a073", "patch": "@@ -318,6 +318,10 @@ impl NodeIdAssigner for Session {\n     fn next_node_id(&self) -> NodeId {\n         self.reserve_node_ids(1)\n     }\n+\n+    fn peek_node_id(&self) -> NodeId {\n+        self.next_node_id.get().checked_add(1).unwrap()\n+    }\n }\n \n fn split_msg_into_multilines(msg: &str) -> Option<String> {"}, {"sha": "3db484ef9306de5d647bda842996983a619d5607", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=21205f4f9e61469b55a853cf6be478cd6bc7a073", "patch": "@@ -112,8 +112,7 @@ pub fn compile_input(sess: Session,\n \n         let expanded_crate = assign_node_ids(&sess, expanded_crate);\n         // Lower ast -> hir.\n-        let foo = &42;\n-        let lcx = LoweringContext::new(foo, &sess, &expanded_crate);\n+        let lcx = LoweringContext::new(&sess, &expanded_crate);\n         let mut hir_forest = time(sess.time_passes(),\n                                   \"lowering ast -> hir\",\n                                   || hir_map::Forest::new(lower_crate(&lcx, &expanded_crate)));\n@@ -282,7 +281,7 @@ pub struct CompileState<'a, 'ast: 'a, 'tcx: 'a> {\n     pub ast_map: Option<&'a hir_map::Map<'ast>>,\n     pub analysis: Option<&'a ty::CrateAnalysis>,\n     pub tcx: Option<&'a ty::ctxt<'tcx>>,\n-    pub lcx: Option<&'a LoweringContext<'a, 'tcx>>,\n+    pub lcx: Option<&'a LoweringContext<'a>>,\n     pub trans: Option<&'a trans::CrateTranslation>,\n }\n \n@@ -340,7 +339,7 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n                               krate: &'a ast::Crate,\n                               hir_crate: &'a hir::Crate,\n                               crate_name: &'a str,\n-                              lcx: &'a LoweringContext<'a, 'tcx>)\n+                              lcx: &'a LoweringContext<'a>)\n                               -> CompileState<'a, 'ast, 'tcx> {\n         CompileState {\n             crate_name: Some(crate_name),\n@@ -359,7 +358,7 @@ impl<'a, 'ast, 'tcx> CompileState<'a, 'ast, 'tcx> {\n                             hir_crate: &'a hir::Crate,\n                             analysis: &'a ty::CrateAnalysis,\n                             tcx: &'a ty::ctxt<'tcx>,\n-                            lcx: &'a LoweringContext<'a, 'tcx>)\n+                            lcx: &'a LoweringContext<'a>)\n                             -> CompileState<'a, 'ast, 'tcx> {\n         CompileState {\n             analysis: Some(analysis),"}, {"sha": "73961c8d757ded31cf9a43ee67f15329c17724b6", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=21205f4f9e61469b55a853cf6be478cd6bc7a073", "patch": "@@ -670,8 +670,7 @@ pub fn pretty_print_input(sess: Session,\n     // There is some twisted, god-forsaken tangle of lifetimes here which makes\n     // the ordering of stuff super-finicky.\n     let mut hir_forest;\n-    let foo = &42;\n-    let lcx = LoweringContext::new(foo, &sess, &krate);\n+    let lcx = LoweringContext::new(&sess, &krate);\n     let arenas = ty::CtxtArenas::new();\n     let ast_map = if compute_ast_map {\n         hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate));"}, {"sha": "27ae39acbf40783fbf280c7befd1fd34433bfa21", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 71, "deletions": 12, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=21205f4f9e61469b55a853cf6be478cd6bc7a073", "patch": "@@ -12,22 +12,26 @@\n \n use hir;\n \n+use std::collections::HashMap;\n+\n use syntax::ast::*;\n use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned, Span};\n use syntax::owned_slice::OwnedSlice;\n use syntax::parse::token::{self, str_to_ident};\n use syntax::std_inject;\n \n-pub struct LoweringContext<'a, 'hir> {\n-    // TODO\n-    foo: &'hir i32,\n-    id_assigner: &'a NodeIdAssigner,\n+use std::cell::{Cell, RefCell};\n+\n+pub struct LoweringContext<'a> {\n     crate_root: Option<&'static str>,\n+    id_cache: RefCell<HashMap<NodeId, NodeId>>,\n+    id_assigner: &'a NodeIdAssigner,\n+    cached_id: Cell<u32>,\n }\n \n-impl<'a, 'hir> LoweringContext<'a, 'hir> {\n-    pub fn new(foo: &'hir i32, id_assigner: &'a NodeIdAssigner, c: &Crate) -> LoweringContext<'a, 'hir> {\n+impl<'a, 'hir> LoweringContext<'a> {\n+    pub fn new(id_assigner: &'a NodeIdAssigner, c: &Crate) -> LoweringContext<'a> {\n         let crate_root = if std_inject::no_core(c) {\n             None\n         } else if std_inject::no_std(c) {\n@@ -37,14 +41,21 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         };\n \n         LoweringContext {\n-            foo: foo,\n-            id_assigner: id_assigner,\n             crate_root: crate_root,\n+            id_cache: RefCell::new(HashMap::new()),\n+            id_assigner: id_assigner,\n+            cached_id: Cell::new(0),\n         }\n     }\n \n     fn next_id(&self) -> NodeId {\n-        self.id_assigner.next_node_id()\n+        let cached = self.cached_id.get();\n+        if cached == 0 {\n+            return self.id_assigner.next_node_id()\n+        }\n+\n+        self.cached_id.set(cached + 1);\n+        cached\n     }\n }\n \n@@ -745,6 +756,49 @@ pub fn lower_pat(_lctx: &LoweringContext, p: &Pat) -> P<hir::Pat> {\n     })\n }\n \n+// RAII utility for setting and unsetting the cached id.\n+struct CachedIdSetter<'a> {\n+    reset: bool,\n+    lctx: &'a LoweringContext<'a>,\n+}\n+\n+impl<'a> CachedIdSetter<'a> {\n+    fn new(lctx: &'a LoweringContext, expr_id: NodeId) -> CachedIdSetter<'a> {\n+        let id_cache: &mut HashMap<_, _> = &mut lctx.id_cache.borrow_mut();\n+\n+        if id_cache.contains_key(&expr_id) {\n+            let cached_id = lctx.cached_id.get();\n+            if cached_id == 0 {\n+                // We're entering a node where we need to track ids, but are not\n+                // yet tracking.\n+                lctx.cached_id.set(id_cache[&expr_id]);\n+            } else {\n+                // We're already tracking - check that the tracked id is the same\n+                // as the expected id.\n+                assert!(cached_id == id_cache[&expr_id], \"id mismatch\");\n+            }\n+        } else {\n+            id_cache.insert(expr_id, lctx.id_assigner.peek_node_id());\n+        }\n+\n+        CachedIdSetter {\n+            // Only reset the id if it was previously 0, i.e., was not cached.\n+            // If it was cached, we are in a nested node, but our id count will\n+            // still count towards the parent's count.\n+            reset: lctx.cached_id.get() == 0,\n+            lctx: lctx,\n+        }\n+    }\n+}\n+\n+impl<'a> Drop for CachedIdSetter<'a> {\n+    fn drop(&mut self) {\n+        if self.reset {\n+            self.lctx.cached_id.set(0);\n+        }\n+    }\n+}\n+\n pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n     P(hir::Expr {\n             id: e.id,\n@@ -780,9 +834,7 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                     //     std::intrinsics::move_val_init(raw_place, pop_unsafe!( EXPR ));\n                     //     InPlace::finalize(place)\n                     // })\n-\n-                    // TODO\n-                    println!(\"{}\", lctx.foo);\n+                    let _old_cached = CachedIdSetter::new(lctx, e.id);\n \n                     let placer_expr = lower_expr(lctx, placer);\n                     let value_expr = lower_expr(lctx, value_expr);\n@@ -903,6 +955,7 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                 // might be `if let`.\n                 ExprIf(ref cond, ref blk, ref else_opt) => {\n                     let else_opt = else_opt.as_ref().map(|els| match els.node {\n+                        let _old_cached = CachedIdSetter::new(lctx, e.id);\n                         ExprIfLet(..) => {\n                             // wrap the if-let expr in a block\n                             let span = els.span;\n@@ -1019,6 +1072,8 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                     //     [_ if <else_opt_if_cond> => <else_opt_if_body>,]\n                     //     _ => [<else_opt> | ()]\n                     //   }\n+                \n+                    let _old_cached = CachedIdSetter::new(lctx, e.id);\n \n                     // `<pat> => <body>`\n                     let pat_arm = {\n@@ -1098,6 +1153,8 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                     //     }\n                     //   }\n \n+                    let _old_cached = CachedIdSetter::new(lctx, e.id);\n+\n                     // `<pat> => <body>`\n                     let pat_arm = {\n                         let body_expr = expr_block(lctx, lower_block(lctx, body));\n@@ -1141,6 +1198,8 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                     //     result\n                     //   }\n \n+                    let _old_cached = CachedIdSetter::new(lctx, e.id);\n+\n                     // expand <head>\n                     let head = lower_expr(lctx, head);\n "}, {"sha": "09825f1f919394439c24477ada884cfba7c387ec", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=21205f4f9e61469b55a853cf6be478cd6bc7a073", "patch": "@@ -76,7 +76,7 @@ pub struct DumpCsvVisitor<'l, 'tcx: 'l> {\n \n impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n     pub fn new(tcx: &'l ty::ctxt<'tcx>,\n-               lcx: &'l LoweringContext<'l, 'tcx>,\n+               lcx: &'l LoweringContext<'l>,\n                analysis: &'l ty::CrateAnalysis,\n                output_file: Box<File>)\n                -> DumpCsvVisitor<'l, 'tcx> {"}, {"sha": "72f665f63bf9efbbb758feba70042c27c349b843", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=21205f4f9e61469b55a853cf6be478cd6bc7a073", "patch": "@@ -38,7 +38,7 @@ mod dump_csv;\n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: &'l ty::ctxt<'tcx>,\n-    lcx: &'l lowering::LoweringContext<'l, 'tcx>,\n+    lcx: &'l lowering::LoweringContext<'l>,\n     span_utils: SpanUtils<'l>,\n }\n \n@@ -178,14 +178,14 @@ pub struct MethodCallData {\n \n impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n     pub fn new(tcx: &'l ty::ctxt<'tcx>,\n-               lcx: &'l lowering::LoweringContext<'l, 'tcx>)\n+               lcx: &'l lowering::LoweringContext<'l>)\n                -> SaveContext<'l, 'tcx> {\n         let span_utils = SpanUtils::new(&tcx.sess);\n         SaveContext::from_span_utils(tcx, lcx, span_utils)\n     }\n \n     pub fn from_span_utils(tcx: &'l ty::ctxt<'tcx>,\n-                           lcx: &'l lowering::LoweringContext<'l, 'tcx>,\n+                           lcx: &'l lowering::LoweringContext<'l>,\n                            span_utils: SpanUtils<'l>)\n                            -> SaveContext<'l, 'tcx> {\n         SaveContext {\n@@ -711,7 +711,7 @@ impl<'v> Visitor<'v> for PathCollector {\n }\n \n pub fn process_crate<'l, 'tcx>(tcx: &'l ty::ctxt<'tcx>,\n-                               lcx: &'l lowering::LoweringContext<'l, 'tcx>,\n+                               lcx: &'l lowering::LoweringContext<'l>,\n                                krate: &ast::Crate,\n                                analysis: &ty::CrateAnalysis,\n                                odir: Option<&Path>) {"}, {"sha": "02cd648b6d8b3fa000fbe7822b5dd37ec3b71484", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21205f4f9e61469b55a853cf6be478cd6bc7a073/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=21205f4f9e61469b55a853cf6be478cd6bc7a073", "patch": "@@ -377,6 +377,7 @@ pub const DUMMY_NODE_ID: NodeId = !0;\n \n pub trait NodeIdAssigner {\n     fn next_node_id(&self) -> NodeId;\n+    fn peek_node_id(&self) -> NodeId;\n }\n \n /// The AST represents all type param bounds as types."}]}