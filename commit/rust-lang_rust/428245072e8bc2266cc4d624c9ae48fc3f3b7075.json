{"sha": "428245072e8bc2266cc4d624c9ae48fc3f3b7075", "node_id": "C_kwDOAAsO6NoAKDQyODI0NTA3MmU4YmMyMjY2Y2M0ZDYyNGM5YWU0OGZjM2YzYjcwNzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T13:45:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T13:45:27Z"}, "message": "Auto merge of #2306 - RalfJung:unix, r=RalfJung\n\nmake some things available for all Unixes", "tree": {"sha": "f9a5c2f562d5e3909ba1d22c8150a8eb1afc555e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9a5c2f562d5e3909ba1d22c8150a8eb1afc555e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/428245072e8bc2266cc4d624c9ae48fc3f3b7075", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/428245072e8bc2266cc4d624c9ae48fc3f3b7075", "html_url": "https://github.com/rust-lang/rust/commit/428245072e8bc2266cc4d624c9ae48fc3f3b7075", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/428245072e8bc2266cc4d624c9ae48fc3f3b7075/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c17e68d9be03ef03d84b0c32457e24d5e54fb0cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c17e68d9be03ef03d84b0c32457e24d5e54fb0cc", "html_url": "https://github.com/rust-lang/rust/commit/c17e68d9be03ef03d84b0c32457e24d5e54fb0cc"}, {"sha": "5ba2c1e6be8d79837fb439bafe74b9a20500cf22", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ba2c1e6be8d79837fb439bafe74b9a20500cf22", "html_url": "https://github.com/rust-lang/rust/commit/5ba2c1e6be8d79837fb439bafe74b9a20500cf22"}], "stats": {"total": 87, "additions": 46, "deletions": 41}, "files": [{"sha": "44147433c037e3e4b1c6304388b7372d2a8211c6", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/428245072e8bc2266cc4d624c9ae48fc3f3b7075/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428245072e8bc2266cc4d624c9ae48fc3f3b7075/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=428245072e8bc2266cc4d624c9ae48fc3f3b7075", "patch": "@@ -62,6 +62,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.open(args)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"close\" => {\n+                let [fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.close(fd)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n             \"fcntl\" => {\n                 // `fcntl` is variadic. The argument count is checked based on the first argument\n                 // in `this.fcntl()`, so we do not use `check_shim` here.\n@@ -112,17 +117,27 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.rmdir(path)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"opendir\" => {\n+                let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.opendir(name)?;\n+                this.write_scalar(result, dest)?;\n+            }\n             \"closedir\" => {\n                 let [dirp] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.closedir(dirp)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"lseek\" | \"lseek64\" => {\n+            \"lseek64\" => {\n                 let [fd, offset, whence] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.lseek64(fd, offset, whence)?;\n-                // \"lseek\" is only used on macOS which is 64bit-only, so `i64` always works.\n                 this.write_scalar(Scalar::from_i64(result), dest)?;\n             }\n+            \"ftruncate64\" => {\n+                let [fd, length] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.ftruncate64(fd, length)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n             \"fsync\" => {\n                 let [fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.fsync(fd)?;\n@@ -138,6 +153,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.readlink(pathname, buf, bufsize)?;\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n+            \"posix_fadvise\" => {\n+                let [fd, offset, len, advice] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                this.read_scalar(fd)?.to_i32()?;\n+                this.read_scalar(offset)?.to_machine_isize(this)?;\n+                this.read_scalar(len)?.to_machine_isize(this)?;\n+                this.read_scalar(advice)?.to_i32()?;\n+                // fadvise is only informational, we can ignore it.\n+                this.write_null(dest)?;\n+            }\n \n             // Time related shims\n             \"gettimeofday\" => {"}, {"sha": "bbdb1b8a31c451eb3f1fdbccb7326c8b33897d57", "filename": "src/shims/unix/linux/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/428245072e8bc2266cc4d624c9ae48fc3f3b7075/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428245072e8bc2266cc4d624c9ae48fc3f3b7075/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fforeign_items.rs?ref=428245072e8bc2266cc4d624c9ae48fc3f3b7075", "patch": "@@ -30,40 +30,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // File related shims (but also see \"syscall\" below for statx)\n-            // These symbols have different names on Linux and macOS, which is the only reason they are not\n-            // in the `posix` module.\n-            \"close\" => {\n-                let [fd] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let result = this.close(fd)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n-            }\n-            \"opendir\" => {\n-                let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let result = this.opendir(name)?;\n-                this.write_scalar(result, dest)?;\n-            }\n             \"readdir64\" => {\n                 let [dirp] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.linux_readdir64(dirp)?;\n                 this.write_scalar(result, dest)?;\n             }\n-            \"ftruncate64\" => {\n-                let [fd, length] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let result = this.ftruncate64(fd, length)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n-            }\n             // Linux-only\n-            \"posix_fadvise\" => {\n-                let [fd, offset, len, advice] =\n-                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                this.read_scalar(fd)?.to_i32()?;\n-                this.read_scalar(offset)?.to_machine_isize(this)?;\n-                this.read_scalar(len)?.to_machine_isize(this)?;\n-                this.read_scalar(advice)?.to_i32()?;\n-                // fadvise is only informational, we can ignore it.\n-                this.write_null(dest)?;\n-            }\n             \"sync_file_range\" => {\n                 let [fd, offset, nbytes, flags] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "089a082fa369916eac548e0815d953291813d492", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/428245072e8bc2266cc4d624c9ae48fc3f3b7075/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428245072e8bc2266cc4d624c9ae48fc3f3b7075/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=428245072e8bc2266cc4d624c9ae48fc3f3b7075", "patch": "@@ -28,7 +28,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // File related shims\n-            \"close\" | \"close$NOCANCEL\" => {\n+            \"close$NOCANCEL\" => {\n                 let [result] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.close(result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n@@ -50,7 +50,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.macos_fstat(fd, buf)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n-            \"opendir\" | \"opendir$INODE64\" => {\n+            \"opendir$INODE64\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.opendir(name)?;\n                 this.write_scalar(result, dest)?;\n@@ -61,9 +61,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let result = this.macos_readdir_r(dirp, entry, result)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n+            \"lseek\" => {\n+                let [fd, offset, whence] =\n+                    this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                // macOS is 64bit-only, so this is lseek64\n+                let result = this.lseek64(fd, offset, whence)?;\n+                this.write_scalar(Scalar::from_i64(result), dest)?;\n+            }\n             \"ftruncate\" => {\n                 let [fd, length] =\n                     this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                // macOS is 64bit-only, so this is ftruncate64\n                 let result = this.ftruncate64(fd, length)?;\n                 this.write_scalar(Scalar::from_i32(result), dest)?;\n             }"}, {"sha": "d08430a43260ad58eedd8bca747997f6b4af2259", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/428245072e8bc2266cc4d624c9ae48fc3f3b7075/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/428245072e8bc2266cc4d624c9ae48fc3f3b7075/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=428245072e8bc2266cc4d624c9ae48fc3f3b7075", "patch": "@@ -42,7 +42,7 @@ fn test_posix_fadvise() {\n     assert_eq!(result, 0);\n }\n \n-#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+#[cfg(any(target_os = \"linux\"))]\n fn test_sync_file_range() {\n     use std::fs::{remove_file, File};\n     use std::io::Write;\n@@ -208,7 +208,7 @@ fn test_rwlock_libc_static_initializer() {\n /// Test whether the `prctl` shim correctly sets the thread name.\n ///\n /// Note: `prctl` exists only on Linux.\n-#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+#[cfg(any(target_os = \"linux\"))]\n fn test_prctl_thread_name() {\n     use libc::c_long;\n     use std::ffi::CString;\n@@ -259,9 +259,9 @@ fn test_prctl_thread_name() {\n \n /// Tests whether each thread has its own `__errno_location`.\n fn test_thread_local_errno() {\n-    #[cfg(not(target_os = \"macos\"))]\n+    #[cfg(target_os = \"linux\")]\n     use libc::__errno_location;\n-    #[cfg(target_os = \"macos\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"freebsd\"))]\n     use libc::__error as __errno_location;\n \n     unsafe {\n@@ -278,7 +278,7 @@ fn test_thread_local_errno() {\n }\n \n /// Tests whether clock support exists at all\n-#[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+#[cfg(any(target_os = \"linux\"))]\n fn test_clocks() {\n     let mut tp = std::mem::MaybeUninit::<libc::timespec>::uninit();\n     let is_error = unsafe { libc::clock_gettime(libc::CLOCK_REALTIME, tp.as_mut_ptr()) };\n@@ -317,22 +317,22 @@ fn main() {\n \n     test_posix_gettimeofday();\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+    #[cfg(any(target_os = \"linux\"))]\n     test_sync_file_range();\n \n     test_mutex_libc_init_recursive();\n     test_mutex_libc_init_normal();\n     test_mutex_libc_init_errorcheck();\n     test_rwlock_libc_static_initializer();\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+    #[cfg(any(target_os = \"linux\"))]\n     test_mutex_libc_static_initializer_recursive();\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+    #[cfg(any(target_os = \"linux\"))]\n     test_prctl_thread_name();\n \n     test_thread_local_errno();\n \n-    #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n+    #[cfg(any(target_os = \"linux\"))]\n     test_clocks();\n }"}]}