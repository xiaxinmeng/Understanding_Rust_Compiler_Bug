{"sha": "7f9c5aae9e9d94b88cb7507633f449534d32c109", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOWM1YWFlOWU5ZDk0Yjg4Y2I3NTA3NjMzZjQ0OTUzNGQzMmMxMDk=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-13T01:54:02Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-13T01:54:28Z"}, "message": "std: Restore Option::chain{,_mut}_ref as and_then{,_mut}_ref", "tree": {"sha": "334e59116e3229de8114acc1cc6c3c0cd1873b1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/334e59116e3229de8114acc1cc6c3c0cd1873b1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f9c5aae9e9d94b88cb7507633f449534d32c109", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9c5aae9e9d94b88cb7507633f449534d32c109", "html_url": "https://github.com/rust-lang/rust/commit/7f9c5aae9e9d94b88cb7507633f449534d32c109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f9c5aae9e9d94b88cb7507633f449534d32c109/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c08abb0cee1a1e679b654d2dd17f38317b58621", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c08abb0cee1a1e679b654d2dd17f38317b58621", "html_url": "https://github.com/rust-lang/rust/commit/7c08abb0cee1a1e679b654d2dd17f38317b58621"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "b75b06f42b64986fec003a549512b26b1a65d976", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f9c5aae9e9d94b88cb7507633f449534d32c109/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9c5aae9e9d94b88cb7507633f449534d32c109/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=7f9c5aae9e9d94b88cb7507633f449534d32c109", "patch": "@@ -505,10 +505,7 @@ impl get_node_info for ast::Block {\n \n impl get_node_info for Option<@ast::Expr> {\n     fn info(&self) -> Option<NodeInfo> {\n-        match *self {\n-            Some(ref s) => s.info(),\n-            None => None,\n-        }\n+        self.and_then_ref(|s| s.info())\n     }\n }\n "}, {"sha": "36405136e630ffedc4a94503039cff61acdb86b4", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7f9c5aae9e9d94b88cb7507633f449534d32c109/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9c5aae9e9d94b88cb7507633f449534d32c109/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=7f9c5aae9e9d94b88cb7507633f449534d32c109", "patch": "@@ -745,17 +745,10 @@ pub fn ty_of_closure<AC:AstConv,RS:RegionScope + Clone + 'static>(\n                           RegionParamNames(bound_lifetime_names.clone()));\n \n     let input_tys = do decl.inputs.iter().enumerate().map |(i, a)| {\n-        let expected_arg_ty = match expected_sig {\n-            Some(ref e) => {\n-                // no guarantee that the correct number of expected args\n-                // were supplied\n-                if i < e.inputs.len() {\n-                    Some(e.inputs[i])\n-                } else {\n-                    None\n-                }\n-            }\n-            None => None,\n+        let expected_arg_ty = do expected_sig.and_then_ref |e| {\n+            // no guarantee that the correct number of expected args\n+            // were supplied\n+            if i < e.inputs.len() {Some(e.inputs[i])} else {None}\n         };\n         ty_of_arg(this, &rb, a, expected_arg_ty)\n     }.collect();"}, {"sha": "ec3c02a31f2f57cf7004774917eb689582bbaa76", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f9c5aae9e9d94b88cb7507633f449534d32c109/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9c5aae9e9d94b88cb7507633f449534d32c109/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=7f9c5aae9e9d94b88cb7507633f449534d32c109", "patch": "@@ -1504,12 +1504,7 @@ impl<'self, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for FlatMap<'self,\n                 }\n             }\n             match self.iter.next().map_move(|x| (self.f)(x)) {\n-                None => {\n-                    return match self.backiter {\n-                        Some(ref mut it) => it.next(),\n-                        None => None,\n-                    };\n-                }\n+                None => return self.backiter.and_then_mut_ref(|it| it.next()),\n                 next => self.frontiter = next,\n             }\n         }\n@@ -1541,12 +1536,7 @@ impl<'self,\n                 }\n             }\n             match self.iter.next_back().map_move(|x| (self.f)(x)) {\n-                None => {\n-                    return match self.frontiter {\n-                        Some(ref mut it) => it.next_back(),\n-                        None => None,\n-                    };\n-                }\n+                None => return self.frontiter.and_then_mut_ref(|it| it.next_back()),\n                 next => self.backiter = next,\n             }\n         }"}, {"sha": "ce725257dfff03a4fefba00aa2df45b5172d15d5", "filename": "src/libstd/option.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7f9c5aae9e9d94b88cb7507633f449534d32c109/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f9c5aae9e9d94b88cb7507633f449534d32c109/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=7f9c5aae9e9d94b88cb7507633f449534d32c109", "patch": "@@ -138,8 +138,8 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `None` if the option is `None`, otherwise calls and returns the\n-    /// value of `f`.\n+    /// Returns `None` if the option is `None`, otherwise calls `f` with the\n+    /// wrapped value and returns the result.\n     #[inline]\n     pub fn and_then<U>(self, f: &fn(T) -> Option<U>) -> Option<U> {\n         match self {\n@@ -148,6 +148,26 @@ impl<T> Option<T> {\n         }\n     }\n \n+    /// Returns `None` if the option is `None`, otherwise calls `f` with a\n+    /// reference to the wrapped value and returns the result.\n+    #[inline]\n+    pub fn and_then_ref<'a, U>(&'a self, f: &fn(&'a T) -> Option<U>) -> Option<U> {\n+        match *self {\n+            Some(ref x) => f(x),\n+            None => None\n+        }\n+    }\n+\n+    /// Returns `None` if the option is `None`, otherwise calls `f` with a\n+    /// mutable reference to the wrapped value and returns the result.\n+    #[inline]\n+    pub fn and_then_mut_ref<'a, U>(&'a mut self, f: &fn(&'a mut T) -> Option<U>) -> Option<U> {\n+        match *self {\n+            Some(ref mut x) => f(x),\n+            None => None\n+        }\n+    }\n+\n     /// Returns the option if it contains a value, otherwise returns `optb`.\n     #[inline]\n     pub fn or(self, optb: Option<T>) -> Option<T> {\n@@ -157,8 +177,8 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns the option if it contains a value, otherwise calls and returns the\n-    /// value of `f`.\n+    /// Returns the option if it contains a value, otherwise calls `f` and\n+    /// returns the result.\n     #[inline]\n     pub fn or_else(self, f: &fn() -> Option<T>) -> Option<T> {\n         match self {"}]}