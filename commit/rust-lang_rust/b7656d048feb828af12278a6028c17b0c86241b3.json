{"sha": "b7656d048feb828af12278a6028c17b0c86241b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjU2ZDA0OGZlYjgyOGFmMTIyNzhhNjAyOGMxN2IwYzg2MjQxYjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-16T13:09:45Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-17T12:53:49Z"}, "message": "std: convert str::from_utf16 to an external iterator.\n\nFixes #12316.", "tree": {"sha": "0c789698c04fcfdd706d4f5aa5b229dac5486b5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c789698c04fcfdd706d4f5aa5b229dac5486b5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7656d048feb828af12278a6028c17b0c86241b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7656d048feb828af12278a6028c17b0c86241b3", "html_url": "https://github.com/rust-lang/rust/commit/b7656d048feb828af12278a6028c17b0c86241b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7656d048feb828af12278a6028c17b0c86241b3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "493a4b63c1d6791ae7d2001123d8953bd62aa443", "url": "https://api.github.com/repos/rust-lang/rust/commits/493a4b63c1d6791ae7d2001123d8953bd62aa443", "html_url": "https://github.com/rust-lang/rust/commit/493a4b63c1d6791ae7d2001123d8953bd62aa443"}], "stats": {"total": 65, "additions": 38, "deletions": 27}, "files": [{"sha": "93abf8bc5428fc547e402b136b9739b5d248bfd3", "filename": "src/libstd/str.rs", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b7656d048feb828af12278a6028c17b0c86241b3/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7656d048feb828af12278a6028c17b0c86241b3/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b7656d048feb828af12278a6028c17b0c86241b3", "patch": "@@ -824,41 +824,52 @@ pub fn is_utf16(v: &[u16]) -> bool {\n     }\n }\n \n-/// Iterates over the utf-16 characters in the specified slice, yielding each\n-/// decoded unicode character to the function provided.\n+/// An iterator that decodes UTF-16 encoded codepoints from a vector\n+/// of `u16`s.\n ///\n-/// # Failures\n-///\n-/// * Fails on invalid utf-16 data\n-pub fn utf16_chars(v: &[u16], f: |char|) {\n-    let len = v.len();\n-    let mut i = 0u;\n-    while i < len && v[i] != 0u16 {\n-        let u = v[i];\n-\n-        if  u <= 0xD7FF_u16 || u >= 0xE000_u16 {\n-            f(unsafe { cast::transmute(u as u32) });\n-            i += 1u;\n+/// Fails when it encounters invalid UTF-16 data.\n+pub struct UTF16Chars<'a> {\n+    priv iter: vec::Items<'a, u16>\n+}\n+impl<'a> Iterator<char> for UTF16Chars<'a> {\n+    fn next(&mut self) -> Option<char> {\n+        let u = match self.iter.next() {\n+            Some(u) => *u,\n+            None => return None\n+        };\n+        match char::from_u32(u as u32) {\n+            Some(c) => Some(c),\n+            None => {\n+                let u2 = *self.iter.next().expect(\"UTF16Chars: unmatched lead surrogate\");\n+                if u < 0xD7FF || u > 0xDBFF ||\n+                    u2 < 0xDC00 || u2 > 0xDFFF {\n+                    fail!(\"UTF16Chars: invalid surrogate pair\")\n+                }\n \n-        } else {\n-            let u2 = v[i+1u];\n-            assert!(u >= 0xD800_u16 && u <= 0xDBFF_u16);\n-            assert!(u2 >= 0xDC00_u16 && u2 <= 0xDFFF_u16);\n-            let mut c: u32 = (u - 0xD800_u16) as u32;\n-            c = c << 10;\n-            c |= (u2 - 0xDC00_u16) as u32;\n-            c |= 0x1_0000_u32;\n-            f(unsafe { cast::transmute(c) });\n-            i += 2u;\n+                let mut c = (u - 0xD800) as u32 << 10 | (u2 - 0xDC00) as u32 | 0x1_0000;\n+                char::from_u32(c)\n+            }\n         }\n     }\n+\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (low, high) = self.iter.size_hint();\n+        // we could be entirely surrogates (2 elements per char), or\n+        // entirely non-surrogates (1 element per char)\n+        (low / 2, high)\n+    }\n+}\n+\n+/// Create an iterator over the UTF-16 encoded codepoints in `v`.\n+///\n+/// The iterator fails if it attempts to decode invalid UTF-16 data.\n+pub fn utf16_chars<'a>(v: &'a [u16]) -> UTF16Chars<'a> {\n+    UTF16Chars { iter : v.iter() }\n }\n \n /// Allocates a new string from the utf-16 slice provided\n pub fn from_utf16(v: &[u16]) -> ~str {\n-    let mut buf = with_capacity(v.len());\n-    utf16_chars(v, |ch| buf.push_char(ch));\n-    buf\n+    utf16_chars(v).collect()\n }\n \n /// Allocates a new string with the specified capacity. The string returned is"}]}