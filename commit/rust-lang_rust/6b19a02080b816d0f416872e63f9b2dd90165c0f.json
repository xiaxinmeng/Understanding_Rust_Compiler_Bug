{"sha": "6b19a02080b816d0f416872e63f9b2dd90165c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMTlhMDIwODBiODE2ZDBmNDE2ODcyZTYzZjliMmRkOTAxNjVjMGY=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T03:55:09Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T14:34:05Z"}, "message": "syntax: fix fallout", "tree": {"sha": "24f704cb79ff0f441a1738232ad5c43b1a510616", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24f704cb79ff0f441a1738232ad5c43b1a510616"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b19a02080b816d0f416872e63f9b2dd90165c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b19a02080b816d0f416872e63f9b2dd90165c0f", "html_url": "https://github.com/rust-lang/rust/commit/6b19a02080b816d0f416872e63f9b2dd90165c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b19a02080b816d0f416872e63f9b2dd90165c0f/comments", "author": null, "committer": null, "parents": [{"sha": "6bff9de8eaa511807e9d6a323d57591b6d2ddcc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bff9de8eaa511807e9d6a323d57591b6d2ddcc6", "html_url": "https://github.com/rust-lang/rust/commit/6bff9de8eaa511807e9d6a323d57591b6d2ddcc6"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "b1799fc2718ff905b093e9243cc970c68bd7d4bc", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=6b19a02080b816d0f416872e63f9b2dd90165c0f", "patch": "@@ -61,7 +61,9 @@ struct LinkedPathNode<'a> {\n \n type LinkedPath<'a> = Option<&'a LinkedPathNode<'a>>;\n \n-impl<'a> Iterator<PathElem> for LinkedPath<'a> {\n+impl<'a> Iterator for LinkedPath<'a> {\n+    type Item = PathElem;\n+\n     fn next(&mut self) -> Option<PathElem> {\n         match *self {\n             Some(node) => {\n@@ -77,7 +79,9 @@ impl<'a> Iterator<PathElem> for LinkedPath<'a> {\n #[deriving(Clone)]\n pub struct Values<'a, T:'a>(pub slice::Iter<'a, T>);\n \n-impl<'a, T: Copy> Iterator<T> for Values<'a, T> {\n+impl<'a, T: Copy> Iterator for Values<'a, T> {\n+    type Item = T;\n+\n     fn next(&mut self) -> Option<T> {\n         let &Values(ref mut items) = self;\n         items.next().map(|&x| x)\n@@ -87,7 +91,7 @@ impl<'a, T: Copy> Iterator<T> for Values<'a, T> {\n /// The type of the iterator used by with_path.\n pub type PathElems<'a, 'b> = iter::Chain<Values<'a, PathElem>, LinkedPath<'b>>;\n \n-pub fn path_to_string<PI: Iterator<PathElem>>(path: PI) -> String {\n+pub fn path_to_string<PI: Iterator<Item=PathElem>>(path: PI) -> String {\n     let itr = token::get_ident_interner();\n \n     path.fold(String::new(), |mut s, e| {\n@@ -629,7 +633,9 @@ impl<'a, 'ast> NodesMatchingSuffix<'a, 'ast> {\n     }\n }\n \n-impl<'a, 'ast> Iterator<NodeId> for NodesMatchingSuffix<'a, 'ast> {\n+impl<'a, 'ast> Iterator for NodesMatchingSuffix<'a, 'ast> {\n+    type Item = NodeId;\n+\n     fn next(&mut self) -> Option<NodeId> {\n         loop {\n             let idx = self.idx;"}, {"sha": "92818f063416060ff464c668edc14262bdab826c", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=6b19a02080b816d0f416872e63f9b2dd90165c0f", "patch": "@@ -359,7 +359,7 @@ pub enum StabilityLevel {\n \n pub fn find_stability_generic<'a,\n                               AM: AttrMetaMethods,\n-                              I: Iterator<&'a AM>>\n+                              I: Iterator<Item=&'a AM>>\n                              (mut attrs: I)\n                              -> Option<(Stability, &'a AM)> {\n     for attr in attrs {"}, {"sha": "e56194c95cd5b07f5accacf99beff09ae3b99bd4", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6b19a02080b816d0f416872e63f9b2dd90165c0f", "patch": "@@ -220,7 +220,7 @@ pub struct MacItems {\n }\n \n impl MacItems {\n-    pub fn new<I: Iterator<P<ast::Item>>>(it: I) -> Box<MacResult+'static> {\n+    pub fn new<I: Iterator<Item=P<ast::Item>>>(it: I) -> Box<MacResult+'static> {\n         box MacItems { items: it.collect() } as Box<MacResult+'static>\n     }\n }"}, {"sha": "38c26e8967140c7c353b80eb9ef5e5c63adca9cb", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=6b19a02080b816d0f416872e63f9b2dd90165c0f", "patch": "@@ -77,7 +77,7 @@ impl<T: Clone> Clone for OwnedSlice<T> {\n }\n \n impl<T> FromIterator<T> for OwnedSlice<T> {\n-    fn from_iter<I: Iterator<T>>(iter: I) -> OwnedSlice<T> {\n+    fn from_iter<I: Iterator<Item=T>>(iter: I) -> OwnedSlice<T> {\n         OwnedSlice::from_vec(iter.collect())\n     }\n }"}, {"sha": "8598571e5c37a7f41cebe2aeb1942da2a1968387", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=6b19a02080b816d0f416872e63f9b2dd90165c0f", "patch": "@@ -598,7 +598,7 @@ pub fn binary_lit(lit: &str) -> Rc<Vec<u8>> {\n     let error = |&: i| format!(\"lexer should have rejected {} at {}\", lit, i);\n \n     /// Eat everything up to a non-whitespace\n-    fn eat<'a, I: Iterator<(uint, u8)>>(it: &mut iter::Peekable<(uint, u8), I>) {\n+    fn eat<'a, I: Iterator<Item=(uint, u8)>>(it: &mut iter::Peekable<(uint, u8), I>) {\n         loop {\n             match it.peek().map(|x| x.1) {\n                 Some(b' ') | Some(b'\\n') | Some(b'\\r') | Some(b'\\t') => {"}, {"sha": "b68c9926391d70b2808c113e66e39bc0fd400127", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b19a02080b816d0f416872e63f9b2dd90165c0f/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=6b19a02080b816d0f416872e63f9b2dd90165c0f", "patch": "@@ -30,15 +30,15 @@ enum SmallVectorRepr<T> {\n }\n \n impl<T> FromIterator<T> for SmallVector<T> {\n-    fn from_iter<I: Iterator<T>>(iter: I) -> SmallVector<T> {\n+    fn from_iter<I: Iterator<Item=T>>(iter: I) -> SmallVector<T> {\n         let mut v = SmallVector::zero();\n         v.extend(iter);\n         v\n     }\n }\n \n impl<T> Extend<T> for SmallVector<T> {\n-    fn extend<I: Iterator<T>>(&mut self, mut iter: I) {\n+    fn extend<I: Iterator<Item=T>>(&mut self, mut iter: I) {\n         for val in iter {\n             self.push(val);\n         }\n@@ -147,7 +147,9 @@ enum IntoIterRepr<T> {\n     ManyIterator(vec::IntoIter<T>),\n }\n \n-impl<T> Iterator<T> for IntoIter<T> {\n+impl<T> Iterator for IntoIter<T> {\n+    type Item = T;\n+\n     fn next(&mut self) -> Option<T> {\n         match self.repr {\n             ZeroIterator => None,"}]}