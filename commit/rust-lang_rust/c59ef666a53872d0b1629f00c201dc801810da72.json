{"sha": "c59ef666a53872d0b1629f00c201dc801810da72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1OWVmNjY2YTUzODcyZDBiMTYyOWYwMGMyMDFkYzgwMTgxMGRhNzI=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-09-23T23:23:27Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-09-26T00:46:03Z"}, "message": "Add tests for new _mut variants", "tree": {"sha": "07e7d9504caa04cb1a8b90daed41ed917934bfb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e7d9504caa04cb1a8b90daed41ed917934bfb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c59ef666a53872d0b1629f00c201dc801810da72", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c59ef666a53872d0b1629f00c201dc801810da72", "html_url": "https://github.com/rust-lang/rust/commit/c59ef666a53872d0b1629f00c201dc801810da72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c59ef666a53872d0b1629f00c201dc801810da72/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af3cfcc9eac7adf86488b0ab9aa56e2761dc33d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/af3cfcc9eac7adf86488b0ab9aa56e2761dc33d6", "html_url": "https://github.com/rust-lang/rust/commit/af3cfcc9eac7adf86488b0ab9aa56e2761dc33d6"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "87e07b7b1b66fad545d2d3d7c9ca7fd9f25e8eac", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c59ef666a53872d0b1629f00c201dc801810da72/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59ef666a53872d0b1629f00c201dc801810da72/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=c59ef666a53872d0b1629f00c201dc801810da72", "patch": "@@ -844,6 +844,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_append() {\n         {\n             let mut m = DList::new();"}, {"sha": "45489bbf84eb4059f93649e6194b24b7de620dc6", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 80, "deletions": 4, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c59ef666a53872d0b1629f00c201dc801810da72/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c59ef666a53872d0b1629f00c201dc801810da72/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=c59ef666a53872d0b1629f00c201dc801810da72", "patch": "@@ -850,6 +850,16 @@ mod tests {\n         assert_eq!(a.as_slice().head().unwrap(), &11);\n     }\n \n+    #[test]\n+    fn test_head_mut() {\n+        let mut a = vec![];\n+        assert_eq!(a.as_mut_slice().head_mut(), None);\n+        a = vec![11i];\n+        assert_eq!(*a.as_mut_slice().head_mut().unwrap(), 11);\n+        a = vec![11i, 12];\n+        assert_eq!(*a.as_mut_slice().head_mut().unwrap(), 11);\n+    }\n+\n     #[test]\n     fn test_tail() {\n         let mut a = vec![11i];\n@@ -860,22 +870,39 @@ mod tests {\n         assert_eq!(a.tail(), b);\n     }\n \n+    #[test]\n+    fn test_tail_mut() {\n+        let mut a = vec![11i];\n+        let b: &mut [int] = &mut [];\n+        assert!(a.as_mut_slice().tail_mut() == b);\n+        a = vec![11i, 12];\n+        let b: &mut [int] = &mut [12];\n+        assert!(a.as_mut_slice().tail_mut() == b);\n+    }\n+\n     #[test]\n     #[should_fail]\n     fn test_tail_empty() {\n         let a: Vec<int> = vec![];\n         a.tail();\n     }\n \n+    #[test]\n+    #[should_fail]\n+    fn test_tail_mut_empty() {\n+        let mut a: Vec<int> = vec![];\n+        a.as_mut_slice().tail_mut();\n+    }\n+\n     #[test]\n     #[allow(deprecated)]\n     fn test_tailn() {\n         let mut a = vec![11i, 12, 13];\n-        let b: &[int] = &[11, 12, 13];\n-        assert_eq!(a.tailn(0), b);\n+        let b: &mut [int] = &mut [11, 12, 13];\n+        assert!(a.tailn(0) == b);\n         a = vec![11i, 12, 13];\n-        let b: &[int] = &[13];\n-        assert_eq!(a.tailn(2), b);\n+        let b: &mut [int] = &mut [13];\n+        assert!(a.tailn(2) == b);\n     }\n \n     #[test]\n@@ -896,13 +923,30 @@ mod tests {\n         assert_eq!(a.init(), b);\n     }\n \n+    #[test]\n+    fn test_init_mut() {\n+        let mut a = vec![11i];\n+        let b: &mut [int] = &mut [];\n+        assert!(a.as_mut_slice().init_mut() == b);\n+        a = vec![11i, 12];\n+        let b: &mut [int] = &mut [11];\n+        assert!(a.as_mut_slice().init_mut() == b);\n+    }\n+\n     #[test]\n     #[should_fail]\n     fn test_init_empty() {\n         let a: Vec<int> = vec![];\n         a.init();\n     }\n \n+    #[test]\n+    #[should_fail]\n+    fn test_init_mut_empty() {\n+        let mut a: Vec<int> = vec![];\n+        a.as_mut_slice().init_mut();\n+    }\n+\n     #[test]\n     #[allow(deprecated)]\n     fn test_initn() {\n@@ -932,6 +976,16 @@ mod tests {\n         assert_eq!(a.as_slice().last().unwrap(), &12);\n     }\n \n+    #[test]\n+    fn test_last_mut() {\n+        let mut a = vec![];\n+        assert_eq!(a.as_mut_slice().last_mut(), None);\n+        a = vec![11i];\n+        assert_eq!(*a.as_mut_slice().last_mut().unwrap(), 11);\n+        a = vec![11i, 12];\n+        assert_eq!(*a.as_mut_slice().last_mut().unwrap(), 12);\n+    }\n+\n     #[test]\n     fn test_slice() {\n         // Test fixed length vector.\n@@ -1077,6 +1131,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_grow_set() {\n         let mut v = vec![1i, 2, 3];\n         v.grow_set(4u, &4, 5);\n@@ -1610,6 +1665,7 @@ mod tests {\n \n     #[test]\n     #[should_fail]\n+    #[allow(deprecated)]\n     fn test_copy_memory_oob() {\n         unsafe {\n             let mut a = [1i, 2, 3, 4];\n@@ -1793,6 +1849,26 @@ mod tests {\n         assert_eq!(xs.splitn(1, |x| *x == 5).collect::<Vec<&[int]>>().as_slice(), splits);\n     }\n \n+    #[test]\n+    fn test_splitnator_mut() {\n+        let xs = &mut [1i,2,3,4,5];\n+\n+        let splits: &[&mut [int]] = &[&mut [1,2,3,4,5]];\n+        assert_eq!(xs.splitn_mut(0, |x| *x % 2 == 0).collect::<Vec<&mut [int]>>().as_slice(),\n+                   splits);\n+        let splits: &[&mut [int]] = &[&mut [1], &mut [3,4,5]];\n+        assert_eq!(xs.splitn_mut(1, |x| *x % 2 == 0).collect::<Vec<&mut [int]>>().as_slice(),\n+                   splits);\n+        let splits: &[&mut [int]] = &[&mut [], &mut [], &mut [], &mut [4,5]];\n+        assert_eq!(xs.splitn_mut(3, |_| true).collect::<Vec<&mut [int]>>().as_slice(),\n+                   splits);\n+\n+        let xs: &mut [int] = &mut [];\n+        let splits: &[&mut [int]] = &[&mut []];\n+        assert_eq!(xs.splitn_mut(1, |x| *x == 5).collect::<Vec<&mut [int]>>().as_slice(),\n+                   splits);\n+    }\n+\n     #[test]\n     fn test_rsplitator() {\n         let xs = &[1i,2,3,4,5];"}]}