{"sha": "047275a68266033b2d7646e5380d8491ec550677", "node_id": "C_kwDOAAsO6NoAKDA0NzI3NWE2ODI2NjAzM2IyZDc2NDZlNTM4MGQ4NDkxZWM1NTA2Nzc", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2021-12-26T15:47:08Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2021-12-26T15:56:34Z"}, "message": "Add Attribute::meta_kind", "tree": {"sha": "a1476344223e8db5940eec42afa1f9523017fe5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1476344223e8db5940eec42afa1f9523017fe5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/047275a68266033b2d7646e5380d8491ec550677", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEg8FrwI85f934CWFa28VT5UDC9hkFAmHIkLIACgkQ28VT5UDC\n9hnBhAwAqaIuwfzfAkVBmrnq+wSXcqu4ECcKhDCeQOgzgaMQZsc1HEj7TjknhR2z\nLd+R7T6N7uu+xTQMa3QbyZViTpEUsj96SbnyFFiYKapy0vH3j9jaH5+uTwpgbP50\n3FSq/ISKLOmRumT4OwlUkYTrCwcULnQ4UeG3UtqVPvavKApb49zStuiv8RMVvwSi\nBeF/R0/mL9IA3NyPcOAvIqdvYAhNVGD2RynaYNFAV+JihJwUGQen5kd/7sgmkRSk\nb72McKv+1gV/1/kXSlaQRsHIgFpMvK9uuX1PqsbhTIWxcJXg0TzvkJTqK+ubVfKz\nzQtyAxKtpLaS5CSynQNLd9RjglGd34URNa6/kufpLX5zoL789TESct9BGpc8rU7w\nMfY/O+VqMmfUUdrsLxwOVfJq5iEeKq2395Fyc+ovDnSGNIp6NzZA5YxRCkMc83aJ\nKjwTUrD/fPJ1vKPSYsLL1mCDUD/YONs/z/DOsCeQT62ejuGvCtnznvvzhvtl1iF0\n1FwZCv0L\n=VlH9\n-----END PGP SIGNATURE-----", "payload": "tree a1476344223e8db5940eec42afa1f9523017fe5a\nparent f8abed9ed48bace6be0087bcd44ed534e239b8d8\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1640533628 +0100\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1640534194 +0100\n\nAdd Attribute::meta_kind\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/047275a68266033b2d7646e5380d8491ec550677", "html_url": "https://github.com/rust-lang/rust/commit/047275a68266033b2d7646e5380d8491ec550677", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/047275a68266033b2d7646e5380d8491ec550677/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8abed9ed48bace6be0087bcd44ed534e239b8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8abed9ed48bace6be0087bcd44ed534e239b8d8", "html_url": "https://github.com/rust-lang/rust/commit/f8abed9ed48bace6be0087bcd44ed534e239b8d8"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "d66774040f782955855f71cc98d5e33f3f12f453", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/047275a68266033b2d7646e5380d8491ec550677/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047275a68266033b2d7646e5380d8491ec550677/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=047275a68266033b2d7646e5380d8491ec550677", "patch": "@@ -136,15 +136,15 @@ impl Attribute {\n \n     pub fn value_str(&self) -> Option<Symbol> {\n         match self.kind {\n-            AttrKind::Normal(ref item, _) => item.meta(self.span).and_then(|meta| meta.value_str()),\n+            AttrKind::Normal(ref item, _) => item.meta_kind().and_then(|kind| kind.value_str()),\n             AttrKind::DocComment(..) => None,\n         }\n     }\n \n     pub fn meta_item_list(&self) -> Option<Vec<NestedMetaItem>> {\n         match self.kind {\n-            AttrKind::Normal(ref item, _) => match item.meta(self.span) {\n-                Some(MetaItem { kind: MetaItemKind::List(list), .. }) => Some(list),\n+            AttrKind::Normal(ref item, _) => match item.meta_kind() {\n+                Some(MetaItemKind::List(list)) => Some(list),\n                 _ => None,\n             },\n             AttrKind::DocComment(..) => None,\n@@ -228,6 +228,10 @@ impl AttrItem {\n             span,\n         })\n     }\n+\n+    pub fn meta_kind(&self) -> Option<MetaItemKind> {\n+        Some(MetaItemKind::from_mac_args(&self.args)?)\n+    }\n }\n \n impl Attribute {\n@@ -242,7 +246,7 @@ impl Attribute {\n         match self.kind {\n             AttrKind::DocComment(.., data) => Some(data),\n             AttrKind::Normal(ref item, _) if item.path == sym::doc => {\n-                item.meta(self.span).and_then(|meta| meta.value_str())\n+                item.meta_kind().and_then(|kind| kind.value_str())\n             }\n             _ => None,\n         }\n@@ -270,6 +274,13 @@ impl Attribute {\n         }\n     }\n \n+    pub fn meta_kind(&self) -> Option<MetaItemKind> {\n+        match self.kind {\n+            AttrKind::Normal(ref item, _) => item.meta_kind(),\n+            AttrKind::DocComment(..) => None,\n+        }\n+    }\n+\n     pub fn tokens(&self) -> AttrAnnotatedTokenStream {\n         match self.kind {\n             AttrKind::Normal(_, ref tokens) => tokens\n@@ -436,6 +447,16 @@ impl MetaItem {\n }\n \n impl MetaItemKind {\n+    pub fn value_str(&self) -> Option<Symbol> {\n+        match self {\n+            MetaItemKind::NameValue(ref v) => match v.kind {\n+                LitKind::Str(ref s, _) => Some(*s),\n+                _ => None,\n+            },\n+            _ => None,\n+        }\n+    }\n+\n     pub fn mac_args(&self, span: Span) -> MacArgs {\n         match self {\n             MetaItemKind::Word => MacArgs::Empty,"}, {"sha": "cb51555f5cadfabe109ddb2be9ae9a37a39aec75", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/047275a68266033b2d7646e5380d8491ec550677/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047275a68266033b2d7646e5380d8491ec550677/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=047275a68266033b2d7646e5380d8491ec550677", "patch": "@@ -484,7 +484,7 @@ pub(crate) fn check_attr_crate_type(\n                     return;\n                 }\n \n-                if let ast::MetaItemKind::NameValue(spanned) = a.meta().unwrap().kind {\n+                if let ast::MetaItemKind::NameValue(spanned) = a.meta_kind().unwrap() {\n                     let span = spanned.span;\n                     let lev_candidate = find_best_match_for_name(\n                         &CRATE_TYPES.iter().map(|(k, _)| *k).collect::<Vec<_>>(),"}, {"sha": "40d12c4a22dd37d1ed085ffd82e2ee9b0207b997", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/047275a68266033b2d7646e5380d8491ec550677/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047275a68266033b2d7646e5380d8491ec550677/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=047275a68266033b2d7646e5380d8491ec550677", "patch": "@@ -4,7 +4,7 @@\n // and `#[unstable (..)]`), but are not declared in one single location\n // (unlike lang features), which means we need to collect them instead.\n \n-use rustc_ast::{Attribute, MetaItem, MetaItemKind};\n+use rustc_ast::{Attribute, MetaItemKind};\n use rustc_errors::struct_span_err;\n use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n use rustc_middle::hir::map::Map;\n@@ -34,8 +34,8 @@ impl<'tcx> LibFeatureCollector<'tcx> {\n         // Find a stability attribute (i.e., `#[stable (..)]`, `#[unstable (..)]`,\n         // `#[rustc_const_unstable (..)]`).\n         if let Some(stab_attr) = stab_attrs.iter().find(|stab_attr| attr.has_name(**stab_attr)) {\n-            let meta_item = attr.meta();\n-            if let Some(MetaItem { kind: MetaItemKind::List(ref metas), .. }) = meta_item {\n+            let meta_kind = attr.meta_kind();\n+            if let Some(MetaItemKind::List(ref metas)) = meta_kind {\n                 let mut feature = None;\n                 let mut since = None;\n                 for meta in metas {"}, {"sha": "2fb5590016ef88514547d39fe3b27c9f473e7360", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/047275a68266033b2d7646e5380d8491ec550677/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/047275a68266033b2d7646e5380d8491ec550677/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=047275a68266033b2d7646e5380d8491ec550677", "patch": "@@ -2894,7 +2894,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                 }\n             }\n         } else if attr.has_name(sym::instruction_set) {\n-            codegen_fn_attrs.instruction_set = match attr.meta().map(|i| i.kind) {\n+            codegen_fn_attrs.instruction_set = match attr.meta_kind() {\n                 Some(MetaItemKind::List(ref items)) => match items.as_slice() {\n                     [NestedMetaItem::MetaItem(set)] => {\n                         let segments =\n@@ -2999,7 +2999,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         if !attr.has_name(sym::inline) {\n             return ia;\n         }\n-        match attr.meta().map(|i| i.kind) {\n+        match attr.meta_kind() {\n             Some(MetaItemKind::Word) => InlineAttr::Hint,\n             Some(MetaItemKind::List(ref items)) => {\n                 inline_span = Some(attr.span);\n@@ -3038,7 +3038,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n             return ia;\n         }\n         let err = |sp, s| struct_span_err!(tcx.sess.diagnostic(), sp, E0722, \"{}\", s).emit();\n-        match attr.meta().map(|i| i.kind) {\n+        match attr.meta_kind() {\n             Some(MetaItemKind::Word) => {\n                 err(attr.span, \"expected one argument\");\n                 ia"}]}