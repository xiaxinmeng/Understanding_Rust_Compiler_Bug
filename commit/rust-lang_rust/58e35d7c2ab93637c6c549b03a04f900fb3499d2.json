{"sha": "58e35d7c2ab93637c6c549b03a04f900fb3499d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZTM1ZDdjMmFiOTM2MzdjNmM1NDliMDNhMDRmOTAwZmIzNDk5ZDI=", "commit": {"author": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2015-08-04T06:14:32Z"}, "committer": {"name": "Victor Berger", "email": "victor.berger@m4x.org", "date": "2015-08-04T06:14:32Z"}, "message": "Addressing nits & tests explanations.", "tree": {"sha": "e57200ef0f7fac18643a803576d16ab4dce6436f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57200ef0f7fac18643a803576d16ab4dce6436f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e35d7c2ab93637c6c549b03a04f900fb3499d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e35d7c2ab93637c6c549b03a04f900fb3499d2", "html_url": "https://github.com/rust-lang/rust/commit/58e35d7c2ab93637c6c549b03a04f900fb3499d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e35d7c2ab93637c6c549b03a04f900fb3499d2/comments", "author": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "elinorbgr", "id": 3009227, "node_id": "MDQ6VXNlcjMwMDkyMjc=", "avatar_url": "https://avatars.githubusercontent.com/u/3009227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/elinorbgr", "html_url": "https://github.com/elinorbgr", "followers_url": "https://api.github.com/users/elinorbgr/followers", "following_url": "https://api.github.com/users/elinorbgr/following{/other_user}", "gists_url": "https://api.github.com/users/elinorbgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/elinorbgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/elinorbgr/subscriptions", "organizations_url": "https://api.github.com/users/elinorbgr/orgs", "repos_url": "https://api.github.com/users/elinorbgr/repos", "events_url": "https://api.github.com/users/elinorbgr/events{/privacy}", "received_events_url": "https://api.github.com/users/elinorbgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f9f509a09fadf96a85b0c4b68a13b9b8ef6dfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f9f509a09fadf96a85b0c4b68a13b9b8ef6dfb", "html_url": "https://github.com/rust-lang/rust/commit/f9f9f509a09fadf96a85b0c4b68a13b9b8ef6dfb"}], "stats": {"total": 51, "additions": 34, "deletions": 17}, "files": [{"sha": "412643ba9454642ae422eee7865fcffcdb9695c3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/58e35d7c2ab93637c6c549b03a04f900fb3499d2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e35d7c2ab93637c6c549b03a04f900fb3499d2/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=58e35d7c2ab93637c6c549b03a04f900fb3499d2", "patch": "@@ -184,6 +184,11 @@ impl ImportResolution {\n     }\n }\n \n+struct ImportResolvingError {\n+    span: Span,\n+    path: String,\n+    help: String,\n+}\n \n struct ImportResolver<'a, 'b:'a, 'tcx:'b> {\n     resolver: &'a mut Resolver<'b, 'tcx>\n@@ -218,16 +223,16 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             if self.resolver.unresolved_imports == prev_unresolved_imports {\n                 // resolving failed\n                 if errors.len() > 0 {\n-                    for (span, path, help) in errors {\n+                    for e in errors {\n                         resolve_error(self.resolver,\n-                                      span,\n-                                      ResolutionError::UnresolvedImport(Some((&*path, &*help))));\n+                                      e.span,\n+                                      ResolutionError::UnresolvedImport(Some((&e.path, &e.help))));\n                     }\n                 } else {\n-                    // report unresolved imports only if no hard error was already reported\n-                    // to avoid generating multiple errors on the same import\n-                    // imports that are still undeterminate at this point are actually blocked\n-                    // by errored imports, so there is no point reporting them\n+                    // Report unresolved imports only if no hard error was already reported\n+                    // to avoid generating multiple errors on the same import.\n+                    // Imports that are still indeterminate at this point are actually blocked\n+                    // by errored imports, so there is no point reporting them.\n                     self.resolver.report_unresolved_imports(module_root);\n                 }\n                 break;\n@@ -241,7 +246,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     /// Attempts to resolve imports for the given module and all of its\n     /// submodules.\n     fn resolve_imports_for_module_subtree(&mut self, module_: Rc<Module>)\n-                                          -> Vec<(Span, String, String)> {\n+                                          -> Vec<ImportResolvingError> {\n         let mut errors = Vec::new();\n         debug!(\"(resolving imports for module subtree) resolving {}\",\n                module_to_string(&*module_));\n@@ -269,7 +274,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n     }\n \n     /// Attempts to resolve imports for the given module only.\n-    fn resolve_imports_for_module(&mut self, module: Rc<Module>) -> Vec<(Span, String, String)> {\n+    fn resolve_imports_for_module(&mut self, module: Rc<Module>) -> Vec<ImportResolvingError> {\n         let mut errors = Vec::new();\n \n         if module.all_imports_resolved() {\n@@ -292,12 +297,14 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         Some((span, msg)) => (span, format!(\". {}\", msg)),\n                         None => (import_directive.span, String::new())\n                     };\n-                    errors.push((span,\n-                                 import_path_to_string(\n-                                    &import_directive.module_path,\n-                                    import_directive.subclass\n-                                 ),\n-                                 help))\n+                    errors.push(ImportResolvingError {\n+                                    span: span,\n+                                    path: import_path_to_string(\n+                                            &import_directive.module_path,\n+                                            import_directive.subclass\n+                                         ),\n+                                    help: help\n+                                });\n                 }\n                 ResolveResult::Indeterminate => {}\n                 ResolveResult::Success(()) => {"}, {"sha": "a7949e7d6e3b15dfd469f2bbcc28532cb968a76c", "filename": "src/test/run-pass/import-glob-1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58e35d7c2ab93637c6c549b03a04f900fb3499d2/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e35d7c2ab93637c6c549b03a04f900fb3499d2/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-1.rs?ref=58e35d7c2ab93637c6c549b03a04f900fb3499d2", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_imports, dead_code)]\n+// This should resolve fine. Prior to fix, the last import\n+// was being tried too early, and marked as unrsolved before\n+// the glob import had a chance to be resolved.\n \n mod bar {\n     pub use self::middle::*;"}, {"sha": "ff26e186db3934fef8d96e15f556b189e34356c6", "filename": "src/test/run-pass/issue-18083.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58e35d7c2ab93637c6c549b03a04f900fb3499d2/src%2Ftest%2Frun-pass%2Fissue-18083.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e35d7c2ab93637c6c549b03a04f900fb3499d2/src%2Ftest%2Frun-pass%2Fissue-18083.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18083.rs?ref=58e35d7c2ab93637c6c549b03a04f900fb3499d2", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// These crossed imports should resolve fine, and not block on\n+// each other and be reported as unresolved.\n+\n mod a {\n     use b::{B};\n     pub use self::inner::A;"}, {"sha": "3c4777951302e17657ed0a2f6547dac7b76affc2", "filename": "src/test/run-pass/issue-4865-1.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/58e35d7c2ab93637c6c549b03a04f900fb3499d2/src%2Ftest%2Frun-pass%2Fissue-4865-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e35d7c2ab93637c6c549b03a04f900fb3499d2/src%2Ftest%2Frun-pass%2Fissue-4865-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4865-1.rs?ref=58e35d7c2ab93637c6c549b03a04f900fb3499d2", "patch": "@@ -8,6 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// This should resolve fine.\n+// Prior to fix, the crossed imports between a and b\n+// would block on the glob import, itself never being resolved\n+// because these previous imports were not resolved.\n+\n pub mod a {\n     use b::fn_b;\n     use c::*;"}]}