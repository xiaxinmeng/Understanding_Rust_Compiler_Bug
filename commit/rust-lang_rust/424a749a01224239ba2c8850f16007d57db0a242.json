{"sha": "424a749a01224239ba2c8850f16007d57db0a242", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNGE3NDlhMDEyMjQyMzliYTJjODg1MGYxNjAwN2Q1N2RiMGEyNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-21T20:07:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-21T20:07:34Z"}, "message": "Auto merge of #55179 - bjorn3:miri_public_op_field, r=RalfJung\n\nGive OpTy access to locals for priroda\n\nr? @oli-obk", "tree": {"sha": "d36283d66103cf720bb86339ced938e6a2cd54d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d36283d66103cf720bb86339ced938e6a2cd54d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/424a749a01224239ba2c8850f16007d57db0a242", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/424a749a01224239ba2c8850f16007d57db0a242", "html_url": "https://github.com/rust-lang/rust/commit/424a749a01224239ba2c8850f16007d57db0a242", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/424a749a01224239ba2c8850f16007d57db0a242/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12a88a6b098ce24038beb4857f3bba7ebe078c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/12a88a6b098ce24038beb4857f3bba7ebe078c6b", "html_url": "https://github.com/rust-lang/rust/commit/12a88a6b098ce24038beb4857f3bba7ebe078c6b"}, {"sha": "b178553e555bd3634005878bcd90e2f8295289f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b178553e555bd3634005878bcd90e2f8295289f6", "html_url": "https://github.com/rust-lang/rust/commit/b178553e555bd3634005878bcd90e2f8295289f6"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "189388921650cd4e6a7ef71daa696511a2a2945c", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=424a749a01224239ba2c8850f16007d57db0a242", "patch": "@@ -324,14 +324,11 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n \n     pub fn layout_of_local(\n         &self,\n-        frame: usize,\n+        frame: &Frame<'mir, 'tcx, M::PointerTag>,\n         local: mir::Local\n     ) -> EvalResult<'tcx, TyLayout<'tcx>> {\n-        let local_ty = self.stack[frame].mir.local_decls[local].ty;\n-        let local_ty = self.monomorphize(\n-            local_ty,\n-            self.stack[frame].instance.substs\n-        );\n+        let local_ty = frame.mir.local_decls[local].ty;\n+        let local_ty = self.monomorphize(local_ty, frame.instance.substs);\n         self.layout_of(local_ty)\n     }\n \n@@ -579,7 +576,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         assert!(local != mir::RETURN_PLACE, \"Cannot make return place live\");\n         trace!(\"{:?} is now live\", local);\n \n-        let layout = self.layout_of_local(self.cur_frame(), local)?;\n+        let layout = self.layout_of_local(self.frame(), local)?;\n         let init = LocalValue::Live(self.uninit_operand(layout)?);\n         // StorageLive *always* kills the value that's currently stored\n         Ok(mem::replace(&mut self.frame_mut().locals[local], init))\n@@ -733,4 +730,3 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         truncate(value, ty.size)\n     }\n }\n-"}, {"sha": "9adca6c429798b75ebf8ef9a23a88548edca95be", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=424a749a01224239ba2c8850f16007d57db0a242", "patch": "@@ -603,6 +603,11 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         self.dump_allocs(leaks);\n         n\n     }\n+\n+    /// This is used by [priroda](https://github.com/oli-obk/priroda)\n+    pub fn alloc_map(&self) -> &M::MemoryMap {\n+        &self.alloc_map\n+    }\n }\n \n /// Byte accessors"}, {"sha": "71b2f4b53a60c4df84a82e78d6a752862a2b6dcc", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=424a749a01224239ba2c8850f16007d57db0a242", "patch": "@@ -571,6 +571,22 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         })\n     }\n \n+    /// This is used by [priroda](https://github.com/oli-obk/priroda) to get an OpTy from a local\n+    ///\n+    /// When you know the layout of the local in advance, you can pass it as last argument\n+    pub fn access_local(\n+        &self,\n+        frame: &super::Frame<'mir, 'tcx, M::PointerTag>,\n+        local: mir::Local,\n+        layout: Option<TyLayout<'tcx>>,\n+    ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        assert_ne!(local, mir::RETURN_PLACE);\n+        let op = *frame.locals[local].access()?;\n+        let layout = from_known_layout(layout,\n+                    || self.layout_of_local(frame, local))?;\n+        Ok(OpTy { op, layout })\n+    }\n+\n     // Evaluate a place with the goal of reading from it.  This lets us sometimes\n     // avoid allocations.  If you already know the layout, you can pass it in\n     // to avoid looking it up again.\n@@ -582,12 +598,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         use rustc::mir::Place::*;\n         let op = match *mir_place {\n             Local(mir::RETURN_PLACE) => return err!(ReadFromReturnPointer),\n-            Local(local) => {\n-                let op = *self.frame().locals[local].access()?;\n-                let layout = from_known_layout(layout,\n-                    || self.layout_of_local(self.cur_frame(), local))?;\n-                OpTy { op, layout }\n-            },\n+            Local(local) => self.access_local(self.frame(), local, layout)?,\n \n             Projection(ref proj) => {\n                 let op = self.eval_place_to_op(&proj.base, None)?;"}, {"sha": "a4bb15662d8b272996e1ce69e50116967d9d6a57", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=424a749a01224239ba2c8850f16007d57db0a242", "patch": "@@ -588,7 +588,7 @@ where\n                     // their layout on return.\n                     PlaceTy {\n                         place: *return_place,\n-                        layout: self.layout_of_local(self.cur_frame(), mir::RETURN_PLACE)?,\n+                        layout: self.layout_of_local(self.frame(), mir::RETURN_PLACE)?,\n                     },\n                 None => return err!(InvalidNullPointerUsage),\n             },\n@@ -597,7 +597,7 @@ where\n                     frame: self.cur_frame(),\n                     local,\n                 },\n-                layout: self.layout_of_local(self.cur_frame(), local)?,\n+                layout: self.layout_of_local(self.frame(), local)?,\n             },\n \n             Projection(ref proj) => {\n@@ -856,7 +856,7 @@ where\n                         // We need the layout of the local.  We can NOT use the layout we got,\n                         // that might e.g. be an inner field of a struct with `Scalar` layout,\n                         // that has different alignment than the outer field.\n-                        let local_layout = self.layout_of_local(frame, local)?;\n+                        let local_layout = self.layout_of_local(&self.stack[frame], local)?;\n                         let ptr = self.allocate(local_layout, MemoryKind::Stack)?;\n                         // We don't have to validate as we can assume the local\n                         // was already valid for its type."}, {"sha": "faeeb24c6c267604d35acaef973b485f7530d5c7", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/424a749a01224239ba2c8850f16007d57db0a242/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=424a749a01224239ba2c8850f16007d57db0a242", "patch": "@@ -310,7 +310,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         mir.spread_arg,\n                         mir.args_iter()\n                             .map(|local|\n-                                (local, self.layout_of_local(self.cur_frame(), local).unwrap().ty)\n+                                (local, self.layout_of_local(self.frame(), local).unwrap().ty)\n                             )\n                             .collect::<Vec<_>>()\n                     );\n@@ -380,7 +380,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                         }\n                     } else {\n                         let callee_layout =\n-                            self.layout_of_local(self.cur_frame(), mir::RETURN_PLACE)?;\n+                            self.layout_of_local(self.frame(), mir::RETURN_PLACE)?;\n                         if !callee_layout.abi.is_uninhabited() {\n                             return err!(FunctionRetMismatch(\n                                 self.tcx.types.never, callee_layout.ty"}]}