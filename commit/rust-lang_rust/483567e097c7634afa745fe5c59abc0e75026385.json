{"sha": "483567e097c7634afa745fe5c59abc0e75026385", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4MzU2N2UwOTdjNzYzNGFmYTc0NWZlNWM1OWFiYzBlNzUwMjYzODU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-25T22:42:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-05-25T22:42:12Z"}, "message": "Auto merge of #56595 - ljedrz:x_py_clippy_fix, r=oli-obk\n\nAdd clippy and fix commands to x.py\n\nSince they are kind of similar in nature, I have used the same approach as for `cargo check`. At least some of the boilerplate could probably be shared, but I'd prefer to gather some feedback before I decide to merge them more aggressively.\n\nThis works reasonably well for `clippy`; with `-A clippy::all` and some extra `#![feature(rustc_private)]`s almost the whole codebase can be processed. There are some concerns, though:\n- unlike `check`, in order to be able to traverse all the crates, some of them need to be marked with the `#![feature(rustc_private)]` attribute\n- `-W clippy::all` breaks on any error. Is there a way to produce errors but not have them break the progress?\n- I'm not sure how to redirect the errors in a way that would show colors; for now I was able to de-jsonize and print them (something not needed for `check`)\n\n`cargo fix` is much more stubborn; it refuses to acknowledge crates like `core` and `std`, so it doesn't progress much at all.\n\nSince this is a bit more tricky than I have envisioned, I need some guidance:\n- is this the right approach or am I doing something very wrong ^^?\n- why are the extra `rustc_private` features necessary? I was hoping for the same treatment as `check`\n- are changes in `clippy` and `cargo fix` needed e.g. in order to produce errors in the same manner as `check` or did I miss something?\n- do we need this level of file granularity (e.g. for futureproofing) or can `check`, `clippy` and `fix` files be condensed?\n\nHopes-to-fix: https://github.com/rust-lang/rust/issues/53896\n\nCc @alexcrichton, @zackmdavis", "tree": {"sha": "27e475c57e92c85cff3578321e1226eef7b138c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27e475c57e92c85cff3578321e1226eef7b138c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/483567e097c7634afa745fe5c59abc0e75026385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/483567e097c7634afa745fe5c59abc0e75026385", "html_url": "https://github.com/rust-lang/rust/commit/483567e097c7634afa745fe5c59abc0e75026385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/483567e097c7634afa745fe5c59abc0e75026385/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f492693982d1e252f5411ae3e4d560ab0dfea48a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f492693982d1e252f5411ae3e4d560ab0dfea48a", "html_url": "https://github.com/rust-lang/rust/commit/f492693982d1e252f5411ae3e4d560ab0dfea48a"}, {"sha": "2f3533b7582c735969e9e2aa32d5845d3b565350", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3533b7582c735969e9e2aa32d5845d3b565350", "html_url": "https://github.com/rust-lang/rust/commit/2f3533b7582c735969e9e2aa32d5845d3b565350"}], "stats": {"total": 122, "additions": 105, "deletions": 17}, "files": [{"sha": "198b7dbc3f9d42cc0fb84da8e7023eaa60973eaa", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=483567e097c7634afa745fe5c59abc0e75026385", "patch": "@@ -318,6 +318,8 @@ impl<'a> ShouldRun<'a> {\n pub enum Kind {\n     Build,\n     Check,\n+    Clippy,\n+    Fix,\n     Test,\n     Bench,\n     Dist,\n@@ -359,7 +361,7 @@ impl<'a> Builder<'a> {\n                 tool::Miri,\n                 native::Lld\n             ),\n-            Kind::Check => describe!(\n+            Kind::Check | Kind::Clippy | Kind::Fix => describe!(\n                 check::Std,\n                 check::Test,\n                 check::Rustc,\n@@ -520,6 +522,8 @@ impl<'a> Builder<'a> {\n         let (kind, paths) = match build.config.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n             Subcommand::Check { ref paths } => (Kind::Check, &paths[..]),\n+            Subcommand::Clippy { ref paths } => (Kind::Clippy, &paths[..]),\n+            Subcommand::Fix { ref paths } => (Kind::Fix, &paths[..]),\n             Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n             Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n             Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n@@ -757,17 +761,17 @@ impl<'a> Builder<'a> {\n         };\n \n         let libstd_stamp = match cmd {\n-            \"check\" => check::libstd_stamp(self, cmp, target),\n+            \"check\" | \"clippy\" | \"fix\" => check::libstd_stamp(self, cmp, target),\n             _ => compile::libstd_stamp(self, cmp, target),\n         };\n \n         let libtest_stamp = match cmd {\n-            \"check\" => check::libtest_stamp(self, cmp, target),\n+            \"check\" | \"clippy\" | \"fix\" => check::libtest_stamp(self, cmp, target),\n             _ => compile::libstd_stamp(self, cmp, target),\n         };\n \n         let librustc_stamp = match cmd {\n-            \"check\" => check::librustc_stamp(self, cmp, target),\n+            \"check\" | \"clippy\" | \"fix\" => check::librustc_stamp(self, cmp, target),\n             _ => compile::librustc_stamp(self, cmp, target),\n         };\n \n@@ -831,9 +835,9 @@ impl<'a> Builder<'a> {\n             assert_eq!(target, compiler.host);\n         }\n \n-        // Set a flag for `check` so that certain build scripts can do less work\n-        // (e.g., not building/requiring LLVM).\n-        if cmd == \"check\" {\n+        // Set a flag for `check`/`clippy`/`fix`, so that certain build\n+        // scripts can do less work (e.g. not building/requiring LLVM).\n+        if cmd == \"check\" || cmd == \"clippy\" || cmd == \"fix\" {\n             cargo.env(\"RUST_CHECK\", \"1\");\n         }\n \n@@ -898,6 +902,11 @@ impl<'a> Builder<'a> {\n             extra_args.push_str(&s);\n         }\n \n+        if cmd == \"clippy\" {\n+            extra_args.push_str(\"-Zforce-unstable-if-unmarked -Zunstable-options \\\n+                --json-rendered=termcolor\");\n+        }\n+\n         if !extra_args.is_empty() {\n             cargo.env(\n                 \"RUSTFLAGS\",\n@@ -966,7 +975,7 @@ impl<'a> Builder<'a> {\n         if let Some(ref error_format) = self.config.rustc_error_format {\n             cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n         }\n-        if cmd != \"build\" && cmd != \"check\" && cmd != \"rustc\" && want_rustdoc {\n+        if !([\"build\", \"check\", \"clippy\", \"fix\", \"rustc\"].contains(&cmd)) && want_rustdoc {\n             cargo.env(\"RUSTDOC_LIBDIR\", self.rustc_libdir(compiler));\n         }\n "}, {"sha": "bdf5306d4b549a70660cd61347db19b90b9a9c9b", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=483567e097c7634afa745fe5c59abc0e75026385", "patch": "@@ -1,8 +1,8 @@\n-//! Implementation of compiling the compiler and standard library, in \"check\" mode.\n+//! Implementation of compiling the compiler and standard library, in \"check\"-based modes.\n \n use crate::compile::{run_cargo, std_cargo, test_cargo, rustc_cargo, rustc_cargo_env,\n                      add_to_sysroot};\n-use crate::builder::{RunConfig, Builder, ShouldRun, Step};\n+use crate::builder::{RunConfig, Builder, Kind, ShouldRun, Step};\n use crate::tool::{prepare_tool_cargo, SourceType};\n use crate::{Compiler, Mode};\n use crate::cache::{INTERNER, Interned};\n@@ -13,6 +13,22 @@ pub struct Std {\n     pub target: Interned<String>,\n }\n \n+fn args(kind: Kind) -> Vec<String> {\n+    match kind {\n+        Kind::Clippy => vec![\"--\".to_owned(), \"--cap-lints\".to_owned(), \"warn\".to_owned()],\n+        _ => Vec::new()\n+    }\n+}\n+\n+fn cargo_subcommand(kind: Kind) -> &'static str {\n+    match kind {\n+        Kind::Check => \"check\",\n+        Kind::Clippy => \"clippy\",\n+        Kind::Fix => \"fix\",\n+        _ => unreachable!()\n+    }\n+}\n+\n impl Step for Std {\n     type Output = ();\n     const DEFAULT: bool = true;\n@@ -31,13 +47,14 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = builder.compiler(0, builder.config.build);\n \n-        let mut cargo = builder.cargo(compiler, Mode::Std, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Std, target, cargo_subcommand(builder.kind));\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-std\", compiler.stage));\n         builder.info(&format!(\"Checking std artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  args(builder.kind),\n                   &libstd_stamp(builder, compiler, target),\n                   true);\n \n@@ -78,13 +95,15 @@ impl Step for Rustc {\n \n         builder.ensure(Test { target });\n \n-        let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Rustc, target,\n+            cargo_subcommand(builder.kind));\n         rustc_cargo(builder, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc\", compiler.stage));\n         builder.info(&format!(\"Checking compiler artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  args(builder.kind),\n                   &librustc_stamp(builder, compiler, target),\n                   true);\n \n@@ -127,7 +146,8 @@ impl Step for CodegenBackend {\n \n         builder.ensure(Rustc { target });\n \n-        let mut cargo = builder.cargo(compiler, Mode::Codegen, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Codegen, target,\n+            cargo_subcommand(builder.kind));\n         cargo.arg(\"--manifest-path\").arg(builder.src.join(\"src/librustc_codegen_llvm/Cargo.toml\"));\n         rustc_cargo_env(builder, &mut cargo);\n \n@@ -136,6 +156,7 @@ impl Step for CodegenBackend {\n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         run_cargo(builder,\n                   &mut cargo,\n+                  args(builder.kind),\n                   &codegen_backend_stamp(builder, compiler, target, backend),\n                   true);\n     }\n@@ -166,13 +187,14 @@ impl Step for Test {\n \n         builder.ensure(Std { target });\n \n-        let mut cargo = builder.cargo(compiler, Mode::Test, target, \"check\");\n+        let mut cargo = builder.cargo(compiler, Mode::Test, target, cargo_subcommand(builder.kind));\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n         let _folder = builder.fold_output(|| format!(\"stage{}-test\", compiler.stage));\n         builder.info(&format!(\"Checking test artifacts ({} -> {})\", &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  args(builder.kind),\n                   &libtest_stamp(builder, compiler, target),\n                   true);\n \n@@ -212,7 +234,7 @@ impl Step for Rustdoc {\n                                            compiler,\n                                            Mode::ToolRustc,\n                                            target,\n-                                           \"check\",\n+                                           cargo_subcommand(builder.kind),\n                                            \"src/tools/rustdoc\",\n                                            SourceType::InTree,\n                                            &[]);\n@@ -221,6 +243,7 @@ impl Step for Rustdoc {\n         println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n         run_cargo(builder,\n                   &mut cargo,\n+                  args(builder.kind),\n                   &rustdoc_stamp(builder, compiler, target),\n                   true);\n "}, {"sha": "50c9602de1b145ccefe013d48373289187d98550", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=483567e097c7634afa745fe5c59abc0e75026385", "patch": "@@ -100,6 +100,7 @@ impl Step for Std {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libstd_stamp(builder, compiler, target),\n                   false);\n \n@@ -425,6 +426,7 @@ impl Step for Test {\n                 &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &libtest_stamp(builder, compiler, target),\n                   false);\n \n@@ -556,6 +558,7 @@ impl Step for Rustc {\n                  compiler.stage, &compiler.host, target));\n         run_cargo(builder,\n                   &mut cargo,\n+                  vec![],\n                   &librustc_stamp(builder, compiler, target),\n                   false);\n \n@@ -707,6 +710,7 @@ impl Step for CodegenBackend {\n         let _folder = builder.fold_output(|| format!(\"stage{}-rustc_codegen_llvm\", compiler.stage));\n         let files = run_cargo(builder,\n                               cargo.arg(\"--features\").arg(features),\n+                              vec![],\n                               &tmp_stamp,\n                               false);\n         if builder.config.dry_run {\n@@ -1077,6 +1081,7 @@ pub fn add_to_sysroot(\n \n pub fn run_cargo(builder: &Builder<'_>,\n                  cargo: &mut Command,\n+                 tail_args: Vec<String>,\n                  stamp: &Path,\n                  is_check: bool)\n     -> Vec<PathBuf>\n@@ -1099,7 +1104,7 @@ pub fn run_cargo(builder: &Builder<'_>,\n     // files we need to probe for later.\n     let mut deps = Vec::new();\n     let mut toplevel = Vec::new();\n-    let ok = stream_cargo(builder, cargo, &mut |msg| {\n+    let ok = stream_cargo(builder, cargo, tail_args, &mut |msg| {\n         let (filenames, crate_types) = match msg {\n             CargoMessage::CompilerArtifact {\n                 filenames,\n@@ -1108,6 +1113,10 @@ pub fn run_cargo(builder: &Builder<'_>,\n                 },\n                 ..\n             } => (filenames, crate_types),\n+            CargoMessage::CompilerMessage { message } => {\n+                eprintln!(\"{}\", message.rendered);\n+                return;\n+            }\n             _ => return,\n         };\n         for filename in filenames {\n@@ -1235,6 +1244,7 @@ pub fn run_cargo(builder: &Builder<'_>,\n pub fn stream_cargo(\n     builder: &Builder<'_>,\n     cargo: &mut Command,\n+    tail_args: Vec<String>,\n     cb: &mut dyn FnMut(CargoMessage<'_>),\n ) -> bool {\n     if builder.config.dry_run {\n@@ -1245,6 +1255,10 @@ pub fn stream_cargo(\n     cargo.arg(\"--message-format\").arg(\"json\")\n          .stdout(Stdio::piped());\n \n+    for arg in tail_args {\n+        cargo.arg(arg);\n+    }\n+\n     builder.verbose(&format!(\"running: {:?}\", cargo));\n     let mut child = match cargo.spawn() {\n         Ok(child) => child,\n@@ -1291,5 +1305,13 @@ pub enum CargoMessage<'a> {\n     },\n     BuildScriptExecuted {\n         package_id: Cow<'a, str>,\n+    },\n+    CompilerMessage {\n+        message: ClippyMessage<'a>\n     }\n }\n+\n+#[derive(Deserialize)]\n+pub struct ClippyMessage<'a> {\n+    rendered: Cow<'a, str>,\n+}"}, {"sha": "4774c0a51c09a15f2a664a85b3a3d3c11d9220a9", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=483567e097c7634afa745fe5c59abc0e75026385", "patch": "@@ -44,6 +44,12 @@ pub enum Subcommand {\n     Check {\n         paths: Vec<PathBuf>,\n     },\n+    Clippy {\n+        paths: Vec<PathBuf>,\n+    },\n+    Fix {\n+        paths: Vec<PathBuf>,\n+    },\n     Doc {\n         paths: Vec<PathBuf>,\n     },\n@@ -90,6 +96,8 @@ Usage: x.py <subcommand> [options] [<paths>...]\n Subcommands:\n     build       Compile either the compiler or libraries\n     check       Compile either the compiler or libraries, using cargo check\n+    clippy      Run clippy\n+    fix         Run cargo fix\n     test        Build and run some test suites\n     bench       Build and run some benchmarks\n     doc         Build documentation\n@@ -146,6 +154,8 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\"\n         let subcommand = args.iter().find(|&s| {\n             (s == \"build\")\n                 || (s == \"check\")\n+                || (s == \"clippy\")\n+                || (s == \"fix\")\n                 || (s == \"test\")\n                 || (s == \"bench\")\n                 || (s == \"doc\")\n@@ -281,6 +291,28 @@ Arguments:\n     the compiler.\",\n                 );\n             }\n+            \"clippy\" => {\n+                subcommand_help.push_str(\n+                    \"\\n\n+Arguments:\n+    This subcommand accepts a number of paths to directories to the crates\n+    and/or artifacts to run clippy against. For example:\n+\n+        ./x.py clippy src/libcore\n+        ./x.py clippy src/libcore src/libproc_macro\",\n+                );\n+            }\n+            \"fix\" => {\n+                subcommand_help.push_str(\n+                    \"\\n\n+Arguments:\n+    This subcommand accepts a number of paths to directories to the crates\n+    and/or artifacts to run `cargo fix` against. For example:\n+\n+        ./x.py fix src/libcore\n+        ./x.py fix src/libcore src/libproc_macro\",\n+                );\n+            }\n             \"test\" => {\n                 subcommand_help.push_str(\n                     \"\\n\n@@ -363,6 +395,8 @@ Arguments:\n         let cmd = match subcommand.as_str() {\n             \"build\" => Subcommand::Build { paths },\n             \"check\" => Subcommand::Check { paths },\n+            \"clippy\" => Subcommand::Clippy { paths },\n+            \"fix\" => Subcommand::Fix { paths },\n             \"test\" => Subcommand::Test {\n                 paths,\n                 bless: matches.opt_present(\"bless\"),"}, {"sha": "68fe92466027a6d6e6bdb056869722c70f5a6889", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483567e097c7634afa745fe5c59abc0e75026385/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=483567e097c7634afa745fe5c59abc0e75026385", "patch": "@@ -77,7 +77,7 @@ impl Step for ToolBuild {\n         let _folder = builder.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n         builder.info(&format!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target));\n         let mut duplicates = Vec::new();\n-        let is_expected = compile::stream_cargo(builder, &mut cargo, &mut |msg| {\n+        let is_expected = compile::stream_cargo(builder, &mut cargo, vec![], &mut |msg| {\n             // Only care about big things like the RLS/Cargo for now\n             match tool {\n                 | \"rls\""}]}