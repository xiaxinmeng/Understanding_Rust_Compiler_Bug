{"sha": "de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "node_id": "C_kwDOAAsO6NoAKGRlNWM2ZDZiMWVkNTAyNDZjZjNkNWM5M2I4ZDZlMGI0NjdkZmJkZGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T14:01:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T14:01:08Z"}, "message": "Auto merge of #10594 - J-ZhengLi:issue9824, r=Jarcho\n\nfix [`mem_replace_option_with_none`] not considering field variables\n\nfixes: #9824\n\n---\n\nchangelog: fix [`mem_replace_option_with_none`] not considering field variables", "tree": {"sha": "ebd203784ddc9d344c90517aab18b72837408917", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebd203784ddc9d344c90517aab18b72837408917"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "html_url": "https://github.com/rust-lang/rust/commit/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8", "html_url": "https://github.com/rust-lang/rust/commit/2b05f794e7d6c2d2edf2df107f94e23bafdeb1e8"}, {"sha": "008e07d4e8e434933e1ba25a5c324a3a9d46dd7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/008e07d4e8e434933e1ba25a5c324a3a9d46dd7b", "html_url": "https://github.com/rust-lang/rust/commit/008e07d4e8e434933e1ba25a5c324a3a9d46dd7b"}], "stats": {"total": 165, "additions": 121, "deletions": 44}, "files": [{"sha": "8a921d4af1655a42dc14ba2d7685745b3e4e62a7", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 28, "deletions": 43, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "patch": "@@ -1,12 +1,13 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::msrvs::{self, Msrv};\n use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_non_aggregate_primitive_type;\n-use clippy_utils::{is_default_equivalent, is_res_lang_ctor, path_res};\n+use clippy_utils::{is_default_equivalent, is_res_lang_ctor, path_res, peel_ref_operators};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::LangItem::OptionNone;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n+use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -101,40 +102,26 @@ declare_clippy_lint! {\n impl_lint_pass!(MemReplace =>\n     [MEM_REPLACE_OPTION_WITH_NONE, MEM_REPLACE_WITH_UNINIT, MEM_REPLACE_WITH_DEFAULT]);\n \n-fn check_replace_option_with_none(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n-    // Check that second argument is `Option::None`\n-    if is_res_lang_ctor(cx, path_res(cx, src), OptionNone) {\n-        // Since this is a late pass (already type-checked),\n-        // and we already know that the second argument is an\n-        // `Option`, we do not need to check the first\n-        // argument's type. All that's left is to get\n-        // replacee's path.\n-        let replaced_path = match dest.kind {\n-            ExprKind::AddrOf(BorrowKind::Ref, Mutability::Mut, replaced) => {\n-                if let ExprKind::Path(QPath::Resolved(None, replaced_path)) = replaced.kind {\n-                    replaced_path\n-                } else {\n-                    return;\n-                }\n-            },\n-            ExprKind::Path(QPath::Resolved(None, replaced_path)) => replaced_path,\n-            _ => return,\n-        };\n-\n-        let mut applicability = Applicability::MachineApplicable;\n-        span_lint_and_sugg(\n-            cx,\n-            MEM_REPLACE_OPTION_WITH_NONE,\n-            expr_span,\n-            \"replacing an `Option` with `None`\",\n-            \"consider `Option::take()` instead\",\n-            format!(\n-                \"{}.take()\",\n-                snippet_with_applicability(cx, replaced_path.span, \"\", &mut applicability)\n-            ),\n-            applicability,\n-        );\n-    }\n+fn check_replace_option_with_none(cx: &LateContext<'_>, dest: &Expr<'_>, expr_span: Span) {\n+    // Since this is a late pass (already type-checked),\n+    // and we already know that the second argument is an\n+    // `Option`, we do not need to check the first\n+    // argument's type. All that's left is to get\n+    // the replacee's expr after peeling off the `&mut`\n+    let sugg_expr = peel_ref_operators(cx, dest);\n+    let mut applicability = Applicability::MachineApplicable;\n+    span_lint_and_sugg(\n+        cx,\n+        MEM_REPLACE_OPTION_WITH_NONE,\n+        expr_span,\n+        \"replacing an `Option` with `None`\",\n+        \"consider `Option::take()` instead\",\n+        format!(\n+            \"{}.take()\",\n+            Sugg::hir_with_context(cx, sugg_expr, expr_span.ctxt(), \"\", &mut applicability).maybe_par()\n+        ),\n+        applicability,\n+    );\n }\n \n fn check_replace_with_uninit(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n@@ -200,10 +187,6 @@ fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<\n     if is_non_aggregate_primitive_type(expr_type) {\n         return;\n     }\n-    // disable lint for Option since it is covered in another lint\n-    if is_res_lang_ctor(cx, path_res(cx, src), OptionNone) {\n-        return;\n-    }\n     if is_default_equivalent(cx, src) && !in_external_macro(cx.tcx.sess, expr_span) {\n         span_lint_and_then(\n             cx,\n@@ -246,11 +229,13 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n             if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n             if cx.tcx.is_diagnostic_item(sym::mem_replace, def_id);\n             then {\n-                check_replace_option_with_none(cx, src, dest, expr.span);\n-                check_replace_with_uninit(cx, src, dest, expr.span);\n-                if self.msrv.meets(msrvs::MEM_TAKE) {\n+                // Check that second argument is `Option::None`\n+                if is_res_lang_ctor(cx, path_res(cx, src), OptionNone) {\n+                    check_replace_option_with_none(cx, dest, expr.span);\n+                } else if self.msrv.meets(msrvs::MEM_TAKE) {\n                     check_replace_with_default(cx, src, dest, expr.span);\n                 }\n+                check_replace_with_uninit(cx, src, dest, expr.span);\n             }\n         }\n     }"}, {"sha": "7fd340173af9e43001aa39e8b3cd878beaf3ec15", "filename": "tests/ui/mem_replace.fixed", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf/tests%2Fui%2Fmem_replace.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf/tests%2Fui%2Fmem_replace.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.fixed?ref=de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "patch": "@@ -90,3 +90,37 @@ fn msrv_1_40() {\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::take(&mut s);\n }\n+\n+fn issue9824() {\n+    struct Foo<'a>(Option<&'a str>);\n+    impl<'a> std::ops::Deref for Foo<'a> {\n+        type Target = Option<&'a str>;\n+\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+    impl<'a> std::ops::DerefMut for Foo<'a> {\n+        fn deref_mut(&mut self) -> &mut Self::Target {\n+            &mut self.0\n+        }\n+    }\n+\n+    struct Bar {\n+        opt: Option<u8>,\n+        val: String,\n+    }\n+\n+    let mut f = Foo(Some(\"foo\"));\n+    let mut b = Bar {\n+        opt: Some(1),\n+        val: String::from(\"bar\"),\n+    };\n+\n+    // replace option with none\n+    let _ = f.0.take();\n+    let _ = (*f).take();\n+    let _ = b.opt.take();\n+    // replace with default\n+    let _ = std::mem::take(&mut b.val);\n+}"}, {"sha": "fa2903addbc0330b68c5683c308f4131a53e2b20", "filename": "tests/ui/mem_replace.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf/tests%2Fui%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf/tests%2Fui%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.rs?ref=de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "patch": "@@ -90,3 +90,37 @@ fn msrv_1_40() {\n     let mut s = String::from(\"foo\");\n     let _ = std::mem::replace(&mut s, String::default());\n }\n+\n+fn issue9824() {\n+    struct Foo<'a>(Option<&'a str>);\n+    impl<'a> std::ops::Deref for Foo<'a> {\n+        type Target = Option<&'a str>;\n+\n+        fn deref(&self) -> &Self::Target {\n+            &self.0\n+        }\n+    }\n+    impl<'a> std::ops::DerefMut for Foo<'a> {\n+        fn deref_mut(&mut self) -> &mut Self::Target {\n+            &mut self.0\n+        }\n+    }\n+\n+    struct Bar {\n+        opt: Option<u8>,\n+        val: String,\n+    }\n+\n+    let mut f = Foo(Some(\"foo\"));\n+    let mut b = Bar {\n+        opt: Some(1),\n+        val: String::from(\"bar\"),\n+    };\n+\n+    // replace option with none\n+    let _ = std::mem::replace(&mut f.0, None);\n+    let _ = std::mem::replace(&mut *f, None);\n+    let _ = std::mem::replace(&mut b.opt, None);\n+    // replace with default\n+    let _ = std::mem::replace(&mut b.val, String::default());\n+}"}, {"sha": "58b57be750702aba27810957b9ad7b7f1d809d6c", "filename": "tests/ui/mem_replace.stderr", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf/tests%2Fui%2Fmem_replace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf/tests%2Fui%2Fmem_replace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace.stderr?ref=de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "patch": "@@ -122,5 +122,29 @@ error: replacing a value of type `T` with `T::default()` is better expressed usi\n LL |     let _ = std::mem::replace(&mut s, String::default());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut s)`\n \n-error: aborting due to 20 previous errors\n+error: replacing an `Option` with `None`\n+  --> $DIR/mem_replace.rs:121:13\n+   |\n+LL |     let _ = std::mem::replace(&mut f.0, None);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `f.0.take()`\n+\n+error: replacing an `Option` with `None`\n+  --> $DIR/mem_replace.rs:122:13\n+   |\n+LL |     let _ = std::mem::replace(&mut *f, None);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `(*f).take()`\n+\n+error: replacing an `Option` with `None`\n+  --> $DIR/mem_replace.rs:123:13\n+   |\n+LL |     let _ = std::mem::replace(&mut b.opt, None);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Option::take()` instead: `b.opt.take()`\n+\n+error: replacing a value of type `T` with `T::default()` is better expressed using `std::mem::take`\n+  --> $DIR/mem_replace.rs:125:13\n+   |\n+LL |     let _ = std::mem::replace(&mut b.val, String::default());\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::mem::take(&mut b.val)`\n+\n+error: aborting due to 24 previous errors\n "}]}