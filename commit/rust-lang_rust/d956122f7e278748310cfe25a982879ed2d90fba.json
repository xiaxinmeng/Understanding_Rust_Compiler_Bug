{"sha": "d956122f7e278748310cfe25a982879ed2d90fba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NTYxMjJmN2UyNzg3NDgzMTBjZmUyNWE5ODI4NzllZDJkOTBmYmE=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-03-07T21:52:13Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-11T13:33:00Z"}, "message": "[WIP] Create a `Visitor` for the THIR", "tree": {"sha": "70b0e85863665aa33da6684c2a0b345c00795fea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b0e85863665aa33da6684c2a0b345c00795fea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d956122f7e278748310cfe25a982879ed2d90fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d956122f7e278748310cfe25a982879ed2d90fba", "html_url": "https://github.com/rust-lang/rust/commit/d956122f7e278748310cfe25a982879ed2d90fba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d956122f7e278748310cfe25a982879ed2d90fba/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "506e75cbf8cb5305e49a41326307004ca3976029", "url": "https://api.github.com/repos/rust-lang/rust/commits/506e75cbf8cb5305e49a41326307004ca3976029", "html_url": "https://github.com/rust-lang/rust/commit/506e75cbf8cb5305e49a41326307004ca3976029"}], "stats": {"total": 179, "additions": 179, "deletions": 0}, "files": [{"sha": "9bcb000920c04936973eae3cd433744a7f75b3df", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d956122f7e278748310cfe25a982879ed2d90fba/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d956122f7e278748310cfe25a982879ed2d90fba/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=d956122f7e278748310cfe25a982879ed2d90fba", "patch": "@@ -29,6 +29,7 @@ mod arena;\n pub use arena::Arena;\n \n mod util;\n+pub mod visit;\n \n #[derive(Copy, Clone, Debug)]\n pub enum LintLevel {"}, {"sha": "8a0ae1b5aedff9d9e866e2517f664057c9db5024", "filename": "compiler/rustc_mir_build/src/thir/visit.rs", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/d956122f7e278748310cfe25a982879ed2d90fba/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d956122f7e278748310cfe25a982879ed2d90fba/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs?ref=d956122f7e278748310cfe25a982879ed2d90fba", "patch": "@@ -0,0 +1,178 @@\n+use crate::thir::*;\n+\n+pub trait Visitor<'thir, 'tcx>: Sized {\n+    fn visit_expr(&mut self, expr: &'thir Expr<'thir, 'tcx>) {\n+        walk_expr(self, expr);\n+    }\n+\n+    fn visit_stmt(&mut self, stmt: &'thir Stmt<'thir, 'tcx>) {\n+        walk_stmt(self, stmt);\n+    }\n+\n+    fn visit_block(&mut self, block: &Block<'thir, 'tcx>) {\n+        walk_block(self, block);\n+    }\n+\n+    fn visit_arm(&mut self, arm: &'thir Arm<'thir, 'tcx>) {\n+        walk_arm(self, arm);\n+    }\n+\n+    fn visit_const(&mut self, _cnst: &'tcx Const<'tcx>) {}\n+}\n+\n+pub fn walk_expr<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n+    visitor: &mut V,\n+    expr: &'thir Expr<'thir, 'tcx>,\n+) {\n+    use ExprKind::*;\n+    match expr.kind {\n+        Scope { value, .. } => visitor.visit_expr(value),\n+        Box { value } => visitor.visit_expr(value),\n+        If { cond, then, else_opt } => {\n+            visitor.visit_expr(cond);\n+            visitor.visit_expr(then);\n+            if let Some(else_expr) = else_opt {\n+                visitor.visit_expr(else_expr);\n+            }\n+        }\n+        Call { fun, args, .. } => {\n+            visitor.visit_expr(fun);\n+            for arg in args {\n+                visitor.visit_expr(arg);\n+            }\n+        }\n+        Deref { arg } => visitor.visit_expr(arg),\n+        Binary { lhs, rhs, .. } | LogicalOp { lhs, rhs, .. } => {\n+            visitor.visit_expr(lhs);\n+            visitor.visit_expr(rhs);\n+        }\n+        Unary { arg, .. } => visitor.visit_expr(arg),\n+        Cast { source } => visitor.visit_expr(source),\n+        Use { source } => visitor.visit_expr(source),\n+        NeverToAny { source } => visitor.visit_expr(source),\n+        Pointer { source, .. } => visitor.visit_expr(source),\n+        Loop { body } => visitor.visit_expr(body),\n+        Match { scrutinee, arms } => {\n+            visitor.visit_expr(scrutinee);\n+            for arm in arms {\n+                visitor.visit_arm(arm);\n+            }\n+        }\n+        Block { ref body } => visitor.visit_block(body),\n+        Assign { lhs, rhs } | AssignOp { lhs, rhs, .. } => {\n+            visitor.visit_expr(lhs);\n+            visitor.visit_expr(rhs);\n+        }\n+        Field { lhs, .. } => visitor.visit_expr(lhs),\n+        Index { lhs, index } => {\n+            visitor.visit_expr(lhs);\n+            visitor.visit_expr(index);\n+        }\n+        VarRef { .. } | UpvarRef { .. } => {}\n+        Borrow { arg, .. } => visitor.visit_expr(arg),\n+        AddressOf { arg, .. } => visitor.visit_expr(arg),\n+        Break { value, .. } => {\n+            if let Some(value) = value {\n+                visitor.visit_expr(value)\n+            }\n+        }\n+        Continue { .. } => {}\n+        Return { value } => {\n+            if let Some(value) = value {\n+                visitor.visit_expr(value)\n+            }\n+        }\n+        ConstBlock { value } => visitor.visit_const(value),\n+        Repeat { value, count } => {\n+            visitor.visit_expr(value);\n+            visitor.visit_const(count);\n+        }\n+        Array { fields } | Tuple { fields } => {\n+            for field in fields {\n+                visitor.visit_expr(field);\n+            }\n+        }\n+        Adt { fields, ref base, .. } => {\n+            for field in fields {\n+                visitor.visit_expr(field.expr);\n+            }\n+            if let Some(base) = base {\n+                visitor.visit_expr(base.base);\n+            }\n+        }\n+        PlaceTypeAscription { source, .. } | ValueTypeAscription { source, .. } => {\n+            visitor.visit_expr(source)\n+        }\n+        Closure { .. } => {}\n+        Literal { literal, .. } => visitor.visit_const(literal),\n+        StaticRef { literal, .. } => visitor.visit_const(literal),\n+        InlineAsm { operands, .. } => {\n+            for op in operands {\n+                use InlineAsmOperand::*;\n+                match op {\n+                    In { expr, .. }\n+                    | Out { expr: Some(expr), .. }\n+                    | InOut { expr, .. }\n+                    | SymFn { expr } => visitor.visit_expr(expr),\n+                    SplitInOut { in_expr, out_expr, .. } => {\n+                        visitor.visit_expr(in_expr);\n+                        if let Some(out_expr) = out_expr {\n+                            visitor.visit_expr(out_expr);\n+                        }\n+                    }\n+                    Out { .. } | Const { .. } | SymStatic { .. } => {}\n+                }\n+            }\n+        }\n+        ThreadLocalRef(_) => {}\n+        LlvmInlineAsm { outputs, inputs, .. } => {\n+            for out_expr in outputs {\n+                visitor.visit_expr(out_expr);\n+            }\n+            for in_expr in inputs {\n+                visitor.visit_expr(in_expr);\n+            }\n+        }\n+        Yield { value } => visitor.visit_expr(value),\n+    }\n+}\n+\n+pub fn walk_stmt<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n+    visitor: &mut V,\n+    stmt: &'thir Stmt<'thir, 'tcx>,\n+) {\n+    match stmt.kind {\n+        StmtKind::Expr { expr, .. } => visitor.visit_expr(expr),\n+        StmtKind::Let { pattern: _, initializer, .. } => {\n+            if let Some(init) = initializer {\n+                visitor.visit_expr(init);\n+            }\n+        }\n+    }\n+}\n+\n+pub fn walk_block<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n+    visitor: &mut V,\n+    block: &Block<'thir, 'tcx>,\n+) {\n+    for stmt in block.stmts {\n+        visitor.visit_stmt(stmt);\n+    }\n+    if let Some(expr) = block.expr {\n+        visitor.visit_expr(expr);\n+    }\n+}\n+\n+pub fn walk_arm<'thir, 'tcx, V: Visitor<'thir, 'tcx>>(\n+    visitor: &mut V,\n+    arm: &'thir Arm<'thir, 'tcx>,\n+) {\n+    match arm.guard {\n+        Some(Guard::If(expr)) => visitor.visit_expr(expr),\n+        Some(Guard::IfLet(ref _pat, expr)) => {\n+            visitor.visit_expr(expr);\n+        }\n+        None => {}\n+    }\n+    visitor.visit_expr(arm.body);\n+}"}]}