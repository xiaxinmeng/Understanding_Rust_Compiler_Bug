{"sha": "b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMWM5ZGRkYjA2MWZhZjJkMGRlMGMwNWFhMmMyNmFkMjk1YjQ3MGU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-02T00:26:18Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-01-11T06:56:44Z"}, "message": "Use Arena for interning", "tree": {"sha": "16c20beb24cab02b72fd788d2d44d6e662e91d54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16c20beb24cab02b72fd788d2d44d6e662e91d54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "html_url": "https://github.com/rust-lang/rust/commit/b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edee9c3898bdc3e319d90322259e535affd6ae49", "url": "https://api.github.com/repos/rust-lang/rust/commits/edee9c3898bdc3e319d90322259e535affd6ae49", "html_url": "https://github.com/rust-lang/rust/commit/edee9c3898bdc3e319d90322259e535affd6ae49"}], "stats": {"total": 44, "additions": 16, "deletions": 28}, "files": [{"sha": "15e92d8d8421930d60c32929051b805f72c4d7b2", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "patch": "@@ -123,6 +123,9 @@ macro_rules! arena_types {\n             [few] inferred_outlives_crate: rustc::ty::CratePredicatesMap<'tcx>,\n             [] upvars: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n \n+            // Interned types\n+            [] tys: rustc::ty::TyS<$tcx>,\n+\n             // HIR types\n             [few] hir_forest: rustc::hir::map::Forest<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,\n@@ -176,7 +179,7 @@ macro_rules! declare_arena {\n     ([], [$($a:tt $name:ident: $ty:ty,)*], $tcx:lifetime) => {\n         #[derive(Default)]\n         pub struct Arena<$tcx> {\n-            dropless: DroplessArena,\n+            pub dropless: DroplessArena,\n             drop: DropArena,\n             $($name: arena_for_type!($a[$ty]),)*\n         }"}, {"sha": "908fd9a52940126fec121e0e9eb688068ef6f283", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "patch": "@@ -50,7 +50,6 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, DefIdSet, DefIndex, LOCAL_CRA\n use rustc_hir::{HirId, Node, TraitCandidate};\n use rustc_hir::{ItemKind, ItemLocalId, ItemLocalMap, ItemLocalSet};\n \n-use arena::SyncDroplessArena;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n@@ -81,21 +80,11 @@ use syntax::ast;\n use syntax::attr;\n use syntax::expand::allocator::AllocatorKind;\n \n-pub struct AllArenas {\n-    pub interner: SyncDroplessArena,\n-}\n-\n-impl AllArenas {\n-    pub fn new() -> Self {\n-        AllArenas { interner: SyncDroplessArena::default() }\n-    }\n-}\n-\n type InternedSet<'tcx, T> = ShardedHashMap<Interned<'tcx, T>, ()>;\n \n pub struct CtxtInterners<'tcx> {\n     /// The arena that types, regions, etc. are allocated from.\n-    arena: &'tcx SyncDroplessArena,\n+    arena: &'tcx WorkerLocal<Arena<'tcx>>,\n \n     /// Specifically use a speedy hash algorithm for these hash sets, since\n     /// they're accessed quite often.\n@@ -115,7 +104,7 @@ pub struct CtxtInterners<'tcx> {\n }\n \n impl<'tcx> CtxtInterners<'tcx> {\n-    fn new(arena: &'tcx SyncDroplessArena) -> CtxtInterners<'tcx> {\n+    fn new(arena: &'tcx WorkerLocal<Arena<'tcx>>) -> CtxtInterners<'tcx> {\n         CtxtInterners {\n             arena,\n             type_: Default::default(),\n@@ -1118,7 +1107,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         lint_store: Lrc<lint::LintStore>,\n         local_providers: ty::query::Providers<'tcx>,\n         extern_providers: ty::query::Providers<'tcx>,\n-        arenas: &'tcx AllArenas,\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         resolutions: ty::ResolverOutputs,\n         hir: hir_map::Map<'tcx>,\n@@ -1129,7 +1117,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let data_layout = TargetDataLayout::parse(&s.target.target).unwrap_or_else(|err| {\n             s.fatal(&err);\n         });\n-        let interners = CtxtInterners::new(&arenas.interner);\n+        let interners = CtxtInterners::new(arena);\n         let common_types = CommonTypes::new(&interners);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n@@ -2087,7 +2075,7 @@ macro_rules! slice_interners {\n         $(impl<'tcx> TyCtxt<'tcx> {\n             pub fn $method(self, v: &[$ty]) -> &'tcx List<$ty> {\n                 self.interners.$field.intern_ref(v, || {\n-                    Interned(List::from_arena(&self.interners.arena, v))\n+                    Interned(List::from_arena(&*self.arena, v))\n                 }).0\n             }\n         })+"}, {"sha": "78b00f259aa645c27bdce57f6f1dd37e5bd9379f", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "patch": "@@ -6,6 +6,7 @@ pub use self::BorrowKind::*;\n pub use self::IntVarValue::*;\n pub use self::Variance::*;\n \n+use crate::arena::Arena;\n use crate::hir::exports::ExportMap;\n use crate::hir::map as hir_map;\n \n@@ -26,7 +27,6 @@ use crate::ty::layout::VariantIdx;\n use crate::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use crate::ty::util::{Discr, IntTypeExt};\n use crate::ty::walk::TypeWalker;\n-use arena::SyncDroplessArena;\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::fx::FxIndexMap;\n@@ -76,7 +76,7 @@ pub use crate::ty::diagnostics::*;\n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n \n-pub use self::context::{keep_local, tls, AllArenas, FreeRegionInfo, TyCtxt};\n+pub use self::context::{keep_local, tls, FreeRegionInfo, TyCtxt};\n pub use self::context::{\n     CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, ResolvedOpaqueTy,\n     UserType, UserTypeAnnotationIndex,\n@@ -606,7 +606,7 @@ unsafe impl<T: Sync> Sync for List<T> {}\n \n impl<T: Copy> List<T> {\n     #[inline]\n-    fn from_arena<'tcx>(arena: &'tcx SyncDroplessArena, slice: &[T]) -> &'tcx List<T> {\n+    fn from_arena<'tcx>(arena: &'tcx Arena<'tcx>, slice: &[T]) -> &'tcx List<T> {\n         assert!(!mem::needs_drop::<T>());\n         assert!(mem::size_of::<T>() != 0);\n         assert!(slice.len() != 0);\n@@ -619,7 +619,9 @@ impl<T: Copy> List<T> {\n \n         let size = offset + slice.len() * mem::size_of::<T>();\n \n-        let mem = arena.alloc_raw(size, cmp::max(mem::align_of::<T>(), mem::align_of::<usize>()));\n+        let mem = arena\n+            .dropless\n+            .alloc_raw(size, cmp::max(mem::align_of::<T>(), mem::align_of::<usize>()));\n         unsafe {\n             let result = &mut *(mem.as_mut_ptr() as *mut List<T>);\n             // Write the length"}, {"sha": "5567d5bf201a0b9bc2f9084f888453439ec17241", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "patch": "@@ -15,7 +15,7 @@ use rustc::session::search_paths::PathKind;\n use rustc::session::Session;\n use rustc::traits;\n use rustc::ty::steal::Steal;\n-use rustc::ty::{self, AllArenas, GlobalCtxt, ResolverOutputs, TyCtxt};\n+use rustc::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc::util::common::ErrorReported;\n use rustc_builtin_macros;\n use rustc_codegen_ssa::back::link::emit_metadata;\n@@ -711,7 +711,6 @@ pub fn create_global_ctxt<'tcx>(\n     outputs: OutputFilenames,\n     crate_name: &str,\n     global_ctxt: &'tcx Once<GlobalCtxt<'tcx>>,\n-    all_arenas: &'tcx AllArenas,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n     let sess = &compiler.session();\n@@ -742,7 +741,6 @@ pub fn create_global_ctxt<'tcx>(\n                 lint_store,\n                 local_providers,\n                 extern_providers,\n-                &all_arenas,\n                 arena,\n                 resolver_outputs,\n                 hir_map,"}, {"sha": "f0d0297d11a1efd7044aee11a3f4030ac633cd22", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b21c9dddb061faf2d0de0c05aa2c26ad295b470e/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=b21c9dddb061faf2d0de0c05aa2c26ad295b470e", "patch": "@@ -9,7 +9,7 @@ use rustc::lint::LintStore;\n use rustc::session::config::{OutputFilenames, OutputType};\n use rustc::session::Session;\n use rustc::ty::steal::Steal;\n-use rustc::ty::{AllArenas, GlobalCtxt, ResolverOutputs};\n+use rustc::ty::{GlobalCtxt, ResolverOutputs};\n use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::sync::{Lrc, Once, WorkerLocal};\n@@ -67,7 +67,6 @@ pub struct Queries<'tcx> {\n     compiler: &'tcx Compiler,\n     gcx: Once<GlobalCtxt<'tcx>>,\n \n-    all_arenas: AllArenas,\n     arena: WorkerLocal<Arena<'tcx>>,\n \n     dep_graph_future: Query<Option<DepGraphFuture>>,\n@@ -87,7 +86,6 @@ impl<'tcx> Queries<'tcx> {\n         Queries {\n             compiler,\n             gcx: Once::new(),\n-            all_arenas: AllArenas::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n             dep_graph_future: Default::default(),\n             parse: Default::default(),\n@@ -266,7 +264,6 @@ impl<'tcx> Queries<'tcx> {\n                 outputs,\n                 &crate_name,\n                 &self.gcx,\n-                &self.all_arenas,\n                 &self.arena,\n             ))\n         })"}]}