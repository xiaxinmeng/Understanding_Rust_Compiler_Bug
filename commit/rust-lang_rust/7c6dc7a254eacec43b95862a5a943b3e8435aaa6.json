{"sha": "7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNmRjN2EyNTRlYWNlYzQzYjk1ODYyYTVhOTQzYjNlODQzNWFhYTY=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-12T16:12:18Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-04-21T15:46:32Z"}, "message": "Move `async fn` arguments into closure.\n\nThis commit takes advantage of `AsyncArgument` type that was added in a\nprevious commit to replace the arguments of the `async fn` in the HIR\nand add statements to move the bindings from the new arguments to the\npattern from the old argument.\n\nFor example, the async function `foo` below:\n\n    async fn foo((x, _y): (T, V)) {\n        async move {\n        }\n    }\n\nbecomes:\n\n    async fn foo(__arg0: (T, V)) {\n        async move {\n            let (x, _y) = __arg0;\n        }\n    }", "tree": {"sha": "14361cb321d5a3598179d3383cbbd063c2779398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14361cb321d5a3598179d3383cbbd063c2779398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAly8kFgACgkQAXYLT59T\n8VS6ew//Rf+/EDl/LUaP/PcxeBf6KWChOObaoAA0R39vbWJTJaCUCc+vQy7zEHLk\ntqDqzSEHznwne7Jo3r+yVI9chzZCp+LdRZSZOsq5GT+JhpASDcxBTeeFe+2qT5QV\ntP/n9bq6kDcSJ7bnpYTs8tGz6/YYBlag5pAyvrGtgff/U0UU323SMhgMSdicxswq\nvgnZ2hcLwlaspN0Y76Ko5FTqFl9ZhzPKreHtVwcfbmJixsn071aL9Bg6+R3tV4wD\nkFgYnqi29TWX7y4GBXD1BZyBDfBcRIPFS2BRqM84UfIJbrr2ucRtn6aQHNih7mE9\nZAgjSKAH+hKf7Zj9xL8kLiYdm+zawpjNwH+MzrqjWutX7Gz/mLUxI84LaRg49TBl\nCh8Cyvtlfr/z6eQc/8mYTZd/s8jM+c92QBlcr9vw8Tn9wzHPmA5AJJjQhscV0h2W\noiIk6+mFY8eKrD5y5d9BKT+YeRwJvyVBR/A4/p0bh0+COppBFwgy18xOOiSOiuVB\nrsaQWP67L4JwyvmGunoyvx1UCQxQtNiqfRaZYSetZjq1RMd77Z0oTBr8+w/iBQIA\nmxfAU6uEnrRulHaakbTUgKZ6xjcXpHcw5ZqNfsKq8HTX4NB6k/nVOAuZsBrPrSAn\nRSk6Y+c42YQhbvjhwq2Xa7COlGJhpYQeyMjnXU3ZNj+pEHHt2eI=\n=vFnV\n-----END PGP SIGNATURE-----", "payload": "tree 14361cb321d5a3598179d3383cbbd063c2779398\nparent 879abb1641d97be798010f52a875b9fc83881323\nauthor David Wood <david@davidtw.co> 1552407138 +0100\ncommitter David Wood <david@davidtw.co> 1555861592 +0100\n\nMove `async fn` arguments into closure.\n\nThis commit takes advantage of `AsyncArgument` type that was added in a\nprevious commit to replace the arguments of the `async fn` in the HIR\nand add statements to move the bindings from the new arguments to the\npattern from the old argument.\n\nFor example, the async function `foo` below:\n\n    async fn foo((x, _y): (T, V)) {\n        async move {\n        }\n    }\n\nbecomes:\n\n    async fn foo(__arg0: (T, V)) {\n        async move {\n            let (x, _y) = __arg0;\n        }\n    }\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "html_url": "https://github.com/rust-lang/rust/commit/7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "879abb1641d97be798010f52a875b9fc83881323", "url": "https://api.github.com/repos/rust-lang/rust/commits/879abb1641d97be798010f52a875b9fc83881323", "html_url": "https://github.com/rust-lang/rust/commit/879abb1641d97be798010f52a875b9fc83881323"}], "stats": {"total": 152, "additions": 115, "deletions": 37}, "files": [{"sha": "5dabf10cbf83dcdb147066a301835bc34fc26cb3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 67, "deletions": 21, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "patch": "@@ -448,10 +448,9 @@ impl<'a> LoweringContext<'a> {\n         impl<'lcx, 'interner> Visitor<'lcx> for MiscCollector<'lcx, 'interner> {\n             fn visit_pat(&mut self, p: &'lcx Pat) {\n                 match p.node {\n-                    // Doesn't generate a Hir node\n+                    // Doesn't generate a HIR node\n                     PatKind::Paren(..) => {},\n                     _ => {\n-\n                         if let Some(owner) = self.hir_id_owner {\n                             self.lctx.lower_node_id_with_owner(p.id, owner);\n                         }\n@@ -461,6 +460,31 @@ impl<'a> LoweringContext<'a> {\n                 visit::walk_pat(self, p)\n             }\n \n+            fn visit_fn(&mut self, fk: visit::FnKind<'lcx>, fd: &'lcx FnDecl, s: Span, _: NodeId) {\n+                if fk.header().map(|h| h.asyncness.node.is_async()).unwrap_or(false) {\n+                    // Don't visit the original pattern for async functions as it will be\n+                    // replaced.\n+                    for arg in &fd.inputs {\n+                        self.visit_ty(&arg.ty)\n+                    }\n+                    self.visit_fn_ret_ty(&fd.output);\n+\n+                    match fk {\n+                        visit::FnKind::ItemFn(_, decl, _, body) => {\n+                            self.visit_fn_header(decl);\n+                            self.visit_block(body)\n+                        },\n+                        visit::FnKind::Method(_, sig, _, body) => {\n+                            self.visit_fn_header(&sig.header);\n+                            self.visit_block(body)\n+                        },\n+                        visit::FnKind::Closure(body) => self.visit_expr(body),\n+                    }\n+                } else {\n+                    visit::walk_fn(self, fk, fd, s)\n+                }\n+            }\n+\n             fn visit_item(&mut self, item: &'lcx Item) {\n                 let hir_id = self.lctx.allocate_hir_id_counter(item.id).hir_id;\n \n@@ -3003,12 +3027,18 @@ impl<'a> LoweringContext<'a> {\n         asyncness: &IsAsync,\n         body: &Block,\n     ) -> hir::BodyId {\n-        self.lower_body(Some(decl), |this| {\n-            if let IsAsync::Async { closure_id, .. } = asyncness {\n+        self.lower_body(Some(&decl), |this| {\n+            if let IsAsync::Async { closure_id, ref arguments, .. } = asyncness {\n+                let mut body = body.clone();\n+\n+                for a in arguments.iter().rev() {\n+                    body.stmts.insert(0, a.stmt.clone());\n+                }\n+\n                 let async_expr = this.make_async_expr(\n                     CaptureBy::Value, *closure_id, None,\n                     |this| {\n-                        let body = this.lower_block(body, false);\n+                        let body = this.lower_block(&body, false);\n                         this.expr_block(body, ThinVec::new())\n                     });\n                 this.expr(body.span, async_expr, ThinVec::new())\n@@ -3070,23 +3100,39 @@ impl<'a> LoweringContext<'a> {\n             ItemKind::Fn(ref decl, ref header, ref generics, ref body) => {\n                 let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n-                    // Note: we don't need to change the return type from `T` to\n-                    // `impl Future<Output = T>` here because lower_body\n-                    // only cares about the input argument patterns in the function\n-                    // declaration (decl), not the return types.\n-                    let body_id = this.lower_async_body(decl, &header.asyncness.node, body);\n+                    let mut lower_fn = |decl: &FnDecl| {\n+                        // Note: we don't need to change the return type from `T` to\n+                        // `impl Future<Output = T>` here because lower_body\n+                        // only cares about the input argument patterns in the function\n+                        // declaration (decl), not the return types.\n+                        let body_id = this.lower_async_body(&decl, &header.asyncness.node, body);\n+\n+                        let (generics, fn_decl) = this.add_in_band_defs(\n+                            generics,\n+                            fn_def_id,\n+                            AnonymousLifetimeMode::PassThrough,\n+                            |this, idty| this.lower_fn_decl(\n+                                &decl,\n+                                Some((fn_def_id, idty)),\n+                                true,\n+                                header.asyncness.node.opt_return_id()\n+                            ),\n+                        );\n \n-                    let (generics, fn_decl) = this.add_in_band_defs(\n-                        generics,\n-                        fn_def_id,\n-                        AnonymousLifetimeMode::PassThrough,\n-                        |this, idty| this.lower_fn_decl(\n-                            decl,\n-                            Some((fn_def_id, idty)),\n-                            true,\n-                            header.asyncness.node.opt_return_id()\n-                        ),\n-                    );\n+                        (body_id, generics, fn_decl)\n+                    };\n+\n+                    let (body_id, generics, fn_decl) = if let IsAsync::Async {\n+                        arguments, ..\n+                    } = &header.asyncness.node {\n+                        let mut decl = decl.clone();\n+                        // Replace the arguments of this async function with the generated\n+                        // arguments that will be moved into the closure.\n+                        decl.inputs = arguments.clone().drain(..).map(|a| a.arg).collect();\n+                        lower_fn(&decl)\n+                    } else {\n+                        lower_fn(decl)\n+                    };\n \n                     hir::ItemKind::Fn(\n                         fn_decl,"}, {"sha": "0fa973853221580c01cb68e747b336a3c44f1d14", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "patch": "@@ -73,12 +73,12 @@ impl<'a> DefCollector<'a> {\n         decl: &'a FnDecl,\n         body: &'a Block,\n     ) {\n-        let (closure_id, return_impl_trait_id) = match header.asyncness.node {\n+        let (closure_id, return_impl_trait_id, arguments) = match &header.asyncness.node {\n             IsAsync::Async {\n                 closure_id,\n                 return_impl_trait_id,\n-                ..\n-            } => (closure_id, return_impl_trait_id),\n+                arguments,\n+            } => (closure_id, return_impl_trait_id, arguments),\n             _ => unreachable!(),\n         };\n \n@@ -87,17 +87,31 @@ impl<'a> DefCollector<'a> {\n         let fn_def_data = DefPathData::ValueNs(name.as_interned_str());\n         let fn_def = self.create_def(id, fn_def_data, ITEM_LIKE_SPACE, span);\n         return self.with_parent(fn_def, |this| {\n-            this.create_def(return_impl_trait_id, DefPathData::ImplTrait, REGULAR_SPACE, span);\n+            this.create_def(*return_impl_trait_id, DefPathData::ImplTrait, REGULAR_SPACE, span);\n \n             visit::walk_generics(this, generics);\n-            visit::walk_fn_decl(this, decl);\n \n-            let closure_def = this.create_def(closure_id,\n-                                              DefPathData::ClosureExpr,\n-                                              REGULAR_SPACE,\n-                                              span);\n+            // Walk the generated arguments for the `async fn`.\n+            for a in arguments {\n+                use visit::Visitor;\n+                this.visit_ty(&a.arg.ty);\n+            }\n+\n+            // We do not invoke `walk_fn_decl` as this will walk the arguments that are being\n+            // replaced.\n+            visit::walk_fn_ret_ty(this, &decl.output);\n+\n+            let closure_def = this.create_def(\n+                *closure_id, DefPathData::ClosureExpr, REGULAR_SPACE, span,\n+            );\n             this.with_parent(closure_def, |this| {\n-                visit::walk_block(this, body);\n+                for a in arguments {\n+                    use visit::Visitor;\n+                    // Walk each of the generated statements before the regular block body.\n+                    this.visit_stmt(&a.stmt);\n+                }\n+\n+                visit::walk_block(this, &body);\n             })\n         })\n     }"}, {"sha": "2ef05f7efeb7303e8c36c87e3d4380730b106676", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "patch": "@@ -834,11 +834,20 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n \n         // Add each argument to the rib.\n         let mut bindings_list = FxHashMap::default();\n-        for argument in &declaration.inputs {\n+        let mut add_argument = |argument: &ast::Arg| {\n             self.resolve_pattern(&argument.pat, PatternSource::FnParam, &mut bindings_list);\n             self.visit_ty(&argument.ty);\n             debug!(\"(resolving function) recorded argument\");\n+        };\n+\n+        // Walk the generated async arguments if this is an `async fn`, otherwise walk the\n+        // normal arguments.\n+        if let IsAsync::Async { ref arguments, .. } = asyncness {\n+            for a in arguments { add_argument(&a.arg); }\n+        } else {\n+            for a in &declaration.inputs { add_argument(a); }\n         }\n+\n         visit::walk_fn_ret_ty(self, &declaration.output);\n \n         // Resolve the function body, potentially inside the body of an async closure\n@@ -849,9 +858,18 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         }\n \n         match function_kind {\n-            FnKind::ItemFn(.., body) |\n-            FnKind::Method(.., body) => {\n-                self.visit_block(body);\n+            FnKind::ItemFn(.., body) | FnKind::Method(.., body) => {\n+                if let IsAsync::Async { ref arguments, .. } = asyncness {\n+                    let mut body = body.clone();\n+                    // Insert the generated statements into the body before attempting to\n+                    // resolve names.\n+                    for a in arguments {\n+                        body.stmts.insert(0, a.stmt.clone());\n+                    }\n+                    self.visit_block(&body);\n+                } else {\n+                    self.visit_block(body);\n+                }\n             }\n             FnKind::Closure(body) => {\n                 self.visit_expr(body);"}, {"sha": "84567e1b4b8f26cf9e17016210eca120315a1cc8", "filename": "src/test/mir-opt/inline-closure-borrows-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure-borrows-arg.rs?ref=7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "patch": "@@ -20,7 +20,7 @@ fn foo<T: Copy>(_t: T, q: &i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 29 }];\n+//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 31 }];\n //     ...\n //     _4 = &_3;\n //     ..."}, {"sha": "2be48927fd3b73b5828796064e4f5225ea8668ad", "filename": "src/test/mir-opt/inline-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6dc7a254eacec43b95862a5a943b3e8435aaa6/src%2Ftest%2Fmir-opt%2Finline-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline-closure.rs?ref=7c6dc7a254eacec43b95862a5a943b3e8435aaa6", "patch": "@@ -16,7 +16,7 @@ fn foo<T: Copy>(_t: T, q: i32) -> i32 {\n // ...\n // bb0: {\n //     ...\n-//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 13 }];\n+//     _3 = [closure@HirId { owner: DefIndex(0:4), local_id: 15 }];\n //     ...\n //     _4 = &_3;\n //     ..."}]}