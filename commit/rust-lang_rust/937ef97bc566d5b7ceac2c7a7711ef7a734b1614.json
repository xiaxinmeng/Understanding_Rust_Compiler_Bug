{"sha": "937ef97bc566d5b7ceac2c7a7711ef7a734b1614", "node_id": "C_kwDOAAsO6NoAKDkzN2VmOTdiYzU2NmQ1YjdjZWFjMmM3YTc3MTFlZjdhNzM0YjE2MTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T04:45:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-07T04:45:41Z"}, "message": "Auto merge of #14521 - HKalbasi:dev, r=Veykril\n\nAdd bounds for fields in derive macro\n\nDependency of #14470", "tree": {"sha": "af1878349e1f7211b083cd7f12d3ded117ff6c8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af1878349e1f7211b083cd7f12d3ded117ff6c8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/937ef97bc566d5b7ceac2c7a7711ef7a734b1614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/937ef97bc566d5b7ceac2c7a7711ef7a734b1614", "html_url": "https://github.com/rust-lang/rust/commit/937ef97bc566d5b7ceac2c7a7711ef7a734b1614", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/937ef97bc566d5b7ceac2c7a7711ef7a734b1614/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e739c999cd23e3114187d889755eb897e02989ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e739c999cd23e3114187d889755eb897e02989ea", "html_url": "https://github.com/rust-lang/rust/commit/e739c999cd23e3114187d889755eb897e02989ea"}, {"sha": "0241b52dad7ca63738a3495830e25b71780d3797", "url": "https://api.github.com/repos/rust-lang/rust/commits/0241b52dad7ca63738a3495830e25b71780d3797", "html_url": "https://github.com/rust-lang/rust/commit/0241b52dad7ca63738a3495830e25b71780d3797"}], "stats": {"total": 93, "additions": 66, "deletions": 27}, "files": [{"sha": "b7932f550e25d85ac5a91f2d37089511dd9012b6", "filename": "crates/hir-def/src/macro_expansion_tests/builtin_derive_macro.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/937ef97bc566d5b7ceac2c7a7711ef7a734b1614/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937ef97bc566d5b7ceac2c7a7711ef7a734b1614/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs?ref=937ef97bc566d5b7ceac2c7a7711ef7a734b1614", "patch": "@@ -16,7 +16,7 @@ struct Foo;\n #[derive(Copy)]\n struct Foo;\n \n-impl < > core::marker::Copy for Foo< > {}\"#]],\n+impl < > core::marker::Copy for Foo< > where {}\"#]],\n     );\n }\n \n@@ -41,7 +41,7 @@ macro Copy {}\n #[derive(Copy)]\n struct Foo;\n \n-impl < > crate ::marker::Copy for Foo< > {}\"#]],\n+impl < > crate ::marker::Copy for Foo< > where {}\"#]],\n     );\n }\n \n@@ -57,7 +57,7 @@ struct Foo<A, B>;\n #[derive(Copy)]\n struct Foo<A, B>;\n \n-impl <T0: core::marker::Copy, T1: core::marker::Copy, > core::marker::Copy for Foo<T0, T1, > {}\"#]],\n+impl <A: core::marker::Copy, B: core::marker::Copy, > core::marker::Copy for Foo<A, B, > where {}\"#]],\n     );\n }\n \n@@ -74,7 +74,7 @@ struct Foo<A, B, 'a, 'b>;\n #[derive(Copy)]\n struct Foo<A, B, 'a, 'b>;\n \n-impl <T0: core::marker::Copy, T1: core::marker::Copy, > core::marker::Copy for Foo<T0, T1, > {}\"#]],\n+impl <A: core::marker::Copy, B: core::marker::Copy, > core::marker::Copy for Foo<A, B, > where {}\"#]],\n     );\n }\n \n@@ -90,7 +90,7 @@ struct Foo<A, B>;\n #[derive(Clone)]\n struct Foo<A, B>;\n \n-impl <T0: core::clone::Clone, T1: core::clone::Clone, > core::clone::Clone for Foo<T0, T1, > {}\"#]],\n+impl <A: core::clone::Clone, B: core::clone::Clone, > core::clone::Clone for Foo<A, B, > where {}\"#]],\n     );\n }\n \n@@ -106,6 +106,6 @@ struct Foo<const X: usize, T>(u32);\n #[derive(Clone)]\n struct Foo<const X: usize, T>(u32);\n \n-impl <const T0: usize, T1: core::clone::Clone, > core::clone::Clone for Foo<T0, T1, > {}\"#]],\n+impl <const X: usize, T: core::clone::Clone, > core::clone::Clone for Foo<X, T, > where u32: core::clone::Clone, {}\"#]],\n     );\n }"}, {"sha": "2b874bffff67ee228aff4c880bf25547c3a1baa7", "filename": "crates/hir-expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 56, "deletions": 17, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/937ef97bc566d5b7ceac2c7a7711ef7a734b1614/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937ef97bc566d5b7ceac2c7a7711ef7a734b1614/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=937ef97bc566d5b7ceac2c7a7711ef7a734b1614", "patch": "@@ -1,11 +1,12 @@\n //! Builtin derives.\n \n use base_db::{CrateOrigin, LangCrateOrigin};\n+use either::Either;\n use tracing::debug;\n \n use crate::tt::{self, TokenId};\n use syntax::{\n-    ast::{self, AstNode, HasGenericParams, HasModuleItem, HasName},\n+    ast::{self, AstNode, HasGenericParams, HasModuleItem, HasName, HasTypeBounds},\n     match_ast,\n };\n \n@@ -60,8 +61,11 @@ pub fn find_builtin_derive(ident: &name::Name) -> Option<BuiltinDeriveExpander>\n \n struct BasicAdtInfo {\n     name: tt::Ident,\n-    /// `Some(ty)` if it's a const param of type `ty`, `None` if it's a type param.\n-    param_types: Vec<Option<tt::Subtree>>,\n+    /// first field is the name, and\n+    /// second field is `Some(ty)` if it's a const param of type `ty`, `None` if it's a type param.\n+    /// third fields is where bounds, if any\n+    param_types: Vec<(tt::Subtree, Option<tt::Subtree>, Option<tt::Subtree>)>,\n+    field_types: Vec<tt::Subtree>,\n }\n \n fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, ExpandError> {\n@@ -75,17 +79,34 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, ExpandError> {\n         ExpandError::Other(\"no item found\".into())\n     })?;\n     let node = item.syntax();\n-    let (name, params) = match_ast! {\n+    let (name, params, fields) = match_ast! {\n         match node {\n-            ast::Struct(it) => (it.name(), it.generic_param_list()),\n-            ast::Enum(it) => (it.name(), it.generic_param_list()),\n-            ast::Union(it) => (it.name(), it.generic_param_list()),\n+            ast::Struct(it) => {\n+                (it.name(), it.generic_param_list(), it.field_list().into_iter().collect::<Vec<_>>())\n+            },\n+            ast::Enum(it) => (it.name(), it.generic_param_list(), it.variant_list().into_iter().flat_map(|x| x.variants()).filter_map(|x| x.field_list()).collect()),\n+            ast::Union(it) => (it.name(), it.generic_param_list(), it.record_field_list().into_iter().map(|x| ast::FieldList::RecordFieldList(x)).collect()),\n             _ => {\n                 debug!(\"unexpected node is {:?}\", node);\n                 return Err(ExpandError::Other(\"expected struct, enum or union\".into()))\n             },\n         }\n     };\n+    let field_types = fields\n+        .into_iter()\n+        .flat_map(|f| match f {\n+            ast::FieldList::RecordFieldList(x) => Either::Left(\n+                x.fields()\n+                    .filter_map(|x| x.ty())\n+                    .map(|x| mbe::syntax_node_to_token_tree(x.syntax()).0),\n+            ),\n+            ast::FieldList::TupleFieldList(x) => Either::Right(\n+                x.fields()\n+                    .filter_map(|x| x.ty())\n+                    .map(|x| mbe::syntax_node_to_token_tree(x.syntax()).0),\n+            ),\n+        })\n+        .collect::<Vec<_>>();\n     let name = name.ok_or_else(|| {\n         debug!(\"parsed item has no name\");\n         ExpandError::Other(\"missing name\".into())\n@@ -97,35 +118,46 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, ExpandError> {\n         .into_iter()\n         .flat_map(|param_list| param_list.type_or_const_params())\n         .map(|param| {\n-            if let ast::TypeOrConstParam::Const(param) = param {\n+            let name = param\n+                .name()\n+                .map(|x| mbe::syntax_node_to_token_tree(x.syntax()).0)\n+                .unwrap_or_else(tt::Subtree::empty);\n+            let bounds = match &param {\n+                ast::TypeOrConstParam::Type(x) => {\n+                    x.type_bound_list().map(|x| mbe::syntax_node_to_token_tree(x.syntax()).0)\n+                }\n+                ast::TypeOrConstParam::Const(_) => None,\n+            };\n+            let ty = if let ast::TypeOrConstParam::Const(param) = param {\n                 let ty = param\n                     .ty()\n                     .map(|ty| mbe::syntax_node_to_token_tree(ty.syntax()).0)\n                     .unwrap_or_else(tt::Subtree::empty);\n                 Some(ty)\n             } else {\n                 None\n-            }\n+            };\n+            (name, ty, bounds)\n         })\n         .collect();\n-    Ok(BasicAdtInfo { name: name_token, param_types })\n+    Ok(BasicAdtInfo { name: name_token, param_types, field_types })\n }\n \n fn expand_simple_derive(tt: &tt::Subtree, trait_path: tt::Subtree) -> ExpandResult<tt::Subtree> {\n     let info = match parse_adt(tt) {\n         Ok(info) => info,\n         Err(e) => return ExpandResult::with_err(tt::Subtree::empty(), e),\n     };\n+    let mut where_block = vec![];\n     let (params, args): (Vec<_>, Vec<_>) = info\n         .param_types\n         .into_iter()\n-        .enumerate()\n-        .map(|(idx, param_ty)| {\n-            let ident = tt::Leaf::Ident(tt::Ident {\n-                span: tt::TokenId::unspecified(),\n-                text: format!(\"T{idx}\").into(),\n-            });\n+        .map(|(ident, param_ty, bound)| {\n             let ident_ = ident.clone();\n+            if let Some(b) = bound {\n+                let ident = ident.clone();\n+                where_block.push(quote! { #ident : #b , });\n+            }\n             if let Some(ty) = param_ty {\n                 (quote! { const #ident : #ty , }, quote! { #ident_ , })\n             } else {\n@@ -134,9 +166,16 @@ fn expand_simple_derive(tt: &tt::Subtree, trait_path: tt::Subtree) -> ExpandResu\n             }\n         })\n         .unzip();\n+\n+    where_block.extend(info.field_types.iter().map(|x| {\n+        let x = x.clone();\n+        let bound = trait_path.clone();\n+        quote! { #x : #bound , }\n+    }));\n+\n     let name = info.name;\n     let expanded = quote! {\n-        impl < ##params > #trait_path for #name < ##args > {}\n+        impl < ##params > #trait_path for #name < ##args > where ##where_block {}\n     };\n     ExpandResult::ok(expanded)\n }"}, {"sha": "91af5716ca54f19861914c1f6b3b10bc4b8e17c3", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/937ef97bc566d5b7ceac2c7a7711ef7a734b1614/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/937ef97bc566d5b7ceac2c7a7711ef7a734b1614/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=937ef97bc566d5b7ceac2c7a7711ef7a734b1614", "patch": "@@ -471,7 +471,7 @@ struct Foo {}\n \"#,\n             expect![[r#\"\n                 Clone\n-                impl < >core::clone::Clone for Foo< >{}\n+                impl < >core::clone::Clone for Foo< >where{}\n             \"#]],\n         );\n     }\n@@ -488,7 +488,7 @@ struct Foo {}\n \"#,\n             expect![[r#\"\n                 Copy\n-                impl < >core::marker::Copy for Foo< >{}\n+                impl < >core::marker::Copy for Foo< >where{}\n             \"#]],\n         );\n     }\n@@ -504,7 +504,7 @@ struct Foo {}\n \"#,\n             expect![[r#\"\n                 Copy\n-                impl < >core::marker::Copy for Foo< >{}\n+                impl < >core::marker::Copy for Foo< >where{}\n             \"#]],\n         );\n         check(\n@@ -516,7 +516,7 @@ struct Foo {}\n \"#,\n             expect![[r#\"\n                 Clone\n-                impl < >core::clone::Clone for Foo< >{}\n+                impl < >core::clone::Clone for Foo< >where{}\n             \"#]],\n         );\n     }"}]}