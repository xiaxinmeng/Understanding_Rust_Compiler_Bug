{"sha": "d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0OTI4YWQ3ZmQ2NjM2ZjFhMWY4ZDUxMjA5YTcwZjBlZTdhNWY0M2U=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-09-30T12:26:10Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-09-30T12:29:02Z"}, "message": "build-manifest: keep legacy behavior when invoking through ./x.py dist", "tree": {"sha": "e43c9e698b33f99312361c3dc7f6a1846ff69ed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e43c9e698b33f99312361c3dc7f6a1846ff69ed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl90eg8ACgkQPgar6Auq\n8ZwE5xAAkBgmBGGDoFJO5oeQ3DPdL1z3Qd8oQSBtywirCqXkleJjI5JpqIA4gnfD\nH8ofIZAER1ENasTGlr4habbnEbzx2pvF0HOcIqGGQj+idKFCB8T/3y6XgRTj/tT3\nWjF69HOqccSnzFkvySAJFP1b1bQmiixL5YbSvR+UF2PIGs5zjperMEaE+OZhGIYx\nkc/wNceU72U2KqLEUgNEh7KtasOsHHWDobDtgOnCSyfu8zHsUBJ4kgHBXvKrCOUL\nw94BocObEiPdQsWY4ctV2xgJe0Esq+Ki9fI4+bGEpiC2myUu98v8IIusb9OcNGC0\n9Fou03Pgeo1dcSZ/adiY8SXOonzH+oKY4Xbq2gkTGR/LmVfHoyIJTx370jxge3M7\nNL5U7Y1XHjmWb0HEDjJUqcaZ+jFHZCohyAOQUhdpc+R2uPI7cHDQeeVjjdnhgY12\ndBQLjsc8SQjsDrUHeNKAApm6SYojCkRZw/hQuPgkiswy3U5ZiKahAaBtN9TE/jqD\nX9bBB/pqQzOLJhjX4Frcmx8di+Wce3RsN95s7LpfKar1ucN1unEGMGjPixRYWGOj\n7zzP4jaZhwEah5TPIXtN5syxoXis/jBLot96tyHpte7LdtVbhbb+iMK5jCSSDKZS\nvPPsQkPZwDU1mrBygoJWV2qvWeJuM7CzuOf57ijcPgg0KysaI6o=\n=6SOR\n-----END PGP SIGNATURE-----", "payload": "tree e43c9e698b33f99312361c3dc7f6a1846ff69ed1\nparent e05e2f9a94f4fa43f9a77bb59184eeb46fd49577\nauthor Pietro Albini <pietro@pietroalbini.org> 1601468770 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1601468942 +0200\n\nbuild-manifest: keep legacy behavior when invoking through ./x.py dist\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e", "html_url": "https://github.com/rust-lang/rust/commit/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e05e2f9a94f4fa43f9a77bb59184eeb46fd49577", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05e2f9a94f4fa43f9a77bb59184eeb46fd49577", "html_url": "https://github.com/rust-lang/rust/commit/e05e2f9a94f4fa43f9a77bb59184eeb46fd49577"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "857e06d846de4b52ce5be2a9d17e00f5b38c2934", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e", "patch": "@@ -2371,6 +2371,7 @@ impl Step for HashSign {\n         cmd.arg(addr);\n         cmd.arg(&builder.config.channel);\n         cmd.arg(&builder.src);\n+        cmd.env(\"BUILD_MANIFEST_LEGACY\", \"1\");\n \n         builder.create_dir(&distdir(builder));\n "}, {"sha": "26e96c9fd8fdaf56d035dc6c3816af25b569b858", "filename": "src/tools/build-manifest/README.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e", "patch": "@@ -20,8 +20,7 @@ Then, you can generate the manifest and all the packages from `path/to/dist` to\n `path/to/output` with:\n \n ```\n-$ BUILD_MANIFEST_DISABLE_SIGNING=1 cargo +nightly run \\\n-    path/to/dist path/to/output 1970-01-01 http://example.com \\\n+$ cargo +nightly run path/to/dist path/to/output 1970-01-01 http://example.com \\\n     CHANNEL path/to/rust/repo\n ```\n "}, {"sha": "7821994e117c55c30777db97ea3367ac30f7a7b7", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=d4928ad7fd6636f1a1f8d51209a70f0ee7a5f43e", "patch": "@@ -232,26 +232,27 @@ struct Builder {\n \n     input: PathBuf,\n     output: PathBuf,\n-    gpg_passphrase: String,\n     digests: BTreeMap<String, String>,\n     s3_address: String,\n     date: String,\n \n-    should_sign: bool,\n+    legacy: bool,\n+    legacy_gpg_passphrase: String,\n }\n \n fn main() {\n-    // Avoid signing packages while manually testing\n-    // Do NOT set this envvar in CI\n-    let should_sign = env::var(\"BUILD_MANIFEST_DISABLE_SIGNING\").is_err();\n-\n-    // Safety check to ensure signing is always enabled on CI\n-    // The CI environment variable is set by both Travis and AppVeyor\n-    if !should_sign && env::var(\"CI\").is_ok() {\n-        println!(\"The 'BUILD_MANIFEST_DISABLE_SIGNING' env var can't be enabled on CI.\");\n-        println!(\"If you're not running this on CI, unset the 'CI' env var.\");\n-        panic!();\n-    }\n+    // Up until Rust 1.48 the release process relied on build-manifest to create the SHA256\n+    // checksums of released files and to sign the tarballs. That was moved over to promote-release\n+    // in time for the branching of Rust 1.48, but the old release process still had to work the\n+    // old way.\n+    //\n+    // When running build-manifest through the old ./x.py dist hash-and-sign the environment\n+    // variable will be set, enabling the legacy behavior of generating the .sha256 files and\n+    // signing the tarballs.\n+    //\n+    // Once the old release process is fully decommissioned, the environment variable, all the\n+    // related code in this tool and ./x.py dist hash-and-sign can be removed.\n+    let legacy = env::var(\"BUILD_MANIFEST_LEGACY\").is_ok();\n \n     let mut args = env::args().skip(1);\n     let input = PathBuf::from(args.next().unwrap());\n@@ -263,7 +264,7 @@ fn main() {\n \n     // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n-    if should_sign {\n+    if legacy {\n         // `x.py` passes the passphrase via stdin.\n         t!(io::stdin().read_to_string(&mut passphrase));\n     }\n@@ -273,12 +274,12 @@ fn main() {\n \n         input,\n         output,\n-        gpg_passphrase: passphrase,\n         digests: BTreeMap::new(),\n         s3_address,\n         date,\n \n-        should_sign,\n+        legacy,\n+        legacy_gpg_passphrase: passphrase,\n     }\n     .build();\n }\n@@ -604,7 +605,7 @@ impl Builder {\n     }\n \n     fn sign(&self, path: &Path) {\n-        if !self.should_sign {\n+        if !self.legacy {\n             return;\n         }\n \n@@ -627,7 +628,7 @@ impl Builder {\n             .arg(path)\n             .stdin(Stdio::piped());\n         let mut child = t!(cmd.spawn());\n-        t!(child.stdin.take().unwrap().write_all(self.gpg_passphrase.as_bytes()));\n+        t!(child.stdin.take().unwrap().write_all(self.legacy_gpg_passphrase.as_bytes()));\n         assert!(t!(child.wait()).success());\n     }\n "}]}