{"sha": "d31db02e477b642b0caf3057d034663d306fa733", "node_id": "C_kwDOAAsO6NoAKGQzMWRiMDJlNDc3YjY0MmIwY2FmMzA1N2QwMzQ2NjNkMzA2ZmE3MzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T14:09:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T14:09:25Z"}, "message": "Auto merge of #9507 - c410-f3r:arith, r=Alexendoo\n\n[arithmetic-side-effects] Consider references\n\nTakes into consideration integer references like `&i32::MAX` because currently things like `let _ = &1 + 0` trigger the lint.\n\nchangelog: FP: [`arithmetic_side_effects`]: Now ignores references\n  [9507](https://github.com/rust-lang/rust-clippy/pull/9507)", "tree": {"sha": "85326fb7cec41f763a508fed0970c8285a91a6f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85326fb7cec41f763a508fed0970c8285a91a6f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31db02e477b642b0caf3057d034663d306fa733", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31db02e477b642b0caf3057d034663d306fa733", "html_url": "https://github.com/rust-lang/rust/commit/d31db02e477b642b0caf3057d034663d306fa733", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31db02e477b642b0caf3057d034663d306fa733/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c153bd62377f3c563b9f6e9d6ba7742523c45209", "url": "https://api.github.com/repos/rust-lang/rust/commits/c153bd62377f3c563b9f6e9d6ba7742523c45209", "html_url": "https://github.com/rust-lang/rust/commit/c153bd62377f3c563b9f6e9d6ba7742523c45209"}, {"sha": "4c5f23082aff7c55d32de9869c0c40df94eeae37", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5f23082aff7c55d32de9869c0c40df94eeae37", "html_url": "https://github.com/rust-lang/rust/commit/4c5f23082aff7c55d32de9869c0c40df94eeae37"}], "stats": {"total": 213, "additions": 172, "deletions": 41}, "files": [{"sha": "c8a374d90b5592917b077eeee5429857b4965407", "filename": "clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 37, "deletions": 22, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d31db02e477b642b0caf3057d034663d306fa733/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31db02e477b642b0caf3057d034663d306fa733/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=d31db02e477b642b0caf3057d034663d306fa733", "patch": "@@ -9,7 +9,6 @@ use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::Ty;\n use rustc_session::impl_lint_pass;\n use rustc_span::source_map::{Span, Spanned};\n \n@@ -78,28 +77,47 @@ impl ArithmeticSideEffects {\n         )\n     }\n \n-    /// Explicit integers like `1` or `i32::MAX`. Does not take into consideration references.\n-    fn is_literal_integer(expr: &hir::Expr<'_>, expr_refs: Ty<'_>) -> bool {\n-        let is_integral = expr_refs.is_integral();\n-        let is_literal = matches!(expr.kind, hir::ExprKind::Lit(_));\n-        is_integral && is_literal\n-    }\n-\n+    // Common entry-point to avoid code duplication.\n     fn issue_lint(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n         let msg = \"arithmetic operation that can potentially result in unexpected side-effects\";\n         span_lint(cx, ARITHMETIC_SIDE_EFFECTS, expr.span, msg);\n         self.expr_span = Some(expr.span);\n     }\n \n+    /// * If `expr` is a literal integer like `1` or `i32::MAX`, returns itself.\n+    /// * Is `expr` is a literal integer reference like `&199`, returns the literal integer without\n+    ///   references.\n+    /// * If `expr` is anything else, returns `None`.\n+    fn literal_integer<'expr, 'tcx>(\n+        cx: &LateContext<'tcx>,\n+        expr: &'expr hir::Expr<'tcx>,\n+    ) -> Option<&'expr hir::Expr<'tcx>> {\n+        let expr_refs = cx.typeck_results().expr_ty(expr).peel_refs();\n+\n+        if !expr_refs.is_integral() {\n+            return None;\n+        }\n+\n+        if matches!(expr.kind, hir::ExprKind::Lit(_)) {\n+            return Some(expr);\n+        }\n+\n+        if let hir::ExprKind::AddrOf(.., inn) = expr.kind && let hir::ExprKind::Lit(_) = inn.kind {\n+            return Some(inn)\n+        }\n+\n+        None\n+    }\n+\n     /// Manages when the lint should be triggered. Operations in constant environments, hard coded\n     /// types, custom allowed types and non-constant operations that won't overflow are ignored.\n-    fn manage_bin_ops(\n+    fn manage_bin_ops<'tcx>(\n         &mut self,\n-        cx: &LateContext<'_>,\n-        expr: &hir::Expr<'_>,\n+        cx: &LateContext<'tcx>,\n+        expr: &hir::Expr<'tcx>,\n         op: &Spanned<hir::BinOpKind>,\n-        lhs: &hir::Expr<'_>,\n-        rhs: &hir::Expr<'_>,\n+        lhs: &hir::Expr<'tcx>,\n+        rhs: &hir::Expr<'tcx>,\n     ) {\n         if constant_simple(cx, cx.typeck_results(), expr).is_some() {\n             return;\n@@ -119,14 +137,11 @@ impl ArithmeticSideEffects {\n         if self.is_allowed_ty(cx, lhs) || self.is_allowed_ty(cx, rhs) {\n             return;\n         }\n-        let has_valid_op = match (\n-            Self::is_literal_integer(lhs, cx.typeck_results().expr_ty(lhs).peel_refs()),\n-            Self::is_literal_integer(rhs, cx.typeck_results().expr_ty(rhs).peel_refs()),\n-        ) {\n-            (true, true) => true,\n-            (true, false) => Self::has_valid_op(op, lhs),\n-            (false, true) => Self::has_valid_op(op, rhs),\n-            (false, false) => false,\n+        let has_valid_op = match (Self::literal_integer(cx, lhs), Self::literal_integer(cx, rhs)) {\n+            (None, None) => false,\n+            (None, Some(local_expr)) => Self::has_valid_op(op, local_expr),\n+            (Some(local_expr), None) => Self::has_valid_op(op, local_expr),\n+            (Some(_), Some(_)) => true,\n         };\n         if !has_valid_op {\n             self.issue_lint(cx, expr);\n@@ -135,7 +150,7 @@ impl ArithmeticSideEffects {\n }\n \n impl<'tcx> LateLintPass<'tcx> for ArithmeticSideEffects {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &hir::Expr<'tcx>) {\n         if self.expr_span.is_some() || self.const_span.map_or(false, |sp| sp.contains(expr.span)) {\n             return;\n         }"}, {"sha": "6741e1485472ca983d293639404320c53f3e7fd5", "filename": "tests/ui/arithmetic_side_effects.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d31db02e477b642b0caf3057d034663d306fa733/tests%2Fui%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31db02e477b642b0caf3057d034663d306fa733/tests%2Fui%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.rs?ref=d31db02e477b642b0caf3057d034663d306fa733", "patch": "@@ -2,11 +2,12 @@\n     clippy::assign_op_pattern,\n     clippy::erasing_op,\n     clippy::identity_op,\n+    clippy::op_ref,\n     clippy::unnecessary_owned_empty_strings,\n     arithmetic_overflow,\n     unconditional_panic\n )]\n-#![feature(inline_const, saturating_int_impl)]\n+#![feature(const_mut_refs, inline_const, saturating_int_impl)]\n #![warn(clippy::arithmetic_side_effects)]\n \n use core::num::{Saturating, Wrapping};\n@@ -79,33 +80,50 @@ pub fn const_ops_should_not_trigger_the_lint() {\n     const _: i32 = 1 + 1;\n     let _ = const { 1 + 1 };\n \n-    const _: i32 = { let mut n = -1; n = -(-1); n = -n; n };\n-    let _ = const { let mut n = -1; n = -(-1); n = -n; n };\n+    const _: i32 = { let mut n = 1; n = -1; n = -(-1); n = -n; n };\n+    let _ = const { let mut n = 1; n = -1; n = -(-1); n = -n; n };\n }\n \n-pub fn non_overflowing_runtime_ops_or_ops_already_handled_by_the_compiler() {\n+pub fn non_overflowing_ops_or_ops_already_handled_by_the_compiler_should_not_trigger_the_lint() {\n     let mut _n = i32::MAX;\n \n     // Assign\n     _n += 0;\n+    _n += &0;\n     _n -= 0;\n+    _n -= &0;\n     _n /= 99;\n+    _n /= &99;\n     _n %= 99;\n+    _n %= &99;\n     _n *= 0;\n+    _n *= &0;\n     _n *= 1;\n+    _n *= &1;\n \n     // Binary\n     _n = _n + 0;\n+    _n = _n + &0;\n     _n = 0 + _n;\n+    _n = &0 + _n;\n     _n = _n - 0;\n+    _n = _n - &0;\n     _n = 0 - _n;\n+    _n = &0 - _n;\n     _n = _n / 99;\n+    _n = _n / &99;\n     _n = _n % 99;\n+    _n = _n % &99;\n     _n = _n * 0;\n+    _n = _n * &0;\n     _n = 0 * _n;\n+    _n = &0 * _n;\n     _n = _n * 1;\n+    _n = _n * &1;\n     _n = 1 * _n;\n+    _n = &1 * _n;\n     _n = 23 + 85;\n+    _n = &23 + &85;\n \n     // Unary\n     _n = -1;\n@@ -117,23 +135,37 @@ pub fn overflowing_runtime_ops() {\n \n     // Assign\n     _n += 1;\n+    _n += &1;\n     _n -= 1;\n+    _n -= &1;\n     _n /= 0;\n+    _n /= &0;\n     _n %= 0;\n+    _n %= &0;\n     _n *= 2;\n+    _n *= &2;\n \n     // Binary\n     _n = _n + 1;\n+    _n = _n + &1;\n     _n = 1 + _n;\n+    _n = &1 + _n;\n     _n = _n - 1;\n+    _n = _n - &1;\n     _n = 1 - _n;\n+    _n = &1 - _n;\n     _n = _n / 0;\n+    _n = _n / &0;\n     _n = _n % 0;\n+    _n = _n % &0;\n     _n = _n * 2;\n+    _n = _n * &2;\n     _n = 2 * _n;\n+    _n = &2 * _n;\n \n     // Unary\n     _n = -_n;\n+    _n = -&_n;\n }\n \n fn main() {}"}, {"sha": "4dce13b624b4abc7603a72943d2cac3385a5f7d0", "filename": "tests/ui/arithmetic_side_effects.stderr", "status": "modified", "additions": 99, "deletions": 15, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/d31db02e477b642b0caf3057d034663d306fa733/tests%2Fui%2Farithmetic_side_effects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d31db02e477b642b0caf3057d034663d306fa733/tests%2Fui%2Farithmetic_side_effects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic_side_effects.stderr?ref=d31db02e477b642b0caf3057d034663d306fa733", "patch": "@@ -1,88 +1,172 @@\n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:119:5\n+  --> $DIR/arithmetic_side_effects.rs:137:5\n    |\n LL |     _n += 1;\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:120:5\n+  --> $DIR/arithmetic_side_effects.rs:138:5\n+   |\n+LL |     _n += &1;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:139:5\n    |\n LL |     _n -= 1;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:121:5\n+  --> $DIR/arithmetic_side_effects.rs:140:5\n+   |\n+LL |     _n -= &1;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:141:5\n    |\n LL |     _n /= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:122:5\n+  --> $DIR/arithmetic_side_effects.rs:142:5\n+   |\n+LL |     _n /= &0;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:143:5\n    |\n LL |     _n %= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:123:5\n+  --> $DIR/arithmetic_side_effects.rs:144:5\n+   |\n+LL |     _n %= &0;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:145:5\n    |\n LL |     _n *= 2;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:126:10\n+  --> $DIR/arithmetic_side_effects.rs:146:5\n+   |\n+LL |     _n *= &2;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:149:10\n    |\n LL |     _n = _n + 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:127:10\n+  --> $DIR/arithmetic_side_effects.rs:150:10\n+   |\n+LL |     _n = _n + &1;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:151:10\n    |\n LL |     _n = 1 + _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:128:10\n+  --> $DIR/arithmetic_side_effects.rs:152:10\n+   |\n+LL |     _n = &1 + _n;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:153:10\n    |\n LL |     _n = _n - 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:129:10\n+  --> $DIR/arithmetic_side_effects.rs:154:10\n+   |\n+LL |     _n = _n - &1;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:155:10\n    |\n LL |     _n = 1 - _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:130:10\n+  --> $DIR/arithmetic_side_effects.rs:156:10\n+   |\n+LL |     _n = &1 - _n;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:157:10\n    |\n LL |     _n = _n / 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:131:10\n+  --> $DIR/arithmetic_side_effects.rs:158:10\n+   |\n+LL |     _n = _n / &0;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:159:10\n    |\n LL |     _n = _n % 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:132:10\n+  --> $DIR/arithmetic_side_effects.rs:160:10\n+   |\n+LL |     _n = _n % &0;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:161:10\n    |\n LL |     _n = _n * 2;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:133:10\n+  --> $DIR/arithmetic_side_effects.rs:162:10\n+   |\n+LL |     _n = _n * &2;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:163:10\n    |\n LL |     _n = 2 * _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:136:10\n+  --> $DIR/arithmetic_side_effects.rs:164:10\n+   |\n+LL |     _n = &2 * _n;\n+   |          ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:167:10\n    |\n LL |     _n = -_n;\n    |          ^^^\n \n-error: aborting due to 14 previous errors\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:168:10\n+   |\n+LL |     _n = -&_n;\n+   |          ^^^^\n+\n+error: aborting due to 28 previous errors\n "}]}