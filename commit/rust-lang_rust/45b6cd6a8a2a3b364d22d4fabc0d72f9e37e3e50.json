{"sha": "45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50", "node_id": "C_kwDOAAsO6NoAKDQ1YjZjZDZhOGEyYTNiMzY0ZDIyZDRmYWJjMGQ3MmY5ZTM3ZTNlNTA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-28T14:31:32Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-06-28T14:32:31Z"}, "message": "Fix a crash for 11 single byte fields passed through the C abi\n\nFixes #1234", "tree": {"sha": "8eb8a2815490bf10493c54966cc28f77ca22359b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eb8a2815490bf10493c54966cc28f77ca22359b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50", "html_url": "https://github.com/rust-lang/rust/commit/45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1ac2df0c39ed12a4f4590319fb7b8045a5db5e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ac2df0c39ed12a4f4590319fb7b8045a5db5e5", "html_url": "https://github.com/rust-lang/rust/commit/c1ac2df0c39ed12a4f4590319fb7b8045a5db5e5"}], "stats": {"total": 57, "additions": 37, "deletions": 20}, "files": [{"sha": "6111e0352828e3179905c96bd6e45f7ca584a3f6", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50", "patch": "@@ -124,6 +124,23 @@ fn call_return_u128_pair() {\n     return_u128_pair();\n }\n \n+#[repr(C)]\n+pub struct bool_11 {\n+    field0: bool,\n+    field1: bool,\n+    field2: bool,\n+    field3: bool,\n+    field4: bool,\n+    field5: bool,\n+    field6: bool,\n+    field7: bool,\n+    field8: bool,\n+    field9: bool,\n+    field10: bool,\n+}\n+\n+extern \"C\" fn bool_struct_in_11(arg0: bool_11) {}\n+\n #[allow(unreachable_code)] // FIXME false positive\n fn main() {\n     take_unique(Unique {\n@@ -134,6 +151,20 @@ fn main() {\n \n     call_return_u128_pair();\n \n+    bool_struct_in_11(bool_11 {\n+        field0: true,\n+        field1: true,\n+        field2: true,\n+        field3: true,\n+        field4: true,\n+        field5: true,\n+        field6: true,\n+        field7: true,\n+        field8: true,\n+        field9: true,\n+        field10: true,\n+    });\n+\n     let slice = &[0, 1] as &[i32];\n     let slice_ptr = slice as *const [i32] as *const i32;\n "}, {"sha": "33c5f3283be5939c7fd3f8abf23dbd860c1d0837", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=45b6cd6a8a2a3b364d22d4fabc0d72f9e37e3e50", "patch": "@@ -18,9 +18,9 @@ fn reg_to_abi_param(reg: Reg) -> AbiParam {\n     let clif_ty = match (reg.kind, reg.size.bytes()) {\n         (RegKind::Integer, 1) => types::I8,\n         (RegKind::Integer, 2) => types::I16,\n-        (RegKind::Integer, 4) => types::I32,\n-        (RegKind::Integer, 8) => types::I64,\n-        (RegKind::Integer, 16) => types::I128,\n+        (RegKind::Integer, 3..=4) => types::I32,\n+        (RegKind::Integer, 5..=8) => types::I64,\n+        (RegKind::Integer, 9..=16) => types::I128,\n         (RegKind::Float, 4) => types::F32,\n         (RegKind::Float, 8) => types::F64,\n         (RegKind::Vector, size) => types::I8.by(u16::try_from(size).unwrap()).unwrap(),\n@@ -48,23 +48,9 @@ fn cast_target_to_abi_params(cast: CastTarget) -> SmallVec<[AbiParam; 2]> {\n         )\n     };\n \n-    if cast.prefix.iter().all(|x| x.is_none()) {\n-        // Simplify to a single unit when there is no prefix and size <= unit size\n-        if cast.rest.total <= cast.rest.unit.size {\n-            let clif_ty = match (cast.rest.unit.kind, cast.rest.unit.size.bytes()) {\n-                (RegKind::Integer, 1) => types::I8,\n-                (RegKind::Integer, 2) => types::I16,\n-                (RegKind::Integer, 3..=4) => types::I32,\n-                (RegKind::Integer, 5..=8) => types::I64,\n-                (RegKind::Integer, 9..=16) => types::I128,\n-                (RegKind::Float, 4) => types::F32,\n-                (RegKind::Float, 8) => types::F64,\n-                (RegKind::Vector, size) => types::I8.by(u16::try_from(size).unwrap()).unwrap(),\n-                _ => unreachable!(\"{:?}\", cast.rest.unit),\n-            };\n-            return smallvec![AbiParam::new(clif_ty)];\n-        }\n-    }\n+    // Note: Unlike the LLVM equivalent of this code we don't have separate branches for when there\n+    // is no prefix as a single unit, an array and a heterogeneous struct are not represented using\n+    // different types in Cranelift IR. Instead a single array of primitive types is used.\n \n     // Create list of fields in the main structure\n     let mut args = cast"}]}