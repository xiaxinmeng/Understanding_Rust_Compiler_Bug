{"sha": "772311392ff45ef515d11715e925798c6ac7514b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MjMxMTM5MmZmNDVlZjUxNWQxMTcxNWU5MjU3OThjNmFjNzUxNGI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-21T11:14:54Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-21T11:14:54Z"}, "message": "Merge #1300\n\n1300: sort hash maps for tests r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9ae85eafb717fa3255545b48645d5e8acd73eedc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae85eafb717fa3255545b48645d5e8acd73eedc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/772311392ff45ef515d11715e925798c6ac7514b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/772311392ff45ef515d11715e925798c6ac7514b", "html_url": "https://github.com/rust-lang/rust/commit/772311392ff45ef515d11715e925798c6ac7514b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/772311392ff45ef515d11715e925798c6ac7514b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "8b6f02d0d6f587c344cda98d64eef784a58e0249", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6f02d0d6f587c344cda98d64eef784a58e0249", "html_url": "https://github.com/rust-lang/rust/commit/8b6f02d0d6f587c344cda98d64eef784a58e0249"}, {"sha": "0efb5364c35636d5e985e23bd11965f574cbd9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/0efb5364c35636d5e985e23bd11965f574cbd9da", "html_url": "https://github.com/rust-lang/rust/commit/0efb5364c35636d5e985e23bd11965f574cbd9da"}], "stats": {"total": 422, "additions": 203, "deletions": 219}, "files": [{"sha": "02adbe0a96494dd5a868d245a4cdcdfd4705b292", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/772311392ff45ef515d11715e925798c6ac7514b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/772311392ff45ef515d11715e925798c6ac7514b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=772311392ff45ef515d11715e925798c6ac7514b", "patch": "@@ -257,7 +257,7 @@ dependencies = [\n  \"encode_unicode 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termios 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -551,7 +551,7 @@ dependencies = [\n  \"console 0.7.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"number_prefix 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1242,7 +1242,7 @@ dependencies = [\n  \"ra_parser 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n  \"rowan 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smol_str 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smol_str 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"test_utils 0.1.0\",\n  \"text_unit 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1262,7 +1262,7 @@ dependencies = [\n name = \"ra_tt\"\n version = \"0.1.0\"\n dependencies = [\n- \"smol_str 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smol_str 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1467,7 +1467,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"colosseum 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smol_str 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"smol_str 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"text_unit 0.1.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1625,7 +1625,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"smol_str\"\n-version = \"0.1.10\"\n+version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2181,7 +2181,7 @@ dependencies = [\n \"checksum slab 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c111b5bd5695e56cffe5129854aa230b39c93a305372fdbb2668ca2394eea9f8\"\n \"checksum slug 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3bc762e6a4b6c6fcaade73e77f9ebc6991b676f88bb2358bddb56560f073373\"\n \"checksum smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4488ae950c49d403731982257768f48fada354a5203fe81f9bb6f43ca9002be\"\n-\"checksum smol_str 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d077b3367211e9c6e2e012fb804c444e0d80ab5a51ae4137739b58e6446dcaef\"\n+\"checksum smol_str 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e6507d018aa8dfcaa08aaab587605591cd2109df66a921486a2220e2daf9fa29\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum stacker 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fb79482f57cf598af52094ec4cc3b3c42499d3ce5bd426f2ac41515b7e57404b\"\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\""}, {"sha": "e3a82cf03f1f1c413affe8751498e4e1736080e6", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=772311392ff45ef515d11715e925798c6ac7514b", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{ast, SmolStr};\n /// `Name` is a wrapper around string, which is used in hir for both references\n /// and declarations. In theory, names should also carry hygiene info, but we are\n /// not there yet!\n-#[derive(Clone, PartialEq, Eq, Hash)]\n+#[derive(Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub struct Name {\n     text: SmolStr,\n }"}, {"sha": "958871b17ff1f4fec4d7e8362bfdfeeb191d5312", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 129, "deletions": 145, "changes": 274, "blob_url": "https://github.com/rust-lang/rust/blob/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=772311392ff45ef515d11715e925798c6ac7514b", "patch": "@@ -8,7 +8,11 @@ use ra_db::SourceDatabase;\n use test_utils::covers;\n use insta::assert_snapshot_matches;\n \n-use crate::{Crate, mock::{MockDatabase, CrateGraphFixture}, nameres::Resolution};\n+use crate::{\n+    Crate,\n+    mock::{MockDatabase, CrateGraphFixture},\n+    nameres::Resolution,\n+};\n \n use super::*;\n \n@@ -25,12 +29,15 @@ fn compute_crate_def_map(fixture: &str, graph: Option<CrateGraphFixture>) -> Arc\n fn render_crate_def_map(map: &CrateDefMap) -> String {\n     let mut buf = String::new();\n     go(&mut buf, map, \"\\ncrate\", map.root);\n-    return buf;\n+    return buf.trim().to_string();\n \n     fn go(buf: &mut String, map: &CrateDefMap, path: &str, module: CrateModuleId) {\n         *buf += path;\n         *buf += \"\\n\";\n-        for (name, res) in map.modules[module].scope.items.iter() {\n+\n+        let mut entries = map.modules[module].scope.items.iter().collect::<Vec<_>>();\n+        entries.sort_by_key(|(name, _)| *name);\n+        for (name, res) in entries {\n             *buf += &format!(\"{}: {}\\n\", name, dump_resolution(res))\n         }\n         for (name, child) in map.modules[module].children.iter() {\n@@ -79,21 +86,20 @@ fn crate_def_map_smoke_test() {\n         \",\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-V: t v\n-E: t\n-foo: t\n-S: t v\n-\n-crate::foo\n-bar: t\n-f: v\n-\n-crate::foo::bar\n-Baz: t v\n-E: t\n-\"###\n-    )\n+        \u22eecrate\n+        \u22eeE: t\n+        \u22eeS: t v\n+        \u22eeV: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22eef: v\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+        \u22eeE: t\n+    \"###)\n }\n \n #[test]\n@@ -113,12 +119,12 @@ fn bogus_paths() {\n         \",\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-foo: t\n-S: t v\n-\n-crate::foo\n-\"###\n+   \u22eecrate\n+   \u22eeS: t v\n+   \u22eefoo: t\n+   \u22ee\n+   \u22eecrate::foo\n+    \"###\n     )\n }\n \n@@ -137,13 +143,13 @@ fn use_as() {\n     );\n     assert_snapshot_matches!(map,\n         @r###\"\n-crate\n-Foo: t v\n-foo: t\n-\n-crate::foo\n-Baz: t v\n-\"###\n+   \u22eecrate\n+   \u22eeFoo: t v\n+   \u22eefoo: t\n+   \u22ee\n+   \u22eecrate::foo\n+   \u22eeBaz: t v\n+    \"###\n     );\n }\n \n@@ -164,21 +170,19 @@ fn use_trees() {\n         pub enum Quux {};\n         \",\n     );\n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-Quux: t\n-Baz: t v\n-foo: t\n-\n-crate::foo\n-bar: t\n-\n-crate::foo::bar\n-Quux: t\n-Baz: t v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: t v\n+        \u22eeQuux: t\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+        \u22eeQuux: t\n+    \"###);\n }\n \n #[test]\n@@ -199,20 +203,18 @@ fn re_exports() {\n         pub struct Baz;\n         \",\n     );\n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-Baz: t v\n-foo: t\n-\n-crate::foo\n-bar: t\n-Baz: t v\n-\n-crate::foo::bar\n-Baz: t v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n }\n \n #[test]\n@@ -237,10 +239,10 @@ fn std_prelude() {\n         },\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-Bar: t v\n-Baz: t v\n-\"###);\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eeBaz: t v\n+    \"###);\n }\n \n #[test]\n@@ -254,10 +256,10 @@ fn can_import_enum_variant() {\n         \",\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-V: t v\n-E: t\n-\"###\n+        \u22eecrate\n+        \u22eeE: t\n+        \u22eeV: t v\n+    \"###\n     );\n }\n \n@@ -285,20 +287,18 @@ fn edition_2015_imports() {\n         },\n     );\n \n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-bar: t\n-foo: t\n-\n-crate::bar\n-Bar: t v\n-\n-crate::foo\n-FromLib: t v\n-Bar: t v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eebar: t\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::bar\n+        \u22eeBar: t v\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBar: t v\n+        \u22eeFromLib: t v\n+    \"###);\n }\n \n #[test]\n@@ -317,16 +317,14 @@ fn module_resolution_works_for_non_standard_filenames() {\n         },\n     );\n \n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-Bar: t v\n-foo: t\n-\n-crate::foo\n-Bar: t v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBar: t v\n+    \"###);\n }\n \n #[test]\n@@ -348,12 +346,10 @@ fn name_res_works_for_broken_modules() {\n         pub struct Baz;\n         \",\n     );\n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-Baz: _\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: _\n+    \"###);\n }\n \n #[test]\n@@ -369,19 +365,17 @@ fn item_map_using_self() {\n         pub struct Baz;\n         \",\n     );\n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-Baz: t v\n-foo: t\n-\n-crate::foo\n-bar: t\n-\n-crate::foo::bar\n-Baz: t v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n }\n \n #[test]\n@@ -400,12 +394,10 @@ fn item_map_across_crates() {\n         },\n     );\n \n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-Baz: t v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: t v\n+    \"###);\n }\n \n #[test]\n@@ -430,12 +422,10 @@ fn extern_crate_rename() {\n         },\n     );\n \n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-Arc: t v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeArc: t v\n+    \"###);\n }\n \n #[test]\n@@ -462,9 +452,9 @@ fn extern_crate_rename_2015_edition() {\n \n     assert_snapshot_matches!(map,\n         @r###\"\n-crate\n-Arc: t v\n-\"###\n+   \u22eecrate\n+   \u22eeArc: t v\n+    \"###\n     );\n }\n \n@@ -490,12 +480,10 @@ fn import_across_source_roots() {\n         },\n     );\n \n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-C: t v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeC: t v\n+    \"###);\n }\n \n #[test]\n@@ -519,12 +507,10 @@ fn reexport_across_crates() {\n         },\n     );\n \n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-Baz: t v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: t v\n+    \"###);\n }\n \n #[test]\n@@ -544,13 +530,11 @@ fn values_dont_shadow_extern_crates() {\n         },\n     );\n \n-    assert_snapshot_matches!(map,\n-        @r###\"\n-crate\n-Bar: t v\n-foo: v\n-\"###\n-    );\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBar: t v\n+        \u22eefoo: v\n+    \"###);\n }\n \n #[test]"}, {"sha": "e1519ca6bbfa0e10be8208bd44355a7df55d28fe", "filename": "crates/ra_hir/src/nameres/tests/globs.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fglobs.rs?ref=772311392ff45ef515d11715e925798c6ac7514b", "patch": "@@ -18,20 +18,20 @@ fn glob_1() {\n         \",\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-bar: t\n-Foo: t v\n-Baz: t v\n-foo: t\n-\n-crate::foo\n-bar: t\n-Foo: t v\n-Baz: t v\n-\n-crate::foo::bar\n-Baz: t v\n-\"###\n+   \u22eecrate\n+   \u22eeBaz: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22eefoo: t\n+   \u22ee\n+   \u22eecrate::foo\n+   \u22eeBaz: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22ee\n+   \u22eecrate::foo::bar\n+   \u22eeBaz: t v\n+    \"###\n     );\n }\n \n@@ -54,22 +54,22 @@ fn glob_2() {\n         \",\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-bar: t\n-Foo: t v\n-Baz: t v\n-foo: t\n-\n-crate::foo\n-bar: t\n-Foo: t v\n-Baz: t v\n-\n-crate::foo::bar\n-bar: t\n-Foo: t v\n-Baz: t v\n-\"###\n+   \u22eecrate\n+   \u22eeBaz: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22eefoo: t\n+   \u22ee\n+   \u22eecrate::foo\n+   \u22eeBaz: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22ee\n+   \u22eecrate::foo::bar\n+   \u22eeBaz: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+    \"###\n     );\n }\n \n@@ -90,9 +90,9 @@ fn glob_across_crates() {\n         },\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-Baz: t v\n-\"###\n+   \u22eecrate\n+   \u22eeBaz: t v\n+    \"###\n     );\n }\n \n@@ -109,10 +109,10 @@ fn glob_enum() {\n         \",\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-Foo: t\n-Bar: t v\n-Baz: t v\n-\"###\n+   \u22eecrate\n+   \u22eeBar: t v\n+   \u22eeBaz: t v\n+   \u22eeFoo: t\n+    \"###\n     );\n }"}, {"sha": "f7ca380ad175e7ec33f9f76a390d6ab865e4ce9a", "filename": "crates/ra_hir/src/nameres/tests/macros.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=772311392ff45ef515d11715e925798c6ac7514b", "patch": "@@ -18,14 +18,14 @@ fn macro_rules_are_globally_visible() {\n         \",\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-nested: t\n-Foo: t v\n-\n-crate::nested\n-Bar: t v\n-Baz: t v\n-\"###);\n+   \u22eecrate\n+   \u22eeFoo: t v\n+   \u22eenested: t\n+   \u22ee\n+   \u22eecrate::nested\n+   \u22eeBar: t v\n+   \u22eeBaz: t v\n+    \"###);\n }\n \n #[test]\n@@ -45,15 +45,15 @@ fn macro_rules_can_define_modules() {\n         \",\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-n1: t\n-\n-crate::n1\n-n2: t\n-\n-crate::n1::n2\n-X: t v\n-\"###);\n+   \u22eecrate\n+   \u22een1: t\n+   \u22ee\n+   \u22eecrate::n1\n+   \u22een2: t\n+   \u22ee\n+   \u22eecrate::n1::n2\n+   \u22eeX: t v\n+    \"###);\n }\n \n #[test]\n@@ -81,14 +81,14 @@ fn macro_rules_from_other_crates_are_visible() {\n         },\n     );\n     assert_snapshot_matches!(map, @r###\"\n-crate\n-bar: t\n-Foo: t v\n-Bar: t v\n-\n-crate::bar\n-bar: t\n-Foo: t v\n-Bar: t v\n-\"###);\n+   \u22eecrate\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+   \u22ee\n+   \u22eecrate::bar\n+   \u22eeBar: t v\n+   \u22eeFoo: t v\n+   \u22eebar: t\n+    \"###);\n }"}, {"sha": "082bc52532aeab557bc506235bd4a49fae6bdcd0", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/772311392ff45ef515d11715e925798c6ac7514b/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=772311392ff45ef515d11715e925798c6ac7514b", "patch": "@@ -18,7 +18,7 @@ rowan = \"0.5.0\"\n # ideally, `serde` should be enabled by `ra_lsp_server`, but we enable it here\n # to reduce number of compilations\n text_unit = { version = \"0.1.8\", features = [\"serde\"] }\n-smol_str = { version = \"0.1.9\", features = [\"serde\"] }\n+smol_str = { version = \"0.1.11\", features = [\"serde\"] }\n \n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_parser = { path = \"../ra_parser\" }"}]}