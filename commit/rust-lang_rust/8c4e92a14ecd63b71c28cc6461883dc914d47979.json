{"sha": "8c4e92a14ecd63b71c28cc6461883dc914d47979", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNGU5MmExNGVjZDYzYjcxYzI4Y2M2NDYxODgzZGM5MTRkNDc5Nzk=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-10-17T05:21:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-17T05:21:04Z"}, "message": "Catch parser panic in format_snippet (#3103)", "tree": {"sha": "51689430ad08b578a721053ffc78345cf1764ef0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51689430ad08b578a721053ffc78345cf1764ef0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c4e92a14ecd63b71c28cc6461883dc914d47979", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbxsbACRBK7hj4Ov3rIwAAdHIIAK5FZtm3loehiamd0GC1t8xt\nXrtOHei/Mi0ykmK13/1oD/+3GZQEQDHK/o5apIwRPi1gsS10RjKYblqVPCxsEdHt\nDoL2BmgCxoEHKn53H4FJupl5/Bi3Bug/CslKg0f68Mr935gPTxN9wBvOeOT7b5AG\n3BXixd7LSlU2VuVHo4QOi6V+jPoc8qayDQoqYhHm7YXUOVFR96ehOz6yXtb0VuMe\nWcAT0koalODUosO/mqZVasNir2xnYSVB7Y53IiMgkDSinMIdK4nchOda3UJgSptE\nrhwjjkzMxG/su16xyqeJtDHML3rso5wIiZeSalcHlgonxwP5CWUrN3OahyVvBik=\n=SfHN\n-----END PGP SIGNATURE-----\n", "payload": "tree 51689430ad08b578a721053ffc78345cf1764ef0\nparent c09d7ef08843e2b23e38462ce8e6e1b07559d6d3\nauthor Seiichi Uchida <seuchida@gmail.com> 1539753664 +0900\ncommitter GitHub <noreply@github.com> 1539753664 +0900\n\nCatch parser panic in format_snippet (#3103)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c4e92a14ecd63b71c28cc6461883dc914d47979", "html_url": "https://github.com/rust-lang/rust/commit/8c4e92a14ecd63b71c28cc6461883dc914d47979", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c4e92a14ecd63b71c28cc6461883dc914d47979/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3", "html_url": "https://github.com/rust-lang/rust/commit/c09d7ef08843e2b23e38462ce8e6e1b07559d6d3"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "9540b9fd20e6c1812767244bb3cdf0daf226f4b9", "filename": "src/lib.rs", "status": "modified", "additions": 21, "deletions": 13, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8c4e92a14ecd63b71c28cc6461883dc914d47979/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4e92a14ecd63b71c28cc6461883dc914d47979/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8c4e92a14ecd63b71c28cc6461883dc914d47979", "patch": "@@ -42,6 +42,7 @@ use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, Write};\n use std::mem;\n+use std::panic;\n use std::path::PathBuf;\n use std::rc::Rc;\n use syntax::ast;\n@@ -355,21 +356,28 @@ impl fmt::Display for FormatReport {\n /// Format the given snippet. The snippet is expected to be *complete* code.\n /// When we cannot parse the given snippet, this function returns `None`.\n fn format_snippet(snippet: &str, config: &Config) -> Option<String> {\n-    let mut out: Vec<u8> = Vec::with_capacity(snippet.len() * 2);\n-    let input = Input::Text(snippet.into());\n     let mut config = config.clone();\n-    config.set().emit_mode(config::EmitMode::Stdout);\n-    config.set().verbose(Verbosity::Quiet);\n-    config.set().hide_parse_errors(true);\n-    {\n-        let mut session = Session::new(config, Some(&mut out));\n-        let result = session.format(input);\n-        let formatting_error = session.errors.has_macro_format_failure\n-            || session.out.as_ref().unwrap().is_empty() && !snippet.is_empty();\n-        if formatting_error || result.is_err() {\n-            return None;\n+    let out = panic::catch_unwind(|| {\n+        let mut out: Vec<u8> = Vec::with_capacity(snippet.len() * 2);\n+        config.set().emit_mode(config::EmitMode::Stdout);\n+        config.set().verbose(Verbosity::Quiet);\n+        config.set().hide_parse_errors(true);\n+        let formatting_error = {\n+            let input = Input::Text(snippet.into());\n+            let mut session = Session::new(config, Some(&mut out));\n+            let result = session.format(input);\n+            session.errors.has_macro_format_failure\n+                || session.out.as_ref().unwrap().is_empty() && !snippet.is_empty()\n+                || result.is_err()\n+        };\n+        if formatting_error {\n+            None\n+        } else {\n+            Some(out)\n         }\n-    }\n+    })\n+    .ok()??; // The first try operator handles the error from catch_unwind,\n+             // whereas the second one handles None from the closure.\n     String::from_utf8(out).ok()\n }\n "}, {"sha": "6d33dcfce552920041d76dc92366605d898f7bac", "filename": "tests/source/invalid-rust-code-in-doc-comment.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8c4e92a14ecd63b71c28cc6461883dc914d47979/tests%2Fsource%2Finvalid-rust-code-in-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4e92a14ecd63b71c28cc6461883dc914d47979/tests%2Fsource%2Finvalid-rust-code-in-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Finvalid-rust-code-in-doc-comment.rs?ref=8c4e92a14ecd63b71c28cc6461883dc914d47979", "patch": "@@ -0,0 +1,20 @@\n+// rustfmt-format_doc_comments: true\n+\n+/// ```rust\n+/// if (true) { \u2026 }\n+/// ```\n+fn a() {\n+}\n+\n+/// ```rust\n+/// if foo() {\n+///     \u2026\n+/// }\n+/// ```\n+fn a() {\n+}\n+\n+/// ```rust\n+/// k1 == k2 \u21d2 hash(k1) == hash(k2)\n+/// ```\n+pub   struct   a   ;"}, {"sha": "2593410a418922f9fc91dca88fc35cb0929f7b16", "filename": "tests/target/invalid-rust-code-in-doc-comment.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c4e92a14ecd63b71c28cc6461883dc914d47979/tests%2Ftarget%2Finvalid-rust-code-in-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c4e92a14ecd63b71c28cc6461883dc914d47979/tests%2Ftarget%2Finvalid-rust-code-in-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Finvalid-rust-code-in-doc-comment.rs?ref=8c4e92a14ecd63b71c28cc6461883dc914d47979", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-format_doc_comments: true\n+\n+/// ```rust\n+/// if (true) { \u2026 }\n+/// ```\n+fn a() {}\n+\n+/// ```rust\n+/// if foo() {\n+///     \u2026\n+/// }\n+/// ```\n+fn a() {}\n+\n+/// ```rust\n+/// k1 == k2 \u21d2 hash(k1) == hash(k2)\n+/// ```\n+pub struct a;"}]}