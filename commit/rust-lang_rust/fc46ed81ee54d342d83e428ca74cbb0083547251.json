{"sha": "fc46ed81ee54d342d83e428ca74cbb0083547251", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNDZlZDgxZWU1NGQzNDJkODNlNDI4Y2E3NGNiYjAwODM1NDcyNTE=", "commit": {"author": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-05T04:04:57Z"}, "committer": {"name": "Kevin DeLorey", "email": "2295721+kdelorey@users.noreply.github.com", "date": "2020-02-05T04:04:57Z"}, "message": "Add detection for a user already starting a fn impl and still providing completion.", "tree": {"sha": "4f81d8e27f25abf0eb133f260f1829a3ee52f3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f81d8e27f25abf0eb133f260f1829a3ee52f3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc46ed81ee54d342d83e428ca74cbb0083547251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc46ed81ee54d342d83e428ca74cbb0083547251", "html_url": "https://github.com/rust-lang/rust/commit/fc46ed81ee54d342d83e428ca74cbb0083547251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc46ed81ee54d342d83e428ca74cbb0083547251/comments", "author": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kdelorey", "id": 2295721, "node_id": "MDQ6VXNlcjIyOTU3MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/2295721?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kdelorey", "html_url": "https://github.com/kdelorey", "followers_url": "https://api.github.com/users/kdelorey/followers", "following_url": "https://api.github.com/users/kdelorey/following{/other_user}", "gists_url": "https://api.github.com/users/kdelorey/gists{/gist_id}", "starred_url": "https://api.github.com/users/kdelorey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kdelorey/subscriptions", "organizations_url": "https://api.github.com/users/kdelorey/orgs", "repos_url": "https://api.github.com/users/kdelorey/repos", "events_url": "https://api.github.com/users/kdelorey/events{/privacy}", "received_events_url": "https://api.github.com/users/kdelorey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "698ff91c1309b189ca0f08e3d62d219305ae5f46", "url": "https://api.github.com/repos/rust-lang/rust/commits/698ff91c1309b189ca0f08e3d62d219305ae5f46", "html_url": "https://github.com/rust-lang/rust/commit/698ff91c1309b189ca0f08e3d62d219305ae5f46"}], "stats": {"total": 195, "additions": 157, "deletions": 38}, "files": [{"sha": "c94ebee82b3d8719a8cfed4a0347952204a2fe39", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 157, "deletions": 5, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/fc46ed81ee54d342d83e428ca74cbb0083547251/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc46ed81ee54d342d83e428ca74cbb0083547251/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=fc46ed81ee54d342d83e428ca74cbb0083547251", "patch": "@@ -1,9 +1,9 @@\n-use crate::completion::{CompletionContext, Completions};\n+use crate::completion::{CompletionContext, Completions, CompletionItem, CompletionKind, CompletionItemKind};\n \n use ast::{ NameOwner };\n use hir::{ self, db::HirDatabase };\n \n-use ra_syntax::{ ast, ast::AstNode };\n+use ra_syntax::{ SyntaxKind, ast, ast::AstNode, TextRange };\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {\n     let item_list = ast::ItemList::cast(ctx.token.parent());\n@@ -24,6 +24,37 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n         return;\n     }\n \n+    // for cases where the user has already started writing the function def, navigate\n+    // the previous tokens in order to find the location of that token so that we may \n+    // replace it with our completion.\n+    let start_position = {        \n+        let mut prev_token = ctx.token\n+            .prev_token()\n+            .clone();\n+\n+        while let Some(token) = &prev_token {\n+            match token.kind() {\n+                SyntaxKind::FN_KW => break,\n+\n+                // todo:    attempt to find a better way of determining when to stop as\n+                //          the following feels sketchy.\n+                SyntaxKind::IMPL_KW |\n+                SyntaxKind::L_CURLY |\n+                SyntaxKind::R_CURLY => {\n+                    prev_token = None;\n+                    break;\n+                }\n+                _ => {}\n+            }\n+\n+            prev_token = token.prev_token().clone();\n+        }\n+\n+        prev_token\n+            .map(|t| t.text_range())\n+            .unwrap_or(ctx.source_range())\n+    };\n+\n     let trait_ = target_trait.unwrap();\n \n     let trait_items = trait_.items(ctx.db);\n@@ -97,7 +128,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n \n     for item in missing_items {\n         match item {\n-            hir::AssocItem::Function(f) => acc.add_function_impl(ctx, f),\n+            hir::AssocItem::Function(f) => add_function_impl(acc, ctx, f, start_position),\n             _ => {}\n         }\n     }\n@@ -122,6 +153,40 @@ fn resolve_target_trait(\n     }\n }\n \n+pub(crate) fn add_function_impl(acc: &mut Completions, ctx: &CompletionContext, func: &hir::Function, start: TextRange) {\n+    use crate::display::FunctionSignature;\n+\n+    let display = FunctionSignature::from_hir(ctx.db, func.clone());\n+\n+    let func_name = func.name(ctx.db);\n+\n+    let label = if func.params(ctx.db).len() > 0 {\n+        format!(\"fn {}(..)\", func_name.to_string())\n+    } else {\n+        format!(\"fn {}()\", func_name.to_string())\n+    };\n+\n+    let builder = CompletionItem::new(CompletionKind::Reference, start, label);\n+\n+    let completion_kind = if func.has_self_param(ctx.db) {\n+        CompletionItemKind::Method\n+    } else {\n+        CompletionItemKind::Function\n+    };\n+    \n+    let snippet = {\n+        let mut s = format!(\"{}\", display);\n+        s.push_str(\" {}\");\n+        s\n+    };\n+\n+    builder\n+        .insert_text(snippet)\n+        .kind(completion_kind)\n+        .lookup_by(func_name.to_string())\n+        .add_to(acc);\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::completion::{do_completion, CompletionItem, CompletionKind};\n@@ -152,7 +217,7 @@ mod tests {\n                 label: \"fn foo()\",\n                 source_range: [138; 138),\n                 delete: [138; 138),\n-                insert: \"fn foo() { $0}\",\n+                insert: \"fn foo() {}\",\n                 kind: Function,\n                 lookup: \"foo\",\n             },\n@@ -184,11 +249,98 @@ mod tests {\n                 label: \"fn bar()\",\n                 source_range: [193; 193),\n                 delete: [193; 193),\n-                insert: \"fn bar() { $0}\",\n+                insert: \"fn bar() {}\",\n                 kind: Function,\n                 lookup: \"bar\",\n             },\n         ]\n         \"###);\n     }\n+\n+    #[test]\n+    fn generic_fn() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                fn foo<T>();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                <|>\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"\n+        [\n+            CompletionItem {\n+                label: \"fn foo()\",\n+                source_range: [141; 141),\n+                delete: [141; 141),\n+                insert: \"fn foo<T>() {}\",\n+                kind: Function,\n+                lookup: \"foo\",\n+            },\n+        ]\n+        \"###);\n+    }\n+\n+    #[test]\n+    fn generic_constrait_fn() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                fn foo<T>() where T: Into<String>;\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                <|>\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"\n+        [\n+            CompletionItem {\n+                label: \"fn foo()\",\n+                source_range: [163; 163),\n+                delete: [163; 163),\n+                insert: \"fn foo<T>()\\nwhere T: Into<String> {}\",\n+                kind: Function,\n+                lookup: \"foo\",\n+            },\n+        ]\n+        \"###);\n+    }\n+\n+    #[test]\n+    fn start_from_fn_kw() {\n+        let completions = complete(\n+            r\"\n+            trait Test {\n+                fn foo();\n+            }\n+\n+            struct T1;\n+\n+            impl Test for T1 {\n+                fn <|>\n+            }\n+            \",\n+        );\n+        assert_debug_snapshot!(completions, @r###\"\n+        [\n+            CompletionItem {\n+                label: \"fn foo()\",\n+                source_range: [138; 140),\n+                delete: [138; 140),\n+                insert: \"fn foo() {}\",\n+                kind: Function,\n+                lookup: \"foo\",\n+            },\n+        ]\n+        \"###);\n+    }\n }\n\\ No newline at end of file"}, {"sha": "97475fc0bbe8f2c77082aa3370c53b0f07df9d68", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fc46ed81ee54d342d83e428ca74cbb0083547251/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc46ed81ee54d342d83e428ca74cbb0083547251/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=fc46ed81ee54d342d83e428ca74cbb0083547251", "patch": "@@ -129,39 +129,6 @@ impl Completions {\n         self.add_function_with_name(ctx, None, func)\n     }\n \n-    pub(crate) fn add_function_impl(&mut self, ctx: &CompletionContext, func: &hir::Function) {\n-        use crate::display::FunctionSignature;\n-\n-        let display = FunctionSignature::from_hir(ctx.db, func.clone());\n-\n-        let func_name = func.name(ctx.db);\n-\n-        let mut builder = CompletionItem::new(\n-            CompletionKind::Reference, \n-            ctx.source_range(), \n-            format!(\"fn {}()\", func_name.to_string()))\n-            .set_documentation(func.docs(ctx.db));\n-\n-        let completion_kind = if func.has_self_param(ctx.db) {\n-            CompletionItemKind::Method\n-        } else {\n-            CompletionItemKind::Function\n-        };\n-        \n-        let snippet = {\n-            let mut s = format!(\"{}\", display);\n-            s.push_str(\" { $0}\");\n-            s\n-        };\n-\n-        builder = builder\n-            .insert_text(snippet)\n-            .kind(completion_kind)\n-            .lookup_by(func_name.to_string());\n-\n-        self.add(builder.build());\n-    }\n-\n     fn guess_macro_braces(&self, macro_name: &str, docs: &str) -> &'static str {\n         let mut votes = [0, 0, 0];\n         for (idx, s) in docs.match_indices(&macro_name) {"}]}