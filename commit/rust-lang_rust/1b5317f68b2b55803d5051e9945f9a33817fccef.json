{"sha": "1b5317f68b2b55803d5051e9945f9a33817fccef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNTMxN2Y2OGIyYjU1ODAzZDUwNTFlOTk0NWY5YTMzODE3ZmNjZWY=", "commit": {"author": {"name": "Robin Schoonover", "email": "robin@cornhooves.org", "date": "2020-09-14T03:52:25Z"}, "committer": {"name": "Robin Schoonover", "email": "robin@cornhooves.org", "date": "2020-09-14T23:08:14Z"}, "message": "Add rc_buffer lint for Rc<String> and other buffer types", "tree": {"sha": "d526c6cbd6d88a07bc787c991adadc126d7b0e83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d526c6cbd6d88a07bc787c991adadc126d7b0e83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b5317f68b2b55803d5051e9945f9a33817fccef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5317f68b2b55803d5051e9945f9a33817fccef", "html_url": "https://github.com/rust-lang/rust/commit/1b5317f68b2b55803d5051e9945f9a33817fccef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b5317f68b2b55803d5051e9945f9a33817fccef/comments", "author": {"login": "rschoon", "id": 507274, "node_id": "MDQ6VXNlcjUwNzI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/507274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rschoon", "html_url": "https://github.com/rschoon", "followers_url": "https://api.github.com/users/rschoon/followers", "following_url": "https://api.github.com/users/rschoon/following{/other_user}", "gists_url": "https://api.github.com/users/rschoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rschoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rschoon/subscriptions", "organizations_url": "https://api.github.com/users/rschoon/orgs", "repos_url": "https://api.github.com/users/rschoon/repos", "events_url": "https://api.github.com/users/rschoon/events{/privacy}", "received_events_url": "https://api.github.com/users/rschoon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rschoon", "id": 507274, "node_id": "MDQ6VXNlcjUwNzI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/507274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rschoon", "html_url": "https://github.com/rschoon", "followers_url": "https://api.github.com/users/rschoon/followers", "following_url": "https://api.github.com/users/rschoon/following{/other_user}", "gists_url": "https://api.github.com/users/rschoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rschoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rschoon/subscriptions", "organizations_url": "https://api.github.com/users/rschoon/orgs", "repos_url": "https://api.github.com/users/rschoon/repos", "events_url": "https://api.github.com/users/rschoon/events{/privacy}", "received_events_url": "https://api.github.com/users/rschoon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231444d989db23ab53001e29af53fa844e0b08a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/231444d989db23ab53001e29af53fa844e0b08a1", "html_url": "https://github.com/rust-lang/rust/commit/231444d989db23ab53001e29af53fa844e0b08a1"}], "stats": {"total": 136, "additions": 135, "deletions": 1}, "files": [{"sha": "8922f5e70279091dc81fdd64044c4ba020e99918", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b5317f68b2b55803d5051e9945f9a33817fccef/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b5317f68b2b55803d5051e9945f9a33817fccef/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1b5317f68b2b55803d5051e9945f9a33817fccef", "patch": "@@ -1775,6 +1775,7 @@ Released 2018-09-13\n [`range_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_plus_one\n [`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n [`range_zip_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len\n+[`rc_buffer`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n [`redundant_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_clone\n [`redundant_closure`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure"}, {"sha": "239eeb10bb421a3f7dade09c64b31fe49971f1a5", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b5317f68b2b55803d5051e9945f9a33817fccef/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5317f68b2b55803d5051e9945f9a33817fccef/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1b5317f68b2b55803d5051e9945f9a33817fccef", "patch": "@@ -837,6 +837,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &types::LET_UNIT_VALUE,\n         &types::LINKEDLIST,\n         &types::OPTION_OPTION,\n+        &types::RC_BUFFER,\n         &types::REDUNDANT_ALLOCATION,\n         &types::TYPE_COMPLEXITY,\n         &types::UNIT_ARG,\n@@ -1804,6 +1805,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n         LintId::of(&redundant_pub_crate::REDUNDANT_PUB_CRATE),\n         LintId::of(&transmute::USELESS_TRANSMUTE),\n+        LintId::of(&types::RC_BUFFER),\n         LintId::of(&use_self::USE_SELF),\n     ]);\n }"}, {"sha": "5f3a2e0b6d42f6a4c8a241526b44983443f1f37b", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/1b5317f68b2b55803d5051e9945f9a33817fccef/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5317f68b2b55803d5051e9945f9a33817fccef/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=1b5317f68b2b55803d5051e9945f9a33817fccef", "patch": "@@ -215,11 +215,41 @@ declare_clippy_lint! {\n     \"redundant allocation\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for Rc<T> and Arc<T> when T is a mutable buffer type such as String or Vec\n+    ///\n+    /// **Why is this bad?** Expressions such as Rc<String> have no advantage over Rc<str>, since\n+    /// it is larger and involves an extra level of indirection, and doesn't implement Borrow<str>.\n+    ///\n+    /// While mutating a buffer type would still be possible with Rc::get_mut(), it only\n+    /// works if there are no additional references yet, which defeats the purpose of\n+    /// enclosing it in a shared ownership type. Instead, additionally wrapping the inner\n+    /// type with an interior mutable container (such as RefCell or Mutex) would normally\n+    /// be used.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust,ignore\n+    /// # use std::rc::Rc;\n+    /// fn foo(interned: Rc<String>) { ... }\n+    /// ```\n+    ///\n+    /// Better:\n+    ///\n+    /// ```rust,ignore\n+    /// fn foo(interned: Rc<str>) { ... }\n+    /// ```\n+    pub RC_BUFFER,\n+    nursery,\n+    \"shared ownership of a buffer type\"\n+}\n+\n pub struct Types {\n     vec_box_size_threshold: u64,\n }\n \n-impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION]);\n+impl_lint_pass!(Types => [BOX_VEC, VEC_BOX, OPTION_OPTION, LINKEDLIST, BORROWED_BOX, REDUNDANT_ALLOCATION, RC_BUFFER]);\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n@@ -272,6 +302,19 @@ fn match_type_parameter(cx: &LateContext<'_>, qpath: &QPath<'_>, path: &[&str])\n     None\n }\n \n+fn match_buffer_type(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {\n+    if match_type_parameter(cx, qpath, &paths::STRING).is_some() {\n+        return Some(\"str\");\n+    }\n+    if match_type_parameter(cx, qpath, &paths::OS_STRING).is_some() {\n+        return Some(\"std::ffi::OsStr\");\n+    }\n+    if match_type_parameter(cx, qpath, &paths::PATH_BUF).is_some() {\n+        return Some(\"std::path::Path\");\n+    }\n+    None\n+}\n+\n fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Span> {\n     let last = last_path_segment(qpath);\n     if_chain! {\n@@ -385,6 +428,45 @@ impl Types {\n                             );\n                             return; // don't recurse into the type\n                         }\n+                        if let Some(alternate) = match_buffer_type(cx, qpath) {\n+                            span_lint_and_sugg(\n+                                cx,\n+                                RC_BUFFER,\n+                                hir_ty.span,\n+                                \"usage of `Rc<T>` when T is a buffer type\",\n+                                \"try\",\n+                                format!(\"Rc<{}>\", alternate),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n+                        if match_type_parameter(cx, qpath, &paths::VEC).is_some() {\n+                            let vec_ty = match &last_path_segment(qpath).args.unwrap().args[0] {\n+                                GenericArg::Type(ty) => match &ty.kind {\n+                                    TyKind::Path(qpath) => qpath,\n+                                    _ => return,\n+                                },\n+                                _ => return,\n+                            };\n+                            let inner_span = match &last_path_segment(&vec_ty).args.unwrap().args[0] {\n+                                GenericArg::Type(ty) => ty.span,\n+                                _ => return,\n+                            };\n+                            let mut applicability = Applicability::MachineApplicable;\n+                            span_lint_and_sugg(\n+                                cx,\n+                                RC_BUFFER,\n+                                hir_ty.span,\n+                                \"usage of `Rc<T>` when T is a buffer type\",\n+                                \"try\",\n+                                format!(\n+                                    \"Rc<[{}]>\",\n+                                    snippet_with_applicability(cx, inner_span, \"..\", &mut applicability)\n+                                ),\n+                                Applicability::MachineApplicable,\n+                            );\n+                            return; // don't recurse into the type\n+                        }\n                         if let Some(span) = match_borrows_parameter(cx, qpath) {\n                             let mut applicability = Applicability::MachineApplicable;\n                             span_lint_and_sugg("}, {"sha": "2df11d2efcfbfea511d89d02315ee35aaaef730d", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b5317f68b2b55803d5051e9945f9a33817fccef/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5317f68b2b55803d5051e9945f9a33817fccef/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=1b5317f68b2b55803d5051e9945f9a33817fccef", "patch": "@@ -113,6 +113,7 @@ pub const STD_CONVERT_IDENTITY: [&str; 3] = [\"std\", \"convert\", \"identity\"];\n pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n pub const STD_MEM_TRANSMUTE: [&str; 3] = [\"std\", \"mem\", \"transmute\"];\n pub const STD_PTR_NULL: [&str; 3] = [\"std\", \"ptr\", \"null\"];\n+pub const STRING: [&str; 3] = [\"alloc\", \"string\", \"String\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];"}, {"sha": "d0c6a1d63d97b7bf511a617a9b2d372cdf2f9cd4", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b5317f68b2b55803d5051e9945f9a33817fccef/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5317f68b2b55803d5051e9945f9a33817fccef/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=1b5317f68b2b55803d5051e9945f9a33817fccef", "patch": "@@ -1851,6 +1851,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"ranges\",\n     },\n+    Lint {\n+        name: \"rc_buffer\",\n+        group: \"nursery\",\n+        desc: \"shared ownership of a buffer type\",\n+        deprecation: None,\n+        module: \"types\",\n+    },\n     Lint {\n         name: \"redundant_allocation\",\n         group: \"perf\","}, {"sha": "c8c2bec67ee59adf8dcc404f408b42544d6fdac8", "filename": "tests/ui/rc_buffer.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b5317f68b2b55803d5051e9945f9a33817fccef/tests%2Fui%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b5317f68b2b55803d5051e9945f9a33817fccef/tests%2Fui%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer.rs?ref=1b5317f68b2b55803d5051e9945f9a33817fccef", "patch": "@@ -0,0 +1,13 @@\n+use std::ffi::OsString;\n+use std::path::PathBuf;\n+use std::rc::Rc;\n+\n+#[warn(clippy::rc_buffer)]\n+struct S {\n+    a: Rc<String>,\n+    b: Rc<PathBuf>,\n+    c: Rc<Vec<u8>>,\n+    d: Rc<OsString>,\n+}\n+\n+fn main() {}"}, {"sha": "641a13a22513455d389da19fc7b6839eedc66828", "filename": "tests/ui/rc_buffer.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1b5317f68b2b55803d5051e9945f9a33817fccef/tests%2Fui%2Frc_buffer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1b5317f68b2b55803d5051e9945f9a33817fccef/tests%2Fui%2Frc_buffer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frc_buffer.stderr?ref=1b5317f68b2b55803d5051e9945f9a33817fccef", "patch": "@@ -0,0 +1,28 @@\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:7:8\n+   |\n+LL |     a: Rc<String>,\n+   |        ^^^^^^^^^^ help: try: `Rc<str>`\n+   |\n+   = note: `-D clippy::rc-buffer` implied by `-D warnings`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:8:8\n+   |\n+LL |     b: Rc<PathBuf>,\n+   |        ^^^^^^^^^^^ help: try: `Rc<std::path::Path>`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:9:8\n+   |\n+LL |     c: Rc<Vec<u8>>,\n+   |        ^^^^^^^^^^^ help: try: `Rc<[u8]>`\n+\n+error: usage of `Rc<T>` when T is a buffer type\n+  --> $DIR/rc_buffer.rs:10:8\n+   |\n+LL |     d: Rc<OsString>,\n+   |        ^^^^^^^^^^^^ help: try: `Rc<std::ffi::OsStr>`\n+\n+error: aborting due to 4 previous errors\n+"}]}