{"sha": "9afa190c446d4fc9c4b73eae11f67af46584cf98", "node_id": "C_kwDOAAsO6NoAKDlhZmExOTBjNDQ2ZDRmYzljNGI3M2VhZTExZjY3YWY0NjU4NGNmOTg", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-04T03:54:38Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-12-13T01:46:19Z"}, "message": "doctest: Rename `options` to `rustdoc_options`\n\nThese are the rustdoc-wide options. It's easy to confuse them with\noptions for doctests in particular, so this change should help.", "tree": {"sha": "e66760b032d5102e2470584f3007ba7aaa967cbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e66760b032d5102e2470584f3007ba7aaa967cbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9afa190c446d4fc9c4b73eae11f67af46584cf98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9afa190c446d4fc9c4b73eae11f67af46584cf98", "html_url": "https://github.com/rust-lang/rust/commit/9afa190c446d4fc9c4b73eae11f67af46584cf98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9afa190c446d4fc9c4b73eae11f67af46584cf98/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e33e6affd0d3d207d4a0d65a9a91de2f0792a23", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23", "html_url": "https://github.com/rust-lang/rust/commit/5e33e6affd0d3d207d4a0d65a9a91de2f0792a23"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "ac24543929b663df349edbbb7c9e59bbb8f982dc", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9afa190c446d4fc9c4b73eae11f67af46584cf98/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afa190c446d4fc9c4b73eae11f67af46584cf98/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=9afa190c446d4fc9c4b73eae11f67af46584cf98", "patch": "@@ -29,7 +29,7 @@ use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::{Arc, Mutex};\n \n use crate::clean::{types::AttributesExt, Attributes};\n-use crate::config::Options;\n+use crate::config::Options as RustdocOptions;\n use crate::html::markdown::{self, ErrorCodes, Ignore, LangString};\n use crate::lint::init_lints;\n use crate::passes::span_of_attrs;\n@@ -43,7 +43,7 @@ crate struct GlobalTestOptions {\n     crate attrs: Vec<String>,\n }\n \n-crate fn run(options: Options) -> Result<(), ErrorReported> {\n+crate fn run(options: RustdocOptions) -> Result<(), ErrorReported> {\n     let input = config::Input::File(options.input.clone());\n \n     let invalid_codeblock_attributes_name = crate::lint::INVALID_CODEBLOCK_ATTRIBUTES.name;\n@@ -293,7 +293,7 @@ fn run_test(\n     test: &str,\n     crate_name: &str,\n     line: usize,\n-    options: Options,\n+    rustdoc_options: RustdocOptions,\n     mut lang_string: LangString,\n     no_run: bool,\n     runtool: Option<String>,\n@@ -311,16 +311,16 @@ fn run_test(\n \n     let output_file = outdir.path().join(\"rust_out\");\n \n-    let rustc_binary = options\n+    let rustc_binary = rustdoc_options\n         .test_builder\n         .as_deref()\n         .unwrap_or_else(|| rustc_interface::util::rustc_path().expect(\"found rustc\"));\n     let mut compiler = Command::new(&rustc_binary);\n     compiler.arg(\"--crate-type\").arg(\"bin\");\n-    for cfg in &options.cfgs {\n+    for cfg in &rustdoc_options.cfgs {\n         compiler.arg(\"--cfg\").arg(&cfg);\n     }\n-    if let Some(sysroot) = options.maybe_sysroot {\n+    if let Some(sysroot) = rustdoc_options.maybe_sysroot {\n         compiler.arg(\"--sysroot\").arg(sysroot);\n     }\n     compiler.arg(\"--edition\").arg(&edition.to_string());\n@@ -330,26 +330,26 @@ fn run_test(\n     if lang_string.test_harness {\n         compiler.arg(\"--test\");\n     }\n-    if options.json_unused_externs && !lang_string.compile_fail {\n+    if rustdoc_options.json_unused_externs && !lang_string.compile_fail {\n         compiler.arg(\"--error-format=json\");\n         compiler.arg(\"--json\").arg(\"unused-externs\");\n         compiler.arg(\"-Z\").arg(\"unstable-options\");\n         compiler.arg(\"-W\").arg(\"unused_crate_dependencies\");\n     }\n-    for lib_str in &options.lib_strs {\n+    for lib_str in &rustdoc_options.lib_strs {\n         compiler.arg(\"-L\").arg(&lib_str);\n     }\n-    for extern_str in &options.extern_strs {\n+    for extern_str in &rustdoc_options.extern_strs {\n         compiler.arg(\"--extern\").arg(&extern_str);\n     }\n     compiler.arg(\"-Ccodegen-units=1\");\n-    for codegen_options_str in &options.codegen_options_strs {\n+    for codegen_options_str in &rustdoc_options.codegen_options_strs {\n         compiler.arg(\"-C\").arg(&codegen_options_str);\n     }\n-    for debugging_option_str in &options.debugging_opts_strs {\n+    for debugging_option_str in &rustdoc_options.debugging_opts_strs {\n         compiler.arg(\"-Z\").arg(&debugging_option_str);\n     }\n-    if no_run && !lang_string.compile_fail && options.persist_doctests.is_none() {\n+    if no_run && !lang_string.compile_fail && rustdoc_options.persist_doctests.is_none() {\n         compiler.arg(\"--emit=metadata\");\n     }\n     compiler.arg(\"--target\").arg(match target {\n@@ -358,7 +358,7 @@ fn run_test(\n             path.to_str().expect(\"target path must be valid unicode\").to_string()\n         }\n     });\n-    if let ErrorOutputType::HumanReadable(kind) = options.error_format {\n+    if let ErrorOutputType::HumanReadable(kind) = rustdoc_options.error_format {\n         let (short, color_config) = kind.unzip();\n \n         if short {\n@@ -452,11 +452,11 @@ fn run_test(\n     } else {\n         cmd = Command::new(output_file);\n     }\n-    if let Some(run_directory) = options.test_run_directory {\n+    if let Some(run_directory) = rustdoc_options.test_run_directory {\n         cmd.current_dir(run_directory);\n     }\n \n-    let result = if options.nocapture {\n+    let result = if rustdoc_options.nocapture {\n         cmd.status().map(|status| process::Output {\n             status,\n             stdout: Vec::new(),\n@@ -802,7 +802,7 @@ crate struct Collector {\n     // the `names` vector of that test will be `[\"Title\", \"Subtitle\"]`.\n     names: Vec<String>,\n \n-    options: Options,\n+    rustdoc_options: RustdocOptions,\n     use_headers: bool,\n     enable_per_target_ignores: bool,\n     crate_name: Symbol,\n@@ -818,7 +818,7 @@ crate struct Collector {\n impl Collector {\n     crate fn new(\n         crate_name: Symbol,\n-        options: Options,\n+        rustdoc_options: RustdocOptions,\n         use_headers: bool,\n         opts: GlobalTestOptions,\n         source_map: Option<Lrc<SourceMap>>,\n@@ -828,7 +828,7 @@ impl Collector {\n         Collector {\n             tests: Vec::new(),\n             names: Vec::new(),\n-            options,\n+            rustdoc_options,\n             use_headers,\n             enable_per_target_ignores,\n             crate_name,\n@@ -882,14 +882,14 @@ impl Tester for Collector {\n         let name = self.generate_name(line, &filename);\n         let crate_name = self.crate_name.to_string();\n         let opts = self.opts.clone();\n-        let edition = config.edition.unwrap_or(self.options.edition);\n-        let options = self.options.clone();\n-        let runtool = self.options.runtool.clone();\n-        let runtool_args = self.options.runtool_args.clone();\n-        let target = self.options.target.clone();\n+        let edition = config.edition.unwrap_or(self.rustdoc_options.edition);\n+        let rustdoc_options = self.rustdoc_options.clone();\n+        let runtool = self.rustdoc_options.runtool.clone();\n+        let runtool_args = self.rustdoc_options.runtool_args.clone();\n+        let target = self.rustdoc_options.target.clone();\n         let target_str = target.to_string();\n         let unused_externs = self.unused_extern_reports.clone();\n-        let no_run = config.no_run || options.no_run;\n+        let no_run = config.no_run || rustdoc_options.no_run;\n         if !config.compile_fail {\n             self.compiling_test_count.fetch_add(1, Ordering::SeqCst);\n         }\n@@ -923,7 +923,7 @@ impl Tester for Collector {\n                 self.visited_tests.entry((file.clone(), line)).and_modify(|v| *v += 1).or_insert(0)\n             },\n         );\n-        let outdir = if let Some(mut path) = options.persist_doctests.clone() {\n+        let outdir = if let Some(mut path) = rustdoc_options.persist_doctests.clone() {\n             path.push(&test_id);\n \n             std::fs::create_dir_all(&path)\n@@ -963,7 +963,7 @@ impl Tester for Collector {\n                     &test,\n                     &crate_name,\n                     line,\n-                    options,\n+                    rustdoc_options,\n                     config,\n                     no_run,\n                     runtool,"}]}