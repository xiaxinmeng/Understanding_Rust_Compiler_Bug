{"sha": "dd111262b2a18e532d700b67a8062faa286d1a36", "node_id": "C_kwDOAAsO6NoAKGRkMTExMjYyYjJhMThlNTMyZDcwMGI2N2E4MDYyZmFhMjg2ZDFhMzY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-18T15:23:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-18T15:23:28Z"}, "message": "Rollup merge of #92683 - jackh726:issue-92033, r=estebank\n\nSuggest copying trait associated type bounds on lifetime error\n\nCloses #92033\n\nKind of the most simple suggestion to make - we don't try to be fancy. Turns out, it's still pretty useful (the couple existing tests that trigger this error end up fixed - for this error - upon applying the fix).\n\nr? ``@estebank``\ncc ``@nikomatsakis``", "tree": {"sha": "73bd74b64aab562ed6650ca0e95ac494b242fbdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bd74b64aab562ed6650ca0e95ac494b242fbdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd111262b2a18e532d700b67a8062faa286d1a36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiD7nwCRBK7hj4Ov3rIwAAy2MIAA2NJd5mmEBAFASIH+OfhhA6\nN1RzKwLOJJ5aXFrgerUXOpBCEJZsoH965LAV+NRzfFZON7sNDGoT4AG285vXZlEB\nYlwOh0Yfn4d9KK2AMBIIN2NhneMvJjRt5uRhP3LalSdQVP1T2m3SlobCgboIMYX1\n3r1p31PbpywMvwyjGuNXY/1BqVaSCk1/EZ87/i523cZGBjiTluR3iLdUdTGGmK7/\nnsHxpErzsD6jErIIrW9NBw2zdyXPprMt3VKa9xLNNtZeAcqs3ypsXsr2MkvNN84t\nHbWL7P5tfW51GzT5HwJav5K70OBnQU4k4+YH7igYo8JlwRHQ9yRTwflxz90GtoU=\n=QO3F\n-----END PGP SIGNATURE-----\n", "payload": "tree 73bd74b64aab562ed6650ca0e95ac494b242fbdf\nparent b8c56fa8c30821129b0960180f528d4a1a4f9316\nparent 3d19c8defd776eb7e9e113cf49c3e1d2f51e408e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645197808 +0100\ncommitter GitHub <noreply@github.com> 1645197808 +0100\n\nRollup merge of #92683 - jackh726:issue-92033, r=estebank\n\nSuggest copying trait associated type bounds on lifetime error\n\nCloses #92033\n\nKind of the most simple suggestion to make - we don't try to be fancy. Turns out, it's still pretty useful (the couple existing tests that trigger this error end up fixed - for this error - upon applying the fix).\n\nr? ``@estebank``\ncc ``@nikomatsakis``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd111262b2a18e532d700b67a8062faa286d1a36", "html_url": "https://github.com/rust-lang/rust/commit/dd111262b2a18e532d700b67a8062faa286d1a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd111262b2a18e532d700b67a8062faa286d1a36/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c56fa8c30821129b0960180f528d4a1a4f9316", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c56fa8c30821129b0960180f528d4a1a4f9316", "html_url": "https://github.com/rust-lang/rust/commit/b8c56fa8c30821129b0960180f528d4a1a4f9316"}, {"sha": "3d19c8defd776eb7e9e113cf49c3e1d2f51e408e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d19c8defd776eb7e9e113cf49c3e1d2f51e408e", "html_url": "https://github.com/rust-lang/rust/commit/3d19c8defd776eb7e9e113cf49c3e1d2f51e408e"}], "stats": {"total": 191, "additions": 163, "deletions": 28}, "files": [{"sha": "f44e6e04346b253440244ba96c8785ee9623fcd0", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmod.rs?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -64,7 +64,7 @@ impl<'cx, 'tcx> NiceRegionError<'cx, 'tcx> {\n             .or_else(|| self.try_report_mismatched_static_lifetime())\n     }\n \n-    pub fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {\n+    pub(super) fn regions(&self) -> Option<(Span, ty::Region<'tcx>, ty::Region<'tcx>)> {\n         match (&self.error, self.regions) {\n             (Some(ConcreteFailure(origin, sub, sup)), None) => Some((origin.span(), *sub, *sup)),\n             (Some(SubSupConflict(_, _, origin, sub, _, sup, _)), None) => {"}, {"sha": "8671ecba6e92462e2244ff4a16c5886cb0e8a0e9", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -102,6 +102,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     \"...so that the definition in impl matches the definition from the trait\",\n                 );\n             }\n+            infer::CheckAssociatedTypeBounds { ref parent, .. } => {\n+                self.note_region_origin(err, &parent);\n+            }\n         }\n     }\n \n@@ -345,6 +348,55 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     trait_item_def_id,\n                     &format!(\"`{}: {}`\", sup, sub),\n                 ),\n+            infer::CheckAssociatedTypeBounds { impl_item_def_id, trait_item_def_id, parent } => {\n+                let mut err = self.report_concrete_failure(*parent, sub, sup);\n+\n+                let trait_item_span = self.tcx.def_span(trait_item_def_id);\n+                let item_name = self.tcx.item_name(impl_item_def_id);\n+                err.span_label(\n+                    trait_item_span,\n+                    format!(\"definition of `{}` from trait\", item_name),\n+                );\n+\n+                let trait_predicates = self.tcx.explicit_predicates_of(trait_item_def_id);\n+                let impl_predicates = self.tcx.explicit_predicates_of(impl_item_def_id);\n+\n+                let impl_predicates: rustc_data_structures::stable_set::FxHashSet<_> =\n+                    impl_predicates.predicates.into_iter().map(|(pred, _)| pred).collect();\n+                let clauses: Vec<_> = trait_predicates\n+                    .predicates\n+                    .into_iter()\n+                    .filter(|&(pred, _)| !impl_predicates.contains(pred))\n+                    .map(|(pred, _)| format!(\"{}\", pred))\n+                    .collect();\n+\n+                if !clauses.is_empty() {\n+                    let where_clause_span = self\n+                        .tcx\n+                        .hir()\n+                        .get_generics(impl_item_def_id.expect_local())\n+                        .unwrap()\n+                        .where_clause\n+                        .tail_span_for_suggestion();\n+\n+                    let suggestion = format!(\n+                        \"{} {}\",\n+                        if !impl_predicates.is_empty() { \",\" } else { \" where\" },\n+                        clauses.join(\", \"),\n+                    );\n+                    err.span_suggestion(\n+                        where_clause_span,\n+                        &format!(\n+                            \"try copying {} from the trait\",\n+                            if clauses.len() > 1 { \"these clauses\" } else { \"this clause\" }\n+                        ),\n+                        suggestion,\n+                        rustc_errors::Applicability::MaybeIncorrect,\n+                    );\n+                }\n+\n+                err\n+            }\n         }\n     }\n "}, {"sha": "57ac98ca897ee7cf012b151f24d69114b615e855", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -438,6 +438,13 @@ pub enum SubregionOrigin<'tcx> {\n     /// Comparing the signature and requirements of an impl associated type\n     /// against the containing trait\n     CompareImplTypeObligation { span: Span, impl_item_def_id: DefId, trait_item_def_id: DefId },\n+\n+    /// Checking that the bounds of a trait's associated type hold for a given impl\n+    CheckAssociatedTypeBounds {\n+        parent: Box<SubregionOrigin<'tcx>>,\n+        impl_item_def_id: DefId,\n+        trait_item_def_id: DefId,\n+    },\n }\n \n // `SubregionOrigin` is used a lot. Make sure it doesn't unintentionally get bigger.\n@@ -1832,6 +1839,7 @@ impl<'tcx> SubregionOrigin<'tcx> {\n             ReferenceOutlivesReferent(_, a) => a,\n             CompareImplMethodObligation { span, .. } => span,\n             CompareImplTypeObligation { span, .. } => span,\n+            CheckAssociatedTypeBounds { ref parent, .. } => parent.span(),\n         }\n     }\n \n@@ -1862,6 +1870,15 @@ impl<'tcx> SubregionOrigin<'tcx> {\n                 trait_item_def_id,\n             },\n \n+            traits::ObligationCauseCode::CheckAssociatedTypeBounds {\n+                impl_item_def_id,\n+                trait_item_def_id,\n+            } => SubregionOrigin::CheckAssociatedTypeBounds {\n+                impl_item_def_id,\n+                trait_item_def_id,\n+                parent: Box::new(default()),\n+            },\n+\n             _ => default(),\n         }\n     }"}, {"sha": "b54418e5201715797757fb8253ddbafdb6149b40", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -285,6 +285,12 @@ pub enum ObligationCauseCode<'tcx> {\n         trait_item_def_id: DefId,\n     },\n \n+    /// Checking that the bounds of a trait's associated type hold for a given impl\n+    CheckAssociatedTypeBounds {\n+        impl_item_def_id: DefId,\n+        trait_item_def_id: DefId,\n+    },\n+\n     /// Checking that this expression can be assigned where it needs to be\n     // FIXME(eddyb) #11161 is the original Expr required?\n     ExprAssignable,"}, {"sha": "7df880a7cc05509d463ca5546b00c91e1854648e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -1928,7 +1928,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             | ObligationCauseCode::AwaitableExpr(_)\n             | ObligationCauseCode::ForLoopIterator\n             | ObligationCauseCode::QuestionMark\n-            | ObligationCauseCode::LetElse => {}\n+            | ObligationCauseCode::LetElse\n+            | ObligationCauseCode::CheckAssociatedTypeBounds { .. } => {}\n             ObligationCauseCode::SliceOrArrayElem => {\n                 err.note(\"slice and array elements must have `Sized` type\");\n             }"}, {"sha": "38449c2a76a5be4a473d0922d226afd14cc22899", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -1378,7 +1378,14 @@ pub fn check_type_bounds<'tcx>(\n         let mut selcx = traits::SelectionContext::new(&infcx);\n \n         let impl_ty_hir_id = tcx.hir().local_def_id_to_hir_id(impl_ty.def_id.expect_local());\n-        let normalize_cause = traits::ObligationCause::misc(impl_ty_span, impl_ty_hir_id);\n+        let normalize_cause = ObligationCause::new(\n+            impl_ty_span,\n+            impl_ty_hir_id,\n+            ObligationCauseCode::CheckAssociatedTypeBounds {\n+                impl_item_def_id: impl_ty.def_id,\n+                trait_item_def_id: trait_ty.def_id,\n+            },\n+        );\n         let mk_cause = |span: Span| {\n             let code = if span.is_dummy() {\n                 traits::MiscObligation"}, {"sha": "bd0dea372194d4f14a6b4c90c975b6c33abe0510", "filename": "src/test/ui/generic-associated-types/impl_bounds.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fimpl_bounds.stderr?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -19,8 +19,13 @@ LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n error[E0478]: lifetime bound not satisfied\n   --> $DIR/impl_bounds.rs:17:35\n    |\n+LL |     type B<'a, 'b> where 'a: 'b;\n+   |     ---------------------------- definition of `B` from trait\n+...\n LL |     type B<'a, 'b> where 'b: 'a = (&'a(), &'b ());\n-   |                                   ^^^^^^^^^^^^^^^\n+   |                                -  ^^^^^^^^^^^^^^^\n+   |                                |\n+   |                                help: try copying this clause from the trait: `, 'a: 'b`\n    |\n note: lifetime parameter instantiated with the lifetime `'a` as defined here\n   --> $DIR/impl_bounds.rs:17:12"}, {"sha": "c97d17811ba7c918b72d01d6521aa4ca1d301f0e", "filename": "src/test/ui/generic-associated-types/issue-88595.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.rs?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -8,7 +8,7 @@ trait A<'a> {\n     // FIXME(generic_associated_types): Remove one of the below bounds\n     // https://github.com/rust-lang/rust/pull/90678#discussion_r744976085\n     where\n-        'a: 'b, Self: 'a, Self: 'b;\n+        Self: 'a, Self: 'b;\n \n     fn a(&'a self) -> Self::B<'a>;\n }\n@@ -17,8 +17,7 @@ struct C;\n \n impl<'a> A<'a> for C {\n     type B<'b> = impl Clone;\n-    //~^ ERROR: lifetime bound not satisfied\n-    //~| ERROR: could not find defining uses\n+    //~^ ERROR: could not find defining uses\n \n     fn a(&'a self) -> Self::B<'a> {} //~ ERROR: non-defining opaque type use in defining scope\n }"}, {"sha": "4e4f86bbac87c512d0212b17ab60d55a92466615", "filename": "src/test/ui/generic-associated-types/issue-88595.stderr", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88595.stderr?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -1,22 +1,5 @@\n-error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-88595.rs:19:18\n-   |\n-LL |     type B<'b> = impl Clone;\n-   |                  ^^^^^^^^^^\n-   |\n-note: lifetime parameter instantiated with the lifetime `'a` as defined here\n-  --> $DIR/issue-88595.rs:18:6\n-   |\n-LL | impl<'a> A<'a> for C {\n-   |      ^^\n-note: but lifetime parameter must outlive the lifetime `'b` as defined here\n-  --> $DIR/issue-88595.rs:19:12\n-   |\n-LL |     type B<'b> = impl Clone;\n-   |            ^^\n-\n error: non-defining opaque type use in defining scope\n-  --> $DIR/issue-88595.rs:23:23\n+  --> $DIR/issue-88595.rs:22:23\n    |\n LL |     fn a(&'a self) -> Self::B<'a> {}\n    |                       ^^^^^^^^^^^\n@@ -35,6 +18,5 @@ error: could not find defining uses\n LL |     type B<'b> = impl Clone;\n    |                  ^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0478`."}, {"sha": "f8fb71bbddb4b8673145ec7592e03efe984a3334", "filename": "src/test/ui/generic-associated-types/issue-90014.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-90014.stderr?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -1,8 +1,13 @@\n error[E0477]: the type `&mut ()` does not fulfill the required lifetime\n   --> $DIR/issue-90014.rs:14:20\n    |\n+LL |     type Fut<'a> where Self: 'a;\n+   |     ---------------------------- definition of `Fut` from trait\n+...\n LL |     type Fut<'a> = impl Future<Output = ()>;\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 -  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 |\n+   |                 help: try copying this clause from the trait: `where Self: 'a`\n    |\n note: type must outlive the lifetime `'a` as defined here\n   --> $DIR/issue-90014.rs:14:14"}, {"sha": "1d5f7d5c0099e6360383987f4705290268bf742c", "filename": "src/test/ui/generic-associated-types/issue-92033.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.rs?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -0,0 +1,39 @@\n+#![feature(generic_associated_types)]\n+\n+struct Texture;\n+\n+trait Surface {\n+    type TextureIter<'a>: Iterator<Item = &'a Texture>\n+    where\n+        Self: 'a;\n+\n+    fn get_texture(&self) -> Self::TextureIter<'_>;\n+}\n+\n+trait Swapchain {\n+    type Surface<'a>: Surface\n+    where\n+        Self: 'a;\n+\n+    fn get_surface(&self) -> Self::Surface<'_>;\n+}\n+\n+impl<'s> Surface for &'s Texture {\n+    type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n+    //~^ ERROR the type\n+\n+    fn get_texture(&self) -> Self::TextureIter<'_> {\n+        let option: Option<&Texture> = Some(self);\n+        option.into_iter()\n+    }\n+}\n+\n+impl Swapchain for Texture {\n+    type Surface<'a> = &'a Texture;\n+\n+    fn get_surface(&self) -> Self::Surface<'_> {\n+        self\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "caa6618f39884b1e7bbc9a1dfccc69f8c2704af8", "filename": "src/test/ui/generic-associated-types/issue-92033.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd111262b2a18e532d700b67a8062faa286d1a36/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92033.stderr?ref=dd111262b2a18e532d700b67a8062faa286d1a36", "patch": "@@ -0,0 +1,22 @@\n+error[E0477]: the type `&'s Texture` does not fulfill the required lifetime\n+  --> $DIR/issue-92033.rs:22:28\n+   |\n+LL | /     type TextureIter<'a>: Iterator<Item = &'a Texture>\n+LL | |     where\n+LL | |         Self: 'a;\n+   | |_________________- definition of `TextureIter` from trait\n+...\n+LL |       type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n+   |                           -  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           |\n+   |                           help: try copying this clause from the trait: `where Self: 'a`\n+   |\n+note: type must outlive the lifetime `'a` as defined here\n+  --> $DIR/issue-92033.rs:22:22\n+   |\n+LL |     type TextureIter<'a> = std::option::IntoIter<&'a Texture>;\n+   |                      ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0477`."}]}