{"sha": "4967f25f6bf930a5f79d5c66f2ffc53159d43c4a", "node_id": "C_kwDOAAsO6NoAKDQ5NjdmMjVmNmJmOTMwYTVmNzlkNWM2NmYyZmZjNTMxNTlkNDNjNGE", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-05-07T00:11:56Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2023-05-07T00:11:56Z"}, "message": "Use the new `load`/`store` functions in `{from,to}_slice`", "tree": {"sha": "4d788435018b2d47ca6b4805a8222a6dffb67d74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d788435018b2d47ca6b4805a8222a6dffb67d74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4967f25f6bf930a5f79d5c66f2ffc53159d43c4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4967f25f6bf930a5f79d5c66f2ffc53159d43c4a", "html_url": "https://github.com/rust-lang/rust/commit/4967f25f6bf930a5f79d5c66f2ffc53159d43c4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4967f25f6bf930a5f79d5c66f2ffc53159d43c4a/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195d4cad50c5b8a544de608295e7fdc369f99d9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/195d4cad50c5b8a544de608295e7fdc369f99d9a", "html_url": "https://github.com/rust-lang/rust/commit/195d4cad50c5b8a544de608295e7fdc369f99d9a"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "a793ae9e391bf74172c929151de319b00fb49dfe", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4967f25f6bf930a5f79d5c66f2ffc53159d43c4a/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4967f25f6bf930a5f79d5c66f2ffc53159d43c4a/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=4967f25f6bf930a5f79d5c66f2ffc53159d43c4a", "patch": "@@ -263,11 +263,9 @@ where\n             slice.len() >= Self::N,\n             \"slice length must be at least the number of elements\"\n         );\n-        assert!(core::mem::size_of::<Self>() == Self::N * core::mem::size_of::<T>());\n-        // Safety:\n-        // - We've checked the length is sufficient.\n-        // - `T` and `Simd<T, N>` are Copy types.\n-        unsafe { slice.as_ptr().cast::<Self>().read_unaligned() }\n+        // SAFETY: We just checked that the slice contains\n+        // at least `N` elements.\n+        unsafe { Self::load(slice.as_ptr().cast()) }\n     }\n \n     /// Writes a SIMD vector to the first `N` elements of a slice.\n@@ -293,11 +291,9 @@ where\n             slice.len() >= Self::N,\n             \"slice length must be at least the number of elements\"\n         );\n-        assert!(core::mem::size_of::<Self>() == Self::N * core::mem::size_of::<T>());\n-        // Safety:\n-        // - We've checked the length is sufficient\n-        // - `T` and `Simd<T, N>` are Copy types.\n-        unsafe { slice.as_mut_ptr().cast::<Self>().write_unaligned(self) }\n+        // SAFETY: We just checked that the slice contains\n+        // at least `N` elements.\n+        unsafe { self.store(slice.as_mut_ptr().cast()) }\n     }\n \n     /// Performs elementwise conversion of a SIMD vector's elements to another SIMD-valid type."}]}