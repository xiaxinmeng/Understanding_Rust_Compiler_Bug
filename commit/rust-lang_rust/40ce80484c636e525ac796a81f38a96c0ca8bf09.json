{"sha": "40ce80484c636e525ac796a81f38a96c0ca8bf09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwY2U4MDQ4NGM2MzZlNTI1YWM3OTZhODFmMzhhOTZjMGNhOGJmMDk=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-23T17:04:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-23T17:04:49Z"}, "message": "Remove random Idents outside of libsyntax", "tree": {"sha": "a2480e83cf57a7c2f993bcaa26186b0cb43c7208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2480e83cf57a7c2f993bcaa26186b0cb43c7208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40ce80484c636e525ac796a81f38a96c0ca8bf09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40ce80484c636e525ac796a81f38a96c0ca8bf09", "html_url": "https://github.com/rust-lang/rust/commit/40ce80484c636e525ac796a81f38a96c0ca8bf09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40ce80484c636e525ac796a81f38a96c0ca8bf09/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07ca1ab1ec32ac99a61312ec07d66db5f3657040", "url": "https://api.github.com/repos/rust-lang/rust/commits/07ca1ab1ec32ac99a61312ec07d66db5f3657040", "html_url": "https://github.com/rust-lang/rust/commit/07ca1ab1ec32ac99a61312ec07d66db5f3657040"}], "stats": {"total": 299, "additions": 147, "deletions": 152}, "files": [{"sha": "8addc06c8840db570a63db993846f2ecd619d9a8", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -520,9 +520,9 @@ fn encode_info_for_mod(ecx: &EncodeContext,\n         });\n \n         if let hir::ItemImpl(..) = item.node {\n-            let (ident, did) = (item.name, item.id);\n+            let (name, did) = (item.name, item.id);\n             debug!(\"(encoding info for module) ... encoding impl {} ({}/{})\",\n-                   ident,\n+                   name,\n                    did, ecx.tcx.map.node_to_string(did));\n \n             rbml_w.wr_tagged_u64(tag_mod_impl, def_to_u64(DefId::local(did)));"}, {"sha": "abc0429e7d29784ad21333cd194f8fe6d1fde7ca", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -184,8 +184,8 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n             }\n             '[' => {\n                 let def = self.parse_def(RegionParameter);\n-                let ident = token::str_to_ident(&self.parse_str(']'));\n-                ty::BrNamed(def, ident.name)\n+                let name = token::intern(&self.parse_str(']'));\n+                ty::BrNamed(def, name)\n             }\n             'f' => {\n                 let id = self.parse_u32();\n@@ -219,12 +219,12 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n                 assert_eq!(self.next(), '|');\n                 let index = self.parse_u32();\n                 assert_eq!(self.next(), '|');\n-                let nm = token::str_to_ident(&self.parse_str(']'));\n+                let name = token::intern(&self.parse_str(']'));\n                 ty::ReEarlyBound(ty::EarlyBoundRegion {\n                     param_id: node_id,\n                     space: space,\n                     index: index,\n-                    name: nm.name\n+                    name: name\n                 })\n             }\n             'f' => {\n@@ -598,7 +598,7 @@ impl<'a,'tcx> TyDecoder<'a,'tcx> {\n         ty::ProjectionPredicate {\n             projection_ty: ty::ProjectionTy {\n                 trait_ref: self.parse_trait_ref(),\n-                item_name: token::str_to_ident(&self.parse_str('|')).name,\n+                item_name: token::intern(&self.parse_str('|')),\n             },\n             ty: self.parse_ty(),\n         }"}, {"sha": "4dd0cdb1873a0f7d13b1d3ef8fd3cfd4ea9bb79e", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -284,15 +284,15 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             }\n \n             hir::ExprBreak(label) => {\n-                let loop_scope = self.find_scope(expr, label.map(|l| l.node));\n+                let loop_scope = self.find_scope(expr, label.map(|l| l.node.name));\n                 let b = self.add_ast_node(expr.id, &[pred]);\n                 self.add_exiting_edge(expr, b,\n                                       loop_scope, loop_scope.break_index);\n                 self.add_unreachable_node()\n             }\n \n             hir::ExprAgain(label) => {\n-                let loop_scope = self.find_scope(expr, label.map(|l| l.node));\n+                let loop_scope = self.find_scope(expr, label.map(|l| l.node.name));\n                 let a = self.add_ast_node(expr.id, &[pred]);\n                 self.add_exiting_edge(expr, a,\n                                       loop_scope, loop_scope.continue_index);\n@@ -586,7 +586,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n     fn find_scope(&self,\n                   expr: &hir::Expr,\n-                  label: Option<ast::Ident>) -> LoopScope {\n+                  label: Option<ast::Name>) -> LoopScope {\n         if label.is_none() {\n             return *self.loop_scopes.last().unwrap();\n         }"}, {"sha": "caedc811842a0757cfc1a82a23e877f75fb3e65c", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'tcx, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, 'tcx, O\n            ps: &mut pprust::State,\n            node: pprust::AnnNode) -> io::Result<()> {\n         let id = match node {\n-            pprust::NodeIdent(_) | pprust::NodeName(_) => 0,\n+            pprust::NodeName(_) => 0,\n             pprust::NodeExpr(expr) => expr.id,\n             pprust::NodeBlock(blk) => blk.id,\n             pprust::NodeItem(_) | pprust::NodeSubItem(_) => 0,"}, {"sha": "802b09a1a65e8394fea9503f912c468bda23cc14", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -1015,12 +1015,12 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             },\n             None => None\n         };\n-        let (fn_decl, generics, unsafety, constness, ident, expl_self, span)\n+        let (fn_decl, generics, unsafety, constness, name, expl_self, span)\n                                     = node_inner.expect(\"expect item fn\");\n         let rebuilder = Rebuilder::new(self.tcx, fn_decl, expl_self,\n                                        generics, same_regions, &life_giver);\n         let (fn_decl, expl_self, generics) = rebuilder.rebuild();\n-        self.give_expl_lifetime_param(&fn_decl, unsafety, constness, ident,\n+        self.give_expl_lifetime_param(&fn_decl, unsafety, constness, name,\n                                       expl_self.as_ref(), &generics, span);\n     }\n }\n@@ -1127,7 +1127,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                 names.push(lt_name);\n             }\n             names.sort();\n-            let name = token::str_to_ident(&names[0]).name;\n+            let name = token::intern(&names[0]);\n             return (name_to_dummy_lifetime(name), Kept);\n         }\n         return (self.life_giver.give_lifetime(), Fresh);\n@@ -1938,8 +1938,7 @@ impl LifeGiver {\n             let mut s = String::from(\"'\");\n             s.push_str(&num_to_string(self.counter.get()));\n             if !self.taken.contains(&s) {\n-                lifetime = name_to_dummy_lifetime(\n-                                    token::str_to_ident(&s[..]).name);\n+                lifetime = name_to_dummy_lifetime(token::intern(&s[..]));\n                 self.generated.borrow_mut().push(lifetime);\n                 break;\n             }"}, {"sha": "d57f7590dadf5eff6ae8ef1ac83a2be2d0e2994b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -383,7 +383,7 @@ fn visit_fn(ir: &mut IrMaps,\n                                &*arg.pat,\n                                |_bm, arg_id, _x, path1| {\n             debug!(\"adding argument {}\", arg_id);\n-            let name = path1.node.name;\n+            let name = path1.node;\n             fn_maps.add_variable(Arg(arg_id, name));\n         })\n     };\n@@ -416,7 +416,7 @@ fn visit_fn(ir: &mut IrMaps,\n fn visit_local(ir: &mut IrMaps, local: &hir::Local) {\n     pat_util::pat_bindings(&ir.tcx.def_map, &*local.pat, |_, p_id, sp, path1| {\n         debug!(\"adding local variable {}\", p_id);\n-        let name = path1.node.name;\n+        let name = path1.node;\n         ir.add_live_node_for_node(p_id, VarDefNode(sp));\n         ir.add_variable(Local(LocalInfo {\n           id: p_id,\n@@ -431,7 +431,7 @@ fn visit_arm(ir: &mut IrMaps, arm: &hir::Arm) {\n         pat_util::pat_bindings(&ir.tcx.def_map, &**pat, |bm, p_id, sp, path1| {\n             debug!(\"adding local variable {} from match with bm {:?}\",\n                    p_id, bm);\n-            let name = path1.node.name;\n+            let name = path1.node;\n             ir.add_live_node_for_node(p_id, VarDefNode(sp));\n             ir.add_variable(Local(LocalInfo {\n                 id: p_id,\n@@ -688,7 +688,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     }\n \n     fn find_loop_scope(&self,\n-                       opt_label: Option<ast::Ident>,\n+                       opt_label: Option<ast::Name>,\n                        id: NodeId,\n                        sp: Span)\n                        -> NodeId {\n@@ -1049,7 +1049,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           hir::ExprBreak(opt_label) => {\n               // Find which label this break jumps to\n-              let sc = self.find_loop_scope(opt_label.map(|l| l.node), expr.id, expr.span);\n+              let sc = self.find_loop_scope(opt_label.map(|l| l.node.name), expr.id, expr.span);\n \n               // Now that we know the label we're going to,\n               // look it up in the break loop nodes table\n@@ -1063,7 +1063,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           hir::ExprAgain(opt_label) => {\n               // Find which label this expr continues to\n-              let sc = self.find_loop_scope(opt_label.map(|l| l.node), expr.id, expr.span);\n+              let sc = self.find_loop_scope(opt_label.map(|l| l.node.name), expr.id, expr.span);\n \n               // Now that we know the label we're going to,\n               // look it up in the continue loop nodes table\n@@ -1555,8 +1555,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                                    |_bm, p_id, sp, path1| {\n                 let var = self.variable(p_id, sp);\n                 // Ignore unused self.\n-                let ident = path1.node;\n-                if ident.name != special_idents::self_.name {\n+                let name = path1.node;\n+                if name != special_idents::self_.name {\n                     self.warn_about_unused(sp, p_id, entry_ln, var);\n                 }\n             })"}, {"sha": "f72a945741ff798d21030bbac9cbd56961a758c3", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -16,9 +16,9 @@ use util::nodemap::FnvHashMap;\n use syntax::ast;\n use rustc_front::hir;\n use rustc_front::util::walk_pat;\n-use syntax::codemap::{Span, Spanned, DUMMY_SP};\n+use syntax::codemap::{respan, Span, Spanned, DUMMY_SP};\n \n-pub type PatIdMap = FnvHashMap<ast::Ident, ast::NodeId>;\n+pub type PatIdMap = FnvHashMap<ast::Name, ast::NodeId>;\n \n // This is used because same-named variables in alternative patterns need to\n // use the NodeId of their namesake in the first pattern.\n@@ -109,12 +109,26 @@ pub fn pat_is_binding_or_wild(dm: &DefMap, pat: &hir::Pat) -> bool {\n /// Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n /// `match foo() { Some(a) => (), None => () }`\n pub fn pat_bindings<I>(dm: &DefMap, pat: &hir::Pat, mut it: I) where\n+    I: FnMut(hir::BindingMode, ast::NodeId, Span, &Spanned<ast::Name>),\n+{\n+    walk_pat(pat, |p| {\n+        match p.node {\n+          hir::PatIdent(binding_mode, ref pth, _) if pat_is_binding(dm, p) => {\n+            it(binding_mode, p.id, p.span, &respan(pth.span, pth.node.name));\n+          }\n+          _ => {}\n+        }\n+        true\n+    });\n+}\n+\n+pub fn pat_bindings_hygienic<I>(dm: &DefMap, pat: &hir::Pat, mut it: I) where\n     I: FnMut(hir::BindingMode, ast::NodeId, Span, &Spanned<ast::Ident>),\n {\n     walk_pat(pat, |p| {\n         match p.node {\n           hir::PatIdent(binding_mode, ref pth, _) if pat_is_binding(dm, p) => {\n-            it(binding_mode, p.id, p.span, pth);\n+            it(binding_mode, p.id, p.span, &respan(pth.span, pth.node));\n           }\n           _ => {}\n         }\n@@ -182,10 +196,10 @@ pub fn pat_contains_bindings_or_wild(dm: &DefMap, pat: &hir::Pat) -> bool {\n     contains_bindings\n }\n \n-pub fn simple_identifier<'a>(pat: &'a hir::Pat) -> Option<&'a ast::Ident> {\n+pub fn simple_name<'a>(pat: &'a hir::Pat) -> Option<ast::Name> {\n     match pat.node {\n         hir::PatIdent(hir::BindByValue(_), ref path1, None) => {\n-            Some(&path1.node)\n+            Some(path1.node.name)\n         }\n         _ => {\n             None"}, {"sha": "6fbdd90217658da22026411a8a14a6a95589dedb", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -73,7 +73,7 @@ struct LifetimeContext<'a> {\n     trait_ref_hack: bool,\n \n     // List of labels in the function/method currently under analysis.\n-    labels_in_fn: Vec<(ast::Ident, Span)>,\n+    labels_in_fn: Vec<(ast::Name, Span)>,\n }\n \n enum ScopeChain<'a> {\n@@ -381,7 +381,7 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v hir::Block) {\n     struct GatherLabels<'a> {\n         sess: &'a Session,\n         scope: Scope<'a>,\n-        labels_in_fn: &'a mut Vec<(ast::Ident, Span)>,\n+        labels_in_fn: &'a mut Vec<(ast::Name, Span)>,\n     }\n \n     let mut gather = GatherLabels {\n@@ -403,9 +403,9 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v hir::Block) {\n             if let Some(label) = expression_label(ex) {\n                 for &(prior, prior_span) in &self.labels_in_fn[..] {\n                     // FIXME (#24278): non-hygienic comparison\n-                    if label.name == prior.name {\n+                    if label == prior {\n                         signal_shadowing_problem(self.sess,\n-                                                 label.name,\n+                                                 label,\n                                                  original_label(prior_span),\n                                                  shadower_label(ex.span));\n                     }\n@@ -426,17 +426,17 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v hir::Block) {\n         }\n     }\n \n-    fn expression_label(ex: &hir::Expr) -> Option<ast::Ident> {\n+    fn expression_label(ex: &hir::Expr) -> Option<ast::Name> {\n         match ex.node {\n             hir::ExprWhile(_, _, Some(label)) |\n-            hir::ExprLoop(_, Some(label)) => Some(label),\n+            hir::ExprLoop(_, Some(label)) => Some(label.name),\n             _ => None,\n         }\n     }\n \n     fn check_if_label_shadows_lifetime<'a>(sess: &'a Session,\n                                            mut scope: Scope<'a>,\n-                                           label: ast::Ident,\n+                                           label: ast::Name,\n                                            label_span: Span) {\n         loop {\n             match *scope {\n@@ -447,10 +447,10 @@ fn extract_labels<'v, 'a>(ctxt: &mut LifetimeContext<'a>, b: &'v hir::Block) {\n                 LateScope(lifetimes, s) => {\n                     for lifetime_def in lifetimes {\n                         // FIXME (#24278): non-hygienic comparison\n-                        if label.name == lifetime_def.lifetime.name {\n+                        if label == lifetime_def.lifetime.name {\n                             signal_shadowing_problem(\n                                 sess,\n-                                label.name,\n+                                label,\n                                 original_lifetime(&lifetime_def.lifetime),\n                                 shadower_label(label_span));\n                             return;\n@@ -703,7 +703,7 @@ impl<'a> LifetimeContext<'a> {\n     {\n         for &(label, label_span) in &self.labels_in_fn {\n             // FIXME (#24278): non-hygienic comparison\n-            if lifetime.name == label.name {\n+            if lifetime.name == label {\n                 signal_shadowing_problem(self.sess,\n                                          lifetime.name,\n                                          original_label(label_span),"}, {"sha": "83fac73b7f9dfd86b2232a7dd75fa457c59f13a7", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -99,7 +99,7 @@ pub fn gather_move_from_pat<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     let pat_span_path_opt = match move_pat.node {\n         hir::PatIdent(_, ref path1, _) => {\n             Some(MoveSpanAndPath{span: move_pat.span,\n-                                 ident: path1.node})\n+                                 name: path1.node.name})\n         },\n         _ => None,\n     };"}, {"sha": "0091bbb9395abc4bfe0fb3438d891cf4f2465f2f", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -57,7 +57,7 @@ impl<'tcx> MoveError<'tcx> {\n #[derive(Clone)]\n pub struct MoveSpanAndPath {\n     pub span: codemap::Span,\n-    pub ident: ast::Ident\n+    pub name: ast::Name,\n }\n \n pub struct GroupedMoveErrors<'tcx> {\n@@ -73,7 +73,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         let mut is_first_note = true;\n         for move_to in &error.move_to_places {\n             note_move_destination(bccx, move_to.span,\n-                                  &move_to.ident, is_first_note);\n+                                  move_to.name, is_first_note);\n             is_first_note = false;\n         }\n     }\n@@ -157,9 +157,9 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n \n fn note_move_destination(bccx: &BorrowckCtxt,\n                          move_to_span: codemap::Span,\n-                         pat_ident: &ast::Ident,\n+                         pat_name: ast::Name,\n                          is_first_note: bool) {\n-    let pat_name = pprust::ident_to_string(pat_ident);\n+    let pat_name = pprust::name_to_string(pat_name);\n     if is_first_note {\n         bccx.span_note(\n             move_to_span,"}, {"sha": "5f5736275034b541a3584f750c42a114ee9f2623", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -330,8 +330,7 @@ impl<'ast> pprust_hir::PpAnn for IdentifiedAnnotation<'ast> {\n             s: &mut pprust_hir::State,\n             node: pprust_hir::AnnNode) -> io::Result<()> {\n         match node {\n-            pprust_hir::NodeIdent(_) | pprust_hir::NodeName(_) => Ok(()),\n-\n+            pprust_hir::NodeName(_) => Ok(()),\n             pprust_hir::NodeItem(item) => {\n                 try!(pp::space(&mut s.s));\n                 s.synth_comment(item.id.to_string())"}, {"sha": "29acfc4c4a2d9affe1d1233fbc9d0d58e799ef80", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -296,8 +296,8 @@ pub fn noop_fold_meta_items<T: Folder>(meta_items: Vec<P<MetaItem>>, fld: &mut T\n pub fn noop_fold_view_path<T: Folder>(view_path: P<ViewPath>, fld: &mut T) -> P<ViewPath> {\n     view_path.map(|Spanned {node, span}| Spanned {\n         node: match node {\n-            ViewPathSimple(ident, path) => {\n-                ViewPathSimple(ident, fld.fold_path(path))\n+            ViewPathSimple(name, path) => {\n+                ViewPathSimple(name, fld.fold_path(path))\n             }\n             ViewPathGlob(path) => {\n                 ViewPathGlob(fld.fold_path(path))\n@@ -520,11 +520,11 @@ pub fn noop_fold_explicit_self_underscore<T: Folder>(es: ExplicitSelf_, fld: &mu\n                                                      -> ExplicitSelf_ {\n     match es {\n         SelfStatic | SelfValue(_) => es,\n-        SelfRegion(lifetime, m, ident) => {\n-            SelfRegion(fld.fold_opt_lifetime(lifetime), m, ident)\n+        SelfRegion(lifetime, m, name) => {\n+            SelfRegion(fld.fold_opt_lifetime(lifetime), m, name)\n         }\n-        SelfExplicit(typ, ident) => {\n-            SelfExplicit(fld.fold_ty(typ), ident)\n+        SelfExplicit(typ, name) => {\n+            SelfExplicit(fld.fold_ty(typ), name)\n         }\n     }\n }\n@@ -1111,10 +1111,10 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n                           respan(folder.new_span(name.span),\n                                  folder.fold_name(name.node)))\n             }\n-            ExprTupField(el, ident) => {\n+            ExprTupField(el, index) => {\n                 ExprTupField(folder.fold_expr(el),\n-                             respan(folder.new_span(ident.span),\n-                                    folder.fold_usize(ident.node)))\n+                             respan(folder.new_span(index.span),\n+                                    folder.fold_usize(index.node)))\n             }\n             ExprIndex(el, er) => {\n                 ExprIndex(folder.fold_expr(el), folder.fold_expr(er))"}, {"sha": "9659c9df366c7a9d5bec829902a59d2a1a05f8d3", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -30,7 +30,6 @@ use hir::{RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use std::io::{self, Write, Read};\n \n pub enum AnnNode<'a> {\n-    NodeIdent(&'a ast::Ident),\n     NodeName(&'a ast::Name),\n     NodeBlock(&'a hir::Block),\n     NodeItem(&'a hir::Item),\n@@ -264,8 +263,8 @@ pub fn path_to_string(p: &hir::Path) -> String {\n     to_string(|s| s.print_path(p, false, 0))\n }\n \n-pub fn ident_to_string(id: &ast::Ident) -> String {\n-    to_string(|s| s.print_ident(*id))\n+pub fn name_to_string(name: ast::Name) -> String {\n+    to_string(|s| s.print_name(name))\n }\n \n pub fn fun_to_string(decl: &hir::FnDecl,\n@@ -1355,7 +1354,7 @@ impl<'a> State<'a> {\n             }\n             hir::ExprWhile(ref test, ref blk, opt_ident) => {\n                 if let Some(ident) = opt_ident {\n-                    try!(self.print_ident(ident));\n+                    try!(self.print_name(ident.name));\n                     try!(self.word_space(\":\"));\n                 }\n                 try!(self.head(\"while\"));\n@@ -1365,7 +1364,7 @@ impl<'a> State<'a> {\n             }\n             hir::ExprLoop(ref blk, opt_ident) => {\n                 if let Some(ident) = opt_ident {\n-                    try!(self.print_ident(ident));\n+                    try!(self.print_name(ident.name));\n                     try!(self.word_space(\":\"));\n                 }\n                 try!(self.head(\"loop\"));\n@@ -1470,15 +1469,15 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \"break\"));\n                 try!(space(&mut self.s));\n                 if let Some(ident) = opt_ident {\n-                    try!(self.print_ident(ident.node));\n+                    try!(self.print_name(ident.node.name));\n                     try!(space(&mut self.s));\n                 }\n             }\n             hir::ExprAgain(opt_ident) => {\n                 try!(word(&mut self.s, \"continue\"));\n                 try!(space(&mut self.s));\n                 if let Some(ident) = opt_ident {\n-                    try!(self.print_ident(ident.node));\n+                    try!(self.print_name(ident.node.name));\n                     try!(space(&mut self.s))\n                 }\n             }\n@@ -1591,11 +1590,6 @@ impl<'a> State<'a> {\n         }\n     }\n \n-    pub fn print_ident(&mut self, ident: ast::Ident) -> io::Result<()> {\n-        try!(word(&mut self.s, &ident.name.as_str()));\n-        self.ann.post(self, NodeIdent(&ident))\n-    }\n-\n     pub fn print_usize(&mut self, i: usize) -> io::Result<()> {\n         word(&mut self.s, &i.to_string())\n     }\n@@ -1629,7 +1623,7 @@ impl<'a> State<'a> {\n                 try!(word(&mut self.s, \"::\"))\n             }\n \n-            try!(self.print_ident(segment.identifier));\n+            try!(self.print_name(segment.identifier.name));\n \n             try!(self.print_path_parameters(&segment.parameters, colons_before_params));\n         }\n@@ -1654,7 +1648,7 @@ impl<'a> State<'a> {\n         try!(word(&mut self.s, \">\"));\n         try!(word(&mut self.s, \"::\"));\n         let item_segment = path.segments.last().unwrap();\n-        try!(self.print_ident(item_segment.identifier));\n+        try!(self.print_name(item_segment.identifier.name));\n         self.print_path_parameters(&item_segment.parameters, colons_before_params)\n     }\n \n@@ -1750,7 +1744,7 @@ impl<'a> State<'a> {\n                         try!(self.word_nbsp(\"mut\"));\n                     }\n                 }\n-                try!(self.print_ident(path1.node));\n+                try!(self.print_name(path1.node.name));\n                 match *sub {\n                     Some(ref p) => {\n                         try!(word(&mut self.s, \"@\"));\n@@ -2192,14 +2186,14 @@ impl<'a> State<'a> {\n                 word(&mut self.s, \"::*\")\n             }\n \n-            hir::ViewPathList(ref path, ref idents) => {\n+            hir::ViewPathList(ref path, ref segments) => {\n                 if path.segments.is_empty() {\n                     try!(word(&mut self.s, \"{\"));\n                 } else {\n                     try!(self.print_path(path, false, 0));\n                     try!(word(&mut self.s, \"::{\"));\n                 }\n-                try!(self.commasep(Inconsistent, &idents[..], |s, w| {\n+                try!(self.commasep(Inconsistent, &segments[..], |s, w| {\n                     match w.node {\n                         hir::PathListIdent { name, .. } => {\n                             s.print_name(name)\n@@ -2277,7 +2271,7 @@ impl<'a> State<'a> {\n                        abi: abi::Abi,\n                        unsafety: hir::Unsafety,\n                        decl: &hir::FnDecl,\n-                       name: Option<ast::Ident>,\n+                       name: Option<ast::Name>,\n                        generics: &hir::Generics,\n                        opt_explicit_self: Option<&hir::ExplicitSelf_>)\n                        -> io::Result<()> {\n@@ -2298,7 +2292,7 @@ impl<'a> State<'a> {\n                            unsafety,\n                            hir::Constness::NotConst,\n                            abi,\n-                           name.map(|x| x.name),\n+                           name,\n                            &generics,\n                            opt_explicit_self,\n                            hir::Inherited));"}, {"sha": "6e202ecad366e6f8b9cd1a3f789ee3b3f5de9a16", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -355,13 +355,13 @@ pub fn empty_generics() -> Generics {\n \n // convert a span and an identifier to the corresponding\n // 1-segment path\n-pub fn ident_to_path(s: Span, identifier: Ident) -> Path {\n+pub fn ident_to_path(s: Span, ident: Ident) -> Path {\n     hir::Path {\n         span: s,\n         global: false,\n         segments: vec!(\n             hir::PathSegment {\n-                identifier: identifier,\n+                identifier: ident,\n                 parameters: hir::AngleBracketedParameters(hir::AngleBracketedParameterData {\n                     lifetimes: Vec::new(),\n                     types: OwnedSlice::empty(),"}, {"sha": "d12cd082cab7e587de08c867ada749e4ac16c3a4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -761,9 +761,6 @@ impl LintPass for UnconditionalRecursion {\n impl LateLintPass for UnconditionalRecursion {\n     fn check_fn(&mut self, cx: &LateContext, fn_kind: FnKind, _: &hir::FnDecl,\n                 blk: &hir::Block, sp: Span, id: ast::NodeId) {\n-        type F = for<'tcx> fn(&ty::ctxt<'tcx>,\n-                              ast::NodeId, ast::NodeId, ast::Ident, ast::NodeId) -> bool;\n-\n         let method = match fn_kind {\n             FnKind::ItemFn(..) => None,\n             FnKind::Method(..) => {"}, {"sha": "7972bbda02b0a42b257a0c36740b5233852107e3", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -47,10 +47,10 @@ impl UnusedMut {\n         let mut mutables = FnvHashMap();\n         for p in pats {\n             pat_util::pat_bindings(&cx.tcx.def_map, p, |mode, id, _, path1| {\n-                let ident = path1.node;\n+                let name = path1.node;\n                 if let hir::BindByValue(hir::MutMutable) = mode {\n-                    if !ident.name.as_str().starts_with(\"_\") {\n-                        match mutables.entry(ident.name.usize()) {\n+                    if !name.as_str().starts_with(\"_\") {\n+                        match mutables.entry(name.usize()) {\n                             Vacant(entry) => { entry.insert(vec![id]); },\n                             Occupied(mut entry) => { entry.get_mut().push(id); },\n                         }"}, {"sha": "2ff57a187123d8eb4d8e6f6e00c34f4821f3751c", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -199,7 +199,7 @@ struct Candidate<H:Hair> {\n struct Binding<H:Hair> {\n     span: H::Span,\n     source: Lvalue<H>,\n-    name: H::Ident,\n+    name: H::Name,\n     var_id: H::VarId,\n     var_ty: H::Ty,\n     mutability: Mutability,\n@@ -376,7 +376,7 @@ impl<H:Hair> Builder<H> {\n     fn declare_binding(&mut self,\n                        var_extent: H::CodeExtent,\n                        mutability: Mutability,\n-                       name: H::Ident,\n+                       name: H::Name,\n                        var_id: H::VarId,\n                        var_ty: H::Ty,\n                        span: H::Span)"}, {"sha": "49e1e981a488d00ace6d5bd2e3650f90d5d44b43", "filename": "src/librustc_mir/hair.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Fhair.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Fhair.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -29,7 +29,6 @@ pub trait Hair: Sized+Debug+Clone+Eq+Hash { // (*)\n     type DefId: Copy+Debug+Eq+Hash;                              // e.g., DefId\n     type AdtDef: Copy+Debug+Eq+Hash;                             // e.g., AdtDef<'tcx>\n     type Name: Copy+Debug+Eq+Hash;                               // e.g., ast::Name\n-    type Ident: Copy+Debug+Eq+Hash;                              // e.g., ast::Ident\n     type InternedString: Clone+Debug+Eq+Hash;                    // e.g., InternedString\n     type Bytes: Clone+Debug+Eq+Hash;                             // e.g., Rc<Vec<u8>>\n     type Span: Copy+Debug+Eq;                                    // e.g., syntax::codemap::Span\n@@ -248,7 +247,7 @@ pub enum PatternKind<H:Hair> {\n \n     // x, ref x, x @ P, etc\n     Binding { mutability: Mutability,\n-              name: H::Ident,\n+              name: H::Name,\n               mode: BindingMode<H>,\n               var: H::VarId,\n               ty: H::Ty,"}, {"sha": "a1b891ab090867ffe421ac2cb10c73e3561d15db", "filename": "src/librustc_mir/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Frepr.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -113,7 +113,7 @@ pub enum BorrowKind {\n // decl, a let, etc.\n pub struct VarDecl<H:Hair> {\n     pub mutability: Mutability,\n-    pub name: H::Ident,\n+    pub name: H::Name,\n     pub ty: H::Ty,\n }\n "}, {"sha": "33982b3e5685012662cede00c91b94f7d7344023", "filename": "src/librustc_mir/tcx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftcx%2Fexpr.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -291,9 +291,9 @@ impl<'a,'tcx:'a> Mirror<Cx<'a,'tcx>> for &'tcx hir::Expr {\n             hir::ExprField(ref source, name) =>\n                 ExprKind::Field { lhs: source.to_ref(),\n                                   name: Field::Named(name.node) },\n-            hir::ExprTupField(ref source, ident) =>\n+            hir::ExprTupField(ref source, index) =>\n                 ExprKind::Field { lhs: source.to_ref(),\n-                                  name: Field::Indexed(ident.node) },\n+                                  name: Field::Indexed(index.node) },\n             hir::ExprCast(ref source, _) =>\n                 ExprKind::Cast { source: source.to_ref() },\n             hir::ExprBox(ref place, ref value) =>"}, {"sha": "9c0ef55b3d83acf4f4e329ef426d4963b9b0c80e", "filename": "src/librustc_mir/tcx/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Ftcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Ftcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftcx%2Fmod.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -47,7 +47,6 @@ impl<'a,'tcx:'a> Hair for Cx<'a, 'tcx> {\n     type DefId = DefId;\n     type AdtDef = ty::AdtDef<'tcx>;\n     type Name = ast::Name;\n-    type Ident = ast::Ident;\n     type InternedString = InternedString;\n     type Bytes = Rc<Vec<u8>>;\n     type Span = Span;"}, {"sha": "d80fbfa7fe89702a60b353a44207436893ba4625", "filename": "src/librustc_mir/tcx/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Ftcx%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_mir%2Ftcx%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftcx%2Fpattern.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -39,12 +39,12 @@ use tcx::to_ref::ToRef;\n #[derive(Clone, Debug)]\n pub struct PatNode<'tcx> {\n     pat: &'tcx hir::Pat,\n-    binding_map: Option<Rc<FnvHashMap<ast::Ident, ast::NodeId>>>\n+    binding_map: Option<Rc<FnvHashMap<ast::Name, ast::NodeId>>>\n }\n \n impl<'tcx> PatNode<'tcx> {\n     pub fn new(pat: &'tcx hir::Pat,\n-               binding_map: Option<Rc<FnvHashMap<ast::Ident, ast::NodeId>>>)\n+               binding_map: Option<Rc<FnvHashMap<ast::Name, ast::NodeId>>>)\n                -> PatNode<'tcx> {\n         PatNode {\n             pat: pat,\n@@ -220,7 +220,7 @@ impl<'a,'tcx:'a> Mirror<Cx<'a,'tcx>> for PatNode<'tcx> {\n             {\n                 let id = match self.binding_map {\n                     None => self.pat.id,\n-                    Some(ref map) => map[&ident.node],\n+                    Some(ref map) => map[&ident.node.name],\n                 };\n                 let var_ty = cx.tcx.node_id_to_type(self.pat.id);\n                 let region = match var_ty.sty {\n@@ -240,7 +240,7 @@ impl<'a,'tcx:'a> Mirror<Cx<'a,'tcx>> for PatNode<'tcx> {\n                 PatternKind::Binding {\n                     mutability: mutability,\n                     mode: mode,\n-                    name: ident.node,\n+                    name: ident.node.name,\n                     var: id,\n                     ty: var_ty,\n                     subpattern: self.opt_pat_ref(sub),"}, {"sha": "cf964107d16b38e201fb933e3d8418380efe356f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -392,7 +392,6 @@ enum PrivacyResult {\n \n enum FieldName {\n     UnnamedField(usize), // index\n-    // (Name, not Ident, because struct fields are not macro-hygienic)\n     NamedField(ast::Name),\n }\n "}, {"sha": "8a15eabd61419700d60ec6d48a1741acf8ae0aa9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -281,14 +281,14 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     ViewPathSimple(_, ref full_path) => {\n                         full_path.segments\n                             .split_last().unwrap().1\n-                            .iter().map(|ident| ident.identifier.name)\n+                            .iter().map(|seg| seg.identifier.name)\n                             .collect()\n                     }\n \n                     ViewPathGlob(ref module_ident_path) |\n                     ViewPathList(ref module_ident_path, _) => {\n                         module_ident_path.segments\n-                            .iter().map(|ident| ident.identifier.name).collect()\n+                            .iter().map(|seg| seg.identifier.name).collect()\n                     }\n                 };\n "}, {"sha": "e869fb9c2bc7b1d296e8f0f93aaa9769de8d012c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -57,7 +57,7 @@ use rustc::metadata::csearch;\n use rustc::metadata::decoder::{DefLike, DlDef, DlField, DlImpl};\n use rustc::middle::def::*;\n use rustc::middle::def_id::DefId;\n-use rustc::middle::pat_util::pat_bindings;\n+use rustc::middle::pat_util::pat_bindings_hygienic;\n use rustc::middle::privacy::*;\n use rustc::middle::subst::{ParamSpace, FnSpace, TypeSpace};\n use rustc::middle::ty::{Freevar, FreevarMap, TraitMap, GlobMap};\n@@ -2559,7 +2559,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     // user and one 'x' came from the macro.\n     fn binding_mode_map(&mut self, pat: &Pat) -> BindingMap {\n         let mut result = HashMap::new();\n-        pat_bindings(&self.def_map, pat, |binding_mode, _id, sp, path1| {\n+        pat_bindings_hygienic(&self.def_map, pat, |binding_mode, _id, sp, path1| {\n             let name = mtwt::resolve(path1.node);\n             result.insert(name, BindingInfo {\n                 span: sp,"}, {"sha": "c84f92864011fea6289ee81bd5b2c74b3af1564d", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -793,10 +793,10 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     )));\n         }\n \n-        for (ident, target_import_resolution) in import_resolutions.iter() {\n+        for (name, target_import_resolution) in import_resolutions.iter() {\n             debug!(\"(resolving glob import) writing module resolution \\\n                     {} into `{}`\",\n-                   *ident,\n+                   *name,\n                    module_to_string(module_));\n \n             if !target_import_resolution.is_public {\n@@ -806,7 +806,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n \n             // Here we merge two import resolutions.\n             let mut import_resolutions = module_.import_resolutions.borrow_mut();\n-            match import_resolutions.get_mut(ident) {\n+            match import_resolutions.get_mut(name) {\n                 Some(dest_import_resolution) => {\n                     // Merge the two import resolutions at a finer-grained\n                     // level.\n@@ -818,7 +818,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         Some(ref value_target) => {\n                             self.check_for_conflicting_import(&dest_import_resolution,\n                                                               import_directive.span,\n-                                                              *ident,\n+                                                              *name,\n                                                               ValueNS);\n                             dest_import_resolution.value_target = Some(value_target.clone());\n                         }\n@@ -830,7 +830,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         Some(ref type_target) => {\n                             self.check_for_conflicting_import(&dest_import_resolution,\n                                                               import_directive.span,\n-                                                              *ident,\n+                                                              *name,\n                                                               TypeNS);\n                             dest_import_resolution.type_target = Some(type_target.clone());\n                         }\n@@ -848,7 +848,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n             new_import_resolution.type_target =\n                 target_import_resolution.type_target.clone();\n \n-            import_resolutions.insert(*ident, new_import_resolution);\n+            import_resolutions.insert(*name, new_import_resolution);\n         }\n \n         // Add all children from the containing module."}, {"sha": "df2290671ae34f1a9cb22d7cb4ccd64506399f73", "filename": "src/librustc_trans/save/dump_csv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fdump_csv.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -444,7 +444,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n \n     fn process_const(&mut self,\n                      id: ast::NodeId,\n-                     ident: &ast::Ident,\n+                     name: &ast::Name,\n                      span: Span,\n                      typ: &ast::Ty,\n                      expr: &ast::Expr) {\n@@ -456,7 +456,7 @@ impl <'l, 'tcx> DumpCsvVisitor<'l, 'tcx> {\n         self.fmt.static_str(span,\n                             sub_span,\n                             id,\n-                            &ident.name.as_str(),\n+                            &name.as_str(),\n                             &qualname,\n                             &self.span.snippet(expr.span),\n                             &ty_to_string(&*typ),\n@@ -988,7 +988,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) {\n         match trait_item.node {\n             ast::ConstTraitItem(ref ty, Some(ref expr)) => {\n-                self.process_const(trait_item.id, &trait_item.ident,\n+                self.process_const(trait_item.id, &trait_item.ident.name,\n                                    trait_item.span, &*ty, &*expr);\n             }\n             ast::MethodTraitItem(ref sig, ref body) => {\n@@ -1006,7 +1006,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DumpCsvVisitor<'l, 'tcx> {\n     fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) {\n         match impl_item.node {\n             ast::ConstImplItem(ref ty, ref expr) => {\n-                self.process_const(impl_item.id, &impl_item.ident,\n+                self.process_const(impl_item.id, &impl_item.ident.name,\n                                    impl_item.span, &ty, &expr);\n             }\n             ast::MethodImplItem(ref sig, ref body) => {"}, {"sha": "cdc102b2e7a0921ab17565e88c9d7e5fdbf3a007", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -375,7 +375,7 @@ pub struct BindingInfo<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n-type BindingsMap<'tcx> = FnvHashMap<ast::Ident, BindingInfo<'tcx>>;\n+type BindingsMap<'tcx> = FnvHashMap<ast::Name, BindingInfo<'tcx>>;\n \n struct ArmData<'p, 'blk, 'tcx: 'blk> {\n     bodycx: Block<'blk, 'tcx>,\n@@ -390,7 +390,7 @@ struct ArmData<'p, 'blk, 'tcx: 'blk> {\n struct Match<'a, 'p: 'a, 'blk: 'a, 'tcx: 'blk> {\n     pats: Vec<&'p hir::Pat>,\n     data: &'a ArmData<'p, 'blk, 'tcx>,\n-    bound_ptrs: Vec<(ast::Ident, ValueRef)>,\n+    bound_ptrs: Vec<(ast::Name, ValueRef)>,\n     // Thread along renamings done by the check_match::StaticInliner, so we can\n     // map back to original NodeIds\n     pat_renaming_map: Option<&'a FnvHashMap<(NodeId, Span), NodeId>>\n@@ -464,7 +464,7 @@ fn expand_nested_bindings<'a, 'p, 'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         loop {\n             pat = match pat.node {\n                 hir::PatIdent(_, ref path, Some(ref inner)) => {\n-                    bound_ptrs.push((path.node, val.val));\n+                    bound_ptrs.push((path.node.name, val.val));\n                     &**inner\n                 },\n                 _ => break\n@@ -505,15 +505,15 @@ fn enter_match<'a, 'b, 'p, 'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n             match this.node {\n                 hir::PatIdent(_, ref path, None) => {\n                     if pat_is_binding(dm, &*this) {\n-                        bound_ptrs.push((path.node, val.val));\n+                        bound_ptrs.push((path.node.name, val.val));\n                     }\n                 }\n                 hir::PatVec(ref before, Some(ref slice), ref after) => {\n                     if let hir::PatIdent(_, ref path, None) = slice.node {\n                         let subslice_val = bind_subslice_pat(\n                             bcx, this.id, val,\n                             before.len(), after.len());\n-                        bound_ptrs.push((path.node, subslice_val));\n+                        bound_ptrs.push((path.node.name, subslice_val));\n                     }\n                 }\n                 _ => {}\n@@ -943,7 +943,7 @@ fn insert_lllocals<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                bindings_map: &BindingsMap<'tcx>,\n                                cs: Option<cleanup::ScopeId>)\n                                -> Block<'blk, 'tcx> {\n-    for (&ident, &binding_info) in bindings_map {\n+    for (&name, &binding_info) in bindings_map {\n         let (llval, aliases_other_state) = match binding_info.trmode {\n             // By value mut binding for a copy type: load from the ptr\n             // into the matched value and copy to our alloca\n@@ -1021,7 +1021,7 @@ fn insert_lllocals<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n         debug!(\"binding {} to {}\", binding_info.id, bcx.val_to_string(llval));\n         bcx.fcx.lllocals.borrow_mut().insert(binding_info.id, datum);\n-        debuginfo::create_match_binding_metadata(bcx, ident.name, binding_info);\n+        debuginfo::create_match_binding_metadata(bcx, name, binding_info);\n     }\n     bcx\n }\n@@ -1510,8 +1510,7 @@ fn create_bindings_map<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, pat: &hir::Pat,\n     let reassigned = is_discr_reassigned(bcx, discr, body);\n     let mut bindings_map = FnvHashMap();\n     pat_bindings(&tcx.def_map, &*pat, |bm, p_id, span, path1| {\n-        let ident = path1.node;\n-        let name = ident.name;\n+        let name = path1.node;\n         let variable_ty = node_id_type(bcx, p_id);\n         let llvariable_ty = type_of::type_of(ccx, variable_ty);\n         let tcx = bcx.tcx();\n@@ -1543,7 +1542,7 @@ fn create_bindings_map<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, pat: &hir::Pat,\n                 trmode = TrByRef;\n             }\n         };\n-        bindings_map.insert(ident, BindingInfo {\n+        bindings_map.insert(name, BindingInfo {\n             llmatch: llmatch,\n             trmode: trmode,\n             id: p_id,\n@@ -1656,7 +1655,7 @@ pub fn store_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         pat_bindings(&tcx.def_map, pat, |_, p_id, _, path1| {\n             let scope = cleanup::var_scope(tcx, p_id);\n             bcx = mk_binding_alloca(\n-                bcx, p_id, path1.node.name, scope, (),\n+                bcx, p_id, path1.node, scope, (),\n                 \"_match::store_local::create_dummy_locals\",\n                 |(), bcx, Datum { val: llval, ty, kind }| {\n                     // Dummy-locals start out uninitialized, so set their\n@@ -1693,11 +1692,11 @@ pub fn store_local<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             //\n             // In such cases, the more general path is unsafe, because\n             // it assumes it is matching against a valid value.\n-            match simple_identifier(&*pat) {\n-                Some(ident) => {\n+            match simple_name(pat) {\n+                Some(name) => {\n                     let var_scope = cleanup::var_scope(tcx, local.id);\n                     return mk_binding_alloca(\n-                        bcx, pat.id, ident.name, var_scope, (),\n+                        bcx, pat.id, name, var_scope, (),\n                         \"_match::store_local\",\n                         |(), bcx, Datum { val: v, .. }| expr::trans_into(bcx, &**init_expr,\n                                                                          expr::SaveIn(v)));"}, {"sha": "894e0af9cce6b0293cb86b911d305ae6a986d0de", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -40,7 +40,7 @@ use middle::cfg;\n use middle::def_id::{DefId, LOCAL_CRATE};\n use middle::lang_items::{LangItem, ExchangeMallocFnLangItem, StartFnLangItem};\n use middle::weak_lang_items;\n-use middle::pat_util::simple_identifier;\n+use middle::pat_util::simple_name;\n use middle::subst::Substs;\n use middle::ty::{self, Ty, HasTypeFlags};\n use rustc::front::map as hir_map;\n@@ -1447,10 +1447,10 @@ pub fn create_datums_for_fn_args<'a, 'tcx>(mut bcx: Block<'a, 'tcx>,\n         };\n \n         let pat = &*args[i].pat;\n-        bcx = if let Some(ident) = simple_identifier(&*pat) {\n+        bcx = if let Some(name) = simple_name(pat) {\n             // Generate nicer LLVM for the common case of fn a pattern\n             // like `x: T`\n-            set_value_name(arg_datum.val, &bcx.name(ident.name));\n+            set_value_name(arg_datum.val, &bcx.name(name));\n             bcx.fcx.lllocals.borrow_mut().insert(pat.id, arg_datum);\n             bcx\n         } else {"}, {"sha": "875eb353cf7e349bf341289e045e6d7e662eb965", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -305,7 +305,7 @@ pub fn trans_loop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n pub fn trans_break_cont<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                     expr: &hir::Expr,\n-                                    opt_label: Option<ast::Ident>,\n+                                    opt_label: Option<ast::Name>,\n                                     exit: usize)\n                                     -> Block<'blk, 'tcx> {\n     let _icx = push_ctxt(\"trans_break_cont\");\n@@ -338,14 +338,14 @@ pub fn trans_break_cont<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n pub fn trans_break<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                expr: &hir::Expr,\n-                               label_opt: Option<ast::Ident>)\n+                               label_opt: Option<ast::Name>)\n                                -> Block<'blk, 'tcx> {\n     return trans_break_cont(bcx, expr, label_opt, cleanup::EXIT_BREAK);\n }\n \n pub fn trans_cont<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                               expr: &hir::Expr,\n-                              label_opt: Option<ast::Ident>)\n+                              label_opt: Option<ast::Name>)\n                               -> Block<'blk, 'tcx> {\n     return trans_break_cont(bcx, expr, label_opt, cleanup::EXIT_LOOP);\n }"}, {"sha": "8be108441ec17ee9288df7fbb6945805aa8a4157", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -49,7 +49,7 @@ pub fn create_scope_map(cx: &CrateContext,\n     for arg in args {\n         pat_util::pat_bindings(def_map, &*arg.pat, |_, node_id, _, path1| {\n             scope_stack.push(ScopeStackEntry { scope_metadata: fn_metadata,\n-                                               name: Some(path1.node.name) });\n+                                               name: Some(path1.node) });\n             scope_map.insert(node_id, fn_metadata);\n         })\n     }"}, {"sha": "1d35b51a5f81c086ca98c354dc04b0138fefcd18", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -1925,7 +1925,7 @@ pub fn create_local_var_metadata(bcx: Block, local: &hir::Local) {\n     let def_map = &cx.tcx().def_map;\n     let locals = bcx.fcx.lllocals.borrow();\n \n-    pat_util::pat_bindings(def_map, &*local.pat, |_, node_id, span, var_ident| {\n+    pat_util::pat_bindings(def_map, &*local.pat, |_, node_id, span, var_name| {\n         let datum = match locals.get(&node_id) {\n             Some(datum) => datum,\n             None => {\n@@ -1943,7 +1943,7 @@ pub fn create_local_var_metadata(bcx: Block, local: &hir::Local) {\n         let scope_metadata = scope_metadata(bcx.fcx, node_id, span);\n \n         declare_local(bcx,\n-                      var_ident.node.name,\n+                      var_name.node,\n                       datum.ty,\n                       scope_metadata,\n                       VariableAccess::DirectVariable { alloca: datum.val },\n@@ -2105,7 +2105,7 @@ pub fn create_argument_metadata(bcx: Block, arg: &hir::Arg) {\n                          .fn_metadata;\n     let locals = bcx.fcx.lllocals.borrow();\n \n-    pat_util::pat_bindings(def_map, &*arg.pat, |_, node_id, span, var_ident| {\n+    pat_util::pat_bindings(def_map, &*arg.pat, |_, node_id, span, var_name| {\n         let datum = match locals.get(&node_id) {\n             Some(v) => v,\n             None => {\n@@ -2132,7 +2132,7 @@ pub fn create_argument_metadata(bcx: Block, arg: &hir::Arg) {\n         };\n \n         declare_local(bcx,\n-                      var_ident.node.name,\n+                      var_name.node,\n                       datum.ty,\n                       scope_metadata,\n                       VariableAccess::DirectVariable { alloca: datum.val },"}, {"sha": "c081f4fdb4775c7bac3c52f6e0ecd0b67d4200ea", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -963,10 +963,10 @@ fn trans_rvalue_stmt_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n     match expr.node {\n         hir::ExprBreak(label_opt) => {\n-            controlflow::trans_break(bcx, expr, label_opt.map(|l| l.node))\n+            controlflow::trans_break(bcx, expr, label_opt.map(|l| l.node.name))\n         }\n         hir::ExprAgain(label_opt) => {\n-            controlflow::trans_cont(bcx, expr, label_opt.map(|l| l.node))\n+            controlflow::trans_cont(bcx, expr, label_opt.map(|l| l.node.name))\n         }\n         hir::ExprRet(ref ex) => {\n             // Check to see if the return expression itself is reachable.\n@@ -1114,7 +1114,7 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // trans. Shudder.\n             fn make_field(field_name: &str, expr: P<hir::Expr>) -> hir::Field {\n                 hir::Field {\n-                    name: codemap::dummy_spanned(token::str_to_ident(field_name).name),\n+                    name: codemap::dummy_spanned(token::intern(field_name)),\n                     expr: expr,\n                     span: codemap::DUMMY_SP,\n                 }"}, {"sha": "546e337d746d992a7dcbcd743e9b45e19ecc7a21", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -179,7 +179,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n \n             // if there are multiple arms, make sure they all agree on\n             // what the type of the binding `x` ought to be\n-            let canon_id = *pcx.map.get(&path.node).unwrap();\n+            let canon_id = *pcx.map.get(&path.node.name).unwrap();\n             if canon_id != pat.id {\n                 let ct = fcx.local_ty(pat.span, canon_id);\n                 demand::eqtype(fcx, pat.span, ct, typ);"}, {"sha": "9b8f90e97e014863b83ea0d8c289edfb369672d5", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -682,7 +682,7 @@ pub fn check_struct(ccx: &CrateCtxt, id: ast::NodeId, span: Span) {\n }\n \n pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n-    debug!(\"check_item_type(it.id={}, it.ident={})\",\n+    debug!(\"check_item_type(it.id={}, it.name={})\",\n            it.id,\n            ccx.tcx.item_path_str(DefId::local(it.id)));\n     let _indenter = indenter();\n@@ -750,7 +750,7 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n }\n \n pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n-    debug!(\"check_item_body(it.id={}, it.ident={})\",\n+    debug!(\"check_item_body(it.id={}, it.name={})\",\n            it.id,\n            ccx.tcx.item_path_str(DefId::local(it.id)));\n     let _indenter = indenter();"}, {"sha": "70983b89ed5c820af31228e032d26fc829e4ec27", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -55,7 +55,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     /// the types first.\n     fn check_item_well_formed(&mut self, item: &hir::Item) {\n         let ccx = self.ccx;\n-        debug!(\"check_item_well_formed(it.id={}, it.ident={})\",\n+        debug!(\"check_item_well_formed(it.id={}, it.name={})\",\n                item.id,\n                ccx.tcx.item_path_str(DefId::local(item.id)));\n "}, {"sha": "2c6879891b1c909929adfbfc562508dbb9d21966", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -61,7 +61,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     /// the types first.\n     fn check_item_well_formed(&mut self, item: &hir::Item) {\n         let ccx = self.ccx;\n-        debug!(\"check_item_well_formed(it.id={}, it.ident={})\",\n+        debug!(\"check_item_well_formed(it.id={}, it.name={})\",\n                item.id,\n                ccx.tcx.item_path_str(DefId::local(item.id)));\n "}, {"sha": "9e1b20258f07b05d68135178a1dda0dd246aac63", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -699,12 +699,12 @@ fn convert_methods<'a,'tcx,'i,I>(ccx: &CrateCtxt<'a, 'tcx>,\n            rcvr_ty_generics,\n            rcvr_ty_predicates);\n \n-    for (sig, id, ident, vis, _span) in methods {\n+    for (sig, id, name, vis, _span) in methods {\n         convert_method(ccx,\n                        container,\n                        sig,\n                        id,\n-                       ident,\n+                       name,\n                        vis,\n                        untransformed_rcvr_ty,\n                        rcvr_ty_generics,"}, {"sha": "89020b011a955b4a2f727974dbcadc7e68d2196e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -1583,7 +1583,7 @@ impl Clean<Type> for hir::Ty {\n                 let mut trait_path = p.clone();\n                 trait_path.segments.pop();\n                 Type::QPath {\n-                    name: p.segments.last().unwrap().identifier.clean(cx),\n+                    name: p.segments.last().unwrap().identifier.name.clean(cx),\n                     self_type: box qself.ty.clean(cx),\n                     trait_: box resolve_type(cx, trait_path.clean(cx), self.id)\n                 }\n@@ -2044,7 +2044,7 @@ pub struct PathSegment {\n impl Clean<PathSegment> for hir::PathSegment {\n     fn clean(&self, cx: &DocContext) -> PathSegment {\n         PathSegment {\n-            name: self.identifier.clean(cx),\n+            name: self.identifier.name.clean(cx),\n             params: self.parameters.clean(cx)\n         }\n     }\n@@ -2064,12 +2064,6 @@ fn path_to_string(p: &hir::Path) -> String {\n     s\n }\n \n-impl Clean<String> for ast::Ident {\n-    fn clean(&self, _: &DocContext) -> String {\n-        self.to_string()\n-    }\n-}\n-\n impl Clean<String> for ast::Name {\n     fn clean(&self, _: &DocContext) -> String {\n         self.to_string()"}, {"sha": "5b4b4e4ef2c00ca5462f73756ba0056db7df72f6", "filename": "src/test/run-pass/backtrace-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace-debuginfo.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -16,6 +16,7 @@\n // \"enable\" to 0 instead.\n // compile-flags:-g -Cllvm-args=-enable-tail-merge=0\n // ignore-pretty as this critically relies on line numbers\n+// ignore-windows\n \n use std::io;\n use std::io::prelude::*;"}, {"sha": "40aed16bd138e90bfdcaf1e41d48fcb1860049ef", "filename": "src/test/run-pass/backtrace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40ce80484c636e525ac796a81f38a96c0ca8bf09/src%2Ftest%2Frun-pass%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbacktrace.rs?ref=40ce80484c636e525ac796a81f38a96c0ca8bf09", "patch": "@@ -11,6 +11,7 @@\n // no-pretty-expanded FIXME #15189\n // ignore-android FIXME #17520\n // ignore-msvc FIXME #28133\n+// ignore-windows\n \n use std::env;\n use std::process::{Command, Stdio};"}]}