{"sha": "e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YTA1ZTIwMWVlNmNlYTEyZmUwNWU0MjcxZTkxZmQ0MGMyZmIyMzU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-01-08T11:39:38Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-03-26T10:27:45Z"}, "message": "permit negative impls for non-auto traits", "tree": {"sha": "bdceb99e8a844cd9582b46c0cd10c3da8865bc60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdceb99e8a844cd9582b46c0cd10c3da8865bc60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "html_url": "https://github.com/rust-lang/rust/commit/e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17dd3608477a47741f97b907a61b6d81524ba4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17dd3608477a47741f97b907a61b6d81524ba4e", "html_url": "https://github.com/rust-lang/rust/commit/a17dd3608477a47741f97b907a61b6d81524ba4e"}], "stats": {"total": 429, "additions": 328, "deletions": 101}, "files": [{"sha": "629c197e37691d06b06d066658479ba1af9a0459", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -227,4 +227,9 @@ mod impls {\n             *self\n         }\n     }\n+\n+    // Shared references can be cloned, but mutable references *cannot*!\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg(not(bootstrap))]\n+    impl<T: ?Sized> !Clone for &mut T {}\n }"}, {"sha": "e2deeb556610cf63a34948c8075505eb64645cc2", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -81,6 +81,10 @@ impl<T: ?Sized> Deref for &T {\n     }\n }\n \n+#[cfg(not(bootstrap))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: ?Sized> !DerefMut for &T {}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Deref for &mut T {\n     type Target = T;"}, {"sha": "bff20c2a62cef4961447bcef26cf81246c64cda7", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -97,7 +97,6 @@ E0184: include_str!(\"./error_codes/E0184.md\"),\n E0185: include_str!(\"./error_codes/E0185.md\"),\n E0186: include_str!(\"./error_codes/E0186.md\"),\n E0191: include_str!(\"./error_codes/E0191.md\"),\n-E0192: include_str!(\"./error_codes/E0192.md\"),\n E0193: include_str!(\"./error_codes/E0193.md\"),\n E0195: include_str!(\"./error_codes/E0195.md\"),\n E0197: include_str!(\"./error_codes/E0197.md\"),\n@@ -426,6 +425,8 @@ E0745: include_str!(\"./error_codes/E0745.md\"),\n E0746: include_str!(\"./error_codes/E0746.md\"),\n E0747: include_str!(\"./error_codes/E0747.md\"),\n E0748: include_str!(\"./error_codes/E0748.md\"),\n+E0749: include_str!(\"./error_codes/E0749.md\"),\n+E0750: include_str!(\"./error_codes/E0750.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard\n@@ -460,6 +461,7 @@ E0748: include_str!(\"./error_codes/E0748.md\"),\n //  E0188, // can not cast an immutable reference to a mutable pointer\n //  E0189, // deprecated: can only cast a boxed pointer to a boxed object\n //  E0190, // deprecated: can only cast a &-pointer to an &-object\n+//  E0192, // negative impl only applicable to auto traits\n //  E0194, // merged into E0403\n //  E0196, // cannot determine a type for this closure\n     E0208,"}, {"sha": "9eb8ee4e3fdf78fdbbceda19e3876886827b3a59", "filename": "src/librustc_error_codes/error_codes/E0749.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_error_codes%2Ferror_codes%2FE0749.md", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_error_codes%2Ferror_codes%2FE0749.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0749.md?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,4 @@\n+Negative impls are not allowed to have any items. Negative impls\n+declare that a trait is **not** implemented (and never will be) and\n+hence there is no need to specify the values for trait methods or\n+other items."}, {"sha": "e0cf56f716f9ddda3752ae915c7b5a080bc42a76", "filename": "src/librustc_error_codes/error_codes/E0750.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_error_codes%2Ferror_codes%2FE0750.md", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_error_codes%2Ferror_codes%2FE0750.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0750.md?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,4 @@\n+Negative impls cannot be default impls. A default impl supplies\n+default values for the items within to be used by other impls, whereas\n+a negative impl declares that there are no other impls. These don't\n+make sense to combine."}, {"sha": "98ff5ccc82f694b9fa5fbd8f3dae6c4746248f36", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -1659,11 +1659,14 @@ fn check_opaque_for_inheriting_lifetimes(tcx: TyCtxt<'tcx>, def_id: DefId, span:\n             _ => unreachable!(),\n         };\n \n-        tcx.sess.span_err(span, &format!(\n+        tcx.sess.span_err(\n+            span,\n+            &format!(\n             \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n              a parent scope\",\n             if is_async { \"async fn\" } else { \"impl Trait\" },\n-        ));\n+        ),\n+        );\n     }\n }\n \n@@ -1841,8 +1844,8 @@ fn maybe_check_static_with_link_section(tcx: TyCtxt<'_>, id: DefId, span: Span)\n         Ok(ConstValue::ByRef { alloc, .. }) => {\n             if alloc.relocations().len() != 0 {\n                 let msg = \"statics with a custom `#[link_section]` must be a \\\n-                       simple list of bytes on the wasm target with no \\\n-                       extra levels of indirection such as references\";\n+                           simple list of bytes on the wasm target with no \\\n+                           extra levels of indirection such as references\";\n                 tcx.sess.span_err(span, msg);\n             }\n         }\n@@ -1971,6 +1974,24 @@ fn check_impl_items_against_trait<'tcx>(\n         return;\n     }\n \n+    // Negative impls are not expected to have any items\n+    match tcx.impl_polarity(impl_id) {\n+        ty::ImplPolarity::Reservation | ty::ImplPolarity::Positive => {}\n+        ty::ImplPolarity::Negative => {\n+            if !impl_item_refs.is_empty() {\n+                let first_item_span = tcx.hir().impl_item(impl_item_refs[0].id).span;\n+                struct_span_err!(\n+                    tcx.sess,\n+                    first_item_span,\n+                    E0749,\n+                    \"negative impls cannot have any items\"\n+                )\n+                .emit();\n+            }\n+            return;\n+        }\n+    }\n+\n     // Locate trait definition and items\n     let trait_def = tcx.trait_def(impl_trait_ref.def_id);\n \n@@ -2010,7 +2031,7 @@ fn check_impl_items_against_trait<'tcx>(\n                             impl_item.span,\n                             E0323,\n                             \"item `{}` is an associated const, \\\n-                              which doesn't match its trait `{}`\",\n+                             which doesn't match its trait `{}`\",\n                             ty_impl_item.ident,\n                             impl_trait_ref.print_only_trait_path()\n                         );\n@@ -3554,7 +3575,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let adjusted_ty = autoderef.unambiguous_final_ty(self);\n         debug!(\n             \"try_index_step(expr={:?}, base_expr={:?}, adjusted_ty={:?}, \\\n-                               index_ty={:?})\",\n+             index_ty={:?})\",\n             expr, base_expr, adjusted_ty, index_ty\n         );\n \n@@ -4705,7 +4726,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 err.span_label(\n                                     fn_span,\n                                     \"implicitly returns `()` as its body has no tail or `return` \\\n-                                 expression\",\n+                                     expression\",\n                                 );\n                             }\n                         },\n@@ -5577,11 +5598,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             match self.at(&self.misc(span), self.param_env).sup(impl_ty, self_ty) {\n                 Ok(ok) => self.register_infer_ok_obligations(ok),\n                 Err(_) => {\n-                    self.tcx.sess.delay_span_bug(span, &format!(\n+                    self.tcx.sess.delay_span_bug(\n+                        span,\n+                        &format!(\n                         \"instantiate_value_path: (UFCS) {:?} was a subtype of {:?} but now is not?\",\n                         self_ty,\n                         impl_ty,\n-                    ));\n+                    ),\n+                    );\n                 }\n             }\n         }\n@@ -5767,7 +5791,7 @@ fn fatally_break_rust(sess: &Session) {\n     handler.note_without_error(\"the compiler expectedly panicked. this is a feature.\");\n     handler.note_without_error(\n         \"we would appreciate a joke overview: \\\n-        https://github.com/rust-lang/rust/issues/43162#issuecomment-320764675\",\n+         https://github.com/rust-lang/rust/issues/43162#issuecomment-320764675\",\n     );\n     handler.note_without_error(&format!(\n         \"rustc {} running on {}\","}, {"sha": "c89c4b028b4ea9b4124f18bcb62c50769ef7a92a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -124,18 +124,16 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: DefId) {\n                 }\n                 (ty::ImplPolarity::Negative, ast::ImplPolarity::Negative(span)) => {\n                     // FIXME(#27579): what amount of WF checking do we need for neg impls?\n-                    if let (Some(of_trait), false) = (of_trait, is_auto) {\n+                    if let hir::Defaultness::Default { .. } = defaultness {\n+                        let mut spans = vec![span];\n+                        spans.extend(defaultness_span);\n                         struct_span_err!(\n                             tcx.sess,\n-                            span.to(of_trait.path.span),\n-                            E0192,\n-                            \"invalid negative impl\"\n+                            spans,\n+                            E0750,\n+                            \"negative impls cannot be default impls\"\n                         )\n-                        .note(\n-                            \"negative impls are only allowed for auto traits, like `Send` and \\\n-                             `Sync`\",\n-                        )\n-                        .emit()\n+                        .emit();\n                     }\n                 }\n                 (ty::ImplPolarity::Reservation, _) => {\n@@ -902,13 +900,13 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                             .struct_span_err(\n                                                 span,\n                                                 \"non-defining opaque type use \\\n-                                                    in defining scope\",\n+                                                 in defining scope\",\n                                             )\n                                             .span_label(\n                                                 param_span,\n                                                 \"cannot use static lifetime; use a bound lifetime \\\n-                                                instead or remove the lifetime parameter from the \\\n-                                                opaque type\",\n+                                                 instead or remove the lifetime parameter from the \\\n+                                                 opaque type\",\n                                             )\n                                             .emit();\n                                     } else {\n@@ -923,13 +921,13 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                             .struct_span_err(\n                                                 span,\n                                                 \"non-defining opaque type use \\\n-                                                in defining scope\",\n+                                                 in defining scope\",\n                                             )\n                                             .span_note(\n                                                 tcx.def_span(param.def_id),\n                                                 &format!(\n                                                     \"used non-generic const {} for \\\n-                                                    generic parameter\",\n+                                                     generic parameter\",\n                                                     ty,\n                                                 ),\n                                             )\n@@ -944,7 +942,7 @@ fn check_opaque_types<'fcx, 'tcx>(\n                                     .struct_span_err(\n                                         span,\n                                         \"non-defining opaque type use \\\n-                                            in defining scope\",\n+                                         in defining scope\",\n                                     )\n                                     .span_note(spans, \"lifetime used multiple times\")\n                                     .emit();\n@@ -1030,7 +1028,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n                     span,\n                     &format!(\n                         \"`{}` cannot be used as the type of `self` without \\\n-                            the `arbitrary_self_types` feature\",\n+                         the `arbitrary_self_types` feature\",\n                         receiver_ty,\n                     ),\n                 )"}, {"sha": "c52977e49b457f36370c64cc67cbf108c84d1618", "filename": "src/test/ui/error-codes/E0192.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a17dd3608477a47741f97b907a61b6d81524ba4e/src%2Ftest%2Fui%2Ferror-codes%2FE0192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17dd3608477a47741f97b907a61b6d81524ba4e/src%2Ftest%2Fui%2Ferror-codes%2FE0192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0192.rs?ref=a17dd3608477a47741f97b907a61b6d81524ba4e", "patch": "@@ -1,12 +0,0 @@\n-#![feature(optin_builtin_traits)]\n-\n-trait Trait {\n-    type Bar;\n-}\n-\n-struct Foo;\n-\n-impl !Trait for Foo { } //~ ERROR E0192\n-\n-fn main() {\n-}"}, {"sha": "da706dea167f6d43f5842b4b196d6d607c98cd82", "filename": "src/test/ui/error-codes/E0192.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a17dd3608477a47741f97b907a61b6d81524ba4e/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a17dd3608477a47741f97b907a61b6d81524ba4e/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0192.stderr?ref=a17dd3608477a47741f97b907a61b6d81524ba4e", "patch": "@@ -1,11 +0,0 @@\n-error[E0192]: invalid negative impl\n-  --> $DIR/E0192.rs:9:6\n-   |\n-LL | impl !Trait for Foo { }\n-   |      ^^^^^^\n-   |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0192`."}, {"sha": "ac8742c70c8787f97198d750bf1608a376f2ad6b", "filename": "src/test/ui/specialization/defaultimpl/validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -8,8 +8,9 @@ default impl S {} //~ ERROR inherent impls cannot be `default`\n \n default unsafe impl Send for S {} //~ ERROR impls of auto traits cannot be default\n default impl !Send for Z {} //~ ERROR impls of auto traits cannot be default\n+                            //~^ ERROR negative impls cannot be default impls\n \n trait Tr {}\n-default impl !Tr for S {} //~ ERROR invalid negative impl\n+default impl !Tr for S {} //~ ERROR negative impls cannot be default impls\n \n fn main() {}"}, {"sha": "9bf59bd4f636a494c2d83aa0d857cada0dee19d6", "filename": "src/test/ui/specialization/defaultimpl/validation.stderr", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fdefaultimpl%2Fvalidation.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -24,14 +24,18 @@ LL | default impl !Send for Z {}\n    | |\n    | default because of this\n \n-error[E0192]: invalid negative impl\n-  --> $DIR/validation.rs:13:14\n+error[E0750]: negative impls cannot be default impls\n+  --> $DIR/validation.rs:10:14\n    |\n-LL | default impl !Tr for S {}\n-   |              ^^^\n+LL | default impl !Send for Z {}\n+   | ^^^^^^^      ^\n+\n+error[E0750]: negative impls cannot be default impls\n+  --> $DIR/validation.rs:14:14\n    |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n+LL | default impl !Tr for S {}\n+   | ^^^^^^^      ^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0192`.\n+For more information about this error, try `rustc --explain E0750`."}, {"sha": "739a3c12dfb41059ec844ddfe150c4e1bfdebf2d", "filename": "src/test/ui/syntax-trait-polarity.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -12,7 +12,6 @@ trait TestTrait {}\n unsafe impl !Send for TestType {}\n //~^ ERROR negative impls cannot be unsafe\n impl !TestTrait for TestType {}\n-//~^ ERROR invalid negative impl\n \n struct TestType2<T>(T);\n \n@@ -22,6 +21,5 @@ impl<T> !TestType2<T> {}\n unsafe impl<T> !Send for TestType2<T> {}\n //~^ ERROR negative impls cannot be unsafe\n impl<T> !TestTrait for TestType2<T> {}\n-//~^ ERROR invalid negative impl\n \n fn main() {}"}, {"sha": "1fd40fb66570df1c093a2ee08593be2869871655", "filename": "src/test/ui/syntax-trait-polarity.stderr", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsyntax-trait-polarity.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -16,39 +16,22 @@ LL | unsafe impl !Send for TestType {}\n    | unsafe because of this\n \n error: inherent impls cannot be negative\n-  --> $DIR/syntax-trait-polarity.rs:19:10\n+  --> $DIR/syntax-trait-polarity.rs:18:10\n    |\n LL | impl<T> !TestType2<T> {}\n    |         -^^^^^^^^^^^^ inherent impl for this type\n    |         |\n    |         negative because of this\n \n error[E0198]: negative impls cannot be unsafe\n-  --> $DIR/syntax-trait-polarity.rs:22:16\n+  --> $DIR/syntax-trait-polarity.rs:21:16\n    |\n LL | unsafe impl<T> !Send for TestType2<T> {}\n    | ------         -^^^^\n    | |              |\n    | |              negative because of this\n    | unsafe because of this\n \n-error[E0192]: invalid negative impl\n-  --> $DIR/syntax-trait-polarity.rs:14:6\n-   |\n-LL | impl !TestTrait for TestType {}\n-   |      ^^^^^^^^^^\n-   |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n-\n-error[E0192]: invalid negative impl\n-  --> $DIR/syntax-trait-polarity.rs:24:9\n-   |\n-LL | impl<T> !TestTrait for TestType2<T> {}\n-   |         ^^^^^^^^^^\n-   |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n-\n-error: aborting due to 6 previous errors\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0192, E0198.\n-For more information about an error, try `rustc --explain E0192`.\n+For more information about this error, try `rustc --explain E0198`."}, {"sha": "1790b24be33843512f13dc3a4b52bafc1eb2d84b", "filename": "src/test/ui/traits/negative-impls/auxiliary/foreign_trait.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fauxiliary%2Fforeign_trait.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,6 @@\n+#![feature(optin_builtin_traits)]\n+\n+pub trait ForeignTrait { }\n+\n+impl ForeignTrait for u32 { }\n+impl !ForeignTrait for String {}"}, {"sha": "fb9a3a99748d02d4c222d656f9f48a5774db7c71", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "previous_filename": "src/test/ui/traits/traits-negative-impls.rs"}, {"sha": "69a91b09e3ee00ce6cd28565f7a0601eabde0d93", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-error.stderr", "status": "renamed", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-error.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:23:11\n+  --> $DIR/negated-auto-traits-error.rs:23:11\n    |\n LL | struct Outer<T: Send>(T);\n    | ------------------------- required by `Outer`\n@@ -10,7 +10,7 @@ LL |     Outer(TestType);\n    = help: the trait `std::marker::Send` is not implemented for `dummy::TestType`\n \n error[E0277]: `dummy::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:23:5\n+  --> $DIR/negated-auto-traits-error.rs:23:5\n    |\n LL | struct Outer<T: Send>(T);\n    | ------------------------- required by `Outer`\n@@ -21,7 +21,7 @@ LL |     Outer(TestType);\n    = help: the trait `std::marker::Send` is not implemented for `dummy::TestType`\n \n error[E0277]: `dummy1b::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:32:13\n+  --> $DIR/negated-auto-traits-error.rs:32:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n@@ -32,7 +32,7 @@ LL |     is_send(TestType);\n    = help: the trait `std::marker::Send` is not implemented for `dummy1b::TestType`\n \n error[E0277]: `dummy1c::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:40:13\n+  --> $DIR/negated-auto-traits-error.rs:40:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n@@ -44,7 +44,7 @@ LL |     is_send((8, TestType));\n    = note: required because it appears within the type `({integer}, dummy1c::TestType)`\n \n error[E0277]: `dummy2::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:48:13\n+  --> $DIR/negated-auto-traits-error.rs:48:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n@@ -60,7 +60,7 @@ LL |     is_send(Box::new(TestType));\n    = note: required because it appears within the type `std::boxed::Box<dummy2::TestType>`\n \n error[E0277]: `dummy3::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:56:13\n+  --> $DIR/negated-auto-traits-error.rs:56:13\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |    -------    ---- required by this bound in `is_send`\n@@ -74,7 +74,7 @@ LL |     is_send(Box::new(Outer2(TestType)));\n    = note: required because it appears within the type `std::boxed::Box<Outer2<dummy3::TestType>>`\n \n error[E0277]: `main::TestType` cannot be sent between threads safely\n-  --> $DIR/traits-negative-impls.rs:66:13\n+  --> $DIR/negated-auto-traits-error.rs:66:13\n    |\n LL | fn is_sync<T: Sync>(_: T) {}\n    |    -------    ---- required by this bound in `is_sync`", "previous_filename": "src/test/ui/traits/traits-negative-impls.stderr"}, {"sha": "8664b6a6a6e36c2623176a49203fa6b64d7d3890", "filename": "src/test/ui/traits/negative-impls/negated-auto-traits-rpass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegated-auto-traits-rpass.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "previous_filename": "src/test/ui/traits/traits-negative-impls-rpass.rs"}, {"sha": "b23ac87f899862930bf338db4b5ac1afe3c467ef", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,10 @@\n+#![feature(optin_builtin_traits)]\n+#![feature(specialization)]\n+\n+trait MyTrait {\n+    type Foo;\n+}\n+\n+default impl !MyTrait for u32 {} //~ ERROR negative impls cannot be default impls\n+\n+fn main() {}"}, {"sha": "d2423d01a9afa2a112e00ce147879584a12c94c0", "filename": "src/test/ui/traits/negative-impls/negative-default-impls.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-default-impls.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,9 @@\n+error[E0750]: negative impls cannot be default impls\n+  --> $DIR/negative-default-impls.rs:8:14\n+   |\n+LL | default impl !MyTrait for u32 {}\n+   | ^^^^^^^      ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0750`."}, {"sha": "2ebf0bdcbe9be6d743b44cfb30fcff41d4a94e08", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,13 @@\n+#![feature(specialization)]\n+#![feature(optin_builtin_traits)]\n+\n+// Negative impl for u32 cannot \"specialize\" the base impl.\n+trait MyTrait {\n+    fn foo();\n+}\n+impl<T> MyTrait for T {\n+    default fn foo() { }\n+}\n+impl !MyTrait for u32 { } //~ ERROR conflicting implementations\n+\n+fn main() { }"}, {"sha": "83421b4d7a14a4064e85c47610a16d75c524acf6", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive-item.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive-item.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,12 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `u32`:\n+  --> $DIR/negative-specializes-positive-item.rs:11:1\n+   |\n+LL | impl<T> MyTrait for T {\n+   | --------------------- first implementation here\n+...\n+LL | impl !MyTrait for u32 { }\n+   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "7ab01612295723bd0cfbbdf223737fe3560c8b52", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,14 @@\n+#![feature(specialization)]\n+#![feature(optin_builtin_traits)]\n+\n+// Negative impl for u32 cannot \"specialize\" the base impl.\n+trait MyTrait { }\n+impl<T> MyTrait for T { }\n+impl !MyTrait for u32 { } //~ ERROR conflicting implementations\n+\n+// The second impl specializes the first, no error.\n+trait MyTrait2 { }\n+impl<T> MyTrait2 for T { }\n+impl MyTrait2 for u32 { }\n+\n+fn main() { }"}, {"sha": "a542e88673efae7aed1f68791e4eadd4ed2768de", "filename": "src/test/ui/traits/negative-impls/negative-specializes-positive.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fnegative-specializes-positive.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `u32`:\n+  --> $DIR/negative-specializes-positive.rs:7:1\n+   |\n+LL | impl<T> MyTrait for T { }\n+   | --------------------- first implementation here\n+LL | impl !MyTrait for u32 { }\n+   | ^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "5bfbf9653ab119b8f7540f5c791a5b9b9206d21a", "filename": "src/test/ui/traits/negative-impls/no-items.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,11 @@\n+#![feature(optin_builtin_traits)]\n+\n+trait MyTrait {\n+    type Foo;\n+}\n+\n+impl !MyTrait for u32 {\n+    type Foo = i32; //~ ERROR negative impls cannot have any items\n+}\n+\n+fn main() {}"}, {"sha": "67b94bba121430850d76df077cc0dcd28c6c3d56", "filename": "src/test/ui/traits/negative-impls/no-items.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fno-items.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,9 @@\n+error[E0749]: negative impls cannot have any items\n+  --> $DIR/no-items.rs:8:5\n+   |\n+LL |     type Foo = i32;\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0749`."}, {"sha": "5c3e7fe3d010c5cb1f75a7213630b271182356c5", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,26 @@\n+use std::cell::Cell;\n+use std::marker::PhantomPinned;\n+use std::pin::Pin;\n+\n+struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n+\n+impl<'a> Clone for &'a mut MyType<'a> { //~ ERROR conflicting implementations\n+    fn clone(&self) -> &'a mut MyType<'a> {\n+        self.0.replace(None).unwrap()\n+    }\n+}\n+\n+\n+fn main() {\n+    let mut unpinned = MyType(Cell::new(None), PhantomPinned);\n+    let bad_addr = &unpinned as *const MyType<'_> as usize;\n+    let mut p = Box::pin(MyType(Cell::new(Some(&mut unpinned)), PhantomPinned));\n+\n+    // p_mut1 is okay: it does not point to the bad_addr\n+    let p_mut1: Pin<&mut MyType<'_>> = p.as_mut();\n+    assert_ne!(bad_addr, &*p_mut1 as *const _ as usize);\n+\n+    // but p_mut2 does point to bad_addr! this is unsound\n+    let p_mut2: Pin<&mut MyType<'_>> = p_mut1.clone();\n+    assert_eq!(bad_addr, &*p_mut2 as *const _ as usize);\n+}"}, {"sha": "1655d806fb43897a988e5944aab8ab9d4cc6fa53", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-clone.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-clone.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `std::clone::Clone` for type `&mut MyType<'_>`:\n+  --> $DIR/pin-unsound-issue-66544-clone.rs:7:1\n+   |\n+LL | impl<'a> Clone for &'a mut MyType<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::clone::Clone for &mut T\n+             where T: ?Sized;\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "a34b8d635ab0e205281175746e635dec098e5242", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,33 @@\n+// Demonstrate that \"rogue\" `DerefMut` impls for `&T` are not allowed.\n+//\n+// https://github.com/rust-lang/rust/issues/66544\n+\n+use std::cell::Cell;\n+use std::marker::PhantomPinned;\n+use std::ops::DerefMut;\n+use std::pin::Pin;\n+\n+struct MyType<'a>(Cell<Option<&'a mut MyType<'a>>>, PhantomPinned);\n+\n+impl<'a> DerefMut for &'a MyType<'a> { //~ ERROR conflicting implementations\n+    fn deref_mut(&mut self) -> &mut MyType<'a> {\n+        self.0.replace(None).unwrap()\n+    }\n+}\n+\n+\n+fn main() {\n+    let mut unpinned = MyType(Cell::new(None), PhantomPinned);\n+    let bad_addr = &unpinned as *const MyType<'_> as usize;\n+    let p = Box::pin(MyType(Cell::new(Some(&mut unpinned)), PhantomPinned));\n+\n+    // p_ref is okay: it does not point to the bad_addr\n+    let mut p_ref: Pin<&MyType<'_>> = p.as_ref();\n+    assert_ne!(bad_addr, &*p_ref as *const _ as usize);\n+\n+    // but p_mut does point to bad_addr! this is unsound\n+    let p_mut: Pin<&mut MyType<'_>> = p_ref.as_mut();\n+    assert_eq!(bad_addr, &*p_mut as *const _ as usize);\n+\n+    println!(\"oh no!\");\n+}"}, {"sha": "80c9682a0102fd3f481c7959258abc54837bcccc", "filename": "src/test/ui/traits/negative-impls/pin-unsound-issue-66544-derefmut.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpin-unsound-issue-66544-derefmut.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,13 @@\n+error[E0119]: conflicting implementations of trait `std::ops::DerefMut` for type `&MyType<'_>`:\n+  --> $DIR/pin-unsound-issue-66544-derefmut.rs:12:1\n+   |\n+LL | impl<'a> DerefMut for &'a MyType<'a> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<T> std::ops::DerefMut for &T\n+             where T: ?Sized;\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "20267cf3aba7f18e9308e64f3ad059d0f630d1de", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,9 @@\n+#![feature(specialization)]\n+#![feature(optin_builtin_traits)]\n+\n+trait MyTrait { }\n+\n+impl<T> !MyTrait for T { }\n+impl MyTrait for u32 { } //~ ERROR conflicting implementations\n+\n+fn main() { }"}, {"sha": "6e41759d2a227d2e166bcf3905adc0a5f27ec685", "filename": "src/test/ui/traits/negative-impls/positive-specializes-negative.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Fpositive-specializes-negative.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `MyTrait` for type `u32`:\n+  --> $DIR/positive-specializes-negative.rs:7:1\n+   |\n+LL | impl<T> !MyTrait for T { }\n+   | ---------------------- first implementation here\n+LL | impl MyTrait for u32 { }\n+   | ^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `u32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "b823c0f78649fd9c2f39c1bd28b24c1ca6f86700", "filename": "src/test/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,21 @@\n+#![feature(optin_builtin_traits)]\n+\n+// aux-build: foreign_trait.rs\n+\n+// Test that we cannot implement `LocalTrait` for `String`,\n+// even though there is a `String: !ForeignTrait` impl.\n+//\n+// This may not be the behavior we want long term, but it's the\n+// current semantics that we implemented so as to land `!Foo` impls\n+// quickly. See internals thread:\n+//\n+// https://internals.rust-lang.org/t/foo/11587/\n+\n+extern crate foreign_trait;\n+use foreign_trait::ForeignTrait;\n+\n+trait LocalTrait { }\n+impl<T: ForeignTrait> LocalTrait for T { }\n+impl LocalTrait for String { } //~ ERROR conflicting implementations\n+\n+fn main() { }"}, {"sha": "7cce45d2c8f8f1929ace12f1f52aa867d9f0bd68", "filename": "src/test/ui/traits/negative-impls/rely-on-negative-impl-in-coherence.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Frely-on-negative-impl-in-coherence.stderr?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `LocalTrait` for type `std::string::String`:\n+  --> $DIR/rely-on-negative-impl-in-coherence.rs:19:1\n+   |\n+LL | impl<T: ForeignTrait> LocalTrait for T { }\n+   | -------------------------------------- first implementation here\n+LL | impl LocalTrait for String { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::string::String`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "6a2e99f8147a71ef27c4533cac9a5130a7718eb9", "filename": "src/test/ui/traits/negative-impls/typeck-negative-impls-builtin.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ftypeck-negative-impls-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8a05e201ee6cea12fe05e4271e91fd40c2fb235/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ftypeck-negative-impls-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fnegative-impls%2Ftypeck-negative-impls-builtin.rs?ref=e8a05e201ee6cea12fe05e4271e91fd40c2fb235", "patch": "@@ -1,12 +1,14 @@\n+// run-pass\n+\n #![feature(optin_builtin_traits)]\n+#![allow(dead_code)]\n \n struct TestType;\n \n trait TestTrait {\n-    fn dummy(&self) { }\n+    fn dummy(&self) {}\n }\n \n impl !TestTrait for TestType {}\n-//~^ ERROR invalid negative impl\n \n fn main() {}", "previous_filename": "src/test/ui/typeck/typeck-negative-impls-builtin.rs"}, {"sha": "c90655086acdac1d03623a5a89c0889d04b90d59", "filename": "src/test/ui/typeck/typeck-negative-impls-builtin.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a17dd3608477a47741f97b907a61b6d81524ba4e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a17dd3608477a47741f97b907a61b6d81524ba4e/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck-negative-impls-builtin.stderr?ref=a17dd3608477a47741f97b907a61b6d81524ba4e", "patch": "@@ -1,11 +0,0 @@\n-error[E0192]: invalid negative impl\n-  --> $DIR/typeck-negative-impls-builtin.rs:9:6\n-   |\n-LL | impl !TestTrait for TestType {}\n-   |      ^^^^^^^^^^\n-   |\n-   = note: negative impls are only allowed for auto traits, like `Send` and `Sync`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0192`."}]}