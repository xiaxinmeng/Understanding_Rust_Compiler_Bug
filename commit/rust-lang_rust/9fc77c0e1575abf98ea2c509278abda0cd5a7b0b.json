{"sha": "9fc77c0e1575abf98ea2c509278abda0cd5a7b0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYzc3YzBlMTU3NWFiZjk4ZWEyYzUwOTI3OGFiZGEwY2Q1YTdiMGI=", "commit": {"author": {"name": "IgorPerikov", "email": "perikov.igor@gmail.com", "date": "2020-04-06T14:53:56Z"}, "committer": {"name": "IgorPerikov", "email": "perikov.igor@gmail.com", "date": "2020-04-06T14:53:56Z"}, "message": "add detailed panic messages for Vec functions", "tree": {"sha": "b5f8a1522859795b39691cd0fece1341ad877953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f8a1522859795b39691cd0fece1341ad877953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fc77c0e1575abf98ea2c509278abda0cd5a7b0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fc77c0e1575abf98ea2c509278abda0cd5a7b0b", "html_url": "https://github.com/rust-lang/rust/commit/9fc77c0e1575abf98ea2c509278abda0cd5a7b0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fc77c0e1575abf98ea2c509278abda0cd5a7b0b/comments", "author": {"login": "IgorPerikov", "id": 5383314, "node_id": "MDQ6VXNlcjUzODMzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5383314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IgorPerikov", "html_url": "https://github.com/IgorPerikov", "followers_url": "https://api.github.com/users/IgorPerikov/followers", "following_url": "https://api.github.com/users/IgorPerikov/following{/other_user}", "gists_url": "https://api.github.com/users/IgorPerikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/IgorPerikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IgorPerikov/subscriptions", "organizations_url": "https://api.github.com/users/IgorPerikov/orgs", "repos_url": "https://api.github.com/users/IgorPerikov/repos", "events_url": "https://api.github.com/users/IgorPerikov/events{/privacy}", "received_events_url": "https://api.github.com/users/IgorPerikov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IgorPerikov", "id": 5383314, "node_id": "MDQ6VXNlcjUzODMzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5383314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IgorPerikov", "html_url": "https://github.com/IgorPerikov", "followers_url": "https://api.github.com/users/IgorPerikov/followers", "following_url": "https://api.github.com/users/IgorPerikov/following{/other_user}", "gists_url": "https://api.github.com/users/IgorPerikov/gists{/gist_id}", "starred_url": "https://api.github.com/users/IgorPerikov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IgorPerikov/subscriptions", "organizations_url": "https://api.github.com/users/IgorPerikov/orgs", "repos_url": "https://api.github.com/users/IgorPerikov/repos", "events_url": "https://api.github.com/users/IgorPerikov/events{/privacy}", "received_events_url": "https://api.github.com/users/IgorPerikov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "733f104f138477ef20f59eadcbcf8800b21a7732", "url": "https://api.github.com/repos/rust-lang/rust/commits/733f104f138477ef20f59eadcbcf8800b21a7732", "html_url": "https://github.com/rust-lang/rust/commit/733f104f138477ef20f59eadcbcf8800b21a7732"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "7ef281ff208d78aeef2791b91d90f4d911d894cc", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9fc77c0e1575abf98ea2c509278abda0cd5a7b0b/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fc77c0e1575abf98ea2c509278abda0cd5a7b0b/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=9fc77c0e1575abf98ea2c509278abda0cd5a7b0b", "patch": "@@ -964,8 +964,16 @@ impl<T> Vec<T> {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn swap_remove(&mut self, index: usize) -> T {\n+        #[cold]\n+        #[inline(never)]\n+        fn assert_failed(index: usize, len: usize) -> ! {\n+            panic!(\"swap_remove index (is {}) should be < len (is {})\", index, len);\n+        }\n+\n         let len = self.len();\n-        assert!(index < len);\n+        if !(index < len) {\n+            assert_failed(index, len);\n+        }\n         unsafe {\n             // We replace self[index] with the last element. Note that if the\n             // bounds check above succeeds there must be a last element (which\n@@ -995,8 +1003,16 @@ impl<T> Vec<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn insert(&mut self, index: usize, element: T) {\n+        #[cold]\n+        #[inline(never)]\n+        fn assert_failed(index: usize, len: usize) -> ! {\n+            panic!(\"insertion index (is {}) should be <= len (is {})\", index, len);\n+        }\n+\n         let len = self.len();\n-        assert!(index <= len);\n+        if !(index <= len) {\n+            assert_failed(index, len);\n+        }\n \n         // space for the new element\n         if len == self.buf.capacity() {\n@@ -1035,8 +1051,16 @@ impl<T> Vec<T> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn remove(&mut self, index: usize) -> T {\n+        #[cold]\n+        #[inline(never)]\n+        fn assert_failed(index: usize, len: usize) -> ! {\n+            panic!(\"removal index (is {}) should be < len (is {})\", index, len);\n+        }\n+\n         let len = self.len();\n-        assert!(index < len);\n+        if !(index < len) {\n+            assert_failed(index, len);\n+        }\n         unsafe {\n             // infallible\n             let ret;\n@@ -1294,8 +1318,25 @@ impl<T> Vec<T> {\n             Excluded(&n) => n,\n             Unbounded => len,\n         };\n-        assert!(start <= end);\n-        assert!(end <= len);\n+\n+        #[cold]\n+        #[inline(never)]\n+        fn start_assert_failed(start: usize, end: usize) -> ! {\n+            panic!(\"start drain index (is {}) should be <= end drain index (is {})\", start, end);\n+        }\n+\n+        #[cold]\n+        #[inline(never)]\n+        fn end_assert_failed(end: usize, len: usize) -> ! {\n+            panic!(\"end drain index (is {}) should be <= len (is {})\", end, len);\n+        }\n+\n+        if !(start <= end) {\n+            start_assert_failed(start, end);\n+        }\n+        if !(end <= len) {\n+            end_assert_failed(end, len);\n+        }\n \n         unsafe {\n             // set self.vec length's to start, to be safe in case Drain is leaked\n@@ -1385,7 +1426,15 @@ impl<T> Vec<T> {\n     #[must_use = \"use `.truncate()` if you don't need the other half\"]\n     #[stable(feature = \"split_off\", since = \"1.4.0\")]\n     pub fn split_off(&mut self, at: usize) -> Self {\n-        assert!(at <= self.len(), \"`at` out of bounds\");\n+        #[cold]\n+        #[inline(never)]\n+        fn assert_failed(at: usize, len: usize) -> ! {\n+            panic!(\"`at` split index (is {}) should be <= len (is {})\", at, len);\n+        }\n+\n+        if !(at <= self.len()) {\n+            assert_failed(at, self.len());\n+        }\n \n         let other_len = self.len - at;\n         let mut other = Vec::with_capacity(other_len);"}]}