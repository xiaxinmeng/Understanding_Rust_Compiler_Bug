{"sha": "45f4bf112a422fe62b9152ecf557f8550eb9c7ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1ZjRiZjExMmE0MjJmZTYyYjkxNTJlY2Y1NTdmODU1MGViOWM3Y2E=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2015-12-30T21:47:23Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2016-03-14T22:04:34Z"}, "message": "Refactor `impl_trait_ref_and_oblig`, making it generally available as a utility", "tree": {"sha": "94990875475a407e228140e766af86086956d0fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94990875475a407e228140e766af86086956d0fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45f4bf112a422fe62b9152ecf557f8550eb9c7ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45f4bf112a422fe62b9152ecf557f8550eb9c7ca", "html_url": "https://github.com/rust-lang/rust/commit/45f4bf112a422fe62b9152ecf557f8550eb9c7ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45f4bf112a422fe62b9152ecf557f8550eb9c7ca/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "991f32a6cae575755a6991f594da377e593c94f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/991f32a6cae575755a6991f594da377e593c94f3", "html_url": "https://github.com/rust-lang/rust/commit/991f32a6cae575755a6991f594da377e593c94f3"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "454698c1b3a832d6a7603791f3ba9c7edbab6407", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45f4bf112a422fe62b9152ecf557f8550eb9c7ca/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f4bf112a422fe62b9152ecf557f8550eb9c7ca/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=45f4bf112a422fe62b9152ecf557f8550eb9c7ca", "patch": "@@ -10,8 +10,8 @@\n \n //! See `README.md` for high-level documentation\n \n-use super::{SelectionContext};\n-use super::{Obligation, ObligationCause};\n+use super::{SelectionContext, Obligation, ObligationCause};\n+use super::util;\n \n use middle::cstore::LOCAL_CRATE;\n use middle::def_id::DefId;"}, {"sha": "3289d58778290f3a85b666d8ceddeda89a439e2d", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/45f4bf112a422fe62b9152ecf557f8550eb9c7ca/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45f4bf112a422fe62b9152ecf557f8550eb9c7ca/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=45f4bf112a422fe62b9152ecf557f8550eb9c7ca", "patch": "@@ -10,13 +10,13 @@\n \n use middle::def_id::DefId;\n use middle::infer::InferCtxt;\n-use middle::subst::Substs;\n+use middle::subst::{Subst, Substs};\n use middle::ty::{self, Ty, TyCtxt, ToPredicate, ToPolyTraitRef};\n use syntax::codemap::Span;\n use util::common::ErrorReported;\n use util::nodemap::FnvHashSet;\n \n-use super::{Obligation, ObligationCause, PredicateObligation};\n+use super::{Obligation, ObligationCause, PredicateObligation, SelectionContext, Normalized};\n \n struct PredicateSet<'a,'tcx:'a> {\n     tcx: &'a TyCtxt<'tcx>,\n@@ -299,6 +299,38 @@ impl<'tcx,I:Iterator<Item=ty::Predicate<'tcx>>> Iterator for FilterToTraits<I> {\n // Other\n ///////////////////////////////////////////////////////////////////////////\n \n+/// Instantiate all bound parameters of the impl with the given substs,\n+/// returning the resulting trait ref and all obligations that arise.\n+/// The obligations are closed under normalization.\n+pub fn impl_trait_ref_and_oblig<'a,'tcx>(selcx: &mut SelectionContext<'a,'tcx>,\n+                                         impl_def_id: DefId,\n+                                         impl_substs: &Substs<'tcx>)\n+                                         -> (ty::TraitRef<'tcx>,\n+                                             Vec<PredicateObligation<'tcx>>)\n+{\n+    let impl_trait_ref =\n+        selcx.tcx().impl_trait_ref(impl_def_id).unwrap();\n+    let impl_trait_ref =\n+        impl_trait_ref.subst(selcx.tcx(), impl_substs);\n+    let Normalized { value: impl_trait_ref, obligations: normalization_obligations1 } =\n+        super::normalize(selcx, ObligationCause::dummy(), &impl_trait_ref);\n+\n+    let predicates = selcx.tcx().lookup_predicates(impl_def_id);\n+    let predicates = predicates.instantiate(selcx.tcx(), impl_substs);\n+    let Normalized { value: predicates, obligations: normalization_obligations2 } =\n+        super::normalize(selcx, ObligationCause::dummy(), &predicates);\n+    let impl_obligations =\n+        predicates_for_generics(ObligationCause::dummy(), 0, &predicates);\n+\n+    let impl_obligations: Vec<_> =\n+        impl_obligations.into_iter()\n+        .chain(normalization_obligations1)\n+        .chain(normalization_obligations2)\n+        .collect();\n+\n+    (impl_trait_ref, impl_obligations)\n+}\n+\n // determine the `self` type, using fresh variables for all variables\n // declared on the impl declaration e.g., `impl<A,B> for Box<[(A,B)]>`\n // would return ($0, $1) where $0 and $1 are freshly instantiated type"}]}