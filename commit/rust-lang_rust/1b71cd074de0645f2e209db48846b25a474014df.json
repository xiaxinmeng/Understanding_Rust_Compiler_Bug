{"sha": "1b71cd074de0645f2e209db48846b25a474014df", "node_id": "C_kwDOAAsO6NoAKDFiNzFjZDA3NGRlMDY0NWYyZTIwOWRiNDg4NDZiMjVhNDc0MDE0ZGY", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-13T15:25:03Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2022-03-17T14:44:14Z"}, "message": "Add test for DynMap type inference", "tree": {"sha": "1030efdd2be51026418aad6ba954ee485d1c15a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1030efdd2be51026418aad6ba954ee485d1c15a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b71cd074de0645f2e209db48846b25a474014df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b71cd074de0645f2e209db48846b25a474014df", "html_url": "https://github.com/rust-lang/rust/commit/1b71cd074de0645f2e209db48846b25a474014df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b71cd074de0645f2e209db48846b25a474014df/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "631b504991dd50a59af30263256ab4ab4897f71f", "url": "https://api.github.com/repos/rust-lang/rust/commits/631b504991dd50a59af30263256ab4ab4897f71f", "html_url": "https://github.com/rust-lang/rust/commit/631b504991dd50a59af30263256ab4ab4897f71f"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "a82b8cb466fd41f54a07a6bd46fc9dfa55ce5303", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1b71cd074de0645f2e209db48846b25a474014df/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b71cd074de0645f2e209db48846b25a474014df/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=1b71cd074de0645f2e209db48846b25a474014df", "patch": "@@ -3609,3 +3609,40 @@ fn f<F: Foo>() {\n         \"#]],\n     );\n }\n+\n+#[test]\n+fn dyn_map() {\n+    check_types(\n+        r#\"\n+pub struct Key<K, V, P = (K, V)> {}\n+\n+pub trait Policy {\n+    type K;\n+    type V;\n+}\n+\n+impl<K, V> Policy for (K, V) {\n+    type K = K;\n+    type V = V;\n+}\n+\n+pub struct KeyMap<KEY> {}\n+\n+impl<P: Policy> KeyMap<Key<P::K, P::V, P>> {\n+    pub fn get(&self, key: &P::K) -> P::V {\n+        loop {}\n+    }\n+}\n+\n+struct Fn {}\n+struct FunctionId {}\n+\n+fn test() {\n+    let key_map: &KeyMap<Key<Fn, FunctionId>> = loop {};\n+    let key;\n+    let result = key_map.get(key);\n+      //^^^^^^ FunctionId\n+}\n+\"#,\n+    )\n+}"}]}