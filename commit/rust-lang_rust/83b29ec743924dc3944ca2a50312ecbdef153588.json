{"sha": "83b29ec743924dc3944ca2a50312ecbdef153588", "node_id": "C_kwDOAAsO6NoAKDgzYjI5ZWM3NDM5MjRkYzM5NDRjYTJhNTAzMTJlY2JkZWYxNTM1ODg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-06T11:30:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-06T11:30:05Z"}, "message": "Rollup merge of #111230 - zacklukem:eq-less-to-less-eq, r=compiler-errors\n\nadd hint for =< as <=\n\nAdds a compiler hint for when `=<` is typed instead of `<=`\n\nExample hint:\n```rust\nfn foo() {\n    if 1 =< 3 {\n        println!(\"Hello, World!\");\n    }\n}\n```\n```\nerror: expected type, found `3`\n --> main.rs:2:13\n  |\n2 |     if 1 =< 3 {\n  |          -- ^ expected type\n  |          |\n  |          help: did you mean: `<=`\n```\n\nThis PR only emits the suggestion if there is no space between the `=` and `<`.  This hopefully narrows the scope of when this error is emitted, however this still allows this error to be emitted in cases such as this:\n```\nerror: expected expression, found `;`\n --> main.rs:2:18\n  |\n2 |     if 1 =< [i32;; 3]>::hello() {\n  |          --      ^ expected expression\n  |          |\n  |          help: did you mean: `<=`\n```\n\nWhich could be a good reason not to merge since I haven't been able to think of any other ways of narrowing the scope of this diagnostic.\n\ncloses #111128", "tree": {"sha": "59bc999624850ac253e5509569a422153dc24023", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59bc999624850ac253e5509569a422153dc24023"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83b29ec743924dc3944ca2a50312ecbdef153588", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVjo9CRBK7hj4Ov3rIwAAPfEIAEbAtIgRpwoYVE+iTLLjTi2R\nZLkqltTq5BcSHdNdH9n8iFP+vxsX1rs1y25xN/e0CwMSYpoK2lZoYvT27rSK50Ih\npIukoD1U3IpVuMwZu5U6hZC2GKRLWx8p8feyFNTNkdbZxeToztZFMgdqQ0ItRfbq\n+y8nmiNkiUIRFK6MI5joiaRKGTJfYK2rLhV0kirH0RmWqbTsjgL0eBCqSbA5PlK2\nrsWrW/OsnCZVGa+z7++1IbIzFQ0tKbf87wKVMi2dX6Zxez9w1H8OL66R5MgfMqNj\ne93GTo0/0rS0jcd6Cx1yHNwcOEOPRtGihG/3rAT0q0D+i6Dfe+zw1l8aF9aEAuo=\n=fvZy\n-----END PGP SIGNATURE-----\n", "payload": "tree 59bc999624850ac253e5509569a422153dc24023\nparent f440999bb2a894eee5f8a9d299ddb849420bcf63\nparent a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683372605 +0200\ncommitter GitHub <noreply@github.com> 1683372605 +0200\n\nRollup merge of #111230 - zacklukem:eq-less-to-less-eq, r=compiler-errors\n\nadd hint for =< as <=\n\nAdds a compiler hint for when `=<` is typed instead of `<=`\n\nExample hint:\n```rust\nfn foo() {\n    if 1 =< 3 {\n        println!(\"Hello, World!\");\n    }\n}\n```\n```\nerror: expected type, found `3`\n --> main.rs:2:13\n  |\n2 |     if 1 =< 3 {\n  |          -- ^ expected type\n  |          |\n  |          help: did you mean: `<=`\n```\n\nThis PR only emits the suggestion if there is no space between the `=` and `<`.  This hopefully narrows the scope of when this error is emitted, however this still allows this error to be emitted in cases such as this:\n```\nerror: expected expression, found `;`\n --> main.rs:2:18\n  |\n2 |     if 1 =< [i32;; 3]>::hello() {\n  |          --      ^ expected expression\n  |          |\n  |          help: did you mean: `<=`\n```\n\nWhich could be a good reason not to merge since I haven't been able to think of any other ways of narrowing the scope of this diagnostic.\n\ncloses #111128\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83b29ec743924dc3944ca2a50312ecbdef153588", "html_url": "https://github.com/rust-lang/rust/commit/83b29ec743924dc3944ca2a50312ecbdef153588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83b29ec743924dc3944ca2a50312ecbdef153588/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f440999bb2a894eee5f8a9d299ddb849420bcf63", "url": "https://api.github.com/repos/rust-lang/rust/commits/f440999bb2a894eee5f8a9d299ddb849420bcf63", "html_url": "https://github.com/rust-lang/rust/commit/f440999bb2a894eee5f8a9d299ddb849420bcf63"}, {"sha": "a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4", "html_url": "https://github.com/rust-lang/rust/commit/a183ac6f90dc43a550a8afa5c01fdc797cf3d1d4"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "018eddea4b06b96f25eef8e0da21859eef5257e4", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/83b29ec743924dc3944ca2a50312ecbdef153588/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b29ec743924dc3944ca2a50312ecbdef153588/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=83b29ec743924dc3944ca2a50312ecbdef153588", "patch": "@@ -1448,8 +1448,19 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_expr_path_start(&mut self) -> PResult<'a, P<Expr>> {\n+        let maybe_eq_tok = self.prev_token.clone();\n         let (qself, path) = if self.eat_lt() {\n-            let (qself, path) = self.parse_qpath(PathStyle::Expr)?;\n+            let lt_span = self.prev_token.span;\n+            let (qself, path) = self.parse_qpath(PathStyle::Expr).map_err(|mut err| {\n+                // Suggests using '<=' if there is an error parsing qpath when the previous token\n+                // is an '=' token. Only emits suggestion if the '<' token and '=' token are\n+                // directly adjacent (i.e. '=<')\n+                if maybe_eq_tok.kind == TokenKind::Eq && maybe_eq_tok.span.hi() == lt_span.lo() {\n+                    let eq_lt = maybe_eq_tok.span.to(lt_span);\n+                    err.span_suggestion(eq_lt, \"did you mean\", \"<=\", Applicability::Unspecified);\n+                }\n+                err\n+            })?;\n             (Some(qself), path)\n         } else {\n             (None, self.parse_path(PathStyle::Expr)?)"}, {"sha": "23c6c59d7a62b90f3720a6abce15fa84a38ebae0", "filename": "tests/ui/parser/eq-less-to-less-eq.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/83b29ec743924dc3944ca2a50312ecbdef153588/tests%2Fui%2Fparser%2Feq-less-to-less-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83b29ec743924dc3944ca2a50312ecbdef153588/tests%2Fui%2Fparser%2Feq-less-to-less-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Feq-less-to-less-eq.rs?ref=83b29ec743924dc3944ca2a50312ecbdef153588", "patch": "@@ -0,0 +1,33 @@\n+fn foo() {\n+    let a = 0;\n+    let b = 4;\n+    if a =< b { //~ERROR\n+        println!(\"yay!\");\n+    }\n+}\n+\n+fn bar() {\n+    let a = 0;\n+    let b = 4;\n+    if a = <b { //~ERROR\n+        println!(\"yay!\");\n+    }\n+}\n+\n+fn baz() {\n+    let a = 0;\n+    let b = 4;\n+    if a = < b { //~ERROR\n+        println!(\"yay!\");\n+    }\n+}\n+\n+fn qux() {\n+    let a = 0;\n+    let b = 4;\n+    if a =< i32>::abs(-4) { //~ERROR: mismatched types\n+        println!(\"yay!\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4717d8287ff7b3523ac7f8df19e9bc7f9d341714", "filename": "tests/ui/parser/eq-less-to-less-eq.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/83b29ec743924dc3944ca2a50312ecbdef153588/tests%2Fui%2Fparser%2Feq-less-to-less-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83b29ec743924dc3944ca2a50312ecbdef153588/tests%2Fui%2Fparser%2Feq-less-to-less-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Feq-less-to-less-eq.stderr?ref=83b29ec743924dc3944ca2a50312ecbdef153588", "patch": "@@ -0,0 +1,34 @@\n+error: expected one of `!`, `(`, `+`, `::`, `<`, `>`, or `as`, found `{`\n+  --> $DIR/eq-less-to-less-eq.rs:4:15\n+   |\n+LL |     if a =< b {\n+   |          --   ^ expected one of 7 possible tokens\n+   |          |\n+   |          help: did you mean: `<=`\n+\n+error: expected one of `!`, `(`, `+`, `::`, `<`, `>`, or `as`, found `{`\n+  --> $DIR/eq-less-to-less-eq.rs:12:15\n+   |\n+LL |     if a = <b {\n+   |               ^ expected one of 7 possible tokens\n+\n+error: expected one of `!`, `(`, `+`, `::`, `<`, `>`, or `as`, found `{`\n+  --> $DIR/eq-less-to-less-eq.rs:20:16\n+   |\n+LL |     if a = < b {\n+   |                ^ expected one of 7 possible tokens\n+\n+error[E0308]: mismatched types\n+  --> $DIR/eq-less-to-less-eq.rs:28:8\n+   |\n+LL |     if a =< i32>::abs(-4) {\n+   |        ^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n+   |\n+help: you might have meant to compare for equality\n+   |\n+LL |     if a ==< i32>::abs(-4) {\n+   |           +\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}