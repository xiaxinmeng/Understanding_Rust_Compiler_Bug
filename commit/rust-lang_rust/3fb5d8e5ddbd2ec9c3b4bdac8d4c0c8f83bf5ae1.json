{"sha": "3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1", "node_id": "C_kwDOAAsO6NoAKDNmYjVkOGU1ZGRiZDJlYzljM2I0YmRhYzhkNGMwYzhmODNiZjVhZTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-18T17:57:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-18T17:57:02Z"}, "message": "Rollup merge of #96584 - bentongxyz:x-setup-h-v-should-work, r=jyn514\n\nFix `x setup -h -v` should work\n\nr? `@jyn514`\n\nI have to convert profile to path and back in order to remove special-casing in bootstrap. I also check for `dry_run` so that `config.toml` and/ or `.git/hooks/pre-push` will not be created if `--dry-run` is specified.\n\nPlease help me see if this is ok, thanks alot!", "tree": {"sha": "26b3a2d29ce2fc20cfaf92e77a6a2c7272ec6ced", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26b3a2d29ce2fc20cfaf92e77a6a2c7272ec6ced"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjn1RuCRBK7hj4Ov3rIwAA9RAIAEVh9ADBNNFUTpjK7ZL7RDNp\n7NDjs/wrHrfjyDuxfjfECj/N7WUgZG+rl5mS7VkfAwbbUamF4nmzbKT839NHY6m1\n8CDNBamJlXuVxcAIBMnX6yrxjWQUbsLtpp9rAk6ZtuWnxe62f0Rb+4nQ+P5K1HHD\nbLIRwW1DwIIR45pU04GDUD6pTIRJuG01hC335qZdTbJX3BENZicQW31ShcVtUs5i\ney2TiZb+ZH3piuWWYZLhdqXdRy0J6D5nmzXEI+PhSa1Je/gO20WarrMWNQHUIQsX\nwcOR3J8lm/scpFP1kUu1ia6KaKOAkM5BTDNHNgmS16HTvGHt0LerWhh7DXVDR0Q=\n=YrYM\n-----END PGP SIGNATURE-----\n", "payload": "tree 26b3a2d29ce2fc20cfaf92e77a6a2c7272ec6ced\nparent 35a99eef32a2b7b9d8e77dde539f869e522d181f\nparent fca829075fd76385ac6aa7bff957e7eebbf89ae1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671386222 +0100\ncommitter GitHub <noreply@github.com> 1671386222 +0100\n\nRollup merge of #96584 - bentongxyz:x-setup-h-v-should-work, r=jyn514\n\nFix `x setup -h -v` should work\n\nr? `@jyn514`\n\nI have to convert profile to path and back in order to remove special-casing in bootstrap. I also check for `dry_run` so that `config.toml` and/ or `.git/hooks/pre-push` will not be created if `--dry-run` is specified.\n\nPlease help me see if this is ok, thanks alot!\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1", "html_url": "https://github.com/rust-lang/rust/commit/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35a99eef32a2b7b9d8e77dde539f869e522d181f", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a99eef32a2b7b9d8e77dde539f869e522d181f", "html_url": "https://github.com/rust-lang/rust/commit/35a99eef32a2b7b9d8e77dde539f869e522d181f"}, {"sha": "fca829075fd76385ac6aa7bff957e7eebbf89ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/fca829075fd76385ac6aa7bff957e7eebbf89ae1", "html_url": "https://github.com/rust-lang/rust/commit/fca829075fd76385ac6aa7bff957e7eebbf89ae1"}], "stats": {"total": 95, "additions": 74, "deletions": 21}, "files": [{"sha": "1d37d68c1d4050d807d4e73fe68591d434e05158", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1", "patch": "@@ -19,6 +19,7 @@ use crate::flags::{Color, Subcommand};\n use crate::install;\n use crate::native;\n use crate::run;\n+use crate::setup;\n use crate::test;\n use crate::tool::{self, SourceType};\n use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir, output, t};\n@@ -433,8 +434,11 @@ impl<'a> ShouldRun<'a> {\n \n     // single alias, which does not correspond to any on-disk path\n     pub fn alias(mut self, alias: &str) -> Self {\n+        // exceptional case for `Kind::Setup` because its `library`\n+        // and `compiler` options would otherwise naively match with\n+        // `compiler` and `library` folders respectively.\n         assert!(\n-            !self.builder.src.join(alias).exists(),\n+            self.kind == Kind::Setup || !self.builder.src.join(alias).exists(),\n             \"use `builder.path()` for real paths: {}\",\n             alias\n         );\n@@ -758,8 +762,9 @@ impl<'a> Builder<'a> {\n                 run::CollectLicenseMetadata,\n                 run::GenerateCopyright,\n             ),\n+            Kind::Setup => describe!(setup::Profile),\n             // These commands either don't use paths, or they're special-cased in Build::build()\n-            Kind::Clean | Kind::Format | Kind::Setup => vec![],\n+            Kind::Clean | Kind::Format => vec![],\n         }\n     }\n \n@@ -822,7 +827,11 @@ impl<'a> Builder<'a> {\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n             Subcommand::Run { ref paths, .. } => (Kind::Run, &paths[..]),\n             Subcommand::Format { .. } => (Kind::Format, &[][..]),\n-            Subcommand::Clean { .. } | Subcommand::Setup { .. } => {\n+            Subcommand::Setup { profile: ref path } => (\n+                Kind::Setup,\n+                path.as_ref().map_or([].as_slice(), |path| std::slice::from_ref(path)),\n+            ),\n+            Subcommand::Clean { .. } => {\n                 panic!()\n             }\n         };"}, {"sha": "851cb5ecf4c2694ee7c77b7b97e4bd92a1c7d6a4", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1", "patch": "@@ -143,7 +143,7 @@ pub enum Subcommand {\n         args: Vec<String>,\n     },\n     Setup {\n-        profile: Option<Profile>,\n+        profile: Option<PathBuf>,\n     },\n }\n \n@@ -351,7 +351,7 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n \n         // fn usage()\n         let usage = |exit_code: i32, opts: &Options, verbose: bool, subcommand_help: &str| -> ! {\n-            let config = Config::parse(&[\"build\".to_string()]);\n+            let config = Config::parse(&[\"setup\".to_string()]);\n             let build = Build::new(config);\n             let paths = Builder::get_help(&build, subcommand);\n \n@@ -621,7 +621,7 @@ Arguments:\n             }\n             Kind::Setup => {\n                 let profile = if paths.len() > 1 {\n-                    println!(\"\\nat most one profile can be passed to setup\\n\");\n+                    eprintln!(\"\\nerror: At most one profile can be passed to setup\\n\");\n                     usage(1, &opts, verbose, &subcommand_help)\n                 } else if let Some(path) = paths.pop() {\n                     let profile_string = t!(path.into_os_string().into_string().map_err("}, {"sha": "47fb4a38d05be381e074f199401b03c7b1de9db4", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1", "patch": "@@ -730,10 +730,6 @@ impl Build {\n             return clean::clean(self, all);\n         }\n \n-        if let Subcommand::Setup { profile } = &self.config.cmd {\n-            return setup::setup(&self.config, *profile);\n-        }\n-\n         // Download rustfmt early so that it can be used in rust-analyzer configs.\n         let _ = &builder::Builder::new(&self).initial_rustfmt();\n "}, {"sha": "57426ce3d51094b259f863addc6a3509e098befb", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 59, "deletions": 11, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=3fb5d8e5ddbd2ec9c3b4bdac8d4c0c8f83bf5ae1", "patch": "@@ -1,3 +1,4 @@\n+use crate::builder::{Builder, RunConfig, ShouldRun, Step};\n use crate::Config;\n use crate::{t, VERSION};\n use std::env::consts::EXE_SUFFIX;\n@@ -9,7 +10,7 @@ use std::process::Command;\n use std::str::FromStr;\n use std::{fmt, fs, io};\n \n-#[derive(Clone, Copy, Debug, Eq, PartialEq)]\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, Hash)]\n pub enum Profile {\n     Compiler,\n     Codegen,\n@@ -48,6 +49,16 @@ impl Profile {\n         }\n         out\n     }\n+\n+    pub fn as_str(&self) -> &'static str {\n+        match self {\n+            Profile::Compiler => \"compiler\",\n+            Profile::Codegen => \"codegen\",\n+            Profile::Library => \"library\",\n+            Profile::Tools => \"tools\",\n+            Profile::User => \"user\",\n+        }\n+    }\n }\n \n impl FromStr for Profile {\n@@ -69,24 +80,58 @@ impl FromStr for Profile {\n \n impl fmt::Display for Profile {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            Profile::Compiler => write!(f, \"compiler\"),\n-            Profile::Codegen => write!(f, \"codegen\"),\n-            Profile::Library => write!(f, \"library\"),\n-            Profile::User => write!(f, \"user\"),\n-            Profile::Tools => write!(f, \"tools\"),\n+        f.write_str(self.as_str())\n+    }\n+}\n+\n+impl Step for Profile {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+\n+    fn should_run(mut run: ShouldRun<'_>) -> ShouldRun<'_> {\n+        for choice in Profile::all() {\n+            run = run.alias(choice.as_str());\n         }\n+        run\n+    }\n+\n+    fn make_run(run: RunConfig<'_>) {\n+        // for Profile, `run.paths` will have 1 and only 1 element\n+        // this is because we only accept at most 1 path from user input.\n+        // If user calls `x.py setup` without arguments, the interactive TUI\n+        // will guide user to provide one.\n+        let profile = if run.paths.len() > 1 {\n+            // HACK: `builder` runs this step with all paths if no path was passed.\n+            t!(interactive_path())\n+        } else {\n+            run.paths\n+                .first()\n+                .unwrap()\n+                .assert_single_path()\n+                .path\n+                .as_path()\n+                .as_os_str()\n+                .to_str()\n+                .unwrap()\n+                .parse()\n+                .unwrap()\n+        };\n+\n+        run.builder.ensure(profile);\n+    }\n+\n+    fn run(self, builder: &Builder<'_>) {\n+        setup(&builder.build.config, self)\n     }\n }\n \n-pub fn setup(config: &Config, profile: Option<Profile>) {\n-    let profile = profile.unwrap_or_else(|| t!(interactive_path()));\n+pub fn setup(config: &Config, profile: Profile) {\n     let stage_path =\n         [\"build\", config.build.rustc_target_arg(), \"stage1\"].join(&MAIN_SEPARATOR.to_string());\n \n     if !rustup_installed() && profile != Profile::User {\n         eprintln!(\"`rustup` is not installed; cannot link `stage1` toolchain\");\n-    } else if stage_dir_exists(&stage_path[..]) {\n+    } else if stage_dir_exists(&stage_path[..]) && !config.dry_run() {\n         attempt_toolchain_link(&stage_path[..]);\n     }\n \n@@ -104,7 +149,9 @@ pub fn setup(config: &Config, profile: Option<Profile>) {\n         Profile::User => &[\"dist\", \"build\"],\n     };\n \n-    t!(install_git_hook_maybe(&config));\n+    if !config.dry_run() {\n+        t!(install_git_hook_maybe(&config));\n+    }\n \n     println!();\n \n@@ -144,6 +191,7 @@ fn setup_config_toml(path: &PathBuf, profile: Profile, config: &Config) {\n     changelog-seen = {}\\n\",\n         profile, VERSION\n     );\n+\n     t!(fs::write(path, settings));\n \n     let include_path = profile.include_path(&config.src);"}]}