{"sha": "2a318264ea493c62b8ec2fe110654e3177b49939", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMzE4MjY0ZWE0OTNjNjJiOGVjMmZlMTEwNjU0ZTMxNzdiNDk5Mzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-30T09:04:48Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-08-30T09:05:52Z"}, "message": "also allow comparing pointers with integers so big that they cannot be equal", "tree": {"sha": "cd3cbc8031a4f8f04057d8498c2a6571a89b096d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd3cbc8031a4f8f04057d8498c2a6571a89b096d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a318264ea493c62b8ec2fe110654e3177b49939", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a318264ea493c62b8ec2fe110654e3177b49939", "html_url": "https://github.com/rust-lang/rust/commit/2a318264ea493c62b8ec2fe110654e3177b49939", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a318264ea493c62b8ec2fe110654e3177b49939/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c44267960f4642a1875de9e39ef7287961c56d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c44267960f4642a1875de9e39ef7287961c56d3a", "html_url": "https://github.com/rust-lang/rust/commit/c44267960f4642a1875de9e39ef7287961c56d3a"}], "stats": {"total": 29, "additions": 24, "deletions": 5}, "files": [{"sha": "576c4a271f96a74c4a53afb8b18103c1973278e0", "filename": "src/operator.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2a318264ea493c62b8ec2fe110654e3177b49939/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a318264ea493c62b8ec2fe110654e3177b49939/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=2a318264ea493c62b8ec2fe110654e3177b49939", "patch": "@@ -148,11 +148,30 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                     left == right\n                 }\n             }\n-            // Comparing ptr and integer -- we only allow compating with NULL\n-            (Scalar::Ptr(_), Scalar::Bits { bits: 0, .. }) |\n-            (Scalar::Bits { bits: 0, .. }, Scalar::Ptr(_)) => false,\n-            // Nothing else is supported\n-            _ => return err!(InvalidPointerMath),\n+            // Comparing ptr and integer -- we allow compating with NULL, and with addresses\n+            // so close to the end of the `usize` range that they cannot overlap with an allocation\n+            // of the given size.\n+            (Scalar::Ptr(ptr), Scalar::Bits { bits, size }) |\n+            (Scalar::Bits { bits, size }, Scalar::Ptr(ptr)) => {\n+                assert_eq!(size as u64, self.pointer_size().bytes());\n+                if bits == 0 {\n+                    // Nothing equals 0\n+                    false\n+                } else {\n+                    // Compute the highest address at which this allocation could live\n+                    let alloc = self.memory.get(ptr.alloc_id)?;\n+                    let max_base_addr =\n+                        (1u128 << self.pointer_size().bits()) - alloc.bytes.len() as u128;\n+                    let max_addr = max_base_addr + ptr.offset.bytes() as u128;\n+                    if bits > max_addr {\n+                        // The integer is too big, this cannot possibly be equal\n+                        false\n+                    } else {\n+                        // TODO: We could also take alignment into account\n+                        return err!(InvalidPointerMath);\n+                    }\n+                }\n+            }\n         })\n     }\n "}]}