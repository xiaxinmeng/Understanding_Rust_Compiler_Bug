{"sha": "badb81a6129b84a9f01223ab73a56ffe52bf33ce", "node_id": "C_kwDOAAsO6NoAKGJhZGI4MWE2MTI5Yjg0YTlmMDEyMjNhYjczYTU2ZmZlNTJiZjMzY2U", "commit": {"author": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-01-25T23:19:00Z"}, "committer": {"name": "George Bateman", "email": "george.bateman16@gmail.com", "date": "2022-01-25T23:46:56Z"}, "message": "#91939: integer to char cast error, make more targeted", "tree": {"sha": "466f94704d11a642f052c47f022ffbe0ce721bab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/466f94704d11a642f052c47f022ffbe0ce721bab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/badb81a6129b84a9f01223ab73a56ffe52bf33ce", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEhCkfJ9Js3nBacaLYxBeqnEA5788FAmHwi/AACgkQxBeqnEA5\n78+Dxwf+PlYSApNlJchTemc2jB0cKPxdIyoJwOK6Ilb3MGB7s0FivvuTXyVRSsC6\neYbE2fD+vphvNsG/UXGLs1+w8yJY/FloPgGpYkTImL/bSIOPeROV2vCR7nQxFQ4n\nqdM8OSmDteQt28cc94Epoqbju3kjfpnSXwBQiwliV2+psHw4vWN2ZINnqGKmvHFx\neism7VvvA2RSrl15nH5SAal/A0BIR1OaR8+IjCW2wfjoCLr0v+NRcGebUirK9e/A\n4yipSoQ/cuUmLdvRoA71qQqaH5Hq1+pIU1VXUWcGqx32lSrXteRV20CphB/UsqRb\nSk/WyXEQ6hJgtIeyCEpQUOYbKmSsfQ==\n=VYbZ\n-----END PGP SIGNATURE-----", "payload": "tree 466f94704d11a642f052c47f022ffbe0ce721bab\nparent a15cb49362971a360c5fd0ad88e7add3bd9ac5d6\nauthor George Bateman <george.bateman16@gmail.com> 1643152740 +0000\ncommitter George Bateman <george.bateman16@gmail.com> 1643154416 +0000\n\n#91939: integer to char cast error, make more targeted\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/badb81a6129b84a9f01223ab73a56ffe52bf33ce", "html_url": "https://github.com/rust-lang/rust/commit/badb81a6129b84a9f01223ab73a56ffe52bf33ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/badb81a6129b84a9f01223ab73a56ffe52bf33ce/comments", "author": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GKFX", "id": 5357642, "node_id": "MDQ6VXNlcjUzNTc2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5357642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GKFX", "html_url": "https://github.com/GKFX", "followers_url": "https://api.github.com/users/GKFX/followers", "following_url": "https://api.github.com/users/GKFX/following{/other_user}", "gists_url": "https://api.github.com/users/GKFX/gists{/gist_id}", "starred_url": "https://api.github.com/users/GKFX/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GKFX/subscriptions", "organizations_url": "https://api.github.com/users/GKFX/orgs", "repos_url": "https://api.github.com/users/GKFX/repos", "events_url": "https://api.github.com/users/GKFX/events{/privacy}", "received_events_url": "https://api.github.com/users/GKFX/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a15cb49362971a360c5fd0ad88e7add3bd9ac5d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6", "html_url": "https://github.com/rust-lang/rust/commit/a15cb49362971a360c5fd0ad88e7add3bd9ac5d6"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "be0b7733579b5cf321a33ab6b7f2c18ce598db52", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/badb81a6129b84a9f01223ab73a56ffe52bf33ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/badb81a6129b84a9f01223ab73a56ffe52bf33ce/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=badb81a6129b84a9f01223ab73a56ffe52bf33ce", "patch": "@@ -328,17 +328,28 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                 err.emit();\n             }\n             CastError::CastToChar => {\n-                type_error_struct!(\n+                let mut err = type_error_struct!(\n                     fcx.tcx.sess,\n                     self.span,\n                     self.expr_ty,\n                     E0604,\n                     \"only `u8` can be cast as `char`, not `{}`\",\n                     self.expr_ty\n-                )\n-                .span_label(self.span, \"invalid cast\")\n-                .span_help(self.span, \"try `char::from_u32` instead\")\n-                .emit();\n+                );\n+                err.span_label(self.span, \"invalid cast\");\n+                if self.expr_ty.is_numeric() {\n+                    err.span_help(\n+                        self.span,\n+                        if self.expr_ty == fcx.tcx.types.i8 {\n+                            \"try casting from `u8` instead\"\n+                        } else if self.expr_ty == fcx.tcx.types.u32 {\n+                            \"try `char::from_u32` instead\"\n+                        } else {\n+                            \"try `char::from_u32` instead (via a `u32`)\"\n+                        },\n+                    );\n+                }\n+                err.emit();\n             }\n             CastError::NonScalar => {\n                 let mut err = type_error_struct!("}, {"sha": "f59ff329d18ace8ee4731ebdaf9724d0c53c3e82", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4b.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badb81a6129b84a9f01223ab73a56ffe52bf33ce/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badb81a6129b84a9f01223ab73a56ffe52bf33ce/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4b.stderr?ref=badb81a6129b84a9f01223ab73a56ffe52bf33ce", "patch": "@@ -17,6 +17,12 @@ error[E0604]: only `u8` can be cast as `char`, not `i8`\n    |\n LL |     : [u32; 5i8 as char as usize]\n    |             ^^^^^^^^^^^ invalid cast\n+   |\n+help: try casting from `u8` instead\n+  --> $DIR/const-eval-overflow-4b.rs:22:13\n+   |\n+LL |     : [u32; 5i8 as char as usize]\n+   |             ^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d715d28b73c01a36c432262527b6ad5ae9e7a05a", "filename": "src/test/ui/error-codes/E0604.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badb81a6129b84a9f01223ab73a56ffe52bf33ce/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badb81a6129b84a9f01223ab73a56ffe52bf33ce/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0604.stderr?ref=badb81a6129b84a9f01223ab73a56ffe52bf33ce", "patch": "@@ -3,6 +3,12 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n    |\n LL |     1u32 as char;\n    |     ^^^^^^^^^^^^ invalid cast\n+   |\n+help: try `char::from_u32` instead\n+  --> $DIR/E0604.rs:2:5\n+   |\n+LL |     1u32 as char;\n+   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0ddb6fc99b004d4459e24dfd28c715ed69937ca6", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badb81a6129b84a9f01223ab73a56ffe52bf33ce/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badb81a6129b84a9f01223ab73a56ffe52bf33ce/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=badb81a6129b84a9f01223ab73a56ffe52bf33ce", "patch": "@@ -58,6 +58,12 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n    |\n LL |     0u32 as char;\n    |     ^^^^^^^^^^^^ invalid cast\n+   |\n+help: try `char::from_u32` instead\n+  --> $DIR/error-festival.rs:25:5\n+   |\n+LL |     0u32 as char;\n+   |     ^^^^^^^^^^^^\n \n error[E0605]: non-primitive cast: `u8` as `Vec<u8>`\n   --> $DIR/error-festival.rs:29:5"}, {"sha": "6dbf24baf2315d8c05d7a3481fb96107b8062d0e", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/badb81a6129b84a9f01223ab73a56ffe52bf33ce/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/badb81a6129b84a9f01223ab73a56ffe52bf33ce/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=badb81a6129b84a9f01223ab73a56ffe52bf33ce", "patch": "@@ -99,6 +99,12 @@ error[E0604]: only `u8` can be cast as `char`, not `u32`\n    |\n LL |     let _ = 0x61u32 as char;\n    |             ^^^^^^^^^^^^^^^ invalid cast\n+   |\n+help: try `char::from_u32` instead\n+  --> $DIR/cast-rfc0401.rs:41:13\n+   |\n+LL |     let _ = 0x61u32 as char;\n+   |             ^^^^^^^^^^^^^^^\n \n error[E0606]: casting `bool` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:43:13"}]}