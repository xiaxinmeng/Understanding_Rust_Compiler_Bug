{"sha": "b74d042be2c237fa1a29e87ed7501410974a0dd9", "node_id": "C_kwDOAAsO6NoAKGI3NGQwNDJiZTJjMjM3ZmExYTI5ZTg3ZWQ3NTAxNDEwOTc0YTBkZDk", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-11T17:12:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-11T17:12:31Z"}, "message": "Rollup merge of #104129 - notriddle:notriddle/102576-js-notable-trait, r=Manishearth\n\nrustdoc: use javascript to layout notable traits popups\n\nFixes #102576\n\nPreview: https://notriddle.com/notriddle-rustdoc-demos/102576-js-notable-trait/std/iter/trait.Iterator.html#method.step_by\n\n## Before\n\n![image](https://user-images.githubusercontent.com/1593513/200432713-23aa8d49-ba2b-469f-9eab-089e0c174039.png)\n\n## After\n\n![image](https://user-images.githubusercontent.com/1593513/200432735-edd5b53d-e99d-4fc5-9410-8a79e0efdc9d.png)", "tree": {"sha": "0c60b65b40f22a4a1ed81f14bd6aa5e16273a872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c60b65b40f22a4a1ed81f14bd6aa5e16273a872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b74d042be2c237fa1a29e87ed7501410974a0dd9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjboJ/CRBK7hj4Ov3rIwAA884IAHaiErKc60Ja2zTv/9LpYe2y\nOD9ctUBx5d9Y/ft93a64M+6qZLCaDGYyaPz7ZfMbaGiwO3/G71sr5/uYTYYUUHK0\nSRDWtleAWWoRRL0SBKnlOTInz+nBAuGFtGj2xuaS6ycS38CfoSF+d7lTv61OP80u\nmGbKiHLB96RMWtJWUyFnel2g2YPaMUgDy41jDuSZFq8Na+RVq7vy5mCH0D4UwbOB\nMeNwompTujOHINF3nCllmCedK9Y742EizObbRsjr2KFpdn1f/I1mGubdzH7nD5l+\nYQL7t0CVzUBeZXHcoJDYpbnyAGOHQKLTQx4pSjRmkUsaa2Ic/+uQWKpixSEzB4Y=\n=m4BG\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c60b65b40f22a4a1ed81f14bd6aa5e16273a872\nparent e8bc6e132820f24909f4ef536f84e0aa3ddf2d2b\nparent 05824cd7b7f9b022a68f49b676a58088b6b85118\nauthor Manish Goregaokar <manishsmail@gmail.com> 1668186751 -0500\ncommitter GitHub <noreply@github.com> 1668186751 -0500\n\nRollup merge of #104129 - notriddle:notriddle/102576-js-notable-trait, r=Manishearth\n\nrustdoc: use javascript to layout notable traits popups\n\nFixes #102576\n\nPreview: https://notriddle.com/notriddle-rustdoc-demos/102576-js-notable-trait/std/iter/trait.Iterator.html#method.step_by\n\n## Before\n\n![image](https://user-images.githubusercontent.com/1593513/200432713-23aa8d49-ba2b-469f-9eab-089e0c174039.png)\n\n## After\n\n![image](https://user-images.githubusercontent.com/1593513/200432735-edd5b53d-e99d-4fc5-9410-8a79e0efdc9d.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b74d042be2c237fa1a29e87ed7501410974a0dd9", "html_url": "https://github.com/rust-lang/rust/commit/b74d042be2c237fa1a29e87ed7501410974a0dd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b74d042be2c237fa1a29e87ed7501410974a0dd9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8bc6e132820f24909f4ef536f84e0aa3ddf2d2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8bc6e132820f24909f4ef536f84e0aa3ddf2d2b", "html_url": "https://github.com/rust-lang/rust/commit/e8bc6e132820f24909f4ef536f84e0aa3ddf2d2b"}, {"sha": "05824cd7b7f9b022a68f49b676a58088b6b85118", "url": "https://api.github.com/repos/rust-lang/rust/commits/05824cd7b7f9b022a68f49b676a58088b6b85118", "html_url": "https://github.com/rust-lang/rust/commit/05824cd7b7f9b022a68f49b676a58088b6b85118"}], "stats": {"total": 470, "additions": 360, "deletions": 110}, "files": [{"sha": "39e2a90222670250fd8c0c81e75fe50901430435", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -107,10 +107,6 @@ impl Buffer {\n         self.buffer\n     }\n \n-    pub(crate) fn insert_str(&mut self, idx: usize, s: &str) {\n-        self.buffer.insert_str(idx, s);\n-    }\n-\n     pub(crate) fn push_str(&mut self, s: &str) {\n         self.buffer.push_str(s);\n     }"}, {"sha": "73690c86f4f72b97070c9c42718fe47022c2b468", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -69,11 +69,13 @@ pub(crate) struct Context<'tcx> {\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n     pub(crate) include_sources: bool,\n+    /// Collection of all types with notable traits referenced in the current module.\n+    pub(crate) types_with_notable_traits: FxHashSet<clean::Type>,\n }\n \n // `Context` is cloned a lot, so we don't want the size to grow unexpectedly.\n #[cfg(all(not(windows), target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(Context<'_>, 128);\n+rustc_data_structures::static_assert_size!(Context<'_>, 160);\n \n /// Shared mutable state used in [`Context`] and elsewhere.\n pub(crate) struct SharedContext<'tcx> {\n@@ -532,6 +534,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             deref_id_map: FxHashMap::default(),\n             shared: Rc::new(scx),\n             include_sources,\n+            types_with_notable_traits: FxHashSet::default(),\n         };\n \n         if emit_crate {\n@@ -560,6 +563,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n             id_map: IdMap::new(),\n             shared: Rc::clone(&self.shared),\n             include_sources: self.include_sources,\n+            types_with_notable_traits: FxHashSet::default(),\n         }\n     }\n \n@@ -803,6 +807,7 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n                 }\n             }\n         }\n+\n         Ok(())\n     }\n "}, {"sha": "266ec2ac7ad7394f3706b59b26ce2964f2cad919", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 122, "deletions": 73, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -59,7 +59,7 @@ use rustc_span::{\n     symbol::{sym, Symbol},\n     BytePos, FileName, RealFileName,\n };\n-use serde::ser::SerializeSeq;\n+use serde::ser::{SerializeMap, SerializeSeq};\n use serde::{Serialize, Serializer};\n \n use crate::clean::{self, ItemId, RenderedLink, SelfTy};\n@@ -803,7 +803,7 @@ fn assoc_method(\n     d: &clean::FnDecl,\n     link: AssocItemLink<'_>,\n     parent: ItemType,\n-    cx: &Context<'_>,\n+    cx: &mut Context<'_>,\n     render_mode: RenderMode,\n ) {\n     let tcx = cx.tcx();\n@@ -836,6 +836,8 @@ fn assoc_method(\n         + name.as_str().len()\n         + generics_len;\n \n+    let notable_traits = d.output.as_return().and_then(|output| notable_traits_button(output, cx));\n+\n     let (indent, indent_str, end_newline) = if parent == ItemType::Trait {\n         header_len += 4;\n         let indent_str = \"    \";\n@@ -861,9 +863,9 @@ fn assoc_method(\n         name = name,\n         generics = g.print(cx),\n         decl = d.full_print(header_len, indent, cx),\n-        notable_traits = notable_traits_decl(d, cx),\n+        notable_traits = notable_traits.unwrap_or_default(),\n         where_clause = print_where_clause(g, cx, indent, end_newline),\n-    )\n+    );\n }\n \n /// Writes a span containing the versions at which an item became stable and/or const-stable. For\n@@ -963,7 +965,7 @@ fn render_assoc_item(\n     item: &clean::Item,\n     link: AssocItemLink<'_>,\n     parent: ItemType,\n-    cx: &Context<'_>,\n+    cx: &mut Context<'_>,\n     render_mode: RenderMode,\n ) {\n     match &*item.kind {\n@@ -1273,88 +1275,135 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) ->\n     }\n }\n \n-fn notable_traits_decl(decl: &clean::FnDecl, cx: &Context<'_>) -> String {\n-    let mut out = Buffer::html();\n+pub(crate) fn notable_traits_button(ty: &clean::Type, cx: &mut Context<'_>) -> Option<String> {\n+    let mut has_notable_trait = false;\n+\n+    let did = ty.def_id(cx.cache())?;\n \n-    if let Some((did, ty)) = decl.output.as_return().and_then(|t| Some((t.def_id(cx.cache())?, t)))\n+    // Box has pass-through impls for Read, Write, Iterator, and Future when the\n+    // boxed type implements one of those. We don't want to treat every Box return\n+    // as being notably an Iterator (etc), though, so we exempt it. Pin has the same\n+    // issue, with a pass-through impl for Future.\n+    if Some(did) == cx.tcx().lang_items().owned_box()\n+        || Some(did) == cx.tcx().lang_items().pin_type()\n     {\n-        // Box has pass-through impls for Read, Write, Iterator, and Future when the\n-        // boxed type implements one of those. We don't want to treat every Box return\n-        // as being notably an Iterator (etc), though, so we exempt it. Pin has the same\n-        // issue, with a pass-through impl for Future.\n-        if Some(did) == cx.tcx().lang_items().owned_box()\n-            || Some(did) == cx.tcx().lang_items().pin_type()\n-        {\n-            return \"\".to_string();\n-        }\n-        if let Some(impls) = cx.cache().impls.get(&did) {\n-            for i in impls {\n-                let impl_ = i.inner_impl();\n-                if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache())\n+        return None;\n+    }\n+\n+    if let Some(impls) = cx.cache().impls.get(&did) {\n+        for i in impls {\n+            let impl_ = i.inner_impl();\n+            if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache()) {\n+                // Two different types might have the same did,\n+                // without actually being the same.\n+                continue;\n+            }\n+            if let Some(trait_) = &impl_.trait_ {\n+                let trait_did = trait_.def_id();\n+\n+                if cx.cache().traits.get(&trait_did).map_or(false, |t| t.is_notable_trait(cx.tcx()))\n                 {\n-                    // Two different types might have the same did,\n-                    // without actually being the same.\n-                    continue;\n+                    has_notable_trait = true;\n+                }\n+            }\n+        }\n+    }\n+\n+    if has_notable_trait {\n+        cx.types_with_notable_traits.insert(ty.clone());\n+        Some(format!(\n+            \"<span class=\\\"notable-traits\\\" data-ty=\\\"{ty}\\\">\\\n+                <span class=\\\"notable-traits-tooltip\\\">\u24d8</span>\\\n+            </span>\",\n+            ty = Escape(&format!(\"{:#}\", ty.print(cx))),\n+        ))\n+    } else {\n+        None\n+    }\n+}\n+\n+fn notable_traits_decl(ty: &clean::Type, cx: &Context<'_>) -> (String, String) {\n+    let mut out = Buffer::html();\n+\n+    let did = ty.def_id(cx.cache()).expect(\"notable_traits_button already checked this\");\n+\n+    let impls = cx.cache().impls.get(&did).expect(\"notable_traits_button already checked this\");\n+\n+    for i in impls {\n+        let impl_ = i.inner_impl();\n+        if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache()) {\n+            // Two different types might have the same did,\n+            // without actually being the same.\n+            continue;\n+        }\n+        if let Some(trait_) = &impl_.trait_ {\n+            let trait_did = trait_.def_id();\n+\n+            if cx.cache().traits.get(&trait_did).map_or(false, |t| t.is_notable_trait(cx.tcx())) {\n+                if out.is_empty() {\n+                    write!(\n+                        &mut out,\n+                        \"<h3 class=\\\"notable\\\">Notable traits for <code>{}</code></h3>\\\n+                     <pre class=\\\"content\\\"><code>\",\n+                        impl_.for_.print(cx)\n+                    );\n                 }\n-                if let Some(trait_) = &impl_.trait_ {\n-                    let trait_did = trait_.def_id();\n-\n-                    if cx\n-                        .cache()\n-                        .traits\n-                        .get(&trait_did)\n-                        .map_or(false, |t| t.is_notable_trait(cx.tcx()))\n-                    {\n-                        if out.is_empty() {\n-                            write!(\n-                                &mut out,\n-                                \"<span class=\\\"notable\\\">Notable traits for {}</span>\\\n-                             <code class=\\\"content\\\">\",\n-                                impl_.for_.print(cx)\n-                            );\n-                        }\n \n-                        //use the \"where\" class here to make it small\n-                        write!(\n+                //use the \"where\" class here to make it small\n+                write!(\n+                    &mut out,\n+                    \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n+                    impl_.print(false, cx)\n+                );\n+                for it in &impl_.items {\n+                    if let clean::AssocTypeItem(ref tydef, ref _bounds) = *it.kind {\n+                        out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n+                        let empty_set = FxHashSet::default();\n+                        let src_link = AssocItemLink::GotoSource(trait_did.into(), &empty_set);\n+                        assoc_type(\n                             &mut out,\n-                            \"<span class=\\\"where fmt-newline\\\">{}</span>\",\n-                            impl_.print(false, cx)\n+                            it,\n+                            &tydef.generics,\n+                            &[], // intentionally leaving out bounds\n+                            Some(&tydef.type_),\n+                            src_link,\n+                            0,\n+                            cx,\n                         );\n-                        for it in &impl_.items {\n-                            if let clean::AssocTypeItem(ref tydef, ref _bounds) = *it.kind {\n-                                out.push_str(\"<span class=\\\"where fmt-newline\\\">    \");\n-                                let empty_set = FxHashSet::default();\n-                                let src_link =\n-                                    AssocItemLink::GotoSource(trait_did.into(), &empty_set);\n-                                assoc_type(\n-                                    &mut out,\n-                                    it,\n-                                    &tydef.generics,\n-                                    &[], // intentionally leaving out bounds\n-                                    Some(&tydef.type_),\n-                                    src_link,\n-                                    0,\n-                                    cx,\n-                                );\n-                                out.push_str(\";</span>\");\n-                            }\n-                        }\n+                        out.push_str(\";</span>\");\n                     }\n                 }\n             }\n         }\n     }\n-\n-    if !out.is_empty() {\n-        out.insert_str(\n-            0,\n-            \"<span class=\\\"notable-traits\\\"><span class=\\\"notable-traits-tooltip\\\">\u24d8\\\n-            <span class=\\\"notable-traits-tooltiptext\\\"><span class=\\\"docblock\\\">\",\n-        );\n-        out.push_str(\"</code></span></span></span></span>\");\n+    if out.is_empty() {\n+        write!(&mut out, \"</code></pre>\",);\n     }\n \n-    out.into_inner()\n+    (format!(\"{:#}\", ty.print(cx)), out.into_inner())\n+}\n+\n+pub(crate) fn notable_traits_json<'a>(\n+    tys: impl Iterator<Item = &'a clean::Type>,\n+    cx: &Context<'_>,\n+) -> String {\n+    let mut mp: Vec<(String, String)> = tys.map(|ty| notable_traits_decl(ty, cx)).collect();\n+    mp.sort_by(|(name1, _html1), (name2, _html2)| name1.cmp(name2));\n+    struct NotableTraitsMap(Vec<(String, String)>);\n+    impl Serialize for NotableTraitsMap {\n+        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+        where\n+            S: Serializer,\n+        {\n+            let mut map = serializer.serialize_map(Some(self.0.len()))?;\n+            for item in &self.0 {\n+                map.serialize_entry(&item.0, &item.1)?;\n+            }\n+            map.end()\n+        }\n+    }\n+    serde_json::to_string(&NotableTraitsMap(mp))\n+        .expect(\"serialize (string, string) -> json object cannot fail\")\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "ac11a860a4f0b88af87cc192f97674afe7c3afa0", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -17,9 +17,10 @@ use std::rc::Rc;\n \n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, get_filtered_impls_for_reference,\n-    item_ty_to_section, notable_traits_decl, render_all_impls, render_assoc_item,\n-    render_assoc_items, render_attributes_in_code, render_attributes_in_pre, render_impl,\n-    render_rightside, render_stability_since_raw, AssocItemLink, Context, ImplRenderingParameters,\n+    item_ty_to_section, notable_traits_button, notable_traits_json, render_all_impls,\n+    render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n+    render_impl, render_rightside, render_stability_since_raw, AssocItemLink, Context,\n+    ImplRenderingParameters,\n };\n use crate::clean;\n use crate::config::ModuleSorting;\n@@ -183,6 +184,16 @@ pub(super) fn print_item(\n             unreachable!();\n         }\n     }\n+\n+    // Render notable-traits.js used for all methods in this module.\n+    if !cx.types_with_notable_traits.is_empty() {\n+        write!(\n+            buf,\n+            r#\"<script type=\"text/json\" id=\"notable-traits-data\">{}</script>\"#,\n+            notable_traits_json(cx.types_with_notable_traits.iter(), cx)\n+        );\n+        cx.types_with_notable_traits.clear();\n+    }\n }\n \n /// For large structs, enums, unions, etc, determine whether to hide their fields\n@@ -516,6 +527,9 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n         + name.as_str().len()\n         + generics_len;\n \n+    let notable_traits =\n+        f.decl.output.as_return().and_then(|output| notable_traits_button(output, cx));\n+\n     wrap_into_item_decl(w, |w| {\n         wrap_item(w, \"fn\", |w| {\n             render_attributes_in_pre(w, it, \"\");\n@@ -533,11 +547,11 @@ fn item_function(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, f: &cle\n                 generics = f.generics.print(cx),\n                 where_clause = print_where_clause(&f.generics, cx, 0, Ending::Newline),\n                 decl = f.decl.full_print(header_len, 0, cx),\n-                notable_traits = notable_traits_decl(&f.decl, cx),\n+                notable_traits = notable_traits.unwrap_or_default(),\n             );\n         });\n     });\n-    document(w, cx, it, None, HeadingOffset::H2)\n+    document(w, cx, it, None, HeadingOffset::H2);\n }\n \n fn item_trait(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, t: &clean::Trait) {"}, {"sha": "54e8b6561f34f9c3e4cb0b7ba1706e3a3e352b57", "filename": "src/librustdoc/html/static/css/noscript.css", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fnoscript.css?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -22,3 +22,9 @@ nav.sub {\n .source .sidebar {\n \tdisplay: none;\n }\n+\n+.notable-traits {\n+\t/* layout requires javascript\n+\t    https://github.com/rust-lang/rust/issues/102576 */\n+\tdisplay: none;\n+}"}, {"sha": "9a30240c7bac3709b533c542cc4151df6a0f5221", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -183,6 +183,8 @@ h4.code-header {\n \tfont-weight: 600;\n \tmargin: 0;\n \tpadding: 0;\n+\t/* position notable traits in mobile mode within the header */\n+\tposition: relative;\n }\n \n #crate-search,\n@@ -1276,13 +1278,12 @@ h3.variant {\n \tcursor: pointer;\n }\n \n-.notable-traits:hover .notable-traits-tooltiptext,\n-.notable-traits .notable-traits-tooltiptext.force-tooltip {\n+.notable-traits .notable-traits-tooltiptext {\n \tdisplay: inline-block;\n+\tvisibility: hidden;\n }\n \n-.notable-traits .notable-traits-tooltiptext {\n-\tdisplay: none;\n+.notable-traits-tooltiptext {\n \tpadding: 5px 3px 3px 3px;\n \tborder-radius: 6px;\n \tmargin-left: 5px;\n@@ -1300,22 +1301,26 @@ h3.variant {\n \tcontent: \"\\00a0\\00a0\\00a0\";\n }\n \n-.notable-traits .docblock {\n+.notable-traits-tooltiptext .docblock {\n \tmargin: 0;\n }\n \n-.notable-traits .notable {\n-\tmargin: 0;\n-\tmargin-bottom: 13px;\n+.notable-traits-tooltiptext .notable {\n \tfont-size: 1.1875rem;\n \tfont-weight: 600;\n \tdisplay: block;\n }\n \n-.notable-traits .docblock code.content {\n+.notable-traits-tooltiptext pre, .notable-traits-tooltiptext code {\n+\tbackground: transparent;\n+}\n+\n+.notable-traits-tooltiptext .docblock pre.content {\n \tmargin: 0;\n \tpadding: 0;\n \tfont-size: 1.25rem;\n+\twhite-space: pre-wrap;\n+\toverflow: hidden;\n }\n \n .search-failed {"}, {"sha": "0426774e80d46ff974ffd59b890b3301b804a145", "filename": "src/librustdoc/html/static/js/main.js", "status": "modified", "additions": 85, "deletions": 2, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fmain.js?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -790,6 +790,19 @@ function loadCss(cssUrl) {\n             // we need to switch away from mobile mode and make the main content area scrollable.\n             hideSidebar();\n         }\n+        if (window.CURRENT_NOTABLE_ELEMENT) {\n+            // As a workaround to the behavior of `contains: layout` used in doc togglers, the\n+            // notable traits popup is positioned using javascript.\n+            //\n+            // This means when the window is resized, we need to redo the layout.\n+            const base = window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE;\n+            const force_visible = base.NOTABLE_FORCE_VISIBLE;\n+            hideNotable();\n+            if (force_visible) {\n+                showNotable(base);\n+                base.NOTABLE_FORCE_VISIBLE = true;\n+            }\n+        }\n     });\n \n     function handleClick(id, f) {\n@@ -822,10 +835,80 @@ function loadCss(cssUrl) {\n         });\n     });\n \n+    function showNotable(e) {\n+        if (!window.NOTABLE_TRAITS) {\n+            const data = document.getElementById(\"notable-traits-data\");\n+            if (data) {\n+                window.NOTABLE_TRAITS = JSON.parse(data.innerText);\n+            } else {\n+                throw new Error(\"showNotable() called on page without any notable traits!\");\n+            }\n+        }\n+        if (window.CURRENT_NOTABLE_ELEMENT && window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE === e) {\n+            // Make this function idempotent.\n+            return;\n+        }\n+        hideNotable();\n+        const ty = e.getAttribute(\"data-ty\");\n+        const tooltip = e.getElementsByClassName(\"notable-traits-tooltip\")[0];\n+        const wrapper = document.createElement(\"div\");\n+        wrapper.innerHTML = \"<div class=\\\"docblock\\\">\" + window.NOTABLE_TRAITS[ty] + \"</div>\";\n+        wrapper.className = \"notable-traits-tooltiptext\";\n+        tooltip.appendChild(wrapper);\n+        const pos = wrapper.getBoundingClientRect();\n+        tooltip.removeChild(wrapper);\n+        wrapper.style.top = (pos.top + window.scrollY) + \"px\";\n+        wrapper.style.left = (pos.left + window.scrollX) + \"px\";\n+        wrapper.style.width = pos.width + \"px\";\n+        const body = document.getElementsByTagName(\"body\")[0];\n+        body.appendChild(wrapper);\n+        window.CURRENT_NOTABLE_ELEMENT = wrapper;\n+        window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE = e;\n+        wrapper.onpointerleave = function(ev) {\n+            // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n+            if (ev.pointerType !== \"mouse\") {\n+                return;\n+            }\n+            if (!e.NOTABLE_FORCE_VISIBLE && !elemIsInParent(event.relatedTarget, e)) {\n+                hideNotable();\n+            }\n+        };\n+    }\n+\n+    function hideNotable() {\n+        if (window.CURRENT_NOTABLE_ELEMENT) {\n+            window.CURRENT_NOTABLE_ELEMENT.NOTABLE_BASE.NOTABLE_FORCE_VISIBLE = false;\n+            const body = document.getElementsByTagName(\"body\")[0];\n+            body.removeChild(window.CURRENT_NOTABLE_ELEMENT);\n+            window.CURRENT_NOTABLE_ELEMENT = null;\n+        }\n+    }\n+\n     onEachLazy(document.getElementsByClassName(\"notable-traits\"), e => {\n         e.onclick = function() {\n-            this.getElementsByClassName(\"notable-traits-tooltiptext\")[0]\n-                .classList.toggle(\"force-tooltip\");\n+            this.NOTABLE_FORCE_VISIBLE = this.NOTABLE_FORCE_VISIBLE ? false : true;\n+            if (window.CURRENT_NOTABLE_ELEMENT && !this.NOTABLE_FORCE_VISIBLE) {\n+                hideNotable();\n+            } else {\n+                showNotable(this);\n+            }\n+        };\n+        e.onpointerenter = function(ev) {\n+            // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n+            if (ev.pointerType !== \"mouse\") {\n+                return;\n+            }\n+            showNotable(this);\n+        };\n+        e.onpointerleave = function(ev) {\n+            // If this is a synthetic touch event, ignore it. A click event will be along shortly.\n+            if (ev.pointerType !== \"mouse\") {\n+                return;\n+            }\n+            if (!this.NOTABLE_FORCE_VISIBLE &&\n+                !elemIsInParent(event.relatedTarget, window.CURRENT_NOTABLE_ELEMENT)) {\n+                hideNotable();\n+            }\n         };\n     });\n "}, {"sha": "d8261d8dc902c624cd58317de81abae163d42d55", "filename": "src/test/rustdoc-gui/notable-trait.goml", "status": "modified", "additions": 93, "deletions": 9, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fnotable-trait.goml?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -25,22 +25,28 @@ assert-position: (\n     {\"x\": 951},\n )\n // The tooltip should be beside the `i`\n+// Also, clicking the tooltip should bring its text into the DOM\n+assert-count: (\"//*[@class='notable-traits-tooltiptext']\", 0)\n click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+assert-count: (\"//*[@class='notable-traits-tooltiptext']\", 1)\n compare-elements-position-near: (\n     \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\",\n-    \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits-tooltiptext force-tooltip']\",\n+    \"//*[@class='notable-traits-tooltiptext']\",\n     {\"y\": 2}\n )\n compare-elements-position-false: (\n     \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\",\n-    \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits-tooltiptext force-tooltip']\",\n+    \"//*[@class='notable-traits-tooltiptext']\",\n     (\"x\")\n )\n // The docblock should be flush with the border.\n assert-css: (\n-    \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits-tooltiptext force-tooltip']/*[@class='docblock']\",\n+    \"//*[@class='notable-traits-tooltiptext']/*[@class='docblock']\",\n     {\"margin-left\": \"0px\"}\n )\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+move-cursor-to: \"//h1\"\n+assert-count: (\"//*[@class='notable-traits-tooltiptext']\", 0)\n \n // Now only the `i` should be on the next line.\n size: (1055, 600)\n@@ -98,26 +104,31 @@ assert-position: (\n     {\"x\": 289},\n )\n // The tooltip should be below `i`\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+assert-count: (\"//*[@class='notable-traits-tooltiptext']\", 1)\n compare-elements-position-near-false: (\n     \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\",\n-    \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits-tooltiptext force-tooltip']\",\n+    \"//*[@class='notable-traits-tooltiptext']\",\n     {\"y\": 2}\n )\n compare-elements-position-false: (\n     \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\",\n-    \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits-tooltiptext force-tooltip']\",\n+    \"//*[@class='notable-traits-tooltiptext']\",\n     (\"x\")\n )\n compare-elements-position-near: (\n-    \"//*[@id='method.create_an_iterator_from_read']/parent::*\",\n-    \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits-tooltiptext force-tooltip']\",\n-    {\"x\": 5}\n+    \"//*[@id='method.create_an_iterator_from_read']\",\n+    \"//*[@class='notable-traits-tooltiptext']\",\n+    {\"x\": 10}\n )\n // The docblock should be flush with the border.\n assert-css: (\n-    \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits-tooltiptext force-tooltip']/*[@class='docblock']\",\n+    \"//*[@class='notable-traits-tooltiptext']/*[@class='docblock']\",\n     {\"margin-left\": \"0px\"}\n )\n+click: \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"\n+move-cursor-to: \"//h1\"\n+assert-count: (\"//*[@class='notable-traits-tooltiptext']\", 0)\n \n // Checking on very small mobile. The `i` should be on its own line.\n size: (365, 600)\n@@ -126,3 +137,76 @@ compare-elements-position-false: (\n     \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\",\n     (\"y\", \"x\"),\n )\n+\n+// Now check the colors.\n+define-function: (\n+    \"check-colors\",\n+    (theme, header_color, content_color, type_color, trait_color),\n+    [\n+        (\"goto\", \"file://\" + |DOC_PATH| + \"/test_docs/struct.NotableStructWithLongName.html\"),\n+        // This is needed to ensure that the text color is computed.\n+        (\"show-text\", true),\n+\n+        // Setting the theme.\n+        (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n+        // We reload the page so the local storage settings are being used.\n+        (\"reload\"),\n+\n+        (\"move-cursor-to\", \"//*[@id='method.create_an_iterator_from_read']//*[@class='notable-traits']\"),\n+        (\"assert-count\", (\".notable-traits-tooltiptext\", 1)),\n+\n+        (\"assert-css\", (\n+             \".notable-traits-tooltiptext h3.notable\",\n+             {\"color\": |header_color|},\n+             ALL,\n+        )),\n+        (\"assert-css\", (\n+             \".notable-traits-tooltiptext pre.content\",\n+             {\"color\": |content_color|},\n+             ALL,\n+        )),\n+        (\"assert-css\", (\n+             \".notable-traits-tooltiptext pre.content a.struct\",\n+             {\"color\": |type_color|},\n+             ALL,\n+        )),\n+        (\"assert-css\", (\n+             \".notable-traits-tooltiptext pre.content a.trait\",\n+             {\"color\": |trait_color|},\n+             ALL,\n+        )),\n+    ]\n+)\n+\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"ayu\",\n+        \"content_color\": \"rgb(230, 225, 207)\",\n+        \"header_color\": \"rgb(255, 255, 255)\",\n+        \"type_color\": \"rgb(255, 160, 165)\",\n+        \"trait_color\": \"rgb(57, 175, 215)\",\n+    },\n+)\n+\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"dark\",\n+        \"content_color\": \"rgb(221, 221, 221)\",\n+        \"header_color\": \"rgb(221, 221, 221)\",\n+        \"type_color\": \"rgb(45, 191, 184)\",\n+        \"trait_color\": \"rgb(183, 140, 242)\",\n+    },\n+)\n+\n+call-function: (\n+    \"check-colors\",\n+    {\n+        \"theme\": \"light\",\n+        \"content_color\": \"rgb(0, 0, 0)\",\n+        \"header_color\": \"rgb(0, 0, 0)\",\n+        \"type_color\": \"rgb(173, 55, 138)\",\n+        \"trait_color\": \"rgb(110, 79, 201)\",\n+    },\n+)"}, {"sha": "6b58be7e6853eef95298a633143f9891710df901", "filename": "src/test/rustdoc/doc-notable_trait-slice.bare_fn_matches.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.bare_fn_matches.html", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.bare_fn_matches.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.bare_fn_matches.html?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -0,0 +1 @@\n+<script type=\"text/json\" id=\"notable-traits-data\">{\"&amp;'static [SomeStruct]\":\"&lt;h3 class=\\\"notable\\\"&gt;Notable traits for &lt;code&gt;&amp;amp;[&lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait_slice::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;]&lt;/code&gt;&lt;/h3&gt;&lt;pre class=\\\"content\\\"&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait_slice::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &amp;amp;[&lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait_slice::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;]&lt;/span&gt;\"}</script>\n\\ No newline at end of file"}, {"sha": "2411da8cd45493d0aa0813f26076351186ed8bf2", "filename": "src/test/rustdoc/doc-notable_trait-slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait-slice.rs?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -8,13 +8,13 @@ pub struct OtherStruct;\n impl SomeTrait for &[SomeStruct] {}\n \n // @has doc_notable_trait_slice/fn.bare_fn_matches.html\n-// @has - '//code[@class=\"content\"]' 'impl SomeTrait for &[SomeStruct]'\n+// @snapshot bare_fn_matches - '//script[@id=\"notable-traits-data\"]'\n pub fn bare_fn_matches() -> &'static [SomeStruct] {\n     &[]\n }\n \n // @has doc_notable_trait_slice/fn.bare_fn_no_matches.html\n-// @!has - '//code[@class=\"content\"]' 'impl SomeTrait for &[SomeStruct]'\n+// @count - '//script[@id=\"notable-traits-data\"]' 0\n pub fn bare_fn_no_matches() -> &'static [OtherStruct] {\n     &[]\n }"}, {"sha": "4e4a3f18f2498b1db69e3f997a7b556b5825a2c4", "filename": "src/test/rustdoc/doc-notable_trait.bare-fn.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.bare-fn.html", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.bare-fn.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.bare-fn.html?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -0,0 +1 @@\n+<script type=\"text/json\" id=\"notable-traits-data\">{\"SomeStruct\":\"&lt;h3 class=\\\"notable\\\"&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre class=\\\"content\\\"&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;&lt;/span&gt;\"}</script>\n\\ No newline at end of file"}, {"sha": "1f2cd7181c3d4aa5ac45c5172d55ec5de68346db", "filename": "src/test/rustdoc/doc-notable_trait.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.rs?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -9,7 +9,8 @@ impl<T: SomeTrait> SomeTrait for Wrapper<T> {}\n #[doc(notable_trait)]\n pub trait SomeTrait {\n     // @has doc_notable_trait/trait.SomeTrait.html\n-    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    // @has - '//span[@class=\"notable-traits\"]/@data-ty' 'Wrapper<Self>'\n+    // @snapshot wrap-me - '//script[@id=\"notable-traits-data\"]'\n     fn wrap_me(self) -> Wrapper<Self> where Self: Sized {\n         Wrapper {\n             inner: self,\n@@ -22,15 +23,16 @@ impl SomeTrait for SomeStruct {}\n \n impl SomeStruct {\n     // @has doc_notable_trait/struct.SomeStruct.html\n-    // @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n-    // @has - '//code[@class=\"content\"]' 'impl<T: SomeTrait> SomeTrait for Wrapper<T>'\n+    // @has - '//span[@class=\"notable-traits\"]/@data-ty' 'SomeStruct'\n+    // @snapshot some-struct-new - '//script[@id=\"notable-traits-data\"]'\n     pub fn new() -> SomeStruct {\n         SomeStruct\n     }\n }\n \n // @has doc_notable_trait/fn.bare_fn.html\n-// @has - '//code[@class=\"content\"]' 'impl SomeTrait for SomeStruct'\n+// @has - '//span[@class=\"notable-traits\"]/@data-ty' 'SomeStruct'\n+// @snapshot bare-fn - '//script[@id=\"notable-traits-data\"]'\n pub fn bare_fn() -> SomeStruct {\n     SomeStruct\n }"}, {"sha": "c0fd9748fd37107a850cf9bf361c9f265ba0ad9f", "filename": "src/test/rustdoc/doc-notable_trait.some-struct-new.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.some-struct-new.html", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.some-struct-new.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.some-struct-new.html?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -0,0 +1 @@\n+<script type=\"text/json\" id=\"notable-traits-data\">{\"SomeStruct\":\"&lt;h3 class=\\\"notable\\\"&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre class=\\\"content\\\"&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.SomeStruct.html\\\" title=\\\"struct doc_notable_trait::SomeStruct\\\"&gt;SomeStruct&lt;/a&gt;&lt;/span&gt;\",\"Wrapper&lt;Self&gt;\":\"&lt;h3 class=\\\"notable\\\"&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre class=\\\"content\\\"&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl&amp;lt;T:&amp;nbsp;&lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt;&amp;gt; &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/span&gt;\"}</script>\n\\ No newline at end of file"}, {"sha": "9a59d5edd12a8f14533db611fd8e4d1946c19a69", "filename": "src/test/rustdoc/doc-notable_trait.wrap-me.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.wrap-me.html", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.wrap-me.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdoc-notable_trait.wrap-me.html?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -0,0 +1 @@\n+<script type=\"text/json\" id=\"notable-traits-data\">{\"Wrapper&lt;Self&gt;\":\"&lt;h3 class=\\\"notable\\\"&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre class=\\\"content\\\"&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl&amp;lt;T:&amp;nbsp;&lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt;&amp;gt; &lt;a class=\\\"trait\\\" href=\\\"trait.SomeTrait.html\\\" title=\\\"trait doc_notable_trait::SomeTrait\\\"&gt;SomeTrait&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.Wrapper.html\\\" title=\\\"struct doc_notable_trait::Wrapper\\\"&gt;Wrapper&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/span&gt;\"}</script>\n\\ No newline at end of file"}, {"sha": "987a949af44b18a4d9cd1cc9088ba6acefec002b", "filename": "src/test/rustdoc/spotlight-from-dependency.odd.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.odd.html", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.odd.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.odd.html?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -0,0 +1 @@\n+<script type=\"text/json\" id=\"notable-traits-data\">{\"Odd\":\"&lt;h3 class=\\\"notable\\\"&gt;Notable traits for &lt;code&gt;&lt;a class=\\\"struct\\\" href=\\\"struct.Odd.html\\\" title=\\\"struct foo::Odd\\\"&gt;Odd&lt;/a&gt;&lt;/code&gt;&lt;/h3&gt;&lt;pre class=\\\"content\\\"&gt;&lt;code&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;impl &lt;a class=\\\"trait\\\" href=\\\"{{channel}}/core/iter/traits/iterator/trait.Iterator.html\\\" title=\\\"trait core::iter::traits::iterator::Iterator\\\"&gt;Iterator&lt;/a&gt; for &lt;a class=\\\"struct\\\" href=\\\"struct.Odd.html\\\" title=\\\"struct foo::Odd\\\"&gt;Odd&lt;/a&gt;&lt;/span&gt;&lt;span class=\\\"where fmt-newline\\\"&gt;    type &lt;a href=\\\"{{channel}}/core/iter/traits/iterator/trait.Iterator.html#associatedtype.Item\\\" class=\\\"associatedtype\\\"&gt;Item&lt;/a&gt; = &lt;a class=\\\"primitive\\\" href=\\\"{{channel}}/std/primitive.usize.html\\\"&gt;usize&lt;/a&gt;;&lt;/span&gt;\"}</script>\n\\ No newline at end of file"}, {"sha": "156aedca62b4e346455db26191a09749506c6e56", "filename": "src/test/rustdoc/spotlight-from-dependency.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74d042be2c237fa1a29e87ed7501410974a0dd9/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fspotlight-from-dependency.rs?ref=b74d042be2c237fa1a29e87ed7501410974a0dd9", "patch": "@@ -3,7 +3,8 @@\n use std::iter::Iterator;\n \n // @has foo/struct.Odd.html\n-// @has - '//*[@id=\"method.new\"]//span[@class=\"notable-traits\"]//code/span' 'impl Iterator for Odd'\n+// @has - '//*[@id=\"method.new\"]//span[@class=\"notable-traits\"]/@data-ty' 'Odd'\n+// @snapshot odd - '//script[@id=\"notable-traits-data\"]'\n pub struct Odd {\n     current: usize,\n }"}]}