{"sha": "f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MmY5YzJjNTUzOTJlZjlkNzY0OWJmMmU0ODVmN2U1MDlmZDAwMzg=", "commit": {"author": {"name": "Francis Murillo", "email": "francis.murillo@protonmail.com", "date": "2020-10-02T01:05:30Z"}, "committer": {"name": "Francis Murillo", "email": "francis.murillo@protonmail.com", "date": "2020-10-25T09:18:52Z"}, "message": "Add lint for `&mut Mutex::lock`", "tree": {"sha": "e230241e16045f5f45d1b7d623022ba9d0ee90c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e230241e16045f5f45d1b7d623022ba9d0ee90c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "html_url": "https://github.com/rust-lang/rust/commit/f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/comments", "author": {"login": "FrancisMurillo", "id": 7600642, "node_id": "MDQ6VXNlcjc2MDA2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7600642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FrancisMurillo", "html_url": "https://github.com/FrancisMurillo", "followers_url": "https://api.github.com/users/FrancisMurillo/followers", "following_url": "https://api.github.com/users/FrancisMurillo/following{/other_user}", "gists_url": "https://api.github.com/users/FrancisMurillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/FrancisMurillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FrancisMurillo/subscriptions", "organizations_url": "https://api.github.com/users/FrancisMurillo/orgs", "repos_url": "https://api.github.com/users/FrancisMurillo/repos", "events_url": "https://api.github.com/users/FrancisMurillo/events{/privacy}", "received_events_url": "https://api.github.com/users/FrancisMurillo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FrancisMurillo", "id": 7600642, "node_id": "MDQ6VXNlcjc2MDA2NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/7600642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FrancisMurillo", "html_url": "https://github.com/FrancisMurillo", "followers_url": "https://api.github.com/users/FrancisMurillo/followers", "following_url": "https://api.github.com/users/FrancisMurillo/following{/other_user}", "gists_url": "https://api.github.com/users/FrancisMurillo/gists{/gist_id}", "starred_url": "https://api.github.com/users/FrancisMurillo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FrancisMurillo/subscriptions", "organizations_url": "https://api.github.com/users/FrancisMurillo/orgs", "repos_url": "https://api.github.com/users/FrancisMurillo/repos", "events_url": "https://api.github.com/users/FrancisMurillo/events{/privacy}", "received_events_url": "https://api.github.com/users/FrancisMurillo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a675778cfb3623a5b4c0b04946ef9ada2a1b5b07", "url": "https://api.github.com/repos/rust-lang/rust/commits/a675778cfb3623a5b4c0b04946ef9ada2a1b5b07", "html_url": "https://github.com/rust-lang/rust/commit/a675778cfb3623a5b4c0b04946ef9ada2a1b5b07"}], "stats": {"total": 128, "additions": 128, "deletions": 0}, "files": [{"sha": "ba080835f5c0c6bd6ceb59a51c337026f8dcaee2", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "patch": "@@ -1843,6 +1843,7 @@ Released 2018-09-13\n [`must_use_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#must_use_unit\n [`mut_from_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_from_ref\n [`mut_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_mut\n+[`mut_mutex_lock`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_mutex_lock\n [`mut_range_bound`]: https://rust-lang.github.io/rust-clippy/master/index.html#mut_range_bound\n [`mutable_key_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutable_key_type\n [`mutex_atomic`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_atomic"}, {"sha": "3a108bcfe6a4d8d3b3e221a4deb8a867f8c71ddc", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "patch": "@@ -255,6 +255,7 @@ mod modulo_arithmetic;\n mod multiple_crate_versions;\n mod mut_key;\n mod mut_mut;\n+mod mut_mutex_lock;\n mod mut_reference;\n mod mutable_debug_assertion;\n mod mutex_atomic;\n@@ -744,6 +745,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &multiple_crate_versions::MULTIPLE_CRATE_VERSIONS,\n         &mut_key::MUTABLE_KEY_TYPE,\n         &mut_mut::MUT_MUT,\n+        &mut_mutex_lock::MUT_MUTEX_LOCK,\n         &mut_reference::UNNECESSARY_MUT_PASSED,\n         &mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n         &mutex_atomic::MUTEX_ATOMIC,\n@@ -1112,6 +1114,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n     store.register_late_pass(|| box utils::internal_lints::CollapsibleCalls);\n     store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n+    store.register_late_pass(|| box mut_mutex_lock::MutMutexLock);\n     store.register_late_pass(|| box match_on_vec_items::MatchOnVecItems);\n     store.register_early_pass(|| box manual_non_exhaustive::ManualNonExhaustive);\n     store.register_late_pass(|| box manual_async_fn::ManualAsyncFn);\n@@ -1446,6 +1449,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n+        LintId::of(&mut_mutex_lock::MUT_MUTEX_LOCK),\n         LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n         LintId::of(&needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n@@ -1780,6 +1784,9 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc::FLOAT_CMP),\n         LintId::of(&misc::MODULO_ONE),\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n+        LintId::of(&mut_mutex_lock::MUT_MUTEX_LOCK),\n+        LintId::of(&non_copy_const::BORROW_INTERIOR_MUTABLE_CONST),\n+        LintId::of(&non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST),\n         LintId::of(&open_options::NONSENSICAL_OPEN_OPTIONS),\n         LintId::of(&option_env_unwrap::OPTION_ENV_UNWRAP),\n         LintId::of(&ptr::MUT_FROM_REF),"}, {"sha": "4f3108355ca7db037adab88a115158e702ebe44b", "filename": "clippy_lints/src/mut_mutex_lock.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs?ref=f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "patch": "@@ -0,0 +1,75 @@\n+use crate::utils::{is_type_diagnostic_item, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir::{Expr, ExprKind, Mutability};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for `&mut Mutex::lock` calls\n+    ///\n+    /// **Why is this bad?** `Mutex::lock` is less efficient than\n+    /// calling `Mutex::get_mut`\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// use std::sync::{Arc, Mutex};\n+    ///\n+    /// let mut value_rc = Arc::new(Mutex::new(42_u8));\n+    /// let value_mutex = Arc::get_mut(&mut value_rc).unwrap();\n+    ///\n+    /// let value = value_mutex.lock().unwrap();\n+    /// do_stuff(value);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::sync::{Arc, Mutex};\n+    ///\n+    /// let mut value_rc = Arc::new(Mutex::new(42_u8));\n+    /// let value_mutex = Arc::get_mut(&mut value_rc).unwrap();\n+    ///\n+    /// let value = value_mutex.get_mut().unwrap();\n+    /// do_stuff(value);\n+    /// ```\n+    pub MUT_MUTEX_LOCK,\n+    correctness,\n+    \"`&mut Mutex::lock` does unnecessary locking\"\n+}\n+\n+declare_lint_pass!(MutMutexLock => [MUT_MUTEX_LOCK]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MutMutexLock {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, ex: &'tcx Expr<'tcx>) {\n+        if_chain! {\n+            if is_mut_mutex_lock_call(cx, ex).is_some();\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    MUT_MUTEX_LOCK,\n+                    ex.span,\n+                    \"calling `&mut Mutex::lock` unnecessarily locks an exclusive (mutable) reference\",\n+                    None,\n+                    \"use `&mut Mutex::get_mut` instead\",\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+fn is_mut_mutex_lock_call<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n+    if_chain! {\n+        if let ExprKind::MethodCall(path, _span, args, _) = &expr.kind;\n+        if path.ident.name == sym!(lock);\n+        let ty = cx.typeck_results().expr_ty(&args[0]);\n+        if let ty::Ref(_, inner_ty, Mutability::Mut) = ty.kind();\n+        if is_type_diagnostic_item(cx, inner_ty, sym!(mutex_type));\n+        then {\n+            Some(&args[0])\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "5e48757a4c507b7064b81d8414d2cff6be452789", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "patch": "@@ -1502,6 +1502,13 @@ vec![\n         deprecation: None,\n         module: \"mut_mut\",\n     },\n+    Lint {\n+        name: \"mut_mutex_lock\",\n+        group: \"correctness\",\n+        desc: \"`&mut Mutex::lock` does unnecessary locking\",\n+        deprecation: None,\n+        module: \"mut_mutex_lock\",\n+    },\n     Lint {\n         name: \"mut_range_bound\",\n         group: \"complexity\","}, {"sha": "516d44bb7a9eb92e16669f5bd4270a513da2b56b", "filename": "tests/ui/mut_mutex_lock.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/tests%2Fui%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/tests%2Fui%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mutex_lock.rs?ref=f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "patch": "@@ -0,0 +1,19 @@\n+#![warn(clippy::mut_mutex_lock)]\n+\n+use std::sync::{Arc, Mutex};\n+\n+fn mut_mutex_lock() {\n+    let mut value_rc = Arc::new(Mutex::new(42_u8));\n+    let value_mutex = Arc::get_mut(&mut value_rc).unwrap();\n+\n+    let value = value_mutex.lock().unwrap();\n+    *value += 1;\n+}\n+\n+fn no_owned_mutex_lock() {\n+    let mut value_rc = Arc::new(Mutex::new(42_u8));\n+    let value = value_rc.lock().unwrap();\n+    *value += 1;\n+}\n+\n+fn main() {}"}, {"sha": "426e0240830e43d45b04aa14ea730c5646d01729", "filename": "tests/ui/mut_mutex_lock.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/tests%2Fui%2Fmut_mutex_lock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f82f9c2c55392ef9d7649bf2e485f7e509fd0038/tests%2Fui%2Fmut_mutex_lock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mutex_lock.stderr?ref=f82f9c2c55392ef9d7649bf2e485f7e509fd0038", "patch": "@@ -0,0 +1,19 @@\n+error[E0596]: cannot borrow `value` as mutable, as it is not declared as mutable\n+  --> $DIR/mut_mutex_lock.rs:10:6\n+   |\n+LL |     let value = value_mutex.lock().unwrap();\n+   |         ----- help: consider changing this to be mutable: `mut value`\n+LL |     *value += 1;\n+   |      ^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `value` as mutable, as it is not declared as mutable\n+  --> $DIR/mut_mutex_lock.rs:16:6\n+   |\n+LL |     let value = value_rc.lock().unwrap();\n+   |         ----- help: consider changing this to be mutable: `mut value`\n+LL |     *value += 1;\n+   |      ^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}]}