{"sha": "d17bc9f0615b08cb708178a1eec93896457b9d42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxN2JjOWYwNjE1YjA4Y2I3MDgxNzhhMWVlYzkzODk2NDU3YjlkNDI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-08T23:53:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-08T23:53:50Z"}, "message": "Rollup merge of #68718 - Aaron1011:move-def-hir-span, r=petrochenkov\n\nMove `rustc_hir::def_id` to `rustc_span::def_id`\n\nThis will allow `HygieneData` to refer to `DefId` and `DefIndex`, which\nwill enable proper serialization of Span hygiene information.\n\nThis also reduces the number of things imported from `rustc_hir`, which\nmight make it easier to remove dependencies on it.", "tree": {"sha": "c69b848a1dd3ab663ddbfca30b2a439d5b7b757e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c69b848a1dd3ab663ddbfca30b2a439d5b7b757e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d17bc9f0615b08cb708178a1eec93896457b9d42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d17bc9f0615b08cb708178a1eec93896457b9d42", "html_url": "https://github.com/rust-lang/rust/commit/d17bc9f0615b08cb708178a1eec93896457b9d42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d17bc9f0615b08cb708178a1eec93896457b9d42/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07a34df18b437319a7ff510077bbab95cf7ec6bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/07a34df18b437319a7ff510077bbab95cf7ec6bc", "html_url": "https://github.com/rust-lang/rust/commit/07a34df18b437319a7ff510077bbab95cf7ec6bc"}, {"sha": "619051e4f080e3f3ccb94d7789bbef58282e64a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/619051e4f080e3f3ccb94d7789bbef58282e64a7", "html_url": "https://github.com/rust-lang/rust/commit/619051e4f080e3f3ccb94d7789bbef58282e64a7"}], "stats": {"total": 52, "additions": 27, "deletions": 25}, "files": [{"sha": "76e4b5f01b775cd4c099ccac8f6c7e6c938e9bd2", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=d17bc9f0615b08cb708178a1eec93896457b9d42", "patch": "@@ -249,6 +249,12 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n         self.hash_spans\n     }\n \n+    #[inline]\n+    fn hash_def_id(&mut self, def_id: DefId, hasher: &mut StableHasher) {\n+        let hcx = self;\n+        hcx.def_path_hash(def_id).hash_stable(hcx, hasher);\n+    }\n+\n     fn byte_pos_to_line_and_col(\n         &mut self,\n         byte: BytePos,"}, {"sha": "625d8a4670f22fce83f194d156f3913288fa5b62", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=d17bc9f0615b08cb708178a1eec93896457b9d42", "patch": "@@ -11,12 +11,6 @@ use smallvec::SmallVec;\n use std::mem;\n \n impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n-    #[inline]\n-    fn hash_def_id(&mut self, def_id: DefId, hasher: &mut StableHasher) {\n-        let hcx = self;\n-        hcx.def_path_hash(def_id).hash_stable(hcx, hasher);\n-    }\n-\n     #[inline]\n     fn hash_hir_id(&mut self, hir_id: hir::HirId, hasher: &mut StableHasher) {\n         let hcx = self;"}, {"sha": "e4edd34bd6e23724d54a777054ce1edd731e7174", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=d17bc9f0615b08cb708178a1eec93896457b9d42", "patch": "@@ -12,7 +12,7 @@\n extern crate rustc_data_structures;\n \n pub mod def;\n-pub mod def_id;\n+pub use rustc_span::def_id;\n mod hir;\n pub mod hir_id;\n pub mod intravisit;"}, {"sha": "e8407b537011bf64655ce230cca5c6161150749c", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=d17bc9f0615b08cb708178a1eec93896457b9d42", "patch": "@@ -1,14 +1,12 @@\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n-use crate::def_id::DefId;\n use crate::hir::{BodyId, Expr, ImplItemId, ItemId, Mod, TraitItemId, Ty, VisibilityKind};\n use crate::hir_id::HirId;\n \n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n /// instead of implementing everything in librustc.\n pub trait HashStableContext: syntax::HashStableContext + rustc_target::HashStableContext {\n-    fn hash_def_id(&mut self, _: DefId, hasher: &mut StableHasher);\n     fn hash_hir_id(&mut self, _: HirId, hasher: &mut StableHasher);\n     fn hash_body_id(&mut self, _: BodyId, hasher: &mut StableHasher);\n     fn hash_reference_to_item(&mut self, _: HirId, hasher: &mut StableHasher);\n@@ -24,12 +22,6 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for HirId {\n     }\n }\n \n-impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for DefId {\n-    fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_def_id(*self, hasher)\n-    }\n-}\n-\n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for BodyId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         hcx.hash_body_id(*self, hasher)"}, {"sha": "6cdfd0500ca844a0e19bc4f10919e03d92a85ec3", "filename": "src/librustc_span/def_id.rs", "status": "renamed", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=d17bc9f0615b08cb708178a1eec93896457b9d42", "patch": "@@ -1,3 +1,5 @@\n+use crate::HashStableContext;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::AtomicRef;\n use rustc_index::vec::Idx;\n use rustc_serialize::{Decoder, Encoder};\n@@ -18,15 +20,6 @@ pub enum CrateNum {\n     Index(CrateId),\n }\n \n-impl ::std::fmt::Debug for CrateNum {\n-    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n-        match self {\n-            CrateNum::Index(id) => write!(fmt, \"crate{}\", id.private),\n-            CrateNum::ReservedForIncrCompCache => write!(fmt, \"crate for decoding incr comp cache\"),\n-        }\n-    }\n-}\n-\n /// Item definitions in the currently-compiled crate would have the `CrateNum`\n /// `LOCAL_CRATE` in their `DefId`.\n pub const LOCAL_CRATE: CrateNum = CrateNum::Index(CrateId::from_u32_const(0));\n@@ -100,6 +93,15 @@ impl rustc_serialize::UseSpecializedDecodable for CrateNum {\n     }\n }\n \n+impl ::std::fmt::Debug for CrateNum {\n+    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {\n+        match self {\n+            CrateNum::Index(id) => write!(fmt, \"crate{}\", id.private),\n+            CrateNum::ReservedForIncrCompCache => write!(fmt, \"crate for decoding incr comp cache\"),\n+        }\n+    }\n+}\n+\n rustc_index::newtype_index! {\n     /// A DefIndex is an index into the hir-map for a crate, identifying a\n     /// particular definition. It should really be considered an interned\n@@ -207,3 +209,9 @@ impl fmt::Debug for LocalDefId {\n \n impl rustc_serialize::UseSpecializedEncodable for LocalDefId {}\n impl rustc_serialize::UseSpecializedDecodable for LocalDefId {}\n+\n+impl<CTX: HashStableContext> HashStable<CTX> for DefId {\n+    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n+        hcx.hash_def_id(*self, hasher)\n+    }\n+}", "previous_filename": "src/librustc_hir/def_id.rs"}, {"sha": "87342d6a301201998712e6863519445d426757e2", "filename": "src/librustc_span/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc_span%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17bc9f0615b08cb708178a1eec93896457b9d42/src%2Flibrustc_span%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Flib.rs?ref=d17bc9f0615b08cb708178a1eec93896457b9d42", "patch": "@@ -25,7 +25,8 @@ use edition::Edition;\n pub mod hygiene;\n use hygiene::Transparency;\n pub use hygiene::{DesugaringKind, ExpnData, ExpnId, ExpnKind, MacroKind, SyntaxContext};\n-\n+pub mod def_id;\n+use def_id::DefId;\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n \n@@ -1561,6 +1562,7 @@ fn lookup_line(lines: &[BytePos], pos: BytePos) -> isize {\n /// instead of implementing everything in librustc.\n pub trait HashStableContext {\n     fn hash_spans(&self) -> bool;\n+    fn hash_def_id(&mut self, _: DefId, hasher: &mut StableHasher);\n     fn byte_pos_to_line_and_col(\n         &mut self,\n         byte: BytePos,"}]}