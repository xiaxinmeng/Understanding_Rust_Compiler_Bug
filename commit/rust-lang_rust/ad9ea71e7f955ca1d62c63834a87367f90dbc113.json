{"sha": "ad9ea71e7f955ca1d62c63834a87367f90dbc113", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOWVhNzFlN2Y5NTVjYTFkNjJjNjM4MzRhODczNjdmOTBkYmMxMTM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-20T13:51:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T13:51:54Z"}, "message": "Rollup merge of #76877 - denisvasilik:intra-doc-links-alloc-vec-deque, r=jyn514\n\nMove to intra-doc links in collections/vec_deque.rs and collections/vec_deque/drain.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links", "tree": {"sha": "14cf6942286d85f97e91d7bd101f8f42030d8ec7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14cf6942286d85f97e91d7bd101f8f42030d8ec7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad9ea71e7f955ca1d62c63834a87367f90dbc113", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZ157CRBK7hj4Ov3rIwAAdHIIABxAh3LgWK50yA/PMt2fyIq0\nlKh47rPl4l+Hjb4SuAcJls1rydVVNowhH1uYPjxYTaSkRPgUqphorwQcdDzoBOhL\njqZnXOVMtWYxale8SdBs8/aYv+VlUDqkTArbQ39lFfy4s/NteUpSV5J84SUT+sDX\n7X42vk2qiJXdYDH41eZX/ORBxLWvRz2mdXCaVYJm4pTyp2p3vPaWgCA1RINyoIPx\n5vPJgoCAouMB7ycEV7Jdd0iU9y4YZ4S4pX2+/XCuw0TuoK2xmf523tiaGFkIez80\nj6pUtXygObNl4WwGLVh5UKK2SrhqJcMuRUaKKHQdXSQ2PcDwO9ycaY2pkUk1ClE=\n=lnow\n-----END PGP SIGNATURE-----\n", "payload": "tree 14cf6942286d85f97e91d7bd101f8f42030d8ec7\nparent 39412011a1d18686f7ae747df326e4fb687fac25\nparent 49c8fcb47e8476cc8b95b547e97329c143d9c5f1\nauthor Ralf Jung <post@ralfj.de> 1600609914 +0200\ncommitter GitHub <noreply@github.com> 1600609914 +0200\n\nRollup merge of #76877 - denisvasilik:intra-doc-links-alloc-vec-deque, r=jyn514\n\nMove to intra-doc links in collections/vec_deque.rs and collections/vec_deque/drain.rs\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad9ea71e7f955ca1d62c63834a87367f90dbc113", "html_url": "https://github.com/rust-lang/rust/commit/ad9ea71e7f955ca1d62c63834a87367f90dbc113", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad9ea71e7f955ca1d62c63834a87367f90dbc113/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39412011a1d18686f7ae747df326e4fb687fac25", "url": "https://api.github.com/repos/rust-lang/rust/commits/39412011a1d18686f7ae747df326e4fb687fac25", "html_url": "https://github.com/rust-lang/rust/commit/39412011a1d18686f7ae747df326e4fb687fac25"}, {"sha": "49c8fcb47e8476cc8b95b547e97329c143d9c5f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c8fcb47e8476cc8b95b547e97329c143d9c5f1", "html_url": "https://github.com/rust-lang/rust/commit/49c8fcb47e8476cc8b95b547e97329c143d9c5f1"}], "stats": {"total": 51, "additions": 28, "deletions": 23}, "files": [{"sha": "8e9acc42d9aba2775ef085b685041fa0b649a32d", "filename": "library/alloc/src/collections/vec_deque.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ad9ea71e7f955ca1d62c63834a87367f90dbc113/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9ea71e7f955ca1d62c63834a87367f90dbc113/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque.rs?ref=ad9ea71e7f955ca1d62c63834a87367f90dbc113", "patch": "@@ -48,11 +48,11 @@ const MAXIMUM_ZST_CAPACITY: usize = 1 << (core::mem::size_of::<usize>() * 8 - 1)\n /// so that its elements do not wrap, and returns a mutable slice to the\n /// now-contiguous element sequence.\n ///\n-/// [`push_back`]: #method.push_back\n-/// [`pop_front`]: #method.pop_front\n-/// [`extend`]: #method.extend\n-/// [`append`]: #method.append\n-/// [`make_contiguous`]: #method.make_contiguous\n+/// [`push_back`]: VecDeque::push_back\n+/// [`pop_front`]: VecDeque::pop_front\n+/// [`extend`]: VecDeque::extend\n+/// [`append`]: VecDeque::append\n+/// [`make_contiguous`]: VecDeque::make_contiguous\n #[cfg_attr(not(test), rustc_diagnostic_item = \"vecdeque_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct VecDeque<T> {\n@@ -640,7 +640,7 @@ impl<T> VecDeque<T> {\n     /// assert!(buf.capacity() >= 11);\n     /// ```\n     ///\n-    /// [`reserve`]: #method.reserve\n+    /// [`reserve`]: VecDeque::reserve\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn reserve_exact(&mut self, additional: usize) {\n         self.reserve(additional);\n@@ -987,8 +987,10 @@ impl<T> VecDeque<T> {\n     /// Returns a pair of slices which contain, in order, the contents of the\n     /// `VecDeque`.\n     ///\n-    /// If [`make_contiguous`](#method.make_contiguous) was previously called, all elements\n-    /// of the `VecDeque` will be in the first slice and the second slice will be empty.\n+    /// If [`make_contiguous`] was previously called, all elements of the\n+    /// `VecDeque` will be in the first slice and the second slice will be empty.\n+    ///\n+    /// [`make_contiguous`]: VecDeque::make_contiguous\n     ///\n     /// # Examples\n     ///\n@@ -1020,8 +1022,10 @@ impl<T> VecDeque<T> {\n     /// Returns a pair of slices which contain, in order, the contents of the\n     /// `VecDeque`.\n     ///\n-    /// If [`make_contiguous`](#method.make_contiguous) was previously called, all elements\n-    /// of the `VecDeque` will be in the first slice and the second slice will be empty.\n+    /// If [`make_contiguous`] was previously called, all elements of the\n+    /// `VecDeque` will be in the first slice and the second slice will be empty.\n+    ///\n+    /// [`make_contiguous`]: VecDeque::make_contiguous\n     ///\n     /// # Examples\n     ///\n@@ -2160,15 +2164,20 @@ impl<T> VecDeque<T> {\n         }\n     }\n \n-    /// Rearranges the internal storage of this deque so it is one contiguous slice, which is then returned.\n+    /// Rearranges the internal storage of this deque so it is one contiguous\n+    /// slice, which is then returned.\n     ///\n-    /// This method does not allocate and does not change the order of the inserted elements.\n-    /// As it returns a mutable slice, this can be used to sort or binary search a deque.\n+    /// This method does not allocate and does not change the order of the\n+    /// inserted elements. As it returns a mutable slice, this can be used to\n+    /// sort or binary search a deque.\n     ///\n-    /// Once the internal storage is contiguous, the [`as_slices`](#method.as_slices) and\n-    /// [`as_mut_slices`](#method.as_mut_slices) methods will return the entire contents of the\n+    /// Once the internal storage is contiguous, the [`as_slices`] and\n+    /// [`as_mut_slices`] methods will return the entire contents of the\n     /// `VecDeque` in a single slice.\n     ///\n+    /// [`as_slices`]: VecDeque::as_slices\n+    /// [`as_mut_slices`]: VecDeque::as_mut_slices\n+    ///\n     /// # Examples\n     ///\n     /// Sorting the content of a deque.\n@@ -2495,8 +2504,7 @@ fn count(tail: usize, head: usize, size: usize) -> usize {\n /// This `struct` is created by the [`iter`] method on [`VecDeque`]. See its\n /// documentation for more.\n ///\n-/// [`iter`]: struct.VecDeque.html#method.iter\n-/// [`VecDeque`]: struct.VecDeque.html\n+/// [`iter`]: VecDeque::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     ring: &'a [T],\n@@ -2650,8 +2658,7 @@ impl<T> FusedIterator for Iter<'_, T> {}\n /// This `struct` is created by the [`iter_mut`] method on [`VecDeque`]. See its\n /// documentation for more.\n ///\n-/// [`iter_mut`]: struct.VecDeque.html#method.iter_mut\n-/// [`VecDeque`]: struct.VecDeque.html\n+/// [`iter_mut`]: VecDeque::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     ring: &'a mut [T],\n@@ -2756,8 +2763,7 @@ impl<T> FusedIterator for IterMut<'_, T> {}\n /// This `struct` is created by the [`into_iter`] method on [`VecDeque`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n-/// [`into_iter`]: struct.VecDeque.html#method.into_iter\n-/// [`VecDeque`]: struct.VecDeque.html\n+/// [`into_iter`]: VecDeque::into_iter\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {"}, {"sha": "4ffb435d1e36670d3a2778eae55d94630cc454da", "filename": "library/alloc/src/collections/vec_deque/drain.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad9ea71e7f955ca1d62c63834a87367f90dbc113/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad9ea71e7f955ca1d62c63834a87367f90dbc113/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fdrain.rs?ref=ad9ea71e7f955ca1d62c63834a87367f90dbc113", "patch": "@@ -9,8 +9,7 @@ use super::{count, Iter, VecDeque};\n /// This `struct` is created by the [`drain`] method on [`VecDeque`]. See its\n /// documentation for more.\n ///\n-/// [`drain`]: struct.VecDeque.html#method.drain\n-/// [`VecDeque`]: struct.VecDeque.html\n+/// [`drain`]: VecDeque::drain\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n     pub(crate) after_tail: usize,"}]}