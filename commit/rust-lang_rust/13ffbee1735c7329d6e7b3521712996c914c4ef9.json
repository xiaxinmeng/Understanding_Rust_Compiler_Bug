{"sha": "13ffbee1735c7329d6e7b3521712996c914c4ef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZmZiZWUxNzM1YzczMjlkNmU3YjM1MjE3MTI5OTZjOTE0YzRlZjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:07:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:37:50Z"}, "message": "Add MaybeUninit::read_uninitialized\n\nAlso remove a no-longer accurate comments", "tree": {"sha": "5bf84bc746c7501d42cde353d8abb428a98e391a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bf84bc746c7501d42cde353d8abb428a98e391a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ffbee1735c7329d6e7b3521712996c914c4ef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ffbee1735c7329d6e7b3521712996c914c4ef9", "html_url": "https://github.com/rust-lang/rust/commit/13ffbee1735c7329d6e7b3521712996c914c4ef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ffbee1735c7329d6e7b3521712996c914c4ef9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c6d00574494499f63c1e460ef886768643e7db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c6d00574494499f63c1e460ef886768643e7db", "html_url": "https://github.com/rust-lang/rust/commit/e1c6d00574494499f63c1e460ef886768643e7db"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "3955839ac3625d1ed8d10db3ada85abaeeb754e5", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/13ffbee1735c7329d6e7b3521712996c914c4ef9/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ffbee1735c7329d6e7b3521712996c914c4ef9/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=13ffbee1735c7329d6e7b3521712996c914c4ef9", "patch": "@@ -1185,6 +1185,61 @@ impl<T> MaybeUninit<T> {\n         ManuallyDrop::into_inner(self.value)\n     }\n \n+    /// Reads the value from the `MaybeUninit` container. The resulting `T` is subject\n+    /// to the usual drop handling.\n+    ///\n+    /// # Unsafety\n+    ///\n+    /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n+    /// state. Calling this when the content is not yet fully initialized causes undefined\n+    /// behavior.\n+    ///\n+    /// Moreover, this leaves a copy of the same data behind in the `MaybeUninit`. When using\n+    /// multiple copies of the data (by calling `read_initialized` multiple times, or first\n+    /// calling `read_initialized` and then [`into_initialized`]), it is your responsibility\n+    /// to ensure that that data may indeed be duplicated.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Correct usage of this method:\n+    ///\n+    /// ```rust\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut x = MaybeUninit::<u32>::uninitialized();\n+    /// x.set(13);\n+    /// let x1 = unsafe { x.read_initialized() };\n+    /// // `u32` is `Copy`, so we may read multiple times.\n+    /// let x2 = unsafe { x.read_initialized() };\n+    ///\n+    /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninitialized();\n+    /// x.set(None);\n+    /// let x1 = unsafe { x.read_initialized() };\n+    /// // Duplicating a `None` value is okay, so we may read multiple times.\n+    /// let x2 = unsafe { x.read_initialized() };\n+    /// ```\n+    ///\n+    /// *Incorrect* usafe of this method:\n+    ///\n+    /// ```rust,no_run\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninitialized();\n+    /// x.set(Some(vec![0,1,2]));\n+    /// let x1 = unsafe { x.read_initialized() };\n+    /// let x2 = unsafe { x.read_initialized() };\n+    /// // We now created two copies of the same vector, leading to a double-free when\n+    /// // they both get dropped!\n+    /// ```\n+    #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n+    #[inline(always)]\n+    pub unsafe fn read_initialized(&self) -> T {\n+        intrinsics::panic_if_uninhabited::<T>();\n+        self.as_ptr().read()\n+    }\n+\n     /// Gets a reference to the contained value.\n     ///\n     /// # Unsafety"}]}