{"sha": "f7b4b88840d872909a67e5f9623281e3e2165fba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YjRiODg4NDBkODcyOTA5YTY3ZTVmOTYyMzI4MWUzZTIxNjVmYmE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-05T02:08:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-11-11T12:45:40Z"}, "message": "Always report patterns more complex than `mut IDENT` as errors", "tree": {"sha": "25fb38c94bba843e93b0c16fc978854fd2352e90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25fb38c94bba843e93b0c16fc978854fd2352e90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7b4b88840d872909a67e5f9623281e3e2165fba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7b4b88840d872909a67e5f9623281e3e2165fba", "html_url": "https://github.com/rust-lang/rust/commit/f7b4b88840d872909a67e5f9623281e3e2165fba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7b4b88840d872909a67e5f9623281e3e2165fba/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d", "html_url": "https://github.com/rust-lang/rust/commit/1055bdfb2a5ced99bb47c344c91af2f324ebbb6d"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "40adc6bcb122fb727542c02d9504f246d7593502", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f7b4b88840d872909a67e5f9623281e3e2165fba/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b4b88840d872909a67e5f9623281e3e2165fba/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=f7b4b88840d872909a67e5f9623281e3e2165fba", "patch": "@@ -67,12 +67,14 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn check_decl_no_pat<ReportFn: Fn(Span)>(&self, decl: &FnDecl, report_err: ReportFn) {\n+    fn check_decl_no_pat<ReportFn: Fn(Span, bool)>(&self, decl: &FnDecl, report_err: ReportFn) {\n         for arg in &decl.inputs {\n             match arg.pat.node {\n                 PatKind::Ident(BindingMode::ByValue(Mutability::Immutable), _, None) |\n                 PatKind::Wild => {}\n-                _ => report_err(arg.pat.span),\n+                PatKind::Ident(BindingMode::ByValue(Mutability::Mutable), _, None) =>\n+                    report_err(arg.pat.span, true),\n+                _ => report_err(arg.pat.span, false),\n             }\n         }\n     }\n@@ -149,7 +151,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_ty(&mut self, ty: &'a Ty) {\n         match ty.node {\n             TyKind::BareFn(ref bfty) => {\n-                self.check_decl_no_pat(&bfty.decl, |span| {\n+                self.check_decl_no_pat(&bfty.decl, |span, _| {\n                     struct_span_err!(self.session, span, E0561,\n                                      \"patterns aren't allowed in function pointer types\").emit();\n                 });\n@@ -253,12 +255,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     if let TraitItemKind::Method(ref sig, ref block) = trait_item.node {\n                         self.check_trait_fn_not_const(sig.constness);\n                         if block.is_none() {\n-                            self.check_decl_no_pat(&sig.decl, |span| {\n-                                self.session.buffer_lint(\n-                                    lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n-                                    trait_item.id, span,\n-                                    \"patterns aren't allowed in methods \\\n-                                     without bodies\");\n+                            self.check_decl_no_pat(&sig.decl, |span, mut_ident| {\n+                                if mut_ident {\n+                                    self.session.buffer_lint(\n+                                        lint::builtin::PATTERNS_IN_FNS_WITHOUT_BODY,\n+                                        trait_item.id, span,\n+                                        \"patterns aren't allowed in methods without bodies\");\n+                                } else {\n+                                    struct_span_err!(self.session, span, E0642,\n+                                        \"patterns aren't allowed in methods without bodies\").emit();\n+                                }\n                             });\n                         }\n                     }\n@@ -292,7 +298,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     fn visit_foreign_item(&mut self, fi: &'a ForeignItem) {\n         match fi.node {\n             ForeignItemKind::Fn(ref decl, _) => {\n-                self.check_decl_no_pat(decl, |span| {\n+                self.check_decl_no_pat(decl, |span, _| {\n                     struct_span_err!(self.session, span, E0130,\n                                      \"patterns aren't allowed in foreign function declarations\")\n                         .span_label(span, \"pattern not allowed in foreign function\").emit();"}, {"sha": "3597a6f18287e62e2e9d41640e2b918f8587b84e", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7b4b88840d872909a67e5f9623281e3e2165fba/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b4b88840d872909a67e5f9623281e3e2165fba/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=f7b4b88840d872909a67e5f9623281e3e2165fba", "patch": "@@ -264,4 +264,5 @@ register_diagnostics! {\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n     E0561, // patterns aren't allowed in function pointer types\n+    E0642, // patterns aren't allowed in methods without bodies\n }"}, {"sha": "4d2412c34a5faf46984fe06e6326ba2f68b4641d", "filename": "src/test/compile-fail/no-patterns-in-args-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7b4b88840d872909a67e5f9623281e3e2165fba/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b4b88840d872909a67e5f9623281e3e2165fba/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-2.rs?ref=f7b4b88840d872909a67e5f9623281e3e2165fba", "patch": "@@ -14,7 +14,6 @@ trait Tr {\n     fn f1(mut arg: u8); //~ ERROR patterns aren't allowed in methods without bodies\n                         //~^ WARN was previously accepted\n     fn f2(&arg: u8); //~ ERROR patterns aren't allowed in methods without bodies\n-                     //~^ WARN was previously accepted\n     fn g1(arg: u8); // OK\n     fn g2(_: u8); // OK\n     #[allow(anonymous_parameters)]"}, {"sha": "f85ce8f57ea716e174e9e62cfa31f32a5fcddeb2", "filename": "src/test/compile-fail/no-patterns-in-args-macro.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7b4b88840d872909a67e5f9623281e3e2165fba/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7b4b88840d872909a67e5f9623281e3e2165fba/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-patterns-in-args-macro.rs?ref=f7b4b88840d872909a67e5f9623281e3e2165fba", "patch": "@@ -30,8 +30,7 @@ mod bad_pat {\n     m!((bad, pat));\n     //~^ ERROR patterns aren't allowed in function pointer types\n     //~| ERROR patterns aren't allowed in foreign function declarations\n-    //~| WARN patterns aren't allowed in methods without bodies\n-    //~| WARN this was previously accepted\n+    //~| ERROR patterns aren't allowed in methods without bodies\n }\n \n fn main() {}"}]}