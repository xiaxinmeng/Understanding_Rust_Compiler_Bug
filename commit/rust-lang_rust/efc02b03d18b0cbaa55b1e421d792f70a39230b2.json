{"sha": "efc02b03d18b0cbaa55b1e421d792f70a39230b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYzAyYjAzZDE4YjBjYmFhNTViMWU0MjFkNzkyZjcwYTM5MjMwYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T16:21:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-27T16:21:09Z"}, "message": "Auto merge of #74831 - Manishearth:rollup-ugw4pt4, r=Manishearth\n\nRollup of 4 pull requests\n\nSuccessful merges:\n\n - #73858 (Make more primitive integer methods const)\n - #74487 (Forbid generic parameters in anon consts inside of type defaults)\n - #74803 (rustbuild: fix bad usage of UNIX exec() in rustc wrapper)\n - #74822 (More ensure stack to avoid segfault with increased `recursion_limit`)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "21b936024aa6b6c6b232b3f3448247be51d889f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21b936024aa6b6c6b232b3f3448247be51d889f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efc02b03d18b0cbaa55b1e421d792f70a39230b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efc02b03d18b0cbaa55b1e421d792f70a39230b2", "html_url": "https://github.com/rust-lang/rust/commit/efc02b03d18b0cbaa55b1e421d792f70a39230b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efc02b03d18b0cbaa55b1e421d792f70a39230b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a90e36c85336d1d4b209556c1a9733210bbff19", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a90e36c85336d1d4b209556c1a9733210bbff19", "html_url": "https://github.com/rust-lang/rust/commit/4a90e36c85336d1d4b209556c1a9733210bbff19"}, {"sha": "539ba96c1859111a200bdd6fb12c91bcee76f34b", "url": "https://api.github.com/repos/rust-lang/rust/commits/539ba96c1859111a200bdd6fb12c91bcee76f34b", "html_url": "https://github.com/rust-lang/rust/commit/539ba96c1859111a200bdd6fb12c91bcee76f34b"}], "stats": {"total": 303, "additions": 209, "deletions": 94}, "files": [{"sha": "af75faf698ecdac42adf963dbb199940bbe794ce", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -153,7 +153,7 @@ fn main() {\n             e => e,\n         };\n         println!(\"\\nDid not run successfully: {:?}\\n{:?}\\n-------------\", e, cmd);\n-        exec_cmd(&mut on_fail).expect(\"could not run the backup command\");\n+        status_code(&mut on_fail).expect(\"could not run the backup command\");\n         std::process::exit(1);\n     }\n \n@@ -182,17 +182,10 @@ fn main() {\n         }\n     }\n \n-    let code = exec_cmd(&mut cmd).unwrap_or_else(|_| panic!(\"\\n\\n failed to run {:?}\", cmd));\n+    let code = status_code(&mut cmd).unwrap_or_else(|_| panic!(\"\\n\\n failed to run {:?}\", cmd));\n     std::process::exit(code);\n }\n \n-#[cfg(unix)]\n-fn exec_cmd(cmd: &mut Command) -> io::Result<i32> {\n-    use std::os::unix::process::CommandExt;\n-    Err(cmd.exec())\n-}\n-\n-#[cfg(not(unix))]\n-fn exec_cmd(cmd: &mut Command) -> io::Result<i32> {\n+fn status_code(cmd: &mut Command) -> io::Result<i32> {\n     cmd.status().map(|status| status.code().unwrap())\n }"}, {"sha": "2603ecf428c7d36a5a98a92d99ef69fda64eba6b", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -1226,7 +1226,7 @@ impl char {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n         match *self {\n@@ -1262,7 +1262,7 @@ impl char {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n         match *self {\n@@ -1298,7 +1298,7 @@ impl char {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n         match *self {\n@@ -1337,7 +1337,7 @@ impl char {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n         match *self {\n@@ -1373,7 +1373,7 @@ impl char {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n         match *self {\n@@ -1412,7 +1412,7 @@ impl char {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n         match *self {\n@@ -1452,7 +1452,7 @@ impl char {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n         match *self {\n@@ -1488,7 +1488,7 @@ impl char {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n         match *self {\n@@ -1541,7 +1541,7 @@ impl char {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n         match *self {\n@@ -1579,7 +1579,7 @@ impl char {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n         match *self {"}, {"sha": "edc3fdceb4ff99778f468059e713a3b01dae8428", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -70,13 +70,11 @@\n #![feature(bound_cloned)]\n #![feature(cfg_target_has_atomic)]\n #![feature(concat_idents)]\n-#![feature(const_ascii_ctype_on_intrinsics)]\n #![feature(const_alloc_layout)]\n #![feature(const_discriminant)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]\n-#![feature(const_saturating_int_methods)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_int_pow)]\n #![feature(constctlz)]"}, {"sha": "048c9c5ddaaee7a2183367b7f8f2d2ad75df83ee", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -87,7 +87,7 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n \n                 /// Creates a non-zero if the given value is not zero.\n                 #[$stability]\n-                #[rustc_const_unstable(feature = \"const_nonzero_int_methods\", issue = \"53718\")]\n+                #[rustc_const_stable(feature = \"const_nonzero_int_methods\", since = \"1.47.0\")]\n                 #[inline]\n                 pub const fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n@@ -747,7 +747,7 @@ assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -791,7 +791,7 @@ assert_eq!((\", stringify!($SelfT), \"::MIN + 2).checked_sub(3), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -835,7 +835,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -993,7 +993,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_neg(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -1015,7 +1015,7 @@ assert_eq!(0x1\", stringify!($SelfT), \".checked_shl(129), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1039,7 +1039,7 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(128), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1064,7 +1064,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.checked_abs(), None);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn checked_abs(self) -> Option<Self> {\n                 if self.is_negative() {\n@@ -1134,7 +1134,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1160,7 +1160,7 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_sub(-1), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1188,7 +1188,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_neg(self) -> Self {\n                 intrinsics::saturating_sub(0, self)\n@@ -1214,7 +1214,7 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"saturating_neg\", since = \"1.45.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_abs(self) -> Self {\n                 if self.is_negative() {\n@@ -1241,7 +1241,7 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_mul(10), \", stringify!($Self\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2203,7 +2203,7 @@ assert_eq!((-10\", stringify!($SelfT), \").signum(), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_sign\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_int_sign\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn signum(self) -> Self {\n                 match self {\n@@ -2985,7 +2985,7 @@ Basic usage:\n assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add(3), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3027,7 +3027,7 @@ Basic usage:\n assert_eq!(0\", stringify!($SelfT), \".checked_sub(1), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3069,7 +3069,7 @@ Basic usage:\n assert_eq!(\", stringify!($SelfT), \"::MAX.checked_mul(2), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3222,7 +3222,7 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".checked_neg(), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn checked_neg(self) -> Option<Self> {\n                 let (a, b) = self.overflowing_neg();\n@@ -3243,7 +3243,7 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shl(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3266,7 +3266,7 @@ Basic usage:\n assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_checked_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_checked_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3334,7 +3334,7 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n                 intrinsics::saturating_add(self, rhs)\n@@ -3356,7 +3356,7 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[inline]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n                 intrinsics::saturating_sub(self, rhs)\n@@ -3378,7 +3378,7 @@ assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($Se\n \"::MAX);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\")]\n+            #[rustc_const_stable(feature = \"const_saturating_int_methods\", since = \"1.47.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -4672,7 +4672,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphabetic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphabetic(&self) -> bool {\n         matches!(*self, b'A'..=b'Z' | b'a'..=b'z')\n@@ -4705,7 +4705,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_uppercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_uppercase(&self) -> bool {\n         matches!(*self, b'A'..=b'Z')\n@@ -4738,7 +4738,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_lowercase());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_lowercase(&self) -> bool {\n         matches!(*self, b'a'..=b'z')\n@@ -4774,7 +4774,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_alphanumeric());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_alphanumeric(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'Z' | b'a'..=b'z')\n@@ -4807,7 +4807,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_digit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_digit(&self) -> bool {\n         matches!(*self, b'0'..=b'9')\n@@ -4843,7 +4843,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_hexdigit());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_hexdigit(&self) -> bool {\n         matches!(*self, b'0'..=b'9' | b'A'..=b'F' | b'a'..=b'f')\n@@ -4880,7 +4880,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_punctuation());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_punctuation(&self) -> bool {\n         matches!(*self, b'!'..=b'/' | b':'..=b'@' | b'['..=b'`' | b'{'..=b'~')\n@@ -4913,7 +4913,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_graphic());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_graphic(&self) -> bool {\n         matches!(*self, b'!'..=b'~')\n@@ -4963,7 +4963,7 @@ impl u8 {\n     /// assert!(!esc.is_ascii_whitespace());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_whitespace(&self) -> bool {\n         matches!(*self, b'\\t' | b'\\n' | b'\\x0C' | b'\\r' | b' ')\n@@ -4998,7 +4998,7 @@ impl u8 {\n     /// assert!(esc.is_ascii_control());\n     /// ```\n     #[stable(feature = \"ascii_ctype_on_intrinsics\", since = \"1.24.0\")]\n-    #[rustc_const_unstable(feature = \"const_ascii_ctype_on_intrinsics\", issue = \"68983\")]\n+    #[rustc_const_stable(feature = \"const_ascii_ctype_on_intrinsics\", since = \"1.47.0\")]\n     #[inline]\n     pub const fn is_ascii_control(&self) -> bool {\n         matches!(*self, b'\\0'..=b'\\x1F' | b'\\x7F')"}, {"sha": "81e29047dc5e24e14c9269a6b48154ef5e1cabca", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -442,7 +442,7 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n-            ResolutionError::ParamInTyOfConstArg(name) => {\n+            ResolutionError::ParamInTyOfConstParam(name) => {\n                 let mut err = struct_span_err!(\n                     self.session,\n                     span,\n@@ -455,6 +455,17 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n+            ResolutionError::ParamInAnonConstInTyDefault(name) => {\n+                let mut err = self.session.struct_span_err(\n+                    span,\n+                    \"constant values inside of type parameter defaults must not depend on generic parameters\",\n+                );\n+                err.span_label(\n+                    span,\n+                    format!(\"the anonymous constant must not depend on the parameter `{}`\", name),\n+                );\n+                err\n+            }\n             ResolutionError::SelfInTyParamDefault => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "bcd2c6c1f1c27cc3e29cede1605e9e44b9cb5eb0", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -570,7 +570,15 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n \n                     if let Some(ref ty) = default {\n                         self.ribs[TypeNS].push(default_ban_rib);\n-                        self.visit_ty(ty);\n+                        self.with_rib(ValueNS, ForwardTyParamBanRibKind, |this| {\n+                            // HACK: We use an empty `ForwardTyParamBanRibKind` here which\n+                            // is only used to forbid the use of const parameters inside of\n+                            // type defaults.\n+                            //\n+                            // While the rib name doesn't really fit here, it does allow us to use the same\n+                            // code for both const and type parameters.\n+                            this.visit_ty(ty);\n+                        });\n                         default_ban_rib = self.ribs[TypeNS].pop().unwrap();\n                     }\n \n@@ -1081,7 +1089,9 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n     fn with_constant_rib(&mut self, f: impl FnOnce(&mut Self)) {\n         debug!(\"with_constant_rib\");\n         self.with_rib(ValueNS, ConstantItemRibKind, |this| {\n-            this.with_label_rib(ConstantItemRibKind, f);\n+            this.with_rib(TypeNS, ConstantItemRibKind, |this| {\n+                this.with_label_rib(ConstantItemRibKind, f);\n+            })\n         });\n     }\n "}, {"sha": "234fcd789eee4932242b5e389356ce43f5a827b0", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 57, "deletions": 10, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -215,7 +215,9 @@ enum ResolutionError<'a> {\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n     /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n-    ParamInTyOfConstArg(Symbol),\n+    ParamInTyOfConstParam(Symbol),\n+    /// constant values inside of type parameter defaults must not depend on generic parameters.\n+    ParamInAnonConstInTyDefault(Symbol),\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n@@ -2514,7 +2516,7 @@ impl<'a> Resolver<'a> {\n                         }\n                         ConstParamTyRibKind => {\n                             if record_used {\n-                                self.report_error(span, ParamInTyOfConstArg(rib_ident.name));\n+                                self.report_error(span, ParamInTyOfConstParam(rib_ident.name));\n                             }\n                             return Res::Err;\n                         }\n@@ -2526,26 +2528,48 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             Res::Def(DefKind::TyParam, _) | Res::SelfTy(..) => {\n+                let mut in_ty_param_default = false;\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | ForwardTyParamBanRibKind\n-                        | ConstantItemRibKind => {\n+                        | MacroDefinition(..) => {\n                             // Nothing to do. Continue.\n                             continue;\n                         }\n+\n+                        // We only forbid constant items if we are inside of type defaults,\n+                        // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n+                        ForwardTyParamBanRibKind => {\n+                            in_ty_param_default = true;\n+                            continue;\n+                        }\n+                        ConstantItemRibKind => {\n+                            if in_ty_param_default {\n+                                if record_used {\n+                                    self.report_error(\n+                                        span,\n+                                        ResolutionError::ParamInAnonConstInTyDefault(\n+                                            rib_ident.name,\n+                                        ),\n+                                    );\n+                                }\n+                                return Res::Err;\n+                            } else {\n+                                continue;\n+                            }\n+                        }\n+\n                         // This was an attempt to use a type parameter outside its scope.\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n                         ConstParamTyRibKind => {\n                             if record_used {\n                                 self.report_error(\n                                     span,\n-                                    ResolutionError::ParamInTyOfConstArg(rib_ident.name),\n+                                    ResolutionError::ParamInTyOfConstParam(rib_ident.name),\n                                 );\n                             }\n                             return Res::Err;\n@@ -2572,22 +2596,45 @@ impl<'a> Resolver<'a> {\n                     // (spuriously) conflicting with the const param.\n                     ribs.next();\n                 }\n+\n+                let mut in_ty_param_default = false;\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n                         NormalRibKind\n                         | ClosureOrAsyncRibKind\n                         | AssocItemRibKind\n                         | ModuleRibKind(..)\n-                        | MacroDefinition(..)\n-                        | ForwardTyParamBanRibKind\n-                        | ConstantItemRibKind => continue,\n+                        | MacroDefinition(..) => continue,\n+\n+                        // We only forbid constant items if we are inside of type defaults,\n+                        // for example `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`\n+                        ForwardTyParamBanRibKind => {\n+                            in_ty_param_default = true;\n+                            continue;\n+                        }\n+                        ConstantItemRibKind => {\n+                            if in_ty_param_default {\n+                                if record_used {\n+                                    self.report_error(\n+                                        span,\n+                                        ResolutionError::ParamInAnonConstInTyDefault(\n+                                            rib_ident.name,\n+                                        ),\n+                                    );\n+                                }\n+                                return Res::Err;\n+                            } else {\n+                                continue;\n+                            }\n+                        }\n+\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n                         ConstParamTyRibKind => {\n                             if record_used {\n                                 self.report_error(\n                                     span,\n-                                    ResolutionError::ParamInTyOfConstArg(rib_ident.name),\n+                                    ResolutionError::ParamInTyOfConstParam(rib_ident.name),\n                                 );\n                             }\n                             return Res::Err;"}, {"sha": "432abee6d1cf910d71fa26d35c360e111e848515", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -7,6 +7,7 @@ use crate::autoderef::Autoderef;\n use crate::infer::InferCtxt;\n use crate::traits::normalize_projection_type;\n \n+use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder, Style};\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n@@ -1912,12 +1913,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 let parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n                 if !self.is_recursive_obligation(obligated_types, &data.parent_code) {\n-                    self.note_obligation_cause_code(\n-                        err,\n-                        &parent_predicate,\n-                        &data.parent_code,\n-                        obligated_types,\n-                    );\n+                    // #74711: avoid a stack overflow\n+                    ensure_sufficient_stack(|| {\n+                        self.note_obligation_cause_code(\n+                            err,\n+                            &parent_predicate,\n+                            &data.parent_code,\n+                            obligated_types,\n+                        )\n+                    });\n                 }\n             }\n             ObligationCauseCode::ImplDerivedObligation(ref data) => {\n@@ -1928,22 +1932,28 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     parent_trait_ref.skip_binder().self_ty()\n                 ));\n                 let parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n-                self.note_obligation_cause_code(\n-                    err,\n-                    &parent_predicate,\n-                    &data.parent_code,\n-                    obligated_types,\n-                );\n+                // #74711: avoid a stack overflow\n+                ensure_sufficient_stack(|| {\n+                    self.note_obligation_cause_code(\n+                        err,\n+                        &parent_predicate,\n+                        &data.parent_code,\n+                        obligated_types,\n+                    )\n+                });\n             }\n             ObligationCauseCode::DerivedObligation(ref data) => {\n                 let parent_trait_ref = self.resolve_vars_if_possible(&data.parent_trait_ref);\n                 let parent_predicate = parent_trait_ref.without_const().to_predicate(tcx);\n-                self.note_obligation_cause_code(\n-                    err,\n-                    &parent_predicate,\n-                    &data.parent_code,\n-                    obligated_types,\n-                );\n+                // #74711: avoid a stack overflow\n+                ensure_sufficient_stack(|| {\n+                    self.note_obligation_cause_code(\n+                        err,\n+                        &parent_predicate,\n+                        &data.parent_code,\n+                        obligated_types,\n+                    )\n+                });\n             }\n             ObligationCauseCode::CompareImplMethodObligation { .. } => {\n                 err.note(&format!("}, {"sha": "84bbea5b880573c72f919de7642164b0006dadfb", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -0,0 +1,11 @@\n+#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+\n+struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n+//~^ ERROR constant values inside of type parameter defaults\n+\n+// FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n+struct Bar<T = [u8; N], const N: usize>(T);\n+//~^ ERROR constant values inside of type parameter defaults\n+//~| ERROR type parameters with a default\n+\n+fn main() {}"}, {"sha": "571be91683b7ca4c43cbdd09230795b252a291b5", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.stderr?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -0,0 +1,31 @@\n+error: type parameters with a default must be trailing\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:12\n+   |\n+LL | struct Bar<T = [u8; N], const N: usize>(T);\n+   |            ^\n+   |\n+   = note: using type defaults and const parameters in the same parameter list is currently not permitted\n+\n+error: constant values inside of type parameter defaults must not depend on generic parameters\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:3:44\n+   |\n+LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n+   |                                            ^ the anonymous constant must not depend on the parameter `T`\n+\n+error: constant values inside of type parameter defaults must not depend on generic parameters\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:21\n+   |\n+LL | struct Bar<T = [u8; N], const N: usize>(T);\n+   |                     ^ the anonymous constant must not depend on the parameter `N`\n+\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+"}, {"sha": "ef2f7322f2718941fb27767fb5d3b4efa84b1aee", "filename": "src/test/ui/consts/ascii_ctype.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fascii_ctype.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_ascii_ctype_on_intrinsics)]\n-\n macro_rules! suite {\n     ( $( $fn:ident => [$a:ident, $A:ident, $nine:ident, $dot:ident, $space:ident]; )* ) => {\n         $("}, {"sha": "9b2e30961aae601efce00c830a0d5038bd0e239d", "filename": "src/test/ui/consts/const-int-arithmetic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-arithmetic.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -3,7 +3,6 @@\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n #![feature(const_overflowing_int_methods)]\n-#![feature(const_saturating_int_methods)]\n #![feature(const_wrapping_int_methods)]\n \n use std::{i8, i128};"}, {"sha": "7edbdd4cec5a549c603f806b3de7c53b8a4cfc74", "filename": "src/test/ui/consts/const-int-saturating-arith.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-saturating-arith.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(const_saturating_int_methods)]\n \n const INT_U32_NO: u32 = (42 as u32).saturating_add(2);\n const INT_U32: u32 = u32::MAX.saturating_add(1);"}, {"sha": "63c191d422716e9a903a2e3a37bdbc3eebaf5c5a", "filename": "src/test/ui/consts/const-int-sign-rpass.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-sign-rpass.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_int_sign)]\n-\n const NEGATIVE_A: bool = (-10i32).is_negative();\n const NEGATIVE_B: bool = 10i32.is_negative();\n const POSITIVE_A: bool = (-10i32).is_positive();"}, {"sha": "cf6f8c8d69a26b92ff4014eaf2812d1e7302ee84", "filename": "src/test/ui/consts/const-nonzero.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-nonzero.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_nonzero_int_methods)]\n-\n use std::num::NonZeroU8;\n \n const X: NonZeroU8 = unsafe { NonZeroU8::new_unchecked(5) };"}, {"sha": "dd89bc0f7a0ff856feba1e555509b6fe48b84127", "filename": "src/test/ui/generic/param-in-ct-in-ty-param-default.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.rs?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -0,0 +1,4 @@\n+struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n+//~^ ERROR constant values inside of type parameter defaults\n+\n+fn main() {}"}, {"sha": "ea867240269efdd3bf0de265687cc543d4eaf5d3", "filename": "src/test/ui/generic/param-in-ct-in-ty-param-default.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efc02b03d18b0cbaa55b1e421d792f70a39230b2/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric%2Fparam-in-ct-in-ty-param-default.stderr?ref=efc02b03d18b0cbaa55b1e421d792f70a39230b2", "patch": "@@ -0,0 +1,8 @@\n+error: constant values inside of type parameter defaults must not depend on generic parameters\n+  --> $DIR/param-in-ct-in-ty-param-default.rs:1:44\n+   |\n+LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n+   |                                            ^ the anonymous constant must not depend on the parameter `T`\n+\n+error: aborting due to previous error\n+"}]}