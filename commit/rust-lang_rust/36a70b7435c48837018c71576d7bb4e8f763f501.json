{"sha": "36a70b7435c48837018c71576d7bb4e8f763f501", "node_id": "C_kwDOAAsO6NoAKDM2YTcwYjc0MzVjNDg4MzcwMThjNzE1NzZkN2JiNGU4Zjc2M2Y1MDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T07:00:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T07:00:38Z"}, "message": "Auto merge of #13401 - lnicola:opt-tests, r=lnicola\n\nRun `analysis-stats` on CI, with `opt-level = 1`\n\nWe might want to run `analysis-stats` on PRs, and this makes it less unbearable.", "tree": {"sha": "808b6795eb5f151c60774b2d78c97e05ed9d0d15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/808b6795eb5f151c60774b2d78c97e05ed9d0d15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36a70b7435c48837018c71576d7bb4e8f763f501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36a70b7435c48837018c71576d7bb4e8f763f501", "html_url": "https://github.com/rust-lang/rust/commit/36a70b7435c48837018c71576d7bb4e8f763f501", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36a70b7435c48837018c71576d7bb4e8f763f501/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0ab61fb6c1b0fa2bdcd10cdba17b444941c073e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ab61fb6c1b0fa2bdcd10cdba17b444941c073e", "html_url": "https://github.com/rust-lang/rust/commit/a0ab61fb6c1b0fa2bdcd10cdba17b444941c073e"}, {"sha": "4adf09bc8a9592af0d9778f2b8618760966e3ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4adf09bc8a9592af0d9778f2b8618760966e3ba4", "html_url": "https://github.com/rust-lang/rust/commit/4adf09bc8a9592af0d9778f2b8618760966e3ba4"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "7eda61848b716955dd7f32a81b94ce33737e8085", "filename": ".github/workflows/ci.yaml", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/36a70b7435c48837018c71576d7bb4e8f763f501/.github%2Fworkflows%2Fci.yaml", "raw_url": "https://github.com/rust-lang/rust/raw/36a70b7435c48837018c71576d7bb4e8f763f501/.github%2Fworkflows%2Fci.yaml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yaml?ref=36a70b7435c48837018c71576d7bb4e8f763f501", "patch": "@@ -45,12 +45,29 @@ jobs:\n       - name: Cache Dependencies\n         uses: Swatinem/rust-cache@ce325b60658c1b38465c06cc965b79baf32c1e72\n \n-      - name: Compile\n+      - name: Bump opt-level\n+        if: matrix.os == 'ubuntu-latest'\n+        run: sed -i '/\\[profile.dev]/a opt-level=1' Cargo.toml\n+\n+      - name: Compile (tests)\n         run: cargo test --no-run --locked\n \n+      # It's faster to `test` before `build` \u00af\\_(\u30c4)_/\u00af\n+      - name: Compile (rust-analyzer)\n+        if: matrix.os == 'ubuntu-latest'\n+        run: cargo build --quiet\n+\n       - name: Test\n         run: cargo test -- --nocapture --quiet\n \n+      - name: Run analysis-stats on rust-analyzer\n+        if: matrix.os == 'ubuntu-latest'\n+        run: target/${{ matrix.target }}/debug/rust-analyzer analysis-stats .\n+\n+      - name: Run analysis-stats on rust std library\n+        if: matrix.os == 'ubuntu-latest'\n+        run: target/${{ matrix.target }}/debug/rust-analyzer analysis-stats --with-deps $(rustc --print sysroot)/lib/rustlib/src/rust/library/std\n+\n   # Weird targets to catch non-portable code\n   rust-cross:\n     if: github.repository == 'rust-lang/rust-analyzer'"}, {"sha": "4057a75e7c1e693d053e987ac39bb588ec02b9fa", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36a70b7435c48837018c71576d7bb4e8f763f501/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36a70b7435c48837018c71576d7bb4e8f763f501/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=36a70b7435c48837018c71576d7bb4e8f763f501", "patch": "@@ -89,7 +89,7 @@ pub mod ext {\n     }\n \n     pub fn ty_name(name: ast::Name) -> ast::Type {\n-        ty_path(ident_path(&format!(\"{name}\")))\n+        ty_path(ident_path(&name.to_string()))\n     }\n     pub fn ty_bool() -> ast::Type {\n         ty_path(ident_path(\"bool\"))"}]}