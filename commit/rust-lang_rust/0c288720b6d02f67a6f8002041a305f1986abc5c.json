{"sha": "0c288720b6d02f67a6f8002041a305f1986abc5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMjg4NzIwYjZkMDJmNjdhNmY4MDAyMDQxYTMwNWYxOTg2YWJjNWM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-16T01:14:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-16T01:14:29Z"}, "message": "rustc: Capture type parameters into for-each blocks. Add a test case.", "tree": {"sha": "02bf7928870af373db76c5256399e810012fe8d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02bf7928870af373db76c5256399e810012fe8d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c288720b6d02f67a6f8002041a305f1986abc5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c288720b6d02f67a6f8002041a305f1986abc5c", "html_url": "https://github.com/rust-lang/rust/commit/0c288720b6d02f67a6f8002041a305f1986abc5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c288720b6d02f67a6f8002041a305f1986abc5c/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8", "html_url": "https://github.com/rust-lang/rust/commit/e37d9fc2b6e74b3ab14a7531fe8ddc754f2f89b8"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "9181e52a50055ff3c4cc5af807cfceaee481e087", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0c288720b6d02f67a6f8002041a305f1986abc5c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c288720b6d02f67a6f8002041a305f1986abc5c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=0c288720b6d02f67a6f8002041a305f1986abc5c", "patch": "@@ -3298,8 +3298,9 @@ fn trans_for_each(@block_ctxt cx,\n     }\n \n     // Create an environment and populate it with the bindings.\n+    auto tydesc_count = _vec.len[ValueRef](cx.fcx.lltydescs);\n     auto llenvptrty = T_closure_ptr(cx.fcx.ccx.tn, T_ptr(T_nil()),\n-                                    val_ty(llbindingsptr), 0u);\n+                                    val_ty(llbindingsptr), tydesc_count);\n     auto llenvptr = alloca(cx, llvm.LLVMGetElementType(llenvptrty));\n \n     auto llbindingsptrptr = cx.build.GEP(llenvptr,\n@@ -3308,6 +3309,20 @@ fn trans_for_each(@block_ctxt cx,\n                                              C_int(2)));\n     cx.build.Store(llbindingsptr, llbindingsptrptr);\n \n+    // Copy in our type descriptors, in case the iterator body needs to refer\n+    // to them.\n+    auto lltydescsptr = cx.build.GEP(llenvptr,\n+                                     vec(C_int(0),\n+                                         C_int(abi.box_rc_field_body),\n+                                         C_int(3)));\n+    auto i = 0u;\n+    while (i < tydesc_count) {\n+        auto lltydescptr = cx.build.GEP(lltydescsptr,\n+                                        vec(C_int(0), C_int(i as int)));\n+        cx.build.Store(cx.fcx.lltydescs.(i), lltydescptr);\n+        i += 1u;\n+    }\n+\n     // Step 2: Declare foreach body function.\n \n     let str s = mangle_name_by_seq(cx.fcx.ccx, \"foreach\");\n@@ -3339,7 +3354,7 @@ fn trans_for_each(@block_ctxt cx,\n         vec(C_int(0), C_int(abi.box_rc_field_body), C_int(2)));\n     auto llremotebindingsptr = bcx.build.Load(llremotebindingsptrptr);\n \n-    auto i = 0u;\n+    i = 0u;\n     while (i < upvar_count) {\n         auto upvar_id = upvars.(i);\n         auto llupvarptrptr = bcx.build.GEP(llremotebindingsptr,\n@@ -3350,6 +3365,22 @@ fn trans_for_each(@block_ctxt cx,\n         i += 1u;\n     }\n \n+    // Populate the type parameters from the environment.\n+    auto llremotetydescsptr = bcx.build.GEP(llremoteenvptr,\n+                                            vec(C_int(0),\n+                                                C_int(abi.box_rc_field_body),\n+                                                C_int(3)));\n+\n+    i = 0u;\n+    while (i < tydesc_count) {\n+        auto llremotetydescptr = bcx.build.GEP(llremotetydescsptr,\n+                                               vec(C_int(0),\n+                                                   C_int(i as int)));\n+        auto llremotetydesc = bcx.build.Load(llremotetydescptr);\n+        fcx.lltydescs += vec(llremotetydesc);\n+        i += 1u;\n+    }\n+\n     // Treat the loop variable as an upvar as well. We copy it to an alloca\n     // as usual.\n     auto lllvar = llvm.LLVMGetParam(fcx.llfn, 3u);"}, {"sha": "74f69acaeafd4bd905fa7f00e9d3175bca854c90", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0c288720b6d02f67a6f8002041a305f1986abc5c/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c288720b6d02f67a6f8002041a305f1986abc5c/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=0c288720b6d02f67a6f8002041a305f1986abc5c", "patch": "@@ -0,0 +1,11 @@\n+use std;\n+import std._uint;\n+\n+fn create_index[T](vec[tup(T, uint)] index, fn(&T) -> uint hash_fn) {\n+    for each (uint i in _uint.range(0u, 256u)) {\n+        let vec[T] bucket = vec();\n+    }\n+}\n+\n+fn main() {}\n+"}]}