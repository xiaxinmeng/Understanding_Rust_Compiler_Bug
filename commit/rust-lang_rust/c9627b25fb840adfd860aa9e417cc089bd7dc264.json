{"sha": "c9627b25fb840adfd860aa9e417cc089bd7dc264", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5NjI3YjI1ZmI4NDBhZGZkODYwYWE5ZTQxN2NjMDg5YmQ3ZGMyNjQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-02T22:40:53Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-02T22:40:53Z"}, "message": "Use correct return type for syscall(SYS_futex).", "tree": {"sha": "6b4fabbf7c0f61456e967a960bd137360996ef69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4fabbf7c0f61456e967a960bd137360996ef69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9627b25fb840adfd860aa9e417cc089bd7dc264", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9627b25fb840adfd860aa9e417cc089bd7dc264", "html_url": "https://github.com/rust-lang/rust/commit/c9627b25fb840adfd860aa9e417cc089bd7dc264", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9627b25fb840adfd860aa9e417cc089bd7dc264/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81138825b370e112714d1f16e8f76835d57d8fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/81138825b370e112714d1f16e8f76835d57d8fdf", "html_url": "https://github.com/rust-lang/rust/commit/81138825b370e112714d1f16e8f76835d57d8fdf"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "17fd5f0eefb703787e8d43b2581e396f356d27a7", "filename": "src/shims/posix/linux/sync.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c9627b25fb840adfd860aa9e417cc089bd7dc264/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9627b25fb840adfd860aa9e417cc089bd7dc264/src%2Fshims%2Fposix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fsync.rs?ref=c9627b25fb840adfd860aa9e417cc089bd7dc264", "patch": "@@ -61,7 +61,7 @@ pub fn futex<'tcx>(\n                     None => {\n                         let einval = this.eval_libc(\"EINVAL\")?;\n                         this.set_last_error(einval)?;\n-                        this.write_scalar(Scalar::from_i32(-1), dest)?;\n+                        this.write_scalar(Scalar::from_machine_isize(-1, this), dest)?;\n                         return Ok(());\n                     }\n                 };\n@@ -81,7 +81,7 @@ pub fn futex<'tcx>(\n                 this.block_thread(thread);\n                 this.futex_wait(addr, thread);\n                 // Succesfully waking up from FUTEX_WAIT always returns zero.\n-                this.write_scalar(Scalar::from_i32(0), dest)?;\n+                this.write_scalar(Scalar::from_machine_isize(0, this), dest)?;\n                 // Register a timeout callback if a timeout was specified.\n                 // This callback will override the return value when the timeout triggers.\n                 if let Some(timeout_time) = timeout_time {\n@@ -93,7 +93,7 @@ pub fn futex<'tcx>(\n                             this.futex_remove_waiter(addr, thread);\n                             let etimedout = this.eval_libc(\"ETIMEDOUT\")?;\n                             this.set_last_error(etimedout)?;\n-                            this.write_scalar(Scalar::from_i32(-1), dest)?;\n+                            this.write_scalar(Scalar::from_machine_isize(-1, this), dest)?;\n                             Ok(())\n                         }),\n                     );\n@@ -103,7 +103,7 @@ pub fn futex<'tcx>(\n                 // right away without sleeping: -1 and errno set to EAGAIN.\n                 let eagain = this.eval_libc(\"EAGAIN\")?;\n                 this.set_last_error(eagain)?;\n-                this.write_scalar(Scalar::from_i32(-1), dest)?;\n+                this.write_scalar(Scalar::from_machine_isize(-1, this), dest)?;\n             }\n         }\n         // FUTEX_WAKE: (int *addr, int op = FUTEX_WAKE, int val)\n@@ -121,7 +121,7 @@ pub fn futex<'tcx>(\n                     break;\n                 }\n             }\n-            this.write_scalar(Scalar::from_i32(n), dest)?;\n+            this.write_scalar(Scalar::from_machine_isize(n, this), dest)?;\n         }\n         op => throw_unsup_format!(\"miri does not support SYS_futex operation {}\", op),\n     }"}]}