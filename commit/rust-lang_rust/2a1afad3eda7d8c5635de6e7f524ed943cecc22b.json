{"sha": "2a1afad3eda7d8c5635de6e7f524ed943cecc22b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMWFmYWQzZWRhN2Q4YzU2MzVkZTZlN2Y1MjRlZDk0M2NlY2MyMmI=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2019-01-21T18:11:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T08:46:27Z"}, "message": "avoid boxing", "tree": {"sha": "111c1599e22596094247bfe1277031748de0e3f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/111c1599e22596094247bfe1277031748de0e3f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a1afad3eda7d8c5635de6e7f524ed943cecc22b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1afad3eda7d8c5635de6e7f524ed943cecc22b", "html_url": "https://github.com/rust-lang/rust/commit/2a1afad3eda7d8c5635de6e7f524ed943cecc22b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a1afad3eda7d8c5635de6e7f524ed943cecc22b/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "277e0f1baa21b8f3e5b040b78ce2bd6beca6cd7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/277e0f1baa21b8f3e5b040b78ce2bd6beca6cd7c", "html_url": "https://github.com/rust-lang/rust/commit/277e0f1baa21b8f3e5b040b78ce2bd6beca6cd7c"}], "stats": {"total": 78, "additions": 44, "deletions": 34}, "files": [{"sha": "daac6c6f286946e91b1daa0fcda63baca10d69df", "filename": "crates/ra_vfs/src/io/mod.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2a1afad3eda7d8c5635de6e7f524ed943cecc22b/crates%2Fra_vfs%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1afad3eda7d8c5635de6e7f524ed943cecc22b/crates%2Fra_vfs%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio%2Fmod.rs?ref=2a1afad3eda7d8c5635de6e7f524ed943cecc22b", "patch": "@@ -9,26 +9,27 @@ use crossbeam_channel::{Receiver, Sender};\n use parking_lot::Mutex;\n use relative_path::RelativePathBuf;\n use thread_worker::WorkerHandle;\n-use walkdir::{DirEntry, WalkDir};\n+use walkdir::WalkDir;\n \n mod watcher;\n use watcher::Watcher;\n pub use watcher::WatcherChange;\n \n-use crate::VfsRoot;\n+use crate::{RootFilter, VfsRoot};\n \n pub(crate) enum Task {\n     AddRoot {\n         root: VfsRoot,\n         path: PathBuf,\n-        filter: Box<Fn(&DirEntry) -> bool + Send>,\n+        root_filter: Arc<RootFilter>,\n+        nested_roots: Vec<PathBuf>,\n     },\n     /// this variant should only be created by the watcher\n     HandleChange(WatcherChange),\n     LoadChange(WatcherChange),\n     Watch {\n         dir: PathBuf,\n-        filter: Box<Fn(&DirEntry) -> bool + Send>,\n+        root_filter: Arc<RootFilter>,\n     },\n }\n \n@@ -109,7 +110,7 @@ impl Worker {\n fn watch(\n     watcher: &Arc<Mutex<Option<Watcher>>>,\n     dir: &Path,\n-    filter_entry: impl Fn(&DirEntry) -> bool,\n+    filter_entry: &RootFilter,\n     emit_for_existing: bool,\n ) {\n     let mut watcher = watcher.lock();\n@@ -125,10 +126,19 @@ fn watch(\n \n fn handle_task(task: Task, watcher: &Arc<Mutex<Option<Watcher>>>) -> TaskResult {\n     match task {\n-        Task::AddRoot { root, path, filter } => {\n-            watch(watcher, &path, &*filter, false);\n+        Task::AddRoot {\n+            root,\n+            path,\n+            root_filter,\n+            nested_roots,\n+        } => {\n+            watch(watcher, &path, &*root_filter, false);\n             log::debug!(\"loading {} ...\", path.as_path().display());\n-            let files = load_root(path.as_path(), &*filter);\n+            let files = load_root(\n+                path.as_path(),\n+                root_filter.as_ref(),\n+                nested_roots.as_slice(),\n+            );\n             log::debug!(\"... loaded {}\", path.as_path().display());\n             TaskResult::AddRoot(AddRootResult { root, files })\n         }\n@@ -143,16 +153,27 @@ fn handle_task(task: Task, watcher: &Arc<Mutex<Option<Watcher>>>) -> TaskResult\n                 None => TaskResult::NoOp,\n             }\n         }\n-        Task::Watch { dir, filter } => {\n-            watch(watcher, &dir, &*filter, true);\n+        Task::Watch { dir, root_filter } => {\n+            watch(watcher, &dir, root_filter.as_ref(), true);\n             TaskResult::NoOp\n         }\n     }\n }\n \n-fn load_root(root: &Path, filter: &dyn Fn(&DirEntry) -> bool) -> Vec<(RelativePathBuf, String)> {\n+fn load_root(\n+    root: &Path,\n+    root_filter: &RootFilter,\n+    nested_roots: &[PathBuf],\n+) -> Vec<(RelativePathBuf, String)> {\n     let mut res = Vec::new();\n-    for entry in WalkDir::new(root).into_iter().filter_entry(filter) {\n+    for entry in WalkDir::new(root).into_iter().filter_entry(|entry| {\n+        if entry.file_type().is_dir() && nested_roots.iter().any(|it| it == entry.path()) {\n+            // do not load files of a nested root\n+            false\n+        } else {\n+            root_filter.can_contain(entry.path()).is_some()\n+        }\n+    }) {\n         let entry = match entry {\n             Ok(entry) => entry,\n             Err(e) => {"}, {"sha": "5e9bc8ff3f753e72cc0b0a45d0f636f1cd042a5c", "filename": "crates/ra_vfs/src/io/watcher.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a1afad3eda7d8c5635de6e7f524ed943cecc22b/crates%2Fra_vfs%2Fsrc%2Fio%2Fwatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1afad3eda7d8c5635de6e7f524ed943cecc22b/crates%2Fra_vfs%2Fsrc%2Fio%2Fwatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio%2Fwatcher.rs?ref=2a1afad3eda7d8c5635de6e7f524ed943cecc22b", "patch": "@@ -1,4 +1,4 @@\n-use crate::io;\n+use crate::{io, RootFilter};\n use crossbeam_channel::Sender;\n use drop_bomb::DropBomb;\n use notify::{DebouncedEvent, RecommendedWatcher, RecursiveMode, Watcher as NotifyWatcher};\n@@ -8,7 +8,7 @@ use std::{\n     thread,\n     time::Duration,\n };\n-use walkdir::{DirEntry, WalkDir};\n+use walkdir::WalkDir;\n \n #[derive(Debug)]\n pub enum WatcherChange {\n@@ -83,13 +83,11 @@ impl Watcher {\n         })\n     }\n \n-    pub fn watch_recursive(\n-        &mut self,\n-        dir: &Path,\n-        filter_entry: impl Fn(&DirEntry) -> bool,\n-        emit_for_contents: bool,\n-    ) {\n-        for res in WalkDir::new(dir).into_iter().filter_entry(filter_entry) {\n+    pub fn watch_recursive(&mut self, dir: &Path, filter: &RootFilter, emit_for_contents: bool) {\n+        for res in WalkDir::new(dir)\n+            .into_iter()\n+            .filter_entry(|entry| filter.can_contain(entry.path()).is_some())\n+        {\n             match res {\n                 Ok(entry) => {\n                     if entry.path().is_dir() {"}, {"sha": "1d0af6a098b23616e860dec663799c04706dd7ba", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2a1afad3eda7d8c5635de6e7f524ed943cecc22b/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1afad3eda7d8c5635de6e7f524ed943cecc22b/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=2a1afad3eda7d8c5635de6e7f524ed943cecc22b", "patch": "@@ -28,7 +28,6 @@ use crossbeam_channel::Receiver;\n use ra_arena::{impl_arena_id, Arena, RawId};\n use relative_path::RelativePathBuf;\n use rustc_hash::{FxHashMap, FxHashSet};\n-use walkdir::DirEntry;\n \n pub use crate::io::TaskResult as VfsTask;\n use io::{Task, TaskResult, WatcherChange, WatcherChangeData, Worker};\n@@ -128,23 +127,17 @@ impl Vfs {\n             let root = res.roots.alloc(root_filter.clone());\n             res.root2files.insert(root, Default::default());\n \n-            let nested = roots[..i]\n+            let nested_roots = roots[..i]\n                 .iter()\n                 .filter(|it| it.starts_with(path))\n                 .map(|it| it.clone())\n                 .collect::<Vec<_>>();\n \n-            let filter = move |entry: &DirEntry| {\n-                if entry.file_type().is_dir() && nested.iter().any(|it| it == entry.path()) {\n-                    false\n-                } else {\n-                    root_filter.can_contain(entry.path()).is_some()\n-                }\n-            };\n             let task = io::Task::AddRoot {\n                 root,\n                 path: path.clone(),\n-                filter: Box::new(filter),\n+                root_filter,\n+                nested_roots,\n             };\n             res.worker.sender().send(task).unwrap();\n         }\n@@ -232,13 +225,11 @@ impl Vfs {\n                 WatcherChange::Create(path) if path.is_dir() => {\n                     if let Some((root, _path, _file)) = self.find_root(&path) {\n                         let root_filter = self.roots[root].clone();\n-                        let filter =\n-                            move |entry: &DirEntry| root_filter.can_contain(entry.path()).is_some();\n                         self.worker\n                             .sender()\n                             .send(Task::Watch {\n                                 dir: path.to_path_buf(),\n-                                filter: Box::new(filter),\n+                                root_filter,\n                             })\n                             .unwrap()\n                     }"}]}