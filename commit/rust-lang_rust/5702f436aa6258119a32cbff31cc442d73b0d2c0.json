{"sha": "5702f436aa6258119a32cbff31cc442d73b0d2c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MDJmNDM2YWE2MjU4MTE5YTMyY2JmZjMxY2M0NDJkNzNiMGQyYzA=", "commit": {"author": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-03-12T18:32:20Z"}, "committer": {"name": "Djzin", "email": "djzin@users.noreply.github.com", "date": "2017-03-12T18:39:02Z"}, "message": "a new approach; ditch xor cuteness and maximize cache locality", "tree": {"sha": "144abbb14dcbd59a41beb312e74c4343c9d2b040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/144abbb14dcbd59a41beb312e74c4343c9d2b040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5702f436aa6258119a32cbff31cc442d73b0d2c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5702f436aa6258119a32cbff31cc442d73b0d2c0", "html_url": "https://github.com/rust-lang/rust/commit/5702f436aa6258119a32cbff31cc442d73b0d2c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5702f436aa6258119a32cbff31cc442d73b0d2c0/comments", "author": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djzin", "id": 22416015, "node_id": "MDQ6VXNlcjIyNDE2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/22416015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djzin", "html_url": "https://github.com/djzin", "followers_url": "https://api.github.com/users/djzin/followers", "following_url": "https://api.github.com/users/djzin/following{/other_user}", "gists_url": "https://api.github.com/users/djzin/gists{/gist_id}", "starred_url": "https://api.github.com/users/djzin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djzin/subscriptions", "organizations_url": "https://api.github.com/users/djzin/orgs", "repos_url": "https://api.github.com/users/djzin/repos", "events_url": "https://api.github.com/users/djzin/events{/privacy}", "received_events_url": "https://api.github.com/users/djzin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85049e508ba6b1502e4d074d051a188c398fabc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/85049e508ba6b1502e4d074d051a188c398fabc6", "html_url": "https://github.com/rust-lang/rust/commit/85049e508ba6b1502e4d074d051a188c398fabc6"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "e1b9991ccfdf5f76d9753ce33737699f4b86a78e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5702f436aa6258119a32cbff31cc442d73b0d2c0/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5702f436aa6258119a32cbff31cc442d73b0d2c0/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=5702f436aa6258119a32cbff31cc442d73b0d2c0", "patch": "@@ -447,17 +447,29 @@ pub unsafe fn uninitialized<T>() -> T {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n     unsafe {\n+        // Give ourselves some scratch space to work with\n+        let mut t: [u8; 16] = mem::uninitialized();\n+\n         let x = x as *mut T as *mut u8;\n         let y = y as *mut T as *mut u8;\n+        let t = &mut t as *mut _ as *mut u8;\n \n         // can't use a for loop as the `range` impl calls `mem::swap` recursively\n+        let len = size_of::<T>() as isize;\n         let mut i = 0;\n-        while i < size_of::<T>() as isize {\n-            // use an xor-swap as x & y are guaranteed to never alias\n-            *x.offset(i) ^= *y.offset(i);\n-            *y.offset(i) ^= *x.offset(i);\n-            *x.offset(i) ^= *y.offset(i);\n-            i += 1;\n+        while i + 16 <= len {\n+            // Perform the swap 16 bytes at a time, `&mut` pointers never alias\n+            ptr::copy_nonoverlapping(x.offset(i), t, 16);\n+            ptr::copy_nonoverlapping(y.offset(i), x.offset(i), 16);\n+            ptr::copy_nonoverlapping(t, y.offset(i), 16);\n+            i += 16;\n+        }\n+        if i < len {\n+            // Swap any remaining bytes\n+            let rem = (len - i) as usize;\n+            ptr::copy_nonoverlapping(x.offset(i), t, rem);\n+            ptr::copy_nonoverlapping(y.offset(i), x.offset(i), rem);\n+            ptr::copy_nonoverlapping(t, y.offset(i), rem);\n         }\n     }\n }"}]}