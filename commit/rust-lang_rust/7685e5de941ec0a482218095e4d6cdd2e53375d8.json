{"sha": "7685e5de941ec0a482218095e4d6cdd2e53375d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ODVlNWRlOTQxZWMwYTQ4MjIxODA5NWU0ZDZjZGQyZTUzMzc1ZDg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-07T05:06:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T23:42:47Z"}, "message": "rt: Refactor the rust_kernel interface a bit", "tree": {"sha": "a12b6b1b82c2a068a2ae3264b17c3a0fb28163cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a12b6b1b82c2a068a2ae3264b17c3a0fb28163cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7685e5de941ec0a482218095e4d6cdd2e53375d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7685e5de941ec0a482218095e4d6cdd2e53375d8", "html_url": "https://github.com/rust-lang/rust/commit/7685e5de941ec0a482218095e4d6cdd2e53375d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7685e5de941ec0a482218095e4d6cdd2e53375d8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad80823a6ce301e5133e1ba9aff1560f0a9c2886", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad80823a6ce301e5133e1ba9aff1560f0a9c2886", "html_url": "https://github.com/rust-lang/rust/commit/ad80823a6ce301e5133e1ba9aff1560f0a9c2886"}], "stats": {"total": 62, "additions": 36, "deletions": 26}, "files": [{"sha": "121f3d4bcfc8bbed150d115a7f18ac1ac8419773", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7685e5de941ec0a482218095e4d6cdd2e53375d8/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7685e5de941ec0a482218095e4d6cdd2e53375d8/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=7685e5de941ec0a482218095e4d6cdd2e53375d8", "patch": "@@ -78,8 +78,9 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     check_claims = env->check_claims;\n \n     rust_srv *srv = new rust_srv(env);\n-    rust_kernel *kernel = new rust_kernel(srv, env->num_sched_threads);\n-    rust_scheduler *sched = kernel->get_default_scheduler();\n+    rust_kernel *kernel = new rust_kernel(srv);\n+    rust_sched_id sched_id = kernel->create_scheduler(env->num_sched_threads);\n+    rust_scheduler *sched = kernel->get_scheduler_by_id(sched_id);\n     rust_task_id root_id = sched->create_task(NULL, \"main\", MAIN_STACK_SIZE);\n     rust_task *root_task = kernel->get_task_by_id(root_id);\n     I(kernel, root_task != NULL);\n@@ -98,7 +99,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     root_task->deref();\n     root_task = NULL;\n \n-    int ret = kernel->start_schedulers();\n+    int ret = kernel->wait_for_schedulers();\n     delete args;\n     delete kernel;\n     delete srv;"}, {"sha": "3b9a60a3064e111c5e0fc36418664e7fa1f83045", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7685e5de941ec0a482218095e4d6cdd2e53375d8/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7685e5de941ec0a482218095e4d6cdd2e53375d8/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=7685e5de941ec0a482218095e4d6cdd2e53375d8", "patch": "@@ -7,18 +7,16 @@\n #define KLOG_ERR_(field, ...)                   \\\n     KLOG_LVL(this, field, log_err, __VA_ARGS__)\n \n-rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n+rust_kernel::rust_kernel(rust_srv *srv) :\n     _region(srv, true),\n     _log(srv, NULL),\n     srv(srv),\n     live_tasks(0),\n     max_task_id(0),\n     rval(0),\n+    live_schedulers(0),\n     env(srv->env)\n {\n-    sched = new (this, \"rust_scheduler\")\n-        rust_scheduler(this, srv, num_threads, 0);\n-    live_schedulers = 1;\n }\n \n void\n@@ -56,27 +54,22 @@ void rust_kernel::free(void *mem) {\n     _region.free(mem);\n }\n \n-int rust_kernel::start_schedulers()\n-{\n-    I(this, !sched_lock.lock_held_by_current_thread());\n-    sched->start_task_threads();\n-    {\n-        scoped_lock with(sched_lock);\n-        // Schedulers could possibly have already exited\n-        if (live_schedulers != 0) {\n-            sched_lock.wait();\n-        }\n-        return rval;\n-    }\n+rust_sched_id\n+rust_kernel::create_scheduler(size_t num_threads) {\n+    I(this, live_schedulers == 0);\n+    sched = new (this, \"rust_scheduler\")\n+        rust_scheduler(this, srv, num_threads, 0);\n+    live_schedulers = 1;\n+    return 0;\n }\n \n rust_scheduler *\n-rust_kernel::get_default_scheduler() {\n+rust_kernel::get_scheduler_by_id(rust_sched_id id) {\n     return sched;\n }\n \n void\n-rust_kernel::release_scheduler() {\n+rust_kernel::release_scheduler_id(rust_sched_id id) {\n     I(this, !sched_lock.lock_held_by_current_thread());\n     scoped_lock with(sched_lock);\n     delete sched;\n@@ -87,6 +80,21 @@ rust_kernel::release_scheduler() {\n     }\n }\n \n+int\n+rust_kernel::wait_for_schedulers()\n+{\n+    I(this, !sched_lock.lock_held_by_current_thread());\n+    sched->start_task_threads();\n+    {\n+        scoped_lock with(sched_lock);\n+        // Schedulers could possibly have already exited\n+        if (live_schedulers != 0) {\n+            sched_lock.wait();\n+        }\n+        return rval;\n+    }\n+}\n+\n void\n rust_kernel::fail() {\n     // FIXME: On windows we're getting \"Application has requested the"}, {"sha": "34797120ac560405a57c1ad543931523d774da10", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7685e5de941ec0a482218095e4d6cdd2e53375d8/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/7685e5de941ec0a482218095e4d6cdd2e53375d8/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=7685e5de941ec0a482218095e4d6cdd2e53375d8", "patch": "@@ -46,7 +46,7 @@ class rust_kernel {\n \n     struct rust_env *env;\n \n-    rust_kernel(rust_srv *srv, size_t num_threads);\n+    rust_kernel(rust_srv *srv);\n \n     void log(uint32_t level, char const *fmt, ...);\n     void fatal(char const *fmt, ...);\n@@ -57,10 +57,11 @@ class rust_kernel {\n \n     void fail();\n \n-    int start_schedulers();\n-    rust_scheduler* get_default_scheduler();\n+    rust_sched_id create_scheduler(size_t num_threads);\n+    rust_scheduler* get_scheduler_by_id(rust_sched_id id);\n     // Called by a scheduler to indicate that it is terminating\n-    void release_scheduler();\n+    void release_scheduler_id(rust_sched_id id);\n+    int wait_for_schedulers();\n \n #ifdef __WIN32__\n     void win32_require(LPCTSTR fn, BOOL ok);"}, {"sha": "e2389906d86cdde080ab5219daba0f66c01dbc99", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7685e5de941ec0a482218095e4d6cdd2e53375d8/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7685e5de941ec0a482218095e4d6cdd2e53375d8/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=7685e5de941ec0a482218095e4d6cdd2e53375d8", "patch": "@@ -115,6 +115,6 @@ rust_scheduler::release_task_thread() {\n \tnew_live_threads = --live_threads;\n     }\n     if (new_live_threads == 0) {\n-\tkernel->release_scheduler();\n+\tkernel->release_scheduler_id(id);\n     }\n }"}]}