{"sha": "ec58f40463e3c12208376c89459975974633382c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNThmNDA0NjNlM2MxMjIwODM3NmM4OTQ1OTk3NTk3NDYzMzM4MmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-07T17:20:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-07T19:02:43Z"}, "message": "std: Add impl of FnOnce to AssertRecoverSafe\n\nThis was originally intended, but forgot to land by accident!\n\ncc #27719", "tree": {"sha": "88f82c1cc80ac25352ea61d904092d3d3614614c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88f82c1cc80ac25352ea61d904092d3d3614614c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec58f40463e3c12208376c89459975974633382c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec58f40463e3c12208376c89459975974633382c", "html_url": "https://github.com/rust-lang/rust/commit/ec58f40463e3c12208376c89459975974633382c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec58f40463e3c12208376c89459975974633382c/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72d588a62044b9fae0e5baaba21aa9166b6db9c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d588a62044b9fae0e5baaba21aa9166b6db9c5", "html_url": "https://github.com/rust-lang/rust/commit/72d588a62044b9fae0e5baaba21aa9166b6db9c5"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "e97b015283bcbc9c5831d40d93a5f92a8bc47de4", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec58f40463e3c12208376c89459975974633382c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec58f40463e3c12208376c89459975974633382c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ec58f40463e3c12208376c89459975974633382c", "patch": "@@ -230,6 +230,7 @@\n #![feature(float_extras)]\n #![feature(float_from_str_radix)]\n #![feature(fnbox)]\n+#![feature(fn_traits)]\n #![feature(heap_api)]\n #![feature(hashmap_hasher)]\n #![feature(inclusive_range)]"}, {"sha": "5c2e36623cbed160badc10f127a70c3e76a213dd", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ec58f40463e3c12208376c89459975974633382c/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec58f40463e3c12208376c89459975974633382c/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=ec58f40463e3c12208376c89459975974633382c", "patch": "@@ -129,6 +129,9 @@ pub trait RefRecoverSafe {}\n ///\n /// # Examples\n ///\n+/// One way to use `AssertRecoverSafe` is to assert that the entire closure\n+/// itself is recover safe, bypassing all checks for all variables:\n+///\n /// ```\n /// #![feature(recover, std_panic)]\n ///\n@@ -144,10 +147,33 @@ pub trait RefRecoverSafe {}\n /// // });\n ///\n /// // This, however, will compile due to the `AssertRecoverSafe` wrapper\n+/// let result = panic::recover(AssertRecoverSafe::new(|| {\n+///     variable += 3;\n+/// }));\n+/// // ...\n+/// ```\n+///\n+/// Wrapping the entire closure amounts to a blanket assertion that all captured\n+/// variables are recover safe. This has the downside that if new captures are\n+/// added in the future, they will also be considered recover safe. Therefore,\n+/// you may prefer to just wrap individual captures, as shown below. This is\n+/// more annotation, but it ensures that if a new capture is added which is not\n+/// recover safe, you will get a compilation error at that time, which will\n+/// allow you to consider whether that new capture in fact represent a bug or\n+/// not.\n+///\n+/// ```\n+/// #![feature(recover, std_panic)]\n+///\n+/// use std::panic::{self, AssertRecoverSafe};\n+///\n+/// let mut variable = 4;\n+/// let other_capture = 3;\n+///\n /// let result = {\n ///     let mut wrapper = AssertRecoverSafe::new(&mut variable);\n ///     panic::recover(move || {\n-///         **wrapper += 3;\n+///         **wrapper += other_capture;\n ///     })\n /// };\n /// // ...\n@@ -215,6 +241,14 @@ impl<T> DerefMut for AssertRecoverSafe<T> {\n     }\n }\n \n+impl<R, F: FnOnce() -> R> FnOnce<()> for AssertRecoverSafe<F> {\n+    type Output = R;\n+\n+    extern \"rust-call\" fn call_once(self, _args: ()) -> R {\n+        (self.0)()\n+    }\n+}\n+\n /// Invokes a closure, capturing the cause of panic if one occurs.\n ///\n /// This function will return `Ok` with the closure's result if the closure"}]}