{"sha": "43a1777b89cf6791f9e20878b4e5e3ae907867a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYTE3NzdiODljZjY3OTFmOWUyMDg3OGI0ZTVlM2FlOTA3ODY3YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-09T18:43:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-09T18:43:28Z"}, "message": "Auto merge of #5564 - MrAwesome:master, r=flip1995\n\nAllow `use super::*;` glob imports\n\nchangelog: Allow super::* glob imports\n\nfixes #5554\nfixes #5569\n\nA first pass at #5554 - this allows all `use super::*` to pass, which may or may not be desirable. The original issue was around allowing test modules to import their entire parent modules - I'm happy to modify this to do that instead, may just need some guidance on how to implement that (I played around a bit with #[cfg(test)] but from what I can gather, clippy itself isn't in test mode when running, even if the code in question is being checked for the test target).", "tree": {"sha": "4bc49392faaa2f5b2ae8a236ff28a0b5637a0869", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc49392faaa2f5b2ae8a236ff28a0b5637a0869"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43a1777b89cf6791f9e20878b4e5e3ae907867a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43a1777b89cf6791f9e20878b4e5e3ae907867a5", "html_url": "https://github.com/rust-lang/rust/commit/43a1777b89cf6791f9e20878b4e5e3ae907867a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43a1777b89cf6791f9e20878b4e5e3ae907867a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43d9cdc7b3200489bc53348931a19a78f9751326", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d9cdc7b3200489bc53348931a19a78f9751326", "html_url": "https://github.com/rust-lang/rust/commit/43d9cdc7b3200489bc53348931a19a78f9751326"}, {"sha": "b69200b8468434bc3f5b9ef8468733e5d40f4e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/b69200b8468434bc3f5b9ef8468733e5d40f4e01", "html_url": "https://github.com/rust-lang/rust/commit/b69200b8468434bc3f5b9ef8468733e5d40f4e01"}], "stats": {"total": 259, "additions": 245, "deletions": 14}, "files": [{"sha": "4b67c84e38edc08311295a0508e28974738f7a9b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/43a1777b89cf6791f9e20878b4e5e3ae907867a5/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a1777b89cf6791f9e20878b4e5e3ae907867a5/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=43a1777b89cf6791f9e20878b4e5e3ae907867a5", "patch": "@@ -1058,7 +1058,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let max_struct_bools = conf.max_struct_bools;\n     store.register_early_pass(move || box excessive_bools::ExcessiveBools::new(max_struct_bools, max_fn_params_bools));\n     store.register_early_pass(|| box option_env_unwrap::OptionEnvUnwrap);\n-    store.register_late_pass(|| box wildcard_imports::WildcardImports);\n+    let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n+    store.register_late_pass(move || box wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports));\n     store.register_early_pass(|| box macro_use::MacroUseImports);\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());"}, {"sha": "57b9eafd14dbd4a8760998f0a1662a486765b2b7", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43a1777b89cf6791f9e20878b4e5e3ae907867a5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a1777b89cf6791f9e20878b4e5e3ae907867a5/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=43a1777b89cf6791f9e20878b4e5e3ae907867a5", "patch": "@@ -158,6 +158,8 @@ define_Conf! {\n     (max_struct_bools, \"max_struct_bools\": u64, 3),\n     /// Lint: FN_PARAMS_EXCESSIVE_BOOLS. The maximum number of bools function parameters can have\n     (max_fn_params_bools, \"max_fn_params_bools\": u64, 3),\n+    /// Lint: WILDCARD_IMPORTS. Whether to allow certain wildcard imports (prelude, super in tests).\n+    (warn_on_all_wildcard_imports, \"warn_on_all_wildcard_imports\": bool, false),\n }\n \n impl Default for Conf {"}, {"sha": "32d9a45c37d78fea94190d3273cbf3844cab6b73", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 63, "deletions": 11, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/43a1777b89cf6791f9e20878b4e5e3ae907867a5/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a1777b89cf6791f9e20878b4e5e3ae907867a5/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=43a1777b89cf6791f9e20878b4e5e3ae907867a5", "patch": "@@ -3,10 +3,10 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     def::{DefKind, Res},\n-    Item, ItemKind, UseKind,\n+    Item, ItemKind, PathSegment, UseKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::BytePos;\n \n declare_clippy_lint! {\n@@ -43,9 +43,14 @@ declare_clippy_lint! {\n     ///\n     /// This can lead to confusing error messages at best and to unexpected behavior at worst.\n     ///\n-    /// Note that this will not warn about wildcard imports from modules named `prelude`; many\n-    /// crates (including the standard library) provide modules named \"prelude\" specifically\n-    /// designed for wildcard import.\n+    /// **Exceptions:**\n+    ///\n+    /// Wildcard imports are allowed from modules named `prelude`. Many crates (including the standard library)\n+    /// provide modules named \"prelude\" specifically designed for wildcard import.\n+    ///\n+    /// `use super::*` is allowed in test modules. This is defined as any module with \"test\" in the name.\n+    ///\n+    /// These exceptions can be disabled using the `warn-on-all-wildcard-imports` configuration flag.\n     ///\n     /// **Known problems:** If macros are imported through the wildcard, this macro is not included\n     /// by the suggestion and has to be added by hand.\n@@ -73,18 +78,34 @@ declare_clippy_lint! {\n     \"lint `use _::*` statements\"\n }\n \n-declare_lint_pass!(WildcardImports => [ENUM_GLOB_USE, WILDCARD_IMPORTS]);\n+#[derive(Default)]\n+pub struct WildcardImports {\n+    warn_on_all: bool,\n+    test_modules_deep: u32,\n+}\n+\n+impl WildcardImports {\n+    pub fn new(warn_on_all: bool) -> Self {\n+        Self {\n+            warn_on_all,\n+            test_modules_deep: 0,\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(WildcardImports => [ENUM_GLOB_USE, WILDCARD_IMPORTS]);\n \n impl LateLintPass<'_, '_> for WildcardImports {\n     fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &Item<'_>) {\n+        if is_test_module_or_function(item) {\n+            self.test_modules_deep = self.test_modules_deep.saturating_add(1);\n+        }\n         if item.vis.node.is_pub() || item.vis.node.is_pub_restricted() {\n             return;\n         }\n         if_chain! {\n-            if !in_macro(item.span);\n             if let ItemKind::Use(use_path, UseKind::Glob) = &item.kind;\n-            // don't lint prelude glob imports\n-            if !use_path.segments.iter().last().map_or(false, |ps| ps.ident.as_str() == \"prelude\");\n+            if self.warn_on_all || !self.check_exceptions(item, use_path.segments);\n             let used_imports = cx.tcx.names_imported_by_glob_use(item.hir_id.owner);\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n@@ -109,8 +130,7 @@ impl LateLintPass<'_, '_> for WildcardImports {\n                         span = use_path.span.with_hi(item.span.hi() - BytePos(1));\n                     }\n                     (\n-                        span,\n-                        false,\n+                        span, false,\n                     )\n                 };\n \n@@ -153,4 +173,36 @@ impl LateLintPass<'_, '_> for WildcardImports {\n             }\n         }\n     }\n+\n+    fn check_item_post(&mut self, _: &LateContext<'_, '_>, item: &Item<'_>) {\n+        if is_test_module_or_function(item) {\n+            self.test_modules_deep = self.test_modules_deep.saturating_sub(1);\n+        }\n+    }\n+}\n+\n+impl WildcardImports {\n+    fn check_exceptions(&self, item: &Item<'_>, segments: &[PathSegment<'_>]) -> bool {\n+        in_macro(item.span)\n+            || is_prelude_import(segments)\n+            || (is_super_only_import(segments) && self.test_modules_deep > 0)\n+    }\n+}\n+\n+// Allow \"...prelude::*\" imports.\n+// Many crates have a prelude, and it is imported as a glob by design.\n+fn is_prelude_import(segments: &[PathSegment<'_>]) -> bool {\n+    segments\n+        .iter()\n+        .last()\n+        .map_or(false, |ps| ps.ident.as_str() == \"prelude\")\n+}\n+\n+// Allow \"super::*\" imports in tests.\n+fn is_super_only_import(segments: &[PathSegment<'_>]) -> bool {\n+    segments.len() == 1 && segments[0].ident.as_str() == \"super\"\n+}\n+\n+fn is_test_module_or_function(item: &Item<'_>) -> bool {\n+    matches!(item.kind, ItemKind::Mod(..)) && item.ident.name.as_str().contains(\"test\")\n }"}, {"sha": "53970af41079d5a952038fb4911e19bca40c4bc5", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43a1777b89cf6791f9e20878b4e5e3ae907867a5/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43a1777b89cf6791f9e20878b4e5e3ae907867a5/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=43a1777b89cf6791f9e20878b4e5e3ae907867a5", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-struct-bools`, `max-fn-params-bools`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "67423e6ec1d19bca17b3acd4b55227ab6cfae2b8", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/43a1777b89cf6791f9e20878b4e5e3ae907867a5/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/43a1777b89cf6791f9e20878b4e5e3ae907867a5/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=43a1777b89cf6791f9e20878b4e5e3ae907867a5", "patch": "@@ -155,3 +155,76 @@ fn test_weird_formatting() {\n     exported();\n     foo();\n }\n+\n+mod super_imports {\n+    fn foofoo() {}\n+\n+    mod should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_inside_function {\n+        fn with_super_inside_function() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod should_be_replaced_futher_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::insidefoo;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod use_explicit_should_be_replaced {\n+        use super_imports::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod use_double_super_should_be_replaced {\n+        mod inner {\n+            use super::super::foofoo;\n+\n+            fn with_double_super() {\n+                let _ = foofoo();\n+            }\n+        }\n+    }\n+\n+    mod use_super_explicit_should_be_replaced {\n+        use super::super::super_imports::foofoo;\n+\n+        fn with_super_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+}"}, {"sha": "3ad1a29aebad1f985a19e272ac55f071263f511c", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/43a1777b89cf6791f9e20878b4e5e3ae907867a5/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a1777b89cf6791f9e20878b4e5e3ae907867a5/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=43a1777b89cf6791f9e20878b4e5e3ae907867a5", "patch": "@@ -156,3 +156,76 @@ fn test_weird_formatting() {\n     exported();\n     foo();\n }\n+\n+mod super_imports {\n+    fn foofoo() {}\n+\n+    mod should_be_replaced {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_inside_function {\n+        fn with_super_inside_function() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod should_be_replaced_futher_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod use_explicit_should_be_replaced {\n+        use super_imports::*;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod use_double_super_should_be_replaced {\n+        mod inner {\n+            use super::super::*;\n+\n+            fn with_double_super() {\n+                let _ = foofoo();\n+            }\n+        }\n+    }\n+\n+    mod use_super_explicit_should_be_replaced {\n+        use super::super::super_imports::*;\n+\n+        fn with_super_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+}"}, {"sha": "fab43b738eb434d1ab6b453dffbc8967bfeeb222", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/43a1777b89cf6791f9e20878b4e5e3ae907867a5/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/43a1777b89cf6791f9e20878b4e5e3ae907867a5/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=43a1777b89cf6791f9e20878b4e5e3ae907867a5", "patch": "@@ -92,5 +92,35 @@ LL |       use crate:: fn_mod::\n LL | |         *;\n    | |_________^ help: try: `crate:: fn_mod::foo`\n \n-error: aborting due to 15 previous errors\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:164:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:199:17\n+   |\n+LL |             use super::*;\n+   |                 ^^^^^^^^ help: try: `super::insidefoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:207:13\n+   |\n+LL |         use super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^ help: try: `super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:216:17\n+   |\n+LL |             use super::super::*;\n+   |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports.rs:225:13\n+   |\n+LL |         use super::super::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n+\n+error: aborting due to 20 previous errors\n "}]}