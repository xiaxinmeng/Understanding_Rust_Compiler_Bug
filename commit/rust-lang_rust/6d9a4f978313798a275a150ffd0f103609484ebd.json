{"sha": "6d9a4f978313798a275a150ffd0f103609484ebd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOWE0Zjk3ODMxMzc5OGEyNzVhMTUwZmZkMGYxMDM2MDk0ODRlYmQ=", "commit": {"author": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-07-15T13:54:43Z"}, "committer": {"name": "lqd", "email": "remy.rakic+github@gmail.com", "date": "2019-07-22T09:36:42Z"}, "message": "Polonius facts: kill loans on Call terminators and StorageDead", "tree": {"sha": "4872f59aae9999e573fa933c4264225507981c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4872f59aae9999e573fa933c4264225507981c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d9a4f978313798a275a150ffd0f103609484ebd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d9a4f978313798a275a150ffd0f103609484ebd", "html_url": "https://github.com/rust-lang/rust/commit/6d9a4f978313798a275a150ffd0f103609484ebd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d9a4f978313798a275a150ffd0f103609484ebd/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a82f52e59c39e3a101a51cc6902ab0064c61c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a82f52e59c39e3a101a51cc6902ab0064c61c6a", "html_url": "https://github.com/rust-lang/rust/commit/9a82f52e59c39e3a101a51cc6902ab0064c61c6a"}], "stats": {"total": 98, "additions": 82, "deletions": 16}, "files": [{"sha": "25d0eaafc0049f80209dcf6d03f184c979750d74", "filename": "src/librustc_mir/borrow_check/nll/constraint_generation.rs", "status": "modified", "additions": 58, "deletions": 16, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/6d9a4f978313798a275a150ffd0f103609484ebd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9a4f978313798a275a150ffd0f103609484ebd/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraint_generation.rs?ref=6d9a4f978313798a275a150ffd0f103609484ebd", "patch": "@@ -6,8 +6,8 @@ use crate::borrow_check::nll::region_infer::values::LivenessValues;\n use rustc::infer::InferCtxt;\n use rustc::mir::visit::TyContext;\n use rustc::mir::visit::Visitor;\n-use rustc::mir::{BasicBlock, BasicBlockData, Location, Body, Place, PlaceBase, Rvalue};\n-use rustc::mir::{SourceInfo, Statement, Terminator};\n+use rustc::mir::{BasicBlock, BasicBlockData, Location, Body, Place, PlaceBase, Rvalue, TerminatorKind};\n+use rustc::mir::{Local, SourceInfo, Statement, StatementKind, Terminator};\n use rustc::mir::UserTypeProjection;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ClosureSubsts, GeneratorSubsts, RegionVid, Ty};\n@@ -114,6 +114,17 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n                 self.location_table\n                     .start_index(location.successor_within_block()),\n             ));\n+\n+            // If there are borrows on this now dead local, we need to record them as `killed`.\n+            if let StatementKind::StorageDead(ref local) = statement.kind {\n+                record_killed_borrows_for_local(\n+                    all_facts,\n+                    self.borrow_set,\n+                    self.location_table,\n+                    local,\n+                    location,\n+                );\n+            }\n         }\n \n         self.super_statement(statement, location);\n@@ -127,20 +138,7 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n     ) {\n         // When we see `X = ...`, then kill borrows of\n         // `(*X).foo` and so forth.\n-        if let Some(all_facts) = self.all_facts {\n-            if let Place {\n-                base: PlaceBase::Local(temp),\n-                projection: None,\n-            } = place {\n-                if let Some(borrow_indices) = self.borrow_set.local_map.get(temp) {\n-                    all_facts.killed.reserve(borrow_indices.len());\n-                    for &borrow_index in borrow_indices {\n-                        let location_index = self.location_table.mid_index(location);\n-                        all_facts.killed.push((borrow_index, location_index));\n-                    }\n-                }\n-            }\n-        }\n+        self.record_killed_borrows_for_place(place, location);\n \n         self.super_assign(place, rvalue, location);\n     }\n@@ -167,6 +165,14 @@ impl<'cg, 'cx, 'tcx> Visitor<'tcx> for ConstraintGeneration<'cg, 'cx, 'tcx> {\n             }\n         }\n \n+        // A `Call` terminator's return value can be a local which has borrows,\n+        // so we need to record those as `killed` as well.\n+        if let TerminatorKind::Call { ref destination, .. } = terminator.kind {\n+            if let Some((place, _)) = destination {\n+                self.record_killed_borrows_for_place(place, location);\n+            }\n+        }\n+\n         self.super_terminator(terminator, location);\n     }\n \n@@ -201,4 +207,40 @@ impl<'cx, 'cg, 'tcx> ConstraintGeneration<'cx, 'cg, 'tcx> {\n                 self.liveness_constraints.add_element(vid, location);\n             });\n     }\n+\n+    /// When recording facts for Polonius, records the borrows on the specified place\n+    /// as `killed`. For example, when assigning to a local, or on a call's return destination.\n+    fn record_killed_borrows_for_place(&mut self, place: &Place<'tcx>, location: Location) {\n+        if let Some(all_facts) = self.all_facts {\n+            if let Place {\n+                base: PlaceBase::Local(local),\n+                projection: None,\n+            } = place {\n+                record_killed_borrows_for_local(\n+                    all_facts,\n+                    self.borrow_set,\n+                    self.location_table,\n+                    local,\n+                    location,\n+                );\n+            }\n+        }\n+    }\n+}\n+\n+/// When recording facts for Polonius, records the borrows on the specified local as `killed`.\n+fn record_killed_borrows_for_local(\n+    all_facts: &mut AllFacts,\n+    borrow_set: &BorrowSet<'_>,\n+    location_table: &LocationTable,\n+    local: &Local,\n+    location: Location,\n+) {\n+    if let Some(borrow_indices) = borrow_set.local_map.get(local) {\n+        all_facts.killed.reserve(borrow_indices.len());\n+        for &borrow_index in borrow_indices {\n+            let location_index = location_table.mid_index(location);\n+            all_facts.killed.push((borrow_index, location_index));\n+        }\n+    }\n }"}, {"sha": "3121571478893ddb6415a4fdb92fed9337f08871", "filename": "src/test/ui/nll/polonius/calls-kill-loans.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d9a4f978313798a275a150ffd0f103609484ebd/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fcalls-kill-loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d9a4f978313798a275a150ffd0f103609484ebd/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fcalls-kill-loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fpolonius%2Fcalls-kill-loans.rs?ref=6d9a4f978313798a275a150ffd0f103609484ebd", "patch": "@@ -0,0 +1,24 @@\n+// `Call` terminators can write to a local which has existing loans\n+// and those need to be killed like a regular assignment to a local.\n+// This is a simplified version of issue 47680, is correctly accepted\n+// by NLL but was incorrectly rejected by Polonius because of these\n+// missing `killed` facts.\n+\n+// build-pass\n+// compile-flags: -Z borrowck=mir -Z polonius\n+// ignore-compare-mode-nll\n+\n+struct Thing;\n+\n+impl Thing {\n+    fn next(&mut self) -> &mut Self { unimplemented!() }\n+}\n+\n+fn main() {\n+    let mut temp = &mut Thing;\n+\n+    loop {\n+        let v = temp.next();\n+        temp = v; // accepted by NLL, was incorrectly rejected by Polonius\n+    }\n+}"}]}