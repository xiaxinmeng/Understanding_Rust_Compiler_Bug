{"sha": "aac1298122ae9c7838b72f775f1f6d2a35444cc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYzEyOTgxMjJhZTljNzgzOGI3MmY3NzVmMWY2ZDJhMzU0NDRjYzE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-23T02:51:21Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-06-08T02:37:29Z"}, "message": "testsuite: Add test cases that pass", "tree": {"sha": "61addb51c067a0a0e9f60beaeca2eecf66364da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61addb51c067a0a0e9f60beaeca2eecf66364da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aac1298122ae9c7838b72f775f1f6d2a35444cc1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aac1298122ae9c7838b72f775f1f6d2a35444cc1", "html_url": "https://github.com/rust-lang/rust/commit/aac1298122ae9c7838b72f775f1f6d2a35444cc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aac1298122ae9c7838b72f775f1f6d2a35444cc1/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8cf2f8056d29423430b723acd70e525d1249a32", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cf2f8056d29423430b723acd70e525d1249a32", "html_url": "https://github.com/rust-lang/rust/commit/b8cf2f8056d29423430b723acd70e525d1249a32"}], "stats": {"total": 140, "additions": 132, "deletions": 8}, "files": [{"sha": "bd74199dabd865a4ea9a58d3d52223bec264e340", "filename": "src/test/compile-fail/issue-4972.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/aac1298122ae9c7838b72f775f1f6d2a35444cc1/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac1298122ae9c7838b72f775f1f6d2a35444cc1/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4972.rs?ref=aac1298122ae9c7838b72f775f1f6d2a35444cc1", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait MyTrait { }\n+\n+pub enum TraitWrapper {\n+    A(~MyTrait),\n+}\n+\n+fn get_tw_map<'lt>(tw: &'lt TraitWrapper) -> &'lt MyTrait {\n+    match *tw {\n+        A(~ref map) => map, //~ ERROR mismatched types: expected `~MyTrait` but found a ~-box pattern\n+    }\n+}\n+\n+pub fn main() {}\n\\ No newline at end of file"}, {"sha": "e9c2ab87c2b3df93801a443f53507992e59e69cc", "filename": "src/test/run-pass/issue-3743.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/aac1298122ae9c7838b72f775f1f6d2a35444cc1/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac1298122ae9c7838b72f775f1f6d2a35444cc1/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=aac1298122ae9c7838b72f775f1f6d2a35444cc1", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::io;\n+\n+struct Vec2 {\n+    x: float,\n+    y: float\n+}\n+\n+// methods we want to export as methods as well as operators\n+impl Vec2 {\n+#[inline(always)]\n+    fn vmul(self, other: float) -> Vec2 {\n+        Vec2 { x: self.x * other, y: self.y * other }\n+    }\n+}\n+\n+// Right-hand-side operator visitor pattern\n+trait RhsOfVec2Mul<Result> { fn mul_vec2_by(&self, lhs: &Vec2) -> Result; }\n+\n+// Vec2's implementation of Mul \"from the other side\" using the above trait\n+impl<Res, Rhs: RhsOfVec2Mul<Res>> Mul<Rhs,Res> for Vec2 {\n+    fn mul(&self, rhs: &Rhs) -> Res { rhs.mul_vec2_by(self) }\n+}\n+\n+// Implementation of 'float as right-hand-side of Vec2::Mul'\n+impl RhsOfVec2Mul<Vec2> for float {\n+    fn mul_vec2_by(&self, lhs: &Vec2) -> Vec2 { lhs.vmul(*self) }\n+}\n+\n+// Usage with failing inference\n+pub fn main() {\n+    let a = Vec2 { x: 3f, y: 4f };\n+\n+    // the following compiles and works properly\n+    let v1: Vec2 = a * 3f;\n+    io::println(fmt!(\"%f %f\", v1.x, v1.y));\n+\n+    // the following compiles but v2 will not be Vec2 yet and\n+    // using it later will cause an error that the type of v2\n+    // must be known\n+    let v2 = a * 3f;\n+    io::println(fmt!(\"%f %f\", v2.x, v2.y)); // error regarding v2's type\n+}"}, {"sha": "6b0dd6cb9472269d7c34ff1a1f9ca1bc71d971d6", "filename": "src/test/run-pass/issue-4016.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aac1298122ae9c7838b72f775f1f6d2a35444cc1/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac1298122ae9c7838b72f775f1f6d2a35444cc1/src%2Ftest%2Frun-pass%2Fissue-4016.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4016.rs?ref=aac1298122ae9c7838b72f775f1f6d2a35444cc1", "patch": "@@ -1,4 +1,5 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// xfail-fast\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,19 +9,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n extern mod extra;\n \n-use hashmap;\n+use std::result;\n use extra::json;\n-use extra::serialization::{Deserializable, deserialize};\n+use extra::serialize::Decodable;\n \n-trait JD : Deserializable<json::Deserializer> { }\n-//type JD = Deserializable<json::Deserializer>;\n+trait JD : Decodable<json::Decoder> { }\n \n-fn exec<T:JD>() {\n+fn exec<T: JD>() {\n     let doc = result::unwrap(json::from_str(\"\"));\n-    let _v: T = deserialize(&json::Deserializer(doc));\n+    let mut decoder = json::Decoder(doc);\n+    let _v: T = Decodable::decode(&mut decoder);\n     fail!()\n }\n "}, {"sha": "002435fcb36f0c28bdce527c52e92c934b4770e8", "filename": "src/test/run-pass/issue-5530.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/aac1298122ae9c7838b72f775f1f6d2a35444cc1/src%2Ftest%2Frun-pass%2Fissue-5530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aac1298122ae9c7838b72f775f1f6d2a35444cc1/src%2Ftest%2Frun-pass%2Fissue-5530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5530.rs?ref=aac1298122ae9c7838b72f775f1f6d2a35444cc1", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-test\n+\n+enum Enum {\n+    Foo { foo: uint },\n+    Bar { bar: uint }\n+}\n+\n+fn fun1(e1: &Enum, e2: &Enum) -> uint {\n+    match (e1, e2) {\n+        (&Foo { foo: _ }, &Foo { foo: _ }) => 0,\n+        (&Foo { foo: _ }, &Bar { bar: _ }) => 1,\n+        (&Bar { bar: _ }, &Bar { bar: _ }) => 2,\n+        (&Bar { bar: _ }, &Foo { foo: _ }) => 3,\n+    }\n+}\n+\n+fn fun2(e1: &Enum, e2: &Enum) -> uint {\n+    match (e1, e2) {\n+        (&Foo { foo: _ }, &Foo { foo: _ }) => 0,\n+        (&Foo { foo: _ }, _              ) => 1,\n+        (&Bar { bar: _ }, &Bar { bar: _ }) => 2,\n+        (&Bar { bar: _ }, _              ) => 3,\n+    }\n+}\n+\n+pub fn main() {\n+    let foo = Foo { foo: 1 };\n+    let bar = Bar { bar: 1 };\n+\n+    assert_eq!(fun1(&foo, &foo), 0);\n+    assert_eq!(fun1(&foo, &bar), 1);\n+    assert_eq!(fun1(&bar, &bar), 2);\n+    assert_eq!(fun1(&bar, &foo), 3);\n+\n+    assert_eq!(fun2(&foo, &foo), 0);\n+    assert_eq!(fun2(&foo, &bar), 1); // fun2 returns 0\n+    assert_eq!(fun2(&bar, &bar), 2);\n+    assert_eq!(fun2(&bar, &foo), 3); // fun2 returns 2\n+}"}]}