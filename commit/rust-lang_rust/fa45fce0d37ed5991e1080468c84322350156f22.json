{"sha": "fa45fce0d37ed5991e1080468c84322350156f22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhNDVmY2UwZDM3ZWQ1OTkxZTEwODA0NjhjODQzMjIzNTAxNTZmMjI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-17T15:13:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-17T15:13:49Z"}, "message": "Rollup merge of #78702 - wesleywiser:self_profile_cgu_sizes, r=Mark-Simulacrum\n\n[self-profiling] Include the estimated size of each cgu in the profile\n\nThis is helpful when looking for CGUs where the size estimate isn't a\ngood indicator of compilation time.\n\nI verified that moving the profiling timer call doesn't affect the\nresults.\n\nResults:\n\n<img width=\"297\" alt=\"Screen Shot 2020-11-03 at 7 25 04 AM\" src=\"https://user-images.githubusercontent.com/831192/97985503-5901d100-1da6-11eb-9f10-f3e399702952.png\">\n\n`measureme` doesn't have support for custom arg names yet so `arg0` is the CGU name and `arg1` is the estimated size.", "tree": {"sha": "1eee509ad8275bca3c83c3a0f6c5e398f41b4e0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eee509ad8275bca3c83c3a0f6c5e398f41b4e0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa45fce0d37ed5991e1080468c84322350156f22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfs+itCRBK7hj4Ov3rIwAAdHIIAHax6G7WoiItjW8aukS9yxwe\nTdc2ERdKUwslhieNYy2nEjDJhl2p3eAMdd/eUcfmYUbx1xeQ4eJpxkDVbX3coqnH\n2ALJsF7Rtf1zgXAU1j8Il3P8Wr/0uvvB9/0OOd8x6JJof2HjbR5MVUnitILqMW+x\nzllmRBQpv4nmxDCsetfeXDFJgxzZJ6IaMyItlnLp4wwo2iHE17EBmDpNH59XpfM0\n6UkmbY9vmyNuyCXxP3ot32ZiRpQB9XZJgoV9/ihFIegO5fYZ8x2GThI+wPPElXmS\nVxrC4rUBYV4/KVfUAkgIa4u7tI2S1EvUNL1YmEpFA+SAk3c72rube6yyEhnnRF8=\n=1mhb\n-----END PGP SIGNATURE-----\n", "payload": "tree 1eee509ad8275bca3c83c3a0f6c5e398f41b4e0d\nparent 81f9feba97adba7efc81e53a1bb0222ac977121b\nparent efe703a01ac11d3fa3f6d0126645cafff143d476\nauthor Mara Bos <m-ou.se@m-ou.se> 1605626029 +0100\ncommitter GitHub <noreply@github.com> 1605626029 +0100\n\nRollup merge of #78702 - wesleywiser:self_profile_cgu_sizes, r=Mark-Simulacrum\n\n[self-profiling] Include the estimated size of each cgu in the profile\n\nThis is helpful when looking for CGUs where the size estimate isn't a\ngood indicator of compilation time.\n\nI verified that moving the profiling timer call doesn't affect the\nresults.\n\nResults:\n\n<img width=\"297\" alt=\"Screen Shot 2020-11-03 at 7 25 04 AM\" src=\"https://user-images.githubusercontent.com/831192/97985503-5901d100-1da6-11eb-9f10-f3e399702952.png\">\n\n`measureme` doesn't have support for custom arg names yet so `arg0` is the CGU name and `arg1` is the estimated size.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa45fce0d37ed5991e1080468c84322350156f22", "html_url": "https://github.com/rust-lang/rust/commit/fa45fce0d37ed5991e1080468c84322350156f22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa45fce0d37ed5991e1080468c84322350156f22/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81f9feba97adba7efc81e53a1bb0222ac977121b", "url": "https://api.github.com/repos/rust-lang/rust/commits/81f9feba97adba7efc81e53a1bb0222ac977121b", "html_url": "https://github.com/rust-lang/rust/commit/81f9feba97adba7efc81e53a1bb0222ac977121b"}, {"sha": "efe703a01ac11d3fa3f6d0126645cafff143d476", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe703a01ac11d3fa3f6d0126645cafff143d476", "html_url": "https://github.com/rust-lang/rust/commit/efe703a01ac11d3fa3f6d0126645cafff143d476"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "7d01f6a54995a85a9f15fb247ba99f5344d00c6e", "filename": "compiler/rustc_codegen_llvm/src/base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fa45fce0d37ed5991e1080468c84322350156f22/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45fce0d37ed5991e1080468c84322350156f22/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbase.rs?ref=fa45fce0d37ed5991e1080468c84322350156f22", "patch": "@@ -97,21 +97,23 @@ pub fn compile_codegen_unit(\n     tcx: TyCtxt<'tcx>,\n     cgu_name: Symbol,\n ) -> (ModuleCodegen<ModuleLlvm>, u64) {\n-    let prof_timer = tcx.prof.generic_activity_with_arg(\"codegen_module\", cgu_name.to_string());\n     let start_time = Instant::now();\n \n     let dep_node = tcx.codegen_unit(cgu_name).codegen_dep_node(tcx);\n     let (module, _) =\n         tcx.dep_graph.with_task(dep_node, tcx, cgu_name, module_codegen, dep_graph::hash_result);\n     let time_to_codegen = start_time.elapsed();\n-    drop(prof_timer);\n \n     // We assume that the cost to run LLVM on a CGU is proportional to\n     // the time we needed for codegenning it.\n     let cost = time_to_codegen.as_nanos() as u64;\n \n     fn module_codegen(tcx: TyCtxt<'_>, cgu_name: Symbol) -> ModuleCodegen<ModuleLlvm> {\n         let cgu = tcx.codegen_unit(cgu_name);\n+        let _prof_timer = tcx.prof.generic_activity_with_args(\n+            \"codegen_module\",\n+            &[cgu_name.to_string(), cgu.size_estimate().to_string()],\n+        );\n         // Instantiate monomorphizations without filling out definitions yet...\n         let llvm_module = ModuleLlvm::new(tcx, &cgu_name.as_str());\n         {"}, {"sha": "5d13b7f27c70453097e8b242dc376e4589a4394a", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fa45fce0d37ed5991e1080468c84322350156f22/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa45fce0d37ed5991e1080468c84322350156f22/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=fa45fce0d37ed5991e1080468c84322350156f22", "patch": "@@ -272,6 +272,28 @@ impl SelfProfilerRef {\n         })\n     }\n \n+    #[inline(always)]\n+    pub fn generic_activity_with_args(\n+        &self,\n+        event_label: &'static str,\n+        event_args: &[String],\n+    ) -> TimingGuard<'_> {\n+        self.exec(EventFilter::GENERIC_ACTIVITIES, |profiler| {\n+            let builder = EventIdBuilder::new(&profiler.profiler);\n+            let event_label = profiler.get_or_alloc_cached_string(event_label);\n+            let event_id = if profiler.event_filter_mask.contains(EventFilter::FUNCTION_ARGS) {\n+                let event_args: Vec<_> = event_args\n+                    .iter()\n+                    .map(|s| profiler.get_or_alloc_cached_string(&s[..]))\n+                    .collect();\n+                builder.from_label_and_args(event_label, &event_args)\n+            } else {\n+                builder.from_label(event_label)\n+            };\n+            TimingGuard::start(profiler, profiler.generic_activity_event_kind, event_id)\n+        })\n+    }\n+\n     /// Start profiling a query provider. Profiling continues until the\n     /// TimingGuard returned from this call is dropped.\n     #[inline(always)]"}]}