{"sha": "485111c48e79e2b41381ff6d4f3301a38b5a167d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4NTExMWM0OGU3OWUyYjQxMzgxZmY2ZDRmMzMwMWEzOGI1YTE2N2Q=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2019-08-29T11:40:27Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-02-21T18:41:22Z"}, "message": "Add regression tests for issues", "tree": {"sha": "f441482edce9daa49496f73d47585be38488d032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f441482edce9daa49496f73d47585be38488d032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/485111c48e79e2b41381ff6d4f3301a38b5a167d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/485111c48e79e2b41381ff6d4f3301a38b5a167d", "html_url": "https://github.com/rust-lang/rust/commit/485111c48e79e2b41381ff6d4f3301a38b5a167d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/485111c48e79e2b41381ff6d4f3301a38b5a167d/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fead45815c626f5086e7e24ae6014fdfd104bff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/fead45815c626f5086e7e24ae6014fdfd104bff9", "html_url": "https://github.com/rust-lang/rust/commit/fead45815c626f5086e7e24ae6014fdfd104bff9"}], "stats": {"total": 244, "additions": 206, "deletions": 38}, "files": [{"sha": "82105f25f92407df8a732dc0bd8a1f41aae926bd", "filename": "src/test/ui/associated-const/defaults-cyclic-pass.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fdefaults-cyclic-pass.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -6,7 +6,8 @@ trait Tr {\n     const B: u8 = Self::A;\n }\n \n-// This impl is *allowed* unless its assoc. consts are used\n+// This impl is *allowed* unless its assoc. consts are used, matching the\n+// behavior without defaults.\n impl Tr for () {}\n \n // Overriding either constant breaks the cycle"}, {"sha": "74a0cfa6b73a4911099a9e5aea46fd795578ab28", "filename": "src/test/ui/associated-types/defaults-cyclic-pass.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-pass.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -2,21 +2,16 @@\n \n #![feature(associated_type_defaults)]\n \n+// Having a cycle in assoc. type defaults is okay, as long as there's no impl\n+// that retains it.\n trait Tr {\n-    type Item = u8;\n-    type Container = Vec<Self::Item>;\n+    type A = Self::B;\n+    type B = Self::A;\n }\n \n-impl Tr for () {}\n-\n-impl Tr for u16 {\n-    type Item = u16;\n+// An impl has to break the cycle to be accepted.\n+impl Tr for u8 {\n+    type A = u8;\n }\n \n-fn main() {\n-    let _container: <() as Tr>::Container = Vec::<u8>::new();\n-    let _item: <() as Tr>::Item = 0u8;\n-\n-    let _container: <u16 as Tr>::Container = Vec::<u16>::new();\n-    let _item: <u16 as Tr>::Item = 0u16;\n-}\n+fn main() {}"}, {"sha": "618a203850785555f5bc3712098e2d887611f2f2", "filename": "src/test/ui/associated-types/defaults-in-other-trait-items-pass.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-in-other-trait-items-pass.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+trait Tr {\n+    type Item = u8;\n+    type Container = Vec<Self::Item>;\n+}\n+\n+impl Tr for () {}\n+\n+impl Tr for u16 {\n+    type Item = u16;\n+}\n+\n+fn main() {\n+    let _container: <() as Tr>::Container = Vec::<u8>::new();\n+    let _item: <() as Tr>::Item = 0u8;\n+\n+    let _container: <u16 as Tr>::Container = Vec::<u16>::new();\n+    let _item: <u16 as Tr>::Item = 0u16;\n+}"}, {"sha": "37d52ed16b61c6cf9e7d2ae159180baf6c94a3ad", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -3,6 +3,9 @@\n //! The old implementation of defaults did not check whether the provided\n //! default actually fulfills all bounds on the assoc. type, leading to\n //! unsoundness, demonstrated here as a use-after-free.\n+//!\n+//! Note that the underlying cause of this is still not yet fixed.\n+//! See: https://github.com/rust-lang/rust/issues/33017\n \n // compile-fail\n "}, {"sha": "0cad08f67522383684152d67bf0f55bc9e57d801", "filename": "src/test/ui/associated-types/defaults-unsound-62211-1.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-1.stderr?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -1,45 +1,45 @@\n error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:20:18\n+  --> $DIR/defaults-unsound-62211-1.rs:23:18\n    |\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::marker::Copy` bound\n note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-1.rs:17:1\n+  --> $DIR/defaults-unsound-62211-1.rs:20:1\n    |\n LL | trait UncheckedCopy: Sized {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-1.rs:24:7\n+  --> $DIR/defaults-unsound-62211-1.rs:27:7\n    |\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n    = help: consider adding a `where Self: std::ops::AddAssign<&'static str>` bound\n note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-1.rs:17:1\n+  --> $DIR/defaults-unsound-62211-1.rs:20:1\n    |\n LL | trait UncheckedCopy: Sized {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:22:7\n+  --> $DIR/defaults-unsound-62211-1.rs:25:7\n    |\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::ops::Deref` bound\n note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-1.rs:17:1\n+  --> $DIR/defaults-unsound-62211-1.rs:20:1\n    |\n LL | trait UncheckedCopy: Sized {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-1.rs:27:7\n+  --> $DIR/defaults-unsound-62211-1.rs:30:7\n    |\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n@@ -48,13 +48,13 @@ LL |     + Display = Self;\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = help: consider adding a `where Self: std::fmt::Display` bound\n note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-1.rs:17:1\n+  --> $DIR/defaults-unsound-62211-1.rs:20:1\n    |\n LL | trait UncheckedCopy: Sized {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-1.rs:40:9\n+  --> $DIR/defaults-unsound-62211-1.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n@@ -64,15 +64,15 @@ LL | impl<T> UncheckedCopy for T {}\n    = help: consider adding a `where T: std::fmt::Display` bound\n \n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:40:9\n+  --> $DIR/defaults-unsound-62211-1.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::ops::Deref` bound\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n-  --> $DIR/defaults-unsound-62211-1.rs:40:9\n+  --> $DIR/defaults-unsound-62211-1.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n@@ -81,7 +81,7 @@ LL | impl<T> UncheckedCopy for T {}\n    = help: consider adding a `where T: std::ops::AddAssign<&'static str>` bound\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-1.rs:40:9\n+  --> $DIR/defaults-unsound-62211-1.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "d042a1478a3aa8339749d542876f4dcef2159f46", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -3,6 +3,9 @@\n //! The old implementation of defaults did not check whether the provided\n //! default actually fulfills all bounds on the assoc. type, leading to\n //! unsoundness and ICEs, the latter being demonstrated here.\n+//!\n+//! Note that the underlying cause of this is still not yet fixed.\n+//! See: https://github.com/rust-lang/rust/issues/33017\n \n // compile-fail\n "}, {"sha": "3a57f7df055fd6ab524b7d500c246ab73026b9e4", "filename": "src/test/ui/associated-types/defaults-unsound-62211-2.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-unsound-62211-2.stderr?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -1,45 +1,45 @@\n error[E0277]: the trait bound `Self: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:20:18\n+  --> $DIR/defaults-unsound-62211-2.rs:23:18\n    |\n LL |     type Output: Copy\n    |                  ^^^^ the trait `std::marker::Copy` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::marker::Copy` bound\n note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-2.rs:17:1\n+  --> $DIR/defaults-unsound-62211-2.rs:20:1\n    |\n LL | trait UncheckedCopy: Sized {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add-assign `&'static str` to `Self`\n-  --> $DIR/defaults-unsound-62211-2.rs:24:7\n+  --> $DIR/defaults-unsound-62211-2.rs:27:7\n    |\n LL |     + AddAssign<&'static str>\n    |       ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `Self += &'static str`\n    |\n    = help: the trait `std::ops::AddAssign<&'static str>` is not implemented for `Self`\n    = help: consider adding a `where Self: std::ops::AddAssign<&'static str>` bound\n note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-2.rs:17:1\n+  --> $DIR/defaults-unsound-62211-2.rs:20:1\n    |\n LL | trait UncheckedCopy: Sized {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `Self: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:22:7\n+  --> $DIR/defaults-unsound-62211-2.rs:25:7\n    |\n LL |     + Deref<Target = str>\n    |       ^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `Self`\n    |\n    = help: consider adding a `where Self: std::ops::Deref` bound\n note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-2.rs:17:1\n+  --> $DIR/defaults-unsound-62211-2.rs:20:1\n    |\n LL | trait UncheckedCopy: Sized {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `Self` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-2.rs:27:7\n+  --> $DIR/defaults-unsound-62211-2.rs:30:7\n    |\n LL |     + Display = Self;\n    |       ^^^^^^^ `Self` cannot be formatted with the default formatter\n@@ -48,13 +48,13 @@ LL |     + Display = Self;\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n    = help: consider adding a `where Self: std::fmt::Display` bound\n note: required by `UncheckedCopy`\n-  --> $DIR/defaults-unsound-62211-2.rs:17:1\n+  --> $DIR/defaults-unsound-62211-2.rs:20:1\n    |\n LL | trait UncheckedCopy: Sized {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: `T` doesn't implement `std::fmt::Display`\n-  --> $DIR/defaults-unsound-62211-2.rs:40:9\n+  --> $DIR/defaults-unsound-62211-2.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ `T` cannot be formatted with the default formatter\n@@ -64,15 +64,15 @@ LL | impl<T> UncheckedCopy for T {}\n    = help: consider adding a `where T: std::fmt::Display` bound\n \n error[E0277]: the trait bound `T: std::ops::Deref` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:40:9\n+  --> $DIR/defaults-unsound-62211-2.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::ops::Deref` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::ops::Deref` bound\n \n error[E0277]: cannot add-assign `&'static str` to `T`\n-  --> $DIR/defaults-unsound-62211-2.rs:40:9\n+  --> $DIR/defaults-unsound-62211-2.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ no implementation for `T += &'static str`\n@@ -81,7 +81,7 @@ LL | impl<T> UncheckedCopy for T {}\n    = help: consider adding a `where T: std::ops::AddAssign<&'static str>` bound\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/defaults-unsound-62211-2.rs:40:9\n+  --> $DIR/defaults-unsound-62211-2.rs:43:9\n    |\n LL | impl<T> UncheckedCopy for T {}\n    |         ^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`"}, {"sha": "bda21eb0e0ac824aa472dd38f2fa4cd5f352515d", "filename": "src/test/ui/associated-types/issue-32350.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-32350.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-32350.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-32350.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+\n+// This is another instance of the \"normalizations don't work\" issue with\n+// defaulted associated types.\n+\n+#![feature(associated_type_defaults)]\n+\n+pub trait Emitter<'a> {\n+    type Ctxt: 'a;\n+    type CtxtBrw: 'a = &'a Self::Ctxt;\n+\n+    fn get_cx(&'a self) -> Self::CtxtBrw;\n+}\n+\n+struct MyCtxt;\n+\n+struct MyEmitter {\n+    ctxt: MyCtxt\n+}\n+\n+impl <'a> Emitter<'a> for MyEmitter {\n+    type Ctxt = MyCtxt;\n+\n+    fn get_cx(&'a self) -> &'a MyCtxt {\n+        &self.ctxt\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "52bbd1f5d286372a0c06c3b5bef30505eafbd351", "filename": "src/test/ui/associated-types/issue-41868.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-41868.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-41868.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-41868.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -0,0 +1,23 @@\n+// check-pass\n+\n+// Defaulted assoc. types should normalize properly in impls that don't\n+// override them.\n+\n+#![feature(associated_type_defaults)]\n+\n+pub struct Foo;\n+\n+pub trait CanDecode: Sized {\n+    type Output = Self;\n+    fn read(rdr: &mut Foo) -> Option<Self::Output>;\n+}\n+\n+impl CanDecode for u8 {\n+    fn read(rdr: &mut Foo) -> Option<Self::Output> { Some(42) }\n+}\n+\n+impl CanDecode for u16 {\n+    fn read(rdr: &mut Foo) -> Option<u16> { Some(17) }\n+}\n+\n+fn main() {}"}, {"sha": "26f1183c6bd768e6ab18ea8671a98a2d62eecdf8", "filename": "src/test/ui/associated-types/issue-43924.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -0,0 +1,15 @@\n+#![feature(associated_type_defaults)]\n+\n+// This used to cause an ICE because assoc. type defaults weren't properly\n+// type-checked.\n+\n+trait Foo<T: Default + ToString> {\n+    type Out: Default + ToString + ?Sized = dyn ToString;  //~ error: not satisfied\n+}\n+\n+impl Foo<u32> for () {}  //~ error: not satisfied\n+impl Foo<u64> for () {}  //~ error: not satisfied\n+\n+fn main() {\n+    assert_eq!(<() as Foo<u32>>::Out::default().to_string(), \"false\");\n+}"}, {"sha": "67a963b501357d27489074751e90e0cf5653ab2f", "filename": "src/test/ui/associated-types/issue-43924.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-43924.stderr?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -0,0 +1,27 @@\n+error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+  --> $DIR/issue-43924.rs:7:15\n+   |\n+LL |     type Out: Default + ToString + ?Sized = dyn ToString;\n+   |               ^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+   |\n+note: required by `Foo`\n+  --> $DIR/issue-43924.rs:6:1\n+   |\n+LL | trait Foo<T: Default + ToString> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+  --> $DIR/issue-43924.rs:10:6\n+   |\n+LL | impl Foo<u32> for () {}\n+   |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+\n+error[E0277]: the trait bound `(dyn std::string::ToString + 'static): std::default::Default` is not satisfied\n+  --> $DIR/issue-43924.rs:11:6\n+   |\n+LL | impl Foo<u64> for () {}\n+   |      ^^^^^^^^ the trait `std::default::Default` is not implemented for `(dyn std::string::ToString + 'static)`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d43d674e9c3a069661dd429988530a855c586aba", "filename": "src/test/ui/associated-types/issue-47385.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-47385.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+\n+#![feature(associated_type_defaults)]\n+\n+pub struct Foo;\n+\n+pub trait Bar: From<<Self as Bar>::Input> {\n+    type Input = Self;\n+}\n+\n+impl Bar for Foo {\n+    // Will compile with explicit type:\n+    // type Input = Self;\n+}\n+\n+fn main() {}"}, {"sha": "1452467f3736ee236a5c30473948b53d96bb73ce", "filename": "src/test/ui/associated-types/issue-63593.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.rs?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -0,0 +1,11 @@\n+#![feature(associated_type_defaults)]\n+\n+// Tests that `Self` is not assumed to implement `Sized` when used as an\n+// associated type default.\n+\n+trait Inner<S> {}\n+\n+trait MyTrait {\n+    type This = Self;  //~ error: size for values of type `Self` cannot be known\n+    fn something<I: Inner<Self::This>>(i: I);\n+}"}, {"sha": "ea462eac9b4d3e17968eca5f3be0cd42f0cbea31", "filename": "src/test/ui/associated-types/issue-63593.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/485111c48e79e2b41381ff6d4f3301a38b5a167d/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-63593.stderr?ref=485111c48e79e2b41381ff6d4f3301a38b5a167d", "patch": "@@ -0,0 +1,23 @@\n+error[E0601]: `main` function not found in crate `issue_63593`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-63593.rs`\n+\n+error[E0277]: the size for values of type `Self` cannot be known at compilation time\n+  --> $DIR/issue-63593.rs:9:5\n+   |\n+LL |     type This = Self;\n+   |     ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `Self`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = help: consider adding a `where Self: std::marker::Sized` bound\n+note: required by `MyTrait`\n+  --> $DIR/issue-63593.rs:8:1\n+   |\n+LL | trait MyTrait {\n+   | ^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0277, E0601.\n+For more information about an error, try `rustc --explain E0277`."}]}