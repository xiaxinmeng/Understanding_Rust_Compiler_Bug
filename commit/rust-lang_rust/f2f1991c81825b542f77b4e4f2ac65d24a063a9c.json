{"sha": "f2f1991c81825b542f77b4e4f2ac65d24a063a9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyZjE5OTFjODE4MjViNTQyZjc3YjRlNGYyYWM2NWQyNGEwNjNhOWM=", "commit": {"author": {"name": "Jonathan S", "email": "gereeter@gmail.com", "date": "2014-06-06T20:24:14Z"}, "committer": {"name": "Jonathan S", "email": "gereeter@gmail.com", "date": "2014-06-06T20:24:14Z"}, "message": "Make sync::raw::Sem use Unsafe to manage mutability instead of transmuting an unsafe pointer", "tree": {"sha": "71c3fe1cdf55293ee29d6840ab786fcb9d564c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c3fe1cdf55293ee29d6840ab786fcb9d564c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2f1991c81825b542f77b4e4f2ac65d24a063a9c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2f1991c81825b542f77b4e4f2ac65d24a063a9c", "html_url": "https://github.com/rust-lang/rust/commit/f2f1991c81825b542f77b4e4f2ac65d24a063a9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2f1991c81825b542f77b4e4f2ac65d24a063a9c/comments", "author": null, "committer": null, "parents": [{"sha": "566b7b93c6ca2c034f110fa670040de1a09195e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/566b7b93c6ca2c034f110fa670040de1a09195e4", "html_url": "https://github.com/rust-lang/rust/commit/566b7b93c6ca2c034f110fa670040de1a09195e4"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "8fd10cdfa8b346a2751623ad73263e186dbd2ed6", "filename": "src/libsync/raw.rs", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f2f1991c81825b542f77b4e4f2ac65d24a063a9c/src%2Flibsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2f1991c81825b542f77b4e4f2ac65d24a063a9c/src%2Flibsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fraw.rs?ref=f2f1991c81825b542f77b4e4f2ac65d24a063a9c", "patch": "@@ -18,6 +18,7 @@\n use std::kinds::marker;\n use std::mem;\n use std::sync::atomics;\n+use std::ty::Unsafe;\n use std::finally::Finally;\n \n use mutex;\n@@ -85,11 +86,8 @@ struct Sem<Q> {\n     // n.b, we need Sem to be `Share`, but the WaitQueue type is not send/share\n     //      (for good reason). We have an internal invariant on this semaphore,\n     //      however, that the queue is never accessed outside of a locked\n-    //      context. For this reason, we shove these behind a pointer which will\n-    //      be inferred to be `Share`.\n-    //\n-    // FIXME: this requires an extra allocation, which is bad.\n-    inner: *()\n+    //      context.\n+    inner: Unsafe<SemInner<Q>>\n }\n \n struct SemInner<Q> {\n@@ -107,22 +105,20 @@ struct SemGuard<'a, Q> {\n \n impl<Q: Send> Sem<Q> {\n     fn new(count: int, q: Q) -> Sem<Q> {\n-        let inner = unsafe {\n-            mem::transmute(box SemInner {\n+        Sem {\n+            lock: mutex::Mutex::new(),\n+            inner: Unsafe::new(SemInner {\n                 waiters: WaitQueue::new(),\n                 count: count,\n                 blocked: q,\n             })\n-        };\n-        Sem {\n-            lock: mutex::Mutex::new(),\n-            inner: inner,\n         }\n     }\n \n     unsafe fn with(&self, f: |&mut SemInner<Q>|) {\n         let _g = self.lock.lock();\n-        f(&mut *(self.inner as *mut SemInner<Q>))\n+        // This &mut is safe because, due to the lock, we are the only one who can touch the data\n+        f(&mut *self.inner.get())\n     }\n \n     pub fn acquire(&self) {\n@@ -163,16 +159,6 @@ impl<Q: Send> Sem<Q> {\n     }\n }\n \n-#[unsafe_destructor]\n-impl<Q: Send> Drop for Sem<Q> {\n-    fn drop(&mut self) {\n-        let _waiters: Box<SemInner<Q>> = unsafe {\n-            mem::transmute(self.inner)\n-        };\n-        self.inner = 0 as *();\n-    }\n-}\n-\n #[unsafe_destructor]\n impl<'a, Q: Send> Drop for SemGuard<'a, Q> {\n     fn drop(&mut self) {"}]}