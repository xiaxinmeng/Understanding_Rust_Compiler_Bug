{"sha": "2bd94f4aa9683158c7df96b9661be193c39a55ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZDk0ZjRhYTk2ODMxNThjN2RmOTZiOTY2MWJlMTkzYzM5YTU1ZWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-23T02:01:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-23T02:01:14Z"}, "message": "Auto merge of #83398 - JohnTitor:rollup-om80krv, r=JohnTitor\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #80705 (Update Source Code Pro and include italics)\n - #81917 (Update RELEASES.md for 1.51.0)\n - #82732 (Remove theme.js file)\n - #83356 (rustdoc: Replace pair of `Option`s with an enum)\n - #83384 (rename :pat2018 -> :pat2015)\n - #83385 (:arrow_up: rust-analyzer)\n - #83389 (add rust-analyzer rustc_private option in librustdoc Cargo.toml)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ef88985b7237c4b6f77c27e17e9fbce5577d29f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef88985b7237c4b6f77c27e17e9fbce5577d29f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bd94f4aa9683158c7df96b9661be193c39a55ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bd94f4aa9683158c7df96b9661be193c39a55ed", "html_url": "https://github.com/rust-lang/rust/commit/2bd94f4aa9683158c7df96b9661be193c39a55ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bd94f4aa9683158c7df96b9661be193c39a55ed/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d04957a4b4714f71d38326fc96a0b0ef6dc5800", "html_url": "https://github.com/rust-lang/rust/commit/5d04957a4b4714f71d38326fc96a0b0ef6dc5800"}, {"sha": "263c85875cb3aceced6cc712961234fc61d71cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/263c85875cb3aceced6cc712961234fc61d71cba", "html_url": "https://github.com/rust-lang/rust/commit/263c85875cb3aceced6cc712961234fc61d71cba"}], "stats": {"total": 430, "additions": 315, "deletions": 115}, "files": [{"sha": "579a8110483872fb4a35fe30929349e07ce1e51f", "filename": "RELEASES.md", "status": "modified", "additions": 171, "deletions": 0, "changes": 171, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -1,3 +1,174 @@\n+Version 1.51.0 (2021-03-25)\n+============================\n+\n+Language\n+--------\n+- [You can now parameterize items such as functions, traits, and `struct`s by constant\n+  values in addition to by types and lifetimes.][79135] Also known as \"const generics\"\n+  E.g. you can now write the following. Note: Only values of primitive integers, \n+  `bool`, or `char` types are currently permitted.\n+  ```rust\n+  struct GenericArray<T, const LENGTH: usize> {\n+      inner: [T; LENGTH]\n+  }\n+\n+  impl<T, const LENGTH: usize> GenericArray<T, LENGTH> {\n+      const fn last(&self) -> Option<&T> {\n+          if LENGTH == 0 {\n+              None\n+          } else {\n+              Some(&self.inner[LENGTH - 1])\n+          }\n+      }\n+  }\n+  ```\n+\n+\n+Compiler\n+--------\n+\n+- [Added the `-Csplit-debuginfo` codegen option for macOS platforms.][79570]\n+  This option controls whether debug information is split across multiple files\n+  or packed into a single file. **Note** This option is unstable on other platforms.\n+- [Added tier 3\\* support for `aarch64_be-unknown-linux-gnu`,\n+  `aarch64-unknown-linux-gnu_ilp32`, and `aarch64_be-unknown-linux-gnu_ilp32` targets.][81455]\n+- [Added tier 3 support for `i386-unknown-linux-gnu` and `i486-unknown-linux-gnu` targets.][80662]\n+- [The `target-cpu=native` option will now detect individual features of CPUs.][80749]\n+- [Rust now uses `inline-asm` for stack probes when used with LLVM 11.0.1+][77885]\n+\n+\\* Refer to Rust's [platform support page][forge-platform-support] for more\n+information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+\n+- [`Box::downcast` is now also implemented for any `dyn Any + Send + Sync` object.][80945]\n+- [`str` now implements `AsMut<str>`.][80279]\n+- [`u64` and `u128` now implement `From<char>`.][79502]\n+- [`Error` is now implemented for `&T` where `T` implements `Error`.][75180]\n+- [`Poll::{map_ok, map_err}` are now implemented for `Poll<Option<Result<T, E>>>`.][80968]\n+- [`unsigned_abs` is now implemented for all signed integer types.][80959]\n+- [`io::Empty` now implements `io::Seek`.][78044]\n+- [`rc::Weak<T>` and `sync::Weak<T>`'s methods such as `as_ptr` are now implemented for\n+  `T: ?Sized` types.][80764]\n+\n+Stabilized APIs\n+---------------\n+\n+- [`Arc::decrement_strong_count`]\n+- [`Arc::increment_strong_count`]\n+- [`Once::call_once_force`]\n+- [`Peekable::next_if_eq`]\n+- [`Peekable::next_if`]\n+- [`Seek::stream_position`]\n+- [`array::IntoIter`]\n+- [`panic::panic_any`]\n+- [`ptr::addr_of!`]\n+- [`ptr::addr_of_mut!`]\n+- [`slice::fill_with`]\n+- [`slice::split_inclusive_mut`]\n+- [`slice::split_inclusive`]\n+- [`slice::strip_prefix`]\n+- [`slice::strip_suffix`]\n+- [`str::split_inclusive`]\n+- [`sync::OnceState`]\n+- [`task::Wake`]\n+\n+Cargo\n+-----\n+- [Added the `split-debuginfo` profile option to control the -Csplit-debuginfo\n+  codegen option.][cargo/9112]\n+- [Added the `resolver` field to `Cargo.toml` to enable the new feature resolver\n+  and CLI option behavior.][cargo/8997] Version 2 of the feature resolver will try\n+  to avoid unifying features of dependencies where that unification could be unwanted.\n+  Such as using the same dependency with a `std` feature in a build scripts and\n+  proc-macros, while using the `no-std` feature in the final binary. See the\n+  [Cargo book documentation][feature-resolver@2.0] for more information on the feature.\n+\n+Rustdoc\n+-------\n+\n+- [Rustdoc will now include documentation for methods available from `Deref` traits.][80653]\n+- [You can now provide a `--default-theme` flag which sets the default theme to use for\n+  documentation.][79642]\n+\n+Various improvements to intra-doc links:\n+\n+- [You can link to non-path primitives such as `slice`.][80181]\n+- [You can link to associated items.][74489]\n+- [You can now include generic parameters when linking to items, like `Vec<T>`.][76934]\n+\n+Misc\n+----\n+- [You can now pass `--include-ignored` to tests (e.g. with\n+  `cargo test -- --include-ignored`) to include testing tests marked `#[ignore]`.][80053]\n+\n+Compatibility Notes\n+-------------------\n+\n+- [WASI platforms no longer use the `wasm-bindgen` ABI, and instead use the wasm32 ABI.][79998]\n+- [`rustc` no longer promotes division, modulo and indexing operations to `const` that\n+  could fail.][80579]\n+- [The minimum version of glibc for the following platforms has been bumped to version 2.31\n+  for the distributed artifacts.][81521]\n+    - `armv5te-unknown-linux-gnueabi`\n+    - `sparc64-unknown-linux-gnu`\n+    - `thumbv7neon-unknown-linux-gnueabihf`\n+    - `armv7-unknown-linux-gnueabi`\n+    - `x86_64-unknown-linux-gnux32`\n+\n+Internal Only\n+-------------\n+\n+- [Consistently avoid constructing optimized MIR when not doing codegen][80718]\n+\n+[79135]: https://github.com/rust-lang/rust/pull/79135\n+[74489]: https://github.com/rust-lang/rust/pull/74489\n+[76934]: https://github.com/rust-lang/rust/pull/76934\n+[79570]: https://github.com/rust-lang/rust/pull/79570\n+[80181]: https://github.com/rust-lang/rust/pull/80181\n+[79642]: https://github.com/rust-lang/rust/pull/79642\n+[80945]: https://github.com/rust-lang/rust/pull/80945\n+[80279]: https://github.com/rust-lang/rust/pull/80279\n+[80053]: https://github.com/rust-lang/rust/pull/80053\n+[79502]: https://github.com/rust-lang/rust/pull/79502\n+[75180]: https://github.com/rust-lang/rust/pull/75180\n+[79135]: https://github.com/rust-lang/rust/pull/79135\n+[81521]: https://github.com/rust-lang/rust/pull/81521\n+[80968]: https://github.com/rust-lang/rust/pull/80968\n+[80959]: https://github.com/rust-lang/rust/pull/80959\n+[80718]: https://github.com/rust-lang/rust/pull/80718\n+[80653]: https://github.com/rust-lang/rust/pull/80653\n+[80579]: https://github.com/rust-lang/rust/pull/80579\n+[79998]: https://github.com/rust-lang/rust/pull/79998\n+[78044]: https://github.com/rust-lang/rust/pull/78044\n+[81455]: https://github.com/rust-lang/rust/pull/81455\n+[80764]: https://github.com/rust-lang/rust/pull/80764\n+[80749]: https://github.com/rust-lang/rust/pull/80749\n+[80662]: https://github.com/rust-lang/rust/pull/80662\n+[77885]: https://github.com/rust-lang/rust/pull/77885\n+[cargo/8997]: https://github.com/rust-lang/cargo/pull/8997\n+[cargo/9112]: https://github.com/rust-lang/cargo/pull/9112\n+[feature-resolver@2.0]: https://doc.rust-lang.org/nightly/cargo/reference/features.html#feature-resolver-version-2\n+[`Once::call_once_force`]: https://doc.rust-lang.org/stable/std/sync/struct.Once.html#method.call_once_force\n+[`sync::OnceState`]: https://doc.rust-lang.org/stable/std/sync/struct.OnceState.html\n+[`panic::panic_any`]: https://doc.rust-lang.org/stable/std/panic/fn.panic_any.html\n+[`slice::strip_prefix`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.strip_prefix\n+[`slice::strip_suffix`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.strip_prefix\n+[`Arc::increment_strong_count`]: https://doc.rust-lang.org/nightly/std/sync/struct.Arc.html#method.increment_strong_count\n+[`Arc::decrement_strong_count`]: https://doc.rust-lang.org/nightly/std/sync/struct.Arc.html#method.decrement_strong_count\n+[`slice::fill_with`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.fill_with\n+[`ptr::addr_of!`]: https://doc.rust-lang.org/nightly/std/ptr/macro.addr_of.html\n+[`ptr::addr_of_mut!`]: https://doc.rust-lang.org/nightly/std/ptr/macro.addr_of_mut.html\n+[`array::IntoIter`]: https://doc.rust-lang.org/nightly/std/array/struct.IntoIter.html\n+[`slice::split_inclusive`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_inclusive\n+[`slice::split_inclusive_mut`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.split_inclusive_mut\n+[`str::split_inclusive`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_inclusive\n+[`task::Wake`]: https://doc.rust-lang.org/nightly/std/task/trait.Wake.html\n+[`Seek::stream_position`]: https://doc.rust-lang.org/nightly/std/io/trait.Seek.html#method.stream_position\n+[`Peekable::next_if`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if\n+[`Peekable::next_if_eq`]: https://doc.rust-lang.org/nightly/std/iter/struct.Peekable.html#method.next_if_eq\n+\n Version 1.50.0 (2021-02-11)\n ============================\n "}, {"sha": "10d48a55bb54ee614948e09c18c86b4c54ad174d", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -688,13 +688,13 @@ pub enum NonterminalKind {\n     Item,\n     Block,\n     Stmt,\n-    Pat2018 {\n-        /// Keep track of whether the user used `:pat2018` or `:pat` and we inferred it from the\n+    Pat2015 {\n+        /// Keep track of whether the user used `:pat2015` or `:pat` and we inferred it from the\n         /// edition of the span. This is used for diagnostics.\n         inferred: bool,\n     },\n     Pat2021 {\n-        /// Keep track of whether the user used `:pat2018` or `:pat` and we inferred it from the\n+        /// Keep track of whether the user used `:pat2015` or `:pat` and we inferred it from the\n         /// edition of the span. This is used for diagnostics.\n         inferred: bool,\n     },\n@@ -722,11 +722,11 @@ impl NonterminalKind {\n             sym::stmt => NonterminalKind::Stmt,\n             sym::pat => match edition() {\n                 Edition::Edition2015 | Edition::Edition2018 => {\n-                    NonterminalKind::Pat2018 { inferred: true }\n+                    NonterminalKind::Pat2015 { inferred: true }\n                 }\n                 Edition::Edition2021 => NonterminalKind::Pat2021 { inferred: true },\n             },\n-            sym::pat2018 => NonterminalKind::Pat2018 { inferred: false },\n+            sym::pat2015 => NonterminalKind::Pat2015 { inferred: false },\n             sym::pat2021 => NonterminalKind::Pat2021 { inferred: false },\n             sym::expr => NonterminalKind::Expr,\n             sym::ty => NonterminalKind::Ty,\n@@ -745,9 +745,9 @@ impl NonterminalKind {\n             NonterminalKind::Item => sym::item,\n             NonterminalKind::Block => sym::block,\n             NonterminalKind::Stmt => sym::stmt,\n-            NonterminalKind::Pat2018 { inferred: false } => sym::pat2018,\n+            NonterminalKind::Pat2015 { inferred: false } => sym::pat2015,\n             NonterminalKind::Pat2021 { inferred: false } => sym::pat2021,\n-            NonterminalKind::Pat2018 { inferred: true }\n+            NonterminalKind::Pat2015 { inferred: true }\n             | NonterminalKind::Pat2021 { inferred: true } => sym::pat,\n             NonterminalKind::Expr => sym::expr,\n             NonterminalKind::Ty => sym::ty,"}, {"sha": "9ed478e6fccce05d48293fabec00850d1f73c6b4", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -1080,7 +1080,7 @@ fn is_in_follow(tok: &mbe::TokenTree, kind: NonterminalKind) -> IsInFollow {\n                     _ => IsInFollow::No(TOKENS),\n                 }\n             }\n-            NonterminalKind::Pat2018 { .. } | NonterminalKind::Pat2021 { .. } => {\n+            NonterminalKind::Pat2015 { .. } | NonterminalKind::Pat2021 { .. } => {\n                 const TOKENS: &[&str] = &[\"`=>`\", \"`,`\", \"`=`\", \"`|`\", \"`if`\", \"`in`\"];\n                 match tok {\n                     TokenTree::Token(token) => match token.kind {"}, {"sha": "e205cb65d0229bbae499f2f7daeec0888f5f0790", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -63,13 +63,13 @@ pub(super) fn parse(\n                                     let span = token.span.with_lo(start_sp.lo());\n \n                                     match frag.name {\n-                                        sym::pat2018 | sym::pat2021 => {\n+                                        sym::pat2015 | sym::pat2021 => {\n                                             if !features.edition_macro_pats {\n                                                 feature_err(\n                                                     sess,\n                                                     sym::edition_macro_pats,\n                                                     frag.span,\n-                                                    \"`pat2018` and `pat2021` are unstable.\",\n+                                                    \"`pat2015` and `pat2021` are unstable.\",\n                                                 )\n                                                 .emit();\n                                             }"}, {"sha": "fb08a7b8cea0df34105a503f4554cea3692232aa", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -611,7 +611,7 @@ declare_features! (\n     /// Allows arbitrary expressions in key-value attributes at parse time.\n     (active, extended_key_value_attributes, \"1.50.0\", Some(78835), None),\n \n-    /// `:pat2018` and `:pat2021` macro matchers.\n+    /// `:pat2015` and `:pat2021` macro matchers.\n     (active, edition_macro_pats, \"1.51.0\", Some(54883), None),\n \n     /// Allows const generics to have default values (e.g. `struct Foo<const N: usize = 3>(...);`)."}, {"sha": "fc25e883666d1f85f2d9ea5059b6b5561e3c01fc", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -61,7 +61,7 @@ impl<'a> Parser<'a> {\n                 },\n                 _ => false,\n             },\n-            NonterminalKind::Pat2018 { .. } | NonterminalKind::Pat2021 { .. } => match token.kind {\n+            NonterminalKind::Pat2015 { .. } | NonterminalKind::Pat2021 { .. } => match token.kind {\n                 token::Ident(..) |                  // box, ref, mut, and other identifiers (can stricten)\n                 token::OpenDelim(token::Paren) |    // tuple pattern\n                 token::OpenDelim(token::Bracket) |  // slice pattern\n@@ -118,9 +118,9 @@ impl<'a> Parser<'a> {\n                     return Err(self.struct_span_err(self.token.span, \"expected a statement\"));\n                 }\n             },\n-            NonterminalKind::Pat2018 { .. } | NonterminalKind::Pat2021 { .. } => {\n+            NonterminalKind::Pat2015 { .. } | NonterminalKind::Pat2021 { .. } => {\n                 token::NtPat(self.collect_tokens_no_attrs(|this| match kind {\n-                    NonterminalKind::Pat2018 { .. } => this.parse_pat_no_top_alt(None),\n+                    NonterminalKind::Pat2015 { .. } => this.parse_pat_no_top_alt(None),\n                     NonterminalKind::Pat2021 { .. } => {\n                         this.parse_pat_allow_top_alt(None, RecoverComma::No)\n                     }"}, {"sha": "42e01f1b8d1fe0803dd364f31c6e19f986c2bd75", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -845,7 +845,7 @@ symbols! {\n         partial_ord,\n         passes,\n         pat,\n-        pat2018,\n+        pat2015,\n         pat2021,\n         path,\n         pattern_parentheses,"}, {"sha": "eb38adb0b73ab8403494266e72c288b6b8eefc58", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -29,3 +29,6 @@ features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"]\n \n [dev-dependencies]\n expect-test = \"1.0\"\n+\n+[package.metadata.rust-analyzer]\n+rustc_private = true"}, {"sha": "68d70f27c8c7888acb6360295c73cc375db10cfc", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -88,7 +88,6 @@ crate fn render<T: Print, S: Print>(\n         </button>\\\n         <div id=\\\"theme-choices\\\" role=\\\"menu\\\"></div>\\\n     </div>\\\n-    <script src=\\\"{static_root_path}theme{suffix}.js\\\"></script>\\\n     <nav class=\\\"sub\\\">\\\n         <form class=\\\"search-form\\\">\\\n             <div class=\\\"search-container\\\">\\"}, {"sha": "b39f9f878921a9b9b2fac73ffe3ba9739e2d53a5", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -690,25 +690,29 @@ crate fn find_testable_code<T: doctest::Tester>(\n }\n \n crate struct ExtraInfo<'tcx> {\n-    hir_id: Option<HirId>,\n-    item_did: Option<DefId>,\n+    id: ExtraInfoId,\n     sp: Span,\n     tcx: TyCtxt<'tcx>,\n }\n \n+enum ExtraInfoId {\n+    Hir(HirId),\n+    Def(DefId),\n+}\n+\n impl<'tcx> ExtraInfo<'tcx> {\n     crate fn new(tcx: TyCtxt<'tcx>, hir_id: HirId, sp: Span) -> ExtraInfo<'tcx> {\n-        ExtraInfo { hir_id: Some(hir_id), item_did: None, sp, tcx }\n+        ExtraInfo { id: ExtraInfoId::Hir(hir_id), sp, tcx }\n     }\n \n     crate fn new_did(tcx: TyCtxt<'tcx>, did: DefId, sp: Span) -> ExtraInfo<'tcx> {\n-        ExtraInfo { hir_id: None, item_did: Some(did), sp, tcx }\n+        ExtraInfo { id: ExtraInfoId::Def(did), sp, tcx }\n     }\n \n     fn error_invalid_codeblock_attr(&self, msg: &str, help: &str) {\n-        let hir_id = match (self.hir_id, self.item_did) {\n-            (Some(h), _) => h,\n-            (None, Some(item_did)) => {\n+        let hir_id = match self.id {\n+            ExtraInfoId::Hir(hir_id) => hir_id,\n+            ExtraInfoId::Def(item_did) => {\n                 match item_did.as_local() {\n                     Some(item_did) => self.tcx.hir().local_def_id_to_hir_id(item_did),\n                     None => {\n@@ -717,7 +721,6 @@ impl<'tcx> ExtraInfo<'tcx> {\n                     }\n                 }\n             }\n-            (None, None) => return,\n         };\n         self.tcx.struct_span_lint_hir(\n             crate::lint::INVALID_CODEBLOCK_ATTRIBUTES,"}, {"sha": "501d8e8e02e8469d29183c0cf4b6eb9440415c52", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 8, "deletions": 58, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -30,8 +30,9 @@ crate static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| {\n         \"SourceSerifPro-Bold.ttf.woff\" => static_files::source_serif_pro::BOLD,\n         \"SourceSerifPro-It.ttf.woff\" => static_files::source_serif_pro::ITALIC,\n         \"SourceSerifPro-LICENSE.md\" => static_files::source_serif_pro::LICENSE,\n-        \"SourceCodePro-Regular.woff\" => static_files::source_code_pro::REGULAR,\n-        \"SourceCodePro-Semibold.woff\" => static_files::source_code_pro::SEMIBOLD,\n+        \"SourceCodePro-Regular.ttf.woff\" => static_files::source_code_pro::REGULAR,\n+        \"SourceCodePro-Semibold.ttf.woff\" => static_files::source_code_pro::SEMIBOLD,\n+        \"SourceCodePro-It.ttf.woff\" => static_files::source_code_pro::ITALIC,\n         \"SourceCodePro-LICENSE.txt\" => static_files::source_code_pro::LICENSE,\n         \"LICENSE-MIT.txt\" => static_files::LICENSE_MIT,\n         \"LICENSE-APACHE.txt\" => static_files::LICENSE_APACHE,\n@@ -129,65 +130,14 @@ pub(super) fn write_shared(\n \n     let mut themes: Vec<&String> = themes.iter().collect();\n     themes.sort();\n-    // To avoid theme switch latencies as much as possible, we put everything theme related\n-    // at the beginning of the html files into another js file.\n-    let theme_js = format!(\n-        r#\"var themes = document.getElementById(\"theme-choices\");\n-var themePicker = document.getElementById(\"theme-picker\");\n-\n-function showThemeButtonState() {{\n-    themes.style.display = \"block\";\n-    themePicker.style.borderBottomRightRadius = \"0\";\n-    themePicker.style.borderBottomLeftRadius = \"0\";\n-}}\n-\n-function hideThemeButtonState() {{\n-    themes.style.display = \"none\";\n-    themePicker.style.borderBottomRightRadius = \"3px\";\n-    themePicker.style.borderBottomLeftRadius = \"3px\";\n-}}\n-\n-function switchThemeButtonState() {{\n-    if (themes.style.display === \"block\") {{\n-        hideThemeButtonState();\n-    }} else {{\n-        showThemeButtonState();\n-    }}\n-}};\n-\n-function handleThemeButtonsBlur(e) {{\n-    var active = document.activeElement;\n-    var related = e.relatedTarget;\n-\n-    if (active.id !== \"theme-picker\" &&\n-        (!active.parentNode || active.parentNode.id !== \"theme-choices\") &&\n-        (!related ||\n-         (related.id !== \"theme-picker\" &&\n-          (!related.parentNode || related.parentNode.id !== \"theme-choices\")))) {{\n-        hideThemeButtonState();\n-    }}\n-}}\n-\n-themePicker.onclick = switchThemeButtonState;\n-themePicker.onblur = handleThemeButtonsBlur;\n-{}.forEach(function(item) {{\n-    var but = document.createElement(\"button\");\n-    but.textContent = item;\n-    but.onclick = function(el) {{\n-        switchTheme(currentTheme, mainTheme, item, true);\n-        useSystemTheme(false);\n-    }};\n-    but.onblur = handleThemeButtonsBlur;\n-    themes.appendChild(but);\n-}});\"#,\n-        serde_json::to_string(&themes).unwrap()\n-    );\n-\n-    write_minify(&cx.shared.fs, cx.path(\"theme.js\"), &theme_js, options.enable_minification)?;\n+\n     write_minify(\n         &cx.shared.fs,\n         cx.path(\"main.js\"),\n-        static_files::MAIN_JS,\n+        &static_files::MAIN_JS.replace(\n+            \"/* INSERT THEMES HERE */\",\n+            &format!(\" = {}\", serde_json::to_string(&themes).unwrap()),\n+        ),\n         options.enable_minification,\n     )?;\n     write_minify("}, {"sha": "24bdca6544d6dc988d93b1d0e72e9ebba3a4c74a", "filename": "src/librustdoc/html/static/COPYRIGHT.txt", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FCOPYRIGHT.txt?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -23,7 +23,8 @@ included, and carry their own copyright notices and license terms:\n     Copyright (c) Nicolas Gallagher and Jonathan Neal.\n     Licensed under the MIT license (see LICENSE-MIT.txt).\n \n-* Source Code Pro (SourceCodePro-Regular.woff, SourceCodePro-Semibold.woff):\n+* Source Code Pro (SourceCodePro-Regular.ttf.woff,\n+    SourceCodePro-Semibold.ttf.woff, SourceCodePro-It.ttf.woff):\n \n     Copyright 2010, 2012 Adobe Systems Incorporated (http://www.adobe.com/),\n     with Reserved Font Name 'Source'. All Rights Reserved. Source is a trademark"}, {"sha": "8d68f2febddb04dd6e768a4939d63eb7a1f4a139", "filename": "src/librustdoc/html/static/SourceCodePro-It.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-It.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-It.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-It.ttf.woff?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed"}, {"sha": "7be076e1fca99ac23aba68ccfb6e4b94b776b772", "filename": "src/librustdoc/html/static/SourceCodePro-Regular.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.ttf.woff?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed"}, {"sha": "5576670903aea90041f214624c8dd1176fdf6081", "filename": "src/librustdoc/html/static/SourceCodePro-Regular.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Regular.woff?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800"}, {"sha": "61bc67b80252dc41fef75b08604adc1a09c34761", "filename": "src/librustdoc/html/static/SourceCodePro-Semibold.ttf.woff", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.ttf.woff", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.ttf.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.ttf.woff?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed"}, {"sha": "ca972a11dc428209dd66212e382b884f168e83f7", "filename": "src/librustdoc/html/static/SourceCodePro-Semibold.woff", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff", "raw_url": "https://github.com/rust-lang/rust/raw/5d04957a4b4714f71d38326fc96a0b0ef6dc5800/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2FSourceCodePro-Semibold.woff?ref=5d04957a4b4714f71d38326fc96a0b0ef6dc5800"}, {"sha": "da2952bbebdbe5e19fd0802aa6e673bf8fefd7a3", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -2,7 +2,7 @@\n // Local js definitions:\n /* global addClass, getSettingValue, hasClass */\n /* global onEach, onEachLazy, hasOwnProperty, removeClass, updateLocalStorage */\n-/* global hideThemeButtonState, showThemeButtonState */\n+/* global switchTheme, useSystemTheme */\n \n if (!String.prototype.startsWith) {\n     String.prototype.startsWith = function(searchString, position) {\n@@ -85,12 +85,15 @@ function getSearchElement() {\n     return document.getElementById(\"search\");\n }\n \n+var THEME_PICKER_ELEMENT_ID = \"theme-picker\";\n+var THEMES_ELEMENT_ID = \"theme-choices\";\n+\n function getThemesElement() {\n-    return document.getElementById(\"theme-choices\");\n+    return document.getElementById(THEMES_ELEMENT_ID);\n }\n \n function getThemePickerElement() {\n-    return document.getElementById(\"theme-picker\");\n+    return document.getElementById(THEME_PICKER_ELEMENT_ID);\n }\n \n // Returns the current URL without any query parameter or hash.\n@@ -108,6 +111,65 @@ function defocusSearchBar() {\n     getSearchInput().blur();\n }\n \n+function showThemeButtonState() {\n+    var themePicker = getThemePickerElement();\n+    var themeChoices = getThemesElement();\n+\n+    themeChoices.style.display = \"block\";\n+    themePicker.style.borderBottomRightRadius = \"0\";\n+    themePicker.style.borderBottomLeftRadius = \"0\";\n+}\n+\n+function hideThemeButtonState() {\n+    var themePicker = getThemePickerElement();\n+    var themeChoices = getThemesElement();\n+\n+    themeChoices.style.display = \"none\";\n+    themePicker.style.borderBottomRightRadius = \"3px\";\n+    themePicker.style.borderBottomLeftRadius = \"3px\";\n+}\n+\n+// Set up the theme picker list.\n+(function () {\n+    var themeChoices = getThemesElement();\n+    var themePicker = getThemePickerElement();\n+    var availableThemes/* INSERT THEMES HERE */;\n+\n+    function switchThemeButtonState() {\n+        if (themeChoices.style.display === \"block\") {\n+            hideThemeButtonState();\n+        } else {\n+            showThemeButtonState();\n+        }\n+    }\n+\n+    function handleThemeButtonsBlur(e) {\n+        var active = document.activeElement;\n+        var related = e.relatedTarget;\n+\n+        if (active.id !== THEME_PICKER_ELEMENT_ID &&\n+            (!active.parentNode || active.parentNode.id !== THEMES_ELEMENT_ID) &&\n+            (!related ||\n+             (related.id !== THEME_PICKER_ELEMENT_ID &&\n+              (!related.parentNode || related.parentNode.id !== THEMES_ELEMENT_ID)))) {\n+            hideThemeButtonState();\n+        }\n+    }\n+\n+    themePicker.onclick = switchThemeButtonState;\n+    themePicker.onblur = handleThemeButtonsBlur;\n+    availableThemes.forEach(function(item) {\n+        var but = document.createElement(\"button\");\n+        but.textContent = item;\n+        but.onclick = function() {\n+            switchTheme(window.currentTheme, window.mainTheme, item, true);\n+            useSystemTheme(false);\n+        };\n+        but.onblur = handleThemeButtonsBlur;\n+        themeChoices.appendChild(but);\n+    });\n+}());\n+\n (function() {\n     \"use strict\";\n \n@@ -461,8 +523,7 @@ function defocusSearchBar() {\n                 break;\n \n             default:\n-                var themePicker = getThemePickerElement();\n-                if (themePicker.parentNode.contains(ev.target)) {\n+                if (getThemePickerElement().parentNode.contains(ev.target)) {\n                     handleThemeKeyDown(ev);\n                 }\n             }\n@@ -475,7 +536,7 @@ function defocusSearchBar() {\n         switch (getVirtualKey(ev)) {\n         case \"ArrowUp\":\n             ev.preventDefault();\n-            if (active.previousElementSibling && ev.target.id !== \"theme-picker\") {\n+            if (active.previousElementSibling && ev.target.id !== THEME_PICKER_ELEMENT_ID) {\n                 active.previousElementSibling.focus();\n             } else {\n                 showThemeButtonState();\n@@ -484,7 +545,7 @@ function defocusSearchBar() {\n             break;\n         case \"ArrowDown\":\n             ev.preventDefault();\n-            if (active.nextElementSibling && ev.target.id !== \"theme-picker\") {\n+            if (active.nextElementSibling && ev.target.id !== THEME_PICKER_ELEMENT_ID) {\n                 active.nextElementSibling.focus();\n             } else {\n                 showThemeButtonState();\n@@ -494,7 +555,7 @@ function defocusSearchBar() {\n         case \"Enter\":\n         case \"Return\":\n         case \"Space\":\n-            if (ev.target.id === \"theme-picker\" && themes.style.display === \"none\") {\n+            if (ev.target.id === THEME_PICKER_ELEMENT_ID && themes.style.display === \"none\") {\n                 ev.preventDefault();\n                 showThemeButtonState();\n                 themes.firstElementChild.focus();"}, {"sha": "a65b4ce3a0373a5c2a8e17008db8e55037fa9015", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -48,14 +48,21 @@\n \tfont-weight: 400;\n \t/* Avoid using locally installed font because bad versions are in circulation:\n \t * see https://github.com/rust-lang/rust/issues/24355 */\n-\tsrc: url(\"SourceCodePro-Regular.woff\") format('woff');\n+\tsrc: url(\"SourceCodePro-Regular.ttf.woff\") format('woff');\n+\tfont-display: swap;\n+}\n+@font-face {\n+\tfont-family: 'Source Code Pro';\n+\tfont-style: italic;\n+\tfont-weight: 400;\n+\tsrc: url(\"SourceCodePro-It.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n @font-face {\n \tfont-family: 'Source Code Pro';\n \tfont-style: normal;\n \tfont-weight: 600;\n-\tsrc: url(\"SourceCodePro-Semibold.woff\") format('woff');\n+\tsrc: url(\"SourceCodePro-Semibold.ttf.woff\") format('woff');\n \tfont-display: swap;\n }\n "}, {"sha": "c68128516d252df82d1f873452bd17c8ca8e62c6", "filename": "src/librustdoc/html/static/storage.js", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fstorage.js?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -2,8 +2,8 @@\n /* global resourcesSuffix */\n \n var darkThemes = [\"dark\", \"ayu\"];\n-var currentTheme = document.getElementById(\"themeStyle\");\n-var mainTheme = document.getElementById(\"mainThemeStyle\");\n+window.currentTheme = document.getElementById(\"themeStyle\");\n+window.mainTheme = document.getElementById(\"mainThemeStyle\");\n \n var settingsDataset = (function () {\n     var settingsElement = document.getElementById(\"default-settings\");\n@@ -137,7 +137,7 @@ function switchTheme(styleElem, mainStyleElem, newTheme, saveTheme) {\n     }\n }\n \n-// This function is called from \"theme.js\", generated in `html/render/mod.rs`.\n+// This function is called from \"main.js\".\n // eslint-disable-next-line no-unused-vars\n function useSystemTheme(value) {\n     if (value === undefined) {\n@@ -161,8 +161,8 @@ var updateSystemTheme = (function() {\n                 .getPropertyValue('content');\n \n             switchTheme(\n-                currentTheme,\n-                mainTheme,\n+                window.currentTheme,\n+                window.mainTheme,\n                 JSON.parse(cssTheme) || \"light\",\n                 true\n             );\n@@ -180,10 +180,10 @@ var updateSystemTheme = (function() {\n \n             if (mql.matches) {\n                 // prefers a dark theme\n-                switchTheme(currentTheme, mainTheme, darkTheme, true);\n+                switchTheme(window.currentTheme, window.mainTheme, darkTheme, true);\n             } else {\n                 // prefers a light theme, or has no preference\n-                switchTheme(currentTheme, mainTheme, lightTheme, true);\n+                switchTheme(window.currentTheme, window.mainTheme, lightTheme, true);\n             }\n \n             // note: we save the theme so that it doesn't suddenly change when\n@@ -212,8 +212,8 @@ if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n     updateSystemTheme();\n } else {\n     switchTheme(\n-        currentTheme,\n-        mainTheme,\n+        window.currentTheme,\n+        window.mainTheme,\n         getSettingValue(\"theme\") || \"light\",\n         false\n     );"}, {"sha": "83d4a11e620a99127aa81c02e8fbbebdf2038f46", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -107,11 +107,15 @@ crate mod source_serif_pro {\n \n /// Files related to the Source Code Pro font.\n crate mod source_code_pro {\n-    /// The file `SourceCodePro-Regular.woff`, the Regular variant of the Source Code Pro font.\n-    crate static REGULAR: &[u8] = include_bytes!(\"static/SourceCodePro-Regular.woff\");\n+    /// The file `SourceCodePro-Regular.ttf.woff`, the Regular variant of the Source Code Pro font.\n+    crate static REGULAR: &[u8] = include_bytes!(\"static/SourceCodePro-Regular.ttf.woff\");\n \n-    /// The file `SourceCodePro-Semibold.woff`, the Semibold variant of the Source Code Pro font.\n-    crate static SEMIBOLD: &[u8] = include_bytes!(\"static/SourceCodePro-Semibold.woff\");\n+    /// The file `SourceCodePro-Semibold.ttf.woff`, the Semibold variant of the Source Code Pro\n+    /// font.\n+    crate static SEMIBOLD: &[u8] = include_bytes!(\"static/SourceCodePro-Semibold.ttf.woff\");\n+\n+    /// The file `SourceCodePro-It.ttf.woff`, the Italic variant of the Source Code Pro font.\n+    crate static ITALIC: &[u8] = include_bytes!(\"static/SourceCodePro-It.ttf.woff\");\n \n     /// The file `SourceCodePro-LICENSE.txt`, the license text of the Source Code Pro font.\n     crate static LICENSE: &[u8] = include_bytes!(\"static/SourceCodePro-LICENSE.txt\");"}, {"sha": "befbdab0ad9bc92e878254c44044fefba187dadf", "filename": "src/test/run-make-fulldeps/print-unversioned-files/unversioned-files.txt", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fprint-unversioned-files%2Funversioned-files.txt?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -6,9 +6,10 @@ FiraSans-Regular.woff\n FiraSans-Regular.woff2\n LICENSE-APACHE.txt\n LICENSE-MIT.txt\n+SourceCodePro-It.ttf.woff\n SourceCodePro-LICENSE.txt\n-SourceCodePro-Regular.woff\n-SourceCodePro-Semibold.woff\n+SourceCodePro-Regular.ttf.woff\n+SourceCodePro-Semibold.ttf.woff\n SourceSerifPro-Bold.ttf.woff\n SourceSerifPro-It.ttf.woff\n SourceSerifPro-LICENSE.md"}, {"sha": "430a9437cee34e2b717a0a954194ea2dbfbfe0b3", "filename": "src/test/ui/feature-gates/feature-gate-edition_macro_pats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -1,8 +1,8 @@\n // Feature gate test for `edition_macro_pats` feature.\n \n macro_rules! foo {\n-    ($x:pat2018) => {}; //~ERROR `pat2018` and `pat2021` are unstable\n-    ($x:pat2021) => {}; //~ERROR `pat2018` and `pat2021` are unstable\n+    ($x:pat2015) => {}; //~ERROR `pat2015` and `pat2021` are unstable\n+    ($x:pat2021) => {}; //~ERROR `pat2015` and `pat2021` are unstable\n }\n \n fn main() {}"}, {"sha": "d25bcaf929bcddfcb5a6fc309e402b1b0350716f", "filename": "src/test/ui/feature-gates/feature-gate-edition_macro_pats.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-edition_macro_pats.stderr?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -1,13 +1,13 @@\n-error[E0658]: `pat2018` and `pat2021` are unstable.\n+error[E0658]: `pat2015` and `pat2021` are unstable.\n   --> $DIR/feature-gate-edition_macro_pats.rs:4:9\n    |\n-LL |     ($x:pat2018) => {};\n+LL |     ($x:pat2015) => {};\n    |         ^^^^^^^\n    |\n    = note: see issue #54883 <https://github.com/rust-lang/rust/issues/54883> for more information\n    = help: add `#![feature(edition_macro_pats)]` to the crate attributes to enable\n \n-error[E0658]: `pat2018` and `pat2021` are unstable.\n+error[E0658]: `pat2015` and `pat2021` are unstable.\n   --> $DIR/feature-gate-edition_macro_pats.rs:5:9\n    |\n LL |     ($x:pat2021) => {};"}, {"sha": "58f92710305832800e2e82bbb4d99c991443fe30", "filename": "src/test/ui/macros/edition-macro-pats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bd94f4aa9683158c7df96b9661be193c39a55ed/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fedition-macro-pats.rs?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -3,7 +3,7 @@\n #![feature(edition_macro_pats)]\n \n macro_rules! foo {\n-    (a $x:pat2018) => {};\n+    (a $x:pat2015) => {};\n     (b $x:pat2021) => {};\n }\n "}, {"sha": "858ad554374a8b1ad67692558a0878391abfdd86", "filename": "src/tools/rust-analyzer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-analyzer?ref=2bd94f4aa9683158c7df96b9661be193c39a55ed", "patch": "@@ -1 +1 @@\n-Subproject commit 5ba7852cf153688d5b5035a9a2a2145aa7334d79\n+Subproject commit 858ad554374a8b1ad67692558a0878391abfdd86"}]}