{"sha": "455a7bc685e2c8f93f8d63547b368b0f66ed0806", "node_id": "C_kwDOAAsO6NoAKDQ1NWE3YmM2ODVlMmM4ZjkzZjhkNjM1NDdiMzY4YjBmNjZlZDA4MDY", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-10-31T14:43:15Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-11-06T22:11:02Z"}, "message": "Bump version placeholders to release", "tree": {"sha": "7615670667b93e66d4d58d6a1e0063f4b226f074", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7615670667b93e66d4d58d6a1e0063f4b226f074"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/455a7bc685e2c8f93f8d63547b368b0f66ed0806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/455a7bc685e2c8f93f8d63547b368b0f66ed0806", "html_url": "https://github.com/rust-lang/rust/commit/455a7bc685e2c8f93f8d63547b368b0f66ed0806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/455a7bc685e2c8f93f8d63547b368b0f66ed0806/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7eef946fc0e0eff40e588eab77b09b287accbec3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7eef946fc0e0eff40e588eab77b09b287accbec3", "html_url": "https://github.com/rust-lang/rust/commit/7eef946fc0e0eff40e588eab77b09b287accbec3"}], "stats": {"total": 102, "additions": 51, "deletions": 51}, "files": [{"sha": "1646727a1c85f9b72f14f01596b72d8a42929184", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -54,9 +54,9 @@ declare_features! (\n     /// Allows using ADX intrinsics from `core::arch::{x86, x86_64}`.\n     (accepted, adx_target_feature, \"1.61.0\", Some(44839), None),\n     /// Allows explicit discriminants on non-unit enum variants.\n-    (accepted, arbitrary_enum_discriminant, \"CURRENT_RUSTC_VERSION\", Some(60553), None),\n+    (accepted, arbitrary_enum_discriminant, \"1.66.0\", Some(60553), None),\n     /// Allows using `sym` operands in inline assembly.\n-    (accepted, asm_sym, \"CURRENT_RUSTC_VERSION\", Some(93333), None),\n+    (accepted, asm_sym, \"1.66.0\", Some(93333), None),\n     /// Allows the definition of associated constants in `trait` or `impl` blocks.\n     (accepted, associated_consts, \"1.20.0\", Some(29646), None),\n     /// Allows using associated `type`s in `trait`s.\n@@ -174,7 +174,7 @@ declare_features! (\n     // FIXME: explain `globs`.\n     (accepted, globs, \"1.0.0\", None, None),\n     /// Allows using `..=X` as a pattern.\n-    (accepted, half_open_range_patterns, \"CURRENT_RUSTC_VERSION\", Some(67264), None),\n+    (accepted, half_open_range_patterns, \"1.66.0\", Some(67264), None),\n     /// Allows using the `u128` and `i128` types.\n     (accepted, i128_type, \"1.26.0\", Some(35118), None),\n     /// Allows the use of `if let` expressions."}, {"sha": "8ca5bfead66e661584190ad0cff69aa7c9b7e450", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -309,7 +309,7 @@ declare_features! (\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n     /// Alows async functions to be declared, implemented, and used in traits.\n-    (incomplete, async_fn_in_trait, \"CURRENT_RUSTC_VERSION\", Some(91611), None),\n+    (incomplete, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n     /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n@@ -412,7 +412,7 @@ declare_features! (\n     /// Allows non-trivial generic constants which have to have wfness manually propagated to callers\n     (incomplete, generic_const_exprs, \"1.56.0\", Some(76560), None),\n     /// Allows using `..=X` as a patterns in slices.\n-    (active, half_open_range_patterns_in_slices, \"CURRENT_RUSTC_VERSION\", Some(67264), None),\n+    (active, half_open_range_patterns_in_slices, \"1.66.0\", Some(67264), None),\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n     /// Allows `impl Trait` as output type in `Fn` traits in return position of functions."}, {"sha": "97186589a4f4c30f1f0d935e61dca057c9b9e634", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -1661,7 +1661,7 @@ impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]> {\n }\n \n #[cfg(not(no_global_oom_handling))]\n-#[stable(feature = \"boxed_array_try_from_vec\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"boxed_array_try_from_vec\", since = \"1.66.0\")]\n impl<T, const N: usize> TryFrom<Vec<T>> for Box<[T; N]> {\n     type Error = Vec<T>;\n "}, {"sha": "8a77193471234fb7149e0ec2fc80f7cd18fd98c7", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -580,7 +580,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// map.insert(1, \"a\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_btree_new\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_btree_new\", since = \"1.66.0\")]\n     #[must_use]\n     pub const fn new() -> BTreeMap<K, V> {\n         BTreeMap { root: None, length: 0, alloc: ManuallyDrop::new(Global), _marker: PhantomData }\n@@ -711,7 +711,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// map.insert(2, \"a\");\n     /// assert_eq!(map.first_key_value(), Some((&1, &\"b\")));\n     /// ```\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn first_key_value(&self) -> Option<(&K, &V)>\n     where\n         K: Ord,\n@@ -739,7 +739,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// assert_eq!(*map.get(&1).unwrap(), \"first\");\n     /// assert_eq!(*map.get(&2).unwrap(), \"b\");\n     /// ```\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn first_entry(&mut self) -> Option<OccupiedEntry<'_, K, V, A>>\n     where\n         K: Ord,\n@@ -773,7 +773,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// }\n     /// assert!(map.is_empty());\n     /// ```\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn pop_first(&mut self) -> Option<(K, V)>\n     where\n         K: Ord,\n@@ -796,7 +796,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// map.insert(2, \"a\");\n     /// assert_eq!(map.last_key_value(), Some((&2, &\"a\")));\n     /// ```\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn last_key_value(&self) -> Option<(&K, &V)>\n     where\n         K: Ord,\n@@ -824,7 +824,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// assert_eq!(*map.get(&1).unwrap(), \"a\");\n     /// assert_eq!(*map.get(&2).unwrap(), \"last\");\n     /// ```\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn last_entry(&mut self) -> Option<OccupiedEntry<'_, K, V, A>>\n     where\n         K: Ord,\n@@ -858,7 +858,7 @@ impl<K, V, A: Allocator + Clone> BTreeMap<K, V, A> {\n     /// }\n     /// assert!(map.is_empty());\n     /// ```\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn pop_last(&mut self) -> Option<(K, V)>\n     where\n         K: Ord,"}, {"sha": "4ddb211925202f45b27248d46f0c0e5888d17b1f", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -343,7 +343,7 @@ impl<T> BTreeSet<T> {\n     /// let mut set: BTreeSet<i32> = BTreeSet::new();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_stable(feature = \"const_btree_new\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[rustc_const_stable(feature = \"const_btree_new\", since = \"1.66.0\")]\n     #[must_use]\n     pub const fn new() -> BTreeSet<T> {\n         BTreeSet { map: BTreeMap::new() }\n@@ -796,7 +796,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// assert_eq!(set.first(), Some(&1));\n     /// ```\n     #[must_use]\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn first(&self) -> Option<&T>\n     where\n         T: Ord,\n@@ -822,7 +822,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// assert_eq!(set.last(), Some(&2));\n     /// ```\n     #[must_use]\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn last(&self) -> Option<&T>\n     where\n         T: Ord,\n@@ -846,7 +846,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// }\n     /// assert!(set.is_empty());\n     /// ```\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn pop_first(&mut self) -> Option<T>\n     where\n         T: Ord,\n@@ -870,7 +870,7 @@ impl<T, A: Allocator + Clone> BTreeSet<T, A> {\n     /// }\n     /// assert!(set.is_empty());\n     /// ```\n-    #[stable(feature = \"map_first_last\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"map_first_last\", since = \"1.66.0\")]\n     pub fn pop_last(&mut self) -> Option<T>\n     where\n         T: Ord,"}, {"sha": "c9c7cdf4defc6d16e67b68a22f571eee4ab21d15", "filename": "library/core/src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -493,7 +493,7 @@ impl Error for crate::char::ParseCharError {\n     }\n }\n \n-#[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n impl Error for crate::time::TryFromFloatSecsError {}\n \n #[stable(feature = \"frombyteswithnulerror_impls\", since = \"1.17.0\")]"}, {"sha": "c53175ba4f3f0f7bb23c701eda24d79abfae5926", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -220,7 +220,7 @@ pub fn spin_loop() {\n ///\n /// [`std::convert::identity`]: crate::convert::identity\n #[inline]\n-#[stable(feature = \"bench_black_box\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"bench_black_box\", since = \"1.66.0\")]\n #[rustc_const_unstable(feature = \"const_black_box\", issue = \"none\")]\n pub const fn black_box<T>(dummy: T) -> T {\n     crate::intrinsics::black_box(dummy)"}, {"sha": "914dca61bc0c64040b4146826c0f1fab3d030ba5", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -467,8 +467,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_add_unsigned(2), Some(3));\")]\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add_unsigned(3), None);\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -535,8 +535,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_sub_unsigned(2), Some(-1));\")]\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MIN + 2).checked_sub_unsigned(3), None);\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -905,8 +905,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".saturating_add_unsigned(2), 3);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_add_unsigned(100), \", stringify!($SelfT), \"::MAX);\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -951,8 +951,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".saturating_sub_unsigned(127), -27);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_sub_unsigned(100), \", stringify!($SelfT), \"::MIN);\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1129,8 +1129,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(100\", stringify!($SelfT), \".wrapping_add_unsigned(27), 127);\")]\n         #[doc = concat!(\"assert_eq!(\", stringify!($SelfT), \"::MAX.wrapping_add_unsigned(2), \", stringify!($SelfT), \"::MIN + 1);\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n@@ -1169,8 +1169,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!(0\", stringify!($SelfT), \".wrapping_sub_unsigned(127), -127);\")]\n         #[doc = concat!(\"assert_eq!((-2\", stringify!($SelfT), \").wrapping_sub_unsigned(\", stringify!($UnsignedT), \"::MAX), -1);\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline(always)]\n@@ -1566,8 +1566,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MIN).overflowing_add_unsigned(\", stringify!($UnsignedT), \"::MAX), (\", stringify!($SelfT), \"::MAX, false));\")]\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).overflowing_add_unsigned(3), (\", stringify!($SelfT), \"::MIN, true));\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1648,8 +1648,8 @@ macro_rules! int_impl {\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX).overflowing_sub_unsigned(\", stringify!($UnsignedT), \"::MAX), (\", stringify!($SelfT), \"::MIN, false));\")]\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MIN + 2).overflowing_sub_unsigned(3), (\", stringify!($SelfT), \"::MAX, true));\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "335cc5124047a5beb1d973f91bc4ef64c112b651", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -478,8 +478,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".checked_add_signed(-2), None);\")]\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).checked_add_signed(3), None);\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1025,8 +1025,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".saturating_add_signed(-2), 0);\")]\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).saturating_add_signed(4), \", stringify!($SelfT), \"::MAX);\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1165,8 +1165,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".wrapping_add_signed(-2), \", stringify!($SelfT), \"::MAX);\")]\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).wrapping_add_signed(4), 1);\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]\n@@ -1534,8 +1534,8 @@ macro_rules! uint_impl {\n         #[doc = concat!(\"assert_eq!(1\", stringify!($SelfT), \".overflowing_add_signed(-2), (\", stringify!($SelfT), \"::MAX, true));\")]\n         #[doc = concat!(\"assert_eq!((\", stringify!($SelfT), \"::MAX - 2).overflowing_add_signed(4), (1, true));\")]\n         /// ```\n-        #[stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n-        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"CURRENT_RUSTC_VERSION\")]\n+        #[stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n+        #[rustc_const_stable(feature = \"mixed_integer_ops\", since = \"1.66.0\")]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n         #[inline]"}, {"sha": "f284b43595576e837d3e3054e8959aa403d799ea", "filename": "library/core/src/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -1720,7 +1720,7 @@ impl<T, U> Option<(T, U)> {\n     /// assert_eq!(y.unzip(), (None, None));\n     /// ```\n     #[inline]\n-    #[stable(feature = \"unzip_option\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"unzip_option\", since = \"1.66.0\")]\n     #[rustc_const_unstable(feature = \"const_option\", issue = \"67441\")]\n     pub const fn unzip(self) -> (Option<T>, Option<U>)\n     where"}, {"sha": "ba1cb6efa04b6a2480b571584ac7d013d58b2132", "filename": "library/core/src/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -1232,7 +1232,7 @@ impl fmt::Debug for Duration {\n /// }\n /// ```\n #[derive(Debug, Clone, PartialEq, Eq)]\n-#[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n pub struct TryFromFloatSecsError {\n     kind: TryFromFloatSecsErrorKind,\n }\n@@ -1250,7 +1250,7 @@ impl TryFromFloatSecsError {\n     }\n }\n \n-#[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n impl fmt::Display for TryFromFloatSecsError {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.description().fmt(f)\n@@ -1401,7 +1401,7 @@ impl Duration {\n     /// let res = Duration::try_from_secs_f32(val);\n     /// assert_eq!(res, Ok(Duration::new(1, 2_929_688)));\n     /// ```\n-    #[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n     #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     #[inline]\n     pub const fn try_from_secs_f32(secs: f32) -> Result<Duration, TryFromFloatSecsError> {\n@@ -1478,7 +1478,7 @@ impl Duration {\n     /// let res = Duration::try_from_secs_f64(val);\n     /// assert_eq!(res, Ok(Duration::new(1, 2_929_688)));\n     /// ```\n-    #[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n     #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     #[inline]\n     pub const fn try_from_secs_f64(secs: f64) -> Result<Duration, TryFromFloatSecsError> {"}, {"sha": "0d3fc2c5244e03fe20af3b33a2814f4c020640db", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -546,7 +546,7 @@ impl Span {\n     /// Note: The observable result of a macro should only rely on the tokens and\n     /// not on this source text. The result of this function is a best effort to\n     /// be used for diagnostics only.\n-    #[stable(feature = \"proc_macro_source_text\", since = \"CURRENT_RUSTC_VERSION\")]\n+    #[stable(feature = \"proc_macro_source_text\", since = \"1.66.0\")]\n     pub fn source_text(&self) -> Option<String> {\n         self.0.source_text()\n     }"}, {"sha": "ecd06ebf743ab49969617210f0b326e6b45aaf5a", "filename": "library/std/src/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fstd%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/455a7bc685e2c8f93f8d63547b368b0f66ed0806/library%2Fstd%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime.rs?ref=455a7bc685e2c8f93f8d63547b368b0f66ed0806", "patch": "@@ -43,7 +43,7 @@ use crate::sys_common::{FromInner, IntoInner};\n #[stable(feature = \"time\", since = \"1.3.0\")]\n pub use core::time::Duration;\n \n-#[stable(feature = \"duration_checked_float\", since = \"CURRENT_RUSTC_VERSION\")]\n+#[stable(feature = \"duration_checked_float\", since = \"1.66.0\")]\n pub use core::time::TryFromFloatSecsError;\n \n /// A measurement of a monotonically nondecreasing clock."}]}