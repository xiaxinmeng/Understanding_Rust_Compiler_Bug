{"sha": "5ca3f0d51f972e4d9d76aaec25362b876cd41385", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYTNmMGQ1MWY5NzJlNGQ5ZDc2YWFlYzI1MzYyYjg3NmNkNDEzODU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-25T00:07:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-25T00:07:29Z"}, "message": "Rollup merge of #83427 - llogiq:refactor-emitter, r=estebank\n\nsmall cleanups in rustc_errors / emitter\n\nThis is either moving code around so it gets called less often or using if let instead of match in a few cases.", "tree": {"sha": "aa0010abf7c668c5778b4d7aeace430c4845b49e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa0010abf7c668c5778b4d7aeace430c4845b49e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ca3f0d51f972e4d9d76aaec25362b876cd41385", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgW9RBCRBK7hj4Ov3rIwAAdHIIAG/6Fh24UHnv0gLWVjIpTGx0\ntFwr8Dp7K73da1z+mTgFAeZG0WPdBgUJTrLFR9HEVMthpXwCz7S/Yxa0Zaly8/0x\n1SbfPVB3u60nsI/vnma0tKnOaHc9jA5z/IXCEskqp4xmDBYW3V9gz6OMJxjRfD5c\ndJFEmkwD5EypgwYfqY5lhFAshHXFu6RwYbduSpHE4r2SILGnUBFu5hNRIisrkWrg\n5req1uegdP5iRV5bTY/Tv8bVB9tGIXc9sVV74MmBo+S4YUzmmUBpy8qwn/qjTS1B\ndzu/z/5KnLGoaspCuQwys8U5wGcVnZuRvPz6QvfOzMnwauFrCWWv+gvty+RXvno=\n=6vnz\n-----END PGP SIGNATURE-----\n", "payload": "tree aa0010abf7c668c5778b4d7aeace430c4845b49e\nparent 921a82007a0343c9180e7675f4b45813341daf63\nparent f1807216f0f600136d040f00a222f811fde4b842\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1616630849 +0900\ncommitter GitHub <noreply@github.com> 1616630849 +0900\n\nRollup merge of #83427 - llogiq:refactor-emitter, r=estebank\n\nsmall cleanups in rustc_errors / emitter\n\nThis is either moving code around so it gets called less often or using if let instead of match in a few cases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ca3f0d51f972e4d9d76aaec25362b876cd41385", "html_url": "https://github.com/rust-lang/rust/commit/5ca3f0d51f972e4d9d76aaec25362b876cd41385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ca3f0d51f972e4d9d76aaec25362b876cd41385/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "921a82007a0343c9180e7675f4b45813341daf63", "url": "https://api.github.com/repos/rust-lang/rust/commits/921a82007a0343c9180e7675f4b45813341daf63", "html_url": "https://github.com/rust-lang/rust/commit/921a82007a0343c9180e7675f4b45813341daf63"}, {"sha": "f1807216f0f600136d040f00a222f811fde4b842", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1807216f0f600136d040f00a222f811fde4b842", "html_url": "https://github.com/rust-lang/rust/commit/f1807216f0f600136d040f00a222f811fde4b842"}], "stats": {"total": 34, "additions": 14, "deletions": 20}, "files": [{"sha": "66499fbb8da9238f189a771cf6c35c5441ad8f23", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5ca3f0d51f972e4d9d76aaec25362b876cd41385/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ca3f0d51f972e4d9d76aaec25362b876cd41385/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=5ca3f0d51f972e4d9d76aaec25362b876cd41385", "patch": "@@ -434,34 +434,31 @@ pub trait Emitter {\n         span: &mut MultiSpan,\n         children: &mut Vec<SubDiagnostic>,\n     ) {\n+        let source_map = if let Some(ref sm) = source_map {\n+            sm\n+        } else {\n+            return;\n+        };\n         debug!(\"fix_multispans_in_extern_macros: before: span={:?} children={:?}\", span, children);\n-        for span in iter::once(&mut *span).chain(children.iter_mut().map(|child| &mut child.span)) {\n-            self.fix_multispan_in_extern_macros(source_map, span);\n+        self.fix_multispan_in_extern_macros(source_map, span);\n+        for child in children.iter_mut() {\n+            self.fix_multispan_in_extern_macros(source_map, &mut child.span);\n         }\n         debug!(\"fix_multispans_in_extern_macros: after: span={:?} children={:?}\", span, children);\n     }\n \n     // This \"fixes\" MultiSpans that contain `Span`s pointing to locations inside of external macros.\n     // Since these locations are often difficult to read,\n     // we move these spans from the external macros to their corresponding use site.\n-    fn fix_multispan_in_extern_macros(\n-        &self,\n-        source_map: &Option<Lrc<SourceMap>>,\n-        span: &mut MultiSpan,\n-    ) {\n-        let sm = match source_map {\n-            Some(ref sm) => sm,\n-            None => return,\n-        };\n-\n+    fn fix_multispan_in_extern_macros(&self, source_map: &Lrc<SourceMap>, span: &mut MultiSpan) {\n         // First, find all the spans in external macros and point instead at their use site.\n         let replacements: Vec<(Span, Span)> = span\n             .primary_spans()\n             .iter()\n             .copied()\n             .chain(span.span_labels().iter().map(|sp_label| sp_label.span))\n             .filter_map(|sp| {\n-                if !sp.is_dummy() && sm.is_imported(sp) {\n+                if !sp.is_dummy() && source_map.is_imported(sp) {\n                     let maybe_callsite = sp.source_callsite();\n                     if sp != maybe_callsite {\n                         return Some((sp, maybe_callsite));\n@@ -1232,7 +1229,6 @@ impl EmitterWriter {\n         is_secondary: bool,\n     ) -> io::Result<()> {\n         let mut buffer = StyledBuffer::new();\n-        let header_style = if is_secondary { Style::HeaderMsg } else { Style::MainHeaderMsg };\n \n         if !msp.has_primary_spans() && !msp.has_span_labels() && is_secondary && !self.short_message\n         {\n@@ -1257,6 +1253,7 @@ impl EmitterWriter {\n                 buffer.append(0, &code, Style::Level(*level));\n                 buffer.append(0, \"]\", Style::Level(*level));\n             }\n+            let header_style = if is_secondary { Style::HeaderMsg } else { Style::MainHeaderMsg };\n             if *level != Level::FailureNote {\n                 buffer.append(0, \": \", header_style);\n             }\n@@ -1470,9 +1467,7 @@ impl EmitterWriter {\n                     let mut to_add = FxHashMap::default();\n \n                     for (depth, style) in depths {\n-                        if multilines.get(&depth).is_some() {\n-                            multilines.remove(&depth);\n-                        } else {\n+                        if multilines.remove(&depth).is_none() {\n                             to_add.insert(depth, style);\n                         }\n                     }\n@@ -1726,14 +1721,13 @@ impl EmitterWriter {\n                     if !self.short_message {\n                         draw_col_separator_no_space(&mut buffer, 0, max_line_num_len + 1);\n                     }\n-                    match emit_to_destination(\n+                    if let Err(e) = emit_to_destination(\n                         &buffer.render(),\n                         level,\n                         &mut self.dst,\n                         self.short_message,\n                     ) {\n-                        Ok(()) => (),\n-                        Err(e) => panic!(\"failed to emit error: {}\", e),\n+                        panic!(\"failed to emit error: {}\", e)\n                     }\n                 }\n                 if !self.short_message {"}]}