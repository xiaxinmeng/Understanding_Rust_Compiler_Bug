{"sha": "51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "node_id": "C_kwDOAAsO6NoAKDUxYjIzMzg2MTE0YmE3ZWJhNWRjYmI1Y2JiNzk5NTU3NWQ3YzBkOGI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-09-28T22:17:54Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-23T10:51:51Z"}, "message": "rustc_lint: Reuse the set of registered tools from resolver", "tree": {"sha": "e16227b616bc2ddee787fc1a079e57f1e4873323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e16227b616bc2ddee787fc1a079e57f1e4873323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "html_url": "https://github.com/rust-lang/rust/commit/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "452aa81770d0f2aa05e874122cc15cc73e51235c", "url": "https://api.github.com/repos/rust-lang/rust/commits/452aa81770d0f2aa05e874122cc15cc73e51235c", "html_url": "https://github.com/rust-lang/rust/commit/452aa81770d0f2aa05e874122cc15cc73e51235c"}], "stats": {"total": 126, "additions": 70, "deletions": 56}, "files": [{"sha": "ce08d5d7f2fa0976bdeed541102a473dc6bdc7cf", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::tokenstream::{CanSynthesizeMissingTokens, TokenStream};\n use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_ast::{self as ast, AstLike, Attribute, Item, NodeId, PatKind};\n use rustc_attr::{self as attr, Deprecation, Stability};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n@@ -920,6 +920,9 @@ pub trait ResolverExpand {\n     /// we generated proc macros harnesses, so that we can map\n     /// HIR proc macros items back to their harness items.\n     fn declare_proc_macro(&mut self, id: NodeId);\n+\n+    /// Tools registered with `#![register_tool]` and used by tool attributes and lints.\n+    fn registered_tools(&self) -> &FxHashSet<Ident>;\n }\n \n #[derive(Clone, Default)]"}, {"sha": "6ac73d06868b702495cbb424382762662d7688ec", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::parallel;\n use rustc_data_structures::sync::{Lrc, OnceCell, WorkerLocal};\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{Applicability, ErrorReported, PResult};\n-use rustc_expand::base::ExtCtxt;\n+use rustc_expand::base::{ExtCtxt, ResolverExpand};\n use rustc_hir::def_id::{StableCrateId, LOCAL_CRATE};\n use rustc_hir::Crate;\n use rustc_lint::LintStore;\n@@ -20,7 +20,7 @@ use rustc_metadata::{encode_metadata, EncodedMetadata};\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::ty::query::{ExternProviders, Providers};\n-use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n+use rustc_middle::ty::{self, GlobalCtxt, RegisteredTools, ResolverOutputs, TyCtxt};\n use rustc_mir_build as mir_build;\n use rustc_parse::{parse_crate_from_file, parse_crate_from_source_str, validate_attr};\n use rustc_passes::{self, hir_stats, layout_test};\n@@ -236,7 +236,7 @@ pub fn register_plugins<'a>(\n fn pre_expansion_lint(\n     sess: &Session,\n     lint_store: &LintStore,\n-    crate_attrs: &[ast::Attribute],\n+    registered_tools: &RegisteredTools,\n     check_node: &ast::Crate,\n     node_name: &str,\n ) {\n@@ -245,7 +245,7 @@ fn pre_expansion_lint(\n             sess,\n             true,\n             lint_store,\n-            crate_attrs,\n+            registered_tools,\n             None,\n             rustc_lint::BuiltinCombinedPreExpansionLintPass::new(),\n             check_node,\n@@ -265,7 +265,7 @@ pub fn configure_and_expand(\n     resolver: &mut Resolver<'_>,\n ) -> Result<ast::Crate> {\n     tracing::trace!(\"configure_and_expand\");\n-    pre_expansion_lint(sess, lint_store, &krate.attrs, &krate, crate_name);\n+    pre_expansion_lint(sess, lint_store, resolver.registered_tools(), &krate, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n \n     krate = sess.time(\"crate_injection\", || {\n@@ -321,10 +321,10 @@ pub fn configure_and_expand(\n             ..rustc_expand::expand::ExpansionConfig::default(crate_name.to_string())\n         };\n \n-        let crate_attrs = krate.attrs.clone();\n+        let registered_tools = resolver.registered_tools().clone();\n         let extern_mod_loaded = |ident: Ident, attrs, items, span| {\n             let krate = ast::Crate { attrs, items, span, id: DUMMY_NODE_ID, is_placeholder: false };\n-            pre_expansion_lint(sess, lint_store, &crate_attrs, &krate, ident.name.as_str());\n+            pre_expansion_lint(sess, lint_store, &registered_tools, &krate, ident.name.as_str());\n             (krate.attrs, krate.items)\n         };\n         let mut ecx = ExtCtxt::new(sess, cfg, resolver, Some(&extern_mod_loaded));\n@@ -499,12 +499,13 @@ pub fn lower_to_hir<'res, 'tcx>(\n     );\n \n     sess.time(\"early_lint_checks\", || {\n+        let lint_buffer = Some(std::mem::take(resolver.lint_buffer()));\n         rustc_lint::check_ast_node(\n             sess,\n             false,\n             lint_store,\n-            &krate.attrs,\n-            Some(std::mem::take(resolver.lint_buffer())),\n+            resolver.registered_tools(),\n+            lint_buffer,\n             rustc_lint::BuiltinCombinedEarlyLintPass::new(),\n             &krate,\n         )"}, {"sha": "35c0abd73ba86a708d5540802d1cdc75afffe49b", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -16,10 +16,9 @@\n \n use self::TargetLint::*;\n \n-use crate::levels::{is_known_lint_tool, LintLevelsBuilder};\n+use crate::levels::LintLevelsBuilder;\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n-use ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n-use rustc_ast as ast;\n+use rustc_ast::util::unicode::TEXT_FLOW_CONTROL_CHARS;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_errors::{struct_span_err, Applicability, SuggestionStyle};\n@@ -32,13 +31,14 @@ use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::layout::{LayoutError, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n-use rustc_middle::ty::{self, print::Printer, subst::GenericArg, Ty, TyCtxt};\n+use rustc_middle::ty::{self, print::Printer, subst::GenericArg, RegisteredTools, Ty, TyCtxt};\n use rustc_serialize::json::Json;\n use rustc_session::lint::{BuiltinLintDiagnostics, ExternDepSpec};\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_span::lev_distance::find_best_match_for_name;\n-use rustc_span::{symbol::Symbol, BytePos, MultiSpan, Span, DUMMY_SP};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n use rustc_target::abi;\n use tracing::debug;\n \n@@ -313,7 +313,7 @@ impl LintStore {\n         sess: &Session,\n         lint_name: &str,\n         level: Level,\n-        crate_attrs: &[ast::Attribute],\n+        registered_tools: &RegisteredTools,\n     ) {\n         let (tool_name, lint_name_only) = parse_lint_and_tool_name(lint_name);\n         if lint_name_only == crate::WARNINGS.name_lower() && level == Level::ForceWarn {\n@@ -326,7 +326,7 @@ impl LintStore {\n             )\n             .emit();\n         }\n-        let db = match self.check_lint_name(sess, lint_name_only, tool_name, crate_attrs) {\n+        let db = match self.check_lint_name(lint_name_only, tool_name, registered_tools) {\n             CheckLintNameResult::Ok(_) => None,\n             CheckLintNameResult::Warning(ref msg, _) => Some(sess.struct_warn(msg)),\n             CheckLintNameResult::NoLint(suggestion) => {\n@@ -397,13 +397,16 @@ impl LintStore {\n     /// printing duplicate warnings.\n     pub fn check_lint_name(\n         &self,\n-        sess: &Session,\n         lint_name: &str,\n         tool_name: Option<Symbol>,\n-        crate_attrs: &[ast::Attribute],\n+        registered_tools: &RegisteredTools,\n     ) -> CheckLintNameResult<'_> {\n         if let Some(tool_name) = tool_name {\n-            if !is_known_lint_tool(tool_name, sess, crate_attrs) {\n+            // FIXME: rustc and rustdoc are considered tools for lints, but not for attributes.\n+            if tool_name != sym::rustc\n+                && tool_name != sym::rustdoc\n+                && !registered_tools.contains(&Ident::with_dummy_span(tool_name))\n+            {\n                 return CheckLintNameResult::NoTool;\n             }\n         }\n@@ -794,11 +797,16 @@ impl<'a> EarlyContext<'a> {\n         sess: &'a Session,\n         warn_about_weird_lints: bool,\n         lint_store: &'a LintStore,\n-        crate_attrs: &'a [ast::Attribute],\n+        registered_tools: &'a RegisteredTools,\n         buffered: LintBuffer,\n     ) -> EarlyContext<'a> {\n         EarlyContext {\n-            builder: LintLevelsBuilder::new(sess, warn_about_weird_lints, lint_store, crate_attrs),\n+            builder: LintLevelsBuilder::new(\n+                sess,\n+                warn_about_weird_lints,\n+                lint_store,\n+                registered_tools,\n+            ),\n             buffered,\n         }\n     }"}, {"sha": "6cf67922be72bf6ab080f3638c7b5f39c8a9e988", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -19,6 +19,7 @@ use crate::passes::{EarlyLintPass, EarlyLintPassObject};\n use rustc_ast as ast;\n use rustc_ast::visit as ast_visit;\n use rustc_ast::AstLike;\n+use rustc_middle::ty::RegisteredTools;\n use rustc_session::lint::{BufferedEarlyLint, LintBuffer, LintPass};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n@@ -329,13 +330,19 @@ fn early_lint_node(\n     sess: &Session,\n     warn_about_weird_lints: bool,\n     lint_store: &LintStore,\n-    crate_attrs: &[ast::Attribute],\n+    registered_tools: &RegisteredTools,\n     buffered: LintBuffer,\n     pass: impl EarlyLintPass,\n     check_node: &ast::Crate,\n ) -> LintBuffer {\n     let mut cx = EarlyContextAndPass {\n-        context: EarlyContext::new(sess, warn_about_weird_lints, lint_store, crate_attrs, buffered),\n+        context: EarlyContext::new(\n+            sess,\n+            warn_about_weird_lints,\n+            lint_store,\n+            registered_tools,\n+            buffered,\n+        ),\n         pass,\n     };\n \n@@ -351,7 +358,7 @@ pub fn check_ast_node(\n     sess: &Session,\n     pre_expansion: bool,\n     lint_store: &LintStore,\n-    crate_attrs: &[ast::Attribute],\n+    registered_tools: &RegisteredTools,\n     lint_buffer: Option<LintBuffer>,\n     builtin_lints: impl EarlyLintPass,\n     check_node: &ast::Crate,\n@@ -366,7 +373,7 @@ pub fn check_ast_node(\n             sess,\n             pre_expansion,\n             lint_store,\n-            crate_attrs,\n+            registered_tools,\n             buffered,\n             builtin_lints,\n             check_node,\n@@ -377,7 +384,7 @@ pub fn check_ast_node(\n                 sess,\n                 false,\n                 lint_store,\n-                crate_attrs,\n+                registered_tools,\n                 buffered,\n                 EarlyLintPassObjects { lints: &mut passes[..] },\n                 check_node,\n@@ -391,7 +398,7 @@ pub fn check_ast_node(\n                         sess,\n                         pre_expansion && i == 0,\n                         lint_store,\n-                        crate_attrs,\n+                        registered_tools,\n                         buffered,\n                         EarlyLintPassObjects { lints: slice::from_mut(pass) },\n                         check_node,"}, {"sha": "080a38bae669c68cf5388877966280180cbd7287", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 9, "deletions": 23, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::lint::{\n     COMMAND_LINE,\n };\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::ty::{RegisteredTools, TyCtxt};\n use rustc_session::lint::{\n     builtin::{self, FORBIDDEN_LINT_GROUPS},\n     Level, Lint, LintId,\n@@ -27,8 +27,8 @@ use tracing::debug;\n \n fn lint_levels(tcx: TyCtxt<'_>, (): ()) -> LintLevelMap {\n     let store = unerased_lint_store(tcx);\n-    let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n-    let levels = LintLevelsBuilder::new(tcx.sess, false, &store, crate_attrs);\n+    let levels =\n+        LintLevelsBuilder::new(tcx.sess, false, &store, &tcx.resolutions(()).registered_tools);\n     let mut builder = LintLevelMapBuilder { levels, tcx };\n     let krate = tcx.hir().krate();\n \n@@ -49,7 +49,7 @@ pub struct LintLevelsBuilder<'s> {\n     cur: LintStackIndex,\n     warn_about_weird_lints: bool,\n     store: &'s LintStore,\n-    crate_attrs: &'s [ast::Attribute],\n+    registered_tools: &'s RegisteredTools,\n }\n \n pub struct BuilderPush {\n@@ -62,7 +62,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         sess: &'s Session,\n         warn_about_weird_lints: bool,\n         store: &'s LintStore,\n-        crate_attrs: &'s [ast::Attribute],\n+        registered_tools: &'s RegisteredTools,\n     ) -> Self {\n         let mut builder = LintLevelsBuilder {\n             sess,\n@@ -71,7 +71,7 @@ impl<'s> LintLevelsBuilder<'s> {\n             id_to_set: Default::default(),\n             warn_about_weird_lints,\n             store,\n-            crate_attrs,\n+            registered_tools,\n         };\n         builder.process_command_line(sess, store);\n         assert_eq!(builder.sets.list.len(), 1);\n@@ -91,7 +91,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n-            store.check_lint_name_cmdline(sess, &lint_name, level, self.crate_attrs);\n+            store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);\n             let orig_level = level;\n             let lint_flag_val = Symbol::intern(lint_name);\n \n@@ -314,7 +314,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                 let tool_name = tool_ident.map(|ident| ident.name);\n                 let name = pprust::path_to_string(&meta_item.path);\n                 let lint_result =\n-                    self.store.check_lint_name(sess, &name, tool_name, self.crate_attrs);\n+                    self.store.check_lint_name(&name, tool_name, self.registered_tools);\n                 match &lint_result {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintLevelSource::Node(\n@@ -463,7 +463,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                     // Ignore any errors or warnings that happen because the new name is inaccurate\n                     // NOTE: `new_name` already includes the tool name, so we don't have to add it again.\n                     if let CheckLintNameResult::Ok(ids) =\n-                        self.store.check_lint_name(sess, &new_name, None, self.crate_attrs)\n+                        self.store.check_lint_name(&new_name, None, self.registered_tools)\n                     {\n                         let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);\n                         for &id in ids {\n@@ -566,20 +566,6 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n }\n \n-pub fn is_known_lint_tool(m_item: Symbol, sess: &Session, attrs: &[ast::Attribute]) -> bool {\n-    if [sym::clippy, sym::rustc, sym::rustdoc].contains(&m_item) {\n-        return true;\n-    }\n-    // Look for registered tools\n-    // NOTE: does no error handling; error handling is done by rustc_resolve.\n-    sess.filter_by_name(attrs, sym::register_tool)\n-        .filter_map(|attr| attr.meta_item_list())\n-        .flatten()\n-        .filter_map(|nested_meta| nested_meta.ident())\n-        .map(|ident| ident.name)\n-        .any(|name| name == m_item)\n-}\n-\n struct LintLevelMapBuilder<'tcx> {\n     levels: LintLevelsBuilder<'tcx>,\n     tcx: TyCtxt<'tcx>,"}, {"sha": "a87f2b2768d6754252e06743507346d9b21f9f3f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -96,7 +96,7 @@ use unused::*;\n pub use builtin::SoftLints;\n pub use context::{CheckLintNameResult, FindLintError, LintStore};\n pub use context::{EarlyContext, LateContext, LintContext};\n-pub use early::check_ast_node;\n+pub use early::{check_ast_node, EarlyCheckNode};\n pub use late::check_crate;\n pub use passes::{EarlyLintPass, LateLintPass};\n pub use rustc_session::lint::Level::{self, *};"}, {"sha": "64c00c353ca1b0ef9fda89fca6de0684c475385f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -119,6 +119,8 @@ mod sty;\n \n // Data types\n \n+pub type RegisteredTools = FxHashSet<Ident>;\n+\n #[derive(Debug)]\n pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n@@ -141,6 +143,7 @@ pub struct ResolverOutputs {\n     /// Mapping from ident span to path span for paths that don't exist as written, but that\n     /// exist under `std`. For example, wrote `str::from_utf8` instead of `std::str::from_utf8`.\n     pub confused_type_with_std_module: FxHashMap<Span, Span>,\n+    pub registered_tools: RegisteredTools,\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "f6625ac021b30e0cfdfad796f86e1fa829fa37e4", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -53,7 +53,7 @@ use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::privacy::AccessLevels;\n use rustc_middle::span_bug;\n use rustc_middle::ty::query::Providers;\n-use rustc_middle::ty::{self, DefIdTree, MainDefinition, ResolverOutputs};\n+use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::cstore::{CrateStore, MetadataLoaderDyn};\n use rustc_session::lint;\n@@ -989,7 +989,7 @@ pub struct Resolver<'a> {\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n     registered_attrs: FxHashSet<Ident>,\n-    registered_tools: FxHashSet<Ident>,\n+    registered_tools: RegisteredTools,\n     macro_use_prelude: FxHashMap<Symbol, &'a NameBinding<'a>>,\n     all_macros: FxHashMap<Symbol, Res>,\n     macro_map: FxHashMap<DefId, Lrc<SyntaxExtension>>,\n@@ -1487,6 +1487,7 @@ impl<'a> Resolver<'a> {\n             trait_impls: self.trait_impls,\n             proc_macros,\n             confused_type_with_std_module,\n+            registered_tools: self.registered_tools,\n         }\n     }\n \n@@ -1511,6 +1512,7 @@ impl<'a> Resolver<'a> {\n             trait_impls: self.trait_impls.clone(),\n             proc_macros,\n             confused_type_with_std_module: self.confused_type_with_std_module.clone(),\n+            registered_tools: self.registered_tools.clone(),\n         }\n     }\n "}, {"sha": "82807e2d0a2c55b281e18ec85de513299f2fd682", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -23,7 +23,7 @@ use rustc_hir::def::{self, DefKind, NonMacroAttrKind};\n use rustc_hir::def_id::{CrateNum, LocalDefId};\n use rustc_hir::PrimTy;\n use rustc_middle::middle::stability;\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, RegisteredTools};\n use rustc_session::lint::builtin::{LEGACY_DERIVE_HELPERS, PROC_MACRO_DERIVE_RESOLUTION_FALLBACK};\n use rustc_session::lint::builtin::{SOFT_UNSTABLE, UNUSED_MACROS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -447,6 +447,10 @@ impl<'a> ResolverExpand for Resolver<'a> {\n     fn declare_proc_macro(&mut self, id: NodeId) {\n         self.proc_macros.push(id)\n     }\n+\n+    fn registered_tools(&self) -> &RegisteredTools {\n+        &self.registered_tools\n+    }\n }\n \n impl<'a> Resolver<'a> {"}, {"sha": "512c39389c1bd8fbf8d68b12bceda8563e541e31", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51b23386114ba7eba5dcbb5cbb7995575d7c0d8b/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=51b23386114ba7eba5dcbb5cbb7995575d7c0d8b", "patch": "@@ -580,7 +580,7 @@ fn get_lint_group_and_level_or_lint(\n ) -> Option<(String, &'static str)> {\n     let result = cx\n         .lint_store\n-        .check_lint_name(cx.sess(), lint_name, Some(sym::clippy), &[]);\n+        .check_lint_name(lint_name, Some(sym::clippy), &[]);\n     if let CheckLintNameResult::Tool(Ok(lint_lst)) = result {\n         if let Some(group) = get_lint_group(cx, lint_lst[0]) {\n             if EXCLUDED_LINT_GROUPS.contains(&group.as_str()) {"}]}