{"sha": "7bc34f63d85ee7d351b90320239fc48860f01da2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYzM0ZjYzZDg1ZWU3ZDM1MWI5MDMyMDIzOWZjNDg4NjBmMDFkYTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-12T00:32:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-12T00:32:36Z"}, "message": "rt: Write CFI instructions that (might) work on mac in __morestack\n\nThe DW_CFA_val_offset_sf instruction doesn't seem to work on mac,\neven after implementing it in the llvm-mc assembler, so now\nI'm looking for a different way to communicate the stack pointer\nadjustment to the unwinder.", "tree": {"sha": "2dee0f9e23dba10fd64822868d517e6e66c570c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dee0f9e23dba10fd64822868d517e6e66c570c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7bc34f63d85ee7d351b90320239fc48860f01da2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc34f63d85ee7d351b90320239fc48860f01da2", "html_url": "https://github.com/rust-lang/rust/commit/7bc34f63d85ee7d351b90320239fc48860f01da2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7bc34f63d85ee7d351b90320239fc48860f01da2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b73caec3ced9e6588856f77f6a03319d3515f5ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/b73caec3ced9e6588856f77f6a03319d3515f5ac", "html_url": "https://github.com/rust-lang/rust/commit/b73caec3ced9e6588856f77f6a03319d3515f5ac"}], "stats": {"total": 46, "additions": 35, "deletions": 11}, "files": [{"sha": "23aa36353a195ddb335e5932b05294c047d3b12f", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7bc34f63d85ee7d351b90320239fc48860f01da2/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/7bc34f63d85ee7d351b90320239fc48860f01da2/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=7bc34f63d85ee7d351b90320239fc48860f01da2", "patch": "@@ -49,12 +49,6 @@\n MORESTACK:\n #ifdef __linux__\n \t.cfi_startproc\n-\n-\t// Some magic that explains to the unwinder the unusal nature\n-\t// of this stack frame. Copied verbatim from libgcc, which\n-\t// has comments explaining it.\n-\t.cfi_offset 8, 8\n-\t.cfi_escape 0x15, 4, 0x7d\n #endif\n \n \tpushl %ebp\n@@ -66,14 +60,29 @@ MORESTACK:\n #ifdef __linux__\n \t.cfi_def_cfa_register %ebp\n #endif\n-\t\n+\n \t// FIXME (1226): main is compiled with the split-stack prologue,\n \t// causing it to call __morestack, so we have to jump back out\n \tsubl $28,%esp\n \tcalll RUST_GET_TASK\n \ttestl %eax,%eax\n \tjz .L$bail\n \n+\t// During unwinding we want to skip our caller.\n+#ifdef __linux__\n+\t// Don't understand this line. I think it means that\n+\t// the next frame's pc is the return address of our caller.\n+\t.cfi_offset 8, 8\n+\t// The next frame's esp is stored at our CFA - 12\n+\t// (by the code below)\n+\t.cfi_offset %esp, -12\n+#endif\n+\n+\t// Save the the correct %esp value for our grandparent frame,\n+\t// for the unwinder\n+\tleal 20(%ebp), %eax\n+\tmovl %eax, -4(%ebp)\n+\t\n \t// The arguments to rust_new_stack2\n \tmovl 40(%esp),%eax  // Size of stack arguments\n \tmovl %eax,20(%esp)"}, {"sha": "fafedb54418d47ca6618ba827fea22da827942ec", "filename": "src/rt/arch/x86_64/morestack.S", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7bc34f63d85ee7d351b90320239fc48860f01da2/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/7bc34f63d85ee7d351b90320239fc48860f01da2/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fx86_64%2Fmorestack.S?ref=7bc34f63d85ee7d351b90320239fc48860f01da2", "patch": "@@ -65,6 +65,20 @@ MORESTACK:\n \t.cfi_def_cfa_register %rbp\n #endif\n \n+\t// During unwinding we want to skip our caller since it's not\n+\t// a complete frame and will make the unwinder sad\n+#if defined(__linux__)\n+\t// Don't understand this line\n+\t.cfi_offset 16, 0\n+\t// Tell the unwinding where to get the stack pointer for\n+\t// our grandparent frame\n+\t.cfi_offset %rsp, -24\n+#endif\n+\n+\t// Save the grandparent stack pointer for the unwinder\n+\tleaq 16(%rbp), %rax\n+\tpushq %rax\n+\n \t// FIXME: libgcc also saves rax. not sure if we need to\n \n \t// Save argument registers\n@@ -81,8 +95,6 @@ MORESTACK:\n \tmovq %rbp, %rcx\n \taddq $24, %rcx  // Base pointer, return address x2\n \n-\tpushq $0 // Alignment\n-\n \tpushq %r11 // Size of stack arguments\n \tpushq %rcx // Address of stack arguments\n \tpushq %r10 // The amount of stack needed\n@@ -99,7 +111,7 @@ MORESTACK:\n \n \t// Pop the new_stack_args struct\n \tpopq %rax\n-\taddq $32, %rsp\n+\taddq $24, %rsp\n \n \t// Pop the saved arguments\n \tpopq %r9\n@@ -108,7 +120,10 @@ MORESTACK:\n \tpopq %rdx\n \tpopq %rsi\n \tpopq %rdi\n-\t\n+\n+\t// Pop the unwinding %rsp\n+\taddq $8, %rsp\n+\n         movq 8(%rbp),%r10       // Grab the return pointer.\n         incq %r10               // Skip past the `ret` in our parent frame\n         movq %rax,%rsp          // Switch to the new stack."}]}