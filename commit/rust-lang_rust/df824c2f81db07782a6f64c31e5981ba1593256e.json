{"sha": "df824c2f81db07782a6f64c31e5981ba1593256e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmODI0YzJmODFkYjA3NzgyYTZmNjRjMzFlNTk4MWJhMTU5MzI1NmU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-20T18:18:53Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-05-20T18:18:53Z"}, "message": "Rename `ignore_attrs_on` to `skip_attrs`", "tree": {"sha": "f8175fa7b32320f630103a42c4217dd28a664345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8175fa7b32320f630103a42c4217dd28a664345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df824c2f81db07782a6f64c31e5981ba1593256e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df824c2f81db07782a6f64c31e5981ba1593256e", "html_url": "https://github.com/rust-lang/rust/commit/df824c2f81db07782a6f64c31e5981ba1593256e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df824c2f81db07782a6f64c31e5981ba1593256e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b94a2781357e1965e33e7ca48bdbcd35e9b8dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b94a2781357e1965e33e7ca48bdbcd35e9b8dff", "html_url": "https://github.com/rust-lang/rust/commit/9b94a2781357e1965e33e7ca48bdbcd35e9b8dff"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "897b28e1a2c7724b48713da3e91b3eac2035b0e3", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df824c2f81db07782a6f64c31e5981ba1593256e/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df824c2f81db07782a6f64c31e5981ba1593256e/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=df824c2f81db07782a6f64c31e5981ba1593256e", "patch": "@@ -100,7 +100,7 @@ pub(super) fn collect_defs(\n         proc_macros,\n         exports_proc_macros: false,\n         from_glob_import: Default::default(),\n-        ignore_attrs_on: Default::default(),\n+        skip_attrs: Default::default(),\n         derive_helpers_in_scope: Default::default(),\n     };\n     match block {\n@@ -253,7 +253,7 @@ struct DefCollector<'a> {\n     ///\n     /// This also stores the attributes to skip when we resolve derive helpers and non-macro\n     /// non-builtin attributes in general.\n-    ignore_attrs_on: FxHashMap<InFile<ModItem>, AttrId>,\n+    skip_attrs: FxHashMap<InFile<ModItem>, AttrId>,\n     /// Tracks which custom derives are in scope for an item, to allow resolution of derive helper\n     /// attributes.\n     derive_helpers_in_scope: FxHashMap<AstId<ast::Item>, Vec<Name>>,\n@@ -382,7 +382,7 @@ impl DefCollector<'_> {\n         let mut unresolved_macros = std::mem::replace(&mut self.unresolved_macros, Vec::new());\n         let pos = unresolved_macros.iter().position(|directive| {\n             if let MacroDirectiveKind::Attr { ast_id, mod_item, attr } = &directive.kind {\n-                self.ignore_attrs_on.insert(ast_id.ast_id.with_value(*mod_item), *attr);\n+                self.skip_attrs.insert(ast_id.ast_id.with_value(*mod_item), *attr);\n \n                 let file_id = ast_id.ast_id.file_id;\n                 let item_tree = self.db.file_item_tree(file_id);\n@@ -941,7 +941,7 @@ impl DefCollector<'_> {\n                                 let file_id = ast_id.ast_id.file_id;\n                                 let item_tree = self.db.file_item_tree(file_id);\n                                 let mod_dir = self.mod_dirs[&directive.module_id].clone();\n-                                self.ignore_attrs_on.insert(InFile::new(file_id, *mod_item), *attr);\n+                                self.skip_attrs.insert(InFile::new(file_id, *mod_item), *attr);\n                                 ModCollector {\n                                     def_collector: &mut *self,\n                                     macro_depth: directive.depth,\n@@ -1504,7 +1504,7 @@ impl ModCollector<'_, '_> {\n         }\n \n         let mut ignore_up_to =\n-            self.def_collector.ignore_attrs_on.get(&InFile::new(self.file_id, mod_item)).copied();\n+            self.def_collector.skip_attrs.get(&InFile::new(self.file_id, mod_item)).copied();\n         for attr in attrs.iter().skip_while(|attr| match ignore_up_to {\n             Some(id) if attr.id == id => {\n                 ignore_up_to = None;\n@@ -1779,7 +1779,7 @@ mod tests {\n             proc_macros: Default::default(),\n             exports_proc_macros: false,\n             from_glob_import: Default::default(),\n-            ignore_attrs_on: Default::default(),\n+            skip_attrs: Default::default(),\n             derive_helpers_in_scope: FxHashMap::default(),\n         };\n         collector.seed_with_top_level();"}]}