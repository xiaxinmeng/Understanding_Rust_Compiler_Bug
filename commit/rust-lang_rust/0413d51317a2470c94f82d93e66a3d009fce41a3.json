{"sha": "0413d51317a2470c94f82d93e66a3d009fce41a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MTNkNTEzMTdhMjQ3MGM5NGY4MmQ5M2U2NmEzZDAwOWZjZTQxYTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-12T14:39:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-12T14:39:46Z"}, "message": "internal: move missing unsafe diagnostic to hir", "tree": {"sha": "0b9ddf5c2e51d3c7ffde16c9869714d8ec47bbd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b9ddf5c2e51d3c7ffde16c9869714d8ec47bbd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0413d51317a2470c94f82d93e66a3d009fce41a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0413d51317a2470c94f82d93e66a3d009fce41a3", "html_url": "https://github.com/rust-lang/rust/commit/0413d51317a2470c94f82d93e66a3d009fce41a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0413d51317a2470c94f82d93e66a3d009fce41a3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8009666beaedb34197da9c87cc54d8ca65203b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8009666beaedb34197da9c87cc54d8ca65203b8", "html_url": "https://github.com/rust-lang/rust/commit/f8009666beaedb34197da9c87cc54d8ca65203b8"}], "stats": {"total": 311, "additions": 145, "deletions": 166}, "files": [{"sha": "e888fc23b50f85ff3011d8b0b62982fac708d5f9", "filename": "crates/hir/src/diagnostics.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdiagnostics.rs?ref=0413d51317a2470c94f82d93e66a3d009fce41a3", "patch": "@@ -301,3 +301,27 @@ impl Diagnostic for BreakOutsideOfLoop {\n         self\n     }\n }\n+\n+// Diagnostic: missing-unsafe\n+//\n+// This diagnostic is triggered if an operation marked as `unsafe` is used outside of an `unsafe` function or block.\n+#[derive(Debug)]\n+pub struct MissingUnsafe {\n+    pub file: HirFileId,\n+    pub expr: AstPtr<ast::Expr>,\n+}\n+\n+impl Diagnostic for MissingUnsafe {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"missing-unsafe\")\n+    }\n+    fn message(&self) -> String {\n+        format!(\"This operation is unsafe and requires an unsafe function or block\")\n+    }\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile { file_id: self.file, value: self.expr.clone().into() }\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}"}, {"sha": "a21a9da21f9cbb39e153819522bab95987eeed20", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=0413d51317a2470c94f82d93e66a3d009fce41a3", "patch": "@@ -36,14 +36,14 @@ use std::{iter, sync::Arc};\n use arrayvec::ArrayVec;\n use base_db::{CrateDisplayName, CrateId, Edition, FileId};\n use diagnostics::{\n-    BreakOutsideOfLoop, InactiveCode, MacroError, NoSuchField, UnimplementedBuiltinMacro,\n-    UnresolvedExternCrate, UnresolvedImport, UnresolvedMacroCall, UnresolvedModule,\n-    UnresolvedProcMacro,\n+    BreakOutsideOfLoop, InactiveCode, MacroError, MissingUnsafe, NoSuchField,\n+    UnimplementedBuiltinMacro, UnresolvedExternCrate, UnresolvedImport, UnresolvedMacroCall,\n+    UnresolvedModule, UnresolvedProcMacro,\n };\n use either::Either;\n use hir_def::{\n     adt::{ReprKind, VariantData},\n-    body::BodyDiagnostic,\n+    body::{BodyDiagnostic, SyntheticSyntax},\n     expr::{BindingAnnotation, LabelId, Pat, PatId},\n     item_tree::ItemTreeNode,\n     lang_item::LangItemTarget,\n@@ -1060,6 +1060,18 @@ impl Function {\n             }\n         }\n \n+        for expr in hir_ty::diagnostics::missing_unsafe(db, self.id.into()) {\n+            match source_map.as_ref().expr_syntax(expr) {\n+                Ok(in_file) => {\n+                    sink.push(MissingUnsafe { file: in_file.file_id, expr: in_file.value })\n+                }\n+                Err(SyntheticSyntax) => {\n+                    // FIXME: The `expr` was desugared, report or assert that\n+                    // this dosen't happen.\n+                }\n+            }\n+        }\n+\n         hir_ty::diagnostics::validate_module_item(db, krate, self.id.into(), sink);\n         hir_ty::diagnostics::validate_body(db, self.id.into(), sink);\n     }"}, {"sha": "12131d9bc0136d9179066b8b4e7067f9ed99818b", "filename": "crates/hir_ty/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics.rs?ref=0413d51317a2470c94f82d93e66a3d009fce41a3", "patch": "@@ -17,7 +17,10 @@ use crate::{\n     diagnostics_sink::{Diagnostic, DiagnosticCode, DiagnosticSink},\n };\n \n-pub use crate::diagnostics::expr::{record_literal_missing_fields, record_pattern_missing_fields};\n+pub use crate::diagnostics::{\n+    expr::{record_literal_missing_fields, record_pattern_missing_fields},\n+    unsafe_check::missing_unsafe,\n+};\n \n pub fn validate_module_item(\n     db: &dyn HirDatabase,\n@@ -35,8 +38,6 @@ pub fn validate_body(db: &dyn HirDatabase, owner: DefWithBodyId, sink: &mut Diag\n     let infer = db.infer(owner);\n     let mut validator = expr::ExprValidator::new(owner, infer.clone(), sink);\n     validator.validate_body(db);\n-    let mut validator = unsafe_check::UnsafeValidator::new(owner, infer, sink);\n-    validator.validate_body(db);\n }\n \n // Diagnostic: missing-structure-fields\n@@ -219,30 +220,6 @@ impl Diagnostic for RemoveThisSemicolon {\n     }\n }\n \n-// Diagnostic: missing-unsafe\n-//\n-// This diagnostic is triggered if an operation marked as `unsafe` is used outside of an `unsafe` function or block.\n-#[derive(Debug)]\n-pub struct MissingUnsafe {\n-    pub file: HirFileId,\n-    pub expr: AstPtr<ast::Expr>,\n-}\n-\n-impl Diagnostic for MissingUnsafe {\n-    fn code(&self) -> DiagnosticCode {\n-        DiagnosticCode(\"missing-unsafe\")\n-    }\n-    fn message(&self) -> String {\n-        format!(\"This operation is unsafe and requires an unsafe function or block\")\n-    }\n-    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n-        InFile { file_id: self.file, value: self.expr.clone().into() }\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n-        self\n-    }\n-}\n-\n // Diagnostic: mismatched-arg-count\n //\n // This diagnostic is triggered if a function is invoked with an incorrect amount of arguments."}, {"sha": "a4054cef92e840fdf1beecb6632c57b0d73321a9", "filename": "crates/hir_ty/src/diagnostics/unsafe_check.rs", "status": "modified", "additions": 15, "deletions": 133, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Funsafe_check.rs?ref=0413d51317a2470c94f82d93e66a3d009fce41a3", "patch": "@@ -1,61 +1,32 @@\n //! Provides validations for unsafe code. Currently checks if unsafe functions are missing\n //! unsafe blocks.\n \n-use std::sync::Arc;\n-\n use hir_def::{\n     body::Body,\n     expr::{Expr, ExprId, UnaryOp},\n     resolver::{resolver_for_expr, ResolveValueResult, ValueNs},\n     DefWithBodyId,\n };\n \n-use crate::{\n-    db::HirDatabase, diagnostics::MissingUnsafe, diagnostics_sink::DiagnosticSink, InferenceResult,\n-    Interner, TyExt, TyKind,\n-};\n+use crate::{db::HirDatabase, InferenceResult, Interner, TyExt, TyKind};\n \n-pub(super) struct UnsafeValidator<'a, 'b: 'a> {\n-    owner: DefWithBodyId,\n-    infer: Arc<InferenceResult>,\n-    sink: &'a mut DiagnosticSink<'b>,\n-}\n+pub fn missing_unsafe(db: &dyn HirDatabase, def: DefWithBodyId) -> Vec<ExprId> {\n+    let infer = db.infer(def);\n \n-impl<'a, 'b> UnsafeValidator<'a, 'b> {\n-    pub(super) fn new(\n-        owner: DefWithBodyId,\n-        infer: Arc<InferenceResult>,\n-        sink: &'a mut DiagnosticSink<'b>,\n-    ) -> UnsafeValidator<'a, 'b> {\n-        UnsafeValidator { owner, infer, sink }\n+    // let unsafe_expressions = ;\n+    let is_unsafe = match def {\n+        DefWithBodyId::FunctionId(it) => db.function_data(it).is_unsafe(),\n+        DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n+    };\n+    if is_unsafe {\n+        return Vec::new();\n     }\n \n-    pub(super) fn validate_body(&mut self, db: &dyn HirDatabase) {\n-        let def = self.owner;\n-        let unsafe_expressions = unsafe_expressions(db, self.infer.as_ref(), def);\n-        let is_unsafe = match self.owner {\n-            DefWithBodyId::FunctionId(it) => db.function_data(it).is_unsafe(),\n-            DefWithBodyId::StaticId(_) | DefWithBodyId::ConstId(_) => false,\n-        };\n-        if is_unsafe\n-            || unsafe_expressions\n-                .iter()\n-                .filter(|unsafe_expr| !unsafe_expr.inside_unsafe_block)\n-                .count()\n-                == 0\n-        {\n-            return;\n-        }\n-\n-        let (_, body_source) = db.body_with_source_map(def);\n-        for unsafe_expr in unsafe_expressions {\n-            if !unsafe_expr.inside_unsafe_block {\n-                if let Ok(in_file) = body_source.as_ref().expr_syntax(unsafe_expr.expr) {\n-                    self.sink.push(MissingUnsafe { file: in_file.file_id, expr: in_file.value })\n-                }\n-            }\n-        }\n-    }\n+    unsafe_expressions(db, &infer, def)\n+        .into_iter()\n+        .filter(|it| !it.inside_unsafe_block)\n+        .map(|it| it.expr)\n+        .collect()\n }\n \n pub(crate) struct UnsafeExpr {\n@@ -126,92 +97,3 @@ fn walk_unsafe(\n         walk_unsafe(unsafe_exprs, db, infer, def, body, child, inside_unsafe_block);\n     });\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::diagnostics::tests::check_diagnostics;\n-\n-    #[test]\n-    fn missing_unsafe_diagnostic_with_raw_ptr() {\n-        check_diagnostics(\n-            r#\"\n-fn main() {\n-    let x = &5 as *const usize;\n-    unsafe { let y = *x; }\n-    let z = *x;\n-}         //^^ This operation is unsafe and requires an unsafe function or block\n-\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn missing_unsafe_diagnostic_with_unsafe_call() {\n-        check_diagnostics(\n-            r#\"\n-struct HasUnsafe;\n-\n-impl HasUnsafe {\n-    unsafe fn unsafe_fn(&self) {\n-        let x = &5 as *const usize;\n-        let y = *x;\n-    }\n-}\n-\n-unsafe fn unsafe_fn() {\n-    let x = &5 as *const usize;\n-    let y = *x;\n-}\n-\n-fn main() {\n-    unsafe_fn();\n-  //^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n-    HasUnsafe.unsafe_fn();\n-  //^^^^^^^^^^^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n-    unsafe {\n-        unsafe_fn();\n-        HasUnsafe.unsafe_fn();\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn missing_unsafe_diagnostic_with_static_mut() {\n-        check_diagnostics(\n-            r#\"\n-struct Ty {\n-    a: u8,\n-}\n-\n-static mut STATIC_MUT: Ty = Ty { a: 0 };\n-\n-fn main() {\n-    let x = STATIC_MUT.a;\n-          //^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n-    unsafe {\n-        let x = STATIC_MUT.a;\n-    }\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn no_missing_unsafe_diagnostic_with_safe_intrinsic() {\n-        check_diagnostics(\n-            r#\"\n-extern \"rust-intrinsic\" {\n-    pub fn bitreverse(x: u32) -> u32; // Safe intrinsic\n-    pub fn floorf32(x: f32) -> f32; // Unsafe intrinsic\n-}\n-\n-fn main() {\n-    let _ = bitreverse(12);\n-    let _ = floorf32(12.0);\n-          //^^^^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n-}\n-\"#,\n-        );\n-    }\n-}"}, {"sha": "2c667da25698eec18c419be9be55dd5a683f3151", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=0413d51317a2470c94f82d93e66a3d009fce41a3", "patch": "@@ -36,8 +36,8 @@ use syntax::SmolStr;\n \n use super::{DomainGoal, InEnvironment, ProjectionTy, TraitEnvironment, TraitRef, Ty};\n use crate::{\n-    db::HirDatabase, fold_tys, lower::ImplTraitLoweringMode,\n-    to_assoc_type_id, AliasEq, AliasTy, Goal, Interner, Substitution, TyBuilder, TyExt, TyKind,\n+    db::HirDatabase, fold_tys, lower::ImplTraitLoweringMode, to_assoc_type_id, AliasEq, AliasTy,\n+    Goal, Interner, Substitution, TyBuilder, TyExt, TyKind,\n };\n \n // This lint has a false positive here. See the link below for details."}, {"sha": "b791747c259e09b229e6a300cdcb4ce97ce7cb1d", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0413d51317a2470c94f82d93e66a3d009fce41a3/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=0413d51317a2470c94f82d93e66a3d009fce41a3", "patch": "@@ -855,6 +855,90 @@ impl Foo {\n         Foo { bar: 0 }\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn missing_unsafe_diagnostic_with_raw_ptr() {\n+        check_diagnostics(\n+            r#\"\n+fn main() {\n+    let x = &5 as *const usize;\n+    unsafe { let y = *x; }\n+    let z = *x;\n+}         //^^ This operation is unsafe and requires an unsafe function or block\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn missing_unsafe_diagnostic_with_unsafe_call() {\n+        check_diagnostics(\n+            r#\"\n+struct HasUnsafe;\n+\n+impl HasUnsafe {\n+    unsafe fn unsafe_fn(&self) {\n+        let x = &5 as *const usize;\n+        let y = *x;\n+    }\n+}\n+\n+unsafe fn unsafe_fn() {\n+    let x = &5 as *const usize;\n+    let y = *x;\n+}\n+\n+fn main() {\n+    unsafe_fn();\n+  //^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n+    HasUnsafe.unsafe_fn();\n+  //^^^^^^^^^^^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n+    unsafe {\n+        unsafe_fn();\n+        HasUnsafe.unsafe_fn();\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn missing_unsafe_diagnostic_with_static_mut() {\n+        check_diagnostics(\n+            r#\"\n+struct Ty {\n+    a: u8,\n+}\n+\n+static mut STATIC_MUT: Ty = Ty { a: 0 };\n+\n+fn main() {\n+    let x = STATIC_MUT.a;\n+          //^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n+    unsafe {\n+        let x = STATIC_MUT.a;\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_missing_unsafe_diagnostic_with_safe_intrinsic() {\n+        check_diagnostics(\n+            r#\"\n+extern \"rust-intrinsic\" {\n+    pub fn bitreverse(x: u32) -> u32; // Safe intrinsic\n+    pub fn floorf32(x: f32) -> f32; // Unsafe intrinsic\n+}\n+\n+fn main() {\n+    let _ = bitreverse(12);\n+    let _ = floorf32(12.0);\n+          //^^^^^^^^^^^^^^ This operation is unsafe and requires an unsafe function or block\n+}\n \"#,\n         );\n     }"}]}