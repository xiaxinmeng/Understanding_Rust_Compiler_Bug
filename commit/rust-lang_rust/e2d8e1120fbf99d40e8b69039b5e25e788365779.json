{"sha": "e2d8e1120fbf99d40e8b69039b5e25e788365779", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZDhlMTEyMGZiZjk5ZDQwZThiNjkwMzliNWUyNWU3ODgzNjU3Nzk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-11-24T18:01:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-24T18:01:49Z"}, "message": "Merge #6625\n\n6625: hir_expand: propagate expansion errors r=jonas-schievink a=jonas-schievink\n\nThis is needed to collect and report expansion errors later.\r\n\r\nbors r+ :robot:\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "12fc2464ad36452481fd29b9a174840be3765dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12fc2464ad36452481fd29b9a174840be3765dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d8e1120fbf99d40e8b69039b5e25e788365779", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfvUqNCRBK7hj4Ov3rIwAAdHIIAAKFMak9ZfLpxMbLcCRg+9TM\nS3B9UzbLWpJtVdXN1HKP090ia4wQfTOCbnbp6XwukBNGT2tgVBcVa0gVpMGGkZy+\nRa6WzP9bV+hnt3r5I7AFzpbe9PrKYPxYJdeUyhoIVhUBZzwv2O0bdmNPD+29h4wv\n56XrGWMXElWqsAHBLxbUZM2uZke7YDXbCvbo8k0OSv0Y/RJwkxdpdfuDw6BzOb0h\nX/lwgFwoM5CcEdOGykuxpzLkSJvF/4q0X49e7jOWR482A151ZtL0+A90BxFa9Ghq\n9ztRTNlR5hXPnIT4QJRXn9zOHv05qU85H8fI4VAarRp6/sg6lljDbbz7J1o17Aw=\n=ETXE\n-----END PGP SIGNATURE-----\n", "payload": "tree 12fc2464ad36452481fd29b9a174840be3765dd2\nparent d2f398cd76659425c9d48185a1be92ee9a9332c2\nparent d5e9bf80f9e68cabf694226e2bad896c1ee00742\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1606240909 +0000\ncommitter GitHub <noreply@github.com> 1606240909 +0000\n\nMerge #6625\n\n6625: hir_expand: propagate expansion errors r=jonas-schievink a=jonas-schievink\n\nThis is needed to collect and report expansion errors later.\r\n\r\nbors r+ :robot:\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d8e1120fbf99d40e8b69039b5e25e788365779", "html_url": "https://github.com/rust-lang/rust/commit/e2d8e1120fbf99d40e8b69039b5e25e788365779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d8e1120fbf99d40e8b69039b5e25e788365779/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2f398cd76659425c9d48185a1be92ee9a9332c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f398cd76659425c9d48185a1be92ee9a9332c2", "html_url": "https://github.com/rust-lang/rust/commit/d2f398cd76659425c9d48185a1be92ee9a9332c2"}, {"sha": "d5e9bf80f9e68cabf694226e2bad896c1ee00742", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e9bf80f9e68cabf694226e2bad896c1ee00742", "html_url": "https://github.com/rust-lang/rust/commit/d5e9bf80f9e68cabf694226e2bad896c1ee00742"}], "stats": {"total": 137, "additions": 91, "deletions": 46}, "files": [{"sha": "ed110329d4497d96b368f31e4ea1cc300237323f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8e1120fbf99d40e8b69039b5e25e788365779/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8e1120fbf99d40e8b69039b5e25e788365779/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e2d8e1120fbf99d40e8b69039b5e25e788365779", "patch": "@@ -57,8 +57,8 @@ pub use hir_def::{\n     visibility::Visibility,\n };\n pub use hir_expand::{\n-    name::known, name::AsName, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc,\n-    /* FIXME */ MacroDefId, MacroFile, Origin,\n+    db::MacroResult, name::known, name::AsName, name::Name, HirFileId, InFile, MacroCallId,\n+    MacroCallLoc, /* FIXME */ MacroDefId, MacroFile, Origin,\n };\n pub use hir_ty::display::HirDisplay;\n "}, {"sha": "fc512517cbd89cd3c968c2c2b8f178634f379187", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 83, "deletions": 40, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8e1120fbf99d40e8b69039b5e25e788365779/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8e1120fbf99d40e8b69039b5e25e788365779/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=e2d8e1120fbf99d40e8b69039b5e25e788365779", "patch": "@@ -13,6 +13,19 @@ use crate::{\n     MacroFile, ProcMacroExpander,\n };\n \n+/// A result of some macro expansion.\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct MacroResult<T> {\n+    /// The result of the expansion. Might be `None` when error recovery was impossible and no\n+    /// usable result was produced.\n+    pub value: Option<T>,\n+\n+    /// The error that occurred during expansion or processing.\n+    ///\n+    /// Since we do error recovery, getting an error here does not mean that `value` will be absent.\n+    pub error: Option<String>,\n+}\n+\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum TokenExpander {\n     MacroRules(mbe::MacroRules),\n@@ -75,16 +88,32 @@ pub trait AstDatabase: SourceDatabase {\n     #[salsa::transparent]\n     fn macro_arg(&self, id: MacroCallId) -> Option<Arc<(tt::Subtree, mbe::TokenMap)>>;\n     fn macro_def(&self, id: MacroDefId) -> Option<Arc<(TokenExpander, mbe::TokenMap)>>;\n-    fn parse_macro(&self, macro_file: MacroFile)\n-        -> Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>;\n-    fn macro_expand(&self, macro_call: MacroCallId) -> (Option<Arc<tt::Subtree>>, Option<String>);\n+    fn parse_macro(\n+        &self,\n+        macro_file: MacroFile,\n+    ) -> MacroResult<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)>;\n+    fn macro_expand(&self, macro_call: MacroCallId) -> MacroResult<Arc<tt::Subtree>>;\n \n     #[salsa::interned]\n     fn intern_eager_expansion(&self, eager: EagerCallLoc) -> EagerMacroId;\n \n     fn expand_proc_macro(&self, call: MacroCallId) -> Result<tt::Subtree, mbe::ExpandError>;\n }\n \n+impl<T> MacroResult<T> {\n+    fn error(message: String) -> Self {\n+        Self { value: None, error: Some(message) }\n+    }\n+\n+    fn map<U>(self, f: impl FnOnce(T) -> U) -> MacroResult<U> {\n+        MacroResult { value: self.value.map(f), error: self.error }\n+    }\n+\n+    fn drop_value<U>(self) -> MacroResult<U> {\n+        MacroResult { value: None, error: self.error }\n+    }\n+}\n+\n /// This expands the given macro call, but with different arguments. This is\n /// used for completion, where we want to see what 'would happen' if we insert a\n /// token. The `token_to_map` mapped down into the expansion, with the mapped\n@@ -102,7 +131,7 @@ pub fn expand_hypothetical(\n     let token_id = tmap_1.token_by_range(range)?;\n     let macro_def = expander(db, actual_macro_call)?;\n     let (node, tmap_2) =\n-        parse_macro_with_arg(db, macro_file, Some(std::sync::Arc::new((tt, tmap_1))))?;\n+        parse_macro_with_arg(db, macro_file, Some(std::sync::Arc::new((tt, tmap_1)))).value?;\n     let token_id = macro_def.0.map_id_down(token_id);\n     let range = tmap_2.range_by_token(token_id)?.by_kind(token_to_map.kind())?;\n     let token = syntax::algo::find_covering_element(&node.syntax_node(), range).into_token()?;\n@@ -171,10 +200,7 @@ pub(crate) fn macro_arg(\n     Some(Arc::new((tt, tmap)))\n }\n \n-pub(crate) fn macro_expand(\n-    db: &dyn AstDatabase,\n-    id: MacroCallId,\n-) -> (Option<Arc<tt::Subtree>>, Option<String>) {\n+pub(crate) fn macro_expand(db: &dyn AstDatabase, id: MacroCallId) -> MacroResult<Arc<tt::Subtree>> {\n     macro_expand_with_arg(db, id, None)\n }\n \n@@ -195,38 +221,41 @@ fn macro_expand_with_arg(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     arg: Option<Arc<(tt::Subtree, mbe::TokenMap)>>,\n-) -> (Option<Arc<tt::Subtree>>, Option<String>) {\n+) -> MacroResult<Arc<tt::Subtree>> {\n     let lazy_id = match id {\n         MacroCallId::LazyMacro(id) => id,\n         MacroCallId::EagerMacro(id) => {\n             if arg.is_some() {\n-                return (\n-                    None,\n-                    Some(\"hypothetical macro expansion not implemented for eager macro\".to_owned()),\n+                return MacroResult::error(\n+                    \"hypothetical macro expansion not implemented for eager macro\".to_owned(),\n                 );\n             } else {\n-                return (Some(db.lookup_intern_eager_expansion(id).subtree), None);\n+                return MacroResult {\n+                    value: Some(db.lookup_intern_eager_expansion(id).subtree),\n+                    error: None,\n+                };\n             }\n         }\n     };\n \n     let loc = db.lookup_intern_macro(lazy_id);\n     let macro_arg = match arg.or_else(|| db.macro_arg(id)) {\n         Some(it) => it,\n-        None => return (None, Some(\"Fail to args in to tt::TokenTree\".into())),\n+        None => return MacroResult::error(\"Fail to args in to tt::TokenTree\".into()),\n     };\n \n     let macro_rules = match db.macro_def(loc.def) {\n         Some(it) => it,\n-        None => return (None, Some(\"Fail to find macro definition\".into())),\n+        None => return MacroResult::error(\"Fail to find macro definition\".into()),\n     };\n     let ExpandResult(tt, err) = macro_rules.0.expand(db, lazy_id, &macro_arg.0);\n     // Set a hard limit for the expanded tt\n     let count = tt.count();\n     if count > 262144 {\n-        return (None, Some(format!(\"Total tokens count exceed limit : count = {}\", count)));\n+        return MacroResult::error(format!(\"Total tokens count exceed limit : count = {}\", count));\n     }\n-    (Some(Arc::new(tt)), err.map(|e| format!(\"{:?}\", e)))\n+\n+    MacroResult { value: Some(Arc::new(tt)), error: err.map(|e| format!(\"{:?}\", e)) }\n }\n \n pub(crate) fn expand_proc_macro(\n@@ -260,32 +289,32 @@ pub(crate) fn parse_or_expand(db: &dyn AstDatabase, file_id: HirFileId) -> Optio\n     match file_id.0 {\n         HirFileIdRepr::FileId(file_id) => Some(db.parse(file_id).tree().syntax().clone()),\n         HirFileIdRepr::MacroFile(macro_file) => {\n-            db.parse_macro(macro_file).map(|(it, _)| it.syntax_node())\n+            db.parse_macro(macro_file).map(|(it, _)| it.syntax_node()).value\n         }\n     }\n }\n \n pub(crate) fn parse_macro(\n     db: &dyn AstDatabase,\n     macro_file: MacroFile,\n-) -> Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)> {\n+) -> MacroResult<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)> {\n     parse_macro_with_arg(db, macro_file, None)\n }\n \n pub fn parse_macro_with_arg(\n     db: &dyn AstDatabase,\n     macro_file: MacroFile,\n     arg: Option<Arc<(tt::Subtree, mbe::TokenMap)>>,\n-) -> Option<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)> {\n+) -> MacroResult<(Parse<SyntaxNode>, Arc<mbe::TokenMap>)> {\n     let _p = profile::span(\"parse_macro_query\");\n \n     let macro_call_id = macro_file.macro_call_id;\n-    let (tt, err) = if let Some(arg) = arg {\n+    let result = if let Some(arg) = arg {\n         macro_expand_with_arg(db, macro_call_id, Some(arg))\n     } else {\n         db.macro_expand(macro_call_id)\n     };\n-    if let Some(err) = &err {\n+    if let Some(err) = &result.error {\n         // Note:\n         // The final goal we would like to make all parse_macro success,\n         // such that the following log will not call anyway.\n@@ -313,30 +342,44 @@ pub fn parse_macro_with_arg(\n                 log::warn!(\"fail on macro_parse: (reason: {})\", err);\n             }\n         }\n+    }\n+    let tt = match result.value {\n+        Some(tt) => tt,\n+        None => return result.drop_value(),\n     };\n-    let tt = tt?;\n \n     let fragment_kind = to_fragment_kind(db, macro_call_id);\n \n-    let (parse, rev_token_map) = mbe::token_tree_to_syntax_node(&tt, fragment_kind).ok()?;\n+    let (parse, rev_token_map) = match mbe::token_tree_to_syntax_node(&tt, fragment_kind) {\n+        Ok(it) => it,\n+        Err(err) => {\n+            return MacroResult::error(format!(\"{:?}\", err));\n+        }\n+    };\n \n-    if err.is_none() {\n-        Some((parse, Arc::new(rev_token_map)))\n-    } else {\n-        // FIXME:\n-        // In future, we should propagate the actual error with recovery information\n-        // instead of ignore the error here.\n-\n-        // Safe check for recurisve identity macro\n-        let node = parse.syntax_node();\n-        let file: HirFileId = macro_file.into();\n-        let call_node = file.call_node(db)?;\n-\n-        if !diff(&node, &call_node.value).is_empty() {\n-            Some((parse, Arc::new(rev_token_map)))\n-        } else {\n-            None\n+    match result.error {\n+        Some(error) => {\n+            // FIXME:\n+            // In future, we should propagate the actual error with recovery information\n+            // instead of ignore the error here.\n+\n+            // Safe check for recurisve identity macro\n+            let node = parse.syntax_node();\n+            let file: HirFileId = macro_file.into();\n+            let call_node = match file.call_node(db) {\n+                Some(it) => it,\n+                None => {\n+                    return MacroResult::error(error);\n+                }\n+            };\n+\n+            if !diff(&node, &call_node.value).is_empty() {\n+                MacroResult { value: Some((parse, Arc::new(rev_token_map))), error: None }\n+            } else {\n+                return MacroResult::error(error);\n+            }\n         }\n+        None => MacroResult { value: Some((parse, Arc::new(rev_token_map))), error: None },\n     }\n }\n "}, {"sha": "9fc697d6fa031ad621932d1d6046ed828adee751", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8e1120fbf99d40e8b69039b5e25e788365779/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8e1120fbf99d40e8b69039b5e25e788365779/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=e2d8e1120fbf99d40e8b69039b5e25e788365779", "patch": "@@ -144,7 +144,7 @@ impl HirFileId {\n                 let def_tt = loc.def.ast_id?.to_node(db).token_tree()?;\n \n                 let macro_def = db.macro_def(loc.def)?;\n-                let (parse, exp_map) = db.parse_macro(macro_file)?;\n+                let (parse, exp_map) = db.parse_macro(macro_file).value?;\n                 let macro_arg = db.macro_arg(macro_file.macro_call_id)?;\n \n                 Some(ExpansionInfo {"}, {"sha": "8b4a1652e415b11f464cd3f35cc8672ed6bd46d5", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e2d8e1120fbf99d40e8b69039b5e25e788365779/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d8e1120fbf99d40e8b69039b5e25e788365779/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=e2d8e1120fbf99d40e8b69039b5e25e788365779", "patch": "@@ -1,6 +1,6 @@\n use std::{fmt, iter::FromIterator, sync::Arc};\n \n-use hir::MacroFile;\n+use hir::{MacroFile, MacroResult};\n use ide_db::base_db::{\n     salsa::debug::{DebugQueryTable, TableEntry},\n     CrateId, FileId, FileTextQuery, SourceDatabase, SourceRootId,\n@@ -115,10 +115,12 @@ impl FromIterator<TableEntry<FileId, Parse<ast::SourceFile>>> for SyntaxTreeStat\n     }\n }\n \n-impl<M> FromIterator<TableEntry<MacroFile, Option<(Parse<SyntaxNode>, M)>>> for SyntaxTreeStats {\n+impl<M> FromIterator<TableEntry<MacroFile, MacroResult<(Parse<SyntaxNode>, M)>>>\n+    for SyntaxTreeStats\n+{\n     fn from_iter<T>(iter: T) -> SyntaxTreeStats\n     where\n-        T: IntoIterator<Item = TableEntry<MacroFile, Option<(Parse<SyntaxNode>, M)>>>,\n+        T: IntoIterator<Item = TableEntry<MacroFile, MacroResult<(Parse<SyntaxNode>, M)>>>,\n     {\n         let mut res = SyntaxTreeStats::default();\n         for entry in iter {"}]}