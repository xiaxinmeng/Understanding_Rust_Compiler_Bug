{"sha": "b6ba0dec0c08dd2afcda951b09966b457f2c8bc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YmEwZGVjMGMwOGRkMmFmY2RhOTUxYjA5OTY2YjQ1N2YyYzhiYzM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-08T14:20:36Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-03-08T18:45:06Z"}, "message": "Generalize file ensuring infrastructure", "tree": {"sha": "7cbc9679d81509e2dece8eedfea27d2682907ccd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cbc9679d81509e2dece8eedfea27d2682907ccd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6ba0dec0c08dd2afcda951b09966b457f2c8bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6ba0dec0c08dd2afcda951b09966b457f2c8bc3", "html_url": "https://github.com/rust-lang/rust/commit/b6ba0dec0c08dd2afcda951b09966b457f2c8bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6ba0dec0c08dd2afcda951b09966b457f2c8bc3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f6f458cc1b460076093efda903bf1a1b9062697", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6f458cc1b460076093efda903bf1a1b9062697", "html_url": "https://github.com/rust-lang/rust/commit/0f6f458cc1b460076093efda903bf1a1b9062697"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "02468631bc4fb376f667216b90efe72403b91603", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b6ba0dec0c08dd2afcda951b09966b457f2c8bc3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6ba0dec0c08dd2afcda951b09966b457f2c8bc3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b6ba0dec0c08dd2afcda951b09966b457f2c8bc3", "patch": "@@ -859,12 +859,12 @@ fn manual(fields: &[(&'static str, &'static str, &[&str], &str)]) -> String {\n mod tests {\n     use std::fs;\n \n-    use test_utils::project_dir;\n+    use test_utils::{ensure_file_contents, project_dir};\n \n     use super::*;\n \n     #[test]\n-    fn schema_in_sync_with_package_json() {\n+    fn ensure_schema_in_package_json() {\n         let s = Config::json_schema();\n         let schema = format!(\"{:#}\", s);\n         let mut schema = schema\n@@ -885,13 +885,12 @@ mod tests {\n \n         let start = package_json.find(start_marker).unwrap() + start_marker.len();\n         let end = package_json.find(end_marker).unwrap();\n+\n         let p = remove_ws(&package_json[start..end]);\n         let s = remove_ws(&schema);\n-\n         if !p.contains(&s) {\n             package_json.replace_range(start..end, &schema);\n-            fs::write(&package_json_path, &mut package_json).unwrap();\n-            panic!(\"new config, updating package.json\")\n+            ensure_file_contents(&package_json_path, &package_json)\n         }\n     }\n "}, {"sha": "7f122b13eb272c69276a7143420984dfdc0d4d0e", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b6ba0dec0c08dd2afcda951b09966b457f2c8bc3/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6ba0dec0c08dd2afcda951b09966b457f2c8bc3/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=b6ba0dec0c08dd2afcda951b09966b457f2c8bc3", "patch": "@@ -14,7 +14,7 @@ mod fixture;\n use std::{\n     convert::{TryFrom, TryInto},\n     env, fs,\n-    path::PathBuf,\n+    path::{Path, PathBuf},\n };\n \n use profile::StopWatch;\n@@ -353,3 +353,36 @@ pub fn bench(label: &'static str) -> impl Drop {\n \n     Bencher { sw: StopWatch::start(), label }\n }\n+\n+/// Checks that the `file` has the specified `contents`. If that is not the\n+/// case, updates the file and then fails the test.\n+pub fn ensure_file_contents(file: &Path, contents: &str) {\n+    if let Err(()) = try_ensure_file_contents(file, contents) {\n+        panic!(\"Some files were not up-to-date\");\n+    }\n+}\n+\n+/// Checks that the `file` has the specified `contents`. If that is not the\n+/// case, updates the file and return an Error.\n+pub fn try_ensure_file_contents(file: &Path, contents: &str) -> Result<(), ()> {\n+    match std::fs::read_to_string(file) {\n+        Ok(old_contents) if normalize_newlines(&old_contents) == normalize_newlines(contents) => {\n+            return Ok(())\n+        }\n+        _ => (),\n+    }\n+    let display_path = file.strip_prefix(&project_dir()).unwrap_or(file);\n+    eprintln!(\n+        \"\\n\\x1b[31;1merror\\x1b[0m: {} was not up-to-date, updating\\n\",\n+        display_path.display()\n+    );\n+    if let Some(parent) = file.parent() {\n+        let _ = std::fs::create_dir_all(parent);\n+    }\n+    std::fs::write(file, contents).unwrap();\n+    Err(())\n+}\n+\n+fn normalize_newlines(s: &str) -> String {\n+    s.replace(\"\\r\\n\", \"\\n\")\n+}"}]}