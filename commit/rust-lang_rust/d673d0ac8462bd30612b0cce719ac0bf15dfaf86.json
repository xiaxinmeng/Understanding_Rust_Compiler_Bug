{"sha": "d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NzNkMGFjODQ2MmJkMzA2MTJiMGNjZTcxOWFjMGJmMTVkZmFmODY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-20T21:35:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-28T17:53:13Z"}, "message": "Use heuristics to recover parsing of missing `;`\n\n- Detect `,` and `:` typos where `;` was intended.\n- When the next token could have been the start of a new statement,\n  detect a missing semicolon.", "tree": {"sha": "0822ed1a284b2761a7b2a61b33a5b5dcaf0a123d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0822ed1a284b2761a7b2a61b33a5b5dcaf0a123d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "html_url": "https://github.com/rust-lang/rust/commit/d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28", "html_url": "https://github.com/rust-lang/rust/commit/03a50ae9b87021d4a166c70d2c932f1cb0aa8f28"}], "stats": {"total": 220, "additions": 120, "deletions": 100}, "files": [{"sha": "677d16a40d9fc66a105c476a00619daf1987104e", "filename": "src/libsyntax/parse/parser/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 37, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fdiagnostics.rs?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -6,7 +6,7 @@ use crate::ast::{\n     self, Param, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Ident, Item, ItemKind,\n     Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n };\n-use crate::parse::token::{self, TokenKind};\n+use crate::parse::token::{self, TokenKind, token_can_begin_expr};\n use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::{kw, sym};\n@@ -326,34 +326,8 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        let is_semi_suggestable = expected.iter().any(|t| match t {\n-            TokenType::Token(token::Semi) => true, // We expect a `;` here.\n-            _ => false,\n-        }) && ( // A `;` would be expected before the current keyword.\n-            self.token.is_keyword(kw::Break) ||\n-            self.token.is_keyword(kw::Continue) ||\n-            self.token.is_keyword(kw::For) ||\n-            self.token.is_keyword(kw::If) ||\n-            self.token.is_keyword(kw::Let) ||\n-            self.token.is_keyword(kw::Loop) ||\n-            self.token.is_keyword(kw::Match) ||\n-            self.token.is_keyword(kw::Return) ||\n-            self.token.is_keyword(kw::While)\n-        );\n         let sm = self.sess.source_map();\n         match (sm.lookup_line(self.token.span.lo()), sm.lookup_line(sp.lo())) {\n-            (Ok(ref a), Ok(ref b)) if a.line != b.line && is_semi_suggestable => {\n-                // The spans are in different lines, expected `;` and found `let` or `return`.\n-                // High likelihood that it is only a missing `;`.\n-                err.span_suggestion_short(\n-                    label_sp,\n-                    \"a semicolon may be missing here\",\n-                    \";\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                );\n-                err.emit();\n-                return Ok(true);\n-            }\n             (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n                 // When the spans are in the same line, it means that the only content between\n                 // them is whitespace, point at the found token in that case:\n@@ -902,18 +876,61 @@ impl<'a> Parser<'a> {\n             }\n         }\n         let sm = self.sess.source_map();\n-        match (sm.lookup_line(prev_sp.lo()), sm.lookup_line(sp.lo())) {\n-            (Ok(ref a), Ok(ref b)) if a.line == b.line => {\n-                // When the spans are in the same line, it means that the only content\n-                // between them is whitespace, point only at the found token.\n-                err.span_label(sp, label_exp);\n+        if !sm.is_multiline(prev_sp.until(sp)) {\n+            // When the spans are in the same line, it means that the only content\n+            // between them is whitespace, point only at the found token.\n+            err.span_label(sp, label_exp);\n+        } else {\n+            err.span_label(prev_sp, label_exp);\n+            err.span_label(sp, \"unexpected token\");\n+        }\n+        Err(err)\n+    }\n+\n+    pub(super) fn expect_semi(&mut self) -> PResult<'a, ()> {\n+        if self.eat(&token::Semi) {\n+            return Ok(());\n+        }\n+        let sm = self.sess.source_map();\n+        let msg = format!(\"expected `;`, found `{}`\", self.this_token_descr());\n+        let appl = Applicability::MachineApplicable;\n+        if self.look_ahead(1, |t| t == &token::CloseDelim(token::Brace)\n+            || token_can_begin_expr(t) && t.kind != token::Colon\n+        ) && [token::Comma, token::Colon].contains(&self.token.kind) {\n+            // Likely typo: `,` \u2192 `;` or `:` \u2192 `;`. This is triggered if the current token is\n+            // either `,` or `:`, and the next token could either start a new statement or is a\n+            // block close. For example:\n+            //\n+            //   let x = 32:\n+            //   let y = 42;\n+            if sm.is_multiline(self.prev_span.until(self.token.span)) {\n+                self.bump();\n+                let sp = self.prev_span;\n+                self.struct_span_err(sp, &msg)\n+                    .span_suggestion(sp, \"change this to `;`\", \";\".to_string(), appl)\n+                    .emit();\n+                return Ok(())\n             }\n-            _ => {\n-                err.span_label(prev_sp, label_exp);\n-                err.span_label(sp, \"unexpected token\");\n+        } else if self.look_ahead(0, |t| t == &token::CloseDelim(token::Brace) || (\n+                token_can_begin_expr(t)\n+                && t != &token::Semi\n+                && t != &token::Pound // Avoid triggering with too many trailing `#` in raw string.\n+        )) {\n+            // Missing semicolon typo. This is triggered if the next token could either start a\n+            // new statement or is a block close. For example:\n+            //\n+            //   let x = 32\n+            //   let y = 42;\n+            if sm.is_multiline(self.prev_span.until(self.token.span)) {\n+                let sp = self.prev_span.shrink_to_hi();\n+                self.struct_span_err(sp, &msg)\n+                    .span_label(self.token.span, \"unexpected token\")\n+                    .span_suggestion_short(sp, \"add `;` here\", \";\".to_string(), appl)\n+                    .emit();\n+                return Ok(())\n             }\n         }\n-        Err(err)\n+        self.expect(&token::Semi).map(|_| ()) // Error unconditionally\n     }\n \n     pub(super) fn parse_semi_or_incorrect_foreign_fn_body(\n@@ -943,7 +960,7 @@ impl<'a> Parser<'a> {\n                 Err(mut err) => {\n                     err.cancel();\n                     mem::replace(self, parser_snapshot);\n-                    self.expect(&token::Semi)?;\n+                    self.expect_semi()?;\n                 }\n             }\n         } else {"}, {"sha": "fe1253361903349215f9fbb5e1f5b3f30e4eff2d", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -98,7 +98,7 @@ impl<'a> Parser<'a> {\n         if self.eat_keyword(kw::Use) {\n             // USE ITEM\n             let item_ = ItemKind::Use(P(self.parse_use_tree()?));\n-            self.expect(&token::Semi)?;\n+            self.expect_semi()?;\n \n             let span = lo.to(self.prev_span);\n             let item = self.mk_item(span, Ident::invalid(), item_, vis, attrs);\n@@ -526,7 +526,7 @@ impl<'a> Parser<'a> {\n             // eat a matched-delimiter token tree:\n             let (delim, tts) = self.expect_delimited_token_tree()?;\n             if delim != MacDelimiter::Brace {\n-                self.expect(&token::Semi)?;\n+                self.expect_semi()?;\n             }\n \n             Ok(Some(Mac {\n@@ -776,7 +776,7 @@ impl<'a> Parser<'a> {\n         let typ = self.parse_ty()?;\n         self.expect(&token::Eq)?;\n         let expr = self.parse_expr()?;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok((name, ImplItemKind::Const(typ, expr), Generics::default()))\n     }\n \n@@ -813,7 +813,7 @@ impl<'a> Parser<'a> {\n \n             let bounds = self.parse_generic_bounds(None)?;\n             tps.where_clause = self.parse_where_clause()?;\n-            self.expect(&token::Semi)?;\n+            self.expect_semi()?;\n \n             let whole_span = lo.to(self.prev_span);\n             if is_auto == IsAuto::Yes {\n@@ -927,7 +927,7 @@ impl<'a> Parser<'a> {\n         } else {\n             None\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok((ident, TraitItemKind::Const(ty, default), Generics::default()))\n     }\n \n@@ -951,7 +951,7 @@ impl<'a> Parser<'a> {\n         } else {\n             None\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n \n         Ok((ident, TraitItemKind::Type(bounds, default), generics))\n     }\n@@ -1054,7 +1054,7 @@ impl<'a> Parser<'a> {\n         } else {\n             (orig_name, None)\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n \n         let span = lo.to(self.prev_span);\n         Ok(self.mk_item(span, item_name, ItemKind::ExternCrate(orig_name), visibility, attrs))\n@@ -1217,7 +1217,7 @@ impl<'a> Parser<'a> {\n         self.expect(&token::Colon)?;\n         let ty = self.parse_ty()?;\n         let hi = self.token.span;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok(ForeignItem {\n             ident,\n             attrs,\n@@ -1235,7 +1235,7 @@ impl<'a> Parser<'a> {\n \n         let ident = self.parse_ident()?;\n         let hi = self.token.span;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok(ast::ForeignItem {\n             ident,\n             attrs,\n@@ -1282,7 +1282,7 @@ impl<'a> Parser<'a> {\n \n         self.expect(&token::Eq)?;\n         let e = self.parse_expr()?;\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         let item = match m {\n             Some(m) => ItemKind::Static(ty, m, e),\n             None => ItemKind::Const(ty, e),\n@@ -1344,7 +1344,7 @@ impl<'a> Parser<'a> {\n             let ty = self.parse_ty()?;\n             AliasKind::Weak(ty)\n         };\n-        self.expect(&token::Semi)?;\n+        self.expect_semi()?;\n         Ok((ident, alias, tps))\n     }\n \n@@ -1468,7 +1468,7 @@ impl<'a> Parser<'a> {\n         } else if self.token == token::OpenDelim(token::Paren) {\n             let body = VariantData::Tuple(self.parse_tuple_struct_body()?, DUMMY_NODE_ID);\n             generics.where_clause = self.parse_where_clause()?;\n-            self.expect(&token::Semi)?;\n+            self.expect_semi()?;\n             body\n         } else {\n             let token_str = self.this_token_descr();"}, {"sha": "4f51fefe66fbabdb10d0ad44597431cb975188e8", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -432,6 +432,7 @@ impl<'a> Parser<'a> {\n             None => return Ok(None),\n         };\n \n+        let mut eat_semi = true;\n         match stmt.kind {\n             StmtKind::Expr(ref expr) if self.token != token::Eof => {\n                 // expression without semicolon\n@@ -453,13 +454,14 @@ impl<'a> Parser<'a> {\n                 if macro_legacy_warnings && self.token != token::Semi {\n                     self.warn_missing_semicolon();\n                 } else {\n-                    self.expect_one_of(&[], &[token::Semi])?;\n+                    self.expect_semi()?;\n+                    eat_semi = false;\n                 }\n             }\n             _ => {}\n         }\n \n-        if self.eat(&token::Semi) {\n+        if eat_semi && self.eat(&token::Semi) {\n             stmt = stmt.add_trailing_semicolon();\n         }\n         stmt.span = stmt.span.to(self.prev_span);"}, {"sha": "03e77b199cc3bacd754cbc24aafce912b149a84e", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -143,34 +143,35 @@ impl Lit {\n \n pub(crate) fn ident_can_begin_expr(name: ast::Name, span: Span, is_raw: bool) -> bool {\n     let ident_token = Token::new(Ident(name, is_raw), span);\n+    token_can_begin_expr(&ident_token)\n+}\n \n+pub(crate) fn token_can_begin_expr(ident_token: &Token) -> bool {\n     !ident_token.is_reserved_ident() ||\n     ident_token.is_path_segment_keyword() ||\n-    [\n-        kw::Async,\n-\n-        // FIXME: remove when `await!(..)` syntax is removed\n-        // https://github.com/rust-lang/rust/issues/60610\n-        kw::Await,\n-\n-        kw::Do,\n-        kw::Box,\n-        kw::Break,\n-        kw::Continue,\n-        kw::False,\n-        kw::For,\n-        kw::If,\n-        kw::Let,\n-        kw::Loop,\n-        kw::Match,\n-        kw::Move,\n-        kw::Return,\n-        kw::True,\n-        kw::Unsafe,\n-        kw::While,\n-        kw::Yield,\n-        kw::Static,\n-    ].contains(&name)\n+    match ident_token.kind {\n+        TokenKind::Ident(ident, _) => [\n+            kw::Async,\n+            kw::Do,\n+            kw::Box,\n+            kw::Break,\n+            kw::Continue,\n+            kw::False,\n+            kw::For,\n+            kw::If,\n+            kw::Let,\n+            kw::Loop,\n+            kw::Match,\n+            kw::Move,\n+            kw::Return,\n+            kw::True,\n+            kw::Unsafe,\n+            kw::While,\n+            kw::Yield,\n+            kw::Static,\n+        ].contains(&ident),\n+        _=> false,\n+    }\n }\n \n fn ident_can_begin_type(name: ast::Name, span: Span, is_raw: bool) -> bool {"}, {"sha": "84c3b31df20be66ff333ab708abec543a489013e", "filename": "src/test/ui/parser/import-from-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fimport-from-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fimport-from-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimport-from-path.stderr?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -2,7 +2,7 @@ error: expected `;`, found `::`\n   --> $DIR/import-from-path.rs:2:15\n    |\n LL | use foo::{bar}::baz\n-   |               ^^ expected `;`\n+   |               ^^ expected `;` here\n \n error: aborting due to previous error\n "}, {"sha": "53ceb0280f98722023e1ff71041f29825710304d", "filename": "src/test/ui/parser/import-from-rename.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fimport-from-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fimport-from-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimport-from-rename.stderr?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -1,8 +1,8 @@\n-error: expected `;`, found keyword `as`\n+error: expected `;`, found `as`\n   --> $DIR/import-from-rename.rs:3:16\n    |\n LL | use foo::{bar} as baz;\n-   |                ^^ expected `;`\n+   |                ^^ expected `;` here\n \n error: aborting due to previous error\n "}, {"sha": "44f4fc57a4a95c2c1ccdee1f0c1553a90f3c699a", "filename": "src/test/ui/parser/import-glob-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fimport-glob-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fimport-glob-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimport-glob-path.stderr?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -2,7 +2,7 @@ error: expected `;`, found `::`\n   --> $DIR/import-glob-path.rs:2:11\n    |\n LL | use foo::*::bar\n-   |           ^^ expected `;`\n+   |           ^^ expected `;` here\n \n error: aborting due to previous error\n "}, {"sha": "56f021c29d45f90c3d6457dfb586c595c7031beb", "filename": "src/test/ui/parser/import-glob-rename.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fimport-glob-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fimport-glob-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimport-glob-rename.stderr?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -1,8 +1,8 @@\n-error: expected `;`, found keyword `as`\n+error: expected `;`, found `as`\n   --> $DIR/import-glob-rename.rs:3:12\n    |\n LL | use foo::* as baz;\n-   |            ^^ expected `;`\n+   |            ^^ expected `;` here\n \n error: aborting due to previous error\n "}, {"sha": "6a8b67fefa780fb7d6a65ebd960974bc024c59d9", "filename": "src/test/ui/parser/issue-3036.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.rs?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -2,5 +2,5 @@\n \n fn main()\n {\n-    let x = 3\n-} //~ ERROR: expected one of `.`, `;`, `?`, or an operator, found `}`\n+    let x = 3 //~ ERROR: expected `;`\n+}"}, {"sha": "b6557163d4520b14558eb369d65286e4bf138205", "filename": "src/test/ui/parser/issue-3036.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-3036.stderr?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -1,10 +1,10 @@\n-error: expected one of `.`, `;`, `?`, or an operator, found `}`\n-  --> $DIR/issue-3036.rs:6:1\n+error: expected `;`, found ``}``\n+  --> $DIR/issue-3036.rs:5:14\n    |\n LL |     let x = 3\n-   |              - expected one of `.`, `;`, `?`, or an operator here\n+   |              ^ help: add `;` here\n LL | }\n-   | ^ unexpected token\n+   | - unexpected token\n \n error: aborting due to previous error\n "}, {"sha": "f47d5e6805f88708d5d1574f0d304df5451388ec", "filename": "src/test/ui/parser/recover-missing-semi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.rs?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -1,13 +1,13 @@\n fn main() {\n     let _: usize = ()\n     //~^ ERROR mismatched types\n+    //~| ERROR expected `;`\n     let _ = 3;\n-    //~^ ERROR expected one of\n }\n \n fn foo() -> usize {\n     let _: usize = ()\n     //~^ ERROR mismatched types\n+    //~| ERROR expected `;`\n     return 3;\n-    //~^ ERROR expected one of\n }"}, {"sha": "c40918ee2bd5fa710c691bb71825d08ec598929c", "filename": "src/test/ui/parser/recover-missing-semi.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d673d0ac8462bd30612b0cce719ac0bf15dfaf86/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-missing-semi.stderr?ref=d673d0ac8462bd30612b0cce719ac0bf15dfaf86", "patch": "@@ -1,20 +1,20 @@\n-error: expected one of `.`, `;`, `?`, or an operator, found `let`\n-  --> $DIR/recover-missing-semi.rs:4:5\n+error: expected `;`, found `keyword `let``\n+  --> $DIR/recover-missing-semi.rs:2:22\n    |\n LL |     let _: usize = ()\n-   |                      - help: a semicolon may be missing here\n-LL |\n+   |                      ^ help: add `;` here\n+...\n LL |     let _ = 3;\n-   |     ^^^\n+   |     --- unexpected token\n \n-error: expected one of `.`, `;`, `?`, or an operator, found `return`\n-  --> $DIR/recover-missing-semi.rs:11:5\n+error: expected `;`, found `keyword `return``\n+  --> $DIR/recover-missing-semi.rs:9:22\n    |\n LL |     let _: usize = ()\n-   |                      - help: a semicolon may be missing here\n-LL |\n+   |                      ^ help: add `;` here\n+...\n LL |     return 3;\n-   |     ^^^^^^\n+   |     ------ unexpected token\n \n error[E0308]: mismatched types\n   --> $DIR/recover-missing-semi.rs:2:20"}]}