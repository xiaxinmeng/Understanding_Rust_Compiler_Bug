{"sha": "8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZTU3ZWVkNzllZDRmN2M5Y2UyMWI0YTZkYWU2ZGFhZDYyMTkzYzE=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2020-08-10T12:56:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-10T12:56:26Z"}, "message": "Rollup merge of #5869 - wiomoc:feature/implicit-self, r=ebroto,flip1995\n\nNew lint against `Self` as an arbitrary self type\n\nFixes #5861\n\nchangelog: * [`needless_arbitrary_self_type`] [#5869](https://github.com/rust-lang/rust-clippy/pull/5869)", "tree": {"sha": "538f06360bc167d3a0631afd3e2df22e93a54ce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/538f06360bc167d3a0631afd3e2df22e93a54ce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMUP6CRBK7hj4Ov3rIwAAdHIIABBdAhPmfZr5JWIzF5eUfnWO\nDiEoTihXvxOnQLmCiSP1mQdAz1Wn8hfslH/4uYZzjNVCYuMdLXa5XKs8lvucykCy\nxeAQLZp/MY54YKdCXFKPo3xOYbARxK23Un2AGeBq1GM0UCSt0eMzVFoYoCRxYoaC\nzF+AZwE/tnyHNRZA1pRfIDa8I7gJR//bBuSjVW24yLRASaetHfVSAQ3Whp4so6zU\nV0LVd4oVixmsqBY5QxLKAqDNgZ0nnwHpnJCv6a6CbUlXhUiREqu/ki3DP0y7HFpg\n0OqU8Fp44J6VgYoqP7qwSxmcZcz4vV15iTRGgQgSMsWwV8gWOk88y+M7g0yV0KA=\n=3STJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 538f06360bc167d3a0631afd3e2df22e93a54ce2\nparent 9da5b6d1d055ae22a297be0aa33ea2e1e8c79295\nparent bfe610cc8d7d380cfaf83f03629a23747fc54fad\nauthor Philipp Krones <hello@philkrones.com> 1597064186 +0200\ncommitter GitHub <noreply@github.com> 1597064186 +0200\n\nRollup merge of #5869 - wiomoc:feature/implicit-self, r=ebroto,flip1995\n\nNew lint against `Self` as an arbitrary self type\n\nFixes #5861\n\nchangelog: * [`needless_arbitrary_self_type`] [#5869](https://github.com/rust-lang/rust-clippy/pull/5869)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "html_url": "https://github.com/rust-lang/rust/commit/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "url": "https://api.github.com/repos/rust-lang/rust/commits/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295", "html_url": "https://github.com/rust-lang/rust/commit/9da5b6d1d055ae22a297be0aa33ea2e1e8c79295"}, {"sha": "bfe610cc8d7d380cfaf83f03629a23747fc54fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfe610cc8d7d380cfaf83f03629a23747fc54fad", "html_url": "https://github.com/rust-lang/rust/commit/bfe610cc8d7d380cfaf83f03629a23747fc54fad"}], "stats": {"total": 431, "additions": 373, "deletions": 58}, "files": [{"sha": "f09af0466c017648fb033c774fd42ba5b5c74a9c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -1616,6 +1616,7 @@ Released 2018-09-13\n [`mutex_atomic`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_atomic\n [`mutex_integer`]: https://rust-lang.github.io/rust-clippy/master/index.html#mutex_integer\n [`naive_bytecount`]: https://rust-lang.github.io/rust-clippy/master/index.html#naive_bytecount\n+[`needless_arbitrary_self_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_arbitrary_self_type\n [`needless_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_bool\n [`needless_borrow`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow\n [`needless_borrowed_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrowed_reference"}, {"sha": "b26e10a464c51a6485178fbb877aee6f0454747b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -250,6 +250,7 @@ mod mut_mut;\n mod mut_reference;\n mod mutable_debug_assertion;\n mod mutex_atomic;\n+mod needless_arbitrary_self_type;\n mod needless_bool;\n mod needless_borrow;\n mod needless_borrowed_ref;\n@@ -718,6 +719,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL,\n         &mutex_atomic::MUTEX_ATOMIC,\n         &mutex_atomic::MUTEX_INTEGER,\n+        &needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE,\n         &needless_bool::BOOL_COMPARISON,\n         &needless_bool::NEEDLESS_BOOL,\n         &needless_borrow::NEEDLESS_BORROW,\n@@ -1028,6 +1030,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box items_after_statements::ItemsAfterStatements);\n     store.register_early_pass(|| box precedence::Precedence);\n     store.register_early_pass(|| box needless_continue::NeedlessContinue);\n+    store.register_early_pass(|| box needless_arbitrary_self_type::NeedlessArbitrarySelfType);\n     store.register_early_pass(|| box redundant_static_lifetimes::RedundantStaticLifetimes);\n     store.register_late_pass(|| box cargo_common_metadata::CargoCommonMetadata);\n     store.register_late_pass(|| box multiple_crate_versions::MultipleCrateVersions);\n@@ -1373,6 +1376,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&mut_key::MUTABLE_KEY_TYPE),\n         LintId::of(&mut_reference::UNNECESSARY_MUT_PASSED),\n         LintId::of(&mutex_atomic::MUTEX_ATOMIC),\n+        LintId::of(&needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n         LintId::of(&needless_bool::BOOL_COMPARISON),\n         LintId::of(&needless_bool::NEEDLESS_BOOL),\n         LintId::of(&needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),\n@@ -1605,6 +1609,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&misc::SHORT_CIRCUIT_STATEMENT),\n         LintId::of(&misc_early::UNNEEDED_WILDCARD_PATTERN),\n         LintId::of(&misc_early::ZERO_PREFIXED_LITERAL),\n+        LintId::of(&needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n         LintId::of(&needless_bool::BOOL_COMPARISON),\n         LintId::of(&needless_bool::NEEDLESS_BOOL),\n         LintId::of(&needless_borrowed_ref::NEEDLESS_BORROWED_REFERENCE),"}, {"sha": "38bdd0f7ed23bdd49dda3fd8443a91be55ea81c7", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -0,0 +1,118 @@\n+use crate::utils::span_lint_and_sugg;\n+use if_chain::if_chain;\n+use rustc_ast::ast::{BindingMode, Lifetime, Mutability, Param, PatKind, Path, TyKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::symbol::kw;\n+use rustc_span::Span;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** The lint checks for `self` in fn parameters that\n+    /// specify the `Self`-type explicitly\n+    /// **Why is this bad?** Increases the amount and decreases the readability of code\n+    ///\n+    /// **Known problems:** None\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// enum ValType {\n+    ///     I32,\n+    ///     I64,\n+    ///     F32,\n+    ///     F64,\n+    /// }\n+    ///\n+    /// impl ValType {\n+    ///     pub fn bytes(self: Self) -> usize {\n+    ///         match self {\n+    ///             Self::I32 | Self::F32 => 4,\n+    ///             Self::I64 | Self::F64 => 8,\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// Could be rewritten as\n+    ///\n+    /// ```rust\n+    /// enum ValType {\n+    ///     I32,\n+    ///     I64,\n+    ///     F32,\n+    ///     F64,\n+    /// }\n+    ///\n+    /// impl ValType {\n+    ///     pub fn bytes(self) -> usize {\n+    ///         match self {\n+    ///             Self::I32 | Self::F32 => 4,\n+    ///             Self::I64 | Self::F64 => 8,\n+    ///         }\n+    ///     }\n+    /// }\n+    /// ```\n+    pub NEEDLESS_ARBITRARY_SELF_TYPE,\n+    complexity,\n+    \"type of `self` parameter is already by default `Self`\"\n+}\n+\n+declare_lint_pass!(NeedlessArbitrarySelfType => [NEEDLESS_ARBITRARY_SELF_TYPE]);\n+\n+enum Mode {\n+    Ref(Option<Lifetime>),\n+    Value,\n+}\n+\n+fn check_param_inner(cx: &EarlyContext<'_>, path: &Path, span: Span, binding_mode: &Mode, mutbl: Mutability) {\n+    if_chain! {\n+        if let [segment] = &path.segments[..];\n+        if segment.ident.name == kw::SelfUpper;\n+        then {\n+            let self_param = match (binding_mode, mutbl) {\n+                (Mode::Ref(None), Mutability::Mut) => \"&mut self\".to_string(),\n+                (Mode::Ref(Some(lifetime)), Mutability::Mut) => format!(\"&{} mut self\", &lifetime.ident.name),\n+                (Mode::Ref(None), Mutability::Not) => \"&self\".to_string(),\n+                (Mode::Ref(Some(lifetime)), Mutability::Not) => format!(\"&{} self\", &lifetime.ident.name),\n+                (Mode::Value, Mutability::Mut) => \"mut self\".to_string(),\n+                (Mode::Value, Mutability::Not) => \"self\".to_string(),\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                NEEDLESS_ARBITRARY_SELF_TYPE,\n+                span,\n+                \"the type of the `self` parameter does not need to be arbitrary\",\n+                \"consider to change this parameter to\",\n+                self_param,\n+                Applicability::MachineApplicable,\n+            )\n+        }\n+    }\n+}\n+\n+impl EarlyLintPass for NeedlessArbitrarySelfType {\n+    fn check_param(&mut self, cx: &EarlyContext<'_>, p: &Param) {\n+        if !p.is_self() {\n+            return;\n+        }\n+\n+        match &p.ty.kind {\n+            TyKind::Path(None, path) => {\n+                if let PatKind::Ident(BindingMode::ByValue(mutbl), _, _) = p.pat.kind {\n+                    check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl)\n+                }\n+            },\n+            TyKind::Rptr(lifetime, mut_ty) => {\n+                if_chain! {\n+                if let TyKind::Path(None, path) = &mut_ty.ty.kind;\n+                if let PatKind::Ident(BindingMode::ByValue(Mutability::Not), _, _) = p.pat.kind;\n+                    then {\n+                        check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Ref(*lifetime), mut_ty.mutbl)\n+                    }\n+                }\n+            },\n+            _ => {},\n+        }\n+    }\n+}"}, {"sha": "d4acf8df46d8a5323d64613c38de7ef7abbb8dd1", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -50,7 +50,7 @@ declare_clippy_lint! {\n     /// fn func<T: Clone + Default>(arg: T) {}\n     /// ```\n     /// or\n-    ///  ///\n+    ///\n     /// ```rust\n     /// fn func<T>(arg: T) where T: Clone + Default {}\n     /// ```"}, {"sha": "6395b571504c56039ba904c15ffcf71c54a251c5", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -1459,6 +1459,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"bytecount\",\n     },\n+    Lint {\n+        name: \"needless_arbitrary_self_type\",\n+        group: \"complexity\",\n+        desc: \"type of `self` parameter is already by default `Self`\",\n+        deprecation: None,\n+        module: \"needless_arbitrary_self_type\",\n+    },\n     Lint {\n         name: \"needless_bool\",\n         group: \"complexity\","}, {"sha": "150acfbfee75996fd89b882784a26fcbc3a5e002", "filename": "tests/ui/extra_unused_lifetimes.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fextra_unused_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fextra_unused_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -1,4 +1,10 @@\n-#![allow(unused, dead_code, clippy::needless_lifetimes, clippy::needless_pass_by_value)]\n+#![allow(\n+    unused,\n+    dead_code,\n+    clippy::needless_lifetimes,\n+    clippy::needless_pass_by_value,\n+    clippy::needless_arbitrary_self_type\n+)]\n #![warn(clippy::extra_unused_lifetimes)]\n \n fn empty() {}"}, {"sha": "ebdb8e749520fed2bd95045043b76e60f5829543", "filename": "tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fextra_unused_lifetimes.stderr?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -1,25 +1,25 @@\n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:8:14\n+  --> $DIR/extra_unused_lifetimes.rs:14:14\n    |\n LL | fn unused_lt<'a>(x: u8) {}\n    |              ^^\n    |\n    = note: `-D clippy::extra-unused-lifetimes` implied by `-D warnings`\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:10:25\n+  --> $DIR/extra_unused_lifetimes.rs:16:25\n    |\n LL | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n    |                         ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:35:10\n+  --> $DIR/extra_unused_lifetimes.rs:41:10\n    |\n LL |     fn x<'a>(&self) {}\n    |          ^^\n \n error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:61:22\n+  --> $DIR/extra_unused_lifetimes.rs:67:22\n    |\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^"}, {"sha": "b5211318a15047e4e9c6f9f079cd2835d34fa01e", "filename": "tests/ui/len_without_is_empty.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Flen_without_is_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Flen_without_is_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -4,14 +4,14 @@\n pub struct PubOne;\n \n impl PubOne {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n }\n \n impl PubOne {\n     // A second impl for this struct -- the error span shouldn't mention this.\n-    pub fn irrelevant(self: &Self) -> bool {\n+    pub fn irrelevant(&self) -> bool {\n         false\n     }\n }\n@@ -21,57 +21,57 @@ pub struct PubAllowed;\n \n #[allow(clippy::len_without_is_empty)]\n impl PubAllowed {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n }\n \n // No `allow` attribute on this impl block, but that doesn't matter -- we only require one on the\n // impl containing `len`.\n impl PubAllowed {\n-    pub fn irrelevant(self: &Self) -> bool {\n+    pub fn irrelevant(&self) -> bool {\n         false\n     }\n }\n \n pub trait PubTraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n }\n \n impl PubTraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n+    pub fn is_empty(&self, x: u32) -> bool {\n         false\n     }\n }\n \n struct NotPubOne;\n \n impl NotPubOne {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         // No error; `len` is pub but `NotPubOne` is not exported anyway.\n         1\n     }\n@@ -80,48 +80,48 @@ impl NotPubOne {\n struct One;\n \n impl One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         // No error; `len` is private; see issue #1085.\n         1\n     }\n }\n \n trait TraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n     // No error; `len` is private; see issue #1085.\n }\n \n impl TraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n struct HasPrivateIsEmpty;\n \n impl HasPrivateIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n struct Wither;\n \n pub trait WithIsEmpty {\n-    fn len(self: &Self) -> isize;\n-    fn is_empty(self: &Self) -> bool;\n+    fn len(&self) -> isize;\n+    fn is_empty(&self) -> bool;\n }\n \n impl WithIsEmpty for Wither {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }"}, {"sha": "d79c300c07445054ec7ca5da083bb4aaf8202f1d", "filename": "tests/ui/len_without_is_empty.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Flen_without_is_empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Flen_without_is_empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_without_is_empty.stderr?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -2,7 +2,7 @@ error: item `PubOne` has a public `len` method but no corresponding `is_empty` m\n   --> $DIR/len_without_is_empty.rs:6:1\n    |\n LL | / impl PubOne {\n-LL | |     pub fn len(self: &Self) -> isize {\n+LL | |     pub fn len(&self) -> isize {\n LL | |         1\n LL | |     }\n LL | | }\n@@ -14,15 +14,15 @@ error: trait `PubTraitsToo` has a `len` method but no (possibly inherited) `is_e\n   --> $DIR/len_without_is_empty.rs:37:1\n    |\n LL | / pub trait PubTraitsToo {\n-LL | |     fn len(self: &Self) -> isize;\n+LL | |     fn len(&self) -> isize;\n LL | | }\n    | |_^\n \n error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n   --> $DIR/len_without_is_empty.rs:49:1\n    |\n LL | / impl HasIsEmpty {\n-LL | |     pub fn len(self: &Self) -> isize {\n+LL | |     pub fn len(&self) -> isize {\n LL | |         1\n LL | |     }\n ...  |\n@@ -34,7 +34,7 @@ error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is\n   --> $DIR/len_without_is_empty.rs:61:1\n    |\n LL | / impl HasWrongIsEmpty {\n-LL | |     pub fn len(self: &Self) -> isize {\n+LL | |     pub fn len(&self) -> isize {\n LL | |         1\n LL | |     }\n ...  |"}, {"sha": "d81676a3d9f4801d06f1884e1473c8730bd7597f", "filename": "tests/ui/len_zero.fixed", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Flen_zero.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Flen_zero.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.fixed?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -7,51 +7,51 @@ pub struct One;\n struct Wither;\n \n trait TraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n     // No error; `len` is private; see issue #1085.\n }\n \n impl TraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n+    pub fn is_empty(&self, x: u32) -> bool {\n         false\n     }\n }\n \n pub trait WithIsEmpty {\n-    fn len(self: &Self) -> isize;\n-    fn is_empty(self: &Self) -> bool;\n+    fn len(&self) -> isize;\n+    fn is_empty(&self) -> bool;\n }\n \n impl WithIsEmpty for Wither {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }"}, {"sha": "ecdba921a5d0fde97fa67b5a3a455d953d3cdd38", "filename": "tests/ui/len_zero.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -7,51 +7,51 @@ pub struct One;\n struct Wither;\n \n trait TraitsToo {\n-    fn len(self: &Self) -> isize;\n+    fn len(&self) -> isize;\n     // No error; `len` is private; see issue #1085.\n }\n \n impl TraitsToo for One {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         0\n     }\n }\n \n pub struct HasIsEmpty;\n \n impl HasIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }\n \n pub struct HasWrongIsEmpty;\n \n impl HasWrongIsEmpty {\n-    pub fn len(self: &Self) -> isize {\n+    pub fn len(&self) -> isize {\n         1\n     }\n \n-    pub fn is_empty(self: &Self, x: u32) -> bool {\n+    pub fn is_empty(&self, x: u32) -> bool {\n         false\n     }\n }\n \n pub trait WithIsEmpty {\n-    fn len(self: &Self) -> isize;\n-    fn is_empty(self: &Self) -> bool;\n+    fn len(&self) -> isize;\n+    fn is_empty(&self) -> bool;\n }\n \n impl WithIsEmpty for Wither {\n-    fn len(self: &Self) -> isize {\n+    fn len(&self) -> isize {\n         1\n     }\n \n-    fn is_empty(self: &Self) -> bool {\n+    fn is_empty(&self) -> bool {\n         false\n     }\n }"}, {"sha": "9da21eb6b29b82ff9ce6283373d2f1819c8f0ebb", "filename": "tests/ui/needless_arbitrary_self_type.fixed", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fneedless_arbitrary_self_type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.fixed?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+#![warn(clippy::needless_arbitrary_self_type)]\n+#![allow(unused_mut, clippy::needless_lifetimes)]\n+\n+pub enum ValType {\n+    A,\n+    B,\n+}\n+\n+impl ValType {\n+    pub fn bad(self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn good(self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_bad(mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_good(mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad(&self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good(&self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad_with_lifetime<'a>(&'a self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good_with_lifetime<'a>(&'a self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad_with_lifetime<'a>(&'a mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good_with_lifetime<'a>(&'a mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_good(mut self: &mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_ref_good(self: &&mut &mut Self) {\n+        unimplemented!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "17aeaaf97ac73ab792661dc03cf95f14035746f3", "filename": "tests/ui/needless_arbitrary_self_type.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+\n+#![warn(clippy::needless_arbitrary_self_type)]\n+#![allow(unused_mut, clippy::needless_lifetimes)]\n+\n+pub enum ValType {\n+    A,\n+    B,\n+}\n+\n+impl ValType {\n+    pub fn bad(self: Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn good(self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_bad(mut self: Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_good(mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad(self: &Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good(&self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_bad_with_lifetime<'a>(self: &'a Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn ref_good_with_lifetime<'a>(&'a self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad(self: &mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good(&mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_good_with_lifetime<'a>(&'a mut self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_good(mut self: &mut Self) {\n+        unimplemented!();\n+    }\n+\n+    pub fn mut_ref_mut_ref_good(self: &&mut &mut Self) {\n+        unimplemented!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "f4c645d35c8f134a05fa4bd1d1665d65a42a4d5a", "filename": "tests/ui/needless_arbitrary_self_type.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fneedless_arbitrary_self_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_arbitrary_self_type.stderr?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -0,0 +1,40 @@\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:12:16\n+   |\n+LL |     pub fn bad(self: Self) {\n+   |                ^^^^^^^^^^ help: consider to change this parameter to: `self`\n+   |\n+   = note: `-D clippy::needless-arbitrary-self-type` implied by `-D warnings`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:20:20\n+   |\n+LL |     pub fn mut_bad(mut self: Self) {\n+   |                    ^^^^^^^^^^^^^^ help: consider to change this parameter to: `mut self`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:28:20\n+   |\n+LL |     pub fn ref_bad(self: &Self) {\n+   |                    ^^^^^^^^^^^ help: consider to change this parameter to: `&self`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:36:38\n+   |\n+LL |     pub fn ref_bad_with_lifetime<'a>(self: &'a Self) {\n+   |                                      ^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a self`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:44:24\n+   |\n+LL |     pub fn mut_ref_bad(self: &mut Self) {\n+   |                        ^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&mut self`\n+\n+error: the type of the `self` parameter does not need to be arbitrary\n+  --> $DIR/needless_arbitrary_self_type.rs:52:42\n+   |\n+LL |     pub fn mut_ref_bad_with_lifetime<'a>(self: &'a mut Self) {\n+   |                                          ^^^^^^^^^^^^^^^^^^ help: consider to change this parameter to: `&'a mut self`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "96d1c54946c0b40a7cee773d20f4bc6dfe0408ab", "filename": "tests/ui/option_map_unit_fn_fixable.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Foption_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.fixed?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -22,9 +22,9 @@ struct HasOption {\n }\n \n impl HasOption {\n-    fn do_option_nothing(self: &Self, value: usize) {}\n+    fn do_option_nothing(&self, value: usize) {}\n \n-    fn do_option_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_option_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "931ffc18665938cd3af7a9b592ad71f67a4df96d", "filename": "tests/ui/option_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Foption_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foption_map_unit_fn_fixable.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -22,9 +22,9 @@ struct HasOption {\n }\n \n impl HasOption {\n-    fn do_option_nothing(self: &Self, value: usize) {}\n+    fn do_option_nothing(&self, value: usize) {}\n \n-    fn do_option_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_option_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "631042c616bc0cd261579f32aa06c43e9526b151", "filename": "tests/ui/result_map_unit_fn_fixable.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.fixed?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -18,9 +18,9 @@ struct HasResult {\n }\n \n impl HasResult {\n-    fn do_result_nothing(self: &Self, value: usize) {}\n+    fn do_result_nothing(&self, value: usize) {}\n \n-    fn do_result_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_result_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}, {"sha": "679eb2326268c7a62fba3a04b228d9bbf4a827ee", "filename": "tests/ui/result_map_unit_fn_fixable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1/tests%2Fui%2Fresult_map_unit_fn_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresult_map_unit_fn_fixable.rs?ref=8ee57eed79ed4f7c9ce21b4a6dae6daad62193c1", "patch": "@@ -18,9 +18,9 @@ struct HasResult {\n }\n \n impl HasResult {\n-    fn do_result_nothing(self: &Self, value: usize) {}\n+    fn do_result_nothing(&self, value: usize) {}\n \n-    fn do_result_plus_one(self: &Self, value: usize) -> usize {\n+    fn do_result_plus_one(&self, value: usize) -> usize {\n         value + 1\n     }\n }"}]}