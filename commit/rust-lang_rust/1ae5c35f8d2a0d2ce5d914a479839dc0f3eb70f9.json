{"sha": "1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9", "node_id": "C_kwDOAAsO6NoAKDFhZTVjMzVmOGQyYTBkMmNlNWQ5MTRhNDc5ODM5ZGMwZjNlYjcwZjk", "commit": {"author": {"name": "Yacin Tmimi", "email": "ytmimi@horizonmedia.com", "date": "2021-10-19T00:48:58Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-10-19T02:32:52Z"}, "message": "Replace match expression with match! macro\n\nThis is a follow up to 5f4811ed7bc600e0cbe40c962e8933adb9baaddf\n\nThe matches! macro expresses the condition more succinctly and avoids\nthe extra level of indentation introduced with the match arm body.", "tree": {"sha": "448861c9d0f5c2142835eaf7e49971567272b6b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/448861c9d0f5c2142835eaf7e49971567272b6b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9", "html_url": "https://github.com/rust-lang/rust/commit/1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9/comments", "author": {"login": "ytmimi", "id": 29028348, "node_id": "MDQ6VXNlcjI5MDI4MzQ4", "avatar_url": "https://avatars.githubusercontent.com/u/29028348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ytmimi", "html_url": "https://github.com/ytmimi", "followers_url": "https://api.github.com/users/ytmimi/followers", "following_url": "https://api.github.com/users/ytmimi/following{/other_user}", "gists_url": "https://api.github.com/users/ytmimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ytmimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ytmimi/subscriptions", "organizations_url": "https://api.github.com/users/ytmimi/orgs", "repos_url": "https://api.github.com/users/ytmimi/repos", "events_url": "https://api.github.com/users/ytmimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ytmimi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4811ed7bc600e0cbe40c962e8933adb9baaddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4811ed7bc600e0cbe40c962e8933adb9baaddf", "html_url": "https://github.com/rust-lang/rust/commit/5f4811ed7bc600e0cbe40c962e8933adb9baaddf"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "c04b4787616933e84528d1695a386eefce5769ab", "filename": "src/lists.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=1ae5c35f8d2a0d2ce5d914a479839dc0f3eb70f9", "patch": "@@ -367,31 +367,29 @@ where\n             result.push_str(&comment);\n \n             if !inner_item.is_empty() {\n-                match tactic {\n-                    DefinitiveListTactic::SpecialMacro(_)\n-                    | DefinitiveListTactic::Vertical\n-                    | DefinitiveListTactic::Mixed => {\n-                        // We cannot keep pre-comments on the same line if the comment is normalized\n-                        let keep_comment = if formatting.config.normalize_comments()\n-                            || item.pre_comment_style == ListItemCommentStyle::DifferentLine\n-                        {\n-                            false\n-                        } else {\n-                            // We will try to keep the comment on the same line with the item here.\n-                            // 1 = ` `\n-                            let total_width = total_item_width(item) + item_sep_len + 1;\n-                            total_width <= formatting.shape.width\n-                        };\n-                        if keep_comment {\n-                            result.push(' ');\n-                        } else {\n-                            result.push('\\n');\n-                            result.push_str(indent_str);\n-                            // This is the width of the item (without comments).\n-                            line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(&s));\n-                        }\n+                use DefinitiveListTactic::*;\n+                if matches!(tactic, Vertical | Mixed | SpecialMacro(_)) {\n+                    // We cannot keep pre-comments on the same line if the comment is normalized.\n+                    let keep_comment = if formatting.config.normalize_comments()\n+                        || item.pre_comment_style == ListItemCommentStyle::DifferentLine\n+                    {\n+                        false\n+                    } else {\n+                        // We will try to keep the comment on the same line with the item here.\n+                        // 1 = ` `\n+                        let total_width = total_item_width(item) + item_sep_len + 1;\n+                        total_width <= formatting.shape.width\n+                    };\n+                    if keep_comment {\n+                        result.push(' ');\n+                    } else {\n+                        result.push('\\n');\n+                        result.push_str(indent_str);\n+                        // This is the width of the item (without comments).\n+                        line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(&s));\n                     }\n-                    _ => result.push(' '),\n+                } else {\n+                    result.push(' ')\n                 }\n             }\n             item_max_width = None;"}]}