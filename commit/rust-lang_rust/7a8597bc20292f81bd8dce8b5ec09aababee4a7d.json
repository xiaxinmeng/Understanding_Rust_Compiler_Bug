{"sha": "7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhODU5N2JjMjAyOTJmODFiZDhkY2U4YjVlYzA5YWFiYWJlZTRhN2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-07T08:15:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-07T08:15:40Z"}, "message": "Merge #5242\n\n5242: Switch to fully dynamically dispatched salsa r=matklad a=matklad\n\nThis improves compile times quite a bit\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "74488258fb566dc4344165ade6067d8f2ce7298f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74488258fb566dc4344165ade6067d8f2ce7298f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfBC8sCRBK7hj4Ov3rIwAAdHIIAAMFB2vN8XBW8gZLW0iFshk2\nn4R6YcZndfiVekhVssZdRW2b0ftJoHdLDh77CrxzmheBmpslh3CBXjR29KznYGZN\nG8Foy7GlP0JW8SLbL0xM/1+xAMS7Ipq6OeuyJgsoCmsYQnJcYnB3gLbVY/ulhK5W\n7BokRRLYCgScXhHpkqKLyBcqAtdv6oP3fsi2TndxwVyTGKlDXjS5QyEVvDQSAcK0\nUcMRx979PRNxlolP9eKlSPmlYupUaR739w6II++RKtUkiPjHYD6j+xrfsXf9lqcP\ngh7/xQAZnbSwF6aY2qo7OzliMSx6OsCTFZG8HGduYT58D+I3RFBRyDeg44+aV+c=\n=DVRa\n-----END PGP SIGNATURE-----\n", "payload": "tree 74488258fb566dc4344165ade6067d8f2ce7298f\nparent d4bc2f25de6297c75f7b7f029df224b650ef3143\nparent 4bbc385277bcab509c321b1374f72f1ef19d7750\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1594109740 +0000\ncommitter GitHub <noreply@github.com> 1594109740 +0000\n\nMerge #5242\n\n5242: Switch to fully dynamically dispatched salsa r=matklad a=matklad\n\nThis improves compile times quite a bit\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "html_url": "https://github.com/rust-lang/rust/commit/7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4bc2f25de6297c75f7b7f029df224b650ef3143", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4bc2f25de6297c75f7b7f029df224b650ef3143", "html_url": "https://github.com/rust-lang/rust/commit/d4bc2f25de6297c75f7b7f029df224b650ef3143"}, {"sha": "4bbc385277bcab509c321b1374f72f1ef19d7750", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bbc385277bcab509c321b1374f72f1ef19d7750", "html_url": "https://github.com/rust-lang/rust/commit/4bbc385277bcab509c321b1374f72f1ef19d7750"}], "stats": {"total": 189, "additions": 86, "deletions": 103}, "files": [{"sha": "54a95621a667bf18a31c0dab099539d31e3b9661", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -1490,9 +1490,8 @@ checksum = \"71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e\"\n \n [[package]]\n name = \"salsa\"\n-version = \"0.14.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d4ca1c656054666a642affbbc86ab95ed7541125a89f032483d34ee56c0f5390\"\n+version = \"0.14.3\"\n+source = \"git+https://github.com/nikomatsakis/salsa?branch=dynamic-databases-rfc#fd036a4f154c46253443b3a79b6f4400c40e87b1\"\n dependencies = [\n  \"crossbeam-utils\",\n  \"indexmap\",\n@@ -1508,8 +1507,7 @@ dependencies = [\n [[package]]\n name = \"salsa-macros\"\n version = \"0.14.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"038a09b6271446f1123f142fe7e5bef6d4687c4cf82e6986be574c2af3745530\"\n+source = \"git+https://github.com/nikomatsakis/salsa?branch=dynamic-databases-rfc#fd036a4f154c46253443b3a79b6f4400c40e87b1\"\n dependencies = [\n  \"heck\",\n  \"proc-macro2\","}, {"sha": "b2d481dfb494a61fdedd89767dd75dcded3157c5", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -8,7 +8,7 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n-salsa = \"0.14.1\"\n+salsa = { git = \"https://github.com/nikomatsakis/salsa\", branch = \"dynamic-databases-rfc\" }\n relative-path = \"1.0.0\"\n rustc-hash = \"1.1.0\"\n "}, {"sha": "590efffa44c83452e9147124a29126cb03c13268", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -113,7 +113,7 @@ pub trait SourceDatabase: CheckCanceled + FileLoader + std::fmt::Debug {\n     fn crate_graph(&self) -> Arc<CrateGraph>;\n }\n \n-fn parse_query(db: &impl SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {\n+fn parse_query(db: &dyn SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {\n     let _p = profile(\"parse_query\").detail(|| format!(\"{:?}\", file_id));\n     let text = db.file_text(file_id);\n     SourceFile::parse(&*text)\n@@ -136,10 +136,7 @@ pub trait SourceDatabaseExt: SourceDatabase {\n     fn source_root_crates(&self, id: SourceRootId) -> Arc<FxHashSet<CrateId>>;\n }\n \n-fn source_root_crates(\n-    db: &(impl SourceDatabaseExt + SourceDatabase),\n-    id: SourceRootId,\n-) -> Arc<FxHashSet<CrateId>> {\n+fn source_root_crates(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<FxHashSet<CrateId>> {\n     let graph = db.crate_graph();\n     let res = graph\n         .iter()"}, {"sha": "aa335f1e302dd6d3eb6a54d5c01b1e86684fc3fb", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -31,7 +31,7 @@ pub struct FunctionData {\n }\n \n impl FunctionData {\n-    pub(crate) fn fn_data_query(db: &impl DefDatabase, func: FunctionId) -> Arc<FunctionData> {\n+    pub(crate) fn fn_data_query(db: &dyn DefDatabase, func: FunctionId) -> Arc<FunctionData> {\n         let loc = func.lookup(db);\n         let item_tree = db.item_tree(loc.id.file_id);\n         let func = &item_tree[loc.id.value];"}, {"sha": "339f819b8b5bc42c7bd4ae99a8d14aa99f48625e", "filename": "crates/ra_hir_def/src/test_db.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -1,7 +1,7 @@\n //! Database used for testing `hir_def`.\n \n use std::{\n-    panic,\n+    fmt, panic,\n     sync::{Arc, Mutex},\n };\n \n@@ -18,10 +18,10 @@ use crate::db::DefDatabase;\n     crate::db::InternDatabaseStorage,\n     crate::db::DefDatabaseStorage\n )]\n-#[derive(Debug, Default)]\n+#[derive(Default)]\n pub struct TestDB {\n-    runtime: salsa::Runtime<TestDB>,\n-    events: Mutex<Option<Vec<salsa::Event<TestDB>>>>,\n+    storage: salsa::Storage<TestDB>,\n+    events: Mutex<Option<Vec<salsa::Event>>>,\n }\n \n impl Upcast<dyn AstDatabase> for TestDB {\n@@ -37,20 +37,20 @@ impl Upcast<dyn DefDatabase> for TestDB {\n }\n \n impl salsa::Database for TestDB {\n-    fn salsa_runtime(&self) -> &salsa::Runtime<Self> {\n-        &self.runtime\n-    }\n-    fn salsa_runtime_mut(&mut self) -> &mut salsa::Runtime<Self> {\n-        &mut self.runtime\n-    }\n-    fn salsa_event(&self, event: impl Fn() -> salsa::Event<TestDB>) {\n+    fn salsa_event(&self, event: salsa::Event) {\n         let mut events = self.events.lock().unwrap();\n         if let Some(events) = &mut *events {\n-            events.push(event());\n+            events.push(event);\n         }\n     }\n }\n \n+impl fmt::Debug for TestDB {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"TestDB\").finish()\n+    }\n+}\n+\n impl panic::RefUnwindSafe for TestDB {}\n \n impl FileLoader for TestDB {\n@@ -78,7 +78,7 @@ impl TestDB {\n         panic!(\"Can't find module for file\")\n     }\n \n-    pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<TestDB>> {\n+    pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event> {\n         *self.events.lock().unwrap() = Some(Vec::new());\n         f();\n         self.events.lock().unwrap().take().unwrap()\n@@ -92,7 +92,7 @@ impl TestDB {\n                 // This pretty horrible, but `Debug` is the only way to inspect\n                 // QueryDescriptor at the moment.\n                 salsa::EventKind::WillExecute { database_key } => {\n-                    Some(format!(\"{:?}\", database_key))\n+                    Some(format!(\"{:?}\", database_key.debug(self)))\n                 }\n                 _ => None,\n             })"}, {"sha": "332fa556fad5236bbde4cae641568cb604256b52", "filename": "crates/ra_hir_expand/src/test_db.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -1,7 +1,7 @@\n //! Database used for testing `hir_expand`.\n \n use std::{\n-    panic,\n+    fmt, panic,\n     sync::{Arc, Mutex},\n };\n \n@@ -13,25 +13,23 @@ use rustc_hash::FxHashSet;\n     ra_db::SourceDatabaseStorage,\n     crate::db::AstDatabaseStorage\n )]\n-#[derive(Debug, Default)]\n+#[derive(Default)]\n pub struct TestDB {\n-    runtime: salsa::Runtime<TestDB>,\n-    events: Mutex<Option<Vec<salsa::Event<TestDB>>>>,\n+    storage: salsa::Storage<TestDB>,\n+    events: Mutex<Option<Vec<salsa::Event>>>,\n }\n \n-impl salsa::Database for TestDB {\n-    fn salsa_runtime(&self) -> &salsa::Runtime<Self> {\n-        &self.runtime\n-    }\n-\n-    fn salsa_runtime_mut(&mut self) -> &mut salsa::Runtime<Self> {\n-        &mut self.runtime\n+impl fmt::Debug for TestDB {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"TestDB\").finish()\n     }\n+}\n \n-    fn salsa_event(&self, event: impl Fn() -> salsa::Event<TestDB>) {\n+impl salsa::Database for TestDB {\n+    fn salsa_event(&self, event: salsa::Event) {\n         let mut events = self.events.lock().unwrap();\n         if let Some(events) = &mut *events {\n-            events.push(event());\n+            events.push(event);\n         }\n     }\n }"}, {"sha": "84afe0484b751e573a25698a7c69b139a5523a1e", "filename": "crates/ra_hir_ty/src/db.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdb.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -19,7 +19,6 @@ use crate::{\n use hir_expand::name::Name;\n \n #[salsa::query_group(HirDatabaseStorage)]\n-#[salsa::requires(salsa::Database)]\n pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::invoke(infer_wait)]\n     #[salsa::transparent]"}, {"sha": "0fa0f7908c3a55cd15b2a1ed5635a2936c11e96c", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -1216,7 +1216,7 @@ pub(crate) fn impl_trait_query(db: &dyn HirDatabase, impl_id: ImplId) -> Option<\n }\n \n pub(crate) fn return_type_impl_traits(\n-    db: &impl HirDatabase,\n+    db: &dyn HirDatabase,\n     def: hir_def::FunctionId,\n ) -> Option<Arc<Binders<ReturnTypeImplTraits>>> {\n     // FIXME unify with fn_sig_for_fn instead of doing lowering twice, maybe"}, {"sha": "dc447955f751e42d85de22b52e19474604eabde0", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -1,7 +1,7 @@\n //! Database used for testing `hir`.\n \n use std::{\n-    panic,\n+    fmt, panic,\n     sync::{Arc, Mutex},\n };\n \n@@ -26,10 +26,15 @@ use crate::{\n     hir_def::db::DefDatabaseStorage,\n     crate::db::HirDatabaseStorage\n )]\n-#[derive(Debug, Default)]\n+#[derive(Default)]\n pub struct TestDB {\n-    events: Mutex<Option<Vec<salsa::Event<TestDB>>>>,\n-    runtime: salsa::Runtime<TestDB>,\n+    storage: salsa::Storage<TestDB>,\n+    events: Mutex<Option<Vec<salsa::Event>>>,\n+}\n+impl fmt::Debug for TestDB {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"TestDB\").finish()\n+    }\n }\n \n impl Upcast<dyn AstDatabase> for TestDB {\n@@ -45,27 +50,19 @@ impl Upcast<dyn DefDatabase> for TestDB {\n }\n \n impl salsa::Database for TestDB {\n-    fn salsa_runtime(&self) -> &salsa::Runtime<TestDB> {\n-        &self.runtime\n-    }\n-\n-    fn salsa_runtime_mut(&mut self) -> &mut salsa::Runtime<Self> {\n-        &mut self.runtime\n-    }\n-\n-    fn salsa_event(&self, event: impl Fn() -> salsa::Event<TestDB>) {\n+    fn salsa_event(&self, event: salsa::Event) {\n         let mut events = self.events.lock().unwrap();\n         if let Some(events) = &mut *events {\n-            events.push(event());\n+            events.push(event);\n         }\n     }\n }\n \n impl salsa::ParallelDatabase for TestDB {\n     fn snapshot(&self) -> salsa::Snapshot<TestDB> {\n         salsa::Snapshot::new(TestDB {\n+            storage: self.storage.snapshot(),\n             events: Default::default(),\n-            runtime: self.runtime.snapshot(self),\n         })\n     }\n }\n@@ -182,7 +179,7 @@ impl TestDB {\n }\n \n impl TestDB {\n-    pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<TestDB>> {\n+    pub fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event> {\n         *self.events.lock().unwrap() = Some(Vec::new());\n         f();\n         self.events.lock().unwrap().take().unwrap()\n@@ -196,7 +193,7 @@ impl TestDB {\n                 // This pretty horrible, but `Debug` is the only way to inspect\n                 // QueryDescriptor at the moment.\n                 salsa::EventKind::WillExecute { database_key } => {\n-                    Some(format!(\"{:?}\", database_key))\n+                    Some(format!(\"{:?}\", database_key.debug(self)))\n                 }\n                 _ => None,\n             })"}, {"sha": "69f2d7667eec750bab4bcec3162e58e6da97b736", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -21,7 +21,7 @@ use hir_def::{\n };\n use hir_expand::{db::AstDatabase, InFile};\n use insta::assert_snapshot;\n-use ra_db::{fixture::WithFixture, salsa::Database, FileRange, SourceDatabase};\n+use ra_db::{fixture::WithFixture, FileRange, SourceDatabase, SourceDatabaseExt};\n use ra_syntax::{\n     algo,\n     ast::{self, AstNode},\n@@ -317,7 +317,7 @@ fn typing_whitespace_inside_a_function_should_not_invalidate_types() {\n     \"\n     .to_string();\n \n-    db.query_mut(ra_db::FileTextQuery).set(pos.file_id, Arc::new(new_text));\n+    db.set_file_text(pos.file_id, Arc::new(new_text));\n \n     {\n         let events = db.log_executed(|| {"}, {"sha": "e6a9d32116a92b89fc0a7a704679af22039228c2", "filename": "crates/ra_hir_ty/src/traits/chalk/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk%2Ftls.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -10,7 +10,7 @@ use hir_def::{AdtId, AssocContainerId, DefWithBodyId, Lookup, TypeAliasId};\n \n pub use unsafe_tls::{set_current_program, with_current_program};\n \n-pub struct DebugContext<'a>(&'a (dyn HirDatabase + 'a));\n+pub struct DebugContext<'a>(&'a dyn HirDatabase);\n \n impl DebugContext<'_> {\n     pub fn debug_struct_id("}, {"sha": "08e6f69cb302a1d88a3e0abcc24fd44aead9be08", "filename": "crates/ra_ide/src/status.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_ide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_ide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fstatus.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -2,10 +2,7 @@ use std::{fmt, iter::FromIterator, sync::Arc};\n \n use hir::MacroFile;\n use ra_db::{\n-    salsa::{\n-        debug::{DebugQueryTable, TableEntry},\n-        Database,\n-    },\n+    salsa::debug::{DebugQueryTable, TableEntry},\n     FileTextQuery, SourceRootId,\n };\n use ra_ide_db::{\n@@ -14,15 +11,15 @@ use ra_ide_db::{\n };\n use ra_prof::{memory_usage, Bytes};\n use ra_syntax::{ast, Parse, SyntaxNode};\n+use rustc_hash::FxHashMap;\n \n use crate::FileId;\n-use rustc_hash::FxHashMap;\n \n fn syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n-    db.query(ra_db::ParseQuery).entries::<SyntaxTreeStats>()\n+    ra_db::ParseQuery.in_db(db).entries::<SyntaxTreeStats>()\n }\n fn macro_syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n-    db.query(hir::db::ParseMacroQuery).entries::<SyntaxTreeStats>()\n+    hir::db::ParseMacroQuery.in_db(db).entries::<SyntaxTreeStats>()\n }\n \n // Feature: Status\n@@ -35,10 +32,10 @@ fn macro_syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n // | VS Code | **Rust Analyzer: Status**\n // |===\n pub(crate) fn status(db: &RootDatabase) -> String {\n-    let files_stats = db.query(FileTextQuery).entries::<FilesStats>();\n+    let files_stats = FileTextQuery.in_db(db).entries::<FilesStats>();\n     let syntax_tree_stats = syntax_tree_stats(db);\n     let macro_syntax_tree_stats = macro_syntax_tree_stats(db);\n-    let symbols_stats = db.query(LibrarySymbolsQuery).entries::<LibrarySymbolsStats>();\n+    let symbols_stats = LibrarySymbolsQuery.in_db(db).entries::<LibrarySymbolsStats>();\n     format!(\n         \"{}\\n{}\\n{}\\n{} (macros)\\n\\n\\nmemory:\\n{}\\ngc {:?} seconds ago\",\n         files_stats,"}, {"sha": "d8da3f949ea4162d6b182feeef2a799555037219", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -147,21 +147,21 @@ impl RootDatabase {\n \n         let sweep = SweepStrategy::default().discard_values().sweep_all_revisions();\n \n-        self.query(ra_db::ParseQuery).sweep(sweep);\n-        self.query(hir::db::ParseMacroQuery).sweep(sweep);\n+        ra_db::ParseQuery.in_db(self).sweep(sweep);\n+        hir::db::ParseMacroQuery.in_db(self).sweep(sweep);\n \n         // Macros do take significant space, but less then the syntax trees\n         // self.query(hir::db::MacroDefQuery).sweep(sweep);\n         // self.query(hir::db::MacroArgQuery).sweep(sweep);\n         // self.query(hir::db::MacroExpandQuery).sweep(sweep);\n \n-        self.query(hir::db::AstIdMapQuery).sweep(sweep);\n+        hir::db::AstIdMapQuery.in_db(self).sweep(sweep);\n \n-        self.query(hir::db::BodyWithSourceMapQuery).sweep(sweep);\n+        hir::db::BodyWithSourceMapQuery.in_db(self).sweep(sweep);\n \n-        self.query(hir::db::ExprScopesQuery).sweep(sweep);\n-        self.query(hir::db::InferQueryQuery).sweep(sweep);\n-        self.query(hir::db::BodyQuery).sweep(sweep);\n+        hir::db::ExprScopesQuery.in_db(self).sweep(sweep);\n+        hir::db::InferQueryQuery.in_db(self).sweep(sweep);\n+        hir::db::BodyQuery.in_db(self).sweep(sweep);\n     }\n \n     pub fn per_query_memory_usage(&mut self) -> Vec<(String, Bytes)> {\n@@ -170,14 +170,14 @@ impl RootDatabase {\n         macro_rules! sweep_each_query {\n             ($($q:path)*) => {$(\n                 let before = memory_usage().allocated;\n-                self.query($q).sweep(sweep);\n+                $q.in_db(self).sweep(sweep);\n                 let after = memory_usage().allocated;\n                 let q: $q = Default::default();\n                 let name = format!(\"{:?}\", q);\n                 acc.push((name, before - after));\n \n                 let before = memory_usage().allocated;\n-                self.query($q).sweep(sweep.discard_everything());\n+                $q.in_db(self).sweep(sweep.discard_everything());\n                 let after = memory_usage().allocated;\n                 let q: $q = Default::default();\n                 let name = format!(\"{:?} (deps)\", q);\n@@ -252,7 +252,7 @@ impl RootDatabase {\n         // write.\n         // We do this after collecting the non-interned queries to correctly attribute memory used\n         // by interned data.\n-        self.runtime.synthetic_write(Durability::HIGH);\n+        self.salsa_runtime_mut().synthetic_write(Durability::HIGH);\n \n         sweep_each_query![\n             // AstDatabase"}, {"sha": "6900cac73e18ca9a11da5b162bde11ea2db77bf1", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -11,11 +11,11 @@ pub mod imports_locator;\n pub mod source_change;\n mod wasm_shims;\n \n-use std::sync::Arc;\n+use std::{fmt, sync::Arc};\n \n use hir::db::{AstDatabase, DefDatabase, HirDatabase};\n use ra_db::{\n-    salsa::{self, Database, Durability},\n+    salsa::{self, Durability},\n     Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase,\n     Upcast,\n };\n@@ -33,13 +33,18 @@ use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n     hir::db::DefDatabaseStorage,\n     hir::db::HirDatabaseStorage\n )]\n-#[derive(Debug)]\n pub struct RootDatabase {\n-    runtime: salsa::Runtime<RootDatabase>,\n+    storage: salsa::Storage<RootDatabase>,\n     pub last_gc: crate::wasm_shims::Instant,\n     pub last_gc_check: crate::wasm_shims::Instant,\n }\n \n+impl fmt::Debug for RootDatabase {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_struct(\"RootDatabase\").finish()\n+    }\n+}\n+\n impl Upcast<dyn AstDatabase> for RootDatabase {\n     fn upcast(&self) -> &(dyn AstDatabase + 'static) {\n         &*self\n@@ -71,17 +76,11 @@ impl FileLoader for RootDatabase {\n }\n \n impl salsa::Database for RootDatabase {\n-    fn salsa_runtime(&self) -> &salsa::Runtime<RootDatabase> {\n-        &self.runtime\n-    }\n-    fn salsa_runtime_mut(&mut self) -> &mut salsa::Runtime<Self> {\n-        &mut self.runtime\n-    }\n     fn on_propagated_panic(&self) -> ! {\n         Canceled::throw()\n     }\n-    fn salsa_event(&self, event: impl Fn() -> salsa::Event<RootDatabase>) {\n-        match event().kind {\n+    fn salsa_event(&self, event: salsa::Event) {\n+        match event.kind {\n             salsa::EventKind::DidValidateMemoizedValue { .. }\n             | salsa::EventKind::WillExecute { .. } => {\n                 self.check_canceled();\n@@ -100,7 +99,7 @@ impl Default for RootDatabase {\n impl RootDatabase {\n     pub fn new(lru_capacity: Option<usize>) -> RootDatabase {\n         let mut db = RootDatabase {\n-            runtime: salsa::Runtime::default(),\n+            storage: salsa::Storage::default(),\n             last_gc: crate::wasm_shims::Instant::now(),\n             last_gc_check: crate::wasm_shims::Instant::now(),\n         };\n@@ -113,16 +112,16 @@ impl RootDatabase {\n \n     pub fn update_lru_capacity(&mut self, lru_capacity: Option<usize>) {\n         let lru_capacity = lru_capacity.unwrap_or(ra_db::DEFAULT_LRU_CAP);\n-        self.query_mut(ra_db::ParseQuery).set_lru_capacity(lru_capacity);\n-        self.query_mut(hir::db::ParseMacroQuery).set_lru_capacity(lru_capacity);\n-        self.query_mut(hir::db::MacroExpandQuery).set_lru_capacity(lru_capacity);\n+        ra_db::ParseQuery.in_db_mut(self).set_lru_capacity(lru_capacity);\n+        hir::db::ParseMacroQuery.in_db_mut(self).set_lru_capacity(lru_capacity);\n+        hir::db::MacroExpandQuery.in_db_mut(self).set_lru_capacity(lru_capacity);\n     }\n }\n \n impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n         salsa::Snapshot::new(RootDatabase {\n-            runtime: self.runtime.snapshot(self),\n+            storage: self.storage.snapshot(),\n             last_gc: self.last_gc,\n             last_gc_check: self.last_gc_check,\n         })\n@@ -134,7 +133,7 @@ pub trait LineIndexDatabase: ra_db::SourceDatabase + CheckCanceled {\n     fn line_index(&self, file_id: FileId) -> Arc<LineIndex>;\n }\n \n-fn line_index(db: &impl LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n+fn line_index(db: &dyn LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n     let text = db.file_text(file_id);\n     Arc::new(LineIndex::new(&*text))\n }"}, {"sha": "131e2a128d1aec7ad9c91eceed42ec05da232ea4", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a8597bc20292f81bd8dce8b5ec09aababee4a7d/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=7a8597bc20292f81bd8dce8b5ec09aababee4a7d", "patch": "@@ -87,7 +87,7 @@ impl Query {\n }\n \n #[salsa::query_group(SymbolsDatabaseStorage)]\n-pub trait SymbolsDatabase: hir::db::HirDatabase + SourceDatabaseExt + ParallelDatabase {\n+pub trait SymbolsDatabase: hir::db::HirDatabase + SourceDatabaseExt {\n     fn file_symbols(&self, file_id: FileId) -> Arc<SymbolIndex>;\n     fn library_symbols(&self) -> Arc<FxHashMap<SourceRootId, SymbolIndex>>;\n     /// The set of \"local\" (that is, from the current workspace) roots.\n@@ -100,9 +100,7 @@ pub trait SymbolsDatabase: hir::db::HirDatabase + SourceDatabaseExt + ParallelDa\n     fn library_roots(&self) -> Arc<FxHashSet<SourceRootId>>;\n }\n \n-fn library_symbols(\n-    db: &(impl SymbolsDatabase + ParallelDatabase),\n-) -> Arc<FxHashMap<SourceRootId, SymbolIndex>> {\n+fn library_symbols(db: &dyn SymbolsDatabase) -> Arc<FxHashMap<SourceRootId, SymbolIndex>> {\n     let _p = profile(\"library_symbols\");\n \n     let roots = db.library_roots();\n@@ -123,7 +121,7 @@ fn library_symbols(\n     Arc::new(res)\n }\n \n-fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n+fn file_symbols(db: &dyn SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex> {\n     db.check_canceled();\n     let parse = db.parse(file_id);\n "}]}