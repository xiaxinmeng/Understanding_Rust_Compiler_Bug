{"sha": "eb1d2e637ee9be0d111feb435b068081f10e6ec3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMWQyZTYzN2VlOWJlMGQxMTFmZWI0MzViMDY4MDgxZjEwZTZlYzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-01T19:14:37Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-12-02T12:54:30Z"}, "message": "Address review comments", "tree": {"sha": "f36fc01fe83cbe10c9ad6f897db2af9dd2834409", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f36fc01fe83cbe10c9ad6f897db2af9dd2834409"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb1d2e637ee9be0d111feb435b068081f10e6ec3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1d2e637ee9be0d111feb435b068081f10e6ec3", "html_url": "https://github.com/rust-lang/rust/commit/eb1d2e637ee9be0d111feb435b068081f10e6ec3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb1d2e637ee9be0d111feb435b068081f10e6ec3/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d4b633be36a59667f8648d987169f59f8314b1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d4b633be36a59667f8648d987169f59f8314b1c", "html_url": "https://github.com/rust-lang/rust/commit/2d4b633be36a59667f8648d987169f59f8314b1c"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "9bc9bc6de5b4b60a0dca1fbbfae844ecef4cac9b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb1d2e637ee9be0d111feb435b068081f10e6ec3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1d2e637ee9be0d111feb435b068081f10e6ec3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=eb1d2e637ee9be0d111feb435b068081f10e6ec3", "patch": "@@ -1519,8 +1519,11 @@ pub struct Resolver<'a, 'b: 'a> {\n     /// The current self item if inside an ADT (used for better errors).\n     current_self_item: Option<NodeId>,\n \n-    /// FIXME: Refactor things so that this is passed through arguments and not resolver.\n+    /// FIXME: Refactor things so that these fields are passed through arguments and not resolver.\n+    /// We are resolving a last import segment during import validation.\n     last_import_segment: bool,\n+    /// This binding should be ignored during in-module resolution, so that we don't get\n+    /// \"self-confirming\" import resolutions during import validation.\n     blacklisted_binding: Option<&'a NameBinding<'a>>,\n \n     /// The idents for the primitive types."}, {"sha": "f0268672082edd696200573ea569771f6ce51683", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eb1d2e637ee9be0d111feb435b068081f10e6ec3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1d2e637ee9be0d111feb435b068081f10e6ec3/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=eb1d2e637ee9be0d111feb435b068081f10e6ec3", "patch": "@@ -42,10 +42,15 @@ use std::{mem, ptr};\n #[derive(Clone, Debug)]\n pub enum ImportDirectiveSubclass<'a> {\n     SingleImport {\n+        /// `source` in `use prefix::source as target`.\n         source: Ident,\n+        /// `target` in `use prefix::source as target`.\n         target: Ident,\n+        /// Bindings to which `source` refers to.\n         source_bindings: PerNS<Cell<Result<&'a NameBinding<'a>, Determinacy>>>,\n+        /// Bindings introduced by `target`.\n         target_bindings: PerNS<Cell<Option<&'a NameBinding<'a>>>>,\n+        /// `true` for `...::{self [as target]}` imports, `false` otherwise.\n         type_ns_only: bool,\n     },\n     GlobImport {\n@@ -946,9 +951,12 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                     // Consistency checks, analogous to `finalize_current_module_macro_resolutions`.\n                     let initial_def = source_bindings[ns].get().map(|initial_binding| {\n                         all_ns_err = false;\n-                        if target.name == \"_\" &&\n-                           initial_binding.is_extern_crate() && !initial_binding.is_import() {\n-                            this.used_imports.insert((directive.id, TypeNS));\n+                        if let Some(target_binding) = target_bindings[ns].get() {\n+                            if target.name == \"_\" &&\n+                               initial_binding.is_extern_crate() && !initial_binding.is_import() {\n+                                this.record_use(ident, ns, target_binding,\n+                                                directive.module_path.is_empty());\n+                            }\n                         }\n                         initial_binding.def_ignoring_ambiguity()\n                     });"}]}