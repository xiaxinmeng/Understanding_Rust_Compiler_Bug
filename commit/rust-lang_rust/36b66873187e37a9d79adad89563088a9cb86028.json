{"sha": "36b66873187e37a9d79adad89563088a9cb86028", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YjY2ODczMTg3ZTM3YTlkNzlhZGFkODk1NjMwODhhOWNiODYwMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-16T00:09:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-03-16T00:09:14Z"}, "message": "Auto merge of #49051 - kennytm:rollup, r=kennytm\n\nRollup of 17 pull requests\n\n- Successful merges: #48706, #48875, #48892, #48922, #48957, #48959, #48961, #48965, #49007, #49024, #49042, #49050, #48853, #48990, #49037, #49049, #48972\n- Failed merges:", "tree": {"sha": "b643fb972ed8073cd61582737c9757e6b2fa461c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b643fb972ed8073cd61582737c9757e6b2fa461c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b66873187e37a9d79adad89563088a9cb86028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b66873187e37a9d79adad89563088a9cb86028", "html_url": "https://github.com/rust-lang/rust/commit/36b66873187e37a9d79adad89563088a9cb86028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b66873187e37a9d79adad89563088a9cb86028/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39264539448e7ec5e98067859db71685393a4464", "url": "https://api.github.com/repos/rust-lang/rust/commits/39264539448e7ec5e98067859db71685393a4464", "html_url": "https://github.com/rust-lang/rust/commit/39264539448e7ec5e98067859db71685393a4464"}, {"sha": "db2f0ae1f437812bfb5d465d31b293068fa45beb", "url": "https://api.github.com/repos/rust-lang/rust/commits/db2f0ae1f437812bfb5d465d31b293068fa45beb", "html_url": "https://github.com/rust-lang/rust/commit/db2f0ae1f437812bfb5d465d31b293068fa45beb"}], "stats": {"total": 1099, "additions": 637, "deletions": 462}, "files": [{"sha": "63a6b3c66a6a97e9f92b9c6b75749f77cb62f1ac", "filename": "src/Cargo.lock", "status": "modified", "additions": 16, "deletions": 27, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -198,7 +198,7 @@ dependencies = [\n  \"hex 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"home 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ignore 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazycell 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -944,11 +944,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"jobserver\"\n-version = \"0.1.9\"\n+version = \"0.1.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1349,19 +1350,18 @@ version = \"0.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"parking_lot_core\"\n-version = \"0.2.9\"\n+version = \"0.2.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1469,16 +1469,6 @@ dependencies = [\n  \"nibble_vec 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"rand\"\n-version = \"0.3.22\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"fuchsia-zircon 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"rand\"\n version = \"0.4.2\"\n@@ -1692,7 +1682,7 @@ dependencies = [\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n- \"jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc_macro 0.0.0\",\n@@ -1723,7 +1713,7 @@ dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-serialize 29.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1824,7 +1814,7 @@ name = \"rustc_back\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n@@ -1867,7 +1857,7 @@ dependencies = [\n  \"ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1923,7 +1913,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"graphviz 0.0.0\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n@@ -2102,7 +2092,7 @@ dependencies = [\n  \"cc 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"jobserver 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2948,7 +2938,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum itertools 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3f2be4da1690a039e9ae5fd575f706a63ad5a2120f161b1d653c9da3930dd21\"\n \"checksum itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b07332223953b5051bceb67e8c4700aa65291535568e1f12408c43c4a42c0394\"\n \"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n-\"checksum jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"565f6106bd87b394398f813bea4e5ecad6d6b0f6aa077592d088f882a506481d\"\n+\"checksum jobserver 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9f2abd9fd3242accb0e2e30986f2cf30cda3e19eec5cc6d584b218ce2b1c0e3c\"\n \"checksum json 0.11.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ebf0fac977ee3a4a3242b6446004ff64514889e3e2730bbd4f764a67a2e483\"\n \"checksum jsonrpc-core 8.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddf83704f4e79979a424d1082dd2c1e52683058056c9280efa19ac5f6bc9033c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n@@ -2990,7 +2980,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum os_pipe 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"998bfbb3042e715190fe2a41abfa047d7e8cb81374d2977d7f100eacd8619cb1\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n \"checksum parking_lot 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3e7f7c9857874e54afeb950eebeae662b1e51a2493666d2ea4c0a5d91dcf0412\"\n-\"checksum parking_lot_core 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6bf05dc61189828dfd7a59fd6e66d538e88d6b30390da1124a291e09fd3098b3\"\n+\"checksum parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"538ef00b7317875071d5e00f603f24d16f0b474c1a5fc0ccb8b454ca72eafa79\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a6dda33d67c26f0aac90d324ab2eb7239c819fc7b2552fe9faa4fe88441edc8\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n@@ -3003,7 +2993,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1eca14c727ad12702eb4b6bfb5a232287dcf8385cb8ca83a3eeaf6519c44c408\"\n \"checksum racer 2.0.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"034f1c4528581c40a60e96875467c03315868084e08ff4ceb46a00f7be3b16b4\"\n \"checksum radix_trie 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"211c49b6a9995cac0fd1dd9ca60b42cf3a51e151a12eb954b3a9e75513426ee8\"\n-\"checksum rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15a732abf9d20f0ad8eeb6f909bf6868722d9a06e1e50802b6a70351f40b4eb1\"\n \"checksum rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eba5f8cb59cc50ed56be8880a5c7b496bfd9bd26394e176bc67884094145c2c5\"\n \"checksum rayon 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"485541959c8ecc49865526fe6c4de9653dd6e60d829d6edf0be228167b60372d\"\n \"checksum rayon-core 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9d24ad214285a7729b174ed6d3bcfcb80177807f959d95fafd5bfc5c4f201ac8\""}, {"sha": "4be16475590f4fdf946019953785b881a141e607", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -175,9 +175,6 @@ fn main() {\n         if let Ok(s) = env::var(\"RUSTC_CODEGEN_UNITS\") {\n             cmd.arg(\"-C\").arg(format!(\"codegen-units={}\", s));\n         }\n-        if env::var(\"RUSTC_THINLTO\").is_ok() {\n-            cmd.arg(\"-Ccodegen-units=16\").arg(\"-Zthinlto\");\n-        }\n \n         // Emit save-analysis info.\n         if env::var(\"RUSTC_SAVE_ANALYSIS\") == Ok(\"api\".to_string()) {"}, {"sha": "fab7a2b3fcc5c01993d26d20462fa786090416ba", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -778,17 +778,6 @@ impl<'a> Builder<'a> {\n             if cmd != \"bench\" {\n                 cargo.arg(\"--release\");\n             }\n-\n-            if self.config.rust_codegen_units.is_none() &&\n-               self.build.is_rust_llvm(compiler.host) &&\n-               self.config.rust_thinlto {\n-                cargo.env(\"RUSTC_THINLTO\", \"1\");\n-            } else if self.config.rust_codegen_units.is_none() {\n-                // Generally, if ThinLTO has been disabled for some reason, we\n-                // want to set the codegen units to 1. However, we shouldn't do\n-                // this if the option was specifically set by the user.\n-                cargo.env(\"RUSTC_CODEGEN_UNITS\", \"1\");\n-            }\n         }\n \n         if self.config.locked_deps {"}, {"sha": "920a8ffc2fc860e1981fe053d451cb07f3c9f2dc", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -86,7 +86,6 @@ pub struct Config {\n     // rust codegen options\n     pub rust_optimize: bool,\n     pub rust_codegen_units: Option<u32>,\n-    pub rust_thinlto: bool,\n     pub rust_debug_assertions: bool,\n     pub rust_debuginfo: bool,\n     pub rust_debuginfo_lines: bool,\n@@ -270,7 +269,6 @@ impl Default for StringOrBool {\n struct Rust {\n     optimize: Option<bool>,\n     codegen_units: Option<u32>,\n-    thinlto: Option<bool>,\n     debug_assertions: Option<bool>,\n     debuginfo: Option<bool>,\n     debuginfo_lines: Option<bool>,\n@@ -429,7 +427,6 @@ impl Config {\n \n         // Store off these values as options because if they're not provided\n         // we'll infer default values for them later\n-        let mut thinlto = None;\n         let mut llvm_assertions = None;\n         let mut debuginfo_lines = None;\n         let mut debuginfo_only_std = None;\n@@ -473,7 +470,6 @@ impl Config {\n             optimize = rust.optimize;\n             ignore_git = rust.ignore_git;\n             debug_jemalloc = rust.debug_jemalloc;\n-            thinlto = rust.thinlto;\n             set(&mut config.rust_optimize_tests, rust.optimize_tests);\n             set(&mut config.rust_debuginfo_tests, rust.debuginfo_tests);\n             set(&mut config.codegen_tests, rust.codegen_tests);\n@@ -561,7 +557,6 @@ impl Config {\n             \"stable\" | \"beta\" | \"nightly\" => true,\n             _ => false,\n         };\n-        config.rust_thinlto = thinlto.unwrap_or(true);\n         config.rust_debuginfo_lines = debuginfo_lines.unwrap_or(default);\n         config.rust_debuginfo_only_std = debuginfo_only_std.unwrap_or(default);\n "}, {"sha": "97da7cae07f7c6e9aa99810121584496f5484791", "filename": "src/bootstrap/configure.py", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Fbootstrap%2Fconfigure.py", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Fbootstrap%2Fconfigure.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfigure.py?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -71,7 +71,6 @@ def v(*args):\n # Optimization and debugging options. These may be overridden by the release\n # channel, etc.\n o(\"optimize\", \"rust.optimize\", \"build optimized rust code\")\n-o(\"thinlto\", \"rust.thinlto\", \"build Rust with ThinLTO enabled\")\n o(\"optimize-llvm\", \"llvm.optimize\", \"build optimized LLVM\")\n o(\"llvm-assertions\", \"llvm.assertions\", \"build LLVM with assertions\")\n o(\"debug-assertions\", \"rust.debug-assertions\", \"build with debugging assertions\")"}, {"sha": "e3f38e4834a92dcf86643532ed9df5930b66fa87", "filename": "src/ci/run.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -46,7 +46,6 @@ export RUST_RELEASE_CHANNEL=nightly\n if [ \"$DEPLOY$DEPLOY_ALT\" != \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --release-channel=$RUST_RELEASE_CHANNEL\"\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-llvm-static-stdcpp\"\n-  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-thinlto\"\n \n   if [ \"$NO_LLVM_ASSERTIONS\" = \"1\" ]; then\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-llvm-assertions\""}, {"sha": "fea8685a605d6859b52fcd4a3806d016b5826e06", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -35,6 +35,22 @@ let x = 5;\n \n There's some subtlety though! Read on for more details.\n \n+## Passing or failing a doctest\n+\n+Like regular unit tests, regular doctests are considered to \"pass\"\n+if they compile and run without panicking.\n+So if you want to demonstrate that some computation gives a certain result,\n+the `assert!` family of macros works the same as other Rust code:\n+\n+```rust\n+let foo = \"foo\";\n+\n+assert_eq!(foo, \"foo\");\n+```\n+\n+This way, if the computation ever returns something different,\n+the code panics and the doctest fails.\n+\n ## Pre-processing examples\n \n In the example above, you'll note something strange: there's no `main`"}, {"sha": "d1e746ea43b45516875e87f7d30f94f0e194556d", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -9,11 +9,8 @@\n // except according to those terms.\n \n use std::borrow::Cow;\n-#[cfg(not(target_arch = \"asmjs\"))]\n use std::collections::CollectionAllocErr::*;\n-#[cfg(not(target_arch = \"asmjs\"))]\n use std::mem::size_of;\n-#[cfg(not(target_arch = \"asmjs\"))]\n use std::{usize, isize};\n \n pub trait IntoCow<'a, B: ?Sized> where B: ToOwned {\n@@ -535,7 +532,6 @@ fn test_reserve_exact() {\n     assert!(s.capacity() >= 33)\n }\n \n-#[cfg(not(target_arch = \"asmjs\"))]\n #[test]\n fn test_try_reserve() {\n \n@@ -613,7 +609,6 @@ fn test_try_reserve() {\n \n }\n \n-#[cfg(not(target_arch = \"asmjs\"))]\n #[test]\n fn test_try_reserve_exact() {\n "}, {"sha": "3c17a401bbaf5793b4d63486d8ad3121b879c0a5", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -10,11 +10,8 @@\n \n use std::borrow::Cow;\n use std::mem::size_of;\n-use std::{usize, panic};\n-#[cfg(not(target_arch = \"asmjs\"))]\n-use std::isize;\n+use std::{usize, isize, panic};\n use std::vec::{Drain, IntoIter};\n-#[cfg(not(target_arch = \"asmjs\"))]\n use std::collections::CollectionAllocErr::*;\n \n struct DropCounter<'a> {\n@@ -994,7 +991,6 @@ fn test_reserve_exact() {\n     assert!(v.capacity() >= 33)\n }\n \n-#[cfg(not(target_arch = \"asmjs\"))]\n #[test]\n fn test_try_reserve() {\n \n@@ -1097,7 +1093,6 @@ fn test_try_reserve() {\n \n }\n \n-#[cfg(not(target_arch = \"asmjs\"))]\n #[test]\n fn test_try_reserve_exact() {\n "}, {"sha": "fc1a0b624a555eebde59edf875a7f459074800bc", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -11,13 +11,9 @@\n use std::collections::VecDeque;\n use std::fmt::Debug;\n use std::collections::vec_deque::{Drain};\n-#[cfg(not(target_arch = \"asmjs\"))]\n use std::collections::CollectionAllocErr::*;\n-#[cfg(not(target_arch = \"asmjs\"))]\n use std::mem::size_of;\n-use std::isize;\n-#[cfg(not(target_arch = \"asmjs\"))]\n-use std::usize;\n+use std::{usize, isize};\n \n use self::Taggy::*;\n use self::Taggypar::*;\n@@ -1053,7 +1049,6 @@ fn test_reserve_exact_2() {\n     assert!(v.capacity() >= 48)\n }\n \n-#[cfg(not(target_arch = \"asmjs\"))]\n #[test]\n fn test_try_reserve() {\n \n@@ -1155,7 +1150,6 @@ fn test_try_reserve() {\n \n }\n \n-#[cfg(not(target_arch = \"asmjs\"))]\n #[test]\n fn test_try_reserve_exact() {\n "}, {"sha": "b1b783b47c72b1b19dc0a70834c020e6aaf2cd69", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -2605,7 +2605,7 @@ impl<I, U> DoubleEndedIterator for Flatten<I>\n     }\n }\n \n-#[stable(feature = \"fused\", since = \"1.26.0\")]\n+#[unstable(feature = \"iterator_flatten\", issue = \"48213\")]\n impl<I, U> FusedIterator for Flatten<I>\n     where I: FusedIterator, U: Iterator,\n           I::Item: IntoIterator<IntoIter = U, Item = U::Item> {}"}, {"sha": "37d79f408f3f00a7ab1487869e690ce6a07672e1", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -55,7 +55,9 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     }\n }\n \n-pub fn find_entry_point(session: &Session, hir_map: &hir_map::Map) {\n+pub fn find_entry_point(session: &Session,\n+                        hir_map: &hir_map::Map,\n+                        crate_name: &str) {\n     let any_exe = session.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeExecutable\n     });\n@@ -81,7 +83,7 @@ pub fn find_entry_point(session: &Session, hir_map: &hir_map::Map) {\n \n     hir_map.krate().visit_all_item_likes(&mut ctxt);\n \n-    configure_main(&mut ctxt);\n+    configure_main(&mut ctxt, crate_name);\n }\n \n // Beware, this is duplicated in libsyntax/entry.rs, make sure to keep\n@@ -150,7 +152,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n     }\n }\n \n-fn configure_main(this: &mut EntryContext) {\n+fn configure_main(this: &mut EntryContext, crate_name: &str) {\n     if this.start_fn.is_some() {\n         *this.session.entry_fn.borrow_mut() = this.start_fn;\n         this.session.entry_type.set(Some(config::EntryStart));\n@@ -162,7 +164,8 @@ fn configure_main(this: &mut EntryContext) {\n         this.session.entry_type.set(Some(config::EntryMain));\n     } else {\n         // No main function\n-        let mut err = struct_err!(this.session, E0601, \"main function not found\");\n+        let mut err = struct_err!(this.session, E0601,\n+            \"`main` function not found in crate `{}`\", crate_name);\n         if !this.non_main_fns.is_empty() {\n             // There were some functions named 'main' though. Try to give the user a hint.\n             err.note(\"the main function must be defined at the crate level \\\n@@ -175,6 +178,9 @@ fn configure_main(this: &mut EntryContext) {\n             err.emit();\n             this.session.abort_if_errors();\n         } else {\n+            if let Some(ref filename) = this.session.local_crate_source_file {\n+                err.note(&format!(\"consider adding a `main` function to `{}`\", filename.display()));\n+            }\n             if this.session.teach(&err.get_code().unwrap()) {\n                 err.note(\"If you don't know the basics of Rust, you can go look to the Rust Book \\\n                           to get started: https://doc.rust-lang.org/book/\");"}, {"sha": "4c5b1417a2f670865a8c535d01f2243c171ef018", "filename": "src/librustc_back/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_back%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_back%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2FCargo.toml?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -12,7 +12,7 @@ crate-type = [\"dylib\"]\n syntax = { path = \"../libsyntax\" }\n serialize = { path = \"../libserialize\" }\n log = \"0.4\"\n-rand = \"0.3\"\n+rand = \"0.4\"\n \n [features]\n jemalloc = []"}, {"sha": "ab7df4ba1c543395b28c6b857c4a657997375685", "filename": "src/librustc_back/target/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fasmjs_unknown_emscripten.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -15,7 +15,9 @@ pub fn target() -> Result<Target, String> {\n     let mut args = LinkArgs::new();\n     args.insert(LinkerFlavor::Em,\n                 vec![\"-s\".to_string(),\n-                     \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string()]);\n+                     \"ERROR_ON_UNDEFINED_SYMBOLS=1\".to_string(),\n+                     \"-s\".to_string(),\n+                     \"ABORTING_MALLOC=0\".to_string()]);\n \n     let opts = TargetOptions {\n         dynamic_linking: false,"}, {"sha": "e52575f02b2ff4dc53dcbcb3dce742d10977528e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -979,7 +979,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(trans: &TransCrate,\n \n     time(sess,\n          \"looking for entry point\",\n-         || middle::entry::find_entry_point(sess, &hir_map));\n+         || middle::entry::find_entry_point(sess, &hir_map, name));\n \n     sess.plugin_registrar_fn.set(time(sess, \"looking for plugin registrar\", || {\n         plugin::build::find_plugin_registrar(sess.diagnostic(), &hir_map)"}, {"sha": "dd05679589e7e53bedaffd2b1c3a88905038a6c8", "filename": "src/librustc_incremental/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_incremental%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_incremental%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2FCargo.toml?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -11,7 +11,7 @@ crate-type = [\"dylib\"]\n [dependencies]\n graphviz = { path = \"../libgraphviz\" }\n log = \"0.4\"\n-rand = \"0.3\"\n+rand = \"0.4\"\n rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n serialize = { path = \"../libserialize\" }"}, {"sha": "c84caee13e82a0c4233f535661ed12dd35367912", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -41,7 +41,7 @@ use rustc::ty;\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n use rustc::util::nodemap::{NodeMap, NodeSet, FxHashMap, FxHashSet, DefIdMap};\n \n-use syntax::codemap::{dummy_spanned, respan, CodeMap};\n+use syntax::codemap::{dummy_spanned, respan, BytePos, CodeMap};\n use syntax::ext::hygiene::{Mark, MarkKind, SyntaxContext};\n use syntax::ast::{self, Name, NodeId, Ident, SpannedIdent, FloatTy, IntTy, UintTy};\n use syntax::ext::base::SyntaxExtension;\n@@ -179,11 +179,12 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n                                            E0401,\n                                            \"can't use type parameters from outer function\");\n             err.span_label(span, \"use of type variable from outer function\");\n+\n+            let cm = resolver.session.codemap();\n             match outer_def {\n                 Def::SelfTy(_, maybe_impl_defid) => {\n                     if let Some(impl_span) = maybe_impl_defid.map_or(None,\n                             |def_id| resolver.definitions.opt_span(def_id)) {\n-                        let cm = resolver.session.codemap();\n                         err.span_label(reduce_impl_span_to_impl_keyword(cm, impl_span),\n                                     \"`Self` type implicitely declared here, on the `impl`\");\n                     }\n@@ -206,12 +207,13 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             // Try to retrieve the span of the function signature and generate a new message with\n             // a local type parameter\n             let sugg_msg = \"try using a local type parameter instead\";\n-            if let Some((sugg_span, new_snippet)) = generate_local_type_param_snippet(\n-                                                        resolver.session.codemap(), span) {\n+            if let Some((sugg_span, new_snippet)) = generate_local_type_param_snippet(cm, span) {\n                 // Suggest the modification to the user\n                 err.span_suggestion(sugg_span,\n                                     sugg_msg,\n                                     new_snippet);\n+            } else if let Some(sp) = generate_fn_name_span(cm, span) {\n+                err.span_label(sp, \"try adding a local type parameter in this method instead\");\n             } else {\n                 err.help(\"try using a local type parameter instead\");\n             }\n@@ -407,6 +409,15 @@ fn reduce_impl_span_to_impl_keyword(cm: &CodeMap, impl_span: Span) -> Span {\n     impl_span\n }\n \n+fn generate_fn_name_span(cm: &CodeMap, span: Span) -> Option<Span> {\n+    let prev_span = cm.span_extend_to_prev_str(span, \"fn\", true);\n+    cm.span_to_snippet(prev_span).map(|snippet| {\n+        let len = snippet.find(|c: char| !c.is_alphanumeric() && c != '_')\n+            .expect(\"no label after fn\");\n+        prev_span.with_hi(BytePos(prev_span.lo().0 + len as u32))\n+    }).ok()\n+}\n+\n /// Take the span of a type parameter in a function signature and try to generate a span for the\n /// function name (with generics) and a new snippet for this span with the pointed type parameter as\n /// a new local type parameter.\n@@ -428,17 +439,12 @@ fn reduce_impl_span_to_impl_keyword(cm: &CodeMap, impl_span: Span) -> Span {\n fn generate_local_type_param_snippet(cm: &CodeMap, span: Span) -> Option<(Span, String)> {\n     // Try to extend the span to the previous \"fn\" keyword to retrieve the function\n     // signature\n-    let sugg_span = cm.span_extend_to_prev_str(span, \"fn\");\n+    let sugg_span = cm.span_extend_to_prev_str(span, \"fn\", false);\n     if sugg_span != span {\n         if let Ok(snippet) = cm.span_to_snippet(sugg_span) {\n-            use syntax::codemap::BytePos;\n-\n             // Consume the function name\n-            let mut offset = 0;\n-            for c in snippet.chars().take_while(|c| c.is_ascii_alphanumeric() ||\n-                                                    *c == '_') {\n-                offset += c.len_utf8();\n-            }\n+            let mut offset = snippet.find(|c: char| !c.is_alphanumeric() && c != '_')\n+                .expect(\"no label after fn\");\n \n             // Consume the generics part of the function signature\n             let mut bracket_counter = 0;"}, {"sha": "44c18c371a40f348be58487b8943374494d053af", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -30,6 +30,7 @@ use cabi_sparc64;\n use cabi_nvptx;\n use cabi_nvptx64;\n use cabi_hexagon;\n+use cabi_wasm32;\n use mir::place::PlaceRef;\n use mir::operand::OperandValue;\n use type_::Type;\n@@ -948,7 +949,13 @@ impl<'a, 'tcx> FnType<'tcx> {\n             \"powerpc64\" => cabi_powerpc64::compute_abi_info(cx, self),\n             \"s390x\" => cabi_s390x::compute_abi_info(cx, self),\n             \"asmjs\" => cabi_asmjs::compute_abi_info(cx, self),\n-            \"wasm32\" => cabi_asmjs::compute_abi_info(cx, self),\n+            \"wasm32\" => {\n+                if cx.sess().opts.target_triple.contains(\"emscripten\") {\n+                    cabi_asmjs::compute_abi_info(cx, self)\n+                } else {\n+                    cabi_wasm32::compute_abi_info(cx, self)\n+                }\n+            }\n             \"msp430\" => cabi_msp430::compute_abi_info(self),\n             \"sparc\" => cabi_sparc::compute_abi_info(cx, self),\n             \"sparc64\" => cabi_sparc64::compute_abi_info(cx, self),"}, {"sha": "231fe4c6edb6737d5f35264e868f8cc615ba7a9c", "filename": "src/librustc_trans/cabi_mips64.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Fcabi_mips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Fcabi_mips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_mips64.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -28,18 +28,6 @@ fn extend_integer_width_mips(arg: &mut ArgType, bits: u64) {\n     arg.extend_integer_width_to(bits);\n }\n \n-fn bits_to_int_reg(bits: u64) -> Reg {\n-    if bits <= 8 {\n-        Reg::i8()\n-    } else if bits <= 16 {\n-        Reg::i16()\n-    } else if bits <= 32 {\n-        Reg::i32()\n-    } else {\n-        Reg::i64()\n-    }\n-}\n-\n fn float_reg<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &ArgType<'tcx>, i: usize) -> Option<Reg> {\n     match ret.layout.field(cx, i).abi {\n         layout::Abi::Scalar(ref scalar) => match scalar.value {\n@@ -82,7 +70,7 @@ fn classify_ret_ty<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>)\n \n         // Cast to a uniform int structure\n         ret.cast_to(Uniform {\n-            unit: bits_to_int_reg(bits),\n+            unit: Reg::i64(),\n             total: size\n         });\n     } else {"}, {"sha": "5530a03d65dda2207b51e675e427755f9396fe92", "filename": "src/librustc_trans/cabi_wasm32.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Fcabi_wasm32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Fcabi_wasm32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_wasm32.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use abi::{FnType, ArgType};\n+use context::CodegenCx;\n+\n+fn classify_ret_ty<'a, 'tcx>(_cx: &CodegenCx<'a, 'tcx>, ret: &mut ArgType<'tcx>) {\n+    ret.extend_integer_width_to(32);\n+}\n+\n+fn classify_arg_ty(arg: &mut ArgType) {\n+    arg.extend_integer_width_to(32);\n+}\n+\n+pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tcx>) {\n+    if !fty.ret.is_ignore() {\n+        classify_ret_ty(cx, &mut fty.ret);\n+    }\n+\n+    for arg in &mut fty.args {\n+        if arg.is_ignore() { continue; }\n+        classify_arg_ty(arg);\n+    }\n+}"}, {"sha": "0a98f74212d69e59281e35762a081a58f9372db8", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -123,6 +123,7 @@ mod cabi_sparc64;\n mod cabi_x86;\n mod cabi_x86_64;\n mod cabi_x86_win64;\n+mod cabi_wasm32;\n mod callee;\n mod common;\n mod consts;"}, {"sha": "dd8b44c96b90c575639ef245f89dad39f8e6e6c3", "filename": "src/librustc_trans/llvm_util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_trans%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fllvm_util.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -92,6 +92,7 @@ const X86_WHITELIST: &'static [&'static str] = &[\"aes\", \"avx\", \"avx2\", \"avx512bw\n                                                  \"bmi1\", \"bmi2\", \"fma\", \"fxsr\",\n                                                  \"lzcnt\", \"mmx\", \"pclmulqdq\",\n                                                  \"popcnt\", \"rdrand\", \"rdseed\",\n+                                                 \"sha\",\n                                                  \"sse\", \"sse2\", \"sse3\", \"sse4.1\",\n                                                  \"sse4.2\", \"sse4a\", \"ssse3\",\n                                                  \"tbm\", \"xsave\", \"xsavec\","}, {"sha": "b94af0a1e0081d2b8ecbc8b7d1eb569577836165", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -525,7 +525,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n             } else {\n                 fcx.tcx.sess.diagnostic().mut_span_err(\n                     span, &format!(\"invalid `self` type: {:?}\", self_arg_ty))\n-                .note(&format!(\"type must be `{:?}` or a type that dereferences to it`\", self_ty))\n+                .note(&format!(\"type must be `{:?}` or a type that dereferences to it\", self_ty))\n                 .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n                 .code(DiagnosticId::Error(\"E0307\".into()))\n                 .emit();"}, {"sha": "07b7c600b9f308b61a6873622c03d73a0dc7cf96", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -52,10 +52,10 @@ fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_def_id: DefId) {\n     let did = Some(trait_def_id);\n     let li = tcx.lang_items();\n+    let span = tcx.sess.codemap().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n \n     // Disallow *all* explicit impls of `Sized` and `Unsize` for now.\n     if did == li.sized_trait() {\n-        let span = tcx.span_of_impl(impl_def_id).unwrap();\n         struct_span_err!(tcx.sess,\n                          span,\n                          E0322,\n@@ -66,11 +66,12 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_d\n     }\n \n     if did == li.unsize_trait() {\n-        let span = tcx.span_of_impl(impl_def_id).unwrap();\n-        span_err!(tcx.sess,\n-                  span,\n-                  E0328,\n-                  \"explicit impls for the `Unsize` trait are not permitted\");\n+        struct_span_err!(tcx.sess,\n+                         span,\n+                         E0328,\n+                         \"explicit impls for the `Unsize` trait are not permitted\")\n+            .span_label(span, \"impl of `Unsize` not allowed\")\n+            .emit();\n         return;\n     }\n \n@@ -88,14 +89,14 @@ fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_d\n     } else {\n         return; // everything OK\n     };\n-    let mut err = struct_span_err!(tcx.sess,\n-                                   tcx.span_of_impl(impl_def_id).unwrap(),\n-                                   E0183,\n-                                   \"manual implementations of `{}` are experimental\",\n-                                   trait_name);\n-    help!(&mut err,\n-          \"add `#![feature(unboxed_closures)]` to the crate attributes to enable\");\n-    err.emit();\n+    struct_span_err!(tcx.sess,\n+                     span,\n+                     E0183,\n+                     \"manual implementations of `{}` are experimental\",\n+                     trait_name)\n+        .span_label(span, format!(\"manual implementations of `{}` are experimental\", trait_name))\n+        .help(\"add `#![feature(unboxed_closures)]` to the crate attributes to enable\")\n+        .emit();\n }\n \n pub fn provide(providers: &mut Providers) {\n@@ -168,13 +169,17 @@ fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeI\n                 traits::supertrait_def_ids(tcx,\n                                            data.principal().unwrap().def_id());\n             if supertrait_def_ids.any(|d| d == trait_def_id) {\n-                span_err!(tcx.sess,\n-                          tcx.span_of_impl(impl_def_id).unwrap(),\n-                          E0371,\n-                          \"the object type `{}` automatically \\\n-                           implements the trait `{}`\",\n-                          trait_ref.self_ty(),\n-                          tcx.item_path_str(trait_def_id));\n+                let sp = tcx.sess.codemap().def_span(tcx.span_of_impl(impl_def_id).unwrap());\n+                struct_span_err!(tcx.sess,\n+                                 sp,\n+                                 E0371,\n+                                 \"the object type `{}` automatically implements the trait `{}`\",\n+                                 trait_ref.self_ty(),\n+                                 tcx.item_path_str(trait_def_id))\n+                    .span_label(sp, format!(\"`{}` automatically implements trait `{}`\",\n+                                            trait_ref.self_ty(),\n+                                            tcx.item_path_str(trait_def_id)))\n+                    .emit();\n             }\n         }\n     }"}, {"sha": "6d6594e55437d5928a9993c9dca681dd15ab93f2", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 35, "deletions": 21, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -40,29 +40,36 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                        self.tcx.hir.node_to_string(item.id));\n                 let trait_ref = self.tcx.impl_trait_ref(def_id).unwrap();\n                 let trait_def_id = trait_ref.def_id;\n+                let cm = self.tcx.sess.codemap();\n+                let sp = cm.def_span(item.span);\n                 match traits::orphan_check(self.tcx, def_id) {\n                     Ok(()) => {}\n                     Err(traits::OrphanCheckErr::NoLocalInputType) => {\n                         struct_span_err!(self.tcx.sess,\n-                                         item.span,\n+                                         sp,\n                                          E0117,\n                                          \"only traits defined in the current crate can be \\\n                                           implemented for arbitrary types\")\n-                            .span_label(item.span, \"impl doesn't use types inside crate\")\n-                            .note(&format!(\"the impl does not reference any types defined in \\\n-                                            this crate\"))\n+                            .span_label(sp, \"impl doesn't use types inside crate\")\n+                            .note(\"the impl does not reference any types defined in this crate\")\n                             .note(\"define and implement a trait or new type instead\")\n                             .emit();\n                         return;\n                     }\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n-                        span_err!(self.tcx.sess,\n-                                  item.span,\n-                                  E0210,\n-                                  \"type parameter `{}` must be used as the type parameter for \\\n-                                   some local type (e.g. `MyStruct<T>`); only traits defined in \\\n-                                   the current crate can be implemented for a type parameter\",\n-                                  param_ty);\n+                        struct_span_err!(self.tcx.sess,\n+                                         sp,\n+                                         E0210,\n+                                         \"type parameter `{}` must be used as the type parameter \\\n+                                          for some local type (e.g. `MyStruct<{}>`)\",\n+                                         param_ty,\n+                                         param_ty)\n+                            .span_label(sp,\n+                                        format!(\"type parameter `{}` must be used as the type \\\n+                                                 parameter for some local type\", param_ty))\n+                            .note(\"only traits defined in the current crate can be implemented \\\n+                                   for a type parameter\")\n+                            .emit();\n                         return;\n                     }\n                 }\n@@ -121,22 +128,29 @@ impl<'cx, 'tcx, 'v> ItemLikeVisitor<'v> for OrphanChecker<'cx, 'tcx> {\n                             if self_def_id.is_local() {\n                                 None\n                             } else {\n-                                Some(format!(\"cross-crate traits with a default impl, like `{}`, \\\n-                                              can only be implemented for a struct/enum type \\\n-                                              defined in the current crate\",\n-                                             self.tcx.item_path_str(trait_def_id)))\n+                                Some((\n+                                    format!(\"cross-crate traits with a default impl, like `{}`, \\\n+                                             can only be implemented for a struct/enum type \\\n+                                             defined in the current crate\",\n+                                            self.tcx.item_path_str(trait_def_id)),\n+                                    \"can't implement cross-crate trait for type in another crate\"\n+                                ))\n                             }\n                         }\n                         _ => {\n-                            Some(format!(\"cross-crate traits with a default impl, like `{}`, can \\\n-                                          only be implemented for a struct/enum type, not `{}`\",\n-                                         self.tcx.item_path_str(trait_def_id),\n-                                         self_ty))\n+                            Some((format!(\"cross-crate traits with a default impl, like `{}`, can \\\n+                                           only be implemented for a struct/enum type, not `{}`\",\n+                                          self.tcx.item_path_str(trait_def_id),\n+                                          self_ty),\n+                                  \"can't implement cross-crate trait with a default impl for \\\n+                                   non-struct/enum type\"))\n                         }\n                     };\n \n-                    if let Some(msg) = msg {\n-                        span_err!(self.tcx.sess, item.span, E0321, \"{}\", msg);\n+                    if let Some((msg, label)) = msg {\n+                        struct_span_err!(self.tcx.sess, sp, E0321, \"{}\", msg)\n+                            .span_label(sp, label)\n+                            .emit();\n                         return;\n                     }\n                 }"}, {"sha": "2cfe43a8389bbf48790a8dad2095371e9c04e6a4", "filename": "src/librustdoc/README.md", "status": "modified", "additions": 2, "deletions": 171, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibrustdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FREADME.md?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,172 +1,3 @@\n-# The walking tour of rustdoc\n+For more information about how `librustdoc` works, see the [rustc guide].\n \n-Rustdoc is implemented entirely within the crate `librustdoc`. After partially compiling a crate to\n-get its AST (technically the HIR map) from rustc, librustdoc performs two major steps past that to\n-render a set of documentation:\n-\n-* \"Clean\" the AST into a form that's more suited to creating documentation (and slightly more\n-  resistant to churn in the compiler).\n-* Use this cleaned AST to render a crate's documentation, one page at a time.\n-\n-Naturally, there's more than just this, and those descriptions simplify out lots of details, but\n-that's the high-level overview.\n-\n-(Side note: this is a library crate! The `rustdoc` binary is crated using the project in\n-`src/tools/rustdoc`. Note that literally all that does is call the `main()` that's in this crate's\n-`lib.rs`, though.)\n-\n-## Cheat sheet\n-\n-* Use `x.py build --stage 1 src/libstd src/tools/rustdoc` to make a useable rustdoc you can run on\n-  other projects.\n-  * Add `src/libtest` to be able to use `rustdoc --test`.\n-  * If you've used `rustup toolchain link local /path/to/build/$TARGET/stage1` previously, then\n-    after the previous build command, `cargo +local doc` will Just Work.\n-* Use `x.py doc --stage 1 src/libstd` to use this rustdoc to generate the standard library docs.\n-  * The completed docs will be available in `build/$TARGET/doc/std`, though the bundle is meant to\n-    be used as though you would copy out the `doc` folder to a web server, since that's where the\n-    CSS/JS and landing page are.\n-* Most of the HTML printing code is in `html/format.rs` and `html/render.rs`. It's in a bunch of\n-  `fmt::Display` implementations and supplementary functions.\n-* The types that got `Display` impls above are defined in `clean/mod.rs`, right next to the custom\n-  `Clean` trait used to process them out of the rustc HIR.\n-* The bits specific to using rustdoc as a test harness are in `test.rs`.\n-* The Markdown renderer is loaded up in `html/markdown.rs`, including functions for extracting\n-  doctests from a given block of Markdown.\n-* The tests on rustdoc *output* are located in `src/test/rustdoc`, where they're handled by the test\n-  runner of rustbuild and the supplementary script `src/etc/htmldocck.py`.\n-* Tests on search index generation are located in `src/test/rustdoc-js`, as a series of JavaScript\n-  files that encode queries on the standard library search index and expected results.\n-\n-## From crate to clean\n-\n-In `core.rs` are two central items: the `DocContext` struct, and the `run_core` function. The latter\n-is where rustdoc calls out to rustc to compile a crate to the point where rustdoc can take over. The\n-former is a state container used when crawling through a crate to gather its documentation.\n-\n-The main process of crate crawling is done in `clean/mod.rs` through several implementations of the\n-`Clean` trait defined within. This is a conversion trait, which defines one method:\n-\n-```rust\n-pub trait Clean<T> {\n-    fn clean(&self, cx: &DocContext) -> T;\n-}\n-```\n-\n-`clean/mod.rs` also defines the types for the \"cleaned\" AST used later on to render documentation\n-pages. Each usually accompanies an implementation of `Clean` that takes some AST or HIR type from\n-rustc and converts it into the appropriate \"cleaned\" type. \"Big\" items like modules or associated\n-items may have some extra processing in its `Clean` implementation, but for the most part these\n-impls are straightforward conversions. The \"entry point\" to this module is the `impl Clean<Crate>\n-for visit_ast::RustdocVisitor`, which is called by `run_core` above.\n-\n-You see, I actually lied a little earlier: There's another AST transformation that happens before\n-the events in `clean/mod.rs`.  In `visit_ast.rs` is the type `RustdocVisitor`, which *actually*\n-crawls a `hir::Crate` to get the first intermediate representation, defined in `doctree.rs`. This\n-pass is mainly to get a few intermediate wrappers around the HIR types and to process visibility\n-and inlining. This is where `#[doc(inline)]`, `#[doc(no_inline)]`, and `#[doc(hidden)]` are\n-processed, as well as the logic for whether a `pub use` should get the full page or a \"Reexport\"\n-line in the module page.\n-\n-The other major thing that happens in `clean/mod.rs` is the collection of doc comments and\n-`#[doc=\"\"]` attributes into a separate field of the Attributes struct, present on anything that gets\n-hand-written documentation. This makes it easier to collect this documentation later in the process.\n-\n-The primary output of this process is a clean::Crate with a tree of Items which describe the\n-publicly-documentable items in the target crate.\n-\n-### Hot potato\n-\n-Before moving on to the next major step, a few important \"passes\" occur over the documentation.\n-These do things like combine the separate \"attributes\" into a single string and strip leading\n-whitespace to make the document easier on the markdown parser, or drop items that are not public or\n-deliberately hidden with `#[doc(hidden)]`. These are all implemented in the `passes/` directory, one\n-file per pass. By default, all of these passes are run on a crate, but the ones regarding dropping\n-private/hidden items can be bypassed by passing `--document-private-items` to rustdoc.\n-\n-(Strictly speaking, you can fine-tune the passes run and even add your own, but [we're trying to\n-deprecate that][44136]. If you need finer-grain control over these passes, please let us know!)\n-\n-[44136]: https://github.com/rust-lang/rust/issues/44136\n-\n-## From clean to crate\n-\n-This is where the \"second phase\" in rustdoc begins. This phase primarily lives in the `html/`\n-folder, and it all starts with `run()` in `html/render.rs`. This code is responsible for setting up\n-the `Context`, `SharedContext`, and `Cache` which are used during rendering, copying out the static\n-files which live in every rendered set of documentation (things like the fonts, CSS, and JavaScript\n-that live in `html/static/`), creating the search index, and printing out the source code rendering,\n-before beginning the process of rendering all the documentation for the crate.\n-\n-Several functions implemented directly on `Context` take the `clean::Crate` and set up some state\n-between rendering items or recursing on a module's child items. From here the \"page rendering\"\n-begins, via an enormous `write!()` call in `html/layout.rs`. The parts that actually generate HTML\n-from the items and documentation occurs within a series of `std::fmt::Display` implementations and\n-functions that pass around a `&mut std::fmt::Formatter`. The top-level implementation that writes\n-out the page body is the `impl<'a> fmt::Display for Item<'a>` in `html/render.rs`, which switches\n-out to one of several `item_*` functions based on the kind of `Item` being rendered.\n-\n-Depending on what kind of rendering code you're looking for, you'll probably find it either in\n-`html/render.rs` for major items like \"what sections should I print for a struct page\" or\n-`html/format.rs` for smaller component pieces like \"how should I print a where clause as part of\n-some other item\".\n-\n-Whenever rustdoc comes across an item that should print hand-written documentation alongside, it\n-calls out to `html/markdown.rs` which interfaces with the Markdown parser. This is exposed as a\n-series of types that wrap a string of Markdown, and implement `fmt::Display` to emit HTML text. It\n-takes special care to enable certain features like footnotes and tables and add syntax highlighting\n-to Rust code blocks (via `html/highlight.rs`) before running the Markdown parser. There's also a\n-function in here (`find_testable_code`) that specifically scans for Rust code blocks so the\n-test-runner code can find all the doctests in the crate.\n-\n-### From soup to nuts\n-\n-(alternate title: [\"An unbroken thread that stretches from those first `Cell`s to us\"][video])\n-\n-[video]: https://www.youtube.com/watch?v=hOLAGYmUQV0\n-\n-It's important to note that the AST cleaning can ask the compiler for information (crucially,\n-`DocContext` contains a `TyCtxt`), but page rendering cannot. The `clean::Crate` created within\n-`run_core` is passed outside the compiler context before being handed to `html::render::run`. This\n-means that a lot of the \"supplementary data\" that isn't immediately available inside an item's\n-definition, like which trait is the `Deref` trait used by the language, needs to be collected during\n-cleaning, stored in the `DocContext`, and passed along to the `SharedContext` during HTML rendering.\n-This manifests as a bunch of shared state, context variables, and `RefCell`s.\n-\n-Also of note is that some items that come from \"asking the compiler\" don't go directly into the\n-`DocContext` - for example, when loading items from a foreign crate, rustdoc will ask about trait\n-implementations and generate new `Item`s for the impls based on that information. This goes directly\n-into the returned `Crate` rather than roundabout through the `DocContext`. This way, these\n-implementations can be collected alongside the others, right before rendering the HTML.\n-\n-## Other tricks up its sleeve\n-\n-All this describes the process for generating HTML documentation from a Rust crate, but there are\n-couple other major modes that rustdoc runs in. It can also be run on a standalone Markdown file, or\n-it can run doctests on Rust code or standalone Markdown files. For the former, it shortcuts straight\n-to `html/markdown.rs`, optionally including a mode which inserts a Table of Contents to the output\n-HTML.\n-\n-For the latter, rustdoc runs a similar partial-compilation to get relevant documentation in\n-`test.rs`, but instead of going through the full clean and render process, it runs a much simpler\n-crate walk to grab *just* the hand-written documentation. Combined with the aforementioned\n-\"`find_testable_code`\" in `html/markdown.rs`, it builds up a collection of tests to run before\n-handing them off to the libtest test runner. One notable location in `test.rs` is the function\n-`make_test`, which is where hand-written doctests get transformed into something that can be\n-executed.\n-\n-## Dotting i's and crossing t's\n-\n-So that's rustdoc's code in a nutshell, but there's more things in the repo that deal with it. Since\n-we have the full `compiletest` suite at hand, there's a set of tests in `src/test/rustdoc` that make\n-sure the final HTML is what we expect in various situations. These tests also use a supplementary\n-script, `src/etc/htmldocck.py`, that allows it to look through the final HTML using XPath notation\n-to get a precise look at the output. The full description of all the commands available to rustdoc\n-tests is in `htmldocck.py`.\n-\n-In addition, there are separate tests for the search index and rustdoc's ability to query it. The\n-files in `src/test/rustdoc-js` each contain a different search query and the expected results,\n-broken out by search tab. These files are processed by a script in `src/tools/rustdoc-js` and the\n-Node.js runtime. These tests don't have as thorough of a writeup, but a broad example that features\n-results in all tabs can be found in `basic.js`. The basic idea is that you match a given `QUERY`\n-with a set of `EXPECTED` results, complete with the full item path of each item.\n+[rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/rustdoc.html"}, {"sha": "b18b38ec302460e4eb1f0fd9c84739dfac9252a3", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -2755,11 +2755,8 @@ mod test_map {\n     use cell::RefCell;\n     use rand::{thread_rng, Rng};\n     use panic;\n-    #[cfg(not(target_arch = \"asmjs\"))]\n     use realstd::collections::CollectionAllocErr::*;\n-    #[cfg(not(target_arch = \"asmjs\"))]\n     use realstd::mem::size_of;\n-    #[cfg(not(target_arch = \"asmjs\"))]\n     use realstd::usize;\n \n     #[test]\n@@ -3696,7 +3693,6 @@ mod test_map {\n         assert_eq!(hm.len(), 0);\n     }\n \n-    #[cfg(not(target_arch = \"asmjs\"))]\n     #[test]\n     fn test_try_reserve() {\n "}, {"sha": "ae5037cc44e80103ea38e705c4808120e205d398", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -372,6 +372,25 @@ impl FromStr for SocketAddr {\n /// [`IpAddr`], [`Ipv4Addr`], [`Ipv6Addr`], [`SocketAddr`], [`SocketAddrV4`], and\n /// [`SocketAddrV6`].\n ///\n+/// # Potential causes\n+///\n+/// `AddrParseError` may be thrown because the provided string does not parse as the given type,\n+/// often because it includes information only handled by a different address type.\n+///\n+/// ```should_panic\n+/// use std::net::IpAddr;\n+/// let _foo: IpAddr = \"127.0.0.1:8080\".parse().expect(\"Cannot handle the socket port\");\n+/// ```\n+///\n+/// [`IpAddr`] doesn't handle the port. Use [`SocketAddr`] instead.\n+///\n+/// ```\n+/// use std::net::SocketAddr;\n+///\n+/// // No problem, the `panic!` message has disappeared.\n+/// let _foo: SocketAddr = \"127.0.0.1:8080\".parse().expect(\"unreachable panic\");\n+/// ```\n+///\n /// [`FromStr`]: ../../std/str/trait.FromStr.html\n /// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n /// [`Ipv4Addr`]: ../../std/net/struct.Ipv4Addr.html"}, {"sha": "951f8a871ca66d2588f90f23a832ed154371453a", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -622,13 +622,21 @@ impl CodeMap {\n         sp\n     }\n \n-    /// Extend the given `Span` to just after the previous occurrence of `pat`. Return the same span\n-    /// if no character could be found or if an error occurred while retrieving the code snippet.\n-    pub fn span_extend_to_prev_str(&self, sp: Span, pat: &str) -> Span {\n-        if let Ok(prev_source) = self.span_to_prev_source(sp) {\n-            let prev_source = prev_source.rsplit(pat).nth(0).unwrap_or(\"\").trim_left();\n-            if !prev_source.is_empty() && !prev_source.contains('\\n') {\n-                return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n+    /// Extend the given `Span` to just after the previous occurrence of `pat` when surrounded by\n+    /// whitespace. Return the same span if no character could be found or if an error occurred\n+    /// while retrieving the code snippet.\n+    pub fn span_extend_to_prev_str(&self, sp: Span, pat: &str, accept_newlines: bool) -> Span {\n+        // assure that the pattern is delimited, to avoid the following\n+        //     fn my_fn()\n+        //           ^^^^ returned span without the check\n+        //     ---------- correct span\n+        for ws in &[\" \", \"\\t\", \"\\n\"] {\n+            let pat = pat.to_owned() + ws;\n+            if let Ok(prev_source) = self.span_to_prev_source(sp) {\n+                let prev_source = prev_source.rsplit(&pat).nth(0).unwrap_or(\"\").trim_left();\n+                if !prev_source.is_empty() && (!prev_source.contains('\\n') || accept_newlines) {\n+                    return sp.with_lo(BytePos(sp.lo().0 - prev_source.len() as u32));\n+                }\n             }\n         }\n "}, {"sha": "3e75afcee1cf30d4b51c19392d44bed6c99dfad2", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -484,13 +484,15 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n \n         match *ext {\n             MultiModifier(ref mac) => {\n-                let meta = attr.parse_meta(self.cx.parse_sess).ok()?;\n+                let meta = attr.parse_meta(self.cx.parse_sess)\n+                               .map_err(|mut e| { e.emit(); }).ok()?;\n                 let item = mac.expand(self.cx, attr.span, &meta, item);\n                 Some(kind.expect_from_annotatables(item))\n             }\n             MultiDecorator(ref mac) => {\n                 let mut items = Vec::new();\n-                let meta = attr.parse_meta(self.cx.parse_sess).ok()?;\n+                let meta = attr.parse_meta(self.cx.parse_sess)\n+                               .expect(\"derive meta should already have been parsed\");\n                 mac.expand(self.cx, attr.span, &meta, &item, &mut |item| items.push(item));\n                 items.push(item);\n                 Some(kind.expect_from_annotatables(items))"}, {"sha": "f42cb8a258314a4d28d8226c4c1252fbb3110f6f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -449,6 +449,9 @@ declare_features! (\n \n     // Parentheses in patterns\n     (active, pattern_parentheses, \"1.26.0\", None, None),\n+\n+    // `use path as _;` and `extern crate c as _;`\n+    (active, underscore_imports, \"1.26.0\", Some(48216), None),\n );\n \n declare_features! (\n@@ -1434,9 +1437,24 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         }\n     }\n \n+    fn visit_use_tree(&mut self, use_tree: &'a ast::UseTree, id: NodeId, _nested: bool) {\n+        if let ast::UseTreeKind::Simple(ident) = use_tree.kind {\n+            if ident.name == \"_\" {\n+                gate_feature_post!(&self, underscore_imports, use_tree.span,\n+                                   \"renaming imports with `_` is unstable\");\n+            }\n+        }\n+\n+        visit::walk_use_tree(self, use_tree, id);\n+    }\n+\n     fn visit_item(&mut self, i: &'a ast::Item) {\n         match i.node {\n             ast::ItemKind::ExternCrate(_) => {\n+                if i.ident.name == \"_\" {\n+                    gate_feature_post!(&self, underscore_imports, i.span,\n+                                       \"renaming extern crates with `_` is unstable\");\n+                }\n                 if let Some(attr) = attr::find_by_name(&i.attrs[..], \"macro_reexport\") {\n                     gate_feature_post!(&self, macro_reexport, attr.span,\n                                        \"macros re-exports are experimental \\"}, {"sha": "a3a6489fe8b148265c092bd3bb4ac9a05ca7ff5c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -7065,7 +7065,11 @@ impl<'a> Parser<'a> {\n \n     fn parse_rename(&mut self) -> PResult<'a, Option<Ident>> {\n         if self.eat_keyword(keywords::As) {\n-            self.parse_ident().map(Some)\n+            if self.eat(&token::Underscore) {\n+                Ok(Some(Ident::with_empty_ctxt(Symbol::gensym(\"_\"))))\n+            } else {\n+                self.parse_ident().map(Some)\n+            }\n         } else {\n             Ok(None)\n         }"}, {"sha": "707531bf376a7e870e353a757a66ee214db04b06", "filename": "src/test/codegen/abi-main-signature-16bit-c-int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-main-signature-16bit-c-int.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -17,6 +17,7 @@\n // ignore-asmjs\n // ignore-hexagon\n // ignore-mips\n+// ignore-mips64\n // ignore-powerpc\n // ignore-s390x\n // ignore-sparc"}, {"sha": "9bfe47d0a1f28b67fb5387ddb5e3ac7251a3dcce", "filename": "src/test/codegen/fastcall-inreg.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffastcall-inreg.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -21,9 +21,7 @@\n // ignore-bpfeb\n // ignore-hexagon\n // ignore-mips\n-// ignore-mipsel\n // ignore-mips64\n-// ignore-mips64el\n // ignore-msp430\n // ignore-powerpc\n // ignore-r600"}, {"sha": "94b69a6cab58344ab4e0d944edb7fc05f201f587", "filename": "src/test/codegen/global_asm.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fglobal_asm.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -17,9 +17,7 @@\n // ignore-bpfeb\n // ignore-hexagon\n // ignore-mips\n-// ignore-mipsel\n // ignore-mips64\n-// ignore-mips64el\n // ignore-msp430\n // ignore-powerpc\n // ignore-r600"}, {"sha": "c3688077f221bb479a742a3c7434bdbc8feabaa7", "filename": "src/test/codegen/global_asm_include.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fglobal_asm_include.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fglobal_asm_include.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fglobal_asm_include.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -17,9 +17,7 @@\n // ignore-bpfeb\n // ignore-hexagon\n // ignore-mips\n-// ignore-mipsel\n // ignore-mips64\n-// ignore-mips64el\n // ignore-msp430\n // ignore-powerpc\n // ignore-r600"}, {"sha": "3b8fe43fa048a98819d817e6994f365281c23362", "filename": "src/test/codegen/global_asm_x2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fglobal_asm_x2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fglobal_asm_x2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fglobal_asm_x2.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -17,9 +17,7 @@\n // ignore-bpfeb\n // ignore-hexagon\n // ignore-mips\n-// ignore-mipsel\n // ignore-mips64\n-// ignore-mips64el\n // ignore-msp430\n // ignore-powerpc\n // ignore-r600"}, {"sha": "9605ded569ef6128bebd7f196be5072a28dd4673", "filename": "src/test/codegen/repr-transparent-aggregates-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-2.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -12,6 +12,7 @@\n \n // ignore-aarch64\n // ignore-asmjs\n+// ignore-mips64\n // ignore-s390x\n // ignore-wasm\n // ignore-x86"}, {"sha": "0c90239c9de8fe259a16b470dbb37c2919dac030", "filename": "src/test/codegen/repr-transparent-aggregates-3.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Frepr-transparent-aggregates-3.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C no-prepopulate-passes\n+\n+// only-mips64\n+// See repr-transparent.rs\n+\n+#![crate_type=\"lib\"]\n+#![feature(repr_transparent)]\n+\n+\n+#[repr(C)]\n+pub struct Big([u32; 16]);\n+\n+#[repr(transparent)]\n+pub struct BigW(Big);\n+\n+// CHECK: define void @test_Big(%Big* [[BIG_RET_ATTRS:.*]], [8 x i64]\n+#[no_mangle]\n+pub extern fn test_Big(_: Big) -> Big { loop {} }\n+\n+// CHECK: define void @test_BigW(%BigW* [[BIG_RET_ATTRS]], [8 x i64]\n+#[no_mangle]\n+pub extern fn test_BigW(_: BigW) -> BigW { loop {} }\n+\n+\n+#[repr(C)]\n+pub union BigU {\n+    foo: [u32; 16],\n+}\n+\n+#[repr(transparent)]\n+pub struct BigUw(BigU);\n+\n+// CHECK: define void @test_BigU(%BigU* [[BIGU_RET_ATTRS:.*]], [8 x i64]\n+#[no_mangle]\n+pub extern fn test_BigU(_: BigU) -> BigU { loop {} }\n+\n+// CHECK: define void @test_BigUw(%BigUw* [[BIGU_RET_ATTRS]], [8 x i64]\n+#[no_mangle]\n+pub extern fn test_BigUw(_: BigUw) -> BigUw { loop {} }"}, {"sha": "af400ff3bcbd0253764ac31ad82458c8ab292035", "filename": "src/test/codegen/stack-probes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -10,8 +10,9 @@\n \n // ignore-arm\n // ignore-aarch64\n+// ignore-mips\n+// ignore-mips64\n // ignore-powerpc\n-// ignore-aarch64\n // ignore-wasm\n // ignore-emscripten\n // ignore-windows"}, {"sha": "30777c6214ec94848cc11dcdfb732f295b4b183f", "filename": "src/test/codegen/x86_mmx.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fx86_mmx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcodegen%2Fx86_mmx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fx86_mmx.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -11,6 +11,8 @@\n // ignore-arm\n // ignore-aarch64\n // ignore-emscripten\n+// ignore-mips\n+// ignore-mips64\n // compile-flags: -O\n \n #![feature(repr_simd)]"}, {"sha": "48be4ac6c37bc5cf0ca80c3d88f155a04955d7b2", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -37,6 +37,9 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_syntax_extension(\n         Symbol::intern(\"into_multi_foo\"),\n         MultiModifier(Box::new(expand_into_foo_multi)));\n+    reg.register_syntax_extension(\n+        Symbol::intern(\"noop_attribute\"),\n+        MultiModifier(Box::new(expand_noop_attribute)));\n     reg.register_syntax_extension(\n         Symbol::intern(\"duplicate\"),\n         MultiDecorator(Box::new(expand_duplicate)));\n@@ -93,6 +96,13 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n     }\n }\n \n+fn expand_noop_attribute(_cx: &mut ExtCtxt,\n+                         _sp: Span,\n+                         _attr: &MetaItem,\n+                         it: Annotatable) -> Annotatable {\n+    it\n+}\n+\n // Create a duplicate of the annotatable, based on the MetaItem\n fn expand_duplicate(cx: &mut ExtCtxt,\n                     _sp: Span,"}, {"sha": "4be2874ed4ff6e3b5e4aee5559b630ac08ce1ff8", "filename": "src/test/compile-fail-fulldeps/issue-48941.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-48941.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-48941.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-48941.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This is a regression test against an ICE that used to occur\n+// on malformed attributes for a custom MultiModifier.\n+\n+// aux-build:macro_crate_test.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+#![plugin(macro_crate_test)]\n+\n+#[noop_attribute\"x\"] //~ ERROR expected one of\n+fn night() { }\n+\n+#[noop_attribute(\"hi\"), rank = 2] //~ ERROR unexpected token\n+fn knight() { }\n+\n+#[noop_attribute(\"/user\", data= = \"<user\")] //~ ERROR literal or identifier\n+fn nite() { }\n+\n+fn main() {}"}, {"sha": "aa77e7f46e50da720f26235b17ef4d6effc4cfe4", "filename": "src/test/compile-fail/asm-bad-clobber.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-bad-clobber.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -15,6 +15,8 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-mips\n+// ignore-mips64\n \n #![feature(asm, rustc_attrs)]\n "}, {"sha": "5e9278c7c35fc63e19537b3967fd5e1d4d53f446", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -12,6 +12,8 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-mips\n+// ignore-mips64\n \n #![feature(asm)]\n "}, {"sha": "abd55ea101189ab7d039e94b37dc43f43e6fee55", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -15,6 +15,8 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-mips\n+// ignore-mips64\n \n #![feature(asm, rustc_attrs)]\n "}, {"sha": "55d8970008f9a94eaa069d9d68d2541de6d641f2", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -12,6 +12,8 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-mips\n+// ignore-mips64\n \n #![feature(asm)]\n "}, {"sha": "c606c5a80e58dbd35ffec4c8086a2a2ea63cef07", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -12,6 +12,8 @@\n // ignore-emscripten\n // ignore-powerpc\n // ignore-sparc\n+// ignore-mips\n+// ignore-mips64\n \n // revisions: ast mir\n //[mir]compile-flags: -Z borrowck=mir"}, {"sha": "9ad3a8f9fc8671e072a93e06d9fb77ccafae32f9", "filename": "src/test/compile-fail/borrowck/borrowck-asm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-asm.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -21,7 +21,9 @@\n #[cfg(any(target_arch = \"x86\",\n             target_arch = \"x86_64\",\n             target_arch = \"arm\",\n-            target_arch = \"aarch64\"))]\n+            target_arch = \"aarch64\",\n+            target_arch = \"mips\",\n+            target_arch = \"mips64\"))]\n mod test_cases {\n     fn is_move() {\n         let y: &mut isize;"}, {"sha": "58a62d45ea5d7486a0137630e50e2daea0e77807", "filename": "src/test/compile-fail/cfg-attr-cfg-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fcfg-attr-cfg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fcfg-attr-cfg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-attr-cfg-2.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n //\n-// error-pattern: main function not found\n+// error-pattern: `main` function not found\n // compile-flags: --cfg foo\n \n // main is conditionally compiled, but the conditional compilation"}, {"sha": "bbccf2bcd0f81cbece38edec4204da7c6df335fe", "filename": "src/test/compile-fail/cfg-in-crate-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fcfg-in-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fcfg-in-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-in-crate-1.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:main function not found\n+// error-pattern: `main` function not found\n \n #![cfg(bar)]"}, {"sha": "0cdd0010a745da0b1054ded1bb4563e7a05451a1", "filename": "src/test/compile-fail/elided-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Felided-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Felided-test.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: main function not found\n+// error-pattern: `main` function not found\n \n // Since we're not compiling a test runner this function should be elided\n // and the build will fail because main doesn't exist"}, {"sha": "2788a5c2d58544aae9df7f564eae54944b90804b", "filename": "src/test/compile-fail/missing-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-main.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:main function not found\n+// error-pattern: `main` function not found\n fn mian() { }"}, {"sha": "e7fa3bc0a75c53efcdc27e801f5cb886008e9606", "filename": "src/test/run-pass/stack-probes-lto.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-arm\n // ignore-aarch64\n+// ignore-mips\n+// ignore-mips64\n // ignore-wasm\n // ignore-cloudabi no processes\n // ignore-emscripten no processes"}, {"sha": "67b3962ee5fb270e0d429415df0aa934ab988628", "filename": "src/test/run-pass/stack-probes.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-arm\n // ignore-aarch64\n+// ignore-mips\n+// ignore-mips64\n // ignore-wasm\n // ignore-cloudabi no processes\n // ignore-emscripten no processes"}, {"sha": "9383bfc92a8705ae266cf1d438bcce8b0b72ef8c", "filename": "src/test/ui/codemap_tests/empty_span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fempty_span.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -2,7 +2,7 @@ error[E0321]: cross-crate traits with a default impl, like `std::marker::Send`,\n   --> $DIR/empty_span.rs:17:5\n    |\n LL |     unsafe impl Send for &'static Foo { } //~ ERROR cross-crate traits with a default impl\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ can't implement cross-crate trait with a default impl for non-struct/enum type\n \n error: aborting due to previous error\n "}, {"sha": "5f9b0c62df2b804b2f4cc57dc6504dce52e8dec7", "filename": "src/test/ui/coherence-impls-copy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence-impls-copy.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -32,7 +32,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:33:1\n    |\n LL | impl Copy for (MyType, MyType) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n@@ -41,7 +41,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:40:1\n    |\n LL | impl Copy for [MyType] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead\n@@ -50,7 +50,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/coherence-impls-copy.rs:44:1\n    |\n LL | impl Copy for &'static [NotSync] {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead"}, {"sha": "1fc4c28d67c5d915ffe56548120ead49b9d28702", "filename": "src/test/ui/e0119/complex-impl.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fcomplex-impl.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,11 +8,13 @@ LL | impl<R> External for (Q, R) {} //~ ERROR must be used\n            - impl<'a, 'b, 'c, T, U, V, W> complex_impl_support::External for (T, complex_impl_support::M<'a, 'b, 'c, std::boxed::Box<U>, V, W>)\n              where <U as std::ops::FnOnce<(T,)>>::Output == V, <V as std::iter::Iterator>::Item == T, 'b : 'a, T : 'a, U: std::ops::FnOnce<(T,)>, U : 'static, V: std::iter::Iterator, V: std::clone::Clone, W: std::ops::Add, <W as std::ops::Add>::Output: std::marker::Copy;\n \n-error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n+error[E0210]: type parameter `R` must be used as the type parameter for some local type (e.g. `MyStruct<R>`)\n   --> $DIR/complex-impl.rs:19:1\n    |\n LL | impl<R> External for (Q, R) {} //~ ERROR must be used\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `R` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "afcbab4a5c6c0949348b2a9052fb54f5a2bc7e94", "filename": "src/test/ui/e0119/issue-28981.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fe0119%2Fissue-28981.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,11 +8,13 @@ LL | impl<Foo> Deref for Foo { } //~ ERROR must be used\n            - impl<'a, T> std::ops::Deref for &'a T\n              where T: ?Sized;\n \n-error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g. `MyStruct<T>`); only traits defined in the current crate can be implemented for a type parameter\n+error[E0210]: type parameter `Foo` must be used as the type parameter for some local type (e.g. `MyStruct<Foo>`)\n   --> $DIR/issue-28981.rs:15:1\n    |\n LL | impl<Foo> Deref for Foo { } //~ ERROR must be used\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ type parameter `Foo` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n \n error: aborting due to 2 previous errors\n "}, {"sha": "045ae700955d41334eb599010a44f81d173284d4", "filename": "src/test/ui/error-codes/E0117.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0117.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,7 +8,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/E0117.rs:11:1\n    |\n LL | impl Drop for u32 {} //~ ERROR E0117\n-   | ^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead"}, {"sha": "bbc0da2248f6eb46431a38e0789890d8b1f41433", "filename": "src/test/ui/error-codes/E0206.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0206.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -14,7 +14,7 @@ error[E0117]: only traits defined in the current crate can be implemented for ar\n   --> $DIR/E0206.rs:13:1\n    |\n LL | impl Copy for Foo { }\n-   | ^^^^^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n+   | ^^^^^^^^^^^^^^^^^ impl doesn't use types inside crate\n    |\n    = note: the impl does not reference any types defined in this crate\n    = note: define and implement a trait or new type instead"}, {"sha": "e08532b02491f433ef9306bde2a319c1d2f882d8", "filename": "src/test/ui/error-codes/E0328.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0328.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsize)]\n+\n+use std::marker::Unsize;\n+\n+pub struct MyType;\n+\n+impl<T> Unsize<T> for MyType {}\n+//~^ ERROR explicit impls for the `Unsize` trait are not permitted [E0328]\n+\n+fn main() {}"}, {"sha": "ad3a224279ce5edfdd388946fef26444001c34f0", "filename": "src/test/ui/error-codes/E0328.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0328.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0328.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0328.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,9 @@\n+error[E0328]: explicit impls for the `Unsize` trait are not permitted\n+  --> $DIR/E0328.rs:17:1\n+   |\n+LL | impl<T> Unsize<T> for MyType {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl of `Unsize` not allowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0328`."}, {"sha": "4fc74f5ef22192adca43160e514666937f407d06", "filename": "src/test/ui/error-codes/E0401.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -11,14 +11,14 @@\n trait Baz<T> {}\n \n fn foo<T>(x: T) {\n-    fn bar<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n+    fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n     }\n     fn baz<U,\n            V: Baz<U>,\n            W: Fn()>\n            (y: T) { //~ ERROR E0401\n     }\n-    bar(x);\n+    bfnr(x);\n }\n \n "}, {"sha": "5b66d1093408e5b01f02a4cc1379cb06454499c9", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,23 +1,24 @@\n error[E0401]: can't use type parameters from outer function\n-  --> $DIR/E0401.rs:14:38\n+  --> $DIR/E0401.rs:14:39\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n-LL |     fn bar<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n-   |        --------------------------    ^ use of type variable from outer function\n+LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) { //~ ERROR E0401\n+   |        ---------------------------    ^ use of type variable from outer function\n    |        |\n-   |        help: try using a local type parameter instead: `bar<U, V: Baz<U>, W: Fn(), T>`\n+   |        help: try using a local type parameter instead: `bfnr<U, V: Baz<U>, W: Fn(), T>`\n \n error[E0401]: can't use type parameters from outer function\n   --> $DIR/E0401.rs:19:16\n    |\n LL | fn foo<T>(x: T) {\n    |        - type variable from outer function\n ...\n+LL |     fn baz<U,\n+   |        --- try adding a local type parameter in this method instead\n+...\n LL |            (y: T) { //~ ERROR E0401\n    |                ^ use of type variable from outer function\n-   |\n-   = help: try using a local type parameter instead\n \n error[E0401]: can't use type parameters from outer function\n   --> $DIR/E0401.rs:32:25"}, {"sha": "c50cb759e05c288ab5e2e0e8b9d21f415815f023", "filename": "src/test/ui/error-codes/E0522.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0522.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0522.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0522.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -15,3 +15,5 @@ fn cookie() -> ! {\n //~^^ ERROR definition of an unknown language item: `cookie` [E0522]\n     loop {}\n }\n+\n+fn main() {}"}, {"sha": "9f3f8968d734ed00a575d909570ac50a7c74b1a6", "filename": "src/test/ui/error-codes/E0522.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0522.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,12 +1,9 @@\n-error[E0601]: main function not found\n-\n error[E0522]: definition of an unknown language item: `cookie`\n   --> $DIR/E0522.rs:13:1\n    |\n LL | #[lang = \"cookie\"]\n    | ^^^^^^^^^^^^^^^^^^ definition of unknown language item `cookie`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0522, E0601.\n-For more information about an error, try `rustc --explain E0522`.\n+For more information about this error, try `rustc --explain E0522`."}, {"sha": "37b3f523475fcdcae9a9d07dd0fc8f62001a6d86", "filename": "src/test/ui/error-codes/E0601.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0601.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0601.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0601.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test for main function not found."}, {"sha": "cbc20db35da77f73127dcd1471ec9e412a57dad9", "filename": "src/test/ui/error-codes/E0601.stderr", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0601.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ferror-codes%2FE0601.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0601.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,7 @@\n+error[E0601]: `main` function not found in crate `E0601`\n+   |\n+   = note: consider adding a `main` function to `$DIR/E0601.rs`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "8a7d316ed8384af9a8f04e8e97b321dc80b6f702", "filename": "src/test/ui/feature-gate-i128_type2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -30,3 +30,5 @@ fn test3_2() {\n enum A { //~ ERROR 128-bit type is unstable\n     A(u64)\n }\n+\n+fn main() {}"}, {"sha": "23d4d6c98d90ae93d368ba8d1e28db865c0e07cf", "filename": "src/test/ui/feature-gate-i128_type2.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-i128_type2.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -30,8 +30,6 @@ LL |     let x: u128 = 0; //~ ERROR 128-bit type is unstable\n    |\n    = help: add #![feature(i128_type)] to the crate attributes to enable\n \n-error[E0601]: main function not found\n-\n error[E0658]: repr with 128-bit type is unstable (see issue #35118)\n   --> $DIR/feature-gate-i128_type2.rs:30:1\n    |\n@@ -42,7 +40,6 @@ LL | | }\n    |\n    = help: add #![feature(repr128)] to the crate attributes to enable\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors occurred: E0601, E0658.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "ceb8afe124a8cbdddf53256c42325163073fc73b", "filename": "src/test/ui/feature-gate-underscore-imports.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate-underscore-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate-underscore-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore-imports.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate std as _; //~ ERROR renaming extern crates with `_` is unstable\n+use std::vec as _; //~ ERROR renaming imports with `_` is unstable\n+\n+fn main() {}"}, {"sha": "2eea95260d5e590de18b18a0f95238c3231febe6", "filename": "src/test/ui/feature-gate-underscore-imports.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate-underscore-imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate-underscore-imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-underscore-imports.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: renaming extern crates with `_` is unstable (see issue #48216)\n+  --> $DIR/feature-gate-underscore-imports.rs:11:1\n+   |\n+LL | extern crate std as _; //~ ERROR renaming extern crates with `_` is unstable\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(underscore_imports)] to the crate attributes to enable\n+\n+error[E0658]: renaming imports with `_` is unstable (see issue #48216)\n+  --> $DIR/feature-gate-underscore-imports.rs:12:5\n+   |\n+LL | use std::vec as _; //~ ERROR renaming imports with `_` is unstable\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(underscore_imports)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "6c22679933874e0b57ae6ca2527c84016fa273fa", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: main function not found\n+// error-pattern: `main` function not found\n \n // At time of authorship, a crate-level #![bench] with no `--test`\n // will cause compilation to error unconditionally with \"main function"}, {"sha": "503ef020d960419b15c930b05125d292a028c1e3", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-bench.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-bench.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,4 +1,6 @@\n-error[E0601]: main function not found\n+error[E0601]: `main` function not found in crate `issue_43106_gating_of_bench`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-43106-gating-of-bench.rs`\n \n error: aborting due to previous error\n "}, {"sha": "410f960e655fbaeb466c4d6a95a1212273b72f98", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -35,3 +35,5 @@ mod inline {\n     #[inline = \"2100\"] impl S { }\n     //~^ ERROR attribute should be applied to function\n }\n+\n+fn main() {}"}, {"sha": "d67d78e31a9d5cf7d4587e802df2fed713b17a9b", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,5 +1,3 @@\n-error[E0601]: main function not found\n-\n error[E0518]: attribute should be applied to function\n   --> $DIR/issue-43106-gating-of-inline.rs:21:1\n    |\n@@ -39,7 +37,6 @@ error[E0518]: attribute should be applied to function\n LL |     #[inline = \"2100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^ ---------- not a function\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors occurred: E0518, E0601.\n-For more information about an error, try `rustc --explain E0518`.\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "ec3c97beab0f3dd9d6f8ae139f978c64434114a2", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -13,5 +13,9 @@\n // `#![macro_escape]` is incompatible with crate-level `#![macro_use]`\n // already present in issue-43106-gating-of-builtin-attrs.\n \n+// must-compile-successfully\n+\n #![macro_escape]\n //~^ WARN macro_escape is a deprecated synonym for macro_use\n+\n+fn main() {}"}, {"sha": "d19720397e66d0ae5fb5d0187792bdf8e0403681", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,13 +1,8 @@\n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-macro_escape.rs:16:1\n+  --> $DIR/issue-43106-gating-of-macro_escape.rs:18:1\n    |\n LL | #![macro_escape]\n    | ^^^^^^^^^^^^^^^^\n    |\n    = help: consider an outer attribute, #[macro_use] mod ...\n \n-error[E0601]: main function not found\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "5bb8bb024ed5145a636c3764d752b5bee0a4643e", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-proc_macro_derive.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -40,3 +40,5 @@ mod proc_macro_derive2 {\n     #[proc_macro_derive = \"2500\"] impl S { }\n     //~^ ERROR the `#[proc_macro_derive]` attribute may only be used on bare functions\n }\n+\n+fn main() {}"}, {"sha": "419efb6825a970ff35673d5dc88e13970097f2bb", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-proc_macro_derive.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-proc_macro_derive.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -34,8 +34,5 @@ error: the `#[proc_macro_derive]` attribute may only be used on bare functions\n LL |     #[proc_macro_derive = \"2500\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0601]: main function not found\n+error: aborting due to 6 previous errors\n \n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "0c6cfb5da565c608606387bb6b1cdf56d700ff18", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-rustc_deprecated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -36,3 +36,4 @@ mod rustc_deprecated {\n     //~^ ERROR stability attributes may not be used outside of the standard library\n }\n \n+fn main() {}"}, {"sha": "35c15cb6b1ea8662d2eaffccf4959ccfaaf0c640", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-rustc_deprecated.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-rustc_deprecated.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,5 +1,3 @@\n-error[E0601]: main function not found\n-\n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-rustc_deprecated.rs:17:1\n    |\n@@ -42,6 +40,5 @@ error: stability attributes may not be used outside of the standard library\n LL |     #[rustc_deprecated = \"1500\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "6415243d0873e9b449f16455b1273d3c32b1eeeb", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-stable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -35,3 +35,5 @@ mod stable {\n     #[stable = \"1300\"] impl S { }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n }\n+\n+fn main() {}"}, {"sha": "21543d1b20afc9b1b33788d16f3ef24d2f5b8741", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-stable.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-stable.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,5 +1,3 @@\n-error[E0601]: main function not found\n-\n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-stable.rs:17:1\n    |\n@@ -42,6 +40,5 @@ error: stability attributes may not be used outside of the standard library\n LL |     #[stable = \"1300\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "06632396249a55a5a3ed9dec9ff42f0b517cf9ef", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: main function not found\n+// error-pattern: `main` function not found\n \n // At time of authorship, crate-level #[test] attribute with no\n // `--test` signals unconditional error complaining of missing main"}, {"sha": "2ab35be43c576dfcfc576fa1f7b9bc6a2d7b8551", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-test.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-test.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,4 +1,6 @@\n-error[E0601]: main function not found\n+error[E0601]: `main` function not found in crate `issue_43106_gating_of_test`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-43106-gating-of-test.rs`\n \n error: aborting due to previous error\n "}, {"sha": "140474d82c88d50bc4f19cd5c3f43b1b4f010dd5", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-unstable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -35,3 +35,5 @@ mod unstable {\n     #[unstable = \"1200\"] impl S { }\n     //~^ ERROR stability attributes may not be used outside of the standard library\n }\n+\n+fn main() {}"}, {"sha": "6124e16f41804bac1a790b9b6b4aaf94b07ed322", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-unstable.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-unstable.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,5 +1,3 @@\n-error[E0601]: main function not found\n-\n error: stability attributes may not be used outside of the standard library\n   --> $DIR/issue-43106-gating-of-unstable.rs:17:1\n    |\n@@ -42,6 +40,5 @@ error: stability attributes may not be used outside of the standard library\n LL |     #[unstable = \"1200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n \n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "8636a66ae00aeed8189242ec9060e13bec66ca1d", "filename": "src/test/ui/generator/yield-in-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -12,3 +12,5 @@\n \n const A: u8 = { yield 3u8; 3u8};\n //~^ ERROR yield statement outside\n+\n+fn main() {}"}, {"sha": "874edce5931684f156cfa8e0710187e76e6a45c1", "filename": "src/test/ui/generator/yield-in-const.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-const.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,12 +1,9 @@\n-error[E0601]: main function not found\n-\n error[E0627]: yield statement outside of generator literal\n   --> $DIR/yield-in-const.rs:13:17\n    |\n LL | const A: u8 = { yield 3u8; 3u8};\n    |                 ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0601, E0627.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0627`."}, {"sha": "21601f47f677d1f41771008d8526a771e96b8a24", "filename": "src/test/ui/generator/yield-in-static.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -12,3 +12,5 @@\n \n static B: u8 = { yield 3u8; 3u8};\n //~^ ERROR yield statement outside\n+\n+fn main() {}"}, {"sha": "35d1ebaabdc1cb763aa9772b95dd8ab04c974ae2", "filename": "src/test/ui/generator/yield-in-static.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-in-static.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,12 +1,9 @@\n-error[E0601]: main function not found\n-\n error[E0627]: yield statement outside of generator literal\n   --> $DIR/yield-in-static.rs:13:18\n    |\n LL | static B: u8 = { yield 3u8; 3u8};\n    |                  ^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0601, E0627.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0627`."}, {"sha": "e709eeee14a8452e4852ae322a16d7f380210bc0", "filename": "src/test/ui/imports/macro-paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -36,3 +36,5 @@ fn g() {\n         mod baz { pub use two_macros::m; }\n     }\n }\n+\n+fn main() {}"}, {"sha": "799e7f972464b55f73d754a39392d7e3316eca3e", "filename": "src/test/ui/imports/macro-paths.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacro-paths.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -36,9 +36,6 @@ LL | | }\n    | |_^\n    = note: macro-expanded items do not shadow when used in a macro invocation path\n \n-error[E0601]: main function not found\n+error: aborting due to 2 previous errors\n \n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0601, E0659.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "5d6a11913849a70175aa3a6da954d956ecd73ed4", "filename": "src/test/ui/imports/macros.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fimports%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -49,3 +49,5 @@ mod m4 {\n     use two_macros::m;\n     m!(); //~ ERROR ambiguous\n }\n+\n+fn main() {}"}, {"sha": "f91987cd9f3402779b2d9f78ed9ecae8c6b1cdfb", "filename": "src/test/ui/imports/macros.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fmacros.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -51,9 +51,6 @@ LL |     use two_macros::m;\n    |         ^^^^^^^^^^^^^\n    = note: macro-expanded macro imports do not shadow\n \n-error[E0601]: main function not found\n+error: aborting due to 3 previous errors\n \n-error: aborting due to 4 previous errors\n-\n-Some errors occurred: E0601, E0659.\n-For more information about an error, try `rustc --explain E0601`.\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "ff04cfe99c0bc10b12bf066247f352640d348343", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -20,3 +20,5 @@ impl Deref for Struct {\n     }\n }\n //~^^^^ ERROR cannot infer an appropriate lifetime for lifetime parameter\n+\n+fn main() {}"}, {"sha": "37b586e1e3bd004dfb2e74007a750233aa0f85a1", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl-2.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl-2.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,5 +1,3 @@\n-error[E0601]: main function not found\n-\n error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in generic type due to conflicting requirements\n   --> $DIR/mismatched_trait_impl-2.rs:18:5\n    |\n@@ -18,7 +16,6 @@ LL | |     }\n            expected fn(&Struct) -> &Trait + 'static\n               found fn(&Struct) -> &Trait\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0495, E0601.\n-For more information about an error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0495`."}, {"sha": "4ce653547da032896c8f55e678ec3779336b19c0", "filename": "src/test/ui/issue-47706-trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fissue-47706-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fissue-47706-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47706-trait.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -14,3 +14,5 @@ trait T {\n     }\n     //~^^ ERROR function is expected to take a single 0-tuple as argument\n }\n+\n+fn main() {}"}, {"sha": "717b3eb0b5625aecb84df0165d902a15d8d50d35", "filename": "src/test/ui/issue-47706-trait.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fissue-47706-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fissue-47706-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-47706-trait.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,5 +1,3 @@\n-error[E0601]: main function not found\n-\n error[E0593]: function is expected to take a single 0-tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/issue-47706-trait.rs:13:20\n    |\n@@ -8,7 +6,6 @@ LL |     fn f(&self, _: ()) {\n LL |         None::<()>.map(Self::f);\n    |                    ^^^ expected function that takes a single 0-tuple as argument\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0593, E0601.\n-For more information about an error, try `rustc --explain E0593`.\n+For more information about this error, try `rustc --explain E0593`."}, {"sha": "a5ef92f14bbc58628de60b58dad9ba10129e7cb4", "filename": "src/test/ui/main-wrong-location.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fmain-wrong-location.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmain-wrong-location.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,4 +1,4 @@\n-error[E0601]: main function not found\n+error[E0601]: `main` function not found in crate `main_wrong_location`\n    |\n    = note: the main function must be defined at the crate level but you have one or more functions named 'main' that are not defined at the crate level. Either move the definition or attach the `#[main]` attribute to override this behavior.\n note: here is a function named 'main'"}, {"sha": "f655047f6f5ac446ac9c793c8468443a50357d15", "filename": "src/test/ui/missing-items/m2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fmissing-items%2Fm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fmissing-items%2Fm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fm2.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -18,3 +18,5 @@ struct X {\n \n impl m1::X for X { //~ ERROR not all trait items implemented\n }\n+\n+fn main() {}"}, {"sha": "3f7a4039eb76b19d46a80e8cc4420956afdec996", "filename": "src/test/ui/missing-items/m2.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -1,5 +1,3 @@\n-error[E0601]: main function not found\n-\n error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `method`\n   --> $DIR/m2.rs:19:1\n    |\n@@ -10,7 +8,6 @@ LL | impl m1::X for X { //~ ERROR not all trait items implemented\n    = note: `Type` from trait: `type Type;`\n    = note: `method` from trait: `fn(&Self, std::string::String) -> <Self as m1::X>::Type`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0046, E0601.\n-For more information about an error, try `rustc --explain E0046`.\n+For more information about this error, try `rustc --explain E0046`."}, {"sha": "eab500de255694b92477457b635ec2501c109934", "filename": "src/test/ui/resolve/issue-14254.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -111,3 +111,5 @@ impl Foo for Box<isize> {\n         //~^ ERROR cannot find value `bah`\n     }\n }\n+\n+fn main() {}"}, {"sha": "055cbb2d579160ff9925469225a289c41ce19f80", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -142,9 +142,6 @@ error[E0425]: cannot find value `bah` in this scope\n LL |         bah;\n    |         ^^^ help: try: `Self::bah`\n \n-error[E0601]: main function not found\n+error: aborting due to 24 previous errors\n \n-error: aborting due to 25 previous errors\n-\n-Some errors occurred: E0425, E0601.\n-For more information about an error, try `rustc --explain E0425`.\n+For more information about this error, try `rustc --explain E0425`."}, {"sha": "361e8caf7442effe56ebfe1a8921399b9e0952a4", "filename": "src/test/ui/resolve/issue-21221-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -27,3 +27,5 @@ pub mod baz {\n struct Foo;\n impl T for Foo { }\n //~^ ERROR cannot find trait `T`\n+\n+fn main() {}"}, {"sha": "c61ffe3b33e8ae22467569635605c238a6811a56", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,7 +8,5 @@ help: possible candidate is found in another module, you can import it into scop\n LL | use foo::bar::T;\n    |\n \n-error[E0601]: main function not found\n-\n error: cannot continue compilation due to previous error\n "}, {"sha": "d24fced5d313f4dc6818738c2596f8fb63d5cf3b", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -65,3 +65,5 @@ fn h8() -> i32 {\n     a::b()\n     //~^ ERROR expected function, found module `a::b`\n }\n+\n+fn main() {}"}, {"sha": "9216c0b32192930b02f3a29ea842813bced0ffd9", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -72,9 +72,6 @@ LL |     a::b()\n    |        |\n    |        did you mean `I`?\n \n-error[E0601]: main function not found\n+error: aborting due to 9 previous errors\n \n-error: aborting due to 10 previous errors\n-\n-Some errors occurred: E0423, E0601.\n-For more information about an error, try `rustc --explain E0423`.\n+For more information about this error, try `rustc --explain E0423`."}, {"sha": "06651a71d0c00bb16ddfb9f880616736e91641d3", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+#![feature(underscore_imports)]\n+#![warn(unused_imports, unused_extern_crates)]\n+\n+struct S;\n+\n+mod m {\n+    pub trait Tr1 {\n+        fn tr1_is_in_scope(&self) {}\n+    }\n+    pub trait Tr2 {\n+        fn tr2_is_in_scope(&self) {}\n+    }\n+\n+    impl Tr1 for ::S {}\n+    impl Tr2 for ::S {}\n+}\n+\n+mod unused {\n+    use m::Tr1 as _; //~ WARN unused import\n+    use S as _; //~ WARN unused import\n+    extern crate core as _; //~ WARN unused extern crate\n+}\n+\n+mod outer {\n+    mod middle {\n+        pub use m::Tr1 as _;\n+        pub use m::Tr2 as _; // OK, no name conflict\n+        struct Tr1; // OK, no name conflict\n+        fn check() {\n+            // Both traits are in scope\n+            ::S.tr1_is_in_scope();\n+            ::S.tr2_is_in_scope();\n+        }\n+\n+        mod inner {\n+            // `_` imports are fetched by glob imports\n+            use super::*;\n+            fn check() {\n+                // Both traits are in scope\n+                ::S.tr1_is_in_scope();\n+                ::S.tr2_is_in_scope();\n+            }\n+        }\n+    }\n+\n+    // `_` imports are fetched by glob imports\n+    use self::middle::*;\n+    fn check() {\n+        // Both traits are in scope\n+        ::S.tr1_is_in_scope();\n+        ::S.tr2_is_in_scope();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "4530d0fa604aa8721604ece3e254b69fd0794f48", "filename": "src/test/ui/rfc-2166-underscore-imports/basic.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2166-underscore-imports%2Fbasic.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -0,0 +1,30 @@\n+warning: unused import: `m::Tr1 as _`\n+  --> $DIR/basic.rs:31:9\n+   |\n+LL |     use m::Tr1 as _; //~ WARN unused import\n+   |         ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/basic.rs:14:9\n+   |\n+LL | #![warn(unused_imports, unused_extern_crates)]\n+   |         ^^^^^^^^^^^^^^\n+\n+warning: unused import: `S as _`\n+  --> $DIR/basic.rs:32:9\n+   |\n+LL |     use S as _; //~ WARN unused import\n+   |         ^^^^^^\n+\n+warning: unused extern crate\n+  --> $DIR/basic.rs:33:5\n+   |\n+LL |     extern crate core as _; //~ WARN unused extern crate\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/basic.rs:14:25\n+   |\n+LL | #![warn(unused_imports, unused_extern_crates)]\n+   |                         ^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "9b61ecae6512ee395f55ef9a7ac32b0bfdd42c90", "filename": "src/test/ui/span/issue-27522.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-27522.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -4,7 +4,7 @@ error[E0307]: invalid `self` type: &SomeType\n LL |     fn handler(self: &SomeType); //~ ERROR invalid `self` type\n    |                      ^^^^^^^^^\n    |\n-   = note: type must be `Self` or a type that dereferences to it`\n+   = note: type must be `Self` or a type that dereferences to it\n    = help: consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\n \n error: aborting due to previous error"}, {"sha": "19e05f33825f7fdf9760ebfc69988b8dee772822", "filename": "src/test/ui/span/issue-35987.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fspan%2Fissue-35987.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fspan%2Fissue-35987.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -20,3 +20,5 @@ impl<T: Clone, Add> Add for Foo<T> {\n         unimplemented!();\n     }\n }\n+\n+fn main() {}"}, {"sha": "2d4a7cc72f5f628558240d28b49431c2e1d2c1c4", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -8,7 +8,5 @@ help: possible better candidate is found in another module, you can import it in\n LL | use std::ops::Add;\n    |\n \n-error[E0601]: main function not found\n-\n error: cannot continue compilation due to previous error\n "}, {"sha": "711803754408f50a757d4d51534221e99256c98b", "filename": "src/test/ui/token/issue-10636-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -17,3 +17,5 @@ pub fn trace_option(option: Option<isize>) {\n \n } //~ ERROR: incorrect close delimiter\n //~^ ERROR: expected expression, found `)`\n+\n+fn main() {}"}, {"sha": "56a30423171da52f4ccc49e834eb4afd337b58cc", "filename": "src/test/ui/token/issue-10636-2.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -22,8 +22,5 @@ error: expected expression, found `)`\n LL | } //~ ERROR: incorrect close delimiter\n    | ^ expected expression\n \n-error[E0601]: main function not found\n+error: aborting due to 3 previous errors\n \n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0601`."}, {"sha": "7bd8506af90b96057ff3d8534cea7c4a55bbdead", "filename": "src/test/ui/token/issue-41155.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -11,3 +11,5 @@\n impl S { //~ ERROR cannot find type\n     pub\n } //~ ERROR expected one of\n+\n+fn main() {}"}, {"sha": "b56b95a8aafd796852fbeee7c699913c6fe4f4ff", "filename": "src/test/ui/token/issue-41155.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-41155.stderr?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -12,9 +12,6 @@ error[E0412]: cannot find type `S` in this scope\n LL | impl S { //~ ERROR cannot find type\n    |      ^ not found in this scope\n \n-error[E0601]: main function not found\n+error: aborting due to 2 previous errors\n \n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0412, E0601.\n-For more information about an error, try `rustc --explain E0412`.\n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "0e3fa25b13ce9368233e815835902df375795318", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b66873187e37a9d79adad89563088a9cb86028/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=36b66873187e37a9d79adad89563088a9cb86028", "patch": "@@ -40,6 +40,7 @@ const ARCH_TABLE: &'static [(&'static str, &'static str)] = &[\n     (\"i386\", \"x86\"),\n     (\"i586\", \"x86\"),\n     (\"i686\", \"x86\"),\n+    (\"mips64\", \"mips64\"),\n     (\"mips\", \"mips\"),\n     (\"msp430\", \"msp430\"),\n     (\"powerpc\", \"powerpc\"),"}]}