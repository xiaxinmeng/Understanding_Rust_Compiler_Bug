{"sha": "6996ec860bde7e6186ba8609b68ef51b8713e2ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OTZlYzg2MGJkZTdlNjE4NmJhODYwOWI2OGVmNTFiODcxM2UyZWE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T16:17:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-23T16:37:26Z"}, "message": "Drop rarely used fixture functionality", "tree": {"sha": "303a1db3e3652c66908701f1efca34ab27b9d5e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/303a1db3e3652c66908701f1efca34ab27b9d5e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6996ec860bde7e6186ba8609b68ef51b8713e2ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6996ec860bde7e6186ba8609b68ef51b8713e2ea", "html_url": "https://github.com/rust-lang/rust/commit/6996ec860bde7e6186ba8609b68ef51b8713e2ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6996ec860bde7e6186ba8609b68ef51b8713e2ea/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f304874c8c12de6120663ffff7f1bfdc69f19496", "url": "https://api.github.com/repos/rust-lang/rust/commits/f304874c8c12de6120663ffff7f1bfdc69f19496", "html_url": "https://github.com/rust-lang/rust/commit/f304874c8c12de6120663ffff7f1bfdc69f19496"}], "stats": {"total": 55, "additions": 2, "deletions": 53}, "files": [{"sha": "bf897baffc3cdbec11215f96ee0aa506c8ca1781", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6996ec860bde7e6186ba8609b68ef51b8713e2ea/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6996ec860bde7e6186ba8609b68ef51b8713e2ea/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=6996ec860bde7e6186ba8609b68ef51b8713e2ea", "patch": "@@ -114,7 +114,6 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, ra_fixture: &str) -> FileId\n     let crate_graph = if let Some(entry) = fixture {\n         let meta = match ParsedMeta::from(&entry.meta) {\n             ParsedMeta::File(it) => it,\n-            _ => panic!(\"with_single_file only support file meta\"),\n         };\n \n         let mut crate_graph = CrateGraph::default();\n@@ -159,21 +158,14 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n     let mut default_crate_root: Option<FileId> = None;\n \n     let mut file_set = FileSet::default();\n-    let mut source_root_id = WORKSPACE;\n-    let mut source_root_prefix = \"/\".to_string();\n+    let source_root_id = WORKSPACE;\n+    let source_root_prefix = \"/\".to_string();\n     let mut file_id = FileId(0);\n \n     let mut file_position = None;\n \n     for entry in fixture.iter() {\n         let meta = match ParsedMeta::from(&entry.meta) {\n-            ParsedMeta::Root { path } => {\n-                let file_set = std::mem::replace(&mut file_set, FileSet::default());\n-                db.set_source_root(source_root_id, Arc::new(SourceRoot::new_local(file_set)));\n-                source_root_id.0 += 1;\n-                source_root_prefix = path;\n-                continue;\n-            }\n             ParsedMeta::File(it) => it,\n         };\n         assert!(meta.path.starts_with(&source_root_prefix));\n@@ -239,7 +231,6 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n }\n \n enum ParsedMeta {\n-    Root { path: String },\n     File(FileMeta),\n }\n \n@@ -255,11 +246,6 @@ struct FileMeta {\n impl From<&FixtureMeta> for ParsedMeta {\n     fn from(meta: &FixtureMeta) -> Self {\n         match meta {\n-            FixtureMeta::Root { path } => {\n-                // `Self::Root` causes a false warning: 'variant is never constructed: `Root` '\n-                // see https://github.com/rust-lang/rust/issues/69018\n-                ParsedMeta::Root { path: path.to_owned() }\n-            }\n             FixtureMeta::File(f) => Self::File(FileMeta {\n                 path: f.path.to_owned(),\n                 krate: f.crate_name.to_owned(),"}, {"sha": "503099fb74fc4c5b7aeb90f436e6a5a259ee8bbe", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6996ec860bde7e6186ba8609b68ef51b8713e2ea/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6996ec860bde7e6186ba8609b68ef51b8713e2ea/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=6996ec860bde7e6186ba8609b68ef51b8713e2ea", "patch": "@@ -423,31 +423,6 @@ fn extern_crate_rename_2015_edition() {\n     );\n }\n \n-#[test]\n-fn import_across_source_roots() {\n-    let map = def_map(\n-        \"\n-        //- /main.rs crate:main deps:test_crate\n-        use test_crate::a::b::C;\n-\n-        //- root /test_crate/\n-\n-        //- /test_crate/lib.rs crate:test_crate\n-        pub mod a {\n-            pub mod b {\n-                pub struct C;\n-            }\n-        }\n-\n-        \",\n-    );\n-\n-    assert_snapshot!(map, @r###\"\n-        \u22eecrate\n-        \u22eeC: t v\n-    \"###);\n-}\n-\n #[test]\n fn reexport_across_crates() {\n     let map = def_map("}, {"sha": "0dbeb01b1b287bef9130925d554b5f31efedcde4", "filename": "crates/test_utils/src/fixture.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6996ec860bde7e6186ba8609b68ef51b8713e2ea/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6996ec860bde7e6186ba8609b68ef51b8713e2ea/crates%2Ftest_utils%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Ffixture.rs?ref=6996ec860bde7e6186ba8609b68ef51b8713e2ea", "patch": "@@ -10,7 +10,6 @@ pub struct FixtureEntry {\n \n #[derive(Debug, Eq, PartialEq)]\n pub enum FixtureMeta {\n-    Root { path: String },\n     File(FileMeta),\n }\n \n@@ -27,29 +26,25 @@ pub struct FileMeta {\n impl FixtureMeta {\n     pub fn path(&self) -> &str {\n         match self {\n-            FixtureMeta::Root { path } => &path,\n             FixtureMeta::File(f) => &f.path,\n         }\n     }\n \n     pub fn crate_name(&self) -> Option<&String> {\n         match self {\n             FixtureMeta::File(f) => f.crate_name.as_ref(),\n-            _ => None,\n         }\n     }\n \n     pub fn cfg_options(&self) -> Option<&CfgOptions> {\n         match self {\n             FixtureMeta::File(f) => Some(&f.cfg),\n-            _ => None,\n         }\n     }\n \n     pub fn edition(&self) -> Option<&String> {\n         match self {\n             FixtureMeta::File(f) => f.edition.as_ref(),\n-            _ => None,\n         }\n     }\n \n@@ -63,7 +58,6 @@ impl FixtureMeta {\n                 Self {\n                     iter: match meta {\n                         FixtureMeta::File(f) => Some(f.env.iter()),\n-                        _ => None,\n                     },\n                 }\n             }\n@@ -146,12 +140,6 @@ The offending line: {:?}\"#,\n fn parse_meta(meta: &str) -> FixtureMeta {\n     let components = meta.split_ascii_whitespace().collect::<Vec<_>>();\n \n-    if components[0] == \"root\" {\n-        let path = components[1].to_string();\n-        assert!(path.starts_with(\"/\") && path.ends_with(\"/\"));\n-        return FixtureMeta::Root { path };\n-    }\n-\n     let path = components[0].to_string();\n     assert!(path.starts_with(\"/\"));\n "}]}