{"sha": "9374d526da82a74c5d5f7d7b8cef97feb3104274", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNzRkNTI2ZGE4MmE3NGM1ZDVmN2Q3YjhjZWY5N2ZlYjMxMDQyNzQ=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-16T15:39:08Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-16T15:39:08Z"}, "message": "fix debug tuple structs", "tree": {"sha": "d3c7d4a51bd819af305476246523781bfa976134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3c7d4a51bd819af305476246523781bfa976134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9374d526da82a74c5d5f7d7b8cef97feb3104274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9374d526da82a74c5d5f7d7b8cef97feb3104274", "html_url": "https://github.com/rust-lang/rust/commit/9374d526da82a74c5d5f7d7b8cef97feb3104274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9374d526da82a74c5d5f7d7b8cef97feb3104274/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b67378f53e23cbecd77d775fa51e5c3a864379df", "url": "https://api.github.com/repos/rust-lang/rust/commits/b67378f53e23cbecd77d775fa51e5c3a864379df", "html_url": "https://github.com/rust-lang/rust/commit/b67378f53e23cbecd77d775fa51e5c3a864379df"}], "stats": {"total": 41, "additions": 37, "deletions": 4}, "files": [{"sha": "d6319ea5c13f7f6b04802026abf16a23bd2aaf7c", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9374d526da82a74c5d5f7d7b8cef97feb3104274/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9374d526da82a74c5d5f7d7b8cef97feb3104274/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=9374d526da82a74c5d5f7d7b8cef97feb3104274", "patch": "@@ -327,7 +327,7 @@ enum Foo {\n impl core::fmt::Debug for Foo {\n     $0fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {\n         match self {\n-            Self::Bar(arg1, arg2) => f.debug_tuple(\"Bar\").field(arg1).field(arg2).finish(),\n+            Self::Bar(arg0, arg1) => f.debug_tuple(\"Bar\").field(arg0).field(arg1).finish(),\n             Self::Baz => write!(f, \"Baz\"),\n         }\n     }"}, {"sha": "1c941382732e56f019ccfe9c3d7abf88768a533c", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/9374d526da82a74c5d5f7d7b8cef97feb3104274/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9374d526da82a74c5d5f7d7b8cef97feb3104274/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=9374d526da82a74c5d5f7d7b8cef97feb3104274", "patch": "@@ -166,7 +166,7 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                         for field in list.fields() {\n                             let name = field.name()?;\n \n-                            // => MyStruct { field_name }\n+                            // create a field pattern for use in `MyStruct { fields.. }`\n                             let field_name = field.name()?;\n                             let pat = make::ident_pat(false, false, field_name.clone());\n                             pats.push(pat.into());\n@@ -184,11 +184,44 @@ fn gen_debug_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                         let method = make::name_ref(\"finish\");\n                         let expr = make::expr_method_call(expr, method, make::arg_list(None));\n \n-                        // => MyStruct { fields.. } => f.debug_struct()...finish(),\n+                        // => MyStruct { fields.. } => f.debug_struct(\"MyStruct\")...finish(),\n                         let pat = make::record_pat(variant_name.clone(), pats.into_iter());\n                         arms.push(make::match_arm(Some(pat.into()), None, expr));\n                     }\n-                    Some(ast::FieldList::TupleFieldList(_list)) => todo!(),\n+                    Some(ast::FieldList::TupleFieldList(list)) => {\n+                        let mut pats = vec![];\n+\n+                        // => f.debug_tuple(name)\n+                        let target = make::expr_path(make::ext::ident_path(\"f\"));\n+                        let method = make::name_ref(\"debug_tuple\");\n+                        let struct_name = format!(\"\\\"{}\\\"\", name);\n+                        let args = make::arg_list(Some(make::expr_literal(&struct_name).into()));\n+                        let mut expr = make::expr_method_call(target, method, args);\n+\n+                        for (i, _) in list.fields().enumerate() {\n+                            let name = format!(\"arg{}\", i);\n+\n+                            // create a field pattern for use in `MyStruct(fields..)`\n+                            let field_name = make::name(&name);\n+                            let pat = make::ident_pat(false, false, field_name.clone());\n+                            pats.push(pat.into());\n+\n+                            // => <expr>.field(field)\n+                            let method_name = make::name_ref(\"field\");\n+                            let field_path = &format!(\"{}\", name);\n+                            let field_path = make::expr_path(make::ext::ident_path(field_path));\n+                            let args = make::arg_list(vec![field_path]);\n+                            expr = make::expr_method_call(expr, method_name, args);\n+                        }\n+\n+                        // => <expr>.finish()\n+                        let method = make::name_ref(\"finish\");\n+                        let expr = make::expr_method_call(expr, method, make::arg_list(None));\n+\n+                        // => MyStruct (fields..) => f.debug_tuple(\"MyStruct\")...finish(),\n+                        let pat = make::tuple_struct_pat(variant_name.clone(), pats.into_iter());\n+                        arms.push(make::match_arm(Some(pat.into()), None, expr));\n+                    }\n                     None => {\n                         let fmt_string = make::expr_literal(&(format!(\"\\\"{}\\\"\", name))).into();\n                         let args = make::arg_list(vec![target, fmt_string]);"}]}