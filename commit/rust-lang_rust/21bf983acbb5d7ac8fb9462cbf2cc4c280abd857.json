{"sha": "21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYmY5ODNhY2JiNWQ3YWM4ZmI5NDYyY2JmMmNjNGMyODBhYmQ4NTc=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T16:34:50Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:21:10Z"}, "message": "Rename `Stmt.node` to `Stmt.kind`", "tree": {"sha": "a92c4cc5a421c256847c345f861bee2b074c89ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a92c4cc5a421c256847c345f861bee2b074c89ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "html_url": "https://github.com/rust-lang/rust/commit/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3d8791373005ef08c876aa649ede245efd2352d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d8791373005ef08c876aa649ede245efd2352d", "html_url": "https://github.com/rust-lang/rust/commit/c3d8791373005ef08c876aa649ede245efd2352d"}], "stats": {"total": 152, "additions": 76, "deletions": 76}, "files": [{"sha": "8340c17b4b7a040f4ec33b544f87cb9a3362f587", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -262,7 +262,7 @@ impl CheckAttrVisitor<'tcx> {\n \n     fn check_stmt_attributes(&self, stmt: &hir::Stmt) {\n         // When checking statements ignore expressions, they will be checked later\n-        if let hir::StmtKind::Local(ref l) = stmt.node {\n+        if let hir::StmtKind::Local(ref l) = stmt.kind {\n             for attr in l.attrs.iter() {\n                 if attr.check_name(sym::inline) {\n                     self.check_inline(attr, &stmt.span, Target::Statement);"}, {"sha": "188f3c537293f7485f1eba97d8210a6d16ba5827", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -974,7 +974,7 @@ pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {\n \n pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n     visitor.visit_id(statement.hir_id);\n-    match statement.node {\n+    match statement.kind {\n         StmtKind::Local(ref local) => visitor.visit_local(local),\n         StmtKind::Item(item) => visitor.visit_nested_item(item),\n         StmtKind::Expr(ref expression) |"}, {"sha": "24ea32b65ea23513b80d84d38ea7e30f3f93d6d4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -2660,7 +2660,7 @@ impl<'a> LoweringContext<'a> {\n \n         for (index, stmt) in b.stmts.iter().enumerate() {\n             if index == b.stmts.len() - 1 {\n-                if let StmtKind::Expr(ref e) = stmt.node {\n+                if let StmtKind::Expr(ref e) = stmt.kind {\n                     expr = Some(P(self.lower_expr(e)));\n                 } else {\n                     stmts.extend(self.lower_stmt(stmt));\n@@ -2931,7 +2931,7 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt; 1]> {\n-        let node = match s.node {\n+        let kind = match s.kind {\n             StmtKind::Local(ref l) => {\n                 let (l, item_ids) = self.lower_local(l);\n                 let mut ids: SmallVec<[hir::Stmt; 1]> = item_ids\n@@ -2944,7 +2944,7 @@ impl<'a> LoweringContext<'a> {\n                 ids.push({\n                     hir::Stmt {\n                         hir_id: self.lower_node_id(s.id),\n-                        node: hir::StmtKind::Local(P(l)),\n+                        kind: hir::StmtKind::Local(P(l)),\n                         span: s.span,\n                     }\n                 });\n@@ -2962,7 +2962,7 @@ impl<'a> LoweringContext<'a> {\n \n                         hir::Stmt {\n                             hir_id,\n-                            node: hir::StmtKind::Item(item_id),\n+                            kind: hir::StmtKind::Item(item_id),\n                             span: s.span,\n                         }\n                     })\n@@ -2974,7 +2974,7 @@ impl<'a> LoweringContext<'a> {\n         };\n         smallvec![hir::Stmt {\n             hir_id: self.lower_node_id(s.id),\n-            node,\n+            kind,\n             span: s.span,\n         }]\n     }\n@@ -3011,8 +3011,8 @@ impl<'a> LoweringContext<'a> {\n \n     // Helper methods for building HIR.\n \n-    fn stmt(&mut self, span: Span, node: hir::StmtKind) -> hir::Stmt {\n-        hir::Stmt { span, node, hir_id: self.next_id() }\n+    fn stmt(&mut self, span: Span, kind: hir::StmtKind) -> hir::Stmt {\n+        hir::Stmt { span, kind, hir_id: self.next_id() }\n     }\n \n     fn stmt_expr(&mut self, span: Span, expr: hir::Expr) -> hir::Stmt {"}, {"sha": "74137f81bf88c1f39d04bd4c8e8fd0f65b7a115c", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -303,7 +303,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     }\n \n     fn visit_stmt(&mut self, stmt: &'a Stmt) {\n-        match stmt.node {\n+        match stmt.kind {\n             StmtKind::Mac(..) => self.visit_macro_invoc(stmt.id),\n             _ => visit::walk_stmt(self, stmt),\n         }"}, {"sha": "2d319a64d4d72975ae36765ff01948a46f17ae66", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -968,7 +968,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Variant(ref v)) => Some(&v.attrs[..]),\n             Some(Node::Field(ref f)) => Some(&f.attrs[..]),\n             Some(Node::Expr(ref e)) => Some(&*e.attrs),\n-            Some(Node::Stmt(ref s)) => Some(s.node.attrs()),\n+            Some(Node::Stmt(ref s)) => Some(s.kind.attrs()),\n             Some(Node::Arm(ref a)) => Some(&*a.attrs),\n             Some(Node::GenericParam(param)) => Some(&param.attrs[..]),\n             // Unit/tuple structs/variants take the attributes straight from"}, {"sha": "e5cc045d38cb4e738984f9811388417c090b657a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -1221,7 +1221,7 @@ impl UnOp {\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct Stmt {\n     pub hir_id: HirId,\n-    pub node: StmtKind,\n+    pub kind: StmtKind,\n     pub span: Span,\n }\n "}, {"sha": "2c2884e102030ec1ca65fefc8e70ba23093046f5", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -944,7 +944,7 @@ impl<'a> State<'a> {\n \n     pub fn print_stmt(&mut self, st: &hir::Stmt) {\n         self.maybe_print_comment(st.span.lo());\n-        match st.node {\n+        match st.kind {\n             hir::StmtKind::Local(ref loc) => {\n                 self.print_local(loc.init.as_deref(), |this| this.print_local_decl(&loc));\n             }\n@@ -961,7 +961,7 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n             }\n         }\n-        if stmt_ends_with_semi(&st.node) {\n+        if stmt_ends_with_semi(&st.kind) {\n             self.s.word(\";\");\n         }\n         self.maybe_print_trailing_comment(st.span, None)"}, {"sha": "c92a9e97d22c4c108391bb8123961d6802187055", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -158,7 +158,7 @@ impl_stable_hash_for_spanned!(hir::BinOpKind);\n \n impl_stable_hash_for!(struct hir::Stmt {\n     hir_id,\n-    node,\n+    kind,\n     span,\n });\n "}, {"sha": "45b660f5c67f6e3efe7260ec09dd8ee0bb5390ae", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -590,7 +590,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     }\n \n     fn walk_stmt(&mut self, stmt: &hir::Stmt) {\n-        match stmt.node {\n+        match stmt.kind {\n             hir::StmtKind::Local(ref local) => {\n                 self.walk_local(&local);\n             }"}, {"sha": "a654a26eb0b768ab89154b0288e334a65010c39b", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -947,7 +947,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n     fn propagate_through_stmt(&mut self, stmt: &hir::Stmt, succ: LiveNode)\n                               -> LiveNode {\n-        match stmt.node {\n+        match stmt.kind {\n             hir::StmtKind::Local(ref local) => {\n                 // Note: we mark the variable as defined regardless of whether\n                 // there is an initializer.  Initially I had thought to only mark"}, {"sha": "28bf88321ae668fd4ff193d9a3fa6e00b5e70d6e", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -796,7 +796,7 @@ fn resolve_block<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, blk: &'tcx h\n         // index information.)\n \n         for (i, statement) in blk.stmts.iter().enumerate() {\n-            match statement.node {\n+            match statement.kind {\n                 hir::StmtKind::Local(..) |\n                 hir::StmtKind::Item(..) => {\n                     // Each declaration introduces a subscope for bindings"}, {"sha": "ec7f40f8c9718f1c2fc09a6e6c6eaf382da169fb", "filename": "src/librustc_ast_borrowck/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_ast_borrowck%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_ast_borrowck%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_borrowck%2Fcfg%2Fconstruct.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     }\n \n     fn stmt(&mut self, stmt: &hir::Stmt, pred: CFGIndex) -> CFGIndex {\n-        let exit = match stmt.node {\n+        let exit = match stmt.kind {\n             hir::StmtKind::Local(ref local) => {\n                 let init_exit = self.opt_expr(&local.init, pred);\n                 self.pat(&local.pat, init_exit)"}, {"sha": "b0f7766472d25724089aa76f478100c33fad553a", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -841,7 +841,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n \n             ast::Stmt {\n                 id: sess.next_node_id(),\n-                node: ast::StmtKind::Expr(expr),\n+                kind: ast::StmtKind::Expr(expr),\n                 span: syntax_pos::DUMMY_SP,\n             }\n         }\n@@ -857,7 +857,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a> {\n         let loop_stmt = ast::Stmt {\n             id: self.sess.next_node_id(),\n             span: syntax_pos::DUMMY_SP,\n-            node: ast::StmtKind::Expr(loop_expr),\n+            kind: ast::StmtKind::Expr(loop_expr),\n         };\n \n         if self.within_static_or_const {"}, {"sha": "1cb909d24efcd91e491da4ccc78f0164e6de497c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -772,7 +772,7 @@ impl EarlyLintPass for UnusedDocComment {\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &ast::Stmt) {\n-        let (kind, is_macro_expansion) = match stmt.node {\n+        let (kind, is_macro_expansion) = match stmt.kind {\n             ast::StmtKind::Local(..) => (\"statements\", false),\n             ast::StmtKind::Item(..) => (\"inner items\", false),\n             ast::StmtKind::Mac(..) => (\"macro expansions\", true),\n@@ -781,7 +781,7 @@ impl EarlyLintPass for UnusedDocComment {\n             ast::StmtKind::Expr(..) => return,\n         };\n \n-        self.warn_if_doc(cx, stmt.span, kind, is_macro_expansion, stmt.node.attrs());\n+        self.warn_if_doc(cx, stmt.span, kind, is_macro_expansion, stmt.kind.attrs());\n     }\n \n     fn check_arm(&mut self, cx: &EarlyContext<'_>, arm: &ast::Arm) {"}, {"sha": "0adf1eeb410b02caa36ef22a71a7192676fd7b6f", "filename": "src/librustc_lint/redundant_semicolon.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_lint%2Fredundant_semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fredundant_semicolon.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -12,7 +12,7 @@ declare_lint_pass!(RedundantSemicolon => [REDUNDANT_SEMICOLON]);\n \n impl EarlyLintPass for RedundantSemicolon {\n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, stmt: &Stmt) {\n-        if let StmtKind::Semi(expr) = &stmt.node {\n+        if let StmtKind::Semi(expr) = &stmt.kind {\n             if let ExprKind::Tup(ref v) = &expr.kind {\n                 if v.is_empty() {\n                     // Strings of excess semicolons are encoded as empty tuple expressions"}, {"sha": "d0149b0e90909ffbbb70f05ed9a62042106cd9b2", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -38,7 +38,7 @@ declare_lint_pass!(UnusedResults => [UNUSED_MUST_USE, UNUSED_RESULTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, s: &hir::Stmt) {\n-        let expr = match s.node {\n+        let expr = match s.kind {\n             hir::StmtKind::Semi(ref expr) => &**expr,\n             _ => return,\n         };\n@@ -269,7 +269,7 @@ declare_lint_pass!(PathStatements => [PATH_STATEMENTS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathStatements {\n     fn check_stmt(&mut self, cx: &LateContext<'_, '_>, s: &hir::Stmt) {\n-        if let hir::StmtKind::Semi(ref expr) = s.node {\n+        if let hir::StmtKind::Semi(ref expr) = s.kind {\n             if let hir::ExprKind::Path(_) = expr.kind {\n                 cx.span_lint(PATH_STATEMENTS, s.span, \"path statement with no effect\");\n             }\n@@ -587,7 +587,7 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext<'_>, s: &ast::Stmt) {\n-        if let ast::StmtKind::Local(ref local) = s.node {\n+        if let ast::StmtKind::Local(ref local) = s.kind {\n             self.check_unused_parens_pat(cx, &local.pat, false, false);\n \n             if let Some(ref value) = local.init {"}, {"sha": "395f5b16fa434b4d8affc9ad2a7bfbdce48a5f32", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -49,7 +49,7 @@ fn mirror_stmts<'a, 'tcx>(\n     for (index, stmt) in stmts.iter().enumerate() {\n         let hir_id = stmt.hir_id;\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n-        match stmt.node {\n+        match stmt.kind {\n             hir::StmtKind::Expr(ref expr) |\n             hir::StmtKind::Semi(ref expr) => {\n                 result.push(StmtRef::Mirror(Box::new(Stmt {"}, {"sha": "a93ca7847d68a9597366d1b657621429f557ce16", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -212,7 +212,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     }\n \n     fn check_stmt(&mut self, stmt: &'tcx hir::Stmt) -> Promotability {\n-        match stmt.node {\n+        match stmt.kind {\n             hir::StmtKind::Local(ref local) => {\n                 if self.remove_mut_rvalue_borrow(&local.pat) {\n                     if let Some(init) = &local.init {"}, {"sha": "bd0606cb67063e3d17d5df06958c4f8aaf71c205", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n     fn block_needs_anonymous_module(&mut self, block: &Block) -> bool {\n         // If any statements are items, we need to create an anonymous module\n-        block.stmts.iter().any(|statement| match statement.node {\n+        block.stmts.iter().any(|statement| match statement.kind {\n             StmtKind::Item(_) | StmtKind::Mac(_) => true,\n             _ => false,\n         })\n@@ -1161,7 +1161,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n     }\n \n     fn visit_stmt(&mut self, stmt: &'b ast::Stmt) {\n-        if let ast::StmtKind::Mac(..) = stmt.node {\n+        if let ast::StmtKind::Mac(..) = stmt.kind {\n             self.parent_scope.legacy = self.visit_invoc(stmt.id);\n         } else {\n             visit::walk_stmt(self, stmt);"}, {"sha": "3f66829e8f8483b2d5d9ff7062cb5182cc2851fc", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -1804,7 +1804,7 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n         // Descend into the block.\n         for stmt in &block.stmts {\n-            if let StmtKind::Item(ref item) = stmt.node {\n+            if let StmtKind::Item(ref item) = stmt.kind {\n                 if let ItemKind::MacroDef(..) = item.node {\n                     num_macro_definition_ribs += 1;\n                     let res = self.r.definitions.local_def_id(item.id);"}, {"sha": "91297d6ecd02ccf2dc7ac1269b5635cbe9a19b8e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -3860,7 +3860,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn check_stmt(&self, stmt: &'tcx hir::Stmt) {\n         // Don't do all the complex logic below for `DeclItem`.\n-        match stmt.node {\n+        match stmt.kind {\n             hir::StmtKind::Item(..) => return,\n             hir::StmtKind::Local(..) | hir::StmtKind::Expr(..) | hir::StmtKind::Semi(..) => {}\n         }\n@@ -3873,7 +3873,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.diverges.set(Diverges::Maybe);\n         self.has_errors.set(false);\n \n-        match stmt.node {\n+        match stmt.kind {\n             hir::StmtKind::Local(ref l) => {\n                 self.check_decl_local(&l);\n             }\n@@ -4560,7 +4560,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Be helpful when the user wrote `{... expr;}` and\n         // taking the `;` off is enough to fix the error.\n         let last_stmt = blk.stmts.last()?;\n-        let last_expr = match last_stmt.node {\n+        let last_expr = match last_stmt.kind {\n             hir::StmtKind::Semi(ref e) => e,\n             _ => return None,\n         };"}, {"sha": "684a2f15c62fe3888da31319738ddf74f754d15a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -835,31 +835,31 @@ impl UnOp {\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Stmt {\n     pub id: NodeId,\n-    pub node: StmtKind,\n+    pub kind: StmtKind,\n     pub span: Span,\n }\n \n impl Stmt {\n     pub fn add_trailing_semicolon(mut self) -> Self {\n-        self.node = match self.node {\n+        self.kind = match self.kind {\n             StmtKind::Expr(expr) => StmtKind::Semi(expr),\n             StmtKind::Mac(mac) => {\n                 StmtKind::Mac(mac.map(|(mac, _style, attrs)| (mac, MacStmtStyle::Semicolon, attrs)))\n             }\n-            node => node,\n+            kind => kind,\n         };\n         self\n     }\n \n     pub fn is_item(&self) -> bool {\n-        match self.node {\n+        match self.kind {\n             StmtKind::Item(_) => true,\n             _ => false,\n         }\n     }\n \n     pub fn is_expr(&self) -> bool {\n-        match self.node {\n+        match self.kind {\n             StmtKind::Expr(_) => true,\n             _ => false,\n         }\n@@ -991,7 +991,7 @@ impl Expr {\n     /// for example, an `if` condition.\n     pub fn returns(&self) -> bool {\n         if let ExprKind::Block(ref block, _) = self.kind {\n-            match block.stmts.last().map(|last_stmt| &last_stmt.node) {\n+            match block.stmts.last().map(|last_stmt| &last_stmt.kind) {\n                 // Implicit return\n                 Some(&StmtKind::Expr(_)) => true,\n                 Some(&StmtKind::Semi(ref expr)) => {"}, {"sha": "91bd0f297625778a950bb76225639976bb802145", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -702,11 +702,11 @@ impl HasAttrs for StmtKind {\n \n impl HasAttrs for Stmt {\n     fn attrs(&self) -> &[ast::Attribute] {\n-        self.node.attrs()\n+        self.kind.attrs()\n     }\n \n     fn visit_attrs<F: FnOnce(&mut Vec<ast::Attribute>)>(&mut self, f: F) {\n-        self.node.visit_attrs(f);\n+        self.kind.visit_attrs(f);\n     }\n }\n "}, {"sha": "692849eb8cf80ee0c70acb61fa4f2260d3445ac4", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -363,7 +363,7 @@ macro_rules! make_stmts_default {\n         $me.make_expr().map(|e| smallvec![ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             span: e.span,\n-            node: ast::StmtKind::Expr(e),\n+            kind: ast::StmtKind::Expr(e),\n         }])\n     }\n }\n@@ -602,7 +602,7 @@ impl MacResult for DummyResult {\n     fn make_stmts(self: Box<DummyResult>) -> Option<SmallVec<[ast::Stmt; 1]>> {\n         Some(smallvec![ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::StmtKind::Expr(DummyResult::raw_expr(self.span, self.is_error)),\n+            kind: ast::StmtKind::Expr(DummyResult::raw_expr(self.span, self.is_error)),\n             span: self.span,\n         }])\n     }"}, {"sha": "a2a7571c4407471b1386e8da42cb3341b13787d8", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -171,7 +171,7 @@ impl<'a> ExtCtxt<'a> {\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             span: expr.span,\n-            node: ast::StmtKind::Expr(expr),\n+            kind: ast::StmtKind::Expr(expr),\n         }\n     }\n \n@@ -193,7 +193,7 @@ impl<'a> ExtCtxt<'a> {\n         });\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::StmtKind::Local(local),\n+            kind: ast::StmtKind::Local(local),\n             span: sp,\n         }\n     }\n@@ -210,15 +210,15 @@ impl<'a> ExtCtxt<'a> {\n         });\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::StmtKind::Local(local),\n+            kind: ast::StmtKind::Local(local),\n             span,\n         }\n     }\n \n     pub fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> ast::Stmt {\n         ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::StmtKind::Item(item),\n+            kind: ast::StmtKind::Item(item),\n             span: sp,\n         }\n     }\n@@ -227,7 +227,7 @@ impl<'a> ExtCtxt<'a> {\n         self.block(expr.span, vec![ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             span: expr.span,\n-            node: ast::StmtKind::Expr(expr),\n+            kind: ast::StmtKind::Expr(expr),\n         }])\n     }\n     pub fn block(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block> {"}, {"sha": "d90839ac7fdcf92d02dcb094cc856dbda6b3f567", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -1206,7 +1206,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n         }\n \n-        if let StmtKind::Mac(mac) = stmt.node {\n+        if let StmtKind::Mac(mac) = stmt.kind {\n             let (mac, style, attrs) = mac.into_inner();\n             self.check_attributes(&attrs);\n             let mut placeholder = self.collect_bang(mac, stmt.span, AstFragmentKind::Stmts)\n@@ -1224,9 +1224,9 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         // The placeholder expander gives ids to statements, so we avoid folding the id here.\n-        let ast::Stmt { id, node, span } = stmt;\n-        noop_flat_map_stmt_kind(node, self).into_iter().map(|node| {\n-            ast::Stmt { id, node, span }\n+        let ast::Stmt { id, kind, span } = stmt;\n+        noop_flat_map_stmt_kind(kind, self).into_iter().map(|kind| {\n+            ast::Stmt { id, kind, span }\n         }).collect()\n \n     }"}, {"sha": "cb4c685dabe0daa02d238273fc8b08055bcc7134", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -75,7 +75,7 @@ pub fn placeholder(kind: AstFragmentKind, id: ast::NodeId) -> AstFragment {\n         })),\n         AstFragmentKind::Stmts => AstFragment::Stmts(smallvec![{\n             let mac = P((mac_placeholder(), ast::MacStmtStyle::Braces, ThinVec::new()));\n-            ast::Stmt { id, span, node: ast::StmtKind::Mac(mac) }\n+            ast::Stmt { id, span, kind: ast::StmtKind::Mac(mac) }\n         }]),\n         AstFragmentKind::Arms => AstFragment::Arms(smallvec![\n             ast::Arm {\n@@ -296,7 +296,7 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n     }\n \n     fn flat_map_stmt(&mut self, stmt: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {\n-        let (style, mut stmts) = match stmt.node {\n+        let (style, mut stmts) = match stmt.kind {\n             ast::StmtKind::Mac(mac) => (mac.1, self.remove(stmt.id).make_stmts()),\n             _ => return noop_flat_map_stmt(stmt, self),\n         };"}, {"sha": "0a42fc0cdfd7c65b75e68afb0b0870b5e6c4a612", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -1247,19 +1247,19 @@ pub fn noop_filter_map_expr<T: MutVisitor>(mut e: P<Expr>, vis: &mut T) -> Optio\n     Some({ vis.visit_expr(&mut e); e })\n }\n \n-pub fn noop_flat_map_stmt<T: MutVisitor>(Stmt { node, mut span, mut id }: Stmt, vis: &mut T)\n+pub fn noop_flat_map_stmt<T: MutVisitor>(Stmt { kind, mut span, mut id }: Stmt, vis: &mut T)\n     -> SmallVec<[Stmt; 1]>\n {\n     vis.visit_id(&mut id);\n     vis.visit_span(&mut span);\n-    noop_flat_map_stmt_kind(node, vis).into_iter().map(|node| {\n-        Stmt { id, node, span }\n+    noop_flat_map_stmt_kind(kind, vis).into_iter().map(|kind| {\n+        Stmt { id, kind, span }\n     }).collect()\n }\n \n-pub fn noop_flat_map_stmt_kind<T: MutVisitor>(node: StmtKind, vis: &mut T)\n+pub fn noop_flat_map_stmt_kind<T: MutVisitor>(kind: StmtKind, vis: &mut T)\n                                               -> SmallVec<[StmtKind; 1]> {\n-    match node {\n+    match kind {\n         StmtKind::Local(mut local) =>\n             smallvec![StmtKind::Local({ vis.visit_local(&mut local); local })],\n         StmtKind::Item(item) => vis.flat_map_item(item).into_iter().map(StmtKind::Item).collect(),"}, {"sha": "855b03ddd6f6b999580de98ce561dd6b8178c770", "filename": "src/libsyntax/parse/parser/stmt.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fstmt.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -44,7 +44,7 @@ impl<'a> Parser<'a> {\n         Ok(Some(if self.eat_keyword(kw::Let) {\n             Stmt {\n                 id: DUMMY_NODE_ID,\n-                node: StmtKind::Local(self.parse_local(attrs.into())?),\n+                kind: StmtKind::Local(self.parse_local(attrs.into())?),\n                 span: lo.to(self.prev_span),\n             }\n         } else if let Some(macro_def) = self.eat_macro_def(\n@@ -54,7 +54,7 @@ impl<'a> Parser<'a> {\n         )? {\n             Stmt {\n                 id: DUMMY_NODE_ID,\n-                node: StmtKind::Item(macro_def),\n+                kind: StmtKind::Item(macro_def),\n                 span: lo.to(self.prev_span),\n             }\n         // Starts like a simple path, being careful to avoid contextual keywords\n@@ -86,7 +86,7 @@ impl<'a> Parser<'a> {\n \n                 return Ok(Some(Stmt {\n                     id: DUMMY_NODE_ID,\n-                    node: StmtKind::Expr(expr),\n+                    kind: StmtKind::Expr(expr),\n                     span: lo.to(self.prev_span),\n                 }));\n             }\n@@ -107,7 +107,7 @@ impl<'a> Parser<'a> {\n                 span: lo.to(hi),\n                 prior_type_ascription: self.last_type_ascription,\n             };\n-            let node = if delim == MacDelimiter::Brace ||\n+            let kind = if delim == MacDelimiter::Brace ||\n                           self.token == token::Semi || self.token == token::Eof {\n                 StmtKind::Mac(P((mac, style, attrs.into())))\n             }\n@@ -137,7 +137,7 @@ impl<'a> Parser<'a> {\n             Stmt {\n                 id: DUMMY_NODE_ID,\n                 span: lo.to(hi),\n-                node,\n+                kind,\n             }\n         } else {\n             // FIXME: Bad copy of attrs\n@@ -150,7 +150,7 @@ impl<'a> Parser<'a> {\n                 Some(i) => Stmt {\n                     id: DUMMY_NODE_ID,\n                     span: lo.to(i.span),\n-                    node: StmtKind::Item(i),\n+                    kind: StmtKind::Item(i),\n                 },\n                 None => {\n                     let unused_attrs = |attrs: &[Attribute], s: &mut Self| {\n@@ -180,7 +180,7 @@ impl<'a> Parser<'a> {\n                         return Ok(Some(Stmt {\n                             id: DUMMY_NODE_ID,\n                             span: lo.to(last_semi),\n-                            node: StmtKind::Semi(self.mk_expr(lo.to(last_semi),\n+                            kind: StmtKind::Semi(self.mk_expr(lo.to(last_semi),\n                                 ExprKind::Tup(Vec::new()),\n                                 ThinVec::new()\n                             )),\n@@ -198,7 +198,7 @@ impl<'a> Parser<'a> {\n                     Stmt {\n                         id: DUMMY_NODE_ID,\n                         span: lo.to(e.span),\n-                        node: StmtKind::Expr(e),\n+                        kind: StmtKind::Expr(e),\n                     }\n                 }\n             }\n@@ -400,7 +400,7 @@ impl<'a> Parser<'a> {\n                     self.recover_stmt_(SemiColonMode::Ignore, BlockMode::Ignore);\n                     Some(Stmt {\n                         id: DUMMY_NODE_ID,\n-                        node: StmtKind::Expr(DummyResult::raw_expr(self.token.span, true)),\n+                        kind: StmtKind::Expr(DummyResult::raw_expr(self.token.span, true)),\n                         span: self.token.span,\n                     })\n                 }\n@@ -431,7 +431,7 @@ impl<'a> Parser<'a> {\n             None => return Ok(None),\n         };\n \n-        match stmt.node {\n+        match stmt.kind {\n             StmtKind::Expr(ref expr) if self.token != token::Eof => {\n                 // expression without semicolon\n                 if classify::expr_requires_semi_to_be_stmt(expr) {\n@@ -443,7 +443,7 @@ impl<'a> Parser<'a> {\n                         self.recover_stmt();\n                         // Don't complain about type errors in body tail after parse error (#57383).\n                         let sp = expr.span.to(self.prev_span);\n-                        stmt.node = StmtKind::Expr(DummyResult::raw_expr(sp, true));\n+                        stmt.kind = StmtKind::Expr(DummyResult::raw_expr(sp, true));\n                     }\n                 }\n             }"}, {"sha": "5bf5842e3f7dbae1406ff5a1373db2ed629d891d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -1630,7 +1630,7 @@ impl<'a> State<'a> {\n \n     crate fn print_stmt(&mut self, st: &ast::Stmt) {\n         self.maybe_print_comment(st.span.lo());\n-        match st.node {\n+        match st.kind {\n             ast::StmtKind::Local(ref loc) => {\n                 self.print_outer_attributes(&loc.attrs);\n                 self.space_if_not_bol();\n@@ -1703,7 +1703,7 @@ impl<'a> State<'a> {\n         self.print_inner_attributes(attrs);\n \n         for (i, st) in blk.stmts.iter().enumerate() {\n-            match st.node {\n+            match st.kind {\n                 ast::StmtKind::Expr(ref expr) if i == blk.stmts.len() - 1 => {\n                     self.maybe_print_comment(st.span.lo());\n                     self.space_if_not_bol();"}, {"sha": "477852e5df1552129a16202f86af886ffa17abc6", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -656,7 +656,7 @@ pub fn walk_block<'a, V: Visitor<'a>>(visitor: &mut V, block: &'a Block) {\n }\n \n pub fn walk_stmt<'a, V: Visitor<'a>>(visitor: &mut V, statement: &'a Stmt) {\n-    match statement.node {\n+    match statement.kind {\n         StmtKind::Local(ref local) => visitor.visit_local(local),\n         StmtKind::Item(ref item) => visitor.visit_item(item),\n         StmtKind::Expr(ref expression) | StmtKind::Semi(ref expression) => {"}, {"sha": "003c2423576eb5f092dc50a07847c2a37b2f5487", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21bf983acbb5d7ac8fb9462cbf2cc4c280abd857/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=21bf983acbb5d7ac8fb9462cbf2cc4c280abd857", "patch": "@@ -131,7 +131,7 @@ fn stmt_let_undescore(cx: &mut ExtCtxt<'_>, sp: Span, expr: P<ast::Expr>) -> ast\n     });\n     ast::Stmt {\n         id: ast::DUMMY_NODE_ID,\n-        node: ast::StmtKind::Local(local),\n+        kind: ast::StmtKind::Local(local),\n         span: sp,\n     }\n }"}]}