{"sha": "a0d664bae6ca79c54cc054aa2403198e105190a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwZDY2NGJhZTZjYTc5YzU0Y2MwNTRhYTI0MDMxOThlMTA1MTkwYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-22T21:38:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-22T21:38:03Z"}, "message": "Auto merge of #79219 - shepmaster:beta-bump, r=Mark-Simulacrum\n\nBump bootstrap compiler version\n\nr? `@Mark-Simulacrum`\n\n/cc `@pietroalbini`", "tree": {"sha": "379e136a2c4022d1f794cb7008f0dba817b7d683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379e136a2c4022d1f794cb7008f0dba817b7d683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0d664bae6ca79c54cc054aa2403198e105190a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0d664bae6ca79c54cc054aa2403198e105190a2", "html_url": "https://github.com/rust-lang/rust/commit/a0d664bae6ca79c54cc054aa2403198e105190a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0d664bae6ca79c54cc054aa2403198e105190a2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c643dd2ec8fed2852f5eee8f776d657293a6a8f2", "html_url": "https://github.com/rust-lang/rust/commit/c643dd2ec8fed2852f5eee8f776d657293a6a8f2"}, {"sha": "dcef5ff372742eb3d8a1b5cbbc2141e757bc33d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcef5ff372742eb3d8a1b5cbbc2141e757bc33d1", "html_url": "https://github.com/rust-lang/rust/commit/dcef5ff372742eb3d8a1b5cbbc2141e757bc33d1"}], "stats": {"total": 93, "additions": 29, "deletions": 64}, "files": [{"sha": "edbbe3603a713240dcf415e00a6738d06d1193dd", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -358,7 +358,7 @@ extern \"Rust\" {\n /// [`set_alloc_error_hook`]: ../../std/alloc/fn.set_alloc_error_hook.html\n /// [`take_alloc_error_hook`]: ../../std/alloc/fn.take_alloc_error_hook.html\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n-#[cfg(not(any(test, bootstrap)))]\n+#[cfg(not(test))]\n #[rustc_allocator_nounwind]\n pub fn handle_alloc_error(layout: Layout) -> ! {\n     unsafe {\n@@ -370,22 +370,7 @@ pub fn handle_alloc_error(layout: Layout) -> ! {\n #[cfg(test)]\n pub use std::alloc::handle_alloc_error;\n \n-// In stage0 (bootstrap) `__rust_alloc_error_handler`,\n-// might not be generated yet, because an old compiler is used,\n-// so use the old direct call.\n-#[cfg(all(bootstrap, not(test)))]\n-#[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n-#[doc(hidden)]\n-#[rustc_allocator_nounwind]\n-pub fn handle_alloc_error(layout: Layout) -> ! {\n-    extern \"Rust\" {\n-        #[lang = \"oom\"]\n-        fn oom_impl(layout: Layout) -> !;\n-    }\n-    unsafe { oom_impl(layout) }\n-}\n-\n-#[cfg(not(any(target_os = \"hermit\", test, bootstrap)))]\n+#[cfg(not(any(target_os = \"hermit\", test)))]\n #[doc(hidden)]\n #[allow(unused_attributes)]\n #[unstable(feature = \"alloc_internals\", issue = \"none\")]"}, {"sha": "dc5db49ee9891be8fca6b7ca56fee9dda9ce4d67", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -72,7 +72,7 @@\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n #![deny(unsafe_op_in_unsafe_fn)]\n-#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n+#![feature(rustc_allow_const_fn_unstable)]\n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(test))]\n #![cfg_attr(test, feature(new_uninit))]\n@@ -130,8 +130,7 @@\n #![feature(unicode_internals)]\n #![feature(unsafe_block_in_unsafe_fn)]\n #![feature(unsize)]\n-#![cfg_attr(not(bootstrap), feature(unsized_fn_params))]\n-#![cfg_attr(bootstrap, feature(unsized_locals))]\n+#![feature(unsized_fn_params)]\n #![feature(allocator_internals)]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit_extra, maybe_uninit_slice, maybe_uninit_uninit_array)]"}, {"sha": "edab576bea8dda26299566ecc077e61500a59bbb", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -116,8 +116,7 @@ impl<T> RawVec<T, Global> {\n impl<T, A: AllocRef> RawVec<T, A> {\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n+    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn new_in(alloc: A) -> Self {\n         // `cap: 0` means \"unallocated\". zero-sized types are ignored.\n         Self { ptr: Unique::dangling(), cap: 0, alloc }"}, {"sha": "0f91ff418e3ac9e17197d47114f3089adf31f133", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -63,7 +63,7 @@\n #![warn(missing_debug_implementations)]\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n-#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n+#![feature(rustc_allow_const_fn_unstable)]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(asm)]\n@@ -85,7 +85,7 @@\n #![feature(const_pin)]\n #![feature(const_fn)]\n #![feature(const_fn_union)]\n-#![cfg_attr(not(bootstrap), feature(const_impl_trait))]\n+#![feature(const_impl_trait)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_fn_ptr_basics)]\n #![feature(const_generics)]\n@@ -134,9 +134,7 @@\n #![feature(transparent_unions)]\n #![feature(try_blocks)]\n #![feature(unboxed_closures)]\n-#![cfg_attr(not(bootstrap), feature(unsized_fn_params))]\n-#![cfg_attr(bootstrap, feature(unsized_locals))]\n-#![cfg_attr(bootstrap, feature(untagged_unions))]\n+#![feature(unsized_fn_params)]\n #![feature(unwind_attributes)]\n #![feature(variant_count)]\n #![feature(tbm_target_feature)]\n@@ -290,7 +288,7 @@ pub mod primitive;\n     unused_imports,\n     unsafe_op_in_unsafe_fn\n )]\n-#[cfg_attr(not(bootstrap), allow(non_autolinks))]\n+#[allow(non_autolinks)]\n // FIXME: This annotation should be moved into rust-lang/stdarch after clashing_extern_declarations is\n // merged. It currently cannot because bootstrap fails as the lint hasn't been defined yet.\n #[allow(clashing_extern_declarations)]"}, {"sha": "289f14a360a348f01fd9276cc560f7d0477b5a6c", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -2047,8 +2047,7 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n+            #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2196,8 +2195,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n+            #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "dbdc9c0fb5fccf4df74f229e9ca3f3f2a3ac6414", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -1805,8 +1805,7 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n+            #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -1954,8 +1953,7 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n-            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n+            #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "25651502510e2c12dde7b4749b6752b37b2f47de", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -52,7 +52,7 @@ pub fn panic(expr: &'static str) -> ! {\n \n #[inline]\n #[track_caller]\n-#[cfg_attr(not(bootstrap), lang = \"panic_str\")] // needed for const-evaluated panics\n+#[lang = \"panic_str\"] // needed for const-evaluated panics\n pub fn panic_str(expr: &str) -> ! {\n     panic_fmt(format_args!(\"{}\", expr));\n }"}, {"sha": "44fe2ca88596f8dc63654f09eab4a7ac2cd6aa98", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -88,8 +88,7 @@ impl<T> [T] {\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.32.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_union))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_union))]\n+    #[rustc_allow_const_fn_unstable(const_fn_union)]\n     pub const fn len(&self) -> usize {\n         // SAFETY: this is safe because `&[T]` and `FatPtr<T>` have the same layout.\n         // Only `std` can make this guarantee."}, {"sha": "73316433e090fb10f377300a1d3a0d5017b57cfc", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -157,8 +157,7 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8_unchecked\", issue = \"75196\")]\n-#[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n-#[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n+#[rustc_allow_const_fn_unstable(const_fn_transmute)]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n     // Also relies on `&str` and `&[u8]` having the same layout."}, {"sha": "604e317110c3e92ca060881267a998b8e2c54443", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -219,8 +219,7 @@ impl str {\n     #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.32.0\")]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n+    #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n     pub const fn as_bytes(&self) -> &[u8] {\n         // SAFETY: const sound because we transmute two types with the same layout\n         unsafe { mem::transmute(self) }"}, {"sha": "b775e022a54b428290165f5ad292f1eb8e76abca", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -130,8 +130,7 @@ impl RawWakerVTable {\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_fn_ptr_basics))]\n+    #[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "c6bec5a6fbdc287df1ddbc489201a7928d0f49f4", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -401,8 +401,7 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n }\n \n impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n+    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n         extern \"C\" fn run(\n             bridge: Bridge<'_>,\n@@ -415,8 +414,7 @@ impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n }\n \n impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n+    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn expand2(\n         f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n@@ -461,8 +459,7 @@ impl ProcMacro {\n         }\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n+    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn custom_derive(\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n@@ -471,17 +468,15 @@ impl ProcMacro {\n         ProcMacro::CustomDerive { trait_name, attributes, client: Client::expand1(expand) }\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n+    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn attr(\n         name: &'static str,\n         expand: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::Attr { name, client: Client::expand2(expand) }\n     }\n \n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n+    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn bang(\n         name: &'static str,\n         expand: fn(crate::TokenStream) -> crate::TokenStream,"}, {"sha": "e1307856175b1406c06e11f91b7cac39b4ea8711", "filename": "library/proc_macro/src/bridge/scoped_cell.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -35,8 +35,7 @@ impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {\n pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);\n \n impl<T: LambdaL> ScopedCell<T> {\n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n+    #[rustc_allow_const_fn_unstable(const_fn)]\n     pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {\n         ScopedCell(Cell::new(value))\n     }"}, {"sha": "3ba706b09e8590236745222d6aa30519576738d3", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -18,7 +18,7 @@\n     test(no_crate_inject, attr(deny(warnings))),\n     test(attr(allow(dead_code, deprecated, unused_variables, unused_mut)))\n )]\n-#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n+#![feature(rustc_allow_const_fn_unstable)]\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(const_fn)]"}, {"sha": "60b642a6dba446575cdca5ce4552ba5453499aee", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -1266,7 +1266,7 @@ impl CStr {\n     /// behavior when `ptr` is used inside the `unsafe` block:\n     ///\n     /// ```no_run\n-    /// # #![allow(unused_must_use)] #![cfg_attr(not(bootstrap), allow(temporary_cstring_as_ptr))]\n+    /// # #![allow(unused_must_use)] #![allow(temporary_cstring_as_ptr)]\n     /// use std::ffi::CString;\n     ///\n     /// let ptr = CString::new(\"Hello\").expect(\"CString::new failed\").as_ptr();"}, {"sha": "6f534ca2a2e0fd725415077e2c8a137132bdb21c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -206,7 +206,7 @@\n #![needs_panic_runtime]\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n-#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n+#![feature(rustc_allow_const_fn_unstable)]\n #![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count))]\n #![cfg_attr(\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),\n@@ -323,7 +323,6 @@\n #![feature(unsafe_block_in_unsafe_fn)]\n #![feature(unsafe_cell_get_mut)]\n #![feature(unsafe_cell_raw_get)]\n-#![cfg_attr(bootstrap, feature(untagged_unions))]\n #![feature(unwind_attributes)]\n #![feature(vec_into_raw_parts)]\n #![feature(wake_trait)]"}, {"sha": "04b6f0a5b91b8f728d25dfec5db9334e3a51f17b", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -1043,8 +1043,7 @@ impl Ipv6Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n-    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n+    #[rustc_allow_const_fn_unstable(const_fn_transmute)]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {\n         let addr16 = [\n             a.to_be(),"}, {"sha": "6e05b66c3fe4acdc1babb334a2e1bb350e11038b", "filename": "src/stage0.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0d664bae6ca79c54cc054aa2403198e105190a2/src%2Fstage0.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a0d664bae6ca79c54cc054aa2403198e105190a2/src%2Fstage0.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstage0.txt?ref=a0d664bae6ca79c54cc054aa2403198e105190a2", "patch": "@@ -12,7 +12,7 @@\n # stable release's version number. `date` is the date where the release we're\n # bootstrapping off was released.\n \n-date: 2020-10-16\n+date: 2020-11-18\n rustc: beta\n \n # We use a nightly rustfmt to format the source because it solves some"}]}