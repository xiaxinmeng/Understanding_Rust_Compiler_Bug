{"sha": "032ae968560e78708f40f2fdd5ce95775daec836", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzMmFlOTY4NTYwZTc4NzA4ZjQwZjJmZGQ1Y2U5NTc3NWRhZWM4MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-09T15:28:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-09T15:28:26Z"}, "message": "Auto merge of #4257 - skade:improve-cast-alignment, r=flip1995\n\nImprove cast_ptr_alignment lint\n\n<!--\nThank you for making Clippy better!\n\nWe're collecting our changelog from pull request descriptions.\nIf your PR only updates to the latest nightly, you can leave the\n`changelog` entry as `none`. Otherwise, please write a short comment\nexplaining your change.\n\nIf your PR fixes an issue, you can add \"fixes #issue_number\" into this\nPR description. This way the issue will be automatically closed when\nyour PR is merged.\n\nIf you added a new lint, here's a checklist for things that will be\nchecked during review or continuous integration.\n\n- [x] Followed [lint naming conventions][lint_naming]\n- [x] Added passing UI tests (including committed `.stderr` file)\n- [x] `cargo test` passes locally\n- [x] Executed `util/dev update_lints`\n- [x] Added lint documentation\n- [x] Run `cargo fmt`\n\nNote that you can skip the above if you are just opening a WIP PR in\norder to get feedback.\n\nDelete this line and everything above before opening your PR -->\n\n* print alignment in bytes in the lint message\n* ignore ZST left-hand types\n\nFixes #3797 and #4256\nchangelog:\n* `cast_ptr_alignment`: Print alignment in bytes in the lint message\n* `cast_ptr_alignment`: Ignore casting from ZST left-hand types", "tree": {"sha": "e38e5cd6aada142b597e821363c708a6b10a7253", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e38e5cd6aada142b597e821363c708a6b10a7253"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/032ae968560e78708f40f2fdd5ce95775daec836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/032ae968560e78708f40f2fdd5ce95775daec836", "html_url": "https://github.com/rust-lang/rust/commit/032ae968560e78708f40f2fdd5ce95775daec836", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/032ae968560e78708f40f2fdd5ce95775daec836/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0d217026ab511c88c4d8fb97d2a5dae50da8800", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0d217026ab511c88c4d8fb97d2a5dae50da8800", "html_url": "https://github.com/rust-lang/rust/commit/f0d217026ab511c88c4d8fb97d2a5dae50da8800"}, {"sha": "aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6", "html_url": "https://github.com/rust-lang/rust/commit/aa72cac87a81d4a0a87d90c0e0c9f5b94d1a93f6"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "dd578176f23762a8b9a9ec703255d32bafe88848", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/032ae968560e78708f40f2fdd5ce95775daec836/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032ae968560e78708f40f2fdd5ce95775daec836/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=032ae968560e78708f40f2fdd5ce95775daec836", "patch": "@@ -1211,17 +1211,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n             if_chain! {\n                 if let ty::RawPtr(from_ptr_ty) = &cast_from.sty;\n                 if let ty::RawPtr(to_ptr_ty) = &cast_to.sty;\n-                if let Some(from_align) = cx.layout_of(from_ptr_ty.ty).ok().map(|a| a.align.abi);\n-                if let Some(to_align) = cx.layout_of(to_ptr_ty.ty).ok().map(|a| a.align.abi);\n-                if from_align < to_align;\n+                if let Ok(from_layout) = cx.layout_of(from_ptr_ty.ty);\n+                if let Ok(to_layout) = cx.layout_of(to_ptr_ty.ty);\n+                if from_layout.align.abi < to_layout.align.abi;\n                 // with c_void, we inherently need to trust the user\n                 if !is_c_void(cx, from_ptr_ty.ty);\n+                // when casting from a ZST, we don't know enough to properly lint\n+                if !from_layout.is_zst();\n                 then {\n                     span_lint(\n                         cx,\n                         CAST_PTR_ALIGNMENT,\n                         expr.span,\n-                        &format!(\"casting from `{}` to a more-strictly-aligned pointer (`{}`)\", cast_from, cast_to)\n+                        &format!(\n+                            \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n+                            cast_from,\n+                            cast_to,\n+                            from_layout.align.abi.bytes(),\n+                            to_layout.align.abi.bytes(),\n+                        ),\n                     );\n                 }\n             }"}, {"sha": "4c08935639f1f3a5ae5fd847de7c3398ae71b31e", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/032ae968560e78708f40f2fdd5ce95775daec836/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/032ae968560e78708f40f2fdd5ce95775daec836/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=032ae968560e78708f40f2fdd5ce95775daec836", "patch": "@@ -22,4 +22,6 @@ fn main() {\n     // For c_void, we should trust the user. See #2677\n     (&1u32 as *const u32 as *const std::os::raw::c_void) as *const u32;\n     (&1u32 as *const u32 as *const libc::c_void) as *const u32;\n+    // For ZST, we should trust the user. See #4256\n+    (&1u32 as *const u32 as *const ()) as *const u32;\n }"}, {"sha": "79219f86155a4458fe95c46dbc9b699b0738bca1", "filename": "tests/ui/cast_alignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/032ae968560e78708f40f2fdd5ce95775daec836/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/032ae968560e78708f40f2fdd5ce95775daec836/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=032ae968560e78708f40f2fdd5ce95775daec836", "patch": "@@ -1,12 +1,12 @@\n-error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`)\n+error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n   --> $DIR/cast_alignment.rs:12:5\n    |\n LL |     (&1u8 as *const u8) as *const u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-ptr-alignment` implied by `-D warnings`\n \n-error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`)\n+error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n   --> $DIR/cast_alignment.rs:13:5\n    |\n LL |     (&mut 1u8 as *mut u8) as *mut u16;"}]}