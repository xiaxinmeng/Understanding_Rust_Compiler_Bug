{"sha": "827a141466e7bb85eb3c030600878a2c606019e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyN2ExNDE0NjZlN2JiODVlYjNjMDMwNjAwODc4YTJjNjA2MDE5ZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-13T05:14:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-02-13T05:14:12Z"}, "message": "Auto merge of #58415 - Centril:rollup, r=Centril\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #57693 (Doc rewording)\n - #57815 (Speed up the fast path for assert_eq! and assert_ne!)\n - #58034 (Stabilize the time_checked_add feature)\n - #58057 (Stabilize linker-plugin based LTO (aka cross-language LTO))\n - #58137 (Cleanup: rename node_id_to_type(_opt))\n - #58166 (allow shorthand syntax for deprecation reason)\n - #58200 (fix str mutating through a ptr derived from &self)\n - #58273 (Rename rustc_errors dependency in rust 2018 crates)\n - #58289 (impl iter() for dyn Error)\n - #58387 (Disallow `auto` trait alias syntax)\n - #58404 (use Ubuntu keyserver for CloudABI ports)\n - #58405 (Remove some dead code from libcore)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "cbbbb0b46cf4a3694316b2462ae2dcf7321468e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbbbb0b46cf4a3694316b2462ae2dcf7321468e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/827a141466e7bb85eb3c030600878a2c606019e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/827a141466e7bb85eb3c030600878a2c606019e9", "html_url": "https://github.com/rust-lang/rust/commit/827a141466e7bb85eb3c030600878a2c606019e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/827a141466e7bb85eb3c030600878a2c606019e9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f949c2fcc696d0260a99196d5e5400c59a26a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f949c2fcc696d0260a99196d5e5400c59a26a54", "html_url": "https://github.com/rust-lang/rust/commit/0f949c2fcc696d0260a99196d5e5400c59a26a54"}, {"sha": "6562c2860730aee4497f58b00c298d054ff2e0b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6562c2860730aee4497f58b00c298d054ff2e0b7", "html_url": "https://github.com/rust-lang/rust/commit/6562c2860730aee4497f58b00c298d054ff2e0b7"}], "stats": {"total": 1037, "additions": 687, "deletions": 350}, "files": [{"sha": "3354a796c357e51672845828d83e4a0e94160722", "filename": "src/ci/docker/dist-various-2/build-cloudabi-toolchain.sh", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-cloudabi-toolchain.sh?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -32,9 +32,8 @@ ln -s ../lib/llvm-5.0/bin/lld /usr/bin/${target}-ld\n ln -s ../../${target} /usr/lib/llvm-5.0/${target}\n \n # Install the C++ runtime libraries from CloudABI Ports.\n-echo deb https://nuxi.nl/distfiles/cloudabi-ports/debian/ cloudabi cloudabi > \\\n-    /etc/apt/sources.list.d/cloudabi.list\n-curl 'https://pgp.mit.edu/pks/lookup?op=get&search=0x0DA51B8531344B15' | \\\n-    apt-key add -\n+apt-key adv --batch --yes --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0DA51B8531344B15\n+add-apt-repository -y 'deb https://nuxi.nl/distfiles/cloudabi-ports/debian/ cloudabi cloudabi'\n+\n apt-get update\n-apt-get install -y $(echo ${target} | sed -e s/_/-/g)-cxx-runtime\n+apt-get install -y \"${target//_/-}-cxx-runtime\""}, {"sha": "34708d1847f6b802e908cc147133a1b0b475642f", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -13,4 +13,5 @@\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)\n-- [Contributing to `rustc`](contributing.md)\n\\ No newline at end of file\n+- [Linker-plugin based LTO](linker-plugin-lto.md)\n+- [Contributing to `rustc`](contributing.md)"}, {"sha": "73a2efcb33a75a1b2ac2473f5e15c59de932e3b5", "filename": "src/doc/rustc/src/linker-plugin-lto.md", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flinker-plugin-lto.md?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -0,0 +1,108 @@\n+# Linker-plugin-LTO\n+\n+The `-C linker-plugin-lto` flag allows for deferring the LTO optimization\n+to the actual linking step, which in turn allows for performing\n+interprocedural optimizations across programming language boundaries if\n+all the object files being linked were created by LLVM based toolchains.\n+The prime example here would be linking Rust code together with\n+Clang-compiled C/C++ code.\n+\n+## Usage\n+\n+There are two main cases how linker plugin based LTO can be used:\n+\n+ - compiling a Rust `staticlib` that is used as a C ABI dependency\n+ - compiling a Rust binary where `rustc` invokes the linker\n+\n+In both cases the Rust code has to be compiled with `-C linker-plugin-lto` and\n+the C/C++ code with `-flto` or `-flto=thin` so that object files are emitted\n+as LLVM bitcode.\n+\n+### Rust `staticlib` as dependency in C/C++ program\n+\n+In this case the Rust compiler just has to make sure that the object files in\n+the `staticlib` are in the right format. For linking, a linker with the\n+LLVM plugin must be used (e.g. LLD).\n+\n+Using `rustc` directly:\n+\n+```bash\n+# Compile the Rust staticlib\n+rustc --crate-type=staticlib -Clinker-plugin-lto -Copt-level=2 ./lib.rs\n+# Compile the C code with `-flto=thin`\n+clang -c -O2 -flto=thin -o main.o ./main.c\n+# Link everything, making sure that we use an appropriate linker\n+clang -flto=thin -fuse-ld=lld -L . -l\"name-of-your-rust-lib\" -o main -O2 ./cmain.o\n+```\n+\n+Using `cargo`:\n+\n+```bash\n+# Compile the Rust staticlib\n+RUSTFLAGS=\"-Clinker-plugin-lto\" cargo build --release\n+# Compile the C code with `-flto=thin`\n+clang -c -O2 -flto=thin -o main.o ./main.c\n+# Link everything, making sure that we use an appropriate linker\n+clang -flto=thin -fuse-ld=lld -L . -l\"name-of-your-rust-lib\" -o main -O2 ./cmain.o\n+```\n+\n+### C/C++ code as a dependency in Rust\n+\n+In this case the linker will be invoked by `rustc`. We again have to make sure\n+that an appropriate linker is used.\n+\n+Using `rustc` directly:\n+\n+```bash\n+# Compile C code with `-flto`\n+clang ./clib.c -flto=thin -c -o ./clib.o -O2\n+# Create a static library from the C code\n+ar crus ./libxyz.a ./clib.o\n+\n+# Invoke `rustc` with the additional arguments\n+rustc -Clinker-plugin-lto -L. -Copt-level=2 -Clinker=clang -Clink-arg=-fuse-ld=lld ./main.rs\n+```\n+\n+Using `cargo` directly:\n+\n+```bash\n+# Compile C code with `-flto`\n+clang ./clib.c -flto=thin -c -o ./clib.o -O2\n+# Create a static library from the C code\n+ar crus ./libxyz.a ./clib.o\n+\n+# Set the linking arguments via RUSTFLAGS\n+RUSTFLAGS=\"-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=lld\" cargo build --release\n+```\n+\n+### Explicitly specifying the linker plugin to be used by `rustc`\n+\n+If one wants to use a linker other than LLD, the LLVM linker plugin has to be\n+specified explicitly. Otherwise the linker cannot read the object files. The\n+path to the plugin is passed as an argument to the `-Clinker-plugin-lto`\n+option:\n+\n+```bash\n+rustc -Clinker-plugin-lto=\"/path/to/LLVMgold.so\" -L. -Copt-level=2 ./main.rs\n+```\n+\n+\n+## Toolchain Compatibility\n+\n+In order for this kind of LTO to work, the LLVM linker plugin must be able to\n+handle the LLVM bitcode produced by both `rustc` and `clang`.\n+\n+Best results are achieved by using a `rustc` and `clang` that are based on the\n+exact same version of LLVM. One can use `rustc -vV` in order to view the LLVM\n+used by a given `rustc` version. Note that the version number given\n+here is only an approximation as Rust sometimes uses unstable revisions of\n+LLVM. However, the approximation is usually reliable.\n+\n+The following table shows known good combinations of toolchain versions.\n+\n+|           | Clang 7   | Clang 8   |\n+|-----------|-----------|-----------|\n+| Rust 1.34 |     \u2717     |     \u2713     |\n+| Rust 1.35 |     \u2717     |    \u2713(?)   |\n+\n+Note that the compatibility policy for this feature might change in the future."}, {"sha": "227fb22bc7d93bac88546244fc4be9c2b94e07d3", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -227,20 +227,6 @@ mod unit;\n // `core_arch` depends on libcore, but the contents of this module are\n // set up in such a way that directly pulling it here works such that the\n // crate uses the this crate as its libcore.\n-#[allow(unused_macros)]\n-macro_rules! test_v16 { ($item:item) => {}; }\n-#[allow(unused_macros)]\n-macro_rules! test_v32 { ($item:item) => {}; }\n-#[allow(unused_macros)]\n-macro_rules! test_v64 { ($item:item) => {}; }\n-#[allow(unused_macros)]\n-macro_rules! test_v128 { ($item:item) => {}; }\n-#[allow(unused_macros)]\n-macro_rules! test_v256 { ($item:item) => {}; }\n-#[allow(unused_macros)]\n-macro_rules! test_v512 { ($item:item) => {}; }\n-#[allow(unused_macros)]\n-macro_rules! vector_impl { ($([$f:ident, $($args:tt)*]),*) => { $($f!($($args)*);)* } }\n #[path = \"../stdsimd/crates/core_arch/src/mod.rs\"]\n #[allow(missing_docs, missing_debug_implementations, dead_code, unused_imports)]\n #[unstable(feature = \"stdsimd\", issue = \"48556\")]"}, {"sha": "b9b235969dad8d980d85e31b342f9b90a70d3dea", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -46,9 +46,12 @@ macro_rules! assert_eq {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left == right)`\n   left: `{:?}`,\n- right: `{:?}`\"#, left_val, right_val)\n+ right: `{:?}`\"#, &*left_val, &*right_val)\n                 }\n             }\n         }\n@@ -60,9 +63,12 @@ macro_rules! assert_eq {\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left == right)`\n   left: `{:?}`,\n- right: `{:?}`: {}\"#, left_val, right_val,\n+ right: `{:?}`: {}\"#, &*left_val, &*right_val,\n                            format_args!($($arg)+))\n                 }\n             }\n@@ -97,9 +103,12 @@ macro_rules! assert_ne {\n         match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left != right)`\n   left: `{:?}`,\n- right: `{:?}`\"#, left_val, right_val)\n+ right: `{:?}`\"#, &*left_val, &*right_val)\n                 }\n             }\n         }\n@@ -111,9 +120,12 @@ macro_rules! assert_ne {\n         match (&($left), &($right)) {\n             (left_val, right_val) => {\n                 if *left_val == *right_val {\n+                    // The reborrows below are intentional. Without them, the stack slot for the\n+                    // borrow is initialized even before the values are compared, leading to a\n+                    // noticeable slow down.\n                     panic!(r#\"assertion failed: `(left != right)`\n   left: `{:?}`,\n- right: `{:?}`: {}\"#, left_val, right_val,\n+ right: `{:?}`: {}\"#, &*left_val, &*right_val,\n                            format_args!($($arg)+))\n                 }\n             }"}, {"sha": "76a45e53684bd93b723f263ba1224623fcc74ceb", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1741,9 +1741,9 @@ mod traits {\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr().add(self.start);\n+            let ptr = slice.as_mut_ptr().add(self.start);\n             let len = self.end - self.start;\n-            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, len))\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr, len))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -1805,8 +1805,8 @@ mod traits {\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr();\n-            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, self.end))\n+            let ptr = slice.as_mut_ptr();\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr, self.end))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -1867,9 +1867,9 @@ mod traits {\n         }\n         #[inline]\n         unsafe fn get_unchecked_mut(self, slice: &mut str) -> &mut Self::Output {\n-            let ptr = slice.as_ptr().add(self.start);\n+            let ptr = slice.as_mut_ptr().add(self.start);\n             let len = slice.len() - self.start;\n-            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr as *mut u8, len))\n+            super::from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr, len))\n         }\n         #[inline]\n         fn index(self, slice: &str) -> &Self::Output {\n@@ -2197,6 +2197,22 @@ impl str {\n         self as *const str as *const u8\n     }\n \n+    /// Converts a mutable string slice to a raw pointer.\n+    ///\n+    /// As string slices are a slice of bytes, the raw pointer points to a\n+    /// [`u8`]. This pointer will be pointing to the first byte of the string\n+    /// slice.\n+    ///\n+    /// It is your responsibility to make sure that the string slice only gets\n+    /// modified in a way that it remains valid UTF-8.\n+    ///\n+    /// [`u8`]: primitive.u8.html\n+    #[unstable(feature = \"str_as_mut_ptr\", issue = \"58215\")]\n+    #[inline]\n+    pub fn as_mut_ptr(&mut self) -> *mut u8 {\n+        self as *mut str as *mut u8\n+    }\n+\n     /// Returns a subslice of `str`.\n     ///\n     /// This is the non-panicking alternative to indexing the `str`. Returns\n@@ -2484,7 +2500,7 @@ impl str {\n         // is_char_boundary checks that the index is in [0, .len()]\n         if self.is_char_boundary(mid) {\n             let len = self.len();\n-            let ptr = self.as_ptr() as *mut u8;\n+            let ptr = self.as_mut_ptr();\n             unsafe {\n                 (from_utf8_unchecked_mut(slice::from_raw_parts_mut(ptr, mid)),\n                  from_utf8_unchecked_mut(slice::from_raw_parts_mut("}, {"sha": "cb9eb32f8d21fda94fcc3e4d0d2ceb807e7f67e4", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -25,7 +25,7 @@ rustc-rayon-core = \"0.1.1\"\n rustc_apfloat = { path = \"../librustc_apfloat\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "de57edc1251a249db131d2658b207bcf71b6bc9a", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,4 +1,4 @@\n-use crate::errors::{Diagnostic, DiagnosticBuilder};\n+use errors::{Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};"}, {"sha": "cc5b105bad0d42a80e03f3b54ee714e6ffccdb53", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -31,7 +31,6 @@\n //! in the HIR, especially for multiple identifiers.\n \n use crate::dep_graph::DepGraph;\n-use crate::errors::Applicability;\n use crate::hir::{self, ParamName};\n use crate::hir::HirVec;\n use crate::hir::map::{DefKey, DefPathData, Definitions};\n@@ -41,14 +40,15 @@ use crate::hir::GenericArg;\n use crate::lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n                     ELIDED_LIFETIMES_IN_PATHS};\n use crate::middle::cstore::CrateStore;\n-use rustc_data_structures::fx::FxHashSet;\n-use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_data_structures::sync::Lrc;\n use crate::session::Session;\n use crate::session::config::nightly_options;\n use crate::util::common::FN_OUTPUT_NAME;\n use crate::util::nodemap::{DefIdMap, NodeMap};\n+use errors::Applicability;\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_data_structures::sync::Lrc;\n \n use std::collections::{BTreeSet, BTreeMap};\n use std::fmt::Debug;"}, {"sha": "bf16ec0be83e797b3dbefac96690ff3d10e60404", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -10,12 +10,12 @@ pub use self::PrimTy::*;\n pub use self::UnOp::*;\n pub use self::UnsafeSource::*;\n \n-use crate::errors::FatalError;\n use crate::hir::def::Def;\n use crate::hir::def_id::{DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX};\n use crate::util::nodemap::{NodeMap, FxHashSet};\n use crate::mir::mono::Linkage;\n \n+use errors::FatalError;\n use syntax_pos::{Span, DUMMY_SP, symbol::InternedString};\n use syntax::source_map::Spanned;\n use rustc_target::spec::abi::Abi;"}, {"sha": "ff4e520d8e08e78d0b09da1ebde32a5a98d27bc7", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -50,16 +50,16 @@ use super::region_constraints::GenericKind;\n use super::{InferCtxt, RegionVariableOrigin, SubregionOrigin, TypeTrace, ValuePairs};\n use crate::infer::{self, SuppressRegionErrors};\n \n-use crate::errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n use crate::hir;\n use crate::hir::def_id::DefId;\n use crate::hir::Node;\n use crate::middle::region;\n-use std::{cmp, fmt};\n-use syntax_pos::{Pos, Span};\n use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::error::TypeError;\n use crate::ty::{self, subst::Subst, Region, Ty, TyCtxt, TyKind, TypeFoldable};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n+use std::{cmp, fmt};\n+use syntax_pos::{Pos, Span};\n \n mod note;\n "}, {"sha": "0fbdbe15a3c547fbbefce0b7cc1f543471904f08", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -5,7 +5,7 @@ use crate::infer::type_variable::TypeVariableOrigin;\n use crate::ty::{self, Ty, Infer, TyVar};\n use syntax::source_map::CompilerDesugaringKind;\n use syntax_pos::Span;\n-use crate::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n \n struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n@@ -16,9 +16,9 @@ struct FindLocalByTypeVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> FindLocalByTypeVisitor<'a, 'gcx, 'tcx> {\n-    fn node_matches_type(&mut self, node_id: HirId) -> bool {\n+    fn node_matches_type(&mut self, hir_id: HirId) -> bool {\n         let ty_opt = self.infcx.in_progress_tables.and_then(|tables| {\n-            tables.borrow().node_id_to_type_opt(node_id)\n+            tables.borrow().node_type_opt(hir_id)\n         });\n         match ty_opt {\n             Some(ty) => {"}, {"sha": "b10af400f2b6c3301c6a15025e7a308626213ee5", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -3,7 +3,7 @@\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::ty;\n use crate::util::common::ErrorReported;\n-use crate::errors::Applicability;\n+use errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// When given a `ConcreteFailure` for a function with arguments containing a named region and"}, {"sha": "843fa8b0182e25a09e5d5f62961b902f79e29322", "filename": "src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fplaceholder_error.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,4 +1,4 @@\n-use crate::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n use crate::hir::def_id::DefId;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;"}, {"sha": "23acaeb31f8d4312cb04a66faf2c262611b37afb", "filename": "src/librustc/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -4,7 +4,7 @@ use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::ty::{BoundRegion, FreeRegion, RegionKind};\n use crate::util::common::ErrorReported;\n-use crate::errors::Applicability;\n+use errors::Applicability;\n \n impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     /// Print the error message for lifetime errors when the return type is a static impl Trait."}, {"sha": "6db1bc382afe9b4f00dcd1d43c08757ffa586f71", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -64,7 +64,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n                             // May return None; sometimes the tables are not yet populated.\n                             let ty_hir_id = fn_decl.inputs[index].hir_id;\n                             let arg_ty_span = hir.span(hir.hir_to_node_id(ty_hir_id));\n-                            let ty = tables.node_id_to_type_opt(arg.hir_id)?;\n+                            let ty = tables.node_type_opt(arg.hir_id)?;\n                             let mut found_anon_region = false;\n                             let new_arg_ty = self.tcx().fold_regions(&ty, &mut false, |r, _| {\n                                 if *r == *anon_region {"}, {"sha": "c05c6567bbefab50d49aa4a7a2dc827fb4753ba2", "filename": "src/librustc/infer/error_reporting/note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -2,7 +2,7 @@ use crate::infer::{self, InferCtxt, SubregionOrigin};\n use crate::middle::region;\n use crate::ty::{self, Region};\n use crate::ty::error::TypeError;\n-use crate::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub(super) fn note_region_origin(&self,"}, {"sha": "88423086058256bc51738efa135d0793e943c230", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -7,21 +7,12 @@ pub use self::SubregionOrigin::*;\n pub use self::ValuePairs::*;\n pub use crate::ty::IntVarValue;\n \n-use arena::SyncDroplessArena;\n-use crate::errors::DiagnosticBuilder;\n use crate::hir::def_id::DefId;\n use crate::infer::canonical::{Canonical, CanonicalVarValues};\n use crate::middle::free_region::RegionRelations;\n use crate::middle::lang_items;\n use crate::middle::region;\n-use rustc_data_structures::unify as ut;\n use crate::session::config::BorrowckMode;\n-use std::cell::{Cell, Ref, RefCell, RefMut};\n-use std::collections::BTreeMap;\n-use std::fmt;\n-use syntax::ast;\n-use syntax_pos::symbol::InternedString;\n-use syntax_pos::{self, Span};\n use crate::traits::{self, ObligationCause, PredicateObligations, TraitEngine};\n use crate::ty::error::{ExpectedFound, TypeError, UnconstrainedNumeric};\n use crate::ty::fold::TypeFoldable;\n@@ -31,6 +22,16 @@ use crate::ty::{self, GenericParamDefKind, Ty, TyCtxt, CtxtInterners};\n use crate::ty::{FloatVid, IntVid, TyVid};\n use crate::util::nodemap::FxHashMap;\n \n+use arena::SyncDroplessArena;\n+use errors::DiagnosticBuilder;\n+use rustc_data_structures::unify as ut;\n+use std::cell::{Cell, Ref, RefCell, RefMut};\n+use std::collections::BTreeMap;\n+use std::fmt;\n+use syntax::ast;\n+use syntax_pos::symbol::InternedString;\n+use syntax_pos::Span;\n+\n use self::combine::CombineFields;\n use self::lexical_region_resolve::LexicalRegionResolutions;\n use self::outlives::env::OutlivesEnvironment;"}, {"sha": "bfe59eda06e6fc44a3d519fc8da4ecd88dfede4c", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -153,8 +153,6 @@ mod rustc {\n     pub use crate::lint;\n }\n \n-use rustc_errors as errors;\n-\n // FIXME(#27438): right now the unit tests of librustc don't refer to any actual\n //                functions generated in librustc_data_structures (all\n //                references are through generic functions), but statics are"}, {"sha": "6f10b0e2c0e67a0a96dffa8e986d784a221157d4", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -4,9 +4,9 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::errors::{Applicability, DiagnosticBuilder};\n use crate::lint::{LintPass, LateLintPass, LintArray};\n use crate::session::Session;\n+use errors::{Applicability, DiagnosticBuilder};\n use syntax::ast;\n use syntax::source_map::Span;\n "}, {"sha": "9032fcf8b612aebed0e7ff227e777d0d6d02e017", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -34,7 +34,7 @@ use std::default::Default as StdDefault;\n use syntax::ast;\n use syntax::edition;\n use syntax_pos::{MultiSpan, Span, symbol::{LocalInternedString, Symbol}};\n-use crate::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n use crate::hir;\n use crate::hir::def_id::LOCAL_CRATE;\n use crate::hir::intravisit as hir_visit;"}, {"sha": "924aa3fde0a08fd7e5ea406b771c215912fa978a", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,20 +1,20 @@\n use std::cmp;\n \n-use crate::errors::{Applicability, DiagnosticBuilder};\n use crate::hir::HirId;\n use crate::ich::StableHashingContext;\n use crate::lint::builtin;\n use crate::lint::context::CheckLintNameResult;\n use crate::lint::{self, Lint, LintId, Level, LintSource};\n+use crate::session::Session;\n+use crate::util::nodemap::FxHashMap;\n+use errors::{Applicability, DiagnosticBuilder};\n use rustc_data_structures::stable_hasher::{HashStable, ToStableHashKey,\n                                            StableHasher, StableHasherResult};\n-use crate::session::Session;\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate;\n use syntax::source_map::MultiSpan;\n use syntax::symbol::Symbol;\n-use crate::util::nodemap::FxHashMap;\n \n pub struct LintLevelSets {\n     list: Vec<LintSet>,"}, {"sha": "859ceb4bd074d5e02345c79c5a135ebf82fc54cf", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -23,23 +23,23 @@ pub use self::LintSource::*;\n \n use rustc_data_structures::sync::{self, Lrc};\n \n-use crate::errors::{DiagnosticBuilder, DiagnosticId};\n use crate::hir::def_id::{CrateNum, LOCAL_CRATE};\n use crate::hir::intravisit;\n use crate::hir;\n use crate::lint::builtin::{BuiltinLintDiagnostics, DUPLICATE_MATCHER_BINDING_NAME};\n use crate::lint::builtin::parser::{QUESTION_MARK_MACRO_SEP, ILL_FORMED_ATTRIBUTE_INPUT};\n use crate::session::{Session, DiagnosticMessageId};\n+use crate::ty::TyCtxt;\n+use crate::ty::query::Providers;\n+use crate::util::nodemap::NodeMap;\n+use errors::{DiagnosticBuilder, DiagnosticId};\n use std::{hash, ptr};\n use syntax::ast;\n use syntax::source_map::{MultiSpan, ExpnFormat};\n use syntax::early_buffered_lints::BufferedEarlyLintId;\n use syntax::edition::Edition;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n-use crate::ty::TyCtxt;\n-use crate::ty::query::Providers;\n-use crate::util::nodemap::NodeMap;\n \n pub use crate::lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         check_crate, check_ast_crate, CheckLintNameResult,"}, {"sha": "569968bd6d4bf53db834b77ef3af97044d6cfb59", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n \n     fn handle_field_pattern_match(&mut self, lhs: &hir::Pat, def: Def,\n                                   pats: &[source_map::Spanned<hir::FieldPat>]) {\n-        let variant = match self.tables.node_id_to_type(lhs.hir_id).sty {\n+        let variant = match self.tables.node_type(lhs.hir_id).sty {\n             ty::Adt(adt, _) => adt.variant_of_def(def),\n             _ => span_bug!(lhs.span, \"non-ADT in struct pattern\")\n         };"}, {"sha": "ce20ca39533b13737d81f72b41d9413be89253b6", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -165,7 +165,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n         };\n         if let Def::Fn(did) = def {\n             if self.def_id_is_transmute(did) {\n-                let typ = self.tables.node_id_to_type(expr.hir_id);\n+                let typ = self.tables.node_type(expr.hir_id);\n                 let sig = typ.fn_sig(self.tcx);\n                 let from = sig.inputs().skip_binder()[0];\n                 let to = *sig.output().skip_binder();"}, {"sha": "331343e052dea322231458c5e592f35b63fe9a6f", "filename": "src/librustc/middle/lib_features.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flib_features.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -5,12 +5,12 @@\n // (unlike lang features), which means we need to collect them instead.\n \n use crate::ty::TyCtxt;\n+use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use syntax::symbol::Symbol;\n use syntax::ast::{Attribute, MetaItem, MetaItemKind};\n use syntax_pos::Span;\n-use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n-use crate::errors::DiagnosticId;\n+use errors::DiagnosticId;\n \n pub struct LibFeatures {\n     // A map from feature to stabilisation version."}, {"sha": "d3925f40e09e714cce9d2660828e4a619fc956a3", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -102,9 +102,9 @@ use crate::hir::Node;\n use crate::ty::{self, TyCtxt};\n use crate::ty::query::Providers;\n use crate::lint;\n-use crate::errors::Applicability;\n use crate::util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n \n+use errors::Applicability;\n use std::collections::{BTreeMap, VecDeque};\n use std::{fmt, u32};\n use std::io::prelude::*;"}, {"sha": "231dcc9bfd272af8d1db2709639b5ceb4e89529a", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -174,7 +174,7 @@ pub enum Note {\n // which the value is stored.\n //\n // *WARNING* The field `cmt.type` is NOT necessarily the same as the\n-// result of `node_id_to_type(cmt.id)`.\n+// result of `node_type(cmt.id)`.\n //\n // (FIXME: rewrite the following comment given that `@x` managed\n // pointers have been obsolete for quite some time.)\n@@ -497,7 +497,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                    hir_id: hir::HirId)\n                    -> McResult<Ty<'tcx>> {\n         self.resolve_type_vars_or_error(hir_id,\n-                                        self.tables.node_id_to_type_opt(hir_id))\n+                                        self.tables.node_type_opt(hir_id))\n     }\n \n     pub fn expr_ty(&self, expr: &hir::Expr) -> McResult<Ty<'tcx>> {"}, {"sha": "5f7b9cc33660f95191937e15d15573612d058579", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -11,10 +11,11 @@ use crate::hir::map::Map;\n use crate::hir::{GenericArg, GenericParam, ItemLocalId, LifetimeName, Node, ParamName};\n use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n \n-use crate::errors::{Applicability, DiagnosticBuilder};\n use crate::rustc::lint;\n-use rustc_data_structures::sync::Lrc;\n use crate::session::Session;\n+use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n+use errors::{Applicability, DiagnosticBuilder};\n+use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n use std::cell::Cell;\n use std::mem::replace;\n@@ -23,7 +24,6 @@ use syntax::attr;\n use syntax::ptr::P;\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n-use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, NodeMap, NodeSet};\n \n use crate::hir::intravisit::{self, NestedVisitorMap, Visitor};\n use crate::hir::{self, GenericParamKind, LifetimeParamKind};"}, {"sha": "29beabdb2abdf580fc52d5b5078f4b003052f60a", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -11,7 +11,7 @@ use super::{RawConst, Pointer, InboundsCheck, ScalarMaybeUndef};\n use backtrace::Backtrace;\n \n use crate::ty::query::TyCtxtAt;\n-use crate::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n \n use syntax_pos::{Pos, Span};\n use syntax::ast;"}, {"sha": "22b1c3f18acb2d99422d7a2297f279238dec5c59", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -19,7 +19,7 @@ use syntax::parse;\n use syntax::symbol::Symbol;\n use syntax::feature_gate::UnstableFeatures;\n \n-use crate::errors::{ColorConfig, FatalError, Handler};\n+use errors::{ColorConfig, FatalError, Handler};\n \n use getopts;\n use std::collections::{BTreeMap, BTreeSet};\n@@ -96,18 +96,18 @@ pub enum LtoCli {\n }\n \n #[derive(Clone, PartialEq, Hash)]\n-pub enum CrossLangLto {\n+pub enum LinkerPluginLto {\n     LinkerPlugin(PathBuf),\n     LinkerPluginAuto,\n     Disabled\n }\n \n-impl CrossLangLto {\n+impl LinkerPluginLto {\n     pub fn enabled(&self) -> bool {\n         match *self {\n-            CrossLangLto::LinkerPlugin(_) |\n-            CrossLangLto::LinkerPluginAuto => true,\n-            CrossLangLto::Disabled => false,\n+            LinkerPluginLto::LinkerPlugin(_) |\n+            LinkerPluginLto::LinkerPluginAuto => true,\n+            LinkerPluginLto::Disabled => false,\n         }\n     }\n }\n@@ -812,7 +812,7 @@ macro_rules! options {\n         pub const parse_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), `thin`, \\\n                   `fat`, or omitted\");\n-        pub const parse_cross_lang_lto: Option<&str> =\n+        pub const parse_linker_plugin_lto: Option<&str> =\n             Some(\"either a boolean (`yes`, `no`, `on`, `off`, etc), \\\n                   or the path to the linker plugin\");\n         pub const parse_merge_functions: Option<&str> =\n@@ -821,7 +821,7 @@ macro_rules! options {\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, Sanitizer, LtoCli, CrossLangLto};\n+        use super::{$struct_name, Passes, Sanitizer, LtoCli, LinkerPluginLto};\n         use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n         use std::str::FromStr;\n@@ -1037,22 +1037,22 @@ macro_rules! options {\n             true\n         }\n \n-        fn parse_cross_lang_lto(slot: &mut CrossLangLto, v: Option<&str>) -> bool {\n+        fn parse_linker_plugin_lto(slot: &mut LinkerPluginLto, v: Option<&str>) -> bool {\n             if v.is_some() {\n                 let mut bool_arg = None;\n                 if parse_opt_bool(&mut bool_arg, v) {\n                     *slot = if bool_arg.unwrap() {\n-                        CrossLangLto::LinkerPluginAuto\n+                        LinkerPluginLto::LinkerPluginAuto\n                     } else {\n-                        CrossLangLto::Disabled\n+                        LinkerPluginLto::Disabled\n                     };\n                     return true\n                 }\n             }\n \n             *slot = match v {\n-                None => CrossLangLto::LinkerPluginAuto,\n-                Some(path) => CrossLangLto::LinkerPlugin(PathBuf::from(path)),\n+                None => LinkerPluginLto::LinkerPluginAuto,\n+                Some(path) => LinkerPluginLto::LinkerPlugin(PathBuf::from(path)),\n             };\n             true\n         }\n@@ -1145,6 +1145,10 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"allow the linker to link its default libraries\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n                                            \"Linker flavor\"),\n+    linker_plugin_lto: LinkerPluginLto = (LinkerPluginLto::Disabled,\n+        parse_linker_plugin_lto, [TRACKED],\n+        \"generate build artifacts that are compatible with linker-based LTO.\"),\n+\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n@@ -1383,8 +1387,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"make the current crate share its generic instantiations\"),\n     chalk: bool = (false, parse_bool, [TRACKED],\n         \"enable the experimental Chalk-based trait solving engine\"),\n-    cross_lang_lto: CrossLangLto = (CrossLangLto::Disabled, parse_cross_lang_lto, [TRACKED],\n-        \"generate build artifacts that are compatible with linker-based LTO.\"),\n     no_parallel_llvm: bool = (false, parse_bool, [UNTRACKED],\n         \"don't run LLVM in parallel (while keeping codegen-units and ThinLTO)\"),\n     no_leak_check: bool = (false, parse_bool, [UNTRACKED],\n@@ -2440,7 +2442,7 @@ mod dep_tracking {\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n-                Passes, Sanitizer, LtoCli, CrossLangLto};\n+                Passes, Sanitizer, LtoCli, LinkerPluginLto};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n     use syntax::edition::Edition;\n@@ -2507,7 +2509,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n     impl_dep_tracking_hash_via_hash!(TargetTriple);\n     impl_dep_tracking_hash_via_hash!(Edition);\n-    impl_dep_tracking_hash_via_hash!(CrossLangLto);\n+    impl_dep_tracking_hash_via_hash!(LinkerPluginLto);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);\n@@ -2567,12 +2569,11 @@ mod dep_tracking {\n \n #[cfg(test)]\n mod tests {\n-    use crate::errors;\n     use getopts;\n     use crate::lint;\n     use crate::middle::cstore;\n     use crate::session::config::{build_configuration, build_session_options_and_crate_config};\n-    use crate::session::config::{LtoCli, CrossLangLto};\n+    use crate::session::config::{LtoCli, LinkerPluginLto};\n     use crate::session::build_session;\n     use crate::session::search_paths::SearchPath;\n     use std::collections::{BTreeMap, BTreeSet};\n@@ -3105,6 +3106,10 @@ mod tests {\n         opts = reference.clone();\n         opts.cg.panic = Some(PanicStrategy::Abort);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n+\n+        opts = reference.clone();\n+        opts.cg.linker_plugin_lto = LinkerPluginLto::LinkerPluginAuto;\n+        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n     }\n \n     #[test]\n@@ -3231,10 +3236,6 @@ mod tests {\n         opts.debugging_opts.relro_level = Some(RelroLevel::Full);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n \n-        opts = reference.clone();\n-        opts.debugging_opts.cross_lang_lto = CrossLangLto::LinkerPluginAuto;\n-        assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());\n-\n         opts = reference.clone();\n         opts.debugging_opts.merge_functions = Some(MergeFunctions::Disabled);\n         assert!(reference.dep_tracking_hash() != opts.dep_tracking_hash());"}, {"sha": "58bd4782b214309330e6143445da1a3af1c07667", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -21,8 +21,8 @@ use rustc_data_structures::sync::{\n     Ordering::SeqCst,\n };\n \n-use crate::errors::{self, DiagnosticBuilder, DiagnosticId, Applicability};\n-use crate::errors::emitter::{Emitter, EmitterWriter};\n+use errors::{DiagnosticBuilder, DiagnosticId, Applicability};\n+use errors::emitter::{Emitter, EmitterWriter};\n use syntax::ast::{self, NodeId};\n use syntax::edition::Edition;\n use syntax::feature_gate::{self, AttributeType};\n@@ -1267,7 +1267,7 @@ fn validate_commandline_args_with_session_available(sess: &Session) {\n     // bitcode during ThinLTO. Therefore we disallow dynamic linking on MSVC\n     // when compiling for LLD ThinLTO. This way we can validly just not generate\n     // the `dllimport` attributes and `__imp_` symbols in that case.\n-    if sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n+    if sess.opts.cg.linker_plugin_lto.enabled() &&\n        sess.opts.cg.prefer_dynamic &&\n        sess.target.target.options.is_like_msvc {\n         sess.err(\"Linker plugin based LTO is not supported together with \\"}, {"sha": "35d8e2beef55787688c70612d9530b429ec36e66", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -39,7 +39,7 @@ pub struct OverlapResult<'tcx> {\n     pub involves_placeholder: bool,\n }\n \n-pub fn add_placeholder_note(err: &mut crate::errors::DiagnosticBuilder<'_>) {\n+pub fn add_placeholder_note(err: &mut errors::DiagnosticBuilder<'_>) {\n     err.note(&format!(\n         \"this behavior recently changed as a result of a bug fix; \\\n          see rust-lang/rust#56105 for details\""}, {"sha": "eb284645d36c827a2ae549bae3308f8c30b07e84", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -17,14 +17,11 @@ use super::{\n     Overflow,\n };\n \n-use crate::errors::{Applicability, DiagnosticBuilder};\n use crate::hir;\n use crate::hir::Node;\n use crate::hir::def_id::DefId;\n use crate::infer::{self, InferCtxt};\n use crate::infer::type_variable::TypeVariableOrigin;\n-use std::fmt;\n-use syntax::ast;\n use crate::session::DiagnosticMessageId;\n use crate::ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n use crate::ty::GenericParamDefKind;\n@@ -35,6 +32,9 @@ use crate::ty::subst::Subst;\n use crate::ty::SubtypePredicate;\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n \n+use errors::{Applicability, DiagnosticBuilder};\n+use std::fmt;\n+use syntax::ast;\n use syntax_pos::{DUMMY_SP, Span, ExpnInfo, ExpnFormat};\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "c2c05ce7af50b7665b3a622d62abc7bc64cedd1c", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -103,7 +103,7 @@ impl IntercrateAmbiguityCause {\n     /// See #23980 for details.\n     pub fn add_intercrate_ambiguity_hint<'a, 'tcx>(\n         &self,\n-        err: &mut crate::errors::DiagnosticBuilder<'_>,\n+        err: &mut errors::DiagnosticBuilder<'_>,\n     ) {\n         err.note(&self.intercrate_ambiguity_hint());\n     }"}, {"sha": "18b0afe1fd91ec08b01ded39a9b8432bc848b9c4", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -2,7 +2,6 @@\n \n use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepNode, DepConstructor};\n-use crate::errors::DiagnosticBuilder;\n use crate::session::Session;\n use crate::session::config::{BorrowckMode, OutputFilenames};\n use crate::session::config::CrateType;\n@@ -43,6 +42,7 @@ use crate::ty::{BoundVar, BindingMode};\n use crate::ty::CanonicalPolyFnSig;\n use crate::util::nodemap::{DefIdMap, DefIdSet, ItemLocalMap};\n use crate::util::nodemap::{FxHashMap, FxHashSet};\n+use errors::DiagnosticBuilder;\n use rustc_data_structures::interner::HashInterner;\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, hash_stable_hashmap,\n@@ -525,17 +525,14 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn node_id_to_type(&self, id: hir::HirId) -> Ty<'tcx> {\n-        self.node_id_to_type_opt(id).unwrap_or_else(||\n-            bug!(\"node_id_to_type: no type for node `{}`\",\n-                 tls::with(|tcx| {\n-                     let id = tcx.hir().hir_to_node_id(id);\n-                     tcx.hir().node_to_string(id)\n-                 }))\n+    pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {\n+        self.node_type_opt(id).unwrap_or_else(||\n+            bug!(\"node_type: no type for node `{}`\",\n+                 tls::with(|tcx| tcx.hir().hir_to_string(id)))\n         )\n     }\n \n-    pub fn node_id_to_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n+    pub fn node_type_opt(&self, id: hir::HirId) -> Option<Ty<'tcx>> {\n         validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n         self.node_types.get(&id.local_id).cloned()\n     }\n@@ -560,11 +557,11 @@ impl<'tcx> TypeckTables<'tcx> {\n     // Returns the type of a pattern as a monotype. Like @expr_ty, this function\n     // doesn't provide type parameter substitutions.\n     pub fn pat_ty(&self, pat: &hir::Pat) -> Ty<'tcx> {\n-        self.node_id_to_type(pat.hir_id)\n+        self.node_type(pat.hir_id)\n     }\n \n     pub fn pat_ty_opt(&self, pat: &hir::Pat) -> Option<Ty<'tcx>> {\n-        self.node_id_to_type_opt(pat.hir_id)\n+        self.node_type_opt(pat.hir_id)\n     }\n \n     // Returns the type of an expression as a monotype.\n@@ -578,11 +575,11 @@ impl<'tcx> TypeckTables<'tcx> {\n     // ask for the type of \"id\" in \"id(3)\", it will return \"fn(&isize) -> isize\"\n     // instead of \"fn(ty) -> T with T = isize\".\n     pub fn expr_ty(&self, expr: &hir::Expr) -> Ty<'tcx> {\n-        self.node_id_to_type(expr.hir_id)\n+        self.node_type(expr.hir_id)\n     }\n \n     pub fn expr_ty_opt(&self, expr: &hir::Expr) -> Option<Ty<'tcx>> {\n-        self.node_id_to_type_opt(expr.hir_id)\n+        self.node_type_opt(expr.hir_id)\n     }\n \n     pub fn adjustments(&self) -> LocalTableInContext<'_, Vec<ty::adjustment::Adjustment<'tcx>>> {\n@@ -1819,7 +1816,7 @@ pub mod tls {\n     use std::ptr;\n     use syntax_pos;\n     use crate::ty::query;\n-    use crate::errors::{Diagnostic, TRACK_DIAGNOSTICS};\n+    use errors::{Diagnostic, TRACK_DIAGNOSTICS};\n     use rustc_data_structures::OnDrop;\n     use rustc_data_structures::sync::{self, Lrc, Lock};\n     use rustc_data_structures::thin_vec::ThinVec;"}, {"sha": "e3e0ce147741fbb747bedee214febc0b58143202", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -4,7 +4,7 @@ use std::borrow::Cow;\n use std::fmt;\n use rustc_target::spec::abi;\n use syntax::ast;\n-use crate::errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder};\n use syntax_pos::Span;\n \n use crate::hir;"}, {"sha": "26e2705a7a0346feeb955f066e8b5a6405541afd", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,4 +1,3 @@\n-use crate::hir;\n use crate::hir::map::DefPathData;\n use crate::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n@@ -77,11 +76,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.item_path_str(self.hir().local_def_id(id))\n     }\n \n-    // FIXME(@ljedrz): replace the NodeId variant\n-    pub fn hir_path_str(self, id: hir::HirId) -> String {\n-        self.item_path_str(self.hir().local_def_id_from_hir_id(id))\n-    }\n-\n     /// Returns a string identifying this def-id. This string is\n     /// suitable for user output. It always begins with a crate identifier.\n     pub fn absolute_item_path_str(self, def_id: DefId) -> String {"}, {"sha": "3b191d4201fbfc2b2fa41edc7d923c91329ff351", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,9 +1,7 @@\n use crate::dep_graph::{self, DepConstructor, DepNode};\n-use crate::errors::DiagnosticBuilder;\n use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n use crate::hir::def::{Def, Export};\n use crate::hir::{self, TraitCandidate, ItemLocalId, CodegenFnAttrs};\n-use rustc_data_structures::svh::Svh;\n use crate::infer::canonical::{self, Canonical};\n use crate::lint;\n use crate::middle::borrowck::BorrowCheckResult;\n@@ -44,6 +42,8 @@ use crate::util::common::{ErrorReported};\n use crate::util::profiling::ProfileCategory::*;\n use crate::session::Session;\n \n+use errors::DiagnosticBuilder;\n+use rustc_data_structures::svh::Svh;\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};"}, {"sha": "c16f861dedb50442a88f1c3bf6bb60a0dd72125f", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,28 +1,29 @@\n use crate::dep_graph::{DepNodeIndex, SerializedDepNodeIndex};\n-use crate::errors::Diagnostic;\n use crate::hir;\n use crate::hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId, LOCAL_CRATE};\n use crate::hir::map::definitions::DefPathHash;\n use crate::ich::{CachingSourceMapView, Fingerprint};\n use crate::mir::{self, interpret};\n use crate::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n-use rustc_data_structures::fx::FxHashMap;\n-use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_data_structures::sync::{Lrc, Lock, HashMapExt, Once};\n-use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use crate::rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n                       UseSpecializedDecodable, UseSpecializedEncodable};\n use crate::session::{CrateDisambiguator, Session};\n+use crate::ty;\n+use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n+use crate::ty::context::TyCtxt;\n+use crate::util::common::time;\n+\n+use errors::Diagnostic;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::thin_vec::ThinVec;\n+use rustc_data_structures::sync::{Lrc, Lock, HashMapExt, Once};\n+use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use std::mem;\n use syntax::ast::NodeId;\n use syntax::source_map::{SourceMap, StableSourceFileId};\n use syntax_pos::{BytePos, Span, DUMMY_SP, SourceFile};\n use syntax_pos::hygiene::{Mark, SyntaxContext, ExpnInfo};\n-use crate::ty;\n-use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n-use crate::ty::context::TyCtxt;\n-use crate::util::common::time;\n \n const TAG_FILE_FOOTER: u128 = 0xC0FFEE_C0FFEE_C0FFEE_C0FFEE_C0FFEE;\n "}, {"sha": "267ee89a2ffed95f50e57487ab8b6909705899dd", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -3,10 +3,6 @@\n //! manage the caches, and so forth.\n \n use crate::dep_graph::{DepNodeIndex, DepNode, DepKind, SerializedDepNodeIndex};\n-use crate::errors::DiagnosticBuilder;\n-use crate::errors::Level;\n-use crate::errors::Diagnostic;\n-use crate::errors::FatalError;\n use crate::ty::tls;\n use crate::ty::{TyCtxt};\n use crate::ty::query::Query;\n@@ -16,6 +12,10 @@ use crate::ty::item_path;\n \n use crate::util::common::{profq_msg, ProfileQueriesMsg, QueryMsg};\n \n+use errors::DiagnosticBuilder;\n+use errors::Level;\n+use errors::Diagnostic;\n+use errors::FatalError;\n use rustc_data_structures::fx::{FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock};\n use rustc_data_structures::thin_vec::ThinVec;"}, {"sha": "cf6053b71b6a8a953cfd30666839d4b038492290", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for GatherLoanCtxt<'a, 'tcx> {\n     fn decl_without_init(&mut self, id: ast::NodeId, _span: Span) {\n         let ty = self.bccx\n                      .tables\n-                     .node_id_to_type(self.bccx.tcx.hir().node_to_hir_id(id));\n+                     .node_type(self.bccx.tcx.hir().node_to_hir_id(id));\n         gather_moves::gather_decl(self.bccx, &self.move_data, id, ty);\n     }\n }"}, {"sha": "548c94abc076f49cc855da34b8906e0a3eecfe26", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -857,7 +857,7 @@ fn link_args(cmd: &mut dyn Linker,\n              codegen_results: &CodegenResults) {\n \n     // Linker plugins should be specified early in the list of arguments\n-    cmd.cross_lang_lto();\n+    cmd.linker_plugin_lto();\n \n     // The default library location, we need this to find the runtime.\n     // The location of crates will be determined as needed.\n@@ -1491,7 +1491,7 @@ fn are_upstream_rust_objects_already_included(sess: &Session) -> bool {\n         Lto::Thin => {\n             // If we defer LTO to the linker, we haven't run LTO ourselves, so\n             // any upstream object files have not been copied yet.\n-            !sess.opts.debugging_opts.cross_lang_lto.enabled()\n+            !sess.opts.cg.linker_plugin_lto.enabled()\n         }\n         Lto::No |\n         Lto::ThinLocal => false,"}, {"sha": "ac55244d8d931f93b772177183095911f0c8f0e2", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -159,7 +159,7 @@ pub(crate) fn run_thin(cgcx: &CodegenContext<LlvmCodegenBackend>,\n     let symbol_white_list = symbol_white_list.iter()\n                                              .map(|c| c.as_ptr())\n                                              .collect::<Vec<_>>();\n-    if cgcx.opts.debugging_opts.cross_lang_lto.enabled() {\n+    if cgcx.opts.cg.linker_plugin_lto.enabled() {\n         unreachable!(\"We should never reach this case if the LTO step \\\n                       is deferred to the linker\");\n     }"}, {"sha": "e78715319727b4b158cf6f9d54d06956dbdd6640", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -366,7 +366,7 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                 let opt_level = config.opt_level.map(|x| to_llvm_opt_settings(x).0)\n                     .unwrap_or(llvm::CodeGenOptLevel::None);\n                 let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal ||\n-                    (cgcx.lto != Lto::Fat && cgcx.opts.debugging_opts.cross_lang_lto.enabled());\n+                    (cgcx.lto != Lto::Fat && cgcx.opts.cg.linker_plugin_lto.enabled());\n                 with_llvm_pmb(llmod, &config, opt_level, prepare_for_thin_lto, &mut |b| {\n                     llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n                     llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);"}, {"sha": "ca9e2c87be2374ffbc34f2eb7a216c20f2b894e3", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -275,12 +275,12 @@ impl CodegenCx<'ll, 'tcx> {\n                 self.use_dll_storage_attrs && !self.tcx.is_foreign_item(def_id) &&\n                 // ThinLTO can't handle this workaround in all cases, so we don't\n                 // emit the attrs. Instead we make them unnecessary by disallowing\n-                // dynamic linking when cross-language LTO is enabled.\n-                !self.tcx.sess.opts.debugging_opts.cross_lang_lto.enabled();\n+                // dynamic linking when linker plugin based LTO is enabled.\n+                !self.tcx.sess.opts.cg.linker_plugin_lto.enabled();\n \n             // If this assertion triggers, there's something wrong with commandline\n             // argument validation.\n-            debug_assert!(!(self.tcx.sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n+            debug_assert!(!(self.tcx.sess.opts.cg.linker_plugin_lto.enabled() &&\n                             self.tcx.sess.target.target.options.is_like_msvc &&\n                             self.tcx.sess.opts.cg.prefer_dynamic));\n "}, {"sha": "356bb8d50ad0d45ecb74e849307b9e62d42c3532", "filename": "src/librustc_codegen_ssa/back/linker.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flinker.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -13,7 +13,7 @@ use rustc::hir::def_id::{LOCAL_CRATE, CrateNum};\n use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n-                             CrossLangLto, Lto};\n+                             LinkerPluginLto, Lto};\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n use serialize::{json, Encoder};\n@@ -127,7 +127,7 @@ pub trait Linker {\n     fn subsystem(&mut self, subsystem: &str);\n     fn group_start(&mut self);\n     fn group_end(&mut self);\n-    fn cross_lang_lto(&mut self);\n+    fn linker_plugin_lto(&mut self);\n     // Should have been finalize(self), but we don't support self-by-value on trait objects (yet?).\n     fn finalize(&mut self) -> Command;\n }\n@@ -183,7 +183,7 @@ impl<'a> GccLinker<'a> {\n         }\n     }\n \n-    fn push_cross_lang_lto_args(&mut self, plugin_path: Option<&OsStr>) {\n+    fn push_linker_plugin_lto_args(&mut self, plugin_path: Option<&OsStr>) {\n         if let Some(plugin_path) = plugin_path {\n             let mut arg = OsString::from(\"-plugin=\");\n             arg.push(plugin_path);\n@@ -454,16 +454,16 @@ impl<'a> Linker for GccLinker<'a> {\n         }\n     }\n \n-    fn cross_lang_lto(&mut self) {\n-        match self.sess.opts.debugging_opts.cross_lang_lto {\n-            CrossLangLto::Disabled => {\n+    fn linker_plugin_lto(&mut self) {\n+        match self.sess.opts.cg.linker_plugin_lto {\n+            LinkerPluginLto::Disabled => {\n                 // Nothing to do\n             }\n-            CrossLangLto::LinkerPluginAuto => {\n-                self.push_cross_lang_lto_args(None);\n+            LinkerPluginLto::LinkerPluginAuto => {\n+                self.push_linker_plugin_lto_args(None);\n             }\n-            CrossLangLto::LinkerPlugin(ref path) => {\n-                self.push_cross_lang_lto_args(Some(path.as_os_str()));\n+            LinkerPluginLto::LinkerPlugin(ref path) => {\n+                self.push_linker_plugin_lto_args(Some(path.as_os_str()));\n             }\n         }\n     }\n@@ -697,7 +697,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn group_start(&mut self) {}\n     fn group_end(&mut self) {}\n \n-    fn cross_lang_lto(&mut self) {\n+    fn linker_plugin_lto(&mut self) {\n         // Do nothing\n     }\n }\n@@ -865,7 +865,7 @@ impl<'a> Linker for EmLinker<'a> {\n     fn group_start(&mut self) {}\n     fn group_end(&mut self) {}\n \n-    fn cross_lang_lto(&mut self) {\n+    fn linker_plugin_lto(&mut self) {\n         // Do nothing\n     }\n }\n@@ -1047,7 +1047,7 @@ impl<'a> Linker for WasmLd<'a> {\n     fn group_start(&mut self) {}\n     fn group_end(&mut self) {}\n \n-    fn cross_lang_lto(&mut self) {\n+    fn linker_plugin_lto(&mut self) {\n         // Do nothing for now\n     }\n }\n@@ -1207,6 +1207,6 @@ impl<'a> Linker for PtxLinker<'a> {\n     fn group_end(&mut self) {\n     }\n \n-    fn cross_lang_lto(&mut self) {\n+    fn linker_plugin_lto(&mut self) {\n     }\n }"}, {"sha": "2922d326c3b355e80c06f76ee7d1c31549499b38", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -126,7 +126,7 @@ impl ModuleConfig {\n         self.time_passes = sess.time_passes();\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n         self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode ||\n-                              sess.opts.debugging_opts.cross_lang_lto.enabled();\n+                              sess.opts.cg.linker_plugin_lto.enabled();\n         let embed_bitcode = sess.target.target.options.embed_bitcode ||\n                             sess.opts.debugging_opts.embed_bitcode;\n         if embed_bitcode {\n@@ -737,7 +737,7 @@ fn execute_optimize_work_item<B: ExtraBackendMethods>(\n     // If the linker does LTO, we don't have to do it. Note that we\n     // keep doing full LTO, if it is requested, as not to break the\n     // assumption that the output will be a single module.\n-    let linker_does_lto = cgcx.opts.debugging_opts.cross_lang_lto.enabled();\n+    let linker_does_lto = cgcx.opts.cg.linker_plugin_lto.enabled();\n \n     // When we're automatically doing ThinLTO for multi-codegen-unit\n     // builds we don't actually want to LTO the allocator modules if\n@@ -1883,14 +1883,14 @@ pub fn pre_lto_bitcode_filename(module_name: &str) -> String {\n fn msvc_imps_needed(tcx: TyCtxt) -> bool {\n     // This should never be true (because it's not supported). If it is true,\n     // something is wrong with commandline arg validation.\n-    assert!(!(tcx.sess.opts.debugging_opts.cross_lang_lto.enabled() &&\n+    assert!(!(tcx.sess.opts.cg.linker_plugin_lto.enabled() &&\n               tcx.sess.target.target.options.is_like_msvc &&\n               tcx.sess.opts.cg.prefer_dynamic));\n \n     tcx.sess.target.target.options.is_like_msvc &&\n         tcx.sess.crate_types.borrow().iter().any(|ct| *ct == config::CrateType::Rlib) &&\n     // ThinLTO can't handle this workaround in all cases, so we don't\n     // emit the `__imp_` symbols. Instead we make them unnecessary by disallowing\n-    // dynamic linking when cross-language LTO is enabled.\n-    !tcx.sess.opts.debugging_opts.cross_lang_lto.enabled()\n+    // dynamic linking when linker plugin LTO is enabled.\n+    !tcx.sess.opts.cg.linker_plugin_lto.enabled()\n }"}, {"sha": "28e01bd9793fd9813201801c2bf5b2714326d7f9", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'_, '_>, e: &hir::Expr) {\n-        let ty = cx.tables.node_id_to_type(e.hir_id);\n+        let ty = cx.tables.node_type(e.hir_id);\n         self.check_heap_type(cx, e.span, ty);\n     }\n }\n@@ -1002,7 +1002,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MutableTransmutes {\n                 if !def_id_is_transmute(cx, did) {\n                     return None;\n                 }\n-                let sig = cx.tables.node_id_to_type(expr.hir_id).fn_sig(cx.tcx);\n+                let sig = cx.tables.node_type(expr.hir_id).fn_sig(cx.tcx);\n                 let from = sig.inputs().skip_binder()[0];\n                 let to = *sig.output().skip_binder();\n                 return Some((&from.sty, &to.sty));"}, {"sha": "34f8fc40597f17a9d8906a511c1ace6b0aa9d452", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                 }\n             }\n             hir::ExprKind::Lit(ref lit) => {\n-                match cx.tables.node_id_to_type(e.hir_id).sty {\n+                match cx.tables.node_type(e.hir_id).sty {\n                     ty::Int(t) => {\n                         match lit.node {\n                             ast::LitKind::Int(v, ast::LitIntType::Signed(_)) |\n@@ -257,7 +257,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n             // Normalize the binop so that the literal is always on the RHS in\n             // the comparison\n             let norm_binop = if swap { rev_binop(binop) } else { binop };\n-            match cx.tables.node_id_to_type(expr.hir_id).sty {\n+            match cx.tables.node_type(expr.hir_id).sty {\n                 ty::Int(int_ty) => {\n                     let (min, max) = int_ty_range(int_ty);\n                     let lit_val: i128 = match lit.node {\n@@ -400,7 +400,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TypeLimits {\n                 repr_str, val, t, actually, t\n             ));\n             if let Some(sugg_ty) =\n-                get_type_suggestion(&cx.tables.node_id_to_type(expr.hir_id).sty, val, negative)\n+                get_type_suggestion(&cx.tables.node_type(expr.hir_id).sty, val, negative)\n             {\n                 if let Some(pos) = repr_str.chars().position(|c| c == 'i' || c == 'u') {\n                     let (sans_suffix, _) = repr_str.split_at(pos);"}, {"sha": "40d3ee9cc0b11266db0d27565fa03a6e288d5771", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1338,7 +1338,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n         let tables = self.tcx.typeck_tables_of(def_id);\n         let node_id = self.tcx.hir().as_local_node_id(def_id).unwrap();\n         let hir_id = self.tcx.hir().node_to_hir_id(node_id);\n-        let kind = match tables.node_id_to_type(hir_id).sty {\n+        let kind = match tables.node_type(hir_id).sty {\n             ty::Generator(def_id, ..) => {\n                 let layout = self.tcx.generator_layout(def_id);\n                 let data = GeneratorData {"}, {"sha": "4d65862375a9605ee5cf293ec82ea60698858eb2", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1178,7 +1178,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let escapes_from = if tcx.is_closure(self.mir_def_id) {\n             let tables = tcx.typeck_tables_of(self.mir_def_id);\n             let mir_hir_id = tcx.hir().def_index_to_hir_id(self.mir_def_id.index);\n-            match tables.node_id_to_type(mir_hir_id).sty {\n+            match tables.node_type(mir_hir_id).sty {\n                 ty::Closure(..) => \"closure\",\n                 ty::Generator(..) => \"generator\",\n                 _ => bug!(\"Closure body doesn't have a closure or generator type\"),"}, {"sha": "a5bf158257700bd5883978b8e09135f2d95bfac2", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -482,7 +482,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                     tcx.type_of(closure_base_def_id)\n                 } else {\n                     let tables = tcx.typeck_tables_of(self.mir_def_id);\n-                    tables.node_id_to_type(self.mir_hir_id)\n+                    tables.node_type(self.mir_hir_id)\n                 };\n \n                 debug!(\"defining_ty (pre-replacement): {:?}\", defining_ty);"}, {"sha": "64ab491cbd5b0fe19a4dc23ea58a63b866259523", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -92,7 +92,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n                     Some(ArgInfo(liberated_closure_env_ty(tcx, id, body_id), None, None, None))\n                 }\n                 ty::Generator(..) => {\n-                    let gen_ty = tcx.body_tables(body_id).node_id_to_type(fn_hir_id);\n+                    let gen_ty = tcx.body_tables(body_id).node_type(fn_hir_id);\n                     Some(ArgInfo(gen_ty, None, None, None))\n                 }\n                 _ => None,\n@@ -263,7 +263,7 @@ fn liberated_closure_env_ty<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                             body_id: hir::BodyId)\n                                             -> Ty<'tcx> {\n     let closure_expr_hir_id = tcx.hir().node_to_hir_id(closure_expr_id);\n-    let closure_ty = tcx.body_tables(body_id).node_id_to_type(closure_expr_hir_id);\n+    let closure_ty = tcx.body_tables(body_id).node_type(closure_expr_hir_id);\n \n     let (closure_def_id, closure_substs) = match closure_ty.sty {\n         ty::Closure(closure_def_id, closure_substs) => (closure_def_id, closure_substs),"}, {"sha": "38c3e68a441f40436ece62022c1ab7387cae0dcf", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -115,7 +115,7 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n pub fn to_expr_ref<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    block: &'tcx hir::Block)\n                                    -> ExprRef<'tcx> {\n-    let block_ty = cx.tables().node_id_to_type(block.hir_id);\n+    let block_ty = cx.tables().node_type(block.hir_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(block.hir_id.local_id);\n     let expr = Expr {\n         ty: block_ty,"}, {"sha": "10d04a80d734152a2fdef5c98ce97cf8b4d1b6b5", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -304,7 +304,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     }\n                 } else {\n                     ExprKind::Call {\n-                        ty: cx.tables().node_id_to_type(fun.hir_id),\n+                        ty: cx.tables().node_type(fun.hir_id),\n                         fun: fun.to_ref(),\n                         args: args.to_ref(),\n                         from_hir_call: true,\n@@ -677,7 +677,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                     let def = cx.tables().qpath_def(qpath, source.hir_id);\n                     cx\n                         .tables()\n-                        .node_id_to_type(source.hir_id)\n+                        .node_type(source.hir_id)\n                         .ty_adt_def()\n                         .and_then(|adt_def| {\n                         match def {\n@@ -919,7 +919,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             debug!(\"convert_path_expr: user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_lazy_const(ty::LazyConst::Evaluated(ty::Const::zero_sized(\n-                    cx.tables().node_id_to_type(expr.hir_id),\n+                    cx.tables().node_type(expr.hir_id),\n                 ))),\n                 user_ty,\n             }\n@@ -940,7 +940,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let user_provided_types = cx.tables.user_provided_types();\n             let user_provided_type = user_provided_types.get(expr.hir_id).map(|u_ty| *u_ty);\n             debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);\n-            match cx.tables().node_id_to_type(expr.hir_id).sty {\n+            match cx.tables().node_type(expr.hir_id).sty {\n                 // A unit struct/variant which is used as a value.\n                 // We return a completely different ExprKind here to account for this special case.\n                 ty::Adt(adt_def, substs) => {\n@@ -980,11 +980,11 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                    index,\n                    closure_expr_id);\n             let var_hir_id = cx.tcx.hir().node_to_hir_id(var_id);\n-            let var_ty = cx.tables().node_id_to_type(var_hir_id);\n+            let var_ty = cx.tables().node_type(var_hir_id);\n \n             // FIXME free regions in closures are not right\n             let closure_ty = cx.tables()\n-                               .node_id_to_type(cx.tcx.hir().node_to_hir_id(closure_expr_id));\n+                               .node_type(cx.tcx.hir().node_to_hir_id(closure_expr_id));\n \n             // FIXME we're just hard-coding the idea that the\n             // signature will be &self or &mut self and hence will\n@@ -1188,7 +1188,7 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);\n-    let var_ty = cx.tables().node_id_to_type(var_hir_id);\n+    let var_ty = cx.tables().node_type(var_hir_id);\n     let captured_var = Expr {\n         temp_lifetime,\n         ty: var_ty,"}, {"sha": "8c2ab6437f9a29d1a554eb368c5dea4a6f3a11af", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n \n             // Then, if the match has no arms, check whether the scrutinee\n             // is uninhabited.\n-            let pat_ty = self.tables.node_id_to_type(scrut.hir_id);\n+            let pat_ty = self.tables.node_type(scrut.hir_id);\n             let module = self.tcx.hir().get_module_parent(scrut.id);\n             if inlined_arms.is_empty() {\n                 let scrutinee_is_uninhabited = if self.tcx.features().exhaustive_patterns {\n@@ -235,7 +235,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 .flat_map(|arm| &arm.0)\n                 .map(|pat| smallvec![pat.0])\n                 .collect();\n-            let scrut_ty = self.tables.node_id_to_type(scrut.hir_id);\n+            let scrut_ty = self.tables.node_type(scrut.hir_id);\n             check_exhaustive(cx, scrut_ty, scrut.span, &matrix);\n         })\n     }\n@@ -507,7 +507,7 @@ fn check_legality_of_move_bindings(cx: &MatchVisitor<'_, '_>,\n                 if let Some(&bm) = cx.tables.pat_binding_modes().get(p.hir_id) {\n                     match bm {\n                         ty::BindByValue(..) => {\n-                            let pat_ty = cx.tables.node_id_to_type(p.hir_id);\n+                            let pat_ty = cx.tables.node_type(p.hir_id);\n                             if !pat_ty.is_copy_modulo_regions(cx.tcx, cx.param_env, pat.span) {\n                                 check_move(p, sub.as_ref().map(|p| &**p), span_vec);\n                             }"}, {"sha": "fc3af3295cc114edfcd0091aed4dc48fe78f69df", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -408,7 +408,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     }\n \n     fn lower_pattern_unadjusted(&mut self, pat: &'tcx hir::Pat) -> Pattern<'tcx> {\n-        let mut ty = self.tables.node_id_to_type(pat.hir_id);\n+        let mut ty = self.tables.node_type(pat.hir_id);\n \n         let kind = match pat.node {\n             PatKind::Wild => PatternKind::Wild,\n@@ -541,7 +541,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n \n             PatKind::Binding(_, id, _, ident, ref sub) => {\n-                let var_ty = self.tables.node_id_to_type(pat.hir_id);\n+                let var_ty = self.tables.node_type(pat.hir_id);\n                 if let ty::Error = var_ty.sty {\n                     // Avoid ICE\n                     return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n@@ -775,7 +775,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                   id: hir::HirId,\n                   span: Span)\n                   -> Pattern<'tcx> {\n-        let ty = self.tables.node_id_to_type(id);\n+        let ty = self.tables.node_type(id);\n         let def = self.tables.qpath_def(qpath, id);\n         let is_associated_const = match def {\n             Def::AssociatedConst(_) => true,"}, {"sha": "4618cd42686fa2e4ffb251e6185051d5a412fc84", "filename": "src/librustc_mir/hair/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_mir%2Fhair%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Futil.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -16,7 +16,7 @@ crate trait UserAnnotatedTyHelpers<'gcx: 'tcx, 'tcx> {\n         let user_provided_types = self.tables().user_provided_types();\n         let mut user_ty = *user_provided_types.get(hir_id)?;\n         debug!(\"user_subts_applied_to_ty_of_hir_id: user_ty={:?}\", user_ty);\n-        match &self.tables().node_id_to_type(hir_id).sty {\n+        match &self.tables().node_type(hir_id).sty {\n             ty::Adt(adt_def, ..) => {\n                 if let UserType::TypeOf(ref mut did, _) = &mut user_ty.value {\n                     *did = adt_def.did;"}, {"sha": "c00f38c7db6f3a1d0ea8ab211002233ebe6440e0", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -244,7 +244,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     }\n \n     fn check_expr(&mut self, ex: &'tcx hir::Expr) -> Promotability {\n-        let node_ty = self.tables.node_id_to_type(ex.hir_id);\n+        let node_ty = self.tables.node_type(ex.hir_id);\n         let mut outer = check_expr_kind(self, ex, node_ty);\n         outer &= check_adjustments(self, ex);\n \n@@ -306,7 +306,7 @@ fn check_expr_kind<'a, 'tcx>(\n             if v.tables.is_method_call(e) {\n                 return NotPromotable;\n             }\n-            match v.tables.node_id_to_type(lhs.hir_id).sty {\n+            match v.tables.node_type(lhs.hir_id).sty {\n                 ty::RawPtr(_) | ty::FnPtr(..) => {\n                     assert!(op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne ||\n                             op.node == hir::BinOpKind::Le || op.node == hir::BinOpKind::Lt ||"}, {"sha": "0681d0d80b8c9269c1f1c351974cb7425be51712", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -933,7 +933,7 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n     // Take node-id of an expression or pattern and check its type for privacy.\n     fn check_expr_pat_type(&mut self, id: hir::HirId, span: Span) -> bool {\n         self.span = span;\n-        if self.visit(self.tables.node_id_to_type(id)) || self.visit(self.tables.node_substs(id)) {\n+        if self.visit(self.tables.node_type(id)) || self.visit(self.tables.node_substs(id)) {\n             return true;\n         }\n         if let Some(adjustments) = self.tables.adjustments().get(id) {\n@@ -980,7 +980,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         self.span = hir_ty.span;\n         if self.in_body {\n             // Types in bodies.\n-            if self.visit(self.tables.node_id_to_type(hir_ty.hir_id)) {\n+            if self.visit(self.tables.node_type(hir_ty.hir_id)) {\n                 return;\n             }\n         } else {"}, {"sha": "836b4ad38ca8805f01521fc865fe83601cd62348", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -16,7 +16,7 @@ log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n rustc = { path = \"../librustc\" }\n arena = { path = \"../libarena\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_metadata = { path = \"../librustc_metadata\" }"}, {"sha": "a82f8df1547257f95f4fa281e1bacc64bc6eeb44", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -22,7 +22,7 @@ use std::cell::Cell;\n use std::ptr;\n use rustc_data_structures::sync::Lrc;\n \n-use crate::errors::Applicability;\n+use errors::Applicability;\n \n use syntax::ast::{Name, Ident};\n use syntax::attr;"}, {"sha": "0cabee71df9fb6ad5db1f8f408e85810b8047409", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,5 +1,6 @@\n use std::cmp::Reverse;\n \n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use log::debug;\n use rustc::hir::def::*;\n use rustc::hir::def::Namespace::*;\n@@ -9,7 +10,6 @@ use syntax::ast::{ExprKind};\n use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n-use crate::errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use crate::macros::ParentScope;\n use crate::resolve_imports::ImportResolver;\n use crate::{import_candidate_to_enum_paths, is_self_type, is_self_value, path_names_to_string};"}, {"sha": "6e5c0acc57026572a043dd6a7e90db09f5d543fb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -10,8 +10,6 @@\n \n #![deny(rust_2018_idioms)]\n \n-use rustc_errors as errors;\n-\n pub use rustc::hir::def::{Namespace, PerNS};\n \n use GenericParameters::*;"}, {"sha": "63f752ac9c942324d8af86b92bd4abcd339e0766", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -27,7 +27,7 @@ use syntax::symbol::{Symbol, keywords};\n use syntax::visit::Visitor;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{Span, DUMMY_SP};\n-use crate::errors::Applicability;\n+use errors::Applicability;\n \n use std::cell::Cell;\n use std::{mem, ptr};"}, {"sha": "187ebf0bc4304207bb32bfe4dde2c66c603e9f82", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -245,7 +245,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n \n             for (id, ident, ..) in collector.collected_idents {\n                 let hir_id = self.tcx.hir().node_to_hir_id(id);\n-                let typ = match self.save_ctxt.tables.node_id_to_type_opt(hir_id) {\n+                let typ = match self.save_ctxt.tables.node_type_opt(hir_id) {\n                     Some(s) => s.to_string(),\n                     None => continue,\n                 };\n@@ -863,7 +863,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n             PatKind::Struct(ref _path, ref fields, _) => {\n                 // FIXME do something with _path?\n                 let hir_id = self.tcx.hir().node_to_hir_id(p.id);\n-                let adt = match self.save_ctxt.tables.node_id_to_type_opt(hir_id) {\n+                let adt = match self.save_ctxt.tables.node_type_opt(hir_id) {\n                     Some(ty) => ty.ty_adt_def().unwrap(),\n                     None => {\n                         visit::walk_pat(self, p);\n@@ -910,7 +910,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                     let hir_id = self.tcx.hir().node_to_hir_id(id);\n                     let typ = self.save_ctxt\n                         .tables\n-                        .node_id_to_type_opt(hir_id)\n+                        .node_type_opt(hir_id)\n                         .map(|t| t.to_string())\n                         .unwrap_or_default();\n                     value.push_str(\": \");\n@@ -979,7 +979,7 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n                 _ => String::new(),\n             };\n             let hir_id = self.tcx.hir().node_to_hir_id(id);\n-            let typ = match self.save_ctxt.tables.node_id_to_type_opt(hir_id) {\n+            let typ = match self.save_ctxt.tables.node_type_opt(hir_id) {\n                 Some(typ) => {\n                     let typ = typ.to_string();\n                     if !value.is_empty() {"}, {"sha": "33e93b582e5401bc40a7c48918c85dae53c891a0", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         node: hir::ExprKind::MethodCall(path, span, expr),\n                         ..\n                     })), 1) = (self.tcx.hir().find(parent), decl.inputs.len()) {\n-                        let self_ty = self.tables.borrow().node_id_to_type(expr[0].hir_id);\n+                        let self_ty = self.tables.borrow().node_type(expr[0].hir_id);\n                         let self_ty = format!(\"{:?}\", self_ty);\n                         let name = path.ident.as_str();\n                         let is_as_ref_able = ("}, {"sha": "4a2d526263c03cb5ae82952e588ca75e7cba2891", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1253,7 +1253,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n         }) => {\n             if gen.is_some() {\n                 let hir_id = tcx.hir().node_to_hir_id(node_id);\n-                return tcx.typeck_tables_of(def_id).node_id_to_type(hir_id);\n+                return tcx.typeck_tables_of(def_id).node_type(hir_id);\n             }\n \n             let substs = ty::ClosureSubsts {"}, {"sha": "6348b411a4c641a08d1e678db1260d7adc4033cc", "filename": "src/libstd/error.rs", "status": "modified", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -667,6 +667,158 @@ impl dyn Error {\n             Err(self)\n         }\n     }\n+\n+    /// Returns an iterator starting with the current error and continuing with\n+    /// recursively calling [`source`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(error_iter)]\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct A;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct B(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"A\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for B {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"B\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for A {}\n+    ///\n+    /// impl Error for B {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// let b = B(Some(Box::new(A)));\n+    ///\n+    /// // let err : Box<Error> = b.into(); // or\n+    /// let err = &b as &(dyn Error);\n+    ///\n+    /// let mut iter = err.iter_chain();\n+    ///\n+    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n+    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n+    /// assert!(iter.next().is_none());\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    ///\n+    /// [`source`]: trait.Error.html#method.source\n+    #[unstable(feature = \"error_iter\", issue = \"58289\")]\n+    #[inline]\n+    pub fn iter_chain(&self) -> ErrorIter {\n+        ErrorIter {\n+            current: Some(self),\n+        }\n+    }\n+\n+    /// Returns an iterator starting with the [`source`] of this error\n+    /// and continuing with recursively calling [`source`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(error_iter)]\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct A;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct B(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct C(Option<Box<dyn Error + 'static>>);\n+    ///\n+    /// impl fmt::Display for A {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"A\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for B {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"B\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl fmt::Display for C {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f, \"C\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for A {}\n+    ///\n+    /// impl Error for B {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for C {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         self.0.as_ref().map(|e| e.as_ref())\n+    ///     }\n+    /// }\n+    ///\n+    /// let b = B(Some(Box::new(A)));\n+    /// let c = C(Some(Box::new(b)));\n+    ///\n+    /// // let err : Box<Error> = c.into(); // or\n+    /// let err = &c as &(dyn Error);\n+    ///\n+    /// let mut iter = err.iter_sources();\n+    ///\n+    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n+    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n+    /// assert!(iter.next().is_none());\n+    /// assert!(iter.next().is_none());\n+    /// ```\n+    ///\n+    /// [`source`]: trait.Error.html#method.source\n+    #[inline]\n+    #[unstable(feature = \"error_iter\", issue = \"58289\")]\n+    pub fn iter_sources(&self) -> ErrorIter {\n+        ErrorIter {\n+            current: self.source(),\n+        }\n+    }\n+}\n+\n+/// An iterator over [`Error`]\n+///\n+/// [`Error`]: trait.Error.html\n+#[unstable(feature = \"error_iter\", issue = \"58289\")]\n+#[derive(Copy, Clone, Debug)]\n+pub struct ErrorIter<'a> {\n+    current: Option<&'a (dyn Error + 'static)>,\n+}\n+\n+#[unstable(feature = \"error_iter\", issue = \"58289\")]\n+impl<'a> Iterator for ErrorIter<'a> {\n+    type Item = &'a (dyn Error + 'static);\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let current = self.current;\n+        self.current = self.current.and_then(Error::source);\n+        current\n+    }\n }\n \n impl dyn Error + Send {"}, {"sha": "b9204d27f539271e4b2b6973bfec19da4a97aede", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -8,7 +8,7 @@\n ///\n /// This allows a program to terminate immediately and provide feedback\n /// to the caller of the program. `panic!` should be used when a program reaches\n-/// an unrecoverable problem.\n+/// an unrecoverable state.\n ///\n /// This macro is the perfect way to assert conditions in example code and in\n /// tests. `panic!` is closely tied with the `unwrap` method of both [`Option`]"}, {"sha": "47a963bcca9f2388b3252252b828fa54501c0f92", "filename": "src/libstd/time.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -245,17 +245,17 @@ impl Instant {\n     /// Returns `Some(t)` where `t` is the time `self + duration` if `t` can be represented as\n     /// `Instant` (which means it's inside the bounds of the underlying data structure), `None`\n     /// otherwise.\n-    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    #[stable(feature = \"time_checked_add\", since = \"1.34.0\")]\n     pub fn checked_add(&self, duration: Duration) -> Option<Instant> {\n-        self.0.checked_add_duration(&duration).map(|t| Instant(t))\n+        self.0.checked_add_duration(&duration).map(Instant)\n     }\n \n     /// Returns `Some(t)` where `t` is the time `self - duration` if `t` can be represented as\n     /// `Instant` (which means it's inside the bounds of the underlying data structure), `None`\n     /// otherwise.\n-    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    #[stable(feature = \"time_checked_add\", since = \"1.34.0\")]\n     pub fn checked_sub(&self, duration: Duration) -> Option<Instant> {\n-        self.0.checked_sub_duration(&duration).map(|t| Instant(t))\n+        self.0.checked_sub_duration(&duration).map(Instant)\n     }\n }\n \n@@ -418,17 +418,17 @@ impl SystemTime {\n     /// Returns `Some(t)` where `t` is the time `self + duration` if `t` can be represented as\n     /// `SystemTime` (which means it's inside the bounds of the underlying data structure), `None`\n     /// otherwise.\n-    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    #[stable(feature = \"time_checked_add\", since = \"1.34.0\")]\n     pub fn checked_add(&self, duration: Duration) -> Option<SystemTime> {\n-        self.0.checked_add_duration(&duration).map(|t| SystemTime(t))\n+        self.0.checked_add_duration(&duration).map(SystemTime)\n     }\n \n     /// Returns `Some(t)` where `t` is the time `self - duration` if `t` can be represented as\n     /// `SystemTime` (which means it's inside the bounds of the underlying data structure), `None`\n     /// otherwise.\n-    #[unstable(feature = \"time_checked_add\", issue = \"55940\")]\n+    #[stable(feature = \"time_checked_add\", since = \"1.34.0\")]\n     pub fn checked_sub(&self, duration: Duration) -> Option<SystemTime> {\n-        self.0.checked_sub_duration(&duration).map(|t| SystemTime(t))\n+        self.0.checked_sub_duration(&duration).map(SystemTime)\n     }\n }\n "}, {"sha": "4a0bb0302ffbc250907e3075641fa5d9beae5af6", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -15,7 +15,7 @@ serialize = { path = \"../libserialize\" }\n log = \"0.4\"\n scoped-tls = \"0.1\"\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "e84adc01cf04a875a0f8c5e625fe5d7348d36366", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 66, "deletions": 61, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,10 +1,10 @@\n //! Parsing and validation of builtin attributes\n \n use crate::ast::{self, Attribute, MetaItem, Name, NestedMetaItemKind};\n-use crate::errors::{Applicability, Handler};\n use crate::feature_gate::{Features, GatedCfg};\n use crate::parse::ParseSess;\n \n+use errors::{Applicability, Handler};\n use syntax_pos::{symbol::Symbol, Span};\n \n use super::{list_contains_name, mark_used, MetaItemKind};\n@@ -596,81 +596,86 @@ fn find_deprecation_generic<'a, I>(sess: &ParseSess,\n     let diagnostic = &sess.span_diagnostic;\n \n     'outer: for attr in attrs_iter {\n-        if attr.path != \"deprecated\" {\n-            continue\n+        if !attr.check_name(\"deprecated\") {\n+            continue;\n         }\n \n-        mark_used(attr);\n-\n         if depr.is_some() {\n             span_err!(diagnostic, item_sp, E0550, \"multiple deprecated attributes\");\n             break\n         }\n \n-        depr = if let Some(metas) = attr.meta_item_list() {\n-            let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n-                if item.is_some() {\n-                    handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()));\n-                    return false\n-                }\n-                if let Some(v) = meta.value_str() {\n-                    *item = Some(v);\n-                    true\n-                } else {\n-                    if let Some(lit) = meta.name_value_literal() {\n-                        handle_errors(\n-                            sess,\n-                            lit.span,\n-                            AttrError::UnsupportedLiteral(\n-                                \"literal in `deprecated` \\\n-                                value must be a string\",\n-                                lit.node.is_bytestr()\n-                            ),\n-                        );\n-                    } else {\n-                        span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\");\n+        let meta = attr.meta().unwrap();\n+        depr = match &meta.node {\n+            MetaItemKind::Word => Some(Deprecation { since: None, note: None }),\n+            MetaItemKind::NameValue(..) => {\n+                meta.value_str().map(|note| {\n+                    Deprecation { since: None, note: Some(note) }\n+                })\n+            }\n+            MetaItemKind::List(list) => {\n+                let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n+                    if item.is_some() {\n+                        handle_errors(sess, meta.span, AttrError::MultipleItem(meta.name()));\n+                        return false\n                     }\n+                    if let Some(v) = meta.value_str() {\n+                        *item = Some(v);\n+                        true\n+                    } else {\n+                        if let Some(lit) = meta.name_value_literal() {\n+                            handle_errors(\n+                                sess,\n+                                lit.span,\n+                                AttrError::UnsupportedLiteral(\n+                                    \"literal in `deprecated` \\\n+                                    value must be a string\",\n+                                    lit.node.is_bytestr()\n+                                ),\n+                            );\n+                        } else {\n+                            span_err!(diagnostic, meta.span, E0551, \"incorrect meta item\");\n+                        }\n \n-                    false\n-                }\n-            };\n+                        false\n+                    }\n+                };\n \n-            let mut since = None;\n-            let mut note = None;\n-            for meta in metas {\n-                match &meta.node {\n-                    NestedMetaItemKind::MetaItem(mi) => {\n-                        match &*mi.name().as_str() {\n-                            \"since\" => if !get(mi, &mut since) { continue 'outer },\n-                            \"note\" => if !get(mi, &mut note) { continue 'outer },\n-                            _ => {\n-                                handle_errors(\n-                                    sess,\n-                                    meta.span,\n-                                    AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n-                                );\n-                                continue 'outer\n+                let mut since = None;\n+                let mut note = None;\n+                for meta in list {\n+                    match &meta.node {\n+                        NestedMetaItemKind::MetaItem(mi) => {\n+                            match &*mi.name().as_str() {\n+                                \"since\" => if !get(mi, &mut since) { continue 'outer },\n+                                \"note\" => if !get(mi, &mut note) { continue 'outer },\n+                                _ => {\n+                                    handle_errors(\n+                                        sess,\n+                                        meta.span,\n+                                        AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n+                                    );\n+                                    continue 'outer\n+                                }\n                             }\n                         }\n-                    }\n-                    NestedMetaItemKind::Literal(lit) => {\n-                        handle_errors(\n-                            sess,\n-                            lit.span,\n-                            AttrError::UnsupportedLiteral(\n-                                \"item in `deprecated` must be a key/value pair\",\n-                                false,\n-                            ),\n-                        );\n-                        continue 'outer\n+                        NestedMetaItemKind::Literal(lit) => {\n+                            handle_errors(\n+                                sess,\n+                                lit.span,\n+                                AttrError::UnsupportedLiteral(\n+                                    \"item in `deprecated` must be a key/value pair\",\n+                                    false,\n+                                ),\n+                            );\n+                            continue 'outer\n+                        }\n                     }\n                 }\n-            }\n \n-            Some(Deprecation {since: since, note: note})\n-        } else {\n-            Some(Deprecation{since: None, note: None})\n-        }\n+                Some(Deprecation { since, note })\n+            }\n+        };\n     }\n \n     depr"}, {"sha": "420f7426ad7863b72bfa5f7c95eb45eae19a37f4", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -165,6 +165,10 @@ fn name_from_path(path: &Path) -> Name {\n }\n \n impl Attribute {\n+    /// Returns `true` if the attribute's path matches the argument. If it matches, then the\n+    /// attribute is marked as used.\n+    ///\n+    /// To check the attribute name without marking it used, use the `path` field directly.\n     pub fn check_name(&self, name: &str) -> bool {\n         let matches = self.path == name;\n         if matches {"}, {"sha": "4e4432a3f334d17a4d5fcfebfcb876cd1d2fb12d", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -9,12 +9,12 @@ use crate::feature_gate::{\n use crate::attr;\n use crate::ast;\n use crate::edition::Edition;\n-use crate::errors::Applicability;\n use crate::mut_visit::*;\n use crate::parse::{token, ParseSess};\n use crate::ptr::P;\n use crate::util::map_in_place::MapInPlace;\n \n+use errors::Applicability;\n use smallvec::SmallVec;\n \n /// A folder that strips out items that do not belong in the current configuration."}, {"sha": "21024eb41ef50bca6cff6a3cad733bd6d293e666", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -15,7 +15,7 @@ use syntax_pos::Span;\n \n use crate::diagnostics::metadata::output_metadata;\n \n-pub use crate::errors::*;\n+pub use errors::*;\n \n // Maximum width of any line in an extended error description (inclusive).\n const MAX_DESCRIPTION_WIDTH: usize = 80;"}, {"sha": "5980261593dbffb7571ed4c1ef46d41806469043", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -4,7 +4,6 @@ use crate::ast::{self, Attribute, Name, PatKind, MetaItem};\n use crate::attr::HasAttrs;\n use crate::source_map::{SourceMap, Spanned, respan};\n use crate::edition::Edition;\n-use crate::errors::{DiagnosticBuilder, DiagnosticId};\n use crate::ext::expand::{self, AstFragment, Invocation};\n use crate::ext::hygiene::{self, Mark, SyntaxContext, Transparency};\n use crate::mut_visit::{self, MutVisitor};\n@@ -15,6 +14,7 @@ use crate::symbol::{keywords, Ident, Symbol};\n use crate::ThinVec;\n use crate::tokenstream::{self, TokenStream};\n \n+use errors::{DiagnosticBuilder, DiagnosticId};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{Span, MultiSpan, DUMMY_SP};\n "}, {"sha": "d398437d7affccfd2d5b9d0decf6a41a7dd32346", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -3,7 +3,6 @@ use crate::ast::{MacStmtStyle, StmtKind, ItemKind};\n use crate::attr::{self, HasAttrs};\n use crate::source_map::{ExpnInfo, MacroBang, MacroAttribute, dummy_spanned, respan};\n use crate::config::StripUnconfigured;\n-use crate::errors::{Applicability, FatalError};\n use crate::ext::base::*;\n use crate::ext::derive::{add_derived_markers, collect_derives};\n use crate::ext::hygiene::{self, Mark, SyntaxContext};\n@@ -20,6 +19,7 @@ use crate::tokenstream::{TokenStream, TokenTree};\n use crate::visit::{self, Visitor};\n use crate::util::map_in_place::MapInPlace;\n \n+use errors::{Applicability, FatalError};\n use smallvec::{smallvec, SmallVec};\n use syntax_pos::{Span, DUMMY_SP, FileName};\n use syntax_pos::hygiene::ExpnFormat;"}, {"sha": "5de1ccec8609e8281050b012ac3702a37688be94", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -75,7 +75,6 @@ pub use ParseResult::*;\n use TokenTreeOrTokenTreeSlice::*;\n \n use crate::ast::Ident;\n-use crate::errors::FatalError;\n use crate::ext::tt::quoted::{self, TokenTree};\n use crate::parse::{Directory, ParseSess};\n use crate::parse::parser::{Parser, PathStyle};\n@@ -84,8 +83,9 @@ use crate::print::pprust;\n use crate::symbol::keywords;\n use crate::tokenstream::{DelimSpan, TokenStream};\n \n+use errors::FatalError;\n use smallvec::{smallvec, SmallVec};\n-use syntax_pos::{self, Span};\n+use syntax_pos::Span;\n \n use rustc_data_structures::fx::FxHashMap;\n use std::collections::hash_map::Entry::{Occupied, Vacant};"}, {"sha": "bd64bb010219b9131a74f424469594a8e1b01ddf", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,6 +1,5 @@\n use crate::{ast, attr};\n use crate::edition::Edition;\n-use crate::errors::FatalError;\n use crate::ext::base::{DummyResult, ExtCtxt, MacResult, SyntaxExtension};\n use crate::ext::base::{NormalTT, TTMacroExpander};\n use crate::ext::expand::{AstFragment, AstFragmentKind};\n@@ -17,6 +16,7 @@ use crate::parse::token::Token::*;\n use crate::symbol::Symbol;\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n \n+use errors::FatalError;\n use syntax_pos::{Span, DUMMY_SP, symbol::Ident};\n use log::debug;\n \n@@ -25,7 +25,7 @@ use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n \n use rustc_data_structures::sync::Lrc;\n-use crate::errors::Applicability;\n+use errors::Applicability;\n \n const VALID_FRAGMENT_NAMES_MSG: &str = \"valid fragment specifiers are \\\n     `ident`, `block`, `stmt`, `expr`, `pat`, `ty`, `lifetime`, `literal`, \\"}, {"sha": "d574b410ccc0625834afb09d3a62929edcdd6107", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -20,11 +20,11 @@ use crate::attr;\n use crate::early_buffered_lints::BufferedEarlyLintId;\n use crate::source_map::Spanned;\n use crate::edition::{ALL_EDITIONS, Edition};\n-use crate::errors::{DiagnosticBuilder, Handler};\n use crate::visit::{self, FnKind, Visitor};\n use crate::parse::ParseSess;\n use crate::symbol::Symbol;\n \n+use errors::{DiagnosticBuilder, Handler};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_target::spec::abi::Abi;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -1185,9 +1185,15 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n     (\"stable\", Whitelisted, template!(List: r#\"feature = \"name\", since = \"version\"\"#), Ungated),\n     (\"unstable\", Whitelisted, template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n                                         Ungated),\n-    (\"deprecated\", Normal, template!(Word, List: r#\"/*opt*/ since = \"version\",\n-                                                    /*opt*/ note = \"reason\"#,\n-                                                    NameValueStr: \"reason\"), Ungated),\n+    (\"deprecated\",\n+        Normal,\n+        template!(\n+            Word,\n+            List: r#\"/*opt*/ since = \"version\", /*opt*/ note = \"reason\"#,\n+            NameValueStr: \"reason\"\n+        ),\n+        Ungated\n+    ),\n \n     (\"rustc_paren_sugar\", Normal, template!(Word), Gated(Stability::Unstable,\n                                         \"unboxed_closures\","}, {"sha": "9acd0d099a0e1134b5d0973e806e799a50f0628d", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -10,12 +10,13 @@\n // FIXME: spec the JSON output properly.\n \n use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::errors::registry::Registry;\n-use crate::errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, SourceMapper};\n-use crate::errors::{DiagnosticId, Applicability};\n-use crate::errors::emitter::{Emitter, EmitterWriter};\n \n-use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n+use errors::registry::Registry;\n+use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, SourceMapper};\n+use errors::{DiagnosticId, Applicability};\n+use errors::emitter::{Emitter, EmitterWriter};\n+\n+use syntax_pos::{MacroBacktrace, Span, SpanLabel, MultiSpan};\n use rustc_data_structures::sync::{self, Lrc};\n use std::io::{self, Write};\n use std::vec;"}, {"sha": "36488b3a69f07c4bd984d34490fdb735acaced72", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -24,7 +24,7 @@\n #[allow(unused_extern_crates)]\n extern crate serialize as rustc_serialize; // used by deriving\n \n-pub use rustc_errors as errors;\n+pub use errors;\n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::bit_set::GrowableBitSet;\n pub use rustc_data_structures::thin_vec::ThinVec;\n@@ -37,7 +37,7 @@ use ast::AttrId;\n macro_rules! panictry {\n     ($e:expr) => ({\n         use std::result::Result::{Ok, Err};\n-        use crate::errors::FatalError;\n+        use errors::FatalError;\n         match $e {\n             Ok(e) => e,\n             Err(mut e) => {\n@@ -52,7 +52,7 @@ macro_rules! panictry {\n macro_rules! panictry_buffer {\n     ($handler:expr, $e:expr) => ({\n         use std::result::Result::{Ok, Err};\n-        use crate::errors::{FatalError, DiagnosticBuilder};\n+        use errors::{FatalError, DiagnosticBuilder};\n         match $e {\n             Ok(e) => e,\n             Err(errs) => {"}, {"sha": "babe0eef20f8c8f932dd4470f96ba6b65776f872", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,10 +1,10 @@\n use crate::ast::{self, Ident};\n use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::errors::{Applicability, FatalError, Diagnostic, DiagnosticBuilder};\n use crate::parse::{token, ParseSess};\n use crate::symbol::{Symbol, keywords};\n \n-use syntax_pos::{self, BytePos, CharPos, Pos, Span, NO_EXPANSION};\n+use errors::{Applicability, FatalError, Diagnostic, DiagnosticBuilder};\n+use syntax_pos::{BytePos, CharPos, Pos, Span, NO_EXPANSION};\n use core::unicode::property::Pattern_White_Space;\n \n use std::borrow::Cow;\n@@ -1882,7 +1882,6 @@ mod tests {\n     use crate::ast::{Ident, CrateConfig};\n     use crate::symbol::Symbol;\n     use crate::source_map::SourceMap;\n-    use crate::errors;\n     use crate::feature_gate::UnstableFeatures;\n     use crate::parse::token;\n     use crate::diagnostics::plugin::ErrorMap;"}, {"sha": "7da4284c0e4aac4c33ad8bedbcd4a809d0db14b9", "filename": "src/libsyntax/parse/lexer/unicode_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Funicode_chars.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -2,7 +2,7 @@\n // http://www.unicode.org/Public/security/10.0.0/confusables.txt\n \n use syntax_pos::{Span, NO_EXPANSION};\n-use crate::errors::{Applicability, DiagnosticBuilder};\n+use errors::{Applicability, DiagnosticBuilder};\n use super::StringReader;\n \n const UNICODE_ARRAY: &[(char, &str, char)] = &["}, {"sha": "b2d4d97d57d89dee39799892d861ac213346d0c9", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -3,14 +3,14 @@\n use crate::ast::{self, CrateConfig, NodeId};\n use crate::early_buffered_lints::{BufferedEarlyLint, BufferedEarlyLintId};\n use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::errors::{FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n use crate::feature_gate::UnstableFeatures;\n use crate::parse::parser::Parser;\n use crate::symbol::Symbol;\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::diagnostics::plugin::ErrorMap;\n use crate::print::pprust::token_to_string;\n \n+use errors::{FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::sync::{Lrc, Lock};\n use syntax_pos::{Span, SourceFile, FileName, MultiSpan};\n use log::debug;"}, {"sha": "e22047938e51821d564878b9c781ffa5941ba5b7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -33,7 +33,6 @@ use crate::ast::{RangeEnd, RangeSyntax};\n use crate::{ast, attr};\n use crate::ext::base::DummyResult;\n use crate::source_map::{self, SourceMap, Spanned, respan};\n-use crate::errors::{self, Applicability, DiagnosticBuilder, DiagnosticId};\n use crate::parse::{self, SeqSep, classify, token};\n use crate::parse::lexer::{TokenAndSpan, UnmatchedBrace};\n use crate::parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n@@ -47,8 +46,9 @@ use crate::ThinVec;\n use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::symbol::{Symbol, keywords};\n \n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_target::spec::abi::{self, Abi};\n-use syntax_pos::{self, Span, MultiSpan, BytePos, FileName};\n+use syntax_pos::{Span, MultiSpan, BytePos, FileName};\n use log::{debug, trace};\n \n use std::borrow::Cow;\n@@ -6538,8 +6538,14 @@ impl<'a> Parser<'a> {\n             let bounds = self.parse_generic_bounds()?;\n             tps.where_clause = self.parse_where_clause()?;\n             self.expect(&token::Semi)?;\n+            if is_auto == IsAuto::Yes {\n+                let msg = \"trait aliases cannot be `auto`\";\n+                self.struct_span_err(self.prev_span, msg)\n+                    .span_label(self.prev_span, msg)\n+                    .emit();\n+            }\n             if unsafety != Unsafety::Normal {\n-                let msg = \"trait aliases cannot be unsafe\";\n+                let msg = \"trait aliases cannot be `unsafe`\";\n                 self.struct_span_err(self.prev_span, msg)\n                     .span_label(self.prev_span, msg)\n                     .emit();"}, {"sha": "5e0cf9eea78b85a6f330e7edd5d27c84d7af1f26", "filename": "src/libsyntax/show_span.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fshow_span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fshow_span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fshow_span.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -6,7 +6,6 @@\n use std::str::FromStr;\n \n use crate::ast;\n-use crate::errors;\n use crate::visit;\n use crate::visit::Visitor;\n "}, {"sha": "62a6972122abd5a80b5e56684a9d343a7f4a1813", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -24,7 +24,7 @@ use std::fs;\n use std::io;\n use log::debug;\n \n-use crate::errors::SourceMapper;\n+use errors::SourceMapper;\n \n /// Returns the span itself if it doesn't come from a macro expansion,\n /// otherwise return the call site span up to the `enclosing_sp` by"}, {"sha": "56290fa771ba9c58b533cc8f7e1f324f95b7688c", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -12,11 +12,10 @@ use std::vec;\n \n use log::debug;\n use smallvec::{smallvec, SmallVec};\n-use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, SourceFile, BytePos};\n+use syntax_pos::{DUMMY_SP, NO_EXPANSION, Span, SourceFile, BytePos};\n \n use crate::attr::{self, HasAttrs};\n use crate::source_map::{self, SourceMap, ExpnInfo, MacroAttribute, dummy_spanned, respan};\n-use crate::errors;\n use crate::config;\n use crate::entry::{self, EntryPointType};\n use crate::ext::base::{ExtCtxt, Resolver};"}, {"sha": "cf39090e1888b9509eec18e5b984c29dd1cfb096", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,8 +1,9 @@\n use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::errors::Handler;\n-use crate::errors::emitter::EmitterWriter;\n use crate::with_globals;\n \n+use errors::Handler;\n+use errors::emitter::EmitterWriter;\n+\n use std::io;\n use std::io::prelude::*;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "773f0948a8a108b7c5221c30dae69b03aad0c6c4", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -11,7 +11,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n fmt_macros = { path = \"../libfmt_macros\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n+errors = { path = \"../librustc_errors\", package = \"rustc_errors\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "8edd0e1ae3884239b21a1b437cd0e1323108d22f", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -4,7 +4,7 @@ use State::*;\n \n use rustc_data_structures::thin_vec::ThinVec;\n \n-use crate::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};"}, {"sha": "d2c397e0eccb5259770c8fd21dd8354a5a2c5028", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,4 +1,4 @@\n-use crate::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n \n use syntax::ast::{self, *};\n use syntax::source_map::Spanned;"}, {"sha": "090d730289d26b1655eabeaeba5ca76156fa15fd", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -2,7 +2,7 @@\n /// a literal `true` or `false` based on whether the given cfg matches the\n /// current compilation environment.\n \n-use crate::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};"}, {"sha": "6aba4d83cd27c21b31fa38f7eda769473cdd8eab", "filename": "src/libsyntax_ext/deriving/custom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcustom.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,7 +1,7 @@\n-use crate::errors::FatalError;\n use crate::proc_macro_impl::EXEC_STRATEGY;\n use crate::proc_macro_server;\n \n+use errors::FatalError;\n use syntax::ast::{self, ItemKind, Attribute, Mac};\n use syntax::attr::{mark_used, mark_known};\n use syntax::source_map::Span;"}, {"sha": "5efa6b36f675dce2bfc6099525e77feb48b1b453", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -3,8 +3,8 @@ use Position::*;\n \n use fmt_macros as parse;\n \n-use crate::errors::DiagnosticBuilder;\n-use crate::errors::Applicability;\n+use errors::DiagnosticBuilder;\n+use errors::Applicability;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};"}, {"sha": "2baf530aedae7e37386ae7ae68104e64c8dfcf20", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -8,7 +8,7 @@\n /// LLVM's `module asm \"some assembly here\"`. All of LLVM's caveats\n /// therefore apply.\n \n-use crate::errors::DiagnosticBuilder;\n+use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax::source_map::respan;"}, {"sha": "aa472eee3cab338541952aacf5baf63415cef65b", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -16,8 +16,6 @@\n \n extern crate proc_macro;\n \n-use rustc_errors as errors;\n-\n mod diagnostics;\n \n mod asm;"}, {"sha": "d8f8decef39b18418ea130f5b3d6bced2f5b03e7", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,7 +1,6 @@\n use std::mem;\n \n use crate::deriving;\n-use crate::errors;\n \n use syntax::ast::{self, Ident};\n use syntax::attr;"}, {"sha": "f0fc6392cd73f593f7e963e8c4342f8ce2182b37", "filename": "src/libsyntax_ext/proc_macro_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fproc_macro_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_impl.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,6 +1,6 @@\n-use crate::errors::FatalError;\n use crate::proc_macro_server;\n \n+use errors::FatalError;\n use syntax::source_map::Span;\n use syntax::ext::base::{self, *};\n use syntax::tokenstream::TokenStream;"}, {"sha": "fd82dac5ab6d8a0ee45ad360dc7c1a5728400942", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -1,4 +1,4 @@\n-use crate::errors::{self, Diagnostic, DiagnosticBuilder};\n+use errors::{Diagnostic, DiagnosticBuilder};\n \n use std::panic;\n "}, {"sha": "33fc2bc1540d3f5831631239dd54ea45ed3b12e4", "filename": "src/test/codegen/no-dllimport-w-cross-lang-lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fcodegen%2Fno-dllimport-w-cross-lang-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fcodegen%2Fno-dllimport-w-cross-lang-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-dllimport-w-cross-lang-lto.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -3,7 +3,7 @@\n \n // no-prefer-dynamic\n // only-msvc\n-// compile-flags: -Z cross-lang-lto\n+// compile-flags: -C linker-plugin-lto\n \n #![crate_type = \"rlib\"]\n "}, {"sha": "3fdf6ab6d002f409fc610ed7da018e8bcb3cfdd9", "filename": "src/test/codegen/target-cpu-on-functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-cpu-on-functions.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -3,7 +3,7 @@\n \n // no-prefer-dynamic\n // ignore-tidy-linelength\n-// compile-flags: -C no-prepopulate-passes -C panic=abort -Z cross-lang-lto -Cpasses=name-anon-globals\n+// compile-flags: -C no-prepopulate-passes -C panic=abort -C linker-plugin-lto -Cpasses=name-anon-globals\n \n #![crate_type = \"staticlib\"]\n "}, {"sha": "b3c5fb2d79647bffde8f7bb8add1530e9e9c2727", "filename": "src/test/run-make-fulldeps/cross-lang-lto-clang/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-clang%2FMakefile?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -8,7 +8,7 @@\n all: cpp-executable rust-executable\n \n cpp-executable:\n-\t$(RUSTC) -Zcross-lang-lto=on -o $(TMPDIR)/librustlib-xlto.a -Copt-level=2 -Ccodegen-units=1 ./rustlib.rs\n+\t$(RUSTC) -Clinker-plugin-lto=on -o $(TMPDIR)/librustlib-xlto.a -Copt-level=2 -Ccodegen-units=1 ./rustlib.rs\n \t$(CLANG) -flto=thin -fuse-ld=lld -L $(TMPDIR) -lrustlib-xlto -o $(TMPDIR)/cmain ./cmain.c -O3\n \t# Make sure we don't find a call instruction to the function we expect to\n \t# always be inlined.\n@@ -20,6 +20,6 @@ cpp-executable:\n rust-executable:\n \t$(CLANG) ./clib.c -flto=thin -c -o $(TMPDIR)/clib.o -O2\n \t(cd $(TMPDIR); $(AR) crus ./libxyz.a ./clib.o)\n-\t$(RUSTC) -Zcross-lang-lto=on -L$(TMPDIR) -Copt-level=2 -Clinker=$(CLANG) -Clink-arg=-fuse-ld=lld ./main.rs -o $(TMPDIR)/rsmain\n+\t$(RUSTC) -Clinker-plugin-lto=on -L$(TMPDIR) -Copt-level=2 -Clinker=$(CLANG) -Clink-arg=-fuse-ld=lld ./main.rs -o $(TMPDIR)/rsmain\n \tllvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -e \"call.*c_never_inlined\"\n \tllvm-objdump -d $(TMPDIR)/rsmain | $(CGREP) -v -e \"call.*c_always_inlined\""}, {"sha": "c9da06ff93f868356b47e6b4318979cc8b1261cf", "filename": "src/test/run-make-fulldeps/cross-lang-lto-upstream-rlibs/Makefile", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto-upstream-rlibs%2FMakefile?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -5,13 +5,13 @@\n ifndef IS_WINDOWS\n \n # This test makes sure that we don't loose upstream object files when compiling\n-# staticlibs with -Zcross-lang-lto\n+# staticlibs with -C linker-plugin-lto\n \n all: staticlib.rs upstream.rs\n-\t$(RUSTC) upstream.rs -Z cross-lang-lto -Ccodegen-units=1\n+\t$(RUSTC) upstream.rs -C linker-plugin-lto -Ccodegen-units=1\n \n \t# Check No LTO\n-\t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -L. -o $(TMPDIR)/staticlib.a\n+\t$(RUSTC) staticlib.rs -C linker-plugin-lto -Ccodegen-units=1 -L. -o $(TMPDIR)/staticlib.a\n \t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n \t# Make sure the upstream object file was included\n \tls $(TMPDIR)/upstream.*.rcgu.o\n@@ -20,8 +20,8 @@ all: staticlib.rs upstream.rs\n \trm $(TMPDIR)/*\n \n \t# Check ThinLTO\n-\t$(RUSTC) upstream.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin\n-\t$(RUSTC) staticlib.rs -Z cross-lang-lto -Ccodegen-units=1 -Clto=thin -L. -o $(TMPDIR)/staticlib.a\n+\t$(RUSTC) upstream.rs -C linker-plugin-lto -Ccodegen-units=1 -Clto=thin\n+\t$(RUSTC) staticlib.rs -C linker-plugin-lto -Ccodegen-units=1 -Clto=thin -L. -o $(TMPDIR)/staticlib.a\n \t(cd $(TMPDIR); $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x ./staticlib.a)\n \tls $(TMPDIR)/upstream.*.rcgu.o\n "}, {"sha": "43bd05a73592c75cab1243016e0edfc52a5a6b81", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -7,14 +7,14 @@ ifndef IS_WINDOWS\n \n # This test makes sure that the object files we generate are actually\n # LLVM bitcode files (as used by linker LTO plugins) when compiling with\n-# -Z cross-lang-lto.\n+# -Clinker-plugin-lto.\n \n # this only succeeds for bitcode files\n ASSERT_IS_BITCODE_OBJ=($(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-bcanalyzer $(1))\n EXTRACT_OBJS=(cd $(TMPDIR); rm -f ./*.o; $(LD_LIB_PATH_ENVVAR)=$(REAL_LD_LIBRARY_PATH) llvm-ar x $(1))\n \n-BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1\n-BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Z cross-lang-lto=on -Ccodegen-units=1 --emit=obj\n+BUILD_LIB=$(RUSTC) lib.rs -Copt-level=2 -Clinker-plugin-lto -Ccodegen-units=1\n+BUILD_EXE=$(RUSTC) main.rs -Copt-level=2 -Clinker-plugin-lto -Ccodegen-units=1 --emit=obj\n \n all: staticlib staticlib-fat-lto staticlib-thin-lto rlib exe cdylib rdylib\n "}, {"sha": "18a33438a23461526bc2ece44b97bef31df21fa9", "filename": "src/test/rustdoc/deprecated.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Frustdoc%2Fdeprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Frustdoc%2Fdeprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -28,3 +28,8 @@ pub struct V;\n //      'Deprecated$'\n #[deprecated]\n pub struct W;\n+\n+// @matches deprecated/struct.X.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecated: shorthand reason$'\n+#[deprecated = \"shorthand reason\"]\n+pub struct X;"}, {"sha": "a559908b792bb2043951916d2ce8ffb73237b91d", "filename": "src/test/ui/deprecation/deprecation-sanity.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -15,6 +15,12 @@ mod bogus_attribute_types_1 {\n \n     #[deprecated(since(b), note = \"a\")] //~ ERROR incorrect meta item\n     fn f6() { }\n+\n+    #[deprecated(note = b\"test\")] //~ ERROR literal in `deprecated` value must be a string\n+    fn f7() { }\n+\n+    #[deprecated(\"test\")] //~ ERROR item in `deprecated` must be a key/value pair\n+    fn f8() { }\n }\n \n #[deprecated(since = \"a\", note = \"b\")]"}, {"sha": "a071a4fc10d51fad6a22db1ae5b5beaa5087307b", "filename": "src/test/ui/deprecation/deprecation-sanity.stderr", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecation-sanity.stderr?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -28,19 +28,31 @@ error[E0551]: incorrect meta item\n LL |     #[deprecated(since(b), note = \"a\")] //~ ERROR incorrect meta item\n    |                  ^^^^^^^^\n \n+error[E0565]: literal in `deprecated` value must be a string\n+  --> $DIR/deprecation-sanity.rs:19:25\n+   |\n+LL |     #[deprecated(note = b\"test\")] //~ ERROR literal in `deprecated` value must be a string\n+   |                         ^^^^^^^ help: consider removing the prefix: `\"test\"`\n+\n+error[E0565]: item in `deprecated` must be a key/value pair\n+  --> $DIR/deprecation-sanity.rs:22:18\n+   |\n+LL |     #[deprecated(\"test\")] //~ ERROR item in `deprecated` must be a key/value pair\n+   |                  ^^^^^^\n+\n error[E0550]: multiple deprecated attributes\n-  --> $DIR/deprecation-sanity.rs:22:1\n+  --> $DIR/deprecation-sanity.rs:28:1\n    |\n LL | fn multiple1() { } //~ ERROR multiple deprecated attributes\n    | ^^^^^^^^^^^^^^^^^^\n \n error[E0538]: multiple 'since' items\n-  --> $DIR/deprecation-sanity.rs:24:27\n+  --> $DIR/deprecation-sanity.rs:30:27\n    |\n LL | #[deprecated(since = \"a\", since = \"b\", note = \"c\")] //~ ERROR multiple 'since' items\n    |                           ^^^^^^^^^^^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 9 previous errors\n \n-Some errors occurred: E0538, E0541, E0550, E0551.\n+Some errors occurred: E0538, E0541, E0550, E0551, E0565.\n For more information about an error, try `rustc --explain E0538`."}, {"sha": "7e0d8cdfc2f723f1b28a998a1c9d2de7643bfa20", "filename": "src/test/ui/deprecation/invalid-literal.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -0,0 +1,4 @@\n+#[deprecated = b\"test\"] //~ ERROR attribute must be of the form\n+fn foo() {}\n+\n+fn main() {}"}, {"sha": "f13d599c0b137c6f5342ef34bfb626709bb30707", "filename": "src/test/ui/deprecation/invalid-literal.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Finvalid-literal.stderr?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -0,0 +1,8 @@\n+error: attribute must be of the form `#[deprecated]` or `#[deprecated(/*opt*/ since = \"version\", /*opt*/ note = \"reason)]` or `#[deprecated = \"reason\"]`\n+  --> $DIR/invalid-literal.rs:1:1\n+   |\n+LL | #[deprecated = b\"test\"] //~ ERROR attribute must be of the form\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "5948d45b6987fcd778123f9e06a1f74e77d6b7c0", "filename": "src/test/ui/traits/trait-alias-syntax.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-syntax.rs?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -0,0 +1,7 @@\n+#![feature(trait_alias)]\n+\n+trait Foo {}\n+auto trait A = Foo; //~ ERROR trait aliases cannot be `auto`\n+unsafe trait B = Foo; //~ ERROR trait aliases cannot be `unsafe`\n+\n+fn main() {}"}, {"sha": "fc96f6274393d6b33b250556d9093362d7fba845", "filename": "src/test/ui/traits/trait-alias-syntax.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/827a141466e7bb85eb3c030600878a2c606019e9/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-syntax.stderr?ref=827a141466e7bb85eb3c030600878a2c606019e9", "patch": "@@ -0,0 +1,14 @@\n+error: trait aliases cannot be `auto`\n+  --> $DIR/trait-alias-syntax.rs:4:19\n+   |\n+LL | auto trait A = Foo; //~ ERROR trait aliases cannot be `auto`\n+   |                   ^ trait aliases cannot be `auto`\n+\n+error: trait aliases cannot be `unsafe`\n+  --> $DIR/trait-alias-syntax.rs:5:21\n+   |\n+LL | unsafe trait B = Foo; //~ ERROR trait aliases cannot be `unsafe`\n+   |                     ^ trait aliases cannot be `unsafe`\n+\n+error: aborting due to 2 previous errors\n+"}]}