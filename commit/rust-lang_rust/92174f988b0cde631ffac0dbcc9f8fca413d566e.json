{"sha": "92174f988b0cde631ffac0dbcc9f8fca413d566e", "node_id": "C_kwDOAAsO6NoAKDkyMTc0Zjk4OGIwY2RlNjMxZmZhYzBkYmNjOWY4ZmNhNDEzZDU2NmU", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-07-07T02:07:52Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-07-07T05:44:54Z"}, "message": "Stop emitting CET prologues for naked functions\n\nWe can apply nocf_check as a hack for now.", "tree": {"sha": "5f7cba58113c5d756c09e837a9375e558a55b061", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f7cba58113c5d756c09e837a9375e558a55b061"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92174f988b0cde631ffac0dbcc9f8fca413d566e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92174f988b0cde631ffac0dbcc9f8fca413d566e", "html_url": "https://github.com/rust-lang/rust/commit/92174f988b0cde631ffac0dbcc9f8fca413d566e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92174f988b0cde631ffac0dbcc9f8fca413d566e/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8824d131619e58a38bde8bcf56401629b91a204a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8824d131619e58a38bde8bcf56401629b91a204a", "html_url": "https://github.com/rust-lang/rust/commit/8824d131619e58a38bde8bcf56401629b91a204a"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "8c72f7dc06f25f86ed8930749a212b61ab97c49b", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/92174f988b0cde631ffac0dbcc9f8fca413d566e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92174f988b0cde631ffac0dbcc9f8fca413d566e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=92174f988b0cde631ffac0dbcc9f8fca413d566e", "patch": "@@ -299,6 +299,10 @@ pub fn from_fn_attrs<'ll, 'tcx>(\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::NAKED) {\n         to_add.push(AttributeKind::Naked.create_attr(cx.llcx));\n+        // HACK(jubilee): \"indirect branch tracking\" works by attaching prologues to functions.\n+        // And it is a module-level attribute, so the alternative is pulling naked functions into new LLVM modules.\n+        // Otherwise LLVM's \"naked\" functions come with endbr prefixes per https://github.com/rust-lang/rust/issues/98768\n+        to_add.push(AttributeKind::NoCfCheck.create_attr(cx.llcx));\n     }\n     if codegen_fn_attrs.flags.contains(CodegenFnAttrFlags::ALLOCATOR) {\n         // apply to return place instead of function (unlike all other attributes applied in this function)"}, {"sha": "2c8e804fff58170fa7af0dad3b9d9d5f79c22250", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92174f988b0cde631ffac0dbcc9f8fca413d566e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92174f988b0cde631ffac0dbcc9f8fca413d566e/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=92174f988b0cde631ffac0dbcc9f8fca413d566e", "patch": "@@ -191,6 +191,7 @@ pub enum AttributeKind {\n     StackProtect = 32,\n     NoUndef = 33,\n     SanitizeMemTag = 34,\n+    NoCfCheck = 35,\n }\n \n /// LLVMIntPredicate"}, {"sha": "9fe84a6309b9c1cc26af214ae87a93e362718048", "filename": "compiler/rustc_llvm/llvm-wrapper/LLVMWrapper.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/92174f988b0cde631ffac0dbcc9f8fca413d566e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "raw_url": "https://github.com/rust-lang/rust/raw/92174f988b0cde631ffac0dbcc9f8fca413d566e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FLLVMWrapper.h?ref=92174f988b0cde631ffac0dbcc9f8fca413d566e", "patch": "@@ -84,6 +84,7 @@ enum LLVMRustAttribute {\n   StackProtect = 32,\n   NoUndef = 33,\n   SanitizeMemTag = 34,\n+  NoCfCheck = 35,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "c4a2f6d0640e1566e610efe4fd49257b15a5850c", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92174f988b0cde631ffac0dbcc9f8fca413d566e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/92174f988b0cde631ffac0dbcc9f8fca413d566e/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=92174f988b0cde631ffac0dbcc9f8fca413d566e", "patch": "@@ -176,6 +176,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::NoAlias;\n   case NoCapture:\n     return Attribute::NoCapture;\n+  case NoCfCheck:\n+    return Attribute::NoCfCheck;\n   case NoInline:\n     return Attribute::NoInline;\n   case NonNull:"}, {"sha": "bedcded731d95a015962e30fb636e6a58f67ac21", "filename": "src/test/assembly/x86_64-naked-fn-no-cet-prolog.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/92174f988b0cde631ffac0dbcc9f8fca413d566e/src%2Ftest%2Fassembly%2Fx86_64-naked-fn-no-cet-prolog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92174f988b0cde631ffac0dbcc9f8fca413d566e/src%2Ftest%2Fassembly%2Fx86_64-naked-fn-no-cet-prolog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fx86_64-naked-fn-no-cet-prolog.rs?ref=92174f988b0cde631ffac0dbcc9f8fca413d566e", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -C no-prepopulate-passes -Zcf-protection=full\n+// assembly-output: emit-asm\n+// needs-asm-support\n+// only-x86_64\n+\n+#![crate_type = \"lib\"]\n+#![feature(naked_functions)]\n+use std::arch::asm;\n+\n+// The problem at hand: Rust has adopted a fairly strict meaning for \"naked functions\",\n+// meaning \"no prologue whatsoever, no, really, not one instruction.\"\n+// Unfortunately, x86's control-flow enforcement, specifically indirect branch protection,\n+// works by using an instruction for each possible landing site,\n+// and LLVM implements this via making sure of that.\n+#[no_mangle]\n+#[naked]\n+pub unsafe extern \"sysv64\" fn will_halt() -> ! {\n+    // CHECK-NOT: endbr{{32|64}}\n+    // CHECK: hlt\n+    asm!(\"hlt\", options(noreturn))\n+}\n+\n+// what about aarch64?\n+// \"branch-protection\"=false"}, {"sha": "c0ac69f4ed77887847bd5421314ce21daa27acd7", "filename": "src/test/codegen/naked-noinline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92174f988b0cde631ffac0dbcc9f8fca413d566e/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92174f988b0cde631ffac0dbcc9f8fca413d566e/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-noinline.rs?ref=92174f988b0cde631ffac0dbcc9f8fca413d566e", "patch": "@@ -28,4 +28,4 @@ pub unsafe fn g() {\n     f();\n }\n \n-// CHECK: attributes [[ATTR]] = { naked noinline{{.*}} }\n+// CHECK: attributes [[ATTR]] = { naked{{.*}}noinline{{.*}} }"}]}