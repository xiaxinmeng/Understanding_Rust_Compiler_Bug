{"sha": "bb6a91dc949218c4cc4990cc6f50bbdd58df7648", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNmE5MWRjOTQ5MjE4YzRjYzQ5OTBjYzZmNTBiYmRkNThkZjc2NDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T14:17:49Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-03T12:38:36Z"}, "message": "adjust for ptr_op now being called type-based", "tree": {"sha": "4427f1d701115a9ebb31d884424b9719e596dcb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4427f1d701115a9ebb31d884424b9719e596dcb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb6a91dc949218c4cc4990cc6f50bbdd58df7648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6a91dc949218c4cc4990cc6f50bbdd58df7648", "html_url": "https://github.com/rust-lang/rust/commit/bb6a91dc949218c4cc4990cc6f50bbdd58df7648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb6a91dc949218c4cc4990cc6f50bbdd58df7648/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "247786dba612b7103c4eb694f80f28b75d2e242b", "url": "https://api.github.com/repos/rust-lang/rust/commits/247786dba612b7103c4eb694f80f28b75d2e242b", "html_url": "https://github.com/rust-lang/rust/commit/247786dba612b7103c4eb694f80f28b75d2e242b"}], "stats": {"total": 52, "additions": 24, "deletions": 28}, "files": [{"sha": "7fa79d822c35b6763758e46127c56475ac0aa4b0", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb6a91dc949218c4cc4990cc6f50bbdd58df7648/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6a91dc949218c4cc4990cc6f50bbdd58df7648/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=bb6a91dc949218c4cc4990cc6f50bbdd58df7648", "patch": "@@ -179,13 +179,13 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn ptr_op(\n+    fn binary_ptr_op(\n         ecx: &rustc_mir::interpret::InterpCx<'mir, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Tag>,\n         right: ImmTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, (Scalar<Tag>, bool)> {\n-        ecx.ptr_op(bin_op, left, right)\n+        ecx.binary_ptr_op(bin_op, left, right)\n     }\n \n     fn box_alloc("}, {"sha": "d564b5f19f95b0c38912217190837fc6138becbd", "filename": "src/operator.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bb6a91dc949218c4cc4990cc6f50bbdd58df7648/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb6a91dc949218c4cc4990cc6f50bbdd58df7648/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=bb6a91dc949218c4cc4990cc6f50bbdd58df7648", "patch": "@@ -9,7 +9,7 @@ pub trait EvalContextExt<'tcx> {\n         ptr: Pointer<Tag>\n     ) -> InterpResult<'tcx>;\n \n-    fn ptr_op(\n+    fn binary_ptr_op(\n         &self,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Tag>,\n@@ -46,7 +46,7 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         ptr.check_in_alloc(size, CheckInAllocMsg::InboundsTest)\n     }\n \n-    fn ptr_op(\n+    fn binary_ptr_op(\n         &self,\n         bin_op: mir::BinOp,\n         left: ImmTy<'tcx, Tag>,\n@@ -56,21 +56,6 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n \n         trace!(\"ptr_op: {:?} {:?} {:?}\", *left, bin_op, *right);\n \n-        // Treat everything of integer *type* at integer *value*.\n-        if left.layout.ty.is_integral() {\n-            // This is actually an integer operation, so dispatch back to the core engine.\n-            // TODO: Once intptrcast is the default, librustc_mir should never even call us\n-            // for integer types.\n-            assert!(right.layout.ty.is_integral());\n-            let l_bits = self.force_bits(left.imm.to_scalar()?, left.layout.size)?;\n-            let r_bits = self.force_bits(right.imm.to_scalar()?, right.layout.size)?;\n-\n-            let left = ImmTy::from_scalar(Scalar::from_uint(l_bits, left.layout.size), left.layout);\n-            let right = ImmTy::from_scalar(Scalar::from_uint(r_bits, left.layout.size), right.layout);\n-\n-            return self.binary_op(bin_op, left, right);\n-        }\n-\n         // Operations that support fat pointers\n         match bin_op {\n             Eq | Ne => {\n@@ -92,7 +77,6 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n         let left = left.to_scalar()?;\n         let right_layout = right.layout;\n         let right = right.to_scalar()?;\n-        debug_assert!(left.is_ptr() || right.is_ptr() || bin_op == Offset);\n \n         Ok(match bin_op {\n             Offset => {\n@@ -109,8 +93,8 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n             }\n             // These need both to be pointer, and fail if they are not in the same location\n             Lt | Le | Gt | Ge | Sub if left.is_ptr() && right.is_ptr() => {\n-                let left = left.to_ptr().expect(\"we checked is_ptr\");\n-                let right = right.to_ptr().expect(\"we checked is_ptr\");\n+                let left = left.assert_ptr();\n+                let right = right.assert_ptr();\n                 if left.alloc_id == right.alloc_id {\n                     let res = match bin_op {\n                         Lt => left.offset < right.offset,\n@@ -136,10 +120,22 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                     throw_unsup!(InvalidPointerMath)\n                 }\n             }\n+            Lt | Le | Gt | Ge if left.is_bits() && right.is_bits() => {\n+                let left = left.assert_bits(self.memory().pointer_size());\n+                let right = right.assert_bits(self.memory().pointer_size());\n+                let res = match bin_op {\n+                    Lt => left < right,\n+                    Le => left <= right,\n+                    Gt => left > right,\n+                    Ge => left >= right,\n+                    _ => bug!(\"We already established it has to be one of these operators.\"),\n+                };\n+                Ok((Scalar::from_bool(res), false))\n+            }\n             Gt | Ge if left.is_ptr() && right.is_bits() => {\n                 // \"ptr >[=] integer\" can be tested if the integer is small enough.\n-                let left = left.to_ptr().expect(\"we checked is_ptr\");\n-                let right = right.to_bits(self.memory().pointer_size()).expect(\"we checked is_bits\");\n+                let left = left.assert_ptr();\n+                let right = right.assert_bits(self.memory().pointer_size());\n                 let (_alloc_size, alloc_align) = self.memory()\n                     .get_size_and_align(left.alloc_id, AllocCheck::MaybeDead)\n                     .expect(\"alloc info with MaybeDead cannot fail\");\n@@ -162,8 +158,8 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                 // Cast to i128 is fine as we checked the kind to be ptr-sized\n                 self.ptr_int_arithmetic(\n                     bin_op,\n-                    left.to_ptr().expect(\"we checked is_ptr\"),\n-                    right.to_bits(self.memory().pointer_size()).expect(\"we checked is_bits\"),\n+                    left.assert_ptr(),\n+                    right.assert_bits(self.memory().pointer_size()),\n                     right_layout.abi.is_signed(),\n                 )?\n             }\n@@ -172,8 +168,8 @@ impl<'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'mir, 'tcx> {\n                 // This is a commutative operation, just swap the operands\n                 self.ptr_int_arithmetic(\n                     bin_op,\n-                    right.to_ptr().expect(\"we checked is_ptr\"),\n-                    left.to_bits(self.memory().pointer_size()).expect(\"we checked is_bits\"),\n+                    right.assert_ptr(),\n+                    left.assert_bits(self.memory().pointer_size()),\n                     left_layout.abi.is_signed(),\n                 )?\n             }"}]}