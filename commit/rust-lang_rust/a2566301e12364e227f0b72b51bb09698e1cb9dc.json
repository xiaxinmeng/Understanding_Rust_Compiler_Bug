{"sha": "a2566301e12364e227f0b72b51bb09698e1cb9dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNTY2MzAxZTEyMzY0ZTIyN2YwYjcyYjUxYmIwOTY5OGUxY2I5ZGM=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-17T22:37:24Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-05-17T23:03:07Z"}, "message": "Add an option to the parser to avoid parsing out of line modules\n\nThis is useful if parsing from stdin or a String and don't want to try and read in a module from another file. Instead we just leave a stub in the AST.", "tree": {"sha": "fa4d5dcdc8ee58dc843018f8ecc599a5b733596d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa4d5dcdc8ee58dc843018f8ecc599a5b733596d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2566301e12364e227f0b72b51bb09698e1cb9dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2566301e12364e227f0b72b51bb09698e1cb9dc", "html_url": "https://github.com/rust-lang/rust/commit/a2566301e12364e227f0b72b51bb09698e1cb9dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2566301e12364e227f0b72b51bb09698e1cb9dc/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b5c3d2b208f47b0750ea6c39f6f3f97cb1ca1bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5c3d2b208f47b0750ea6c39f6f3f97cb1ca1bb", "html_url": "https://github.com/rust-lang/rust/commit/7b5c3d2b208f47b0750ea6c39f6f3f97cb1ca1bb"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "8e63e219c42c19924914ce01bf1661dc9cfb68aa", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=a2566301e12364e227f0b72b51bb09698e1cb9dc", "patch": "@@ -320,7 +320,7 @@ impl Attribute {\n     pub fn parse<'a, T, F>(&self, sess: &'a ParseSess, mut f: F) -> PResult<'a, T>\n         where F: FnMut(&mut Parser<'a>) -> PResult<'a, T>,\n     {\n-        let mut parser = Parser::new(sess, self.tokens.clone(), None, false);\n+        let mut parser = Parser::new(sess, self.tokens.clone(), None, false, false);\n         let result = f(&mut parser)?;\n         if parser.token != token::Eof {\n             parser.unexpected()?;"}, {"sha": "0b6a2eb536a20d7769721ee16a07f4de716ebefd", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=a2566301e12364e227f0b72b51bb09698e1cb9dc", "patch": "@@ -418,9 +418,13 @@ fn inner_parse_loop(sess: &ParseSess,\n     Success(())\n }\n \n-pub fn parse(sess: &ParseSess, tts: TokenStream, ms: &[TokenTree], directory: Option<Directory>)\n+pub fn parse(sess: &ParseSess,\n+             tts: TokenStream,\n+             ms: &[TokenTree],\n+             directory: Option<Directory>,\n+             recurse_into_modules: bool)\n              -> NamedParseResult {\n-    let mut parser = Parser::new(sess, tts, directory, true);\n+    let mut parser = Parser::new(sess, tts, directory, recurse_into_modules, true);\n     let mut cur_eis = SmallVector::one(initial_matcher_pos(ms.to_owned(), parser.span.lo));\n     let mut next_eis = Vec::new(); // or proceed normally\n "}, {"sha": "73494d47fee9b9a59dee95d448e95e43de1e55ca", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=a2566301e12364e227f0b72b51bb09698e1cb9dc", "patch": "@@ -121,7 +121,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                     path: cx.current_expansion.module.directory.clone(),\n                     ownership: cx.current_expansion.directory_ownership,\n                 };\n-                let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), false);\n+                let mut p = Parser::new(cx.parse_sess(), tts, Some(directory), true, false);\n                 p.root_module_name = cx.current_expansion.module.mod_path.last()\n                     .map(|id| id.name.as_str().to_string());\n \n@@ -192,7 +192,7 @@ pub fn compile(sess: &ParseSess, features: &RefCell<Features>, def: &ast::Item)\n         ast::ItemKind::MacroDef(ref body) => body.clone().into(),\n         _ => unreachable!(),\n     };\n-    let argument_map = match parse(sess, body, &argument_gram, None) {\n+    let argument_map = match parse(sess, body, &argument_gram, None, true) {\n         Success(m) => m,\n         Failure(sp, tok) => {\n             let s = parse_failure_msg(tok);"}, {"sha": "3a68a6ba7646c98de89a8cd8354b4db1fab175ef", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=a2566301e12364e227f0b72b51bb09698e1cb9dc", "patch": "@@ -149,7 +149,9 @@ pub fn parse_stream_from_source_str(name: String, source: String, sess: &ParseSe\n // Create a new parser from a source string\n pub fn new_parser_from_source_str(sess: &ParseSess, name: String, source: String)\n                                       -> Parser {\n-    filemap_to_parser(sess, sess.codemap().new_filemap(name, source))\n+    let mut parser = filemap_to_parser(sess, sess.codemap().new_filemap(name, source));\n+    parser.recurse_into_file_modules = false;\n+    parser\n }\n \n /// Create a new parser, handling errors as appropriate\n@@ -218,7 +220,7 @@ pub fn filemap_to_stream(sess: &ParseSess, filemap: Rc<FileMap>) -> TokenStream\n \n /// Given stream and the `ParseSess`, produce a parser\n pub fn stream_to_parser(sess: &ParseSess, stream: TokenStream) -> Parser {\n-    Parser::new(sess, stream, None, false)\n+    Parser::new(sess, stream, None, true, false)\n }\n \n /// Parse a string representing a character literal into its final form.\n@@ -1032,4 +1034,23 @@ mod tests {\n             Err(_) => panic!(\"could not get snippet\"),\n         }\n     }\n+\n+    // This tests that when parsing a string (rather than a file) we don't try\n+    // and read in a file for a module declaration and just parse a stub.\n+    // See `recurse_into_file_modules` in the parser.\n+    #[test]\n+    fn out_of_line_mod() {\n+        let sess = ParseSess::new(FilePathMapping::empty());\n+        let item = parse_item_from_source_str(\n+            \"foo\".to_owned(),\n+            \"mod foo { struct S; mod this_does_not_exist; }\".to_owned(),\n+            &sess,\n+        ).unwrap().unwrap();\n+\n+        if let ast::ItemKind::Mod(ref m) = item.node {\n+            assert!(m.items.len() == 2);\n+        } else {\n+            panic!();\n+        }\n+    }\n }"}, {"sha": "c28f678cb5197a84f62426c4bdfc5f8fdfb3d485", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a2566301e12364e227f0b72b51bb09698e1cb9dc", "patch": "@@ -179,6 +179,8 @@ pub struct Parser<'a> {\n     pub obsolete_set: HashSet<ObsoleteSyntax>,\n     /// Used to determine the path to externally loaded source files\n     pub directory: Directory,\n+    /// Whether to parse sub-modules in other files.\n+    pub recurse_into_file_modules: bool,\n     /// Name of the root module this parser originated from. If `None`, then the\n     /// name is not known. This does not change while the parser is descending\n     /// into modules, and sub-parsers have new values for this name.\n@@ -190,6 +192,7 @@ pub struct Parser<'a> {\n     pub cfg_mods: bool,\n }\n \n+\n struct TokenCursor {\n     frame: TokenCursorFrame,\n     stack: Vec<TokenCursorFrame>,\n@@ -439,6 +442,7 @@ impl<'a> Parser<'a> {\n     pub fn new(sess: &'a ParseSess,\n                tokens: TokenStream,\n                directory: Option<Directory>,\n+               recurse_into_file_modules: bool,\n                desugar_doc_comments: bool)\n                -> Self {\n         let mut parser = Parser {\n@@ -450,6 +454,7 @@ impl<'a> Parser<'a> {\n             prev_token_kind: PrevTokenKind::Other,\n             restrictions: Restrictions::empty(),\n             obsolete_set: HashSet::new(),\n+            recurse_into_file_modules: recurse_into_file_modules,\n             directory: Directory { path: PathBuf::new(), ownership: DirectoryOwnership::Owned },\n             root_module_name: None,\n             expected_tokens: Vec::new(),\n@@ -467,12 +472,14 @@ impl<'a> Parser<'a> {\n         let tok = parser.next_tok();\n         parser.token = tok.tok;\n         parser.span = tok.sp;\n+\n         if let Some(directory) = directory {\n             parser.directory = directory;\n         } else if parser.span != syntax_pos::DUMMY_SP {\n             parser.directory.path = PathBuf::from(sess.codemap().span_to_filename(parser.span));\n             parser.directory.path.pop();\n         }\n+\n         parser.process_potential_macro_variable();\n         parser\n     }\n@@ -3921,6 +3928,7 @@ impl<'a> Parser<'a> {\n                 mem::replace(&mut self.directory.ownership, DirectoryOwnership::UnownedViaBlock);\n             let item = self.parse_item_(attrs.clone(), false, true)?;\n             self.directory.ownership = old_directory_ownership;\n+\n             match item {\n                 Some(i) => Stmt {\n                     id: ast::DUMMY_NODE_ID,\n@@ -5254,7 +5262,7 @@ impl<'a> Parser<'a> {\n         let id = self.parse_ident()?;\n         if self.check(&token::Semi) {\n             self.bump();\n-            if in_cfg {\n+            if in_cfg && self.recurse_into_file_modules {\n                 // This mod is in an external file. Let's go get it!\n                 let ModulePathSuccess { path, directory_ownership, warn } =\n                     self.submod_path(id, &outer_attrs, id_span)?;\n@@ -5281,10 +5289,12 @@ impl<'a> Parser<'a> {\n         } else {\n             let old_directory = self.directory.clone();\n             self.push_directory(id, &outer_attrs);\n+\n             self.expect(&token::OpenDelim(token::Brace))?;\n             let mod_inner_lo = self.span;\n             let attrs = self.parse_inner_attributes()?;\n             let module = self.parse_mod_items(&token::CloseDelim(token::Brace), mod_inner_lo)?;\n+\n             self.directory = old_directory;\n             Ok((id, ItemKind::Mod(module), Some(attrs)))\n         }\n@@ -5347,7 +5357,8 @@ impl<'a> Parser<'a> {\n     fn submod_path(&mut self,\n                    id: ast::Ident,\n                    outer_attrs: &[ast::Attribute],\n-                   id_sp: Span) -> PResult<'a, ModulePathSuccess> {\n+                   id_sp: Span)\n+                   -> PResult<'a, ModulePathSuccess> {\n         if let Some(path) = Parser::submod_path_from_attr(outer_attrs, &self.directory.path) {\n             return Ok(ModulePathSuccess {\n                 directory_ownership: match path.file_name().and_then(|s| s.to_str()) {"}, {"sha": "339e7c0b628adcf5a9c9298cd93423c138ae20a5", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2566301e12364e227f0b72b51bb09698e1cb9dc/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=a2566301e12364e227f0b72b51bb09698e1cb9dc", "patch": "@@ -109,7 +109,7 @@ impl TokenTree {\n             path: cx.current_expansion.module.directory.clone(),\n             ownership: cx.current_expansion.directory_ownership,\n         };\n-        macro_parser::parse(cx.parse_sess(), tts, mtch, Some(directory))\n+        macro_parser::parse(cx.parse_sess(), tts, mtch, Some(directory), true)\n     }\n \n     /// Check if this TokenTree is equal to the other, regardless of span information."}]}