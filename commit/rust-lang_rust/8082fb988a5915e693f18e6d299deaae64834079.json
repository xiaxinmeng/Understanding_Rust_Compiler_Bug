{"sha": "8082fb988a5915e693f18e6d299deaae64834079", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwODJmYjk4OGE1OTE1ZTY5M2YxOGU2ZDI5OWRlYWFlNjQ4MzQwNzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-12T09:37:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-12T09:46:42Z"}, "message": "rename fast_thread_local -> thread_local_dtor; thread_local -> thread_local_key", "tree": {"sha": "d130a0b12b800c15daf7801429dc3b1e374301f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d130a0b12b800c15daf7801429dc3b1e374301f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8082fb988a5915e693f18e6d299deaae64834079", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8082fb988a5915e693f18e6d299deaae64834079", "html_url": "https://github.com/rust-lang/rust/commit/8082fb988a5915e693f18e6d299deaae64834079", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8082fb988a5915e693f18e6d299deaae64834079/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daecab3a784f28082df90cebb204998051f3557d", "url": "https://api.github.com/repos/rust-lang/rust/commits/daecab3a784f28082df90cebb204998051f3557d", "html_url": "https://github.com/rust-lang/rust/commit/daecab3a784f28082df90cebb204998051f3557d"}], "stats": {"total": 110, "additions": 65, "deletions": 45}, "files": [{"sha": "7cde02baedbe827519bbc429988ce8988bec3984", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "patch": "@@ -47,7 +47,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fd;\n pub mod fs;\n pub mod io;\n@@ -68,7 +67,8 @@ pub mod rwlock;\n pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_key;\n+pub mod thread_local_dtor;\n pub mod time;\n \n pub use crate::sys_common::os_str_bytes as os_str;"}, {"sha": "c3275eb6f0e50a836eab60f3061528e6bda9d44a", "filename": "src/libstd/sys/unix/thread_local_dtor.rs", "status": "renamed", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Funix%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Funix%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local_dtor.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "patch": "@@ -1,6 +1,9 @@\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n+//! Provides thread-local destructors without an associated \"key\", which\n+//! can be more efficient.\n+\n // Since what appears to be glibc 2.18 this symbol has been shipped which\n // GCC and clang both use to invoke destructors in thread_local globals, so\n // let's do the same!\n@@ -16,7 +19,7 @@\n ))]\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::mem;\n-    use crate::sys_common::thread_local::register_dtor_fallback;\n+    use crate::sys_common::thread_local_dtor::register_dtor_fallback;\n \n     extern \"C\" {\n         #[linkage = \"extern_weak\"]", "previous_filename": "src/libstd/sys/unix/fast_thread_local.rs"}, {"sha": "2c5b94b1e61e5710717363d92396c6b5e1027305", "filename": "src/libstd/sys/unix/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Funix%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Funix%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread_local_key.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "previous_filename": "src/libstd/sys/unix/thread_local.rs"}, {"sha": "d6a8eec4b80cdc74d9219949d783b5c37ab2f8a4", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "patch": "@@ -20,7 +20,6 @@ pub mod cmath;\n pub mod condvar;\n pub mod env;\n pub mod ext;\n-pub mod fast_thread_local;\n pub mod fs;\n pub mod handle;\n pub mod io;\n@@ -35,7 +34,8 @@ pub mod process;\n pub mod rand;\n pub mod rwlock;\n pub mod thread;\n-pub mod thread_local;\n+pub mod thread_local_key;\n+pub mod thread_local_dtor;\n pub mod time;\n cfg_if::cfg_if! {\n     if #[cfg(not(target_vendor = \"uwp\"))] {"}, {"sha": "7be13bc4b2bc7cf7edb2653dfc929908af829a9c", "filename": "src/libstd/sys/windows/thread_local_dtor.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_dtor.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "patch": "@@ -1,4 +1,4 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n #![cfg(target_thread_local)]\n \n-pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;\n+pub use crate::sys_common::thread_local_dtor::register_dtor_fallback as register_dtor;", "previous_filename": "src/libstd/sys/windows/fast_thread_local.rs"}, {"sha": "e0bb102b3afe5b8e746ea51d420466e41b8112bb", "filename": "src/libstd/sys/windows/thread_local_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local_key.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "previous_filename": "src/libstd/sys/windows/thread_local.rs"}, {"sha": "1212b05c88affa02d9977db40d7d05da7c5b52c6", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "patch": "@@ -65,7 +65,8 @@ pub mod remutex;\n pub mod rwlock;\n pub mod thread;\n pub mod thread_info;\n-pub mod thread_local;\n+pub mod thread_local_key;\n+pub mod thread_local_dtor;\n pub mod util;\n pub mod wtf8;\n "}, {"sha": "6f5ebf4a271582fa753e03ad66f0d9f8a6fcab3c", "filename": "src/libstd/sys_common/thread_local_dtor.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys_common%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys_common%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local_dtor.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "patch": "@@ -0,0 +1,49 @@\n+//! Thread-local destructor\n+//!\n+//! Besides thread-local \"keys\" (pointer-sized non-adressable thread-local store\n+//! with an associated destructor), many platforms also provide thread-local\n+//! destructors that are not associated with any particular data. These are\n+//! often more efficient.\n+//!\n+//! This module provides a fallback implementation for that interface, based\n+//! on the less efficient thread-local \"keys\". Each platform provides\n+//! a `thread_local_dtor` module which will either re-export the fallback,\n+//! or implement something more efficient.\n+\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n+#![allow(dead_code)] // sys isn't exported yet\n+\n+use crate::ptr;\n+use crate::sys_common::thread_local_key::StaticKey;\n+\n+pub unsafe fn register_dtor_fallback(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n+    // The fallback implementation uses a vanilla OS-based TLS key to track\n+    // the list of destructors that need to be run for this thread. The key\n+    // then has its own destructor which runs all the other destructors.\n+    //\n+    // The destructor for DTORS is a little special in that it has a `while`\n+    // loop to continuously drain the list of registered destructors. It\n+    // *should* be the case that this loop always terminates because we\n+    // provide the guarantee that a TLS key cannot be set after it is\n+    // flagged for destruction.\n+\n+    static DTORS: StaticKey = StaticKey::new(Some(run_dtors));\n+    type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n+    if DTORS.get().is_null() {\n+        let v: Box<List> = box Vec::new();\n+        DTORS.set(Box::into_raw(v) as *mut u8);\n+    }\n+    let list: &mut List = &mut *(DTORS.get() as *mut List);\n+    list.push((t, dtor));\n+\n+    unsafe extern \"C\" fn run_dtors(mut ptr: *mut u8) {\n+        while !ptr.is_null() {\n+            let list: Box<List> = Box::from_raw(ptr as *mut List);\n+            for (ptr, dtor) in list.into_iter() {\n+                dtor(ptr);\n+            }\n+            ptr = DTORS.get();\n+            DTORS.set(ptr::null_mut());\n+        }\n+    }\n+}"}, {"sha": "ac5b128298d7856419aed0eb3cb3d626e62863a3", "filename": "src/libstd/sys_common/thread_local_key.rs", "status": "renamed", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local_key.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "patch": "@@ -4,7 +4,7 @@\n //! using the native OS-provided facilities (think `TlsAlloc` or\n //! `pthread_setspecific`). The interface of this differs from the other types\n //! of thread-local-storage provided in this crate in that OS-based TLS can only\n-//! get/set pointers,\n+//! get/set pointer-sized data, possibly with an associated destructor.\n //!\n //! This module also provides two flavors of TLS. One is intended for static\n //! initialization, and does not contain a `Drop` implementation to deallocate\n@@ -14,7 +14,7 @@\n //! # Usage\n //!\n //! This module should likely not be used directly unless other primitives are\n-//! being built on. types such as `thread_local::spawn::Key` are likely much\n+//! being built on. Types such as `thread_local::spawn::Key` are likely much\n //! more useful in practice than this OS-based version which likely requires\n //! unsafe code to interoperate with.\n //!\n@@ -48,9 +48,8 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n-use crate::ptr;\n use crate::sync::atomic::{self, AtomicUsize, Ordering};\n-use crate::sys::thread_local as imp;\n+use crate::sys::thread_local_key as imp;\n use crate::sys_common::mutex::Mutex;\n \n /// A type for TLS keys that are statically allocated.\n@@ -233,38 +232,6 @@ impl Drop for Key {\n     }\n }\n \n-pub unsafe fn register_dtor_fallback(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n-    // The fallback implementation uses a vanilla OS-based TLS key to track\n-    // the list of destructors that need to be run for this thread. The key\n-    // then has its own destructor which runs all the other destructors.\n-    //\n-    // The destructor for DTORS is a little special in that it has a `while`\n-    // loop to continuously drain the list of registered destructors. It\n-    // *should* be the case that this loop always terminates because we\n-    // provide the guarantee that a TLS key cannot be set after it is\n-    // flagged for destruction.\n-\n-    static DTORS: StaticKey = StaticKey::new(Some(run_dtors));\n-    type List = Vec<(*mut u8, unsafe extern \"C\" fn(*mut u8))>;\n-    if DTORS.get().is_null() {\n-        let v: Box<List> = box Vec::new();\n-        DTORS.set(Box::into_raw(v) as *mut u8);\n-    }\n-    let list: &mut List = &mut *(DTORS.get() as *mut List);\n-    list.push((t, dtor));\n-\n-    unsafe extern \"C\" fn run_dtors(mut ptr: *mut u8) {\n-        while !ptr.is_null() {\n-            let list: Box<List> = Box::from_raw(ptr as *mut List);\n-            for (ptr, dtor) in list.into_iter() {\n-                dtor(ptr);\n-            }\n-            ptr = DTORS.get();\n-            DTORS.set(ptr::null_mut());\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::{Key, StaticKey};", "previous_filename": "src/libstd/sys_common/thread_local.rs"}, {"sha": "ecd6fbc6b9395aaa7dfdc6f8dfa4713856b8acc2", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8082fb988a5915e693f18e6d299deaae64834079/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=8082fb988a5915e693f18e6d299deaae64834079", "patch": "@@ -363,7 +363,7 @@ pub mod fast {\n     use crate::cell::Cell;\n     use crate::fmt;\n     use crate::mem;\n-    use crate::sys::fast_thread_local::register_dtor;\n+    use crate::sys::thread_local_dtor::register_dtor;\n \n     #[derive(Copy, Clone)]\n     enum DtorState {\n@@ -468,7 +468,7 @@ pub mod os {\n     use crate::fmt;\n     use crate::marker;\n     use crate::ptr;\n-    use crate::sys_common::thread_local::StaticKey as OsStaticKey;\n+    use crate::sys_common::thread_local_key::StaticKey as OsStaticKey;\n \n     pub struct Key<T> {\n         // OS-TLS key that we'll use to key off."}]}