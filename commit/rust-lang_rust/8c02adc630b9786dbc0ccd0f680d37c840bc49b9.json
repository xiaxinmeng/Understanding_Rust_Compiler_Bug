{"sha": "8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMDJhZGM2MzBiOTc4NmRiYzBjY2QwZjY4MGQzN2M4NDBiYzQ5Yjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-22T02:07:41Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-22T02:08:26Z"}, "message": "rustc: Port the fn and obj traversal logic over from the GC branch. Doesn't actually do anything yet due to lack of support in trans.", "tree": {"sha": "e998c8cb68380ee8320adaa824eb83e770a39d9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e998c8cb68380ee8320adaa824eb83e770a39d9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "html_url": "https://github.com/rust-lang/rust/commit/8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3b9c41b47090b94237fd7d4429d1431ecb8181", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3b9c41b47090b94237fd7d4429d1431ecb8181", "html_url": "https://github.com/rust-lang/rust/commit/ad3b9c41b47090b94237fd7d4429d1431ecb8181"}], "stats": {"total": 69, "additions": 43, "deletions": 26}, "files": [{"sha": "84fb6e8456fa4c8dc5035915c4a3a9a8c28e7872", "filename": "src/rt/rust_cc.cpp", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_cc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_cc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_cc.cpp?ref=8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "patch": "@@ -164,20 +164,20 @@ irc::walk_variant(shape::tag_info &tinfo, uint32_t variant_id,\n \n void\n irc::compute_ircs(rust_task *task, irc_map &ircs) {\n-    std::map<void *,type_desc *>::iterator begin(task->local_allocs.begin()),\n-                                           end(task->local_allocs.end());\n+    std::map<void *,const type_desc *>::iterator\n+        begin(task->local_allocs.begin()), end(task->local_allocs.end());\n     while (begin != end) {\n         uint8_t *p = reinterpret_cast<uint8_t *>(begin->first);\n         p += sizeof(uintptr_t); // Skip over the reference count.\n \n-        type_desc *tydesc = begin->second;\n+        const type_desc *tydesc = begin->second;\n \n         //DPRINT(\"determining internal ref counts: %p, tydesc=%p\\n\", p,\n         //tydesc);\n \n         shape::arena arena;\n         shape::type_param *params =\n-            shape::type_param::from_tydesc(tydesc, arena);\n+            shape::type_param::from_tydesc(&tydesc, arena);\n         irc irc(task, true, tydesc->shape, params, tydesc->shape_tables, p,\n                 ircs);\n         irc.walk();\n@@ -197,8 +197,8 @@ irc::compute_ircs(rust_task *task, irc_map &ircs) {\n \n void\n find_roots(rust_task *task, irc_map &ircs, std::vector<void *> &roots) {\n-    std::map<void *,type_desc *>::iterator begin(task->local_allocs.begin()),\n-                                           end(task->local_allocs.end());\n+    std::map<void *,const type_desc *>::iterator\n+        begin(task->local_allocs.begin()), end(task->local_allocs.end());\n     while (begin != end) {\n         void *alloc = begin->first;\n         uintptr_t *ref_count_ptr = reinterpret_cast<uintptr_t *>(alloc);\n@@ -376,13 +376,13 @@ mark::do_mark(rust_task *task, const std::vector<void *> &roots,\n             uint8_t *p = reinterpret_cast<uint8_t *>(alloc);\n             p += sizeof(uintptr_t); // Skip over the reference count.\n \n-            type_desc *tydesc = task->local_allocs[*begin];\n+            const type_desc *tydesc = task->local_allocs[*begin];\n \n             //DPRINT(\"marking: %p, tydesc=%p\\n\", p, tydesc);\n \n             shape::arena arena;\n             shape::type_param *params =\n-                shape::type_param::from_tydesc(tydesc, arena);\n+                shape::type_param::from_tydesc(&tydesc, arena);\n \n #if 0\n             shape::log log(task, true, tydesc->shape, params,\n@@ -403,8 +403,8 @@ mark::do_mark(rust_task *task, const std::vector<void *> &roots,\n \n void\n sweep(rust_task *task, const std::set<void *> &marked) {\n-    std::map<void *,type_desc *>::iterator begin(task->local_allocs.begin()),\n-                                           end(task->local_allocs.end());\n+    std::map<void *,const type_desc *>::iterator\n+        begin(task->local_allocs.begin()), end(task->local_allocs.end());\n     while (begin != end) {\n         void *alloc = begin->first;\n         if (marked.find(alloc) == marked.end()) {"}, {"sha": "6e6a5dd766f0fc6629a1664dd1fd3a16c0bae36c", "filename": "src/rt/rust_gc.cpp", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_gc.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_gc.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_gc.cpp?ref=8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "patch": "@@ -38,11 +38,11 @@ struct frame {\n struct root_info {\n     intptr_t frame_offset;\n     uintptr_t dynamic;  // 0 = static, 1 = dynamic\n-    type_desc *tydesc;\n+    const type_desc *tydesc;\n };\n \n struct root {\n-    type_desc *tydesc;\n+    const type_desc *tydesc;\n     uint8_t *data;\n \n     root(const root_info &info, const frame &frame)\n@@ -117,8 +117,8 @@ gc::mark(std::vector<root> &roots) {\n         DPRINT(\"root: %p\\n\", ri->data);\n \n         shape::arena arena;\n-        shape::type_param *params = shape::type_param::from_tydesc(ri->tydesc,\n-                                                                   arena);\n+        shape::type_param *params =\n+            shape::type_param::from_tydesc(&ri->tydesc, arena);\n         shape::log log(task, true, ri->tydesc->shape, params,\n                        ri->tydesc->shape_tables, ri->data, std::cerr);\n         log.walk();"}, {"sha": "99e72489f5fc9c8dcac0ccc46e01205ce38fa1cc", "filename": "src/rt/rust_obstack.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_obstack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_obstack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_obstack.cpp?ref=8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "patch": "@@ -161,8 +161,8 @@ rust_obstack::dump() const {\n     while (b != e) {\n         std::pair<const type_desc *,void *> data = *b;\n         shape::arena arena;\n-        shape::type_param *params = shape::type_param::from_tydesc(data.first,\n-                                                                   arena);\n+        shape::type_param *params =\n+            shape::type_param::from_tydesc(&data.first, arena);\n         shape::log log(task, true, data.first->shape, params,\n                        data.first->shape_tables,\n                        reinterpret_cast<uint8_t *>(data.second), std::cerr);"}, {"sha": "d25c340264e6b8012a0a1758d504cb7962331f4e", "filename": "src/rt/rust_shape.cpp", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_shape.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_shape.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.cpp?ref=8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "patch": "@@ -37,7 +37,7 @@ type_param::make(const type_desc **tydescs, unsigned n_tydescs,\n         const type_desc *subtydesc = tydescs[i];\n         ptrs[i].shape = subtydesc->shape;\n         ptrs[i].tables = subtydesc->shape_tables;\n-        ptrs[i].params = from_tydesc(subtydesc, arena);\n+        ptrs[i].params = from_tydesc(&subtydesc, arena);\n     }\n     return ptrs;\n }\n@@ -527,11 +527,12 @@ log::walk_res(const rust_fn *dtor, unsigned n_params,\n } // end namespace shape\n \n extern \"C\" void\n-upcall_cmp_type(int8_t *result, rust_task *task, type_desc *tydesc,\n+upcall_cmp_type(int8_t *result, rust_task *task, const type_desc *tydesc,\n                 const type_desc **subtydescs, uint8_t *data_0,\n                 uint8_t *data_1, uint8_t cmp_type) {\n     shape::arena arena;\n-    shape::type_param *params = shape::type_param::from_tydesc(tydesc, arena);\n+    shape::type_param *params =\n+        shape::type_param::from_tydesc(&tydesc, arena);\n     shape::cmp cmp(task, true, tydesc->shape, params, tydesc->shape_tables,\n                    data_0, data_1);\n     cmp.walk();\n@@ -544,13 +545,14 @@ upcall_cmp_type(int8_t *result, rust_task *task, type_desc *tydesc,\n }\n \n extern \"C\" void\n-upcall_log_type(rust_task *task, type_desc *tydesc, uint8_t *data,\n+upcall_log_type(rust_task *task, const type_desc *tydesc, uint8_t *data,\n                 uint32_t level) {\n     if (task->sched->log_lvl < level)\n         return;     // TODO: Don't evaluate at all?\n \n     shape::arena arena;\n-    shape::type_param *params = shape::type_param::from_tydesc(tydesc, arena);\n+    shape::type_param *params =\n+        shape::type_param::from_tydesc(&tydesc, arena);\n \n     std::stringstream ss;\n     shape::log log(task, true, tydesc->shape, params, tydesc->shape_tables,"}, {"sha": "357786ae2ce63dd468c89abcc22af01e82f253fa", "filename": "src/rt/rust_shape.h", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_shape.h", "raw_url": "https://github.com/rust-lang/rust/raw/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_shape.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_shape.h?ref=8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "patch": "@@ -310,12 +310,27 @@ class type_param {\n     }\n \n     // Creates type parameters from a type descriptor.\n-    static inline type_param *from_tydesc(const type_desc *tydesc,\n+    static inline type_param *from_tydesc(const type_desc **tydesc,\n                                           arena &arena) {\n-        if (tydesc->n_obj_params) {\n-            // TODO\n+        if ((*tydesc)->n_obj_params) {\n+            uintptr_t n_obj_params = (*tydesc)->n_obj_params;\n+            const type_desc **first_param;\n+            if (n_obj_params & 0x80000000) {\n+                // Function closure.\n+                DPRINT(\"n_obj_params FN %lu, tydesc %p, starting at %p\\n\",\n+                       n_obj_params, tydesc, tydesc + 4);\n+                n_obj_params &= 0x7fffffff;\n+                first_param = (const type_desc **)\n+                    ((uint8_t *)(tydesc + 4) + (*tydesc)->size);\n+            } else {\n+                // Object closure.\n+                DPRINT(\"n_obj_params OBJ %lu, tydesc %p, starting at %p\\n\",\n+                       n_obj_params, tydesc, tydesc + 4);\n+                first_param = tydesc + 4;\n+            }\n         }\n-        return make(tydesc->first_param, tydesc->n_params, arena);\n+\n+        return make((*tydesc)->first_param, (*tydesc)->n_params, arena);\n     }\n };\n "}, {"sha": "047fbd2b58ffd64b6a0d020c8c1b0325ea75ebf8", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/8c02adc630b9786dbc0ccd0f680d37c840bc49b9/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=8c02adc630b9786dbc0ccd0f680d37c840bc49b9", "patch": "@@ -115,7 +115,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n \n     rust_obstack dynastack;\n \n-    std::map<void *,type_desc *> local_allocs;\n+    std::map<void *,const type_desc *> local_allocs;\n \n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_scheduler *sched,"}]}