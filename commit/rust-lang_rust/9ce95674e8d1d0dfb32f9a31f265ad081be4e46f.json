{"sha": "9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "node_id": "C_kwDOAAsO6NoAKDljZTk1Njc0ZThkMWQwZGZiMzJmOWEzMWYyNjVhZDA4MWJlNGU0NmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T11:55:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-18T11:55:38Z"}, "message": "Auto merge of #14837 - Veykril:rustc-lexer, r=Veykril\n\nSupport c string literals", "tree": {"sha": "fb359ded4da0cd979170a3f64af09fd4a177f1f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb359ded4da0cd979170a3f64af09fd4a177f1f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "html_url": "https://github.com/rust-lang/rust/commit/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "034d7c853705215e90a0d035bd0305c281742ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/034d7c853705215e90a0d035bd0305c281742ed9", "html_url": "https://github.com/rust-lang/rust/commit/034d7c853705215e90a0d035bd0305c281742ed9"}, {"sha": "3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "html_url": "https://github.com/rust-lang/rust/commit/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f"}], "stats": {"total": 543, "additions": 381, "deletions": 162}, "files": [{"sha": "093dd6797024861c3159473319550337007380ac", "filename": "crates/hir-def/src/body/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fpretty.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -611,6 +611,7 @@ impl<'a> Printer<'a> {\n         match literal {\n             Literal::String(it) => w!(self, \"{:?}\", it),\n             Literal::ByteString(it) => w!(self, \"\\\"{}\\\"\", it.escape_ascii()),\n+            Literal::CString(it) => w!(self, \"\\\"{}\\\\0\\\"\", it),\n             Literal::Char(it) => w!(self, \"'{}'\", it.escape_debug()),\n             Literal::Bool(it) => w!(self, \"{}\", it),\n             Literal::Int(i, suffix) => {"}, {"sha": "a42f8183abcad655a9dee508efab61f480902665", "filename": "crates/hir-def/src/hir.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-def%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-def%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fhir.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -85,6 +85,7 @@ impl fmt::Display for FloatTypeWrapper {\n pub enum Literal {\n     String(Box<str>),\n     ByteString(Box<[u8]>),\n+    CString(Box<str>),\n     Char(char),\n     Bool(bool),\n     Int(i128, Option<BuiltinInt>),\n@@ -135,6 +136,10 @@ impl From<ast::LiteralKind> for Literal {\n                 let text = s.value().map(Box::from).unwrap_or_else(Default::default);\n                 Literal::String(text)\n             }\n+            LiteralKind::CString(s) => {\n+                let text = s.value().map(Box::from).unwrap_or_else(Default::default);\n+                Literal::CString(text)\n+            }\n             LiteralKind::Byte(b) => {\n                 Literal::Uint(b.value().unwrap_or_default() as u128, Some(BuiltinUint::U8))\n             }"}, {"sha": "0e9ac58fbaaad8fbbd258683261e22f208d16f3f", "filename": "crates/hir-def/src/lang_item.rs", "status": "modified", "additions": 142, "deletions": 128, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flang_item.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -199,7 +199,7 @@ pub enum GenericRequirement {\n \n macro_rules! language_item_table {\n     (\n-        $( $(#[$attr:meta])* $variant:ident, $name:ident, $method:ident, $target:expr, $generics:expr; )*\n+        $( $(#[$attr:meta])* $variant:ident, $module:ident :: $name:ident, $method:ident, $target:expr, $generics:expr; )*\n     ) => {\n \n         /// A representation of all the valid language items in Rust.\n@@ -244,82 +244,86 @@ impl LangItem {\n \n language_item_table! {\n //  Variant name,            Name,                     Getter method name,         Target                  Generic requirements;\n-    Sized,                   sized,               sized_trait,                Target::Trait,          GenericRequirement::Exact(0);\n-    Unsize,                  unsize,              unsize_trait,               Target::Trait,          GenericRequirement::Minimum(1);\n+    Sized,                   sym::sized,               sized_trait,                Target::Trait,          GenericRequirement::Exact(0);\n+    Unsize,                  sym::unsize,              unsize_trait,               Target::Trait,          GenericRequirement::Minimum(1);\n     /// Trait injected by `#[derive(PartialEq)]`, (i.e. \"Partial EQ\").\n-    StructuralPeq,           structural_peq,      structural_peq_trait,       Target::Trait,          GenericRequirement::None;\n+    StructuralPeq,           sym::structural_peq,      structural_peq_trait,       Target::Trait,          GenericRequirement::None;\n     /// Trait injected by `#[derive(Eq)]`, (i.e. \"Total EQ\"; no, I will not apologize).\n-    StructuralTeq,           structural_teq,      structural_teq_trait,       Target::Trait,          GenericRequirement::None;\n-    Copy,                    copy,                copy_trait,                 Target::Trait,          GenericRequirement::Exact(0);\n-    Clone,                   clone,               clone_trait,                Target::Trait,          GenericRequirement::None;\n-    Sync,                    sync,                sync_trait,                 Target::Trait,          GenericRequirement::Exact(0);\n-    DiscriminantKind,        discriminant_kind,   discriminant_kind_trait,    Target::Trait,          GenericRequirement::None;\n+    StructuralTeq,           sym::structural_teq,      structural_teq_trait,       Target::Trait,          GenericRequirement::None;\n+    Copy,                    sym::copy,                copy_trait,                 Target::Trait,          GenericRequirement::Exact(0);\n+    Clone,                   sym::clone,               clone_trait,                Target::Trait,          GenericRequirement::None;\n+    Sync,                    sym::sync,                sync_trait,                 Target::Trait,          GenericRequirement::Exact(0);\n+    DiscriminantKind,        sym::discriminant_kind,   discriminant_kind_trait,    Target::Trait,          GenericRequirement::None;\n     /// The associated item of the [`DiscriminantKind`] trait.\n-    Discriminant,            discriminant_type,   discriminant_type,          Target::AssocTy,        GenericRequirement::None;\n+    Discriminant,            sym::discriminant_type,   discriminant_type,          Target::AssocTy,        GenericRequirement::None;\n \n-    PointeeTrait,            pointee_trait,       pointee_trait,              Target::Trait,          GenericRequirement::None;\n-    Metadata,                metadata_type,       metadata_type,              Target::AssocTy,        GenericRequirement::None;\n-    DynMetadata,             dyn_metadata,        dyn_metadata,               Target::Struct,         GenericRequirement::None;\n+    PointeeTrait,            sym::pointee_trait,       pointee_trait,              Target::Trait,          GenericRequirement::None;\n+    Metadata,                sym::metadata_type,       metadata_type,              Target::AssocTy,        GenericRequirement::None;\n+    DynMetadata,             sym::dyn_metadata,        dyn_metadata,               Target::Struct,         GenericRequirement::None;\n \n-    Freeze,                  freeze,              freeze_trait,               Target::Trait,          GenericRequirement::Exact(0);\n+    Freeze,                  sym::freeze,              freeze_trait,               Target::Trait,          GenericRequirement::Exact(0);\n \n-    Drop,                    drop,                drop_trait,                 Target::Trait,          GenericRequirement::None;\n-    Destruct,                destruct,            destruct_trait,             Target::Trait,          GenericRequirement::None;\n+    FnPtrTrait,              sym::fn_ptr_trait,        fn_ptr_trait,               Target::Trait,          GenericRequirement::Exact(0);\n+    FnPtrAddr,               sym::fn_ptr_addr,         fn_ptr_addr,                Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n \n-    CoerceUnsized,           coerce_unsized,      coerce_unsized_trait,       Target::Trait,          GenericRequirement::Minimum(1);\n-    DispatchFromDyn,         dispatch_from_dyn,   dispatch_from_dyn_trait,    Target::Trait,          GenericRequirement::Minimum(1);\n+    Drop,                    sym::drop,                drop_trait,                 Target::Trait,          GenericRequirement::None;\n+    Destruct,                sym::destruct,            destruct_trait,             Target::Trait,          GenericRequirement::None;\n+\n+    CoerceUnsized,           sym::coerce_unsized,      coerce_unsized_trait,       Target::Trait,          GenericRequirement::Minimum(1);\n+    DispatchFromDyn,         sym::dispatch_from_dyn,   dispatch_from_dyn_trait,    Target::Trait,          GenericRequirement::Minimum(1);\n \n     // language items relating to transmutability\n-    TransmuteOpts,           transmute_opts,      transmute_opts,             Target::Struct,         GenericRequirement::Exact(0);\n-    TransmuteTrait,          transmute_trait,     transmute_trait,            Target::Trait,          GenericRequirement::Exact(3);\n-\n-    Add,                     add,                 add_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Sub,                     sub,                 sub_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Mul,                     mul,                 mul_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Div,                     div,                 div_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Rem,                     rem,                 rem_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Neg,                     neg,                 neg_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n-    Not,                     not,                 not_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n-    BitXor,                  bitxor,              bitxor_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    BitAnd,                  bitand,              bitand_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    BitOr,                   bitor,               bitor_trait,                Target::Trait,          GenericRequirement::Exact(1);\n-    Shl,                     shl,                 shl_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Shr,                     shr,                 shr_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    AddAssign,               add_assign,          add_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    SubAssign,               sub_assign,          sub_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    MulAssign,               mul_assign,          mul_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    DivAssign,               div_assign,          div_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    RemAssign,               rem_assign,          rem_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    BitXorAssign,            bitxor_assign,       bitxor_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n-    BitAndAssign,            bitand_assign,       bitand_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n-    BitOrAssign,             bitor_assign,        bitor_assign_trait,         Target::Trait,          GenericRequirement::Exact(1);\n-    ShlAssign,               shl_assign,          shl_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    ShrAssign,               shr_assign,          shr_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    Index,                   index,               index_trait,                Target::Trait,          GenericRequirement::Exact(1);\n-    IndexMut,                index_mut,           index_mut_trait,            Target::Trait,          GenericRequirement::Exact(1);\n-\n-    UnsafeCell,              unsafe_cell,         unsafe_cell_type,           Target::Struct,         GenericRequirement::None;\n-    VaList,                  va_list,             va_list,                    Target::Struct,         GenericRequirement::None;\n-\n-    Deref,                   deref,               deref_trait,                Target::Trait,          GenericRequirement::Exact(0);\n-    DerefMut,                deref_mut,           deref_mut_trait,            Target::Trait,          GenericRequirement::Exact(0);\n-    DerefTarget,             deref_target,        deref_target,               Target::AssocTy,        GenericRequirement::None;\n-    Receiver,                receiver,            receiver_trait,             Target::Trait,          GenericRequirement::None;\n-\n-    Fn,                      fn,                  fn_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n-    FnMut,                   fn_mut,              fn_mut_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    FnOnce,                  fn_once,             fn_once_trait,              Target::Trait,          GenericRequirement::Exact(1);\n-\n-    FnOnceOutput,            fn_once_output,      fn_once_output,             Target::AssocTy,        GenericRequirement::None;\n-\n-    Future,                  future_trait,        future_trait,               Target::Trait,          GenericRequirement::Exact(0);\n-    GeneratorState,          generator_state,     gen_state,                  Target::Enum,           GenericRequirement::None;\n-    Generator,               generator,           gen_trait,                  Target::Trait,          GenericRequirement::Minimum(1);\n-    Unpin,                   unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n-    Pin,                     pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n-\n-    PartialEq,               eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n-    PartialOrd,              partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n+    TransmuteOpts,           sym::transmute_opts,      transmute_opts,             Target::Struct,         GenericRequirement::Exact(0);\n+    TransmuteTrait,          sym::transmute_trait,     transmute_trait,            Target::Trait,          GenericRequirement::Exact(3);\n+\n+    Add,                     sym::add,                 add_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Sub,                     sym::sub,                 sub_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Mul,                     sym::mul,                 mul_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Div,                     sym::div,                 div_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Rem,                     sym::rem,                 rem_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Neg,                     sym::neg,                 neg_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n+    Not,                     sym::not,                 not_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n+    BitXor,                  sym::bitxor,              bitxor_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    BitAnd,                  sym::bitand,              bitand_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    BitOr,                   sym::bitor,               bitor_trait,                Target::Trait,          GenericRequirement::Exact(1);\n+    Shl,                     sym::shl,                 shl_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Shr,                     sym::shr,                 shr_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    AddAssign,               sym::add_assign,          add_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    SubAssign,               sym::sub_assign,          sub_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    MulAssign,               sym::mul_assign,          mul_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    DivAssign,               sym::div_assign,          div_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    RemAssign,               sym::rem_assign,          rem_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    BitXorAssign,            sym::bitxor_assign,       bitxor_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n+    BitAndAssign,            sym::bitand_assign,       bitand_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n+    BitOrAssign,             sym::bitor_assign,        bitor_assign_trait,         Target::Trait,          GenericRequirement::Exact(1);\n+    ShlAssign,               sym::shl_assign,          shl_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    ShrAssign,               sym::shr_assign,          shr_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    Index,                   sym::index,               index_trait,                Target::Trait,          GenericRequirement::Exact(1);\n+    IndexMut,                sym::index_mut,           index_mut_trait,            Target::Trait,          GenericRequirement::Exact(1);\n+\n+    UnsafeCell,              sym::unsafe_cell,         unsafe_cell_type,           Target::Struct,         GenericRequirement::None;\n+    VaList,                  sym::va_list,             va_list,                    Target::Struct,         GenericRequirement::None;\n+\n+    Deref,                   sym::deref,               deref_trait,                Target::Trait,          GenericRequirement::Exact(0);\n+    DerefMut,                sym::deref_mut,           deref_mut_trait,            Target::Trait,          GenericRequirement::Exact(0);\n+    DerefTarget,             sym::deref_target,        deref_target,               Target::AssocTy,        GenericRequirement::None;\n+    Receiver,                sym::receiver,            receiver_trait,             Target::Trait,          GenericRequirement::None;\n+\n+    Fn,                      kw::fn,                   fn_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n+    FnMut,                   sym::fn_mut,              fn_mut_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    FnOnce,                  sym::fn_once,             fn_once_trait,              Target::Trait,          GenericRequirement::Exact(1);\n+\n+    FnOnceOutput,            sym::fn_once_output,      fn_once_output,             Target::AssocTy,        GenericRequirement::None;\n+\n+    Future,                  sym::future_trait,        future_trait,               Target::Trait,          GenericRequirement::Exact(0);\n+    GeneratorState,          sym::generator_state,     gen_state,                  Target::Enum,           GenericRequirement::None;\n+    Generator,               sym::generator,           gen_trait,                  Target::Trait,          GenericRequirement::Minimum(1);\n+    Unpin,                   sym::unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n+    Pin,                     sym::pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n+\n+    PartialEq,               sym::eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n+    PartialOrd,              sym::partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n+    CVoid,                   sym::c_void,              c_void,                     Target::Enum,           GenericRequirement::None;\n \n     // A number of panic-related lang items. The `panic` item corresponds to divide-by-zero and\n     // various panic cases with `match`. The `panic_bounds_check` item is for indexing arrays.\n@@ -328,93 +332,103 @@ language_item_table! {\n     // in the sense that a crate is not required to have it defined to use it, but a final product\n     // is required to define it somewhere. Additionally, there are restrictions on crates that use\n     // a weak lang item, but do not have it defined.\n-    Panic,                   panic,               panic_fn,                   Target::Fn,             GenericRequirement::Exact(0);\n-    PanicNounwind,           panic_nounwind,      panic_nounwind,             Target::Fn,             GenericRequirement::Exact(0);\n-    PanicFmt,                panic_fmt,           panic_fmt,                  Target::Fn,             GenericRequirement::None;\n-    PanicDisplay,            panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n-    ConstPanicFmt,           const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n-    PanicBoundsCheck,        panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::Exact(0);\n-    PanicInfo,               panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;\n-    PanicLocation,           panic_location,      panic_location,             Target::Struct,         GenericRequirement::None;\n-    PanicImpl,               panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n-    PanicCannotUnwind,       panic_cannot_unwind, panic_cannot_unwind,        Target::Fn,             GenericRequirement::Exact(0);\n+    Panic,                   sym::panic,               panic_fn,                   Target::Fn,             GenericRequirement::Exact(0);\n+    PanicNounwind,           sym::panic_nounwind,      panic_nounwind,             Target::Fn,             GenericRequirement::Exact(0);\n+    PanicFmt,                sym::panic_fmt,           panic_fmt,                  Target::Fn,             GenericRequirement::None;\n+    PanicDisplay,            sym::panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n+    ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n+    PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::Exact(0);\n+    PanicMisalignedPointerDereference,        sym::panic_misaligned_pointer_dereference,  panic_misaligned_pointer_dereference_fn,      Target::Fn,             GenericRequirement::Exact(0);\n+    PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;\n+    PanicLocation,           sym::panic_location,      panic_location,             Target::Struct,         GenericRequirement::None;\n+    PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n+    PanicCannotUnwind,       sym::panic_cannot_unwind, panic_cannot_unwind,        Target::Fn,             GenericRequirement::Exact(0);\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n-    BeginPanic,              begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n+    BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n+\n+    // Lang items needed for `format_args!()`.\n+    FormatAlignment,         sym::format_alignment,    format_alignment,           Target::Enum,           GenericRequirement::None;\n+    FormatArgument,          sym::format_argument,     format_argument,            Target::Struct,         GenericRequirement::None;\n+    FormatArguments,         sym::format_arguments,    format_arguments,           Target::Struct,         GenericRequirement::None;\n+    FormatCount,             sym::format_count,        format_count,               Target::Enum,           GenericRequirement::None;\n+    FormatPlaceholder,       sym::format_placeholder,  format_placeholder,         Target::Struct,         GenericRequirement::None;\n+    FormatUnsafeArg,         sym::format_unsafe_arg,   format_unsafe_arg,          Target::Struct,         GenericRequirement::None;\n \n-    ExchangeMalloc,          exchange_malloc,     exchange_malloc_fn,         Target::Fn,             GenericRequirement::None;\n-    BoxFree,                 box_free,            box_free_fn,                Target::Fn,             GenericRequirement::Minimum(1);\n-    DropInPlace,             drop_in_place,       drop_in_place_fn,           Target::Fn,             GenericRequirement::Minimum(1);\n-    AllocLayout,             alloc_layout,        alloc_layout,               Target::Struct,         GenericRequirement::None;\n+    ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn,             GenericRequirement::None;\n+    BoxFree,                 sym::box_free,            box_free_fn,                Target::Fn,             GenericRequirement::Minimum(1);\n+    DropInPlace,             sym::drop_in_place,       drop_in_place_fn,           Target::Fn,             GenericRequirement::Minimum(1);\n+    AllocLayout,             sym::alloc_layout,        alloc_layout,               Target::Struct,         GenericRequirement::None;\n \n-    Start,                   start,               start_fn,                   Target::Fn,             GenericRequirement::Exact(1);\n+    Start,                   sym::start,               start_fn,                   Target::Fn,             GenericRequirement::Exact(1);\n \n-    EhPersonality,           eh_personality,      eh_personality,             Target::Fn,             GenericRequirement::None;\n-    EhCatchTypeinfo,         eh_catch_typeinfo,   eh_catch_typeinfo,          Target::Static,         GenericRequirement::None;\n+    EhPersonality,           sym::eh_personality,      eh_personality,             Target::Fn,             GenericRequirement::None;\n+    EhCatchTypeinfo,         sym::eh_catch_typeinfo,   eh_catch_typeinfo,          Target::Static,         GenericRequirement::None;\n \n-    OwnedBox,                owned_box,           owned_box,                  Target::Struct,         GenericRequirement::Minimum(1);\n+    OwnedBox,                sym::owned_box,           owned_box,                  Target::Struct,         GenericRequirement::Minimum(1);\n \n-    PhantomData,             phantom_data,        phantom_data,               Target::Struct,         GenericRequirement::Exact(1);\n+    PhantomData,             sym::phantom_data,        phantom_data,               Target::Struct,         GenericRequirement::Exact(1);\n \n-    ManuallyDrop,            manually_drop,       manually_drop,              Target::Struct,         GenericRequirement::None;\n+    ManuallyDrop,            sym::manually_drop,       manually_drop,              Target::Struct,         GenericRequirement::None;\n \n-    MaybeUninit,             maybe_uninit,        maybe_uninit,               Target::Union,          GenericRequirement::None;\n+    MaybeUninit,             sym::maybe_uninit,        maybe_uninit,               Target::Union,          GenericRequirement::None;\n \n     /// Align offset for stride != 1; must not panic.\n-    AlignOffset,             align_offset,        align_offset_fn,            Target::Fn,             GenericRequirement::None;\n+    AlignOffset,             sym::align_offset,        align_offset_fn,            Target::Fn,             GenericRequirement::None;\n \n-    Termination,             termination,         termination,                Target::Trait,          GenericRequirement::None;\n+    Termination,             sym::termination,         termination,                Target::Trait,          GenericRequirement::None;\n \n-    Try,                     Try,                 try_trait,                  Target::Trait,          GenericRequirement::None;\n+    Try,                     sym::Try,                 try_trait,                  Target::Trait,          GenericRequirement::None;\n \n-    Tuple,                   tuple_trait,         tuple_trait,                Target::Trait,          GenericRequirement::Exact(0);\n+    Tuple,                   sym::tuple_trait,         tuple_trait,                Target::Trait,          GenericRequirement::Exact(0);\n \n-    SliceLen,                slice_len_fn,        slice_len_fn,               Target::Method(MethodKind::Inherent), GenericRequirement::None;\n+    SliceLen,                sym::slice_len_fn,        slice_len_fn,               Target::Method(MethodKind::Inherent), GenericRequirement::None;\n \n     // Language items from AST lowering\n-    TryTraitFromResidual,    from_residual,       from_residual_fn,           Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    TryTraitFromOutput,      from_output,         from_output_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    TryTraitBranch,          branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    TryTraitFromYeet,        from_yeet,           from_yeet_fn,               Target::Fn,             GenericRequirement::None;\n+    TryTraitFromResidual,    sym::from_residual,       from_residual_fn,           Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    TryTraitFromOutput,      sym::from_output,         from_output_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    TryTraitBranch,          sym::branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    TryTraitFromYeet,        sym::from_yeet,           from_yeet_fn,               Target::Fn,             GenericRequirement::None;\n \n-    PointerSized,            pointer_sized,       pointer_sized,              Target::Trait,          GenericRequirement::Exact(0);\n+    PointerLike,             sym::pointer_like,        pointer_like,               Target::Trait,          GenericRequirement::Exact(0);\n \n-    Poll,                    Poll,                poll,                       Target::Enum,           GenericRequirement::None;\n-    PollReady,               Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;\n-    PollPending,             Pending,             poll_pending_variant,       Target::Variant,        GenericRequirement::None;\n+    ConstParamTy,            sym::const_param_ty,      const_param_ty_trait,       Target::Trait,          GenericRequirement::Exact(0);\n+\n+    Poll,                    sym::Poll,                poll,                       Target::Enum,           GenericRequirement::None;\n+    PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;\n+    PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant,        GenericRequirement::None;\n \n     // FIXME(swatinem): the following lang items are used for async lowering and\n     // should become obsolete eventually.\n-    ResumeTy,                ResumeTy,            resume_ty,                  Target::Struct,         GenericRequirement::None;\n-    IdentityFuture,          identity_future,     identity_future_fn,         Target::Fn,             GenericRequirement::None;\n-    GetContext,              get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n-\n-    Context,                 Context,             context,                    Target::Struct,         GenericRequirement::None;\n-    FuturePoll,              poll,                future_poll_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    ResumeTy,                sym::ResumeTy,            resume_ty,                  Target::Struct,         GenericRequirement::None;\n+    GetContext,              sym::get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n \n-    FromFrom,                from,                from_fn,                    Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    Context,                 sym::Context,             context,                    Target::Struct,         GenericRequirement::None;\n+    FuturePoll,              sym::poll,                future_poll_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n \n-    OptionSome,              Some,                option_some_variant,        Target::Variant,        GenericRequirement::None;\n-    OptionNone,              None,                option_none_variant,        Target::Variant,        GenericRequirement::None;\n+    Option,                  sym::Option,              option_type,                Target::Enum,           GenericRequirement::None;\n+    OptionSome,              sym::Some,                option_some_variant,        Target::Variant,        GenericRequirement::None;\n+    OptionNone,              sym::None,                option_none_variant,        Target::Variant,        GenericRequirement::None;\n \n-    ResultOk,                Ok,                  result_ok_variant,          Target::Variant,        GenericRequirement::None;\n-    ResultErr,               Err,                 result_err_variant,         Target::Variant,        GenericRequirement::None;\n+    ResultOk,                sym::Ok,                  result_ok_variant,          Target::Variant,        GenericRequirement::None;\n+    ResultErr,               sym::Err,                 result_err_variant,         Target::Variant,        GenericRequirement::None;\n \n-    ControlFlowContinue,     Continue,            cf_continue_variant,        Target::Variant,        GenericRequirement::None;\n-    ControlFlowBreak,        Break,               cf_break_variant,           Target::Variant,        GenericRequirement::None;\n+    ControlFlowContinue,     sym::Continue,            cf_continue_variant,        Target::Variant,        GenericRequirement::None;\n+    ControlFlowBreak,        sym::Break,               cf_break_variant,           Target::Variant,        GenericRequirement::None;\n \n-    IntoFutureIntoFuture,    into_future,         into_future_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    IntoIterIntoIter,        into_iter,           into_iter_fn,               Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    IteratorNext,            next,                next_fn,                    Target::Method(MethodKind::Trait { body: false}), GenericRequirement::None;\n+    IntoFutureIntoFuture,    sym::into_future,         into_future_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    IntoIterIntoIter,        sym::into_iter,           into_iter_fn,               Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    IteratorNext,            sym::next,                next_fn,                    Target::Method(MethodKind::Trait { body: false}), GenericRequirement::None;\n \n-    PinNewUnchecked,         new_unchecked,       new_unchecked_fn,           Target::Method(MethodKind::Inherent), GenericRequirement::None;\n+    PinNewUnchecked,         sym::new_unchecked,       new_unchecked_fn,           Target::Method(MethodKind::Inherent), GenericRequirement::None;\n \n-    RangeFrom,               RangeFrom,           range_from_struct,          Target::Struct,         GenericRequirement::None;\n-    RangeFull,               RangeFull,           range_full_struct,          Target::Struct,         GenericRequirement::None;\n-    RangeInclusiveStruct,    RangeInclusive,      range_inclusive_struct,     Target::Struct,         GenericRequirement::None;\n-    RangeInclusiveNew,       range_inclusive_new, range_inclusive_new_method, Target::Method(MethodKind::Inherent), GenericRequirement::None;\n-    Range,                   Range,               range_struct,               Target::Struct,         GenericRequirement::None;\n-    RangeToInclusive,        RangeToInclusive,    range_to_inclusive_struct,  Target::Struct,         GenericRequirement::None;\n-    RangeTo,                 RangeTo,             range_to_struct,            Target::Struct,         GenericRequirement::None;\n+    RangeFrom,               sym::RangeFrom,           range_from_struct,          Target::Struct,         GenericRequirement::None;\n+    RangeFull,               sym::RangeFull,           range_full_struct,          Target::Struct,         GenericRequirement::None;\n+    RangeInclusiveStruct,    sym::RangeInclusive,      range_inclusive_struct,     Target::Struct,         GenericRequirement::None;\n+    RangeInclusiveNew,       sym::range_inclusive_new, range_inclusive_new_method, Target::Method(MethodKind::Inherent), GenericRequirement::None;\n+    Range,                   sym::Range,               range_struct,               Target::Struct,         GenericRequirement::None;\n+    RangeToInclusive,        sym::RangeToInclusive,    range_to_inclusive_struct,  Target::Struct,         GenericRequirement::None;\n+    RangeTo,                 sym::RangeTo,             range_to_struct,            Target::Struct,         GenericRequirement::None;\n \n-    String,                  String,              string,                     Target::Struct,         GenericRequirement::None;\n+    String,                  sym::String,              string,                     Target::Struct,         GenericRequirement::None;\n+    CStr,                    sym::CStr,                c_str,                      Target::Struct,         GenericRequirement::None;\n }"}, {"sha": "5ab1f970201f4a4ae03c71b9419d74ecab290159", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -1883,6 +1883,38 @@ fn byte_string() {\n     );\n }\n \n+#[test]\n+fn c_string() {\n+    check_number(\n+        r#\"\n+//- minicore: index, slice\n+#[lang = \"CStr\"]\n+pub struct CStr {\n+    inner: [u8]\n+}\n+const GOAL: u8 = {\n+    let a = c\"hello\";\n+    a.inner[0]\n+};\n+    \"#,\n+        104,\n+    );\n+    check_number(\n+        r#\"\n+//- minicore: index, slice\n+#[lang = \"CStr\"]\n+pub struct CStr {\n+    inner: [u8]\n+}\n+const GOAL: u8 = {\n+    let a = c\"hello\";\n+    a.inner[6]\n+};\n+    \"#,\n+        0,\n+    );\n+}\n+\n #[test]\n fn consts() {\n     check_number("}, {"sha": "3261c22313bf0284687bf91b18976cfb60cef420", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -13,7 +13,7 @@ use hir_def::{\n     hir::{\n         ArithOp, Array, BinaryOp, ClosureKind, Expr, ExprId, LabelId, Literal, Statement, UnaryOp,\n     },\n-    lang_item::LangItem,\n+    lang_item::{LangItem, LangItemTarget},\n     path::{GenericArg, GenericArgs},\n     BlockId, ConstParamId, FieldId, ItemContainerId, Lookup,\n };\n@@ -832,6 +832,20 @@ impl<'a> InferenceContext<'a> {\n                     let array_type = TyKind::Array(byte_type, len).intern(Interner);\n                     TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(Interner)\n                 }\n+                Literal::CString(..) => TyKind::Ref(\n+                    Mutability::Not,\n+                    static_lifetime(),\n+                    self.resolve_lang_item(LangItem::CStr)\n+                        .and_then(LangItemTarget::as_struct)\n+                        .map_or_else(\n+                            || self.err_ty(),\n+                            |strukt| {\n+                                TyKind::Adt(AdtId(strukt.into()), Substitution::empty(Interner))\n+                                    .intern(Interner)\n+                            },\n+                        ),\n+                )\n+                .intern(Interner),\n                 Literal::Char(..) => TyKind::Scalar(Scalar::Char).intern(Interner),\n                 Literal::Int(_v, ty) => match ty {\n                     Some(int_ty) => {"}, {"sha": "dd56dc3d9c25a4224c90c58d059955f21e24994c", "filename": "crates/hir-ty/src/infer/pat.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fpat.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -428,9 +428,10 @@ fn is_non_ref_pat(body: &hir_def::body::Body, pat: PatId) -> bool {\n         // FIXME: ConstBlock/Path/Lit might actually evaluate to ref, but inference is unimplemented.\n         Pat::Path(..) => true,\n         Pat::ConstBlock(..) => true,\n-        Pat::Lit(expr) => {\n-            !matches!(body[*expr], Expr::Literal(Literal::String(..) | Literal::ByteString(..)))\n-        }\n+        Pat::Lit(expr) => !matches!(\n+            body[*expr],\n+            Expr::Literal(Literal::String(..) | Literal::CString(..) | Literal::ByteString(..))\n+        ),\n         Pat::Wild | Pat::Bind { .. } | Pat::Ref { .. } | Pat::Box { .. } | Pat::Missing => false,\n     }\n }"}, {"sha": "4bf8070fa46a93cf0e2c361e53775ff48955b808", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -1133,15 +1133,26 @@ impl<'ctx> MirLowerCtx<'ctx> {\n         let bytes = match l {\n             hir_def::hir::Literal::String(b) => {\n                 let b = b.as_bytes();\n-                let mut data = vec![];\n+                let mut data = Vec::with_capacity(mem::size_of::<usize>() * 2);\n                 data.extend(0usize.to_le_bytes());\n                 data.extend(b.len().to_le_bytes());\n                 let mut mm = MemoryMap::default();\n                 mm.insert(0, b.to_vec());\n                 return Ok(Operand::from_concrete_const(data, mm, ty));\n             }\n+            hir_def::hir::Literal::CString(b) => {\n+                let b = b.as_bytes();\n+                let bytes = b.iter().copied().chain(iter::once(0)).collect::<Vec<_>>();\n+\n+                let mut data = Vec::with_capacity(mem::size_of::<usize>() * 2);\n+                data.extend(0usize.to_le_bytes());\n+                data.extend(bytes.len().to_le_bytes());\n+                let mut mm = MemoryMap::default();\n+                mm.insert(0, bytes);\n+                return Ok(Operand::from_concrete_const(data, mm, ty));\n+            }\n             hir_def::hir::Literal::ByteString(b) => {\n-                let mut data = vec![];\n+                let mut data = Vec::with_capacity(mem::size_of::<usize>() * 2);\n                 data.extend(0usize.to_le_bytes());\n                 data.extend(b.len().to_le_bytes());\n                 let mut mm = MemoryMap::default();"}, {"sha": "3ece40486dde87e3c35bea4e14b6a53ce15fd0fe", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -3572,3 +3572,18 @@ fn main() {\n \"#,\n     );\n }\n+\n+#[test]\n+fn cstring_literals() {\n+    check_types(\n+        r#\"\n+#[lang = \"CStr\"]\n+pub struct CStr;\n+\n+fn main() {\n+    c\"ello\";\n+  //^^^^^^^ &CStr\n+}\n+\"#,\n+    );\n+}"}, {"sha": "40ee4771d170760e5bf421ac0bc62d66729f7cf4", "filename": "crates/ide-assists/src/handlers/raw_string.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fraw_string.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -20,6 +20,7 @@ use crate::{utils::required_hashes, AssistContext, AssistId, AssistKind, Assists\n // }\n // ```\n pub(crate) fn make_raw_string(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    // FIXME: This should support byte and c strings as well.\n     let token = ctx.find_token_at_offset::<ast::String>()?;\n     if token.is_raw() {\n         return None;"}, {"sha": "f906182224468be44c703e2689df141ebe6c304c", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -39,7 +39,7 @@ fn try_extend_selection(\n ) -> Option<TextRange> {\n     let range = frange.range;\n \n-    let string_kinds = [COMMENT, STRING, BYTE_STRING];\n+    let string_kinds = [COMMENT, STRING, BYTE_STRING, C_STRING];\n     let list_kinds = [\n         RECORD_PAT_FIELD_LIST,\n         MATCH_ARM_LIST,"}, {"sha": "8c02fe81648a536694d1412abdeefd855d5df26a", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -16,7 +16,10 @@ mod tests;\n use hir::{Name, Semantics};\n use ide_db::{FxHashMap, RootDatabase, SymbolKind};\n use syntax::{\n-    ast, AstNode, AstToken, NodeOrToken, SyntaxKind::*, SyntaxNode, TextRange, WalkEvent, T,\n+    ast::{self, IsString},\n+    AstNode, AstToken, NodeOrToken,\n+    SyntaxKind::*,\n+    SyntaxNode, TextRange, WalkEvent, T,\n };\n \n use crate::{\n@@ -440,7 +443,17 @@ fn traverse(\n                 && ast::ByteString::can_cast(descended_token.kind())\n             {\n                 if let Some(byte_string) = ast::ByteString::cast(token) {\n-                    highlight_escape_string(hl, &byte_string, range.start());\n+                    if !byte_string.is_raw() {\n+                        highlight_escape_string(hl, &byte_string, range.start());\n+                    }\n+                }\n+            } else if ast::CString::can_cast(token.kind())\n+                && ast::CString::can_cast(descended_token.kind())\n+            {\n+                if let Some(c_string) = ast::CString::cast(token) {\n+                    if !c_string.is_raw() {\n+                        highlight_escape_string(hl, &c_string, range.start());\n+                    }\n                 }\n             } else if ast::Char::can_cast(token.kind())\n                 && ast::Char::can_cast(descended_token.kind())"}, {"sha": "925057ffaa090330be9244b1760d2e34a393d02d", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -26,7 +26,7 @@ pub(super) fn token(sema: &Semantics<'_, RootDatabase>, token: SyntaxToken) -> O\n     }\n \n     let highlight: Highlight = match token.kind() {\n-        STRING | BYTE_STRING => HlTag::StringLiteral.into(),\n+        STRING | BYTE_STRING | C_STRING => HlTag::StringLiteral.into(),\n         INT_NUMBER if token.parent_ancestors().nth(1).map(|it| it.kind()) == Some(FIELD_EXPR) => {\n             SymbolKind::Field.into()\n         }"}, {"sha": "df1971242657d0917d7a71bc311b8793f04fa562", "filename": "crates/ide/src/syntax_tree.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_tree.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -1,5 +1,7 @@\n-use ide_db::base_db::{FileId, SourceDatabase};\n-use ide_db::RootDatabase;\n+use ide_db::{\n+    base_db::{FileId, SourceDatabase},\n+    RootDatabase,\n+};\n use syntax::{\n     AstNode, NodeOrToken, SourceFile, SyntaxKind::STRING, SyntaxToken, TextRange, TextSize,\n };"}, {"sha": "3cf9c4dd4b07afc2f35d7943a2bf5186190a5e92", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -12,6 +12,8 @@ use super::*;\n //     let _ = r\"d\";\n //     let _ = b\"e\";\n //     let _ = br\"f\";\n+//     let _ = c\"g\";\n+//     let _ = cr\"h\";\n // }\n pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n     T![true],\n@@ -22,6 +24,7 @@ pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n     CHAR,\n     STRING,\n     BYTE_STRING,\n+    C_STRING,\n ]);\n \n pub(crate) fn literal(p: &mut Parser<'_>) -> Option<CompletedMarker> {"}, {"sha": "e589b69934d23d0f701120cfa0dce54d3700d85e", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -28,6 +28,7 @@ const GENERIC_ARG_FIRST: TokenSet = TokenSet::new(&[\n     BYTE,\n     STRING,\n     BYTE_STRING,\n+    C_STRING,\n ])\n .union(types::TYPE_FIRST);\n "}, {"sha": "e4dce21f32abebdc44ea35154c32f9c877a7b22f", "filename": "crates/parser/src/lexed_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Fsrc%2Flexed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Fsrc%2Flexed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flexed_str.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -277,7 +277,7 @@ impl<'a> Converter<'a> {\n                 if !terminated {\n                     err = \"Missing trailing `\\\"` symbol to terminate the string literal\";\n                 }\n-                STRING\n+                C_STRING\n             }\n             rustc_lexer::LiteralKind::RawStr { n_hashes } => {\n                 if n_hashes.is_none() {\n@@ -295,7 +295,7 @@ impl<'a> Converter<'a> {\n                 if n_hashes.is_none() {\n                     err = \"Invalid raw string literal\";\n                 }\n-                STRING\n+                C_STRING\n             }\n         };\n "}, {"sha": "fe73d9dfe4a750f4a753e5342a86bf73d31c9730", "filename": "crates/parser/test_data/parser/inline/ok/0085_expr_literals.rast", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rast?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -131,6 +131,30 @@ SOURCE_FILE\n           LITERAL\n             BYTE_STRING \"br\\\"f\\\"\"\n           SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            C_STRING \"c\\\"g\\\"\"\n+          SEMICOLON \";\"\n+        WHITESPACE \"\\n    \"\n+        LET_STMT\n+          LET_KW \"let\"\n+          WHITESPACE \" \"\n+          WILDCARD_PAT\n+            UNDERSCORE \"_\"\n+          WHITESPACE \" \"\n+          EQ \"=\"\n+          WHITESPACE \" \"\n+          LITERAL\n+            C_STRING \"cr\\\"h\\\"\"\n+          SEMICOLON \";\"\n         WHITESPACE \"\\n\"\n         R_CURLY \"}\"\n   WHITESPACE \"\\n\""}, {"sha": "e7f235a83b92c54c9eb37f2c83d3cb947f482430", "filename": "crates/parser/test_data/parser/inline/ok/0085_expr_literals.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0085_expr_literals.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -9,4 +9,6 @@ fn foo() {\n     let _ = r\"d\";\n     let _ = b\"e\";\n     let _ = br\"f\";\n+    let _ = c\"g\";\n+    let _ = cr\"h\";\n }"}, {"sha": "1eef28611652fc89c5af56533afe033fbbd55103", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -288,6 +288,7 @@ impl ast::ArrayExpr {\n pub enum LiteralKind {\n     String(ast::String),\n     ByteString(ast::ByteString),\n+    CString(ast::CString),\n     IntNumber(ast::IntNumber),\n     FloatNumber(ast::FloatNumber),\n     Char(ast::Char),\n@@ -319,6 +320,9 @@ impl ast::Literal {\n         if let Some(t) = ast::ByteString::cast(token.clone()) {\n             return LiteralKind::ByteString(t);\n         }\n+        if let Some(t) = ast::CString::cast(token.clone()) {\n+            return LiteralKind::CString(t);\n+        }\n         if let Some(t) = ast::Char::cast(token.clone()) {\n             return LiteralKind::Char(t);\n         }"}, {"sha": "f5863e9efe0da609e685af2df6a5c004d41373ad", "filename": "crates/syntax/src/ast/generated/tokens.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Ftokens.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -90,6 +90,27 @@ impl AstToken for ByteString {\n     fn syntax(&self) -> &SyntaxToken { &self.syntax }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct CString {\n+    pub(crate) syntax: SyntaxToken,\n+}\n+impl std::fmt::Display for CString {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(&self.syntax, f)\n+    }\n+}\n+impl AstToken for CString {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == C_STRING }\n+    fn cast(syntax: SyntaxToken) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxToken { &self.syntax }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct IntNumber {\n     pub(crate) syntax: SyntaxToken,"}, {"sha": "090eb89f4704017432994538eaa53a905295f42f", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 57, "deletions": 14, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -145,6 +145,10 @@ impl QuoteOffsets {\n }\n \n pub trait IsString: AstToken {\n+    const RAW_PREFIX: &'static str;\n+    fn is_raw(&self) -> bool {\n+        self.text().starts_with(Self::RAW_PREFIX)\n+    }\n     fn quote_offsets(&self) -> Option<QuoteOffsets> {\n         let text = self.text();\n         let offsets = QuoteOffsets::new(text)?;\n@@ -183,20 +187,18 @@ pub trait IsString: AstToken {\n             cb(text_range + offset, unescaped_char);\n         });\n     }\n-}\n-\n-impl IsString for ast::String {}\n-\n-impl ast::String {\n-    pub fn is_raw(&self) -> bool {\n-        self.text().starts_with('r')\n-    }\n-    pub fn map_range_up(&self, range: TextRange) -> Option<TextRange> {\n+    fn map_range_up(&self, range: TextRange) -> Option<TextRange> {\n         let contents_range = self.text_range_between_quotes()?;\n         assert!(TextRange::up_to(contents_range.len()).contains_range(range));\n         Some(range + contents_range.start())\n     }\n+}\n \n+impl IsString for ast::String {\n+    const RAW_PREFIX: &'static str = \"r\";\n+}\n+\n+impl ast::String {\n     pub fn value(&self) -> Option<Cow<'_, str>> {\n         if self.is_raw() {\n             let text = self.text();\n@@ -235,13 +237,11 @@ impl ast::String {\n     }\n }\n \n-impl IsString for ast::ByteString {}\n+impl IsString for ast::ByteString {\n+    const RAW_PREFIX: &'static str = \"br\";\n+}\n \n impl ast::ByteString {\n-    pub fn is_raw(&self) -> bool {\n-        self.text().starts_with(\"br\")\n-    }\n-\n     pub fn value(&self) -> Option<Cow<'_, [u8]>> {\n         if self.is_raw() {\n             let text = self.text();\n@@ -280,6 +280,49 @@ impl ast::ByteString {\n     }\n }\n \n+impl IsString for ast::CString {\n+    const RAW_PREFIX: &'static str = \"cr\";\n+}\n+\n+impl ast::CString {\n+    pub fn value(&self) -> Option<Cow<'_, str>> {\n+        if self.is_raw() {\n+            let text = self.text();\n+            let text =\n+                &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+            return Some(Cow::Borrowed(text));\n+        }\n+\n+        let text = self.text();\n+        let text = &text[self.text_range_between_quotes()? - self.syntax().text_range().start()];\n+\n+        let mut buf = String::new();\n+        let mut prev_end = 0;\n+        let mut has_error = false;\n+        unescape_literal(text, Mode::Str, &mut |char_range, unescaped_char| match (\n+            unescaped_char,\n+            buf.capacity() == 0,\n+        ) {\n+            (Ok(c), false) => buf.push(c),\n+            (Ok(_), true) if char_range.len() == 1 && char_range.start == prev_end => {\n+                prev_end = char_range.end\n+            }\n+            (Ok(c), true) => {\n+                buf.reserve_exact(text.len());\n+                buf.push_str(&text[..prev_end]);\n+                buf.push(c);\n+            }\n+            (Err(_), _) => has_error = true,\n+        });\n+\n+        match (has_error, buf.capacity() == 0) {\n+            (true, _) => None,\n+            (false, true) => Some(Cow::Borrowed(text)),\n+            (false, false) => Some(Cow::Owned(buf)),\n+        }\n+    }\n+}\n+\n impl ast::IntNumber {\n     pub fn radix(&self) -> Radix {\n         match self.text().get(..2).unwrap_or_default() {"}, {"sha": "45e5916098282e8216ff8dc5a208e8518fdd3c86", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -39,7 +39,7 @@ fn reparse_token(\n     let prev_token = root.covering_element(edit.delete).as_token()?.clone();\n     let prev_token_kind = prev_token.kind();\n     match prev_token_kind {\n-        WHITESPACE | COMMENT | IDENT | STRING => {\n+        WHITESPACE | COMMENT | IDENT | STRING | BYTE_STRING | C_STRING => {\n             if prev_token_kind == WHITESPACE || prev_token_kind == COMMENT {\n                 // removing a new line may extends previous token\n                 let deleted_range = edit.delete - prev_token.text_range().start();"}, {"sha": "c49c5fa108b6268e67feb7bd47233b151e3909fa", "filename": "crates/syntax/src/tests/sourcegen_ast.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fsourcegen_ast.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -573,10 +573,11 @@ impl Field {\n \n fn lower(grammar: &Grammar) -> AstSrc {\n     let mut res = AstSrc {\n-        tokens: \"Whitespace Comment String ByteString IntNumber FloatNumber Char Byte Ident\"\n-            .split_ascii_whitespace()\n-            .map(|it| it.to_string())\n-            .collect::<Vec<_>>(),\n+        tokens:\n+            \"Whitespace Comment String ByteString CString IntNumber FloatNumber Char Byte Ident\"\n+                .split_ascii_whitespace()\n+                .map(|it| it.to_string())\n+                .collect::<Vec<_>>(),\n         ..Default::default()\n     };\n "}, {"sha": "e0ec6a242ffa76176cb2182860ce1e4c695e1e17", "filename": "crates/syntax/src/validation.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce95674e8d1d0dfb32f9a31f265ad081be4e46f/crates%2Fsyntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fvalidation.rs?ref=9ce95674e8d1d0dfb32f9a31f265ad081be4e46f", "patch": "@@ -9,7 +9,7 @@ use rustc_lexer::unescape::{self, unescape_literal, Mode};\n \n use crate::{\n     algo,\n-    ast::{self, HasAttrs, HasVisibility},\n+    ast::{self, HasAttrs, HasVisibility, IsString},\n     match_ast, AstNode, SyntaxError,\n     SyntaxKind::{CONST, FN, INT_NUMBER, TYPE_ALIAS},\n     SyntaxNode, SyntaxToken, TextSize, T,\n@@ -156,6 +156,17 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n                 }\n             }\n         }\n+        ast::LiteralKind::CString(s) => {\n+            if !s.is_raw() {\n+                if let Some(without_quotes) = unquote(text, 2, '\"') {\n+                    unescape_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n+                        if let Err(err) = char {\n+                            push_err(1, range.start, err);\n+                        }\n+                    });\n+                }\n+            }\n+        }\n         ast::LiteralKind::Char(_) => {\n             if let Some(without_quotes) = unquote(text, 1, '\\'') {\n                 unescape_literal(without_quotes, Mode::Char, &mut |range, char| {"}]}