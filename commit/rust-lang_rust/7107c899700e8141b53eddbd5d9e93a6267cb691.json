{"sha": "7107c899700e8141b53eddbd5d9e93a6267cb691", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMDdjODk5NzAwZTgxNDFiNTNlZGRiZDVkOWU5M2E2MjY3Y2I2OTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-10T14:15:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-10T14:15:02Z"}, "message": "Rollup merge of #85096 - clarfonthey:const_unchecked, r=oli-obk\n\nMake unchecked_{add,sub,mul} inherent methods unstably const\n\nThe intrinsics are marked as being stably const (even though they're not stable by nature of being intrinsics), but the currently-unstable inherent versions are not marked as const. This fixes this inconsistency. Split out of #85017,\n\nr? `@oli-obk`", "tree": {"sha": "086b20361b5bde316d038d9c799af9f6481a5e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/086b20361b5bde316d038d9c799af9f6481a5e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7107c899700e8141b53eddbd5d9e93a6267cb691", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgmT/nCRBK7hj4Ov3rIwAAOQcIAF11QYHWVWd1EjhO1pBZNRfh\nJ7DiiiHYSz8cDeWL0V1E24Nwo8FVv1zcJQOMGBjilBLNNmLWnKGu7uOeWpKeQgb5\npKc3DQsWf0UwZTyIIHvqXqKeUmbdUKn+YhjkwbeiQHy9+3GQ+HCZYF3fCaCBWwHk\npZFXkS92SOrzXxNbUTDgH4wdcIs0pT+hQgq5CbLD9bbgfxV1yvZu/O3SaNpVW0M5\nZqxoZhhg6wsxSdpq5LjNQtRcZZ2oGKGVSXyTkETnU3Qx+F9SO/5ESMwVgFGIRqK/\n1WqmQZ7DFhjitEW20jDwCfAOGLLowc24yf++0Kc9sCO8iFmgDhnOnOZ547mXFCA=\n=YeKC\n-----END PGP SIGNATURE-----\n", "payload": "tree 086b20361b5bde316d038d9c799af9f6481a5e3c\nparent 37c603864e4809cc575078971de39959a0e18c07\nparent e6b12c8e4f7817d6317ab7b981e440f260a8137e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620656102 +0200\ncommitter GitHub <noreply@github.com> 1620656102 +0200\n\nRollup merge of #85096 - clarfonthey:const_unchecked, r=oli-obk\n\nMake unchecked_{add,sub,mul} inherent methods unstably const\n\nThe intrinsics are marked as being stably const (even though they're not stable by nature of being intrinsics), but the currently-unstable inherent versions are not marked as const. This fixes this inconsistency. Split out of #85017,\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7107c899700e8141b53eddbd5d9e93a6267cb691", "html_url": "https://github.com/rust-lang/rust/commit/7107c899700e8141b53eddbd5d9e93a6267cb691", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7107c899700e8141b53eddbd5d9e93a6267cb691/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37c603864e4809cc575078971de39959a0e18c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/37c603864e4809cc575078971de39959a0e18c07", "html_url": "https://github.com/rust-lang/rust/commit/37c603864e4809cc575078971de39959a0e18c07"}, {"sha": "e6b12c8e4f7817d6317ab7b981e440f260a8137e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b12c8e4f7817d6317ab7b981e440f260a8137e", "html_url": "https://github.com/rust-lang/rust/commit/e6b12c8e4f7817d6317ab7b981e440f260a8137e"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "5e39e71252f5a1833a5f3e95a08489f560c6377b", "filename": "library/core/src/iter/range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7107c899700e8141b53eddbd5d9e93a6267cb691/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107c899700e8141b53eddbd5d9e93a6267cb691/library%2Fcore%2Fsrc%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Frange.rs?ref=7107c899700e8141b53eddbd5d9e93a6267cb691", "patch": "@@ -106,7 +106,7 @@ pub unsafe trait Step: Clone + PartialOrd + Sized {\n     /// For any `a` and `n`, where no overflow occurs:\n     ///\n     /// * `Step::forward_unchecked(a, n)` is equivalent to `Step::forward(a, n)`\n-    #[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\", issue = \"none\")]\n+    #[unstable(feature = \"step_trait_ext\", reason = \"recently added\", issue = \"42168\")]\n     unsafe fn forward_unchecked(start: Self, count: usize) -> Self {\n         Step::forward(start, count)\n     }\n@@ -178,7 +178,7 @@ pub unsafe trait Step: Clone + PartialOrd + Sized {\n     /// For any `a` and `n`, where no overflow occurs:\n     ///\n     /// * `Step::backward_unchecked(a, n)` is equivalent to `Step::backward(a, n)`\n-    #[unstable(feature = \"unchecked_math\", reason = \"niche optimization path\", issue = \"none\")]\n+    #[unstable(feature = \"step_trait_ext\", reason = \"recently added\", issue = \"42168\")]\n     unsafe fn backward_unchecked(start: Self, count: usize) -> Self {\n         Step::backward(start, count)\n     }"}, {"sha": "6a4f2d5a544c1607630b4f8bcdd960fd084df1de", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7107c899700e8141b53eddbd5d9e93a6267cb691/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107c899700e8141b53eddbd5d9e93a6267cb691/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=7107c899700e8141b53eddbd5d9e93a6267cb691", "patch": "@@ -77,6 +77,7 @@\n #![feature(const_float_classify)]\n #![feature(const_float_bits_conv)]\n #![feature(const_int_unchecked_arith)]\n+#![feature(const_inherent_unchecked_arith)]\n #![feature(const_mut_refs)]\n #![feature(const_refs_to_cell)]\n #![feature(const_panic)]"}, {"sha": "47b2b30563c3a10c2332429be63da74ec6aad550", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7107c899700e8141b53eddbd5d9e93a6267cb691/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107c899700e8141b53eddbd5d9e93a6267cb691/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=7107c899700e8141b53eddbd5d9e93a6267cb691", "patch": "@@ -412,12 +412,13 @@ macro_rules! int_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_add`.\n             unsafe { intrinsics::unchecked_add(self, rhs) }\n@@ -450,12 +451,13 @@ macro_rules! int_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_sub`.\n             unsafe { intrinsics::unchecked_sub(self, rhs) }\n@@ -488,12 +490,13 @@ macro_rules! int_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_mul`.\n             unsafe { intrinsics::unchecked_mul(self, rhs) }"}, {"sha": "f9fd28b6a8c2487ab9c4e2f999c5c511644f5baa", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7107c899700e8141b53eddbd5d9e93a6267cb691/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107c899700e8141b53eddbd5d9e93a6267cb691/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=7107c899700e8141b53eddbd5d9e93a6267cb691", "patch": "@@ -422,12 +422,13 @@ macro_rules! uint_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_add(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_add(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_add`.\n             unsafe { intrinsics::unchecked_add(self, rhs) }\n@@ -460,12 +461,13 @@ macro_rules! uint_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_sub(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_sub`.\n             unsafe { intrinsics::unchecked_sub(self, rhs) }\n@@ -498,12 +500,13 @@ macro_rules! uint_impl {\n         #[unstable(\n             feature = \"unchecked_math\",\n             reason = \"niche optimization path\",\n-            issue = \"none\",\n+            issue = \"85122\",\n         )]\n         #[must_use = \"this returns the result of the operation, \\\n                       without modifying the original\"]\n+        #[rustc_const_unstable(feature = \"const_inherent_unchecked_arith\", issue = \"85122\")]\n         #[inline(always)]\n-        pub unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n+        pub const unsafe fn unchecked_mul(self, rhs: Self) -> Self {\n             // SAFETY: the caller must uphold the safety contract for\n             // `unchecked_mul`.\n             unsafe { intrinsics::unchecked_mul(self, rhs) }"}, {"sha": "a7e700b935e04b2a9df6fdca3b94642a9b18f54e", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7107c899700e8141b53eddbd5d9e93a6267cb691/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107c899700e8141b53eddbd5d9e93a6267cb691/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=7107c899700e8141b53eddbd5d9e93a6267cb691", "patch": "@@ -51,6 +51,14 @@ pub struct Feature {\n     pub has_gate_test: bool,\n     pub tracking_issue: Option<NonZeroU32>,\n }\n+impl Feature {\n+    fn tracking_issue_display(&self) -> impl fmt::Display {\n+        match self.tracking_issue {\n+            None => \"none\".to_string(),\n+            Some(x) => x.to_string(),\n+        }\n+    }\n+}\n \n pub type Features = HashMap<String, Feature>;\n \n@@ -361,10 +369,12 @@ fn get_and_check_lib_features(\n                     if f.tracking_issue != s.tracking_issue && f.level != Status::Stable {\n                         tidy_error!(\n                             bad,\n-                            \"{}:{}: mismatches the `issue` in {}\",\n+                            \"{}:{}: `issue` \\\"{}\\\" mismatches the {} `issue` of \\\"{}\\\"\",\n                             file.display(),\n                             line,\n-                            display\n+                            f.tracking_issue_display(),\n+                            display,\n+                            s.tracking_issue_display(),\n                         );\n                     }\n                 }"}]}