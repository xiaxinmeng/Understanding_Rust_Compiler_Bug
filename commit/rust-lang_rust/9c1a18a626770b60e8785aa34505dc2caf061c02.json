{"sha": "9c1a18a626770b60e8785aa34505dc2caf061c02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljMWExOGE2MjY3NzBiNjBlODc4NWFhMzQ1MDVkYzJjYWYwNjFjMDI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T19:48:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-26T19:48:04Z"}, "message": "store syntax ptr in FileItems\n\nwe cache the tree in file_item query anyway", "tree": {"sha": "12ea3ed1983f3ea078890bed666e025fcd1306d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ea3ed1983f3ea078890bed666e025fcd1306d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c1a18a626770b60e8785aa34505dc2caf061c02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c1a18a626770b60e8785aa34505dc2caf061c02", "html_url": "https://github.com/rust-lang/rust/commit/9c1a18a626770b60e8785aa34505dc2caf061c02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c1a18a626770b60e8785aa34505dc2caf061c02/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae97a45c355cbfc0aa61c09ea7cb93373855b9ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae97a45c355cbfc0aa61c09ea7cb93373855b9ff", "html_url": "https://github.com/rust-lang/rust/commit/ae97a45c355cbfc0aa61c09ea7cb93373855b9ff"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "015d640e36abc11b2e913b39c8470c20b6ffbcd8", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9c1a18a626770b60e8785aa34505dc2caf061c02/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1a18a626770b60e8785aa34505dc2caf061c02/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=9c1a18a626770b60e8785aa34505dc2caf061c02", "patch": "@@ -4,7 +4,7 @@ use std::{\n };\n \n use ra_db::{LocationIntener, FileId};\n-use ra_syntax::{TreeArc, SyntaxNode, SourceFile, AstNode, ast};\n+use ra_syntax::{TreeArc, SyntaxNode, SourceFile, AstNode, SyntaxNodePtr, ast};\n use ra_arena::{Arena, RawId, ArenaId, impl_arena_id};\n \n use crate::{\n@@ -309,7 +309,7 @@ pub struct SourceItemId {\n #[derive(Debug, PartialEq, Eq)]\n pub struct SourceFileItems {\n     file_id: HirFileId,\n-    arena: Arena<SourceFileItemId, TreeArc<SyntaxNode>>,\n+    arena: Arena<SourceFileItemId, SyntaxNodePtr>,\n }\n \n impl SourceFileItems {\n@@ -329,15 +329,15 @@ impl SourceFileItems {\n         // trait does not chage ids of top-level items, which helps caching.\n         bfs(source_file.syntax(), |it| {\n             if let Some(module_item) = ast::ModuleItem::cast(it) {\n-                self.alloc(module_item.syntax().to_owned());\n+                self.alloc(module_item.syntax());\n             } else if let Some(macro_call) = ast::MacroCall::cast(it) {\n-                self.alloc(macro_call.syntax().to_owned());\n+                self.alloc(macro_call.syntax());\n             }\n         })\n     }\n \n-    fn alloc(&mut self, item: TreeArc<SyntaxNode>) -> SourceFileItemId {\n-        self.arena.alloc(item)\n+    fn alloc(&mut self, item: &SyntaxNode) -> SourceFileItemId {\n+        self.arena.alloc(SyntaxNodePtr::new(item))\n     }\n     pub(crate) fn id_of(&self, file_id: HirFileId, item: &SyntaxNode) -> SourceFileItemId {\n         assert_eq!(\n@@ -348,17 +348,8 @@ impl SourceFileItems {\n         self.id_of_unchecked(item)\n     }\n     pub(crate) fn id_of_unchecked(&self, item: &SyntaxNode) -> SourceFileItemId {\n-        if let Some((id, _)) = self.arena.iter().find(|(_id, i)| *i == item) {\n-            return id;\n-        }\n-        // This should not happen. Let's try to give a sensible diagnostics.\n-        if let Some((id, i)) = self.arena.iter().find(|(_id, i)| i.range() == item.range()) {\n-            // FIXME(#288): whyyy are we getting here?\n-            log::error!(\n-                \"unequal syntax nodes with the same range:\\n{:?}\\n{:?}\",\n-                item,\n-                i\n-            );\n+        let ptr = SyntaxNodePtr::new(item);\n+        if let Some((id, _)) = self.arena.iter().find(|(_id, i)| **i == ptr) {\n             return id;\n         }\n         panic!(\n@@ -370,8 +361,8 @@ impl SourceFileItems {\n }\n \n impl std::ops::Index<SourceFileItemId> for SourceFileItems {\n-    type Output = SyntaxNode;\n-    fn index(&self, idx: SourceFileItemId) -> &SyntaxNode {\n+    type Output = SyntaxNodePtr;\n+    fn index(&self, idx: SourceFileItemId) -> &SyntaxNodePtr {\n         &self.arena[idx]\n     }\n }"}, {"sha": "380c0640478f7b8f95578dcca6df72a5657c3556", "filename": "crates/ra_hir/src/query_definitions.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c1a18a626770b60e8785aa34505dc2caf061c02/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c1a18a626770b60e8785aa34505dc2caf061c02/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fquery_definitions.rs?ref=9c1a18a626770b60e8785aa34505dc2caf061c02", "patch": "@@ -32,9 +32,12 @@ pub(super) fn file_item(\n     db: &impl HirDatabase,\n     source_item_id: SourceItemId,\n ) -> TreeArc<SyntaxNode> {\n+    let source_file = db.hir_parse(source_item_id.file_id);\n     match source_item_id.item_id {\n-        Some(id) => db.file_items(source_item_id.file_id)[id].to_owned(),\n-        None => db.hir_parse(source_item_id.file_id).syntax().to_owned(),\n+        Some(id) => db.file_items(source_item_id.file_id)[id]\n+            .to_node(&source_file)\n+            .to_owned(),\n+        None => source_file.syntax().to_owned(),\n     }\n }\n "}]}