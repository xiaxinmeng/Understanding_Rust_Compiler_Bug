{"sha": "a040e2f4f5104e8e3188735fea4f6d0b2632251e", "node_id": "C_kwDOAAsO6NoAKGEwNDBlMmY0ZjUxMDRlOGUzMTg4NzM1ZmVhNGY2ZDBiMjYzMjI1MWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-28T19:05:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-28T19:05:13Z"}, "message": "Rollup merge of #92823 - estebank:tweak-diag, r=jackh726\n\nTweak diagnostics\n\n* Recover from invalid `'label: ` before block.\n* Make suggestion to enclose statements in a block multipart.\n* Point at `match`, `while`, `loop` and `unsafe` keywords when failing\n  to parse their expression. (Fix #92705.)\n* Do not suggest `{ ; }`.\n* Do not suggest `|` when very unlikely to be what was wanted (in `let`\n  statements).", "tree": {"sha": "1d7623fa8144ced75e944d38ae8e1ec621e47f85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d7623fa8144ced75e944d38ae8e1ec621e47f85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a040e2f4f5104e8e3188735fea4f6d0b2632251e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiHRzqCRBK7hj4Ov3rIwAA7ukIAFLy50cy9QgvQTtrAdxgR1Bj\n36dmebhDyJpvgDWIYr6DVLcNA2cj/SS0e8QMm2aQTbN2uAu2H3yNjl5YDMZI/hwa\no/JBq3iWnR6yykkS8EssO6SHE2gqz3eRtjIF9Xllud+NChQN6lXMTUkqJ88M8LcB\nQj2vAndi7D2TOW91+4blO1TKQeIal3hWykYfPlS0Muuvbn8ICVm+EYwaKZl7Xm/Q\nKiISiZI0zQ5YISgiTCcVDvEjrISp8LZqa0q+j1OCltXl52WfiAN3Mn5aiJQ0echW\njV6Fo1lQUSVazXeF2u4xzDF2aNID79/UXv67qaC0p4dzqmNponu8DAd7EWjzv1M=\n=yett\n-----END PGP SIGNATURE-----\n", "payload": "tree 1d7623fa8144ced75e944d38ae8e1ec621e47f85\nparent 9d23c320e43b3d4e2ea0761fb56368bdd9109ed4\nparent f42b4f595e68b224d72e143b2785160876ab0ff1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646075113 +0100\ncommitter GitHub <noreply@github.com> 1646075113 +0100\n\nRollup merge of #92823 - estebank:tweak-diag, r=jackh726\n\nTweak diagnostics\n\n* Recover from invalid `'label: ` before block.\n* Make suggestion to enclose statements in a block multipart.\n* Point at `match`, `while`, `loop` and `unsafe` keywords when failing\n  to parse their expression. (Fix #92705.)\n* Do not suggest `{ ; }`.\n* Do not suggest `|` when very unlikely to be what was wanted (in `let`\n  statements).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a040e2f4f5104e8e3188735fea4f6d0b2632251e", "html_url": "https://github.com/rust-lang/rust/commit/a040e2f4f5104e8e3188735fea4f6d0b2632251e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a040e2f4f5104e8e3188735fea4f6d0b2632251e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d23c320e43b3d4e2ea0761fb56368bdd9109ed4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d23c320e43b3d4e2ea0761fb56368bdd9109ed4", "html_url": "https://github.com/rust-lang/rust/commit/9d23c320e43b3d4e2ea0761fb56368bdd9109ed4"}, {"sha": "f42b4f595e68b224d72e143b2785160876ab0ff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f42b4f595e68b224d72e143b2785160876ab0ff1", "html_url": "https://github.com/rust-lang/rust/commit/f42b4f595e68b224d72e143b2785160876ab0ff1"}], "stats": {"total": 477, "additions": 316, "deletions": 161}, "files": [{"sha": "ab3951d76830145faf03e42bbdb63b4513c95f4f", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, PResult};\n use rustc_feature::Features;\n use rustc_parse::parser::{\n-    AttemptLocalParseRecovery, ForceCollect, Parser, RecoverColon, RecoverComma,\n+    AttemptLocalParseRecovery, CommaRecoveryMode, ForceCollect, Parser, RecoverColon, RecoverComma,\n };\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{UNUSED_ATTRIBUTES, UNUSED_DOC_COMMENTS};\n@@ -911,6 +911,7 @@ pub fn parse_ast_fragment<'a>(\n             None,\n             RecoverComma::No,\n             RecoverColon::Yes,\n+            CommaRecoveryMode::LikelyTuple,\n         )?),\n         AstFragmentKind::Crate => AstFragment::Crate(this.parse_crate_mod()?),\n         AstFragmentKind::Arms"}, {"sha": "5aa8ccf497b7b407777f09c26bcef8f86e4b752d", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -1,8 +1,8 @@\n use super::pat::Expected;\n use super::ty::{AllowPlus, IsAsCast};\n use super::{\n-    BlockMode, Parser, PathStyle, RecoverColon, RecoverComma, Restrictions, SemiColonMode, SeqSep,\n-    TokenExpectType, TokenType,\n+    BlockMode, CommaRecoveryMode, Parser, PathStyle, RecoverColon, RecoverComma, Restrictions,\n+    SemiColonMode, SeqSep, TokenExpectType, TokenType,\n };\n \n use rustc_ast as ast;\n@@ -2245,12 +2245,32 @@ impl<'a> Parser<'a> {\n         first_pat\n     }\n \n+    crate fn maybe_recover_unexpected_block_label(&mut self) -> bool {\n+        let Some(label) = self.eat_label().filter(|_| {\n+            self.eat(&token::Colon) && self.token.kind == token::OpenDelim(token::Brace)\n+        }) else {\n+            return false;\n+        };\n+        let span = label.ident.span.to(self.prev_token.span);\n+        let mut err = self.struct_span_err(span, \"block label not supported here\");\n+        err.span_label(span, \"not supported here\");\n+        err.tool_only_span_suggestion(\n+            label.ident.span.until(self.token.span),\n+            \"remove this block label\",\n+            String::new(),\n+            Applicability::MachineApplicable,\n+        );\n+        err.emit();\n+        true\n+    }\n+\n     /// Some special error handling for the \"top-level\" patterns in a match arm,\n     /// `for` loop, `let`, &c. (in contrast to subpatterns within such).\n     crate fn maybe_recover_unexpected_comma(\n         &mut self,\n         lo: Span,\n         rc: RecoverComma,\n+        rt: CommaRecoveryMode,\n     ) -> PResult<'a, ()> {\n         if rc == RecoverComma::No || self.token != token::Comma {\n             return Ok(());\n@@ -2270,20 +2290,25 @@ impl<'a> Parser<'a> {\n         let seq_span = lo.to(self.prev_token.span);\n         let mut err = self.struct_span_err(comma_span, \"unexpected `,` in pattern\");\n         if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n-            const MSG: &str = \"try adding parentheses to match on a tuple...\";\n-\n-            err.span_suggestion(\n-                seq_span,\n-                MSG,\n-                format!(\"({})\", seq_snippet),\n-                Applicability::MachineApplicable,\n-            );\n-            err.span_suggestion(\n-                seq_span,\n-                \"...or a vertical bar to match on multiple alternatives\",\n-                seq_snippet.replace(',', \" |\"),\n+            err.multipart_suggestion(\n+                &format!(\n+                    \"try adding parentheses to match on a tuple{}\",\n+                    if let CommaRecoveryMode::LikelyTuple = rt { \"\" } else { \"...\" },\n+                ),\n+                vec![\n+                    (seq_span.shrink_to_lo(), \"(\".to_string()),\n+                    (seq_span.shrink_to_hi(), \")\".to_string()),\n+                ],\n                 Applicability::MachineApplicable,\n             );\n+            if let CommaRecoveryMode::EitherTupleOrPipe = rt {\n+                err.span_suggestion(\n+                    seq_span,\n+                    \"...or a vertical bar to match on multiple alternatives\",\n+                    seq_snippet.replace(',', \" |\"),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         }\n         Err(err)\n     }"}, {"sha": "a54ab4a92e1b81898360dc3d47da14b893fa9459", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -1,4 +1,4 @@\n-use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};\n+use super::pat::{CommaRecoveryMode, RecoverColon, RecoverComma, PARAM_EXPECTED};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{\n     AttrWrapper, BlockMode, ClosureSpans, ForceCollect, Parser, PathStyle, Restrictions, TokenType,\n@@ -1286,18 +1286,27 @@ impl<'a> Parser<'a> {\n         } else if let Some(label) = self.eat_label() {\n             self.parse_labeled_expr(label, attrs, true)\n         } else if self.eat_keyword(kw::Loop) {\n-            self.parse_loop_expr(None, self.prev_token.span, attrs)\n+            let sp = self.prev_token.span;\n+            self.parse_loop_expr(None, self.prev_token.span, attrs).map_err(|mut err| {\n+                err.span_label(sp, \"while parsing this `loop` expression\");\n+                err\n+            })\n         } else if self.eat_keyword(kw::Continue) {\n             let kind = ExprKind::Continue(self.eat_label());\n             Ok(self.mk_expr(lo.to(self.prev_token.span), kind, attrs))\n         } else if self.eat_keyword(kw::Match) {\n             let match_sp = self.prev_token.span;\n             self.parse_match_expr(attrs).map_err(|mut err| {\n-                err.span_label(match_sp, \"while parsing this match expression\");\n+                err.span_label(match_sp, \"while parsing this `match` expression\");\n                 err\n             })\n         } else if self.eat_keyword(kw::Unsafe) {\n+            let sp = self.prev_token.span;\n             self.parse_block_expr(None, lo, BlockCheckMode::Unsafe(ast::UserProvided), attrs)\n+                .map_err(|mut err| {\n+                    err.span_label(sp, \"while parsing this `unsafe` expression\");\n+                    err\n+                })\n         } else if self.check_inline_const(0) {\n             self.parse_const_block(lo.to(self.token.span), false)\n         } else if self.is_do_catch_block() {\n@@ -2160,7 +2169,12 @@ impl<'a> Parser<'a> {\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n-        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(\n+            None,\n+            RecoverComma::Yes,\n+            RecoverColon::Yes,\n+            CommaRecoveryMode::LikelyTuple,\n+        )?;\n         self.expect(&token::Eq)?;\n         let expr = self.with_res(self.restrictions | Restrictions::NO_STRUCT_LITERAL, |this| {\n             this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n@@ -2223,7 +2237,12 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(\n+            None,\n+            RecoverComma::Yes,\n+            RecoverColon::Yes,\n+            CommaRecoveryMode::LikelyTuple,\n+        )?;\n         if !self.eat_keyword(kw::In) {\n             self.error_missing_in_for_loop();\n         }\n@@ -2266,8 +2285,15 @@ impl<'a> Parser<'a> {\n         lo: Span,\n         mut attrs: AttrVec,\n     ) -> PResult<'a, P<Expr>> {\n-        let cond = self.parse_cond_expr()?;\n-        let (iattrs, body) = self.parse_inner_attrs_and_block()?;\n+        let cond = self.parse_cond_expr().map_err(|mut err| {\n+            err.span_label(lo, \"while parsing the condition of this `while` expression\");\n+            err\n+        })?;\n+        let (iattrs, body) = self.parse_inner_attrs_and_block().map_err(|mut err| {\n+            err.span_label(lo, \"while parsing the body of this `while` expression\");\n+            err.span_label(cond.span, \"this `while` condition successfully parsed\");\n+            err\n+        })?;\n         attrs.extend(iattrs);\n         Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::While(cond, body, opt_label), attrs))\n     }\n@@ -2284,7 +2310,7 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_expr(lo.to(self.prev_token.span), ExprKind::Loop(body, opt_label), attrs))\n     }\n \n-    fn eat_label(&mut self) -> Option<Label> {\n+    crate fn eat_label(&mut self) -> Option<Label> {\n         self.token.lifetime().map(|ident| {\n             self.bump();\n             Label { ident }\n@@ -2305,7 +2331,12 @@ impl<'a> Parser<'a> {\n                     Applicability::MaybeIncorrect, // speculative\n                 );\n             }\n-            return Err(e);\n+            if self.maybe_recover_unexpected_block_label() {\n+                e.cancel();\n+                self.bump();\n+            } else {\n+                return Err(e);\n+            }\n         }\n         attrs.extend(self.parse_inner_attributes()?);\n \n@@ -2441,7 +2472,12 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n-            let pat = this.parse_pat_allow_top_alt(None, RecoverComma::Yes, RecoverColon::Yes)?;\n+            let pat = this.parse_pat_allow_top_alt(\n+                None,\n+                RecoverComma::Yes,\n+                RecoverColon::Yes,\n+                CommaRecoveryMode::EitherTupleOrPipe,\n+            )?;\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n                 let cond = this.parse_expr()?;"}, {"sha": "c6e692f701b6969f39c0eff8a197f35556856dcb", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -15,7 +15,7 @@ pub use attr_wrapper::AttrWrapper;\n pub use diagnostics::AttemptLocalParseRecovery;\n use diagnostics::Error;\n pub(crate) use item::FnParseMode;\n-pub use pat::{RecoverColon, RecoverComma};\n+pub use pat::{CommaRecoveryMode, RecoverColon, RecoverComma};\n pub use path::PathStyle;\n \n use rustc_ast::ptr::P;"}, {"sha": "83e0a4997ad85020b539b5d61a67a513d86a5cbe", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -5,7 +5,7 @@ use rustc_ast_pretty::pprust;\n use rustc_errors::PResult;\n use rustc_span::symbol::{kw, Ident};\n \n-use crate::parser::pat::{RecoverColon, RecoverComma};\n+use crate::parser::pat::{CommaRecoveryMode, RecoverColon, RecoverComma};\n use crate::parser::{FollowedByType, ForceCollect, Parser, PathStyle};\n \n impl<'a> Parser<'a> {\n@@ -125,7 +125,7 @@ impl<'a> Parser<'a> {\n                 token::NtPat(self.collect_tokens_no_attrs(|this| match kind {\n                     NonterminalKind::PatParam { .. } => this.parse_pat_no_top_alt(None),\n                     NonterminalKind::PatWithOr { .. } => {\n-                        this.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)\n+                        this.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No, CommaRecoveryMode::EitherTupleOrPipe)\n                     }\n                     _ => unreachable!(),\n                 })?)"}, {"sha": "ff536d15cbfca6194e5783c151f1d7b0b26109ca", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -33,6 +33,13 @@ pub enum RecoverColon {\n     No,\n }\n \n+/// Whether or not to recover a `a, b` when parsing patterns as `(a, b)` or that *and* `a | b`.\n+#[derive(PartialEq, Copy, Clone)]\n+pub enum CommaRecoveryMode {\n+    LikelyTuple,\n+    EitherTupleOrPipe,\n+}\n+\n /// The result of `eat_or_separator`. We want to distinguish which case we are in to avoid\n /// emitting duplicate diagnostics.\n #[derive(Debug, Clone, Copy)]\n@@ -68,8 +75,9 @@ impl<'a> Parser<'a> {\n         expected: Expected,\n         rc: RecoverComma,\n         ra: RecoverColon,\n+        rt: CommaRecoveryMode,\n     ) -> PResult<'a, P<Pat>> {\n-        self.parse_pat_allow_top_alt_inner(expected, rc, ra).map(|(pat, _)| pat)\n+        self.parse_pat_allow_top_alt_inner(expected, rc, ra, rt).map(|(pat, _)| pat)\n     }\n \n     /// Returns the pattern and a bool indicating whether we recovered from a trailing vert (true =\n@@ -79,6 +87,7 @@ impl<'a> Parser<'a> {\n         expected: Expected,\n         rc: RecoverComma,\n         ra: RecoverColon,\n+        rt: CommaRecoveryMode,\n     ) -> PResult<'a, (P<Pat>, bool)> {\n         // Keep track of whether we recovered from a trailing vert so that we can avoid duplicated\n         // suggestions (which bothers rustfix).\n@@ -92,7 +101,7 @@ impl<'a> Parser<'a> {\n \n         // Parse the first pattern (`p_0`).\n         let first_pat = self.parse_pat_no_top_alt(expected)?;\n-        self.maybe_recover_unexpected_comma(first_pat.span, rc)?;\n+        self.maybe_recover_unexpected_comma(first_pat.span, rc, rt)?;\n \n         // If the next token is not a `|`,\n         // this is not an or-pattern and we should exit here.\n@@ -130,7 +139,7 @@ impl<'a> Parser<'a> {\n                 err.span_label(lo, WHILE_PARSING_OR_MSG);\n                 err\n             })?;\n-            self.maybe_recover_unexpected_comma(pat.span, rc)?;\n+            self.maybe_recover_unexpected_comma(pat.span, rc, rt)?;\n             pats.push(pat);\n         }\n         let or_pattern_span = lo.to(self.prev_token.span);\n@@ -155,8 +164,12 @@ impl<'a> Parser<'a> {\n         // We use `parse_pat_allow_top_alt` regardless of whether we actually want top-level\n         // or-patterns so that we can detect when a user tries to use it. This allows us to print a\n         // better error message.\n-        let (pat, trailing_vert) =\n-            self.parse_pat_allow_top_alt_inner(expected, rc, RecoverColon::No)?;\n+        let (pat, trailing_vert) = self.parse_pat_allow_top_alt_inner(\n+            expected,\n+            rc,\n+            RecoverColon::No,\n+            CommaRecoveryMode::LikelyTuple,\n+        )?;\n         let colon = self.eat(&token::Colon);\n \n         if let PatKind::Or(pats) = &pat.kind {\n@@ -315,7 +328,12 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::OpenDelim(token::Bracket)) {\n             // Parse `[pat, pat,...]` as a slice pattern.\n             let (pats, _) = self.parse_delim_comma_seq(token::Bracket, |p| {\n-                p.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)\n+                p.parse_pat_allow_top_alt(\n+                    None,\n+                    RecoverComma::No,\n+                    RecoverColon::No,\n+                    CommaRecoveryMode::EitherTupleOrPipe,\n+                )\n             })?;\n             PatKind::Slice(pats)\n         } else if self.check(&token::DotDot) && !self.is_pat_range_end_start(1) {\n@@ -529,7 +547,12 @@ impl<'a> Parser<'a> {\n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n         let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)\n+            p.parse_pat_allow_top_alt(\n+                None,\n+                RecoverComma::No,\n+                RecoverColon::No,\n+                CommaRecoveryMode::LikelyTuple,\n+            )\n         })?;\n \n         // Here, `(pat,)` is a tuple pattern.\n@@ -873,7 +896,12 @@ impl<'a> Parser<'a> {\n     /// Parse tuple struct or tuple variant pattern (e.g. `Foo(...)` or `Foo::Bar(...)`).\n     fn parse_pat_tuple_struct(&mut self, qself: Option<QSelf>, path: Path) -> PResult<'a, PatKind> {\n         let (fields, _) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)\n+            p.parse_pat_allow_top_alt(\n+                None,\n+                RecoverComma::No,\n+                RecoverColon::No,\n+                CommaRecoveryMode::EitherTupleOrPipe,\n+            )\n         })?;\n         if qself.is_some() {\n             self.sess.gated_spans.gate(sym::more_qualified_paths, path.span);\n@@ -1033,7 +1061,12 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form `fieldname: pat`.\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_allow_top_alt(None, RecoverComma::No, RecoverColon::No)?;\n+            let pat = self.parse_pat_allow_top_alt(\n+                None,\n+                RecoverComma::No,\n+                RecoverColon::No,\n+                CommaRecoveryMode::EitherTupleOrPipe,\n+            )?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "2e17a5c24f2ad8ce14431ca2ed3bc4bd04a10651", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -434,6 +434,8 @@ impl<'a> Parser<'a> {\n             Ok(Some(_))\n                 if self.look_ahead(1, |t| t == &token::OpenDelim(token::Brace))\n                     || do_not_suggest_help => {}\n+            // Do not suggest `if foo println!(\"\") {;}` (as would be seen in test for #46836).\n+            Ok(Some(Stmt { kind: StmtKind::Empty, .. })) => {}\n             Ok(Some(stmt)) => {\n                 let stmt_own_line = self.sess.source_map().is_line_before_span_empty(sp);\n                 let stmt_span = if stmt_own_line && self.eat(&token::Semi) {\n@@ -442,15 +444,15 @@ impl<'a> Parser<'a> {\n                 } else {\n                     stmt.span\n                 };\n-                if let Ok(snippet) = self.span_to_snippet(stmt_span) {\n-                    e.span_suggestion(\n-                        stmt_span,\n-                        \"try placing this code inside a block\",\n-                        format!(\"{{ {} }}\", snippet),\n-                        // Speculative; has been misleading in the past (#46836).\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                }\n+                e.multipart_suggestion(\n+                    \"try placing this code inside a block\",\n+                    vec![\n+                        (stmt_span.shrink_to_lo(), \"{ \".to_string()),\n+                        (stmt_span.shrink_to_hi(), \" }\".to_string()),\n+                    ],\n+                    // Speculative; has been misleading in the past (#46836).\n+                    Applicability::MaybeIncorrect,\n+                );\n             }\n             Err(e) => {\n                 self.recover_stmt_(SemiColonMode::Break, BlockMode::Ignore);\n@@ -483,15 +485,15 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, (Vec<Attribute>, P<Block>)> {\n         maybe_whole!(self, NtBlock, |x| (Vec::new(), x));\n \n+        self.maybe_recover_unexpected_block_label();\n         if !self.eat(&token::OpenDelim(token::Brace)) {\n             return self.error_block_no_opening_brace();\n         }\n \n         let attrs = self.parse_inner_attributes()?;\n-        let tail = if let Some(tail) = self.maybe_suggest_struct_literal(lo, blk_mode) {\n-            tail?\n-        } else {\n-            self.parse_block_tail(lo, blk_mode, AttemptLocalParseRecovery::Yes)?\n+        let tail = match self.maybe_suggest_struct_literal(lo, blk_mode) {\n+            Some(tail) => tail?,\n+            None => self.parse_block_tail(lo, blk_mode, AttemptLocalParseRecovery::Yes)?,\n         };\n         Ok((attrs, tail))\n     }\n@@ -587,11 +589,11 @@ impl<'a> Parser<'a> {\n                 // We might be at the `,` in `let x = foo<bar, baz>;`. Try to recover.\n                 match &mut local.kind {\n                     LocalKind::Init(expr) | LocalKind::InitElse(expr, _) => {\n-                            self.check_mistyped_turbofish_with_multiple_type_params(e, expr)?;\n-                            // We found `foo<bar, baz>`, have we fully recovered?\n-                            self.expect_semi()?;\n-                        }\n-                        LocalKind::Decl => return Err(e),\n+                        self.check_mistyped_turbofish_with_multiple_type_params(e, expr)?;\n+                        // We found `foo<bar, baz>`, have we fully recovered?\n+                        self.expect_semi()?;\n+                    }\n+                    LocalKind::Decl => return Err(e),\n                 }\n                 eat_semi = false;\n             }"}, {"sha": "b30f2883732b459eaa9c5d76ea19a883fe792b2e", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -132,7 +132,7 @@ error: expected one of `.`, `?`, `{`, or an operator, found `}`\n LL |     match await { await => () }\n    |     -----                      - expected one of `.`, `?`, `{`, or an operator\n    |     |\n-   |     while parsing this match expression\n+   |     while parsing this `match` expression\n ...\n LL | }\n    | ^ unexpected token"}, {"sha": "609a5efd46feeb9ee55ce95e3db23739a73112e9", "filename": "src/test/ui/did_you_mean/issue-46836-identifier-not-instead-of-negation.stderr", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -28,10 +28,7 @@ error: expected `{`, found `;`\n LL |     if not  // lack of braces is [sic]\n    |     -- this `if` expression has a condition, but no block\n LL |         println!(\"Then when?\");\n-   |                               ^\n-   |                               |\n-   |                               expected `{`\n-   |                               help: try placing this code inside a block: `{ ; }`\n+   |                               ^ expected `{`\n \n error: unexpected `2` after identifier\n   --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:26:24"}, {"sha": "a3c607b59037f4b6237164ae67bf5eef157a342d", "filename": "src/test/ui/did_you_mean/issue-48492-tuple-destructure-missing-parens.stderr", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-48492-tuple-destructure-missing-parens.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -2,31 +2,25 @@ error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:38:17\n    |\n LL |     while let b1, b2, b3 = reading_frame.next().expect(\"there should be a start codon\") {\n-   |                 ^\n+   |     -----       ^\n+   |     |\n+   |     while parsing the condition of this `while` expression\n    |\n-help: try adding parentheses to match on a tuple...\n+help: try adding parentheses to match on a tuple\n    |\n LL |     while let (b1, b2, b3) = reading_frame.next().expect(\"there should be a start codon\") {\n-   |               ~~~~~~~~~~~~\n-help: ...or a vertical bar to match on multiple alternatives\n-   |\n-LL |     while let b1 | b2 | b3 = reading_frame.next().expect(\"there should be a start codon\") {\n-   |               ~~~~~~~~~~~~\n+   |               +          +\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:49:14\n    |\n LL |     if let b1, b2, b3 = reading_frame.next().unwrap() {\n    |              ^\n    |\n-help: try adding parentheses to match on a tuple...\n+help: try adding parentheses to match on a tuple\n    |\n LL |     if let (b1, b2, b3) = reading_frame.next().unwrap() {\n-   |            ~~~~~~~~~~~~\n-help: ...or a vertical bar to match on multiple alternatives\n-   |\n-LL |     if let b1 | b2 | b3 = reading_frame.next().unwrap() {\n-   |            ~~~~~~~~~~~~\n+   |            +          +\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:59:28\n@@ -37,7 +31,7 @@ LL |         Nucleotide::Adenine, Nucleotide::Cytosine, _ => true\n help: try adding parentheses to match on a tuple...\n    |\n LL |         (Nucleotide::Adenine, Nucleotide::Cytosine, _) => true\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+   |         +                                            +\n help: ...or a vertical bar to match on multiple alternatives\n    |\n LL |         Nucleotide::Adenine | Nucleotide::Cytosine | _ => true\n@@ -49,44 +43,32 @@ error: unexpected `,` in pattern\n LL |     for x, _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n    |          ^\n    |\n-help: try adding parentheses to match on a tuple...\n+help: try adding parentheses to match on a tuple\n    |\n LL |     for (x, _barr_body) in women.iter().map(|woman| woman.allosomes.clone()) {\n-   |         ~~~~~~~~~~~~~~~\n-help: ...or a vertical bar to match on multiple alternatives\n-   |\n-LL |     for x | _barr_body in women.iter().map(|woman| woman.allosomes.clone()) {\n-   |         ~~~~~~~~~~~~~~\n+   |         +             +\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:75:10\n    |\n LL |     for x, y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n    |          ^\n    |\n-help: try adding parentheses to match on a tuple...\n+help: try adding parentheses to match on a tuple\n    |\n LL |     for (x, y @ Allosome::Y(_)) in men.iter().map(|man| man.allosomes.clone()) {\n-   |         ~~~~~~~~~~~~~~~~~~~~~~~\n-help: ...or a vertical bar to match on multiple alternatives\n-   |\n-LL |     for x | y @ Allosome::Y(_) in men.iter().map(|man| man.allosomes.clone()) {\n-   |         ~~~~~~~~~~~~~~~~~~~~~~\n+   |         +                     +\n \n error: unexpected `,` in pattern\n   --> $DIR/issue-48492-tuple-destructure-missing-parens.rs:84:14\n    |\n LL |     let women, men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n    |              ^\n    |\n-help: try adding parentheses to match on a tuple...\n+help: try adding parentheses to match on a tuple\n    |\n LL |     let (women, men): (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n-   |         ~~~~~~~~~~~~\n-help: ...or a vertical bar to match on multiple alternatives\n-   |\n-LL |     let women | men: (Vec<Genome>, Vec<Genome>) = genomes.iter().cloned()\n-   |         ~~~~~~~~~~~\n+   |         +          +\n \n error: aborting due to 6 previous errors\n "}, {"sha": "feabe3814dcf9855c043f9ae33632b4331664368", "filename": "src/test/ui/issues/issue-39848.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -2,16 +2,18 @@ error: expected `{`, found `foo`\n   --> $DIR/issue-39848.rs:3:21\n    |\n LL |         if $tgt.has_$field() {}\n-   |         --          ^^^^^^--\n-   |         |           |\n-   |         |           expected `{`\n-   |         |           help: try placing this code inside a block: `{ $field() }`\n+   |         --          ^^^^^^ expected `{`\n+   |         |\n    |         this `if` expression has a condition, but no block\n ...\n LL |     get_opt!(bar, foo);\n    |     ------------------ in this macro invocation\n    |\n    = note: this error originates in the macro `get_opt` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: try placing this code inside a block\n+   |\n+LL |         if $tgt.has_{ $field() } {}\n+   |                     +          +\n \n error: aborting due to previous error\n "}, {"sha": "c1d2023a21629ca014171a1697ffd2d21db39d0e", "filename": "src/test/ui/label/label_break_value_illegal_uses.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.fixed?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+#![feature(label_break_value)]\n+\n+// These are forbidden occurrences of label-break-value\n+\n+#[allow(unused_unsafe)]\n+fn labeled_unsafe() {\n+    unsafe {} //~ ERROR block label not supported here\n+}\n+\n+fn labeled_if() {\n+    if true {} //~ ERROR block label not supported here\n+}\n+\n+fn labeled_else() {\n+    if true {} else {} //~ ERROR block label not supported here\n+}\n+\n+fn labeled_match() {\n+    match false { //~ ERROR block label not supported here\n+        _ => {}\n+    }\n+}\n+\n+fn main() {\n+    labeled_unsafe();\n+    labeled_if();\n+    labeled_else();\n+    labeled_match();\n+}"}, {"sha": "5b20c95e581e5b1e84219a7361e3d1dfdf723802", "filename": "src/test/ui/label/label_break_value_illegal_uses.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -1,21 +1,30 @@\n+// run-rustfix\n #![feature(label_break_value)]\n \n // These are forbidden occurrences of label-break-value\n \n+#[allow(unused_unsafe)]\n fn labeled_unsafe() {\n-    unsafe 'b: {} //~ ERROR expected `{`, found `'b`\n+    unsafe 'b: {} //~ ERROR block label not supported here\n }\n \n fn labeled_if() {\n-    if true 'b: {} //~ ERROR expected `{`, found `'b`\n+    if true 'b: {} //~ ERROR block label not supported here\n }\n \n fn labeled_else() {\n-    if true {} else 'b: {} //~ ERROR expected `{`, found `'b`\n+    if true {} else 'b: {} //~ ERROR block label not supported here\n }\n \n fn labeled_match() {\n-    match false 'b: {} //~ ERROR expected one of `.`, `?`, `{`, or an operator\n+    match false 'b: { //~ ERROR block label not supported here\n+        _ => {}\n+    }\n }\n \n-pub fn main() {}\n+fn main() {\n+    labeled_unsafe();\n+    labeled_if();\n+    labeled_else();\n+    labeled_match();\n+}"}, {"sha": "24b733fec5301ca3e478433be374ce98d3302411", "filename": "src/test/ui/label/label_break_value_illegal_uses.stderr", "status": "modified", "additions": 13, "deletions": 25, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -1,38 +1,26 @@\n-error: expected `{`, found `'b`\n-  --> $DIR/label_break_value_illegal_uses.rs:6:12\n+error: block label not supported here\n+  --> $DIR/label_break_value_illegal_uses.rs:8:12\n    |\n LL |     unsafe 'b: {}\n-   |            ^^----\n-   |            |\n-   |            expected `{`\n-   |            help: try placing this code inside a block: `{ 'b: {} }`\n+   |            ^^^ not supported here\n \n-error: expected `{`, found `'b`\n-  --> $DIR/label_break_value_illegal_uses.rs:10:13\n+error: block label not supported here\n+  --> $DIR/label_break_value_illegal_uses.rs:12:13\n    |\n LL |     if true 'b: {}\n-   |     --      ^^----\n-   |     |       |\n-   |     |       expected `{`\n-   |     |       help: try placing this code inside a block: `{ 'b: {} }`\n-   |     this `if` expression has a condition, but no block\n+   |             ^^^ not supported here\n \n-error: expected `{`, found `'b`\n-  --> $DIR/label_break_value_illegal_uses.rs:14:21\n+error: block label not supported here\n+  --> $DIR/label_break_value_illegal_uses.rs:16:21\n    |\n LL |     if true {} else 'b: {}\n-   |                     ^^----\n-   |                     |\n-   |                     expected `{`\n-   |                     help: try placing this code inside a block: `{ 'b: {} }`\n+   |                     ^^^ not supported here\n \n-error: expected one of `.`, `?`, `{`, or an operator, found `'b`\n-  --> $DIR/label_break_value_illegal_uses.rs:18:17\n+error: block label not supported here\n+  --> $DIR/label_break_value_illegal_uses.rs:20:17\n    |\n-LL |     match false 'b: {}\n-   |     -----       ^^ expected one of `.`, `?`, `{`, or an operator\n-   |     |\n-   |     while parsing this match expression\n+LL |     match false 'b: {\n+   |                 ^^^ not supported here\n \n error: aborting due to 4 previous errors\n "}, {"sha": "a0324565673dac6f45aa620c62f9a7ba1ed9d55f", "filename": "src/test/ui/let-else/let-else-if.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -7,10 +7,10 @@ LL |     let Some(_) = Some(()) else if true {\n help: try placing this code inside a block\n    |\n LL ~     let Some(_) = Some(()) else { if true {\n-LL +\n-LL +         return;\n-LL +     } else {\n-LL +         return;\n+LL |\n+LL |         return;\n+LL |     } else {\n+LL |         return;\n LL ~     } };\n    |\n "}, {"sha": "148e214e58ec1f7ce8a2c7605669294bc4c8895c", "filename": "src/test/ui/missing/missing-block-hint.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fmissing%2Fmissing-block-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fmissing%2Fmissing-block-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-block-hint.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -12,10 +12,12 @@ error: expected `{`, found `bar`\n LL |         if (foo)\n    |         -- this `if` expression has a condition, but no block\n LL |             bar;\n-   |             ^^^-\n-   |             |\n-   |             expected `{`\n-   |             help: try placing this code inside a block: `{ bar; }`\n+   |             ^^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |             { bar; }\n+   |             +      +\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f232f480ce9c2595647092d338c572a41f45286b", "filename": "src/test/ui/parser/block-no-opening-brace.stderr", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fblock-no-opening-brace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fblock-no-opening-brace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fblock-no-opening-brace.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -1,29 +1,41 @@\n error: expected `{`, found keyword `let`\n   --> $DIR/block-no-opening-brace.rs:9:9\n    |\n+LL |     loop\n+   |     ---- while parsing this `loop` expression\n LL |         let x = 0;\n-   |         ^^^-------\n-   |         |\n-   |         expected `{`\n-   |         help: try placing this code inside a block: `{ let x = 0; }`\n+   |         ^^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |         { let x = 0; }\n+   |         +            +\n \n error: expected `{`, found keyword `let`\n   --> $DIR/block-no-opening-brace.rs:15:9\n    |\n+LL |     while true\n+   |     ----- ---- this `while` condition successfully parsed\n+   |     |\n+   |     while parsing the body of this `while` expression\n LL |         let x = 0;\n-   |         ^^^-------\n-   |         |\n-   |         expected `{`\n-   |         help: try placing this code inside a block: `{ let x = 0; }`\n+   |         ^^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |         { let x = 0; }\n+   |         +            +\n \n error: expected `{`, found keyword `let`\n   --> $DIR/block-no-opening-brace.rs:20:9\n    |\n LL |         let x = 0;\n-   |         ^^^-------\n-   |         |\n-   |         expected `{`\n-   |         help: try placing this code inside a block: `{ let x = 0; }`\n+   |         ^^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |         { let x = 0; }\n+   |         +            +\n \n error: expected expression, found reserved keyword `try`\n   --> $DIR/block-no-opening-brace.rs:24:5"}, {"sha": "3d16a2067ccae7f882f8549df17a85cace19017f", "filename": "src/test/ui/parser/closure-return-syntax.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fclosure-return-syntax.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -2,10 +2,12 @@ error: expected `{`, found `22`\n   --> $DIR/closure-return-syntax.rs:5:23\n    |\n LL |     let x = || -> i32 22;\n-   |                       ^^\n-   |                       |\n-   |                       expected `{`\n-   |                       help: try placing this code inside a block: `{ 22 }`\n+   |                       ^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |     let x = || -> i32 { 22 };\n+   |                       +    +\n \n error: aborting due to previous error\n "}, {"sha": "3589016e1dc83f5f352eda753d7cd069f4e03472", "filename": "src/test/ui/parser/issues/issue-62554.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62554.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -63,9 +63,8 @@ LL | fn foo(u: u8) { if u8 macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s\n    |\n help: try placing this code inside a block\n    |\n-LL ~ fn foo(u: u8) { if u8 { macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 {\n-LL +  }\n-   |\n+LL | fn foo(u: u8) { if u8 { macro_rules! u8 { (u6) => { fn uuuuuuuuuuu() { use s loo mod u8 { }\n+   |                       +                                                                    +\n \n error: aborting due to 6 previous errors\n "}, {"sha": "871b5d59651343b027e376d060e09e6891547973", "filename": "src/test/ui/parser/issues/issue-62973.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -50,7 +50,7 @@ error: expected one of `.`, `?`, `{`, or an operator, found `}`\n   --> $DIR/issue-62973.rs:8:2\n    |\n LL | fn p() { match s { v, E { [) {) }\n-   |          ----- while parsing this match expression\n+   |          ----- while parsing this `match` expression\n LL | \n LL | \n    |  ^ expected one of `.`, `?`, `{`, or an operator"}, {"sha": "423147b27aa0b0c0c16ddf6d6c10d5c807e63c47", "filename": "src/test/ui/parser/match-refactor-to-expr.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.fixed?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -2,7 +2,7 @@\n \n fn main() {\n     let foo =\n-         //~ NOTE while parsing this match expression\n+         //~ NOTE while parsing this `match` expression\n         Some(4).unwrap_or(5)\n         //~^ NOTE expected one of `.`, `?`, `{`, or an operator\n         ; //~ NOTE unexpected token"}, {"sha": "fcba5d0447e0df6d678ab34f72193b38b1e5e1b7", "filename": "src/test/ui/parser/match-refactor-to-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -2,7 +2,7 @@\n \n fn main() {\n     let foo =\n-        match //~ NOTE while parsing this match expression\n+        match //~ NOTE while parsing this `match` expression\n         Some(4).unwrap_or(5)\n         //~^ NOTE expected one of `.`, `?`, `{`, or an operator\n         ; //~ NOTE unexpected token"}, {"sha": "851bef8f2c7e8c5eb65971ec036ddb3b46e4d230", "filename": "src/test/ui/parser/match-refactor-to-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmatch-refactor-to-expr.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -4,7 +4,7 @@ error: expected one of `.`, `?`, `{`, or an operator, found `;`\n LL |         match\n    |         -----\n    |         |\n-   |         while parsing this match expression\n+   |         while parsing this `match` expression\n    |         help: try removing this `match`\n LL |         Some(4).unwrap_or(5)\n    |                             - expected one of `.`, `?`, `{`, or an operator"}, {"sha": "063c0145c85c681984e65f35c49f87bf9aea5ec2", "filename": "src/test/ui/parser/while-if-let-without-body.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fwhile-if-let-without-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fwhile-if-let-without-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhile-if-let-without-body.rs?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -0,0 +1,13 @@\n+fn main() {\n+    let container = vec![Some(1), Some(2), None];\n+\n+    let mut i = 0;\n+    while if let Some(thing) = container.get(i) {\n+        //~^ NOTE while parsing the body of this `while` expression\n+        //~| NOTE this `while` condition successfully parsed\n+        println!(\"{:?}\", thing);\n+        i += 1;\n+    }\n+}\n+//~^ ERROR expected `{`, found `}`\n+//~| NOTE expected `{`"}, {"sha": "2dac45c115d11915f4f2f471316c7789288b14dc", "filename": "src/test/ui/parser/while-if-let-without-body.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fwhile-if-let-without-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Fparser%2Fwhile-if-let-without-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fwhile-if-let-without-body.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -0,0 +1,18 @@\n+error: expected `{`, found `}`\n+  --> $DIR/while-if-let-without-body.rs:11:1\n+   |\n+LL |       while if let Some(thing) = container.get(i) {\n+   |  _____-----_-\n+   | |     |\n+   | |     while parsing the body of this `while` expression\n+LL | |\n+LL | |\n+LL | |         println!(\"{:?}\", thing);\n+LL | |         i += 1;\n+LL | |     }\n+   | |_____- this `while` condition successfully parsed\n+LL |   }\n+   |   ^ expected `{`\n+\n+error: aborting due to previous error\n+"}, {"sha": "44f77b99c561c04d0bd69528322174a36a659d20", "filename": "src/test/ui/unsafe/unsafe-block-without-braces.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a040e2f4f5104e8e3188735fea4f6d0b2632251e/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-block-without-braces.stderr?ref=a040e2f4f5104e8e3188735fea4f6d0b2632251e", "patch": "@@ -1,11 +1,15 @@\n error: expected `{`, found `std`\n   --> $DIR/unsafe-block-without-braces.rs:3:9\n    |\n+LL |     unsafe //{\n+   |     ------ while parsing this `unsafe` expression\n LL |         std::mem::transmute::<f32, u32>(1.0);\n-   |         ^^^----------------------------------\n-   |         |\n-   |         expected `{`\n-   |         help: try placing this code inside a block: `{ std::mem::transmute::<f32, u32>(1.0); }`\n+   |         ^^^ expected `{`\n+   |\n+help: try placing this code inside a block\n+   |\n+LL |         { std::mem::transmute::<f32, u32>(1.0); }\n+   |         +                                       +\n \n error: aborting due to previous error\n "}]}