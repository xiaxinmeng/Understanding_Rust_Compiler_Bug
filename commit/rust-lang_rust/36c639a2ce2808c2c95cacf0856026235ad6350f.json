{"sha": "36c639a2ce2808c2c95cacf0856026235ad6350f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YzYzOWEyY2UyODA4YzJjOTVjYWNmMDg1NjAyNjIzNWFkNjM1MGY=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-14T21:12:15Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-12-15T01:27:27Z"}, "message": "Convenience funcs for `some_option.unwrap_or(...)`\n\nThis ensures consistent handling of default values for options that are\nNone if not specified on the command line.", "tree": {"sha": "53e13980101a237edca0c38cb49b6a3947a1c9f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53e13980101a237edca0c38cb49b6a3947a1c9f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36c639a2ce2808c2c95cacf0856026235ad6350f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36c639a2ce2808c2c95cacf0856026235ad6350f", "html_url": "https://github.com/rust-lang/rust/commit/36c639a2ce2808c2c95cacf0856026235ad6350f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36c639a2ce2808c2c95cacf0856026235ad6350f/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2", "html_url": "https://github.com/rust-lang/rust/commit/4f550f1f930b9201bbeeb9fa10d42392a66cc9f2"}], "stats": {"total": 84, "additions": 29, "deletions": 55}, "files": [{"sha": "3e94f1637734a0f2ca09edde93c8e9bb653ff895", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -561,7 +561,7 @@ fn test_debugging_options_tracking_hash() {\n     tracked!(link_only, true);\n     tracked!(merge_functions, Some(MergeFunctions::Disabled));\n     tracked!(mir_emit_retag, true);\n-    tracked!(mir_opt_level, Some(3));\n+    tracked!(mir_opt_level, 3);\n     tracked!(mutable_noalias, true);\n     tracked!(new_llvm_pass_manager, true);\n     tracked!(no_codegen, true);"}, {"sha": "7b67d15f64a2eb49a755b3d0747edebd2ba1241e", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -663,12 +663,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             no_builtins: tcx.sess.contains_name(&attrs, sym::no_builtins),\n             panic_runtime: tcx.sess.contains_name(&attrs, sym::panic_runtime),\n             profiler_runtime: tcx.sess.contains_name(&attrs, sym::profiler_runtime),\n-            symbol_mangling_version: tcx\n-                .sess\n-                .opts\n-                .debugging_opts\n-                .symbol_mangling_version\n-                .unwrap_or(SymbolManglingVersion::default()),\n+            symbol_mangling_version: tcx.sess.opts.debugging_opts.get_symbol_mangling_version(),\n \n             crate_deps,\n             dylib_dependency_formats,"}, {"sha": "1d949e020ed5ced7a7a4bc6f88c249707c18a9cd", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -22,7 +22,6 @@ use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{\n     self, ConstInt, ConstKind, Instance, ParamEnv, ScalarInt, Ty, TyCtxt, TypeFoldable,\n };\n-use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n use rustc_session::lint;\n use rustc_span::{def_id::DefId, Span};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, TargetDataLayout};\n@@ -709,7 +708,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        if self.tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) >= 3 {\n+        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 3 {\n             self.eval_rvalue_with_identities(rvalue, place)\n         } else {\n             self.use_ecx(|this| this.ecx.eval_rvalue_into_place(rvalue, place))\n@@ -887,8 +886,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n \n     /// Returns `true` if and only if this `op` should be const-propagated into.\n     fn should_const_prop(&mut self, op: OpTy<'tcx>) -> bool {\n-        let mir_opt_level =\n-            self.tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT);\n+        let mir_opt_level = self.tcx.sess.opts.debugging_opts.mir_opt_level;\n \n         if mir_opt_level == 0 {\n             return false;\n@@ -1058,7 +1056,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n \n         // Only const prop copies and moves on `mir_opt_level=2` as doing so\n         // currently slightly increases compile time in some cases.\n-        if self.tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) >= 2 {\n+        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n             self.propagate_operand(operand)\n         }\n     }"}, {"sha": "46de5dba6e0ed708415f9f63de86d808ca046262", "filename": "compiler/rustc_mir/src/transform/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fdest_prop.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -115,7 +115,6 @@ use rustc_middle::mir::{\n     Rvalue, Statement, StatementKind, Terminator, TerminatorKind,\n };\n use rustc_middle::ty::{self, Ty, TyCtxt};\n-use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n // Empirical measurements have resulted in some observations:\n // - Running on a body with a single block and 500 locals takes barely any time\n@@ -130,7 +129,7 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         // Only run at mir-opt-level=2 or higher for now (we don't fix up debuginfo and remove\n         // storage statements at the moment).\n-        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) <= 1 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n             return;\n         }\n "}, {"sha": "f91477911a489015363ab72bcd08ca9c6dbfd1aa", "filename": "compiler/rustc_mir/src/transform/early_otherwise_branch.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fearly_otherwise_branch.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -1,7 +1,6 @@\n use crate::{transform::MirPass, util::patch::MirPatch};\n use rustc_middle::mir::*;\n use rustc_middle::ty::{Ty, TyCtxt};\n-use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n use std::fmt::Debug;\n \n use super::simplify::simplify_cfg;\n@@ -27,7 +26,7 @@ pub struct EarlyOtherwiseBranch;\n \n impl<'tcx> MirPass<'tcx> for EarlyOtherwiseBranch {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) < 2 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level < 2 {\n             return;\n         }\n         trace!(\"running EarlyOtherwiseBranch on {:?}\", body.source);"}, {"sha": "6e7575c1d71bb3b1a3766ff9729f5213087720b4", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -9,7 +9,6 @@ use rustc_middle::mir::visit::*;\n use rustc_middle::mir::*;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, ConstKind, Instance, InstanceDef, ParamEnv, Ty, TyCtxt};\n-use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n use rustc_span::{hygiene::ExpnKind, ExpnData, Span};\n use rustc_target::spec::abi::Abi;\n \n@@ -38,7 +37,7 @@ struct CallSite<'tcx> {\n \n impl<'tcx> MirPass<'tcx> for Inline {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) < 2 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level < 2 {\n             return;\n         }\n "}, {"sha": "53eeecc780f6f1ed628c1ec766ac147b24aa3d1f", "filename": "compiler/rustc_mir/src/transform/match_branches.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmatch_branches.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -1,7 +1,6 @@\n use crate::transform::MirPass;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n pub struct MatchBranchSimplification;\n \n@@ -39,7 +38,7 @@ pub struct MatchBranchSimplification;\n \n impl<'tcx> MirPass<'tcx> for MatchBranchSimplification {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) <= 1 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level <= 1 {\n             return;\n         }\n "}, {"sha": "e86d11e248fceb3562eae8fa3e88970fd003d0b1", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -10,7 +10,6 @@ use rustc_middle::mir::visit::Visitor as _;\n use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n-use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n \n@@ -374,7 +373,7 @@ fn run_post_borrowck_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tc\n }\n \n fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-    let mir_opt_level = tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT);\n+    let mir_opt_level = tcx.sess.opts.debugging_opts.mir_opt_level;\n \n     // Lowering generator control-flow and variables has to happen before we do anything else\n     // to them. We run some optimizations before that, because they may be harder to do on the state"}, {"sha": "617086622cc1ac7728317681276c6ca473849b10", "filename": "compiler/rustc_mir/src/transform/multiple_return_terminators.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmultiple_return_terminators.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -5,13 +5,12 @@ use crate::transform::{simplify, MirPass};\n use rustc_index::bit_set::BitSet;\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n pub struct MultipleReturnTerminators;\n \n impl<'tcx> MirPass<'tcx> for MultipleReturnTerminators {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) < 3 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n             return;\n         }\n "}, {"sha": "ce02fb261df6f981991fa955cc3772d72861fe65", "filename": "compiler/rustc_mir/src/transform/nrvo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fnrvo.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -5,7 +5,6 @@ use rustc_index::bit_set::HybridBitSet;\n use rustc_middle::mir::visit::{MutVisitor, NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, BasicBlock, Local, Location};\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n use crate::transform::MirPass;\n \n@@ -35,7 +34,7 @@ pub struct RenameReturnPlace;\n \n impl<'tcx> MirPass<'tcx> for RenameReturnPlace {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut mir::Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) == 0 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n             return;\n         }\n "}, {"sha": "e39c8656021b25a245d1dcd667d002a4f5a16302", "filename": "compiler/rustc_mir/src/transform/unreachable_prop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Funreachable_prop.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -7,13 +7,12 @@ use crate::transform::MirPass;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::mir::*;\n use rustc_middle::ty::TyCtxt;\n-use rustc_session::config::MIR_OPT_LEVEL_DEFAULT;\n \n pub struct UnreachablePropagation;\n \n impl MirPass<'_> for UnreachablePropagation {\n     fn run_pass<'tcx>(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.mir_opt_level.unwrap_or(MIR_OPT_LEVEL_DEFAULT) < 3 {\n+        if tcx.sess.opts.debugging_opts.mir_opt_level < 3 {\n             // Enable only under -Zmir-opt-level=3 as in some cases (check the deeply-nested-opt\n             // perf benchmark) LLVM may spend quite a lot of time optimizing the generated code.\n             return;"}, {"sha": "b77a8b631e056da086eacfcfef7a66228acf4687", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -174,8 +174,6 @@ pub enum MirSpanview {\n     Block,\n }\n \n-pub const MIR_OPT_LEVEL_DEFAULT: usize = 1;\n-\n #[derive(Clone, PartialEq, Hash)]\n pub enum LinkerPluginLto {\n     LinkerPlugin(PathBuf),\n@@ -214,12 +212,6 @@ pub enum SymbolManglingVersion {\n     V0,\n }\n \n-impl SymbolManglingVersion {\n-    pub fn default() -> Self {\n-        SymbolManglingVersion::Legacy\n-    }\n-}\n-\n impl_stable_hash_via_hash!(SymbolManglingVersion);\n \n #[derive(Clone, Copy, Debug, PartialEq, Hash)]\n@@ -700,6 +692,10 @@ impl DebuggingOptions {\n             deduplicate_diagnostics: self.deduplicate_diagnostics,\n         }\n     }\n+\n+    pub fn get_symbol_mangling_version(&self) -> SymbolManglingVersion {\n+        self.symbol_mangling_version.unwrap_or(SymbolManglingVersion::Legacy)\n+    }\n }\n \n // The type of entry function, so users can have their own entry functions\n@@ -1779,18 +1775,15 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             Some(SymbolManglingVersion::V0) => {}\n         }\n \n-        match debugging_opts.mir_opt_level {\n-            Some(level) if level > 1 => {\n-                early_warn(\n-                    error_format,\n-                    &format!(\n-                        \"`-Z mir-opt-level={}` (any level > 1) enables function inlining, which \\\n-                        limits the effectiveness of `-Z instrument-coverage`.\",\n-                        level,\n-                    ),\n-                );\n-            }\n-            _ => {}\n+        if debugging_opts.mir_opt_level > 1 {\n+            early_warn(\n+                error_format,\n+                &format!(\n+                    \"`-Z mir-opt-level={}` (any level > 1) enables function inlining, which \\\n+                    limits the effectiveness of `-Z instrument-coverage`.\",\n+                    debugging_opts.mir_opt_level,\n+                ),\n+            );\n         }\n     }\n "}, {"sha": "49a7888fd6a4239fe5974ca70feb4d99a212a10b", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -970,7 +970,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n-    mir_opt_level: Option<usize> = (None, parse_opt_uint, [TRACKED],\n+    mir_opt_level: usize = (1, parse_uint, [TRACKED],\n         \"MIR optimization level (0-3; default: 1)\"),\n     mutable_noalias: bool = (false, parse_bool, [TRACKED],\n         \"emit noalias metadata for mutable references (default: no)\"),"}, {"sha": "7f8cded0ac0ec54d471af01e16c5c8463baa59d8", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -245,11 +245,7 @@ fn compute_symbol_name(\n     // 2. we favor `instantiating_crate` where possible (i.e. when `Some`)\n     let mangling_version_crate = instantiating_crate.unwrap_or(def_id.krate);\n     let mangling_version = if mangling_version_crate == LOCAL_CRATE {\n-        tcx.sess\n-            .opts\n-            .debugging_opts\n-            .symbol_mangling_version\n-            .unwrap_or(SymbolManglingVersion::default())\n+        tcx.sess.opts.debugging_opts.get_symbol_mangling_version()\n     } else {\n         tcx.symbol_mangling_version(mangling_version_crate)\n     };"}, {"sha": "87dd19c5d4d05469c88ae8bef71ff39bb0e74b74", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36c639a2ce2808c2c95cacf0856026235ad6350f/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36c639a2ce2808c2c95cacf0856026235ad6350f/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=36c639a2ce2808c2c95cacf0856026235ad6350f", "patch": "@@ -85,7 +85,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n         // run on the unoptimized MIR. On the other hand this results in some false negatives. If\n         // MIR passes can be enabled / disabled separately, we should figure out, what passes to\n         // use for Clippy.\n-        config.opts.debugging_opts.mir_opt_level = Some(0);\n+        config.opts.debugging_opts.mir_opt_level = 0;\n     }\n }\n "}]}