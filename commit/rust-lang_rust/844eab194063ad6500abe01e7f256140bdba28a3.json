{"sha": "844eab194063ad6500abe01e7f256140bdba28a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NGVhYjE5NDA2M2FkNjUwMGFiZTAxZTdmMjU2MTQwYmRiYTI4YTM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-09T12:37:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:24Z"}, "message": "librustuv -- fix unsafe sharing in rustuv", "tree": {"sha": "148c1fcfac48d7fe359edbf96432fcfae0217c87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/148c1fcfac48d7fe359edbf96432fcfae0217c87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/844eab194063ad6500abe01e7f256140bdba28a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/844eab194063ad6500abe01e7f256140bdba28a3", "html_url": "https://github.com/rust-lang/rust/commit/844eab194063ad6500abe01e7f256140bdba28a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/844eab194063ad6500abe01e7f256140bdba28a3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56c5d4cec385ce8196ecbee0e67cf4a928c06170", "url": "https://api.github.com/repos/rust-lang/rust/commits/56c5d4cec385ce8196ecbee0e67cf4a928c06170", "html_url": "https://github.com/rust-lang/rust/commit/56c5d4cec385ce8196ecbee0e67cf4a928c06170"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "551e2c9faf74f47ef980cc2fa8e8cd780d93aacf", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/844eab194063ad6500abe01e7f256140bdba28a3/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/844eab194063ad6500abe01e7f256140bdba28a3/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=844eab194063ad6500abe01e7f256140bdba28a3", "patch": "@@ -510,8 +510,9 @@ impl rtio::RtioUdpSocket for UdpWatcher {\n                     buf: Some(slice_to_uv_buf(buf)),\n                     result: None,\n                 };\n+                let handle = self.handle;\n                 wait_until_woken_after(&mut cx.task, || {\n-                    unsafe { uvll::set_data_for_uv_handle(self.handle, &cx) }\n+                    unsafe { uvll::set_data_for_uv_handle(handle, &cx) }\n                 });\n                 match cx.result.take_unwrap() {\n                     (n, _) if n < 0 =>"}]}