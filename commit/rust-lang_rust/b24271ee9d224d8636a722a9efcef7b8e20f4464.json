{"sha": "b24271ee9d224d8636a722a9efcef7b8e20f4464", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNDI3MWVlOWQyMjRkODYzNmE3MjJhOWVmY2VmN2I4ZTIwZjQ0NjQ=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-23T16:16:45Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-04-24T21:27:49Z"}, "message": "TRPL: operators and overloading\n\nI forgot these heavily use associated types, so move it after that\nas well.", "tree": {"sha": "16d7a2d5ec3d3bc602287d2710fd88500f22953c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16d7a2d5ec3d3bc602287d2710fd88500f22953c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b24271ee9d224d8636a722a9efcef7b8e20f4464", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b24271ee9d224d8636a722a9efcef7b8e20f4464", "html_url": "https://github.com/rust-lang/rust/commit/b24271ee9d224d8636a722a9efcef7b8e20f4464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b24271ee9d224d8636a722a9efcef7b8e20f4464/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1114fcd945f6e979660053aeed561bcfb5da669e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1114fcd945f6e979660053aeed561bcfb5da669e", "html_url": "https://github.com/rust-lang/rust/commit/1114fcd945f6e979660053aeed561bcfb5da669e"}], "stats": {"total": 84, "additions": 82, "deletions": 2}, "files": [{"sha": "272f53eff1fbcf733ce21db73c16ad70c08784b4", "filename": "src/doc/trpl/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24271ee9d224d8636a722a9efcef7b8e20f4464/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/b24271ee9d224d8636a722a9efcef7b8e20f4464/src%2Fdoc%2Ftrpl%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2FSUMMARY.md?ref=b24271ee9d224d8636a722a9efcef7b8e20f4464", "patch": "@@ -37,7 +37,6 @@\n     * [Strings](strings.md)\n     * [Generics](generics.md)\n     * [Traits](traits.md)\n-    * [Operators and Overloading](operators-and-overloading.md)\n     * [Drop](drop.md)\n     * [if let](if-let.md)\n     * [Trait Objects](trait-objects.md)\n@@ -51,6 +50,7 @@\n     * [Casting between types](casting-between-types.md)\n     * [Associated Types](associated-types.md)\n     * [Unsized Types](unsized-types.md)\n+    * [Operators and Overloading](operators-and-overloading.md)\n     * [Deref coercions](deref-coercions.md)\n     * [Macros](macros.md)\n     * [Raw Pointers](raw-pointers.md)"}, {"sha": "6a594659c37d27617cc7899c542de54977c21f9a", "filename": "src/doc/trpl/operators-and-overloading.md", "status": "modified", "additions": 81, "deletions": 1, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b24271ee9d224d8636a722a9efcef7b8e20f4464/src%2Fdoc%2Ftrpl%2Foperators-and-overloading.md", "raw_url": "https://github.com/rust-lang/rust/raw/b24271ee9d224d8636a722a9efcef7b8e20f4464/src%2Fdoc%2Ftrpl%2Foperators-and-overloading.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Foperators-and-overloading.md?ref=b24271ee9d224d8636a722a9efcef7b8e20f4464", "patch": "@@ -1,3 +1,83 @@\n % Operators and Overloading\n \n-Coming soon!\n+Rust allows for a limited form of operator overloading. There are certain\n+operators that are able to be overloaded. To support a particular operator\n+between types, there\u2019s a specific trait that you can implement, which then\n+overloads the operator.\n+\n+For example, the `+` operator can be overloaded with the `Add` trait:\n+\n+```rust\n+use std::ops::Add;\n+\n+#[derive(Debug)]\n+struct Point {\n+    x: i32,\n+    y: i32,\n+}\n+\n+impl Add for Point {\n+    type Output = Point;\n+\n+    fn add(self, other: Point) -> Point {\n+        Point { x: self.x + other.x, y: self.y + other.y }\n+    }\n+}\n+\n+fn main() {\n+    let p1 = Point { x: 1, y: 0 };\n+    let p2 = Point { x: 2, y: 3 };\n+\n+    let p3 = p1 + p2;\n+\n+    println!(\"{:?}\", p3);\n+}\n+```\n+\n+In `main`, we can use `+` on our two `Point`s, since we\u2019ve implemented\n+`Add<Output=Point>` for `Point`.\n+\n+There are a number of operators that can be overloaded this way, and all of\n+their associated traits live in the [`std::ops`][stdops] module. Check out its\n+documentation for the full list.\n+\n+[stdops]: ../std/ops/index.html\n+\n+Implementing these traits follows a pattern. Let\u2019s look at [`Add`][add] in more\n+detail:\n+\n+```rust\n+# mod foo {\n+pub trait Add<RHS = Self> {\n+    type Output;\n+\n+    fn add(self, rhs: RHS) -> Self::Output;\n+}\n+# }\n+```\n+\n+[add]: ../std/ops/trait.Add.html\n+\n+There\u2019s three types in total involved here: the type you `impl Add` for, `RHS`,\n+which defaults to `Self`, and `Output`. For an expression `let z = x + y`, `x`\n+is the `Self` type, `y` is the RHS, and `z` is the `Self::Output` type.\n+\n+```rust\n+# struct Point;\n+# use std::ops::Add;\n+impl Add<i32> for Point {\n+    type Output = f64;\n+\n+    fn add(self, rhs: i32) -> f64 {\n+        // add an i32 to a Point and get an f64\n+# 1.0\n+    }\n+}\n+```\n+\n+will let you do this:\n+\n+```rust,ignore\n+let p: Point = // ...\n+let x: f64 = p + 2i32;\n+```"}]}