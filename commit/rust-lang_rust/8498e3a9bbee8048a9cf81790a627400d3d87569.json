{"sha": "8498e3a9bbee8048a9cf81790a627400d3d87569", "node_id": "C_kwDOAAsO6NoAKDg0OThlM2E5YmJlZTgwNDhhOWNmODE3OTBhNjI3NDAwZDNkODc1Njk", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-28T15:48:38Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-28T15:48:38Z"}, "message": "Add examples for `pointer::mask`", "tree": {"sha": "5aa6b978221244d79dcb6e530cc34bc0984535f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5aa6b978221244d79dcb6e530cc34bc0984535f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8498e3a9bbee8048a9cf81790a627400d3d87569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8498e3a9bbee8048a9cf81790a627400d3d87569", "html_url": "https://github.com/rust-lang/rust/commit/8498e3a9bbee8048a9cf81790a627400d3d87569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8498e3a9bbee8048a9cf81790a627400d3d87569/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "url": "https://api.github.com/repos/rust-lang/rust/commits/44fcfb0a9606fa08ea293a71f2e6d470227ef9df", "html_url": "https://github.com/rust-lang/rust/commit/44fcfb0a9606fa08ea293a71f2e6d470227ef9df"}], "stats": {"total": 53, "additions": 53, "deletions": 0}, "files": [{"sha": "298a26ef58804d4e839d8e5cc578784217d7c627", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8498e3a9bbee8048a9cf81790a627400d3d87569/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8498e3a9bbee8048a9cf81790a627400d3d87569/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=8498e3a9bbee8048a9cf81790a627400d3d87569", "patch": "@@ -568,6 +568,31 @@ impl<T: ?Sized> *const T {\n     ///\n     /// For non-`Sized` pointees this operation changes only the data pointer,\n     /// leaving the metadata untouched.\n+    ///\n+    /// ## Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_mask, strict_provenance)]\n+    /// let v = 17_u32;\n+    /// let ptr: *const u32 = &v;\n+    ///\n+    /// // `u32` is 4 bytes aligned,\n+    /// // which means that lower 2 bits are always 0.\n+    /// let tag_mask = 0b11;\n+    /// let ptr_mask = !tag_mask;\n+    ///\n+    /// // We can store something in these lower bits\n+    /// let tagged_ptr = ptr.map_addr(|a| a | 0b10);\n+    ///\n+    /// // Get the \"tag\" back\n+    /// let tag = tagged_ptr.addr() & tag_mask;\n+    /// assert_eq!(tag, 0b10);\n+    ///\n+    /// // Note that `tagged_ptr` is unaligned, it's UB to read from it.\n+    /// // To get original pointer `mask` can be used:\n+    /// let masked_ptr = tagged_ptr.mask(ptr_mask);\n+    /// assert_eq!(unsafe { *masked_ptr }, 17);\n+    /// ```\n     #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]"}, {"sha": "f71696e9ca0fa9e1b072d6e0f31c1386cc6508e3", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8498e3a9bbee8048a9cf81790a627400d3d87569/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8498e3a9bbee8048a9cf81790a627400d3d87569/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=8498e3a9bbee8048a9cf81790a627400d3d87569", "patch": "@@ -588,6 +588,34 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// For non-`Sized` pointees this operation changes only the data pointer,\n     /// leaving the metadata untouched.\n+    ///\n+    /// ## Examples\n+    ///\n+    /// ```\n+    /// #![feature(ptr_mask, strict_provenance)]\n+    /// let mut v = 17_u32;\n+    /// let ptr: *mut u32 = &mut v;\n+    ///\n+    /// // `u32` is 4 bytes aligned,\n+    /// // which means that lower 2 bits are always 0.\n+    /// let tag_mask = 0b11;\n+    /// let ptr_mask = !tag_mask;\n+    ///\n+    /// // We can store something in these lower bits\n+    /// let tagged_ptr = ptr.map_addr(|a| a | 0b10);\n+    ///\n+    /// // Get the \"tag\" back\n+    /// let tag = tagged_ptr.addr() & tag_mask;\n+    /// assert_eq!(tag, 0b10);\n+    ///\n+    /// // Note that `tagged_ptr` is unaligned, it's UB to read from/write to it.\n+    /// // To get original pointer `mask` can be used:\n+    /// let masked_ptr = tagged_ptr.mask(ptr_mask);\n+    /// assert_eq!(unsafe { *masked_ptr }, 17);\n+    ///\n+    /// unsafe { *masked_ptr = 0 };\n+    /// assert_eq!(v, 0);\n+    /// ```\n     #[unstable(feature = \"ptr_mask\", issue = \"98290\")]\n     #[must_use = \"returns a new pointer rather than modifying its argument\"]\n     #[inline(always)]"}]}