{"sha": "2d6927e9ee8238066bf78b0b42c755ed8aff5d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkNjkyN2U5ZWU4MjM4MDY2YmY3OGIwYjQyYzc1NWVkOGFmZjVkNGI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T16:07:30Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-12-22T17:58:49Z"}, "message": "Rollup merge of #56802 - clarcharr:nth_back, r=alexcrichton\n\nAdd DoubleEndedIterator::nth_back\n\nAs suggested by #54054. This doesn't fix that issue, as this doesn't add enough implementations to optimise that specific use case, but it adds the method and a few (relatively) trivial overrides to work as an initial implementation.\n\nIt's probably going to be a lot of work adding `nth_back` implementations everywhere, and I don't have the time to include it all in this commit. But, it's a start. :)", "tree": {"sha": "51d0516d3ec515c91a7c53a815a6ec1d63cc822e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51d0516d3ec515c91a7c53a815a6ec1d63cc822e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlwee1oACgkQ/vbIBR0O\nATwHIg//bG1CCi7+mVXxpBuMjj2loRRslVI6StmR/hVP9XWujLoPTZlaYOgZZ/OQ\nA25++JK2HmVdK3bBKLRkuyGPagrSYR+s+iWHE9FyKvavwR1b413GS5bRK8XzG2J/\nYtdXm3nkzDZFcoHB2KOuv+8vBSHRlqCCsnJKZg2RK6czqe8T9JreaYZiwV3W6TsB\ngyib3ztJeLJF3kozBWHr+QbUkJTjhPJMf3f2FzdQiNxqfrRmBDOug8/W/j4SuD3q\nFi4riy2o3i9q32Z6i01v6DL4GM8jQcGv3AMfkVQD9rbFdBBFeZkY+BZQhfyDmXj+\nYLp+2yaniniHPAUaxcfsdqQjziLgp/9BKExec3mGDv0jWlP1gkvv0aQms+KpP5y4\nAr/+k69moGPQrmVfs5JH501pmj0v2QAdiG46vznCgF9VceNAjrDyJ6cHVdxWfpid\ne1bV7NO1F9pCrbKsPGIXVDfnpbICbWOkL63gLYECXw4tv31iu9HrS2wiPfvVBpk7\nFFjM4xqESAugDdPKS4ZvbItrF8mi+k+H14e5Ma0Xh/NHeF74K82w79G8qJHF11HQ\nTMkfDGYu0uNNVDwhgL34QsCfAsJKamP4L100IsqfS1toUSBA84elbBIclXW/IN2R\nc951EmRNGO01QnPrFdeMSj7DB/ku7NwkjvZv9oRyybqJaQ03ero=\n=Fw0Z\n-----END PGP SIGNATURE-----", "payload": "tree 51d0516d3ec515c91a7c53a815a6ec1d63cc822e\nparent 9966590422ed3e6bd97bc1967b7435a03cfb949b\nparent fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064\nauthor kennytm <kennytm@gmail.com> 1545494850 +0800\ncommitter kennytm <kennytm@gmail.com> 1545501529 +0800\n\nRollup merge of #56802 - clarcharr:nth_back, r=alexcrichton\n\nAdd DoubleEndedIterator::nth_back\n\nAs suggested by #54054. This doesn't fix that issue, as this doesn't add enough implementations to optimise that specific use case, but it adds the method and a few (relatively) trivial overrides to work as an initial implementation.\n\nIt's probably going to be a lot of work adding `nth_back` implementations everywhere, and I don't have the time to include it all in this commit. But, it's a start. :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b", "html_url": "https://github.com/rust-lang/rust/commit/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9966590422ed3e6bd97bc1967b7435a03cfb949b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9966590422ed3e6bd97bc1967b7435a03cfb949b", "html_url": "https://github.com/rust-lang/rust/commit/9966590422ed3e6bd97bc1967b7435a03cfb949b"}, {"sha": "fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064", "html_url": "https://github.com/rust-lang/rust/commit/fb18ddaaaa8eeec29bf6fc8684cfceccaa09e064"}], "stats": {"total": 113, "additions": 107, "deletions": 6}, "files": [{"sha": "e493a3804376ffab9588a482ee078e050cca74a7", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=2d6927e9ee8238066bf78b0b42c755ed8aff5d4b", "patch": "@@ -429,6 +429,9 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n \n+    #[inline]\n+    fn nth(&mut self, n: usize) -> Option<<I as Iterator>::Item> { self.iter.nth_back(n) }\n+\n     fn try_fold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n@@ -461,6 +464,9 @@ impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n     fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n \n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<<I as Iterator>::Item> { self.iter.nth(n) }\n+\n     fn try_rfold<B, F, R>(&mut self, init: B, f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {"}, {"sha": "727a60e3596944d0294acb80952268f948c6d7fe", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=2d6927e9ee8238066bf78b0b42c755ed8aff5d4b", "patch": "@@ -427,6 +427,62 @@ pub trait DoubleEndedIterator: Iterator {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn next_back(&mut self) -> Option<Self::Item>;\n \n+    /// Returns the `n`th element from the end of the iterator.\n+    ///\n+    /// This is essentially the reversed version of [`nth`]. Although like most indexing\n+    /// operations, the count starts from zero, so `nth_back(0)` returns the first value fro\n+    /// the end, `nth_back(1)` the second, and so on.\n+    ///\n+    /// Note that all elements between the end and the returned element will be\n+    /// consumed, including the returned element. This also means that calling\n+    /// `nth_back(0)` multiple times on the same iterator will return different\n+    /// elements.\n+    ///\n+    /// `nth_back()` will return [`None`] if `n` is greater than or equal to the length of the\n+    /// iterator.\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`nth`]: ../../std/iter/trait.Iterator.html#method.nth\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(iter_nth_back)]\n+    /// let a = [1, 2, 3];\n+    /// assert_eq!(a.iter().nth_back(2), Some(&1));\n+    /// ```\n+    ///\n+    /// Calling `nth_back()` multiple times doesn't rewind the iterator:\n+    ///\n+    /// ```\n+    /// #![feature(iter_nth_back)]\n+    /// let a = [1, 2, 3];\n+    ///\n+    /// let mut iter = a.iter();\n+    ///\n+    /// assert_eq!(iter.nth_back(1), Some(&2));\n+    /// assert_eq!(iter.nth_back(1), None);\n+    /// ```\n+    ///\n+    /// Returning `None` if there are less than `n + 1` elements:\n+    ///\n+    /// ```\n+    /// #![feature(iter_nth_back)]\n+    /// let a = [1, 2, 3];\n+    /// assert_eq!(a.iter().nth_back(10), None);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"iter_nth_back\", issue = \"56995\")]\n+    fn nth_back(&mut self, mut n: usize) -> Option<Self::Item> {\n+        for x in self.rev() {\n+            if n == 0 { return Some(x) }\n+            n -= 1;\n+        }\n+        None\n+    }\n+\n     /// This is the reverse version of [`try_fold()`]: it takes elements\n     /// starting from the back of the iterator.\n     ///\n@@ -461,8 +517,11 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n-    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n-        Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n+    fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> R,\n+        R: Try<Ok=B>\n     {\n         let mut accum = init;\n         while let Some(x) = self.next_back() {\n@@ -524,8 +583,10 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n-    fn rfold<B, F>(mut self, accum: B, mut f: F) -> B where\n-        Self: Sized, F: FnMut(B, Self::Item) -> B,\n+    fn rfold<B, F>(mut self, accum: B, mut f: F) -> B\n+    where\n+        Self: Sized,\n+        F: FnMut(B, Self::Item) -> B,\n     {\n         self.try_rfold(accum, move |acc, x| Ok::<B, !>(f(acc, x))).unwrap()\n     }\n@@ -574,7 +635,8 @@ pub trait DoubleEndedIterator: Iterator {\n     /// ```\n     #[inline]\n     #[stable(feature = \"iter_rfind\", since = \"1.27.0\")]\n-    fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n+    fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item>\n+    where\n         Self: Sized,\n         P: FnMut(&Self::Item) -> bool\n     {\n@@ -587,7 +649,12 @@ pub trait DoubleEndedIterator: Iterator {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for &'a mut I {\n-    fn next_back(&mut self) -> Option<I::Item> { (**self).next_back() }\n+    fn next_back(&mut self) -> Option<I::Item> {\n+        (**self).next_back()\n+    }\n+    fn nth_back(&mut self, n: usize) -> Option<I::Item> {\n+        (**self).nth_back(n)\n+    }\n }\n \n /// An iterator that knows its exact length."}, {"sha": "b5633333d01706c3e82f38aac78a6d00245140ac", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=2d6927e9ee8238066bf78b0b42c755ed8aff5d4b", "patch": "@@ -1016,6 +1016,33 @@ fn test_iterator_nth() {\n     assert_eq!(v.iter().nth(v.len()), None);\n }\n \n+#[test]\n+fn test_iterator_nth_back() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().nth_back(i).unwrap(), &v[v.len() - 1 - i]);\n+    }\n+    assert_eq!(v.iter().nth_back(v.len()), None);\n+}\n+\n+#[test]\n+fn test_iterator_rev_nth_back() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().rev().nth_back(i).unwrap(), &v[i]);\n+    }\n+    assert_eq!(v.iter().rev().nth_back(v.len()), None);\n+}\n+\n+#[test]\n+fn test_iterator_rev_nth() {\n+    let v: &[_] = &[0, 1, 2, 3, 4];\n+    for i in 0..v.len() {\n+        assert_eq!(v.iter().rev().nth(i).unwrap(), &v[v.len() - 1 - i]);\n+    }\n+    assert_eq!(v.iter().rev().nth(v.len()), None);\n+}\n+\n #[test]\n fn test_iterator_last() {\n     let v: &[_] = &[0, 1, 2, 3, 4];"}, {"sha": "2377a4733678d1eb33e2b6b4fca2d07b7b9bfd78", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d6927e9ee8238066bf78b0b42c755ed8aff5d4b/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=2d6927e9ee8238066bf78b0b42c755ed8aff5d4b", "patch": "@@ -19,6 +19,7 @@\n #![feature(flt2dec)]\n #![feature(fmt_internals)]\n #![feature(hashmap_internals)]\n+#![feature(iter_nth_back)]\n #![feature(iter_unfold)]\n #![feature(pattern)]\n #![feature(range_is_empty)]"}]}