{"sha": "48b684a40a503a85f5e62f03ea7217d40fee6e1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YjY4NGE0MGE1MDNhODVmNWU2MmYwM2VhNzIxN2Q0MGZlZTZlMWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-02T06:23:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-03T03:49:38Z"}, "message": "Be ambiguous when type cannot be properly mentioned", "tree": {"sha": "5ed7120b48dfb90648fbbb1ed25a87c2a77da7f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ed7120b48dfb90648fbbb1ed25a87c2a77da7f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48b684a40a503a85f5e62f03ea7217d40fee6e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48b684a40a503a85f5e62f03ea7217d40fee6e1a", "html_url": "https://github.com/rust-lang/rust/commit/48b684a40a503a85f5e62f03ea7217d40fee6e1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48b684a40a503a85f5e62f03ea7217d40fee6e1a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c506d4c71f957fa5ca50d364c7f56daa0872064", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c506d4c71f957fa5ca50d364c7f56daa0872064", "html_url": "https://github.com/rust-lang/rust/commit/6c506d4c71f957fa5ca50d364c7f56daa0872064"}], "stats": {"total": 128, "additions": 72, "deletions": 56}, "files": [{"sha": "99403d012394f54891cf9ce859e017a6b436c946", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=48b684a40a503a85f5e62f03ea7217d40fee6e1a", "patch": "@@ -346,6 +346,16 @@ impl<'tcx> LoanPath<'tcx> {\n     }\n \n     fn to_type(&self) -> Ty<'tcx> { self.ty }\n+\n+    fn is_downcast(&self) -> bool {\n+        match self.kind {\n+            LpDowncast(_, _) => true,\n+            LpExtend(ref lp, _, LpInterior(_, _)) => {\n+                lp.is_downcast()\n+            }\n+            _ => false,\n+        }\n+    }\n }\n \n // FIXME (pnkfelix): See discussion here\n@@ -711,28 +721,26 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         err = if use_span == move_span {\n             err.span_label(\n                 use_span,\n-                format!(\"value moved{} here in previous iteration of loop{}\",\n-                         move_note,\n-                         extra_move_label));\n-\n-            if need_note {\n-                err.note(&format!(\"value moved because it has type `{}`, \\\n-                                   which does not implement the `Copy` trait\",\n-                                  moved_lp.ty)\n-            }\n+                format!(\"value moved{} here in previous iteration of loop\",\n+                         move_note));\n             err\n         } else {\n             err.span_label(use_span, format!(\"value {} here after move\", verb_participle));\n-            let extra_move_label = if need_note {\n-               &format!(\" because it has type `{}`, which does not implement the `Copy` trait\",\n-                        moved_lp.ty)\n-            } else {\n-                \"\"\n-            };\n-            err.span_label(move_span,format!(\"value moved{} here{}\", move_note, extra_move_label));\n+            err.span_label(move_span, format!(\"value moved{} here\", move_note));\n             err\n         };\n \n+        if need_note {\n+            err.note(&format!(\n+                \"move occurs because {} has type `{}`, which does not implement the `Copy` trait\",\n+                if moved_lp.is_downcast() {\n+                    \"the value\".to_string()\n+                } else {\n+                    format!(\"`{}`\", self.loan_path_to_string(moved_lp))\n+                },\n+                moved_lp.ty));\n+        }\n+\n         // Note: we used to suggest adding a `ref binding` or calling\n         // `clone` but those suggestions have been removed because\n         // they are often not what you actually want to do, and were"}, {"sha": "016ce93a0bd0bc4b68a7108fd7cab8a73e4d8d3c", "filename": "src/test/compile-fail/issue-24357.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs?ref=48b684a40a503a85f5e62f03ea7217d40fee6e1a", "patch": "@@ -12,8 +12,9 @@ struct NoCopy;\n fn main() {\n    let x = NoCopy;\n    let f = move || { let y = x; };\n-   //~^ NOTE value moved (into closure) here because it has type `NoCopy`, which does not\n+   //~^ NOTE value moved (into closure) here\n    let z = x;\n    //~^ ERROR use of moved value: `x`\n    //~| NOTE value used here after move\n+   //~| NOTE move occurs because `x` has type `NoCopy`\n }"}, {"sha": "5329dcaaaf4a263cb07f081e1f40bc1f37c293c7", "filename": "src/test/compile-fail/moves-based-on-type-distribute-copy-over-paren.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs?ref=48b684a40a503a85f5e62f03ea7217d40fee6e1a", "patch": "@@ -17,17 +17,19 @@ fn touch<A>(_a: &A) {}\n fn f00() {\n     let x = \"hi\".to_string();\n     let _y = Foo { f:x };\n-    //~^ NOTE value moved here because it has type\n+    //~^ NOTE value moved here\n     touch(&x); //~ ERROR use of moved value: `x`\n     //~^ NOTE value used here after move\n+    //~| NOTE move occurs because `x` has type `std::string::String`\n }\n \n fn f05() {\n     let x = \"hi\".to_string();\n     let _y = Foo { f:(((x))) };\n-    //~^ NOTE value moved here because it has type\n+    //~^ NOTE value moved here\n     touch(&x); //~ ERROR use of moved value: `x`\n     //~^ NOTE value used here after move\n+    //~| NOTE move occurs because `x` has type `std::string::String`\n }\n \n fn f10() {"}, {"sha": "82f5c49eeb7ae520d81ccd85cdce3e14e01794df", "filename": "src/test/ui/augmented-assignments.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faugmented-assignments.rs?ref=48b684a40a503a85f5e62f03ea7217d40fee6e1a", "patch": "@@ -20,18 +20,15 @@ impl AddAssign for Int {\n \n fn main() {\n     let mut x = Int(1);\n-    x\n-    //~^ error: use of moved value: `x`\n-    //~| note: value used here after move\n+    x   //~ error: use of moved value: `x`\n+    //~^ value used here after move\n     +=\n-    x;\n-    //~^ note: value moved here because it has type `Int`, which does not implement the `Copy`\n+    x;  //~ value moved here\n \n     let y = Int(2);\n-    //~^ note: consider changing this to `mut y`\n-    y\n-    //~^ error: cannot borrow immutable local variable `y` as mutable\n-    //~| note: cannot borrow mutably\n+    //~^ consider changing this to `mut y`\n+    y   //~ error: cannot borrow immutable local variable `y` as mutable\n+        //~| cannot borrow\n     +=\n     Int(1);\n }"}, {"sha": "75bf6bce04b396caf622938672dba1c5031872d9", "filename": "src/test/ui/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=48b684a40a503a85f5e62f03ea7217d40fee6e1a", "patch": "@@ -33,33 +33,36 @@ struct D {\n fn copy_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n-    let _y = a.y; //~ ERROR use of moved value\n-    //~^ NOTE value used here after move\n+    //~^ value moved here\n+    let _y = a.y; //~ ERROR use of moved\n+    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n+    //~| value used here after move\n }\n \n fn move_after_move() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = a.x;\n-    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n+    //~^ value moved here\n     let _y = a.y; //~ ERROR use of moved\n-    //~^ NOTE value used here after move\n+    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n+    //~| value used here after move\n }\n \n fn borrow_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n-    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n+    //~^ value moved here\n     let _y = &a.y; //~ ERROR use of moved\n-    //~^ NOTE value used here after move\n+    //~^ move occurs because `a.x` has type `std::boxed::Box<isize>`\n+    //~| value used here after move\n }\n \n fn move_after_borrow() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = &a.x;\n     let _y = a.y;\n     //~^ ERROR cannot move\n-    //~| NOTE move out of\n+    //~| move out of\n }\n \n fn copy_after_mut_borrow() {\n@@ -73,54 +76,54 @@ fn move_after_mut_borrow() {\n     let _x = &mut a.x;\n     let _y = a.y;\n     //~^ ERROR cannot move\n-    //~| NOTE move out of\n+    //~| move out of\n }\n \n fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n     let _y = &a.y; //~ ERROR cannot borrow\n-    //~^ NOTE immutable borrow occurs here (via `a.y`)\n+    //~^ immutable borrow occurs here (via `a.y`)\n }\n \n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n     let _y = &mut a.y; //~ ERROR cannot borrow\n-    //~^ NOTE mutable borrow occurs here (via `a.y`)\n+    //~^ mutable borrow occurs here (via `a.y`)\n }\n \n fn copy_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n+    //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE value used here after move\n+    //~| value used here after move\n }\n \n fn move_after_move_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n-    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n+    //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE value used here after move\n+    //~| value used here after move\n }\n \n fn borrow_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ NOTE value moved here because it has type `std::boxed::Box<isize>`, which does not\n+    //~^ value moved here\n     let _y = &a.y; //~ ERROR use of collaterally moved\n-    //~^ NOTE value used here after move\n+    //~| value used here after move\n }\n \n fn move_after_borrow_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n-    //~^ NOTE borrow of `a.x.x` occurs here\n+    //~^ borrow of `a.x.x` occurs here\n     let _y = a.y;\n     //~^ ERROR cannot move\n-    //~| NOTE move out of\n+    //~| move out of\n }\n \n fn copy_after_mut_borrow_nested() {\n@@ -134,23 +137,23 @@ fn move_after_mut_borrow_nested() {\n     let _x = &mut a.x.x;\n     let _y = a.y;\n     //~^ ERROR cannot move\n-    //~| NOTE move out of\n+    //~| move out of\n }\n \n fn borrow_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    //~^ NOTE mutable borrow occurs here\n+    //~^ mutable borrow occurs here\n     let _y = &a.y; //~ ERROR cannot borrow\n-    //~^ NOTE immutable borrow occurs here\n+    //~^ immutable borrow occurs here\n }\n \n fn mut_borrow_after_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &a.x.x;\n-    //~^ NOTE immutable borrow occurs here\n+    //~^ immutable borrow occurs here\n     let _y = &mut a.y; //~ ERROR cannot borrow\n-    //~^ NOTE mutable borrow occurs here\n+    //~^ mutable borrow occurs here\n }\n \n fn main() {"}, {"sha": "d8a4436532a0d8b3d9fa955499388f8e5cbba6b3", "filename": "src/test/ui/borrowck/issue-41962.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.rs?ref=48b684a40a503a85f5e62f03ea7217d40fee6e1a", "patch": "@@ -13,6 +13,8 @@ pub fn main(){\n \n     loop {\n         if let Some(thing) = maybe {\n+        //~^ ERROR use of partially moved value\n+        //~| ERROR use of moved value\n         }\n     }\n }"}, {"sha": "51e4409c81f80fb71e01baeea5c954d291dfc506", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=48b684a40a503a85f5e62f03ea7217d40fee6e1a", "patch": "@@ -4,14 +4,17 @@ error[E0382]: use of partially moved value: `maybe`\n 15 |         if let Some(thing) = maybe {\n    |                     -----    ^^^^^ value used here after move\n    |                     |\n-   |                     value moved here because it has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+   |                     value moved here\n+   |\n+   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `(maybe as std::prelude::v1::Some).0`\n   --> $DIR/issue-41962.rs:15:21\n    |\n 15 |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here in previous iteration of loop\n-   = note: value moved because it has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+   |\n+   = note: move occurs because the value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1fd3d03570a69d789002cc64c4d782c28c950a03", "filename": "src/test/ui/moves-based-on-type-match-bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48b684a40a503a85f5e62f03ea7217d40fee6e1a/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves-based-on-type-match-bindings.rs?ref=48b684a40a503a85f5e62f03ea7217d40fee6e1a", "patch": "@@ -21,11 +21,11 @@ fn f10() {\n \n     let y = match x {\n         Foo {f} => {}\n-        //~^ NOTE value moved here because it has type `std::string::String`, which does not\n     };\n \n     touch(&x); //~ ERROR use of partially moved value: `x`\n-    //~^ NOTE value used here after move\n+    //~^ value used here after move\n+    //~| move occurs because `x.f` has type `std::string::String`\n }\n \n fn main() {}"}]}