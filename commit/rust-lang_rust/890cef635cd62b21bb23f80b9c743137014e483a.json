{"sha": "890cef635cd62b21bb23f80b9c743137014e483a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MGNlZjYzNWNkNjJiMjFiYjIzZjgwYjljNzQzMTM3MDE0ZTQ4M2E=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-03T17:33:28Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-19T18:05:14Z"}, "message": "Change InternedAdtDef to &'tcx AdtDef", "tree": {"sha": "95f5559595d7c93fa6f5d047be79cc77f503ff8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95f5559595d7c93fa6f5d047be79cc77f503ff8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890cef635cd62b21bb23f80b9c743137014e483a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890cef635cd62b21bb23f80b9c743137014e483a", "html_url": "https://github.com/rust-lang/rust/commit/890cef635cd62b21bb23f80b9c743137014e483a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890cef635cd62b21bb23f80b9c743137014e483a/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ad3f302b7108428272f0453c0b5768d5c6f015", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ad3f302b7108428272f0453c0b5768d5c6f015", "html_url": "https://github.com/rust-lang/rust/commit/16ad3f302b7108428272f0453c0b5768d5c6f015"}], "stats": {"total": 61, "additions": 28, "deletions": 33}, "files": [{"sha": "a49a0045812b051763d8a0c5e581cbbb7c77b029", "filename": "src/librustc_middle/traits/chalk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890cef635cd62b21bb23f80b9c743137014e483a/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890cef635cd62b21bb23f80b9c743137014e483a/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fchalk.rs?ref=890cef635cd62b21bb23f80b9c743137014e483a", "patch": "@@ -7,7 +7,7 @@\n \n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n-use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtDef, Ty, TyCtxt};\n \n use rustc_hir::def_id::DefId;\n \n@@ -75,7 +75,7 @@ impl<'tcx> chalk_ir::interner::Interner for RustInterner<'tcx> {\n     type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n     type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n     type DefId = DefId;\n-    type InternedAdtId = DefId;\n+    type InternedAdtId = &'tcx AdtDef;\n     type Identifier = ();\n \n     fn debug_program_clause_implication("}, {"sha": "3c83c11b3c4386fe6ed5513ad6aa2e710c54b158", "filename": "src/librustc_traits/chalk/db.rs", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/890cef635cd62b21bb23f80b9c743137014e483a/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890cef635cd62b21bb23f80b9c743137014e483a/src%2Flibrustc_traits%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Fdb.rs?ref=890cef635cd62b21bb23f80b9c743137014e483a", "patch": "@@ -117,15 +117,14 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n     fn adt_datum(\n         &self,\n-        struct_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+        adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n     ) -> Arc<chalk_solve::rust_ir::AdtDatum<RustInterner<'tcx>>> {\n-        let adt_def_id = struct_id.0;\n-        let adt_def = self.tcx.adt_def(adt_def_id);\n+        let adt_def = adt_id.0;\n \n-        let bound_vars = bound_vars_for_item(self.tcx, adt_def_id);\n+        let bound_vars = bound_vars_for_item(self.tcx, adt_def.did);\n         let binders = binders_for(&self.interner, bound_vars);\n \n-        let predicates = self.tcx.predicates_of(adt_def_id).predicates;\n+        let predicates = self.tcx.predicates_of(adt_def.did).predicates;\n         let where_clauses: Vec<_> = predicates\n             .into_iter()\n             .map(|(wc, _)| wc.subst(self.tcx, bound_vars))\n@@ -149,13 +148,13 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             ty::AdtKind::Enum => vec![],\n         };\n         let struct_datum = Arc::new(chalk_solve::rust_ir::AdtDatum {\n-            id: struct_id,\n+            id: adt_id,\n             binders: chalk_ir::Binders::new(\n                 binders,\n                 chalk_solve::rust_ir::AdtDatumBound { fields, where_clauses },\n             ),\n             flags: chalk_solve::rust_ir::AdtFlags {\n-                upstream: !adt_def_id.is_local(),\n+                upstream: !adt_def.did.is_local(),\n                 fundamental: adt_def.is_fundamental(),\n             },\n         });\n@@ -179,7 +178,8 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         let sig = self.tcx.fn_sig(def_id);\n         // FIXME(chalk): collect into an intermediate SmallVec here since\n         // we need `TypeFoldable` for `no_bound_vars`\n-        let argument_types: Binder<Vec<_>> = sig.map_bound(|i| i.inputs().iter().copied().collect());\n+        let argument_types: Binder<Vec<_>> =\n+            sig.map_bound(|i| i.inputs().iter().copied().collect());\n         let argument_types = argument_types\n             .no_bound_vars()\n             .expect(\"FIXME(chalk): late-bound fn parameters not supported in chalk\")\n@@ -259,17 +259,17 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     fn impl_provided_for(\n         &self,\n         auto_trait_id: chalk_ir::TraitId<RustInterner<'tcx>>,\n-        struct_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n+        adt_id: chalk_ir::AdtId<RustInterner<'tcx>>,\n     ) -> bool {\n         let trait_def_id = auto_trait_id.0;\n-        let adt_def_id = struct_id.0;\n+        let adt_def = adt_id.0;\n         let all_impls = self.tcx.all_impls(trait_def_id);\n         for impl_def_id in all_impls {\n             let trait_ref = self.tcx.impl_trait_ref(impl_def_id).unwrap();\n             let self_ty = trait_ref.self_ty();\n             match self_ty.kind {\n-                ty::Adt(adt_def, _) => {\n-                    if adt_def.did == adt_def_id {\n+                ty::Adt(impl_adt_def, _) => {\n+                    if impl_adt_def == adt_def {\n                         return true;\n                     }\n                 }\n@@ -344,16 +344,13 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n         match well_known {\n             chalk_solve::rust_ir::WellKnownTrait::SizedTrait => match ty {\n                 Apply(apply) => match apply.name {\n-                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def_id)) => {\n-                        let adt_def = self.tcx.adt_def(adt_def_id);\n-                        match adt_def.adt_kind() {\n-                            ty::AdtKind::Struct | ty::AdtKind::Union => None,\n-                            ty::AdtKind::Enum => {\n-                                let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n-                                if constraint.0.len() > 0 { unimplemented!() } else { Some(true) }\n-                            }\n+                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def)) => match adt_def.adt_kind() {\n+                        ty::AdtKind::Struct | ty::AdtKind::Union => None,\n+                        ty::AdtKind::Enum => {\n+                            let constraint = self.tcx.adt_sized_constraint(adt_def.did);\n+                            if constraint.0.len() > 0 { unimplemented!() } else { Some(true) }\n                         }\n-                    }\n+                    },\n                     _ => None,\n                 },\n                 Dyn(_)\n@@ -366,16 +363,13 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n             chalk_solve::rust_ir::WellKnownTrait::CopyTrait\n             | chalk_solve::rust_ir::WellKnownTrait::CloneTrait => match ty {\n                 Apply(apply) => match apply.name {\n-                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def_id)) => {\n-                        let adt_def = self.tcx.adt_def(adt_def_id);\n-                        match adt_def.adt_kind() {\n-                            ty::AdtKind::Struct | ty::AdtKind::Union => None,\n-                            ty::AdtKind::Enum => {\n-                                let constraint = self.tcx.adt_sized_constraint(adt_def_id);\n-                                if constraint.0.len() > 0 { unimplemented!() } else { Some(true) }\n-                            }\n+                    chalk_ir::TypeName::Adt(chalk_ir::AdtId(adt_def)) => match adt_def.adt_kind() {\n+                        ty::AdtKind::Struct | ty::AdtKind::Union => None,\n+                        ty::AdtKind::Enum => {\n+                            let constraint = self.tcx.adt_sized_constraint(adt_def.did);\n+                            if constraint.0.len() > 0 { unimplemented!() } else { Some(true) }\n                         }\n-                    }\n+                    },\n                     _ => None,\n                 },\n                 Dyn(_)"}, {"sha": "5546a8db53395b484ff5a3b2b510de566632f513", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/890cef635cd62b21bb23f80b9c743137014e483a/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890cef635cd62b21bb23f80b9c743137014e483a/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=890cef635cd62b21bb23f80b9c743137014e483a", "patch": "@@ -304,7 +304,8 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n         use TyKind::*;\n \n         let empty = || chalk_ir::Substitution::empty(interner);\n-        let struct_ty = |def_id| chalk_ir::TypeName::Adt(chalk_ir::AdtId(def_id));\n+        let struct_ty =\n+            |def_id| chalk_ir::TypeName::Adt(chalk_ir::AdtId(interner.tcx.adt_def(def_id)));\n         let apply = |name, substitution| {\n             TyData::Apply(chalk_ir::ApplicationTy { name, substitution }).intern(interner)\n         };"}]}