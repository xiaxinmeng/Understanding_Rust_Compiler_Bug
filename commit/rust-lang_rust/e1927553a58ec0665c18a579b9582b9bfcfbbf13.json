{"sha": "e1927553a58ec0665c18a579b9582b9bfcfbbf13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOTI3NTUzYTU4ZWMwNjY1YzE4YTU3OWI5NTgyYjliZmNmYmJmMTM=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-29T19:29:02Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-30T18:32:16Z"}, "message": "Added a new version of pfib that's better suited for benchmarking the task system. It generates gnuplot output.", "tree": {"sha": "7e371088c9cdebd8faf0151b36a8d422aebd6032", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e371088c9cdebd8faf0151b36a8d422aebd6032"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1927553a58ec0665c18a579b9582b9bfcfbbf13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1927553a58ec0665c18a579b9582b9bfcfbbf13", "html_url": "https://github.com/rust-lang/rust/commit/e1927553a58ec0665c18a579b9582b9bfcfbbf13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1927553a58ec0665c18a579b9582b9bfcfbbf13/comments", "author": null, "committer": null, "parents": [{"sha": "b4a145e60f4bbc90dc780239cc49c024b9f52ca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4a145e60f4bbc90dc780239cc49c024b9f52ca8", "html_url": "https://github.com/rust-lang/rust/commit/b4a145e60f4bbc90dc780239cc49c024b9f52ca8"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "a8890ca6c5d5336631d9b633f42d5b979b47a303", "filename": "src/test/bench/task-perf/pfib.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/e1927553a58ec0665c18a579b9582b9bfcfbbf13/src%2Ftest%2Fbench%2Ftask-perf%2Fpfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1927553a58ec0665c18a579b9582b9bfcfbbf13/src%2Ftest%2Fbench%2Ftask-perf%2Fpfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf%2Fpfib.rs?ref=e1927553a58ec0665c18a579b9582b9bfcfbbf13", "patch": "@@ -0,0 +1,79 @@\n+// -*- rust -*-\n+\n+/*\n+  A parallel version of fibonacci numbers.\n+\n+  This version is meant mostly as a way of stressing and benchmarking\n+  the task system. It supports a lot of command-line arguments to\n+  control how it runs.\n+\n+*/\n+\n+use std;\n+\n+import std::vec;\n+import std::uint;\n+import std::time;\n+import std::str;\n+import std::int::range;\n+import std::io;\n+\n+fn recv[T](&port[T] p) -> T {\n+    let T x;\n+    p |> x;\n+    ret x;\n+}\n+\n+fn fib(int n) -> int {\n+    fn pfib(chan[int] c, int n) {\n+        if (n == 0) {\n+            c <| 0;\n+        }\n+        else if (n <= 2) {\n+            c <| 1;\n+        }\n+        else {\n+            let port[int] p = port();\n+      \n+            auto t1 = spawn pfib(chan(p), n - 1);\n+            auto t2 = spawn pfib(chan(p), n - 2);\n+\n+            c <| recv(p) + recv(p);\n+        }\n+    }\n+\n+    let port[int] p = port();\n+    auto t = spawn pfib(chan(p), n);\n+    ret recv(p);\n+}\n+\n+fn main(vec[str] argv) {\n+    if(vec::len(argv) == 1u) {\n+        assert (fib(8) == 21);\n+        assert (fib(15) == 610);\n+        log fib(8);\n+        log fib(15);\n+    }\n+    else {\n+        // Interactive mode! Wooo!!!!\n+\n+        auto max = uint::parse_buf(str::bytes(argv.(1)), 10u) as int;\n+\n+        auto num_trials = 10;\n+\n+        auto out = io::stdout();\n+\n+        for each(int n in range(1, max + 1)) {\n+            for each(int i in range(0, num_trials)) {\n+                auto start = time::precise_time_ns();\n+                auto fibn = fib(n);\n+                auto stop = time::precise_time_ns();\n+\n+                auto elapsed = (stop - start) as int;\n+            \n+                out.write_line(#fmt(\"%d\\t%d\\t%d\", n, fibn, elapsed));\n+            }\n+        }\n+\n+    }\n+}"}]}