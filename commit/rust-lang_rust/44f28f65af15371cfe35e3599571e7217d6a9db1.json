{"sha": "44f28f65af15371cfe35e3599571e7217d6a9db1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZjI4ZjY1YWYxNTM3MWNmZTM1ZTM1OTk1NzFlNzIxN2Q2YTlkYjE=", "commit": {"author": {"name": "Thi\u00e9baud Weksteen", "email": "tweek@google.com", "date": "2020-06-09T19:26:42Z"}, "committer": {"name": "Thi\u00e9baud Weksteen", "email": "tweek@google.com", "date": "2020-06-15T11:11:53Z"}, "message": "Accept relative paths in rust-project.json\n\nIf a relative path is found as part of Crate.root_module or Root.path,\ninterpret it as relative to the location of the rust-project.json file.", "tree": {"sha": "0219c79b467a53a8b2f24f996aa58733258314b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0219c79b467a53a8b2f24f996aa58733258314b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44f28f65af15371cfe35e3599571e7217d6a9db1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44f28f65af15371cfe35e3599571e7217d6a9db1", "html_url": "https://github.com/rust-lang/rust/commit/44f28f65af15371cfe35e3599571e7217d6a9db1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44f28f65af15371cfe35e3599571e7217d6a9db1/comments", "author": {"login": "tweksteen", "id": 109376, "node_id": "MDQ6VXNlcjEwOTM3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/109376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tweksteen", "html_url": "https://github.com/tweksteen", "followers_url": "https://api.github.com/users/tweksteen/followers", "following_url": "https://api.github.com/users/tweksteen/following{/other_user}", "gists_url": "https://api.github.com/users/tweksteen/gists{/gist_id}", "starred_url": "https://api.github.com/users/tweksteen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tweksteen/subscriptions", "organizations_url": "https://api.github.com/users/tweksteen/orgs", "repos_url": "https://api.github.com/users/tweksteen/repos", "events_url": "https://api.github.com/users/tweksteen/events{/privacy}", "received_events_url": "https://api.github.com/users/tweksteen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tweksteen", "id": 109376, "node_id": "MDQ6VXNlcjEwOTM3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/109376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tweksteen", "html_url": "https://github.com/tweksteen", "followers_url": "https://api.github.com/users/tweksteen/followers", "following_url": "https://api.github.com/users/tweksteen/following{/other_user}", "gists_url": "https://api.github.com/users/tweksteen/gists{/gist_id}", "starred_url": "https://api.github.com/users/tweksteen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tweksteen/subscriptions", "organizations_url": "https://api.github.com/users/tweksteen/orgs", "repos_url": "https://api.github.com/users/tweksteen/repos", "events_url": "https://api.github.com/users/tweksteen/events{/privacy}", "received_events_url": "https://api.github.com/users/tweksteen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "017331a53c1eeaa1253d2829165627bfa27dc124", "url": "https://api.github.com/repos/rust-lang/rust/commits/017331a53c1eeaa1253d2829165627bfa27dc124", "html_url": "https://github.com/rust-lang/rust/commit/017331a53c1eeaa1253d2829165627bfa27dc124"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "9541362f5946549b60000530ef9c20b0e92716f0", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/44f28f65af15371cfe35e3599571e7217d6a9db1/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f28f65af15371cfe35e3599571e7217d6a9db1/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=44f28f65af15371cfe35e3599571e7217d6a9db1", "patch": "@@ -29,13 +29,7 @@ pub enum ProjectWorkspace {\n     /// Project workspace was discovered by running `cargo metadata` and `rustc --print sysroot`.\n     Cargo { cargo: CargoWorkspace, sysroot: Sysroot },\n     /// Project workspace was manually specified using a `rust-project.json` file.\n-    Json { project: JsonProject },\n-}\n-\n-impl From<JsonProject> for ProjectWorkspace {\n-    fn from(project: JsonProject) -> ProjectWorkspace {\n-        ProjectWorkspace::Json { project }\n-    }\n+    Json { project: JsonProject, project_location: PathBuf },\n }\n \n /// `PackageRoot` describes a package root folder.\n@@ -164,10 +158,15 @@ impl ProjectWorkspace {\n                     format!(\"Failed to open json file {}\", project_json.display())\n                 })?;\n                 let reader = BufReader::new(file);\n+                let project_location = match project_json.parent() {\n+                    Some(parent) => PathBuf::from(parent),\n+                    None => PathBuf::new(),\n+                };\n                 ProjectWorkspace::Json {\n                     project: from_reader(reader).with_context(|| {\n                         format!(\"Failed to deserialize json file {}\", project_json.display())\n                     })?,\n+                    project_location: project_location,\n                 }\n             }\n             ProjectManifest::CargoToml(cargo_toml) => {\n@@ -200,9 +199,11 @@ impl ProjectWorkspace {\n     /// the root is a member of the current workspace\n     pub fn to_roots(&self) -> Vec<PackageRoot> {\n         match self {\n-            ProjectWorkspace::Json { project } => {\n-                project.roots.iter().map(|r| PackageRoot::new_member(r.path.clone())).collect()\n-            }\n+            ProjectWorkspace::Json { project, project_location } => project\n+                .roots\n+                .iter()\n+                .map(|r| PackageRoot::new_member(project_location.join(&r.path)))\n+                .collect(),\n             ProjectWorkspace::Cargo { cargo, sysroot } => cargo\n                 .packages()\n                 .map(|pkg| PackageRoot {\n@@ -219,7 +220,7 @@ impl ProjectWorkspace {\n \n     pub fn proc_macro_dylib_paths(&self) -> Vec<PathBuf> {\n         match self {\n-            ProjectWorkspace::Json { project } => project\n+            ProjectWorkspace::Json { project, .. } => project\n                 .crates\n                 .iter()\n                 .filter_map(|krate| krate.proc_macro_dylib_path.as_ref())\n@@ -235,7 +236,7 @@ impl ProjectWorkspace {\n \n     pub fn n_packages(&self) -> usize {\n         match self {\n-            ProjectWorkspace::Json { project } => project.crates.len(),\n+            ProjectWorkspace::Json { project, .. } => project.crates.len(),\n             ProjectWorkspace::Cargo { cargo, sysroot } => {\n                 cargo.packages().len() + sysroot.crates().len()\n             }\n@@ -251,13 +252,14 @@ impl ProjectWorkspace {\n     ) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n         match self {\n-            ProjectWorkspace::Json { project } => {\n+            ProjectWorkspace::Json { project, project_location } => {\n                 let crates: FxHashMap<_, _> = project\n                     .crates\n                     .iter()\n                     .enumerate()\n                     .filter_map(|(seq_index, krate)| {\n-                        let file_id = load(&krate.root_module)?;\n+                        let file_path = project_location.join(&krate.root_module);\n+                        let file_id = load(&file_path)?;\n                         let edition = match krate.edition {\n                             json_project::Edition::Edition2015 => Edition::Edition2015,\n                             json_project::Edition::Edition2018 => Edition::Edition2018,\n@@ -540,7 +542,7 @@ impl ProjectWorkspace {\n             ProjectWorkspace::Cargo { cargo, .. } => {\n                 Some(cargo.workspace_root()).filter(|root| path.starts_with(root))\n             }\n-            ProjectWorkspace::Json { project: JsonProject { roots, .. } } => roots\n+            ProjectWorkspace::Json { project: JsonProject { roots, .. }, .. } => roots\n                 .iter()\n                 .find(|root| path.starts_with(&root.path))\n                 .map(|root| root.path.as_ref()),"}, {"sha": "99e3f7173d3a046b6a26e68c373256098afaba20", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44f28f65af15371cfe35e3599571e7217d6a9db1/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f28f65af15371cfe35e3599571e7217d6a9db1/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=44f28f65af15371cfe35e3599571e7217d6a9db1", "patch": "@@ -108,11 +108,11 @@ fn run_server() -> Result<()> {\n             config.update(value);\n         }\n         config.update_caps(&initialize_params.capabilities);\n+        let cwd = std::env::current_dir()?;\n+        config.root_path =\n+            initialize_params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n \n         if config.linked_projects.is_empty() {\n-            let cwd = std::env::current_dir()?;\n-            let root =\n-                initialize_params.root_uri.and_then(|it| it.to_file_path().ok()).unwrap_or(cwd);\n             let workspace_roots = initialize_params\n                 .workspace_folders\n                 .map(|workspaces| {\n@@ -122,7 +122,7 @@ fn run_server() -> Result<()> {\n                         .collect::<Vec<_>>()\n                 })\n                 .filter(|workspaces| !workspaces.is_empty())\n-                .unwrap_or_else(|| vec![root]);\n+                .unwrap_or_else(|| vec![config.root_path.clone()]);\n \n             config.linked_projects = ProjectManifest::discover_all(&workspace_roots)\n                 .into_iter()"}, {"sha": "0e7a937a07672b7f5bd98d537b245354b92d5b3a", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44f28f65af15371cfe35e3599571e7217d6a9db1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f28f65af15371cfe35e3599571e7217d6a9db1/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=44f28f65af15371cfe35e3599571e7217d6a9db1", "patch": "@@ -38,12 +38,13 @@ pub struct Config {\n \n     pub with_sysroot: bool,\n     pub linked_projects: Vec<LinkedProject>,\n+    pub root_path: PathBuf,\n }\n \n #[derive(Debug, Clone)]\n pub enum LinkedProject {\n     ProjectManifest(ProjectManifest),\n-    JsonProject(JsonProject),\n+    InlineJsonProject(JsonProject),\n }\n \n impl From<ProjectManifest> for LinkedProject {\n@@ -54,7 +55,7 @@ impl From<ProjectManifest> for LinkedProject {\n \n impl From<JsonProject> for LinkedProject {\n     fn from(v: JsonProject) -> Self {\n-        LinkedProject::JsonProject(v)\n+        LinkedProject::InlineJsonProject(v)\n     }\n }\n \n@@ -167,6 +168,7 @@ impl Default for Config {\n             lens: LensConfig::default(),\n             hover: HoverConfig::default(),\n             linked_projects: Vec::new(),\n+            root_path: PathBuf::new(),\n         }\n     }\n }"}, {"sha": "cc9bb1726ec0c2ec32bc04a1bb5b4888c7e5edda", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44f28f65af15371cfe35e3599571e7217d6a9db1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f28f65af15371cfe35e3599571e7217d6a9db1/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=44f28f65af15371cfe35e3599571e7217d6a9db1", "patch": "@@ -121,7 +121,12 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n                         })\n                         .ok()\n                     }\n-                    LinkedProject::JsonProject(it) => Some(it.clone().into()),\n+                    LinkedProject::InlineJsonProject(it) => {\n+                        Some(ra_project_model::ProjectWorkspace::Json {\n+                            project: it.clone(),\n+                            project_location: config.root_path.clone(),\n+                        })\n+                    }\n                 })\n                 .collect::<Vec<_>>()\n         };"}]}