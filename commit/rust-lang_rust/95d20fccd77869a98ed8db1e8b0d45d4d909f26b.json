{"sha": "95d20fccd77869a98ed8db1e8b0d45d4d909f26b", "node_id": "C_kwDOAAsO6NoAKDk1ZDIwZmNjZDc3ODY5YTk4ZWQ4ZGIxZThiMGQ0NWQ0ZDkwOWYyNmI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-04T21:40:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-11-04T21:40:06Z"}, "message": "Add adjustment hint tests", "tree": {"sha": "cb9172c182fed2dba87c742a9857b175cdd25706", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb9172c182fed2dba87c742a9857b175cdd25706"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95d20fccd77869a98ed8db1e8b0d45d4d909f26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95d20fccd77869a98ed8db1e8b0d45d4d909f26b", "html_url": "https://github.com/rust-lang/rust/commit/95d20fccd77869a98ed8db1e8b0d45d4d909f26b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95d20fccd77869a98ed8db1e8b0d45d4d909f26b/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "url": "https://api.github.com/repos/rust-lang/rust/commits/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827", "html_url": "https://github.com/rust-lang/rust/commit/c98fc537e6d2c0d3c9a19582962a3db8bf2c1827"}], "stats": {"total": 121, "additions": 78, "deletions": 43}, "files": [{"sha": "9eef5aaeed005ac6ab84ad1c1b1920f979344d6c", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 78, "deletions": 43, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/95d20fccd77869a98ed8db1e8b0d45d4d909f26b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95d20fccd77869a98ed8db1e8b0d45d4d909f26b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=95d20fccd77869a98ed8db1e8b0d45d4d909f26b", "patch": "@@ -635,7 +635,12 @@ fn adjustment_hints(\n     expr: &ast::Expr,\n ) -> Option<()> {\n     if config.adjustment_hints == AdjustmentHints::Never {\n-        // return None;\n+        return None;\n+    }\n+\n+    if let ast::Expr::ParenExpr(_) = expr {\n+        // These inherit from the inner expression which would result in duplicate hints\n+        return None;\n     }\n \n     let parent = expr.syntax().parent().and_then(ast::Expr::cast);\n@@ -2909,48 +2914,6 @@ impl () {\n         );\n     }\n \n-    #[test]\n-    fn hints_implicit_reborrow() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                adjustment_hints: AdjustmentHints::Always,\n-                parameter_hints: true,\n-                ..DISABLED_CONFIG\n-            },\n-            r#\"\n-fn __() {\n-    let unique = &mut ();\n-    let r_mov = unique;\n-    let foo: &mut _ = unique;\n-                    //^^^^^^ &mut *\n-    ref_mut_id(unique);\n-             //^^^^^^ mut_ref\n-             //^^^^^^ &mut *\n-    let shared = ref_id(unique);\n-                      //^^^^^^ shared_ref\n-                      //^^^^^^ &*\n-    let mov = shared;\n-    let r_mov: &_ = shared;\n-    ref_id(shared);\n-         //^^^^^^ shared_ref\n-\n-    identity(unique);\n-    identity(shared);\n-}\n-fn identity<T>(t: T) -> T {\n-    t\n-}\n-fn ref_mut_id(mut_ref: &mut ()) -> &mut () {\n-    mut_ref\n-  //^^^^^^^ &mut *\n-}\n-fn ref_id(shared_ref: &()) -> &() {\n-    shared_ref\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn hints_binding_modes() {\n         check_with_config(\n@@ -3058,4 +3021,76 @@ fn f() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn adjustment_hints() {\n+        check_with_config(\n+            InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n+            r#\"\n+//- minicore: coerce_unsized\n+fn main() {\n+    let _: u32         = loop {};\n+                       //^^^^^^^<never-to-any>\n+    let _: &u32        = &mut 0;\n+                       //^^^^^^&\n+                       //^^^^^^*\n+    let _: &mut u32    = &mut 0;\n+                       //^^^^^^&mut $\n+                       //^^^^^^*\n+    let _: *const u32  = &mut 0;\n+                       //^^^^^^&raw const $\n+                       //^^^^^^*\n+    let _: *mut u32    = &mut 0;\n+                       //^^^^^^&raw mut $\n+                       //^^^^^^*\n+    let _: fn()        = main;\n+                       //^^^^<fn-item-to-fn-pointer>\n+    let _: unsafe fn() = main;\n+                       //^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n+                       //^^^^<fn-item-to-fn-pointer>\n+    let _: unsafe fn() = main as fn();\n+                       //^^^^^^^^^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n+    let _: fn()        = || {};\n+                       //^^^^^<closure-to-fn-pointer>\n+    let _: unsafe fn() = || {};\n+                       //^^^^^<closure-to-unsafe-fn-pointer>\n+    let _: *const u32  = &mut 0u32 as *mut u32;\n+                       //^^^^^^^^^^^^^^^^^^^^^<mut-ptr-to-const-ptr>\n+    let _: &mut [_]    = &mut [0; 0];\n+                       //^^^^^^^^^^^<unsize>\n+                       //^^^^^^^^^^^&mut $\n+                       //^^^^^^^^^^^*\n+\n+    Struct.consume();\n+    Struct.by_ref();\n+  //^^^^^^(\n+  //^^^^^^&\n+  //^^^^^^)\n+    Struct.by_ref_mut();\n+  //^^^^^^(\n+  //^^^^^^&mut $\n+  //^^^^^^)\n+\n+    (&Struct).consume();\n+   //^^^^^^^*\n+    (&Struct).by_ref();\n+\n+    (&mut Struct).consume();\n+   //^^^^^^^^^^^*\n+    (&mut Struct).by_ref();\n+   //^^^^^^^^^^^&\n+   //^^^^^^^^^^^*\n+    (&mut Struct).by_ref_mut();\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Struct;\n+impl Struct {\n+    fn consume(self) {}\n+    fn by_ref(&self) {}\n+    fn by_ref_mut(&mut self) {}\n+}\n+\"#,\n+        )\n+    }\n }"}]}