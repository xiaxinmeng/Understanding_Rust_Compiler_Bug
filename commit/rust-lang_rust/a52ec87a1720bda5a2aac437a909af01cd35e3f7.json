{"sha": "a52ec87a1720bda5a2aac437a909af01cd35e3f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1MmVjODdhMTcyMGJkYTVhMmFhYzQzN2E5MDlhZjAxY2QzNWUzZjc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-01T02:48:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:53:10Z"}, "message": "Use more appropriate spans on object unsafe traits and provide structured suggestions when possible", "tree": {"sha": "4326ae78134a1611a8b17db7f77c2d8a9040cb95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4326ae78134a1611a8b17db7f77c2d8a9040cb95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a52ec87a1720bda5a2aac437a909af01cd35e3f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a52ec87a1720bda5a2aac437a909af01cd35e3f7", "html_url": "https://github.com/rust-lang/rust/commit/a52ec87a1720bda5a2aac437a909af01cd35e3f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a52ec87a1720bda5a2aac437a909af01cd35e3f7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "url": "https://api.github.com/repos/rust-lang/rust/commits/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23", "html_url": "https://github.com/rust-lang/rust/commit/413bfa4b98ac3a59c57ea9fa8cff2d87062fdc23"}], "stats": {"total": 240, "additions": 178, "deletions": 62}, "files": [{"sha": "0ea0f271fd60e4ad6eddae6d97fc712c946278cd", "filename": "src/librustc/traits/error_reporting/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -1073,9 +1073,15 @@ pub fn report_object_safety_error(\n                     err.span_label(span, &msg);\n                 }\n             }\n-            if let (Some(_), Some(note)) = (trait_span, violation.solution()) {\n+            match (trait_span, violation.solution()) {\n+                (Some(_), Some((note, None))) => {\n+                    err.help(&note);\n+                }\n+                (Some(_), Some((note, Some((sugg, span))))) => {\n+                    err.span_suggestion(span, &note, sugg, Applicability::MachineApplicable);\n+                }\n                 // Only provide the help if its a local trait, otherwise it's not actionable.\n-                err.help(&note);\n+                _ => {}\n             }\n         }\n     }"}, {"sha": "efb46a1b8d3eebfdbabb5d9e80f3e51b043c0237", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 77, "deletions": 26, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -13,6 +13,7 @@ use super::elaborate_predicates;\n use crate::traits::{self, Obligation, ObligationCause};\n use crate::ty::subst::{InternalSubsts, Subst};\n use crate::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n+use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n@@ -48,14 +49,20 @@ impl ObjectSafetyViolation {\n                 \"it cannot use `Self` as a type parameter in the supertraits or `where`-clauses\"\n                     .into()\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) => {\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(_), _) => {\n                 format!(\"associated function `{}` has no `self` parameter\", name).into()\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelf, _) => format!(\n-                \"method `{}` references the `Self` type in its parameters or return type\",\n+            ObjectSafetyViolation::Method(\n                 name,\n-            )\n-            .into(),\n+                MethodViolationCode::ReferencesSelfInput(_),\n+                DUMMY_SP,\n+            ) => format!(\"method `{}` references the `Self` type in its parameters\", name).into(),\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfInput(_), _) => {\n+                format!(\"method `{}` references the `Self` type in this parameter\", name).into()\n+            }\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::ReferencesSelfOutput, _) => {\n+                format!(\"method `{}` references the `Self` type in its return type\", name).into()\n+            }\n             ObjectSafetyViolation::Method(\n                 name,\n                 MethodViolationCode::WhereClauseReferencesSelf,\n@@ -78,23 +85,31 @@ impl ObjectSafetyViolation {\n         }\n     }\n \n-    pub fn solution(&self) -> Option<String> {\n+    pub fn solution(&self) -> Option<(String, Option<(String, Span)>)> {\n         Some(match *self {\n             ObjectSafetyViolation::SizedSelf(_) | ObjectSafetyViolation::SupertraitSelf => {\n                 return None;\n             }\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod, _) => format!(\n-                \"consider turning `{}` into a method by giving it a `&self` argument or \\\n-                 constraining it with `where Self: Sized`\",\n-                name\n+            ObjectSafetyViolation::Method(name, MethodViolationCode::StaticMethod(sugg), _) => (\n+                format!(\n+                    \"consider turning `{}` into a method by giving it a `&self` argument or \\\n+                     constraining it so it does not apply to trait objects\",\n+                    name\n+                ),\n+                sugg.map(|(sugg, sp)| (sugg.to_string(), sp)),\n             ),\n-            ObjectSafetyViolation::Method(name, MethodViolationCode::UndispatchableReceiver, _) => {\n+            ObjectSafetyViolation::Method(\n+                name,\n+                MethodViolationCode::UndispatchableReceiver,\n+                span,\n+            ) => (\n                 format!(\"consider changing method `{}`'s `self` parameter to be `&self`\", name)\n-                    .into()\n-            }\n+                    .into(),\n+                Some((\"&Self\".to_string(), span)),\n+            ),\n             ObjectSafetyViolation::AssocConst(name, _)\n             | ObjectSafetyViolation::Method(name, ..) => {\n-                format!(\"consider moving `{}` to another trait\", name)\n+                (format!(\"consider moving `{}` to another trait\", name), None)\n             }\n         })\n     }\n@@ -119,10 +134,13 @@ impl ObjectSafetyViolation {\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum MethodViolationCode {\n     /// e.g., `fn foo()`\n-    StaticMethod,\n+    StaticMethod(Option<(&'static str, Span)>),\n+\n+    /// e.g., `fn foo(&self, x: Self)`\n+    ReferencesSelfInput(usize),\n \n-    /// e.g., `fn foo(&self, x: Self)` or `fn foo(&self) -> Self`\n-    ReferencesSelf,\n+    /// e.g., `fn foo(&self) -> Self`\n+    ReferencesSelfOutput,\n \n     /// e.g., `fn foo(&self) where Self: Clone`\n     WhereClauseReferencesSelf,\n@@ -193,7 +211,7 @@ fn object_safety_violations_for_trait(\n         .filter(|item| item.kind == ty::AssocKind::Method)\n         .filter_map(|item| {\n             object_safety_violation_for_method(tcx, trait_def_id, &item)\n-                .map(|code| ObjectSafetyViolation::Method(item.ident.name, code, item.ident.span))\n+                .map(|(code, span)| ObjectSafetyViolation::Method(item.ident.name, code, span))\n         })\n         .filter(|violation| {\n             if let ObjectSafetyViolation::Method(\n@@ -224,9 +242,15 @@ fn object_safety_violations_for_trait(\n                     )\n                 };\n                 err.span_label(*span, &msg);\n-                if let (Some(_), Some(note)) = (node, violation.solution()) {\n+                match (node, violation.solution()) {\n+                    (Some(_), Some((note, None))) => {\n+                        err.help(&note);\n+                    }\n+                    (Some(_), Some((note, Some((sugg, span))))) => {\n+                        err.span_suggestion(span, &note, sugg, Applicability::MachineApplicable);\n+                    }\n                     // Only provide the help if its a local trait, otherwise it's not actionable.\n-                    err.help(&note);\n+                    _ => {}\n                 }\n                 err.emit();\n                 false\n@@ -398,15 +422,34 @@ fn object_safety_violation_for_method(\n     tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n     method: &ty::AssocItem,\n-) -> Option<MethodViolationCode> {\n+) -> Option<(MethodViolationCode, Span)> {\n     debug!(\"object_safety_violation_for_method({:?}, {:?})\", trait_def_id, method);\n     // Any method that has a `Self : Sized` requisite is otherwise\n     // exempt from the regulations.\n     if generics_require_sized_self(tcx, method.def_id) {\n         return None;\n     }\n \n-    virtual_call_violation_for_method(tcx, trait_def_id, method)\n+    let violation = virtual_call_violation_for_method(tcx, trait_def_id, method);\n+    // Get an accurate span depending on the violation.\n+    violation.map(|v| {\n+        let node = tcx.hir().get_if_local(method.def_id);\n+        let span = match (v, node) {\n+            (MethodViolationCode::ReferencesSelfInput(arg), Some(node)) => node\n+                .fn_decl()\n+                .and_then(|decl| decl.inputs.get(arg + 1))\n+                .map_or(method.ident.span, |arg| arg.span),\n+            (MethodViolationCode::UndispatchableReceiver, Some(node)) => node\n+                .fn_decl()\n+                .and_then(|decl| decl.inputs.get(0))\n+                .map_or(method.ident.span, |arg| arg.span),\n+            (MethodViolationCode::ReferencesSelfOutput, Some(node)) => {\n+                node.fn_decl().map_or(method.ident.span, |decl| decl.output.span())\n+            }\n+            _ => method.ident.span,\n+        };\n+        (v, span)\n+    })\n }\n \n /// Returns `Some(_)` if this method cannot be called on a trait\n@@ -420,18 +463,26 @@ fn virtual_call_violation_for_method<'tcx>(\n ) -> Option<MethodViolationCode> {\n     // The method's first parameter must be named `self`\n     if !method.method_has_self_argument {\n-        return Some(MethodViolationCode::StaticMethod);\n+        // We'll attempt to provide a structured suggestion for `Self: Sized`.\n+        let sugg =\n+            tcx.hir().get_if_local(method.def_id).as_ref().and_then(|node| node.generics()).map(\n+                |generics| match generics.where_clause.predicates {\n+                    [] => (\" where Self: Sized\", generics.where_clause.span),\n+                    [.., pred] => (\", Self: Sized\", pred.span().shrink_to_hi()),\n+                },\n+            );\n+        return Some(MethodViolationCode::StaticMethod(sugg));\n     }\n \n     let sig = tcx.fn_sig(method.def_id);\n \n-    for input_ty in &sig.skip_binder().inputs()[1..] {\n+    for (i, input_ty) in sig.skip_binder().inputs()[1..].iter().enumerate() {\n         if contains_illegal_self_type_reference(tcx, trait_def_id, input_ty) {\n-            return Some(MethodViolationCode::ReferencesSelf);\n+            return Some(MethodViolationCode::ReferencesSelfInput(i));\n         }\n     }\n     if contains_illegal_self_type_reference(tcx, trait_def_id, sig.output().skip_binder()) {\n-        return Some(MethodViolationCode::ReferencesSelf);\n+        return Some(MethodViolationCode::ReferencesSelfOutput);\n     }\n \n     // We can't monomorphize things like `fn foo<A>(...)`."}, {"sha": "3ed0ad16eebf2ee336e8bf5c309f8636270b377d", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -2631,4 +2631,25 @@ impl Node<'_> {\n             _ => None,\n         }\n     }\n+\n+    pub fn fn_decl(&self) -> Option<&FnDecl<'_>> {\n+        match self {\n+            Node::TraitItem(TraitItem { kind: TraitItemKind::Method(fn_sig, _), .. })\n+            | Node::ImplItem(ImplItem { kind: ImplItemKind::Method(fn_sig, _), .. })\n+            | Node::Item(Item { kind: ItemKind::Fn(fn_sig, _, _), .. }) => Some(fn_sig.decl),\n+            Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {\n+                Some(fn_decl)\n+            }\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn generics(&self) -> Option<&Generics<'_>> {\n+        match self {\n+            Node::TraitItem(TraitItem { generics, .. })\n+            | Node::ImplItem(ImplItem { generics, .. })\n+            | Node::Item(Item { kind: ItemKind::Fn(_, generics, _), .. }) => Some(generics),\n+            _ => None,\n+        }\n+    }\n }"}, {"sha": "0984263bb283ebf56bd7f6c779ffd54d38900373", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -172,7 +172,7 @@ impl<'a> Parser<'a> {\n     /// ```\n     pub(super) fn parse_where_clause(&mut self) -> PResult<'a, WhereClause> {\n         let mut where_clause =\n-            WhereClause { predicates: Vec::new(), span: self.prev_span.to(self.prev_span) };\n+            WhereClause { predicates: Vec::new(), span: self.prev_span.shrink_to_hi() };\n \n         if !self.eat_keyword(kw::Where) {\n             return Ok(where_clause);"}, {"sha": "85ed360a1f74a2d3de1a3f471e2d38900e42200c", "filename": "src/test/ui/coherence/coherence-impl-trait-for-trait-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-impl-trait-for-trait-object-safe.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -2,7 +2,7 @@ error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/coherence-impl-trait-for-trait-object-safe.rs:7:6\n    |\n LL | trait NotObjectSafe { fn eq(&self, other: Self); }\n-   |       -------------      -- ...because method `eq` references the `Self` type in its parameters or return type\n+   |       -------------                       ---- ...because method `eq` references the `Self` type in this parameter\n    |       |\n    |       this trait cannot be made into an object...\n LL | impl NotObjectSafe for dyn NotObjectSafe { }"}, {"sha": "f323a9904557a7eb614d759db784acd4a49961f9", "filename": "src/test/ui/error-codes/E0033-teach.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033-teach.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -15,7 +15,10 @@ LL |     fn foo();\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n    |\n-   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033-teach.rs:12:9"}, {"sha": "84481ff16c07e2dc71e5e796d25796aa38e5fbe3", "filename": "src/test/ui/error-codes/E0033.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0033.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -15,7 +15,10 @@ LL |     fn foo();\n LL |     let trait_obj: &dyn SomeTrait = SomeTrait;\n    |                    ^^^^^^^^^^^^^^ the trait `SomeTrait` cannot be made into an object\n    |\n-   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error[E0033]: type `&dyn SomeTrait` cannot be dereferenced\n   --> $DIR/E0033.rs:10:9"}, {"sha": "638e924b0eb4391602fe343c358f2cb462c90fc5", "filename": "src/test/ui/error-codes/E0038.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0038.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `Trait` cannot be made into an object\n LL | trait Trait {\n    |       ----- this trait cannot be made into an object...\n LL |     fn foo(&self) -> Self;\n-   |        --- ...because method `foo` references the `Self` type in its parameters or return type\n+   |                      ---- ...because method `foo` references the `Self` type in its return type\n ...\n LL | fn call_foo(x: Box<dyn Trait>) {\n    |                ^^^^^^^^^^^^^^ the trait `Trait` cannot be made into an object"}, {"sha": "c66bbb0c5045f4ef99c4d31cd12e784a6353d5ca", "filename": "src/test/ui/feature-gates/feature-gate-object_safe_for_dispatch.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-object_safe_for_dispatch.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -20,7 +20,10 @@ LL |     fn static_fn() {}\n LL | fn return_non_object_safe_ref() -> &'static dyn NonObjectSafe2 {\n    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe2` cannot be made into an object\n    |\n-   = help: consider turning `static_fn` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n+help: consider turning `static_fn` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn static_fn() where Self: Sized {}\n+   |                    ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `NonObjectSafe3` cannot be made into an object\n   --> $DIR/feature-gate-object_safe_for_dispatch.rs:27:35\n@@ -41,7 +44,7 @@ error[E0038]: the trait `NonObjectSafe4` cannot be made into an object\n LL | trait NonObjectSafe4 {\n    |       -------------- this trait cannot be made into an object...\n LL |     fn foo(&self, &Self);\n-   |        --- ...because method `foo` references the `Self` type in its parameters or return type\n+   |                   ----- ...because method `foo` references the `Self` type in this parameter\n ...\n LL | fn return_non_object_safe_rc() -> std::rc::Rc<dyn NonObjectSafe4> {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `NonObjectSafe4` cannot be made into an object"}, {"sha": "9df5188bbdd0883cf8a1969f889b0ed71fbd8954", "filename": "src/test/ui/impl-trait/object-unsafe-trait-in-return-position-dyn-trait.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fobject-unsafe-trait-in-return-position-dyn-trait.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -9,7 +9,10 @@ LL |     fn foo() -> Self;\n LL | fn car() -> dyn NotObjectSafe {\n    |             ^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n    |\n-   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() -> Self where Self: Sized;\n+   |                      ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `NotObjectSafe` cannot be made into an object\n   --> $DIR/object-unsafe-trait-in-return-position-dyn-trait.rs:28:13\n@@ -22,7 +25,10 @@ LL |     fn foo() -> Self;\n LL | fn cat() -> Box<dyn NotObjectSafe> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^ the trait `NotObjectSafe` cannot be made into an object\n    |\n-   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() -> Self where Self: Sized;\n+   |                      ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0a080171a795158e949f8f6e90dc8d18fe6380a5", "filename": "src/test/ui/issues/issue-19380.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19380.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -9,7 +9,10 @@ LL |   fn qiz();\n LL |   foos: &'static [&'static (dyn Qiz + 'static)]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Qiz` cannot be made into an object\n    |\n-   = help: consider turning `qiz` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n+help: consider turning `qiz` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |   fn qiz() where Self: Sized;\n+   |            ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4dbb27b425b3266bba4f70b5704b9da0253869d0", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.curr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.curr.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n-   |        --- ...because method `bar` references the `Self` type in its parameters or return type\n+   |                      ----- ...because method `bar` references the `Self` type in this parameter\n ...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n@@ -17,7 +17,7 @@ error[E0038]: the trait `Baz` cannot be made into an object\n LL | trait Baz {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n-   |        --- ...because method `baz` references the `Self` type in its parameters or return type\n+   |                      ---- ...because method `baz` references the `Self` type in its return type\n ...\n LL | fn make_baz<T:Baz>(t: &T) -> &dyn Baz {\n    |                              ^^^^^^^^ the trait `Baz` cannot be made into an object"}, {"sha": "89b273fb8adde246796d0e062df44e772a3ddeef", "filename": "src/test/ui/object-safety/object-safety-mentions-Self.object_safe_for_dispatch.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-mentions-Self.object_safe_for_dispatch.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `Bar` cannot be made into an object\n LL | trait Bar {\n    |       --- this trait cannot be made into an object...\n LL |     fn bar(&self, x: &Self);\n-   |        --- ...because method `bar` references the `Self` type in its parameters or return type\n+   |                      ----- ...because method `bar` references the `Self` type in this parameter\n ...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n@@ -19,7 +19,7 @@ error[E0038]: the trait `Baz` cannot be made into an object\n LL | trait Baz {\n    |       --- this trait cannot be made into an object...\n LL |     fn baz(&self) -> Self;\n-   |        --- ...because method `baz` references the `Self` type in its parameters or return type\n+   |                      ---- ...because method `baz` references the `Self` type in its return type\n ...\n LL |     t\n    |     ^ the trait `Baz` cannot be made into an object"}, {"sha": "f878cf8b462415b8d0b21340bd11416e157ba830", "filename": "src/test/ui/object-safety/object-safety-no-static.curr.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.curr.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -9,7 +9,10 @@ LL |     fn foo() {}\n LL | fn diverges() -> Box<dyn Foo> {\n    |                  ^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized {}\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "de56843962bea381bd9f5fa6319726f31f65b06e", "filename": "src/test/ui/object-safety/object-safety-no-static.object_safe_for_dispatch.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-no-static.object_safe_for_dispatch.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -9,9 +9,12 @@ LL |     fn foo() {}\n LL |     let b: Box<dyn Foo> = Box::new(Bar);\n    |                           ^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::boxed::Box<dyn Foo>>` for `std::boxed::Box<Bar>`\n    = note: required by cast to type `std::boxed::Box<dyn Foo>`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized {}\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7948f7e9d6bc69e258898e446090a18331828d3f", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.curr.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.curr.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -4,25 +4,28 @@ error[E0038]: the trait `Foo` cannot be made into an object\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- ...because method `foo`'s `self` parameter cannot be dispatched on\n+   |                  ---------\n+   |                  |\n+   |                  ...because method `foo`'s `self` parameter cannot be dispatched on\n+   |                  help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |                                ^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n-   |\n-   = help: consider changing method `foo`'s `self` parameter to be `&self`\n \n error[E0038]: the trait `Foo` cannot be made into an object\n   --> $DIR/arbitrary-self-types-not-object-safe.rs:33:13\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- ...because method `foo`'s `self` parameter cannot be dispatched on\n+   |                  ---------\n+   |                  |\n+   |                  ...because method `foo`'s `self` parameter cannot be dispatched on\n+   |                  help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = help: consider changing method `foo`'s `self` parameter to be `&self`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n    = note: required by cast to type `std::rc::Rc<dyn Foo>`\n "}, {"sha": "74e76b8265f7055d49d9be4b0e2bd641ab53366f", "filename": "src/test/ui/self/arbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary-self-types-not-object-safe.object_safe_for_dispatch.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -4,12 +4,14 @@ error[E0038]: the trait `Foo` cannot be made into an object\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     fn foo(self: &Rc<Self>) -> usize;\n-   |        --- ...because method `foo`'s `self` parameter cannot be dispatched on\n+   |                  ---------\n+   |                  |\n+   |                  ...because method `foo`'s `self` parameter cannot be dispatched on\n+   |                  help: consider changing method `foo`'s `self` parameter to be `&self`: `&Self`\n ...\n LL |     let x = Rc::new(5usize) as Rc<dyn Foo>;\n    |             ^^^^^^^^^^^^^^^ the trait `Foo` cannot be made into an object\n    |\n-   = help: consider changing method `foo`'s `self` parameter to be `&self`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<std::rc::Rc<dyn Foo>>` for `std::rc::Rc<usize>`\n    = note: required by cast to type `std::rc::Rc<dyn Foo>`\n "}, {"sha": "58be59602b9c54a94b3e21760bdabaeec6713270", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-self.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-self.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -44,7 +44,10 @@ LL |     fn f(a: B) -> B;\n    |        |\n    |        ...because associated function `f` has no `self` parameter\n    |\n-   = help: consider turning `f` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n+help: consider turning `f` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn f(a: B) -> B where Self: Sized;\n+   |                     ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "162e9249b880efe953bd468103af16a2affbedbe", "filename": "src/test/ui/traits/trait-object-safety.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-safety.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -9,9 +9,12 @@ LL |     fn foo();\n LL |     let _: &dyn Tr = &St;\n    |                      ^^^ the trait `Tr` cannot be made into an object\n    |\n-   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Tr>` for `&St`\n    = note: required by cast to type `&dyn Tr`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error[E0038]: the trait `Tr` cannot be made into an object\n   --> $DIR/trait-object-safety.rs:15:12\n@@ -24,7 +27,10 @@ LL |     fn foo();\n LL |     let _: &dyn Tr = &St;\n    |            ^^^^^^^ the trait `Tr` cannot be made into an object\n    |\n-   = help: consider turning `foo` into a method by giving it a `&self` argument or constraining it with `where Self: Sized`\n+help: consider turning `foo` into a method by giving it a `&self` argument or constraining it so it does not apply to trait objects\n+   |\n+LL |     fn foo() where Self: Sized;\n+   |              ^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9d1eef547568eb547b2e896b4a1e8874f4f55583", "filename": "src/test/ui/traits/trait-test-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-test-2.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -14,9 +14,9 @@ error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:16\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |       ---      ---                    ---- ...because method `blah` has generic type parameters\n-   |       |        |\n-   |       |        ...because method `dup` references the `Self` type in its parameters or return type\n+   |       ---                    ----     ---- ...because method `blah` has generic type parameters\n+   |       |                      |\n+   |       |                      ...because method `dup` references the `Self` type in its return type\n    |       this trait cannot be made into an object...\n ...\n LL |     (box 10 as Box<dyn bar>).dup();\n@@ -29,9 +29,9 @@ error[E0038]: the trait `bar` cannot be made into an object\n   --> $DIR/trait-test-2.rs:11:6\n    |\n LL | trait bar { fn dup(&self) -> Self; fn blah<X>(&self); }\n-   |       ---      ---                    ---- ...because method `blah` has generic type parameters\n-   |       |        |\n-   |       |        ...because method `dup` references the `Self` type in its parameters or return type\n+   |       ---                    ----     ---- ...because method `blah` has generic type parameters\n+   |       |                      |\n+   |       |                      ...because method `dup` references the `Self` type in its return type\n    |       this trait cannot be made into an object...\n ...\n LL |     (box 10 as Box<dyn bar>).dup();"}, {"sha": "539189982a8d7e8ec6b3dbb2f4d5196c4d6e01bd", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self-ppaux.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self-ppaux.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -14,7 +14,7 @@ error[E0038]: the trait `MyAdd` cannot be made into an object\n   --> $DIR/type-parameter-defaults-referencing-Self-ppaux.rs:14:18\n    |\n LL | trait MyAdd<Rhs=Self> { fn add(&self, other: &Rhs) -> Self; }\n-   |       -----                --- ...because method `add` references the `Self` type in its parameters or return type\n+   |       -----                                           ---- ...because method `add` references the `Self` type in its return type\n    |       |\n    |       this trait cannot be made into an object...\n ..."}, {"sha": "8935d766354fe8d8d46dfa4e820c2532df7659e7", "filename": "src/test/ui/wf/wf-object-safe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a52ec87a1720bda5a2aac437a909af01cd35e3f7/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-object-safe.stderr?ref=a52ec87a1720bda5a2aac437a909af01cd35e3f7", "patch": "@@ -4,7 +4,7 @@ error[E0038]: the trait `A` cannot be made into an object\n LL | trait A {\n    |       - this trait cannot be made into an object...\n LL |     fn foo(&self, _x: &Self);\n-   |        --- ...because method `foo` references the `Self` type in its parameters or return type\n+   |                       ----- ...because method `foo` references the `Self` type in this parameter\n ...\n LL |     let _x: &dyn A;\n    |             ^^^^^^ the trait `A` cannot be made into an object"}]}