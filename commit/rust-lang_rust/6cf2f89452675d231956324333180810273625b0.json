{"sha": "6cf2f89452675d231956324333180810273625b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjZjJmODk0NTI2NzVkMjMxOTU2MzI0MzMzMTgwODEwMjczNjI1YjA=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-24T23:02:47Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-25T07:07:30Z"}, "message": "Implement option::unwrap safely...!", "tree": {"sha": "5ccfb16f6f1dbaa0fbc66653988bc46913e5ecaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ccfb16f6f1dbaa0fbc66653988bc46913e5ecaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf2f89452675d231956324333180810273625b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf2f89452675d231956324333180810273625b0", "html_url": "https://github.com/rust-lang/rust/commit/6cf2f89452675d231956324333180810273625b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf2f89452675d231956324333180810273625b0/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bed37a1dc915cbc8e7333ee6822b03b096347356", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed37a1dc915cbc8e7333ee6822b03b096347356", "html_url": "https://github.com/rust-lang/rust/commit/bed37a1dc915cbc8e7333ee6822b03b096347356"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "f7bcfa9846c6bd13a3b78adc6661708f99371051", "filename": "src/libcore/option.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6cf2f89452675d231956324333180810273625b0/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf2f89452675d231956324333180810273625b0/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=6cf2f89452675d231956324333180810273625b0", "patch": "@@ -44,13 +44,14 @@ pure fn get_ref<T>(opt: &r/option<T>) -> &r/T {\n }\n \n pure fn expect<T: copy>(opt: option<T>, reason: ~str) -> T {\n-    #[doc = \"\n-    Gets the value out of an option, printing a specified message on failure\n-\n-    # Failure\n-\n-    Fails if the value equals `none`\n-    \"];\n+    /*!\n+     * Gets the value out of an option, printing a specified message on\n+     * failure\n+     *\n+     * # Failure\n+     *\n+     * Fails if the value equals `none`\n+     */\n     match opt { some(x) => x, none => fail reason }\n }\n \n@@ -165,15 +166,9 @@ pure fn unwrap<T>(+opt: option<T>) -> T {\n      * Useful primarily for getting strings, vectors and unique pointers out\n      * of option types without copying them.\n      */\n-\n-    unsafe {\n-        let addr = match opt {\n-          some(x) => ptr::addr_of(x),\n-          none => fail ~\"option::unwrap none\"\n-        };\n-        let liberated_value = unsafe::reinterpret_cast(*addr);\n-        unsafe::forget(opt);\n-        return liberated_value;\n+    match move opt {\n+        some(move x) => x,\n+        none => fail ~\"option::unwrap none\"\n     }\n }\n "}]}