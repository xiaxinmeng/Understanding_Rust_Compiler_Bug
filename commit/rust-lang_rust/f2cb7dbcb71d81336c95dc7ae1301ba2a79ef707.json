{"sha": "f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyY2I3ZGJjYjcxZDgxMzM2Yzk1ZGM3YWUxMzAxYmEyYTc5ZWY3MDc=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-20T17:38:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-20T17:39:46Z"}, "message": "Partially unify SymbolKind and CompletionItemKind", "tree": {"sha": "c17a9cf589910137b5388fc22856c991a5ec0a31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c17a9cf589910137b5388fc22856c991a5ec0a31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "html_url": "https://github.com/rust-lang/rust/commit/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "563a175fdb9073a548fc2e161d5de0a093b0d74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/563a175fdb9073a548fc2e161d5de0a093b0d74d", "html_url": "https://github.com/rust-lang/rust/commit/563a175fdb9073a548fc2e161d5de0a093b0d74d"}], "stats": {"total": 234, "additions": 126, "deletions": 108}, "files": [{"sha": "38e33a93e8d902a5e626321211bdd5622f98fa90", "filename": "crates/completion/src/completions/fn_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -6,7 +6,7 @@ use syntax::{\n     match_ast, AstNode,\n };\n \n-use crate::{CompletionContext, CompletionItem, CompletionKind, Completions};\n+use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n \n /// Complete repeated parameters, both name and type. For example, if all\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n@@ -58,7 +58,7 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n         })\n         .for_each(|(label, lookup)| {\n             CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label)\n-                .kind(crate::CompletionItemKind::Binding)\n+                .kind(CompletionItemKind::Binding)\n                 .lookup_by(lookup)\n                 .add_to(acc)\n         });"}, {"sha": "352fc7c777db49f41974afdbdecc3deabba6762c", "filename": "crates/completion/src/completions/mod_.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -3,11 +3,13 @@\n use std::iter;\n \n use hir::{Module, ModuleSource};\n-use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n-use ide_db::RootDatabase;\n+use ide_db::{\n+    base_db::{SourceDatabaseExt, VfsPath},\n+    RootDatabase, SymbolKind,\n+};\n use rustc_hash::FxHashSet;\n \n-use crate::{CompletionItem, CompletionItemKind};\n+use crate::CompletionItem;\n \n use crate::{context::CompletionContext, item::CompletionKind, Completions};\n \n@@ -79,7 +81,7 @@ pub(crate) fn complete_mod(acc: &mut Completions, ctx: &CompletionContext) -> Op\n                 label.push(';');\n             }\n             CompletionItem::new(CompletionKind::Magic, ctx.source_range(), &label)\n-                .kind(CompletionItemKind::Module)\n+                .kind(SymbolKind::Module)\n                 .add_to(acc)\n         });\n "}, {"sha": "0a7927eb8340b025b78948503dbfac3a8fe0d06f", "filename": "crates/completion/src/completions/record.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Frecord.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -1,10 +1,8 @@\n //! Complete fields in record literals and patterns.\n-use ide_db::helpers::FamousDefs;\n+use ide_db::{helpers::FamousDefs, SymbolKind};\n use syntax::ast::Expr;\n \n-use crate::{\n-    item::CompletionKind, CompletionContext, CompletionItem, CompletionItemKind, Completions,\n-};\n+use crate::{item::CompletionKind, CompletionContext, CompletionItem, Completions};\n \n pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     let missing_fields = match (ctx.record_pat_syntax.as_ref(), ctx.record_lit_syntax.as_ref()) {\n@@ -31,7 +29,7 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n                         \"..Default::default()\",\n                     )\n                     .insert_text(completion_text)\n-                    .kind(CompletionItemKind::Field)\n+                    .kind(SymbolKind::Field)\n                     .build(),\n                 );\n             }"}, {"sha": "f258ad9c3f038119897a7e459862c795c3222a38", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -32,7 +32,7 @@\n //! ```\n \n use hir::{self, HasAttrs, HasSource};\n-use ide_db::traits::get_missing_assoc_items;\n+use ide_db::{traits::get_missing_assoc_items, SymbolKind};\n use syntax::{\n     ast::{self, edit, Impl},\n     display::function_declaration,\n@@ -152,7 +152,7 @@ fn add_function_impl(\n     let completion_kind = if func.self_param(ctx.db).is_some() {\n         CompletionItemKind::Method\n     } else {\n-        CompletionItemKind::Function\n+        CompletionItemKind::SymbolKind(SymbolKind::Function)\n     };\n     let range = TextRange::new(fn_def_node.text_range().start(), ctx.source_range().end());\n \n@@ -188,7 +188,7 @@ fn add_type_alias_impl(\n     CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n         .text_edit(TextEdit::replace(range, snippet))\n         .lookup_by(alias_name)\n-        .kind(CompletionItemKind::TypeAlias)\n+        .kind(SymbolKind::TypeAlias)\n         .set_documentation(type_alias.docs(ctx.db))\n         .add_to(acc);\n }\n@@ -211,7 +211,7 @@ fn add_const_impl(\n             CompletionItem::new(CompletionKind::Magic, ctx.source_range(), snippet.clone())\n                 .text_edit(TextEdit::replace(range, snippet))\n                 .lookup_by(const_name)\n-                .kind(CompletionItemKind::Const)\n+                .kind(SymbolKind::Const)\n                 .set_documentation(const_.docs(ctx.db))\n                 .add_to(acc);\n         }"}, {"sha": "178e05c468e00baac41daaf31d356da3b219954b", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -3,11 +3,14 @@\n use std::fmt;\n \n use hir::{Documentation, ModPath, Mutability};\n-use ide_db::helpers::{\n-    insert_use::{self, ImportScope, MergeBehavior},\n-    mod_path_to_ast, SnippetCap,\n+use ide_db::{\n+    helpers::{\n+        insert_use::{self, ImportScope, MergeBehavior},\n+        mod_path_to_ast, SnippetCap,\n+    },\n+    SymbolKind,\n };\n-use stdx::assert_never;\n+use stdx::{assert_never, impl_from};\n use syntax::{algo, TextRange};\n use text_edit::TextEdit;\n \n@@ -117,53 +120,50 @@ pub enum CompletionScore {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n pub enum CompletionItemKind {\n+    SymbolKind(SymbolKind),\n+    BuiltinType,\n     Attribute,\n     Binding,\n-    BuiltinType,\n-    Const,\n-    ConstParam,\n-    Enum,\n-    EnumVariant,\n-    Field,\n-    Function,\n     Keyword,\n-    LifetimeParam,\n-    Macro,\n     Method,\n-    Module,\n     Snippet,\n-    Static,\n-    Struct,\n-    Trait,\n-    TypeAlias,\n-    TypeParam,\n     UnresolvedReference,\n }\n \n+impl_from!(SymbolKind for CompletionItemKind);\n+\n impl CompletionItemKind {\n     #[cfg(test)]\n     pub(crate) fn tag(&self) -> &'static str {\n         match self {\n+            CompletionItemKind::SymbolKind(kind) => match kind {\n+                SymbolKind::Const => \"ct\",\n+                SymbolKind::ConstParam => \"cp\",\n+                SymbolKind::Enum => \"en\",\n+                SymbolKind::Field => \"fd\",\n+                SymbolKind::Function => \"fn\",\n+                SymbolKind::Impl => \"im\",\n+                SymbolKind::Label => \"lb\",\n+                SymbolKind::LifetimeParam => \"lt\",\n+                SymbolKind::Local => \"lc\",\n+                SymbolKind::Macro => \"ma\",\n+                SymbolKind::Module => \"md\",\n+                SymbolKind::SelfParam => \"sp\",\n+                SymbolKind::Static => \"sc\",\n+                SymbolKind::Struct => \"st\",\n+                SymbolKind::Trait => \"tt\",\n+                SymbolKind::TypeAlias => \"ta\",\n+                SymbolKind::TypeParam => \"tp\",\n+                SymbolKind::Union => \"un\",\n+                SymbolKind::ValueParam => \"vp\",\n+                SymbolKind::Variant => \"ev\",\n+            },\n             CompletionItemKind::Attribute => \"at\",\n             CompletionItemKind::Binding => \"bn\",\n             CompletionItemKind::BuiltinType => \"bt\",\n-            CompletionItemKind::Const => \"ct\",\n-            CompletionItemKind::ConstParam => \"cp\",\n-            CompletionItemKind::Enum => \"en\",\n-            CompletionItemKind::EnumVariant => \"ev\",\n-            CompletionItemKind::Field => \"fd\",\n-            CompletionItemKind::Function => \"fn\",\n             CompletionItemKind::Keyword => \"kw\",\n-            CompletionItemKind::LifetimeParam => \"lt\",\n-            CompletionItemKind::Macro => \"ma\",\n             CompletionItemKind::Method => \"me\",\n-            CompletionItemKind::Module => \"md\",\n             CompletionItemKind::Snippet => \"sn\",\n-            CompletionItemKind::Static => \"sc\",\n-            CompletionItemKind::Struct => \"st\",\n-            CompletionItemKind::Trait => \"tt\",\n-            CompletionItemKind::TypeAlias => \"ta\",\n-            CompletionItemKind::TypeParam => \"tp\",\n             CompletionItemKind::UnresolvedReference => \"??\",\n         }\n     }\n@@ -386,8 +386,8 @@ impl Builder {\n         self.insert_text_format = InsertTextFormat::Snippet;\n         self.insert_text(snippet)\n     }\n-    pub(crate) fn kind(mut self, kind: CompletionItemKind) -> Builder {\n-        self.kind = Some(kind);\n+    pub(crate) fn kind(mut self, kind: impl Into<CompletionItemKind>) -> Builder {\n+        self.kind = Some(kind.into());\n         self\n     }\n     pub(crate) fn text_edit(mut self, edit: TextEdit) -> Builder {"}, {"sha": "8f66f6e599025a864168956d2aa0b269bef6f23b", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -13,7 +13,7 @@ mod builder_ext;\n use hir::{\n     AsAssocItem, Documentation, HasAttrs, HirDisplay, ModuleDef, Mutability, ScopeDef, Type,\n };\n-use ide_db::{helpers::SnippetCap, RootDatabase};\n+use ide_db::{helpers::SnippetCap, RootDatabase, SymbolKind};\n use syntax::TextRange;\n use test_utils::mark;\n \n@@ -146,7 +146,7 @@ impl<'a> Render<'a> {\n             self.ctx.source_range(),\n             name.to_string(),\n         )\n-        .kind(CompletionItemKind::Field)\n+        .kind(SymbolKind::Field)\n         .detail(ty.display(self.ctx.db()).to_string())\n         .set_documentation(field.docs(self.ctx.db()))\n         .set_deprecated(is_deprecated);\n@@ -160,7 +160,7 @@ impl<'a> Render<'a> {\n \n     fn add_tuple_field(&mut self, field: usize, ty: &Type) -> CompletionItem {\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), field.to_string())\n-            .kind(CompletionItemKind::Field)\n+            .kind(SymbolKind::Field)\n             .detail(ty.display(self.ctx.db()).to_string())\n             .build()\n     }\n@@ -187,7 +187,7 @@ impl<'a> Render<'a> {\n                 if self.ctx.completion.is_pat_binding_or_const\n                     | self.ctx.completion.is_irrefutable_pat_binding =>\n             {\n-                CompletionItemKind::EnumVariant\n+                CompletionItemKind::SymbolKind(SymbolKind::Variant)\n             }\n             ScopeDef::ModuleDef(Variant(var)) => {\n                 let item = render_variant(self.ctx, import_to_add, Some(local_name), *var, None);\n@@ -198,24 +198,29 @@ impl<'a> Render<'a> {\n                 return item;\n             }\n \n-            ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::Module,\n-            ScopeDef::ModuleDef(Adt(hir::Adt::Struct(_))) => CompletionItemKind::Struct,\n-            // FIXME: add CompletionItemKind::Union\n-            ScopeDef::ModuleDef(Adt(hir::Adt::Union(_))) => CompletionItemKind::Struct,\n-            ScopeDef::ModuleDef(Adt(hir::Adt::Enum(_))) => CompletionItemKind::Enum,\n-            ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::Const,\n-            ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::Static,\n-            ScopeDef::ModuleDef(Trait(..)) => CompletionItemKind::Trait,\n-            ScopeDef::ModuleDef(TypeAlias(..)) => CompletionItemKind::TypeAlias,\n+            ScopeDef::ModuleDef(Module(..)) => CompletionItemKind::SymbolKind(SymbolKind::Module),\n+            ScopeDef::ModuleDef(Adt(adt)) => CompletionItemKind::SymbolKind(match adt {\n+                hir::Adt::Struct(_) => SymbolKind::Struct,\n+                // FIXME: add CompletionItemKind::Union\n+                hir::Adt::Union(_) => SymbolKind::Struct,\n+                hir::Adt::Enum(_) => SymbolKind::Enum,\n+            }),\n+            ScopeDef::ModuleDef(Const(..)) => CompletionItemKind::SymbolKind(SymbolKind::Const),\n+            ScopeDef::ModuleDef(Static(..)) => CompletionItemKind::SymbolKind(SymbolKind::Static),\n+            ScopeDef::ModuleDef(Trait(..)) => CompletionItemKind::SymbolKind(SymbolKind::Trait),\n+            ScopeDef::ModuleDef(TypeAlias(..)) => {\n+                CompletionItemKind::SymbolKind(SymbolKind::TypeAlias)\n+            }\n             ScopeDef::ModuleDef(BuiltinType(..)) => CompletionItemKind::BuiltinType,\n-            ScopeDef::GenericParam(param) => match param {\n-                hir::GenericParam::TypeParam(_) => CompletionItemKind::TypeParam,\n-                hir::GenericParam::LifetimeParam(_) => CompletionItemKind::LifetimeParam,\n-                hir::GenericParam::ConstParam(_) => CompletionItemKind::ConstParam,\n-            },\n-            ScopeDef::Local(..) => CompletionItemKind::Binding,\n-            // (does this need its own kind?)\n-            ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => CompletionItemKind::TypeParam,\n+            ScopeDef::GenericParam(param) => CompletionItemKind::SymbolKind(match param {\n+                hir::GenericParam::TypeParam(_) => SymbolKind::TypeParam,\n+                hir::GenericParam::LifetimeParam(_) => SymbolKind::LifetimeParam,\n+                hir::GenericParam::ConstParam(_) => SymbolKind::ConstParam,\n+            }),\n+            ScopeDef::Local(..) => CompletionItemKind::SymbolKind(SymbolKind::Local),\n+            ScopeDef::AdtSelfType(..) | ScopeDef::ImplSelfType(..) => {\n+                CompletionItemKind::SymbolKind(SymbolKind::SelfParam)\n+            }\n             ScopeDef::Unknown => {\n                 let item = CompletionItem::new(\n                     CompletionKind::Reference,"}, {"sha": "5010b642a3ef92cd36219b6b2dc8ebfa13566391", "filename": "crates/completion/src/render/const_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fconst_.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -1,13 +1,14 @@\n //! Renderer for `const` fields.\n \n use hir::HasSource;\n+use ide_db::SymbolKind;\n use syntax::{\n     ast::{Const, NameOwner},\n     display::const_label,\n };\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionKind},\n     render::RenderContext,\n };\n \n@@ -36,7 +37,7 @@ impl<'a> ConstRender<'a> {\n         let detail = self.detail();\n \n         let item = CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name)\n-            .kind(CompletionItemKind::Const)\n+            .kind(SymbolKind::Const)\n             .set_documentation(self.ctx.docs(self.const_))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.const_)"}, {"sha": "adcddebd13fa0ff8b5cf994071d04faad52d2bb1", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -1,11 +1,12 @@\n //! Renderer for `enum` variants.\n \n use hir::{HasAttrs, HirDisplay, ModPath, StructKind};\n+use ide_db::SymbolKind;\n use itertools::Itertools;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportEdit},\n+    item::{CompletionItem, CompletionKind, ImportEdit},\n     render::{builder_ext::Params, RenderContext},\n };\n \n@@ -60,7 +61,7 @@ impl<'a> EnumRender<'a> {\n             self.ctx.source_range(),\n             self.qualified_name.clone(),\n         )\n-        .kind(CompletionItemKind::EnumVariant)\n+        .kind(SymbolKind::Variant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n         .add_import(import_to_add)"}, {"sha": "2d616b1fb5483d622f6433d7743e0c8779fc3fb6", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -1,6 +1,7 @@\n //! Renderer for function calls.\n \n use hir::{HasSource, Type};\n+use ide_db::SymbolKind;\n use syntax::{ast::Fn, display::function_declaration};\n use test_utils::mark;\n \n@@ -105,7 +106,7 @@ impl<'a> FunctionRender<'a> {\n         if self.func.self_param(self.ctx.db()).is_some() {\n             CompletionItemKind::Method\n         } else {\n-            CompletionItemKind::Function\n+            SymbolKind::Function.into()\n         }\n     }\n }"}, {"sha": "a4535786f2e9b81305fd92c9a9c94753fc850428", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -1,11 +1,12 @@\n //! Renderer for macro invocations.\n \n use hir::{Documentation, HasSource};\n+use ide_db::SymbolKind;\n use syntax::display::macro_label;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportEdit},\n+    item::{CompletionItem, CompletionKind, ImportEdit},\n     render::RenderContext,\n };\n \n@@ -41,7 +42,7 @@ impl<'a> MacroRender<'a> {\n     fn render(&self, import_to_add: Option<ImportEdit>) -> Option<CompletionItem> {\n         let mut builder =\n             CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), &self.label())\n-                .kind(CompletionItemKind::Macro)\n+                .kind(SymbolKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n                 .add_import(import_to_add)"}, {"sha": "bd97c3692de384ff056b7d32b47af9e0c697abbc", "filename": "crates/completion/src/render/type_alias.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ftype_alias.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -1,13 +1,14 @@\n //! Renderer for type aliases.\n \n use hir::HasSource;\n+use ide_db::SymbolKind;\n use syntax::{\n     ast::{NameOwner, TypeAlias},\n     display::type_label,\n };\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    item::{CompletionItem, CompletionKind},\n     render::RenderContext,\n };\n \n@@ -36,7 +37,7 @@ impl<'a> TypeAliasRender<'a> {\n         let detail = self.detail();\n \n         let item = CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), name)\n-            .kind(CompletionItemKind::TypeAlias)\n+            .kind(SymbolKind::TypeAlias)\n             .set_documentation(self.ctx.docs(self.type_alias))\n             .set_deprecated(\n                 self.ctx.is_deprecated(self.type_alias)"}, {"sha": "6eb34b06b7c01c2bcab4eca8628f5beb56dc53bf", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -137,24 +137,24 @@ fn line_index(db: &dyn LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]\n pub enum SymbolKind {\n-    Module,\n-    Impl,\n-    Field,\n-    TypeParam,\n+    Const,\n     ConstParam,\n+    Enum,\n+    Field,\n+    Function,\n+    Impl,\n+    Label,\n     LifetimeParam,\n-    ValueParam,\n-    SelfParam,\n     Local,\n-    Label,\n-    Function,\n-    Const,\n+    Macro,\n+    Module,\n+    SelfParam,\n     Static,\n     Struct,\n-    Enum,\n-    Variant,\n-    Union,\n-    TypeAlias,\n     Trait,\n-    Macro,\n+    TypeAlias,\n+    TypeParam,\n+    Union,\n+    ValueParam,\n+    Variant,\n }"}, {"sha": "96f915f1ce7f4c0a8081ef09c7b414ccd9b15be9", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=f2cb7dbcb71d81336c95dc7ae1301ba2a79ef707", "patch": "@@ -91,24 +91,32 @@ pub(crate) fn completion_item_kind(\n         CompletionItemKind::Attribute => lsp_types::CompletionItemKind::EnumMember,\n         CompletionItemKind::Binding => lsp_types::CompletionItemKind::Variable,\n         CompletionItemKind::BuiltinType => lsp_types::CompletionItemKind::Struct,\n-        CompletionItemKind::Const => lsp_types::CompletionItemKind::Constant,\n-        CompletionItemKind::ConstParam => lsp_types::CompletionItemKind::TypeParameter,\n-        CompletionItemKind::Enum => lsp_types::CompletionItemKind::Enum,\n-        CompletionItemKind::EnumVariant => lsp_types::CompletionItemKind::EnumMember,\n-        CompletionItemKind::Field => lsp_types::CompletionItemKind::Field,\n-        CompletionItemKind::Function => lsp_types::CompletionItemKind::Function,\n         CompletionItemKind::Keyword => lsp_types::CompletionItemKind::Keyword,\n-        CompletionItemKind::LifetimeParam => lsp_types::CompletionItemKind::TypeParameter,\n-        CompletionItemKind::Macro => lsp_types::CompletionItemKind::Method,\n         CompletionItemKind::Method => lsp_types::CompletionItemKind::Method,\n-        CompletionItemKind::Module => lsp_types::CompletionItemKind::Module,\n         CompletionItemKind::Snippet => lsp_types::CompletionItemKind::Snippet,\n-        CompletionItemKind::Static => lsp_types::CompletionItemKind::Value,\n-        CompletionItemKind::Struct => lsp_types::CompletionItemKind::Struct,\n-        CompletionItemKind::Trait => lsp_types::CompletionItemKind::Interface,\n-        CompletionItemKind::TypeAlias => lsp_types::CompletionItemKind::Struct,\n-        CompletionItemKind::TypeParam => lsp_types::CompletionItemKind::TypeParameter,\n         CompletionItemKind::UnresolvedReference => lsp_types::CompletionItemKind::Reference,\n+        CompletionItemKind::SymbolKind(symbol) => match symbol {\n+            SymbolKind::Const => lsp_types::CompletionItemKind::Constant,\n+            SymbolKind::ConstParam => lsp_types::CompletionItemKind::TypeParameter,\n+            SymbolKind::Enum => lsp_types::CompletionItemKind::Enum,\n+            SymbolKind::Field => lsp_types::CompletionItemKind::Field,\n+            SymbolKind::Function => lsp_types::CompletionItemKind::Function,\n+            SymbolKind::Impl => lsp_types::CompletionItemKind::Text,\n+            SymbolKind::Label => lsp_types::CompletionItemKind::Variable,\n+            SymbolKind::LifetimeParam => lsp_types::CompletionItemKind::TypeParameter,\n+            SymbolKind::Local => lsp_types::CompletionItemKind::Variable,\n+            SymbolKind::Macro => lsp_types::CompletionItemKind::Method,\n+            SymbolKind::Module => lsp_types::CompletionItemKind::Module,\n+            SymbolKind::SelfParam => lsp_types::CompletionItemKind::Value,\n+            SymbolKind::Static => lsp_types::CompletionItemKind::Value,\n+            SymbolKind::Struct => lsp_types::CompletionItemKind::Struct,\n+            SymbolKind::Trait => lsp_types::CompletionItemKind::Interface,\n+            SymbolKind::TypeAlias => lsp_types::CompletionItemKind::Struct,\n+            SymbolKind::TypeParam => lsp_types::CompletionItemKind::TypeParameter,\n+            SymbolKind::Union => lsp_types::CompletionItemKind::Struct,\n+            SymbolKind::ValueParam => lsp_types::CompletionItemKind::Value,\n+            SymbolKind::Variant => lsp_types::CompletionItemKind::EnumMember,\n+        },\n     }\n }\n "}]}