{"sha": "8eda5d831591e608b7de2910469a73d1dc02da42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlZGE1ZDgzMTU5MWU2MDhiN2RlMjkxMDQ2OWE3M2QxZGMwMmRhNDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-18T06:21:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-18T06:21:23Z"}, "message": "auto merge of #10443 : alexcrichton/rust/meaninless-pub-priv, r=cmr\n\nCloses #10111", "tree": {"sha": "16049786604b183640090936980cb5a7eeb7e3a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16049786604b183640090936980cb5a7eeb7e3a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8eda5d831591e608b7de2910469a73d1dc02da42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8eda5d831591e608b7de2910469a73d1dc02da42", "html_url": "https://github.com/rust-lang/rust/commit/8eda5d831591e608b7de2910469a73d1dc02da42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8eda5d831591e608b7de2910469a73d1dc02da42/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "727b70d6ae1c1daf36afa6addd8805b87cf31563", "url": "https://api.github.com/repos/rust-lang/rust/commits/727b70d6ae1c1daf36afa6addd8805b87cf31563", "html_url": "https://github.com/rust-lang/rust/commit/727b70d6ae1c1daf36afa6addd8805b87cf31563"}, {"sha": "dab8fec4af85c94b65d7036129f89a7e7bf6cbac", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab8fec4af85c94b65d7036129f89a7e7bf6cbac", "html_url": "https://github.com/rust-lang/rust/commit/dab8fec4af85c94b65d7036129f89a7e7bf6cbac"}], "stats": {"total": 134, "additions": 121, "deletions": 13}, "files": [{"sha": "d876fe02b920e9afa218123b113d786418ea5e05", "filename": "doc/rust.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -1550,6 +1550,7 @@ keyword for struct fields and enum variants). When an item is declared as `pub`,\n it can be thought of as being accessible to the outside world. For example:\n \n ~~~~\n+# fn main() {}\n // Declare a private struct\n struct Foo;\n "}, {"sha": "65f536fa9f2235333e6cfba39dab1d50ea2d355d", "filename": "doc/tutorial-container.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/doc%2Ftutorial-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/doc%2Ftutorial-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-container.md?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -87,6 +87,7 @@ Reaching the end of the iterator is signalled by returning `None` instead of\n `Some(item)`:\n \n ~~~\n+# fn main() {}\n /// A stream of N zeroes\n struct ZeroStream {\n     priv remaining: uint\n@@ -301,6 +302,7 @@ the iterator can provide better information.\n The `ZeroStream` from earlier can provide an exact lower and upper bound:\n \n ~~~\n+# fn main() {}\n /// A stream of N zeroes\n struct ZeroStream {\n     priv remaining: uint"}, {"sha": "0ad8adf3cc78e36ef9f44b530624df39b0905fa7", "filename": "doc/tutorial-macros.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/doc%2Ftutorial-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/doc%2Ftutorial-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-macros.md?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -216,7 +216,7 @@ Now consider code like the following:\n \n ~~~~\n # enum t1 { good_1(t2, uint), bad_1 };\n-# pub struct t2 { body: t3 }\n+# struct t2 { body: t3 }\n # enum t3 { good_2(uint), bad_2};\n # fn f(x: t1) -> uint {\n match x {\n@@ -262,7 +262,7 @@ macro_rules! biased_match (\n )\n \n # enum t1 { good_1(t2, uint), bad_1 };\n-# pub struct t2 { body: t3 }\n+# struct t2 { body: t3 }\n # enum t3 { good_2(uint), bad_2};\n # fn f(x: t1) -> uint {\n biased_match!((x)       ~ (good_1(g1, val)) else { return 0 };\n@@ -364,7 +364,7 @@ macro_rules! biased_match (\n \n \n # enum t1 { good_1(t2, uint), bad_1 };\n-# pub struct t2 { body: t3 }\n+# struct t2 { body: t3 }\n # enum t3 { good_2(uint), bad_2};\n # fn f(x: t1) -> uint {\n biased_match!("}, {"sha": "1b414c4083440cb82af507b30bbd1447ac7272c2", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -2568,6 +2568,7 @@ pub fn foo() { bar(); }\n ~~~\n // c.rs\n pub fn bar() { println(\"Baz!\"); }\n+# fn main() {}\n ~~~\n \n There also exist two short forms for importing multiple names at once:\n@@ -2743,7 +2744,7 @@ Therefore, if you plan to compile your crate as a library, you should annotate i\n #[link(name = \"farm\", vers = \"2.5\")];\n \n // ...\n-# pub fn farm() {}\n+# fn farm() {}\n ~~~~\n \n You can also in turn require in a `extern mod` statement that certain link metadata items match some criteria.\n@@ -2769,7 +2770,7 @@ or setting the crate type (library or executable) explicitly:\n \n // Turn on a warning\n #[warn(non_camel_case_types)]\n-# pub fn farm() {}\n+# fn farm() {}\n ~~~~\n \n If you're compiling your crate with `rustpkg`,\n@@ -2790,7 +2791,9 @@ We define two crates, and use one of them as a library in the other.\n ~~~~\n // world.rs\n #[link(name = \"world\", vers = \"0.42\")];\n+# extern mod extra;\n pub fn explore() -> &'static str { \"world\" }\n+# fn main() {}\n ~~~~\n \n ~~~~ {.xfail-test}"}, {"sha": "60c4a75104b601f86bbdf8d93ad5730e6642d31a", "filename": "src/libextra/sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Flibextra%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Flibextra%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsort.rs?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -846,7 +846,7 @@ mod tests {\n \n     fn check_sort(v1: &[int], v2: &[int]) {\n         let len = v1.len();\n-        pub fn le(a: &int, b: &int) -> bool { *a <= *b }\n+        fn le(a: &int, b: &int) -> bool { *a <= *b }\n         let f = le;\n         let v3 = merge_sort::<int>(v1, f);\n         let mut i = 0u;\n@@ -876,7 +876,7 @@ mod tests {\n \n     #[test]\n     fn test_merge_sort_mutable() {\n-        pub fn le(a: &int, b: &int) -> bool { *a <= *b }\n+        fn le(a: &int, b: &int) -> bool { *a <= *b }\n         let v1 = ~[3, 2, 1];\n         let v2 = merge_sort(v1, le);\n         assert_eq!(v2, ~[1, 2, 3]);"}, {"sha": "416dc9d7237d8e13ab2cc2892a25f98428dd0b4b", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 79, "deletions": 3, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -13,6 +13,7 @@\n //! which are available for use externally when compiled as a library.\n \n use std::hashmap::{HashSet, HashMap};\n+use std::util;\n \n use middle::resolve;\n use middle::ty;\n@@ -275,6 +276,7 @@ impl<'self> Visitor<()> for EmbargoVisitor<'self> {\n struct PrivacyVisitor<'self> {\n     tcx: ty::ctxt,\n     curitem: ast::NodeId,\n+    in_fn: bool,\n \n     // See comments on the same field in `EmbargoVisitor`.\n     path_all_public_items: &'self ExportedItems,\n@@ -688,6 +690,63 @@ impl<'self> PrivacyVisitor<'self> {\n             }\n         }\n     }\n+\n+    /// When inside of something like a function or a method, visibility has no\n+    /// control over anything so this forbids any mention of any visibility\n+    fn check_all_inherited(&self, item: @ast::item) {\n+        let tcx = self.tcx;\n+        let check_inherited = |sp: Span, vis: ast::visibility| {\n+            if vis != ast::inherited {\n+                tcx.sess.span_err(sp, \"visibility has no effect inside functions\");\n+            }\n+        };\n+        let check_struct = |def: &@ast::struct_def| {\n+            for f in def.fields.iter() {\n+               match f.node.kind {\n+                    ast::named_field(_, p) => check_inherited(f.span, p),\n+                    ast::unnamed_field => {}\n+                }\n+            }\n+        };\n+        check_inherited(item.span, item.vis);\n+        match item.node {\n+            ast::item_impl(_, _, _, ref methods) => {\n+                for m in methods.iter() {\n+                    check_inherited(m.span, m.vis);\n+                }\n+            }\n+            ast::item_foreign_mod(ref fm) => {\n+                for i in fm.items.iter() {\n+                    check_inherited(i.span, i.vis);\n+                }\n+            }\n+            ast::item_enum(ref def, _) => {\n+                for v in def.variants.iter() {\n+                    check_inherited(v.span, v.node.vis);\n+\n+                    match v.node.kind {\n+                        ast::struct_variant_kind(ref s) => check_struct(s),\n+                        ast::tuple_variant_kind(*) => {}\n+                    }\n+                }\n+            }\n+\n+            ast::item_struct(ref def, _) => check_struct(def),\n+\n+            ast::item_trait(_, _, ref methods) => {\n+                for m in methods.iter() {\n+                    match *m {\n+                        ast::required(*) => {}\n+                        ast::provided(ref m) => check_inherited(m.span, m.vis),\n+                    }\n+                }\n+            }\n+\n+            ast::item_static(*) |\n+            ast::item_fn(*) | ast::item_mod(*) | ast::item_ty(*) |\n+            ast::item_mac(*) => {}\n+        }\n+    }\n }\n \n impl<'self> Visitor<()> for PrivacyVisitor<'self> {\n@@ -699,12 +758,28 @@ impl<'self> Visitor<()> for PrivacyVisitor<'self> {\n         }\n \n         // Disallow unnecessary visibility qualifiers\n-        self.check_sane_privacy(item);\n+        if self.in_fn {\n+            self.check_all_inherited(item);\n+        } else {\n+            self.check_sane_privacy(item);\n+        }\n \n-        let orig_curitem = self.curitem;\n-        self.curitem = item.id;\n+        let orig_curitem = util::replace(&mut self.curitem, item.id);\n+        let orig_in_fn = util::replace(&mut self.in_fn, match item.node {\n+            ast::item_mod(*) => false, // modules turn privacy back on\n+            _ => self.in_fn,           // otherwise we inherit\n+        });\n         visit::walk_item(self, item, ());\n         self.curitem = orig_curitem;\n+        self.in_fn = orig_in_fn;\n+    }\n+\n+    fn visit_fn(&mut self, fk: &visit::fn_kind, fd: &ast::fn_decl,\n+                b: &ast::Block, s: Span, n: ast::NodeId, _: ()) {\n+        // This catches both functions and methods\n+        let orig_in_fn = util::replace(&mut self.in_fn, true);\n+        visit::walk_fn(self, fk, fd, b, s, n, ());\n+        self.in_fn = orig_in_fn;\n     }\n \n     fn visit_expr(&mut self, expr: @ast::Expr, _: ()) {\n@@ -907,6 +982,7 @@ pub fn check_crate(tcx: ty::ctxt,\n     {\n         let mut visitor = PrivacyVisitor {\n             curitem: ast::DUMMY_NODE_ID,\n+            in_fn: false,\n             tcx: tcx,\n             path_all_public_items: &path_all_public_items,\n             parents: &parents,"}, {"sha": "10a02e1e8bedffc9d741f588476cac65be8a39c0", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -1409,7 +1409,7 @@ pub fn subst_tps(tcx: ctxt, tps: &[t], self_ty_opt: Option<t>, typ: t) -> t {\n     let mut subst = TpsSubst { tcx: tcx, self_ty_opt: self_ty_opt, tps: tps };\n     return subst.fold_ty(typ);\n \n-    pub struct TpsSubst<'self> {\n+    struct TpsSubst<'self> {\n         tcx: ctxt,\n         self_ty_opt: Option<t>,\n         tps: &'self [t],"}, {"sha": "f69a043334750dac0c6b0ec004d66f817c59e3b6", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -138,7 +138,7 @@ pub fn expand_expr(extsbox: @mut SyntaxEnv,\n \n             let span = e.span;\n \n-            pub fn mk_expr(_: @ExtCtxt, span: Span, node: Expr_)\n+            fn mk_expr(_: @ExtCtxt, span: Span, node: Expr_)\n                            -> @ast::Expr {\n                 @ast::Expr {\n                     id: ast::DUMMY_NODE_ID,"}, {"sha": "69a33922776e121e0559f79789ff9741149c4d23", "filename": "src/test/compile-fail/unnecessary-private.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    pub struct A; //~ ERROR: visibility has no effect\n+    pub enum B {} //~ ERROR: visibility has no effect\n+    pub trait C { //~ ERROR: visibility has no effect\n+        pub fn foo() {} //~ ERROR: visibility has no effect\n+    }\n+    impl A {\n+        pub fn foo() {} //~ ERROR: visibility has no effect\n+    }\n+\n+    struct D {\n+        priv foo: int, //~ ERROR: visibility has no effect\n+    }\n+    pub fn foo() {} //~ ERROR: visibility has no effect\n+    pub mod bar {} //~ ERROR: visibility has no effect\n+}"}, {"sha": "927f8160f7e4aba76ccafe98d5861978d004cff3", "filename": "src/test/run-pass/nested-class.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Ftest%2Frun-pass%2Fnested-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8eda5d831591e608b7de2910469a73d1dc02da42/src%2Ftest%2Frun-pass%2Fnested-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-class.rs?ref=8eda5d831591e608b7de2910469a73d1dc02da42", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     }\n \n     impl b {\n-        pub fn do_stuff(&self) -> int { return 37; }\n+        fn do_stuff(&self) -> int { return 37; }\n     }\n \n     fn b(i:int) -> b {"}]}