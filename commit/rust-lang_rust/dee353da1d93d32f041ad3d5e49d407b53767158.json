{"sha": "dee353da1d93d32f041ad3d5e49d407b53767158", "node_id": "C_kwDOAAsO6NoAKGRlZTM1M2RhMWQ5M2QzMmYwNDFhZDNkNWU0OWQ0MDdiNTM3NjcxNTg", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-31T23:21:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-05-31T23:21:35Z"}, "message": "Inline `bridge::Buffer` methods.\n\nThis fixes a performance regression caused by making `Buffer`\nnon-generic in #97004.", "tree": {"sha": "8a9e1a36e59bc71a11a0e845bc18f7be41416715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a9e1a36e59bc71a11a0e845bc18f7be41416715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee353da1d93d32f041ad3d5e49d407b53767158", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee353da1d93d32f041ad3d5e49d407b53767158", "html_url": "https://github.com/rust-lang/rust/commit/dee353da1d93d32f041ad3d5e49d407b53767158", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee353da1d93d32f041ad3d5e49d407b53767158/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8", "html_url": "https://github.com/rust-lang/rust/commit/bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "48030f8d82dcaa3671ec67631991774c36ed5098", "filename": "library/proc_macro/src/bridge/buffer.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dee353da1d93d32f041ad3d5e49d407b53767158/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee353da1d93d32f041ad3d5e49d407b53767158/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fbuffer.rs?ref=dee353da1d93d32f041ad3d5e49d407b53767158", "patch": "@@ -18,33 +18,39 @@ unsafe impl Sync for Buffer {}\n unsafe impl Send for Buffer {}\n \n impl Default for Buffer {\n+    #[inline]\n     fn default() -> Self {\n         Self::from(vec![])\n     }\n }\n \n impl Deref for Buffer {\n     type Target = [u8];\n+    #[inline]\n     fn deref(&self) -> &[u8] {\n         unsafe { slice::from_raw_parts(self.data as *const u8, self.len) }\n     }\n }\n \n impl DerefMut for Buffer {\n+    #[inline]\n     fn deref_mut(&mut self) -> &mut [u8] {\n         unsafe { slice::from_raw_parts_mut(self.data, self.len) }\n     }\n }\n \n impl Buffer {\n+    #[inline]\n     pub(super) fn new() -> Self {\n         Self::default()\n     }\n \n+    #[inline]\n     pub(super) fn clear(&mut self) {\n         self.len = 0;\n     }\n \n+    #[inline]\n     pub(super) fn take(&mut self) -> Self {\n         mem::take(self)\n     }\n@@ -53,6 +59,7 @@ impl Buffer {\n     // because in the case of small arrays, codegen can be more efficient\n     // (avoiding a memmove call). With extend_from_slice, LLVM at least\n     // currently is not able to make that optimization.\n+    #[inline]\n     pub(super) fn extend_from_array<const N: usize>(&mut self, xs: &[u8; N]) {\n         if xs.len() > (self.capacity - self.len) {\n             let b = self.take();\n@@ -64,6 +71,7 @@ impl Buffer {\n         }\n     }\n \n+    #[inline]\n     pub(super) fn extend_from_slice(&mut self, xs: &[u8]) {\n         if xs.len() > (self.capacity - self.len) {\n             let b = self.take();\n@@ -75,6 +83,7 @@ impl Buffer {\n         }\n     }\n \n+    #[inline]\n     pub(super) fn push(&mut self, v: u8) {\n         // The code here is taken from Vec::push, and we know that reserve()\n         // will panic if we're exceeding isize::MAX bytes and so there's no need\n@@ -91,22 +100,26 @@ impl Buffer {\n }\n \n impl Write for Buffer {\n+    #[inline]\n     fn write(&mut self, xs: &[u8]) -> io::Result<usize> {\n         self.extend_from_slice(xs);\n         Ok(xs.len())\n     }\n \n+    #[inline]\n     fn write_all(&mut self, xs: &[u8]) -> io::Result<()> {\n         self.extend_from_slice(xs);\n         Ok(())\n     }\n \n+    #[inline]\n     fn flush(&mut self) -> io::Result<()> {\n         Ok(())\n     }\n }\n \n impl Drop for Buffer {\n+    #[inline]\n     fn drop(&mut self) {\n         let b = self.take();\n         (b.drop)(b);"}]}