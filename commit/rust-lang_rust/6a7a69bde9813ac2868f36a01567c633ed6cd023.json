{"sha": "6a7a69bde9813ac2868f36a01567c633ed6cd023", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhN2E2OWJkZTk4MTNhYzI4NjhmMzZhMDE1NjdjNjMzZWQ2Y2QwMjM=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-01-12T22:07:31Z"}, "committer": {"name": "Thom Chiovoloni", "email": "tchiovoloni@mozilla.com", "date": "2020-01-12T22:07:31Z"}, "message": "Add {leading,trailing}_ones to primitive int types", "tree": {"sha": "d138e144ca71baa2b1552d8f00fbaeef5c7b7e9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d138e144ca71baa2b1552d8f00fbaeef5c7b7e9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a7a69bde9813ac2868f36a01567c633ed6cd023", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a7a69bde9813ac2868f36a01567c633ed6cd023", "html_url": "https://github.com/rust-lang/rust/commit/6a7a69bde9813ac2868f36a01567c633ed6cd023", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a7a69bde9813ac2868f36a01567c633ed6cd023/comments", "author": null, "committer": null, "parents": [{"sha": "3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a", "html_url": "https://github.com/rust-lang/rust/commit/3ebcfa1451cfedc13a07e6353d8ade9742dfdc2a"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "77fae26953f09c39c3adc1144a1a8edaeb1e93b6", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6a7a69bde9813ac2868f36a01567c633ed6cd023/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a7a69bde9813ac2868f36a01567c633ed6cd023/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=6a7a69bde9813ac2868f36a01567c633ed6cd023", "patch": "@@ -393,6 +393,48 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Returns the number of leading ones in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(leading_trailing_ones)]\n+let n = -1\", stringify!($SelfT), \";\n+\n+assert_eq!(n.leading_ones(), \", stringify!($BITS), \");\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"leading_trailing_ones\", reason = \"newly added\", issue = \"0\")]\n+            #[inline]\n+            pub const fn leading_ones(self) -> u32 {\n+                (self as $UnsignedT).leading_ones()\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Returns the number of trailing ones in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(leading_trailing_ones)]\n+let n = 3\", stringify!($SelfT), \";\n+\n+assert_eq!(n.trailing_ones(), 2);\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"leading_trailing_ones\", reason = \"newly added\", issue = \"0\")]\n+            #[inline]\n+            pub const fn trailing_ones(self) -> u32 {\n+                (self as $UnsignedT).trailing_ones()\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Shifts the bits to the left by a specified amount, `n`,\n wrapping the truncated bits to the end of the resulting integer.\n@@ -2485,6 +2527,47 @@ assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Returns the number of leading ones in the binary representation of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(leading_trailing_ones)]\n+let n = !(\", stringify!($SelfT), \"::max_value() >> 2);\n+\n+assert_eq!(n.leading_ones(), 2);\", $EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"leading_trailing_ones\", reason = \"newly added\", issue = \"0\")]\n+            #[inline]\n+            pub const fn leading_ones(self) -> u32 {\n+                (!self).leading_zeros()\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Returns the number of trailing ones in the binary representation\n+of `self`.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+\", $Feature, \"#![feature(leading_trailing_ones)]\n+let n = 0b1010111\", stringify!($SelfT), \";\n+\n+assert_eq!(n.trailing_ones(), 3);\", $EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"leading_trailing_ones\", reason = \"newly added\", issue = \"0\")]\n+            #[inline]\n+            pub const fn trailing_ones(self) -> u32 {\n+                (!self).trailing_zeros()\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Shifts the bits to the left by a specified amount, `n`,\n wrapping the truncated bits to the end of the resulting integer."}]}