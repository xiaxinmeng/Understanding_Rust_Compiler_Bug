{"sha": "f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZjkxZjBiMmY5OGRkZjllYTM2YzRiYzIwMGViZGEyY2Q4OTgyMzA=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-01-27T06:10:10Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-03-05T17:36:50Z"}, "message": "Remove eh_unwind_resume lang item", "tree": {"sha": "97d2e63867c5bb5a636c4eb96f79576d625e88f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97d2e63867c5bb5a636c4eb96f79576d625e88f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "html_url": "https://github.com/rust-lang/rust/commit/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d73813ae62a2d7327f1e657f999ea7636c7a402d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d73813ae62a2d7327f1e657f999ea7636c7a402d", "html_url": "https://github.com/rust-lang/rust/commit/d73813ae62a2d7327f1e657f999ea7636c7a402d"}], "stats": {"total": 174, "additions": 34, "deletions": 140}, "files": [{"sha": "f639095fae75984792f72b3540d1e127eabe740c", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -2308,7 +2308,6 @@ dependencies = [\n name = \"panic_abort\"\n version = \"0.0.0\"\n dependencies = [\n- \"cfg-if\",\n  \"compiler_builtins\",\n  \"core\",\n  \"libc\","}, {"sha": "250824321920d97d75abee30eb88e9375e5da4fd", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 3, "deletions": 19, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -52,7 +52,6 @@ fn main(_argc: isize, _argv: *const *const u8) -> isize {\n \n #[lang = \"eh_personality\"] extern fn rust_eh_personality() {}\n #[lang = \"panic_impl\"] extern fn rust_begin_panic(info: &PanicInfo) -> ! { unsafe { intrinsics::abort() } }\n-#[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n #[no_mangle] pub extern fn rust_eh_register_frames () {}\n #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n ```\n@@ -67,7 +66,7 @@ Other features provided by lang items include:\n   marked with lang items; those specific four are `eq`, `ord`,\n   `deref`, and `add` respectively.\n - stack unwinding and general failure; the `eh_personality`,\n-  `eh_unwind_resume`, `fail` and `fail_bounds_checks` lang items.\n+  `panic` and `panic_bounds_checks` lang items.\n - the traits in `std::marker` used to indicate types of\n   various kinds; lang items `send`, `sync` and `copy`.\n - the marker types and variance indicators found in\n@@ -130,12 +129,6 @@ fn start(_argc: isize, _argv: *const *const u8) -> isize {\n pub extern fn rust_eh_personality() {\n }\n \n-// This function may be needed based on the compilation target.\n-#[lang = \"eh_unwind_resume\"]\n-#[no_mangle]\n-pub extern fn rust_eh_unwind_resume() {\n-}\n-\n #[lang = \"panic_impl\"]\n #[no_mangle]\n pub extern fn rust_begin_panic(info: &PanicInfo) -> ! {\n@@ -173,12 +166,6 @@ pub extern fn main(_argc: i32, _argv: *const *const u8) -> i32 {\n pub extern fn rust_eh_personality() {\n }\n \n-// This function may be needed based on the compilation target.\n-#[lang = \"eh_unwind_resume\"]\n-#[no_mangle]\n-pub extern fn rust_eh_unwind_resume() {\n-}\n-\n #[lang = \"panic_impl\"]\n #[no_mangle]\n pub extern fn rust_begin_panic(info: &PanicInfo) -> ! {\n@@ -211,10 +198,8 @@ compiler. When a panic happens, this controls the message that's displayed on\n the screen. While the language item's name is `panic_impl`, the symbol name is\n `rust_begin_panic`.\n \n-A third function, `rust_eh_unwind_resume`, is also needed if the `custom_unwind_resume`\n-flag is set in the options of the compilation target. It allows customizing the\n-process of resuming unwind at the end of the landing pads. The language item's name\n-is `eh_unwind_resume`.\n+Finally, a `eh_catch_typeinfo` static is needed for certain targets which\n+implement Rust panics on top of C++ exceptions.\n \n ## List of all language items\n \n@@ -247,7 +232,6 @@ the source code.\n   - `eh_personality`: `libpanic_unwind/emcc.rs` (EMCC)\n   - `eh_personality`: `libpanic_unwind/gcc.rs` (GNU)\n   - `eh_personality`: `libpanic_unwind/seh.rs` (SEH)\n-  - `eh_unwind_resume`: `libpanic_unwind/gcc.rs` (GCC)\n   - `eh_catch_typeinfo`: `libpanic_unwind/emcc.rs` (EMCC)\n   - `panic`: `libcore/panicking.rs`\n   - `panic_bounds_check`: `libcore/panicking.rs`"}, {"sha": "2bee0b716c750f4836068ea38b85e74cceb09b7d", "filename": "src/libpanic_abort/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibpanic_abort%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibpanic_abort%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2FCargo.toml?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -14,4 +14,3 @@ doc = false\n core = { path = \"../libcore\" }\n libc = { version = \"0.2\", default-features = false }\n compiler_builtins = \"0.1.0\"\n-cfg-if = \"0.1.8\""}, {"sha": "d894b50e077fac3dd353c0aa54217e3cfd22f3a6", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -115,7 +115,7 @@ pub mod personalities {\n     // Note that we don't execute landing pads, so this is never called, so it's\n     // body is empty.\n     #[no_mangle]\n-    #[cfg(all(target_os = \"windows\", target_env = \"gnu\"))]\n+    #[cfg(all(bootstrap, target_os = \"windows\", target_env = \"gnu\"))]\n     pub extern \"C\" fn rust_eh_unwind_resume() {}\n \n     // These two are called by our startup objects on i686-pc-windows-gnu, but"}, {"sha": "4fcf048a2cd872689290968d42f8c1ff1dd4e19a", "filename": "src/libpanic_unwind/gcc.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibpanic_unwind%2Fgcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibpanic_unwind%2Fgcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Fgcc.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -35,14 +35,6 @@\n //!\n //! Once stack has been unwound down to the handler frame level, unwinding stops\n //! and the last personality routine transfers control to the catch block.\n-//!\n-//! ## `eh_personality` and `eh_unwind_resume`\n-//!\n-//! These language items are used by the compiler when generating unwind info.\n-//! The first one is the personality routine described above. The second one\n-//! allows compilation target to customize the process of resuming unwind at the\n-//! end of the landing pads. `eh_unwind_resume` is used only if\n-//! `custom_unwind_resume` flag in the target options is set.\n \n #![allow(private_no_mangle_fns)]\n \n@@ -324,8 +316,8 @@ unsafe fn find_eh_action(\n     eh::find_eh_action(lsda, &eh_context, foreign_exception)\n }\n \n-// See docs in the `unwind` module.\n #[cfg(all(\n+    bootstrap,\n     target_os = \"windows\",\n     any(target_arch = \"x86\", target_arch = \"x86_64\"),\n     target_env = \"gnu\""}, {"sha": "36560371587a53c8b5d6c4937650604f60e356e1", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -57,8 +57,7 @@ pub fn whitelisted(tcx: TyCtxt<'_>, lang_item: LangItem) -> bool {\n     // symbols. Other panic runtimes ensure that the relevant symbols are\n     // available to link things together, but they're never exercised.\n     if tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n-        return lang_item == LangItem::EhPersonalityLangItem\n-            || lang_item == LangItem::EhUnwindResumeLangItem;\n+        return lang_item == LangItem::EhPersonalityLangItem;\n     }\n \n     false"}, {"sha": "04e161d6e08eb119b2088584d0248a9c9ad46090", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 46, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -1,4 +1,3 @@\n-use crate::abi::FnAbi;\n use crate::attributes;\n use crate::debuginfo;\n use crate::llvm;\n@@ -15,23 +14,20 @@ use rustc::mir::mono::CodegenUnit;\n use rustc::session::config::{self, CFGuard, DebugInfo};\n use rustc::session::Session;\n use rustc::ty::layout::{\n-    FnAbiExt, HasParamEnv, LayoutError, LayoutOf, PointeeInfo, Size, TyLayout, VariantIdx,\n+    HasParamEnv, LayoutError, LayoutOf, PointeeInfo, Size, TyLayout, VariantIdx,\n };\n use rustc::ty::{self, Instance, Ty, TyCtxt};\n use rustc_codegen_ssa::base::wants_msvc_seh;\n use rustc_data_structures::base_n;\n use rustc_data_structures::const_cstr;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n-use rustc_hir::Unsafety;\n use rustc_target::spec::{HasTargetSpec, Target};\n \n-use crate::abi::Abi;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::Symbol;\n use std::cell::{Cell, RefCell};\n use std::ffi::CStr;\n-use std::iter;\n use std::str;\n use std::sync::Arc;\n \n@@ -87,7 +83,6 @@ pub struct CodegenCx<'ll, 'tcx> {\n     pub dbg_cx: Option<debuginfo::CrateDebugContext<'ll, 'tcx>>,\n \n     eh_personality: Cell<Option<&'ll Value>>,\n-    eh_unwind_resume: Cell<Option<&'ll Value>>,\n     pub rust_try_fn: Cell<Option<&'ll Value>>,\n \n     intrinsics: RefCell<FxHashMap<&'static str, &'ll Value>>,\n@@ -328,7 +323,6 @@ impl<'ll, 'tcx> CodegenCx<'ll, 'tcx> {\n             isize_ty,\n             dbg_cx,\n             eh_personality: Cell::new(None),\n-            eh_unwind_resume: Cell::new(None),\n             rust_try_fn: Cell::new(None),\n             intrinsics: Default::default(),\n             local_gen_sym_counter: Cell::new(0),\n@@ -406,45 +400,6 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         llfn\n     }\n \n-    // Returns a Value of the \"eh_unwind_resume\" lang item if one is defined,\n-    // otherwise declares it as an external function.\n-    fn eh_unwind_resume(&self) -> &'ll Value {\n-        let unwresume = &self.eh_unwind_resume;\n-        if let Some(llfn) = unwresume.get() {\n-            return llfn;\n-        }\n-\n-        let tcx = self.tcx;\n-        assert!(self.sess().target.target.options.custom_unwind_resume);\n-        if let Some(def_id) = tcx.lang_items().eh_unwind_resume() {\n-            let llfn = self.get_fn_addr(\n-                ty::Instance::resolve(\n-                    tcx,\n-                    ty::ParamEnv::reveal_all(),\n-                    def_id,\n-                    tcx.intern_substs(&[]),\n-                )\n-                .unwrap(),\n-            );\n-            unwresume.set(Some(llfn));\n-            return llfn;\n-        }\n-\n-        let sig = ty::Binder::bind(tcx.mk_fn_sig(\n-            iter::once(tcx.mk_mut_ptr(tcx.types.u8)),\n-            tcx.types.never,\n-            false,\n-            Unsafety::Unsafe,\n-            Abi::C,\n-        ));\n-\n-        let fn_abi = FnAbi::of_fn_ptr(self, sig, &[]);\n-        let llfn = self.declare_fn(\"rust_eh_unwind_resume\", &fn_abi);\n-        attributes::apply_target_cpu_attr(self, llfn);\n-        unwresume.set(Some(llfn));\n-        llfn\n-    }\n-\n     fn sess(&self) -> &Session {\n         &self.tcx.sess\n     }"}, {"sha": "2cf0cceb91039eac7eecb333aa00647915380bff", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -178,15 +178,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             let lp1 = bx.load_operand(lp1).immediate();\n             slot.storage_dead(&mut bx);\n \n-            if !bx.sess().target.target.options.custom_unwind_resume {\n-                let mut lp = bx.const_undef(self.landing_pad_type());\n-                lp = bx.insert_value(lp, lp0, 0);\n-                lp = bx.insert_value(lp, lp1, 1);\n-                bx.resume(lp);\n-            } else {\n-                bx.call(bx.eh_unwind_resume(), &[lp0], helper.funclet(self));\n-                bx.unreachable();\n-            }\n+            let mut lp = bx.const_undef(self.landing_pad_type());\n+            lp = bx.insert_value(lp, lp0, 0);\n+            lp = bx.insert_value(lp, lp1, 1);\n+            bx.resume(lp);\n         }\n     }\n "}, {"sha": "d7587163ba00168dc4ccb828f3f91cf8432d172c", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -14,7 +14,6 @@ pub trait MiscMethods<'tcx>: BackendTypes {\n     fn get_fn(&self, instance: Instance<'tcx>) -> Self::Function;\n     fn get_fn_addr(&self, instance: Instance<'tcx>) -> Self::Value;\n     fn eh_personality(&self) -> Self::Value;\n-    fn eh_unwind_resume(&self) -> Self::Value;\n     fn sess(&self) -> &Session;\n     fn codegen_unit(&self) -> &Arc<CodegenUnit<'tcx>>;\n     fn used_statics(&self) -> &RefCell<Vec<Self::Value>>;"}, {"sha": "89457009a8bfa4d32dbe533e91b99e44947a1a7d", "filename": "src/librustc_hir/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_hir%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_hir%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flang_items.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -240,7 +240,6 @@ language_item_table! {\n     StartFnLangItem,             \"start\",              start_fn,                Target::Fn;\n \n     EhPersonalityLangItem,       \"eh_personality\",     eh_personality,          Target::Fn;\n-    EhUnwindResumeLangItem,      \"eh_unwind_resume\",   eh_unwind_resume,        Target::Fn;\n     EhCatchTypeinfoLangItem,     \"eh_catch_typeinfo\",  eh_catch_typeinfo,       Target::Static;\n \n     OwnedBoxLangItem,            \"owned_box\",          owned_box,               Target::Struct;"}, {"sha": "c0560eb8d455a9deee694c607e0404b9d843688d", "filename": "src/librustc_hir/weak_lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_hir%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_hir%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fweak_lang_items.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -43,6 +43,5 @@ impl LanguageItems {\n weak_lang_items! {\n     panic_impl,         PanicImplLangItem,          rust_begin_unwind;\n     eh_personality,     EhPersonalityLangItem,      rust_eh_personality;\n-    eh_unwind_resume,   EhUnwindResumeLangItem,     rust_eh_unwind_resume;\n     oom,                OomLangItem,                rust_oom;\n }"}, {"sha": "7bf49d56531897e086c6f1213c6aab3e0a1c83f4", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -28,9 +28,6 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n     if items.eh_personality().is_none() {\n         items.missing.push(lang_items::EhPersonalityLangItem);\n     }\n-    if tcx.sess.target.target.options.custom_unwind_resume & items.eh_unwind_resume().is_none() {\n-        items.missing.push(lang_items::EhUnwindResumeLangItem);\n-    }\n \n     {\n         let mut cx = Context { tcx, items };"}, {"sha": "6231489dfb221aa910d632957aed5fef07829a62", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -287,7 +287,6 @@ symbols! {\n         dylib,\n         dyn_trait,\n         eh_personality,\n-        eh_unwind_resume,\n         enable,\n         Encodable,\n         env,\n@@ -663,7 +662,6 @@ symbols! {\n         rustc_variance,\n         rustfmt,\n         rust_eh_personality,\n-        rust_eh_unwind_resume,\n         rust_oom,\n         rvalue_static_promotion,\n         sanitize,"}, {"sha": "542bcd27507c93c323a790bf9722971dc6b24326", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -692,11 +692,6 @@ pub struct TargetOptions {\n     pub archive_format: String,\n     /// Is asm!() allowed? Defaults to true.\n     pub allow_asm: bool,\n-    /// Whether the target uses a custom unwind resumption routine.\n-    /// By default LLVM lowers `resume` instructions into calls to `_Unwind_Resume`\n-    /// defined in libgcc. If this option is enabled, the target must provide\n-    /// `eh_unwind_resume` lang item.\n-    pub custom_unwind_resume: bool,\n     /// Whether the runtime startup code requires the `main` function be passed\n     /// `argc` and `argv` values.\n     pub main_needs_argc_argv: bool,\n@@ -866,7 +861,6 @@ impl Default for TargetOptions {\n             link_env: Vec::new(),\n             link_env_remove: Vec::new(),\n             archive_format: \"gnu\".to_string(),\n-            custom_unwind_resume: false,\n             main_needs_argc_argv: true,\n             allow_asm: true,\n             has_elf_tls: false,\n@@ -1182,7 +1176,6 @@ impl Target {\n         key!(relro_level, RelroLevel)?;\n         key!(archive_format);\n         key!(allow_asm, bool);\n-        key!(custom_unwind_resume, bool);\n         key!(main_needs_argc_argv, bool);\n         key!(has_elf_tls, bool);\n         key!(obj_is_bitcode, bool);\n@@ -1410,7 +1403,6 @@ impl ToJson for Target {\n         target_option_val!(relro_level);\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);\n-        target_option_val!(custom_unwind_resume);\n         target_option_val!(main_needs_argc_argv);\n         target_option_val!(has_elf_tls);\n         target_option_val!(obj_is_bitcode);"}, {"sha": "3f7eb442bbc73049d6a6bf58c212c9eaaa1b26ce", "filename": "src/librustc_target/spec/windows_uwp_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_uwp_base.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -54,7 +54,6 @@ pub fn opts() -> TargetOptions {\n         pre_link_objects_dll: vec![\"rsbegin.o\".to_string()],\n         late_link_args,\n         post_link_objects: vec![\"rsend.o\".to_string()],\n-        custom_unwind_resume: true,\n         abi_return_struct_as_int: true,\n         emit_debug_gdb_scripts: false,\n         requires_uwtable: true,"}, {"sha": "3e5cdad7ab936b865fc98b782a5b5d6ff9b22e30", "filename": "src/test/compile-fail/auxiliary/panic-runtime-lang-items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fpanic-runtime-lang-items.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -11,5 +11,3 @@ use core::panic::PanicInfo;\n fn panic_impl(info: &PanicInfo) -> ! { loop {} }\n #[lang = \"eh_personality\"]\n fn eh_personality() {}\n-#[lang = \"eh_unwind_resume\"]\n-fn eh_unwind_resume() {}"}, {"sha": "6b86feb5921a1d04a64972ad763f07654d8c53aa", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -17,8 +17,6 @@ const X: () = unimplemented!();\n \n #[lang = \"eh_personality\"]\n fn eh() {}\n-#[lang = \"eh_unwind_resume\"]\n-fn eh_unwind_resume() {}\n \n #[panic_handler]\n fn panic(_info: &PanicInfo) -> ! {"}, {"sha": "83a88ab3bd97c4b0dbf6763e7f9130d38abf2d3e", "filename": "src/test/ui/macros/macro-comma-behavior.core.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.core.stderr?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -1,41 +1,41 @@\n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:21:23\n+  --> $DIR/macro-comma-behavior.rs:20:23\n    |\n LL |     assert_eq!(1, 1, \"{}\",);\n    |                       ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:24:23\n+  --> $DIR/macro-comma-behavior.rs:23:23\n    |\n LL |     assert_ne!(1, 2, \"{}\",);\n    |                       ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:30:29\n+  --> $DIR/macro-comma-behavior.rs:29:29\n    |\n LL |     debug_assert_eq!(1, 1, \"{}\",);\n    |                             ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:33:29\n+  --> $DIR/macro-comma-behavior.rs:32:29\n    |\n LL |     debug_assert_ne!(1, 2, \"{}\",);\n    |                             ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:54:19\n+  --> $DIR/macro-comma-behavior.rs:53:19\n    |\n LL |     format_args!(\"{}\",);\n    |                   ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:72:21\n+  --> $DIR/macro-comma-behavior.rs:71:21\n    |\n LL |     unimplemented!(\"{}\",);\n    |                     ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:81:24\n+  --> $DIR/macro-comma-behavior.rs:80:24\n    |\n LL |             write!(f, \"{}\",)?;\n    |                        ^^"}, {"sha": "04714c65b5cb71daf78e86397487ce16a11767cd", "filename": "src/test/ui/macros/macro-comma-behavior.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -9,7 +9,6 @@\n #[cfg(std)] use std::fmt;\n #[cfg(core)] use core::fmt;\n #[cfg(core)] #[lang = \"eh_personality\"] fn eh_personality() {}\n-#[cfg(core)] #[lang = \"eh_unwind_resume\"] fn eh_unwind_resume() {}\n #[cfg(core)] #[lang = \"panic_impl\"] fn panic_impl(panic: &core::panic::PanicInfo) -> ! { loop {} }\n \n // (see documentation of the similarly-named test in run-pass)"}, {"sha": "26445f2c5c542c318f756ad4cf4e02c92d4cf02e", "filename": "src/test/ui/macros/macro-comma-behavior.std.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-comma-behavior.std.stderr?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -1,59 +1,59 @@\n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:21:23\n+  --> $DIR/macro-comma-behavior.rs:20:23\n    |\n LL |     assert_eq!(1, 1, \"{}\",);\n    |                       ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:24:23\n+  --> $DIR/macro-comma-behavior.rs:23:23\n    |\n LL |     assert_ne!(1, 2, \"{}\",);\n    |                       ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:30:29\n+  --> $DIR/macro-comma-behavior.rs:29:29\n    |\n LL |     debug_assert_eq!(1, 1, \"{}\",);\n    |                             ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:33:29\n+  --> $DIR/macro-comma-behavior.rs:32:29\n    |\n LL |     debug_assert_ne!(1, 2, \"{}\",);\n    |                             ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:38:18\n+  --> $DIR/macro-comma-behavior.rs:37:18\n    |\n LL |         eprint!(\"{}\",);\n    |                  ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:50:18\n+  --> $DIR/macro-comma-behavior.rs:49:18\n    |\n LL |         format!(\"{}\",);\n    |                  ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:54:19\n+  --> $DIR/macro-comma-behavior.rs:53:19\n    |\n LL |     format_args!(\"{}\",);\n    |                   ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:61:17\n+  --> $DIR/macro-comma-behavior.rs:60:17\n    |\n LL |         print!(\"{}\",);\n    |                 ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:72:21\n+  --> $DIR/macro-comma-behavior.rs:71:21\n    |\n LL |     unimplemented!(\"{}\",);\n    |                     ^^\n \n error: 1 positional argument in format string, but no arguments were given\n-  --> $DIR/macro-comma-behavior.rs:81:24\n+  --> $DIR/macro-comma-behavior.rs:80:24\n    |\n LL |             write!(f, \"{}\",)?;\n    |                        ^^"}, {"sha": "58e45ff73a5e645e389443a9f490df2f979f9f80", "filename": "src/test/ui/no_owned_box_lang_item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fno_owned_box_lang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fno_owned_box_lang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno_owned_box_lang_item.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -12,5 +12,4 @@ fn main() {\n }\n \n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"eh_unwind_resume\"] extern fn eh_unwind_resume() {}\n #[lang = \"panic_impl\"] fn panic_impl(panic: &PanicInfo) -> ! { loop {} }"}, {"sha": "3e5cdad7ab936b865fc98b782a5b5d6ff9b22e30", "filename": "src/test/ui/panic-runtime/auxiliary/panic-runtime-lang-items.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fpanic-runtime-lang-items.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -11,5 +11,3 @@ use core::panic::PanicInfo;\n fn panic_impl(info: &PanicInfo) -> ! { loop {} }\n #[lang = \"eh_personality\"]\n fn eh_personality() {}\n-#[lang = \"eh_unwind_resume\"]\n-fn eh_unwind_resume() {}"}, {"sha": "c6a3cc346fc808cd4d2c75e89c27a6586d0f733e", "filename": "src/test/ui/range/issue-54505-no-std.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.rs?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -15,10 +15,6 @@ use core::ops::RangeBounds;\n #[lang = \"eh_personality\"]\n extern fn eh_personality() {}\n \n-#[cfg(target_os = \"windows\")]\n-#[lang = \"eh_unwind_resume\"]\n-extern fn eh_unwind_resume() {}\n-\n \n // take a reference to any built-in range\n fn take_range(_r: &impl RangeBounds<i8>) {}"}, {"sha": "909340611328a47e1364c8560790998dc5d1d762", "filename": "src/test/ui/range/issue-54505-no-std.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange%2Fissue-54505-no-std.stderr?ref=f4f91f0b2f98ddf9ea36c4bc200ebda2cd898230", "patch": "@@ -1,7 +1,7 @@\n error: `#[panic_handler]` function required, but not found\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:28:16\n+  --> $DIR/issue-54505-no-std.rs:24:16\n    |\n LL |     take_range(0..1);\n    |                ^^^^\n@@ -13,7 +13,7 @@ LL |     take_range(0..1);\n                  found struct `core::ops::Range<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:33:16\n+  --> $DIR/issue-54505-no-std.rs:29:16\n    |\n LL |     take_range(1..);\n    |                ^^^\n@@ -25,7 +25,7 @@ LL |     take_range(1..);\n                  found struct `core::ops::RangeFrom<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:38:16\n+  --> $DIR/issue-54505-no-std.rs:34:16\n    |\n LL |     take_range(..);\n    |                ^^\n@@ -37,7 +37,7 @@ LL |     take_range(..);\n                  found struct `core::ops::RangeFull`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:43:16\n+  --> $DIR/issue-54505-no-std.rs:39:16\n    |\n LL |     take_range(0..=1);\n    |                ^^^^^\n@@ -49,7 +49,7 @@ LL |     take_range(0..=1);\n                  found struct `core::ops::RangeInclusive<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:48:16\n+  --> $DIR/issue-54505-no-std.rs:44:16\n    |\n LL |     take_range(..5);\n    |                ^^^\n@@ -61,7 +61,7 @@ LL |     take_range(..5);\n                  found struct `core::ops::RangeTo<{integer}>`\n \n error[E0308]: mismatched types\n-  --> $DIR/issue-54505-no-std.rs:53:16\n+  --> $DIR/issue-54505-no-std.rs:49:16\n    |\n LL |     take_range(..=42);\n    |                ^^^^^"}]}