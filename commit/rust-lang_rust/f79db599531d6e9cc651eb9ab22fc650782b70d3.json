{"sha": "f79db599531d6e9cc651eb9ab22fc650782b70d3", "node_id": "C_kwDOAAsO6NoAKGY3OWRiNTk5NTMxZDZlOWNjNjUxZWI5YWIyMmZjNjUwNzgyYjcwZDM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-15T18:46:56Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-18T21:35:02Z"}, "message": "Adapt cg_clif.", "tree": {"sha": "d5b7727939241dcfcfbe20a5c2bb6d60822fb553", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5b7727939241dcfcfbe20a5c2bb6d60822fb553"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f79db599531d6e9cc651eb9ab22fc650782b70d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f79db599531d6e9cc651eb9ab22fc650782b70d3", "html_url": "https://github.com/rust-lang/rust/commit/f79db599531d6e9cc651eb9ab22fc650782b70d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f79db599531d6e9cc651eb9ab22fc650782b70d3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c107e0e9454555505475758893a88829cdde03f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c107e0e9454555505475758893a88829cdde03f6", "html_url": "https://github.com/rust-lang/rust/commit/c107e0e9454555505475758893a88829cdde03f6"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "7f857528c7c5c4ca8c1018827f0a504d5cb00a20", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f79db599531d6e9cc651eb9ab22fc650782b70d3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f79db599531d6e9cc651eb9ab22fc650782b70d3/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=f79db599531d6e9cc651eb9ab22fc650782b70d3", "patch": "@@ -347,7 +347,12 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n             }\n             TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n                 if !fx.tcx.sess.overflow_checks() {\n-                    if let mir::AssertKind::OverflowNeg(_) = *msg {\n+                    let overflow_not_to_check = match msg {\n+                        AssertKind::OverflowNeg(..) => true,\n+                        AssertKind::Overflow(op, ..) => op.is_checkable(),\n+                        _ => false,\n+                    };\n+                    if overflow_not_to_check {\n                         let target = fx.get_block(*target);\n                         fx.bcx.ins().jump(target, &[]);\n                         continue;\n@@ -567,15 +572,7 @@ fn codegen_stmt<'tcx>(\n                     let lhs = codegen_operand(fx, &lhs_rhs.0);\n                     let rhs = codegen_operand(fx, &lhs_rhs.1);\n \n-                    let res = if !fx.tcx.sess.overflow_checks() {\n-                        let val =\n-                            crate::num::codegen_int_binop(fx, bin_op, lhs, rhs).load_scalar(fx);\n-                        let is_overflow = fx.bcx.ins().iconst(types::I8, 0);\n-                        CValue::by_val_pair(val, is_overflow, lval.layout())\n-                    } else {\n-                        crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs)\n-                    };\n-\n+                    let res = crate::num::codegen_checked_int_binop(fx, bin_op, lhs, rhs);\n                     lval.write_cvalue(fx, res);\n                 }\n                 Rvalue::UnaryOp(un_op, ref operand) => {"}]}