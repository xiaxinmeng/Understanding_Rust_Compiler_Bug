{"sha": "8a39519e1cef6a11a418692a8ca1dc5131a80974", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMzk1MTllMWNlZjZhMTFhNDE4NjkyYThjYTFkYzUxMzFhODA5NzQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T13:43:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T14:10:07Z"}, "message": "Cleanup", "tree": {"sha": "7152df60a836e871c9c4bfee2f7d555d43cf5f55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7152df60a836e871c9c4bfee2f7d555d43cf5f55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a39519e1cef6a11a418692a8ca1dc5131a80974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a39519e1cef6a11a418692a8ca1dc5131a80974", "html_url": "https://github.com/rust-lang/rust/commit/8a39519e1cef6a11a418692a8ca1dc5131a80974", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a39519e1cef6a11a418692a8ca1dc5131a80974/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88267c86c0c49de395973574d2516ab904091cfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/88267c86c0c49de395973574d2516ab904091cfb", "html_url": "https://github.com/rust-lang/rust/commit/88267c86c0c49de395973574d2516ab904091cfb"}], "stats": {"total": 160, "additions": 81, "deletions": 79}, "files": [{"sha": "5fb111a90d9feca25ed64a0aab99c53ed7ed3d6e", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=8a39519e1cef6a11a418692a8ca1dc5131a80974", "patch": "@@ -479,3 +479,77 @@ fn analysis_is_send() {\n     fn is_send<T: Send>() {}\n     is_send::<Analysis>();\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::{display::NavigationTarget, mock_analysis::single_file, Query};\n+    use ra_syntax::{\n+        SmolStr,\n+        SyntaxKind::{FN_DEF, STRUCT_DEF},\n+    };\n+\n+    #[test]\n+    fn test_world_symbols_with_no_container() {\n+        let code = r#\"\n+    enum FooInner { }\n+    \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert!(s.container_name().is_none());\n+    }\n+\n+    #[test]\n+    fn test_world_symbols_include_container_name() {\n+        let code = r#\"\n+fn foo() {\n+    enum FooInner { }\n+}\n+    \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+\n+        let code = r#\"\n+mod foo {\n+    struct FooInner;\n+}\n+    \"#;\n+\n+        let mut symbols = get_symbols_matching(code, \"FooInner\");\n+\n+        let s = symbols.pop().unwrap();\n+\n+        assert_eq!(s.name(), \"FooInner\");\n+        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n+    }\n+\n+    #[test]\n+    fn test_world_symbols_are_case_sensitive() {\n+        let code = r#\"\n+fn foo() {}\n+\n+struct Foo;\n+        \"#;\n+\n+        let symbols = get_symbols_matching(code, \"Foo\");\n+\n+        let fn_match = symbols.iter().find(|s| s.name() == \"foo\").map(|s| s.kind());\n+        let struct_match = symbols.iter().find(|s| s.name() == \"Foo\").map(|s| s.kind());\n+\n+        assert_eq!(fn_match, Some(FN_DEF));\n+        assert_eq!(struct_match, Some(STRUCT_DEF));\n+    }\n+\n+    fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {\n+        let (analysis, _) = single_file(text);\n+        analysis.symbol_search(Query::new(query.into())).unwrap()\n+    }\n+}"}, {"sha": "e922d1e5f9c1d349c581fb98f2a9b9b890f8fd30", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=8a39519e1cef6a11a418692a8ca1dc5131a80974", "patch": "@@ -1,4 +1,6 @@\n-//! FIXME: write short doc here\n+//! This crate defines the core datastructure representing IDE state -- `RootDatabase`.\n+//!\n+//! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n pub mod line_index;\n pub mod line_index_utils;"}, {"sha": "452c87ac513523931a42b0ebb06e25d04f0a0426", "filename": "crates/ra_ide_db/src/line_index.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index.rs?ref=8a39519e1cef6a11a418692a8ca1dc5131a80974", "patch": "@@ -1,4 +1,5 @@\n-//! FIXME: write short doc here\n+//! `LineIndex` maps flat `TextUnit` offsets into `(Line, Column)`\n+//! representation.\n \n use ra_syntax::TextUnit;\n use rustc_hash::FxHashMap;"}, {"sha": "effbef11dc3f4b11524dd1eee89ce0ad7f39f67c", "filename": "crates/ra_ide_db/src/line_index_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fline_index_utils.rs?ref=8a39519e1cef6a11a418692a8ca1dc5131a80974", "patch": "@@ -18,7 +18,7 @@ struct LineIndexStepIter<'a> {\n     utf16_chars: Option<(TextUnit, std::slice::Iter<'a, Utf16Char>)>,\n }\n \n-impl<'a> LineIndexStepIter<'a> {\n+impl LineIndexStepIter<'_> {\n     fn from(line_index: &LineIndex) -> LineIndexStepIter {\n         let mut x = LineIndexStepIter { line_index, next_newline_idx: 0, utf16_chars: None };\n         // skip first newline since it's not real\n@@ -27,7 +27,7 @@ impl<'a> LineIndexStepIter<'a> {\n     }\n }\n \n-impl<'a> Iterator for LineIndexStepIter<'a> {\n+impl Iterator for LineIndexStepIter<'_> {\n     type Item = Step;\n     fn next(&mut self) -> Option<Step> {\n         self.utf16_chars"}, {"sha": "ddad036332f1244b4d75f906da639b9aa065a6c1", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a39519e1cef6a11a418692a8ca1dc5131a80974/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=8a39519e1cef6a11a418692a8ca1dc5131a80974", "patch": "@@ -369,78 +369,3 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n         container_name: None,\n     })\n }\n-\n-// TODO: fix this\n-#[cfg(never)]\n-mod tests {\n-    use crate::{display::NavigationTarget, mock_analysis::single_file, Query};\n-    use ra_syntax::{\n-        SmolStr,\n-        SyntaxKind::{FN_DEF, STRUCT_DEF},\n-    };\n-\n-    #[test]\n-    fn test_world_symbols_with_no_container() {\n-        let code = r#\"\n-    enum FooInner { }\n-    \"#;\n-\n-        let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-        let s = symbols.pop().unwrap();\n-\n-        assert_eq!(s.name(), \"FooInner\");\n-        assert!(s.container_name().is_none());\n-    }\n-\n-    #[test]\n-    fn test_world_symbols_include_container_name() {\n-        let code = r#\"\n-fn foo() {\n-    enum FooInner { }\n-}\n-    \"#;\n-\n-        let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-        let s = symbols.pop().unwrap();\n-\n-        assert_eq!(s.name(), \"FooInner\");\n-        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n-\n-        let code = r#\"\n-mod foo {\n-    struct FooInner;\n-}\n-    \"#;\n-\n-        let mut symbols = get_symbols_matching(code, \"FooInner\");\n-\n-        let s = symbols.pop().unwrap();\n-\n-        assert_eq!(s.name(), \"FooInner\");\n-        assert_eq!(s.container_name(), Some(&SmolStr::new(\"foo\")));\n-    }\n-\n-    #[test]\n-    fn test_world_symbols_are_case_sensitive() {\n-        let code = r#\"\n-fn foo() {}\n-\n-struct Foo;\n-        \"#;\n-\n-        let symbols = get_symbols_matching(code, \"Foo\");\n-\n-        let fn_match = symbols.iter().find(|s| s.name() == \"foo\").map(|s| s.kind());\n-        let struct_match = symbols.iter().find(|s| s.name() == \"Foo\").map(|s| s.kind());\n-\n-        assert_eq!(fn_match, Some(FN_DEF));\n-        assert_eq!(struct_match, Some(STRUCT_DEF));\n-    }\n-\n-    fn get_symbols_matching(text: &str, query: &str) -> Vec<NavigationTarget> {\n-        let (analysis, _) = single_file(text);\n-        analysis.symbol_search(Query::new(query.into())).unwrap()\n-    }\n-}"}]}