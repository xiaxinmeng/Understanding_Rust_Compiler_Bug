{"sha": "4dd17245769082d07c3f98100e5a7cf922813ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZDE3MjQ1NzY5MDgyZDA3YzNmOTgxMDBlNWE3Y2Y5MjI4MTNlYzk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-10-10T21:55:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-21T21:17:09Z"}, "message": "core: Add stability attributes to char::from_digit and from_u32\n\nFor now we are preferring free functions for primitive ctors,\nso they are marked 'unstable' pending final decision. The\nmethods on `Char` are 'deprecated'.", "tree": {"sha": "ae163892e51a6e48777b6b91ebb8e0eb02e26fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae163892e51a6e48777b6b91ebb8e0eb02e26fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd17245769082d07c3f98100e5a7cf922813ec9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd17245769082d07c3f98100e5a7cf922813ec9", "html_url": "https://github.com/rust-lang/rust/commit/4dd17245769082d07c3f98100e5a7cf922813ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd17245769082d07c3f98100e5a7cf922813ec9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6607a20c4abbd03a806c1320d059e0911dd0cdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6607a20c4abbd03a806c1320d059e0911dd0cdb", "html_url": "https://github.com/rust-lang/rust/commit/f6607a20c4abbd03a806c1320d059e0911dd0cdb"}], "stats": {"total": 6, "additions": 6, "deletions": 0}, "files": [{"sha": "90b5506d65d4a481c6bbd2d3e2ab24d1f6e718c1", "filename": "src/libcore/char.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4dd17245769082d07c3f98100e5a7cf922813ec9/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd17245769082d07c3f98100e5a7cf922813ec9/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=4dd17245769082d07c3f98100e5a7cf922813ec9", "patch": "@@ -68,6 +68,7 @@ pub const MAX: char = '\\U0010ffff';\n \n /// Converts from `u32` to a `char`\n #[inline]\n+#[unstable = \"pending decisions about costructors for primitives\"]\n pub fn from_u32(i: u32) -> Option<char> {\n     // catch out-of-bounds and surrogates\n     if (i > MAX as u32) || (i >= 0xD800 && i <= 0xDFFF) {\n@@ -146,6 +147,7 @@ pub fn to_digit(c: char, radix: uint) -> Option<uint> {\n /// Panics if given an `radix` > 36.\n ///\n #[inline]\n+#[unstable = \"pending decisions about costructors for primitives\"]\n pub fn from_digit(num: uint, radix: uint) -> Option<char> {\n     if radix > 36 {\n         panic!(\"from_digit: radix is to high (maximum 36)\");\n@@ -286,9 +288,11 @@ pub trait Char {\n     /// # Panics\n     ///\n     /// Panics if given a radix > 36.\n+    #[deprecated = \"use the char::from_digit free function\"]\n     fn from_digit(num: uint, radix: uint) -> Option<Self>;\n \n     /// Converts from `u32` to a `char`\n+    #[deprecated = \"use the char::from_u32 free function\"]\n     fn from_u32(i: u32) -> Option<char>;\n \n     /// Returns the hexadecimal Unicode escape of a character.\n@@ -351,9 +355,11 @@ impl Char for char {\n \n     fn to_digit(&self, radix: uint) -> Option<uint> { to_digit(*self, radix) }\n \n+    #[deprecated = \"use the char::from_digit free function\"]\n     fn from_digit(num: uint, radix: uint) -> Option<char> { from_digit(num, radix) }\n \n     #[inline]\n+    #[deprecated = \"use the char::from_u32 free function\"]\n     fn from_u32(i: u32) -> Option<char> { from_u32(i) }\n \n     fn escape_unicode(&self, f: |char|) { escape_unicode(*self, f) }"}]}