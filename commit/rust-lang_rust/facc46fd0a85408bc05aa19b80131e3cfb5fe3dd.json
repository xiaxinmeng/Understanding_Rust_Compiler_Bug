{"sha": "facc46fd0a85408bc05aa19b80131e3cfb5fe3dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhY2M0NmZkMGE4NTQwOGJjMDVhYTE5YjgwMTMxZTNjZmI1ZmUzZGQ=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-07-22T20:37:54Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-07-23T16:29:07Z"}, "message": "BTreeMap::drain_filter: replace needless unsafety and test", "tree": {"sha": "59295e01c4cd59d204c821c0373724aa2863bf07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59295e01c4cd59d204c821c0373724aa2863bf07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/facc46fd0a85408bc05aa19b80131e3cfb5fe3dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/facc46fd0a85408bc05aa19b80131e3cfb5fe3dd", "html_url": "https://github.com/rust-lang/rust/commit/facc46fd0a85408bc05aa19b80131e3cfb5fe3dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/facc46fd0a85408bc05aa19b80131e3cfb5fe3dd/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d31ffc1ac9e9ea356e896e63307168a64501b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d31ffc1ac9e9ea356e896e63307168a64501b9d", "html_url": "https://github.com/rust-lang/rust/commit/7d31ffc1ac9e9ea356e896e63307168a64501b9d"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "09b24fde74690ee7ea147f4adaa0a5642b78bf85", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/facc46fd0a85408bc05aa19b80131e3cfb5fe3dd/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/facc46fd0a85408bc05aa19b80131e3cfb5fe3dd/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=facc46fd0a85408bc05aa19b80131e3cfb5fe3dd", "patch": "@@ -1681,19 +1681,12 @@ impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n         edge.reborrow().next_kv().ok().map(|kv| kv.into_kv())\n     }\n \n-    unsafe fn next_kv(\n-        &mut self,\n-    ) -> Option<Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInternal>, marker::KV>> {\n-        let edge = self.cur_leaf_edge.as_ref()?;\n-        unsafe { ptr::read(edge).next_kv().ok() }\n-    }\n-\n     /// Implementation of a typical `DrainFilter::next` method, given the predicate.\n     pub(super) fn next<F>(&mut self, pred: &mut F) -> Option<(K, V)>\n     where\n         F: FnMut(&K, &mut V) -> bool,\n     {\n-        while let Some(mut kv) = unsafe { self.next_kv() } {\n+        while let Ok(mut kv) = self.cur_leaf_edge.take()?.next_kv() {\n             let (k, v) = kv.kv_mut();\n             if pred(k, v) {\n                 *self.length -= 1;"}, {"sha": "295c62625712e805c87a2e7bc8baa429d6bcf956", "filename": "src/liballoc/tests/btree/map.rs", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/facc46fd0a85408bc05aa19b80131e3cfb5fe3dd/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/facc46fd0a85408bc05aa19b80131e3cfb5fe3dd/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbtree%2Fmap.rs?ref=facc46fd0a85408bc05aa19b80131e3cfb5fe3dd", "patch": "@@ -835,18 +835,16 @@ mod test_drain_filter {\n             }\n         }\n \n-        let mut map = BTreeMap::new();\n-        map.insert(0, D);\n-        map.insert(4, D);\n-        map.insert(8, D);\n+        // Keys are multiples of 4, so that each key is counted by a hexadecimal digit.\n+        let mut map = (0..3).map(|i| (i * 4, D)).collect::<BTreeMap<_, _>>();\n \n         catch_unwind(move || {\n             drop(map.drain_filter(|i, _| {\n                 PREDS.fetch_add(1usize << i, Ordering::SeqCst);\n                 true\n             }))\n         })\n-        .ok();\n+        .unwrap_err();\n \n         assert_eq!(PREDS.load(Ordering::SeqCst), 0x011);\n         assert_eq!(DROPS.load(Ordering::SeqCst), 3);\n@@ -864,10 +862,8 @@ mod test_drain_filter {\n             }\n         }\n \n-        let mut map = BTreeMap::new();\n-        map.insert(0, D);\n-        map.insert(4, D);\n-        map.insert(8, D);\n+        // Keys are multiples of 4, so that each key is counted by a hexadecimal digit.\n+        let mut map = (0..3).map(|i| (i * 4, D)).collect::<BTreeMap<_, _>>();\n \n         catch_unwind(AssertUnwindSafe(|| {\n             drop(map.drain_filter(|i, _| {\n@@ -878,7 +874,45 @@ mod test_drain_filter {\n                 }\n             }))\n         }))\n-        .ok();\n+        .unwrap_err();\n+\n+        assert_eq!(PREDS.load(Ordering::SeqCst), 0x011);\n+        assert_eq!(DROPS.load(Ordering::SeqCst), 1);\n+        assert_eq!(map.len(), 2);\n+        assert_eq!(map.first_entry().unwrap().key(), &4);\n+        assert_eq!(map.last_entry().unwrap().key(), &8);\n+    }\n+\n+    // Same as above, but attempt to use the iterator again after the panic in the predicate\n+    #[test]\n+    fn pred_panic_reuse() {\n+        static PREDS: AtomicUsize = AtomicUsize::new(0);\n+        static DROPS: AtomicUsize = AtomicUsize::new(0);\n+\n+        struct D;\n+        impl Drop for D {\n+            fn drop(&mut self) {\n+                DROPS.fetch_add(1, Ordering::SeqCst);\n+            }\n+        }\n+\n+        // Keys are multiples of 4, so that each key is counted by a hexadecimal digit.\n+        let mut map = (0..3).map(|i| (i * 4, D)).collect::<BTreeMap<_, _>>();\n+\n+        {\n+            let mut it = map.drain_filter(|i, _| {\n+                PREDS.fetch_add(1usize << i, Ordering::SeqCst);\n+                match i {\n+                    0 => true,\n+                    _ => panic!(),\n+                }\n+            });\n+            catch_unwind(AssertUnwindSafe(|| while it.next().is_some() {})).unwrap_err();\n+            // Iterator behaviour after a panic is explicitly unspecified,\n+            // so this is just the current implementation:\n+            let result = catch_unwind(AssertUnwindSafe(|| it.next()));\n+            assert!(matches!(result, Ok(None)));\n+        }\n \n         assert_eq!(PREDS.load(Ordering::SeqCst), 0x011);\n         assert_eq!(DROPS.load(Ordering::SeqCst), 1);\n@@ -1319,7 +1353,7 @@ fn test_into_iter_drop_leak_height_0() {\n     map.insert(\"d\", D);\n     map.insert(\"e\", D);\n \n-    catch_unwind(move || drop(map.into_iter())).ok();\n+    catch_unwind(move || drop(map.into_iter())).unwrap_err();\n \n     assert_eq!(DROPS.load(Ordering::SeqCst), 5);\n }\n@@ -1343,7 +1377,7 @@ fn test_into_iter_drop_leak_height_1() {\n         DROPS.store(0, Ordering::SeqCst);\n         PANIC_POINT.store(panic_point, Ordering::SeqCst);\n         let map: BTreeMap<_, _> = (0..size).map(|i| (i, D)).collect();\n-        catch_unwind(move || drop(map.into_iter())).ok();\n+        catch_unwind(move || drop(map.into_iter())).unwrap_err();\n         assert_eq!(DROPS.load(Ordering::SeqCst), size);\n     }\n }"}]}