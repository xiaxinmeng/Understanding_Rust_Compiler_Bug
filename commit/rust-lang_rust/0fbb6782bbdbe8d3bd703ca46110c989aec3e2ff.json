{"sha": "0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYmI2NzgyYmJkYmU4ZDNiZDcwM2NhNDYxMTBjOTg5YWVjM2UyZmY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-01T21:10:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-02T17:39:13Z"}, "message": "Add dedicated pretty-printer tests with new pp-exact directive\n\nAdd a new src/test/pretty directory to hold just source files for testing the\npretty-printer.\n\nAdd a new pp-exact directive. When this directive is followed by a file name\nit specifies a file containing the output that the pretty-printer should\ngenerate. When pp-exact is not followed by a filename it says that the file\nshould pretty-print as written.", "tree": {"sha": "e8658c0147ae9734bf6b963b76eedffc7990d365", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8658c0147ae9734bf6b963b76eedffc7990d365"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "html_url": "https://github.com/rust-lang/rust/commit/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eea888af253083d658319382352181df7f255c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/eea888af253083d658319382352181df7f255c03", "html_url": "https://github.com/rust-lang/rust/commit/eea888af253083d658319382352181df7f255c03"}], "stats": {"total": 98, "additions": 86, "deletions": 12}, "files": [{"sha": "f6d862c125262ce90cee364667f763cacecfe463", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/configure", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "patch": "@@ -182,7 +182,7 @@ for i in \\\n     rustllvm \\\n     dl stage0 stage1 stage2 stage3 \\\n     stage0/lib stage1/lib stage2/lib stage3/lib \\\n-    test/run-pass test/run-fail test/compile-fail test/bench\n+    test/run-pass test/run-fail test/compile-fail test/bench test/pretty\n do\n     make_dir $i\n done"}, {"sha": "f755905c1c2d7173935f81b25a968b0e95a4387f", "filename": "mk/tests.mk", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "patch": "@@ -6,18 +6,20 @@ ALL_TEST_INPUTS = $(wildcard $(S)src/test/*/*.rs   \\\n                               $(S)src/test/*/*/*.rs \\\n                               $(S)src/test/*/*.rc)\n \n-BENCH_RS := $(wildcard $(S)src/test/bench/*.rs)\n RPASS_RC := $(wildcard $(S)src/test/run-pass/*.rc)\n RPASS_RS := $(wildcard $(S)src/test/run-pass/*.rs)\n RFAIL_RC := $(wildcard $(S)src/test/run-fail/*.rc)\n RFAIL_RS := $(wildcard $(S)src/test/run-fail/*.rs)\n CFAIL_RC := $(wildcard $(S)src/test/compile-fail/*.rc)\n CFAIL_RS := $(wildcard $(S)src/test/compile-fail/*.rs)\n+BENCH_RS := $(wildcard $(S)src/test/bench/*.rs)\n+PRETTY_RS := $(wildcard $(S)src/test/pretty/*.rs)\n \n RPASS_TESTS := $(RPASS_RC) $(RPASS_RS)\n RFAIL_TESTS := $(RFAIL_RC) $(RFAIL_RS)\n CFAIL_TESTS := $(CFAIL_RC) $(CFAIL_RS)\n BENCH_TESTS := $(BENCH_RS)\n+PRETTY_TESTS := $(PRETTY_RS)\n \n FT := run_pass_stage2\n FT_LIB := $(call CFG_LIB_NAME,$(FT))\n@@ -157,12 +159,16 @@ check-stage$(2)-rpass: test/run-pass.stage$(2).out \\\n \n check-stage$(2)-bench: test/bench.stage$(2).out \\\n \n-check-stage$(2)-pretty: test/pretty.stage$(2).out \\\n-\n check-stage$(2)-pretty-rpass: test/pretty-rpass.stage$(2).out \\\n \n check-stage$(2)-pretty-rfail: test/pretty-rfail.stage$(2).out \\\n \n+check-stage$(2)-pretty-pretty: test/pretty-pretty.stage$(2).out \\\n+\n+check-stage$(2)-pretty: check-stage$(2)-pretty-rpass \\\n+                        check-stage$(2)-pretty-rfail \\\n+                        check-stage$(2)-pretty-pretty \\\n+\n CTEST_COMMON_ARGS$(2) := --compile-lib-path stage$(2) \\\n                          --run-lib-path stage$(2)/lib \\\n                          --rustc-path stage$(2)/rustc$$(X) \\\n@@ -203,6 +209,11 @@ PRETTY_RFAIL_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n                          --build-base test/run-fail/ \\\n                          --mode pretty \\\n \n+PRETTY_PRETTY_ARGS$(2) := $$(CTEST_COMMON_ARGS$(2)) \\\n+                          --src-base $$(S)src/test/pretty/ \\\n+                          --build-base test/pretty/ \\\n+                          --mode pretty \\\n+\n test/compiletest.stage$(2)$$(X): $$(COMPILETEST_CRATE) \\\n                                  $$(COMPILETEST_INPUTS) \\\n                                  $$(SREQ$(2))\n@@ -245,8 +256,10 @@ test/pretty-rfail.stage$(2).out.tmp: test/compiletest.stage$(2)$$(X) \\\n \t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(PRETTY_RFAIL_ARGS$(2))\n \t$$(Q)touch $$@\n \n-test/pretty.stage$(2).out.tmp: test/pretty-rpass.stage$(2).out.tmp \\\n-                               test/pretty-rfail.stage$(2).out.tmp\n+test/pretty-pretty.stage$(2).out.tmp: test/compiletest.stage$(2)$$(X) \\\n+                                     $$(PRETTY_TESTS)\n+\t@$$(call E, run: $$<)\n+\t$$(Q)$$(call CFG_RUN_CTEST,$(2),$$<) $$(PRETTY_PRETTY_ARGS$(2))\n \t$$(Q)touch $$@\n \n endef"}, {"sha": "41619ad9de5c6153db7b1188b4bd1a5619c866f8", "filename": "src/test/compiletest/header.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fheader.rs?ref=0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "patch": "@@ -1,31 +1,48 @@\n import std::option;\n import std::str;\n import std::io;\n+import std::fs;\n \n import common::config;\n \n export test_props;\n export load_props;\n export is_test_ignored;\n \n-type test_props = {error_patterns: str[], compile_flags: option::t[str]};\n+type test_props = {\n+    // Lines that should be expected, in order, on standard out\n+    error_patterns: str[],\n+    // Extra flags to pass to the compiler\n+    compile_flags: option::t[str],\n+    // If present, the name of a file that this test should match when\n+    // pretty-printed\n+    pp_exact: option::t[str]\n+};\n \n // Load any test directives embedded in the file\n fn load_props(testfile: &str) -> test_props {\n     let error_patterns = ~[];\n     let compile_flags = option::none;\n+    let pp_exact = option::none;\n     for each ln: str  in iter_header(testfile) {\n         alt parse_error_pattern(ln) {\n           option::some(ep) { error_patterns += ~[ep]; }\n           option::none. { }\n         }\n \n-\n         if option::is_none(compile_flags) {\n             compile_flags = parse_compile_flags(ln);\n         }\n+\n+        if option::is_none(pp_exact) {\n+            pp_exact = parse_pp_exact(ln, testfile);\n+        }\n     }\n-    ret {error_patterns: error_patterns, compile_flags: compile_flags};\n+    ret {\n+        error_patterns: error_patterns,\n+        compile_flags: compile_flags,\n+        pp_exact: pp_exact\n+    };\n }\n \n fn is_test_ignored(config: &config, testfile: &str) -> bool {\n@@ -64,6 +81,19 @@ fn parse_compile_flags(line: &str) -> option::t[str] {\n     parse_name_value_directive(line, \"compile-flags\")\n }\n \n+fn parse_pp_exact(line: &str, testfile: &str) -> option::t[str] {\n+    alt parse_name_value_directive(line, \"pp-exact\") {\n+      option::some(s) { option::some(s) }\n+      option::none. {\n+        if parse_name_directive(line, \"pp-exact\") {\n+            option::some(fs::basename(testfile))\n+        } else {\n+            option::none\n+        }\n+      }\n+    }\n+}\n+\n fn parse_name_directive(line: &str, directive: &str) -> bool {\n     str::find(line, directive) >= 0\n }"}, {"sha": "53bedaa2a18af43464e7613c8c723585e0cc0a21", "filename": "src/test/compiletest/runtest.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompiletest%2Fruntest.rs?ref=0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "patch": "@@ -75,7 +75,16 @@ fn run_rpass_test(cx: &cx, props: &test_props, testfile: &str) {\n }\n \n fn run_pretty_test(cx: &cx, props: &test_props, testfile: &str) {\n-    const rounds: int = 2;\n+    if option::is_some(props.pp_exact) {\n+        logv(cx.config, \"testing for exact pretty-printing\");\n+    } else {\n+        logv(cx.config, \"testing for converging pretty-printing\");\n+    }\n+\n+    let rounds = alt props.pp_exact {\n+      option::some(_) { 1 }\n+      option::none. { 2 }\n+    };\n \n     let srcs = ~[str::unsafe_from_bytes(\n         io::file_reader(testfile).read_whole_stream())];\n@@ -94,7 +103,16 @@ fn run_pretty_test(cx: &cx, props: &test_props, testfile: &str) {\n         round += 1;\n     }\n \n-    let expected = srcs.(ivec::len(srcs) - 2u);\n+    let expected = alt props.pp_exact {\n+      option::some(file) {\n+        let filepath = fs::connect(fs::dirname(testfile), file);\n+        str::unsafe_from_bytes(\n+            io::file_reader(filepath).read_whole_stream())\n+      }\n+      option::none. {\n+        srcs.(ivec::len(srcs) - 2u)\n+      }\n+    };\n     let actual = srcs.(ivec::len(srcs) - 1u);\n \n     compare_source(expected, actual);\n@@ -122,7 +140,7 @@ fn run_pretty_test(cx: &cx, props: &test_props, testfile: &str) {\n \n     fn compare_source(expected: &str, actual: &str) {\n         if expected != actual {\n-            error(\"pretty-printed source does not converge\");\n+            error(\"pretty-printed source does match expected source\");\n             let msg = #fmt(\"\\n\\\n expected:\\n\\\n ------------------------------------------\\n\\"}, {"sha": "1e4ac5e74ce3c660aeb92adc528a3c7b620904df", "filename": "src/test/pretty/example1.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fpretty%2Fexample1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fpretty%2Fexample1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexample1.rs?ref=0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "patch": "@@ -0,0 +1,3 @@\n+// pp-exact\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "67ab4bf12a7d5973f35bf3bcc460aa155df9f8b0", "filename": "src/test/pretty/example2.pp", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fpretty%2Fexample2.pp", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fpretty%2Fexample2.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexample2.pp?ref=0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "patch": "@@ -0,0 +1,3 @@\n+// pp-exact:example2.pp\n+\n+fn main() { }\n\\ No newline at end of file"}, {"sha": "3f3e99a49a80b22079f7e1b6846bfc484b327bd1", "filename": "src/test/pretty/example2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fpretty%2Fexample2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff/src%2Ftest%2Fpretty%2Fexample2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fexample2.rs?ref=0fbb6782bbdbe8d3bd703ca46110c989aec3e2ff", "patch": "@@ -0,0 +1,7 @@\n+// pp-exact:example2.pp\n+\n+fn\n+main\n+()\n+{\n+}\n\\ No newline at end of file"}]}