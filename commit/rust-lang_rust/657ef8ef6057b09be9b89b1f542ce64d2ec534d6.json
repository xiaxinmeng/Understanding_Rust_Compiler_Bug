{"sha": "657ef8ef6057b09be9b89b1f542ce64d2ec534d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1N2VmOGVmNjA1N2IwOWJlOWI4OWIxZjU0MmNlNjRkMmVjNTM0ZDY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-02-20T07:42:38Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-02-20T07:42:38Z"}, "message": "Merge pull request #1869 from cpeterso/master\n\nrt: lock_and_signal fixes", "tree": {"sha": "b7b822d319faf05620178fa68c7bcc37bcf2fc8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7b822d319faf05620178fa68c7bcc37bcf2fc8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/657ef8ef6057b09be9b89b1f542ce64d2ec534d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/657ef8ef6057b09be9b89b1f542ce64d2ec534d6", "html_url": "https://github.com/rust-lang/rust/commit/657ef8ef6057b09be9b89b1f542ce64d2ec534d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/657ef8ef6057b09be9b89b1f542ce64d2ec534d6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a3d551b8537a1ba1c54d0cb46bd3dea74b76cf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3d551b8537a1ba1c54d0cb46bd3dea74b76cf7", "html_url": "https://github.com/rust-lang/rust/commit/4a3d551b8537a1ba1c54d0cb46bd3dea74b76cf7"}, {"sha": "fed81c2cfc2c16e4a2c66f25b83e34985af70f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fed81c2cfc2c16e4a2c66f25b83e34985af70f8d", "html_url": "https://github.com/rust-lang/rust/commit/fed81c2cfc2c16e4a2c66f25b83e34985af70f8d"}], "stats": {"total": 19, "additions": 18, "deletions": 1}, "files": [{"sha": "fa19b63385dd26da0dccc8bb12285877f93aa702", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/657ef8ef6057b09be9b89b1f542ce64d2ec534d6/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/657ef8ef6057b09be9b89b1f542ce64d2ec534d6/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=657ef8ef6057b09be9b89b1f542ce64d2ec534d6", "patch": "@@ -19,7 +19,18 @@ lock_and_signal::lock_and_signal()\n     : _holding_thread(INVALID_THREAD)\n {\n     _event = CreateEvent(NULL, FALSE, FALSE, NULL);\n-    InitializeCriticalSection(&_cs);\n+\n+    // If a CRITICAL_SECTION is not initialized with a spin count, it will\n+    // default to 0, even on multi-processor systems. MSDN suggests using\n+    // 4000. On single-processor systems, the spin count parameter is ignored\n+    // and the critical section's spin count defaults to 0.\n+    const DWORD SPIN_COUNT = 4000;\n+    CHECKED(!InitializeCriticalSectionAndSpinCount(&_cs, SPIN_COUNT));\n+\n+    // TODO? Consider checking GetProcAddress(\"InitializeCriticalSectionEx\")\n+    // so Windows >= Vista we can use CRITICAL_SECTION_NO_DEBUG_INFO to avoid\n+    // allocating CRITICAL_SECTION debug info that is never released. See:\n+    // http://stackoverflow.com/questions/804848/critical-sections-leaking-memory-on-vista-win2008#889853\n }\n \n #else\n@@ -32,15 +43,18 @@ lock_and_signal::lock_and_signal()\n #endif\n \n lock_and_signal::~lock_and_signal() {\n+    assert(_holding_thread == INVALID_THREAD);\n #if defined(__WIN32__)\n     CloseHandle(_event);\n+    DeleteCriticalSection(&_cs);\n #else\n     CHECKED(pthread_cond_destroy(&_cond));\n     CHECKED(pthread_mutex_destroy(&_mutex));\n #endif\n }\n \n void lock_and_signal::lock() {\n+    assert(!lock_held_by_current_thread());\n #if defined(__WIN32__)\n     EnterCriticalSection(&_cs);\n     _holding_thread = GetCurrentThreadId();\n@@ -51,6 +65,7 @@ void lock_and_signal::lock() {\n }\n \n void lock_and_signal::unlock() {\n+    assert(lock_held_by_current_thread());\n     _holding_thread = INVALID_THREAD;\n #if defined(__WIN32__)\n     LeaveCriticalSection(&_cs);\n@@ -69,9 +84,11 @@ void lock_and_signal::wait() {\n     LeaveCriticalSection(&_cs);\n     WaitForSingleObject(_event, INFINITE);\n     EnterCriticalSection(&_cs);\n+    assert(_holding_thread == INVALID_THREAD);\n     _holding_thread = GetCurrentThreadId();\n #else\n     CHECKED(pthread_cond_wait(&_cond, &_mutex));\n+    assert(_holding_thread == INVALID_THREAD);\n     _holding_thread = pthread_self();\n #endif\n }"}]}