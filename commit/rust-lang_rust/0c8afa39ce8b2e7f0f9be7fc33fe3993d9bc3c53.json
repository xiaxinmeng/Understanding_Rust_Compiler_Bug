{"sha": "0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOGFmYTM5Y2U4YjJlN2YwZjliZTdmYzMzZmUzOTkzZDliYzNjNTM=", "commit": {"author": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-06-01T21:32:52Z"}, "committer": {"name": "Thiago Arrais", "email": "thiago.arrais@gmail.com", "date": "2020-07-06T16:32:31Z"}, "message": "Lint x.log(b) / y.log(b) => x.log(y)", "tree": {"sha": "5c68695fca4a738e1f76448b02666241845a14ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c68695fca4a738e1f76448b02666241845a14ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "html_url": "https://github.com/rust-lang/rust/commit/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53/comments", "author": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thiagoarrais", "id": 3014, "node_id": "MDQ6VXNlcjMwMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3014?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thiagoarrais", "html_url": "https://github.com/thiagoarrais", "followers_url": "https://api.github.com/users/thiagoarrais/followers", "following_url": "https://api.github.com/users/thiagoarrais/following{/other_user}", "gists_url": "https://api.github.com/users/thiagoarrais/gists{/gist_id}", "starred_url": "https://api.github.com/users/thiagoarrais/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thiagoarrais/subscriptions", "organizations_url": "https://api.github.com/users/thiagoarrais/orgs", "repos_url": "https://api.github.com/users/thiagoarrais/repos", "events_url": "https://api.github.com/users/thiagoarrais/events{/privacy}", "received_events_url": "https://api.github.com/users/thiagoarrais/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed", "html_url": "https://github.com/rust-lang/rust/commit/f62798454c8a7f9f2c3e87e0a913b3bd79b6d2ed"}], "stats": {"total": 125, "additions": 115, "deletions": 10}, "files": [{"sha": "9f241c2c3a2b2b6a7950d4305c5db5a52ed39f73", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "patch": "@@ -293,13 +293,13 @@ fn check_powf(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     }\n }\n \n-fn check_powi(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n+fn check_powi(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     // Check argument\n-    if let Some((value, _)) = constant(cx, cx.tables, &args[1]) {\n+    if let Some((value, _)) = constant(cx, cx.tables(), &args[1]) {\n         // TODO: need more specific check. this is too wide. remember also to include tests\n         if let Some(parent) = get_parent_expr(cx, expr) {\n             if let Some(grandparent) = get_parent_expr(cx, parent) {\n-                if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args) = grandparent.kind {\n+                if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = grandparent.kind {\n                     if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n                         return;\n                     }\n@@ -328,7 +328,7 @@ fn check_powi(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     }\n }\n \n-fn detect_hypot(cx: &LateContext<'_, '_>, args: &[Expr<'_>]) -> Option<String> {\n+fn detect_hypot(cx: &LateContext<'_>, args: &[Expr<'_>]) -> Option<String> {\n     if let ExprKind::Binary(\n         Spanned {\n             node: BinOpKind::Add, ..\n@@ -350,11 +350,11 @@ fn detect_hypot(cx: &LateContext<'_, '_>, args: &[Expr<'_>]) -> Option<String> {\n \n         // check if expression of the form x.powi(2) + y.powi(2)\n         if_chain! {\n-            if let ExprKind::MethodCall(PathSegment { ident: lmethod_name, .. }, ref _lspan, ref largs) = add_lhs.kind;\n-            if let ExprKind::MethodCall(PathSegment { ident: rmethod_name, .. }, ref _rspan, ref rargs) = add_rhs.kind;\n+            if let ExprKind::MethodCall(PathSegment { ident: lmethod_name, .. }, ref _lspan, ref largs, _) = add_lhs.kind;\n+            if let ExprKind::MethodCall(PathSegment { ident: rmethod_name, .. }, ref _rspan, ref rargs, _) = add_rhs.kind;\n             if lmethod_name.as_str() == \"powi\" && rmethod_name.as_str() == \"powi\";\n-            if let Some((lvalue, _)) = constant(cx, cx.tables, &largs[1]);\n-            if let Some((rvalue, _)) = constant(cx, cx.tables, &rargs[1]);\n+            if let Some((lvalue, _)) = constant(cx, cx.tables(), &largs[1]);\n+            if let Some((rvalue, _)) = constant(cx, cx.tables(), &rargs[1]);\n             if Int(2) == lvalue && Int(2) == rvalue;\n             then {\n                 return Some(format!(\"{}.hypot({})\", Sugg::hir(cx, &largs[0], \"..\"), Sugg::hir(cx, &rargs[0], \"..\")));\n@@ -365,7 +365,7 @@ fn detect_hypot(cx: &LateContext<'_, '_>, args: &[Expr<'_>]) -> Option<String> {\n     None\n }\n \n-fn check_hypot(cx: &LateContext<'_, '_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n+fn check_hypot(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n     if let Some(message) = detect_hypot(cx, args) {\n         span_lint_and_sugg(\n             cx,\n@@ -431,7 +431,7 @@ fn check_mul_add(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     ) = &expr.kind\n     {\n         if let Some(parent) = get_parent_expr(cx, expr) {\n-            if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args) = parent.kind {\n+            if let ExprKind::MethodCall(PathSegment { ident: method_name, .. }, _, args, _) = parent.kind {\n                 if method_name.as_str() == \"sqrt\" && detect_hypot(cx, args).is_some() {\n                     return;\n                 }\n@@ -573,6 +573,50 @@ fn check_custom_abs(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     }\n }\n \n+fn are_same_base_logs(cx: &LateContext<'_>, expr_a: &Expr<'_>, expr_b: &Expr<'_>) -> bool {\n+    if_chain! {\n+        if let ExprKind::MethodCall(PathSegment { ident: method_name_a, .. }, _, ref args_a, _) = expr_a.kind;\n+        if let ExprKind::MethodCall(PathSegment { ident: method_name_b, .. }, _, ref args_b, _) = expr_b.kind;\n+        then {\n+            return method_name_a.as_str() == method_name_b.as_str() &&\n+                args_a.len() == args_b.len() &&\n+                (\n+                    [\"ln\", \"log2\", \"log10\"].contains(&&*method_name_a.as_str()) ||\n+                    method_name_a.as_str() == \"log\" && args_a.len() == 2 && are_exprs_equal(cx, &args_a[1], &args_b[1])\n+                );\n+        }\n+    }\n+\n+    false\n+}\n+\n+fn check_log_division(cx: &LateContext<'_>, expr: &Expr<'_>) {\n+    // check if expression of the form x.logN() / y.logN()\n+    if_chain! {\n+        if let ExprKind::Binary(\n+            Spanned {\n+                node: BinOpKind::Div, ..\n+            },\n+            lhs,\n+            rhs,\n+        ) = &expr.kind;\n+        if are_same_base_logs(cx, lhs, rhs);\n+        if let ExprKind::MethodCall(_, _, ref largs, _) = lhs.kind;\n+        if let ExprKind::MethodCall(_, _, ref rargs, _) = rhs.kind;\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                SUBOPTIMAL_FLOPS,\n+                expr.span,\n+                \"division of logarithms can be calculated more efficiently and accurately\",\n+                \"consider using\",\n+                format!(\"{}.log({})\", Sugg::hir(cx, &largs[0], \"..\"), Sugg::hir(cx, &rargs[0], \"..\"),),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::MethodCall(ref path, _, args, _) = &expr.kind {\n@@ -592,6 +636,7 @@ impl<'tcx> LateLintPass<'tcx> for FloatingPointArithmetic {\n             check_expm1(cx, expr);\n             check_mul_add(cx, expr);\n             check_custom_abs(cx, expr);\n+            check_log_division(cx, expr);\n         }\n     }\n }"}, {"sha": "13962a272d4552b6ccce46a9ff908890e0add9cf", "filename": "tests/ui/floating_point_logbase.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53/tests%2Fui%2Ffloating_point_logbase.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53/tests%2Fui%2Ffloating_point_logbase.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.fixed?ref=0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 5f32;\n+    let _ = x.log(y);\n+    let _ = x.log(y);\n+    let _ = x.log(y);\n+    let _ = x.log(y);\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.ln() / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.ln();\n+    let _ = x.log(5f32) / y.log(7f32);\n+}"}, {"sha": "26bc20d5370b1f0a6f678d1b7d54b6fe447487d8", "filename": "tests/ui/floating_point_logbase.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53/tests%2Fui%2Ffloating_point_logbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53/tests%2Fui%2Ffloating_point_logbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.rs?ref=0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+#![warn(clippy::suboptimal_flops)]\n+\n+fn main() {\n+    let x = 3f32;\n+    let y = 5f32;\n+    let _ = x.ln() / y.ln();\n+    let _ = x.log2() / y.log2();\n+    let _ = x.log10() / y.log10();\n+    let _ = x.log(5f32) / y.log(5f32);\n+    // Cases where the lint shouldn't be applied\n+    let _ = x.ln() / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.powf(3.2);\n+    let _ = x.powf(3.2) / y.ln();\n+    let _ = x.log(5f32) / y.log(7f32);\n+}"}, {"sha": "fa956b9139eb8f2b0e191a2da2137922bd7977e0", "filename": "tests/ui/floating_point_logbase.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53/tests%2Fui%2Ffloating_point_logbase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53/tests%2Fui%2Ffloating_point_logbase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_logbase.stderr?ref=0c8afa39ce8b2e7f0f9be7fc33fe3993d9bc3c53", "patch": "@@ -0,0 +1,28 @@\n+error: division of logarithms can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_logbase.rs:7:13\n+   |\n+LL |     let _ = x.ln() / y.ln();\n+   |             ^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+   |\n+   = note: `-D clippy::suboptimal-flops` implied by `-D warnings`\n+\n+error: division of logarithms can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_logbase.rs:8:13\n+   |\n+LL |     let _ = x.log2() / y.log2();\n+   |             ^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: division of logarithms can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_logbase.rs:9:13\n+   |\n+LL |     let _ = x.log10() / y.log10();\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: division of logarithms can be calculated more efficiently and accurately\n+  --> $DIR/floating_point_logbase.rs:10:13\n+   |\n+LL |     let _ = x.log(5f32) / y.log(5f32);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.log(y)`\n+\n+error: aborting due to 4 previous errors\n+"}]}