{"sha": "d8205cd3fe3cda6ebbcff40c8d173f8e05a375be", "node_id": "C_kwDOAAsO6NoAKGQ4MjA1Y2QzZmUzY2RhNmViYmNmZjQwYzhkMTczZjhlMDVhMzc1YmU", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-14T19:56:27Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-04-14T20:01:40Z"}, "message": "handle arrays and slices uniformly in valtree creation", "tree": {"sha": "35dbacaff5a28619d759b8186c14786068f1e91d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35dbacaff5a28619d759b8186c14786068f1e91d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8205cd3fe3cda6ebbcff40c8d173f8e05a375be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8205cd3fe3cda6ebbcff40c8d173f8e05a375be", "html_url": "https://github.com/rust-lang/rust/commit/d8205cd3fe3cda6ebbcff40c8d173f8e05a375be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8205cd3fe3cda6ebbcff40c8d173f8e05a375be/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b126b805bd51d2b7aa335cadd571a319ec0e224", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b126b805bd51d2b7aa335cadd571a319ec0e224", "html_url": "https://github.com/rust-lang/rust/commit/4b126b805bd51d2b7aa335cadd571a319ec0e224"}], "stats": {"total": 44, "additions": 13, "deletions": 31}, "files": [{"sha": "80270f825630f079c58ec55ea4b8560b1de8ccd7", "filename": "compiler/rustc_const_eval/src/const_eval/mod.rs", "status": "modified", "additions": 13, "deletions": 31, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d8205cd3fe3cda6ebbcff40c8d173f8e05a375be/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8205cd3fe3cda6ebbcff40c8d173f8e05a375be/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmod.rs?ref=d8205cd3fe3cda6ebbcff40c8d173f8e05a375be", "patch": "@@ -3,6 +3,7 @@\n use std::convert::TryFrom;\n \n use rustc_hir::Mutability;\n+use rustc_middle::ty::layout::HasTyCtxt;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_middle::{\n     mir::{self, interpret::ConstAlloc},\n@@ -74,7 +75,7 @@ fn branches<'tcx>(\n         let field = ecx.mplace_field(&place, i).unwrap();\n         const_to_valtree_inner(ecx, &field)\n     });\n-    // For enums, we preped their variant index before the variant's fields so we can figure out\n+    // For enums, we prepend their variant index before the variant's fields so we can figure out\n     // the variant again when just seeing a valtree.\n     let branches = variant.into_iter().chain(fields);\n     Some(ty::ValTree::Branch(ecx.tcx.arena.alloc_from_iter(branches.collect::<Option<Vec<_>>>()?)))\n@@ -83,17 +84,13 @@ fn branches<'tcx>(\n fn slice_branches<'tcx>(\n     ecx: &CompileTimeEvalContext<'tcx, 'tcx>,\n     place: &MPlaceTy<'tcx>,\n-    n: u64,\n ) -> Option<ty::ValTree<'tcx>> {\n-    let elems = (0..n).map(|i| {\n+    let n = place.len(&ecx.tcx()).expect(&format!(\"expected to use len of place {:?}\", place));\n+    let branches = (0..n).map(|i| {\n         let place_elem = ecx.mplace_index(place, i).unwrap();\n         const_to_valtree_inner(ecx, &place_elem)\n     });\n \n-    // Need `len` for the ValTree -> ConstValue conversion\n-    let len = Some(Some(ty::ValTree::Leaf(ScalarInt::from(n))));\n-    let branches = len.into_iter().chain(elems);\n-\n     Some(ty::ValTree::Branch(ecx.tcx.arena.alloc_from_iter(branches.collect::<Option<Vec<_>>>()?)))\n }\n \n@@ -116,41 +113,26 @@ fn const_to_valtree_inner<'tcx>(\n         // agree with runtime equality tests.\n         ty::FnPtr(_) | ty::RawPtr(_) => None,\n \n-        ty::Ref(_, inner_ty, _)  => {\n-            match inner_ty.kind() {\n-                ty::Slice(_) | ty::Str => {\n-                    let derefd = ecx.deref_operand(&place.into()).unwrap();\n-                    debug!(?derefd);\n-                    let len = derefd.len(&ecx.tcx.tcx).unwrap();\n-                    let valtree = slice_branches(ecx, &derefd, len);\n-                    debug!(?valtree);\n-\n-                    valtree\n-                }\n-                _ => {\n-                    let derefd_place = ecx.deref_operand(&place.into()).unwrap_or_else(|e| bug!(\"couldn't deref {:?}, error: {:?}\", place, e));\n-                    debug!(?derefd_place);\n+        ty::Ref(_, _, _)  => {\n+            let derefd_place = ecx.deref_operand(&place.into()).unwrap_or_else(|e| bug!(\"couldn't deref {:?}, error: {:?}\", place, e));\n+            debug!(?derefd_place);\n \n-                    const_to_valtree_inner(ecx, &derefd_place)\n-                }\n-            }\n+            const_to_valtree_inner(ecx, &derefd_place)\n         }\n \n-        ty::Str => {\n-            bug!(\"ty::Str should have been handled in ty::Ref branch that uses raw bytes\");\n-        }\n-        ty::Slice(_) => {\n-            bug!(\"should have been handled in the Ref arm\");\n-        }\n+        ty::Str | ty::Slice(_) | ty::Array(_, _) => {\n+            let valtree = slice_branches(ecx, place);\n+            debug!(?valtree);\n \n+            valtree\n+        }\n         // Trait objects are not allowed in type level constants, as we have no concept for\n         // resolving their backing type, even if we can do that at const eval time. We may\n         // hypothetically be able to allow `dyn StructuralEq` trait objects in the future,\n         // but it is unclear if this is useful.\n         ty::Dynamic(..) => None,\n \n         ty::Tuple(substs) => branches(ecx, place, substs.len(), None),\n-        ty::Array(_, len) => branches(ecx, place, usize::try_from(len.eval_usize(ecx.tcx.tcx, ecx.param_env)).unwrap(), None),\n \n         ty::Adt(def, _) => {\n             if def.variants().is_empty() {"}]}