{"sha": "da4e33a9e659071ae5e7418242dea38d951a260d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNGUzM2E5ZTY1OTA3MWFlNWU3NDE4MjQyZGVhMzhkOTUxYTI2MGQ=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-13T18:28:25Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-03-13T18:28:25Z"}, "message": "move frozen to rustc_data_structures", "tree": {"sha": "a5efcc8f0b99c4b74fef72bff0f809396d6c300f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5efcc8f0b99c4b74fef72bff0f809396d6c300f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da4e33a9e659071ae5e7418242dea38d951a260d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da4e33a9e659071ae5e7418242dea38d951a260d", "html_url": "https://github.com/rust-lang/rust/commit/da4e33a9e659071ae5e7418242dea38d951a260d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da4e33a9e659071ae5e7418242dea38d951a260d/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "508d4a24d1f4ba79bfa01fd6af919609ebeaccbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe", "html_url": "https://github.com/rust-lang/rust/commit/508d4a24d1f4ba79bfa01fd6af919609ebeaccbe"}], "stats": {"total": 92, "additions": 66, "deletions": 26}, "files": [{"sha": "835fa7d839c1db8c749c7c18e59cbfdb87b51505", "filename": "src/librustc_data_structures/frozen.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_data_structures%2Ffrozen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_data_structures%2Ffrozen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Ffrozen.rs?ref=da4e33a9e659071ae5e7418242dea38d951a260d", "patch": "@@ -0,0 +1,57 @@\n+//! An immutable, owned value.\n+//!\n+//! The purpose of `Frozen` is to make a value immutable for the sake of defensive programming. For example,\n+//! suppose we have the following:\n+//!\n+//! ```rust\n+//! struct Bar { /* some data */ }\n+//!\n+//! struct Foo {\n+//!     /// Some computed data that should never change after construction.\n+//!     pub computed: Bar,\n+//!\n+//!     /* some other fields */\n+//! }\n+//!\n+//! impl Bar {\n+//!     /// Mutate the `Bar`.\n+//!     pub fn mutate(&mut self) { }\n+//! }\n+//! ```\n+//!\n+//! Now suppose we want to pass around a mutable `Foo` instance but, we want to make sure that\n+//! `computed` does not change accidentally (e.g. somebody might accidentally call\n+//! `foo.computed.mutate()`). This is what `Frozen` is for. We can do the following:\n+//!\n+//! ```rust\n+//! use rustc_data_structures::frozen::Frozen;\n+//!\n+//! struct Foo {\n+//!     /// Some computed data that should never change after construction.\n+//!     pub computed: Frozen<Bar>,\n+//!\n+//!     /* some other fields */\n+//! }\n+//! ```\n+//!\n+//! `Frozen` impls `Deref`, so we can ergonomically call methods on `Bar`, but it doesn't `impl\n+//! DerefMut`.  Now calling `foo.compute.mutate()` will result in a compile-time error stating that\n+//! `mutate` requires a mutable reference but we don't have one.\n+\n+/// An owned immutable value.\n+#[derive(Debug)]\n+pub struct Frozen<T>(T);\n+\n+impl<T> Frozen<T> {\n+    pub fn freeze(val: T) -> Self {\n+        Frozen(val)\n+    }\n+}\n+\n+impl<T> std::ops::Deref for Frozen<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &self.0\n+    }\n+}"}, {"sha": "f9f8ff5303e10d61dbc776a1e73f9e8a68f16893", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=da4e33a9e659071ae5e7418242dea38d951a260d", "patch": "@@ -94,6 +94,7 @@ pub mod profiling;\n pub mod vec_linked_list;\n pub mod work_queue;\n pub use atomic_ref::AtomicRef;\n+pub mod frozen;\n \n pub struct OnDrop<F: Fn()>(pub F);\n "}, {"sha": "a61d00b0120cb340e33f7697e0f543e88c46f3fd", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=da4e33a9e659071ae5e7418242dea38d951a260d", "patch": "@@ -73,24 +73,6 @@ crate use place_ext::PlaceExt;\n crate use places_conflict::{places_conflict, PlaceConflictBias};\n crate use region_infer::RegionInferenceContext;\n \n-/// An owned immutable value.\n-#[derive(Debug)]\n-struct Frozen<T>(T);\n-\n-impl<T> Frozen<T> {\n-    pub fn freeze(val: T) -> Self {\n-        Frozen(val)\n-    }\n-}\n-\n-impl<T> std::ops::Deref for Frozen<T> {\n-    type Target = T;\n-\n-    fn deref(&self) -> &T {\n-        &self.0\n-    }\n-}\n-\n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n crate struct Upvar {\n@@ -1595,11 +1577,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 mpi,\n             );\n         } // Only query longest prefix with a MovePath, not further\n-          // ancestors; dataflow recurs on children when parents\n-          // move (to support partial (re)inits).\n-          //\n-          // (I.e., querying parents breaks scenario 7; but may want\n-          // to do such a query based on partial-init feature-gate.)\n+        // ancestors; dataflow recurs on children when parents\n+        // move (to support partial (re)inits).\n+        //\n+        // (I.e., querying parents breaks scenario 7; but may want\n+        // to do such a query based on partial-init feature-gate.)\n     }\n \n     /// Subslices correspond to multiple move paths, so we iterate through the"}, {"sha": "fe96b3e34a2a875913ba40c3fdf1c51adeccd575", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=da4e33a9e659071ae5e7418242dea38d951a260d", "patch": "@@ -7,6 +7,7 @@ use rustc::mir::{\n };\n use rustc::ty::{self, subst::SubstsRef, RegionVid, Ty, TyCtxt, TypeFoldable};\n use rustc_data_structures::binary_search_util;\n+use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::scc::Sccs;\n use rustc_hir::def_id::DefId;\n@@ -31,7 +32,6 @@ use crate::borrow_check::{\n     },\n     type_check::{free_region_relations::UniversalRegionRelations, Locations},\n     universal_regions::UniversalRegions,\n-    Frozen,\n };\n \n mod dump_mir;"}, {"sha": "ca61df018bc26105c4737d6d74cc1cb6838b5c32", "filename": "src/librustc_mir/borrow_check/type_check/free_region_relations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Ffree_region_relations.rs?ref=da4e33a9e659071ae5e7418242dea38d951a260d", "patch": "@@ -1,6 +1,7 @@\n use rustc::mir::ConstraintCategory;\n use rustc::ty::free_region_map::FreeRegionRelations;\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n+use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::region_constraints::GenericKind;\n@@ -15,7 +16,6 @@ use crate::borrow_check::{\n     type_check::constraint_conversion,\n     type_check::{Locations, MirTypeckRegionConstraints},\n     universal_regions::UniversalRegions,\n-    Frozen,\n };\n \n #[derive(Debug)]"}, {"sha": "37d179d3d160c3dd877a862424e8906ea8718f49", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da4e33a9e659071ae5e7418242dea38d951a260d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=da4e33a9e659071ae5e7418242dea38d951a260d", "patch": "@@ -18,6 +18,7 @@ use rustc::ty::{\n     self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, RegionVid, ToPolyTraitRef, Ty,\n     TyCtxt, UserType, UserTypeAnnotationIndex,\n };\n+use rustc_data_structures::frozen::Frozen;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n@@ -55,7 +56,6 @@ use crate::borrow_check::{\n     renumber,\n     type_check::free_region_relations::{CreateResult, UniversalRegionRelations},\n     universal_regions::{DefiningTy, UniversalRegions},\n-    Frozen,\n };\n \n macro_rules! span_mirbug {"}]}