{"sha": "ee94ff254aceccd27919f26c02541277a3ca7dd7", "node_id": "C_kwDOAAsO6NoAKGVlOTRmZjI1NGFjZWNjZDI3OTE5ZjI2YzAyNTQxMjc3YTNjYTdkZDc", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T18:51:17Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2022-04-30T18:51:17Z"}, "message": "Let LtoModuleCodegen::optimize take self by value", "tree": {"sha": "7334f45808f369a770827d9e8049da0ae05a983a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7334f45808f369a770827d9e8049da0ae05a983a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee94ff254aceccd27919f26c02541277a3ca7dd7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee94ff254aceccd27919f26c02541277a3ca7dd7", "html_url": "https://github.com/rust-lang/rust/commit/ee94ff254aceccd27919f26c02541277a3ca7dd7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee94ff254aceccd27919f26c02541277a3ca7dd7/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "336bb0afea102a0e4ec7f56c364c7cd0d2acb902", "url": "https://api.github.com/repos/rust-lang/rust/commits/336bb0afea102a0e4ec7f56c364c7cd0d2acb902", "html_url": "https://github.com/rust-lang/rust/commit/336bb0afea102a0e4ec7f56c364c7cd0d2acb902"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "72da59a1bf808871bfa193f77348ccb1ace71ce4", "filename": "compiler/rustc_codegen_gcc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Flib.rs?ref=ee94ff254aceccd27919f26c02541277a3ca7dd7", "patch": "@@ -213,7 +213,7 @@ impl WriteBackendMethods for GccCodegenBackend {\n                     unimplemented!();\n                 }\n             };\n-        Ok(LtoModuleCodegen::Fat { module: Some(module), _serialized_bitcode: vec![] })\n+        Ok(LtoModuleCodegen::Fat { module, _serialized_bitcode: vec![] })\n     }\n \n     fn run_thin_lto(_cgcx: &CodegenContext<Self>, _modules: Vec<(String, Self::ThinBuffer)>, _cached_modules: Vec<(SerializedModule<Self::ModuleBuffer>, WorkProduct)>) -> Result<(Vec<LtoModuleCodegen<Self>>, Vec<WorkProduct>), FatalError> {\n@@ -234,7 +234,7 @@ impl WriteBackendMethods for GccCodegenBackend {\n         Ok(())\n     }\n \n-    unsafe fn optimize_thin(_cgcx: &CodegenContext<Self>, _thin: &mut ThinModule<Self>) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n+    unsafe fn optimize_thin(_cgcx: &CodegenContext<Self>, _thin: ThinModule<Self>) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n         unimplemented!();\n     }\n "}, {"sha": "570410caaabed76291a0502ff4e5d82cd6743d1e", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=ee94ff254aceccd27919f26c02541277a3ca7dd7", "patch": "@@ -353,7 +353,7 @@ fn fat_lto(\n         }\n     }\n \n-    Ok(LtoModuleCodegen::Fat { module: Some(module), _serialized_bitcode: serialized_bitcode })\n+    Ok(LtoModuleCodegen::Fat { module, _serialized_bitcode: serialized_bitcode })\n }\n \n crate struct Linker<'a>(&'a mut llvm::Linker<'a>);\n@@ -726,7 +726,7 @@ impl Drop for ThinBuffer {\n }\n \n pub unsafe fn optimize_thin_module(\n-    thin_module: &mut ThinModule<LlvmCodegenBackend>,\n+    thin_module: ThinModule<LlvmCodegenBackend>,\n     cgcx: &CodegenContext<LlvmCodegenBackend>,\n ) -> Result<ModuleCodegen<ModuleLlvm>, FatalError> {\n     let diag_handler = cgcx.create_diag_handler();"}, {"sha": "c3db6352a531caac6609910bb2ced69814eb0995", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=ee94ff254aceccd27919f26c02541277a3ca7dd7", "patch": "@@ -220,7 +220,7 @@ impl WriteBackendMethods for LlvmCodegenBackend {\n     }\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,\n-        thin: &mut ThinModule<Self>,\n+        thin: ThinModule<Self>,\n     ) -> Result<ModuleCodegen<Self::Module>, FatalError> {\n         back::lto::optimize_thin_module(thin, cgcx)\n     }"}, {"sha": "6dc8cb5038e12aa48335454ab292596f828362a3", "filename": "compiler/rustc_codegen_ssa/src/back/lto.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flto.rs?ref=ee94ff254aceccd27919f26c02541277a3ca7dd7", "patch": "@@ -42,7 +42,7 @@ pub struct ThinShared<B: WriteBackendMethods> {\n \n pub enum LtoModuleCodegen<B: WriteBackendMethods> {\n     Fat {\n-        module: Option<ModuleCodegen<B::Module>>,\n+        module: ModuleCodegen<B::Module>,\n         _serialized_bitcode: Vec<SerializedModule<B::ModuleBuffer>>,\n     },\n \n@@ -64,19 +64,18 @@ impl<B: WriteBackendMethods> LtoModuleCodegen<B> {\n     /// It's intended that the module returned is immediately code generated and\n     /// dropped, and then this LTO module is dropped.\n     pub unsafe fn optimize(\n-        &mut self,\n+        self,\n         cgcx: &CodegenContext<B>,\n     ) -> Result<ModuleCodegen<B::Module>, FatalError> {\n-        match *self {\n-            LtoModuleCodegen::Fat { ref mut module, .. } => {\n-                let module = module.take().unwrap();\n+        match self {\n+            LtoModuleCodegen::Fat { module, .. } => {\n                 {\n                     let config = cgcx.config(module.kind);\n-                    B::run_lto_pass_manager(cgcx, &module, config, false)?;\n+                    B::optimize_fat(cgcx, &module, config)?;\n                 }\n                 Ok(module)\n             }\n-            LtoModuleCodegen::Thin(ref mut thin) => B::optimize_thin(cgcx, thin),\n+            LtoModuleCodegen::Thin(thin) => B::optimize_thin(cgcx, thin),\n         }\n     }\n "}, {"sha": "88293dec01cac7051acb1990000a578b13ba45a6", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=ee94ff254aceccd27919f26c02541277a3ca7dd7", "patch": "@@ -889,7 +889,7 @@ fn execute_copy_from_cache_work_item<B: ExtraBackendMethods>(\n \n fn execute_lto_work_item<B: ExtraBackendMethods>(\n     cgcx: &CodegenContext<B>,\n-    mut module: lto::LtoModuleCodegen<B>,\n+    module: lto::LtoModuleCodegen<B>,\n     module_config: &ModuleConfig,\n ) -> Result<WorkItemResult<B>, FatalError> {\n     let module = unsafe { module.optimize(cgcx)? };"}, {"sha": "ed0f659180926780ef168d09d559d63212052ecf", "filename": "compiler/rustc_codegen_ssa/src/traits/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee94ff254aceccd27919f26c02541277a3ca7dd7/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fwrite.rs?ref=ee94ff254aceccd27919f26c02541277a3ca7dd7", "patch": "@@ -48,7 +48,7 @@ pub trait WriteBackendMethods: 'static + Sized + Clone {\n     ) -> Result<(), FatalError>;\n     unsafe fn optimize_thin(\n         cgcx: &CodegenContext<Self>,\n-        thin: &mut ThinModule<Self>,\n+        thin: ThinModule<Self>,\n     ) -> Result<ModuleCodegen<Self::Module>, FatalError>;\n     unsafe fn codegen(\n         cgcx: &CodegenContext<Self>,"}]}