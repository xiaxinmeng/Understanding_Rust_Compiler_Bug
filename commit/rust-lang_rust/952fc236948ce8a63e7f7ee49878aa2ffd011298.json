{"sha": "952fc236948ce8a63e7f7ee49878aa2ffd011298", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MmZjMjM2OTQ4Y2U4YTYzZTdmN2VlNDk4NzhhYTJmZmQwMTEyOTg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-19T17:43:26Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-04-19T17:43:26Z"}, "message": "Replace SyntaxRewriter with ted in exppand_macro::expand_macro_recur", "tree": {"sha": "b115544c4527be8b3b1bb73eb56db263fea84055", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b115544c4527be8b3b1bb73eb56db263fea84055"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/952fc236948ce8a63e7f7ee49878aa2ffd011298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/952fc236948ce8a63e7f7ee49878aa2ffd011298", "html_url": "https://github.com/rust-lang/rust/commit/952fc236948ce8a63e7f7ee49878aa2ffd011298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/952fc236948ce8a63e7f7ee49878aa2ffd011298/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "617cd7231c1aee5d7ca04892c6983c009b5ee60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/617cd7231c1aee5d7ca04892c6983c009b5ee60c", "html_url": "https://github.com/rust-lang/rust/commit/617cd7231c1aee5d7ca04892c6983c009b5ee60c"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "eebae5ebea50bd15e73c1e7f67c6155fec89d1d7", "filename": "crates/ide/src/expand_macro.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/952fc236948ce8a63e7f7ee49878aa2ffd011298/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/952fc236948ce8a63e7f7ee49878aa2ffd011298/crates%2Fide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fexpand_macro.rs?ref=952fc236948ce8a63e7f7ee49878aa2ffd011298", "patch": "@@ -3,9 +3,7 @@ use std::iter;\n use hir::Semantics;\n use ide_db::RootDatabase;\n use syntax::{\n-    algo::{find_node_at_offset, SyntaxRewriter},\n-    ast, AstNode, NodeOrToken, SyntaxKind,\n-    SyntaxKind::*,\n+    algo::find_node_at_offset, ast, ted, AstNode, NodeOrToken, SyntaxKind, SyntaxKind::*,\n     SyntaxNode, WalkEvent, T,\n };\n \n@@ -46,26 +44,23 @@ fn expand_macro_recur(\n     sema: &Semantics<RootDatabase>,\n     macro_call: &ast::MacroCall,\n ) -> Option<SyntaxNode> {\n-    let mut expanded = sema.expand(macro_call)?;\n+    let expanded = sema.expand(macro_call)?.clone_for_update();\n \n     let children = expanded.descendants().filter_map(ast::MacroCall::cast);\n-    let mut rewriter = SyntaxRewriter::default();\n+    let mut replacements = Vec::new();\n \n-    for child in children.into_iter() {\n+    for child in children {\n         if let Some(new_node) = expand_macro_recur(sema, &child) {\n-            // Replace the whole node if it is root\n-            // `replace_descendants` will not replace the parent node\n-            // but `SyntaxNode::descendants include itself\n+            // check if the whole original syntax is replaced\n             if expanded == *child.syntax() {\n-                expanded = new_node;\n-            } else {\n-                rewriter.replace(child.syntax(), &new_node)\n+                return Some(new_node);\n             }\n+            replacements.push((child, new_node));\n         }\n     }\n \n-    let res = rewriter.rewrite(&expanded);\n-    Some(res)\n+    replacements.into_iter().rev().for_each(|(old, new)| ted::replace(old.syntax(), new));\n+    Some(expanded)\n }\n \n // FIXME: It would also be cool to share logic here and in the mbe tests,"}]}