{"sha": "76576d401c3fc33bab78cf022d0c4901d9b89548", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NTc2ZDQwMWMzZmMzM2JhYjc4Y2YwMjJkMGM0OTAxZDliODk1NDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T15:58:37Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:49Z"}, "message": "Unify associated item mut visitors.", "tree": {"sha": "c591586ed7a32a93b72d5ccb083790cb64fada32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c591586ed7a32a93b72d5ccb083790cb64fada32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76576d401c3fc33bab78cf022d0c4901d9b89548", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76576d401c3fc33bab78cf022d0c4901d9b89548", "html_url": "https://github.com/rust-lang/rust/commit/76576d401c3fc33bab78cf022d0c4901d9b89548", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76576d401c3fc33bab78cf022d0c4901d9b89548/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d", "html_url": "https://github.com/rust-lang/rust/commit/9193d7a07e3c70f5f41c8a92aa34c120c9fdba0d"}], "stats": {"total": 94, "additions": 31, "deletions": 63}, "files": [{"sha": "026cb6eab1c7df08f14e8dc5d2c9ecf9ad9c5bde", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=76576d401c3fc33bab78cf022d0c4901d9b89548", "patch": "@@ -782,7 +782,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n             ast::TraitItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n-        self.run(is_const, |s| noop_flat_map_trait_item(i, s))\n+        self.run(is_const, |s| noop_flat_map_assoc_item(i, s))\n     }\n \n     fn flat_map_impl_item(&mut self, i: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n@@ -791,7 +791,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n             ast::ImplItemKind::Method(ref sig, _) => Self::is_sig_const(sig),\n             _ => false,\n         };\n-        self.run(is_const, |s| noop_flat_map_impl_item(i, s))\n+        self.run(is_const, |s| noop_flat_map_assoc_item(i, s))\n     }\n \n     fn visit_anon_const(&mut self, c: &mut ast::AnonConst) {"}, {"sha": "38ae7050abe48fa60f78a84ff4ece436142c683a", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=76576d401c3fc33bab78cf022d0c4901d9b89548", "patch": "@@ -344,12 +344,12 @@ impl<'a> MutVisitor for StripUnconfigured<'a> {\n         noop_flat_map_item(configure!(self, item), self)\n     }\n \n-    fn flat_map_impl_item(&mut self, item: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n-        noop_flat_map_impl_item(configure!(self, item), self)\n+    fn flat_map_impl_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+        noop_flat_map_assoc_item(configure!(self, item), self)\n     }\n \n-    fn flat_map_trait_item(&mut self, item: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n-        noop_flat_map_trait_item(configure!(self, item), self)\n+    fn flat_map_trait_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n+        noop_flat_map_assoc_item(configure!(self, item), self)\n     }\n \n     fn visit_mac(&mut self, _mac: &mut ast::Mac) {"}, {"sha": "18d42f9dd668c69f7988534d2f64292a74444494", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 11, "deletions": 43, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=76576d401c3fc33bab78cf022d0c4901d9b89548", "patch": "@@ -103,12 +103,12 @@ pub trait MutVisitor: Sized {\n         noop_visit_item_kind(i, self);\n     }\n \n-    fn flat_map_trait_item(&mut self, i: TraitItem) -> SmallVec<[TraitItem; 1]> {\n-        noop_flat_map_trait_item(i, self)\n+    fn flat_map_trait_item(&mut self, i: AssocItem) -> SmallVec<[AssocItem; 1]> {\n+        noop_flat_map_assoc_item(i, self)\n     }\n \n-    fn flat_map_impl_item(&mut self, i: ImplItem) -> SmallVec<[ImplItem; 1]> {\n-        noop_flat_map_impl_item(i, self)\n+    fn flat_map_impl_item(&mut self, i: AssocItem) -> SmallVec<[AssocItem; 1]> {\n+        noop_flat_map_assoc_item(i, self)\n     }\n \n     fn visit_fn_decl(&mut self, d: &mut P<FnDecl>) {\n@@ -940,62 +940,30 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n     }\n }\n \n-pub fn noop_flat_map_trait_item<T: MutVisitor>(mut item: TraitItem, visitor: &mut T)\n-    -> SmallVec<[TraitItem; 1]>\n+pub fn noop_flat_map_assoc_item<T: MutVisitor>(mut item: AssocItem, visitor: &mut T)\n+    -> SmallVec<[AssocItem; 1]>\n {\n-    let TraitItem { id, ident, vis, defaultness: _, attrs, generics, kind, span, tokens: _ } =\n-        &mut item;\n-    visitor.visit_id(id);\n-    visitor.visit_ident(ident);\n-    visitor.visit_vis(vis);\n-    visit_attrs(attrs, visitor);\n-    visitor.visit_generics(generics);\n-    match kind {\n-        TraitItemKind::Const(ty, default) => {\n-            visitor.visit_ty(ty);\n-            visit_opt(default, |default| visitor.visit_expr(default));\n-        }\n-        TraitItemKind::Method(sig, body) => {\n-            visit_fn_sig(sig, visitor);\n-            visit_opt(body, |body| visitor.visit_block(body));\n-        }\n-        TraitItemKind::TyAlias(bounds, default) => {\n-            visit_bounds(bounds, visitor);\n-            visit_opt(default, |default| visitor.visit_ty(default));\n-        }\n-        TraitItemKind::Macro(mac) => {\n-            visitor.visit_mac(mac);\n-        }\n-    }\n-    visitor.visit_span(span);\n-\n-    smallvec![item]\n-}\n-\n-pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut T)\n-                                              -> SmallVec<[ImplItem; 1]>\n-{\n-    let ImplItem { id, ident, vis, defaultness: _, attrs, generics, kind, span, tokens: _ } =\n+    let AssocItem { id, ident, vis, defaultness: _, attrs, generics, kind, span, tokens: _ } =\n         &mut item;\n     visitor.visit_id(id);\n     visitor.visit_ident(ident);\n     visitor.visit_vis(vis);\n     visit_attrs(attrs, visitor);\n     visitor.visit_generics(generics);\n     match kind  {\n-        ImplItemKind::Const(ty, expr) => {\n+        AssocItemKind::Const(ty, expr) => {\n             visitor.visit_ty(ty);\n             visit_opt(expr, |expr| visitor.visit_expr(expr));\n         }\n-        ImplItemKind::Method(sig, body) => {\n+        AssocItemKind::Method(sig, body) => {\n             visit_fn_sig(sig, visitor);\n             visit_opt(body, |body| visitor.visit_block(body));\n         }\n-        ImplItemKind::TyAlias(bounds, ty) => {\n+        AssocItemKind::TyAlias(bounds, ty) => {\n             visit_bounds(bounds, visitor);\n             visit_opt(ty, |ty| visitor.visit_ty(ty));\n         }\n-        ImplItemKind::Macro(mac) => visitor.visit_mac(mac),\n+        AssocItemKind::Macro(mac) => visitor.visit_mac(mac),\n     }\n     visitor.visit_span(span);\n "}, {"sha": "2eae6d494d07aaa3c806ab70b8afe5bf81713fed", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=76576d401c3fc33bab78cf022d0c4901d9b89548", "patch": "@@ -1317,7 +1317,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn flat_map_trait_item(&mut self, item: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n+    fn flat_map_trait_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n         let mut item = configure!(self, item);\n \n         let (attr, traits, after_derive) = self.classify_item(&mut item);\n@@ -1327,16 +1327,16 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         match item.kind {\n-            ast::TraitItemKind::Macro(mac) => {\n-                let ast::TraitItem { attrs, span, .. } = item;\n+            ast::AssocItemKind::Macro(mac) => {\n+                let ast::AssocItem { attrs, span, .. } = item;\n                 self.check_attributes(&attrs);\n                 self.collect_bang(mac, span, AstFragmentKind::TraitItems).make_trait_items()\n             }\n-            _ => noop_flat_map_trait_item(item, self),\n+            _ => noop_flat_map_assoc_item(item, self),\n         }\n     }\n \n-    fn flat_map_impl_item(&mut self, item: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n+    fn flat_map_impl_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n         let mut item = configure!(self, item);\n \n         let (attr, traits, after_derive) = self.classify_item(&mut item);\n@@ -1346,12 +1346,12 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n         }\n \n         match item.kind {\n-            ast::ImplItemKind::Macro(mac) => {\n-                let ast::ImplItem { attrs, span, .. } = item;\n+            ast::AssocItemKind::Macro(mac) => {\n+                let ast::AssocItem { attrs, span, .. } = item;\n                 self.check_attributes(&attrs);\n                 self.collect_bang(mac, span, AstFragmentKind::ImplItems).make_impl_items()\n             }\n-            _ => noop_flat_map_impl_item(item, self),\n+            _ => noop_flat_map_assoc_item(item, self),\n         }\n     }\n "}, {"sha": "18acbf2cc13d9b85c9a64f20e8225ffbca860c06", "filename": "src/libsyntax_expand/placeholders.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibsyntax_expand%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76576d401c3fc33bab78cf022d0c4901d9b89548/src%2Flibsyntax_expand%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fplaceholders.rs?ref=76576d401c3fc33bab78cf022d0c4901d9b89548", "patch": "@@ -253,17 +253,17 @@ impl<'a, 'b> MutVisitor for PlaceholderExpander<'a, 'b> {\n         noop_flat_map_item(item, self)\n     }\n \n-    fn flat_map_trait_item(&mut self, item: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n+    fn flat_map_trait_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n         match item.kind {\n-            ast::TraitItemKind::Macro(_) => self.remove(item.id).make_trait_items(),\n-            _ => noop_flat_map_trait_item(item, self),\n+            ast::AssocItemKind::Macro(_) => self.remove(item.id).make_trait_items(),\n+            _ => noop_flat_map_assoc_item(item, self),\n         }\n     }\n \n-    fn flat_map_impl_item(&mut self, item: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n+    fn flat_map_impl_item(&mut self, item: ast::AssocItem) -> SmallVec<[ast::AssocItem; 1]> {\n         match item.kind {\n-            ast::ImplItemKind::Macro(_) => self.remove(item.id).make_impl_items(),\n-            _ => noop_flat_map_impl_item(item, self),\n+            ast::AssocItemKind::Macro(_) => self.remove(item.id).make_impl_items(),\n+            _ => noop_flat_map_assoc_item(item, self),\n         }\n     }\n "}]}