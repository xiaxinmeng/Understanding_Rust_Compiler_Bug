{"sha": "5ab19676ed25ce52769b06a2fc7319b93d6c64dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYjE5Njc2ZWQyNWNlNTI3NjliMDZhMmZjNzMxOWI5M2Q2YzY0ZGQ=", "commit": {"author": {"name": "Robin Schoonover", "email": "robin@cornhooves.org", "date": "2020-09-17T01:41:22Z"}, "committer": {"name": "Robin Schoonover", "email": "robin@cornhooves.org", "date": "2020-10-04T21:52:15Z"}, "message": "Remove extra indirection in LitKind::ByteStr", "tree": {"sha": "06ef1dbeecab8317ae98ee6857c1858165cc1dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06ef1dbeecab8317ae98ee6857c1858165cc1dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ab19676ed25ce52769b06a2fc7319b93d6c64dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab19676ed25ce52769b06a2fc7319b93d6c64dd", "html_url": "https://github.com/rust-lang/rust/commit/5ab19676ed25ce52769b06a2fc7319b93d6c64dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ab19676ed25ce52769b06a2fc7319b93d6c64dd/comments", "author": {"login": "rschoon", "id": 507274, "node_id": "MDQ6VXNlcjUwNzI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/507274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rschoon", "html_url": "https://github.com/rschoon", "followers_url": "https://api.github.com/users/rschoon/followers", "following_url": "https://api.github.com/users/rschoon/following{/other_user}", "gists_url": "https://api.github.com/users/rschoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rschoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rschoon/subscriptions", "organizations_url": "https://api.github.com/users/rschoon/orgs", "repos_url": "https://api.github.com/users/rschoon/repos", "events_url": "https://api.github.com/users/rschoon/events{/privacy}", "received_events_url": "https://api.github.com/users/rschoon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rschoon", "id": 507274, "node_id": "MDQ6VXNlcjUwNzI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/507274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rschoon", "html_url": "https://github.com/rschoon", "followers_url": "https://api.github.com/users/rschoon/followers", "following_url": "https://api.github.com/users/rschoon/following{/other_user}", "gists_url": "https://api.github.com/users/rschoon/gists{/gist_id}", "starred_url": "https://api.github.com/users/rschoon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rschoon/subscriptions", "organizations_url": "https://api.github.com/users/rschoon/orgs", "repos_url": "https://api.github.com/users/rschoon/repos", "events_url": "https://api.github.com/users/rschoon/events{/privacy}", "received_events_url": "https://api.github.com/users/rschoon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ccf5f731bb71db3470002d6baf5ab4792b821d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ccf5f731bb71db3470002d6baf5ab4792b821d9", "html_url": "https://github.com/rust-lang/rust/commit/4ccf5f731bb71db3470002d6baf5ab4792b821d9"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "492d5788fc04f46abe01076aa7527e8f878f6a04", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ab19676ed25ce52769b06a2fc7319b93d6c64dd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab19676ed25ce52769b06a2fc7319b93d6c64dd/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=5ab19676ed25ce52769b06a2fc7319b93d6c64dd", "patch": "@@ -1606,7 +1606,7 @@ pub enum LitKind {\n     /// A string literal (`\"foo\"`).\n     Str(Symbol, StrStyle),\n     /// A byte string (`b\"foo\"`).\n-    ByteStr(Lrc<Vec<u8>>),\n+    ByteStr(Lrc<[u8]>),\n     /// A byte char (`b'f'`).\n     Byte(u8),\n     /// A character literal (`'a'`)."}, {"sha": "f6f1ad0a9c3f22f24c329fddb28e0a323bd0e1fc", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5ab19676ed25ce52769b06a2fc7319b93d6c64dd/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab19676ed25ce52769b06a2fc7319b93d6c64dd/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=5ab19676ed25ce52769b06a2fc7319b93d6c64dd", "patch": "@@ -4,7 +4,6 @@ use crate::ast::{self, Lit, LitKind};\n use crate::token::{self, Token};\n use crate::tokenstream::TokenTree;\n \n-use rustc_data_structures::sync::Lrc;\n use rustc_lexer::unescape::{unescape_byte, unescape_char};\n use rustc_lexer::unescape::{unescape_byte_literal, unescape_literal, Mode};\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -108,7 +107,7 @@ impl LitKind {\n                 });\n                 error?;\n                 buf.shrink_to_fit();\n-                LitKind::ByteStr(Lrc::new(buf))\n+                LitKind::ByteStr(buf.into())\n             }\n             token::ByteStrRaw(_) => {\n                 let s = symbol.as_str();\n@@ -128,7 +127,7 @@ impl LitKind {\n                     symbol.to_string().into_bytes()\n                 };\n \n-                LitKind::ByteStr(Lrc::new(bytes))\n+                LitKind::ByteStr(bytes.into())\n             }\n             token::Err => LitKind::Err(symbol),\n         })"}, {"sha": "f76bbd8381940630bd1bbfbdda3da0018a5bab96", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ab19676ed25ce52769b06a2fc7319b93d6c64dd/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab19676ed25ce52769b06a2fc7319b93d6c64dd/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=5ab19676ed25ce52769b06a2fc7319b93d6c64dd", "patch": "@@ -13,8 +13,6 @@ use rustc_span::{self, Pos, Span};\n use smallvec::SmallVec;\n use std::rc::Rc;\n \n-use rustc_data_structures::sync::Lrc;\n-\n // These macros all relate to the file system; they either return\n // the column/row/filename of the expression, or they include\n // a given file into the current one.\n@@ -216,7 +214,7 @@ pub fn expand_include_bytes(\n         }\n     };\n     match cx.source_map().load_binary_file(&file) {\n-        Ok(bytes) => base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::new(bytes)))),\n+        Ok(bytes) => base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(bytes.into()))),\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)"}, {"sha": "b71ff6e7557496ac2b5cddbce0390efa4dc3c29f", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ab19676ed25ce52769b06a2fc7319b93d6c64dd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ab19676ed25ce52769b06a2fc7319b93d6c64dd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=5ab19676ed25ce52769b06a2fc7319b93d6c64dd", "patch": "@@ -31,7 +31,7 @@ crate fn lit_to_const<'tcx>(\n         (ast::LitKind::ByteStr(data), ty::Ref(_, inner_ty, _))\n             if matches!(inner_ty.kind(), ty::Slice(_)) =>\n         {\n-            let allocation = Allocation::from_byte_aligned_bytes(data as &Vec<u8>);\n+            let allocation = Allocation::from_byte_aligned_bytes(data as &[u8]);\n             let allocation = tcx.intern_const_alloc(allocation);\n             ConstValue::Slice { data: allocation, start: 0, end: data.len() }\n         }"}]}