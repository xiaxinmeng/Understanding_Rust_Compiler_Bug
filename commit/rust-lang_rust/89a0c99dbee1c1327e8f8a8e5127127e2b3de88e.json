{"sha": "89a0c99dbee1c1327e8f8a8e5127127e2b3de88e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YTBjOTlkYmVlMWMxMzI3ZThmOGE4ZTUxMjcxMjdlMmIzZGU4OGU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-12T01:24:59Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-13T02:31:05Z"}, "message": "dlist: Implement DoubleEndedIterator and use for .iter() and .rev_iter()", "tree": {"sha": "03d6f812d81134028a73cfc08debe85c11445c89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03d6f812d81134028a73cfc08debe85c11445c89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89a0c99dbee1c1327e8f8a8e5127127e2b3de88e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89a0c99dbee1c1327e8f8a8e5127127e2b3de88e", "html_url": "https://github.com/rust-lang/rust/commit/89a0c99dbee1c1327e8f8a8e5127127e2b3de88e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89a0c99dbee1c1327e8f8a8e5127127e2b3de88e/comments", "author": null, "committer": null, "parents": [{"sha": "c6e7890e1312412ecf70490b3f00f674fb027f8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e7890e1312412ecf70490b3f00f674fb027f8a", "html_url": "https://github.com/rust-lang/rust/commit/c6e7890e1312412ecf70490b3f00f674fb027f8a"}], "stats": {"total": 72, "additions": 33, "deletions": 39}, "files": [{"sha": "feafce58e6e9eec7f978327ec518ed44077a344e", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 33, "deletions": 39, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/89a0c99dbee1c1327e8f8a8e5127127e2b3de88e/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89a0c99dbee1c1327e8f8a8e5127127e2b3de88e/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=89a0c99dbee1c1327e8f8a8e5127127e2b3de88e", "patch": "@@ -26,7 +26,7 @@ use std::cast;\n use std::cmp;\n use std::ptr;\n use std::util;\n-use std::iterator::FromIterator;\n+use std::iterator::{FromIterator, InvertIterator};\n \n use container::Deque;\n \n@@ -46,17 +46,10 @@ struct Node<T> {\n     priv value: T,\n }\n \n-/// DList iterator\n-pub struct ForwardIterator<'self, T> {\n-    priv list: &'self DList<T>,\n-    priv next: &'self Link<T>,\n-    priv nelem: uint,\n-}\n-\n-/// DList reverse iterator\n-pub struct ReverseIterator<'self, T> {\n-    priv list: &'self DList<T>,\n-    priv next: Rawlink<Node<T>>,\n+/// Double-ended DList iterator\n+pub struct DListIterator<'self, T> {\n+    priv head: &'self Link<T>,\n+    priv tail: Rawlink<Node<T>>,\n     priv nelem: uint,\n }\n \n@@ -327,13 +320,13 @@ impl<T> DList<T> {\n \n \n     /// Provide a forward iterator\n-    pub fn iter<'a>(&'a self) -> ForwardIterator<'a, T> {\n-        ForwardIterator{nelem: self.len(), list: self, next: &self.list_head}\n+    pub fn iter<'a>(&'a self) -> DListIterator<'a, T> {\n+        DListIterator{nelem: self.len(), head: &self.list_head, tail: self.list_tail}\n     }\n \n     /// Provide a reverse iterator\n-    pub fn rev_iter<'a>(&'a self) -> ReverseIterator<'a, T> {\n-        ReverseIterator{nelem: self.len(), list: self, next: self.list_tail}\n+    pub fn rev_iter<'a>(&'a self) -> InvertIterator<&'a T, DListIterator<'a, T>> {\n+        self.iter().invert()\n     }\n \n     /// Provide a forward iterator with mutable references\n@@ -367,15 +360,18 @@ impl<T: cmp::TotalOrd> DList<T> {\n     }\n }\n \n-impl<'self, A> Iterator<&'self A> for ForwardIterator<'self, A> {\n+impl<'self, A> Iterator<&'self A> for DListIterator<'self, A> {\n     #[inline]\n     fn next(&mut self) -> Option<&'self A> {\n-        match *self.next {\n+        if self.nelem == 0 {\n+            return None;\n+        }\n+        match *self.head {\n             None => None,\n-            Some(ref next) => {\n+            Some(ref head) => {\n                 self.nelem -= 1;\n-                self.next = &next.next;\n-                Some(&next.value)\n+                self.head = &head.next;\n+                Some(&head.value)\n             }\n         }\n     }\n@@ -385,6 +381,22 @@ impl<'self, A> Iterator<&'self A> for ForwardIterator<'self, A> {\n     }\n }\n \n+impl<'self, A> DoubleEndedIterator<&'self A> for DListIterator<'self, A> {\n+    fn next_back(&mut self) -> Option<&'self A> {\n+        if self.nelem == 0 {\n+            return None;\n+        }\n+        match self.tail.resolve() {\n+            None => None,\n+            Some(prev) => {\n+                self.nelem -= 1;\n+                self.tail = prev.prev;\n+                Some(&prev.value)\n+            }\n+        }\n+    }\n+}\n+\n // MutForwardIterator is different because it implements ListInsertion,\n // and can modify the list during traversal, used in insert_when and merge.\n impl<'self, A> Iterator<&'self mut A> for MutForwardIterator<'self, A> {\n@@ -419,24 +431,6 @@ impl<'self, A> Iterator<&'self mut A> for MutForwardIterator<'self, A> {\n     }\n }\n \n-impl<'self, A> Iterator<&'self A> for ReverseIterator<'self, A> {\n-    #[inline]\n-    fn next(&mut self) -> Option<&'self A> {\n-        match self.next.resolve() {\n-            None => None,\n-            Some(prev) => {\n-                self.nelem -= 1;\n-                self.next = prev.prev;\n-                Some(&prev.value)\n-            }\n-        }\n-    }\n-\n-    fn size_hint(&self) -> (uint, Option<uint>) {\n-        (self.nelem, Some(self.nelem))\n-    }\n-}\n-\n impl<'self, A> Iterator<&'self mut A> for MutReverseIterator<'self, A> {\n     #[inline]\n     fn next(&mut self) -> Option<&'self mut A> {"}]}