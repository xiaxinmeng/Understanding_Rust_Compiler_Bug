{"sha": "f05bd1b41ddda779032f4c5c8e30bf640129832f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNWJkMWI0MWRkZGE3NzkwMzJmNGM1YzhlMzBiZjY0MDEyOTgzMmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-12T17:15:27Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-10-12T21:07:56Z"}, "message": "Rollup merge of #37064 - nnethercote:read_str, r=eddyb\n\nAvoid allocations in `Decoder::read_str`.\n\n`opaque::Decoder::read_str` is very hot within `rustc` due to its use in\nthe reading of crate metadata, and it currently returns a `String`. This\ncommit changes it to instead return a `Cow<str>`, which avoids a heap\nallocation.\n\nThis change reduces the number of calls to `malloc` by almost 10% in\nsome benchmarks.\n\nThis is a [breaking-change] to libserialize.", "tree": {"sha": "20136a8f6a2215e22703c51ba54c78426c3837fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20136a8f6a2215e22703c51ba54c78426c3837fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f05bd1b41ddda779032f4c5c8e30bf640129832f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f05bd1b41ddda779032f4c5c8e30bf640129832f", "html_url": "https://github.com/rust-lang/rust/commit/f05bd1b41ddda779032f4c5c8e30bf640129832f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f05bd1b41ddda779032f4c5c8e30bf640129832f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0ad6616fc2244eea66c6adadd35f899b170505f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ad6616fc2244eea66c6adadd35f899b170505f", "html_url": "https://github.com/rust-lang/rust/commit/a0ad6616fc2244eea66c6adadd35f899b170505f"}, {"sha": "b043e11de2eb2c60f7bfec5e15960f537b229e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/b043e11de2eb2c60f7bfec5e15960f537b229e20", "html_url": "https://github.com/rust-lang/rust/commit/b043e11de2eb2c60f7bfec5e15960f537b229e20"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "bdb4d383cee7d70776088839357f7a2aff9375f1", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=f05bd1b41ddda779032f4c5c8e30bf640129832f", "patch": "@@ -32,6 +32,7 @@ use rustc_const_math::ConstInt;\n \n use rustc::mir::repr::Mir;\n \n+use std::borrow::Cow;\n use std::cell::Ref;\n use std::io;\n use std::mem;\n@@ -202,7 +203,7 @@ impl<'doc, 'tcx> Decoder for DecodeContext<'doc, 'tcx> {\n         read_f64 -> f64;\n         read_f32 -> f32;\n         read_char -> char;\n-        read_str -> String;\n+        read_str -> Cow<str>;\n     }\n \n     fn error(&mut self, err: &str) -> Self::Error {"}, {"sha": "3e976c90628308c25669c2a80b337ab6ab7e6bd8", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=f05bd1b41ddda779032f4c5c8e30bf640129832f", "patch": "@@ -199,6 +199,7 @@ use self::DecoderError::*;\n use self::ParserState::*;\n use self::InternalStackElement::*;\n \n+use std::borrow::Cow;\n use std::collections::{HashMap, BTreeMap};\n use std::io::prelude::*;\n use std::io;\n@@ -2081,9 +2082,7 @@ impl Decoder {\n     pub fn new(json: Json) -> Decoder {\n         Decoder { stack: vec![json] }\n     }\n-}\n \n-impl Decoder {\n     fn pop(&mut self) -> Json {\n         self.stack.pop().unwrap()\n     }\n@@ -2182,8 +2181,8 @@ impl ::Decoder for Decoder {\n         Err(ExpectedError(\"single character string\".to_owned(), format!(\"{}\", s)))\n     }\n \n-    fn read_str(&mut self) -> DecodeResult<string::String> {\n-        expect!(self.pop(), String)\n+    fn read_str(&mut self) -> DecodeResult<Cow<str>> {\n+        expect!(self.pop(), String).map(Cow::Owned)\n     }\n \n     fn read_enum<T, F>(&mut self, _name: &str, f: F) -> DecodeResult<T> where"}, {"sha": "a2c0ca954472c3d36676336fbc9b9f20e76e08ef", "filename": "src/libserialize/opaque.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibserialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibserialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fopaque.rs?ref=f05bd1b41ddda779032f4c5c8e30bf640129832f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use leb128::{read_signed_leb128, read_unsigned_leb128, write_signed_leb128, write_unsigned_leb128};\n+use std::borrow::Cow;\n use std::io::{self, Write};\n use serialize;\n \n@@ -246,11 +247,11 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n         Ok(::std::char::from_u32(bits).unwrap())\n     }\n \n-    fn read_str(&mut self) -> Result<String, Self::Error> {\n+    fn read_str(&mut self) -> Result<Cow<str>, Self::Error> {\n         let len = self.read_usize()?;\n         let s = ::std::str::from_utf8(&self.data[self.position..self.position + len]).unwrap();\n         self.position += len;\n-        Ok(s.to_string())\n+        Ok(Cow::Borrowed(s))\n     }\n \n     fn error(&mut self, err: &str) -> Self::Error {"}, {"sha": "c4613c661a84bf26b8a3ca8bc840de91a5bc75cb", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=f05bd1b41ddda779032f4c5c8e30bf640129832f", "patch": "@@ -14,6 +14,7 @@\n Core encoding and decoding interfaces.\n */\n \n+use std::borrow::Cow;\n use std::intrinsics;\n use std::path;\n use std::rc::Rc;\n@@ -156,7 +157,7 @@ pub trait Decoder {\n     fn read_f64(&mut self) -> Result<f64, Self::Error>;\n     fn read_f32(&mut self) -> Result<f32, Self::Error>;\n     fn read_char(&mut self) -> Result<char, Self::Error>;\n-    fn read_str(&mut self) -> Result<String, Self::Error>;\n+    fn read_str(&mut self) -> Result<Cow<str>, Self::Error>;\n \n     // Compound types:\n     fn read_enum<T, F>(&mut self, _name: &str, f: F) -> Result<T, Self::Error>\n@@ -401,7 +402,7 @@ impl Encodable for String {\n \n impl Decodable for String {\n     fn decode<D: Decoder>(d: &mut D) -> Result<String, D::Error> {\n-        d.read_str()\n+        Ok(d.read_str()?.into_owned())\n     }\n }\n "}, {"sha": "30fc4c3dd8045137865da8d779cff1fb65335ba3", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f05bd1b41ddda779032f4c5c8e30bf640129832f", "patch": "@@ -71,7 +71,7 @@ impl Encodable for Name {\n \n impl Decodable for Name {\n     fn decode<D: Decoder>(d: &mut D) -> Result<Name, D::Error> {\n-        Ok(token::intern(&d.read_str()?[..]))\n+        Ok(token::intern(&d.read_str()?))\n     }\n }\n "}, {"sha": "73d9695a9906b2de92aade848832ea81f8d5cbd1", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f05bd1b41ddda779032f4c5c8e30bf640129832f/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f05bd1b41ddda779032f4c5c8e30bf640129832f", "patch": "@@ -566,7 +566,7 @@ impl PartialEq<InternedString> for str {\n \n impl Decodable for InternedString {\n     fn decode<D: Decoder>(d: &mut D) -> Result<InternedString, D::Error> {\n-        Ok(intern(d.read_str()?.as_ref()).as_str())\n+        Ok(intern(&d.read_str()?).as_str())\n     }\n }\n "}]}