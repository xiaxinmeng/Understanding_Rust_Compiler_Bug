{"sha": "3b37d941a29d91afbfa06afcb63f702ee7b810d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMzdkOTQxYTI5ZDkxYWZiZmEwNmFmY2I2M2Y3MDJlZTdiODEwZDY=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-10-17T18:01:10Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-10-18T13:21:19Z"}, "message": "Add some tests", "tree": {"sha": "7a3318bb69dab0fe683a8f9e8bd6326cb5d8163f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3318bb69dab0fe683a8f9e8bd6326cb5d8163f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b37d941a29d91afbfa06afcb63f702ee7b810d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b37d941a29d91afbfa06afcb63f702ee7b810d6", "html_url": "https://github.com/rust-lang/rust/commit/3b37d941a29d91afbfa06afcb63f702ee7b810d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b37d941a29d91afbfa06afcb63f702ee7b810d6/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3eb5249340898e4380ffe37e7ed8c6b2afdbf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3eb5249340898e4380ffe37e7ed8c6b2afdbf9", "html_url": "https://github.com/rust-lang/rust/commit/4e3eb5249340898e4380ffe37e7ed8c6b2afdbf9"}], "stats": {"total": 304, "additions": 304, "deletions": 0}, "files": [{"sha": "96e8795e52d56687ceb660c8d9a5bd1833f1e8e4", "filename": "src/test/ui/consts/const_in_pattern/issue-44333.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.rs?ref=3b37d941a29d91afbfa06afcb63f702ee7b810d6", "previous_filename": "src/test/ui/issues/issue-44333.rs"}, {"sha": "8302b09e5334d0b62919327b4258d3bbc85b69a5", "filename": "src/test/ui/consts/const_in_pattern/issue-44333.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-44333.stderr?ref=3b37d941a29d91afbfa06afcb63f702ee7b810d6", "previous_filename": "src/test/ui/issues/issue-44333.stderr"}, {"sha": "69cf8404da18e34506019ef421193e7134bfbbf2", "filename": "src/test/ui/consts/const_in_pattern/issue-78057.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.rs?ref=3b37d941a29d91afbfa06afcb63f702ee7b810d6", "patch": "@@ -0,0 +1,17 @@\n+#![deny(unreachable_patterns)]\n+\n+#[derive(PartialEq)]\n+struct Opaque(i32);\n+\n+impl Eq for Opaque {}\n+\n+const FOO: Opaque = Opaque(42);\n+\n+fn main() {\n+    match FOO {\n+        FOO => {},\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        _ => {}\n+        //~^ ERROR unreachable pattern\n+    }\n+}"}, {"sha": "0d49d0e96c8540908508e46b7e3a651fc782ea28", "filename": "src/test/ui/consts/const_in_pattern/issue-78057.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.stderr?ref=3b37d941a29d91afbfa06afcb63f702ee7b810d6", "patch": "@@ -0,0 +1,20 @@\n+error: to use a constant of type `Opaque` in a pattern, `Opaque` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/issue-78057.rs:12:9\n+   |\n+LL |         FOO => {},\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/issue-78057.rs:14:9\n+   |\n+LL |         _ => {}\n+   |         ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-78057.rs:1:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "928756723a6c99ddc590fd1f4dbafa8c5fa943ff", "filename": "src/test/ui/pattern/usefulness/consts-opaque.rs", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.rs?ref=3b37d941a29d91afbfa06afcb63f702ee7b810d6", "patch": "@@ -0,0 +1,113 @@\n+// This file tests the exhaustiveness algorithm on opaque constants. Most of the examples give\n+// unnecessary warnings because const_to_pat.rs converts a constant pattern to a wildcard when the\n+// constant is not allowed as a pattern. This is an edge case so we may not care to fix it.\n+// See also https://github.com/rust-lang/rust/issues/78057\n+\n+#![deny(unreachable_patterns)]\n+\n+#[derive(PartialEq)]\n+struct Foo(i32);\n+impl Eq for Foo {}\n+const FOO: Foo = Foo(42);\n+const FOO_REF: &Foo = &Foo(42);\n+const FOO_REF_REF: &&Foo = &&Foo(42);\n+\n+#[derive(PartialEq)]\n+struct Bar;\n+impl Eq for Bar {}\n+const BAR: Bar = Bar;\n+\n+#[derive(PartialEq)]\n+enum Baz {\n+    Baz1,\n+    Baz2\n+}\n+impl Eq for Baz {}\n+const BAZ: Baz = Baz::Baz1;\n+\n+type Quux = fn(usize, usize) -> usize;\n+fn quux(a: usize, b: usize) -> usize { a + b }\n+const QUUX: Quux = quux;\n+\n+fn main() {\n+    match FOO {\n+        FOO => {}\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        _ => {} // should not be emitting unreachable warning\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    match FOO_REF {\n+        FOO_REF => {}\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        Foo(_) => {} // should not be emitting unreachable warning\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    // FIXME: this causes an ICE (https://github.com/rust-lang/rust/issues/78071)\n+    //match FOO_REF_REF {\n+    //    FOO_REF_REF => {}\n+    //    Foo(_) => {}\n+    //}\n+\n+    match BAR {\n+        Bar => {}\n+        BAR => {} // should not be emitting unreachable warning\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| ERROR unreachable pattern\n+        _ => {}\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    match BAR {\n+        BAR => {}\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        Bar => {} // should not be emitting unreachable warning\n+        //~^ ERROR unreachable pattern\n+        _ => {}\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    match BAR {\n+        BAR => {}\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        BAR => {} // should not be emitting unreachable warning\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| ERROR unreachable pattern\n+        _ => {} // should not be emitting unreachable warning\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    match BAZ {\n+        BAZ => {}\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        Baz::Baz1 => {} // should not be emitting unreachable warning\n+        //~^ ERROR unreachable pattern\n+        _ => {}\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    match BAZ {\n+        Baz::Baz1 => {}\n+        BAZ => {}\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        _ => {}\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    match BAZ {\n+        BAZ => {}\n+        //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+        Baz::Baz2 => {} // should not be emitting unreachable warning\n+        //~^ ERROR unreachable pattern\n+        _ => {} // should not be emitting unreachable warning\n+        //~^ ERROR unreachable pattern\n+    }\n+\n+    match QUUX {\n+        QUUX => {}\n+        QUUX => {} // should not be emitting unreachable warning\n+        //~^ ERROR unreachable pattern\n+        _ => {}\n+    }\n+}"}, {"sha": "07cdc1c95fad01178ee5ba15016782912eec9608", "filename": "src/test/ui/pattern/usefulness/consts-opaque.stderr", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b37d941a29d91afbfa06afcb63f702ee7b810d6/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr?ref=3b37d941a29d91afbfa06afcb63f702ee7b810d6", "patch": "@@ -0,0 +1,154 @@\n+error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/consts-opaque.rs:34:9\n+   |\n+LL |         FOO => {}\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:36:9\n+   |\n+LL |         _ => {} // should not be emitting unreachable warning\n+   |         ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/consts-opaque.rs:6:9\n+   |\n+LL | #![deny(unreachable_patterns)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/consts-opaque.rs:41:9\n+   |\n+LL |         FOO_REF => {}\n+   |         ^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:43:9\n+   |\n+LL |         Foo(_) => {} // should not be emitting unreachable warning\n+   |         ^^^^^^\n+\n+error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/consts-opaque.rs:55:9\n+   |\n+LL |         BAR => {} // should not be emitting unreachable warning\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:55:9\n+   |\n+LL |         Bar => {}\n+   |         --- matches any value\n+LL |         BAR => {} // should not be emitting unreachable warning\n+   |         ^^^ unreachable pattern\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:58:9\n+   |\n+LL |         Bar => {}\n+   |         --- matches any value\n+...\n+LL |         _ => {}\n+   |         ^ unreachable pattern\n+\n+error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/consts-opaque.rs:63:9\n+   |\n+LL |         BAR => {}\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:65:9\n+   |\n+LL |         Bar => {} // should not be emitting unreachable warning\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:67:9\n+   |\n+LL |         Bar => {} // should not be emitting unreachable warning\n+   |         --- matches any value\n+LL |\n+LL |         _ => {}\n+   |         ^ unreachable pattern\n+\n+error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/consts-opaque.rs:72:9\n+   |\n+LL |         BAR => {}\n+   |         ^^^\n+\n+error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/consts-opaque.rs:74:9\n+   |\n+LL |         BAR => {} // should not be emitting unreachable warning\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:74:9\n+   |\n+LL |         BAR => {} // should not be emitting unreachable warning\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:77:9\n+   |\n+LL |         _ => {} // should not be emitting unreachable warning\n+   |         ^\n+\n+error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/consts-opaque.rs:82:9\n+   |\n+LL |         BAZ => {}\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:84:9\n+   |\n+LL |         Baz::Baz1 => {} // should not be emitting unreachable warning\n+   |         ^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:86:9\n+   |\n+LL |         _ => {}\n+   |         ^\n+\n+error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/consts-opaque.rs:92:9\n+   |\n+LL |         BAZ => {}\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:94:9\n+   |\n+LL |         _ => {}\n+   |         ^\n+\n+error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated with `#[derive(PartialEq, Eq)]`\n+  --> $DIR/consts-opaque.rs:99:9\n+   |\n+LL |         BAZ => {}\n+   |         ^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:101:9\n+   |\n+LL |         Baz::Baz2 => {} // should not be emitting unreachable warning\n+   |         ^^^^^^^^^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:103:9\n+   |\n+LL |         _ => {} // should not be emitting unreachable warning\n+   |         ^\n+\n+error: unreachable pattern\n+  --> $DIR/consts-opaque.rs:109:9\n+   |\n+LL |         QUUX => {} // should not be emitting unreachable warning\n+   |         ^^^^\n+\n+error: aborting due to 23 previous errors\n+"}]}