{"sha": "59168035551959e089eaf4778acc84978accb9c4", "node_id": "C_kwDOAAsO6NoAKDU5MTY4MDM1NTUxOTU5ZTA4OWVhZjQ3NzhhY2M4NDk3OGFjY2I5YzQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-03T12:03:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-10-03T12:03:54Z"}, "message": "Prioritize restart messages in flycheck", "tree": {"sha": "b0e0cc85ed856ce11cc3b3b950259b1430479eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0e0cc85ed856ce11cc3b3b950259b1430479eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59168035551959e089eaf4778acc84978accb9c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59168035551959e089eaf4778acc84978accb9c4", "html_url": "https://github.com/rust-lang/rust/commit/59168035551959e089eaf4778acc84978accb9c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59168035551959e089eaf4778acc84978accb9c4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdc5493901b23a3e768216e062e557ed724b27e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc5493901b23a3e768216e062e557ed724b27e1", "html_url": "https://github.com/rust-lang/rust/commit/cdc5493901b23a3e768216e062e557ed724b27e1"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "e8c63d410aa754dd428aee664c771253caa30806", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/59168035551959e089eaf4778acc84978accb9c4/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59168035551959e089eaf4778acc84978accb9c4/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=59168035551959e089eaf4778acc84978accb9c4", "patch": "@@ -169,21 +169,30 @@ impl FlycheckActor {\n     }\n     fn next_event(&self, inbox: &Receiver<Restart>) -> Option<Event> {\n         let check_chan = self.cargo_handle.as_ref().map(|cargo| &cargo.receiver);\n+        if let Ok(msg) = inbox.try_recv() {\n+            // give restarts a preference so check outputs don't block a restart or stop\n+            return Some(Event::Restart(msg));\n+        }\n         select! {\n             recv(inbox) -> msg => msg.ok().map(Event::Restart),\n             recv(check_chan.unwrap_or(&never())) -> msg => Some(Event::CheckEvent(msg.ok())),\n         }\n     }\n     fn run(mut self, inbox: Receiver<Restart>) {\n-        while let Some(event) = self.next_event(&inbox) {\n+        'event: while let Some(event) = self.next_event(&inbox) {\n             match event {\n                 Event::Restart(Restart::No) => {\n                     self.cancel_check_process();\n                 }\n                 Event::Restart(Restart::Yes) => {\n                     // Cancel the previously spawned process\n                     self.cancel_check_process();\n-                    while let Ok(_) = inbox.recv_timeout(Duration::from_millis(50)) {}\n+                    while let Ok(restart) = inbox.recv_timeout(Duration::from_millis(50)) {\n+                        // restart chained with a stop, so just cancel\n+                        if let Restart::No = restart {\n+                            continue 'event;\n+                        }\n+                    }\n \n                     let command = self.check_command();\n                     tracing::debug!(?command, \"will restart flycheck\");"}]}