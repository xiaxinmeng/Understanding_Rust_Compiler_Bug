{"sha": "0722786664eaa6008e8fe6536a8c20cac0a81938", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MjI3ODY2NjRlYWE2MDA4ZThmZTY1MzZhOGMyMGNhYzBhODE5Mzg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-08T23:54:36Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-03-08T23:55:28Z"}, "message": "rustc: Add some missing cases in various folds for reference types and some broken trans code for the address-of operator", "tree": {"sha": "8052a5d6882ea0657eb8e752a453b27ee5541201", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8052a5d6882ea0657eb8e752a453b27ee5541201"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0722786664eaa6008e8fe6536a8c20cac0a81938", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0722786664eaa6008e8fe6536a8c20cac0a81938", "html_url": "https://github.com/rust-lang/rust/commit/0722786664eaa6008e8fe6536a8c20cac0a81938", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0722786664eaa6008e8fe6536a8c20cac0a81938/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331", "html_url": "https://github.com/rust-lang/rust/commit/0c5fdc8745cd0bc5fbf9272301d3aafa2eb8f331"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "3b2999c38b2450967a71832cecb97546405749a8", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0722786664eaa6008e8fe6536a8c20cac0a81938/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0722786664eaa6008e8fe6536a8c20cac0a81938/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=0722786664eaa6008e8fe6536a8c20cac0a81938", "patch": "@@ -95,7 +95,7 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n                   ty::ty_uniq(mt) { is_mutbl = mt.mutbl == m_mutbl; }\n                   ty::ty_res(_, _, _) { }\n                   ty::ty_enum(_, _) { }\n-                  ty::ty_ptr(mt) {\n+                  ty::ty_ptr(mt) | ty::ty_rptr(_, mt) {\n                     is_mutbl = mt.mutbl == m_mutbl;\n                     ptr = true;\n                   }"}, {"sha": "5fa2d8468e0976e61cf356655b90fb6015fcb81d", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0722786664eaa6008e8fe6536a8c20cac0a81938/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0722786664eaa6008e8fe6536a8c20cac0a81938/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0722786664eaa6008e8fe6536a8c20cac0a81938", "patch": "@@ -1646,7 +1646,13 @@ fn trans_unary(bcx: block, op: ast::unop, e: @ast::expr,\n                                trans_unary()\");\n       }\n       ast::addr_of {\n-        bcx.sess().bug(\"TODO pcwalton\");\n+        // FIXME: This is wrong.\n+        let {bcx, val, kind} = trans_temp_lval(bcx, e);\n+        if kind != owned {\n+            bcx.sess().span_bug(e.span,\n+                                \"can't take the address of an rvalue\");\n+        }\n+        ret store_in_dest(bcx, val, dest);\n       }\n     }\n }\n@@ -2516,7 +2522,7 @@ fn trans_lval(cx: block, e: @ast::expr) -> lval_result {\n             } else { T_typaram_ptr(ccx.tn) };\n             PointerCast(sub.bcx, sub.val, ellty)\n           }\n-          ty::ty_ptr(_) | ty::ty_uniq(_) { sub.val }\n+          ty::ty_ptr(_) | ty::ty_uniq(_) | ty::ty_rptr(_,_) { sub.val }\n         };\n         ret lval_owned(sub.bcx, val);\n       }"}, {"sha": "088baf67c2a666d24a431ebd667793757fd4576d", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0722786664eaa6008e8fe6536a8c20cac0a81938/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0722786664eaa6008e8fe6536a8c20cac0a81938/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=0722786664eaa6008e8fe6536a8c20cac0a81938", "patch": "@@ -272,6 +272,7 @@ enum type_err {\n     terr_ret_style_mismatch(ast::ret_style, ast::ret_style),\n     terr_box_mutability,\n     terr_ptr_mutability,\n+    terr_ref_mutability,\n     terr_vec_mutability,\n     terr_tuple_size(uint, uint),\n     terr_record_size(uint, uint),\n@@ -570,6 +571,9 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_ptr(tm) {\n         ty = mk_ptr(cx, {ty: fold_ty(cx, fld, tm.ty), mutbl: tm.mutbl});\n       }\n+      ty_rptr(r, tm) {\n+        ty = mk_rptr(cx, r, {ty: fold_ty(cx, fld, tm.ty), mutbl: tm.mutbl});\n+      }\n       ty_vec(tm) {\n         ty = mk_vec(cx, {ty: fold_ty(cx, fld, tm.ty), mutbl: tm.mutbl});\n       }\n@@ -1940,6 +1944,11 @@ mod unify {\n           (ty_ptr(e_mt), ty_ptr(a_mt)) {\n             unify_mt(cx, e_mt, a_mt, variance, terr_ptr_mutability, mk_ptr)\n           }\n+          (ty_rptr(e_region, e_mt), ty_rptr(a_region, a_mt)) {\n+            // TODO: Unify regions. Take covariance/invariance into account.\n+            unify_mt(cx, e_mt, a_mt, variance, terr_ref_mutability,\n+                     bind mk_rptr(_, re_block(0), _))\n+          }\n           (ty_res(e_id, e_inner, e_tps), ty_res(a_id, a_inner, a_tps))\n           if e_id == a_id {\n             alt unify_step(cx, e_inner, a_inner, variance) {\n@@ -2116,6 +2125,7 @@ fn type_err_to_str(err: type_err) -> str {\n       terr_box_mutability { ret \"boxed values differ in mutability\"; }\n       terr_vec_mutability { ret \"vectors differ in mutability\"; }\n       terr_ptr_mutability { ret \"pointers differ in mutability\"; }\n+      terr_ref_mutability { ret \"references differ in mutability\"; }\n       terr_tuple_size(e_sz, a_sz) {\n         ret \"expected a tuple with \" + uint::to_str(e_sz, 10u) +\n                 \" elements but found one with \" + uint::to_str(a_sz, 10u) +"}]}