{"sha": "68626e4ef5acfea05812b68f41efa2bcd5bea448", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NjI2ZTRlZjVhY2ZlYTA1ODEyYjY4ZjQxZWZhMmJjZDViZWE0NDg=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-16T22:53:15Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-01-17T00:57:34Z"}, "message": "Draft the working completion", "tree": {"sha": "92ec1a8a69ce3058fd6da44f2f80f2460c9bda1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ec1a8a69ce3058fd6da44f2f80f2460c9bda1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68626e4ef5acfea05812b68f41efa2bcd5bea448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68626e4ef5acfea05812b68f41efa2bcd5bea448", "html_url": "https://github.com/rust-lang/rust/commit/68626e4ef5acfea05812b68f41efa2bcd5bea448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68626e4ef5acfea05812b68f41efa2bcd5bea448/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db335a1bbf1d1bea2c761f67efb4b49831738e31", "url": "https://api.github.com/repos/rust-lang/rust/commits/db335a1bbf1d1bea2c761f67efb4b49831738e31", "html_url": "https://github.com/rust-lang/rust/commit/db335a1bbf1d1bea2c761f67efb4b49831738e31"}], "stats": {"total": 195, "additions": 168, "deletions": 27}, "files": [{"sha": "a40843669bfceb929227298ab90f0a543c4d5a52", "filename": "crates/completion/src/completions/flyimport.rs", "status": "modified", "additions": 138, "deletions": 11, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/68626e4ef5acfea05812b68f41efa2bcd5bea448/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68626e4ef5acfea05812b68f41efa2bcd5bea448/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=68626e4ef5acfea05812b68f41efa2bcd5bea448", "patch": "@@ -20,11 +20,14 @@\n //! # pub mod std { pub mod marker { pub struct PhantomData { } } }\n //! ```\n //!\n+//! Also completes associated items, that require trait imports.\n+//!\n //! .Fuzzy search details\n //!\n //! To avoid an excessive amount of the results returned, completion input is checked for inclusion in the names only\n //! (i.e. in `HashMap` in the `std::collections::HashMap` path).\n-//! For the same reasons, avoids searching for any imports for inputs with their length less that 2 symbols.\n+//! For the same reasons, avoids searching for any path imports for inputs with their length less that 2 symbols\n+//! (but shows all associated items for any input length).\n //!\n //! .Import configuration\n //!\n@@ -46,8 +49,11 @@\n //! capability enabled.\n \n use hir::{ModPath, ScopeDef};\n-use ide_db::helpers::{import_assets::ImportAssets, insert_use::ImportScope};\n-use syntax::AstNode;\n+use ide_db::helpers::{\n+    import_assets::{ImportAssets, ImportCandidate},\n+    insert_use::ImportScope,\n+};\n+use syntax::{AstNode, SyntaxNode, T};\n use test_utils::mark;\n \n use crate::{\n@@ -65,16 +71,24 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if ctx.attribute_under_caret.is_some() || ctx.mod_declaration_under_caret.is_some() {\n         return None;\n     }\n-    let potential_import_name = ctx.token.to_string();\n-    if potential_import_name.len() < 2 {\n-        return None;\n-    }\n+    let potential_import_name = {\n+        let token_kind = ctx.token.kind();\n+        if token_kind == T![.] || token_kind == T![::] {\n+            String::new()\n+        } else {\n+            ctx.token.to_string()\n+        }\n+    };\n+\n     let _p = profile::span(\"import_on_the_fly\").detail(|| potential_import_name.to_string());\n \n-    let import_scope =\n-        ImportScope::find_insert_use_container(ctx.name_ref_syntax.as_ref()?.syntax(), &ctx.sema)?;\n     let user_input_lowercased = potential_import_name.to_lowercase();\n-    let mut all_mod_paths = import_assets(ctx, potential_import_name)?\n+    let import_assets = import_assets(ctx, potential_import_name)?;\n+    let import_scope = ImportScope::find_insert_use_container(\n+        position_for_import(ctx, import_assets.import_candidate())?,\n+        &ctx.sema,\n+    )?;\n+    let mut all_mod_paths = import_assets\n         .search_for_relative_paths(&ctx.sema)\n         .into_iter()\n         .map(|(mod_path, item_in_ns)| {\n@@ -108,6 +122,17 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     Some(())\n }\n \n+fn position_for_import<'a>(\n+    ctx: &'a CompletionContext,\n+    import_candidate: &ImportCandidate,\n+) -> Option<&'a SyntaxNode> {\n+    Some(match import_candidate {\n+        ImportCandidate::Path(_) => ctx.name_ref_syntax.as_ref()?.syntax(),\n+        ImportCandidate::TraitAssocItem(_) => ctx.path_qual.as_ref()?.syntax(),\n+        ImportCandidate::TraitMethod(_) => ctx.dot_receiver.as_ref()?.syntax(),\n+    })\n+}\n+\n fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAssets> {\n     let current_module = ctx.scope.module()?;\n     if let Some(dot_receiver) = &ctx.dot_receiver {\n@@ -117,7 +142,22 @@ fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAs\n             fuzzy_name,\n         )\n     } else {\n-        ImportAssets::for_fuzzy_path(current_module, ctx.path_qual.clone(), fuzzy_name, &ctx.sema)\n+        let fuzzy_name_length = fuzzy_name.len();\n+        let assets_for_path = ImportAssets::for_fuzzy_path(\n+            current_module,\n+            ctx.path_qual.clone(),\n+            fuzzy_name,\n+            &ctx.sema,\n+        );\n+\n+        if matches!(assets_for_path.as_ref()?.import_candidate(), ImportCandidate::Path(_))\n+            && fuzzy_name_length < 2\n+        {\n+            mark::hit!(ignore_short_input_for_path);\n+            None\n+        } else {\n+            assets_for_path\n+        }\n     }\n }\n \n@@ -232,6 +272,30 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn short_paths_are_ignored() {\n+        mark::check!(ignore_short_input_for_path);\n+\n+        check(\n+            r#\"\n+//- /lib.rs crate:dep\n+pub struct FirstStruct;\n+pub mod some_module {\n+    pub struct SecondStruct;\n+    pub struct ThirdStruct;\n+}\n+\n+//- /main.rs crate:main deps:dep\n+use dep::{FirstStruct, some_module::SecondStruct};\n+\n+fn main() {\n+    t$0\n+}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+\n     #[test]\n     fn fuzzy_completions_come_in_specific_order() {\n         mark::check!(certain_fuzzy_order_test);\n@@ -524,4 +588,67 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn zero_input_assoc_item_completion() {\n+        check(\n+            r#\"\n+        //- /lib.rs crate:dep\n+        pub mod test_mod {\n+            pub trait TestTrait {\n+                const SPECIAL_CONST: u8;\n+                type HumbleType;\n+                fn weird_function();\n+                fn random_method(&self);\n+            }\n+            pub struct TestStruct {}\n+            impl TestTrait for TestStruct {\n+                const SPECIAL_CONST: u8 = 42;\n+                type HumbleType = ();\n+                fn weird_function() {}\n+                fn random_method(&self) {}\n+            }\n+        }\n+\n+        //- /main.rs crate:main deps:dep\n+        fn main() {\n+            let test_struct = dep::test_mod::TestStruct {};\n+            test_struct.$0\n+        }\n+        \"#,\n+            expect![[r#\"\n+                        me random_method() (dep::test_mod::TestTrait) fn random_method(&self)\n+                \"#]],\n+        );\n+\n+        check(\n+            r#\"\n+//- /lib.rs crate:dep\n+pub mod test_mod {\n+    pub trait TestTrait {\n+        const SPECIAL_CONST: u8;\n+        type HumbleType;\n+        fn weird_function();\n+        fn random_method(&self);\n+    }\n+    pub struct TestStruct {}\n+    impl TestTrait for TestStruct {\n+        const SPECIAL_CONST: u8 = 42;\n+        type HumbleType = ();\n+        fn weird_function() {}\n+        fn random_method(&self) {}\n+    }\n+}\n+\n+//- /main.rs crate:main deps:dep\n+fn main() {\n+    dep::test_mod::TestStruct::$0\n+}\n+\"#,\n+            expect![[r#\"\n+                ct SPECIAL_CONST (dep::test_mod::TestTrait)\n+                fn weird_function() (dep::test_mod::TestTrait) fn weird_function()\n+        \"#]],\n+        );\n+    }\n }"}, {"sha": "a080b6ca75f7b80a8535dd73d69616d751555887", "filename": "crates/ide_db/src/helpers/import_assets.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/68626e4ef5acfea05812b68f41efa2bcd5bea448/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68626e4ef5acfea05812b68f41efa2bcd5bea448/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fimport_assets.rs?ref=68626e4ef5acfea05812b68f41efa2bcd5bea448", "patch": "@@ -5,7 +5,7 @@ use rustc_hash::FxHashSet;\n use syntax::{ast, AstNode};\n \n use crate::{\n-    imports_locator::{self, AssocItemSearch},\n+    imports_locator::{self, AssocItemSearch, DEFAULT_QUERY_SEARCH_LIMIT},\n     RootDatabase,\n };\n \n@@ -173,6 +173,7 @@ impl ImportAssets {\n         let current_crate = self.module_with_candidate.krate();\n \n         let filter = |candidate: Either<hir::ModuleDef, hir::MacroDef>| {\n+            // TODO kb process all traits at once instead?\n             trait_candidates.clear();\n             match &self.import_candidate {\n                 ImportCandidate::TraitAssocItem(trait_candidate) => {\n@@ -191,6 +192,11 @@ impl ImportAssets {\n                             None,\n                             |_, assoc| {\n                                 if canidate_assoc_item == assoc {\n+                                    if let AssocItem::Function(f) = assoc {\n+                                        if f.self_param(db).is_some() {\n+                                            return None;\n+                                        }\n+                                    }\n                                     Some(assoc_to_module_def(assoc))\n                                 } else {\n                                     None\n@@ -238,17 +244,21 @@ impl ImportAssets {\n             // see https://github.com/rust-analyzer/rust-analyzer/pull/7293#issuecomment-761585032\n             // and https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Blanket.20trait.20impls.20lookup\n             // for the details\n-            NameToImport::Fuzzy(fuzzy_name) => imports_locator::find_similar_imports(\n-                sema,\n-                current_crate,\n-                fuzzy_name.clone(),\n-                match self.import_candidate {\n+            NameToImport::Fuzzy(fuzzy_name) => {\n+                let (assoc_item_search, limit) = match self.import_candidate {\n                     ImportCandidate::TraitAssocItem(_) | ImportCandidate::TraitMethod(_) => {\n-                        AssocItemSearch::AssocItemsOnly\n+                        (AssocItemSearch::AssocItemsOnly, None)\n                     }\n-                    _ => AssocItemSearch::Exclude,\n-                },\n-            ),\n+                    _ => (AssocItemSearch::Exclude, Some(DEFAULT_QUERY_SEARCH_LIMIT)),\n+                };\n+                imports_locator::find_similar_imports(\n+                    sema,\n+                    current_crate,\n+                    fuzzy_name.clone(),\n+                    assoc_item_search,\n+                    limit,\n+                )\n+            }\n         };\n \n         let mut res = unfiltered_imports"}, {"sha": "502e8281a3cd79d30cb0b2404a8219b7ba63ff13", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/68626e4ef5acfea05812b68f41efa2bcd5bea448/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68626e4ef5acfea05812b68f41efa2bcd5bea448/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=68626e4ef5acfea05812b68f41efa2bcd5bea448", "patch": "@@ -15,7 +15,7 @@ use crate::{\n use either::Either;\n use rustc_hash::FxHashSet;\n \n-const QUERY_SEARCH_LIMIT: usize = 40;\n+pub(crate) const DEFAULT_QUERY_SEARCH_LIMIT: usize = 40;\n \n pub fn find_exact_imports<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n@@ -29,11 +29,11 @@ pub fn find_exact_imports<'a>(\n         {\n             let mut local_query = symbol_index::Query::new(name_to_import.clone());\n             local_query.exact();\n-            local_query.limit(QUERY_SEARCH_LIMIT);\n+            local_query.limit(DEFAULT_QUERY_SEARCH_LIMIT);\n             local_query\n         },\n         import_map::Query::new(name_to_import)\n-            .limit(QUERY_SEARCH_LIMIT)\n+            .limit(DEFAULT_QUERY_SEARCH_LIMIT)\n             .name_only()\n             .search_mode(import_map::SearchMode::Equals)\n             .case_sensitive(),\n@@ -51,13 +51,13 @@ pub fn find_similar_imports<'a>(\n     krate: Crate,\n     fuzzy_search_string: String,\n     assoc_item_search: AssocItemSearch,\n+    limit: Option<usize>,\n ) -> Box<dyn Iterator<Item = Either<ModuleDef, MacroDef>> + 'a> {\n     let _p = profile::span(\"find_similar_imports\");\n \n     let mut external_query = import_map::Query::new(fuzzy_search_string.clone())\n         .search_mode(import_map::SearchMode::Fuzzy)\n-        .name_only()\n-        .limit(QUERY_SEARCH_LIMIT);\n+        .name_only();\n \n     match assoc_item_search {\n         AssocItemSearch::Include => {}\n@@ -70,7 +70,11 @@ pub fn find_similar_imports<'a>(\n     }\n \n     let mut local_query = symbol_index::Query::new(fuzzy_search_string);\n-    local_query.limit(QUERY_SEARCH_LIMIT);\n+\n+    if let Some(limit) = limit {\n+        external_query = external_query.limit(limit);\n+        local_query.limit(limit);\n+    }\n \n     let db = sema.db;\n     Box::new(find_imports(sema, krate, local_query, external_query).filter("}]}