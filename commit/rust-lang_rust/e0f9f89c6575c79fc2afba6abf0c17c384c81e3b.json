{"sha": "e0f9f89c6575c79fc2afba6abf0c17c384c81e3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZjlmODljNjU3NWM3OWZjMmFmYmE2YWJmMGMxN2MzODRjODFlM2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-20T10:54:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-21T00:32:42Z"}, "message": "tutorial: Remove confusing discussion about semicolons\n\nThis takes up a lot of words and isn't very clear. The previous\ndiscussion gets they idea across.\n\n/cc: #4217", "tree": {"sha": "989d1f0bd0c729f7f23f20b63e26fc75fe502f82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/989d1f0bd0c729f7f23f20b63e26fc75fe502f82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0f9f89c6575c79fc2afba6abf0c17c384c81e3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f9f89c6575c79fc2afba6abf0c17c384c81e3b", "html_url": "https://github.com/rust-lang/rust/commit/e0f9f89c6575c79fc2afba6abf0c17c384c81e3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0f9f89c6575c79fc2afba6abf0c17c384c81e3b/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cbc0fd0d9cee2f4138226c3bfd612788ddc5433", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cbc0fd0d9cee2f4138226c3bfd612788ddc5433", "html_url": "https://github.com/rust-lang/rust/commit/9cbc0fd0d9cee2f4138226c3bfd612788ddc5433"}], "stats": {"total": 40, "additions": 0, "deletions": 40}, "files": [{"sha": "8a246f897a0beaee8b32e40287b7961eaae35bb2", "filename": "doc/tutorial.md", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e0f9f89c6575c79fc2afba6abf0c17c384c81e3b/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/e0f9f89c6575c79fc2afba6abf0c17c384c81e3b/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=e0f9f89c6575c79fc2afba6abf0c17c384c81e3b", "patch": "@@ -308,46 +308,6 @@ fn is_four(x: int) -> bool {\n }\n ~~~~\n \n-If all those things are expressions, you might conclude that you have\n-to add a terminating semicolon after *every* statement, even ones that\n-are not traditionally terminated with a semicolon in C (like `while`).\n-That is not the case, though. Expressions that end in a block only\n-need a semicolon if that block contains a trailing expression. `while`\n-loops do not allow trailing expressions, and `if` statements tend to\n-only have a trailing expression when you want to use their value for\n-something\u2014in which case you'll have embedded it in a bigger statement.\n-\n-~~~\n-# fn foo() -> bool { true }\n-# fn bar() -> bool { true }\n-# fn baz() -> bool { true }\n-// `let` is not an expression, so it is semicolon-terminated;\n-let x = foo();\n-\n-// When used in statement position, bracy expressions do not\n-// usually need to be semicolon terminated\n-if x {\n-    bar();\n-} else {\n-    baz();\n-} // No semi-colon\n-\n-// Although, if `bar` and `baz` have non-nil return types, and\n-// we try to use them as the tail expressions, rustc will\n-// make us terminate the expression.\n-if x {\n-    bar()\n-} else {\n-    baz()\n-}; // Semi-colon to ignore non-nil block type\n-\n-// An `if` embedded in `let` again requires a semicolon to terminate\n-// the `let` statement\n-let y = if x { foo() } else { bar() };\n-~~~\n-\n-This may sound intricate, but it is super-useful and will grow on you.\n-\n ## Types\n \n The basic types include the usual boolean, integral, and floating-point types."}]}