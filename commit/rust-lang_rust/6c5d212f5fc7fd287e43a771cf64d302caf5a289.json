{"sha": "6c5d212f5fc7fd287e43a771cf64d302caf5a289", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNWQyMTJmNWZjN2ZkMjg3ZTQzYTc3MWNmNjRkMzAyY2FmNWEyODk=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-24T19:25:23Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T11:52:07Z"}, "message": "Make exact_paths a non-optional field on RustdocVisitor\n\nAlso privatizes needlessly public methods to enforce which methods\ncallers are intended to call, i.e., only `new` and `visit`.", "tree": {"sha": "39f93da8b6e465286b817157dffa6e0294fe2e31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39f93da8b6e465286b817157dffa6e0294fe2e31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c5d212f5fc7fd287e43a771cf64d302caf5a289", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c5d212f5fc7fd287e43a771cf64d302caf5a289", "html_url": "https://github.com/rust-lang/rust/commit/6c5d212f5fc7fd287e43a771cf64d302caf5a289", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c5d212f5fc7fd287e43a771cf64d302caf5a289/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fadc4524d0c5b51f945422f8417e30d88ed0164", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fadc4524d0c5b51f945422f8417e30d88ed0164", "html_url": "https://github.com/rust-lang/rust/commit/2fadc4524d0c5b51f945422f8417e30d88ed0164"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "1676da34201d66bb15f88059be3af3613cfc2200", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c5d212f5fc7fd287e43a771cf64d302caf5a289/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c5d212f5fc7fd287e43a771cf64d302caf5a289/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=6c5d212f5fc7fd287e43a771cf64d302caf5a289", "patch": "@@ -29,7 +29,7 @@ pub struct RustdocVisitor<'a, 'tcx> {\n     inlining: bool,\n     /// Are the current module and all of its parents public?\n     inside_public_path: bool,\n-    exact_paths: Option<FxHashMap<DefId, Vec<String>>>,\n+    exact_paths: FxHashMap<DefId, Vec<String>>,\n }\n \n impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n@@ -44,17 +44,16 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             view_item_stack: stack,\n             inlining: false,\n             inside_public_path: true,\n-            exact_paths: Some(FxHashMap::default()),\n+            exact_paths: FxHashMap::default(),\n         }\n     }\n \n     fn store_path(&mut self, did: DefId) {\n         // We can't use the entry API, as that keeps the mutable borrow of `self` active\n         // when we try to use `cx`.\n-        let exact_paths = self.exact_paths.as_mut().unwrap();\n-        if exact_paths.get(&did).is_none() {\n+        if self.exact_paths.get(&did).is_none() {\n             let path = def_id_to_path(self.cx, did, self.cx.crate_name.clone());\n-            exact_paths.insert(did, path);\n+            self.exact_paths.insert(did, path);\n         }\n     }\n \n@@ -82,12 +81,12 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         );\n         module.is_crate = true;\n \n-        self.cx.renderinfo.borrow_mut().exact_paths = self.exact_paths.take().unwrap();\n+        self.cx.renderinfo.borrow_mut().exact_paths = self.exact_paths;\n \n         module\n     }\n \n-    pub fn visit_variant_data(&mut self, item: &'tcx hir::Item,\n+    fn visit_variant_data(&mut self, item: &'tcx hir::Item,\n                               name: ast::Name, sd: &'tcx hir::VariantData,\n                               generics: &'tcx hir::Generics) -> Struct<'tcx> {\n         debug!(\"visiting struct\");\n@@ -106,7 +105,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n-    pub fn visit_union_data(&mut self, item: &'tcx hir::Item,\n+    fn visit_union_data(&mut self, item: &'tcx hir::Item,\n                             name: ast::Name, sd: &'tcx hir::VariantData,\n                             generics: &'tcx hir::Generics) -> Union<'tcx> {\n         debug!(\"visiting union\");\n@@ -125,7 +124,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n-    pub fn visit_enum_def(&mut self, it: &'tcx hir::Item,\n+    fn visit_enum_def(&mut self, it: &'tcx hir::Item,\n                           name: ast::Name, def: &'tcx hir::EnumDef,\n                           generics: &'tcx hir::Generics) -> Enum<'tcx> {\n         debug!(\"visiting enum\");\n@@ -150,7 +149,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n-    pub fn visit_fn(&mut self, om: &mut Module<'tcx>, item: &'tcx hir::Item,\n+    fn visit_fn(&mut self, om: &mut Module<'tcx>, item: &'tcx hir::Item,\n                     name: ast::Name, decl: &'tcx hir::FnDecl,\n                     header: hir::FnHeader,\n                     generics: &'tcx hir::Generics,\n@@ -223,7 +222,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         }\n     }\n \n-    pub fn visit_mod_contents(&mut self, span: Span, attrs: &'tcx hir::HirVec<ast::Attribute>,\n+    fn visit_mod_contents(&mut self, span: Span, attrs: &'tcx hir::HirVec<ast::Attribute>,\n                               vis: &'tcx hir::Visibility, id: hir::HirId,\n                               m: &'tcx hir::Mod,\n                               name: Option<ast::Name>) -> Module<'tcx> {\n@@ -363,7 +362,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         ret\n     }\n \n-    pub fn visit_item(&mut self, item: &'tcx hir::Item,\n+    fn visit_item(&mut self, item: &'tcx hir::Item,\n                       renamed: Option<ast::Ident>, om: &mut Module<'tcx>) {\n         debug!(\"visiting item {:?}\", item);\n         let ident = renamed.unwrap_or(item.ident);"}]}