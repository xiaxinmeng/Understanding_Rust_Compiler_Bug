{"sha": "20de556a26dd1fb10a3cbaf9bc02c27015edb406", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZGU1NTZhMjZkZDFmYjEwYTNjYmFmOWJjMDJjMjcwMTVlZGI0MDY=", "commit": {"author": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-08-24T02:41:03Z"}, "committer": {"name": "Roxane", "email": "roxane.fruytier@hotmail.com", "date": "2021-08-28T23:27:32Z"}, "message": "Handle match with non axhaustive variants in closures", "tree": {"sha": "5eb8929b3cab149f2ad0271bee356a52ef837ef1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb8929b3cab149f2ad0271bee356a52ef837ef1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20de556a26dd1fb10a3cbaf9bc02c27015edb406", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20de556a26dd1fb10a3cbaf9bc02c27015edb406", "html_url": "https://github.com/rust-lang/rust/commit/20de556a26dd1fb10a3cbaf9bc02c27015edb406", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20de556a26dd1fb10a3cbaf9bc02c27015edb406/comments", "author": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "roxelo", "id": 12419401, "node_id": "MDQ6VXNlcjEyNDE5NDAx", "avatar_url": "https://avatars.githubusercontent.com/u/12419401?v=4", "gravatar_id": "", "url": "https://api.github.com/users/roxelo", "html_url": "https://github.com/roxelo", "followers_url": "https://api.github.com/users/roxelo/followers", "following_url": "https://api.github.com/users/roxelo/following{/other_user}", "gists_url": "https://api.github.com/users/roxelo/gists{/gist_id}", "starred_url": "https://api.github.com/users/roxelo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/roxelo/subscriptions", "organizations_url": "https://api.github.com/users/roxelo/orgs", "repos_url": "https://api.github.com/users/roxelo/repos", "events_url": "https://api.github.com/users/roxelo/events{/privacy}", "received_events_url": "https://api.github.com/users/roxelo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "926f069950d7211a87fbd81778b420de420daad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/926f069950d7211a87fbd81778b420de420daad7", "html_url": "https://github.com/rust-lang/rust/commit/926f069950d7211a87fbd81778b420de420daad7"}], "stats": {"total": 133, "additions": 131, "deletions": 2}, "files": [{"sha": "3d483e322a8510dc379acf2f383745d33fbb359b", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/20de556a26dd1fb10a3cbaf9bc02c27015edb406/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20de556a26dd1fb10a3cbaf9bc02c27015edb406/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=20de556a26dd1fb10a3cbaf9bc02c27015edb406", "patch": "@@ -15,7 +15,7 @@ use rustc_index::vec::Idx;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::hir::place::ProjectionKind;\n use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty::{self, adjustment, Ty, TyCtxt};\n+use rustc_middle::ty::{self, adjustment, AdtKind, Ty, TyCtxt};\n use rustc_target::abi::VariantIdx;\n use std::iter;\n \n@@ -845,5 +845,20 @@ fn delegate_consume<'a, 'tcx>(\n }\n \n fn is_multivariant_adt(ty: Ty<'tcx>) -> bool {\n-    if let ty::Adt(def, _) = ty.kind() { def.variants.len() > 1 } else { false }\n+    if let ty::Adt(def, _) = ty.kind() {\n+        // Note that if a non-exhaustive SingleVariant is defined in another crate, we need\n+        // to assume that more cases will be added to the variant in the future. This mean\n+        // that we should handle non-exhaustive SingleVariant the same way we would handle\n+        // a MultiVariant.\n+        // If the variant is not local it must be defined in another crate.\n+        let is_non_exhaustive = match def.adt_kind() {\n+            AdtKind::Struct | AdtKind::Union => {\n+                def.non_enum_variant().is_field_list_non_exhaustive()\n+            }\n+            AdtKind::Enum => def.is_variant_list_non_exhaustive(),\n+        };\n+        def.variants.len() > 1 || (!def.did.is_local() && is_non_exhaustive)\n+    } else {\n+        false\n+    }\n }"}, {"sha": "4060c409355a18978c7600ea4612659c6285fbc9", "filename": "src/test/ui/closures/2229_closure_analysis/auxiliary/match_non_exhaustive_lib.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/20de556a26dd1fb10a3cbaf9bc02c27015edb406/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fauxiliary%2Fmatch_non_exhaustive_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20de556a26dd1fb10a3cbaf9bc02c27015edb406/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fauxiliary%2Fmatch_non_exhaustive_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fauxiliary%2Fmatch_non_exhaustive_lib.rs?ref=20de556a26dd1fb10a3cbaf9bc02c27015edb406", "patch": "@@ -0,0 +1,10 @@\n+#[non_exhaustive]\n+pub enum E1 {}\n+\n+#[non_exhaustive]\n+pub enum E2 { A, B }\n+\n+#[non_exhaustive]\n+pub enum E3 { C }\n+\n+pub enum E4 { D }"}, {"sha": "318673ef847e516bb3cfae0b9a6e156030e76828", "filename": "src/test/ui/closures/2229_closure_analysis/non-exhaustive-match.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/20de556a26dd1fb10a3cbaf9bc02c27015edb406/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20de556a26dd1fb10a3cbaf9bc02c27015edb406/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnon-exhaustive-match.rs?ref=20de556a26dd1fb10a3cbaf9bc02c27015edb406", "patch": "@@ -0,0 +1,54 @@\n+// edition:2021\n+\n+// aux-build:match_non_exhaustive_lib.rs\n+\n+/* The error message for non-exhaustive matches on non-local enums\n+ * marked as non-exhaustive should mention the fact that the enum\n+ * is marked as non-exhaustive (issue #85227).\n+ */\n+\n+// Ignore non_exhaustive in the same crate\n+#[non_exhaustive]\n+enum L1 { A, B }\n+enum L2 { C }\n+\n+extern crate match_non_exhaustive_lib;\n+use match_non_exhaustive_lib::{E1, E2, E3, E4};\n+\n+fn foo() -> (L1, L2) {todo!()}\n+fn bar() -> (E1, E2, E3, E4) {todo!()}\n+\n+fn main() {\n+    let (l1, l2) = foo();\n+    // No error for enums defined in this crate\n+    let _a = || { match l1 { L1::A => (), L1::B => () } };\n+    // (except if the match is already non-exhaustive)\n+    let _b = || { match l1 { L1::A => () } };\n+    //~^ ERROR: non-exhaustive patterns: `B` not covered [E0004]\n+\n+    // l2 should not be captured as it is a non-exhaustive SingleVariant\n+    // defined in this crate\n+    let _c = || { match l2 { L2::C => (), _ => () }  };\n+    let mut mut_l2 = l2;\n+    _c();\n+\n+    // E1 is not visibly uninhabited from here\n+    let (e1, e2, e3, e4) = bar();\n+    let _d = || { match e1 {} };\n+    //~^ ERROR: non-exhaustive patterns: type `E1` is non-empty [E0004]\n+    let _e = || { match e2 { E2::A => (), E2::B => () } };\n+    //~^ ERROR: non-exhaustive patterns: `_` not covered [E0004]\n+    let _f = || { match e2 { E2::A => (), E2::B => (), _ => () }  };\n+\n+    // e3 should be captured as it is a non-exhaustive SingleVariant\n+    // defined in another crate\n+    let _g = || { match e3 { E3::C => (), _ => () }  };\n+    let mut mut_e3 = e3;\n+    //~^ ERROR: cannot move out of `e3` because it is borrowed\n+    _g();\n+\n+    // e4 should not be captured as it is a SingleVariant\n+    let _h = || { match e4 { E4::D => (), _ => () }  };\n+    let mut mut_e4 = e4;\n+    _h();\n+}"}, {"sha": "91ffe1a47f4134f460d65cb6e933cee0f6a2ea09", "filename": "src/test/ui/closures/2229_closure_analysis/non-exhaustive-match.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/20de556a26dd1fb10a3cbaf9bc02c27015edb406/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20de556a26dd1fb10a3cbaf9bc02c27015edb406/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnon-exhaustive-match.stderr?ref=20de556a26dd1fb10a3cbaf9bc02c27015edb406", "patch": "@@ -0,0 +1,50 @@\n+error[E0004]: non-exhaustive patterns: `B` not covered\n+  --> $DIR/non-exhaustive-match.rs:26:25\n+   |\n+LL | enum L1 { A, B }\n+   | ----------------\n+   | |            |\n+   | |            not covered\n+   | `L1` defined here\n+...\n+LL |     let _b = || { match l1 { L1::A => () } };\n+   |                         ^^ pattern `B` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `L1`\n+\n+error[E0004]: non-exhaustive patterns: type `E1` is non-empty\n+  --> $DIR/non-exhaustive-match.rs:37:25\n+   |\n+LL |     let _d = || { match e1 {} };\n+   |                         ^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `E1`, which is marked as non-exhaustive\n+\n+error[E0004]: non-exhaustive patterns: `_` not covered\n+  --> $DIR/non-exhaustive-match.rs:39:25\n+   |\n+LL |     let _e = || { match e2 { E2::A => (), E2::B => () } };\n+   |                         ^^ pattern `_` not covered\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `E2`, which is marked as non-exhaustive\n+\n+error[E0505]: cannot move out of `e3` because it is borrowed\n+  --> $DIR/non-exhaustive-match.rs:46:22\n+   |\n+LL |     let _g = || { match e3 { E3::C => (), _ => () }  };\n+   |              --         -- borrow occurs due to use in closure\n+   |              |\n+   |              borrow of `e3` occurs here\n+LL |     let mut mut_e3 = e3;\n+   |                      ^^ move out of `e3` occurs here\n+LL |\n+LL |     _g();\n+   |     -- borrow later used here\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0004, E0505.\n+For more information about an error, try `rustc --explain E0004`."}]}