{"sha": "90bc832b22aefb2a382b3465793df7e528351aa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwYmM4MzJiMjJhZWZiMmEzODJiMzQ2NTc5M2RmN2U1MjgzNTFhYTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T20:05:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-27T20:05:33Z"}, "message": "remove underscores", "tree": {"sha": "c4955035b53573101aef9a9cbb776ce6c6a90c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4955035b53573101aef9a9cbb776ce6c6a90c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90bc832b22aefb2a382b3465793df7e528351aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90bc832b22aefb2a382b3465793df7e528351aa1", "html_url": "https://github.com/rust-lang/rust/commit/90bc832b22aefb2a382b3465793df7e528351aa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90bc832b22aefb2a382b3465793df7e528351aa1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f14902f67bbc5f68cb700b6b929b269d3d51a4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f14902f67bbc5f68cb700b6b929b269d3d51a4a9", "html_url": "https://github.com/rust-lang/rust/commit/f14902f67bbc5f68cb700b6b929b269d3d51a4a9"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "498a5c2dd9db45df2e60e1138ab46d1a115df459", "filename": "crates/ra_analysis/src/hir/db.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fdb.rs?ref=90bc832b22aefb2a382b3465793df7e528351aa1", "patch": "@@ -25,37 +25,37 @@ pub(crate) trait HirDatabase: SyntaxDatabase + IdDatabase {\n             use fn crate::hir::function::imp::fn_scopes;\n         }\n \n-        fn _file_items(file_id: FileId) -> Arc<FileItems> {\n+        fn file_items(file_id: FileId) -> Arc<FileItems> {\n             type FileItemsQuery;\n             storage dependencies;\n             use fn crate::hir::module::nameres::file_items;\n         }\n \n-        fn _file_item(file_id: FileId, file_item_id: FileItemId) -> SyntaxNode {\n+        fn file_item(file_id: FileId, file_item_id: FileItemId) -> SyntaxNode {\n             type FileItemQuery;\n             storage dependencies;\n             use fn crate::hir::module::nameres::file_item;\n         }\n \n-        fn _input_module_items(source_root_id: SourceRootId, module_id: ModuleId) -> Cancelable<Arc<InputModuleItems>> {\n+        fn input_module_items(source_root_id: SourceRootId, module_id: ModuleId) -> Cancelable<Arc<InputModuleItems>> {\n             type InputModuleItemsQuery;\n             use fn crate::hir::module::nameres::input_module_items;\n         }\n-        fn _item_map(source_root_id: SourceRootId) -> Cancelable<Arc<ItemMap>> {\n+        fn item_map(source_root_id: SourceRootId) -> Cancelable<Arc<ItemMap>> {\n             type ItemMapQuery;\n             use fn crate::hir::module::nameres::item_map;\n         }\n-        fn _module_tree(source_root_id: SourceRootId) -> Cancelable<Arc<ModuleTree>> {\n+        fn module_tree(source_root_id: SourceRootId) -> Cancelable<Arc<ModuleTree>> {\n             type ModuleTreeQuery;\n             use fn crate::hir::module::imp::module_tree;\n         }\n-        fn _fn_syntax(fn_id: FnId) -> FnDefNode {\n+        fn fn_syntax(fn_id: FnId) -> FnDefNode {\n             type FnSyntaxQuery;\n             // Don't retain syntax trees in memory\n             storage dependencies;\n             use fn crate::hir::function::imp::fn_syntax;\n         }\n-        fn _submodules(source: ModuleSource) -> Cancelable<Arc<Vec<crate::hir::module::imp::Submodule>>> {\n+        fn submodules(source: ModuleSource) -> Cancelable<Arc<Vec<crate::hir::module::imp::Submodule>>> {\n             type SubmodulesQuery;\n             use fn crate::hir::module::imp::submodules;\n         }"}, {"sha": "5f5f68ac5739f69277941e22e5cb2b406b5bdcdf", "filename": "crates/ra_analysis/src/hir/function/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Ffunction%2Fimp.rs?ref=90bc832b22aefb2a382b3465793df7e528351aa1", "patch": "@@ -15,7 +15,7 @@ pub(crate) fn fn_syntax(db: &impl HirDatabase, fn_id: FnId) -> FnDefNode {\n }\n \n pub(crate) fn fn_scopes(db: &impl HirDatabase, fn_id: FnId) -> Arc<FnScopes> {\n-    let syntax = db._fn_syntax(fn_id);\n+    let syntax = db.fn_syntax(fn_id);\n     let res = FnScopes::new(syntax.borrowed());\n     Arc::new(res)\n }"}, {"sha": "f9853584edc0c21040746e6d87820c897058fdde", "filename": "crates/ra_analysis/src/hir/module/imp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fimp.rs?ref=90bc832b22aefb2a382b3465793df7e528351aa1", "patch": "@@ -135,7 +135,7 @@ fn build_subtree(\n         parent,\n         children: Vec::new(),\n     });\n-    for sub in db._submodules(source)?.iter() {\n+    for sub in db.submodules(source)?.iter() {\n         let link = tree.push_link(LinkData {\n             name: sub.name().clone(),\n             owner: id,"}, {"sha": "55b6639be06e7f247e68a3a0109a3207c30fd657", "filename": "crates/ra_analysis/src/hir/module/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fmod.rs?ref=90bc832b22aefb2a382b3465793df7e528351aa1", "patch": "@@ -64,7 +64,7 @@ impl ModuleDescriptor {\n         module_source: ModuleSource,\n     ) -> Cancelable<Option<ModuleDescriptor>> {\n         let source_root_id = db.file_source_root(file_id);\n-        let module_tree = db._module_tree(source_root_id)?;\n+        let module_tree = db.module_tree(source_root_id)?;\n \n         let res = match module_tree.any_module_for_source(module_source) {\n             None => None,\n@@ -82,7 +82,7 @@ impl ModuleDescriptor {\n         source_root_id: SourceRootId,\n         module_id: ModuleId,\n     ) -> Cancelable<ModuleDescriptor> {\n-        let module_tree = db._module_tree(source_root_id)?;\n+        let module_tree = db.module_tree(source_root_id)?;\n         let res = ModuleDescriptor {\n             tree: module_tree,\n             source_root_id,\n@@ -148,7 +148,7 @@ impl ModuleDescriptor {\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n     pub(crate) fn scope(&self, db: &impl HirDatabase) -> Cancelable<ModuleScope> {\n-        let item_map = db._item_map(self.source_root_id)?;\n+        let item_map = db.item_map(self.source_root_id)?;\n         let res = item_map.per_module[&self.module_id].clone();\n         Ok(res)\n     }"}, {"sha": "eaf9f9373b5bb649677e12f5fa0696e4097261b6", "filename": "crates/ra_analysis/src/hir/module/nameres.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bc832b22aefb2a382b3465793df7e528351aa1/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhir%2Fmodule%2Fnameres.rs?ref=90bc832b22aefb2a382b3465793df7e528351aa1", "patch": "@@ -91,7 +91,7 @@ pub(crate) fn file_item(\n     file_id: FileId,\n     file_item_id: FileItemId,\n ) -> SyntaxNode {\n-    db._file_items(file_id)[file_item_id].clone()\n+    db.file_items(file_id)[file_item_id].clone()\n }\n \n /// Item map is the result of the name resolution. Item map contains, for each\n@@ -155,7 +155,7 @@ pub(crate) struct NamedImport {\n \n impl NamedImport {\n     pub(crate) fn range(&self, db: &impl HirDatabase, file_id: FileId) -> TextRange {\n-        let syntax = db._file_item(file_id, self.file_item_id);\n+        let syntax = db.file_item(file_id, self.file_item_id);\n         let offset = syntax.borrowed().range().start();\n         self.relative_range + offset\n     }\n@@ -172,9 +172,9 @@ pub(crate) fn input_module_items(\n     source_root: SourceRootId,\n     module_id: ModuleId,\n ) -> Cancelable<Arc<InputModuleItems>> {\n-    let module_tree = db._module_tree(source_root)?;\n+    let module_tree = db.module_tree(source_root)?;\n     let source = module_id.source(&module_tree);\n-    let file_items = db._file_items(source.file_id());\n+    let file_items = db.file_items(source.file_id());\n     let res = match source.resolve(db) {\n         ModuleSourceNode::SourceFile(it) => {\n             let items = it.borrowed().items();\n@@ -197,11 +197,11 @@ pub(crate) fn item_map(\n     source_root: SourceRootId,\n ) -> Cancelable<Arc<ItemMap>> {\n     let start = Instant::now();\n-    let module_tree = db._module_tree(source_root)?;\n+    let module_tree = db.module_tree(source_root)?;\n     let input = module_tree\n         .modules()\n         .map(|id| {\n-            let items = db._input_module_items(source_root, id)?;\n+            let items = db.input_module_items(source_root, id)?;\n             Ok((id, items))\n         })\n         .collect::<Cancelable<FxHashMap<_, _>>>()?;\n@@ -460,7 +460,7 @@ mod tests {\n             .unwrap()\n             .unwrap();\n         let module_id = descr.module_id;\n-        (db._item_map(source_root).unwrap(), module_id)\n+        (db.item_map(source_root).unwrap(), module_id)\n     }\n \n     #[test]\n@@ -513,9 +513,9 @@ mod tests {\n         {\n             let db = host.analysis().imp.db;\n             let events = db.log_executed(|| {\n-                db._item_map(source_root).unwrap();\n+                db.item_map(source_root).unwrap();\n             });\n-            assert!(format!(\"{:?}\", events).contains(\"_item_map\"))\n+            assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n         }\n \n         let mut change = AnalysisChange::new();\n@@ -537,7 +537,7 @@ mod tests {\n         {\n             let db = host.analysis().imp.db;\n             let events = db.log_executed(|| {\n-                db._item_map(source_root).unwrap();\n+                db.item_map(source_root).unwrap();\n             });\n             assert!(\n                 !format!(\"{:?}\", events).contains(\"_item_map\"),"}]}