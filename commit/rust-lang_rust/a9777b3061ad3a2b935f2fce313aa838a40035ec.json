{"sha": "a9777b3061ad3a2b935f2fce313aa838a40035ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Nzc3YjMwNjFhZDNhMmI5MzVmMmZjZTMxM2FhODM4YTQwMDM1ZWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T03:02:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-08T03:02:36Z"}, "message": "Rollup merge of #65046 - sinkuu:cell_reorder, r=shepmaster\n\nMake `Cell::new` method come first in documentation\n\nMethods to create a thing usually comes first in `std` documentation, and `Cell` has been an exception. Also, `T: Copy` specialized methods should not be on top of the page. (This had led me to miss that most of its methods are not bounded by `Copy`...)", "tree": {"sha": "f1143be481f9b6ea55117f165fe21c9d7bc30141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1143be481f9b6ea55117f165fe21c9d7bc30141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9777b3061ad3a2b935f2fce313aa838a40035ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdm/xNCRBK7hj4Ov3rIwAAdHIIAKCvl8CwWwxVrVzAGlAWUQuv\nPf/agWTtvDOKyM4yhKE1lBzlf2NRpkUKgK2H9uWs3F3w8amJnhbi0FjvCg7STILa\nvQ5KAUlXMgTeRb11Q8bUXHGOF9UMCATL1U8E8loFq2Ypg65WLT1ytUrXOVe8I3JT\nxh3pGv6vc309TEeZx3fv/08Uv8ljAvBHcEdf/zGo738appg6ltYdYsPw1mdH083N\nZiN0FX70+XvY9LnJk84ruG9/qaGbRUxuVPKBAQsZa/ZU38ybk9oh1xea4szXdwxw\nPEfBl56nIdH8bfktWYjy507vp7LU+Tx1G2VO+3R7CCBBTXKh1yT6KMDexVRLyz8=\n=0pjD\n-----END PGP SIGNATURE-----\n", "payload": "tree f1143be481f9b6ea55117f165fe21c9d7bc30141\nparent 473709541610bff6642b7abe67b5fbeb2554bdd1\nparent 375469149c123d72d188bed3fbe468304a1b6004\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570503756 +0200\ncommitter GitHub <noreply@github.com> 1570503756 +0200\n\nRollup merge of #65046 - sinkuu:cell_reorder, r=shepmaster\n\nMake `Cell::new` method come first in documentation\n\nMethods to create a thing usually comes first in `std` documentation, and `Cell` has been an exception. Also, `T: Copy` specialized methods should not be on top of the page. (This had led me to miss that most of its methods are not bounded by `Copy`...)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9777b3061ad3a2b935f2fce313aa838a40035ec", "html_url": "https://github.com/rust-lang/rust/commit/a9777b3061ad3a2b935f2fce313aa838a40035ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9777b3061ad3a2b935f2fce313aa838a40035ec/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "473709541610bff6642b7abe67b5fbeb2554bdd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/473709541610bff6642b7abe67b5fbeb2554bdd1", "html_url": "https://github.com/rust-lang/rust/commit/473709541610bff6642b7abe67b5fbeb2554bdd1"}, {"sha": "375469149c123d72d188bed3fbe468304a1b6004", "url": "https://api.github.com/repos/rust-lang/rust/commits/375469149c123d72d188bed3fbe468304a1b6004", "html_url": "https://github.com/rust-lang/rust/commit/375469149c123d72d188bed3fbe468304a1b6004"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "fda103a52d8bc851b8fa4d07f277eb27302d425f", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a9777b3061ad3a2b935f2fce313aa838a40035ec/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9777b3061ad3a2b935f2fce313aa838a40035ec/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=a9777b3061ad3a2b935f2fce313aa838a40035ec", "patch": "@@ -229,52 +229,6 @@ pub struct Cell<T: ?Sized> {\n     value: UnsafeCell<T>,\n }\n \n-impl<T:Copy> Cell<T> {\n-    /// Returns a copy of the contained value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    ///\n-    /// let five = c.get();\n-    /// ```\n-    #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn get(&self) -> T {\n-        unsafe{ *self.value.get() }\n-    }\n-\n-    /// Updates the contained value using a function and returns the new value.\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(cell_update)]\n-    ///\n-    /// use std::cell::Cell;\n-    ///\n-    /// let c = Cell::new(5);\n-    /// let new = c.update(|x| x + 1);\n-    ///\n-    /// assert_eq!(new, 6);\n-    /// assert_eq!(c.get(), 6);\n-    /// ```\n-    #[inline]\n-    #[unstable(feature = \"cell_update\", issue = \"50186\")]\n-    pub fn update<F>(&self, f: F) -> T\n-    where\n-        F: FnOnce(T) -> T,\n-    {\n-        let old = self.get();\n-        let new = f(old);\n-        self.set(new);\n-        new\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n unsafe impl<T: ?Sized> Send for Cell<T> where T: Send {}\n \n@@ -448,6 +402,52 @@ impl<T> Cell<T> {\n     }\n }\n \n+impl<T:Copy> Cell<T> {\n+    /// Returns a copy of the contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let five = c.get();\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn get(&self) -> T {\n+        unsafe{ *self.value.get() }\n+    }\n+\n+    /// Updates the contained value using a function and returns the new value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cell_update)]\n+    ///\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    /// let new = c.update(|x| x + 1);\n+    ///\n+    /// assert_eq!(new, 6);\n+    /// assert_eq!(c.get(), 6);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"cell_update\", issue = \"50186\")]\n+    pub fn update<F>(&self, f: F) -> T\n+    where\n+        F: FnOnce(T) -> T,\n+    {\n+        let old = self.get();\n+        let new = f(old);\n+        self.set(new);\n+        new\n+    }\n+}\n+\n impl<T: ?Sized> Cell<T> {\n     /// Returns a raw pointer to the underlying data in this cell.\n     ///"}]}