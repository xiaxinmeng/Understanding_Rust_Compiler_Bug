{"sha": "11eae72e6fd44935587badad39bfb46ca23b24ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZWFlNzJlNmZkNDQ5MzU1ODdiYWRhZDM5YmZiNDZjYTIzYjI0YmE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-03-28T20:41:06Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-03-28T20:41:06Z"}, "message": "Merge pull request #780 from mcarton/doc\n\nDoc stuff", "tree": {"sha": "7e308b1f87f9532fbc656b64269af4832949d8c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e308b1f87f9532fbc656b64269af4832949d8c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11eae72e6fd44935587badad39bfb46ca23b24ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11eae72e6fd44935587badad39bfb46ca23b24ba", "html_url": "https://github.com/rust-lang/rust/commit/11eae72e6fd44935587badad39bfb46ca23b24ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11eae72e6fd44935587badad39bfb46ca23b24ba/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c93048bc9e3ea275af45d3de9ce5fc9d288f5f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c93048bc9e3ea275af45d3de9ce5fc9d288f5f2", "html_url": "https://github.com/rust-lang/rust/commit/1c93048bc9e3ea275af45d3de9ce5fc9d288f5f2"}, {"sha": "371a5537eb0435fef43763d1bbbc21007ac707e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/371a5537eb0435fef43763d1bbbc21007ac707e4", "html_url": "https://github.com/rust-lang/rust/commit/371a5537eb0435fef43763d1bbbc21007ac707e4"}], "stats": {"total": 269, "additions": 222, "deletions": 47}, "files": [{"sha": "43caa80543a860be41b7407951d0ede9e19cb210", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -14,7 +14,7 @@ Table of contents:\n * [License](#license)\n \n ##Lints\n-There are 136 lints included in this crate:\n+There are 137 lints included in this crate:\n \n name                                                                                                                 | default | meaning\n ---------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -43,6 +43,7 @@ name\n [cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                       | warn    | finds functions that should be split up into multiple functions\n [deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                               | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n [derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                             | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n+[doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                         | warn    | checks for the presence of `_`, `::` or camel-case outside ticks in documentation\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                 | warn    | call to `std::mem::drop` with a reference instead of an owned value, which will not call the `Drop::drop` method on the underlying value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)       | warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                             | warn    | empty `loop {}` detected"}, {"sha": "28fc311507d9a424c5a7f9060c6b6929476d068c", "filename": "src/bit_mask.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -13,7 +13,7 @@ use utils::span_lint;\n /// The formula for detecting if an expression of the type  `_ <bit_op> m <cmp_op> c` (where `<bit_op>`\n /// is one of {`&`, `|`} and `<cmp_op>` is one of {`!=`, `>=`, `>`, `!=`, `>=`, `>`}) can be determined from the following table:\n ///\n-/// |Comparison  |Bit-Op|Example     |is always|Formula               |\n+/// |Comparison  |Bit Op|Example     |is always|Formula               |\n /// |------------|------|------------|---------|----------------------|\n /// |`==` or `!=`| `&`  |`x & 2 == 3`|`false`  |`c & m != c`          |\n /// |`<`  or `>=`| `&`  |`x & 2 < 3` |`true`   |`m < c`               |\n@@ -38,7 +38,7 @@ declare_lint! {\n \n /// **What it does:** This lint checks for bit masks in comparisons which can be removed without changing the outcome. The basic structure can be seen in the following table:\n ///\n-/// |Comparison|Bit-Op   |Example    |equals |\n+/// |Comparison| Bit Op  |Example    |equals |\n /// |----------|---------|-----------|-------|\n /// |`>` / `<=`|`|` / `^`|`x | 2 > 3`|`x > 3`|\n /// |`<` / `>=`|`|` / `^`|`x ^ 1 < 4`|`x < 4`|\n@@ -61,7 +61,7 @@ declare_lint! {\n /// is one of {`&`, '|'} and `<cmp_op>` is one of {`!=`, `>=`, `>` ,\n /// `!=`, `>=`, `>`}) can be determined from the following table:\n ///\n-/// |Comparison  |Bit-Op|Example     |is always|Formula               |\n+/// |Comparison  |Bit Op|Example     |is always|Formula               |\n /// |------------|------|------------|---------|----------------------|\n /// |`==` or `!=`| `&`  |`x & 2 == 3`|`false`  |`c & m != c`          |\n /// |`<`  or `>=`| `&`  |`x & 2 < 3` |`true`   |`m < c`               |\n@@ -75,7 +75,7 @@ declare_lint! {\n /// There is also a lint that warns on ineffective masks that is *warn*\n /// by default.\n ///\n-/// |Comparison|Bit-Op   |Example    |equals |Formula|\n+/// |Comparison|Bit Op   |Example    |equals |Formula|\n /// |`>` / `<=`|`|` / `^`|`x | 2 > 3`|`x > 3`|`\u00b9 && m <= c`|\n /// |`<` / `>=`|`|` / `^`|`x ^ 1 < 4`|`x < 4`|`\u00b9 && m < c` |\n ///"}, {"sha": "97a99dda4b5b40ff372f244bd125b90ffd25ed51", "filename": "src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconsts.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -30,7 +30,7 @@ impl From<FloatTy> for FloatWidth {\n     }\n }\n \n-/// a Lit_-like enum to fold constant `Expr`s into\n+/// A `LitKind`-like enum to fold constant `Expr`s into.\n #[derive(Debug, Clone)]\n pub enum Constant {\n     /// a String \"abc\""}, {"sha": "04f8aaa37e7bedfa087aa5a843f45669254d5157", "filename": "src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -47,7 +47,7 @@ declare_lint! {\n /// match foo {\n ///     Bar => bar(),\n ///     Quz => quz(),\n-///     Baz => bar(), // <= oups\n+///     Baz => bar(), // <= oops\n /// }\n /// ```\n declare_lint! {"}, {"sha": "ab4f73eafc099f40784a16e0c9d6a9632ceb1032", "filename": "src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fderive.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -14,7 +14,7 @@ use utils::{match_path, span_lint_and_then};\n ///\n /// **Why is this bad?** The implementation of these traits must agree (for example for use with\n /// `HashMap`) so it\u2019s probably a bad idea to use a default-generated `Hash` implementation  with\n-/// an explicitely defined `PartialEq`. In particular, the following must hold for any type:\n+/// an explicitly defined `PartialEq`. In particular, the following must hold for any type:\n ///\n /// ```rust\n /// k1 == k2 \u21d2 hash(k1) == hash(k2)"}, {"sha": "5637fb2cefb6991565902eca2cf9dbe61ce88a34", "filename": "src/doc.rs", "status": "added", "additions": 135, "deletions": 0, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -0,0 +1,135 @@\n+use rustc::lint::*;\n+use std::borrow::Cow;\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use utils::span_lint;\n+\n+/// **What it does:** This lint checks for the presence of `_`, `::` or camel-case words outside\n+/// ticks in documentation.\n+///\n+/// **Why is this bad?** *Rustdoc* supports markdown formatting, `_`, `::` and camel-case probably\n+/// indicates some code which should be included between ticks. `_` can also be used for empasis in\n+/// markdown, this lint tries to consider that.\n+///\n+/// **Known problems:** Lots of bad docs won\u2019t be fixed, what the lint checks for is limited.\n+///\n+/// **Examples:**\n+/// ```rust\n+/// /// Do something with the foo_bar parameter. See also that::other::module::foo.\n+/// // ^ `foo_bar` and `that::other::module::foo` should be ticked.\n+/// fn doit(foo_bar) { .. }\n+/// ```\n+declare_lint! {\n+    pub DOC_MARKDOWN, Warn,\n+    \"checks for the presence of `_`, `::` or camel-case outside ticks in documentation\"\n+}\n+\n+#[derive(Copy,Clone)]\n+pub struct Doc;\n+\n+impl LintPass for Doc {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![DOC_MARKDOWN]\n+    }\n+}\n+\n+impl EarlyLintPass for Doc {\n+    fn check_crate(&mut self, cx: &EarlyContext, krate: &ast::Crate) {\n+        check_attrs(cx, &krate.attrs, krate.span);\n+    }\n+\n+    fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n+        check_attrs(cx, &item.attrs, item.span);\n+    }\n+}\n+\n+/// Collect all doc attributes. Multiple `///` are represented in different attributes. `rustdoc`\n+/// has a pass to merge them, but we probably don\u2019t want to invoke that here.\n+fn collect_doc(attrs: &[ast::Attribute]) -> (Cow<str>, Option<Span>) {\n+    fn doc_and_span(attr: &ast::Attribute) -> Option<(&str, Span)> {\n+        if attr.node.is_sugared_doc {\n+            if let ast::MetaItemKind::NameValue(_, ref doc) = attr.node.value.node {\n+                if let ast::LitKind::Str(ref doc, _) = doc.node {\n+                    return Some((&doc[..], attr.span));\n+                }\n+            }\n+        }\n+\n+        None\n+    }\n+    let doc_and_span: fn(_) -> _ = doc_and_span;\n+\n+    let mut doc_attrs = attrs.iter().filter_map(doc_and_span);\n+\n+    let count = doc_attrs.clone().take(2).count();\n+\n+    match count {\n+        0 => (\"\".into(), None),\n+        1 => {\n+            let (doc, span) = doc_attrs.next().unwrap_or_else(|| unreachable!());\n+            (doc.into(), Some(span))\n+        }\n+        _ => (doc_attrs.map(|s| s.0).collect::<String>().into(), None),\n+    }\n+}\n+\n+pub fn check_attrs<'a>(cx: &EarlyContext, attrs: &'a [ast::Attribute], default_span: Span) {\n+    let (doc, span) = collect_doc(attrs);\n+    let span = span.unwrap_or(default_span);\n+\n+    // In markdown, `_` can be used to emphasize something, or, is a raw `_` depending on context.\n+    // There really is no markdown specification that would disambiguate this properly. This is\n+    // what GitHub and Rustdoc do:\n+    //\n+    // foo_bar test_quz    \u2192 foo_bar test_quz\n+    // foo_bar_baz         \u2192 foo_bar_baz (note that the \u201cofficial\u201d spec says this should be emphasized)\n+    // _foo bar_ test_quz_ \u2192 <em>foo bar</em> test_quz_\n+    // \\_foo bar\\_         \u2192 _foo bar_\n+    // (_baz_)             \u2192 (<em>baz</em>)\n+    // foo _ bar _ baz     \u2192 foo _ bar _ baz\n+\n+    let mut in_ticks = false;\n+    for word in doc.split_whitespace() {\n+        let ticks = word.bytes().filter(|&b| b == b'`').count();\n+\n+        if ticks == 2 { // likely to be \u201c`foo`\u201d\n+            continue;\n+        } else if ticks % 2 == 1 {\n+            in_ticks = !in_ticks;\n+            continue; // let\u2019s assume no one will ever write something like \u201c`foo`_bar\u201d\n+        }\n+\n+        if !in_ticks {\n+            check_word(cx, word, span);\n+        }\n+    }\n+}\n+\n+fn check_word(cx: &EarlyContext, word: &str, span: Span) {\n+    /// Checks if a string a camel-case, ie. contains at least two uppercase letter (`Clippy` is\n+    /// ok) and one lower-case letter (`NASA` is ok). Plural are also excluded (`IDs` is ok).\n+    fn is_camel_case(s: &str) -> bool {\n+        let s = if s.ends_with('s') {\n+            &s[..s.len()-1]\n+        } else {\n+            s\n+        };\n+\n+        s.chars().all(char::is_alphanumeric) &&\n+        s.chars().filter(|&c| c.is_uppercase()).take(2).count() > 1 &&\n+        s.chars().filter(|&c| c.is_lowercase()).take(1).count() > 0\n+    }\n+\n+    fn has_underscore(s: &str) -> bool {\n+        s != \"_\" && !s.contains(\"\\\\_\") && s.contains('_')\n+    }\n+\n+    // Trim punctuation as in `some comment (see foo::bar).`\n+    //                                                   ^^\n+    // Or even as `_foo bar_` which is emphasized.\n+    let word = word.trim_matches(|c: char| !c.is_alphanumeric());\n+\n+    if has_underscore(word) || word.contains(\"::\") || is_camel_case(word) {\n+        span_lint(cx, DOC_MARKDOWN, span, &format!(\"you should put `{}` between ticks in the documentation\", word));\n+    }\n+}"}, {"sha": "aa6dd46cf0b979299c143fbd88752381fd951f1b", "filename": "src/formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -82,7 +82,7 @@ impl EarlyLintPass for Formatting {\n     }\n }\n \n-/// Implementation of the SUSPICIOUS_ASSIGNMENT_FORMATTING lint.\n+/// Implementation of the `SUSPICIOUS_ASSIGNMENT_FORMATTING` lint.\n fn check_assign(cx: &EarlyContext, expr: &ast::Expr) {\n     if let ast::ExprKind::Assign(ref lhs, ref rhs) = expr.node {\n         if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro(cx, lhs.span) {\n@@ -108,7 +108,7 @@ fn check_assign(cx: &EarlyContext, expr: &ast::Expr) {\n     }\n }\n \n-/// Implementation of the SUSPICIOUS_ELSE_FORMATTING lint for weird `else if`.\n+/// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for weird `else if`.\n fn check_else_if(cx: &EarlyContext, expr: &ast::Expr) {\n     if let Some((then, &Some(ref else_))) = unsugar_if(expr) {\n         if unsugar_if(else_).is_some() && !differing_macro_contexts(then.span, else_.span) && !in_macro(cx, then.span) {"}, {"sha": "952dcb7ed9c4b2417268bfbce78a4c7cf69e255c", "filename": "src/items_after_statements.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems_after_statements.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -32,15 +32,15 @@ declare_lint! {\n     \"finds blocks where an item comes after a statement\"\n }\n \n-pub struct ItemsAfterStatemets;\n+pub struct ItemsAfterStatements;\n \n-impl LintPass for ItemsAfterStatemets {\n+impl LintPass for ItemsAfterStatements {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(ITEMS_AFTER_STATEMENTS)\n     }\n }\n \n-impl EarlyLintPass for ItemsAfterStatemets {\n+impl EarlyLintPass for ItemsAfterStatements {\n     fn check_block(&mut self, cx: &EarlyContext, item: &Block) {\n         if in_macro(cx, item.span) {\n             return;"}, {"sha": "1a097820e1e3b3880bfdef2a11478967f4c6c0e0", "filename": "src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -164,9 +164,9 @@ fn check_len_zero(cx: &LateContext, span: Span, name: &Name, args: &[P<Expr>], l\n     }\n }\n \n-/// check if this type has an is_empty method\n+/// Check if this type has an `is_empty` method.\n fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n-    /// get a ImplOrTraitItem and return true if it matches is_empty(self)\n+    /// Get an `ImplOrTraitItem` and return true if it matches `is_empty(self)`.\n     fn is_is_empty(cx: &LateContext, id: &ImplOrTraitItemId) -> bool {\n         if let MethodTraitItemId(def_id) = *id {\n             if let ty::MethodTraitItem(ref method) = cx.tcx.impl_or_trait_item(def_id) {\n@@ -179,7 +179,7 @@ fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n         }\n     }\n \n-    /// check the inherent impl's items for an is_empty(self) method\n+    /// Check the inherent impl's items for an `is_empty(self)` method.\n     fn has_is_empty_impl(cx: &LateContext, id: &DefId) -> bool {\n         let impl_items = cx.tcx.impl_items.borrow();\n         cx.tcx.inherent_impls.borrow().get(id).map_or(false, |ids| {"}, {"sha": "0a51385f6f25fb7958e792477738a61e53444adb", "filename": "src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -54,6 +54,7 @@ pub mod collapsible_if;\n pub mod copies;\n pub mod cyclomatic_complexity;\n pub mod derive;\n+pub mod doc;\n pub mod drop_ref;\n pub mod entry;\n pub mod enum_clike;\n@@ -134,7 +135,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         }\n         Err((err, span)) => {\n             reg.sess.struct_span_err(span, err)\n-                    .span_note(span, \"Clippy will use defaulf configuration\")\n+                    .span_note(span, \"Clippy will use default configuration\")\n                     .emit();\n             utils::conf::Conf::default()\n         }\n@@ -163,7 +164,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_early_lint_pass(box precedence::Precedence);\n     reg.register_late_lint_pass(box eta_reduction::EtaPass);\n     reg.register_late_lint_pass(box identity_op::IdentityOp);\n-    reg.register_early_lint_pass(box items_after_statements::ItemsAfterStatemets);\n+    reg.register_early_lint_pass(box items_after_statements::ItemsAfterStatements);\n     reg.register_late_lint_pass(box mut_mut::MutMut);\n     reg.register_late_lint_pass(box mut_reference::UnnecessaryMutPassed);\n     reg.register_late_lint_pass(box len_zero::LenZero);\n@@ -223,6 +224,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n     reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(conf.blacklisted_names));\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n+    reg.register_early_lint_pass(box doc::Doc);\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,\n@@ -265,6 +267,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_XOR_EQ,\n         derive::EXPL_IMPL_CLONE_ON_COPY,\n+        doc::DOC_MARKDOWN,\n         drop_ref::DROP_REF,\n         entry::MAP_ENTRY,\n         enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT,"}, {"sha": "546f07a650751edc7face6e8288ae5579e127c45", "filename": "src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -571,7 +571,7 @@ fn check_for_loop_explicit_counter(cx: &LateContext, arg: &Expr, body: &Expr, ex\n     }\n }\n \n-/// Check for the FOR_KV_MAP lint.\n+/// Check for the `FOR_KV_MAP` lint.\n fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n     if let PatKind::Tup(ref pat) = pat.node {\n         if pat.len() == 2 {\n@@ -607,7 +607,7 @@ fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Ex\n \n }\n \n-/// Return true if the pattern is a `PatWild` or an ident prefixed with '_'.\n+/// Return true if the pattern is a `PatWild` or an ident prefixed with `'_'`.\n fn pat_is_wild(pat: &PatKind, body: &Expr) -> bool {\n     match *pat {\n         PatKind::Wild => true,\n@@ -750,8 +750,8 @@ impl<'v, 't> Visitor<'v> for VarUsedAfterLoopVisitor<'v, 't> {\n }\n \n \n-/// Return true if the type of expr is one that provides IntoIterator impls\n-/// for &T and &mut T, such as Vec.\n+/// Return true if the type of expr is one that provides `IntoIterator` impls\n+/// for `&T` and `&mut T`, such as `Vec`.\n #[cfg_attr(rustfmt, rustfmt_skip)]\n fn is_ref_iterable_type(cx: &LateContext, e: &Expr) -> bool {\n     // no walk_ptrs_ty: calling iter() on a reference can make sense because it"}, {"sha": "7bffd445f6b92210f8d4e1d16a5b1ab19e18bd80", "filename": "src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -330,7 +330,7 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n     }\n }\n \n-/// Get all arms that are unbounded PatRange-s.\n+/// Get all arms that are unbounded `PatRange`s.\n fn all_ranges(cx: &LateContext, arms: &[Arm]) -> Vec<SpannedRange<ConstVal>> {\n     arms.iter()\n         .filter_map(|arm| {"}, {"sha": "b1c584a4b3e0fe039f325fd291a10c3fd143c345", "filename": "src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -110,10 +110,10 @@ impl EarlyLintPass for MiscEarly {\n                 let arg_name = sp_ident.node.to_string();\n \n                 if arg_name.starts_with('_') {\n-                    if let Some(correspondance) = registered_names.get(&arg_name[1..]) {\n+                    if let Some(correspondence) = registered_names.get(&arg_name[1..]) {\n                         span_lint(cx,\n                                   DUPLICATE_UNDERSCORE_ARGUMENT,\n-                                  *correspondance,\n+                                  *correspondence,\n                                   &format!(\"`{}` already exists, having another argument having almost the same \\\n                                             name makes code comprehension and documentation more difficult\",\n                                            arg_name[1..].to_owned()));;"}, {"sha": "ab5a1e26b20c48383d972ffd60c98f2eea8e3b7c", "filename": "src/needless_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fneedless_bool.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -105,7 +105,7 @@ impl LateLintPass for BoolComparison {\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n-                                       \"equality checks against true are unnecesary\",\n+                                       \"equality checks against true are unnecessary\",\n                                        |db| {\n                                            db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n                                        });\n@@ -115,7 +115,7 @@ impl LateLintPass for BoolComparison {\n                     span_lint_and_then(cx,\n                                        BOOL_COMPARISON,\n                                        e.span,\n-                                       \"equality checks against true are unnecesary\",\n+                                       \"equality checks against true are unnecessary\",\n                                        |db| {\n                                            db.span_suggestion(e.span, \"try simplifying it as shown:\", hint);\n                                        });"}, {"sha": "d7cb6fc5d281ebe5f525a8219c59917d4b9dc6dc", "filename": "src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnon_expressive_names.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -251,7 +251,7 @@ impl EarlyLintPass for NonExpressiveNames {\n     }\n }\n \n-/// precondition: a_name.chars().count() < b_name.chars().count()\n+/// Precondition: `a_name.chars().count() < b_name.chars().count()`.\n fn levenstein_not_1(a_name: &str, b_name: &str) -> bool {\n     debug_assert!(a_name.chars().count() < b_name.chars().count());\n     let mut a_chars = a_name.chars();"}, {"sha": "6498db66e139cf141bfeb7bb249f7dd511594508", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -1,6 +1,4 @@\n-//! Checks for usage of &Vec[_] and &String\n-//!\n-//! This lint is **warn** by default\n+//! Checks for usage of  `&Vec[_]` and `&String`.\n \n use rustc::front::map::NodeItem;\n use rustc::lint::*;"}, {"sha": "9f68175b2024cedd31243768e93dbb3f600e89b1", "filename": "src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -1,4 +1,4 @@\n-//! This LintPass catches both string addition and string addition + assignment\n+//! This lint catches both string addition and string addition + assignment\n //!\n //! Note that since we have two lints where one subsumes the other, we try to\n //! disable the subsumed lint unless it has a higher level"}, {"sha": "20c7e33fbb2bc180b4a4289c1d9abb96fe2a01a9", "filename": "src/utils/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fhir.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -13,7 +13,7 @@ use utils::differing_macro_contexts;\n pub struct SpanlessEq<'a, 'tcx: 'a> {\n     /// Context used to evaluate constant expressions.\n     cx: &'a LateContext<'a, 'tcx>,\n-    /// If is true, never consider as equal expressions containing fonction calls.\n+    /// If is true, never consider as equal expressions containing function calls.\n     ignore_fn: bool,\n }\n "}, {"sha": "34404f4c2e9890e21413a2b0dc46a9bc88dcdfa0", "filename": "src/utils/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -129,8 +129,8 @@ pub fn in_macro<T: LintContext>(cx: &T, span: Span) -> bool {\n /// Returns true if the macro that expanded the crate was outside of the current crate or was a\n /// compiler plugin.\n pub fn in_external_macro<T: LintContext>(cx: &T, span: Span) -> bool {\n-    /// Invokes in_macro with the expansion info of the given span slightly heavy, try to use this\n-    /// after other checks have already happened.\n+    /// Invokes `in_macro` with the expansion info of the given span slightly heavy, try to use\n+    /// this after other checks have already happened.\n     fn in_macro_ext<T: LintContext>(cx: &T, opt_info: Option<&ExpnInfo>) -> bool {\n         // no ExpnInfo = no macro\n         opt_info.map_or(false, |info| {\n@@ -657,7 +657,7 @@ pub fn is_direct_expn_of(cx: &LateContext, span: Span, name: &str) -> Option<Spa\n     }\n }\n \n-/// Returns index of character after first CamelCase component of `s`\n+/// Return the index of the character after the first camel-case component of `s`.\n pub fn camel_case_until(s: &str) -> usize {\n     let mut iter = s.char_indices();\n     if let Some((_, first)) = iter.next() {\n@@ -690,7 +690,7 @@ pub fn camel_case_until(s: &str) -> usize {\n     }\n }\n \n-/// Returns index of last CamelCase component of `s`.\n+/// Return index of the last camel-case component of `s`.\n pub fn camel_case_from(s: &str) -> usize {\n     let mut iter = s.char_indices().rev();\n     if let Some((_, first)) = iter.next() {\n@@ -719,7 +719,7 @@ pub fn camel_case_from(s: &str) -> usize {\n     last_i\n }\n \n-/// Represents a range akin to `ast::ExprKind::Range`.\n+/// Represent a range akin to `ast::ExprKind::Range`.\n #[derive(Debug, Copy, Clone)]\n pub struct UnsugaredRange<'a> {\n     pub start: Option<&'a Expr>,"}, {"sha": "f58b0e695a91f0be65946aaf749182505d716847", "filename": "src/zero_div_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/src%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fzero_div_zero.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -4,7 +4,7 @@ use rustc_front::hir::*;\n use utils::span_help_and_lint;\n \n /// `ZeroDivZeroPass` is a pass that checks for a binary expression that consists\n-/// `of 0.0/0.0`, which is always NaN. It is more clear to replace instances of\n+/// `of 0.0/0.0`, which is always `NaN`. It is more clear to replace instances of\n /// `0.0/0.0` with `std::f32::NaN` or `std::f64::NaN`, depending on the precision.\n pub struct ZeroDivZeroPass;\n "}, {"sha": null, "filename": "tests/compile-fail/blacklisted_name.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fblacklisted_name.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": "836759455197f08d427d15e67b270f6c212902dd", "filename": "tests/compile-fail/bool_comparison.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbool_comparison.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -5,15 +5,15 @@\n fn main() {\n     let x = true;\n     if x == true { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against true are unnecesary\n+    //~^ ERROR equality checks against true are unnecessary\n     //~| HELP try simplifying it as shown:\n     //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n     if x == false { \"yes\" } else { \"no\" };\n     //~^ ERROR equality checks against false can be replaced by a negation\n     //~| HELP try simplifying it as shown:\n     //~| SUGGESTION if !x { \"yes\" } else { \"no\" };\n     if true == x { \"yes\" } else { \"no\" };\n-    //~^ ERROR equality checks against true are unnecesary\n+    //~^ ERROR equality checks against true are unnecessary\n     //~| HELP try simplifying it as shown:\n     //~| SUGGESTION if x { \"yes\" } else { \"no\" };\n     if false == x { \"yes\" } else { \"no\" };"}, {"sha": null, "filename": "tests/compile-fail/conf_french_blacklisted_name.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconf_french_blacklisted_name.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": null, "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": null, "filename": "tests/compile-fail/derive.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderive.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": "eecf5e0b20620db3e6adf2c58f5a8659b8980a35", "filename": "tests/compile-fail/doc.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdoc.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -0,0 +1,38 @@\n+//! This file tests for the DOC_MARKDOWN lint\n+//~^ ERROR: you should put `DOC_MARKDOWN` between ticks\n+\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(doc_markdown)]\n+\n+/// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+/// Markdown is _weird_. I mean _really weird_.  This \\_ is ok. So is `_`. But not Foo::some_fun\n+/// which should be reported only once despite being __doubly bad__.\n+fn foo_bar() {\n+//~^ ERROR: you should put `foo_bar` between ticks\n+//~| ERROR: you should put `foo::bar` between ticks\n+//~| ERROR: you should put `Foo::some_fun` between ticks\n+}\n+\n+/// That one tests multiline ticks.\n+/// ```rust\n+/// foo_bar FOO_BAR\n+/// _foo bar_\n+/// ```\n+fn multiline_ticks() {\n+}\n+\n+/// This _is a test for\n+/// multiline\n+/// emphasis_.\n+fn test_emphasis() {\n+}\n+\n+/// The `main` function is the entry point of the program. Here it only calls the `foo_bar` and\n+/// `multiline_ticks` functions.\n+fn main() {\n+    foo_bar();\n+    multiline_ticks();\n+    test_emphasis();\n+}"}, {"sha": null, "filename": "tests/compile-fail/format.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fformat.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": null, "filename": "tests/compile-fail/formatting.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fformatting.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": null, "filename": "tests/compile-fail/functions.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffunctions.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": "9d938ebb19e6f53ae7226b28004e2cf3d60ff9b4", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -85,8 +85,8 @@ macro_rules! opt_map {\n }\n \n /// Checks implementation of the following lints:\n-/// OPTION_MAP_UNWRAP_OR\n-/// OPTION_MAP_UNWRAP_OR_ELSE\n+/// * `OPTION_MAP_UNWRAP_OR`\n+/// * `OPTION_MAP_UNWRAP_OR_ELSE`\n fn option_methods() {\n     let opt = Some(1);\n \n@@ -154,7 +154,7 @@ impl IteratorFalsePositives {\n     }\n }\n \n-/// Checks implementation of FILTER_NEXT lint\n+/// Checks implementation of `FILTER_NEXT` lint\n fn filter_next() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n \n@@ -174,7 +174,7 @@ fn filter_next() {\n     let _ = foo.filter().next();\n }\n \n-/// Checks implementation of SEARCH_IS_SOME lint\n+/// Checks implementation of `SEARCH_IS_SOME` lint\n fn search_is_some() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n \n@@ -218,7 +218,7 @@ fn search_is_some() {\n     let _ = foo.rposition().is_some();\n }\n \n-/// Checks implementation of the OR_FUN_CALL lint\n+/// Checks implementation of the `OR_FUN_CALL` lint\n fn or_fun_call() {\n     struct Foo;\n "}, {"sha": null, "filename": "tests/compile-fail/new_without_default.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnew_without_default.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": null, "filename": "tests/compile-fail/print.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fprint.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": null, "filename": "tests/compile-fail/swap.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fswap.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": null, "filename": "tests/compile-fail/unused_labels.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funused_labels.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": null, "filename": "tests/compile-fail/vec.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fcompile-fail%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvec.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": null, "filename": "tests/run-pass/ice-700.rs", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Frun-pass%2Fice-700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Frun-pass%2Fice-700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fice-700.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba"}, {"sha": "7a8faa62742ab515944380dc2c5416d4493ebcfc", "filename": "tests/used_underscore_binding_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fused_underscore_binding_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11eae72e6fd44935587badad39bfb46ca23b24ba/tests%2Fused_underscore_binding_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fused_underscore_binding_macro.rs?ref=11eae72e6fd44935587badad39bfb46ca23b24ba", "patch": "@@ -3,7 +3,7 @@\n \n extern crate rustc_serialize;\n \n-/// Test that we do not lint for unused underscores in a MacroAttribute expansion\n+/// Test that we do not lint for unused underscores in a `MacroAttribute` expansion\n #[deny(used_underscore_binding)]\n #[derive(RustcEncodable)]\n struct MacroAttributesTest {"}]}