{"sha": "b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9", "node_id": "C_kwDOAAsO6NoAKGI4ZWQxYzU3NDVhYjJmZTgwYjIxNmIwMGNkNjhkZWY2ZDJhMmFhZTk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-12T03:50:18Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-12T04:05:54Z"}, "message": "Remove unused argument from `check_mac_def`.", "tree": {"sha": "56d2b2f7825f90b9ec9f17d68fcfeb9a6309f6df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56d2b2f7825f90b9ec9f17d68fcfeb9a6309f6df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9", "html_url": "https://github.com/rust-lang/rust/commit/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b", "html_url": "https://github.com/rust-lang/rust/commit/7e3fd33a6652bc66b7e7cea0857f88e1c3b7985b"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "0ff2ef5cda39177b9708e8753381fb8d9ec4a3f9", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9", "patch": "@@ -2000,7 +2000,7 @@ impl KeywordIdents {\n }\n \n impl EarlyLintPass for KeywordIdents {\n-    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef, _id: ast::NodeId) {\n+    fn check_mac_def(&mut self, cx: &EarlyContext<'_>, mac_def: &ast::MacroDef) {\n         self.check_tokens(cx, mac_def.body.inner_tokens());\n     }\n     fn check_mac(&mut self, cx: &EarlyContext<'_>, mac: &ast::MacCall) {"}, {"sha": "96ecd79a69cfb3603cae46f45a7c06064ab331a8", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9", "patch": "@@ -276,7 +276,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n     }\n \n     fn visit_mac_def(&mut self, mac: &'a ast::MacroDef, id: ast::NodeId) {\n-        run_early_pass!(self, check_mac_def, mac, id);\n+        run_early_pass!(self, check_mac_def, mac);\n         self.check_id(id);\n     }\n "}, {"sha": "1c6a057d1a85b56e3faf054f711aa52888572623", "filename": "compiler/rustc_lint/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpasses.rs?ref=b8ed1c5745ab2fe80b216b00cd68def6d2a2aae9", "patch": "@@ -162,7 +162,7 @@ macro_rules! early_lint_methods {\n             fn check_impl_item(a: &ast::AssocItem);\n             fn check_variant(a: &ast::Variant);\n             fn check_attribute(a: &ast::Attribute);\n-            fn check_mac_def(a: &ast::MacroDef, b: ast::NodeId);\n+            fn check_mac_def(a: &ast::MacroDef);\n             fn check_mac(a: &ast::MacCall);\n \n             /// Called when entering a syntax node that can have lint attributes such"}]}