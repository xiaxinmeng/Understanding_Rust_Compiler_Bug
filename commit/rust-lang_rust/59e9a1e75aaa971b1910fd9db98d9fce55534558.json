{"sha": "59e9a1e75aaa971b1910fd9db98d9fce55534558", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZTlhMWU3NWFhYTk3MWIxOTEwZmQ5ZGI5OGQ5ZmNlNTU1MzQ1NTg=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-02T22:49:12Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2018-12-02T22:53:17Z"}, "message": "pass the parameter environment to `traits::find_associated_item`\n\ndropping the param-env on the floor is obviously the wrong thing to do.\n\nThe ICE was probably exposed by #54490 adding the problem-exposing use of\n`traits::find_associated_item`.\n\nFixes #55380.", "tree": {"sha": "266e2991ab676e40db62bdbcb039ed4e75104b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/266e2991ab676e40db62bdbcb039ed4e75104b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59e9a1e75aaa971b1910fd9db98d9fce55534558", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59e9a1e75aaa971b1910fd9db98d9fce55534558", "html_url": "https://github.com/rust-lang/rust/commit/59e9a1e75aaa971b1910fd9db98d9fce55534558", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59e9a1e75aaa971b1910fd9db98d9fce55534558/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f26849506c141a6760532ca5bdfd8345247fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f26849506c141a6760532ca5bdfd8345247fdb", "html_url": "https://github.com/rust-lang/rust/commit/21f26849506c141a6760532ca5bdfd8345247fdb"}], "stats": {"total": 59, "additions": 54, "deletions": 5}, "files": [{"sha": "cb17246b15f11447c13bd41e79c3736dae80b181", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/59e9a1e75aaa971b1910fd9db98d9fce55534558/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9a1e75aaa971b1910fd9db98d9fce55534558/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=59e9a1e75aaa971b1910fd9db98d9fce55534558", "patch": "@@ -85,6 +85,8 @@ pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                         source_substs: &'tcx Substs<'tcx>,\n                                         target_node: specialization_graph::Node)\n                                         -> &'tcx Substs<'tcx> {\n+    debug!(\"translate_substs({:?}, {:?}, {:?}, {:?})\",\n+           param_env, source_impl, source_substs, target_node);\n     let source_trait_ref = infcx.tcx\n                                 .impl_trait_ref(source_impl)\n                                 .unwrap()\n@@ -119,10 +121,13 @@ pub fn translate_substs<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n /// whichever applies.\n pub fn find_associated_item<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n     item: &ty::AssociatedItem,\n     substs: &'tcx Substs<'tcx>,\n     impl_data: &super::VtableImplData<'tcx, ()>,\n ) -> (DefId, &'tcx Substs<'tcx>) {\n+    debug!(\"find_associated_item({:?}, {:?}, {:?}, {:?})\",\n+           param_env, item, substs, impl_data);\n     assert!(!substs.needs_infer());\n \n     let trait_def_id = tcx.trait_id_of_impl(impl_data.impl_def_id).unwrap();\n@@ -132,7 +137,7 @@ pub fn find_associated_item<'a, 'tcx>(\n     match ancestors.defs(tcx, item.ident, item.kind, trait_def_id).next() {\n         Some(node_item) => {\n             let substs = tcx.infer_ctxt().enter(|infcx| {\n-                let param_env = ty::ParamEnv::reveal_all();\n+                let param_env = param_env.with_reveal_all();\n                 let substs = substs.rebase_onto(tcx, trait_def_id, impl_data.substs);\n                 let substs = translate_substs(&infcx, param_env, impl_data.impl_def_id,\n                                               substs, node_item.node);\n@@ -219,12 +224,17 @@ fn fulfill_implication<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                        source_trait_ref: ty::TraitRef<'tcx>,\n                                        target_impl: DefId)\n                                        -> Result<&'tcx Substs<'tcx>, ()> {\n+    debug!(\"fulfill_implication({:?}, trait_ref={:?} |- {:?} applies)\",\n+           param_env, source_trait_ref, target_impl);\n+\n     let selcx = &mut SelectionContext::new(&infcx);\n     let target_substs = infcx.fresh_substs_for_item(DUMMY_SP, target_impl);\n     let (target_trait_ref, mut obligations) = impl_trait_ref_and_oblig(selcx,\n                                                                        param_env,\n                                                                        target_impl,\n                                                                        target_substs);\n+    debug!(\"fulfill_implication: target_trait_ref={:?}, obligations={:?}\",\n+           target_trait_ref, obligations);\n \n     // do the impls unify? If not, no specialization.\n     match infcx.at(&ObligationCause::dummy(), param_env)"}, {"sha": "36e93cc7740894fa522cd1a8cde196cff3f7f324", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59e9a1e75aaa971b1910fd9db98d9fce55534558/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9a1e75aaa971b1910fd9db98d9fce55534558/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=59e9a1e75aaa971b1910fd9db98d9fce55534558", "patch": "@@ -33,8 +33,8 @@ impl<'tcx, O: fmt::Debug> fmt::Debug for traits::Obligation<'tcx, O> {\n         if ty::tls::with(|tcx| tcx.sess.verbose()) {\n             write!(\n                 f,\n-                \"Obligation(predicate={:?},cause={:?},depth={})\",\n-                self.predicate, self.cause, self.recursion_depth\n+                \"Obligation(predicate={:?},cause={:?},param_env={:?},depth={})\",\n+                self.predicate, self.cause, self.param_env, self.recursion_depth\n             )\n         } else {\n             write!("}, {"sha": "a24920da158e2772f9b51c40785a2ce660c7fa34", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59e9a1e75aaa971b1910fd9db98d9fce55534558/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9a1e75aaa971b1910fd9db98d9fce55534558/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=59e9a1e75aaa971b1910fd9db98d9fce55534558", "patch": "@@ -347,9 +347,10 @@ fn resolve_associated_item<'a, 'tcx>(\n ) -> Option<Instance<'tcx>> {\n     let def_id = trait_item.def_id;\n     debug!(\"resolve_associated_item(trait_item={:?}, \\\n+            param_env={:?}, \\\n             trait_id={:?}, \\\n             rcvr_substs={:?})\",\n-           def_id, trait_id, rcvr_substs);\n+            def_id, param_env, trait_id, rcvr_substs);\n \n     let trait_ref = ty::TraitRef::from_method(tcx, trait_id, rcvr_substs);\n     let vtbl = tcx.codegen_fulfill_obligation((param_env, ty::Binder::bind(trait_ref)));\n@@ -359,7 +360,7 @@ fn resolve_associated_item<'a, 'tcx>(\n     match vtbl {\n         traits::VtableImpl(impl_data) => {\n             let (def_id, substs) = traits::find_associated_item(\n-                tcx, trait_item, rcvr_substs, &impl_data);\n+                tcx, param_env, trait_item, rcvr_substs, &impl_data);\n             let substs = tcx.erase_regions(&substs);\n             Some(ty::Instance::new(def_id, substs))\n         }"}, {"sha": "29392fba8b47577f4dd2b51f341329ac177c5abc", "filename": "src/test/run-pass/issue-55380.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/59e9a1e75aaa971b1910fd9db98d9fce55534558/src%2Ftest%2Frun-pass%2Fissue-55380.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59e9a1e75aaa971b1910fd9db98d9fce55534558/src%2Ftest%2Frun-pass%2Fissue-55380.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-55380.rs?ref=59e9a1e75aaa971b1910fd9db98d9fce55534558", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-pass\n+\n+#![feature(specialization)]\n+\n+pub trait Foo {\n+    fn abc() -> u32;\n+    fn def() -> u32;\n+}\n+\n+pub trait Marker {}\n+\n+impl Marker for () {}\n+\n+impl<T> Foo for T {\n+    default fn abc() -> u32 { 16 }\n+    default fn def() -> u32 { 42 }\n+}\n+\n+impl<T: Marker> Foo for T {\n+    fn def() -> u32 {\n+        Self::abc()\n+    }\n+}\n+\n+fn main() {\n+   assert_eq!(<()>::def(), 16);\n+   assert_eq!(<i32>::def(), 42);\n+}"}]}