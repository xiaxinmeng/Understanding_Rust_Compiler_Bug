{"sha": "e3fd444dc99dd478fbad0b26ce40d28833a0a9d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZmQ0NDRkYzk5ZGQ0NzhmYmFkMGIyNmNlNDBkMjg4MzNhMGE5ZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-10T03:48:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-10T03:48:30Z"}, "message": "Auto merge of #28323 - tshepang:idiom, r=steveklabnik", "tree": {"sha": "9d3045d378d01ee9f6d7c583fcf2034985f75393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d3045d378d01ee9f6d7c583fcf2034985f75393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3fd444dc99dd478fbad0b26ce40d28833a0a9d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fd444dc99dd478fbad0b26ce40d28833a0a9d3", "html_url": "https://github.com/rust-lang/rust/commit/e3fd444dc99dd478fbad0b26ce40d28833a0a9d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3fd444dc99dd478fbad0b26ce40d28833a0a9d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c48b8f17a0a2aee3cbdbd867ddb6b434d2dde8f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c48b8f17a0a2aee3cbdbd867ddb6b434d2dde8f2", "html_url": "https://github.com/rust-lang/rust/commit/c48b8f17a0a2aee3cbdbd867ddb6b434d2dde8f2"}, {"sha": "3860f974a72f7e11d664c0c036612e0bb41490eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3860f974a72f7e11d664c0c036612e0bb41490eb", "html_url": "https://github.com/rust-lang/rust/commit/3860f974a72f7e11d664c0c036612e0bb41490eb"}], "stats": {"total": 76, "additions": 40, "deletions": 36}, "files": [{"sha": "6d04a7dcb087cb273c529eedc5607fc820f726d1", "filename": "src/doc/reference.md", "status": "modified", "additions": 40, "deletions": 36, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/e3fd444dc99dd478fbad0b26ce40d28833a0a9d3/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3fd444dc99dd478fbad0b26ce40d28833a0a9d3/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=e3fd444dc99dd478fbad0b26ce40d28833a0a9d3", "patch": "@@ -1095,12 +1095,12 @@ typecheck:\n # fn my_err(s: &str) -> ! { panic!() }\n \n fn f(i: i32) -> i32 {\n-   if i == 42 {\n-     return 42;\n-   }\n-   else {\n-     my_err(\"Bad number!\");\n-   }\n+    if i == 42 {\n+        return 42;\n+    }\n+    else {\n+        my_err(\"Bad number!\");\n+    }\n }\n ```\n \n@@ -1399,9 +1399,9 @@ functions](#generic-functions).\n \n ```\n trait Seq<T> {\n-   fn len(&self) -> u32;\n-   fn elt_at(&self, n: u32) -> T;\n-   fn iter<F>(&self, F) where F: Fn(T);\n+    fn len(&self) -> u32;\n+    fn elt_at(&self, n: u32) -> T;\n+    fn iter<F>(&self, F) where F: Fn(T);\n }\n ```\n \n@@ -1579,8 +1579,12 @@ impl Shape for Circle {\n     fn draw(&self, s: Surface) { do_draw_circle(s, *self); }\n     fn bounding_box(&self) -> BoundingBox {\n         let r = self.radius;\n-        BoundingBox{x: self.center.x - r, y: self.center.y - r,\n-         width: 2.0 * r, height: 2.0 * r}\n+        BoundingBox {\n+            x: self.center.x - r,\n+            y: self.center.y - r,\n+            width: 2.0 * r,\n+            height: 2.0 * r,\n+        }\n     }\n }\n ```\n@@ -1615,10 +1619,10 @@ are written after the `impl` keyword.\n ```\n # trait Seq<T> { fn dummy(&self, _: T) { } }\n impl<T> Seq<T> for Vec<T> {\n-   /* ... */\n+    /* ... */\n }\n impl Seq<bool> for u32 {\n-   /* Treat the integer as a sequence of bits */\n+    /* Treat the integer as a sequence of bits */\n }\n ```\n \n@@ -1850,13 +1854,13 @@ An example of attributes:\n // A function marked as a unit test\n #[test]\n fn test_foo() {\n-  /* ... */\n+    /* ... */\n }\n \n // A conditionally-compiled module\n #[cfg(target_os=\"linux\")]\n mod bar {\n-  /* ... */\n+    /* ... */\n }\n \n // A lint attribute used to suppress a warning/error\n@@ -2899,9 +2903,9 @@ An example of an `as` expression:\n # fn len(values: &[f64]) -> i32 { 0 }\n \n fn average(values: &[f64]) -> f64 {\n-  let sum: f64 = sum(values);\n-  let size: f64 = len(values) as f64;\n-  sum / size\n+    let sum: f64 = sum(values);\n+    let size: f64 = len(values) as f64;\n+    sum / size\n }\n ```\n \n@@ -3207,9 +3211,9 @@ may be specified with `...`. For example:\n # let x = 2;\n \n let message = match x {\n-  0 | 1  => \"not many\",\n-  2 ... 9 => \"a few\",\n-  _      => \"lots\"\n+    0 | 1  => \"not many\",\n+    2 ... 9 => \"a few\",\n+    _      => \"lots\"\n };\n ```\n \n@@ -3228,9 +3232,9 @@ may refer to the variables bound within the pattern they follow.\n # fn process_other(i: i32) { }\n \n let message = match maybe_digit {\n-  Some(x) if x < 10 => process_digit(x),\n-  Some(x) => process_other(x),\n-  None => panic!()\n+    Some(x) if x < 10 => process_digit(x),\n+    Some(x) => process_other(x),\n+    None => panic!()\n };\n ```\n \n@@ -3274,10 +3278,10 @@ An example of a `return` expression:\n \n ```\n fn max(a: i32, b: i32) -> i32 {\n-   if a > b {\n-      return a;\n-   }\n-   return b;\n+    if a > b {\n+        return a;\n+    }\n+    return b;\n }\n ```\n \n@@ -3521,7 +3525,7 @@ An example of a `fn` type:\n \n ```\n fn add(x: i32, y: i32) -> i32 {\n-  return x + y;\n+    return x + y;\n }\n \n let mut x = add(5,7);\n@@ -3601,19 +3605,19 @@ An example of a trait object:\n \n ```\n trait Printable {\n-  fn stringify(&self) -> String;\n+    fn stringify(&self) -> String;\n }\n \n impl Printable for i32 {\n-  fn stringify(&self) -> String { self.to_string() }\n+    fn stringify(&self) -> String { self.to_string() }\n }\n \n fn print(a: Box<Printable>) {\n-   println!(\"{}\", a.stringify());\n+    println!(\"{}\", a.stringify());\n }\n \n fn main() {\n-   print(Box::new(10) as Box<Printable>);\n+    print(Box::new(10) as Box<Printable>);\n }\n ```\n \n@@ -3628,7 +3632,7 @@ its type parameters are types:\n ```ignore\n fn to_vec<A: Clone>(xs: &[A]) -> Vec<A> {\n     if xs.is_empty() {\n-       return vec![];\n+        return vec![];\n     }\n     let first: A = xs[0].clone();\n     let mut rest: Vec<A> = to_vec(&xs[1..]);\n@@ -3648,7 +3652,7 @@ it is an alias for the implementing type. For example, in:\n \n ```\n trait Printable {\n-  fn make_string(&self) -> String;\n+    fn make_string(&self) -> String;\n }\n \n impl Printable for String {\n@@ -3716,7 +3720,7 @@ sites are:\n   fn bar(_: i8) { }\n \n   fn main() {\n-     bar(128);\n+      bar(128);\n   }\n   ```\n "}]}