{"sha": "c7928f5af0b9dc7b042d4c390a5a5381cc53de9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3OTI4ZjVhZjBiOWRjN2IwNDJkNGMzOTBhNWE1MzgxY2M1M2RlOWE=", "commit": {"author": {"name": "Luca Barbieri", "email": "luca@luca-barbieri.com", "date": "2019-07-21T09:49:36Z"}, "committer": {"name": "Luca Barbieri", "email": "luca@luca-barbieri.com", "date": "2019-07-21T09:49:36Z"}, "message": "Expand comment on BorrowRef::new", "tree": {"sha": "3b99d7ab33d0875f595a3fdbf189ec9efa3e56c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b99d7ab33d0875f595a3fdbf189ec9efa3e56c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7928f5af0b9dc7b042d4c390a5a5381cc53de9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7928f5af0b9dc7b042d4c390a5a5381cc53de9a", "html_url": "https://github.com/rust-lang/rust/commit/c7928f5af0b9dc7b042d4c390a5a5381cc53de9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7928f5af0b9dc7b042d4c390a5a5381cc53de9a/comments", "author": {"login": "luca-barbieri", "id": 298418, "node_id": "MDQ6VXNlcjI5ODQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/298418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luca-barbieri", "html_url": "https://github.com/luca-barbieri", "followers_url": "https://api.github.com/users/luca-barbieri/followers", "following_url": "https://api.github.com/users/luca-barbieri/following{/other_user}", "gists_url": "https://api.github.com/users/luca-barbieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/luca-barbieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luca-barbieri/subscriptions", "organizations_url": "https://api.github.com/users/luca-barbieri/orgs", "repos_url": "https://api.github.com/users/luca-barbieri/repos", "events_url": "https://api.github.com/users/luca-barbieri/events{/privacy}", "received_events_url": "https://api.github.com/users/luca-barbieri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luca-barbieri", "id": 298418, "node_id": "MDQ6VXNlcjI5ODQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/298418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luca-barbieri", "html_url": "https://github.com/luca-barbieri", "followers_url": "https://api.github.com/users/luca-barbieri/followers", "following_url": "https://api.github.com/users/luca-barbieri/following{/other_user}", "gists_url": "https://api.github.com/users/luca-barbieri/gists{/gist_id}", "starred_url": "https://api.github.com/users/luca-barbieri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luca-barbieri/subscriptions", "organizations_url": "https://api.github.com/users/luca-barbieri/orgs", "repos_url": "https://api.github.com/users/luca-barbieri/repos", "events_url": "https://api.github.com/users/luca-barbieri/events{/privacy}", "received_events_url": "https://api.github.com/users/luca-barbieri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0b3c02d816253e04e8cc23fb1a7fa342b246689", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0b3c02d816253e04e8cc23fb1a7fa342b246689", "html_url": "https://github.com/rust-lang/rust/commit/f0b3c02d816253e04e8cc23fb1a7fa342b246689"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "d842bf6d71101ebbb4d3aff194040fab1b925529", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7928f5af0b9dc7b042d4c390a5a5381cc53de9a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7928f5af0b9dc7b042d4c390a5a5381cc53de9a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c7928f5af0b9dc7b042d4c390a5a5381cc53de9a", "patch": "@@ -1103,10 +1103,20 @@ impl<'b> BorrowRef<'b> {\n     fn new(borrow: &'b Cell<BorrowFlag>) -> Option<BorrowRef<'b>> {\n         let b = borrow.get().wrapping_add(1);\n         if !is_reading(b) {\n-            // If there's currently a writing borrow, or if incrementing the\n-            // refcount would overflow into a writing borrow.\n+            // Incrementing borrow can result in a non-reading value (<= 0) in these cases:\n+            // 1. It was < 0, i.e. there are writing borrows, so we can't allow a read borrow\n+            //    due to Rust's reference aliasing rules\n+            // 2. It was isize::max_value() (the max amount of reading borrows) and it overflowed\n+            //    into isize::min_value() (the max amount of writing borrows) so we can't allow\n+            //    an additional read borrow because isize can't represent so many read borrows\n+            //    (this can only happen if you mem::forget more than a small constant amount of\n+            //    `Ref`s, which is not good practice)\n             None\n         } else {\n+            // Incrementing borrow can result in a reading value (< 0) in these cases:\n+            // 1. It was = 0, i.e. it wasn't borrowed, and we are taking the first read borrow\n+            // 2. It was > 0 and < isize::max_value(), i.e. there were read borrows, and isize\n+            //    is large enough to represent having one more read borrow\n             borrow.set(b);\n             Some(BorrowRef { borrow })\n         }"}]}