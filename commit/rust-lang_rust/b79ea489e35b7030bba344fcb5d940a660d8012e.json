{"sha": "b79ea489e35b7030bba344fcb5d940a660d8012e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OWVhNDg5ZTM1YjcwMzBiYmEzNDRmY2I1ZDk0MGE2NjBkODAxMmU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-05T20:29:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-05T20:30:00Z"}, "message": "Support conditional compilation of native items. Closes #610", "tree": {"sha": "f8af698efbf6d98563d318ce7ae09e082357ca5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8af698efbf6d98563d318ce7ae09e082357ca5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b79ea489e35b7030bba344fcb5d940a660d8012e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b79ea489e35b7030bba344fcb5d940a660d8012e", "html_url": "https://github.com/rust-lang/rust/commit/b79ea489e35b7030bba344fcb5d940a660d8012e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b79ea489e35b7030bba344fcb5d940a660d8012e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6853e04fc40d02522a57660b043e220402d11416", "url": "https://api.github.com/repos/rust-lang/rust/commits/6853e04fc40d02522a57660b043e220402d11416", "html_url": "https://github.com/rust-lang/rust/commit/6853e04fc40d02522a57660b043e220402d11416"}], "stats": {"total": 46, "additions": 41, "deletions": 5}, "files": [{"sha": "4e6bb485cd23a55add7980609624c005087f5bb2", "filename": "src/comp/front/config.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b79ea489e35b7030bba344fcb5d940a660d8012e/src%2Fcomp%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79ea489e35b7030bba344fcb5d940a660d8012e/src%2Fcomp%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fconfig.rs?ref=b79ea489e35b7030bba344fcb5d940a660d8012e", "patch": "@@ -12,7 +12,8 @@ fn strip_unconfigured_items(@ast::crate crate) -> @ast::crate {\n     auto cfg = crate.node.config;\n \n     auto precursor = rec(fold_mod = bind fold_mod(cfg, _, _),\n-                         fold_block = bind fold_block(cfg, _, _)\n+                         fold_block = bind fold_block(cfg, _, _),\n+                         fold_native_mod = bind fold_native_mod(cfg, _, _)\n                          with *fold::default_ast_fold());\n \n     auto fold = fold::make_fold(precursor);\n@@ -24,7 +25,7 @@ fn strip_unconfigured_items(@ast::crate crate) -> @ast::crate {\n \n fn filter_item(&ast::crate_cfg cfg,\n                &@ast::item item) -> option::t[@ast::item] {\n-    if (in_cfg(cfg, item)) {\n+    if (item_in_cfg(cfg, item)) {\n         option::some(item)\n     } else {\n         option::none\n@@ -39,13 +40,32 @@ fn fold_mod(&ast::crate_cfg cfg, &ast::_mod m,\n             items=vec::map(fld.fold_item, filtered_items));\n }\n \n+fn filter_native_item(&ast::crate_cfg cfg, &@ast::native_item item)\n+    -> option::t[@ast::native_item] {\n+    if (native_item_in_cfg(cfg, item)) {\n+        option::some(item)\n+    } else {\n+        option::none\n+    }\n+}\n+\n+fn fold_native_mod(&ast::crate_cfg cfg, &ast::native_mod nm,\n+                   fold::ast_fold fld) -> ast::native_mod {\n+    auto filter = bind filter_native_item(cfg, _);\n+    auto filtered_items = vec::filter_map(filter, nm.items);\n+    ret rec(native_name=nm.native_name,\n+            abi=nm.abi,\n+            view_items=vec::map(fld.fold_view_item, nm.view_items),\n+            items=filtered_items);\n+}\n+\n fn filter_stmt(&ast::crate_cfg cfg,\n                &@ast::stmt stmt) -> option::t[@ast::stmt] {\n     alt (stmt.node) {\n         case (ast::stmt_decl(?decl, _)) {\n             alt (decl.node) {\n                 case (ast::decl_item(?item)) {\n-                    if (in_cfg(cfg, item)) {\n+                    if (item_in_cfg(cfg, item)) {\n                         option::some(stmt)\n                     } else {\n                         option::none\n@@ -67,12 +87,20 @@ fn fold_block(&ast::crate_cfg cfg, &ast::block_ b,\n             id=b.id);\n }\n \n+fn item_in_cfg(&ast::crate_cfg cfg, &@ast::item item) -> bool {\n+    ret in_cfg(cfg, item.attrs);\n+}\n+\n+fn native_item_in_cfg(&ast::crate_cfg cfg, &@ast::native_item item) -> bool {\n+    ret in_cfg(cfg, item.attrs);\n+}\n+\n // Determine if an item should be translated in the current crate\n // configuration based on the item's attributes\n-fn in_cfg(&ast::crate_cfg cfg, &@ast::item item) -> bool {\n+fn in_cfg(&ast::crate_cfg cfg, &vec[ast::attribute] attrs) -> bool {\n \n     // The \"cfg\" attributes on the item\n-    auto item_cfg_attrs = attr::find_attrs_by_name(item.attrs, \"cfg\");\n+    auto item_cfg_attrs = attr::find_attrs_by_name(attrs, \"cfg\");\n     auto item_has_cfg_attrs = vec::len(item_cfg_attrs) > 0u;\n     if (!item_has_cfg_attrs) { ret true; }\n "}, {"sha": "2dbf922aa8ed36a413917505943cee8c03e05cff", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b79ea489e35b7030bba344fcb5d940a660d8012e/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b79ea489e35b7030bba344fcb5d940a660d8012e/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=b79ea489e35b7030bba344fcb5d940a660d8012e", "patch": "@@ -85,3 +85,11 @@ fn test_in_fn_ctxt() {\n   const int i = 1;\n   assert i == 1;\n }\n+\n+mod test_native_items {\n+  native \"rust\" mod rustrt {\n+    #[cfg(bogus)]\n+    fn str_vec(str s) -> vec[u8];\n+    fn str_vec(str s) -> vec[u8];\n+  }\n+}\n\\ No newline at end of file"}]}