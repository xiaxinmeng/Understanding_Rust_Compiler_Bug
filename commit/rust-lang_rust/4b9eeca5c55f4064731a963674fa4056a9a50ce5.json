{"sha": "4b9eeca5c55f4064731a963674fa4056a9a50ce5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOWVlY2E1YzU1ZjQwNjQ3MzFhOTYzNjc0ZmE0MDU2YTlhNTBjZTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-17T21:56:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-17T21:56:04Z"}, "message": "Rollup merge of #71243 - Duddino:Fix2, r=estebank\n\nAccount for use of `try!()` in 2018 edition and guide users in the right direction\n\nfixes #71155", "tree": {"sha": "d763343c30cab7190d2280146cc464515c13cca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d763343c30cab7190d2280146cc464515c13cca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b9eeca5c55f4064731a963674fa4056a9a50ce5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJemiX0CRBK7hj4Ov3rIwAAdHIIACSdfX3suNdjPT4fF0eWxhFS\nKS3DI74omYJm6w0NaQ+m7bz63tN3k/jmX012oXaRRucoIk1er/eA4yeGL2qgo5tK\nsfo3+Gu20tV8TC6lavesndCuJ1xEqxboD87CrO7Wjiho0RCr4lbVNwDoyDoN7VZk\nVNyedpoWgD7V8hP8xfvPSBHbre15i8VUed9kcMegLXt+PHsxMK9+YjZpKoI21xkV\n5BsIh8h4hhUbpgZ/lS12ONvoHQdxrYX+fOPTzZmTks8f2BCNJDKhv61ozASGsh5R\nbi9nzWdVV4xiT8h9C9kaKUb10uTOZEcn/csvu2BIlKwBmWvdhoAWjyUIiRkBh1M=\n=3IcI\n-----END PGP SIGNATURE-----\n", "payload": "tree d763343c30cab7190d2280146cc464515c13cca3\nparent 6a140a31df14b7008c4f4ac5a691b068fc91cbf4\nparent 79abac863e6ef0077d70063518bd34a20f75eae6\nauthor Dylan DPC <dylan.dpc@gmail.com> 1587160564 +0200\ncommitter GitHub <noreply@github.com> 1587160564 +0200\n\nRollup merge of #71243 - Duddino:Fix2, r=estebank\n\nAccount for use of `try!()` in 2018 edition and guide users in the right direction\n\nfixes #71155\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9eeca5c55f4064731a963674fa4056a9a50ce5", "html_url": "https://github.com/rust-lang/rust/commit/4b9eeca5c55f4064731a963674fa4056a9a50ce5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b9eeca5c55f4064731a963674fa4056a9a50ce5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a140a31df14b7008c4f4ac5a691b068fc91cbf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a140a31df14b7008c4f4ac5a691b068fc91cbf4", "html_url": "https://github.com/rust-lang/rust/commit/6a140a31df14b7008c4f4ac5a691b068fc91cbf4"}, {"sha": "79abac863e6ef0077d70063518bd34a20f75eae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/79abac863e6ef0077d70063518bd34a20f75eae6", "html_url": "https://github.com/rust-lang/rust/commit/79abac863e6ef0077d70063518bd34a20f75eae6"}], "stats": {"total": 74, "additions": 73, "deletions": 1}, "files": [{"sha": "552f3d798ae8aa1a010ff54f490cb957bee4922d", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4b9eeca5c55f4064731a963674fa4056a9a50ce5/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9eeca5c55f4064731a963674fa4056a9a50ce5/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=4b9eeca5c55f4064731a963674fa4056a9a50ce5", "patch": "@@ -1054,6 +1054,39 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    pub(super) fn try_macro_suggestion(&mut self) -> PResult<'a, P<Expr>> {\n+        let is_try = self.token.is_keyword(kw::Try);\n+        let is_questionmark = self.look_ahead(1, |t| t == &token::Not); //check for !\n+        let is_open = self.look_ahead(2, |t| t == &token::OpenDelim(token::Paren)); //check for (\n+\n+        if is_try && is_questionmark && is_open {\n+            let lo = self.token.span;\n+            self.bump(); //remove try\n+            self.bump(); //remove !\n+            let try_span = lo.to(self.token.span); //we take the try!( span\n+            self.bump(); //remove (\n+            let is_empty = self.token == token::CloseDelim(token::Paren); //check if the block is empty\n+            self.consume_block(token::Paren, ConsumeClosingDelim::No); //eat the block\n+            let hi = self.token.span;\n+            self.bump(); //remove )\n+            let mut err = self.struct_span_err(lo.to(hi), \"use of deprecated `try` macro\");\n+            err.note(\"in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated\");\n+            let prefix = if is_empty { \"\" } else { \"alternatively, \" };\n+            if !is_empty {\n+                err.multipart_suggestion(\n+                    \"you can use the `?` operator instead\",\n+                    vec![(try_span, \"\".to_owned()), (hi, \"?\".to_owned())],\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+            err.span_suggestion(lo.shrink_to_lo(), &format!(\"{}you can still access the deprecated `try!()` macro using the \\\"raw identifier\\\" syntax\", prefix), \"r#\".to_string(), Applicability::MachineApplicable);\n+            err.emit();\n+            Ok(self.mk_expr_err(lo.to(hi)))\n+        } else {\n+            Err(self.expected_expression_found()) // The user isn't trying to invoke the try! macro\n+        }\n+    }\n+\n     /// Recovers a situation like `for ( $pat in $expr )`\n     /// and suggest writing `for $pat in $expr` instead.\n     ///"}, {"sha": "986f5410e26c0b454d83fa098d7a6f1a62185401", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b9eeca5c55f4064731a963674fa4056a9a50ce5/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9eeca5c55f4064731a963674fa4056a9a50ce5/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=4b9eeca5c55f4064731a963674fa4056a9a50ce5", "patch": "@@ -1006,7 +1006,7 @@ impl<'a> Parser<'a> {\n                 let expr = self.mk_expr(lo.to(self.prev_token.span), ExprKind::Lit(literal), attrs);\n                 self.maybe_recover_from_bad_qpath(expr, true)\n             }\n-            None => Err(self.expected_expression_found()),\n+            None => self.try_macro_suggestion(),\n         }\n     }\n "}, {"sha": "635ceac0b199ede4debc7d089b319e6f65c109a7", "filename": "src/test/ui/try-macro-suggestion.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b9eeca5c55f4064731a963674fa4056a9a50ce5/src%2Ftest%2Fui%2Ftry-macro-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b9eeca5c55f4064731a963674fa4056a9a50ce5/src%2Ftest%2Fui%2Ftry-macro-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-macro-suggestion.rs?ref=4b9eeca5c55f4064731a963674fa4056a9a50ce5", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --edition 2018\n+fn foo() -> Result<(), ()> {\n+    Ok(try!()); //~ ERROR use of deprecated `try` macro\n+    Ok(try!(Ok(()))) //~ ERROR use of deprecated `try` macro\n+}\n+\n+fn main() {\n+    let _ = foo();\n+}"}, {"sha": "9d833ef5ed9fb50cba6d1a66a7c8144017b973d7", "filename": "src/test/ui/try-macro-suggestion.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4b9eeca5c55f4064731a963674fa4056a9a50ce5/src%2Ftest%2Fui%2Ftry-macro-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b9eeca5c55f4064731a963674fa4056a9a50ce5/src%2Ftest%2Fui%2Ftry-macro-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-macro-suggestion.stderr?ref=4b9eeca5c55f4064731a963674fa4056a9a50ce5", "patch": "@@ -0,0 +1,30 @@\n+error: use of deprecated `try` macro\n+  --> $DIR/try-macro-suggestion.rs:3:8\n+   |\n+LL |     Ok(try!());\n+   |        ^^^^^^\n+   |\n+   = note: in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated\n+help: you can still access the deprecated `try!()` macro using the \"raw identifier\" syntax\n+   |\n+LL |     Ok(r#try!());\n+   |        ^^\n+\n+error: use of deprecated `try` macro\n+  --> $DIR/try-macro-suggestion.rs:4:8\n+   |\n+LL |     Ok(try!(Ok(())))\n+   |        ^^^^^^^^^^^^\n+   |\n+   = note: in the 2018 edition `try` is a reserved keyword, and the `try!()` macro is deprecated\n+help: you can use the `?` operator instead\n+   |\n+LL |     Ok(Ok(())?)\n+   |       --     ^\n+help: alternatively, you can still access the deprecated `try!()` macro using the \"raw identifier\" syntax\n+   |\n+LL |     Ok(r#try!(Ok(())))\n+   |        ^^\n+\n+error: aborting due to 2 previous errors\n+"}]}