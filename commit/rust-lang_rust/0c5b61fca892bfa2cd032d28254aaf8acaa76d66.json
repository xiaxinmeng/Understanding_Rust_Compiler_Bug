{"sha": "0c5b61fca892bfa2cd032d28254aaf8acaa76d66", "node_id": "C_kwDOAAsO6NoAKDBjNWI2MWZjYTg5MmJmYTJjZDAzMmQyODI1NGFhZjhhY2FhNzZkNjY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-01T20:15:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-01T20:15:02Z"}, "message": "Merge pull request #1253 from afonso360/msvc-nosysroot\n\nFix `no_sysroot` testsuite for MSVC environments", "tree": {"sha": "aa9263bea4ca12bd34638a349530d5317f47ddca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9263bea4ca12bd34638a349530d5317f47ddca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c5b61fca892bfa2cd032d28254aaf8acaa76d66", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi6DRGCRBK7hj4Ov3rIwAAucsIAGhGz2B/fP8MXcBPYpAWRo+r\noDOvUfAn/BUZa9BjP3ElAwyelcoxo7TbCYiDniz54mXv24cqnAA9sMW5SejNjb7r\n6obI/fy1606dOghm1L5xGIRfxKplSzcgOYtzwXvCgjoMeN3bNSs3ypH1ORgUs36S\nPqjO/BjOS8uAVuTIi5AXKMNId/sfIClCrf4Godz3inJfQEAi6AQVRx+7/8xKwvg7\nCVlXDbLK6VFRzxjUklAqUlVdHTCC3TJL8MSBTG9wMmv0tFwno1v3ZdoEXZaONbZz\nN4OT3IdoKSpoymOzx5Q1YS2OfFH9AouR7xpWI2pHDkweVlHN4wjDz8/w6IQsRk0=\n=wBde\n-----END PGP SIGNATURE-----\n", "payload": "tree aa9263bea4ca12bd34638a349530d5317f47ddca\nparent 231f7c6a21525dd125f96188a35b5d90ab8de29b\nparent c9bb51961cf9b124c974f61ec4d0da59e4459c0b\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1659384902 +0200\ncommitter GitHub <noreply@github.com> 1659384902 +0200\n\nMerge pull request #1253 from afonso360/msvc-nosysroot\n\nFix `no_sysroot` testsuite for MSVC environments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5b61fca892bfa2cd032d28254aaf8acaa76d66", "html_url": "https://github.com/rust-lang/rust/commit/0c5b61fca892bfa2cd032d28254aaf8acaa76d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c5b61fca892bfa2cd032d28254aaf8acaa76d66/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231f7c6a21525dd125f96188a35b5d90ab8de29b", "url": "https://api.github.com/repos/rust-lang/rust/commits/231f7c6a21525dd125f96188a35b5d90ab8de29b", "html_url": "https://github.com/rust-lang/rust/commit/231f7c6a21525dd125f96188a35b5d90ab8de29b"}, {"sha": "c9bb51961cf9b124c974f61ec4d0da59e4459c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9bb51961cf9b124c974f61ec4d0da59e4459c0b", "html_url": "https://github.com/rust-lang/rust/commit/c9bb51961cf9b124c974f61ec4d0da59e4459c0b"}], "stats": {"total": 117, "additions": 100, "deletions": 17}, "files": [{"sha": "dc83b10958e010b210cf72b9e2e3c5f1861f6bdb", "filename": "build_system/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c5b61fca892bfa2cd032d28254aaf8acaa76d66/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5b61fca892bfa2cd032d28254aaf8acaa76d66/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=0c5b61fca892bfa2cd032d28254aaf8acaa76d66", "patch": "@@ -465,7 +465,7 @@ impl TestRunner {\n         out_dir.push(\"out\");\n \n         let is_native = host_triple == target_triple;\n-        let jit_supported = target_triple.contains(\"x86_64\") && is_native;\n+        let jit_supported = target_triple.contains(\"x86_64\") && is_native && !host_triple.contains(\"windows\");\n \n         let mut rust_flags = env::var(\"RUSTFLAGS\").ok().unwrap_or(\"\".to_string());\n         let mut run_wrapper = Vec::new();"}, {"sha": "42f8aa50ba1a99d73f84d9de07eb550d1c778637", "filename": "example/mini_core.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c5b61fca892bfa2cd032d28254aaf8acaa76d66/example%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5b61fca892bfa2cd032d28254aaf8acaa76d66/example%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core.rs?ref=0c5b61fca892bfa2cd032d28254aaf8acaa76d66", "patch": "@@ -535,7 +535,7 @@ unsafe fn allocate(size: usize, _align: usize) -> *mut u8 {\n }\n \n #[lang = \"box_free\"]\n-unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, alloc: ()) {\n+unsafe fn box_free<T: ?Sized>(ptr: Unique<T>, _alloc: ()) {\n     libc::free(ptr.pointer.0 as *mut u8);\n }\n \n@@ -575,11 +575,19 @@ pub mod intrinsics {\n }\n \n pub mod libc {\n+    // With the new Universal CRT, msvc has switched to all the printf functions being inline wrapper\n+    // functions. legacy_stdio_definitions.lib which provides the printf wrapper functions as normal\n+    // symbols to link against.\n+    #[cfg_attr(unix, link(name = \"c\"))]\n+    #[cfg_attr(target_env=\"msvc\", link(name=\"legacy_stdio_definitions\"))]\n+    extern \"C\" {\n+        pub fn printf(format: *const i8, ...) -> i32;\n+    }\n+\n     #[cfg_attr(unix, link(name = \"c\"))]\n     #[cfg_attr(target_env = \"msvc\", link(name = \"msvcrt\"))]\n     extern \"C\" {\n         pub fn puts(s: *const i8) -> i32;\n-        pub fn printf(format: *const i8, ...) -> i32;\n         pub fn malloc(size: usize) -> *mut u8;\n         pub fn free(ptr: *mut u8);\n         pub fn memcpy(dst: *mut u8, src: *const u8, size: usize);"}, {"sha": "7e9cbe1bba5c74afa52dda93a1e346be39e5ef06", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 89, "deletions": 14, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/0c5b61fca892bfa2cd032d28254aaf8acaa76d66/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5b61fca892bfa2cd032d28254aaf8acaa76d66/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=0c5b61fca892bfa2cd032d28254aaf8acaa76d66", "patch": "@@ -139,7 +139,7 @@ pub struct bool_11 {\n     field10: bool,\n }\n \n-extern \"C\" fn bool_struct_in_11(arg0: bool_11) {}\n+extern \"C\" fn bool_struct_in_11(_arg0: bool_11) {}\n \n #[allow(unreachable_code)] // FIXME false positive\n fn main() {\n@@ -375,6 +375,7 @@ struct pthread_attr_t {\n }\n \n #[link(name = \"pthread\")]\n+#[cfg(unix)]\n extern \"C\" {\n     fn pthread_attr_init(attr: *mut pthread_attr_t) -> c_int;\n \n@@ -391,6 +392,91 @@ extern \"C\" {\n     ) -> c_int;\n }\n \n+type DWORD = u32;\n+type LPDWORD = *mut u32;\n+\n+type LPVOID = *mut c_void;\n+type HANDLE = *mut c_void;\n+\n+#[link(name = \"msvcrt\")]\n+#[cfg(windows)]\n+extern \"C\" {\n+    fn WaitForSingleObject(\n+        hHandle: LPVOID,\n+        dwMilliseconds: DWORD\n+    ) -> DWORD;\n+\n+    fn CreateThread(\n+        lpThreadAttributes: LPVOID, // Technically LPSECURITY_ATTRIBUTES, but we don't use it anyway\n+        dwStackSize: usize,\n+        lpStartAddress: extern \"C\" fn(_: *mut c_void) -> *mut c_void,\n+        lpParameter: LPVOID,\n+        dwCreationFlags: DWORD,\n+        lpThreadId: LPDWORD\n+    ) -> HANDLE;\n+}\n+\n+struct Thread {\n+    #[cfg(windows)]\n+    handle: HANDLE,\n+    #[cfg(unix)]\n+    handle: pthread_t,\n+}\n+\n+impl Thread {\n+    unsafe fn create(f: extern \"C\" fn(_: *mut c_void) -> *mut c_void) -> Self {\n+        #[cfg(unix)]\n+        {\n+            let mut attr: pthread_attr_t = zeroed();\n+            let mut thread: pthread_t = 0;\n+\n+            if pthread_attr_init(&mut attr) != 0 {\n+                assert!(false);\n+            }\n+\n+            if pthread_create(&mut thread, &attr, f, 0 as *mut c_void) != 0 {\n+                assert!(false);\n+            }\n+\n+            Thread {\n+                handle: thread,\n+            }\n+        }\n+\n+        #[cfg(windows)]\n+        {\n+            let handle = CreateThread(0 as *mut c_void, 0, f, 0 as *mut c_void, 0, 0 as *mut u32);\n+\n+            if (handle as u64) == 0 {\n+                assert!(false);\n+            }\n+\n+            Thread {\n+                handle,\n+            }\n+        }\n+    }\n+\n+\n+    unsafe fn join(self) {\n+        #[cfg(unix)]\n+        {\n+            let mut res = 0 as *mut c_void;\n+            pthread_join(self.handle, &mut res);\n+        }\n+\n+        #[cfg(windows)]\n+        {\n+            // The INFINITE macro is used to signal operations that do not timeout.\n+            let infinite = 0xffffffff;\n+            assert!(WaitForSingleObject(self.handle, infinite) == 0);\n+        }\n+    }\n+}\n+\n+\n+\n+\n #[thread_local]\n #[cfg(not(jit))]\n static mut TLS: u8 = 42;\n@@ -404,21 +490,10 @@ extern \"C\" fn mutate_tls(_: *mut c_void) -> *mut c_void {\n #[cfg(not(jit))]\n fn test_tls() {\n     unsafe {\n-        let mut attr: pthread_attr_t = zeroed();\n-        let mut thread: pthread_t = 0;\n-\n         assert_eq!(TLS, 42);\n \n-        if pthread_attr_init(&mut attr) != 0 {\n-            assert!(false);\n-        }\n-\n-        if pthread_create(&mut thread, &attr, mutate_tls, 0 as *mut c_void) != 0 {\n-            assert!(false);\n-        }\n-\n-        let mut res = 0 as *mut c_void;\n-        pthread_join(thread, &mut res);\n+        let thread = Thread::create(mutate_tls);\n+        thread.join();\n \n         // TLS of main thread must not have been changed by the other thread.\n         assert_eq!(TLS, 42);"}]}