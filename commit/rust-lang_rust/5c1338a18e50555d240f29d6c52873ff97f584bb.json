{"sha": "5c1338a18e50555d240f29d6c52873ff97f584bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMTMzOGExOGU1MDU1NWQyNDBmMjlkNmM1Mjg3M2ZmOTdmNTg0YmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-28T05:23:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-02-28T14:31:29Z"}, "message": "add ability to run multi-crate tests, run tests with --inline", "tree": {"sha": "5a75af5d211674f6c50b7d248962e9f092d152c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a75af5d211674f6c50b7d248962e9f092d152c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c1338a18e50555d240f29d6c52873ff97f584bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c1338a18e50555d240f29d6c52873ff97f584bb", "html_url": "https://github.com/rust-lang/rust/commit/5c1338a18e50555d240f29d6c52873ff97f584bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c1338a18e50555d240f29d6c52873ff97f584bb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa77cf3472a52f75b100fc1a62eb2b908526ebdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa77cf3472a52f75b100fc1a62eb2b908526ebdc", "html_url": "https://github.com/rust-lang/rust/commit/aa77cf3472a52f75b100fc1a62eb2b908526ebdc"}], "stats": {"total": 104, "additions": 80, "deletions": 24}, "files": [{"sha": "057d264920b5bb64197ee2723fddce453f2adac6", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c1338a18e50555d240f29d6c52873ff97f584bb/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/5c1338a18e50555d240f29d6c52873ff97f584bb/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=5c1338a18e50555d240f29d6c52873ff97f584bb", "patch": "@@ -253,8 +253,9 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\t\\\n \t\t--compile-lib-path $$(HLIB$(1)_H_$(3))\t\t\t\t\\\n         --run-lib-path $$(TLIB$(1)_T_$(2)_H_$(3))\t\t\t\\\n         --rustc-path $$(HBIN$(1)_H_$(3))/rustc$$(X)\t\t\t\\\n+        --aux-base $$(S)src/test/aux/                       \\\n         --stage-id stage$(1)-$(2)\t\t\t\t\t\t\t\\\n-        --rustcflags \"$$(CFG_RUSTC_FLAGS) --target=$(2)\"\t\\\n+        --rustcflags \"$$(CFG_RUSTC_FLAGS) --target=$(2) --inline\"\t\\\n         $$(CTEST_TESTARGS)\n \n CFAIL_ARGS$(1)-T-$(2)-H-$(3) :=\t\t\t\t\t\\"}, {"sha": "e1b75e3addf7f3f0e33026bc5efdc0bf65945ddf", "filename": "src/comp/metadata/astencode.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcomp%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcomp%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fastencode.rs?ref=5c1338a18e50555d240f29d6c52873ff97f584bb", "patch": "@@ -134,7 +134,7 @@ fn visit_ids(item: @ast::item, vfn: fn@(ast::node_id)) {\n         },\n \n         visit_item: fn@(i: @ast::item) {\n-            vfn(i.id)\n+            vfn(i.id);\n         },\n \n         visit_local: fn@(l: @ast::local) {\n@@ -772,7 +772,8 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n         let id0 = entry_doc[c::tag_table_id].as_int();\n         let id = xcx.tr_id(id0);\n \n-        #debug[\">> Side table document with tag 0x%x found for id %d (orig %d)\",\n+        #debug[\">> Side table document with tag 0x%x \\\n+                found for id %d (orig %d)\",\n                tag, id, id0];\n \n         if tag == (c::tag_table_mutbl as uint) {"}, {"sha": "b4dcd36b45bad1b0f61b3853fb67a0609139c561", "filename": "src/compiletest/common.rs", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcompiletest%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcompiletest%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcommon.rs?ref=5c1338a18e50555d240f29d6c52873ff97f584bb", "patch": "@@ -2,29 +2,43 @@ import option;\n \n enum mode { mode_compile_fail, mode_run_fail, mode_run_pass, mode_pretty, }\n \n-type config =\n+type config = {\n     // The library paths required for running the compiler\n+    compile_lib_path: str,\n+\n     // The library paths required for running compiled programs\n+    run_lib_path: str,\n+\n     // The rustc executable\n+    rustc_path: str,\n+\n     // The directory containing the tests to run\n+    src_base: str,\n+\n     // The directory where programs should be built\n+    build_base: str,\n+\n+    // Directory for auxiliary libraries\n+    aux_base: str,\n+\n     // The name of the stage being built (stage1, etc)\n+    stage_id: str,\n+\n     // The test mode, compile-fail, run-fail, run-pass\n+    mode: mode,\n+\n     // Run ignored tests\n+    run_ignored: bool,\n+\n     // Only run tests that match this filter\n+    filter: option<str>,\n+\n     // A command line to prefix program execution with,\n     // for running under valgrind\n+    runtool: option<str>,\n+\n     // Flags to pass to the compiler\n+    rustcflags: option<str>,\n+\n     // Explain what's going on\n-    {compile_lib_path: str,\n-     run_lib_path: str,\n-     rustc_path: str,\n-     src_base: str,\n-     build_base: str,\n-     stage_id: str,\n-     mode: mode,\n-     run_ignored: bool,\n-     filter: option<str>,\n-     runtool: option<str>,\n-     rustcflags: option<str>,\n-     verbose: bool};\n+    verbose: bool};"}, {"sha": "e0780bf473ca902f74741fe2ac312141a1fd00bd", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=5c1338a18e50555d240f29d6c52873ff97f584bb", "patch": "@@ -35,7 +35,8 @@ fn parse_config(args: [str]) -> config {\n     let opts =\n         [getopts::reqopt(\"compile-lib-path\"), getopts::reqopt(\"run-lib-path\"),\n          getopts::reqopt(\"rustc-path\"), getopts::reqopt(\"src-base\"),\n-         getopts::reqopt(\"build-base\"), getopts::reqopt(\"stage-id\"),\n+         getopts::reqopt(\"build-base\"), getopts::reqopt(\"aux-base\"),\n+         getopts::reqopt(\"stage-id\"),\n          getopts::reqopt(\"mode\"), getopts::optflag(\"ignored\"),\n          getopts::optopt(\"runtool\"), getopts::optopt(\"rustcflags\"),\n          getopts::optflag(\"verbose\")];\n@@ -53,6 +54,7 @@ fn parse_config(args: [str]) -> config {\n          rustc_path: getopts::opt_str(match, \"rustc-path\"),\n          src_base: getopts::opt_str(match, \"src-base\"),\n          build_base: getopts::opt_str(match, \"build-base\"),\n+         aux_base: getopts::opt_str(match, \"aux-base\"),\n          stage_id: getopts::opt_str(match, \"stage-id\"),\n          mode: str_mode(getopts::opt_str(match, \"mode\")),\n          run_ignored: getopts::opt_present(match, \"ignored\"),"}, {"sha": "e0a37cd94140d8b7f31bf3fcbf43aa58bef1f989", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=5c1338a18e50555d240f29d6c52873ff97f584bb", "patch": "@@ -17,12 +17,15 @@ type test_props = {\n     compile_flags: option<str>,\n     // If present, the name of a file that this test should match when\n     // pretty-printed\n-    pp_exact: option<str>\n+    pp_exact: option<str>,\n+    // Modules from aux directory that should be compiled\n+    aux_builds: [str]\n };\n \n // Load any test directives embedded in the file\n fn load_props(testfile: str) -> test_props {\n     let error_patterns = [];\n+    let aux_builds = [];\n     let compile_flags = option::none;\n     let pp_exact = option::none;\n     iter_header(testfile) {|ln|\n@@ -38,11 +41,16 @@ fn load_props(testfile: str) -> test_props {\n         if option::is_none(pp_exact) {\n             pp_exact = parse_pp_exact(ln, testfile);\n         }\n+\n+        option::may(parse_aux_build(ln)) {|ab|\n+            aux_builds += [ab];\n+        }\n     };\n     ret {\n         error_patterns: error_patterns,\n         compile_flags: compile_flags,\n-        pp_exact: pp_exact\n+        pp_exact: pp_exact,\n+        aux_builds: aux_builds\n     };\n }\n \n@@ -82,6 +90,10 @@ fn parse_error_pattern(line: str) -> option<str> {\n     parse_name_value_directive(line, \"error-pattern\")\n }\n \n+fn parse_aux_build(line: str) -> option<str> {\n+    parse_name_value_directive(line, \"aux-build\")\n+}\n+\n fn parse_compile_flags(line: str) -> option<str> {\n     parse_name_value_directive(line, \"compile-flags\")\n }"}, {"sha": "8bf5124d3f2f517d675ae49cfcc30cb4165d8216", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=5c1338a18e50555d240f29d6c52873ff97f584bb", "patch": "@@ -179,7 +179,7 @@ actual:\\n\\\n \n     fn make_typecheck_args(config: config, _testfile: str) -> procargs {\n         let prog = config.rustc_path;\n-        let args = [\"-\", \"--no-trans\", \"--lib\"];\n+        let args = [\"-\", \"--no-trans\", \"--lib\", \"-L\", config.build_base];\n         args += split_maybe_args(config.rustcflags);\n         ret {prog: prog, args: args};\n     }\n@@ -287,7 +287,16 @@ type procres = {status: int, stdout: str, stderr: str, cmdline: str};\n \n fn compile_test(config: config, props: test_props,\n                 testfile: str) -> procres {\n-    compose_and_run(config, testfile, bind make_compile_args(_, props, _),\n+    vec::iter(props.aux_builds) {|rel_ab|\n+        let abs_ab = fs::connect(config.aux_base, rel_ab);\n+        compose_and_run(config, abs_ab,\n+                        make_compile_args(_, props, [\"--lib\"],\n+                                          make_lib_name, _),\n+                        config.compile_lib_path, option::none);\n+    }\n+\n+    compose_and_run(config, testfile,\n+                    make_compile_args(_, props, [], make_exe_name, _),\n                     config.compile_lib_path, option::none)\n }\n \n@@ -305,15 +314,23 @@ fn compose_and_run(config: config, testfile: str,\n                        procargs.prog, procargs.args, input);\n }\n \n-fn make_compile_args(config: config, props: test_props, testfile: str) ->\n+fn make_compile_args(config: config, props: test_props, extras: [str],\n+                     xform: fn(config, str) -> str, testfile: str) ->\n    procargs {\n     let prog = config.rustc_path;\n-    let args = [testfile, \"-o\", make_exe_name(config, testfile)];\n+    let args = [testfile, \"-o\", xform(config, testfile),\n+                \"-L\", config.build_base] + extras;\n     args += split_maybe_args(config.rustcflags);\n     args += split_maybe_args(props.compile_flags);\n     ret {prog: prog, args: args};\n }\n \n+fn make_lib_name(config: config, testfile: str) -> str {\n+    // what we return here is not particularly important, as it\n+    // happens; rustc ignores everything except for the directory.\n+    output_base_name(config, testfile)\n+}\n+\n fn make_exe_name(config: config, testfile: str) -> str {\n     output_base_name(config, testfile) + os::exec_suffix()\n }"}, {"sha": "ce402165fddb5e2888e6c7cc2f69540912854f13", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=5c1338a18e50555d240f29d6c52873ff97f584bb", "patch": "@@ -387,7 +387,7 @@ fn test_option_int() {\n     }\n \n     fn deserialize_0<S: deserializer>(s: S) -> option<int> {\n-        s.read_enum(\"option\") {||\n+        s.read_enum(\"core::option::t\") {||\n             s.read_enum_variant {|i|\n                 alt check i {\n                   0u { none }"}, {"sha": "9c7c1d09b2b14d67c6d43ce7d4c44d30d2cbecca", "filename": "src/test/aux/cci_iter_lib.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Ftest%2Faux%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c1338a18e50555d240f29d6c52873ff97f584bb/src%2Ftest%2Faux%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Faux%2Fcci_iter_lib.rs?ref=5c1338a18e50555d240f29d6c52873ff97f584bb", "patch": "@@ -0,0 +1,9 @@\n+#[inline]\n+fn iter<T>(v: [T], f: fn(T)) {\n+    let i = 0u;\n+    let n = vec::len(v);\n+    while i < n {\n+        f(v[i]);\n+        i += 1u;\n+    }\n+}"}]}