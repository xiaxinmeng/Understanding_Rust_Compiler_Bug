{"sha": "b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZGU4MzMzYjNlZjI5ZmUzZDA5NTJkOTIwN2ZkMjc1YzQ1ZGE5ZjI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:17:43Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:17:43Z"}, "message": "rollup merge of #21441: alexcrichton/rustc-opts\n\nThis is a bit of cleanup work to clean out some old deprecated flags and deprecated lint names from the compiler (they've been deprecated for quite awhile now).\n\nThis also notably puts `--pretty` behind the `-Z unstable-options` flag (where it was supposed to be previously).", "tree": {"sha": "0078e7959f7dd2b601bcbf5281672bf262bdfcf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0078e7959f7dd2b601bcbf5281672bf262bdfcf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "html_url": "https://github.com/rust-lang/rust/commit/b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27838075e059bc8ab427c1e932b7dc24f0b611e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/27838075e059bc8ab427c1e932b7dc24f0b611e0", "html_url": "https://github.com/rust-lang/rust/commit/27838075e059bc8ab427c1e932b7dc24f0b611e0"}, {"sha": "64914d9d39aaa06f3796b412e90065d26a704eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/64914d9d39aaa06f3796b412e90065d26a704eea", "html_url": "https://github.com/rust-lang/rust/commit/64914d9d39aaa06f3796b412e90065d26a704eea"}], "stats": {"total": 287, "additions": 49, "deletions": 238}, "files": [{"sha": "9eac187a8e2cc01914073d8af1ca08f1f826b3c5", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -294,6 +294,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n         let aux_dir = aux_output_dir_name(config, testfile);\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         let mut args = vec!(\"-\".to_string(),\n+                            \"-Zunstable-options\".to_string(),\n                             \"--pretty\".to_string(),\n                             pretty_type,\n                             format!(\"--target={}\", config.target),\n@@ -340,7 +341,7 @@ actual:\\n\\\n         };\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         let mut args = vec!(\"-\".to_string(),\n-                            \"--no-trans\".to_string(),\n+                            \"-Zno-trans\".to_string(),\n                             \"--crate-type=lib\".to_string(),\n                             format!(\"--target={}\", target),\n                             \"-L\".to_string(),"}, {"sha": "fcb3200089b024b3079d30a34c4febf3ef391a3d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -231,30 +231,7 @@ impl LintStore {\n         // We have one lint pass defined in this module.\n         self.register_pass(sess, false, box GatherNodeLevels as LintPassObject);\n \n-        // Insert temporary renamings for a one-time deprecation (#16545)\n-        self.register_renamed(\"unnecessary_typecast\", \"unused_typecasts\");\n-        self.register_renamed(\"unsigned_negate\", \"unsigned_negation\");\n-        self.register_renamed(\"type_limits\", \"unused_comparisons\");\n-        self.register_renamed(\"type_overflow\", \"overflowing_literals\");\n-        self.register_renamed(\"ctypes\", \"improper_ctypes\");\n-        self.register_renamed(\"owned_heap_memory\", \"box_pointers\");\n-        self.register_renamed(\"unused_attribute\", \"unused_attributes\");\n-        self.register_renamed(\"path_statement\", \"path_statements\");\n-        self.register_renamed(\"unused_result\", \"unused_results\");\n-        self.register_renamed(\"non_uppercase_statics\", \"non_upper_case_globals\");\n-        self.register_renamed(\"unnecessary_parens\", \"unused_parens\");\n-        self.register_renamed(\"unnecessary_import_braces\", \"unused_import_braces\");\n-        self.register_renamed(\"unsafe_block\", \"unsafe_blocks\");\n-        self.register_renamed(\"unnecessary_allocation\", \"unused_allocation\");\n-        self.register_renamed(\"missing_doc\", \"missing_docs\");\n-        self.register_renamed(\"unused_extern_crate\", \"unused_extern_crates\");\n-        self.register_renamed(\"unnecessary_qualification\", \"unused_qualifications\");\n-        self.register_renamed(\"unrecognized_lint\", \"unknown_lints\");\n-        self.register_renamed(\"unused_variable\", \"unused_variables\");\n-        self.register_renamed(\"dead_assignment\", \"unused_assignments\");\n-        self.register_renamed(\"unknown_crate_type\", \"unknown_crate_types\");\n-        self.register_renamed(\"variant_size_difference\", \"variant_size_differences\");\n-        self.register_renamed(\"transmute_fat_ptr\", \"fat_ptr_transmutes\");\n+        // Insert temporary renamings for a one-time deprecation\n         self.register_renamed(\"raw_pointer_deriving\", \"raw_pointer_derive\");\n \n     }"}, {"sha": "1e4babef9f5a4c73b2fbb6ee8861930bbfb2bd8d", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 96, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -786,30 +786,14 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n         opt::multi(\"\", \"extern\", \"Specify where an external rust library is \\\n                                 located\",\n                  \"NAME=PATH\"),\n-        opt::opt(\"\", \"opt-level\", \"Optimize with possible levels 0-3\", \"LEVEL\"),\n         opt::opt(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n         opt::opt(\"\", \"color\", \"Configure coloring of output:\n             auto   = colorize, if output goes to a tty (default);\n             always = always colorize output;\n             never  = never colorize output\", \"auto|always|never\"),\n \n-        // DEPRECATED\n-        opt::flag(\"\", \"print-crate-name\", \"Output the crate name and exit\"),\n-        opt::flag(\"\", \"print-file-name\", \"Output the file(s) that would be \\\n-                                        written if compilation \\\n-                                        continued and exit\"),\n-        opt::opt(\"\",  \"debuginfo\",  \"Emit DWARF debug info to the objects created:\n-             0 = no debug info,\n-             1 = line-tables only (for stacktraces and breakpoints),\n-             2 = full debug info with variable and type information \\\n-                    (same as -g)\", \"LEVEL\"),\n-        opt::flag(\"\", \"no-trans\", \"Run all passes except translation; no output\"),\n-        opt::flag(\"\", \"no-analysis\", \"Parse and expand the source, but run no \\\n-                                    analysis and produce no output\"),\n-        opt::flag(\"\", \"parse-only\", \"Parse only; do not compile, assemble, \\\n-                                   or link\"),\n-        opt::flagopt(\"\", \"pretty\",\n+        opt::flagopt_u(\"\", \"pretty\",\n                    \"Pretty-print the input instead of compiling;\n                    valid types are: `normal` (un-annotated source),\n                    `expanded` (crates expanded),\n@@ -823,9 +807,6 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n                       `everybody_loops` (all function bodies replaced with `loop {}`).\",\n                      \"TYPE\"),\n         opt::opt_u(\"\", \"show-span\", \"Show spans for compiler debugging\", \"expr|pat|ty\"),\n-        opt::flagopt(\"\", \"dep-info\",\n-                 \"Output dependency info to <filename> after compiling, \\\n-                  in a format suitable for use by Makefiles\", \"FILENAME\"),\n     ]);\n     opts\n }\n@@ -861,27 +842,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let debugging_opts = build_debugging_options(matches);\n \n-    let parse_only = if matches.opt_present(\"parse-only\") {\n-        // FIXME(acrichto) remove this eventually\n-        early_warn(\"--parse-only is deprecated in favor of -Z parse-only\");\n-        true\n-    } else {\n-        debugging_opts.parse_only\n-    };\n-    let no_trans = if matches.opt_present(\"no-trans\") {\n-        // FIXME(acrichto) remove this eventually\n-        early_warn(\"--no-trans is deprecated in favor of -Z no-trans\");\n-        true\n-    } else {\n-        debugging_opts.no_trans\n-    };\n-    let no_analysis = if matches.opt_present(\"no-analysis\") {\n-        // FIXME(acrichto) remove this eventually\n-        early_warn(\"--no-analysis is deprecated in favor of -Z no-analysis\");\n-        true\n-    } else {\n-        debugging_opts.no_analysis\n-    };\n+    let parse_only = debugging_opts.parse_only;\n+    let no_trans = debugging_opts.no_trans;\n+    let no_analysis = debugging_opts.no_analysis;\n \n     if debugging_opts.debug_llvm {\n         unsafe { llvm::LLVMSetDebug(1); }\n@@ -921,28 +884,10 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         host_triple().to_string());\n     let opt_level = {\n         if matches.opt_present(\"O\") {\n-            if matches.opt_present(\"opt-level\") {\n-                early_error(\"-O and --opt-level both provided\");\n-            }\n             if cg.opt_level.is_some() {\n                 early_error(\"-O and -C opt-level both provided\");\n             }\n             Default\n-        } else if matches.opt_present(\"opt-level\") {\n-            // FIXME(acrichto) remove this eventually\n-            early_warn(\"--opt-level=N is deprecated in favor of -C opt-level=N\");\n-            match matches.opt_str(\"opt-level\").as_ref().map(|s| s.as_slice()) {\n-                None      |\n-                Some(\"0\") => No,\n-                Some(\"1\") => Less,\n-                Some(\"2\") => Default,\n-                Some(\"3\") => Aggressive,\n-                Some(arg) => {\n-                    early_error(&format!(\"optimization level needs to be \\\n-                                         between 0-3 (instead was `{}`)\",\n-                                        arg)[]);\n-                }\n-            }\n         } else {\n             match cg.opt_level {\n                 None => No,\n@@ -960,27 +905,10 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     };\n     let gc = debugging_opts.gc;\n     let debuginfo = if matches.opt_present(\"g\") {\n-        if matches.opt_present(\"debuginfo\") {\n-            early_error(\"-g and --debuginfo both provided\");\n-        }\n         if cg.debuginfo.is_some() {\n             early_error(\"-g and -C debuginfo both provided\");\n         }\n         FullDebugInfo\n-    } else if matches.opt_present(\"debuginfo\") {\n-        // FIXME(acrichto) remove this eventually\n-        early_warn(\"--debuginfo=N is deprecated in favor of -C debuginfo=N\");\n-        match matches.opt_str(\"debuginfo\").as_ref().map(|s| s.as_slice()) {\n-            Some(\"0\") => NoDebugInfo,\n-            Some(\"1\") => LimitedDebugInfo,\n-            None      |\n-            Some(\"2\") => FullDebugInfo,\n-            Some(arg) => {\n-                early_error(&format!(\"debug info level needs to be between \\\n-                                     0-2 (instead was `{}`)\",\n-                                    arg)[]);\n-            }\n-        }\n     } else {\n         match cg.debuginfo {\n             None | Some(0) => NoDebugInfo,\n@@ -1036,15 +964,9 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n \n     let cfg = parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let test = matches.opt_present(\"test\");\n-    let write_dependency_info = if matches.opt_present(\"dep-info\") {\n-        // FIXME(acrichto) remove this eventually\n-        early_warn(\"--dep-info has been deprecated in favor of --emit\");\n-        (true, matches.opt_str(\"dep-info\").map(|p| Path::new(p)))\n-    } else {\n-        (output_types.contains(&OutputTypeDepInfo), None)\n-    };\n+    let write_dependency_info = (output_types.contains(&OutputTypeDepInfo), None);\n \n-    let mut prints = matches.opt_strs(\"print\").into_iter().map(|s| {\n+    let prints = matches.opt_strs(\"print\").into_iter().map(|s| {\n         match s.as_slice() {\n             \"crate-name\" => PrintRequest::CrateName,\n             \"file-names\" => PrintRequest::FileNames,\n@@ -1054,18 +976,6 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n             }\n         }\n     }).collect::<Vec<_>>();\n-    if matches.opt_present(\"print-crate-name\") {\n-        // FIXME(acrichto) remove this eventually\n-        early_warn(\"--print-crate-name has been deprecated in favor of \\\n-                    --print crate-name\");\n-        prints.push(PrintRequest::CrateName);\n-    }\n-    if matches.opt_present(\"print-file-name\") {\n-        // FIXME(acrichto) remove this eventually\n-        early_warn(\"--print-file-name has been deprecated in favor of \\\n-                    --print file-names\");\n-        prints.push(PrintRequest::FileNames);\n-    }\n \n     if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n         early_warn(\"-C remark will not show source locations without \\"}, {"sha": "0e940b85bd84d9064669d46b61f625c7bc846a49", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -153,10 +153,14 @@ fn run_compiler(args: &[String]) {\n         return\n     }\n \n-    let pretty = matches.opt_default(\"pretty\", \"normal\").map(|a| {\n-        // stable pretty-print variants only\n-        pretty::parse_pretty(&sess, a.as_slice(), false)\n-    });\n+    let pretty = if sess.opts.debugging_opts.unstable_options {\n+        matches.opt_default(\"pretty\", \"normal\").map(|a| {\n+            // stable pretty-print variants only\n+            pretty::parse_pretty(&sess, a.as_slice(), false)\n+        })\n+    } else {\n+        None\n+    };\n     let pretty = if pretty.is_none() &&\n         sess.unstable_options() {\n             matches.opt_str(\"xpretty\").map(|a| {"}, {"sha": "7ffec37772fe8587c6bbdccb3dc1b28be73f141d", "filename": "src/test/compile-fail/lint-renaming.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Fcompile-fail%2Flint-renaming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Fcompile-fail%2Flint-renaming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-renaming.rs?ref=27838075e059bc8ab427c1e932b7dc24f0b611e0", "patch": "@@ -1,16 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Check that lint deprecation works\n-\n-#[deny(unused_variable)] //~ warning: lint unused_variable has been renamed to unused_variables\n-pub fn main() {\n-    let x = 0u8; //~ error: unused variable:\n-}"}, {"sha": "3eae12f234fe278d7e30d67654b9d750990cb07f", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -10,7 +10,7 @@\n \n #![allow(dead_code)]\n \n-// compile-flags: -D type-limits\n+// compile-flags: -D unused-comparisons\n fn main() { }\n \n fn foo() {"}, {"sha": "d205e2a2e4e097c44ddce58f0cfbd2a09aaac8e7", "filename": "src/test/compile-fail/warn-path-statement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwarn-path-statement.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -D path-statement\n+// compile-flags: -D path-statements\n fn main() {\n \n     let x = 10is;"}, {"sha": "124cdfb436ca32409dae5ed4b6fef0a438173566", "filename": "src/test/debuginfo/issue7712.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fdebuginfo%2Fissue7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fdebuginfo%2Fissue7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fissue7712.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:--debuginfo=1\n+// compile-flags:-C debuginfo=1\n // min-lldb-version: 310\n \n pub trait TraitWithDefaultMethod : Sized {"}, {"sha": "0050b9273e82c3f51aae439283679ac5e365088d", "filename": "src/test/debuginfo/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -11,7 +11,7 @@\n // ignore-android: FIXME(#10381)\n // min-lldb-version: 310\n \n-// compile-flags:--debuginfo=1\n+// compile-flags:-C debuginfo=1\n \n // gdb-command:run\n // lldb-command:run"}, {"sha": "76a0fd58395628a14587553d48e7f63f5eada9b9", "filename": "src/test/debuginfo/limited-debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flimited-debuginfo.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -12,7 +12,7 @@\n \n // ignore-lldb\n \n-// compile-flags:--debuginfo=1\n+// compile-flags:-C debuginfo=1\n \n // Make sure functions have proper names\n // gdb-command:info functions"}, {"sha": "1afda457411da96b4b515bc5de0641c8aac6d5e2", "filename": "src/test/run-make/crate-data-smoke/Makefile", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -1,10 +1,10 @@\n -include ../tools.mk\n \n all:\n-\t[ `$(RUSTC) --print-crate-name crate.rs` = \"foo\" ]\n-\t[ `$(RUSTC) --print-file-name crate.rs` = \"$(call BIN,foo)\" ]\n-\t[ `$(RUSTC) --print-file-name --crate-type=lib \\\n+\t[ `$(RUSTC) --print crate-name crate.rs` = \"foo\" ]\n+\t[ `$(RUSTC) --print file-names crate.rs` = \"$(call BIN,foo)\" ]\n+\t[ `$(RUSTC) --print file-names --crate-type=lib \\\n \t\t--test crate.rs` = \"$(call BIN,foo)\" ]\n-\t[ `$(RUSTC) --print-file-name --test lib.rs` = \"$(call BIN,mylib)\" ]\n-\t$(RUSTC) --print-file-name lib.rs\n-\t$(RUSTC) --print-file-name rlib.rs\n+\t[ `$(RUSTC) --print file-names --test lib.rs` = \"$(call BIN,mylib)\" ]\n+\t$(RUSTC) --print file-names lib.rs\n+\t$(RUSTC) --print file-names rlib.rs"}, {"sha": "efa6dfe981bb6badc5c7cc67089d750322198e4d", "filename": "src/test/run-make/dep-info-custom/Makefile", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-custom%2FMakefile?ref=27838075e059bc8ab427c1e932b7dc24f0b611e0", "patch": "@@ -1,25 +0,0 @@\n--include ../tools.mk\n-\n-# FIXME: ignore freebsd/windows\n-# (windows: see `../dep-info/Makefile`)\n-ifneq ($(shell uname),FreeBSD)\n-ifndef IS_WINDOWS\n-all:\n-\t$(RUSTC) --dep-info $(TMPDIR)/custom-deps-file.d --crate-type=lib lib.rs\n-\tsleep 1\n-\ttouch foo.rs\n-\t-rm -f $(TMPDIR)/done\n-\t$(MAKE) -drf Makefile.foo\n-\trm $(TMPDIR)/done\n-\tpwd\n-\t$(MAKE) -drf Makefile.foo\n-\trm $(TMPDIR)/done && exit 1 || exit 0\n-else\n-all:\n-\n-endif\n-\n-else\n-all:\n-\n-endif"}, {"sha": "88be7630e83914dd325f0ec45171213132507ac3", "filename": "src/test/run-make/dep-info-custom/Makefile.foo", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2FMakefile.foo", "raw_url": "https://github.com/rust-lang/rust/raw/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2FMakefile.foo", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-custom%2FMakefile.foo?ref=27838075e059bc8ab427c1e932b7dc24f0b611e0", "patch": "@@ -1,7 +0,0 @@\n-LIB := $(shell $(RUSTC) --print file-names --crate-type=lib lib.rs)\n-\n-$(TMPDIR)/$(LIB):\n-\t$(RUSTC) --dep-info $(TMPDIR)/custom-deps-file.d --crate-type=lib lib.rs\n-\ttouch $(TMPDIR)/done\n-\n--include $(TMPDIR)/custom-deps-file.d"}, {"sha": "4c79f7e2855356528414cdf805b4f5215d8d7c7c", "filename": "src/test/run-make/dep-info-custom/bar.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-custom%2Fbar.rs?ref=27838075e059bc8ab427c1e932b7dc24f0b611e0", "patch": "@@ -1,11 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn bar() {}"}, {"sha": "2661b1f4eb49b7a93d03ca34e2563991eb2e37c3", "filename": "src/test/run-make/dep-info-custom/foo.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-custom%2Ffoo.rs?ref=27838075e059bc8ab427c1e932b7dc24f0b611e0", "patch": "@@ -1,11 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub fn foo() {}"}, {"sha": "14baa8ca55a3978dccbdf65fcf6dcc43098a3957", "filename": "src/test/run-make/dep-info-custom/lib.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27838075e059bc8ab427c1e932b7dc24f0b611e0/src%2Ftest%2Frun-make%2Fdep-info-custom%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-custom%2Flib.rs?ref=27838075e059bc8ab427c1e932b7dc24f0b611e0", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![crate_name=\"foo\"]\n-\n-pub mod foo;\n-pub mod bar;"}, {"sha": "eda8cb700810dd0db048a92ba8f1202107c2850c", "filename": "src/test/run-make/dep-info-spaces/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fdep-info-spaces%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fdep-info-spaces%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-spaces%2FMakefile?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -5,7 +5,7 @@\n ifneq ($(shell uname),FreeBSD)\n ifndef IS_WINDOWS\n all:\n-\t$(RUSTC) --dep-info $(TMPDIR)/custom-deps-file.d --crate-type=lib lib.rs\n+\t$(RUSTC) --emit link,dep-info --crate-type=lib lib.rs\n \tsleep 1\n \ttouch 'foo foo.rs'\n \t-rm -f $(TMPDIR)/done"}, {"sha": "2f4cc486d86670a58c6465651b9a5eec357eec2d", "filename": "src/test/run-make/dep-info-spaces/Makefile.foo", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fdep-info-spaces%2FMakefile.foo", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fdep-info-spaces%2FMakefile.foo", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info-spaces%2FMakefile.foo?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -1,7 +1,7 @@\n-LIB := $(shell $(RUSTC) --print-file-name --crate-type=lib lib.rs)\n+LIB := $(shell $(RUSTC) --print file-names --crate-type=lib lib.rs)\n \n $(TMPDIR)/$(LIB):\n-\t$(RUSTC) --dep-info $(TMPDIR)/custom-deps-file.d --crate-type=lib lib.rs\n+\t$(RUSTC) --emit link,dep-info --crate-type=lib lib.rs\n \ttouch $(TMPDIR)/done\n \n--include $(TMPDIR)/custom-deps-file.d\n+-include $(TMPDIR)/lib.d"}, {"sha": "a1828cd1f5d731d5319808bee97afdc3b71335f2", "filename": "src/test/run-make/dep-info/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fdep-info%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fdep-info%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fdep-info%2FMakefile?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -7,7 +7,7 @@\n ifneq ($(shell uname),FreeBSD)\n ifndef IS_WINDOWS\n all:\n-\t$(RUSTC) --dep-info --crate-type=lib lib.rs\n+\t$(RUSTC) --emit dep-info,link --crate-type=lib lib.rs\n \tsleep 2\n \ttouch foo.rs\n \t-rm -f $(TMPDIR)/done"}, {"sha": "89fbfa0a1bf9dacea356e7289aec29765ce36287", "filename": "src/test/run-make/error-writing-dependencies/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ferror-writing-dependencies%2FMakefile?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -2,7 +2,7 @@\n \n all:\n \t# Let's get a nice error message\n-\t$(RUSTC) foo.rs --dep-info foo/bar/baz 2>&1 | \\\n+\t$(BARE_RUSTC) foo.rs --emit dep-info --out-dir foo/bar/baz 2>&1 | \\\n \t\tgrep \"error writing dependencies\"\n \t# Make sure the filename shows up\n-\t$(RUSTC) foo.rs --dep-info foo/bar/baz 2>&1 | grep \"baz\"\n+\t$(BARE_RUSTC) foo.rs --emit dep-info --out-dir foo/bar/baz 2>&1 | grep \"baz\""}, {"sha": "1533729de945f9b27bdf6f7fc44364fabcd55170", "filename": "src/test/run-make/graphviz-flowgraph/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2FMakefile?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -13,7 +13,7 @@ all: $(patsubst %.rs,$(TMPDIR)/%.check,$(FILES))\n RUSTC_LIB=$(RUSTC) --crate-type=lib\n \n define FIND_LAST_BLOCK\n-LASTBLOCKNUM_$(1) := $(shell $(RUSTC_LIB) --pretty=expanded,identified $(1) \\\n+LASTBLOCKNUM_$(1) := $(shell $(RUSTC_LIB) -Z unstable-options --pretty=expanded,identified $(1) \\\n \t\t\t | grep block\n \t\t\t | tail -1\n \t\t\t | sed -e 's@.*/\\* block \\([0-9]*\\) \\*/.*@\\1@')"}, {"sha": "136d7643ade37fc68c328f1be800e44aa1fdeb3b", "filename": "src/test/run-make/pretty-expanded-hygiene/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2FMakefile?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -3,7 +3,8 @@\n REPLACEMENT := s/[0-9][0-9]*\\#[0-9][0-9]*/$(shell date)/g\n \n all:\n-\t$(RUSTC) -o $(TMPDIR)/input.out --pretty expanded,hygiene input.rs\n+\t$(RUSTC) -o $(TMPDIR)/input.out -Z unstable-options \\\n+\t\t--pretty expanded,hygiene input.rs\n \n \t# the name/ctxt numbers are very internals-dependent and thus\n \t# change relatively frequently, and testing for their exact values"}, {"sha": "7a8dc8d871ca77f47ce4f966b2af0fb3ddde0dff", "filename": "src/test/run-make/pretty-expanded/Makefile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fpretty-expanded%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fpretty-expanded%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded%2FMakefile?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -1,4 +1,5 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) -o $(TMPDIR)/input.expanded.rs --pretty=expanded input.rs\n+\t$(RUSTC) -o $(TMPDIR)/input.expanded.rs -Z unstable-options \\\n+\t\t--pretty=expanded input.rs"}, {"sha": "9f0c3f5120dfb08172d4c567cdbf978357cce0a1", "filename": "src/test/run-make/pretty-print-path-suffix/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-print-path-suffix%2FMakefile?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -1,9 +1,9 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) -o $(TMPDIR)/foo.out --pretty normal=foo input.rs\n-\t$(RUSTC) -o $(TMPDIR)/nest_foo.out --pretty normal=nest::foo input.rs\n-\t$(RUSTC) -o $(TMPDIR)/foo_method.out --pretty normal=foo_method input.rs\n+\t$(RUSTC) -o $(TMPDIR)/foo.out -Z unstable-options --pretty normal=foo input.rs\n+\t$(RUSTC) -o $(TMPDIR)/nest_foo.out -Z unstable-options --pretty normal=nest::foo input.rs\n+\t$(RUSTC) -o $(TMPDIR)/foo_method.out -Z unstable-options --pretty normal=foo_method input.rs\n \tdiff -u $(TMPDIR)/foo.out foo.pp\n \tdiff -u $(TMPDIR)/nest_foo.out nest_foo.pp\n \tdiff -u $(TMPDIR)/foo_method.out foo_method.pp"}, {"sha": "8909dee11f0fa00c79d353f043337231d2fb5f15", "filename": "src/test/run-make/pretty-print-to-file/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fpretty-print-to-file%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Fpretty-print-to-file%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-print-to-file%2FMakefile?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -1,5 +1,5 @@\n -include ../tools.mk\n \n all:\n-\t$(RUSTC) -o $(TMPDIR)/input.out --pretty=normal input.rs\n+\t$(RUSTC) -o $(TMPDIR)/input.out --pretty=normal -Z unstable-options input.rs\n \tdiff -u $(TMPDIR)/input.out input.pp"}, {"sha": "1c791f0690ca51cffef966262839b2c0d96a7c4b", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -5,7 +5,8 @@ HOST_RPATH_ENV = \\\n TARGET_RPATH_ENV = \\\n     $(LD_LIB_PATH_ENVVAR)=\"$(TMPDIR):$(TARGET_RPATH_DIR):$($(LD_LIB_PATH_ENVVAR))\"\n \n-RUSTC := $(HOST_RPATH_ENV) $(RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR)\n+BARE_RUSTC := $(HOST_RPATH_ENV) $(RUSTC)\n+RUSTC := $(BARE_RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR)\n CC := $(CC) -L $(TMPDIR)\n HTMLDOCCK := $(PYTHON) $(S)/src/etc/htmldocck.py\n "}, {"sha": "f04a760e5f65172e48289c7224a836df4caa86da", "filename": "src/test/run-pass/crate-name-attr-used.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-name-attr-used.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:--crate-name crate-name-attr-used -F unused-attribute\n+// compile-flags:--crate-name crate-name-attr-used -F unused-attributes\n \n #![crate_name = \"crate-name-attr-used\"]\n "}, {"sha": "73121918259a73543379ebc7294f97ea8d69edc8", "filename": "src/test/run-pass/warn-ctypes-inhibit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5de8333b3ef29fe3d0952d9207fd275c45da9f2/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwarn-ctypes-inhibit.rs?ref=b5de8333b3ef29fe3d0952d9207fd275c45da9f2", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags:-D ctypes\n+// compile-flags:-D improper-ctypes\n \n-#![allow(ctypes)]\n+#![allow(improper_ctypes)]\n \n mod libc {\n     extern {"}]}