{"sha": "727731f89ed5c341237705026f50f5f6a566336d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyNzczMWY4OWVkNWMzNDEyMzc3MDUwMjZmNTBmNWY2YTU2NjMzNmQ=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-09-25T16:41:10Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-10-29T16:09:20Z"}, "message": "Assorted cleanups suggested by reviewers.", "tree": {"sha": "8d1fea9979b900d4559ad4479248ab77d6bcf6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d1fea9979b900d4559ad4479248ab77d6bcf6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/727731f89ed5c341237705026f50f5f6a566336d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/727731f89ed5c341237705026f50f5f6a566336d", "html_url": "https://github.com/rust-lang/rust/commit/727731f89ed5c341237705026f50f5f6a566336d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/727731f89ed5c341237705026f50f5f6a566336d/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01097cbab00f64b922bcf5b91fb26a68f6d0d9cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf", "html_url": "https://github.com/rust-lang/rust/commit/01097cbab00f64b922bcf5b91fb26a68f6d0d9cf"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "75611f88b6384eefe5cea9885a5fec5393b2eb8a", "filename": "src/libextra/enum_set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibextra%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibextra%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fenum_set.rs?ref=727731f89ed5c341237705026f50f5f6a566336d", "patch": "@@ -139,7 +139,8 @@ mod test {\n \n     use enum_set::*;\n \n-    #[deriving(Eq)] #[repr(uint)]\n+    #[deriving(Eq)]\n+    #[repr(uint)]\n     enum Foo {\n         A, B, C\n     }"}, {"sha": "6294b6cb6e3128f6cfa400187cb1f8161266c6d4", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=727731f89ed5c341237705026f50f5f6a566336d", "patch": "@@ -111,7 +111,8 @@ pub static tag_items_data_item_reexport_def_id: uint = 0x4e;\n pub static tag_items_data_item_reexport_name: uint = 0x4f;\n \n // used to encode crate_ctxt side tables\n-#[deriving(Eq)] #[repr(uint)]\n+#[deriving(Eq)]\n+#[repr(uint)]\n pub enum astencode_tag { // Reserves 0x50 -- 0x6f\n     tag_ast = 0x50,\n "}, {"sha": "6e77a0cf720f0be6ab90fe9051694281f3e36cfc", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=727731f89ed5c341237705026f50f5f6a566336d", "patch": "@@ -359,7 +359,7 @@ fn bounds_usable(cx: &mut CrateContext, ity: IntType, bounds: &IntBounds) -> boo\n     }\n }\n \n-fn ty_of_inttype(ity: IntType) -> ty::t {\n+pub fn ty_of_inttype(ity: IntType) -> ty::t {\n     match ity {\n         attr::SignedInt(t) => ty::mk_mach_int(t),\n         attr::UnsignedInt(t) => ty::mk_mach_uint(t)"}, {"sha": "3c112b6fbf1ec65885bb8fef77faa5c0604e5367", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=727731f89ed5c341237705026f50f5f6a566336d", "patch": "@@ -109,7 +109,6 @@ use std::libc::{c_uint, c_ulonglong, c_longlong};\n use std::ptr;\n use std::unstable::atomics;\n use std::vec;\n-use syntax::attr;\n use syntax::codemap::{Span, Pos};\n use syntax::{ast, codemap, ast_util, ast_map, opt_vec};\n use syntax::parse::token;\n@@ -1422,10 +1421,8 @@ fn prepare_enum_metadata(cx: &mut CrateContext,\n     let discriminant_type_metadata = |inttype| {\n         let discriminant_llvm_type = adt::ll_inttype(cx, inttype);\n         let (discriminant_size, discriminant_align) = size_and_align_of(cx, discriminant_llvm_type);\n-        let discriminant_base_type_metadata = type_metadata(cx, match inttype {\n-            attr::SignedInt(t) => ty::mk_mach_int(t),\n-            attr::UnsignedInt(t) => ty::mk_mach_uint(t)\n-        }, codemap::dummy_sp());\n+        let discriminant_base_type_metadata = type_metadata(cx, adt::ty_of_inttype(inttype),\n+                                                            codemap::dummy_sp());\n         do enum_name.with_c_str |enum_name| {\n             unsafe {\n                 llvm::LLVMDIBuilderCreateEnumerationType("}, {"sha": "ad25213098bd8f1387fbb7c4d8705dae878f8ed4", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=727731f89ed5c341237705026f50f5f6a566336d", "patch": "@@ -715,7 +715,8 @@ pub struct ParamBounds {\n \n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n-#[deriving(Clone, Eq, IterBytes, ToStr)] #[repr(uint)]\n+#[deriving(Clone, Eq, IterBytes, ToStr)]\n+#[repr(uint)]\n pub enum BuiltinBound {\n     BoundStatic,\n     BoundSend,"}, {"sha": "7a5a326add40f8ac2010d48b188ede7a31d80e81", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727731f89ed5c341237705026f50f5f6a566336d/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=727731f89ed5c341237705026f50f5f6a566336d", "patch": "@@ -385,8 +385,7 @@ pub fn find_repr_attr(diagnostic: @mut span_handler, attr: @ast::MetaItem, acc:\n             for item in items.iter() {\n                 match item.node {\n                     ast::MetaWord(word) => {\n-                        let word: &str = word;\n-                        let hint = match word {\n+                        let hint = match word.as_slice() {\n                             // Can't use \"extern\" because it's not a lexical identifier.\n                             \"C\" => ReprExtern,\n                             _ => match int_type_of_word(word) {"}, {"sha": "3bedbfa27b7cae332b7f52d400877dd3dc6342d5", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/727731f89ed5c341237705026f50f5f6a566336d/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/727731f89ed5c341237705026f50f5f6a566336d/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=727731f89ed5c341237705026f50f5f6a566336d", "patch": "@@ -26,7 +26,8 @@ pub mod pipes {\n         payload: Option<T>\n     }\n \n-    #[deriving(Eq)] #[repr(int)]\n+    #[deriving(Eq)]\n+    #[repr(int)]\n     pub enum state {\n         empty,\n         full,"}]}