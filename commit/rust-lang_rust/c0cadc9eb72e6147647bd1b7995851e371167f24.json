{"sha": "c0cadc9eb72e6147647bd1b7995851e371167f24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwY2FkYzllYjcyZTYxNDc2NDdiZDFiNzk5NTg1MWUzNzExNjdmMjQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-11-27T11:46:02Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-12-23T18:35:22Z"}, "message": "bootstrap: convert rustc-dev to use Tarball", "tree": {"sha": "f87bf7dc1e71566a561710c8344b7fe77a5d5cb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f87bf7dc1e71566a561710c8344b7fe77a5d5cb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0cadc9eb72e6147647bd1b7995851e371167f24", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl/jjfMACgkQPgar6Auq\n8Zw/Ow//U/3s/kVvb3OjNnX5Xv1Dom/MoqZtMzjE4wpiSeAXLL4qdkUEG9aLmLwp\nM6D0SG0kBPhcptlsS2Jr4VlEsBfmtcAHz7jpSj2mb1xFG8SwaIYF82D2SuOkFueY\nUbrNpHIEWRwz5qlcHlkc53CZtmJu/+EIhpz35FoZZ4po05N/OKlvZCElKb+/CWsV\nAFep9NnCOrI3nPZadoG+QSDtkf93/YD8Q+8YmCGQscZu/P7HtsDBuZdUf5q+tMAi\nLVqFP7fML5XNZWxcasgOJUgVpz7jFVP0Y3wOTGbWdKlBLwlcUGRS7v1HTrwGWjT7\ntRM+T/10CaOan39T6+p5TcwME6Wj53NRP0bj1JWDcRX4dx0fasCMLyzeP/I/Ehys\nprWPxfvOIbDZ2aUCh5PltPj96FWt7XeYXjRKUp4ZKImDa/l1a7L1YP2JlCyypyKc\nSk3H9Jga0BsfqeUUOo7yoWMDW4xUgfpU4kJ6HjJuqHV+/BMvvrzgezHlkRDmlp6f\neR/DgkyXe8bnG4HgiSW54i0Dn0gbwo8rU2+FAiRq7K1kLzOVcf78tIXK1iAhvd3A\n9IJX5FubFA7rYt+ytfenhpmrh1RFXVfyAI4i5Ck9K5+hH4yNuI31Q77BxKWqiZE4\n+TCmtKdeAGr3c9fu4zB4+Oa2op4V763npbzSDa17gQPiXACVTWg=\n=Vg85\n-----END PGP SIGNATURE-----", "payload": "tree f87bf7dc1e71566a561710c8344b7fe77a5d5cb4\nparent 79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba\nauthor Pietro Albini <pietro@pietroalbini.org> 1606477562 +0100\ncommitter Pietro Albini <pietro@pietroalbini.org> 1608748522 +0100\n\nbootstrap: convert rustc-dev to use Tarball\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0cadc9eb72e6147647bd1b7995851e371167f24", "html_url": "https://github.com/rust-lang/rust/commit/c0cadc9eb72e6147647bd1b7995851e371167f24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0cadc9eb72e6147647bd1b7995851e371167f24/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba", "html_url": "https://github.com/rust-lang/rust/commit/79f60fbd0410d1cfcbc4ddc8cba7bb11e1dd65ba"}], "stats": {"total": 56, "additions": 16, "deletions": 40}, "files": [{"sha": "1e0f3b969584313fa53247ea545f1a37000fad49", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c0cadc9eb72e6147647bd1b7995851e371167f24/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0cadc9eb72e6147647bd1b7995851e371167f24/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c0cadc9eb72e6147647bd1b7995851e371167f24", "patch": "@@ -605,7 +605,7 @@ pub struct RustcDev {\n }\n \n impl Step for RustcDev {\n-    type Output = PathBuf;\n+    type Output = Option<PathBuf>;\n     const DEFAULT: bool = true;\n     const ONLY_HOSTS: bool = true;\n \n@@ -624,60 +624,36 @@ impl Step for RustcDev {\n         });\n     }\n \n-    fn run(self, builder: &Builder<'_>) -> PathBuf {\n+    fn run(self, builder: &Builder<'_>) -> Option<PathBuf> {\n         let compiler = self.compiler;\n         let target = self.target;\n-\n-        let name = pkgname(builder, \"rustc-dev\");\n-        let archive = distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target.triple));\n         if skip_host_target_lib(builder, compiler) {\n-            return archive;\n+            return None;\n         }\n \n         builder.ensure(compile::Rustc { compiler, target });\n \n-        let image = tmpdir(builder).join(format!(\"{}-{}-image\", name, target.triple));\n-        let _ = fs::remove_dir_all(&image);\n+        let tarball = Tarball::new(builder, \"rustc-dev\", &target.triple);\n \n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n         let stamp = compile::librustc_stamp(builder, compiler_to_use, target);\n-        copy_target_libs(builder, target, &image, &stamp);\n+        copy_target_libs(builder, target, tarball.image_dir(), &stamp);\n \n-        // Copy compiler sources.\n-        let dst_src = image.join(\"lib/rustlib/rustc-src/rust\");\n-        t!(fs::create_dir_all(&dst_src));\n-\n-        let src_files = [\"Cargo.lock\"];\n+        let src_files = &[\"Cargo.lock\"];\n         // This is the reduced set of paths which will become the rustc-dev component\n         // (essentially the compiler crates and all of their path dependencies).\n-        copy_src_dirs(builder, &builder.src, &[\"compiler\"], &[], &dst_src);\n-        for file in src_files.iter() {\n-            builder.copy(&builder.src.join(file), &dst_src.join(file));\n+        copy_src_dirs(\n+            builder,\n+            &builder.src,\n+            &[\"compiler\"],\n+            &[],\n+            &tarball.image_dir().join(\"lib/rustlib/rustc-src/rust\"),\n+        );\n+        for file in src_files {\n+            tarball.add_file(builder.src.join(file), \"lib/rustlib/rustc-src/rust\", 0o644);\n         }\n \n-        let mut cmd = rust_installer(builder);\n-        cmd.arg(\"generate\")\n-            .arg(\"--product-name=Rust\")\n-            .arg(\"--rel-manifest-dir=rustlib\")\n-            .arg(\"--success-message=Rust-is-ready-to-develop.\")\n-            .arg(\"--image-dir\")\n-            .arg(&image)\n-            .arg(\"--work-dir\")\n-            .arg(&tmpdir(builder))\n-            .arg(\"--output-dir\")\n-            .arg(&distdir(builder))\n-            .arg(format!(\"--package-name={}-{}\", name, target.triple))\n-            .arg(format!(\"--component-name=rustc-dev-{}\", target.triple))\n-            .arg(\"--legacy-manifest-dirs=rustlib,cargo\");\n-\n-        builder.info(&format!(\n-            \"Dist rustc-dev stage{} ({} -> {})\",\n-            compiler.stage, &compiler.host, target\n-        ));\n-        let _time = timeit(builder);\n-        builder.run(&mut cmd);\n-        builder.remove_dir(&image);\n-        archive\n+        Some(tarball.generate())\n     }\n }\n "}]}