{"sha": "ba4bf03d84d7d1bfe433555e56c628c5598fea74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhNGJmMDNkODRkN2QxYmZlNDMzNTU1ZTU2YzYyOGM1NTk4ZmVhNzQ=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2019-10-07T01:24:08Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-10-07T01:24:08Z"}, "message": "don't fail on recoverable parser errors in ignored files (#3782)", "tree": {"sha": "3aafe4d36ba7fc732a0fa85371cd43ace6e3b8fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aafe4d36ba7fc732a0fa85371cd43ace6e3b8fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba4bf03d84d7d1bfe433555e56c628c5598fea74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba4bf03d84d7d1bfe433555e56c628c5598fea74", "html_url": "https://github.com/rust-lang/rust/commit/ba4bf03d84d7d1bfe433555e56c628c5598fea74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba4bf03d84d7d1bfe433555e56c628c5598fea74/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61f972baafc7883daa5df3dc24cba0b8b54a1c27", "url": "https://api.github.com/repos/rust-lang/rust/commits/61f972baafc7883daa5df3dc24cba0b8b54a1c27", "html_url": "https://github.com/rust-lang/rust/commit/61f972baafc7883daa5df3dc24cba0b8b54a1c27"}], "stats": {"total": 111, "additions": 106, "deletions": 5}, "files": [{"sha": "eec33e6ba7945170f7b07054d2f8f2008acce788", "filename": "src/formatting.rs", "status": "modified", "additions": 78, "deletions": 5, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/ba4bf03d84d7d1bfe433555e56c628c5598fea74/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4bf03d84d7d1bfe433555e56c628c5598fea74/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=ba4bf03d84d7d1bfe433555e56c628c5598fea74", "patch": "@@ -1,13 +1,14 @@\n // High level formatting functions.\n \n+use std::cell::RefCell;\n use std::collections::HashMap;\n use std::io::{self, Write};\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::rc::Rc;\n use std::time::{Duration, Instant};\n \n use syntax::ast;\n-use syntax::errors::emitter::{ColorConfig, Emitter};\n+use syntax::errors::emitter::{ColorConfig, Emitter, EmitterWriter};\n use syntax::errors::{Diagnostic, DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n use syntax::source_map::{FilePathMapping, SourceMap, Span, DUMMY_SP};\n@@ -67,16 +68,22 @@ fn format_project<T: FormatHandler>(\n     let input_is_stdin = main_file == FileName::Stdin;\n \n     let ignore_path_set = match IgnorePathSet::from_ignore_list(&config.ignore()) {\n-        Ok(set) => set,\n+        Ok(set) => Rc::new(set),\n         Err(e) => return Err(ErrorKind::InvalidGlobPattern(e)),\n     };\n     if config.skip_children() && ignore_path_set.is_match(&main_file) {\n         return Ok(FormatReport::new());\n     }\n \n     // Parse the crate.\n+    let can_reset_parser_errors = Rc::new(RefCell::new(false));\n     let source_map = Rc::new(SourceMap::new(FilePathMapping::empty()));\n-    let mut parse_session = make_parse_sess(source_map.clone(), config);\n+    let mut parse_session = make_parse_sess(\n+        source_map.clone(),\n+        config,\n+        Rc::clone(&ignore_path_set),\n+        can_reset_parser_errors.clone(),\n+    );\n     let mut report = FormatReport::new();\n     let directory_ownership = input.to_directory_ownership();\n     let krate = match parse_crate(\n@@ -85,6 +92,7 @@ fn format_project<T: FormatHandler>(\n         config,\n         &mut report,\n         directory_ownership,\n+        can_reset_parser_errors.clone(),\n     ) {\n         Ok(krate) => krate,\n         // Surface parse error via Session (errors are merged there from report)\n@@ -620,6 +628,7 @@ fn parse_crate(\n     config: &Config,\n     report: &mut FormatReport,\n     directory_ownership: Option<parse::DirectoryOwnership>,\n+    can_reset_parser_errors: Rc<RefCell<bool>>,\n ) -> Result<ast::Crate, ErrorKind> {\n     let input_is_stdin = input.is_text();\n \n@@ -667,6 +676,15 @@ fn parse_crate(\n             if !parse_session.span_diagnostic.has_errors() {\n                 return Ok(c);\n             }\n+            // This scenario occurs when the parser encountered errors\n+            // but was still able to recover. If all of the parser errors\n+            // occurred in files that are ignored, then reset\n+            // the error count and continue.\n+            // https://github.com/rust-lang/rustfmt/issues/3779\n+            if *can_reset_parser_errors.borrow() {\n+                parse_session.span_diagnostic.reset_err_count();\n+                return Ok(c);\n+            }\n         }\n         Ok(Err(mut diagnostics)) => diagnostics.iter_mut().for_each(DiagnosticBuilder::emit),\n         Err(_) => {\n@@ -683,6 +701,40 @@ fn parse_crate(\n     Err(ErrorKind::ParseError)\n }\n \n+struct SilentOnIgnoredFilesEmitter {\n+    ignore_path_set: Rc<IgnorePathSet>,\n+    source_map: Rc<SourceMap>,\n+    emitter: EmitterWriter,\n+    has_non_ignorable_parser_errors: bool,\n+    can_reset: Rc<RefCell<bool>>,\n+}\n+\n+impl Emitter for SilentOnIgnoredFilesEmitter {\n+    fn emit_diagnostic(&mut self, db: &Diagnostic) {\n+        if let Some(primary_span) = &db.span.primary_span() {\n+            let file_name = self.source_map.span_to_filename(*primary_span);\n+            match file_name {\n+                syntax_pos::FileName::Real(ref path) => {\n+                    if self\n+                        .ignore_path_set\n+                        .is_match(&FileName::Real(path.to_path_buf()))\n+                    {\n+                        if !self.has_non_ignorable_parser_errors {\n+                            *self.can_reset.borrow_mut() = true;\n+                        }\n+                        return;\n+                    }\n+                }\n+                _ => (),\n+            };\n+        }\n+\n+        self.has_non_ignorable_parser_errors = true;\n+        *self.can_reset.borrow_mut() = false;\n+        self.emitter.emit_diagnostic(db);\n+    }\n+}\n+\n /// Emitter which discards every error.\n struct SilentEmitter;\n \n@@ -694,7 +746,12 @@ fn silent_emitter() -> Box<SilentEmitter> {\n     Box::new(SilentEmitter {})\n }\n \n-fn make_parse_sess(source_map: Rc<SourceMap>, config: &Config) -> ParseSess {\n+fn make_parse_sess(\n+    source_map: Rc<SourceMap>,\n+    config: &Config,\n+    ignore_path_set: Rc<IgnorePathSet>,\n+    can_reset: Rc<RefCell<bool>>,\n+) -> ParseSess {\n     let tty_handler = if config.hide_parse_errors() {\n         let silent_emitter = silent_emitter();\n         Handler::with_emitter(true, None, silent_emitter)\n@@ -705,7 +762,23 @@ fn make_parse_sess(source_map: Rc<SourceMap>, config: &Config) -> ParseSess {\n         } else {\n             ColorConfig::Never\n         };\n-        Handler::with_tty_emitter(color_cfg, true, None, Some(source_map.clone()))\n+\n+        let emitter_writer = EmitterWriter::stderr(\n+            color_cfg,\n+            Some(source_map.clone()),\n+            false,\n+            false,\n+            None,\n+            false,\n+        );\n+        let emitter = Box::new(SilentOnIgnoredFilesEmitter {\n+            has_non_ignorable_parser_errors: false,\n+            ignore_path_set: ignore_path_set,\n+            source_map: Rc::clone(&source_map),\n+            emitter: emitter_writer,\n+            can_reset,\n+        });\n+        Handler::with_emitter(true, None, emitter)\n     };\n \n     ParseSess::with_span_handler(tty_handler, source_map)"}, {"sha": "6b7a9365c6f579d4707b2063524a16877bef00aa", "filename": "src/test/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba4bf03d84d7d1bfe433555e56c628c5598fea74/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4bf03d84d7d1bfe433555e56c628c5598fea74/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=ba4bf03d84d7d1bfe433555e56c628c5598fea74", "patch": "@@ -27,6 +27,8 @@ const SKIP_FILE_WHITE_LIST: &[&str] = &[\n     \"configs/skip_children/foo/mod.rs\",\n     \"issue-3434/no_entry.rs\",\n     \"issue-3665/sub_mod.rs\",\n+    // Testing for issue-3779\n+    \"issue-3779/ice.rs\",\n     // These files and directory are a part of modules defined inside `cfg_if!`.\n     \"cfg_if/mod.rs\",\n     \"cfg_if/detect\","}, {"sha": "83505f409af74e27350d7b2219619f7cfff8d608", "filename": "tests/config/issue-3779.toml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Fconfig%2Fissue-3779.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Fconfig%2Fissue-3779.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fissue-3779.toml?ref=ba4bf03d84d7d1bfe433555e56c628c5598fea74", "patch": "@@ -0,0 +1,4 @@\n+unstable_features = true\n+ignore = [\n+  \"tests/**/issue-3779/ice.rs\"\n+]"}, {"sha": "cde21412d94584801cd2b96a2450a83c90de20d9", "filename": "tests/source/issue-3779/ice.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Fsource%2Fissue-3779%2Fice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Fsource%2Fissue-3779%2Fice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3779%2Fice.rs?ref=ba4bf03d84d7d1bfe433555e56c628c5598fea74", "patch": "@@ -0,0 +1,3 @@\n+pub fn bar() {\n+    1x;\n+}"}, {"sha": "d7c2ae28975f9a7a6ae834a7a94ad6ec62b2ce9e", "filename": "tests/source/issue-3779/lib.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Fsource%2Fissue-3779%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Fsource%2Fissue-3779%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3779%2Flib.rs?ref=ba4bf03d84d7d1bfe433555e56c628c5598fea74", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-config: issue-3779.toml\n+\n+#[path = \"ice.rs\"]\n+mod ice;\n+\n+fn foo() {\n+println!(\"abc\") ;\n+    }"}, {"sha": "cde21412d94584801cd2b96a2450a83c90de20d9", "filename": "tests/target/issue-3779/ice.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Ftarget%2Fissue-3779%2Fice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Ftarget%2Fissue-3779%2Fice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3779%2Fice.rs?ref=ba4bf03d84d7d1bfe433555e56c628c5598fea74", "patch": "@@ -0,0 +1,3 @@\n+pub fn bar() {\n+    1x;\n+}"}, {"sha": "ebebce417d1bdb2aa5917b3dcfce6287641ae0df", "filename": "tests/target/issue-3779/lib.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Ftarget%2Fissue-3779%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba4bf03d84d7d1bfe433555e56c628c5598fea74/tests%2Ftarget%2Fissue-3779%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3779%2Flib.rs?ref=ba4bf03d84d7d1bfe433555e56c628c5598fea74", "patch": "@@ -0,0 +1,8 @@\n+// rustfmt-config: issue-3779.toml\n+\n+#[path = \"ice.rs\"]\n+mod ice;\n+\n+fn foo() {\n+    println!(\"abc\");\n+}"}]}