{"sha": "f22f7431c26b224d555d4bae8eedb7218f6bfddb", "node_id": "C_kwDOAAsO6NoAKGYyMmY3NDMxYzI2YjIyNGQ1NTVkNGJhZThlZWRiNzIxOGY2YmZkZGI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-02T13:26:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-02T13:26:59Z"}, "message": "Rollup merge of #97599 - GuillaumeGomez:reexport-json, r=CraftSpider\n\nFix JSON reexport ICE\n\nFixes https://github.com/rust-lang/rust/issues/97432.\n\nThe problem was that the ID was conflicting because the reexports have the same one. To fix it, I \"extended\" it by adding the `Symbol` into it as well.\n\nr? `@notriddle`", "tree": {"sha": "6ea240cb51b63eb9dcce0de5815b60fb321bea4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea240cb51b63eb9dcce0de5815b60fb321bea4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f22f7431c26b224d555d4bae8eedb7218f6bfddb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJimLqjCRBK7hj4Ov3rIwAAoC8IABR764Sc/cHuxhHGpuqMlu1/\nlf4Cz9WbDiJAQ84N5BzJtF4b8GUnWP7rSgn4FKvRH39gp+e0C+6SUg3RahVWUdKk\nWfmbHI560UdHZV7Y2Mrp/htxBS+k5k8vqC5p3PfU9ecIS2pgpnldOWfL7EDrHUSL\n+qm10b1CJXd7AG2ukrQsQhesMM5D3eNO1u/Npf6OMDLinFdRPPqgjt5BlkkR8UIF\nvd19dOxaMOvI5BrWgHEnK7gmWXsf52PweMFPWFxVOLs1f1RG9UNt7yFm9o/OidGm\nkPtUw3lZ9jzqWqONOpeZv0g3yp8kX8B8q36ENFMG2ezcxRjCgf/4I6E/cJZI5kM=\n=VDl1\n-----END PGP SIGNATURE-----\n", "payload": "tree 6ea240cb51b63eb9dcce0de5815b60fb321bea4f\nparent 15bf62b475caa2e24f0186e8e2d6cd104cd72370\nparent 5adca7305e327de66ac389e7fe32964f5ba8c4bf\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1654176419 +0200\ncommitter GitHub <noreply@github.com> 1654176419 +0200\n\nRollup merge of #97599 - GuillaumeGomez:reexport-json, r=CraftSpider\n\nFix JSON reexport ICE\n\nFixes https://github.com/rust-lang/rust/issues/97432.\n\nThe problem was that the ID was conflicting because the reexports have the same one. To fix it, I \"extended\" it by adding the `Symbol` into it as well.\n\nr? `@notriddle`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f22f7431c26b224d555d4bae8eedb7218f6bfddb", "html_url": "https://github.com/rust-lang/rust/commit/f22f7431c26b224d555d4bae8eedb7218f6bfddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f22f7431c26b224d555d4bae8eedb7218f6bfddb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15bf62b475caa2e24f0186e8e2d6cd104cd72370", "url": "https://api.github.com/repos/rust-lang/rust/commits/15bf62b475caa2e24f0186e8e2d6cd104cd72370", "html_url": "https://github.com/rust-lang/rust/commit/15bf62b475caa2e24f0186e8e2d6cd104cd72370"}, {"sha": "5adca7305e327de66ac389e7fe32964f5ba8c4bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5adca7305e327de66ac389e7fe32964f5ba8c4bf", "html_url": "https://github.com/rust-lang/rust/commit/5adca7305e327de66ac389e7fe32964f5ba8c4bf"}], "stats": {"total": 118, "additions": 83, "deletions": 35}, "files": [{"sha": "51a2abc50bc2b2e4c787b49fa7888b0706be1b5e", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 50, "deletions": 27, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f22f7431c26b224d555d4bae8eedb7218f6bfddb/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22f7431c26b224d555d4bae8eedb7218f6bfddb/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=f22f7431c26b224d555d4bae8eedb7218f6bfddb", "patch": "@@ -10,7 +10,7 @@ use std::fmt;\n use rustc_ast::ast;\n use rustc_hir::{def::CtorKind, def_id::DefId};\n use rustc_middle::ty::{self, TyCtxt};\n-use rustc_span::Pos;\n+use rustc_span::{Pos, Symbol};\n use rustc_target::spec::abi::Abi as RustcAbi;\n \n use rustdoc_json_types::*;\n@@ -29,7 +29,9 @@ impl JsonRenderer<'_> {\n             .get(&item.item_id)\n             .into_iter()\n             .flatten()\n-            .map(|clean::ItemLink { link, did, .. }| (link.clone(), from_item_id((*did).into())))\n+            .map(|clean::ItemLink { link, did, .. }| {\n+                (link.clone(), from_item_id((*did).into(), self.tcx))\n+            })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n         let attrs = item\n@@ -45,7 +47,7 @@ impl JsonRenderer<'_> {\n             _ => from_clean_item(item, self.tcx),\n         };\n         Some(Item {\n-            id: from_item_id(item_id),\n+            id: from_item_id_with_name(item_id, self.tcx, name),\n             crate_id: item_id.krate().as_u32(),\n             name: name.map(|sym| sym.to_string()),\n             span: self.convert_span(span),\n@@ -84,7 +86,7 @@ impl JsonRenderer<'_> {\n             Inherited => Visibility::Default,\n             Restricted(did) if did.is_crate_root() => Visibility::Crate,\n             Restricted(did) => Visibility::Restricted {\n-                parent: from_item_id(did.into()),\n+                parent: from_item_id(did.into(), self.tcx),\n                 path: self.tcx.def_path(did).to_string_no_crate_verbose(),\n             },\n         }\n@@ -173,22 +175,39 @@ impl FromWithTcx<clean::TypeBindingKind> for TypeBindingKind {\n     }\n }\n \n-pub(crate) fn from_item_id(item_id: ItemId) -> Id {\n-    struct DisplayDefId(DefId);\n+/// It generates an ID as follows:\n+///\n+/// `CRATE_ID:ITEM_ID[:NAME_ID]` (if there is no name, NAME_ID is not generated).\n+pub(crate) fn from_item_id(item_id: ItemId, tcx: TyCtxt<'_>) -> Id {\n+    from_item_id_with_name(item_id, tcx, None)\n+}\n+\n+// FIXME: this function (and appending the name at the end of the ID) should be removed when\n+// reexports are not inlined anymore for json format. It should be done in #93518.\n+pub(crate) fn from_item_id_with_name(item_id: ItemId, tcx: TyCtxt<'_>, name: Option<Symbol>) -> Id {\n+    struct DisplayDefId<'a>(DefId, TyCtxt<'a>, Option<Symbol>);\n \n-    impl fmt::Display for DisplayDefId {\n+    impl<'a> fmt::Display for DisplayDefId<'a> {\n         fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-            write!(f, \"{}:{}\", self.0.krate.as_u32(), u32::from(self.0.index))\n+            let name = match self.2 {\n+                Some(name) => format!(\":{}\", name.as_u32()),\n+                None => self\n+                    .1\n+                    .opt_item_name(self.0)\n+                    .map(|n| format!(\":{}\", n.as_u32()))\n+                    .unwrap_or_default(),\n+            };\n+            write!(f, \"{}:{}{}\", self.0.krate.as_u32(), u32::from(self.0.index), name)\n         }\n     }\n \n     match item_id {\n-        ItemId::DefId(did) => Id(format!(\"{}\", DisplayDefId(did))),\n+        ItemId::DefId(did) => Id(format!(\"{}\", DisplayDefId(did, tcx, name))),\n         ItemId::Blanket { for_, impl_id } => {\n-            Id(format!(\"b:{}-{}\", DisplayDefId(impl_id), DisplayDefId(for_)))\n+            Id(format!(\"b:{}-{}\", DisplayDefId(impl_id, tcx, None), DisplayDefId(for_, tcx, name)))\n         }\n         ItemId::Auto { for_, trait_ } => {\n-            Id(format!(\"a:{}-{}\", DisplayDefId(trait_), DisplayDefId(for_)))\n+            Id(format!(\"a:{}-{}\", DisplayDefId(trait_, tcx, None), DisplayDefId(for_, tcx, name)))\n         }\n         ItemId::Primitive(ty, krate) => Id(format!(\"p:{}:{}\", krate.as_u32(), ty.as_sym())),\n     }\n@@ -201,7 +220,7 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n     let header = item.fn_header(tcx);\n \n     match *item.kind {\n-        ModuleItem(m) => ItemEnum::Module(Module { is_crate, items: ids(m.items) }),\n+        ModuleItem(m) => ItemEnum::Module(Module { is_crate, items: ids(m.items, tcx) }),\n         ImportItem(i) => ItemEnum::Import(i.into_tcx(tcx)),\n         StructItem(s) => ItemEnum::Struct(s.into_tcx(tcx)),\n         UnionItem(u) => ItemEnum::Union(u.into_tcx(tcx)),\n@@ -255,7 +274,7 @@ impl FromWithTcx<clean::Struct> for Struct {\n             struct_type: from_ctor_kind(struct_type),\n             generics: generics.into_tcx(tcx),\n             fields_stripped,\n-            fields: ids(fields),\n+            fields: ids(fields, tcx),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -268,7 +287,7 @@ impl FromWithTcx<clean::Union> for Union {\n         Union {\n             generics: generics.into_tcx(tcx),\n             fields_stripped,\n-            fields: ids(fields),\n+            fields: ids(fields, tcx),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -413,7 +432,7 @@ impl FromWithTcx<clean::Type> for Type {\n         match ty {\n             clean::Type::Path { path } => Type::ResolvedPath {\n                 name: path.whole_name(),\n-                id: from_item_id(path.def_id().into()),\n+                id: from_item_id(path.def_id().into(), tcx),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n                 param_names: Vec::new(),\n             },\n@@ -422,7 +441,7 @@ impl FromWithTcx<clean::Type> for Type {\n \n                 Type::ResolvedPath {\n                     name: first_trait.whole_name(),\n-                    id: from_item_id(first_trait.def_id().into()),\n+                    id: from_item_id(first_trait.def_id().into(), tcx),\n                     args: first_trait\n                         .segments\n                         .last()\n@@ -517,7 +536,7 @@ impl FromWithTcx<clean::Trait> for Trait {\n         Trait {\n             is_auto,\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n-            items: ids(items),\n+            items: ids(items, tcx),\n             generics: generics.into_tcx(tcx),\n             bounds: bounds.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n             implementations: Vec::new(), // Added in JsonRenderer::item\n@@ -550,7 +569,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n                 .collect(),\n             trait_,\n             for_: for_.into_tcx(tcx),\n-            items: ids(items),\n+            items: ids(items, tcx),\n             negative: negative_polarity,\n             synthetic,\n             blanket_impl: blanket_impl.map(|x| x.into_tcx(tcx)),\n@@ -593,21 +612,21 @@ impl FromWithTcx<clean::Enum> for Enum {\n         Enum {\n             generics: generics.into_tcx(tcx),\n             variants_stripped,\n-            variants: ids(variants),\n+            variants: ids(variants, tcx),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n }\n \n impl FromWithTcx<clean::VariantStruct> for Struct {\n-    fn from_tcx(struct_: clean::VariantStruct, _tcx: TyCtxt<'_>) -> Self {\n+    fn from_tcx(struct_: clean::VariantStruct, tcx: TyCtxt<'_>) -> Self {\n         let fields_stripped = struct_.has_stripped_entries();\n         let clean::VariantStruct { struct_type, fields } = struct_;\n         Struct {\n             struct_type: from_ctor_kind(struct_type),\n             generics: Default::default(),\n             fields_stripped,\n-            fields: ids(fields),\n+            fields: ids(fields, tcx),\n             impls: Vec::new(),\n         }\n     }\n@@ -630,25 +649,25 @@ impl FromWithTcx<clean::Variant> for Variant {\n                     })\n                     .collect(),\n             ),\n-            Struct(s) => Variant::Struct(ids(s.fields)),\n+            Struct(s) => Variant::Struct(ids(s.fields, tcx)),\n         }\n     }\n }\n \n impl FromWithTcx<clean::Import> for Import {\n-    fn from_tcx(import: clean::Import, _tcx: TyCtxt<'_>) -> Self {\n+    fn from_tcx(import: clean::Import, tcx: TyCtxt<'_>) -> Self {\n         use clean::ImportKind::*;\n         match import.kind {\n             Simple(s) => Import {\n                 source: import.source.path.whole_name(),\n                 name: s.to_string(),\n-                id: import.source.did.map(ItemId::from).map(from_item_id),\n+                id: import.source.did.map(ItemId::from).map(|i| from_item_id(i, tcx)),\n                 glob: false,\n             },\n             Glob => Import {\n                 source: import.source.path.whole_name(),\n                 name: import.source.path.last().to_string(),\n-                id: import.source.did.map(ItemId::from).map(from_item_id),\n+                id: import.source.did.map(ItemId::from).map(|i| from_item_id(i, tcx)),\n                 glob: true,\n             },\n         }\n@@ -742,6 +761,10 @@ impl FromWithTcx<ItemType> for ItemKind {\n     }\n }\n \n-fn ids(items: impl IntoIterator<Item = clean::Item>) -> Vec<Id> {\n-    items.into_iter().filter(|x| !x.is_stripped()).map(|i| from_item_id(i.item_id)).collect()\n+fn ids(items: impl IntoIterator<Item = clean::Item>, tcx: TyCtxt<'_>) -> Vec<Id> {\n+    items\n+        .into_iter()\n+        .filter(|x| !x.is_stripped())\n+        .map(|i| from_item_id_with_name(i.item_id, tcx, i.name))\n+        .collect()\n }"}, {"sha": "f338050bee0f9bf78fb5bafc3a911f0fc5886a35", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f22f7431c26b224d555d4bae8eedb7218f6bfddb/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22f7431c26b224d555d4bae8eedb7218f6bfddb/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=f22f7431c26b224d555d4bae8eedb7218f6bfddb", "patch": "@@ -16,6 +16,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::Session;\n+use rustc_span::def_id::LOCAL_CRATE;\n \n use rustdoc_json_types as types;\n \n@@ -25,7 +26,7 @@ use crate::docfs::PathError;\n use crate::error::Error;\n use crate::formats::cache::Cache;\n use crate::formats::FormatRenderer;\n-use crate::json::conversions::{from_item_id, IntoWithTcx};\n+use crate::json::conversions::{from_item_id, from_item_id_with_name, IntoWithTcx};\n use crate::{clean, try_err};\n \n #[derive(Clone)]\n@@ -54,7 +55,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n                     .map(|i| {\n                         let item = &i.impl_item;\n                         self.item(item.clone()).unwrap();\n-                        from_item_id(item.item_id)\n+                        from_item_id_with_name(item.item_id, self.tcx, item.name)\n                     })\n                     .collect()\n             })\n@@ -86,7 +87,7 @@ impl<'tcx> JsonRenderer<'tcx> {\n \n                         if item.item_id.is_local() || is_primitive_impl {\n                             self.item(item.clone()).unwrap();\n-                            Some(from_item_id(item.item_id))\n+                            Some(from_item_id_with_name(item.item_id, self.tcx, item.name))\n                         } else {\n                             None\n                         }\n@@ -105,10 +106,11 @@ impl<'tcx> JsonRenderer<'tcx> {\n                 if !id.is_local() {\n                     let trait_item = &trait_item.trait_;\n                     trait_item.items.clone().into_iter().for_each(|i| self.item(i).unwrap());\n+                    let item_id = from_item_id(id.into(), self.tcx);\n                     Some((\n-                        from_item_id(id.into()),\n+                        item_id.clone(),\n                         types::Item {\n-                            id: from_item_id(id.into()),\n+                            id: item_id,\n                             crate_id: id.krate.as_u32(),\n                             name: self\n                                 .cache\n@@ -176,6 +178,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         // Flatten items that recursively store other items\n         item.kind.inner_items().for_each(|i| self.item(i.clone()).unwrap());\n \n+        let name = item.name;\n         let item_id = item.item_id;\n         if let Some(mut new_item) = self.convert_item(item) {\n             if let types::ItemEnum::Trait(ref mut t) = new_item.inner {\n@@ -187,7 +190,10 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             } else if let types::ItemEnum::Union(ref mut u) = new_item.inner {\n                 u.impls = self.get_impls(item_id.expect_def_id())\n             }\n-            let removed = self.index.borrow_mut().insert(from_item_id(item_id), new_item.clone());\n+            let removed = self\n+                .index\n+                .borrow_mut()\n+                .insert(from_item_id_with_name(item_id, self.tcx, name), new_item.clone());\n \n             // FIXME(adotinthevoid): Currently, the index is duplicated. This is a sanity check\n             // to make sure the items are unique. The main place this happens is when an item, is\n@@ -211,13 +217,15 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             self.get_impls(*primitive);\n         }\n \n+        let e = ExternalCrate { crate_num: LOCAL_CRATE };\n+\n         let mut index = (*self.index).clone().into_inner();\n         index.extend(self.get_trait_items());\n         // This needs to be the default HashMap for compatibility with the public interface for\n         // rustdoc-json-types\n         #[allow(rustc::default_hash_types)]\n         let output = types::Crate {\n-            root: types::Id(String::from(\"0:0\")),\n+            root: types::Id(format!(\"0:0:{}\", e.name(self.tcx).as_u32())),\n             crate_version: self.cache.crate_version.clone(),\n             includes_private: self.cache.document_private,\n             index: index.into_iter().collect(),\n@@ -229,7 +237,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n                 .chain(self.cache.external_paths.clone().into_iter())\n                 .map(|(k, (path, kind))| {\n                     (\n-                        from_item_id(k.into()),\n+                        from_item_id(k.into(), self.tcx),\n                         types::ItemSummary {\n                             crate_id: k.krate.as_u32(),\n                             path: path.iter().map(|s| s.to_string()).collect(),"}, {"sha": "fd6ac8372d976ed3e30c3ce558bd98afaab68715", "filename": "src/test/rustdoc-json/reexport/same_type_reexported_more_than_once.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f22f7431c26b224d555d4bae8eedb7218f6bfddb/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22f7431c26b224d555d4bae8eedb7218f6bfddb/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsame_type_reexported_more_than_once.rs?ref=f22f7431c26b224d555d4bae8eedb7218f6bfddb", "patch": "@@ -0,0 +1,17 @@\n+// Regression test for https://github.com/rust-lang/rust/issues/97432.\n+\n+#![feature(no_core)]\n+#![no_std]\n+#![no_core]\n+\n+// @has same_type_reexported_more_than_once.json\n+// @set trait_id = - \"$.index[*][?(@.name=='Trait')].id\"\n+// @has - \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $trait_id\n+pub use inner::Trait;\n+// @set reexport_id = - \"$.index[*][?(@.name=='Reexport')].id\"\n+// @has - \"$.index[*][?(@.name=='same_type_reexported_more_than_once')].inner.items[*]\" $reexport_id\n+pub use inner::Trait as Reexport;\n+\n+mod inner {\n+    pub trait Trait {}\n+}"}]}