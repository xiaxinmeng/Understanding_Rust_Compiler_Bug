{"sha": "65bdf79da3f72269e6fe7aac1355df1420613889", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YmRmNzlkYTNmNzIyNjllNmZlN2FhYzEzNTVkZjE0MjA2MTM4ODk=", "commit": {"author": {"name": "ecstatic-morse", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T03:40:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-22T03:40:44Z"}, "message": "Rollup merge of #76275 - FedericoPonzi:immutable-write-impl-73836, r=dtolnay\n\nImplementation of Write for some immutable ref structs\n\nFixes  #73836", "tree": {"sha": "026c4bab145aeaeb3b92db2cc9f17ae5682f3fb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/026c4bab145aeaeb3b92db2cc9f17ae5682f3fb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bdf79da3f72269e6fe7aac1355df1420613889", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaXI8CRBK7hj4Ov3rIwAAdHIIAKLOoRl28Tt9f9o42fmrfVGS\nfiEcESHrsINN1/dafYNONBrDeBWfxhFPoCEVUEDtNUfZ3/DRcXSIT1Qs4/E62Rqm\nqUWyul64jJZn4j1+TaH5Ek2PNNk+a0eMwvL+9sPzFT8PgN6mxJu0bVquQS3UnuRC\nrLKj+nlBs9hhQkPXBuIwsNkJRGIdhoKuxQS6LwaDMJrNEwqscunoBqjk/D3Qz4tq\naeWz6X/dlFRwoqubmWoaIuSseAoxeNlx1+2ZhRCMTt0JeT+6CZcMDCifkto2QW4G\n+cVH93hcyiGQpS04CVuSI6Yd97OLNjo7FioXw2cqjKRuy0bIfW0ifvR05FgYrl4=\n=hBfg\n-----END PGP SIGNATURE-----\n", "payload": "tree 026c4bab145aeaeb3b92db2cc9f17ae5682f3fb9\nparent 4f3697b4b87abff222330cab31f9dce53021c100\nparent 0acb0ed1841d362a1119ba2ad293683660bdfaaf\nauthor ecstatic-morse <ecstaticmorse@gmail.com> 1600746044 -0700\ncommitter GitHub <noreply@github.com> 1600746044 -0700\n\nRollup merge of #76275 - FedericoPonzi:immutable-write-impl-73836, r=dtolnay\n\nImplementation of Write for some immutable ref structs\n\nFixes  #73836\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bdf79da3f72269e6fe7aac1355df1420613889", "html_url": "https://github.com/rust-lang/rust/commit/65bdf79da3f72269e6fe7aac1355df1420613889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bdf79da3f72269e6fe7aac1355df1420613889/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3697b4b87abff222330cab31f9dce53021c100", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3697b4b87abff222330cab31f9dce53021c100", "html_url": "https://github.com/rust-lang/rust/commit/4f3697b4b87abff222330cab31f9dce53021c100"}, {"sha": "0acb0ed1841d362a1119ba2ad293683660bdfaaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/0acb0ed1841d362a1119ba2ad293683660bdfaaf", "html_url": "https://github.com/rust-lang/rust/commit/0acb0ed1841d362a1119ba2ad293683660bdfaaf"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "71ed2d84cad0d5fbcb630e359c7048071cf44fdd", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/65bdf79da3f72269e6fe7aac1355df1420613889/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bdf79da3f72269e6fe7aac1355df1420613889/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=65bdf79da3f72269e6fe7aac1355df1420613889", "patch": "@@ -586,6 +586,32 @@ impl fmt::Debug for Stdout {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Stdout {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        (&*self).write(buf)\n+    }\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n+        (&*self).write_vectored(bufs)\n+    }\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        io::Write::is_write_vectored(&&*self)\n+    }\n+    fn flush(&mut self) -> io::Result<()> {\n+        (&*self).flush()\n+    }\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        (&*self).write_all(buf)\n+    }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        (&*self).write_all_vectored(bufs)\n+    }\n+    fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> io::Result<()> {\n+        (&*self).write_fmt(args)\n+    }\n+}\n+\n+#[stable(feature = \"write_mt\", since = \"1.48.0\")]\n+impl Write for &Stdout {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n@@ -609,6 +635,7 @@ impl Write for Stdout {\n         self.lock().write_fmt(args)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for StdoutLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n@@ -762,6 +789,32 @@ impl fmt::Debug for Stderr {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Stderr {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        (&*self).write(buf)\n+    }\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n+        (&*self).write_vectored(bufs)\n+    }\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        io::Write::is_write_vectored(&&*self)\n+    }\n+    fn flush(&mut self) -> io::Result<()> {\n+        (&*self).flush()\n+    }\n+    fn write_all(&mut self, buf: &[u8]) -> io::Result<()> {\n+        (&*self).write_all(buf)\n+    }\n+    fn write_all_vectored(&mut self, bufs: &mut [IoSlice<'_>]) -> io::Result<()> {\n+        (&*self).write_all_vectored(bufs)\n+    }\n+    fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> io::Result<()> {\n+        (&*self).write_fmt(args)\n+    }\n+}\n+\n+#[stable(feature = \"write_mt\", since = \"1.48.0\")]\n+impl Write for &Stderr {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.lock().write(buf)\n     }\n@@ -785,6 +838,7 @@ impl Write for Stderr {\n         self.lock().write_fmt(args)\n     }\n }\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for StderrLock<'_> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {"}, {"sha": "dc05b9648fd6be2bf5a351fecbfdaecafdf7f396", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/65bdf79da3f72269e6fe7aac1355df1420613889/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bdf79da3f72269e6fe7aac1355df1420613889/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=65bdf79da3f72269e6fe7aac1355df1420613889", "patch": "@@ -254,6 +254,30 @@ impl Write for Sink {\n     }\n }\n \n+#[stable(feature = \"write_mt\", since = \"1.48.0\")]\n+impl Write for &Sink {\n+    #[inline]\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        Ok(buf.len())\n+    }\n+\n+    #[inline]\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n+        let total_len = bufs.iter().map(|b| b.len()).sum();\n+        Ok(total_len)\n+    }\n+\n+    #[inline]\n+    fn is_write_vectored(&self) -> bool {\n+        true\n+    }\n+\n+    #[inline]\n+    fn flush(&mut self) -> io::Result<()> {\n+        Ok(())\n+    }\n+}\n+\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for Sink {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "9f3796e11ed1aa6a8c8c0c06a28cc926382f95a8", "filename": "library/std/src/process.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/65bdf79da3f72269e6fe7aac1355df1420613889/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bdf79da3f72269e6fe7aac1355df1420613889/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=65bdf79da3f72269e6fe7aac1355df1420613889", "patch": "@@ -249,6 +249,25 @@ pub struct ChildStdin {\n \n #[stable(feature = \"process\", since = \"1.0.0\")]\n impl Write for ChildStdin {\n+    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        (&*self).write(buf)\n+    }\n+\n+    fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n+        (&*self).write_vectored(bufs)\n+    }\n+\n+    fn is_write_vectored(&self) -> bool {\n+        io::Write::is_write_vectored(&&*self)\n+    }\n+\n+    fn flush(&mut self) -> io::Result<()> {\n+        (&*self).flush()\n+    }\n+}\n+\n+#[stable(feature = \"write_mt\", since = \"1.48.0\")]\n+impl Write for &ChildStdin {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n         self.inner.write(buf)\n     }"}]}