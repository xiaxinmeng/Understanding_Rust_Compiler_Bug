{"sha": "cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMmYxYmIwNzJjNzZlZDQ1ODgyZTFhNjllZDdiOGVjOTZiYWQwZTk=", "commit": {"author": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-03-20T19:07:08Z"}, "committer": {"name": "Saleem Jaffer", "email": "saleem@acko.com", "date": "2019-03-21T16:43:09Z"}, "message": "review fixes", "tree": {"sha": "0b87d2b055642a0404ef9b7441a8a43e1e4ef208", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b87d2b055642a0404ef9b7441a8a43e1e4ef208"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9", "html_url": "https://github.com/rust-lang/rust/commit/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/comments", "author": null, "committer": null, "parents": [{"sha": "8829ddadc4f82b43a8653dd1f40839513b6fb2f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8829ddadc4f82b43a8653dd1f40839513b6fb2f0", "html_url": "https://github.com/rust-lang/rust/commit/8829ddadc4f82b43a8653dd1f40839513b6fb2f0"}], "stats": {"total": 94, "additions": 38, "deletions": 56}, "files": [{"sha": "066b38be3dbc22cf0f6bfb973690768e5bac1b94", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9", "patch": "@@ -622,13 +622,13 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         // and we can then extract the value by evaluating the promoted.\n                         mir::Operand::Copy(\n                             Place::Base(PlaceBase::Static(\n-                                            box mir::Static {promoted: Some(promoted), ty, ..}\n-                                        ))\n+                                box mir::Static {promoted: Some(promoted), ty, ..}\n+                            ))\n                         ) |\n                         mir::Operand::Move(\n                             Place::Base(PlaceBase::Static(\n-                                            box mir::Static {promoted: Some(promoted), ty, ..}\n-                                        ))\n+                                box mir::Static {promoted: Some(promoted), ty, ..}\n+                            ))\n                         ) => {\n                             let param_env = ty::ParamEnv::reveal_all();\n                             let cid = mir::interpret::GlobalId {"}, {"sha": "2a32b475c7991b4881d5ee30ccac5ff8d89e31c1", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 24, "deletions": 34, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9", "patch": "@@ -455,52 +455,42 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             },\n             Place::Base(PlaceBase::Static(box Static { def_id, ty: sty, promoted })) => {\n                 let sty = self.sanitize_type(place, sty);\n+                let check_err =\n+                    |verifier: &mut TypeVerifier<'a, 'b, 'gcx, 'tcx> ,\n+                     place: &Place<'tcx>,\n+                     ty,\n+                     sty| {\n+                    if let Err(terr) = verifier.cx.eq_types(\n+                        sty,\n+                        ty,\n+                        location.to_locations(),\n+                        ConstraintCategory::Boring,\n+                    ) {\n+                        span_mirbug!(\n+                            verifier,\n+                            place,\n+                            \"bad promoted type ({:?}: {:?}): {:?}\",\n+                            ty,\n+                            sty,\n+                            terr\n+                        );\n+                    };\n+                };\n                 match promoted {\n                     Some(pr) => {\n                         if !self.errors_reported {\n                             let promoted_mir = &self.mir.promoted[pr];\n                             self.sanitize_promoted(promoted_mir, location);\n \n                             let promoted_ty = promoted_mir.return_ty();\n-\n-                            if let Err(terr) = self.cx.eq_types(\n-                                sty,\n-                                promoted_ty,\n-                                location.to_locations(),\n-                                ConstraintCategory::Boring,\n-                            ) {\n-                                span_mirbug!(\n-                                    self,\n-                                    place,\n-                                    \"bad promoted type ({:?}: {:?}): {:?}\",\n-                                    promoted_ty,\n-                                    sty,\n-                                    terr\n-                                );\n-                            };\n+                            check_err(self, place, promoted_ty, sty);\n                         }\n                     }\n                     None => {\n                         let ty = self.tcx().type_of(def_id);\n                         let ty = self.cx.normalize(ty, location);\n-                        if let Err(terr) =\n-                            self.cx\n-                                .eq_types(\n-                                    ty,\n-                                    sty,\n-                                    location.to_locations(),\n-                                    ConstraintCategory::Boring\n-                                )\n-                        {\n-                            span_mirbug!(\n-                                self,\n-                                place,\n-                                \"bad static type ({:?}: {:?}): {:?}\",\n-                                ty,\n-                                sty,\n-                                terr\n-                            );\n-                        };\n+\n+                        check_err(self, place, ty, sty);\n                     }\n                 }\n                 PlaceTy::Ty { ty: sty }"}, {"sha": "81cdb00100595beec200026704cf5b4991ce3200", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9", "patch": "@@ -283,7 +283,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                 // an `Index` projection would throw us off-track.\n                 _ => None,\n             },\n-            Place::Base(PlaceBase::Static(box Static {promoted: Some(promoted), ty: _, ..})) => {\n+            Place::Base(PlaceBase::Static(box Static {promoted: Some(promoted), ..})) => {\n                 let generics = self.tcx.generics_of(self.source.def_id());\n                 if generics.requires_monomorphization(self.tcx) {\n                     // FIXME: can't handle code with generics"}, {"sha": "ec2cf8a4c0348cb4ae7f4323d73b074463ff8936", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9", "patch": "@@ -692,14 +692,9 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                 // Return pointer; update the place itself\n                 *place = self.destination.clone();\n             },\n-            Place::Base(PlaceBase::Static(ref mut static_)) => {\n-                match static_.promoted {\n-                    Some(promoted) => {\n-                        if let Some(p) = self.promoted_map.get(promoted).cloned() {\n-                            static_.promoted = Some(p);\n-                        }\n-                    }\n-                    None => self.super_place(place, _ctxt, _location)\n+            Place::Base(PlaceBase::Static(box Static { promoted: Some(promoted), .. })) => {\n+                if let Some(p) = self.promoted_map.get(*promoted).cloned() {\n+                    *promoted = p;\n                 }\n             },\n             _ => self.super_place(place, _ctxt, _location)"}, {"sha": "2344f070ea67048daca91c1a080a10a4c585e8cd", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=cf2f1bb072c76ed45882e1a69ed7b8ec96bad0e9", "patch": "@@ -153,7 +153,7 @@ struct Promoter<'a, 'tcx: 'a> {\n     /// If true, all nested temps are also kept in the\n     /// source MIR, not moved to the promoted MIR.\n     keep_original: bool,\n-    def_id: DefId\n+    def_id: DefId,\n }\n \n impl<'a, 'tcx> Promoter<'a, 'tcx> {\n@@ -291,17 +291,14 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n     fn promote_candidate(mut self, candidate: Candidate) {\n         use rustc::mir::Static;\n         let mut operand = {\n-            let def_id = self.def_id.clone();\n+            let def_id = self.def_id;\n             let promoted = &mut self.promoted;\n             let promoted_id = Promoted::new(self.source.promoted.len());\n             let mut promoted_place = |ty, span| {\n                 promoted.span = span;\n-                promoted.local_decls[RETURN_PLACE] =\n-                    LocalDecl::new_return_place(ty, span);\n-                Place::Base(PlaceBase::Static(\n-                        Box::new(Static { def_id: def_id, ty, promoted: Some(promoted_id) })\n-                    )\n-                )\n+                promoted.local_decls[RETURN_PLACE] = LocalDecl::new_return_place(ty, span);\n+                Place::Base(\n+                    PlaceBase::Static(Box::new(Static { def_id, ty, promoted: Some(promoted_id) })))\n             };\n             let (blocks, local_decls) = self.source.basic_blocks_and_local_decls_mut();\n             match candidate {\n@@ -421,7 +418,7 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n             source: mir,\n             temps: &mut temps,\n             keep_original: false,\n-            def_id\n+            def_id,\n         };\n         promoter.promote_candidate(candidate);\n     }"}]}