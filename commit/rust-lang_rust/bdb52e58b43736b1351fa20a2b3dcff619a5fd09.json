{"sha": "bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYjUyZTU4YjQzNzM2YjEzNTFmYTIwYTJiM2RjZmY2MTlhNWZkMDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-07T08:27:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-07T08:27:38Z"}, "message": "auto merge of #6251 : thestinger/rust/non_owned, r=pcwalton\n\nAlso fixed the docstring on `TC_ONCE_CLOSURE` (was accidentally the same as `TC_MUTABLE`) and shifted the `TC_EMPTY_ENUM` bit left by one since whatever previously used that bit has been removed.", "tree": {"sha": "6873690a04e9827ccc9d6f4ad31ca5a3891da369", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6873690a04e9827ccc9d6f4ad31ca5a3891da369"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "html_url": "https://github.com/rust-lang/rust/commit/bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b2020f2c3f51de0dd4dcfe4a107673eda6f25e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2020f2c3f51de0dd4dcfe4a107673eda6f25e7", "html_url": "https://github.com/rust-lang/rust/commit/7b2020f2c3f51de0dd4dcfe4a107673eda6f25e7"}, {"sha": "e7f6c4c75406c3ecd117d7213e1be3438454b47e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7f6c4c75406c3ecd117d7213e1be3438454b47e", "html_url": "https://github.com/rust-lang/rust/commit/e7f6c4c75406c3ecd117d7213e1be3438454b47e"}], "stats": {"total": 144, "additions": 119, "deletions": 25}, "files": [{"sha": "c7f9e377571395003a983574f4ccee458ede5c0e", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "patch": "@@ -19,6 +19,7 @@ A dynamic, mutable location.\n Similar to a mutable option type, but friendlier.\n */\n \n+#[mutable]\n pub struct Cell<T> {\n     priv value: Option<T>\n }"}, {"sha": "892635416c2a4be8d80cb9779443db8d690a9a57", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 42, "deletions": 25, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "patch": "@@ -1795,7 +1795,7 @@ pub impl TypeContents {\n     }\n \n     fn nonowned(_cx: ctxt) -> TypeContents {\n-        TC_MANAGED + TC_BORROWED_POINTER\n+        TC_MANAGED + TC_BORROWED_POINTER + TC_NON_OWNED\n     }\n \n     fn contains_managed(&self) -> bool {\n@@ -1849,40 +1849,43 @@ impl ToStr for TypeContents {\n }\n \n /// Constant for a type containing nothing of interest.\n-static TC_NONE: TypeContents =             TypeContents{bits:0b0000_00000000};\n+static TC_NONE: TypeContents =             TypeContents{bits: 0b0000_0000_0000};\n \n /// Contains a borrowed value with a lifetime other than static\n-static TC_BORROWED_POINTER: TypeContents = TypeContents{bits:0b0000_00000001};\n+static TC_BORROWED_POINTER: TypeContents = TypeContents{bits: 0b0000_0000_0001};\n \n /// Contains an owned pointer (~T) but not slice of some kind\n-static TC_OWNED_POINTER: TypeContents =    TypeContents{bits:0b000000000010};\n+static TC_OWNED_POINTER: TypeContents =    TypeContents{bits: 0b0000_0000_0010};\n \n /// Contains an owned vector ~[] or owned string ~str\n-static TC_OWNED_VEC: TypeContents =        TypeContents{bits:0b000000000100};\n+static TC_OWNED_VEC: TypeContents =        TypeContents{bits: 0b0000_0000_0100};\n \n /// Contains a ~fn() or a ~Trait, which is non-copyable.\n-static TC_OWNED_CLOSURE: TypeContents =    TypeContents{bits:0b000000001000};\n+static TC_OWNED_CLOSURE: TypeContents =    TypeContents{bits: 0b0000_0000_1000};\n \n /// Type with a destructor\n-static TC_DTOR: TypeContents =             TypeContents{bits:0b000000010000};\n+static TC_DTOR: TypeContents =             TypeContents{bits: 0b0000_0001_0000};\n \n /// Contains a managed value\n-static TC_MANAGED: TypeContents =          TypeContents{bits:0b000000100000};\n+static TC_MANAGED: TypeContents =          TypeContents{bits: 0b0000_0010_0000};\n \n /// &mut with any region\n-static TC_BORROWED_MUT: TypeContents =     TypeContents{bits:0b000001000000};\n+static TC_BORROWED_MUT: TypeContents =     TypeContents{bits: 0b0000_0100_0000};\n \n /// Mutable content, whether owned or by ref\n-static TC_MUTABLE: TypeContents =          TypeContents{bits:0b000010000000};\n+static TC_MUTABLE: TypeContents =          TypeContents{bits: 0b0000_1000_0000};\n \n-/// Mutable content, whether owned or by ref\n-static TC_ONCE_CLOSURE: TypeContents =     TypeContents{bits:0b000100000000};\n+/// One-shot closure\n+static TC_ONCE_CLOSURE: TypeContents =     TypeContents{bits: 0b0001_0000_0000};\n \n /// An enum with no variants.\n-static TC_EMPTY_ENUM: TypeContents =       TypeContents{bits:0b010000000000};\n+static TC_EMPTY_ENUM: TypeContents =       TypeContents{bits: 0b0010_0000_0000};\n+\n+/// Contains a type marked with `#[non_owned]`\n+static TC_NON_OWNED: TypeContents =        TypeContents{bits: 0b0100_0000_0000};\n \n /// All possible contents.\n-static TC_ALL: TypeContents =              TypeContents{bits:0b011111111111};\n+static TC_ALL: TypeContents =              TypeContents{bits: 0b0111_1111_1111};\n \n pub fn type_is_copyable(cx: ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_copy(cx)\n@@ -2024,14 +2027,13 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n \n             ty_struct(did, ref substs) => {\n                 let flds = struct_fields(cx, did, substs);\n-                let flds_tc = flds.foldl(\n+                let mut res = flds.foldl(\n                     TC_NONE,\n                     |tc, f| tc + tc_mt(cx, f.mt, cache));\n                 if ty::has_dtor(cx, did) {\n-                    flds_tc + TC_DTOR\n-                } else {\n-                    flds_tc\n+                    res += TC_DTOR;\n                 }\n+                apply_tc_attr(cx, did, res)\n             }\n \n             ty_tup(ref tys) => {\n@@ -2040,7 +2042,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n \n             ty_enum(did, ref substs) => {\n                 let variants = substd_enum_variants(cx, did, substs);\n-                if variants.is_empty() {\n+                let res = if variants.is_empty() {\n                     // we somewhat arbitrary declare that empty enums\n                     // are non-copyable\n                     TC_EMPTY_ENUM\n@@ -2050,7 +2052,8 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                             *tc,\n                             |tc, arg_ty| *tc + tc_ty(cx, *arg_ty, cache))\n                     })\n-                }\n+                };\n+                apply_tc_attr(cx, did, res)\n             }\n \n             ty_param(p) => {\n@@ -2110,6 +2113,16 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         mc + tc_ty(cx, mt.ty, cache)\n     }\n \n+    fn apply_tc_attr(cx: ctxt, did: def_id, mut tc: TypeContents) -> TypeContents {\n+        if has_attr(cx, did, \"mutable\") {\n+            tc += TC_MUTABLE;\n+        }\n+        if has_attr(cx, did, \"non_owned\") {\n+            tc += TC_NON_OWNED;\n+        }\n+        tc\n+    }\n+\n     fn borrowed_contents(region: ty::Region,\n                          mutbl: ast::mutability) -> TypeContents\n     {\n@@ -3874,28 +3887,32 @@ pub fn lookup_trait_def(cx: ctxt, did: ast::def_id) -> @ty::TraitDef {\n     }\n }\n \n-// Determine whether an item is annotated with #[packed] or not\n-pub fn lookup_packed(tcx: ctxt,\n-                  did: def_id) -> bool {\n+/// Determine whether an item is annotated with an attribute\n+pub fn has_attr(tcx: ctxt, did: def_id, attr: &str) -> bool {\n     if is_local(did) {\n         match tcx.items.find(&did.node) {\n             Some(\n                 &ast_map::node_item(@ast::item {\n                     attrs: ref attrs,\n                     _\n-                }, _)) => attr::attrs_contains_name(*attrs, \"packed\"),\n+                }, _)) => attr::attrs_contains_name(*attrs, attr),\n             _ => tcx.sess.bug(fmt!(\"lookup_packed: %? is not an item\",\n                                    did))\n         }\n     } else {\n         let mut ret = false;\n         do csearch::get_item_attrs(tcx.cstore, did) |meta_items| {\n-            ret = attr::contains_name(meta_items, \"packed\");\n+            ret = attr::contains_name(meta_items, attr);\n         }\n         ret\n     }\n }\n \n+/// Determine whether an item is annotated with `#[packed]` or not\n+pub fn lookup_packed(tcx: ctxt, did: def_id) -> bool {\n+    has_attr(tcx, did, \"packed\")\n+}\n+\n // Look up a field ID, whether or not it's local\n // Takes a list of type substs in case the struct is generic\n pub fn lookup_field_type(tcx: ctxt,"}, {"sha": "2368e5eb5c51fcd454a29c4435d164e87abe4930", "filename": "src/test/compile-fail/mutable-enum.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Ftest%2Fcompile-fail%2Fmutable-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Ftest%2Fcompile-fail%2Fmutable-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-enum.rs?ref=bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[mutable]\n+enum Foo { A }\n+\n+fn bar<T: Const>(_: T) {}\n+\n+fn main() {\n+    let x = A;\n+    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Const`\n+}"}, {"sha": "ee040506c40bd9aacd07787ffab84c1e90b34932", "filename": "src/test/compile-fail/mutable-struct.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Ftest%2Fcompile-fail%2Fmutable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Ftest%2Fcompile-fail%2Fmutable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-struct.rs?ref=bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[mutable]\n+struct Foo { a: int }\n+\n+fn bar<T: Const>(_: T) {}\n+\n+fn main() {\n+    let x = Foo { a: 5 };\n+    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Const`\n+}"}, {"sha": "79c2be8183a623f2e79b612f9fd3c4f7aef749e3", "filename": "src/test/compile-fail/non_owned-enum.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon_owned-enum.rs?ref=bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[non_owned]\n+enum Foo { A }\n+\n+fn bar<T: Owned>(_: T) {}\n+\n+fn main() {\n+    let x = A;\n+    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Owned`\n+}"}, {"sha": "2d0bc9a7e8e4696708f3593eb782617e2c8291cd", "filename": "src/test/compile-fail/non_owned-struct.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb52e58b43736b1351fa20a2b3dcff619a5fd09/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon_owned-struct.rs?ref=bdb52e58b43736b1351fa20a2b3dcff619a5fd09", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[non_owned]\n+struct Foo { a: int }\n+\n+fn bar<T: Owned>(_: T) {}\n+\n+fn main() {\n+    let x = Foo { a: 5 };\n+    bar(x); //~ ERROR instantiating a type parameter with an incompatible type `Foo`, which does not fulfill `Owned`\n+}"}]}