{"sha": "ab3215406d0cd76ea71a554e0f4bdd16331cca7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMzIxNTQwNmQwY2Q3NmVhNzFhNTU0ZTBmNGJkZDE2MzMxY2NhN2Y=", "commit": {"author": {"name": "Will Hipschman", "email": "whipsch@gmail.com", "date": "2015-04-04T20:13:57Z"}, "committer": {"name": "Will Hipschman", "email": "whipsch@gmail.com", "date": "2015-04-07T00:59:58Z"}, "message": "Provide context for macro expansions which result in unparsed tokens.\n\nIssue #22425", "tree": {"sha": "6c4790fffc3449788b4ba3ff3d41ed166e3ae2e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4790fffc3449788b4ba3ff3d41ed166e3ae2e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab3215406d0cd76ea71a554e0f4bdd16331cca7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab3215406d0cd76ea71a554e0f4bdd16331cca7f", "html_url": "https://github.com/rust-lang/rust/commit/ab3215406d0cd76ea71a554e0f4bdd16331cca7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab3215406d0cd76ea71a554e0f4bdd16331cca7f/comments", "author": {"login": "whipsch", "id": 95411, "node_id": "MDQ6VXNlcjk1NDEx", "avatar_url": "https://avatars.githubusercontent.com/u/95411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whipsch", "html_url": "https://github.com/whipsch", "followers_url": "https://api.github.com/users/whipsch/followers", "following_url": "https://api.github.com/users/whipsch/following{/other_user}", "gists_url": "https://api.github.com/users/whipsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/whipsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whipsch/subscriptions", "organizations_url": "https://api.github.com/users/whipsch/orgs", "repos_url": "https://api.github.com/users/whipsch/repos", "events_url": "https://api.github.com/users/whipsch/events{/privacy}", "received_events_url": "https://api.github.com/users/whipsch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "whipsch", "id": 95411, "node_id": "MDQ6VXNlcjk1NDEx", "avatar_url": "https://avatars.githubusercontent.com/u/95411?v=4", "gravatar_id": "", "url": "https://api.github.com/users/whipsch", "html_url": "https://github.com/whipsch", "followers_url": "https://api.github.com/users/whipsch/followers", "following_url": "https://api.github.com/users/whipsch/following{/other_user}", "gists_url": "https://api.github.com/users/whipsch/gists{/gist_id}", "starred_url": "https://api.github.com/users/whipsch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/whipsch/subscriptions", "organizations_url": "https://api.github.com/users/whipsch/orgs", "repos_url": "https://api.github.com/users/whipsch/repos", "events_url": "https://api.github.com/users/whipsch/events{/privacy}", "received_events_url": "https://api.github.com/users/whipsch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b49a5ef003fedcbb0d78aebda62ba30dfdd17a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/b49a5ef003fedcbb0d78aebda62ba30dfdd17a20", "html_url": "https://github.com/rust-lang/rust/commit/b49a5ef003fedcbb0d78aebda62ba30dfdd17a20"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "009075540fa1e01cbcf9f312ad009859c86420b7", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab3215406d0cd76ea71a554e0f4bdd16331cca7f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3215406d0cd76ea71a554e0f4bdd16331cca7f/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=ab3215406d0cd76ea71a554e0f4bdd16331cca7f", "patch": "@@ -29,6 +29,11 @@ use std::rc::Rc;\n \n struct ParserAnyMacro<'a> {\n     parser: RefCell<Parser<'a>>,\n+\n+    /// Span of the expansion site of the macro this parser is for\n+    site_span: Span,\n+    /// The ident of the macro we're parsing\n+    macro_ident: ast::Ident\n }\n \n impl<'a> ParserAnyMacro<'a> {\n@@ -50,6 +55,12 @@ impl<'a> ParserAnyMacro<'a> {\n                               token_str);\n             let span = parser.span;\n             parser.span_err(span, &msg[..]);\n+\n+            let name = token::get_ident(self.macro_ident);\n+            let msg = format!(\"caused by the macro expansion here; the usage \\\n+                               of `{}` is likely invalid in this context\",\n+                               name);\n+            parser.span_note(self.site_span, &msg[..]);\n         }\n     }\n }\n@@ -169,6 +180,12 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                 // Weird, but useful for X-macros.\n                 return box ParserAnyMacro {\n                     parser: RefCell::new(p),\n+\n+                    // Pass along the original expansion site and the name of the macro\n+                    // so we can print a useful error message if the parse of the expanded\n+                    // macro leaves unparsed tokens.\n+                    site_span: sp,\n+                    macro_ident: name\n                 }\n               }\n               Failure(sp, ref msg) => if sp.lo >= best_fail_spot.lo {"}, {"sha": "b3ce84c7e6f1a2dbfcd46c49e2f9e13910146c0c", "filename": "src/test/compile-fail/macro-incomplete-parse.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ab3215406d0cd76ea71a554e0f4bdd16331cca7f/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab3215406d0cd76ea71a554e0f4bdd16331cca7f/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs?ref=ab3215406d0cd76ea71a554e0f4bdd16331cca7f", "patch": "@@ -24,12 +24,12 @@ macro_rules! ignored_pat {\n     () => ( 1, 2 ) //~ ERROR macro expansion ignores token `,`\n }\n \n-ignored_item!();\n+ignored_item!(); //~ NOTE caused by the macro expansion here\n \n fn main() {\n-    ignored_expr!();\n+    ignored_expr!(); //~ NOTE caused by the macro expansion here\n     match 1 {\n-        ignored_pat!() => (),\n+        ignored_pat!() => (), //~ NOTE caused by the macro expansion here\n         _ => (),\n     }\n }"}]}