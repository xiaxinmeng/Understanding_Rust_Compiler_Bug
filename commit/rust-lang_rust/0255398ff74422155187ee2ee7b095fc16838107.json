{"sha": "0255398ff74422155187ee2ee7b095fc16838107", "node_id": "C_kwDOAAsO6NoAKDAyNTUzOThmZjc0NDIyMTU1MTg3ZWUyZWU3YjA5NWZjMTY4MzgxMDc", "commit": {"author": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2022-04-19T03:02:20Z"}, "committer": {"name": "Chris Morgan", "email": "me@chrismorgan.info", "date": "2022-04-19T03:02:20Z"}, "message": "Improve AddrParseError description\n\nThe existing description was incorrect for socket addresses, and\nmisleading: users would see \u201cinvalid IP address syntax\u201d and suppose they\nwere supposed to provide an IP address rather than a socket address.\n\nI contemplated making it two variants (IP, socket), but realised we can\ndo still better for the IPv4 and IPv6 types, so here it is as six.\n\nI contemplated more precise error descriptions (e.g. \u201cinvalid IPv6\nsocket address syntax: expected a decimal scope ID after %\u201d), but that\u2019s\na more invasive change, and probably not worthwhile anyway.", "tree": {"sha": "41ada9c06d81866153835a808faa2b2780587801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41ada9c06d81866153835a808faa2b2780587801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0255398ff74422155187ee2ee7b095fc16838107", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0255398ff74422155187ee2ee7b095fc16838107", "html_url": "https://github.com/rust-lang/rust/commit/0255398ff74422155187ee2ee7b095fc16838107", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0255398ff74422155187ee2ee7b095fc16838107/comments", "author": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chris-morgan", "id": 392868, "node_id": "MDQ6VXNlcjM5Mjg2OA==", "avatar_url": "https://avatars.githubusercontent.com/u/392868?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chris-morgan", "html_url": "https://github.com/chris-morgan", "followers_url": "https://api.github.com/users/chris-morgan/followers", "following_url": "https://api.github.com/users/chris-morgan/following{/other_user}", "gists_url": "https://api.github.com/users/chris-morgan/gists{/gist_id}", "starred_url": "https://api.github.com/users/chris-morgan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chris-morgan/subscriptions", "organizations_url": "https://api.github.com/users/chris-morgan/orgs", "repos_url": "https://api.github.com/users/chris-morgan/repos", "events_url": "https://api.github.com/users/chris-morgan/events{/privacy}", "received_events_url": "https://api.github.com/users/chris-morgan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b5408d3fbfc4bcb7c5b2b2f08369156406dc03b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b5408d3fbfc4bcb7c5b2b2f08369156406dc03b", "html_url": "https://github.com/rust-lang/rust/commit/7b5408d3fbfc4bcb7c5b2b2f08369156406dc03b"}], "stats": {"total": 39, "additions": 28, "deletions": 11}, "files": [{"sha": "fb292ed29a18a5b90d508aaf81df12247fdb6863", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 28, "deletions": 11, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0255398ff74422155187ee2ee7b095fc16838107/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0255398ff74422155187ee2ee7b095fc16838107/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=0255398ff74422155187ee2ee7b095fc16838107", "patch": "@@ -59,12 +59,12 @@ impl<'a> Parser<'a> {\n \n     /// Run a parser, but fail if the entire input wasn't consumed.\n     /// Doesn't run atomically.\n-    fn parse_with<T, F>(&mut self, inner: F) -> Result<T, AddrParseError>\n+    fn parse_with<T, F>(&mut self, inner: F, kind: AddrKind) -> Result<T, AddrParseError>\n     where\n         F: FnOnce(&mut Parser<'_>) -> Option<T>,\n     {\n         let result = inner(self);\n-        if self.state.is_empty() { result } else { None }.ok_or(AddrParseError(()))\n+        if self.state.is_empty() { result } else { None }.ok_or(AddrParseError(kind))\n     }\n \n     /// Peek the next character from the input\n@@ -278,7 +278,7 @@ impl<'a> Parser<'a> {\n impl FromStr for IpAddr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<IpAddr, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_ip_addr())\n+        Parser::new(s).parse_with(|p| p.read_ip_addr(), AddrKind::Ip)\n     }\n }\n \n@@ -288,9 +288,9 @@ impl FromStr for Ipv4Addr {\n     fn from_str(s: &str) -> Result<Ipv4Addr, AddrParseError> {\n         // don't try to parse if too long\n         if s.len() > 15 {\n-            Err(AddrParseError(()))\n+            Err(AddrParseError(AddrKind::Ipv4))\n         } else {\n-            Parser::new(s).parse_with(|p| p.read_ipv4_addr())\n+            Parser::new(s).parse_with(|p| p.read_ipv4_addr(), AddrKind::Ipv4)\n         }\n     }\n }\n@@ -299,34 +299,44 @@ impl FromStr for Ipv4Addr {\n impl FromStr for Ipv6Addr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<Ipv6Addr, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_ipv6_addr())\n+        Parser::new(s).parse_with(|p| p.read_ipv6_addr(), AddrKind::Ipv6)\n     }\n }\n \n #[stable(feature = \"socket_addr_from_str\", since = \"1.5.0\")]\n impl FromStr for SocketAddrV4 {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<SocketAddrV4, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_socket_addr_v4())\n+        Parser::new(s).parse_with(|p| p.read_socket_addr_v4(), AddrKind::SocketV4)\n     }\n }\n \n #[stable(feature = \"socket_addr_from_str\", since = \"1.5.0\")]\n impl FromStr for SocketAddrV6 {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<SocketAddrV6, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_socket_addr_v6())\n+        Parser::new(s).parse_with(|p| p.read_socket_addr_v6(), AddrKind::SocketV6)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl FromStr for SocketAddr {\n     type Err = AddrParseError;\n     fn from_str(s: &str) -> Result<SocketAddr, AddrParseError> {\n-        Parser::new(s).parse_with(|p| p.read_socket_addr())\n+        Parser::new(s).parse_with(|p| p.read_socket_addr(), AddrKind::Socket)\n     }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+enum AddrKind {\n+    Ip,\n+    Ipv4,\n+    Ipv6,\n+    Socket,\n+    SocketV4,\n+    SocketV6,\n+}\n+\n /// An error which can be returned when parsing an IP address or a socket address.\n ///\n /// This error is used as the error type for the [`FromStr`] implementation for\n@@ -353,7 +363,7 @@ impl FromStr for SocketAddr {\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct AddrParseError(());\n+pub struct AddrParseError(AddrKind);\n \n #[stable(feature = \"addr_parse_error_error\", since = \"1.4.0\")]\n impl fmt::Display for AddrParseError {\n@@ -367,6 +377,13 @@ impl fmt::Display for AddrParseError {\n impl Error for AddrParseError {\n     #[allow(deprecated)]\n     fn description(&self) -> &str {\n-        \"invalid IP address syntax\"\n+        match self.0 {\n+            AddrKind::Ip => \"invalid IP address syntax\",\n+            AddrKind::Ipv4 => \"invalid IPv4 address syntax\",\n+            AddrKind::Ipv6 => \"invalid IPv6 address syntax\",\n+            AddrKind::Socket => \"invalid socket address syntax\",\n+            AddrKind::SocketV4 => \"invalid IPv4 socket address syntax\",\n+            AddrKind::SocketV6 => \"invalid IPv6 socket address syntax\",\n+        }\n     }\n }"}]}