{"sha": "bafc51e01aea45da746afaf51d5783f0409d605b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhZmM1MWUwMWFlYTQ1ZGE3NDZhZmFmNTFkNTc4M2YwNDA5ZDYwNWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-07T16:56:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-09T12:29:31Z"}, "message": "remove const_fn feature gate", "tree": {"sha": "38493971e0ebc5c467e07cd2248b4b4ad5fae380", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38493971e0ebc5c467e07cd2248b4b4ad5fae380"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bafc51e01aea45da746afaf51d5783f0409d605b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bafc51e01aea45da746afaf51d5783f0409d605b", "html_url": "https://github.com/rust-lang/rust/commit/bafc51e01aea45da746afaf51d5783f0409d605b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bafc51e01aea45da746afaf51d5783f0409d605b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "881c1ac408d93bb7adaa3a51dabab9266e82eee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/881c1ac408d93bb7adaa3a51dabab9266e82eee8", "html_url": "https://github.com/rust-lang/rust/commit/881c1ac408d93bb7adaa3a51dabab9266e82eee8"}], "stats": {"total": 176, "additions": 48, "deletions": 128}, "files": [{"sha": "535cb13276646b7f5bd145efbe7b76ec0fc9e170", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -274,9 +274,6 @@ declare_features! (\n     /// Allows using non lexical lifetimes (RFC 2094).\n     (active, nll, \"1.0.0\", Some(43234), None),\n \n-    /// Allows the definition of `const` functions with some advanced features.\n-    (active, const_fn, \"1.2.0\", Some(57563), None),\n-\n     /// Allows associated type defaults.\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n "}, {"sha": "138398825af586123ec3c59e07c4fdd96f556113", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -136,6 +136,9 @@ declare_features! (\n     (removed, main, \"1.53.0\", Some(29634), None, None),\n     (removed, pub_macro_rules, \"1.53.0\", Some(78855), None,\n      Some(\"removed due to being incomplete, in particular it does not work across crates\")),\n+     /// Allows the definition of `const` functions with some advanced features.\n+    (removed, const_fn, \"1.54.0\", Some(57563), None,\n+     Some(\"split into finer-grained feature gates\")),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: removed features"}, {"sha": "5f89ac059fd2d9194c7a909a2ee3445a08cc7725", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -246,7 +246,6 @@\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_floating_point_arithmetic)]\n #![feature(const_fn_transmute)]\n-#![feature(const_fn)]\n #![feature(const_fn_fn_ptr_basics)]\n #![feature(const_io_structs)]\n #![feature(const_ip)]"}, {"sha": "bcf7f78b8fe0decd22e26a0134a36b545f36aac9", "filename": "src/doc/unstable-book/src/language-features/const-fn.md", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/881c1ac408d93bb7adaa3a51dabab9266e82eee8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "raw_url": "https://github.com/rust-lang/rust/raw/881c1ac408d93bb7adaa3a51dabab9266e82eee8/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fconst-fn.md?ref=881c1ac408d93bb7adaa3a51dabab9266e82eee8", "patch": "@@ -1,10 +0,0 @@\n-# `const_fn`\n-\n-The tracking issue for this feature is: [#57563]\n-\n-[#57563]: https://github.com/rust-lang/rust/issues/57563\n-\n-------------------------\n-\n-The `const_fn` feature enables additional functionality not stabilized in the\n-[minimal subset of `const_fn`](https://github.com/rust-lang/rust/issues/53555)"}, {"sha": "b97aa214f843ab9582e99cab9f32f28374f391d6", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/881c1ac408d93bb7adaa3a51dabab9266e82eee8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/881c1ac408d93bb7adaa3a51dabab9266e82eee8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.rs?ref=881c1ac408d93bb7adaa3a51dabab9266e82eee8", "patch": "@@ -1,35 +0,0 @@\n-// Test use of advanced const fn without the `const_fn` feature gate.\n-\n-const fn foo() -> usize { 0 } // ok\n-\n-trait Foo {\n-    const fn foo() -> u32; //~ ERROR functions in traits cannot be declared const\n-    const fn bar() -> u32 { 0 } //~ ERROR functions in traits cannot be declared const\n-}\n-\n-impl Foo for u32 {\n-    const fn foo() -> u32 { 0 } //~ ERROR functions in traits cannot be declared const\n-}\n-\n-trait Bar {}\n-\n-impl dyn Bar {\n-    const fn baz() -> u32 { 0 } // ok\n-}\n-\n-static FOO: usize = foo();\n-const BAR: usize = foo();\n-\n-macro_rules! constant {\n-    ($n:ident: $t:ty = $v:expr) => {\n-        const $n: $t = $v;\n-    }\n-}\n-\n-constant! {\n-    BAZ: usize = foo()\n-}\n-\n-fn main() {\n-    let x: [usize; foo()] = [];\n-}"}, {"sha": "1e7fd669b1d48941f74107fb32a653f7e87a550e", "filename": "src/test/ui/feature-gates/feature-gate-const_fn.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/881c1ac408d93bb7adaa3a51dabab9266e82eee8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/881c1ac408d93bb7adaa3a51dabab9266e82eee8/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn.stderr?ref=881c1ac408d93bb7adaa3a51dabab9266e82eee8", "patch": "@@ -1,21 +0,0 @@\n-error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:6:5\n-   |\n-LL |     const fn foo() -> u32;\n-   |     ^^^^^ functions in traits cannot be const\n-\n-error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:7:5\n-   |\n-LL |     const fn bar() -> u32 { 0 }\n-   |     ^^^^^ functions in traits cannot be const\n-\n-error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/feature-gate-const_fn.rs:11:5\n-   |\n-LL |     const fn foo() -> u32 { 0 }\n-   |     ^^^^^ functions in traits cannot be const\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0379`."}, {"sha": "d7daaaaa101e7d4e3db0b87a59abf2d02f2d2fda", "filename": "src/test/ui/feature-gates/feature-gate-rustc_const_unstable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,7 +1,5 @@\n // Test internal const fn feature gate.\n \n-#![feature(const_fn)]\n-\n #[rustc_const_unstable(feature=\"fzzzzzt\")] //~ stability attributes may not be used outside\n pub const fn bazinga() {}\n "}, {"sha": "48493b786d6495c376ef662b0612dd46ceeb16cb", "filename": "src/test/ui/feature-gates/feature-gate-rustc_const_unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.stderr?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,5 +1,5 @@\n error[E0734]: stability attributes may not be used outside of the standard library\n-  --> $DIR/feature-gate-rustc_const_unstable.rs:5:1\n+  --> $DIR/feature-gate-rustc_const_unstable.rs:3:1\n    |\n LL | #[rustc_const_unstable(feature=\"fzzzzzt\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "470262a15ba0dea88f7e7bf4871ae79b3def2273", "filename": "src/test/ui/internal/internal-unstable-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -3,7 +3,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #![feature(staged_api)]\n-#![feature(const_transmute, const_fn)]\n+#![feature(const_transmute)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "42a4d5b674b229c239149037f9398ce90f86565c", "filename": "src/test/ui/issues/issue-54954.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_fn)]\n-\n const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n //~^ ERROR type annotations needed\n "}, {"sha": "9de58d83c8b074340f6cdb2749baf202b7b94a66", "filename": "src/test/ui/issues/issue-54954.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54954.stderr?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,11 +1,11 @@\n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/issue-54954.rs:7:5\n+  --> $DIR/issue-54954.rs:5:5\n    |\n LL |     const fn const_val<T: Sized>() -> usize {\n    |     ^^^^^ functions in traits cannot be const\n \n error[E0283]: type annotations needed\n-  --> $DIR/issue-54954.rs:3:24\n+  --> $DIR/issue-54954.rs:1:24\n    |\n LL | const ARR_LEN: usize = Tt::const_val::<[i8; 123]>();\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type"}, {"sha": "e04d59c58c22bfa86c4f021c66f6ef21d2a29c77", "filename": "src/test/ui/mismatched_types/const-fn-in-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_fn)]\n-\n trait Foo {\n     fn f() -> u32;\n     const fn g(); //~ ERROR cannot be declared const"}, {"sha": "7d1fbe45c5302ce815920f4b06566e218f1f65de", "filename": "src/test/ui/mismatched_types/const-fn-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fconst-fn-in-trait.stderr?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,11 +1,11 @@\n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/const-fn-in-trait.rs:5:5\n+  --> $DIR/const-fn-in-trait.rs:3:5\n    |\n LL |     const fn g();\n    |     ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/const-fn-in-trait.rs:9:5\n+  --> $DIR/const-fn-in-trait.rs:7:5\n    |\n LL |     const fn f() -> u32 { 22 }\n    |     ^^^^^ functions in traits cannot be const"}, {"sha": "91a63bafd99a9688d6847e380c863a8ee8768dca", "filename": "src/test/ui/parser/fn-header-semantic-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -3,7 +3,6 @@\n // edition:2018\n \n #![feature(const_extern_fn)]\n-#![feature(const_fn)]\n \n fn main() {\n     async fn ff1() {} // OK."}, {"sha": "b3f60b13b0f74a640869a8bb5dd1a8e9c0ec07ea", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,5 +1,5 @@\n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:13:5\n+  --> $DIR/fn-header-semantic-fail.rs:12:5\n    |\n LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n    |     ^^^^^-^^^^^------------------------------\n@@ -8,7 +8,7 @@ LL |     const async unsafe extern \"C\" fn ff5() {} // OK.\n    |     `const` because of this\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:17:9\n+  --> $DIR/fn-header-semantic-fail.rs:16:9\n    |\n LL |         async fn ft1();\n    |         -----^^^^^^^^^^\n@@ -19,19 +19,19 @@ LL |         async fn ft1();\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:19:9\n+  --> $DIR/fn-header-semantic-fail.rs:18:9\n    |\n LL |         const fn ft3();\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n+  --> $DIR/fn-header-semantic-fail.rs:20:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n+  --> $DIR/fn-header-semantic-fail.rs:20:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:21:9\n+  --> $DIR/fn-header-semantic-fail.rs:20:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |         ^^^^^-^^^^^----------------------------\n@@ -51,7 +51,7 @@ LL |         const async unsafe extern \"C\" fn ft5();\n    |         `const` because of this\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:29:9\n+  --> $DIR/fn-header-semantic-fail.rs:28:9\n    |\n LL |         async fn ft1() {}\n    |         -----^^^^^^^^^^^^\n@@ -62,19 +62,19 @@ LL |         async fn ft1() {}\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:32:9\n+  --> $DIR/fn-header-semantic-fail.rs:31:9\n    |\n LL |         const fn ft3() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0379]: functions in traits cannot be declared const\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^ functions in traits cannot be const\n \n error[E0706]: functions in traits cannot be declared `async`\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -85,7 +85,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    = note: consider using the `async-trait` crate: https://crates.io/crates/async-trait\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:34:9\n+  --> $DIR/fn-header-semantic-fail.rs:33:9\n    |\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -94,7 +94,7 @@ LL |         const async unsafe extern \"C\" fn ft5() {}\n    |         `const` because of this\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:46:9\n+  --> $DIR/fn-header-semantic-fail.rs:45:9\n    |\n LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         ^^^^^-^^^^^------------------------------\n@@ -103,7 +103,7 @@ LL |         const async unsafe extern \"C\" fn fi5() {}\n    |         `const` because of this\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:51:18\n+  --> $DIR/fn-header-semantic-fail.rs:50:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -116,7 +116,7 @@ LL |         fn fe1();\n    |         ^^\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:52:19\n+  --> $DIR/fn-header-semantic-fail.rs:51:19\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -130,7 +130,7 @@ LL |         fn fe2();\n    |         ^^\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:53:18\n+  --> $DIR/fn-header-semantic-fail.rs:52:18\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -144,7 +144,7 @@ LL |         fn fe3();\n    |         ^^\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:54:23\n+  --> $DIR/fn-header-semantic-fail.rs:53:23\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -158,7 +158,7 @@ LL |         fn fe4();\n    |         ^^\n \n error: functions in `extern` blocks cannot have qualifiers\n-  --> $DIR/fn-header-semantic-fail.rs:55:42\n+  --> $DIR/fn-header-semantic-fail.rs:54:42\n    |\n LL |     extern \"C\" {\n    |     ---------- in this `extern` block\n@@ -172,7 +172,7 @@ LL |         fn fe5();\n    |         ^^\n \n error: functions cannot be both `const` and `async`\n-  --> $DIR/fn-header-semantic-fail.rs:55:9\n+  --> $DIR/fn-header-semantic-fail.rs:54:9\n    |\n LL |         const async unsafe extern \"C\" fn fe5();\n    |         ^^^^^-^^^^^----------------------------\n@@ -181,7 +181,7 @@ LL |         const async unsafe extern \"C\" fn fe5();\n    |         `const` because of this\n \n error[E0053]: method `ft1` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:29:24\n+  --> $DIR/fn-header-semantic-fail.rs:28:24\n    |\n LL |         async fn ft1();\n    |                       - type in trait\n@@ -197,7 +197,7 @@ LL |         async fn ft1() {}\n               found fn pointer `fn() -> impl Future`\n \n error[E0053]: method `ft5` has an incompatible type for trait\n-  --> $DIR/fn-header-semantic-fail.rs:34:48\n+  --> $DIR/fn-header-semantic-fail.rs:33:48\n    |\n LL |         const async unsafe extern \"C\" fn ft5();\n    |                                               - type in trait"}, {"sha": "a3bed707eccda69c6ea5c9614ba97787853a5819", "filename": "src/test/ui/rfc-2091-track-caller/caller-location-fnptr-rt-ctfe-equiv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fcaller-location-fnptr-rt-ctfe-equiv.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -6,7 +6,7 @@\n // run-pass\n // compile-flags: -Z unleash-the-miri-inside-of-you\n \n-#![feature(core_intrinsics, const_caller_location, const_fn)]\n+#![feature(core_intrinsics, const_caller_location)]\n \n type L = &'static std::panic::Location<'static>;\n "}, {"sha": "6e15cf3fe8ad375922d9468447b0164ff6de2060", "filename": "src/test/ui/rfc-2091-track-caller/const-caller-location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst-caller-location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst-caller-location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fconst-caller-location.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -2,7 +2,7 @@\n // revisions: default mir-opt\n //[mir-opt] compile-flags: -Zmir-opt-level=4\n \n-#![feature(const_caller_location, const_fn)]\n+#![feature(const_caller_location)]\n \n use std::panic::Location;\n "}, {"sha": "06457bc5ca65a1465da34ca75195ab43752445cf", "filename": "src/test/ui/rustc-args-required-const2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Frustc-args-required-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Frustc-args-required-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frustc-args-required-const2.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, const_fn)]\n+#![feature(rustc_attrs)]\n \n #[rustc_args_required_const(0)]\n fn foo(_a: i32) {"}, {"sha": "d7cb66d9c84ec72657e53a69a519c5fb9f9c6f20", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,6 +1,6 @@\n // Various checks that stability attributes are used correctly, per RFC 507\n \n-#![feature(const_fn, staged_api)]\n+#![feature(staged_api)]\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "e7ea8663d5af84cefa08ff85ab170f6cc144c464", "filename": "src/test/ui/static/static-drop-scope.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,5 +1,3 @@\n-#![feature(const_fn)]\n-\n struct WithDtor;\n \n impl Drop for WithDtor {"}, {"sha": "ac32f217fd76904facc0c879a6e08aae9e01127d", "filename": "src/test/ui/static/static-drop-scope.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-drop-scope.stderr?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,13 +1,13 @@\n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/static-drop-scope.rs:9:60\n+  --> $DIR/static-drop-scope.rs:7:60\n    |\n LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                            ^^^^^^^^- value is dropped here\n    |                                                            |\n    |                                                            statics cannot evaluate destructors\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/static-drop-scope.rs:9:60\n+  --> $DIR/static-drop-scope.rs:7:60\n    |\n LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                      ------^^^^^^^^-\n@@ -17,15 +17,15 @@ LL | static PROMOTION_FAIL_S: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                      using this value as a static requires that borrow lasts for `'static`\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/static-drop-scope.rs:13:59\n+  --> $DIR/static-drop-scope.rs:11:59\n    |\n LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                           ^^^^^^^^- value is dropped here\n    |                                                           |\n    |                                                           constants cannot evaluate destructors\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/static-drop-scope.rs:13:59\n+  --> $DIR/static-drop-scope.rs:11:59\n    |\n LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                     ------^^^^^^^^-\n@@ -35,31 +35,31 @@ LL | const PROMOTION_FAIL_C: Option<&'static WithDtor> = Some(&WithDtor);\n    |                                                     using this value as a constant requires that borrow lasts for `'static`\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/static-drop-scope.rs:17:28\n+  --> $DIR/static-drop-scope.rs:15:28\n    |\n LL | static EARLY_DROP_S: i32 = (WithDtor, 0).1;\n    |                            ^^^^^^^^^^^^^ - value is dropped here\n    |                            |\n    |                            statics cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/static-drop-scope.rs:20:27\n+  --> $DIR/static-drop-scope.rs:18:27\n    |\n LL | const EARLY_DROP_C: i32 = (WithDtor, 0).1;\n    |                           ^^^^^^^^^^^^^ - value is dropped here\n    |                           |\n    |                           constants cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/static-drop-scope.rs:23:24\n+  --> $DIR/static-drop-scope.rs:21:24\n    |\n LL | const fn const_drop<T>(_: T) {}\n    |                        ^      - value is dropped here\n    |                        |\n    |                        constant functions cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/static-drop-scope.rs:27:5\n+  --> $DIR/static-drop-scope.rs:25:5\n    |\n LL |     (x, ()).1\n    |     ^^^^^^^ constant functions cannot evaluate destructors\n@@ -68,15 +68,15 @@ LL | }\n    | - value is dropped here\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/static-drop-scope.rs:31:34\n+  --> $DIR/static-drop-scope.rs:29:34\n    |\n LL | const EARLY_DROP_C_OPTION: i32 = (Some(WithDtor), 0).1;\n    |                                  ^^^^^^^^^^^^^^^^^^^ - value is dropped here\n    |                                  |\n    |                                  constants cannot evaluate destructors\n \n error[E0493]: destructors cannot be evaluated at compile-time\n-  --> $DIR/static-drop-scope.rs:36:43\n+  --> $DIR/static-drop-scope.rs:34:43\n    |\n LL | const EARLY_DROP_C_OPTION_CONSTANT: i32 = (HELPER, 0).1;\n    |                                           ^^^^^^^^^^^ - value is dropped here"}, {"sha": "547e5445aa1b63f3207db8a157b708dc2c066134", "filename": "src/test/ui/thread-local-in-ctfe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fthread-local-in-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fthread-local-in-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,4 +1,4 @@\n-#![feature(const_fn, thread_local)]\n+#![feature(thread_local)]\n \n #[thread_local]\n static A: u32 = 1;"}, {"sha": "4d3c4e8accd8888bbfb535927bf773387322b6da", "filename": "src/test/ui/threads-sendsync/auxiliary/thread-local-extern-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fthreads-sendsync%2Fauxiliary%2Fthread-local-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fthreads-sendsync%2Fauxiliary%2Fthread-local-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fauxiliary%2Fthread-local-extern-static.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,4 +1,4 @@\n-#![feature(cfg_target_thread_local, const_fn, thread_local)]\n+#![feature(cfg_target_thread_local, thread_local)]\n #![crate_type = \"lib\"]\n \n #[cfg(target_thread_local)]"}, {"sha": "4d81d0a5d2093f81a7532b10c944327beb486e98", "filename": "src/test/ui/threads-sendsync/issue-43733.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,4 +1,3 @@\n-#![feature(const_fn)]\n #![feature(thread_local)]\n #![feature(cfg_target_thread_local, thread_local_internals)]\n "}, {"sha": "c7b12a395a253b2ef85b68ae72166b2b3779fd1a", "filename": "src/test/ui/threads-sendsync/issue-43733.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.stderr?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,13 +1,13 @@\n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:18:5\n+  --> $DIR/issue-43733.rs:17:5\n    |\n LL |     __KEY.get(Default::default)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:22:5\n+  --> $DIR/issue-43733.rs:21:5\n    |\n LL |     std::thread::LocalKey::new(__getit);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function"}, {"sha": "15a20899a78d1a24419303e24dde5591a9ecb19d", "filename": "src/test/ui/union/union-const-eval-field.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Funion%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Funion%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-eval-field.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,7 +1,5 @@\n // run-pass\n \n-#![feature(const_fn)]\n-\n type Field1 = (i32, u32);\n type Field2 = f32;\n type Field3 = i64;"}, {"sha": "c7120e05007256dda4c0dedcc36076657a42c32e", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.rs?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,7 +1,6 @@\n #![stable(feature = \"foo\", since = \"1.33.0\")]\n #![feature(staged_api)]\n #![feature(const_raw_ptr_deref)]\n-#![feature(const_fn)]\n \n #[stable(feature = \"foo\", since = \"1.33.0\")]\n #[rustc_const_unstable(feature = \"const_foo\", issue = \"none\")]"}, {"sha": "410d8d3fb4024a0922584484d1e7b63d11fe0f3e", "filename": "src/test/ui/unsafe/unsafe-unstable-const-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bafc51e01aea45da746afaf51d5783f0409d605b/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-unstable-const-fn.stderr?ref=bafc51e01aea45da746afaf51d5783f0409d605b", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: dereference of raw pointer is unsafe and requires unsafe function or block\n-  --> $DIR/unsafe-unstable-const-fn.rs:9:5\n+  --> $DIR/unsafe-unstable-const-fn.rs:8:5\n    |\n LL |     *a == b\n    |     ^^ dereference of raw pointer"}]}