{"sha": "0dda4154bd254b629567739085471b8e50676c83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZGE0MTU0YmQyNTRiNjI5NTY3NzM5MDg1NDcxYjhlNTA2NzZjODM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-06-30T21:41:57Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-10-06T10:19:30Z"}, "message": "Fix tools", "tree": {"sha": "5875bc721682c06a24f491822e399279aa68864f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5875bc721682c06a24f491822e399279aa68864f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dda4154bd254b629567739085471b8e50676c83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dda4154bd254b629567739085471b8e50676c83", "html_url": "https://github.com/rust-lang/rust/commit/0dda4154bd254b629567739085471b8e50676c83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dda4154bd254b629567739085471b8e50676c83/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "042464f75ae1272260b24896b3266a5c1ba62c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/042464f75ae1272260b24896b3266a5c1ba62c6b", "html_url": "https://github.com/rust-lang/rust/commit/042464f75ae1272260b24896b3266a5c1ba62c6b"}], "stats": {"total": 112, "additions": 55, "deletions": 57}, "files": [{"sha": "18519b471b203606350319b5626f7134b0dc1d9f", "filename": "compiler/rustc_error_codes/src/error_codes/E0284.md", "status": "modified", "additions": 15, "deletions": 23, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0dda4154bd254b629567739085471b8e50676c83/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0284.md", "raw_url": "https://github.com/rust-lang/rust/raw/0dda4154bd254b629567739085471b8e50676c83/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0284.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0284.md?ref=0dda4154bd254b629567739085471b8e50676c83", "patch": "@@ -5,37 +5,29 @@ as the `collect` method for `Iterator`s.\n For example:\n \n ```compile_fail,E0284\n-fn foo() -> Result<bool, ()> {\n-    let results = [Ok(true), Ok(false), Err(())].iter().cloned();\n-    let v: Vec<bool> = results.collect()?;\n-    // Do things with v...\n-    Ok(true)\n+fn main() {\n+    let n: u32 = 1;\n+    let mut d: u64 = 2;\n+    d = d + n.into();\n }\n ```\n \n-Here we have an iterator `results` over `Result<bool, ()>`.\n-Hence, `results.collect()` can return any type implementing\n-`FromIterator<Result<bool, ()>>`. On the other hand, the\n-`?` operator can accept any type implementing `Try`.\n+Here we have an addition of `d` and `n.into()`. Hence, `n.into()` can return\n+any type `T` where `u64: Add<T>`. On the other hand, the `into` method can\n+rteurn any type where `u32: Into<T>`.\n \n-The author of this code probably wants `collect()` to return a\n-`Result<Vec<bool>, ()>`, but the compiler can't be sure\n-that there isn't another type `T` implementing both `Try` and\n-`FromIterator<Result<bool, ()>>` in scope such that\n-`T::Ok == Vec<bool>`. Hence, this code is ambiguous and an error\n-is returned.\n+The author of this code probably wants `into()` to return a `u64`, but the\n+compiler can't be sure that there isn't another type `T` where both\n+`u32: Into<T>` and `u64: Add<T>`.\n \n To resolve this error, use a concrete type for the intermediate expression:\n \n ```\n-fn foo() -> Result<bool, ()> {\n-    let results = [Ok(true), Ok(false), Err(())].iter().cloned();\n-    let v = {\n-        let temp: Result<Vec<bool>, ()> = results.collect();\n-        temp?\n-    };\n-    // Do things with v...\n-    Ok(true)\n+fn main() {\n+    let n: u32 = 1;\n+    let mut d: u64 = 2;\n+    let m: u64 = n.into();\n+    d = d + m;\n }\n ```\n "}, {"sha": "ac1e2b467045c5a03f8cf75926ba156c83cbba54", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0dda4154bd254b629567739085471b8e50676c83/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dda4154bd254b629567739085471b8e50676c83/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0dda4154bd254b629567739085471b8e50676c83", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::bug;\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::fold::TypeFolder;\n-use rustc_middle::ty::subst::InternalSubsts;\n+use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n use rustc_mir::const_eval::{is_const_fn, is_min_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::MacroKind;\n@@ -1268,13 +1268,10 @@ impl Clean<Item> for ty::AssocItem {\n             ty::AssocKind::Type => {\n                 let my_name = self.ident.name.clean(cx);\n \n-                if let ty::TraitContainer(did) = self.container {\n-                    // When loading a cross-crate associated type, the bounds for this type\n-                    // are actually located on the trait/impl itself, so we need to load\n-                    // all of the generics from there and then look for bounds that are\n-                    // applied to this associated type in question.\n-                    let predicates = cx.tcx.explicit_predicates_of(did);\n-                    let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n+                if let ty::TraitContainer(_) = self.container {\n+                    let bounds = cx.tcx.explicit_item_bounds(self.def_id);\n+                    let predicates = ty::GenericPredicates { parent: None, predicates: bounds };\n+                    let generics = (cx.tcx.generics_of(self.def_id), predicates).clean(cx);\n                     let mut bounds = generics\n                         .where_predicates\n                         .iter()\n@@ -1678,19 +1675,22 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n             ty::Opaque(def_id, substs) => {\n                 // Grab the \"TraitA + TraitB\" from `impl TraitA + TraitB`,\n-                // by looking up the projections associated with the def_id.\n-                let predicates_of = cx.tcx.explicit_predicates_of(def_id);\n+                // by looking up the bounds associated with the def_id.\n                 let substs = cx.tcx.lift(&substs).expect(\"Opaque lift failed\");\n-                let bounds = predicates_of.instantiate(cx.tcx, substs);\n+                let bounds = cx\n+                    .tcx\n+                    .explicit_item_bounds(def_id)\n+                    .iter()\n+                    .map(|(bound, _)| bound.subst(cx.tcx, substs))\n+                    .collect::<Vec<_>>();\n                 let mut regions = vec![];\n                 let mut has_sized = false;\n                 let mut bounds = bounds\n-                    .predicates\n                     .iter()\n-                    .filter_map(|predicate| {\n+                    .filter_map(|bound| {\n                         // Note: The substs of opaque types can contain unbound variables,\n                         // meaning that we have to use `ignore_quantifiers_with_unbound_vars` here.\n-                        let trait_ref = match predicate.bound_atom(cx.tcx).skip_binder() {\n+                        let trait_ref = match bound.bound_atom(cx.tcx).skip_binder() {\n                             ty::PredicateAtom::Trait(tr, _constness) => {\n                                 ty::Binder::bind(tr.trait_ref)\n                             }\n@@ -1711,11 +1711,10 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                         }\n \n                         let bounds: Vec<_> = bounds\n-                            .predicates\n                             .iter()\n-                            .filter_map(|pred| {\n+                            .filter_map(|bound| {\n                                 if let ty::PredicateAtom::Projection(proj) =\n-                                    pred.bound_atom(cx.tcx).skip_binder()\n+                                    bound.bound_atom(cx.tcx).skip_binder()\n                                 {\n                                     if proj.projection_ty.trait_ref(cx.tcx)\n                                         == trait_ref.skip_binder()\n@@ -2067,13 +2066,10 @@ impl Clean<Item> for doctree::OpaqueTy<'_> {\n             visibility: self.vis.clean(cx),\n             stability: cx.stability(self.id).clean(cx),\n             deprecation: cx.deprecation(self.id).clean(cx),\n-            inner: OpaqueTyItem(\n-                OpaqueTy {\n-                    bounds: self.opaque_ty.bounds.clean(cx),\n-                    generics: self.opaque_ty.generics.clean(cx),\n-                },\n-                false,\n-            ),\n+            inner: OpaqueTyItem(OpaqueTy {\n+                bounds: self.opaque_ty.bounds.clean(cx),\n+                generics: self.opaque_ty.generics.clean(cx),\n+            }),\n         }\n     }\n }"}, {"sha": "bb6f449e3550d5768558f8185199351816e3fd91", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dda4154bd254b629567739085471b8e50676c83/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dda4154bd254b629567739085471b8e50676c83/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=0dda4154bd254b629567739085471b8e50676c83", "patch": "@@ -252,7 +252,7 @@ pub enum ItemEnum {\n     FunctionItem(Function),\n     ModuleItem(Module),\n     TypedefItem(Typedef, bool /* is associated type */),\n-    OpaqueTyItem(OpaqueTy, bool /* is associated type */),\n+    OpaqueTyItem(OpaqueTy),\n     StaticItem(Static),\n     ConstantItem(Constant),\n     TraitItem(Trait),"}, {"sha": "afd1dc596427ff640dad0690b57f330047ab6a71", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0dda4154bd254b629567739085471b8e50676c83/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dda4154bd254b629567739085471b8e50676c83/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=0dda4154bd254b629567739085471b8e50676c83", "patch": "@@ -1709,7 +1709,7 @@ fn print_item(cx: &Context, item: &clean::Item, buf: &mut Buffer, cache: &Cache)\n         clean::ConstantItem(ref c) => item_constant(buf, cx, item, c),\n         clean::ForeignTypeItem => item_foreign_type(buf, cx, item, cache),\n         clean::KeywordItem(_) => item_keyword(buf, cx, item),\n-        clean::OpaqueTyItem(ref e, _) => item_opaque_ty(buf, cx, item, e, cache),\n+        clean::OpaqueTyItem(ref e) => item_opaque_ty(buf, cx, item, e, cache),\n         clean::TraitAliasItem(ref ta) => item_trait_alias(buf, cx, item, ta, cache),\n         _ => {\n             // We don't generate pages for any other type."}, {"sha": "d2a322e1223c660c6ff0b5977769f0b71ee76750", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0dda4154bd254b629567739085471b8e50676c83/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dda4154bd254b629567739085471b8e50676c83/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=0dda4154bd254b629567739085471b8e50676c83", "patch": "@@ -3,6 +3,7 @@ use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{Opaque, PredicateAtom::Trait};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{sym, Span};\n@@ -62,9 +63,10 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         }\n         let ret_ty = utils::return_ty(cx, hir_id);\n         if let Opaque(id, subst) = *ret_ty.kind() {\n-            let preds = cx.tcx.predicates_of(id).instantiate(cx.tcx, subst);\n+            let preds = cx.tcx.explicit_item_bounds(id);\n             let mut is_future = false;\n-            for p in preds.predicates {\n+            for &(p, _span) in preds {\n+                let p = p.subst(cx.tcx, subst);\n                 if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n                     if Some(trait_ref.def_id()) == cx.tcx.lang_items().future_trait() {\n                         is_future = true;\n@@ -90,8 +92,13 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                         |db| {\n                             cx.tcx.infer_ctxt().enter(|infcx| {\n                                 for FulfillmentError { obligation, .. } in send_errors {\n-                                    infcx.maybe_note_obligation_cause_for_async_await(db, &obligation);\n-                                    if let Trait(trait_pred, _) = obligation.predicate.skip_binders() {\n+                                    infcx.maybe_note_obligation_cause_for_async_await(\n+                                        db,\n+                                        &obligation,\n+                                    );\n+                                    if let Trait(trait_pred, _) =\n+                                        obligation.predicate.skip_binders()\n+                                    {\n                                         db.note(&format!(\n                                             \"`{}` doesn't implement `{}`\",\n                                             trait_pred.self_ty(),"}, {"sha": "e0651f9ab5d6c7e58b1c2840167ca394c72efb0b", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0dda4154bd254b629567739085471b8e50676c83/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dda4154bd254b629567739085471b8e50676c83/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=0dda4154bd254b629567739085471b8e50676c83", "patch": "@@ -1667,8 +1667,10 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             // if return type is impl trait, check the associated types\n             if let ty::Opaque(def_id, _) = *ret_ty.kind() {\n                 // one of the associated types must be Self\n-                for &(predicate, _span) in cx.tcx.predicates_of(def_id).predicates {\n-                    if let ty::PredicateAtom::Projection(projection_predicate) = predicate.skip_binders() {\n+                for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n+                    if let ty::PredicateAtom::Projection(projection_predicate) =\n+                        predicate.skip_binders()\n+                    {\n                         // walk the associated type and check for Self\n                         if contains_ty(projection_predicate.ty, self_ty) {\n                             return;"}, {"sha": "247effde19b9c14302805ac6bc14f75fe74f5c94", "filename": "src/tools/clippy/clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0dda4154bd254b629567739085471b8e50676c83/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dda4154bd254b629567739085471b8e50676c83/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=0dda4154bd254b629567739085471b8e50676c83", "patch": "@@ -1285,9 +1285,10 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n         },\n         ty::Tuple(ref substs) => substs.types().any(|ty| is_must_use_ty(cx, ty)),\n         ty::Opaque(ref def_id, _) => {\n-            for (predicate, _) in cx.tcx.predicates_of(*def_id).predicates {\n+            for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n                 if let ty::PredicateAtom::Trait(trait_predicate, _) = predicate.skip_binders() {\n-                    if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some() {\n+                    if must_use_attr(&cx.tcx.get_attrs(trait_predicate.trait_ref.def_id)).is_some()\n+                    {\n                         return true;\n                     }\n                 }"}]}