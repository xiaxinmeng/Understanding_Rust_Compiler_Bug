{"sha": "8136b92ee8e47fc460e64eb7ab65bc59f33efb71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMzZiOTJlZThlNDdmYzQ2MGU2NGViN2FiNjViYzU5ZjMzZWZiNzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-15T00:34:41Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-21T01:23:48Z"}, "message": "Give subtype relationships to function types", "tree": {"sha": "825ddf213ee65f9a7804e0b868b6b49866a9f88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/825ddf213ee65f9a7804e0b868b6b49866a9f88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8136b92ee8e47fc460e64eb7ab65bc59f33efb71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8136b92ee8e47fc460e64eb7ab65bc59f33efb71", "html_url": "https://github.com/rust-lang/rust/commit/8136b92ee8e47fc460e64eb7ab65bc59f33efb71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8136b92ee8e47fc460e64eb7ab65bc59f33efb71/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed985b61d5c1e35b10a135ec8872aec2fbf66531", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed985b61d5c1e35b10a135ec8872aec2fbf66531", "html_url": "https://github.com/rust-lang/rust/commit/ed985b61d5c1e35b10a135ec8872aec2fbf66531"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "71521abb538e0f29201773849a40090d89a4f251", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 57, "deletions": 2, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/8136b92ee8e47fc460e64eb7ab65bc59f33efb71/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8136b92ee8e47fc460e64eb7ab65bc59f33efb71/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=8136b92ee8e47fc460e64eb7ab65bc59f33efb71", "patch": "@@ -1010,9 +1010,11 @@ fn type_kind(cx: ctxt, ty: t) -> ast::kind {\n       // here yet, leading to weirdness around closure.\n       ty_fn(proto, _, _, _, _) {\n         result = alt proto {\n+          ast::proto_iter. { ast::kind_shared }\n           ast::proto_block. { ast::kind_pinned }\n           ast::proto_closure. { ast::kind_shared }\n-          _ { ast::kind_unique }\n+          ast::proto_fn. { ast::kind_shared }\n+          ast::proto_bare. { ast::kind_unique }\n         };\n       }\n       // Those with refcounts-to-inner raise pinned to shared,\n@@ -2018,14 +2020,67 @@ mod unify {\n           _ { ret fn_common_res_err(result); }\n         }\n     }\n+    fn unify_fn_proto(e_proto: ast::proto, a_proto: ast::proto,\n+                      variance: variance) -> option::t<result> {\n+        fn gt(e_proto: ast::proto, a_proto: ast::proto) -> bool {\n+            alt e_proto {\n+              ast::proto_block. {\n+                // Every function type is a subtype of block\n+                false\n+              }\n+              ast::proto_closure. | ast::proto_fn. {\n+                a_proto == ast::proto_block\n+              }\n+              ast::proto_bare. {\n+                a_proto != ast::proto_bare\n+              }\n+            }\n+        }\n+\n+        ret if (e_proto == ast::proto_iter\n+            || a_proto == ast::proto_iter) {\n+            if e_proto != a_proto {\n+                some(ures_err(terr_mismatch))\n+            } else {\n+                none\n+            }\n+        } else if e_proto == a_proto {\n+            none\n+        } else if variance == invariant {\n+            if e_proto != a_proto {\n+                some(ures_err(terr_mismatch))\n+            } else {\n+                fail\n+            }\n+        } else if variance == covariant {\n+            if gt(e_proto, a_proto) {\n+                some(ures_err(terr_mismatch))\n+            } else {\n+                none\n+            }\n+        } else if variance == contravariant {\n+            if gt(a_proto, e_proto) {\n+                some(ures_err(terr_mismatch))\n+            } else {\n+                none\n+            }\n+        } else {\n+            fail\n+        }\n+    }\n     fn unify_fn(cx: @ctxt, e_proto: ast::proto, a_proto: ast::proto,\n                 expected: t, actual: t, expected_inputs: [arg],\n                 expected_output: t, actual_inputs: [arg], actual_output: t,\n                 expected_cf: ret_style, actual_cf: ret_style,\n                 _expected_constrs: [@constr], actual_constrs: [@constr],\n                 variance: variance) ->\n        result {\n-        if e_proto != a_proto { ret ures_err(terr_mismatch); }\n+\n+        alt unify_fn_proto(e_proto, a_proto, variance) {\n+          some(err) { ret err; }\n+          none. { /* fall through */ }\n+        }\n+\n         if actual_cf != ast::noreturn && actual_cf != expected_cf {\n             /* even though typestate checking is mostly\n                responsible for checking control flow annotations,"}, {"sha": "759ab37585dfa009459fbcc141a542511402474c", "filename": "src/test/run-pass/fn-coerce-field.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8136b92ee8e47fc460e64eb7ab65bc59f33efb71/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8136b92ee8e47fc460e64eb7ab65bc59f33efb71/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-coerce-field.rs?ref=8136b92ee8e47fc460e64eb7ab65bc59f33efb71", "patch": "@@ -0,0 +1,7 @@\n+type r = {\n+    field: fn@()\n+};\n+\n+fn main() {\n+    let i: r = {field: fn#() { }};\n+}\n\\ No newline at end of file"}]}