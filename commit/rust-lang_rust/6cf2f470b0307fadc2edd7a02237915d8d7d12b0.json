{"sha": "6cf2f470b0307fadc2edd7a02237915d8d7d12b0", "node_id": "C_kwDOAAsO6NoAKDZjZjJmNDcwYjAzMDdmYWRjMmVkZDdhMDIyMzc5MTVkOGQ3ZDEyYjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-16T07:57:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-16T07:57:06Z"}, "message": "Rollup merge of #109139 - GuillaumeGomez:rustdoc-windows-wait-for-write, r=notriddle\n\nrustdoc: DocFS: Replace rayon with threadpool and enable it for all targets\n\nFixes https://github.com/rust-lang/rust/issues/109060.\n\nSwitching to `threadpool` makes it a bit simpler for us to wait for all tasks in `DocFS` directly in the `Drop` implementation. I'm also curious if making all the writes into a thread pool could improve run time for rustdoc on all other platforms than Windows as well.\n\nI'll run a perf check to see.\n\ncc ```@ehuss```\nr? ```@notriddle```", "tree": {"sha": "02f6837a45abd90e63c35200a983419c3dad8f93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02f6837a45abd90e63c35200a983419c3dad8f93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf2f470b0307fadc2edd7a02237915d8d7d12b0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkEsvSCRBK7hj4Ov3rIwAAvoIIADna7u+KBZfbsJCQydHMhhus\nIYmNuuKP7UezB9T+wycf/TPGcZuJ48stU3ZaTCJt4ewjs9b+//fVbI0NY/5jZopZ\n4dHcPTIbbezK3NxUgigACoTbIBWRuLkiLzPOCqCd/3kIFfWOM3rG1/PQkT9EnCJO\nCieJdDtEkMAsCXSaTKqgrdFqGmJhi+M6uAoKhTGNcQNsMaf49q/mLwHE5y7W/2CN\nmgxe66z1fhVae/qj9P3gUx++XDOm+Bsj3ZFuV50zU8b982JzOAlDqwgEpsVw0GHk\n70z8xgw5jXl+R3NY1GSpPJzEC7yLSeg+43FiIXL+qPIeR7cSOAmzmA/bKa/TU7g=\n=kfTQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 02f6837a45abd90e63c35200a983419c3dad8f93\nparent 1385a32b62662b29aa5ebda68cc60503b2697b76\nparent e667872bfdcc48305e1fae90d278693cb089223e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678953426 +0100\ncommitter GitHub <noreply@github.com> 1678953426 +0100\n\nRollup merge of #109139 - GuillaumeGomez:rustdoc-windows-wait-for-write, r=notriddle\n\nrustdoc: DocFS: Replace rayon with threadpool and enable it for all targets\n\nFixes https://github.com/rust-lang/rust/issues/109060.\n\nSwitching to `threadpool` makes it a bit simpler for us to wait for all tasks in `DocFS` directly in the `Drop` implementation. I'm also curious if making all the writes into a thread pool could improve run time for rustdoc on all other platforms than Windows as well.\n\nI'll run a perf check to see.\n\ncc ```@ehuss```\nr? ```@notriddle```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf2f470b0307fadc2edd7a02237915d8d7d12b0", "html_url": "https://github.com/rust-lang/rust/commit/6cf2f470b0307fadc2edd7a02237915d8d7d12b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf2f470b0307fadc2edd7a02237915d8d7d12b0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1385a32b62662b29aa5ebda68cc60503b2697b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/1385a32b62662b29aa5ebda68cc60503b2697b76", "html_url": "https://github.com/rust-lang/rust/commit/1385a32b62662b29aa5ebda68cc60503b2697b76"}, {"sha": "e667872bfdcc48305e1fae90d278693cb089223e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e667872bfdcc48305e1fae90d278693cb089223e", "html_url": "https://github.com/rust-lang/rust/commit/e667872bfdcc48305e1fae90d278693cb089223e"}], "stats": {"total": 43, "additions": 32, "deletions": 11}, "files": [{"sha": "49b89c71994a87f23b643f9f5d459c47d0352277", "filename": "Cargo.lock", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cf2f470b0307fadc2edd7a02237915d8d7d12b0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6cf2f470b0307fadc2edd7a02237915d8d7d12b0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6cf2f470b0307fadc2edd7a02237915d8d7d12b0", "patch": "@@ -5458,13 +5458,13 @@ dependencies = [\n  \"itertools\",\n  \"minifier\",\n  \"once_cell\",\n- \"rayon\",\n  \"regex\",\n  \"rustdoc-json-types\",\n  \"serde\",\n  \"serde_json\",\n  \"smallvec\",\n  \"tempfile\",\n+ \"threadpool\",\n  \"tracing\",\n  \"tracing-subscriber\",\n  \"tracing-tree\",\n@@ -6209,6 +6209,15 @@ dependencies = [\n  \"once_cell\",\n ]\n \n+[[package]]\n+name = \"threadpool\"\n+version = \"1.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d050e60b33d41c19108b32cea32164033a9013fe3b46cbd4457559bfbf77afaa\"\n+dependencies = [\n+ \"num_cpus\",\n+]\n+\n [[package]]\n name = \"tidy\"\n version = \"0.1.0\""}, {"sha": "29912b95703b2f8c48dada046dbfeb2642376127", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6cf2f470b0307fadc2edd7a02237915d8d7d12b0/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6cf2f470b0307fadc2edd7a02237915d8d7d12b0/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=6cf2f470b0307fadc2edd7a02237915d8d7d12b0", "patch": "@@ -20,15 +20,13 @@ smallvec = \"1.8.1\"\n tempfile = \"3\"\n tracing = \"0.1\"\n tracing-tree = \"0.2.0\"\n+threadpool = \"1.8.1\"\n \n [dependencies.tracing-subscriber]\n version = \"0.3.3\"\n default-features = false\n features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"]\n \n-[target.'cfg(windows)'.dependencies]\n-rayon = \"1.5.1\"\n-\n [dev-dependencies]\n expect-test = \"1.4.0\"\n "}, {"sha": "d58b8dc6ad4a4473fde1991f3c0f19ad5716b00f", "filename": "src/librustdoc/docfs.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6cf2f470b0307fadc2edd7a02237915d8d7d12b0/src%2Flibrustdoc%2Fdocfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf2f470b0307fadc2edd7a02237915d8d7d12b0/src%2Flibrustdoc%2Fdocfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdocfs.rs?ref=6cf2f470b0307fadc2edd7a02237915d8d7d12b0", "patch": "@@ -2,18 +2,20 @@\n //!\n //! On Windows this indirects IO into threads to work around performance issues\n //! with Defender (and other similar virus scanners that do blocking operations).\n-//! On other platforms this is a thin shim to fs.\n //!\n //! Only calls needed to permit this workaround have been abstracted: thus\n //! fs::read is still done directly via the fs module; if in future rustdoc\n //! needs to read-after-write from a file, then it would be added to this\n //! abstraction.\n \n+use std::cmp::max;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n use std::string::ToString;\n use std::sync::mpsc::Sender;\n+use std::thread::available_parallelism;\n+use threadpool::ThreadPool;\n \n pub(crate) trait PathError {\n     fn new<S, P: AsRef<Path>>(e: S, path: P) -> Self\n@@ -24,11 +26,21 @@ pub(crate) trait PathError {\n pub(crate) struct DocFS {\n     sync_only: bool,\n     errors: Option<Sender<String>>,\n+    pool: ThreadPool,\n }\n \n impl DocFS {\n     pub(crate) fn new(errors: Sender<String>) -> DocFS {\n-        DocFS { sync_only: false, errors: Some(errors) }\n+        const MINIMUM_NB_THREADS: usize = 2;\n+        DocFS {\n+            sync_only: false,\n+            errors: Some(errors),\n+            pool: ThreadPool::new(\n+                available_parallelism()\n+                    .map(|nb| max(nb.get(), MINIMUM_NB_THREADS))\n+                    .unwrap_or(MINIMUM_NB_THREADS),\n+            ),\n+        }\n     }\n \n     pub(crate) fn set_sync_only(&mut self, sync_only: bool) {\n@@ -54,12 +66,11 @@ impl DocFS {\n     where\n         E: PathError,\n     {\n-        #[cfg(windows)]\n         if !self.sync_only {\n             // A possible future enhancement after more detailed profiling would\n             // be to create the file sync so errors are reported eagerly.\n             let sender = self.errors.clone().expect(\"can't write after closing\");\n-            rayon::spawn(move || {\n+            self.pool.execute(move || {\n                 fs::write(&path, contents).unwrap_or_else(|e| {\n                     sender.send(format!(\"\\\"{}\\\": {}\", path.display(), e)).unwrap_or_else(|_| {\n                         panic!(\"failed to send error on \\\"{}\\\"\", path.display())\n@@ -70,9 +81,12 @@ impl DocFS {\n             fs::write(&path, contents).map_err(|e| E::new(e, path))?;\n         }\n \n-        #[cfg(not(windows))]\n-        fs::write(&path, contents).map_err(|e| E::new(e, path))?;\n-\n         Ok(())\n     }\n }\n+\n+impl Drop for DocFS {\n+    fn drop(&mut self) {\n+        self.pool.join();\n+    }\n+}"}]}