{"sha": "67b9cd3fe136247e928d11daa12749d0488464c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3YjljZDNmZTEzNjI0N2U5MjhkMTFkYWExMjc0OWQwNDg4NDY0Yzk=", "commit": {"author": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-18T21:46:34Z"}, "committer": {"name": "Matthew Piziak", "email": "matthew.piziak@gmail.com", "date": "2016-08-23T15:05:24Z"}, "message": "improve documentation for `Fn*` traits\n\nI can think of a few things we may want to accomplish with the documentation of the `Fn`, `FnMut`, and `FnOnce` traits:\n- the relationship between these traits and the closures that implement them\n- examples of non-closure implementations\n- the relationship between these traits and Rust's ownership semantics\n\nadd module-level documentation for `Fn*` traits\n\nDescribe how `Fn*` traits, closure types, and ownership semantics are\nlinked, and provide examples of higher-level functions that take `Fn*`s.\n\nmore examples for `Fn*` traits\n\ncreate correct (though not yet elegant) examples for `FnMut` and `FnOnce`\n\nadd trait links to module-level documentation\n\nthird time's a charm!\n\nargument -> capture for trait documentation\n\nThis wording will need to be supported with better examples for\ncapturing eventually.\n\ncorrect `FnOnce` example\n\nI also fixed some of the trait wording here to make the concept of\ncapturing clearer; though that still needs more work.\n\nreplace `x + x` with `x * 2` for `fn double`", "tree": {"sha": "710acd43c73b07a8e87bb553b724e9796f46537f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/710acd43c73b07a8e87bb553b724e9796f46537f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67b9cd3fe136247e928d11daa12749d0488464c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67b9cd3fe136247e928d11daa12749d0488464c9", "html_url": "https://github.com/rust-lang/rust/commit/67b9cd3fe136247e928d11daa12749d0488464c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67b9cd3fe136247e928d11daa12749d0488464c9/comments", "author": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthew-piziak", "id": 6801001, "node_id": "MDQ6VXNlcjY4MDEwMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/6801001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthew-piziak", "html_url": "https://github.com/matthew-piziak", "followers_url": "https://api.github.com/users/matthew-piziak/followers", "following_url": "https://api.github.com/users/matthew-piziak/following{/other_user}", "gists_url": "https://api.github.com/users/matthew-piziak/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthew-piziak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthew-piziak/subscriptions", "organizations_url": "https://api.github.com/users/matthew-piziak/orgs", "repos_url": "https://api.github.com/users/matthew-piziak/repos", "events_url": "https://api.github.com/users/matthew-piziak/events{/privacy}", "received_events_url": "https://api.github.com/users/matthew-piziak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "490189634b656dcca9e41e6b52093569c03bd4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/490189634b656dcca9e41e6b52093569c03bd4df", "html_url": "https://github.com/rust-lang/rust/commit/490189634b656dcca9e41e6b52093569c03bd4df"}], "stats": {"total": 165, "additions": 165, "deletions": 0}, "files": [{"sha": "a8a557ce681112ffa0058eaabe67efe719f9980d", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 165, "deletions": 0, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/67b9cd3fe136247e928d11daa12749d0488464c9/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67b9cd3fe136247e928d11daa12749d0488464c9/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=67b9cd3fe136247e928d11daa12749d0488464c9", "patch": "@@ -68,6 +68,73 @@\n //! ```\n //!\n //! See the documentation for each trait for an example implementation.\n+//!\n+//! The [`Fn`], [`FnMut`], and [`FnOnce`] traits are implemented by types that can be\n+//! invoked like functions. Note that `Fn` takes `&self`, `FnMut` takes `&mut\n+//! self` and `FnOnce` takes `self`. These correspond to the three kinds of\n+//! methods that can be invoked on an instance: call-by-reference,\n+//! call-by-mutable-reference, and call-by-value. The most common use of these\n+//! traits is to act as bounds to higher-level functions that take functions or\n+//! closures as arguments.\n+//!\n+//! [`Fn`]: trait.Fn.html\n+//! [`FnMut`]: trait.FnMut.html\n+//! [`FnOnce`]: trait.FnOnce.html\n+//!\n+//! Taking a `Fn` as a parameter:\n+//!\n+//! ```rust\n+//! fn call_with_one<F>(func: F) -> usize\n+//!     where F: Fn(usize) -> usize\n+//! {\n+//!     func(1)\n+//! }\n+//!\n+//! let double = |x| x * 2;\n+//! assert_eq!(call_with_one(double), 2);\n+//! ```\n+//!\n+//! Taking a `FnMut` as a parameter:\n+//!\n+//! ```rust\n+//! fn do_twice<F>(mut func: F)\n+//!     where F: FnMut()\n+//! {\n+//!     func();\n+//!     func();\n+//! }\n+//!\n+//! let mut x: usize = 1;\n+//! {\n+//!     let add_two_to_x = || x += 2;\n+//!     do_twice(add_two_to_x);\n+//! }\n+//!\n+//! assert_eq!(x, 5);\n+//! ```\n+//!\n+//! Taking a `FnOnce` as a parameter:\n+//!\n+//! ```rust\n+//! fn consume_with_relish<F>(func: F)\n+//!     where F: FnOnce() -> String\n+//! {\n+//!     // `func` consumes its captured variables, so it cannot be run more\n+//!     // than once\n+//!     println!(\"Consumed: {}\", func());\n+//!\n+//!     println!(\"Delicious!\");\n+//!\n+//!     // Attempting to invoke `func()` again will throw a `use of moved\n+//!     // value` error for `func`\n+//! }\n+//!\n+//! let x = String::from(\"x\");\n+//! let consume_and_return_x = move || x;\n+//! consume_with_relish(consume_and_return_x);\n+//!\n+//! // `consume_and_return_x` can no longer be invoked at this point\n+//! ```\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -2027,6 +2094,35 @@ impl<'a, T: ?Sized> DerefMut for &'a mut T {\n }\n \n /// A version of the call operator that takes an immutable receiver.\n+///\n+/// # Examples\n+///\n+/// Closures automatically implement this trait, which allows them to be\n+/// invoked. Note, however, that `Fn` takes an immutable reference to any\n+/// captured variables. To take a mutable capture, implement [`FnMut`], and to\n+/// consume the capture, implement [`FnOnce`].\n+///\n+/// [`FnMut`]: trait.FnMut.html\n+/// [`FnOnce`]: trait.FnOnce.html\n+///\n+/// ```\n+/// let square = |x| x * x;\n+/// assert_eq!(square(5), 25);\n+/// ```\n+///\n+/// Closures can also be passed to higher-level functions through a `Fn`\n+/// parameter (or a `FnMut` or `FnOnce` parameter, which are supertraits of\n+/// `Fn`).\n+///\n+/// ```\n+/// fn call_with_one<F>(func: F) -> usize\n+///     where F: Fn(usize) -> usize {\n+///     func(1)\n+/// }\n+///\n+/// let double = |x| x * 2;\n+/// assert_eq!(call_with_one(double), 2);\n+/// ```\n #[lang = \"fn\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n@@ -2038,6 +2134,40 @@ pub trait Fn<Args> : FnMut<Args> {\n }\n \n /// A version of the call operator that takes a mutable receiver.\n+///\n+/// # Examples\n+///\n+/// Closures that mutably capture variables automatically implement this trait,\n+/// which allows them to be invoked.\n+///\n+/// ```\n+/// let mut x = 5;\n+/// {\n+///     let mut square_x = || x *= x;\n+///     square_x();\n+/// }\n+/// assert_eq!(x, 25);\n+/// ```\n+///\n+/// Closures can also be passed to higher-level functions through a `FnMut`\n+/// parameter (or a `FnOnce` parameter, which is a supertrait of `FnMut`).\n+///\n+/// ```\n+/// fn do_twice<F>(mut func: F)\n+///     where F: FnMut()\n+/// {\n+///     func();\n+///     func();\n+/// }\n+///\n+/// let mut x: usize = 1;\n+/// {\n+///     let add_two_to_x = || x += 2;\n+///     do_twice(add_two_to_x);\n+/// }\n+///\n+/// assert_eq!(x, 5);\n+/// ```\n #[lang = \"fn_mut\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]\n@@ -2049,6 +2179,41 @@ pub trait FnMut<Args> : FnOnce<Args> {\n }\n \n /// A version of the call operator that takes a by-value receiver.\n+///\n+/// # Examples\n+///\n+/// By-value closures automatically implement this trait, which allows them to\n+/// be invoked.\n+///\n+/// ```\n+/// let x = 5;\n+/// let square_x = move || x * x;\n+/// assert_eq!(square_x(), 25);\n+/// ```\n+///\n+/// By-value Closures can also be passed to higher-level functions through a\n+/// `FnOnce` parameter.\n+///\n+/// ```\n+/// fn consume_with_relish<F>(func: F)\n+///     where F: FnOnce() -> String\n+/// {\n+///     // `func` consumes its captured variables, so it cannot be run more\n+///     // than once\n+///     println!(\"Consumed: {}\", func());\n+///\n+///     println!(\"Delicious!\");\n+///\n+///     // Attempting to invoke `func()` again will throw a `use of moved\n+///     // value` error for `func`\n+/// }\n+///\n+/// let x = String::from(\"x\");\n+/// let consume_and_return_x = move || x;\n+/// consume_with_relish(consume_and_return_x);\n+///\n+/// // `consume_and_return_x` can no longer be invoked at this point\n+/// ```\n #[lang = \"fn_once\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_paren_sugar]"}]}