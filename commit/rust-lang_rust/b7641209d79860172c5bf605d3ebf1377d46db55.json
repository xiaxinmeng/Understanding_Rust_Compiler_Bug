{"sha": "b7641209d79860172c5bf605d3ebf1377d46db55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjQxMjA5ZDc5ODYwMTcyYzViZjYwNWQzZWJmMTM3N2Q0NmRiNTU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-18T15:36:11Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-18T15:36:11Z"}, "message": "add `const-evaluatable_checked` check back in", "tree": {"sha": "f19d14ec3fcd609ff341b7a3c463c09e91d1bc00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f19d14ec3fcd609ff341b7a3c463c09e91d1bc00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7641209d79860172c5bf605d3ebf1377d46db55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7641209d79860172c5bf605d3ebf1377d46db55", "html_url": "https://github.com/rust-lang/rust/commit/b7641209d79860172c5bf605d3ebf1377d46db55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7641209d79860172c5bf605d3ebf1377d46db55/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09e6254496e1b46a474757b8fcc66cc5981584c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/09e6254496e1b46a474757b8fcc66cc5981584c5", "html_url": "https://github.com/rust-lang/rust/commit/09e6254496e1b46a474757b8fcc66cc5981584c5"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "2642358dbc54c4a6b99b7f9ce6d47766bda88fea", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b7641209d79860172c5bf605d3ebf1377d46db55/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7641209d79860172c5bf605d3ebf1377d46db55/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=b7641209d79860172c5bf605d3ebf1377d46db55", "patch": "@@ -30,24 +30,24 @@ pub fn is_const_evaluatable<'cx, 'tcx>(\n     span: Span,\n ) -> Result<(), ErrorHandled> {\n     debug!(\"is_const_evaluatable({:?}, {:?})\", def, substs);\n-    // `AbstractConst::new` already returns `None` if `const_evaluatable_checked`\n-    // is not active, so we don't have to explicitly check for this here.\n-    if let Some(ct) = AbstractConst::new(infcx.tcx, def, substs) {\n-        for pred in param_env.caller_bounds() {\n-            match pred.skip_binders() {\n-                ty::PredicateAtom::ConstEvaluatable(b_def, b_substs) => {\n-                    debug!(\"is_const_evaluatable: caller_bound={:?}, {:?}\", b_def, b_substs);\n-                    if b_def == def && b_substs == substs {\n-                        debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n-                        return Ok(());\n-                    } else if AbstractConst::new(infcx.tcx, b_def, b_substs)\n-                        .map_or(false, |b_ct| try_unify(infcx.tcx, ct, b_ct))\n-                    {\n-                        debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n-                        return Ok(());\n+    if infcx.tcx.features().const_evaluatable_checked {\n+        if let Some(ct) = AbstractConst::new(infcx.tcx, def, substs) {\n+            for pred in param_env.caller_bounds() {\n+                match pred.skip_binders() {\n+                    ty::PredicateAtom::ConstEvaluatable(b_def, b_substs) => {\n+                        debug!(\"is_const_evaluatable: caller_bound={:?}, {:?}\", b_def, b_substs);\n+                        if b_def == def && b_substs == substs {\n+                            debug!(\"is_const_evaluatable: caller_bound ~~> ok\");\n+                            return Ok(());\n+                        } else if AbstractConst::new(infcx.tcx, b_def, b_substs)\n+                            .map_or(false, |b_ct| try_unify(infcx.tcx, ct, b_ct))\n+                        {\n+                            debug!(\"is_const_evaluatable: abstract_const ~~> ok\");\n+                            return Ok(());\n+                        }\n                     }\n+                    _ => {} // don't care\n                 }\n-                _ => {} // don't care\n             }\n         }\n     }"}]}