{"sha": "ad3010c449572d86bb668ed1dc53bac5df041374", "node_id": "C_kwDOAAsO6NoAKGFkMzAxMGM0NDk1NzJkODZiYjY2OGVkMWRjNTNiYWM1ZGYwNDEzNzQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T12:22:27Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-18T12:22:27Z"}, "message": "make atomic intrinsic impl details private", "tree": {"sha": "3601f15720c9e703706a8181b2f47135559a5464", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3601f15720c9e703706a8181b2f47135559a5464"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad3010c449572d86bb668ed1dc53bac5df041374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3010c449572d86bb668ed1dc53bac5df041374", "html_url": "https://github.com/rust-lang/rust/commit/ad3010c449572d86bb668ed1dc53bac5df041374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad3010c449572d86bb668ed1dc53bac5df041374/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c850ffe01a4d3d8eef74f2c5220a65ec8d167b72", "url": "https://api.github.com/repos/rust-lang/rust/commits/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72", "html_url": "https://github.com/rust-lang/rust/commit/c850ffe01a4d3d8eef74f2c5220a65ec8d167b72"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "b3d408a6dc07244945073a84014a923dd2d350e4", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ad3010c449572d86bb668ed1dc53bac5df041374/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3010c449572d86bb668ed1dc53bac5df041374/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ad3010c449572d86bb668ed1dc53bac5df041374", "patch": "@@ -62,7 +62,6 @@ pub use rustc_const_eval::interpret::{self, AllocMap, PlaceTy};\n pub use crate::shims::dlsym::{Dlsym, EvalContextExt as _};\n pub use crate::shims::env::{EnvVars, EvalContextExt as _};\n pub use crate::shims::foreign_items::EvalContextExt as _;\n-pub use crate::shims::intrinsics::atomic::EvalContextExt as _;\n pub use crate::shims::intrinsics::EvalContextExt as _;\n pub use crate::shims::os_str::EvalContextExt as _;\n pub use crate::shims::panic::{CatchUnwindData, EvalContextExt as _};"}, {"sha": "9ffa40f3335353d06dfdc9e5138adaa598dbc090", "filename": "src/shims/intrinsics/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ad3010c449572d86bb668ed1dc53bac5df041374/src%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3010c449572d86bb668ed1dc53bac5df041374/src%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fmod.rs?ref=ad3010c449572d86bb668ed1dc53bac5df041374", "patch": "@@ -1,4 +1,4 @@\n-pub mod atomic;\n+mod atomic;\n mod simd;\n \n use std::iter;\n@@ -11,6 +11,7 @@ use rustc_middle::{mir, ty, ty::FloatTy};\n use rustc_target::abi::Integer;\n \n use crate::*;\n+use atomic::EvalContextExt as _;\n use helpers::check_arg_count;\n use simd::EvalContextExt as _;\n "}, {"sha": "a81fdb5e9988896f0b32b0ee2a18a8c820ab26c5", "filename": "src/shims/unix/linux/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ad3010c449572d86bb668ed1dc53bac5df041374/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad3010c449572d86bb668ed1dc53bac5df041374/src%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=ad3010c449572d86bb668ed1dc53bac5df041374", "patch": "@@ -169,7 +169,7 @@ pub fn futex<'tcx>(\n             //\n             // Thankfully, preemptions cannot happen inside a Miri shim, so we do not need to\n             // do anything special to guarantee fence-load-comparison atomicity.\n-            this.atomic_fence(&[], AtomicFenceOrd::SeqCst)?;\n+            this.validate_atomic_fence(AtomicFenceOrd::SeqCst)?;\n             // Read an `i32` through the pointer, regardless of any wrapper types.\n             // It's not uncommon for `addr` to be passed as another type than `*mut i32`, such as `*const AtomicI32`.\n             let futex_val = this\n@@ -240,7 +240,7 @@ pub fn futex<'tcx>(\n             // Together with the SeqCst fence in futex_wait, this makes sure that futex_wait\n             // will see the latest value on addr which could be changed by our caller\n             // before doing the syscall.\n-            this.atomic_fence(&[], AtomicFenceOrd::SeqCst)?;\n+            this.validate_atomic_fence(AtomicFenceOrd::SeqCst)?;\n             let mut n = 0;\n             for _ in 0..val {\n                 if let Some(thread) = this.futex_wake(addr_usize, bitset) {"}]}