{"sha": "e04c0f42227b2c72aa8ea40d6aea873669428267", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNGMwZjQyMjI3YjJjNzJhYThlYTQwZDZhZWE4NzM2Njk0MjgyNjc=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-03T18:41:33Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-03T18:41:33Z"}, "message": "Fix panic on eager expansion", "tree": {"sha": "64c9f715cf4c9170617cfbd372ff9ed926957ccb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64c9f715cf4c9170617cfbd372ff9ed926957ccb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e04c0f42227b2c72aa8ea40d6aea873669428267", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e04c0f42227b2c72aa8ea40d6aea873669428267", "html_url": "https://github.com/rust-lang/rust/commit/e04c0f42227b2c72aa8ea40d6aea873669428267", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e04c0f42227b2c72aa8ea40d6aea873669428267/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "074474fe00a08d394cbdcac2a136bca825d93377", "url": "https://api.github.com/repos/rust-lang/rust/commits/074474fe00a08d394cbdcac2a136bca825d93377", "html_url": "https://github.com/rust-lang/rust/commit/074474fe00a08d394cbdcac2a136bca825d93377"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "1dba1179a6c63298a97b5f7931cda850ed0bbfff", "filename": "crates/ra_hir_expand/src/eager.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e04c0f42227b2c72aa8ea40d6aea873669428267/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04c0f42227b2c72aa8ea40d6aea873669428267/crates%2Fra_hir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Feager.rs?ref=e04c0f42227b2c72aa8ea40d6aea873669428267", "patch": "@@ -37,9 +37,25 @@ pub fn expand_eager_macro(\n ) -> Option<EagerMacroId> {\n     let args = macro_call.value.token_tree()?;\n     let parsed_args = mbe::ast_to_token_tree(&args)?.0;\n-    let parsed_args = mbe::token_tree_to_syntax_node(&parsed_args, FragmentKind::Expr).ok()?.0;\n-    let result = eager_macro_recur(db, macro_call.with_value(parsed_args.syntax_node()), resolver)?;\n \n+    // Note:\n+    // When `lazy_expand` is called, its *parent* file must be already exists.\n+    // Here we store an eager macro id for the argument expaned here\n+    // for that purpose.\n+    let arg_id: MacroCallId = db\n+        .intern_eager_expansion({\n+            EagerCallLoc {\n+                def,\n+                fragment: FragmentKind::Expr,\n+                subtree: Arc::new(parsed_args.clone()),\n+                file_id: macro_call.file_id,\n+            }\n+        })\n+        .into();\n+\n+    let parsed_args = mbe::token_tree_to_syntax_node(&parsed_args, FragmentKind::Expr).ok()?.0;\n+    let result =\n+        eager_macro_recur(db, InFile::new(arg_id.as_file(), parsed_args.syntax_node()), resolver)?;\n     let subtree = to_subtree(&result)?;\n \n     if let MacroDefKind::BuiltInEager(eager) = def.kind {"}, {"sha": "5d0efa0f40a61d3b7075fd3aff6e9698bdbb90ac", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e04c0f42227b2c72aa8ea40d6aea873669428267/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e04c0f42227b2c72aa8ea40d6aea873669428267/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=e04c0f42227b2c72aa8ea40d6aea873669428267", "patch": "@@ -438,6 +438,27 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn infer_builtin_macros_concat_with_lazy() {\n+    assert_snapshot!(\n+        infer(r#\"\n+macro_rules! hello {() => {\"hello\"}}\n+\n+#[rustc_builtin_macro]\n+macro_rules! concat {() => {}}\n+\n+fn main() {\n+    let x = concat!(hello!(), concat!(\"world\", \"!\"));\n+}\n+\"#),\n+        @r###\"\n+    ![0; 13) '\"helloworld!\"': &str\n+    [104; 161) '{     ...\")); }': ()\n+    [114; 115) 'x': &str\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_derive_clone_simple() {\n     let (db, pos) = TestDB::with_position("}]}