{"sha": "90f3aae2dead72d502ec4e25a659efb159186f19", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjNhYWUyZGVhZDcyZDUwMmVjNGUyNWE2NTllZmIxNTkxODZmMTk=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-26T17:58:08Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-26T17:58:08Z"}, "message": "Add fstat shim for OSX", "tree": {"sha": "d16296f5ae84517afb7c1935769c80b904816fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d16296f5ae84517afb7c1935769c80b904816fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f3aae2dead72d502ec4e25a659efb159186f19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f3aae2dead72d502ec4e25a659efb159186f19", "html_url": "https://github.com/rust-lang/rust/commit/90f3aae2dead72d502ec4e25a659efb159186f19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f3aae2dead72d502ec4e25a659efb159186f19/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d94b88ef9837569d0efeb4725d03475e2b816e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/d94b88ef9837569d0efeb4725d03475e2b816e03", "html_url": "https://github.com/rust-lang/rust/commit/d94b88ef9837569d0efeb4725d03475e2b816e03"}], "stats": {"total": 145, "additions": 89, "deletions": 56}, "files": [{"sha": "381b43c39ec2fc647f650619765c0e7367dcb2bd", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/90f3aae2dead72d502ec4e25a659efb159186f19/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f3aae2dead72d502ec4e25a659efb159186f19/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=90f3aae2dead72d502ec4e25a659efb159186f19", "patch": "@@ -509,6 +509,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"fstat$INODE64\" => {\n+                let result = this.fstat(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"clock_gettime\" => {\n                 let result = this.clock_gettime(args[0], args[1])?;\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;"}, {"sha": "d054dd47729b16a9b3165564dab8f829de052a5a", "filename": "src/shims/fs.rs", "status": "modified", "additions": 84, "deletions": 56, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/90f3aae2dead72d502ec4e25a659efb159186f19/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f3aae2dead72d502ec4e25a659efb159186f19/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=90f3aae2dead72d502ec4e25a659efb159186f19", "patch": "@@ -328,6 +328,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.stat_or_lstat(false, path_op, buf_op)\n     }\n \n+    fn fstat(\n+        &mut self,\n+        fd_op: OpTy<'tcx, Tag>,\n+        buf_op: OpTy<'tcx, Tag>,\n+    ) -> InterpResult<'tcx, i32> {\n+        let this = self.eval_context_mut();\n+\n+        this.check_no_isolation(\"fstat\")?;\n+\n+        if this.tcx.sess.target.target.target_os.to_lowercase() != \"macos\" {\n+            throw_unsup_format!(\"The `fstat` shim is only available for `macos` targets.\")\n+        }\n+\n+        let fd = this.read_scalar(fd_op)?.to_i32()?;\n+\n+        let metadata = match FileMetadata::from_fd(this, fd)? {\n+            Some(metadata) => metadata,\n+            None => return Ok(-1),\n+        };\n+        stat_write_buf(this, metadata, buf_op)\n+    }\n+\n     fn stat_or_lstat(\n         &mut self,\n         follow_symlink: bool,\n@@ -343,66 +365,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let path_scalar = this.read_scalar(path_op)?.not_undef()?;\n         let path: PathBuf = this.read_os_str_from_c_str(path_scalar)?.into();\n \n-        let buf = this.deref_operand(buf_op)?;\n-\n         let metadata = match FileMetadata::from_path(this, path, follow_symlink)? {\n             Some(metadata) => metadata,\n             None => return Ok(-1),\n         };\n-\n-        let mode: u16 = metadata.mode.to_u16()?;\n-\n-        let (access_sec, access_nsec) = metadata.accessed.unwrap_or((0, 0));\n-        let (created_sec, created_nsec) = metadata.created.unwrap_or((0, 0));\n-        let (modified_sec, modified_nsec) = metadata.modified.unwrap_or((0, 0));\n-\n-        let dev_t_layout = this.libc_ty_layout(\"dev_t\")?;\n-        let mode_t_layout = this.libc_ty_layout(\"mode_t\")?;\n-        let nlink_t_layout = this.libc_ty_layout(\"nlink_t\")?;\n-        let ino_t_layout = this.libc_ty_layout(\"ino_t\")?;\n-        let uid_t_layout = this.libc_ty_layout(\"uid_t\")?;\n-        let gid_t_layout = this.libc_ty_layout(\"gid_t\")?;\n-        let time_t_layout = this.libc_ty_layout(\"time_t\")?;\n-        let long_layout = this.libc_ty_layout(\"c_long\")?;\n-        let off_t_layout = this.libc_ty_layout(\"off_t\")?;\n-        let blkcnt_t_layout = this.libc_ty_layout(\"blkcnt_t\")?;\n-        let blksize_t_layout = this.libc_ty_layout(\"blksize_t\")?;\n-        let uint32_t_layout = this.libc_ty_layout(\"uint32_t\")?;\n-\n-        // We need to add 32 bits of padding after `st_rdev` if we are on a 64-bit platform.\n-        let pad_layout = if this.tcx.sess.target.ptr_width == 64 {\n-            uint32_t_layout\n-        } else {\n-            this.layout_of(this.tcx.mk_unit())?\n-        };\n-\n-        let imms = [\n-            immty_from_uint_checked(0u128, dev_t_layout)?, // st_dev\n-            immty_from_uint_checked(mode, mode_t_layout)?, // st_mode\n-            immty_from_uint_checked(0u128, nlink_t_layout)?, // st_nlink\n-            immty_from_uint_checked(0u128, ino_t_layout)?, // st_ino\n-            immty_from_uint_checked(0u128, uid_t_layout)?, // st_uid\n-            immty_from_uint_checked(0u128, gid_t_layout)?, // st_gid\n-            immty_from_uint_checked(0u128, dev_t_layout)?, // st_rdev\n-            immty_from_uint_checked(0u128, pad_layout)?, // padding for 64-bit targets\n-            immty_from_uint_checked(access_sec, time_t_layout)?, // st_atime\n-            immty_from_uint_checked(access_nsec, long_layout)?, // st_atime_nsec\n-            immty_from_uint_checked(modified_sec, time_t_layout)?, // st_mtime\n-            immty_from_uint_checked(modified_nsec, long_layout)?, // st_mtime_nsec\n-            immty_from_uint_checked(0u128, time_t_layout)?, // st_ctime\n-            immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n-            immty_from_uint_checked(created_sec, time_t_layout)?, // st_birthtime\n-            immty_from_uint_checked(created_nsec, long_layout)?, // st_birthtime_nsec\n-            immty_from_uint_checked(metadata.size, off_t_layout)?, // st_size\n-            immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n-            immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n-            immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags\n-            immty_from_uint_checked(0u128, uint32_t_layout)?, // st_gen\n-        ];\n-\n-        this.write_packed_immediates(&buf, &imms)?;\n-\n-        Ok(0)\n+        stat_write_buf(this, metadata, buf_op)\n     }\n \n     fn statx(\n@@ -663,3 +630,64 @@ impl FileMetadata {\n         Ok(Some(FileMetadata { mode, size, created, accessed, modified }))\n     }\n }\n+\n+fn stat_write_buf<'tcx, 'mir>(\n+    ecx: &mut MiriEvalContext<'mir, 'tcx>,\n+    metadata: FileMetadata,\n+    buf_op: OpTy<'tcx, Tag>,\n+) -> InterpResult<'tcx, i32> {\n+    let mode: u16 = metadata.mode.to_u16()?;\n+\n+    let (access_sec, access_nsec) = metadata.accessed.unwrap_or((0, 0));\n+    let (created_sec, created_nsec) = metadata.created.unwrap_or((0, 0));\n+    let (modified_sec, modified_nsec) = metadata.modified.unwrap_or((0, 0));\n+\n+    let dev_t_layout = ecx.libc_ty_layout(\"dev_t\")?;\n+    let mode_t_layout = ecx.libc_ty_layout(\"mode_t\")?;\n+    let nlink_t_layout = ecx.libc_ty_layout(\"nlink_t\")?;\n+    let ino_t_layout = ecx.libc_ty_layout(\"ino_t\")?;\n+    let uid_t_layout = ecx.libc_ty_layout(\"uid_t\")?;\n+    let gid_t_layout = ecx.libc_ty_layout(\"gid_t\")?;\n+    let time_t_layout = ecx.libc_ty_layout(\"time_t\")?;\n+    let long_layout = ecx.libc_ty_layout(\"c_long\")?;\n+    let off_t_layout = ecx.libc_ty_layout(\"off_t\")?;\n+    let blkcnt_t_layout = ecx.libc_ty_layout(\"blkcnt_t\")?;\n+    let blksize_t_layout = ecx.libc_ty_layout(\"blksize_t\")?;\n+    let uint32_t_layout = ecx.libc_ty_layout(\"uint32_t\")?;\n+\n+    // We need to add 32 bits of padding after `st_rdev` if we are on a 64-bit platform.\n+    let pad_layout = if ecx.tcx.sess.target.ptr_width == 64 {\n+        uint32_t_layout\n+    } else {\n+        ecx.layout_of(ecx.tcx.mk_unit())?\n+    };\n+\n+    let imms = [\n+        immty_from_uint_checked(0u128, dev_t_layout)?, // st_dev\n+        immty_from_uint_checked(mode, mode_t_layout)?, // st_mode\n+        immty_from_uint_checked(0u128, nlink_t_layout)?, // st_nlink\n+        immty_from_uint_checked(0u128, ino_t_layout)?, // st_ino\n+        immty_from_uint_checked(0u128, uid_t_layout)?, // st_uid\n+        immty_from_uint_checked(0u128, gid_t_layout)?, // st_gid\n+        immty_from_uint_checked(0u128, dev_t_layout)?, // st_rdev\n+        immty_from_uint_checked(0u128, pad_layout)?, // padding for 64-bit targets\n+        immty_from_uint_checked(access_sec, time_t_layout)?, // st_atime\n+        immty_from_uint_checked(access_nsec, long_layout)?, // st_atime_nsec\n+        immty_from_uint_checked(modified_sec, time_t_layout)?, // st_mtime\n+        immty_from_uint_checked(modified_nsec, long_layout)?, // st_mtime_nsec\n+        immty_from_uint_checked(0u128, time_t_layout)?, // st_ctime\n+        immty_from_uint_checked(0u128, long_layout)?, // st_ctime_nsec\n+        immty_from_uint_checked(created_sec, time_t_layout)?, // st_birthtime\n+        immty_from_uint_checked(created_nsec, long_layout)?, // st_birthtime_nsec\n+        immty_from_uint_checked(metadata.size, off_t_layout)?, // st_size\n+        immty_from_uint_checked(0u128, blkcnt_t_layout)?, // st_blocks\n+        immty_from_uint_checked(0u128, blksize_t_layout)?, // st_blksize\n+        immty_from_uint_checked(0u128, uint32_t_layout)?, // st_flags\n+        immty_from_uint_checked(0u128, uint32_t_layout)?, // st_gen\n+    ];\n+\n+    let buf = ecx.deref_operand(buf_op)?;\n+    ecx.write_packed_immediates(&buf, &imms)?;\n+\n+    Ok(0)\n+}"}]}