{"sha": "47619c0dc7f2048dbd5287a57182da50de0f4f1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NjE5YzBkYzdmMjA0OGRiZDUyODdhNTcxODJkYTUwZGUwZjRmMWE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-07-23T16:34:04Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-05T14:54:49Z"}, "message": "Turn the duplicate feature lint into an error", "tree": {"sha": "394d3e45537af8302eb7ef784e3cafa3b40c23fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/394d3e45537af8302eb7ef784e3cafa3b40c23fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47619c0dc7f2048dbd5287a57182da50de0f4f1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47619c0dc7f2048dbd5287a57182da50de0f4f1a", "html_url": "https://github.com/rust-lang/rust/commit/47619c0dc7f2048dbd5287a57182da50de0f4f1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47619c0dc7f2048dbd5287a57182da50de0f4f1a/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81b95f305e76c4173121aabb08af15e2d22aaed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81b95f305e76c4173121aabb08af15e2d22aaed", "html_url": "https://github.com/rust-lang/rust/commit/c81b95f305e76c4173121aabb08af15e2d22aaed"}], "stats": {"total": 94, "additions": 46, "deletions": 48}, "files": [{"sha": "b78cfc9499f398be5ed1e380d6dc3341684e9b24", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=47619c0dc7f2048dbd5287a57182da50de0f4f1a", "patch": "@@ -1918,6 +1918,19 @@ fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {\n ```\n \"##,\n \n+E0636: r##\"\n+A `#![feature]` attribute was declared multiple times.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0636\n+#![allow(stable_features)]\n+#![feature(rust1)]\n+#![feature(rust1)] // error: the feature `rust1` has already been declared\n+```\n+\n+\"##,\n+\n E0644: r##\"\n A closure or generator was constructed that references its own type.\n "}, {"sha": "6536ab6ea73b3dbcbd3981b45130209bd5f5a302", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=47619c0dc7f2048dbd5287a57182da50de0f4f1a", "patch": "@@ -111,12 +111,6 @@ declare_lint! {\n     \"unknown features found in crate-level #[feature] directives\"\n }\n \n-declare_lint! {\n-    pub DUPLICATE_FEATURES,\n-    Deny,\n-    \"duplicate features found in crate-level #[feature] directives\"\n-}\n-\n declare_lint! {\n     pub STABLE_FEATURES,\n     Warn,\n@@ -375,7 +369,6 @@ impl LintPass for HardwiredLints {\n             WARNINGS,\n             UNUSED_FEATURES,\n             UNKNOWN_FEATURES,\n-            DUPLICATE_FEATURES,\n             STABLE_FEATURES,\n             UNKNOWN_CRATE_TYPES,\n             TRIVIAL_CASTS,"}, {"sha": "bbf03801fdb319e4419e7b76b6c65bfc87afafeb", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 24, "deletions": 25, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=47619c0dc7f2048dbd5287a57182da50de0f4f1a", "patch": "@@ -18,7 +18,7 @@ use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n-use session::DiagnosticMessageId;\n+use session::{DiagnosticMessageId, Session};\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, MultiSpan};\n use syntax::ast;\n@@ -816,33 +816,24 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n \n     let declared_lang_features = &tcx.features().declared_lang_features;\n     let mut lang_features = FxHashSet();\n-    for &(ref feature, span, since) in declared_lang_features {\n+    for &(feature, span, since) in declared_lang_features {\n         if let Some(since) = since {\n             // Warn if the user has enabled an already-stable lang feature.\n-            tcx.lint_node(lint::builtin::STABLE_FEATURES,\n-                        ast::CRATE_NODE_ID,\n-                        span,\n-                        &format_stable_since_msg(*feature, since));\n+            unnecessary_stable_feature_lint(tcx, span, feature, since);\n         }\n         if lang_features.contains(&feature) {\n             // Warn if the user enables a lang feature multiple times.\n-            tcx.lint_node(lint::builtin::DUPLICATE_FEATURES,\n-                          ast::CRATE_NODE_ID,\n-                          span,\n-                          &format!(\"duplicate `{}` feature attribute\", feature));\n+            duplicate_feature_err(tcx.sess, span, feature);\n         }\n         lang_features.insert(feature);\n     }\n \n     let declared_lib_features = &tcx.features().declared_lib_features;\n     let mut remaining_lib_features = FxHashMap();\n     for (feature, span) in declared_lib_features {\n-        // Warn if the user enables a lib feature multiple times.\n         if remaining_lib_features.contains_key(&feature) {\n-            tcx.lint_node(lint::builtin::DUPLICATE_FEATURES,\n-                          ast::CRATE_NODE_ID,\n-                          *span,\n-                          &format!(\"duplicate `{}` feature attribute\", feature));\n+            // Warn if the user enables a lib feature multiple times.\n+            duplicate_feature_err(tcx.sess, *span, *feature);\n         }\n         remaining_lib_features.insert(feature, span.clone());\n     }\n@@ -851,16 +842,12 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     remaining_lib_features.remove(&Symbol::intern(\"libc\"));\n \n     for (feature, stable) in tcx.lib_features().iter() {\n-        // Warn if the user has enabled an already-stable lib feature.\n         if let Some(since) = stable {\n             if let Some(span) = remaining_lib_features.get(&feature) {\n-                tcx.lint_node(lint::builtin::STABLE_FEATURES,\n-                              ast::CRATE_NODE_ID,\n-                              *span,\n-                              &format_stable_since_msg(feature, since));\n+                // Warn if the user has enabled an already-stable lib feature.\n+                unnecessary_stable_feature_lint(tcx, *span, feature, since);\n             }\n         }\n-\n         remaining_lib_features.remove(&feature);\n     }\n \n@@ -875,8 +862,20 @@ pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // don't lint about unused features. We should reenable this one day!\n }\n \n-fn format_stable_since_msg(feature: Symbol, since: Symbol) -> String {\n-    // \"this feature has been stable since {}. Attribute no longer needed\"\n-    format!(\"the feature `{}` has been stable since {} and no longer requires \\\n-             an attribute to enable\", feature, since)\n+fn unnecessary_stable_feature_lint<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    span: Span,\n+    feature: Symbol,\n+    since: Symbol\n+) {\n+    tcx.lint_node(lint::builtin::STABLE_FEATURES,\n+        ast::CRATE_NODE_ID,\n+        span,\n+        &format!(\"the feature `{}` has been stable since {} and no longer requires \\\n+                  an attribute to enable\", feature, since));\n+}\n+\n+fn duplicate_feature_err(sess: &Session, span: Span, feature: Symbol) {\n+    struct_span_err!(sess, span, E0636, \"the feature `{}` has already been declared\", feature)\n+        .emit();\n }"}, {"sha": "396e5e869f30738c9e1acda49eb08ea215b78b8c", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=47619c0dc7f2048dbd5287a57182da50de0f4f1a", "patch": "@@ -189,7 +189,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                     UNUSED_EXTERN_CRATES,\n                     UNUSED_FEATURES,\n                     UNKNOWN_FEATURES,\n-                    DUPLICATE_FEATURES,\n                     UNUSED_LABELS,\n                     UNUSED_PARENS);\n "}, {"sha": "163a28772a59eaf7f3e145a49e3808a28a98af91", "filename": "src/test/ui/feature-gate/duplicate-features.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Ftest%2Fui%2Ffeature-gate%2Fduplicate-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Ftest%2Fui%2Ffeature-gate%2Fduplicate-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fduplicate-features.rs?ref=47619c0dc7f2048dbd5287a57182da50de0f4f1a", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n #![allow(stable_features)]\n-#![deny(duplicate_features)]\n \n #![feature(rust1)]\n-#![feature(rust1)] //~ ERROR duplicate `rust1` feature attribute\n+#![feature(rust1)] //~ ERROR the feature `rust1` has already been declared\n \n #![feature(if_let)]\n-#![feature(if_let)] //~ ERROR duplicate `if_let` feature attribute\n+#![feature(if_let)] //~ ERROR the feature `if_let` has already been declared\n \n fn main() {}"}, {"sha": "d55297bdd0e7be2fcba4e1fc442ef79248c90fc7", "filename": "src/test/ui/feature-gate/duplicate-features.stderr", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Ftest%2Fui%2Ffeature-gate%2Fduplicate-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47619c0dc7f2048dbd5287a57182da50de0f4f1a/src%2Ftest%2Fui%2Ffeature-gate%2Fduplicate-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fduplicate-features.stderr?ref=47619c0dc7f2048dbd5287a57182da50de0f4f1a", "patch": "@@ -1,20 +1,15 @@\n-error: duplicate `if_let` feature attribute\n-  --> $DIR/duplicate-features.rs:18:12\n+error[E0636]: the feature `if_let` has already been declared\n+  --> $DIR/duplicate-features.rs:17:12\n    |\n-LL | #![feature(if_let)] //~ ERROR duplicate `if_let` feature attribute\n+LL | #![feature(if_let)] //~ ERROR the feature `if_let` has already been declared\n    |            ^^^^^^\n-   |\n-note: lint level defined here\n-  --> $DIR/duplicate-features.rs:12:9\n-   |\n-LL | #![deny(duplicate_features)]\n-   |         ^^^^^^^^^^^^^^^^^^\n \n-error: duplicate `rust1` feature attribute\n-  --> $DIR/duplicate-features.rs:15:12\n+error[E0636]: the feature `rust1` has already been declared\n+  --> $DIR/duplicate-features.rs:14:12\n    |\n-LL | #![feature(rust1)] //~ ERROR duplicate `rust1` feature attribute\n+LL | #![feature(rust1)] //~ ERROR the feature `rust1` has already been declared\n    |            ^^^^^\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0636`."}]}