{"sha": "fb753cced827a6e54defc1895e18e5dfbd95fbb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiNzUzY2NlZDgyN2E2ZTU0ZGVmYzE4OTVlMThlNWRmYmQ5NWZiYjU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-27T16:41:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:27:58Z"}, "message": "Remove hir::Expr::attrs.", "tree": {"sha": "420b0861e00a323f72eca3e09d0f8903f948be55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/420b0861e00a323f72eca3e09d0f8903f948be55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb753cced827a6e54defc1895e18e5dfbd95fbb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb753cced827a6e54defc1895e18e5dfbd95fbb5", "html_url": "https://github.com/rust-lang/rust/commit/fb753cced827a6e54defc1895e18e5dfbd95fbb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb753cced827a6e54defc1895e18e5dfbd95fbb5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9", "html_url": "https://github.com/rust-lang/rust/commit/c701872a6cd9c3c5b0ef766dc237ff93bc3cc8d9"}], "stats": {"total": 55, "additions": 23, "deletions": 32}, "files": [{"sha": "18ac884c7cb5536adeeaa81615159f3282e136ee", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=fb753cced827a6e54defc1895e18e5dfbd95fbb5", "patch": "@@ -258,10 +258,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         ex.span = e.span;\n                     }\n                     // Merge attributes into the inner expression.\n-                    let mut attrs: Vec<_> = e.attrs.iter().map(|a| self.lower_attr(a)).collect();\n-                    attrs.extend::<Vec<_>>(ex.attrs.into());\n-                    self.attrs[ex.hir_id] = &*self.arena.alloc_from_iter(attrs.iter().cloned());\n-                    ex.attrs = attrs.into();\n+                    self.attrs[ex.hir_id] = &*self.arena.alloc_from_iter(\n+                        e.attrs\n+                            .iter()\n+                            .map(|a| self.lower_attr(a))\n+                            .chain(self.attrs[ex.hir_id].iter().cloned()),\n+                    );\n                     return ex;\n                 }\n \n@@ -274,9 +276,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             };\n \n             let hir_id = self.lower_node_id(e.id);\n-            let attrs = e.attrs.iter().map(|a| self.lower_attr(a)).collect::<Vec<_>>();\n-            self.attrs.push_sparse(hir_id, &*self.arena.alloc_from_iter(attrs.iter().cloned()));\n-            hir::Expr { hir_id, kind, span: e.span, attrs: attrs.into() }\n+            self.lower_attrs(hir_id, &e.attrs);\n+            hir::Expr { hir_id, kind, span: e.span }\n         })\n     }\n \n@@ -684,12 +685,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             span,\n             Some(hir::Movability::Static),\n         );\n-        let generator = hir::Expr {\n-            hir_id: self.lower_node_id(closure_node_id),\n-            kind: generator_kind,\n-            span,\n-            attrs: ThinVec::new(),\n-        };\n+        let generator =\n+            hir::Expr { hir_id: self.lower_node_id(closure_node_id), kind: generator_kind, span };\n \n         // `future::from_generator`:\n         let unstable_span =\n@@ -843,7 +840,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             hir_id: loop_hir_id,\n             kind: hir::ExprKind::Loop(loop_block, None, hir::LoopSource::Loop, span),\n             span,\n-            attrs: ThinVec::new(),\n         });\n \n         // mut pinned => loop { ... }\n@@ -1813,12 +1809,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             hir::LoopSource::ForLoop,\n             e.span.with_hi(orig_head_span.hi()),\n         );\n-        let loop_expr = self.arena.alloc(hir::Expr {\n-            hir_id: self.lower_node_id(e.id),\n-            kind,\n-            span: e.span,\n-            attrs: ThinVec::new(),\n-        });\n+        let loop_expr =\n+            self.arena.alloc(hir::Expr { hir_id: self.lower_node_id(e.id), kind, span: e.span });\n \n         // `mut iter => { ... }`\n         let iter_arm = self.arm(iter_pat, loop_expr);\n@@ -2154,8 +2146,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         attrs: AttrVec,\n     ) -> hir::Expr<'hir> {\n         let hir_id = self.next_id();\n-        self.attrs.push_sparse(hir_id, &*self.arena.alloc_from_iter(attrs.iter().cloned()));\n-        hir::Expr { hir_id, kind, span, attrs }\n+        self.lower_attrs(hir_id, &attrs);\n+        hir::Expr { hir_id, kind, span }\n     }\n \n     fn field(&mut self, ident: Ident, expr: &'hir hir::Expr<'hir>, span: Span) -> hir::Field<'hir> {"}, {"sha": "10ee3f156ed3f1c52571f956bac461bd67ad9fc9", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fb753cced827a6e54defc1895e18e5dfbd95fbb5", "patch": "@@ -979,7 +979,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         ret\n     }\n \n-    fn lower_attr(&mut self, attr: &Attribute) -> Attribute {\n+    fn lower_attr(&self, attr: &Attribute) -> Attribute {\n         // Note that we explicitly do not walk the path. Since we don't really\n         // lower attributes (we use the AST version) there is nowhere to keep\n         // the `HirId`s. We don't actually need HIR version of attributes anyway.\n@@ -999,7 +999,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         Attribute { kind, id: attr.id, style: attr.style, span: attr.span }\n     }\n \n-    fn lower_mac_args(&mut self, args: &MacArgs) -> MacArgs {\n+    fn lower_mac_args(&self, args: &MacArgs) -> MacArgs {\n         match *args {\n             MacArgs::Empty => MacArgs::Empty,\n             MacArgs::Delimited(dspan, delim, ref tokens) => {"}, {"sha": "ff1cee1fc2097573bf6028d84f8038fda98afaf4", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=fb753cced827a6e54defc1895e18e5dfbd95fbb5", "patch": "@@ -6,7 +6,7 @@ use crate::{itemlikevisit, HirIdVec, LangItem};\n \n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_ast::{self as ast, CrateSugar, LlvmAsmDialect};\n-use rustc_ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n+use rustc_ast::{Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use rustc_ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::{CaptureBy, Movability, Mutability};\n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n@@ -1446,7 +1446,6 @@ pub struct AnonConst {\n pub struct Expr<'hir> {\n     pub hir_id: HirId,\n     pub kind: ExprKind<'hir>,\n-    pub attrs: AttrVec,\n     pub span: Span,\n }\n \n@@ -3071,7 +3070,7 @@ impl<'hir> Node<'hir> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n mod size_asserts {\n     rustc_data_structures::static_assert_size!(super::Block<'static>, 48);\n-    rustc_data_structures::static_assert_size!(super::Expr<'static>, 72);\n+    rustc_data_structures::static_assert_size!(super::Expr<'static>, 64);\n     rustc_data_structures::static_assert_size!(super::Pat<'static>, 88);\n     rustc_data_structures::static_assert_size!(super::QPath<'static>, 24);\n     rustc_data_structures::static_assert_size!(super::Ty<'static>, 72);"}, {"sha": "4da714aff31af12d91d957ac986ff6fd9cb58ca5", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=fb753cced827a6e54defc1895e18e5dfbd95fbb5", "patch": "@@ -1334,7 +1334,7 @@ impl<'a> State<'a> {\n \n     pub fn print_expr(&mut self, expr: &hir::Expr<'_>) {\n         self.maybe_print_comment(expr.span.lo());\n-        self.print_outer_attributes(&expr.attrs);\n+        self.print_outer_attributes(self.attrs(expr.hir_id));\n         self.ibox(INDENT_UNIT);\n         self.ann.pre(self, AnnNode::Expr(expr));\n         match expr.kind {"}, {"sha": "abf56832329b2a6c6a3380eaa1998b4ef90288a2", "filename": "compiler/rustc_middle/src/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb753cced827a6e54defc1895e18e5dfbd95fbb5/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fich%2Fimpls_hir.rs?ref=fb753cced827a6e54defc1895e18e5dfbd95fbb5", "patch": "@@ -66,11 +66,10 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n \n     fn hash_hir_expr(&mut self, expr: &hir::Expr<'_>, hasher: &mut StableHasher) {\n         self.while_hashing_hir_bodies(true, |hcx| {\n-            let hir::Expr { hir_id: _, ref span, ref kind, ref attrs } = *expr;\n+            let hir::Expr { hir_id: _, ref span, ref kind } = *expr;\n \n             span.hash_stable(hcx, hasher);\n             kind.hash_stable(hcx, hasher);\n-            attrs.hash_stable(hcx, hasher);\n         })\n     }\n "}, {"sha": "40c0f1f45895ba0af5ed1341e12d21265bc6f637", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fb753cced827a6e54defc1895e18e5dfbd95fbb5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb753cced827a6e54defc1895e18e5dfbd95fbb5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=fb753cced827a6e54defc1895e18e5dfbd95fbb5", "patch": "@@ -177,7 +177,8 @@ fn check_final_expr<'tcx>(\n         // simple return is always \"bad\"\n         ExprKind::Ret(ref inner) => {\n             // allow `#[cfg(a)] return a; #[cfg(b)] return b;`\n-            if !expr.attrs.iter().any(attr_is_cfg) {\n+            let attrs = cx.tcx.hir().attrs(expr.hir_id);\n+            if !attrs.iter().any(attr_is_cfg) {\n                 let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n                 if !borrows {\n                     emit_return_lint("}, {"sha": "9e3973e1d51fcc1b76128a5836236b23b41d6fb7", "filename": "src/tools/clippy/clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb753cced827a6e54defc1895e18e5dfbd95fbb5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb753cced827a6e54defc1895e18e5dfbd95fbb5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=fb753cced827a6e54defc1895e18e5dfbd95fbb5", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for DeepCodeInspector {\n     //\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if !has_attr(cx.sess(), &expr.attrs) {\n+        if !has_attr(cx.sess(), cx.tcx.hir().attrs(expr.hir_id)) {\n             return;\n         }\n         print_expr(cx, expr, 0);"}]}