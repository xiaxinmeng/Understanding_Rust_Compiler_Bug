{"sha": "9684557c8f1b9fd55cb6fcc27533044022b0ed22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2ODQ1NTdjOGYxYjlmZDU1Y2I2ZmNjMjc1MzMwNDQwMjJiMGVkMjI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-12T14:38:35Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-12T14:40:34Z"}, "message": "Small cleanups\n\n- Use a tuple struct instead of a single field\n- Enforce calling `source_callsite()` by making the inner span private\n- Rename `empty` to `dummy`", "tree": {"sha": "6cb36f325697f5969c6cee21f13e8b02e4d7c372", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb36f325697f5969c6cee21f13e8b02e4d7c372"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9684557c8f1b9fd55cb6fcc27533044022b0ed22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9684557c8f1b9fd55cb6fcc27533044022b0ed22", "html_url": "https://github.com/rust-lang/rust/commit/9684557c8f1b9fd55cb6fcc27533044022b0ed22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9684557c8f1b9fd55cb6fcc27533044022b0ed22/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e574fb39ad99a7ffbfd7f2d52603d890dfa2084", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e574fb39ad99a7ffbfd7f2d52603d890dfa2084", "html_url": "https://github.com/rust-lang/rust/commit/0e574fb39ad99a7ffbfd7f2d52603d890dfa2084"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "7a61a169c2bd2e1922441d441907cadb92eae5de", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9684557c8f1b9fd55cb6fcc27533044022b0ed22/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684557c8f1b9fd55cb6fcc27533044022b0ed22/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=9684557c8f1b9fd55cb6fcc27533044022b0ed22", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 };\n \n                 Some(Item {\n-                    source: Span::empty(),\n+                    source: Span::dummy(),\n                     name: None,\n                     attrs: Default::default(),\n                     visibility: Inherited,"}, {"sha": "42778867bf80ca20c09dce86222c8c30fc4dd186", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9684557c8f1b9fd55cb6fcc27533044022b0ed22/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684557c8f1b9fd55cb6fcc27533044022b0ed22/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9684557c8f1b9fd55cb6fcc27533044022b0ed22", "patch": "@@ -479,7 +479,7 @@ fn build_module(cx: &DocContext<'_>, did: DefId, visited: &mut FxHashSet<DefId>)\n                     items.push(clean::Item {\n                         name: None,\n                         attrs: clean::Attributes::default(),\n-                        source: clean::Span::empty(),\n+                        source: clean::Span::dummy(),\n                         def_id: DefId::local(CRATE_DEF_INDEX),\n                         visibility: clean::Public,\n                         stability: None,"}, {"sha": "1a63a5092ca0730a70f519642d761de95c9d734e", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9684557c8f1b9fd55cb6fcc27533044022b0ed22/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684557c8f1b9fd55cb6fcc27533044022b0ed22/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9684557c8f1b9fd55cb6fcc27533044022b0ed22", "patch": "@@ -1882,10 +1882,7 @@ impl Clean<VariantKind> for hir::VariantData<'_> {\n \n impl Clean<Span> for rustc_span::Span {\n     fn clean(&self, _cx: &DocContext<'_>) -> Span {\n-        // Get the macro invocation instead of the definition,\n-        // in case the span is result of a macro expansion.\n-        // (See rust-lang/rust#39726)\n-        Span { original: self.source_callsite() }\n+        Span::from_rustc_span(*self)\n     }\n }\n "}, {"sha": "0228d63ac00e6b904638a70231e5994e3f7b97ac", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9684557c8f1b9fd55cb6fcc27533044022b0ed22/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9684557c8f1b9fd55cb6fcc27533044022b0ed22/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=9684557c8f1b9fd55cb6fcc27533044022b0ed22", "patch": "@@ -1610,31 +1610,36 @@ crate enum VariantKind {\n     Struct(VariantStruct),\n }\n \n-/// Small wrapper around `rustc_span::Span` that adds helper methods.\n+/// Small wrapper around `rustc_span::Span` that adds helper methods and enforces calling `source_callsite`.\n #[derive(Clone, Debug)]\n-crate struct Span {\n-    crate original: rustc_span::Span,\n-}\n+crate struct Span(rustc_span::Span);\n \n impl Span {\n-    crate fn empty() -> Self {\n-        Self { original: rustc_span::DUMMY_SP }\n+    crate fn from_rustc_span(sp: rustc_span::Span) -> Self {\n+        // Get the macro invocation instead of the definition,\n+        // in case the span is result of a macro expansion.\n+        // (See rust-lang/rust#39726)\n+        Self(sp.source_callsite())\n+    }\n+\n+    crate fn dummy() -> Self {\n+        Self(rustc_span::DUMMY_SP)\n     }\n \n     crate fn span(&self) -> rustc_span::Span {\n-        self.original\n+        self.0\n     }\n \n     crate fn filename(&self, sess: &Session) -> FileName {\n-        sess.source_map().span_to_filename(self.original)\n+        sess.source_map().span_to_filename(self.0)\n     }\n \n     crate fn lo(&self, sess: &Session) -> Loc {\n-        sess.source_map().lookup_char_pos(self.original.lo())\n+        sess.source_map().lookup_char_pos(self.0.lo())\n     }\n \n     crate fn hi(&self, sess: &Session) -> Loc {\n-        sess.source_map().lookup_char_pos(self.original.hi())\n+        sess.source_map().lookup_char_pos(self.0.hi())\n     }\n \n     crate fn cnum(&self, sess: &Session) -> CrateNum {"}]}