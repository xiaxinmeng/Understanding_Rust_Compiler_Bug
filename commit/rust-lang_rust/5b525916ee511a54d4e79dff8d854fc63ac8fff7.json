{"sha": "5b525916ee511a54d4e79dff8d854fc63ac8fff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNTI1OTE2ZWU1MTFhNTRkNGU3OWRmZjhkODU0ZmM2M2FjOGZmZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-09T23:08:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-09T23:08:51Z"}, "message": "Auto merge of #51899 - gnzlbg:llvm501, r=alexcrichton\n\nbump minimum LLVM version to 5.0\n\nCloses #51878 .\n\nr? @alexcrichton\n\n--\n\ncc @cuviper @infinity0", "tree": {"sha": "053870432a264fab277902d0f9ec05b5f45a4472", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/053870432a264fab277902d0f9ec05b5f45a4472"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b525916ee511a54d4e79dff8d854fc63ac8fff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b525916ee511a54d4e79dff8d854fc63ac8fff7", "html_url": "https://github.com/rust-lang/rust/commit/5b525916ee511a54d4e79dff8d854fc63ac8fff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b525916ee511a54d4e79dff8d854fc63ac8fff7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bd8458c92f7166b827e4eb5cf5effba8c0e615d", "html_url": "https://github.com/rust-lang/rust/commit/9bd8458c92f7166b827e4eb5cf5effba8c0e615d"}, {"sha": "3b36ce64a55c32886a752e0935a4f5068d5f1678", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b36ce64a55c32886a752e0935a4f5068d5f1678", "html_url": "https://github.com/rust-lang/rust/commit/3b36ce64a55c32886a752e0935a4f5068d5f1678"}], "stats": {"total": 118, "additions": 17, "deletions": 101}, "files": [{"sha": "2cf10d76098011b87ecfc17d49f45339195bd91f", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -12,7 +12,7 @@ matrix:\n   fast_finish: true\n   include:\n     # Images used in testing PR and try-build should be run first.\n-    - env: IMAGE=x86_64-gnu-llvm-3.9 RUST_BACKTRACE=1\n+    - env: IMAGE=x86_64-gnu-llvm-5.0 RUST_BACKTRACE=1\n       if: type = pull_request OR branch = auto\n \n     - env: IMAGE=dist-x86_64-linux DEPLOY=1"}, {"sha": "264acfacee6b0f45eaa87a8969f5f93fb6d0c86c", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -256,12 +256,12 @@ fn check_llvm_version(builder: &Builder, llvm_config: &Path) {\n     let version = output(cmd.arg(\"--version\"));\n     let mut parts = version.split('.').take(2)\n         .filter_map(|s| s.parse::<u32>().ok());\n-    if let (Some(major), Some(minor)) = (parts.next(), parts.next()) {\n-        if major > 3 || (major == 3 && minor >= 9) {\n+    if let (Some(major), Some(_minor)) = (parts.next(), parts.next()) {\n+        if major >= 5 {\n             return\n         }\n     }\n-    panic!(\"\\n\\nbad LLVM version: {}, need >=3.9\\n\\n\", version)\n+    panic!(\"\\n\\nbad LLVM version: {}, need >=5.0\\n\\n\", version)\n }\n \n fn configure_cmake(builder: &Builder,"}, {"sha": "4f90c5097260ce153a595fe4151733934d26de2a", "filename": "src/ci/docker/x86_64-gnu-llvm-5.0/Dockerfile", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-5.0%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-5.0%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-llvm-5.0%2FDockerfile?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -11,7 +11,7 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n   cmake \\\n   sudo \\\n   gdb \\\n-  llvm-3.9-tools \\\n+  llvm-5.0-tools \\\n   libedit-dev \\\n   zlib1g-dev \\\n   xz-utils\n@@ -22,6 +22,6 @@ RUN sh /scripts/sccache.sh\n # using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\\n       --build=x86_64-unknown-linux-gnu \\\n-      --llvm-root=/usr/lib/llvm-3.9 \\\n+      --llvm-root=/usr/lib/llvm-5.0 \\\n       --enable-llvm-link-shared\n ENV RUST_CHECK_TARGET check", "previous_filename": "src/ci/docker/x86_64-gnu-llvm-3.9/Dockerfile"}, {"sha": "47c13919e6e01c60d3c3419994f6339d7758a93d", "filename": "src/librustc_codegen_llvm/abi.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Flibrustc_codegen_llvm%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Flibrustc_codegen_llvm%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fabi.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -666,11 +666,7 @@ impl<'a, 'tcx> FnTypeExt<'a, 'tcx> for FnType<'tcx, Ty<'tcx>> {\n                 layout::Int(..) if !scalar.is_bool() => {\n                     let range = scalar.valid_range_exclusive(bx.cx);\n                     if range.start != range.end {\n-                        // FIXME(nox): This causes very weird type errors about\n-                        // SHL operators in constants in stage 2 with LLVM 3.9.\n-                        if unsafe { llvm::LLVMRustVersionMajor() >= 4 } {\n-                            bx.range_metadata(callsite, range);\n-                        }\n+                        bx.range_metadata(callsite, range);\n                     }\n                 }\n                 _ => {}"}, {"sha": "608539dd3fa7e3367915bd748a12f07a03789759", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 18, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -22,7 +22,7 @@ use builder::Builder;\n use common::{CodegenCx, Funclet};\n use debuginfo::{self, declare_local, VariableAccess, VariableKind, FunctionDebugContext};\n use monomorphize::Instance;\n-use abi::{ArgAttribute, ArgTypeExt, FnType, FnTypeExt, PassMode};\n+use abi::{ArgTypeExt, FnType, FnTypeExt, PassMode};\n use type_::Type;\n \n use syntax_pos::{DUMMY_SP, NO_EXPANSION, BytePos, Span};\n@@ -430,10 +430,6 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n         None\n     };\n \n-    let deref_op = unsafe {\n-        [llvm::LLVMRustDIBuilderCreateOpDeref()]\n-    };\n-\n     mir.args_iter().enumerate().map(|(arg_index, local)| {\n         let arg_decl = &mir.local_decls[local];\n \n@@ -543,21 +539,11 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n             if arg_index > 0 || mir.upvar_decls.is_empty() {\n                 // The Rust ABI passes indirect variables using a pointer and a manual copy, so we\n                 // need to insert a deref here, but the C ABI uses a pointer and a copy using the\n-                // byval attribute, for which LLVM does the deref itself, so we must not add it.\n-                // Starting with D31439 in LLVM 5, it *always* does the deref itself.\n-                let mut variable_access = VariableAccess::DirectVariable {\n+                // byval attribute, for which LLVM always does the deref itself,\n+                // so we must not add it.\n+                let variable_access = VariableAccess::DirectVariable {\n                     alloca: place.llval\n                 };\n-                if unsafe { llvm::LLVMRustVersionMajor() < 5 } {\n-                    if let PassMode::Indirect(ref attrs) = arg.mode {\n-                        if !attrs.contains(ArgAttribute::ByVal) {\n-                            variable_access = VariableAccess::IndirectVariable {\n-                                alloca: place.llval,\n-                                address_operations: &deref_op,\n-                            };\n-                        }\n-                    }\n-                }\n \n                 declare_local(\n                     bx,"}, {"sha": "d82410618d04ba6253744b67ee7a0cd54af59ec3", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 31, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -492,13 +492,8 @@ inline LLVMRustDIFlags visibility(LLVMRustDIFlags F) {\n   return static_cast<LLVMRustDIFlags>(static_cast<uint32_t>(F) & 0x3);\n }\n \n-#if LLVM_VERSION_GE(4, 0)\n static DINode::DIFlags fromRust(LLVMRustDIFlags Flags) {\n   DINode::DIFlags Result = DINode::DIFlags::FlagZero;\n-#else\n-static unsigned fromRust(LLVMRustDIFlags Flags) {\n-  unsigned Result = 0;\n-#endif\n \n   switch (visibility(Flags)) {\n   case LLVMRustDIFlags::FlagPrivate:\n@@ -565,14 +560,12 @@ static unsigned fromRust(LLVMRustDIFlags Flags) {\n   if (isSet(Flags & LLVMRustDIFlags::FlagBitField)) {\n     Result |= DINode::DIFlags::FlagBitField;\n   }\n-#if LLVM_RUSTLLVM || LLVM_VERSION_GE(4, 0)\n   if (isSet(Flags & LLVMRustDIFlags::FlagNoReturn)) {\n     Result |= DINode::DIFlags::FlagNoReturn;\n   }\n   if (isSet(Flags & LLVMRustDIFlags::FlagMainSubprogram)) {\n     Result |= DINode::DIFlags::FlagMainSubprogram;\n   }\n-#endif\n \n   return Result;\n }\n@@ -612,14 +605,8 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateCompileUnit(\n     unsigned RuntimeVer, const char *SplitName) {\n   auto *File = unwrapDI<DIFile>(FileRef);\n \n-#if LLVM_VERSION_GE(4, 0)\n   return wrap(Builder->createCompileUnit(Lang, File, Producer, isOptimized,\n                                          Flags, RuntimeVer, SplitName));\n-#else\n-  return wrap(Builder->createCompileUnit(Lang, File->getFilename(),\n-      File->getDirectory(), Producer, isOptimized,\n-      Flags, RuntimeVer, SplitName));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef\n@@ -657,11 +644,7 @@ extern \"C\" LLVMMetadataRef\n LLVMRustDIBuilderCreateBasicType(LLVMRustDIBuilderRef Builder, const char *Name,\n                                  uint64_t SizeInBits, uint32_t AlignInBits,\n                                  unsigned Encoding) {\n-  return wrap(Builder->createBasicType(Name, SizeInBits,\n-#if LLVM_VERSION_LE(3, 9)\n-                                       AlignInBits,\n-#endif\n-                                       Encoding));\n+  return wrap(Builder->createBasicType(Name, SizeInBits, Encoding));\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreatePointerType(\n@@ -722,7 +705,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n     LLVMMetadataRef Decl = nullptr, uint32_t AlignInBits = 0) {\n   llvm::GlobalVariable *InitVal = cast<llvm::GlobalVariable>(unwrap(V));\n \n-#if LLVM_VERSION_GE(4, 0)\n   llvm::DIExpression *InitExpr = nullptr;\n   if (llvm::ConstantInt *IntVal = llvm::dyn_cast<llvm::ConstantInt>(InitVal)) {\n     InitExpr = Builder->createConstantValueExpression(\n@@ -741,12 +723,6 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateStaticVariable(\n   InitVal->setMetadata(\"dbg\", VarExpr);\n \n   return wrap(VarExpr);\n-#else\n-  return wrap(Builder->createGlobalVariable(\n-      unwrapDI<DIDescriptor>(Context), Name, LinkageName,\n-      unwrapDI<DIFile>(File), LineNo, unwrapDI<DIType>(Ty), IsLocalToUnit,\n-      InitVal, unwrapDIPtr<MDNode>(Decl)));\n-#endif\n }\n \n extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariable(\n@@ -757,12 +733,7 @@ extern \"C\" LLVMMetadataRef LLVMRustDIBuilderCreateVariable(\n   if (Tag == 0x100) { // DW_TAG_auto_variable\n     return wrap(Builder->createAutoVariable(\n         unwrapDI<DIDescriptor>(Scope), Name, unwrapDI<DIFile>(File), LineNo,\n-        unwrapDI<DIType>(Ty), AlwaysPreserve, fromRust(Flags)\n-#if LLVM_VERSION_GE(4, 0)\n-        ,\n-  AlignInBits\n-#endif\n-        ));\n+        unwrapDI<DIType>(Ty), AlwaysPreserve, fromRust(Flags), AlignInBits));\n   } else {\n     return wrap(Builder->createParameterVariable(\n         unwrapDI<DIDescriptor>(Scope), Name, ArgNo, unwrapDI<DIFile>(File),"}, {"sha": "1b92ff60226aa8a7f6c52a341a161befe5980e50", "filename": "src/test/codegen/call-metadata.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fcall-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fcall-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcall-metadata.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -12,8 +12,6 @@\n // scalar value.\n \n // compile-flags: -C no-prepopulate-passes\n-// min-llvm-version 4.0\n-\n \n #![crate_type = \"lib\"]\n "}, {"sha": "a36a50415ada55f8e3532beeb9de6baf3c5a0951", "filename": "src/test/codegen/issue-37945.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fissue-37945.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-37945.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// min-llvm-version 4.0\n // compile-flags: -O\n // ignore-x86\n // ignore-arm"}, {"sha": "149547639440cf39187535a6d168bae4bad3f70b", "filename": "src/test/codegen/issue-45466.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fissue-45466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fissue-45466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-45466.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// min-llvm-version 4.0\n // compile-flags: -O\n+// min-llvm-version 6.0\n \n #![crate_type=\"rlib\"]\n "}, {"sha": "2cfc20e30ca5c79da9f8b2d3fe916847a2ebdefc", "filename": "src/test/codegen/mainsubprogram.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogram.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -14,7 +14,6 @@\n // ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n-// min-llvm-version 4.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "62a996316c4f5d045a77bf171f9851970e4e52a1", "filename": "src/test/codegen/mainsubprogramstart.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fmainsubprogramstart.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -8,13 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// This test depends on a patch that was committed to upstream LLVM\n-// before 4.0, formerly backported to the Rust LLVM fork.\n-\n // ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n-// min-llvm-version 4.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "f66369782e5a67e464ecbb42df040bf826a22811", "filename": "src/test/codegen/noreturnflag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoreturnflag.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -10,7 +10,6 @@\n \n // compile-flags: -g -C no-prepopulate-passes\n // ignore-tidy-linelength\n-// min-llvm-version 4.0\n \n #![crate_type = \"lib\"]\n "}, {"sha": "b8c2e62abef622bcd6a7455ba7bca773288abe6c", "filename": "src/test/codegen/stack-probes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fstack-probes.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -21,7 +21,6 @@\n // ignore-wasm\n // ignore-emscripten\n // ignore-windows\n-// min-system-llvm-version 5.0\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]"}, {"sha": "abd1eb3e2cc7b061d16b054969534ea7a2614eb6", "filename": "src/test/codegen/vtabletype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcodegen%2Fvtabletype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvtabletype.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -14,7 +14,7 @@\n // ignore-tidy-linelength\n // ignore-windows\n // ignore-macos\n-// min-system-llvm-version 5.1\n+// min-llvm-version 6.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "725960a866ba01745b972a27e3e760900de1cbd5", "filename": "src/test/compile-fail/simd-intrinsic-generic-reduction.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsimd-intrinsic-generic-reduction.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// min-llvm-version 5.0\n // ignore-emscripten\n \n // Test that the simd_reduce_{op} intrinsics produce ok-ish error"}, {"sha": "b4b54e13a698ee87d2334ca6a3eae888e1b48ab6", "filename": "src/test/mir-opt/lower_128bit_test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_128bit_test.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// asmjs can't even pass i128 as arguments or return values, so ignore it.\n-// this will hopefully be fixed by the LLVM 5 upgrade (#43370)\n-// ignore-asmjs\n // ignore-emscripten\n \n // compile-flags: -Z lower_128bit_ops=yes -C debug_assertions=no"}, {"sha": "efe1b7072ffb8f75a3d5460a67e100c6854af46a", "filename": "src/test/run-make-fulldeps/cross-lang-lto/Makefile", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcross-lang-lto%2FMakefile?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -1,5 +1,3 @@\n-\n-# min-llvm-version 4.0\n # ignore-msvc\n \n -include ../tools.mk"}, {"sha": "c0a17d920cffc91154ee4b0e22d473225a408b92", "filename": "src/test/run-make-fulldeps/llvm-pass/llvm-function-pass.so.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-function-pass.so.cc", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-function-pass.so.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-function-pass.so.cc?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -28,12 +28,7 @@ namespace {\n \n     bool runOnFunction(Function &F) override;\n \n-#if LLVM_VERSION_MAJOR >= 4\n-    StringRef\n-#else\n-    const char *\n-#endif\n-    getPassName() const override {\n+    StringRef getPassName() const override {\n       return \"Some LLVM pass\";\n     }\n "}, {"sha": "70051681ab0350393a8f25eae75e5becce325974", "filename": "src/test/run-make-fulldeps/llvm-pass/llvm-module-pass.so.cc", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-module-pass.so.cc", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-module-pass.so.cc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fllvm-pass%2Fllvm-module-pass.so.cc?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -27,12 +27,7 @@ namespace {\n \n     bool runOnModule(Module &M) override;\n \n-#if LLVM_VERSION_MAJOR >= 4\n-    StringRef\n-#else\n-    const char *\n-#endif\n-    getPassName() const override {\n+    StringRef getPassName() const override {\n       return \"Some LLVM pass\";\n     }\n "}, {"sha": "c1f3b2028aa7ef5df27fccd497b75172baba91da", "filename": "src/test/run-pass/issue-40883.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fissue-40883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fissue-40883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-40883.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // check that we don't have linear stack usage with multiple calls to `push`\n-// min-llvm-version 4.0\n \n #![feature(test)]\n "}, {"sha": "8e999b7115ea13ee71292444870138f04a687934", "filename": "src/test/run-pass/simd-intrinsic-generic-reduction.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-intrinsic-generic-reduction.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// min-llvm-version 5.0\n // ignore-emscripten\n \n // Test that the simd_reduce_{op} intrinsics produce the correct results."}, {"sha": "ff5413ce06ca05384c6cd6a913f767f2bd42575c", "filename": "src/test/run-pass/stack-probes-lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes-lto.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -21,7 +21,6 @@\n // ignore-emscripten no processes\n // ignore-musl FIXME #31506\n // ignore-pretty\n-// min-system-llvm-version 5.0\n // compile-flags: -C lto\n // no-prefer-dynamic\n "}, {"sha": "1334ab8dc63780346d99252995c20c19aef8bf89", "filename": "src/test/run-pass/stack-probes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -20,7 +20,6 @@\n // ignore-cloudabi no processes\n // ignore-emscripten no processes\n // ignore-musl FIXME #31506\n-// min-system-llvm-version 5.0\n \n use std::mem;\n use std::process::Command;"}, {"sha": "257d5bbc30677e2f5658fe5dc165c1673d3b37c1", "filename": "src/test/run-pass/thin-lto-global-allocator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthin-lto-global-allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthin-lto-global-allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthin-lto-global-allocator.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // compile-flags: -Z thinlto -C codegen-units=2\n-// min-llvm-version 4.0\n \n #[global_allocator]\n static A: std::alloc::System = std::alloc::System;"}, {"sha": "8d68202d71176922148a0cb12bb60f1ddeb15237", "filename": "src/test/run-pass/thinlto/all-crates.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fall-crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fall-crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fall-crates.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -10,7 +10,6 @@\n \n // compile-flags: -Clto=thin\n // no-prefer-dynamic\n-// min-llvm-version 4.0\n \n fn main() {\n     println!(\"hello!\");"}, {"sha": "06df40f61427d4db537eded2401b4ece6d81afe1", "filename": "src/test/run-pass/thinlto/dylib-works.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fdylib-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fdylib-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fdylib-works.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:dylib.rs\n-// min-llvm-version 4.0\n \n extern crate dylib;\n "}, {"sha": "95cff2a28620743cee6c41b7ae0d7843688fb9df", "filename": "src/test/run-pass/thinlto/msvc-imp-present.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fmsvc-imp-present.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fmsvc-imp-present.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fmsvc-imp-present.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:msvc-imp-present.rs\n // compile-flags: -Z thinlto -C codegen-units=8\n-// min-llvm-version: 4.0\n // no-prefer-dynamic\n \n // On MSVC we have a \"hack\" where we emit symbols that look like `_imp_$name`"}, {"sha": "41ca983af51c7810ae72726d90e44b47b67defa9", "filename": "src/test/run-pass/thinlto/thin-lto-inlines.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // compile-flags: -Z thinlto -C codegen-units=8 -O\n-// min-llvm-version 4.0\n // ignore-emscripten can't inspect instructions on emscripten\n \n // We want to assert here that ThinLTO will inline across codegen units. There's"}, {"sha": "3c0e904662a3534e871f2ae95621fcbe5df96bc2", "filename": "src/test/run-pass/thinlto/thin-lto-inlines2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines2.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -10,7 +10,6 @@\n \n // compile-flags: -C codegen-units=8 -O -C lto=thin\n // aux-build:thin-lto-inlines-aux.rs\n-// min-llvm-version 4.0\n // no-prefer-dynamic\n // ignore-emscripten can't inspect instructions on emscripten\n "}, {"sha": "0a1b7307a46ff705ca48bb8b1a3014c9f1806c33", "filename": "src/test/run-pass/thinlto/weak-works.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fweak-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b525916ee511a54d4e79dff8d854fc63ac8fff7/src%2Ftest%2Frun-pass%2Fthinlto%2Fweak-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fweak-works.rs?ref=5b525916ee511a54d4e79dff8d854fc63ac8fff7", "patch": "@@ -10,7 +10,6 @@\n \n // compile-flags: -C codegen-units=8 -Z thinlto\n // ignore-windows\n-// min-llvm-version 4.0\n \n #![feature(linkage)]\n "}]}