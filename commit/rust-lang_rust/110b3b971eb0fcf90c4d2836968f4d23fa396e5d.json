{"sha": "110b3b971eb0fcf90c4d2836968f4d23fa396e5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMGIzYjk3MWViMGZjZjkwYzRkMjgzNjk2OGY0ZDIzZmEzOTZlNWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-05T17:00:53Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T12:57:22Z"}, "message": "canonicalizer.rs: rustfmt", "tree": {"sha": "36cc10e483f6d7c7626954dcbe9b1982687bbc08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36cc10e483f6d7c7626954dcbe9b1982687bbc08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110b3b971eb0fcf90c4d2836968f4d23fa396e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110b3b971eb0fcf90c4d2836968f4d23fa396e5d", "html_url": "https://github.com/rust-lang/rust/commit/110b3b971eb0fcf90c4d2836968f4d23fa396e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110b3b971eb0fcf90c4d2836968f4d23fa396e5d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f401dd02fd418e038d9b2829d60d69407e9aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f401dd02fd418e038d9b2829d60d69407e9aab", "html_url": "https://github.com/rust-lang/rust/commit/42f401dd02fd418e038d9b2829d60d69407e9aab"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "8b859d473d718b66e37b5ae889492434ff14ef51", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/110b3b971eb0fcf90c4d2836968f4d23fa396e5d/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110b3b971eb0fcf90c4d2836968f4d23fa396e5d/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=110b3b971eb0fcf90c4d2836968f4d23fa396e5d", "patch": "@@ -48,7 +48,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     pub fn canonicalize_query<V>(\n         &self,\n         value: &V,\n-        var_values: &mut SmallCanonicalVarValues<'tcx>\n+        var_values: &mut SmallCanonicalVarValues<'tcx>,\n     ) -> Canonicalized<'gcx, V>\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n@@ -96,10 +96,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// out the [chapter in the rustc guide][c].\n     ///\n     /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query-result\n-    pub fn canonicalize_response<V>(\n-        &self,\n-        value: &V,\n-    ) -> Canonicalized<'gcx, V>\n+    pub fn canonicalize_response<V>(&self, value: &V) -> Canonicalized<'gcx, V>\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n     {\n@@ -112,7 +109,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 static_region: false,\n                 other_free_regions: false,\n             },\n-            &mut var_values\n+            &mut var_values,\n         )\n     }\n \n@@ -128,7 +125,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     pub fn canonicalize_hr_query_hack<V>(\n         &self,\n         value: &V,\n-        var_values: &mut SmallCanonicalVarValues<'tcx>\n+        var_values: &mut SmallCanonicalVarValues<'tcx>,\n     ) -> Canonicalized<'gcx, V>\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n@@ -147,7 +144,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                 static_region: false,\n                 other_free_regions: true,\n             },\n-            var_values\n+            var_values,\n         )\n     }\n }\n@@ -192,8 +189,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             }\n \n             ty::ReVar(vid) => {\n-                let r = self\n-                    .infcx\n+                let r = self.infcx\n                     .unwrap()\n                     .borrow_region_constraints()\n                     .opportunistic_resolve_var(self.tcx, vid);\n@@ -305,7 +301,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         infcx: Option<&'cx InferCtxt<'cx, 'gcx, 'tcx>>,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n         canonicalize_region_mode: CanonicalizeRegionMode,\n-        var_values: &'cx mut SmallCanonicalVarValues<'tcx>\n+        var_values: &'cx mut SmallCanonicalVarValues<'tcx>,\n     ) -> Canonicalized<'gcx, V>\n     where\n         V: TypeFoldable<'tcx> + Lift<'gcx>,\n@@ -398,25 +394,23 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n                 // fill up `indices` to facilitate subsequent lookups.\n                 if var_values.spilled() {\n                     assert!(indices.is_empty());\n-                    *indices =\n-                        var_values.iter()\n-                            .enumerate()\n-                            .map(|(i, &kind)| (kind, CanonicalVar::new(i)))\n-                            .collect();\n+                    *indices = var_values\n+                        .iter()\n+                        .enumerate()\n+                        .map(|(i, &kind)| (kind, CanonicalVar::new(i)))\n+                        .collect();\n                 }\n                 // The cv is the index of the appended element.\n                 CanonicalVar::new(var_values.len() - 1)\n             }\n         } else {\n             // `var_values` is large. Do a hashmap search via `indices`.\n-            *indices\n-                .entry(kind)\n-                .or_insert_with(|| {\n-                    variables.push(info);\n-                    var_values.push(kind);\n-                    assert_eq!(variables.len(), var_values.len());\n-                    CanonicalVar::new(variables.len() - 1)\n-                })\n+            *indices.entry(kind).or_insert_with(|| {\n+                variables.push(info);\n+                var_values.push(kind);\n+                assert_eq!(variables.len(), var_values.len());\n+                CanonicalVar::new(variables.len() - 1)\n+            })\n         }\n     }\n "}]}