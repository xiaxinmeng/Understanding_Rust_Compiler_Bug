{"sha": "dda479815ad382dc44a8b41dc516fb7fe3ebe8bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkYTQ3OTgxNWFkMzgyZGM0NGE4YjQxZGM1MTZmYjdmZTNlYmU4YmM=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-17T15:13:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-17T15:13:51Z"}, "message": "Rollup merge of #79069 - jyn514:class-none, r=GuillaumeGomez\n\nGet rid of `highlight::Class::None`\n\nThis is mostly me learning the codebase for https://github.com/rust-lang/rust/pull/77939, so feel free to close the PR.\nIt does have the small benefit that we statically know rustdoc isn't generating useless `span`s, though.\n\nr? `@GuillaumeGomez`\ncc `@matklad`", "tree": {"sha": "f8824cba9814e8caea0e236cf1b644f733e026f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8824cba9814e8caea0e236cf1b644f733e026f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dda479815ad382dc44a8b41dc516fb7fe3ebe8bc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfs+ivCRBK7hj4Ov3rIwAAdHIIAEF7BE+YiKMjM52/P/cVJFH5\nlzrXaZ9WkK4MJgrdWZpKZ3gN5r1QI0ugZQJwyqWpTYR7bcO2i7phgLqzPn7KNiNt\n479tiVc+yNQLOSm1qp5S/a+WPSLLXLwEojiXGtzCrAIKkc5cCT7hxCj9w+KSKZCy\nNREyzr8hc9gluLwxTtCgEs0Vvyv/CeOaheyxwjo7WT7hpum1EvpFUgcvHCisqmYQ\nGm1zkBf3Crq9XIgOFBmfZyvBa0EL35D05oT88mlgCBcfmUTma48qnkGEHU+TC/TT\nsUVQko6ERPionM+uRlqLg8U8Pb5z+sqOPtOoYza3SXuPkoyNSnoQjDKMY20c2+s=\n=E068\n-----END PGP SIGNATURE-----\n", "payload": "tree f8824cba9814e8caea0e236cf1b644f733e026f7\nparent fa45fce0d37ed5991e1080468c84322350156f22\nparent 279bf2927545997b2b306a1aefdaa51b706894d2\nauthor Mara Bos <m-ou.se@m-ou.se> 1605626031 +0100\ncommitter GitHub <noreply@github.com> 1605626031 +0100\n\nRollup merge of #79069 - jyn514:class-none, r=GuillaumeGomez\n\nGet rid of `highlight::Class::None`\n\nThis is mostly me learning the codebase for https://github.com/rust-lang/rust/pull/77939, so feel free to close the PR.\nIt does have the small benefit that we statically know rustdoc isn't generating useless `span`s, though.\n\nr? `@GuillaumeGomez`\ncc `@matklad`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dda479815ad382dc44a8b41dc516fb7fe3ebe8bc", "html_url": "https://github.com/rust-lang/rust/commit/dda479815ad382dc44a8b41dc516fb7fe3ebe8bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dda479815ad382dc44a8b41dc516fb7fe3ebe8bc/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa45fce0d37ed5991e1080468c84322350156f22", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa45fce0d37ed5991e1080468c84322350156f22", "html_url": "https://github.com/rust-lang/rust/commit/fa45fce0d37ed5991e1080468c84322350156f22"}, {"sha": "279bf2927545997b2b306a1aefdaa51b706894d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/279bf2927545997b2b306a1aefdaa51b706894d2", "html_url": "https://github.com/rust-lang/rust/commit/279bf2927545997b2b306a1aefdaa51b706894d2"}], "stats": {"total": 33, "additions": 16, "deletions": 17}, "files": [{"sha": "1cbfbf50dd745dafd90905e0630ac6d6d39ede55", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/dda479815ad382dc44a8b41dc516fb7fe3ebe8bc/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dda479815ad382dc44a8b41dc516fb7fe3ebe8bc/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=dda479815ad382dc44a8b41dc516fb7fe3ebe8bc", "patch": "@@ -64,7 +64,6 @@ fn write_footer(out: &mut String, playground_button: Option<&str>) {\n /// How a span of text is classified. Mostly corresponds to token kinds.\n #[derive(Clone, Copy, Debug, Eq, PartialEq)]\n enum Class {\n-    None,\n     Comment,\n     DocComment,\n     Attribute,\n@@ -89,7 +88,6 @@ impl Class {\n     /// Returns the css class expected by rustdoc for each `Class`.\n     fn as_html(self) -> &'static str {\n         match self {\n-            Class::None => \"\",\n             Class::Comment => \"comment\",\n             Class::DocComment => \"doccomment\",\n             Class::Attribute => \"attribute\",\n@@ -112,7 +110,7 @@ impl Class {\n }\n \n enum Highlight<'a> {\n-    Token { text: &'a str, class: Class },\n+    Token { text: &'a str, class: Option<Class> },\n     EnterSpan { class: Class },\n     ExitSpan,\n }\n@@ -166,8 +164,9 @@ impl<'a> Classifier<'a> {\n     /// a couple of following ones as well.\n     fn advance(&mut self, token: TokenKind, text: &'a str, sink: &mut dyn FnMut(Highlight<'a>)) {\n         let lookahead = self.peek();\n+        let no_highlight = |sink: &mut dyn FnMut(_)| sink(Highlight::Token { text, class: None });\n         let class = match token {\n-            TokenKind::Whitespace => Class::None,\n+            TokenKind::Whitespace => return no_highlight(sink),\n             TokenKind::LineComment { doc_style } | TokenKind::BlockComment { doc_style, .. } => {\n                 if doc_style.is_some() {\n                     Class::DocComment\n@@ -192,12 +191,12 @@ impl<'a> Classifier<'a> {\n             TokenKind::And => match lookahead {\n                 Some(TokenKind::And) => {\n                     let _and = self.tokens.next();\n-                    sink(Highlight::Token { text: \"&&\", class: Class::Op });\n+                    sink(Highlight::Token { text: \"&&\", class: Some(Class::Op) });\n                     return;\n                 }\n                 Some(TokenKind::Eq) => {\n                     let _eq = self.tokens.next();\n-                    sink(Highlight::Token { text: \"&=\", class: Class::Op });\n+                    sink(Highlight::Token { text: \"&=\", class: Some(Class::Op) });\n                     return;\n                 }\n                 Some(TokenKind::Whitespace) => Class::Op,\n@@ -228,7 +227,7 @@ impl<'a> Classifier<'a> {\n             | TokenKind::At\n             | TokenKind::Tilde\n             | TokenKind::Colon\n-            | TokenKind::Unknown => Class::None,\n+            | TokenKind::Unknown => return no_highlight(sink),\n \n             TokenKind::Question => Class::QuestionMark,\n \n@@ -237,7 +236,7 @@ impl<'a> Classifier<'a> {\n                     self.in_macro_nonterminal = true;\n                     Class::MacroNonTerminal\n                 }\n-                _ => Class::None,\n+                _ => return no_highlight(sink),\n             },\n \n             // This might be the start of an attribute. We're going to want to\n@@ -253,8 +252,8 @@ impl<'a> Classifier<'a> {\n                             self.in_attribute = true;\n                             sink(Highlight::EnterSpan { class: Class::Attribute });\n                         }\n-                        sink(Highlight::Token { text: \"#\", class: Class::None });\n-                        sink(Highlight::Token { text: \"!\", class: Class::None });\n+                        sink(Highlight::Token { text: \"#\", class: None });\n+                        sink(Highlight::Token { text: \"!\", class: None });\n                         return;\n                     }\n                     // Case 2: #[outer_attribute]\n@@ -264,16 +263,16 @@ impl<'a> Classifier<'a> {\n                     }\n                     _ => (),\n                 }\n-                Class::None\n+                return no_highlight(sink);\n             }\n             TokenKind::CloseBracket => {\n                 if self.in_attribute {\n                     self.in_attribute = false;\n-                    sink(Highlight::Token { text: \"]\", class: Class::None });\n+                    sink(Highlight::Token { text: \"]\", class: None });\n                     sink(Highlight::ExitSpan);\n                     return;\n                 }\n-                Class::None\n+                return no_highlight(sink);\n             }\n             TokenKind::Literal { kind, .. } => match kind {\n                 // Text literals.\n@@ -309,7 +308,7 @@ impl<'a> Classifier<'a> {\n         };\n         // Anything that didn't return above is the simple case where we the\n         // class just spans a single token, so we can use the `string` method.\n-        sink(Highlight::Token { text, class });\n+        sink(Highlight::Token { text, class: Some(class) });\n     }\n \n     fn peek(&mut self) -> Option<TokenKind> {\n@@ -339,10 +338,10 @@ fn exit_span(out: &mut String) {\n /// ```\n /// The latter can be thought of as a shorthand for the former, which is more\n /// flexible.\n-fn string<T: Display>(out: &mut String, text: T, klass: Class) {\n+fn string<T: Display>(out: &mut String, text: T, klass: Option<Class>) {\n     match klass {\n-        Class::None => write!(out, \"{}\", text).unwrap(),\n-        klass => write!(out, \"<span class=\\\"{}\\\">{}</span>\", klass.as_html(), text).unwrap(),\n+        None => write!(out, \"{}\", text).unwrap(),\n+        Some(klass) => write!(out, \"<span class=\\\"{}\\\">{}</span>\", klass.as_html(), text).unwrap(),\n     }\n }\n "}]}