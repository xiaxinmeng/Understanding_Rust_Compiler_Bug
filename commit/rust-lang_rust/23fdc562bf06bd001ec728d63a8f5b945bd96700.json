{"sha": "23fdc562bf06bd001ec728d63a8f5b945bd96700", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZmRjNTYyYmYwNmJkMDAxZWM3MjhkNjNhOGY1Yjk0NWJkOTY3MDA=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-30T15:11:21Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-03-30T15:11:21Z"}, "message": "Add new TYPE_BOUND_LIST and TYPE_BOUND syntax kinds\n\nThese are now used when parsing type bounds. In addition parsing paths inside a\nbound now does not recursively parse paths, rather they are treated as separate\nbounds, separated by +.", "tree": {"sha": "ace25468b177e1fa5899ca18daee48cc420372ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ace25468b177e1fa5899ca18daee48cc420372ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23fdc562bf06bd001ec728d63a8f5b945bd96700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23fdc562bf06bd001ec728d63a8f5b945bd96700", "html_url": "https://github.com/rust-lang/rust/commit/23fdc562bf06bd001ec728d63a8f5b945bd96700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23fdc562bf06bd001ec728d63a8f5b945bd96700/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e", "html_url": "https://github.com/rust-lang/rust/commit/9ebd14a14e20aebc8e176a8dcb22376eb3a4d73e"}], "stats": {"total": 97, "additions": 95, "deletions": 2}, "files": [{"sha": "d03a6be0dfd20855d65eb6a29f122b4b4d5f8ed3", "filename": "crates/ra_parser/src/grammar/items/traits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=23fdc562bf06bd001ec728d63a8f5b945bd96700", "patch": "@@ -2,6 +2,7 @@ use super::*;\n \n // test trait_item\n // trait T<U>: Hash + Clone where U: Copy {}\n+// trait X<U: Debug + Display>: Hash + Clone where U: Copy {}\n pub(super) fn trait_def(p: &mut Parser) {\n     assert!(p.at(TRAIT_KW));\n     p.bump();"}, {"sha": "e28c124cd47ca8aca0d2663ce45d517457185795", "filename": "crates/ra_parser/src/grammar/type_params.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=23fdc562bf06bd001ec728d63a8f5b945bd96700", "patch": "@@ -80,22 +80,29 @@ fn lifetime_bounds(p: &mut Parser) {\n }\n \n pub(super) fn bounds_without_colon(p: &mut Parser) {\n+    let outer = p.start();\n     loop {\n+        let inner = p.start();\n         let has_paren = p.eat(L_PAREN);\n         p.eat(QUESTION);\n         match p.current() {\n             LIFETIME => p.bump(),\n             FOR_KW => types::for_type(p),\n-            _ if paths::is_path_start(p) => types::path_type(p),\n-            _ => break,\n+            _ if paths::is_path_start(p) => types::path_type_(p, false),\n+            _ => {\n+                inner.abandon(p);\n+                break;\n+            }\n         }\n         if has_paren {\n             p.expect(R_PAREN);\n         }\n+        inner.complete(p, TYPE_BOUND);\n         if !p.eat(PLUS) {\n             break;\n         }\n     }\n+    outer.complete(p, TYPE_BOUND_LIST);\n }\n \n // test where_clause"}, {"sha": "547af1b2723a86fdf2354d4d8d5fa3357ab1c243", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=23fdc562bf06bd001ec728d63a8f5b945bd96700", "patch": "@@ -228,6 +228,8 @@ pub enum SyntaxKind {\n     PARAM,\n     SELF_PARAM,\n     ARG_LIST,\n+    TYPE_BOUND,\n+    TYPE_BOUND_LIST,\n }\n use self::SyntaxKind::*;\n \n@@ -567,6 +569,8 @@ impl SyntaxKind {\n             PARAM => &SyntaxInfo { name: \"PARAM\" },\n             SELF_PARAM => &SyntaxInfo { name: \"SELF_PARAM\" },\n             ARG_LIST => &SyntaxInfo { name: \"ARG_LIST\" },\n+            TYPE_BOUND => &SyntaxInfo { name: \"TYPE_BOUND\" },\n+            TYPE_BOUND_LIST => &SyntaxInfo { name: \"TYPE_BOUND_LIST\" },\n             TOMBSTONE => &SyntaxInfo { name: \"TOMBSTONE\" },\n             EOF => &SyntaxInfo { name: \"EOF\" },\n         }"}, {"sha": "faf80bc3211b819e2483fb49e865339dd9a8e303", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=23fdc562bf06bd001ec728d63a8f5b945bd96700", "patch": "@@ -4369,6 +4369,74 @@ impl TypeArgList {\n     }\n }\n \n+// TypeBound\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct TypeBound {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for TypeBound {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for TypeBound {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            TYPE_BOUND => Some(TypeBound::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TypeBound {\n+    type Owned = TreeArc<TypeBound>;\n+    fn to_owned(&self) -> TreeArc<TypeBound> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl TypeBound {\n+    pub fn type_ref(&self) -> Option<&TypeRef> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn lifetime(&self) -> Option<&Lifetime> {\n+        super::child_opt(self)\n+    }\n+}\n+\n+// TypeBoundList\n+#[derive(Debug, PartialEq, Eq, Hash)]\n+#[repr(transparent)]\n+pub struct TypeBoundList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+unsafe impl TransparentNewType for TypeBoundList {\n+    type Repr = rowan::SyntaxNode<RaTypes>;\n+}\n+\n+impl AstNode for TypeBoundList {\n+    fn cast(syntax: &SyntaxNode) -> Option<&Self> {\n+        match syntax.kind() {\n+            TYPE_BOUND_LIST => Some(TypeBoundList::from_repr(syntax.into_repr())),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+\n+impl ToOwned for TypeBoundList {\n+    type Owned = TreeArc<TypeBoundList>;\n+    fn to_owned(&self) -> TreeArc<TypeBoundList> { TreeArc::cast(self.syntax.to_owned()) }\n+}\n+\n+\n+impl TypeBoundList {\n+    pub fn bounds(&self) -> impl Iterator<Item = &TypeBound> {\n+        super::children(self)\n+    }\n+}\n+\n // TypeParam\n #[derive(Debug, PartialEq, Eq, Hash)]\n #[repr(transparent)]"}, {"sha": "660a2b2077cd083648ed9f55feb1e989677706d5", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/23fdc562bf06bd001ec728d63a8f5b945bd96700/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=23fdc562bf06bd001ec728d63a8f5b945bd96700", "patch": "@@ -243,6 +243,8 @@ Grammar(\n         \"PARAM\",\n         \"SELF_PARAM\",\n         \"ARG_LIST\",\n+        \"TYPE_BOUND\",\n+        \"TYPE_BOUND_LIST\",\n     ],\n     ast: {\n         \"SourceFile\": (\n@@ -577,6 +579,17 @@ Grammar(\n             traits: [\"AttrsOwner\"],\n         ),\n         \"Lifetime\": ( traits: [\"AstToken\"] ),\n+        \"TypeBound\": (\n+            options: [\n+                \"TypeRef\",\n+                \"Lifetime\",\n+            ]\n+        ),\n+        \"TypeBoundList\": (\n+            collections: [\n+                [\"bounds\", \"TypeBound\"],\n+            ]\n+        ),\n         \"WhereClause\": (),\n         \"ExprStmt\": (\n             options: [ [\"expr\", \"Expr\"] ]"}]}