{"sha": "63182885d857fdf5641449a397ad7e3f4ebff8a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMTgyODg1ZDg1N2ZkZjU2NDE0NDlhMzk3YWQ3ZTNmNGViZmY4YTc=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-16T20:20:58Z"}, "committer": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2013-09-17T06:19:23Z"}, "message": "std: more work on from_c_multistring.. let it take an optional len param", "tree": {"sha": "b0c7c1fe3b4d2bcde31a1834a7fce37eb72cf160", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0c7c1fe3b4d2bcde31a1834a7fce37eb72cf160"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63182885d857fdf5641449a397ad7e3f4ebff8a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63182885d857fdf5641449a397ad7e3f4ebff8a7", "html_url": "https://github.com/rust-lang/rust/commit/63182885d857fdf5641449a397ad7e3f4ebff8a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63182885d857fdf5641449a397ad7e3f4ebff8a7/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c7798d66953e9f53192d54985a6a46736f5ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c7798d66953e9f53192d54985a6a46736f5ca5", "html_url": "https://github.com/rust-lang/rust/commit/71c7798d66953e9f53192d54985a6a46736f5ca5"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "d0a658a46a907a5baee051c0115ef15c41a31384", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63182885d857fdf5641449a397ad7e3f4ebff8a7/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63182885d857fdf5641449a397ad7e3f4ebff8a7/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=63182885d857fdf5641449a397ad7e3f4ebff8a7", "patch": "@@ -196,7 +196,7 @@ pub fn env() -> ~[(~str,~str)] {\n             if (ch as uint == 0) {\n                 fail!(\"os::env() failure getting env string from OS: %s\", os::last_os_error());\n             }\n-            result = unsafe { str::raw::from_c_multistring(ch as *libc::c_char) };\n+            result = unsafe { str::raw::from_c_multistring(ch as *libc::c_char, None) };\n             FreeEnvironmentStringsA(ch);\n             result\n         }"}, {"sha": "7cbc88ed204feb48c8a9b9acfa9f9f5b2675b744", "filename": "src/libstd/str.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/63182885d857fdf5641449a397ad7e3f4ebff8a7/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63182885d857fdf5641449a397ad7e3f4ebff8a7/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=63182885d857fdf5641449a397ad7e3f4ebff8a7", "patch": "@@ -22,6 +22,7 @@ use char;\n use char::Char;\n use clone::{Clone, DeepClone};\n use container::{Container, Mutable};\n+use num::Times;\n use iter::{Iterator, FromIterator, Extendable, range};\n use iter::{Filter, AdditiveIterator, Map};\n use iter::{Invert, DoubleEndedIterator, ExactSize};\n@@ -938,6 +939,7 @@ static TAG_CONT_U8: u8 = 128u8;\n \n /// Unsafe operations\n pub mod raw {\n+    use option::{Option, Some};\n     use cast;\n     use libc;\n     use ptr;\n@@ -1092,20 +1094,29 @@ pub mod raw {\n     }\n \n     /// Parses a C \"multistring\", eg windows env values or\n-    /// the req->ptr result in a uv_fs_readdir() call\n+    /// the req->ptr result in a uv_fs_readdir() call.\n+    /// Optionally, a `count` can be passed in, limiting the\n+    /// parsing to only being done `count`-times.\n     #[inline]\n-    pub unsafe fn from_c_multistring(c: *libc::c_char) -> ~[~str] {\n+    pub unsafe fn from_c_multistring(buf: *libc::c_char, count: Option<uint>) -> ~[~str] {\n         #[fixed_stack_segment]; #[inline(never)];\n \n-        let mut curr_ptr: uint = c as uint;\n+        let mut curr_ptr: uint = buf as uint;\n         let mut result = ~[];\n-        while(*(curr_ptr as *libc::c_char) != 0 as libc::c_char) {\n+        let mut ctr = 0;\n+        let (limited_count, limit) = match count {\n+            Some(limit) => (true, limit),\n+            None => (false, 0)\n+        };\n+        while(*(curr_ptr as *libc::c_char) != 0 as libc::c_char\n+             && ((limited_count && ctr < limit) || !limited_count)) {\n             let env_pair = from_c_str(\n                 curr_ptr as *libc::c_char);\n             result.push(env_pair);\n             curr_ptr +=\n                 libc::strlen(curr_ptr as *libc::c_char) as uint\n                 + 1;\n+            ctr += 1;\n         }\n         result\n     }\n@@ -1127,10 +1138,11 @@ pub mod raw {\n \n     #[test]\n     fn test_str_multistring_parsing() {\n+        use option::None;\n         unsafe {\n             let input = bytes!(\"zero\", \"\\x00\", \"one\", \"\\x00\", \"\\x00\");\n             let ptr = vec::raw::to_ptr(input);\n-            let mut result = from_c_multistring(ptr as *libc::c_char);\n+            let mut result = from_c_multistring(ptr as *libc::c_char, None);\n             assert!(result.len() == 2);\n             let mut ctr = 0;\n             for x in result.iter() {"}]}