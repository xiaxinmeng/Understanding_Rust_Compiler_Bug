{"sha": "71d75503506880efa89c902465cdcb205d0eb9e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZDc1NTAzNTA2ODgwZWZhODljOTAyNDY1Y2RjYjIwNWQwZWI5ZTU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-12-02T13:33:26Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-12-02T14:31:27Z"}, "message": "const_evaluatable_checked: fix occurs check", "tree": {"sha": "d654ca21cc5a6c58285bdfe628b8191dd3c5c06b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d654ca21cc5a6c58285bdfe628b8191dd3c5c06b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71d75503506880efa89c902465cdcb205d0eb9e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71d75503506880efa89c902465cdcb205d0eb9e5", "html_url": "https://github.com/rust-lang/rust/commit/71d75503506880efa89c902465cdcb205d0eb9e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71d75503506880efa89c902465cdcb205d0eb9e5/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92e4fb073245a42559e357a3002c596b8b38edf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/92e4fb073245a42559e357a3002c596b8b38edf6", "html_url": "https://github.com/rust-lang/rust/commit/92e4fb073245a42559e357a3002c596b8b38edf6"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "594e2c6205f85e9d4129f941b027904f7594f50e", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/71d75503506880efa89c902465cdcb205d0eb9e5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d75503506880efa89c902465cdcb205d0eb9e5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=71d75503506880efa89c902465cdcb205d0eb9e5", "patch": "@@ -543,6 +543,10 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n         true\n     }\n \n+    fn visit_ct_substs(&self) -> bool {\n+        true\n+    }\n+\n     fn binders<T>(\n         &mut self,\n         a: ty::Binder<T>,\n@@ -716,7 +720,10 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 let variable_table = &mut inner.const_unification_table();\n                 let var_value = variable_table.probe_value(vid);\n                 match var_value.val {\n-                    ConstVariableValue::Known { value: u } => self.relate(u, u),\n+                    ConstVariableValue::Known { value: u } => {\n+                        drop(inner);\n+                        self.relate(u, u)\n+                    }\n                     ConstVariableValue::Unknown { universe } => {\n                         if self.for_universe.can_name(universe) {\n                             Ok(c)\n@@ -815,6 +822,10 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n         true\n     }\n \n+    fn visit_ct_substs(&self) -> bool {\n+        true\n+    }\n+\n     fn relate_with_variance<T: Relate<'tcx>>(\n         &mut self,\n         _variance: ty::Variance,\n@@ -870,6 +881,9 @@ impl TypeRelation<'tcx> for ConstInferUnifier<'_, 'tcx> {\n                     }\n                 }\n             }\n+            ty::Infer(ty::IntVar(_) | ty::FloatVar(_)) => {\n+                Ok(t)\n+            }\n             _ => relate::super_relate_tys(self, t, t),\n         }\n     }"}, {"sha": "80dc7d89d187ddd90fb7d62b652ec101272f8fb7", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/71d75503506880efa89c902465cdcb205d0eb9e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d75503506880efa89c902465cdcb205d0eb9e5/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=71d75503506880efa89c902465cdcb205d0eb9e5", "patch": "@@ -33,6 +33,10 @@ pub trait TypeRelation<'tcx>: Sized {\n     /// relation. Just affects error messages.\n     fn a_is_expected(&self) -> bool;\n \n+    fn visit_ct_substs(&self) -> bool {\n+        false\n+    }\n+\n     fn with_cause<F, R>(&mut self, _cause: Cause, f: F) -> R\n     where\n         F: FnOnce(&mut Self) -> R,\n@@ -579,7 +583,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         (\n             ty::ConstKind::Unevaluated(a_def, a_substs, None),\n             ty::ConstKind::Unevaluated(b_def, b_substs, None),\n-        ) if tcx.features().const_evaluatable_checked => {\n+        ) if tcx.features().const_evaluatable_checked && !relation.visit_ct_substs() => {\n             if tcx.try_unify_abstract_consts(((a_def, a_substs), (b_def, b_substs))) {\n                 Ok(a.val)\n             } else {"}, {"sha": "e5d487d89b9f339efdd137888360763949ab6ff8", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-5.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71d75503506880efa89c902465cdcb205d0eb9e5/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71d75503506880efa89c902465cdcb205d0eb9e5/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.rs?ref=71d75503506880efa89c902465cdcb205d0eb9e5", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+\n+// `N + 1` also depends on `T` here even if it doesn't use it.\n+fn q<T, const N: usize>(_: T) -> [u8; N + 1] {\n+    todo!()\n+}\n+\n+fn supplier<T>() -> T {\n+    todo!()\n+}\n+\n+fn catch_me<const N: usize>() where [u8; N + 1]: Default {\n+    let mut x = supplier();\n+    x = q::<_, N>(x); //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    catch_me::<3>();\n+}"}, {"sha": "239569dab0965614cf16d3c8ce2e021b6e83486e", "filename": "src/test/ui/const-generics/occurs-check/unused-substs-5.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71d75503506880efa89c902465cdcb205d0eb9e5/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71d75503506880efa89c902465cdcb205d0eb9e5/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-5.stderr?ref=71d75503506880efa89c902465cdcb205d0eb9e5", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/unused-substs-5.rs:15:9\n+   |\n+LL |     x = q::<_, N>(x);\n+   |         ^^^^^^^^^^^^\n+   |         |\n+   |         cyclic type of infinite size\n+   |         help: try using a conversion method: `q::<_, N>(x).to_vec()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}