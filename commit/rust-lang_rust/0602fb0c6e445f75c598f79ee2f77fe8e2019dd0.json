{"sha": "0602fb0c6e445f75c598f79ee2f77fe8e2019dd0", "node_id": "C_kwDOAAsO6NoAKDA2MDJmYjBjNmU0NDVmNzVjNTk4Zjc5ZWUyZjc3ZmU4ZTIwMTlkZDA", "commit": {"author": {"name": "Richard Dodd", "email": "richard.o.dodd@gmail.com", "date": "2021-12-06T11:25:42Z"}, "committer": {"name": "Richard Dodd", "email": "richard.o.dodd@gmail.com", "date": "2022-02-03T09:16:04Z"}, "message": "impl `Arc::unwrap_or_clone`\n\nThe function gets the inner value, cloning only if necessary.", "tree": {"sha": "92918904c76d7105012e14b6d18db5cbc08760df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92918904c76d7105012e14b6d18db5cbc08760df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0602fb0c6e445f75c598f79ee2f77fe8e2019dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0602fb0c6e445f75c598f79ee2f77fe8e2019dd0", "html_url": "https://github.com/rust-lang/rust/commit/0602fb0c6e445f75c598f79ee2f77fe8e2019dd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0602fb0c6e445f75c598f79ee2f77fe8e2019dd0/comments", "author": {"login": "derekdreery", "id": 1392222, "node_id": "MDQ6VXNlcjEzOTIyMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1392222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derekdreery", "html_url": "https://github.com/derekdreery", "followers_url": "https://api.github.com/users/derekdreery/followers", "following_url": "https://api.github.com/users/derekdreery/following{/other_user}", "gists_url": "https://api.github.com/users/derekdreery/gists{/gist_id}", "starred_url": "https://api.github.com/users/derekdreery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derekdreery/subscriptions", "organizations_url": "https://api.github.com/users/derekdreery/orgs", "repos_url": "https://api.github.com/users/derekdreery/repos", "events_url": "https://api.github.com/users/derekdreery/events{/privacy}", "received_events_url": "https://api.github.com/users/derekdreery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "derekdreery", "id": 1392222, "node_id": "MDQ6VXNlcjEzOTIyMjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1392222?v=4", "gravatar_id": "", "url": "https://api.github.com/users/derekdreery", "html_url": "https://github.com/derekdreery", "followers_url": "https://api.github.com/users/derekdreery/followers", "following_url": "https://api.github.com/users/derekdreery/following{/other_user}", "gists_url": "https://api.github.com/users/derekdreery/gists{/gist_id}", "starred_url": "https://api.github.com/users/derekdreery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/derekdreery/subscriptions", "organizations_url": "https://api.github.com/users/derekdreery/orgs", "repos_url": "https://api.github.com/users/derekdreery/repos", "events_url": "https://api.github.com/users/derekdreery/events{/privacy}", "received_events_url": "https://api.github.com/users/derekdreery/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1be5c8f90912c446ecbdc405cbc4a89f9acd20fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1be5c8f90912c446ecbdc405cbc4a89f9acd20fd", "html_url": "https://github.com/rust-lang/rust/commit/1be5c8f90912c446ecbdc405cbc4a89f9acd20fd"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "3d132484b2fff2084201694c4c60dbafb2c4b064", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0602fb0c6e445f75c598f79ee2f77fe8e2019dd0/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0602fb0c6e445f75c598f79ee2f77fe8e2019dd0/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=0602fb0c6e445f75c598f79ee2f77fe8e2019dd0", "patch": "@@ -1477,6 +1477,41 @@ impl<T: Clone> Arc<T> {\n         // either unique to begin with, or became one upon cloning the contents.\n         unsafe { Self::get_mut_unchecked(this) }\n     }\n+\n+    /// If we have the only reference to `T` then unwrap it. Otherwise, clone `T` and return the\n+    /// clone.\n+    ///\n+    /// Assuming `arc_t` is of type `Arc<T>`, this function is functionally equivalent to\n+    /// `(*arc_t).clone()`, but will avoid cloning the inner value where possible.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_unwrap_or_clone)]\n+    /// # use std::{ptr, sync::Arc};\n+    /// let inner = String::from(\"test\");\n+    /// let ptr = inner.as_ptr();\n+    ///\n+    /// let arc = Arc::new(inner);\n+    /// let inner = Arc::unwrap_or_clone(arc);\n+    /// // The inner value was not cloned\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    ///\n+    /// let arc = Arc::new(inner);\n+    /// let arc2 = arc.clone();\n+    /// let inner = Arc::unwrap_or_clone(arc);\n+    /// // Because there were 2 references, we had to clone the inner value.\n+    /// assert!(!ptr::eq(ptr, inner.as_ptr()));\n+    /// // `arc2` is the last reference, so when we unwrap it we get back\n+    /// // the original `String`.\n+    /// let inner = Arc::unwrap_or_clone(arc2);\n+    /// assert!(ptr::eq(ptr, inner.as_ptr()));\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_unwrap_or_clone\", issue = \"none\")]\n+    pub fn unwrap_or_clone(this: Self) -> T {\n+        Arc::try_unwrap(this).unwrap_or_else(|arc| (*arc).clone())\n+    }\n }\n \n impl<T: ?Sized> Arc<T> {"}]}