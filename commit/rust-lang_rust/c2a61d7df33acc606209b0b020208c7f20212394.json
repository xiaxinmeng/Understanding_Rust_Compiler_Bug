{"sha": "c2a61d7df33acc606209b0b020208c7f20212394", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYTYxZDdkZjMzYWNjNjA2MjA5YjBiMDIwMjA4YzdmMjAyMTIzOTQ=", "commit": {"author": {"name": "Jyun-Yan You", "email": "jyyou@cs.nctu.edu.tw", "date": "2013-01-29T17:31:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-03-04T04:02:03Z"}, "message": "rustc: implement MIPS O32 ABI", "tree": {"sha": "e24e89162eb315633119e4252252e86498d1066d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24e89162eb315633119e4252252e86498d1066d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2a61d7df33acc606209b0b020208c7f20212394", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a61d7df33acc606209b0b020208c7f20212394", "html_url": "https://github.com/rust-lang/rust/commit/c2a61d7df33acc606209b0b020208c7f20212394", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2a61d7df33acc606209b0b020208c7f20212394/comments", "author": {"login": "crabtw", "id": 36015, "node_id": "MDQ6VXNlcjM2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/36015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crabtw", "html_url": "https://github.com/crabtw", "followers_url": "https://api.github.com/users/crabtw/followers", "following_url": "https://api.github.com/users/crabtw/following{/other_user}", "gists_url": "https://api.github.com/users/crabtw/gists{/gist_id}", "starred_url": "https://api.github.com/users/crabtw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crabtw/subscriptions", "organizations_url": "https://api.github.com/users/crabtw/orgs", "repos_url": "https://api.github.com/users/crabtw/repos", "events_url": "https://api.github.com/users/crabtw/events{/privacy}", "received_events_url": "https://api.github.com/users/crabtw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5150b9811b520843e7a4905da4e6030b5f7ff9fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5150b9811b520843e7a4905da4e6030b5f7ff9fd", "html_url": "https://github.com/rust-lang/rust/commit/5150b9811b520843e7a4905da4e6030b5f7ff9fd"}], "stats": {"total": 227, "additions": 226, "deletions": 1}, "files": [{"sha": "93c1879eb0f4be89791c790beb42f89a9e849809", "filename": "src/librustc/back/mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2a61d7df33acc606209b0b020208c7f20212394/src%2Flibrustc%2Fback%2Fmips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a61d7df33acc606209b0b020208c7f20212394/src%2Flibrustc%2Fback%2Fmips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fmips.rs?ref=c2a61d7df33acc606209b0b020208c7f20212394", "patch": "@@ -10,7 +10,7 @@\n \n use back::target_strs;\n use driver::session;\n-use session::sess_os_to_meta_os;\n+use driver::session::sess_os_to_meta_os;\n use metadata::loader::meta_section_name;\n \n pub fn get_target_strs(target_os: session::os) -> target_strs::t {"}, {"sha": "4f5e9edb126aa0689a9aaaab26c7b3747a25ee56", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/c2a61d7df33acc606209b0b020208c7f20212394/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a61d7df33acc606209b0b020208c7f20212394/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=c2a61d7df33acc606209b0b020208c7f20212394", "patch": "@@ -0,0 +1,221 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::{ptr, vec, uint};\n+use core::option::*;\n+use core::libc::c_uint;\n+use lib::llvm::{llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double};\n+use lib::llvm::{Struct, Array, Attribute};\n+use lib::llvm::{StructRetAttribute, ByValAttribute};\n+use middle::trans::common::*;\n+use middle::trans::cabi::*;\n+\n+fn align_up_to(off: uint, a: uint) -> uint {\n+    return (off + a - 1u) / a * a;\n+}\n+\n+fn align(off: uint, ty: TypeRef) -> uint {\n+    let a = ty_align(ty);\n+    return align_up_to(off, a);\n+}\n+\n+fn struct_tys(ty: TypeRef) -> ~[TypeRef] {\n+    unsafe {\n+        let n = llvm::LLVMCountStructElementTypes(ty);\n+    if (n == 0) {\n+        return ~[];\n+    }\n+        let mut elts = vec::from_elem(n as uint, ptr::null());\n+        llvm::LLVMGetStructElementTypes(ty,\n+            ptr::to_mut_unsafe_ptr(&mut elts[0]));\n+        return elts;\n+    }\n+}\n+\n+fn ty_align(ty: TypeRef) -> uint {\n+    unsafe {\n+        return match llvm::LLVMGetTypeKind(ty) {\n+            Integer => {\n+                ((llvm::LLVMGetIntTypeWidth(ty) as uint) + 7) / 8\n+            }\n+            Pointer => 4,\n+            Float => 4,\n+            Double => 8,\n+            Struct => {\n+              do vec::foldl(1, struct_tys(ty)) |a, t| {\n+                  uint::max(a, ty_align(*t))\n+              }\n+            }\n+            Array => {\n+                let elt = llvm::LLVMGetElementType(ty);\n+                ty_align(elt)\n+            }\n+            _ => fail!(~\"ty_size: unhandled type\")\n+        };\n+    }\n+}\n+\n+fn ty_size(ty: TypeRef) -> uint {\n+    unsafe {\n+        return match llvm::LLVMGetTypeKind(ty) {\n+            Integer => {\n+                ((llvm::LLVMGetIntTypeWidth(ty) as uint) + 7) / 8\n+            }\n+            Pointer => 4,\n+            Float => 4,\n+            Double => 8,\n+            Struct => {\n+              let size = do vec::foldl(0, struct_tys(ty)) |s, t| {\n+                  align(s, *t) + ty_size(*t)\n+              };\n+              align(size, ty)\n+            }\n+            Array => {\n+              let len = llvm::LLVMGetArrayLength(ty) as uint;\n+              let elt = llvm::LLVMGetElementType(ty);\n+              let eltsz = ty_size(elt);\n+              len * eltsz\n+            }\n+            _ => fail!(~\"ty_size: unhandled type\")\n+        };\n+    }\n+}\n+\n+fn classify_ret_ty(ty: TypeRef) -> (LLVMType, Option<Attribute>) {\n+    return if is_reg_ty(ty) {\n+        (LLVMType { cast: false, ty: ty }, None)\n+    } else {\n+        (LLVMType { cast: false, ty: T_ptr(ty) }, Some(StructRetAttribute))\n+    };\n+}\n+\n+fn classify_arg_ty(ty: TypeRef,\n+                   offset: &mut uint) -> (LLVMType, Option<Attribute>) {\n+    let orig_offset = *offset;\n+    let size = ty_size(ty) * 8;\n+    let mut align = ty_align(ty);\n+\n+    align = uint::min(uint::max(align, 4), 8);\n+    *offset = align_up_to(*offset, align);\n+    *offset += align_up_to(size, align * 8) / 8;\n+\n+    let padding = padding_ty(align, orig_offset);\n+    return if !is_reg_ty(ty) {\n+        (LLVMType {\n+            cast: true,\n+            ty: struct_ty(ty, padding, true)\n+        }, None)\n+    } else if padding.is_some() {\n+        (LLVMType {\n+            cast: true,\n+            ty: struct_ty(ty, padding, false)\n+        }, None)\n+    } else {\n+        (LLVMType { cast: false, ty: ty }, None)\n+    };\n+}\n+\n+fn is_reg_ty(ty: TypeRef) -> bool {\n+    unsafe {\n+        return match llvm::LLVMGetTypeKind(ty) {\n+            Integer\n+            | Pointer\n+            | Float\n+            | Double => true,\n+            _ => false\n+        };\n+    }\n+}\n+\n+fn padding_ty(align: uint, offset: uint) -> Option<TypeRef> {\n+    if ((align - 1 ) & offset) > 0 {\n+        return Some(T_i32());\n+    }\n+\n+    return None;\n+}\n+\n+fn coerce_to_int(size: uint) -> ~[TypeRef] {\n+    let int_ty = T_i32();\n+    let mut args = ~[];\n+\n+    let mut n = size / 32;\n+    while n > 0 {\n+        args.push(int_ty);\n+        n -= 1;\n+    }\n+\n+    let r = size % 32;\n+    if r > 0 {\n+        unsafe {\n+            args.push(llvm::LLVMIntType(r as c_uint))\n+        }\n+    }\n+\n+    return args;\n+}\n+\n+fn struct_ty(ty: TypeRef,\n+             padding: Option<TypeRef>,\n+             coerce: bool) -> TypeRef {\n+    let size = ty_size(ty) * 8;\n+    let mut fields = padding.map_default(~[], |p| ~[*p]);\n+\n+    if coerce {\n+        fields = vec::append(fields, coerce_to_int(size));\n+    } else {\n+        fields.push(ty);\n+    }\n+\n+    return T_struct(fields);\n+}\n+\n+enum MIPS_ABIInfo { MIPS_ABIInfo }\n+\n+impl ABIInfo for MIPS_ABIInfo {\n+    fn compute_info(&self,\n+                    atys: &[TypeRef],\n+                    rty: TypeRef,\n+                    ret_def: bool) -> FnType {\n+        let mut (ret_ty, ret_attr) = if ret_def {\n+            classify_ret_ty(rty)\n+        } else {\n+            (LLVMType { cast: false, ty: T_void() }, None)\n+        };\n+\n+        let sret = ret_attr.is_some();\n+        let mut arg_tys = ~[];\n+        let mut attrs = ~[];\n+        let mut offset = if sret { 4 } else { 0 };\n+\n+        for atys.each() |aty| {\n+            let (ty, attr) = classify_arg_ty(*aty, &mut offset);\n+            arg_tys.push(ty);\n+            attrs.push(attr);\n+        };\n+\n+        if sret {\n+            arg_tys = vec::append(~[ret_ty], arg_tys);\n+            attrs = vec::append(~[ret_attr], attrs);\n+            ret_ty = LLVMType { cast: false, ty: T_void() };\n+        }\n+\n+        return FnType {\n+            arg_tys: arg_tys,\n+            ret_ty: ret_ty,\n+            attrs: attrs,\n+            sret: sret\n+        };\n+    }\n+}\n+\n+pub fn mips_abi_info() -> @ABIInfo {\n+    return @MIPS_ABIInfo as @ABIInfo;\n+}"}, {"sha": "12271f51b35d19db30fe5d779b7b890ade7c1691", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2a61d7df33acc606209b0b020208c7f20212394/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a61d7df33acc606209b0b020208c7f20212394/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=c2a61d7df33acc606209b0b020208c7f20212394", "patch": "@@ -14,6 +14,7 @@ use back::{link, abi};\n use driver::session;\n use driver::session::arch_x86_64;\n use driver::session::arch_arm;\n+use driver::session::arch_mips;\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n use lib::llvm::{Struct, Array, ModuleRef, CallConv, Attribute};\n use lib::llvm::{StructRetAttribute, ByValAttribute};\n@@ -23,6 +24,7 @@ use middle::trans::base::*;\n use middle::trans::cabi;\n use middle::trans::cabi_x86_64::*;\n use middle::trans::cabi_arm;\n+use middle::trans::cabi_mips::*;\n use middle::trans::build::*;\n use middle::trans::callee::*;\n use middle::trans::common::*;\n@@ -48,6 +50,7 @@ fn abi_info(arch: session::arch) -> cabi::ABIInfo {\n     return match arch {\n         arch_x86_64 => x86_64_abi_info(),\n         arch_arm => cabi_arm::abi_info(),\n+        arch_mips => mips_abi_info(),\n         _ => cabi::llvm_abi_info()\n     }\n }"}, {"sha": "8dbc0f12a88cfc158cf960f8392f34ecc8123757", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c2a61d7df33acc606209b0b020208c7f20212394/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c2a61d7df33acc606209b0b020208c7f20212394/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=c2a61d7df33acc606209b0b020208c7f20212394", "patch": "@@ -70,6 +70,7 @@ pub mod middle {\n         pub mod cabi;\n         pub mod cabi_x86_64;\n         pub mod cabi_arm;\n+        pub mod cabi_mips;\n         pub mod foreign;\n         pub mod reflect;\n         pub mod shape;"}]}