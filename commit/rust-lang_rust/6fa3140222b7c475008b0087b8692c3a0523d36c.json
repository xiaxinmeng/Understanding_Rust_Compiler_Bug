{"sha": "6fa3140222b7c475008b0087b8692c3a0523d36c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYTMxNDAyMjJiN2M0NzUwMDhiMDA4N2I4NjkyYzNhMDUyM2QzNmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-18T17:28:02Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-12-18T17:28:02Z"}, "message": "Introduce CodegenCx", "tree": {"sha": "9c0e7236ea95b1acb73f410c67ee6ec1ad2223c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c0e7236ea95b1acb73f410c67ee6ec1ad2223c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fa3140222b7c475008b0087b8692c3a0523d36c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa3140222b7c475008b0087b8692c3a0523d36c", "html_url": "https://github.com/rust-lang/rust/commit/6fa3140222b7c475008b0087b8692c3a0523d36c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fa3140222b7c475008b0087b8692c3a0523d36c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f32e703a8289df44e0df1ec4c9760064085efed", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f32e703a8289df44e0df1ec4c9760064085efed", "html_url": "https://github.com/rust-lang/rust/commit/4f32e703a8289df44e0df1ec4c9760064085efed"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "24a46ef0a988353d7812e2be8d4958fd762ddeeb", "filename": "src/base.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6fa3140222b7c475008b0087b8692c3a0523d36c/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa3140222b7c475008b0087b8692c3a0523d36c/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=6fa3140222b7c475008b0087b8692c3a0523d36c", "patch": "@@ -9,13 +9,11 @@ impl<F: Fn() -> String> Drop for PrintOnPanic<F> {\n     }\n }\n \n-pub fn trans_mono_item<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    module: &mut Module<impl Backend>,\n-    caches: &mut Caches<'tcx>,\n-    ccx: &mut crate::constant::ConstantCx,\n+pub fn trans_mono_item<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n+    cx: &mut crate::CodegenCx<'a, 'clif, 'tcx, B>,\n     mono_item: MonoItem<'tcx>,\n ) {\n+    let tcx = cx.tcx;\n     match mono_item {\n         MonoItem::Fn(inst) => {\n             let _inst_guard =\n@@ -44,30 +42,29 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(\n                 }\n             });\n \n-            trans_fn(tcx, module, ccx, caches, inst);\n+            trans_fn(cx, inst);\n         }\n         MonoItem::Static(def_id) => {\n-            crate::constant::codegen_static(ccx, def_id);\n+            crate::constant::codegen_static(&mut cx.ccx, def_id);\n         }\n         MonoItem::GlobalAsm(node_id) => tcx\n             .sess\n             .fatal(&format!(\"Unimplemented global asm mono item {:?}\", node_id)),\n     }\n }\n \n-fn trans_fn<'a, 'tcx: 'a>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    module: &mut Module<impl Backend>,\n-    constants: &mut crate::constant::ConstantCx,\n-    caches: &mut Caches<'tcx>,\n+fn trans_fn<'a, 'clif, 'tcx: 'a, B: Backend + 'static>(\n+    cx: &mut crate::CodegenCx<'a, 'clif, 'tcx, B>,\n     instance: Instance<'tcx>,\n ) {\n+    let tcx = cx.tcx;\n+\n     // Step 1. Get mir\n     let mir = tcx.instance_mir(instance.def);\n \n     // Step 2. Declare function\n     let (name, sig) = get_function_name_and_sig(tcx, instance);\n-    let func_id = module\n+    let func_id = cx.module\n         .declare_function(&name, Linkage::Export, &sig)\n         .unwrap();\n \n@@ -84,10 +81,10 @@ fn trans_fn<'a, 'tcx: 'a>(\n     }\n \n     // Step 5. Make FunctionCx\n-    let pointer_type = module.target_config().pointer_type();\n+    let pointer_type = cx.module.target_config().pointer_type();\n     let mut fx = FunctionCx {\n         tcx,\n-        module,\n+        module: cx.module,\n         pointer_type,\n \n         instance,\n@@ -98,8 +95,8 @@ fn trans_fn<'a, 'tcx: 'a>(\n         local_map: HashMap::new(),\n \n         comments: HashMap::new(),\n-        constants,\n-        caches,\n+        constants: &mut cx.ccx,\n+        caches: &mut cx.caches,\n \n         top_nop: None,\n     };\n@@ -132,11 +129,11 @@ fn trans_fn<'a, 'tcx: 'a>(\n     verify_func(tcx, writer, &func);\n \n     // Step 9. Define function\n-    caches.context.func = func;\n-    module\n-        .define_function(func_id, &mut caches.context)\n+    cx.caches.context.func = func;\n+    cx.module\n+        .define_function(func_id, &mut cx.caches.context)\n         .unwrap();\n-    caches.context.clear();\n+    cx.caches.context.clear();\n }\n \n fn verify_func(tcx: TyCtxt, writer: crate::pretty_clif::CommentWriter, func: &Function) {"}, {"sha": "29d6522f23dd9ec3038701c667c5348769503a34", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fa3140222b7c475008b0087b8692c3a0523d36c/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa3140222b7c475008b0087b8692c3a0523d36c/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=6fa3140222b7c475008b0087b8692c3a0523d36c", "patch": "@@ -611,6 +611,7 @@ pub fn clif_intcast<'a, 'tcx: 'a>(\n }\n \n pub struct FunctionCx<'a, 'tcx: 'a, B: Backend> {\n+    // FIXME use a reference to `CodegenCx` instead of `tcx`, `module` and `constants` and `caches`\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     pub module: &'a mut Module<B>,\n     pub pointer_type: Type, // Cached from module"}, {"sha": "ec916449d57fb1be5a27e5b9a83a8a9d4fff5034", "filename": "src/lib.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6fa3140222b7c475008b0087b8692c3a0523d36c/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fa3140222b7c475008b0087b8692c3a0523d36c/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6fa3140222b7c475008b0087b8692c3a0523d36c", "patch": "@@ -97,23 +97,45 @@ mod prelude {\n     pub use crate::common::*;\n     pub use crate::trap::*;\n     pub use crate::unimpl::{unimpl, with_unimpl_span};\n-    pub use crate::Caches;\n+    pub use crate::{Caches, CodegenCx};\n }\n \n pub struct Caches<'tcx> {\n     pub context: Context,\n     pub vtables: HashMap<(Ty<'tcx>, ty::PolyExistentialTraitRef<'tcx>), DataId>,\n }\n \n-impl<'tcx> Caches<'tcx> {\n-    fn new() -> Self {\n+impl<'tcx> Default for Caches<'tcx> {\n+    fn default() -> Self {\n         Caches {\n             context: Context::new(),\n             vtables: HashMap::new(),\n         }\n     }\n }\n \n+pub struct CodegenCx<'a, 'clif, 'tcx, B: Backend + 'static> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    module: &'clif mut Module<B>,\n+    ccx: ConstantCx,\n+    caches: Caches<'tcx>,\n+}\n+\n+impl<'a, 'clif, 'tcx, B: Backend + 'static> CodegenCx<'a, 'clif, 'tcx, B> {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, module: &'clif mut Module<B>) -> Self {\n+        CodegenCx {\n+            tcx,\n+            module,\n+            ccx: ConstantCx::default(),\n+            caches: Caches::default(),\n+        }\n+    }\n+\n+    fn finalize(self) {\n+        self.ccx.finalize(self.tcx, self.module);\n+    }\n+}\n+\n struct CraneliftCodegenBackend;\n \n impl CodegenBackend for CraneliftCodegenBackend {\n@@ -369,17 +391,15 @@ fn codegen_mono_items<'a, 'tcx: 'a>(\n     log: &mut Option<File>,\n     mono_items: FxHashMap<MonoItem<'tcx>, (RLinkage, Visibility)>,\n ) {\n+    let mut cx = CodegenCx::new(tcx, module);\n     time(\"codegen mono items\", move || {\n-        let mut caches = Caches::new();\n-        let mut ccx = ConstantCx::default();\n-\n         for (mono_item, (_linkage, _vis)) in mono_items {\n             unimpl::try_unimpl(tcx, log, || {\n-                base::trans_mono_item(tcx, module, &mut caches, &mut ccx, mono_item);\n+                base::trans_mono_item(&mut cx, mono_item);\n             });\n         }\n \n-        ccx.finalize(tcx, module);\n+        cx.finalize();\n     });\n }\n "}]}