{"sha": "1ea6813a61960dc89ceea95fe1cf7d3129aa8687", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYTY4MTNhNjE5NjBkYzg5Y2VlYTk1ZmUxY2Y3ZDMxMjlhYTg2ODc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-06-29T16:47:12Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-06-29T17:20:14Z"}, "message": "mem_categorization: handle type-based paths in variant patterns\n\nThese can't be used in correct programs, but must be handled in order to\nprevent ICEs.\n\nFixes #42880.", "tree": {"sha": "4d7f1079fac72d846109f1fd5bc7738fd9e3fda8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d7f1079fac72d846109f1fd5bc7738fd9e3fda8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ea6813a61960dc89ceea95fe1cf7d3129aa8687", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ea6813a61960dc89ceea95fe1cf7d3129aa8687", "html_url": "https://github.com/rust-lang/rust/commit/1ea6813a61960dc89ceea95fe1cf7d3129aa8687", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ea6813a61960dc89ceea95fe1cf7d3129aa8687/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47faf1d51952ecd9d4c8a7325332fba34fbe00bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/47faf1d51952ecd9d4c8a7325332fba34fbe00bd", "html_url": "https://github.com/rust-lang/rust/commit/47faf1d51952ecd9d4c8a7325332fba34fbe00bd"}], "stats": {"total": 119, "additions": 64, "deletions": 55}, "files": [{"sha": "259bd4f09991590df6ef072868299737e75677b6", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ea6813a61960dc89ceea95fe1cf7d3129aa8687/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea6813a61960dc89ceea95fe1cf7d3129aa8687/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=1ea6813a61960dc89ceea95fe1cf7d3129aa8687", "patch": "@@ -816,7 +816,6 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n     fn walk_pat(&mut self, cmt_discr: mc::cmt<'tcx>, pat: &hir::Pat, match_mode: MatchMode) {\n         debug!(\"walk_pat cmt_discr={:?} pat={:?}\", cmt_discr, pat);\n \n-        let tcx = self.tcx();\n         let ExprUseVisitor { ref mc, ref mut delegate, param_env } = *self;\n         return_if_err!(mc.cat_pattern(cmt_discr.clone(), pat, |cmt_pat, pat| {\n             if let PatKind::Binding(bmode, def_id, ..) = pat.node {\n@@ -864,13 +863,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             match def {\n                 Def::Variant(variant_did) |\n                 Def::VariantCtor(variant_did, ..) => {\n-                    let enum_did = tcx.parent_def_id(variant_did).unwrap();\n-                    let downcast_cmt = if tcx.adt_def(enum_did).is_univariant() {\n-                        cmt_pat\n-                    } else {\n-                        let cmt_pat_ty = cmt_pat.ty;\n-                        mc.cat_downcast(pat, cmt_pat, cmt_pat_ty, variant_did)\n-                    };\n+                    let downcast_cmt = mc.cat_downcast_if_needed(pat, cmt_pat, variant_did);\n \n                     debug!(\"variant downcast_cmt={:?} pat={:?}\", downcast_cmt, pat);\n                     delegate.matched_pat(pat, downcast_cmt, match_mode);"}, {"sha": "5c741eccf83c7e23686efe991b5ee14116f22252", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 45, "deletions": 47, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1ea6813a61960dc89ceea95fe1cf7d3129aa8687/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea6813a61960dc89ceea95fe1cf7d3129aa8687/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1ea6813a61960dc89ceea95fe1cf7d3129aa8687", "patch": "@@ -1032,22 +1032,29 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         ret\n     }\n \n-    pub fn cat_downcast<N:ast_node>(&self,\n-                                    node: &N,\n-                                    base_cmt: cmt<'tcx>,\n-                                    downcast_ty: Ty<'tcx>,\n-                                    variant_did: DefId)\n-                                    -> cmt<'tcx> {\n-        let ret = Rc::new(cmt_ {\n-            id: node.id(),\n-            span: node.span(),\n-            mutbl: base_cmt.mutbl.inherit(),\n-            cat: Categorization::Downcast(base_cmt, variant_did),\n-            ty: downcast_ty,\n-            note: NoteNone\n-        });\n-        debug!(\"cat_downcast ret={:?}\", ret);\n-        ret\n+    pub fn cat_downcast_if_needed<N:ast_node>(&self,\n+                                              node: &N,\n+                                              base_cmt: cmt<'tcx>,\n+                                              variant_did: DefId)\n+                                              -> cmt<'tcx> {\n+        // univariant enums do not need downcasts\n+        let base_did = self.tcx.parent_def_id(variant_did).unwrap();\n+        if !self.tcx.adt_def(base_did).is_univariant() {\n+            let base_ty = base_cmt.ty;\n+            let ret = Rc::new(cmt_ {\n+                id: node.id(),\n+                span: node.span(),\n+                mutbl: base_cmt.mutbl.inherit(),\n+                cat: Categorization::Downcast(base_cmt, variant_did),\n+                ty: base_ty,\n+                note: NoteNone\n+            });\n+            debug!(\"cat_downcast ret={:?}\", ret);\n+            ret\n+        } else {\n+            debug!(\"cat_downcast univariant={:?}\", base_cmt);\n+            base_cmt\n+        }\n     }\n \n     pub fn cat_pattern<F>(&self, cmt: cmt<'tcx>, pat: &hir::Pat, mut op: F) -> McResult<()>\n@@ -1109,45 +1116,23 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n         op(cmt.clone(), pat);\n \n-        // Note: This goes up here (rather than within the PatKind::TupleStruct arm\n-        // alone) because PatKind::Struct can also refer to variants.\n-        let cmt = match pat.node {\n-            PatKind::Path(hir::QPath::Resolved(_, ref path)) |\n-            PatKind::TupleStruct(hir::QPath::Resolved(_, ref path), ..) |\n-            PatKind::Struct(hir::QPath::Resolved(_, ref path), ..) => {\n-                match path.def {\n-                    Def::Err => {\n-                        debug!(\"access to unresolvable pattern {:?}\", pat);\n-                        return Err(())\n-                    }\n-                    Def::Variant(variant_did) |\n-                    Def::VariantCtor(variant_did, ..) => {\n-                        // univariant enums do not need downcasts\n-                        let enum_did = self.tcx.parent_def_id(variant_did).unwrap();\n-                        if !self.tcx.adt_def(enum_did).is_univariant() {\n-                            self.cat_downcast(pat, cmt.clone(), cmt.ty, variant_did)\n-                        } else {\n-                            cmt\n-                        }\n-                    }\n-                    _ => cmt\n-                }\n-            }\n-            _ => cmt\n-        };\n-\n         match pat.node {\n           PatKind::TupleStruct(ref qpath, ref subpats, ddpos) => {\n             let def = self.tables.qpath_def(qpath, pat.id);\n-            let expected_len = match def {\n+            let (cmt, expected_len) = match def {\n+                Def::Err => {\n+                    debug!(\"access to unresolvable pattern {:?}\", pat);\n+                    return Err(())\n+                }\n                 Def::VariantCtor(def_id, CtorKind::Fn) => {\n                     let enum_def = self.tcx.parent_def_id(def_id).unwrap();\n-                    self.tcx.adt_def(enum_def).variant_with_id(def_id).fields.len()\n+                    (self.cat_downcast_if_needed(pat, cmt, def_id),\n+                     self.tcx.adt_def(enum_def).variant_with_id(def_id).fields.len())\n                 }\n                 Def::StructCtor(_, CtorKind::Fn) => {\n                     match self.pat_ty(&pat)?.sty {\n                         ty::TyAdt(adt_def, _) => {\n-                            adt_def.struct_variant().fields.len()\n+                            (cmt, adt_def.struct_variant().fields.len())\n                         }\n                         ref ty => {\n                             span_bug!(pat.span, \"tuple struct pattern unexpected type {:?}\", ty);\n@@ -1168,8 +1153,21 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n           }\n \n-          PatKind::Struct(_, ref field_pats, _) => {\n+          PatKind::Struct(ref qpath, ref field_pats, _) => {\n             // {f1: p1, ..., fN: pN}\n+            let def = self.tables.qpath_def(qpath, pat.id);\n+            let cmt = match def {\n+                Def::Err => {\n+                    debug!(\"access to unresolvable pattern {:?}\", pat);\n+                    return Err(())\n+                },\n+                Def::Variant(variant_did) |\n+                Def::VariantCtor(variant_did, ..) => {\n+                    self.cat_downcast_if_needed(pat, cmt, variant_did)\n+                },\n+                _ => cmt\n+            };\n+\n             for fp in field_pats {\n                 let field_ty = self.pat_ty(&fp.node.pat)?; // see (*2)\n                 let cmt_field = self.cat_field(pat, cmt.clone(), fp.node.name, field_ty);"}, {"sha": "ebb1ec425d1da8bc3423704a50602255591432d9", "filename": "src/test/compile-fail/issue-42880.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1ea6813a61960dc89ceea95fe1cf7d3129aa8687/src%2Ftest%2Fcompile-fail%2Fissue-42880.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ea6813a61960dc89ceea95fe1cf7d3129aa8687/src%2Ftest%2Fcompile-fail%2Fissue-42880.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-42880.rs?ref=1ea6813a61960dc89ceea95fe1cf7d3129aa8687", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type Value = String;\n+\n+fn main() {\n+    let f = |&Value::String(_)| (); //~ ERROR no associated item named\n+\n+    let vec: Vec<Value> = Vec::new();\n+    vec.last().map(f);\n+}"}]}