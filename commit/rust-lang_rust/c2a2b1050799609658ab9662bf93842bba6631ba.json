{"sha": "c2a2b1050799609658ab9662bf93842bba6631ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYTJiMTA1MDc5OTYwOTY1OGFiOTY2MmJmOTM4NDJiYmE2NjMxYmE=", "commit": {"author": {"name": "GlacJAY", "email": "glacjay@gmail.com", "date": "2015-02-22T03:38:35Z"}, "committer": {"name": "GlacJAY", "email": "glacjay@gmail.com", "date": "2015-02-22T03:38:35Z"}, "message": "shift int/uint tests around to avoid code repetition", "tree": {"sha": "9f081e7732cb3558cc5dae74a7f995cff268345b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f081e7732cb3558cc5dae74a7f995cff268345b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2a2b1050799609658ab9662bf93842bba6631ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a2b1050799609658ab9662bf93842bba6631ba", "html_url": "https://github.com/rust-lang/rust/commit/c2a2b1050799609658ab9662bf93842bba6631ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2a2b1050799609658ab9662bf93842bba6631ba/comments", "author": {"login": "glacjay", "id": 292719, "node_id": "MDQ6VXNlcjI5MjcxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/292719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacjay", "html_url": "https://github.com/glacjay", "followers_url": "https://api.github.com/users/glacjay/followers", "following_url": "https://api.github.com/users/glacjay/following{/other_user}", "gists_url": "https://api.github.com/users/glacjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacjay/subscriptions", "organizations_url": "https://api.github.com/users/glacjay/orgs", "repos_url": "https://api.github.com/users/glacjay/repos", "events_url": "https://api.github.com/users/glacjay/events{/privacy}", "received_events_url": "https://api.github.com/users/glacjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "glacjay", "id": 292719, "node_id": "MDQ6VXNlcjI5MjcxOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/292719?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacjay", "html_url": "https://github.com/glacjay", "followers_url": "https://api.github.com/users/glacjay/followers", "following_url": "https://api.github.com/users/glacjay/following{/other_user}", "gists_url": "https://api.github.com/users/glacjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacjay/subscriptions", "organizations_url": "https://api.github.com/users/glacjay/orgs", "repos_url": "https://api.github.com/users/glacjay/repos", "events_url": "https://api.github.com/users/glacjay/events{/privacy}", "received_events_url": "https://api.github.com/users/glacjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/522d09dfecbeca1595f25ac58c6d0178bbd21d7d", "html_url": "https://github.com/rust-lang/rust/commit/522d09dfecbeca1595f25ac58c6d0178bbd21d7d"}], "stats": {"total": 128, "additions": 66, "deletions": 62}, "files": [{"sha": "10768723c716f42d159f02ad222388c861eb61f8", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c2a2b1050799609658ab9662bf93842bba6631ba/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a2b1050799609658ab9662bf93842bba6631ba/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=c2a2b1050799609658ab9662bf93842bba6631ba", "patch": "@@ -1751,6 +1751,72 @@ mod tests {\n         assert_pow!((8,     3 ) => 512);\n         assert_pow!((2u64,   50) => 1125899906842624);\n     }\n+\n+    #[test]\n+    fn test_uint_to_str_overflow() {\n+        let mut u8_val: u8 = 255_u8;\n+        assert_eq!(u8_val.to_string(), \"255\");\n+\n+        u8_val += 1 as u8;\n+        assert_eq!(u8_val.to_string(), \"0\");\n+\n+        let mut u16_val: u16 = 65_535_u16;\n+        assert_eq!(u16_val.to_string(), \"65535\");\n+\n+        u16_val += 1 as u16;\n+        assert_eq!(u16_val.to_string(), \"0\");\n+\n+        let mut u32_val: u32 = 4_294_967_295_u32;\n+        assert_eq!(u32_val.to_string(), \"4294967295\");\n+\n+        u32_val += 1 as u32;\n+        assert_eq!(u32_val.to_string(), \"0\");\n+\n+        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n+        assert_eq!(u64_val.to_string(), \"18446744073709551615\");\n+\n+        u64_val += 1 as u64;\n+        assert_eq!(u64_val.to_string(), \"0\");\n+    }\n+\n+    fn from_str<T: ::str::FromStr>(t: &str) -> Option<T> {\n+        ::str::FromStr::from_str(t).ok()\n+    }\n+\n+    #[test]\n+    fn test_uint_from_str_overflow() {\n+        let mut u8_val: u8 = 255_u8;\n+        assert_eq!(from_str::<u8>(\"255\"), Some(u8_val));\n+        assert_eq!(from_str::<u8>(\"256\"), None);\n+\n+        u8_val += 1 as u8;\n+        assert_eq!(from_str::<u8>(\"0\"), Some(u8_val));\n+        assert_eq!(from_str::<u8>(\"-1\"), None);\n+\n+        let mut u16_val: u16 = 65_535_u16;\n+        assert_eq!(from_str::<u16>(\"65535\"), Some(u16_val));\n+        assert_eq!(from_str::<u16>(\"65536\"), None);\n+\n+        u16_val += 1 as u16;\n+        assert_eq!(from_str::<u16>(\"0\"), Some(u16_val));\n+        assert_eq!(from_str::<u16>(\"-1\"), None);\n+\n+        let mut u32_val: u32 = 4_294_967_295_u32;\n+        assert_eq!(from_str::<u32>(\"4294967295\"), Some(u32_val));\n+        assert_eq!(from_str::<u32>(\"4294967296\"), None);\n+\n+        u32_val += 1 as u32;\n+        assert_eq!(from_str::<u32>(\"0\"), Some(u32_val));\n+        assert_eq!(from_str::<u32>(\"-1\"), None);\n+\n+        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n+        assert_eq!(from_str::<u64>(\"18446744073709551615\"), Some(u64_val));\n+        assert_eq!(from_str::<u64>(\"18446744073709551616\"), None);\n+\n+        u64_val += 1 as u64;\n+        assert_eq!(from_str::<u64>(\"0\"), Some(u64_val));\n+        assert_eq!(from_str::<u64>(\"-1\"), None);\n+    }\n }\n \n "}, {"sha": "c9e6a8f66d1d25cb01e50a4a67c9f20873cdfbbb", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c2a2b1050799609658ab9662bf93842bba6631ba/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a2b1050799609658ab9662bf93842bba6631ba/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=c2a2b1050799609658ab9662bf93842bba6631ba", "patch": "@@ -48,68 +48,6 @@ mod tests {\n         assert_eq!(FromStrRadix::from_str_radix(\"Z\", 10).ok(), None::<$T>);\n         assert_eq!(FromStrRadix::from_str_radix(\"_\", 2).ok(), None::<$T>);\n     }\n-\n-    #[test]\n-    fn test_uint_to_str_overflow() {\n-        let mut u8_val: u8 = 255_u8;\n-        assert_eq!(u8_val.to_string(), \"255\");\n-\n-        u8_val += 1 as u8;\n-        assert_eq!(u8_val.to_string(), \"0\");\n-\n-        let mut u16_val: u16 = 65_535_u16;\n-        assert_eq!(u16_val.to_string(), \"65535\");\n-\n-        u16_val += 1 as u16;\n-        assert_eq!(u16_val.to_string(), \"0\");\n-\n-        let mut u32_val: u32 = 4_294_967_295_u32;\n-        assert_eq!(u32_val.to_string(), \"4294967295\");\n-\n-        u32_val += 1 as u32;\n-        assert_eq!(u32_val.to_string(), \"0\");\n-\n-        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n-        assert_eq!(u64_val.to_string(), \"18446744073709551615\");\n-\n-        u64_val += 1 as u64;\n-        assert_eq!(u64_val.to_string(), \"0\");\n-    }\n-\n-    #[test]\n-    fn test_uint_from_str_overflow() {\n-        let mut u8_val: u8 = 255_u8;\n-        assert_eq!(from_str::<u8>(\"255\"), Some(u8_val));\n-        assert_eq!(from_str::<u8>(\"256\"), None);\n-\n-        u8_val += 1 as u8;\n-        assert_eq!(from_str::<u8>(\"0\"), Some(u8_val));\n-        assert_eq!(from_str::<u8>(\"-1\"), None);\n-\n-        let mut u16_val: u16 = 65_535_u16;\n-        assert_eq!(from_str::<u16>(\"65535\"), Some(u16_val));\n-        assert_eq!(from_str::<u16>(\"65536\"), None);\n-\n-        u16_val += 1 as u16;\n-        assert_eq!(from_str::<u16>(\"0\"), Some(u16_val));\n-        assert_eq!(from_str::<u16>(\"-1\"), None);\n-\n-        let mut u32_val: u32 = 4_294_967_295_u32;\n-        assert_eq!(from_str::<u32>(\"4294967295\"), Some(u32_val));\n-        assert_eq!(from_str::<u32>(\"4294967296\"), None);\n-\n-        u32_val += 1 as u32;\n-        assert_eq!(from_str::<u32>(\"0\"), Some(u32_val));\n-        assert_eq!(from_str::<u32>(\"-1\"), None);\n-\n-        let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n-        assert_eq!(from_str::<u64>(\"18446744073709551615\"), Some(u64_val));\n-        assert_eq!(from_str::<u64>(\"18446744073709551616\"), None);\n-\n-        u64_val += 1 as u64;\n-        assert_eq!(from_str::<u64>(\"0\"), Some(u64_val));\n-        assert_eq!(from_str::<u64>(\"-1\"), None);\n-    }\n }\n \n ) }"}]}