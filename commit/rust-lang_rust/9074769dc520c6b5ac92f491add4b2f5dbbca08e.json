{"sha": "9074769dc520c6b5ac92f491add4b2f5dbbca08e", "node_id": "C_kwDOAAsO6NoAKDkwNzQ3NjlkYzUyMGM2YjVhYzkyZjQ5MWFkZDRiMmY1ZGJiY2EwOGU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-20T06:51:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-20T06:51:02Z"}, "message": "Rollup merge of #111743 - nnethercote:improve-cgu-merging-debug-output, r=lqd\n\nImprove cgu merging debug output\n\nr? ```@lqd```", "tree": {"sha": "903eb5845b46b5310766e413dad65eb534a2be1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/903eb5845b46b5310766e413dad65eb534a2be1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9074769dc520c6b5ac92f491add4b2f5dbbca08e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkaG3WCRBK7hj4Ov3rIwAA/AMIAI9L5lXI6TdIwKmDMkwpUOma\ntHPzTYlqB+oSVMuSfnorTEn+bv7W/IMELIYfOCXWK8VIs7//dYbQ7s9Ic7QKhJsX\nWq/AMggP1sUprzcabNlKP/CGKOTYJ5SSxK0DV8uANGk/0aXE13ka4Yau3pu4+E6q\nQWXZjd8DpBl7nl9qKf4rqL7Ovc9n31WasugyNLSZvsCcYtn43pDK8qi/eJV7qp/l\n0nRf1lstX76bfAheK7SIfIOEU3zw8P1bhn49V2dVu/8XLFv8LEfCo8+ZGh8VIDQQ\noOxhA5A1KQgg9YJVPj5m2hh/k8YRIeu7HT7blbcvBU0YTyldYpXB9l1tsDT6YzU=\n=Xo/U\n-----END PGP SIGNATURE-----\n", "payload": "tree 903eb5845b46b5310766e413dad65eb534a2be1d\nparent c453b48fd8d2ef0721b470ad72f261e3bca5a50d\nparent 1bb957efc6ac69b0b19af282c51e04ef70f4233c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684565462 +0530\ncommitter GitHub <noreply@github.com> 1684565462 +0530\n\nRollup merge of #111743 - nnethercote:improve-cgu-merging-debug-output, r=lqd\n\nImprove cgu merging debug output\n\nr? ```@lqd```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9074769dc520c6b5ac92f491add4b2f5dbbca08e", "html_url": "https://github.com/rust-lang/rust/commit/9074769dc520c6b5ac92f491add4b2f5dbbca08e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9074769dc520c6b5ac92f491add4b2f5dbbca08e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c453b48fd8d2ef0721b470ad72f261e3bca5a50d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c453b48fd8d2ef0721b470ad72f261e3bca5a50d", "html_url": "https://github.com/rust-lang/rust/commit/c453b48fd8d2ef0721b470ad72f261e3bca5a50d"}, {"sha": "1bb957efc6ac69b0b19af282c51e04ef70f4233c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bb957efc6ac69b0b19af282c51e04ef70f4233c", "html_url": "https://github.com/rust-lang/rust/commit/1bb957efc6ac69b0b19af282c51e04ef70f4233c"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "eafe57a0c02077b5b202671d193bfd75f3eecd1c", "filename": "compiler/rustc_monomorphize/src/partitioning/mod.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9074769dc520c6b5ac92f491add4b2f5dbbca08e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9074769dc520c6b5ac92f491add4b2f5dbbca08e/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fmod.rs?ref=9074769dc520c6b5ac92f491add4b2f5dbbca08e", "patch": "@@ -250,13 +250,13 @@ where\n         cgu.create_size_estimate(tcx);\n     }\n \n-    debug_dump(tcx, \"INITIAL PARTITIONING:\", initial_partitioning.codegen_units.iter());\n+    debug_dump(tcx, \"INITIAL PARTITIONING\", &initial_partitioning.codegen_units);\n \n     // Merge until we have at most `max_cgu_count` codegen units.\n     {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_merge_cgus\");\n         partitioner.merge_codegen_units(cx, &mut initial_partitioning);\n-        debug_dump(tcx, \"POST MERGING:\", initial_partitioning.codegen_units.iter());\n+        debug_dump(tcx, \"POST MERGING\", &initial_partitioning.codegen_units);\n     }\n \n     // In the next step, we use the inlining map to determine which additional\n@@ -272,7 +272,7 @@ where\n         cgu.create_size_estimate(tcx);\n     }\n \n-    debug_dump(tcx, \"POST INLINING:\", post_inlining.codegen_units.iter());\n+    debug_dump(tcx, \"POST INLINING\", &post_inlining.codegen_units);\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n@@ -322,6 +322,8 @@ where\n \n     result.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n \n+    debug_dump(tcx, \"FINAL\", &result);\n+\n     result\n }\n \n@@ -346,33 +348,37 @@ struct PostInliningPartitioning<'tcx> {\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n }\n \n-fn debug_dump<'a, 'tcx, I>(tcx: TyCtxt<'tcx>, label: &str, cgus: I)\n-where\n-    I: Iterator<Item = &'a CodegenUnit<'tcx>>,\n-    'tcx: 'a,\n-{\n+fn debug_dump<'a, 'tcx: 'a>(tcx: TyCtxt<'tcx>, label: &str, cgus: &[CodegenUnit<'tcx>]) {\n     let dump = move || {\n         use std::fmt::Write;\n \n+        let num_cgus = cgus.len();\n+        let max = cgus.iter().map(|cgu| cgu.size_estimate()).max().unwrap();\n+        let min = cgus.iter().map(|cgu| cgu.size_estimate()).min().unwrap();\n+        let ratio = max as f64 / min as f64;\n+\n         let s = &mut String::new();\n-        let _ = writeln!(s, \"{label}\");\n+        let _ = writeln!(\n+            s,\n+            \"{label} ({num_cgus} CodegenUnits, max={max}, min={min}, max/min={ratio:.1}):\"\n+        );\n         for cgu in cgus {\n             let _ =\n-                writeln!(s, \"CodegenUnit {} estimated size {} :\", cgu.name(), cgu.size_estimate());\n+                writeln!(s, \"CodegenUnit {} estimated size {}:\", cgu.name(), cgu.size_estimate());\n \n             for (mono_item, linkage) in cgu.items() {\n                 let symbol_name = mono_item.symbol_name(tcx).name;\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map_or(\"<no hash>\", |i| &symbol_name[i..]);\n \n-                let _ = writeln!(\n+                let _ = with_no_trimmed_paths!(writeln!(\n                     s,\n                     \" - {} [{:?}] [{}] estimated size {}\",\n                     mono_item,\n                     linkage,\n                     symbol_hash,\n                     mono_item.size_estimate(tcx)\n-                );\n+                ));\n             }\n \n             let _ = writeln!(s);"}]}