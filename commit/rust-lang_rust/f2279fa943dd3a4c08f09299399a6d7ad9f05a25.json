{"sha": "f2279fa943dd3a4c08f09299399a6d7ad9f05a25", "node_id": "C_kwDOAAsO6NoAKGYyMjc5ZmE5NDNkZDNhNGMwOGYwOTI5OTM5OWE2ZDdhZDlmMDVhMjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-30T13:16:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-30T13:16:57Z"}, "message": "Auto merge of #2282 - rust-lang:no_std, r=RalfJung\n\nSupport no-std targets and test it in CI\n\ncc `@jamesmunns`\n\nThis is a bit annoying as you need to have `MIRI_NO_STD=1` set at all times, but it works \u2122\ufe0f\n\nOnce libstd's `restricted_std` feature becomes more usable, we can probably do away with that env var.\n\nI also added a test to CI to make sure it keeps working. This test only builds libcore and runs a single test, so it's pretty fast.", "tree": {"sha": "800dc14e7b55fab6151722d386927744f6dbbae3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/800dc14e7b55fab6151722d386927744f6dbbae3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2279fa943dd3a4c08f09299399a6d7ad9f05a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2279fa943dd3a4c08f09299399a6d7ad9f05a25", "html_url": "https://github.com/rust-lang/rust/commit/f2279fa943dd3a4c08f09299399a6d7ad9f05a25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f50296309850e20f54732c51c0d9593e1529e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f50296309850e20f54732c51c0d9593e1529e7a", "html_url": "https://github.com/rust-lang/rust/commit/9f50296309850e20f54732c51c0d9593e1529e7a"}, {"sha": "a9f9d48b1a071dd067bdd17bd83d0a06ad2ab923", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f9d48b1a071dd067bdd17bd83d0a06ad2ab923", "html_url": "https://github.com/rust-lang/rust/commit/a9f9d48b1a071dd067bdd17bd83d0a06ad2ab923"}], "stats": {"total": 52, "additions": 44, "deletions": 8}, "files": [{"sha": "7dfa9d73120f5f91922f2d9b69cda7acc3ef190b", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=f2279fa943dd3a4c08f09299399a6d7ad9f05a25", "patch": "@@ -71,6 +71,16 @@ and you can (cross-)run the entire test suite using:\n MIRI_TEST_TARGET=i686-unknown-linux-gnu ./miri test\n ```\n \n+If your target doesn't support libstd, you can run miri with\n+\n+```\n+MIRI_NO_STD=1 MIRI_TEST_TARGET=thumbv7em-none-eabihf ./miri test tests/fail/alloc/no_global_allocator.rs\n+MIRI_NO_STD=1 ./miri run tests/pass/no_std.rs --target thumbv7em-none-eabihf\n+```\n+\n+to avoid attempting (and failing) to build libstd. Note that almost no tests will pass\n+this way, but you can run individual tests.\n+\n `./miri test FILTER` only runs those tests that contain `FILTER` in their\n filename (including the base directory, e.g. `./miri test fail` will run all\n compile-fail tests)."}, {"sha": "2d9609fb0b706eab22b2e6944e13e26814179d86", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f2279fa943dd3a4c08f09299399a6d7ad9f05a25", "patch": "@@ -419,6 +419,8 @@ Moreover, Miri recognizes some environment variables:\n * `MIRI_TEST_TARGET` (recognized by the test suite) indicates which target\n   architecture to test against.  `miri` and `cargo miri` accept the `--target`\n   flag for the same purpose.\n+* `MIRI_NO_STD` (recognized by `cargo miri` and the test suite) makes sure that the target's\n+  sysroot is built without libstd. This allows testing and running no_std programs.\n * `MIRI_BLESS` (recognized by the test suite) overwrite all `stderr` and `stdout` files\n   instead of checking whether the output matches.\n * `MIRI_SKIP_UI_CHECKS` (recognized by the test suite) don't check whether the"}, {"sha": "4c9f3aabaab49eb1518eb25142f94edc4c089b5c", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=f2279fa943dd3a4c08f09299399a6d7ad9f05a25", "patch": "@@ -398,20 +398,22 @@ fn setup(subcommand: MiriCommand) {\n     if !dir.exists() {\n         fs::create_dir_all(&dir).unwrap();\n     }\n-    // The interesting bit: Xargo.toml\n-    File::create(dir.join(\"Xargo.toml\"))\n-        .unwrap()\n-        .write_all(\n-            br#\"\n+    let mut xargo_toml = File::create(dir.join(\"Xargo.toml\")).unwrap();\n+    if std::env::var_os(\"MIRI_NO_STD\").is_none() {\n+        // The interesting bit: Xargo.toml (only needs content if we actually need std)\n+        xargo_toml\n+            .write_all(\n+                br#\"\n [dependencies.std]\n default_features = false\n # We support unwinding, so enable that panic runtime.\n features = [\"panic_unwind\", \"backtrace\"]\n \n [dependencies.test]\n \"#,\n-        )\n-        .unwrap();\n+            )\n+            .unwrap();\n+    }\n     // The boring bits: a dummy project for xargo.\n     // FIXME: With xargo-check, can we avoid doing this?\n     File::create(dir.join(\"Cargo.toml\"))\n@@ -428,7 +430,7 @@ path = \"lib.rs\"\n \"#,\n         )\n         .unwrap();\n-    File::create(dir.join(\"lib.rs\")).unwrap();\n+    File::create(dir.join(\"lib.rs\")).unwrap().write_all(b\"#![no_std]\").unwrap();\n \n     // Determine architectures.\n     // We always need to set a target so rustc bootstrap can tell apart host from target crates."}, {"sha": "e3a106308592cbeec12a8b8f1f93a3285507e2c7", "filename": "ci.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=f2279fa943dd3a4c08f09299399a6d7ad9f05a25", "patch": "@@ -61,6 +61,7 @@ case $HOST_TARGET in\n     MIRI_TEST_TARGET=aarch64-apple-darwin run_tests\n     MIRI_TEST_TARGET=i686-pc-windows-msvc run_tests\n     MIRI_TEST_TARGET=x86_64-unknown-freebsd run_tests_minimal hello integer vec\n+    MIRI_NO_STD=1 ./miri run tests/pass/no_std.rs --target thumbv7em-none-eabihf # no_std embedded architecture minimal test\n     ;;\n   x86_64-apple-darwin)\n     MIRI_TEST_TARGET=mips64-unknown-linux-gnuabi64 run_tests # big-endian architecture"}, {"sha": "6808dab8143f4496058de37e496c72d28323e161", "filename": "tests/pass/no_std.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/tests%2Fpass%2Fno_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2279fa943dd3a4c08f09299399a6d7ad9f05a25/tests%2Fpass%2Fno_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fno_std.rs?ref=f2279fa943dd3a4c08f09299399a6d7ad9f05a25", "patch": "@@ -0,0 +1,21 @@\n+#![feature(lang_items, start)]\n+#![no_std]\n+// windows tls dtors go through libstd right now, thus this test\n+// cannot pass. When windows tls dtors go through the special magic\n+// windows linker section, we can run this test on windows again.\n+// ignore-windows\n+\n+#[start]\n+fn start(_: isize, _: *const *const u8) -> isize {\n+    for _ in 0..10 {}\n+\n+    0\n+}\n+\n+#[panic_handler]\n+fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n+    loop {}\n+}\n+\n+#[lang = \"eh_personality\"]\n+fn eh_personality() {}"}]}