{"sha": "2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNzEzNzZmYjIyNDY2MWZkOGI3ZTVlNTc4ODIxN2U4ZmU5ZTVlY2M=", "commit": {"author": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-05T02:36:51Z"}, "committer": {"name": "Gus Wynn", "email": "guswynn@gmail.com", "date": "2021-09-11T17:45:17Z"}, "message": "must_not_suspend impl", "tree": {"sha": "71fcff7c7511d1bd2c7d5a9802a8bfaea75e09f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71fcff7c7511d1bd2c7d5a9802a8bfaea75e09f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "html_url": "https://github.com/rust-lang/rust/commit/2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/comments", "author": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "guswynn", "id": 5404303, "node_id": "MDQ6VXNlcjU0MDQzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5404303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/guswynn", "html_url": "https://github.com/guswynn", "followers_url": "https://api.github.com/users/guswynn/followers", "following_url": "https://api.github.com/users/guswynn/following{/other_user}", "gists_url": "https://api.github.com/users/guswynn/gists{/gist_id}", "starred_url": "https://api.github.com/users/guswynn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/guswynn/subscriptions", "organizations_url": "https://api.github.com/users/guswynn/orgs", "repos_url": "https://api.github.com/users/guswynn/repos", "events_url": "https://api.github.com/users/guswynn/events{/privacy}", "received_events_url": "https://api.github.com/users/guswynn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d2a410ff78247c418e28b69f7cad02bdd2168d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d2a410ff78247c418e28b69f7cad02bdd2168d6", "html_url": "https://github.com/rust-lang/rust/commit/5d2a410ff78247c418e28b69f7cad02bdd2168d6"}], "stats": {"total": 592, "additions": 587, "deletions": 5}, "files": [{"sha": "66569270bd21ec3c4555948218b8b9d16f79f013", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -679,6 +679,10 @@ declare_features! (\n     /// Allows `let...else` statements.\n     (active, let_else, \"1.56.0\", Some(87335), None),\n \n+    /// Allows `#[must_not_suspend]`.\n+    (active, must_not_suspend, \"1.56.0\", Some(83310), None),\n+\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "928a7eb794bd1afb647c7abe70b133ecb6860068", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -202,6 +202,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(forbid, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n     ungated!(deny, Normal, template!(List: r#\"lint1, lint2, ..., /*opt*/ reason = \"...\"\"#)),\n     ungated!(must_use, Normal, template!(Word, NameValueStr: \"reason\")),\n+    gated!(\n+        must_not_suspend, Normal, template!(Word, NameValueStr: \"reason\"), must_not_suspend,\n+        experimental!(must_not_suspend)\n+    ),\n     // FIXME(#14407)\n     ungated!(\n         deprecated, Normal,"}, {"sha": "10285272130cc2626ae7a53537a6a1d9858b9083", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -298,6 +298,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         UNUSED_LABELS,\n         UNUSED_PARENS,\n         UNUSED_BRACES,\n+        MUST_NOT_SUSPEND,\n         REDUNDANT_SEMICOLONS\n     );\n "}, {"sha": "386435034b6aca77e235578dc6e60d9bd004d19f", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -314,6 +314,13 @@ declare_lint! {\n     \"imports that are never used\"\n }\n \n+declare_lint! {\n+    /// [the reference]: https://doc.rust-lang.org/reference/attributes/diagnostics.html#the-must_use-attribute\n+    pub MUST_NOT_SUSPEND,\n+    Warn,\n+    \"Use of a `#[must_not_suspend]` value across a yield point\",\n+}\n+\n declare_lint! {\n     /// The `unused_extern_crates` lint guards against `extern crate` items\n     /// that are never used.\n@@ -2993,6 +3000,7 @@ declare_lint_pass! {\n         CENUM_IMPL_DROP_CAST,\n         CONST_EVALUATABLE_UNCHECKED,\n         INEFFECTIVE_UNSTABLE_TRAIT_IMPL,\n+        MUST_NOT_SUSPEND,\n         UNINHABITED_STATIC,\n         FUNCTION_ITEM_REFERENCES,\n         USELESS_DEPRECATED,"}, {"sha": "a31f3fe281ee9918039793addf2af3ca75f17125", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -104,6 +104,7 @@ impl CheckAttrVisitor<'tcx> {\n                 sym::default_method_body_is_const => {\n                     self.check_default_method_body_is_const(attr, span, target)\n                 }\n+                sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1014,6 +1015,21 @@ impl CheckAttrVisitor<'tcx> {\n         is_valid\n     }\n \n+    /// Checks if `#[must_not_suspend]` is applied to a function. Returns `true` if valid.\n+    fn check_must_not_suspend(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(attr.span, \"`must_not_suspend` attribute should be applied to a struct, enum, `impl Trait`, or `dyn Trait`\")\n+                        .span_label(*span, \"is a function\")\n+                        .emit();\n+                false\n+            }\n+            _ => true,\n+        }\n+    }\n+\n     /// Checks if `#[cold]` is applied to a non-function. Returns `true` if valid.\n     fn check_cold(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) {\n         match target {"}, {"sha": "eecbb9a9cfadcc12bf681b9623c9df6cd18f1ea8", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -836,6 +836,7 @@ symbols! {\n         mul,\n         mul_assign,\n         mul_with_overflow,\n+        must_not_suspend,\n         must_use,\n         mut_ptr,\n         mut_slice_ptr,"}, {"sha": "c5efc30a7c2d492888280d30a6e97ca4aa2194c3", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 304, "deletions": 5, "changes": 309, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -5,16 +5,19 @@\n \n use super::FnCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexSet};\n+use rustc_errors::pluralize;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::hir_id::HirIdSet;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind};\n use rustc_middle::middle::region::{self, YieldData};\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use smallvec::SmallVec;\n+use tracing::debug;\n \n struct InteriorVisitor<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n@@ -36,6 +39,7 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n     fn record(\n         &mut self,\n         ty: Ty<'tcx>,\n+        hir_id: HirId,\n         scope: Option<region::Scope>,\n         expr: Option<&'tcx Expr<'tcx>>,\n         source_span: Span,\n@@ -117,6 +121,20 @@ impl<'a, 'tcx> InteriorVisitor<'a, 'tcx> {\n             } else {\n                 // Insert the type into the ordered set.\n                 let scope_span = scope.map(|s| s.span(self.fcx.tcx, self.region_scope_tree));\n+\n+                check_must_not_suspend_ty(\n+                    self.fcx,\n+                    ty::ParamEnv::empty(),\n+                    ty,\n+                    hir_id,\n+                    expr,\n+                    source_span,\n+                    yield_data.span,\n+                    \"\",\n+                    \"\",\n+                    1,\n+                );\n+\n                 self.types.insert(ty::GeneratorInteriorTypeCause {\n                     span: source_span,\n                     ty: &ty,\n@@ -290,7 +308,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         if let PatKind::Binding(..) = pat.kind {\n             let scope = self.region_scope_tree.var_scope(pat.hir_id.local_id);\n             let ty = self.fcx.typeck_results.borrow().pat_ty(pat);\n-            self.record(ty, Some(scope), None, pat.span, false);\n+            self.record(ty, pat.hir_id, Some(scope), None, pat.span, false);\n         }\n     }\n \n@@ -342,7 +360,14 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // If there are adjustments, then record the final type --\n         // this is the actual value that is being produced.\n         if let Some(adjusted_ty) = self.fcx.typeck_results.borrow().expr_ty_adjusted_opt(expr) {\n-            self.record(adjusted_ty, scope, Some(expr), expr.span, guard_borrowing_from_pattern);\n+            self.record(\n+                adjusted_ty,\n+                expr.hir_id,\n+                scope,\n+                Some(expr),\n+                expr.span,\n+                guard_borrowing_from_pattern,\n+            );\n         }\n \n         // Also record the unadjusted type (which is the only type if\n@@ -380,9 +405,23 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                     tcx.mk_region(ty::RegionKind::ReErased),\n                     ty::TypeAndMut { ty, mutbl: hir::Mutability::Not },\n                 );\n-                self.record(ref_ty, scope, Some(expr), expr.span, guard_borrowing_from_pattern);\n+                self.record(\n+                    ref_ty,\n+                    expr.hir_id,\n+                    scope,\n+                    Some(expr),\n+                    expr.span,\n+                    guard_borrowing_from_pattern,\n+                );\n             }\n-            self.record(ty, scope, Some(expr), expr.span, guard_borrowing_from_pattern);\n+            self.record(\n+                ty,\n+                expr.hir_id,\n+                scope,\n+                Some(expr),\n+                expr.span,\n+                guard_borrowing_from_pattern,\n+            );\n         } else {\n             self.fcx.tcx.sess.delay_span_bug(expr.span, \"no type for node\");\n         }\n@@ -409,3 +448,263 @@ impl<'a, 'tcx> Visitor<'tcx> for ArmPatCollector<'a> {\n         }\n     }\n }\n+\n+// Returns whether it emitted a diagnostic or not\n+// Note that this fn and the proceding one are based on the code\n+// for creating must_use diagnostics\n+pub fn check_must_not_suspend_ty<'tcx>(\n+    fcx: &FnCtxt<'_, 'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    ty: Ty<'tcx>,\n+    hir_id: HirId,\n+    expr: Option<&'tcx Expr<'tcx>>,\n+    source_span: Span,\n+    yield_span: Span,\n+    descr_pre: &str,\n+    descr_post: &str,\n+    plural_len: usize,\n+) -> bool {\n+    if ty.is_unit()\n+        || fcx.tcx.is_ty_uninhabited_from(fcx.tcx.parent_module(hir_id).to_def_id(), ty, param_env)\n+    {\n+        return true;\n+    }\n+\n+    let plural_suffix = pluralize!(plural_len);\n+\n+    let emitted = match *ty.kind() {\n+        ty::Adt(..) if ty.is_box() => {\n+            let boxed_ty = ty.boxed_ty();\n+            let descr_pre = &format!(\"{}boxed \", descr_pre);\n+            check_must_not_suspend_ty(\n+                fcx,\n+                param_env,\n+                boxed_ty,\n+                hir_id,\n+                expr,\n+                source_span,\n+                yield_span,\n+                descr_pre,\n+                descr_post,\n+                plural_len,\n+            )\n+        }\n+        ty::Adt(def, _) => check_must_not_suspend_def(\n+            fcx.tcx,\n+            def.did,\n+            hir_id,\n+            source_span,\n+            yield_span,\n+            descr_pre,\n+            descr_post,\n+        ),\n+        ty::Opaque(def, _) => {\n+            let mut has_emitted = false;\n+            for &(predicate, _) in fcx.tcx.explicit_item_bounds(def) {\n+                // We only look at the `DefId`, so it is safe to skip the binder here.\n+                if let ty::PredicateKind::Trait(ref poly_trait_predicate) =\n+                    predicate.kind().skip_binder()\n+                {\n+                    let def_id = poly_trait_predicate.trait_ref.def_id;\n+                    let descr_pre = &format!(\"{}implementer{} of \", descr_pre, plural_suffix,);\n+                    if check_must_not_suspend_def(\n+                        fcx.tcx,\n+                        def_id,\n+                        hir_id,\n+                        source_span,\n+                        yield_span,\n+                        descr_pre,\n+                        descr_post,\n+                    ) {\n+                        has_emitted = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            has_emitted\n+        }\n+        ty::Dynamic(binder, _) => {\n+            let mut has_emitted = false;\n+            for predicate in binder.iter() {\n+                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n+                    let def_id = trait_ref.def_id;\n+                    let descr_post = &format!(\" trait object{}{}\", plural_suffix, descr_post,);\n+                    if check_must_not_suspend_def(\n+                        fcx.tcx,\n+                        def_id,\n+                        hir_id,\n+                        source_span,\n+                        yield_span,\n+                        descr_pre,\n+                        descr_post,\n+                    ) {\n+                        has_emitted = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            has_emitted\n+        }\n+        ty::Tuple(ref tys) => {\n+            let mut has_emitted = false;\n+            /*\n+            let spans = if let hir::ExprKind::Tup(comps) = &expr.kind {\n+                debug_assert_eq!(comps.len(), tys.len());\n+                comps.iter().map(|e| e.span).collect()\n+            } else {\n+                vec![]\n+            };\n+            */\n+            let spans = vec![];\n+            for (i, ty) in tys.iter().map(|k| k.expect_ty()).enumerate() {\n+                let descr_post = &format!(\" in tuple element {}\", i);\n+                let span = *spans.get(i).unwrap_or(&source_span);\n+                if check_must_not_suspend_ty(\n+                    fcx, param_env, ty, hir_id, expr, span, yield_span, descr_pre, descr_post,\n+                    plural_len,\n+                ) {\n+                    has_emitted = true;\n+                }\n+            }\n+            has_emitted\n+        }\n+        ty::Array(ty, len) => match len.try_eval_usize(fcx.tcx, param_env) {\n+            // If the array is empty we don't lint, to avoid false positives\n+            Some(0) | None => false,\n+            // If the array is definitely non-empty, we can do `#[must_use]` checking.\n+            Some(n) => {\n+                let descr_pre = &format!(\"{}array{} of \", descr_pre, plural_suffix,);\n+                check_must_not_suspend_ty(\n+                    fcx,\n+                    param_env,\n+                    ty,\n+                    hir_id,\n+                    expr,\n+                    source_span,\n+                    yield_span,\n+                    descr_pre,\n+                    descr_post,\n+                    n as usize + 1,\n+                )\n+            }\n+        },\n+        _ => false,\n+    };\n+\n+    // Don't move onto the \"return value\" path if we already sent a diagnostic\n+    if emitted {\n+        return true;\n+    }\n+\n+    match expr {\n+        Some(expr) => match expr.kind {\n+            hir::ExprKind::Call(ref callee, _) => {\n+                match callee.kind {\n+                    hir::ExprKind::Path(ref qpath) => {\n+                        match fcx.typeck_results.borrow().qpath_res(qpath, callee.hir_id) {\n+                            Res::Def(DefKind::Fn | DefKind::AssocFn, def_id) => {\n+                                check_must_not_suspend_def(\n+                                    fcx.tcx,\n+                                    def_id,\n+                                    hir_id,\n+                                    source_span,\n+                                    yield_span,\n+                                    \"return value of \",\n+                                    \"\",\n+                                )\n+                            }\n+\n+                            // `Res::Local` if it was a closure, for which we\n+                            // do not currently support must-not-suspend linting\n+                            _ => false,\n+                        }\n+                    }\n+                    _ => false,\n+                }\n+            }\n+            hir::ExprKind::MethodCall(..) => {\n+                if let Some(def_id) = fcx.typeck_results.borrow().type_dependent_def_id(expr.hir_id)\n+                {\n+                    check_must_not_suspend_def(\n+                        fcx.tcx,\n+                        def_id,\n+                        hir_id,\n+                        source_span,\n+                        yield_span,\n+                        \"return value of \",\n+                        \"\",\n+                    )\n+                } else {\n+                    false\n+                }\n+            }\n+            _ => false,\n+        },\n+        None => false,\n+    }\n+}\n+\n+fn check_must_not_suspend_def(\n+    tcx: TyCtxt<'_>,\n+    def_id: DefId,\n+    hir_id: HirId,\n+    source_span: Span,\n+    yield_span: Span,\n+    descr_pre_path: &str,\n+    descr_post_path: &str,\n+) -> bool {\n+    for attr in tcx.get_attrs(def_id).iter() {\n+        if attr.has_name(sym::must_not_suspend) {\n+            tcx.struct_span_lint_hir(\n+                rustc_session::lint::builtin::MUST_NOT_SUSPEND,\n+                hir_id,\n+                source_span,\n+                |lint| {\n+                    let msg = format!(\n+                        \"{}`{}`{} held across a yield point, but should not be\",\n+                        descr_pre_path,\n+                        tcx.def_path_str(def_id),\n+                        descr_post_path\n+                    );\n+                    let mut err = lint.build(&msg);\n+\n+                    // Add optional reason note\n+                    if let Some(note) = attr.value_str() {\n+                        err.note(&note.as_str());\n+                    }\n+\n+                    // add span pointing to the offending yield/await)\n+                    err.span_label(yield_span, \"The value is held across this yield point\");\n+\n+                    // Add some quick suggestions on what to do\n+                    err.span_help(\n+                        source_span,\n+                        \"`drop` this value before the yield point, or use a block (`{ ... }`) \\\"\n+                        to shrink its scope\",\n+                    );\n+\n+                    err.emit();\n+                },\n+            );\n+\n+            /*\n+            cx.struct_span_lint(UNUSED_MUST_USE, span, |lint| {\n+                let msg = format!(\n+                    \"unused {}`{}`{} that must be used\",\n+                    descr_pre_path,\n+                    cx.tcx.def_path_str(def_id),\n+                    descr_post_path\n+                );\n+                let mut err = lint.build(&msg);\n+                // check for #[must_use = \"...\"]\n+                if let Some(note) = attr.value_str() {\n+                    err.note(&note.as_str());\n+                }\n+                err.emit();\n+            });\n+            */\n+            return true;\n+        }\n+    }\n+    false\n+}"}, {"sha": "d64d07e5e0df652f8081753a978b8eb10ebe122a", "filename": "src/test/ui/lint/must_not_suspend/boxed.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    i: i64\n+}\n+\n+\n+fn bar() -> Box<Umm> {\n+    Box::new(Umm {\n+        i: 1\n+    })\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    let _guard = bar(); //~ boxed `Umm` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "c3c23db7d72f7e825bab8833b058b44e5d2d6af8", "filename": "src/test/ui/lint/must_not_suspend/boxed.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fboxed.stderr?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,23 @@\n+error: boxed `Umm` held across a yield point, but should not be\n+  --> $DIR/boxed.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- The value is held across this yield point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/boxed.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: You gotta use Umm's, ya know?\n+help: `drop` this value before the yield point, or use a block (`{ ... }`) \"\n+                        to shrink its scope\n+  --> $DIR/boxed.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "aff8ff33b65a8924941f6c5f6f292adce184168a", "filename": "src/test/ui/lint/must_not_suspend/feature-gate-must_not_suspend.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"] //~ the `#[must_not_suspend]`\n+struct Umm {\n+    _i: i64\n+}\n+\n+fn main() {\n+}"}, {"sha": "ab20a8be8747dc438702c10a52d45bb06f7d8ad8", "filename": "src/test/ui/lint/must_not_suspend/feature-gate-must_not_suspend.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ffeature-gate-must_not_suspend.stderr?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: the `#[must_not_suspend]` attribute is an experimental feature\n+  --> $DIR/feature-gate-must_not_suspend.rs:3:1\n+   |\n+LL | #[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #83310 <https://github.com/rust-lang/rust/issues/83310> for more information\n+   = help: add `#![feature(must_not_suspend)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "5f80e78937628723a9e66719be5a97cf222071ec", "filename": "src/test/ui/lint/must_not_suspend/return.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,9 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend] //~ attribute should be\n+fn foo() -> i32 {\n+    0\n+}\n+fn main() {}"}, {"sha": "ff1798320cf8e03832c4fc95ed23902cec96f528", "filename": "src/test/ui/lint/must_not_suspend/return.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Freturn.stderr?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,12 @@\n+error: `must_not_suspend` attribute should be applied to a struct, enum, `impl Trait`, or `dyn Trait`\n+  --> $DIR/return.rs:5:1\n+   |\n+LL |   #[must_not_suspend]\n+   |   ^^^^^^^^^^^^^^^^^^^\n+LL | / fn foo() -> i32 {\n+LL | |     0\n+LL | | }\n+   | |_- is a function\n+\n+error: aborting due to previous error\n+"}, {"sha": "0438e072ce67e09f25c3a624185c2dd888bb3e9e", "filename": "src/test/ui/lint/must_not_suspend/trait.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,28 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend]\n+trait Wow {}\n+\n+impl Wow for i32 {}\n+\n+fn r#impl() -> impl Wow {\n+    1\n+}\n+\n+fn r#dyn() -> Box<dyn Wow> {\n+    Box::new(1)\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    let _guard1 = r#impl(); //~ implementer of `Wow` held across\n+    let _guard2 = r#dyn(); //~ boxed `Wow` trait object held across\n+\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "1175cbb9192083ef9db5dd8d00e911333f947ada", "filename": "src/test/ui/lint/must_not_suspend/trait.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,39 @@\n+error: implementer of `Wow` held across a yield point, but should not be\n+  --> $DIR/trait.rs:21:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+...\n+LL |     other().await;\n+   |     ------------- The value is held across this yield point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/trait.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+help: `drop` this value before the yield point, or use a block (`{ ... }`) \"\n+                        to shrink its scope\n+  --> $DIR/trait.rs:21:9\n+   |\n+LL |     let _guard1 = r#impl();\n+   |         ^^^^^^^\n+\n+error: boxed `Wow` trait object held across a yield point, but should not be\n+  --> $DIR/trait.rs:22:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+LL | \n+LL |     other().await;\n+   |     ------------- The value is held across this yield point\n+   |\n+help: `drop` this value before the yield point, or use a block (`{ ... }`) \"\n+                        to shrink its scope\n+  --> $DIR/trait.rs:22:9\n+   |\n+LL |     let _guard2 = r#dyn();\n+   |         ^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4e87b801114e90aef3113e3d1211681e0e3e6200", "filename": "src/test/ui/lint/must_not_suspend/unit.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+#![feature(must_not_suspend)]\n+#![deny(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    i: i64\n+}\n+\n+\n+fn bar() -> Umm {\n+    Umm {\n+        i: 1\n+    }\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    let _guard = bar(); //~ `Umm` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "cff00dd8ca4099466455f16ca1c4c7ea0f83961b", "filename": "src/test/ui/lint/must_not_suspend/unit.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Funit.stderr?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,23 @@\n+error: `Umm` held across a yield point, but should not be\n+  --> $DIR/unit.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- The value is held across this yield point\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unit.rs:3:9\n+   |\n+LL | #![deny(must_not_suspend)]\n+   |         ^^^^^^^^^^^^^^^^\n+   = note: You gotta use Umm's, ya know?\n+help: `drop` this value before the yield point, or use a block (`{ ... }`) \"\n+                        to shrink its scope\n+  --> $DIR/unit.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d0d723848075981a31f0e90484065080e84dba9c", "filename": "src/test/ui/lint/must_not_suspend/warn.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.rs?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+// run-pass\n+#![feature(must_not_suspend)]\n+\n+#[must_not_suspend = \"You gotta use Umm's, ya know?\"]\n+struct Umm {\n+    _i: i64\n+}\n+\n+\n+fn bar() -> Umm {\n+    Umm {\n+        _i: 1\n+    }\n+}\n+\n+async fn other() {}\n+\n+pub async fn uhoh() {\n+    let _guard = bar(); //~ `Umm` held across\n+    other().await;\n+}\n+\n+fn main() {\n+}"}, {"sha": "bda44d051ee7c4149fe3bf7c9785f65a37739d10", "filename": "src/test/ui/lint/must_not_suspend/warn.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2271376fb224661fd8b7e5e5788217e8fe9e5ecc/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fwarn.stderr?ref=2271376fb224661fd8b7e5e5788217e8fe9e5ecc", "patch": "@@ -0,0 +1,19 @@\n+warning: `Umm` held across a yield point, but should not be\n+  --> $DIR/warn.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+LL |     other().await;\n+   |     ------------- The value is held across this yield point\n+   |\n+   = note: `#[warn(must_not_suspend)]` on by default\n+   = note: You gotta use Umm's, ya know?\n+help: `drop` this value before the yield point, or use a block (`{ ... }`) \"\n+                        to shrink its scope\n+  --> $DIR/warn.rs:20:9\n+   |\n+LL |     let _guard = bar();\n+   |         ^^^^^^\n+\n+warning: 1 warning emitted\n+"}]}