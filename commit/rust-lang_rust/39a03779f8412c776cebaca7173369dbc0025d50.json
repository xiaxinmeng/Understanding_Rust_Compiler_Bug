{"sha": "39a03779f8412c776cebaca7173369dbc0025d50", "node_id": "C_kwDOAAsO6NoAKDM5YTAzNzc5Zjg0MTJjNzc2Y2ViYWNhNzE3MzM2OWRiYzAwMjVkNTA", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-28T11:48:54Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-21T06:13:17Z"}, "message": "correctly deal with user type ascriptions in pat", "tree": {"sha": "7e9c1ac8bb3103be5c15d8d7dfb945cf72cadfeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e9c1ac8bb3103be5c15d8d7dfb945cf72cadfeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39a03779f8412c776cebaca7173369dbc0025d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39a03779f8412c776cebaca7173369dbc0025d50", "html_url": "https://github.com/rust-lang/rust/commit/39a03779f8412c776cebaca7173369dbc0025d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39a03779f8412c776cebaca7173369dbc0025d50/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a86c7907b1e34d14d742fa4c4202626bb77eddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a86c7907b1e34d14d742fa4c4202626bb77eddc", "html_url": "https://github.com/rust-lang/rust/commit/4a86c7907b1e34d14d742fa4c4202626bb77eddc"}], "stats": {"total": 311, "additions": 208, "deletions": 103}, "files": [{"sha": "b99e7573000c9d853e01c27cebe5fb7410b63486", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 9, "deletions": 41, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -18,15 +18,11 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::AllocId;\n-use rustc_middle::mir::{\n-    self, BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp, UserTypeProjection,\n-};\n+use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp};\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::subst::SubstsRef;\n+use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use rustc_middle::ty::{self, AdtDef, Ty, UpvarSubsts, UserType};\n-use rustc_middle::ty::{\n-    CanonicalUserType, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n-};\n use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n@@ -540,13 +536,13 @@ pub enum BindingMode {\n     ByRef(BorrowKind),\n }\n \n-#[derive(Clone, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct FieldPat<'tcx> {\n     pub field: Field,\n     pub pattern: Pat<'tcx>,\n }\n \n-#[derive(Clone, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct Pat<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub span: Span,\n@@ -559,37 +555,10 @@ impl<'tcx> Pat<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n-pub struct PatTyProj<'tcx> {\n-    pub user_ty: CanonicalUserType<'tcx>,\n-}\n-\n-impl<'tcx> PatTyProj<'tcx> {\n-    pub fn from_user_type(user_annotation: CanonicalUserType<'tcx>) -> Self {\n-        Self { user_ty: user_annotation }\n-    }\n-\n-    pub fn user_ty(\n-        self,\n-        annotations: &mut CanonicalUserTypeAnnotations<'tcx>,\n-        inferred_ty: Ty<'tcx>,\n-        span: Span,\n-    ) -> UserTypeProjection {\n-        UserTypeProjection {\n-            base: annotations.push(CanonicalUserTypeAnnotation {\n-                span,\n-                user_ty: self.user_ty,\n-                inferred_ty,\n-            }),\n-            projs: Vec::new(),\n-        }\n-    }\n-}\n-\n-#[derive(Copy, Clone, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub struct Ascription<'tcx> {\n-    pub user_ty: PatTyProj<'tcx>,\n-    /// Variance to use when relating the type `user_ty` to the **type of the value being\n+    pub annotation: CanonicalUserTypeAnnotation<'tcx>,\n+    /// Variance to use when relating the `user_ty` to the **type of the value being\n     /// matched**. Typically, this is `Variance::Covariant`, since the value being matched must\n     /// have a type that is some subtype of the ascribed type.\n     ///\n@@ -608,12 +577,11 @@ pub struct Ascription<'tcx> {\n     /// probably be checking for a `PartialEq` impl instead, but this preserves the behavior\n     /// of the old type-check for now. See #57280 for details.\n     pub variance: ty::Variance,\n-    pub user_ty_span: Span,\n }\n \n-#[derive(Clone, Debug, PartialEq, HashStable)]\n+#[derive(Clone, Debug, HashStable)]\n pub enum PatKind<'tcx> {\n-    /// A wildward pattern: `_`.\n+    /// A wildcard pattern: `_`.\n     Wild,\n \n     AscribeUserType {"}, {"sha": "6225193ea1a15ca3a8a62269187fb1b5bb1db376", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 22, "deletions": 37, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -523,8 +523,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                             },\n                         ..\n                     },\n-                ascription:\n-                    thir::Ascription { user_ty: pat_ascription_ty, variance: _, user_ty_span },\n+                ascription: thir::Ascription { annotation, variance: _ },\n             } => {\n                 let place =\n                     self.storage_live_binding(block, var, irrefutable_pat.span, OutsideGuard, true);\n@@ -535,18 +534,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let cause_let = FakeReadCause::ForLet(None);\n                 self.cfg.push_fake_read(block, pattern_source_info, cause_let, place);\n \n-                let ty_source_info = self.source_info(user_ty_span);\n-                let user_ty = pat_ascription_ty.user_ty(\n-                    &mut self.canonical_user_type_annotations,\n-                    place.ty(&self.local_decls, self.tcx).ty,\n-                    ty_source_info.span,\n-                );\n+                let ty_source_info = self.source_info(annotation.span);\n+\n+                let base = self.canonical_user_type_annotations.push(annotation);\n                 self.cfg.push(\n                     block,\n                     Statement {\n                         source_info: ty_source_info,\n                         kind: StatementKind::AscribeUserType(\n-                            Box::new((place, user_ty)),\n+                            Box::new((place, UserTypeProjection { base, projs: Vec::new() })),\n                             // We always use invariant as the variance here. This is because the\n                             // variance field from the ascription refers to the variance to use\n                             // when applying the type to the value being matched, but this\n@@ -784,7 +780,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             PatKind::AscribeUserType {\n                 ref subpattern,\n-                ascription: thir::Ascription { ref user_ty, user_ty_span, variance: _ },\n+                ascription: thir::Ascription { ref annotation, variance: _ },\n             } => {\n                 // This corresponds to something like\n                 //\n@@ -794,16 +790,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //\n                 // Note that the variance doesn't apply here, as we are tracking the effect\n                 // of `user_ty` on any bindings contained with subpattern.\n-                let annotation = CanonicalUserTypeAnnotation {\n-                    span: user_ty_span,\n-                    user_ty: user_ty.user_ty,\n-                    inferred_ty: subpattern.ty,\n-                };\n+\n                 let projection = UserTypeProjection {\n-                    base: self.canonical_user_type_annotations.push(annotation),\n+                    base: self.canonical_user_type_annotations.push(annotation.clone()),\n                     projs: Vec::new(),\n                 };\n-                let subpattern_user_ty = pattern_user_ty.push_projection(&projection, user_ty_span);\n+                let subpattern_user_ty =\n+                    pattern_user_ty.push_projection(&projection, annotation.span);\n                 self.visit_primary_bindings(subpattern, subpattern_user_ty, f)\n             }\n \n@@ -927,9 +920,8 @@ struct Binding<'tcx> {\n /// influence region inference.\n #[derive(Clone, Debug)]\n struct Ascription<'tcx> {\n-    span: Span,\n     source: Place<'tcx>,\n-    user_ty: PatTyProj<'tcx>,\n+    annotation: CanonicalUserTypeAnnotation<'tcx>,\n     variance: ty::Variance,\n }\n \n@@ -1858,7 +1850,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             parent_bindings\n                 .iter()\n                 .flat_map(|(_, ascriptions)| ascriptions)\n-                .chain(&candidate.ascriptions),\n+                .cloned()\n+                .chain(candidate.ascriptions),\n         );\n \n         // rust-lang/rust#27282: The `autoref` business deserves some\n@@ -2062,32 +2055,24 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     /// Append `AscribeUserType` statements onto the end of `block`\n     /// for each ascription\n-    fn ascribe_types<'b>(\n+    fn ascribe_types(\n         &mut self,\n         block: BasicBlock,\n-        ascriptions: impl IntoIterator<Item = &'b Ascription<'tcx>>,\n-    ) where\n-        'tcx: 'b,\n-    {\n+        ascriptions: impl IntoIterator<Item = Ascription<'tcx>>,\n+    ) {\n         for ascription in ascriptions {\n-            let source_info = self.source_info(ascription.span);\n+            let source_info = self.source_info(ascription.annotation.span);\n \n-            debug!(\n-                \"adding user ascription at span {:?} of place {:?} and {:?}\",\n-                source_info.span, ascription.source, ascription.user_ty,\n-            );\n-\n-            let user_ty = ascription.user_ty.user_ty(\n-                &mut self.canonical_user_type_annotations,\n-                ascription.source.ty(&self.local_decls, self.tcx).ty,\n-                source_info.span,\n-            );\n+            let base = self.canonical_user_type_annotations.push(ascription.annotation);\n             self.cfg.push(\n                 block,\n                 Statement {\n                     source_info,\n                     kind: StatementKind::AscribeUserType(\n-                        Box::new((ascription.source, user_ty)),\n+                        Box::new((\n+                            ascription.source,\n+                            UserTypeProjection { base, projs: Vec::new() },\n+                        )),\n                         ascription.variance,\n                     ),\n                 },"}, {"sha": "b4a0c965d6b735d4db06b450f648abf5371b2539", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -152,15 +152,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match *match_pair.pattern.kind {\n             PatKind::AscribeUserType {\n                 ref subpattern,\n-                ascription: thir::Ascription { variance, user_ty, user_ty_span },\n+                ascription: thir::Ascription { ref annotation, variance },\n             } => {\n                 // Apply the type ascription to the value at `match_pair.place`, which is the\n                 if let Ok(place_resolved) =\n                     match_pair.place.clone().try_upvars_resolved(self.tcx, self.typeck_results)\n                 {\n                     candidate.ascriptions.push(Ascription {\n-                        span: user_ty_span,\n-                        user_ty,\n+                        annotation: annotation.clone(),\n                         source: place_resolved.into_place(self.tcx, self.typeck_results),\n                         variance,\n                     });"}, {"sha": "ad1d7daec95c0b0fa755af8b49f257a10198fde4", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::thir::*;\n use rustc_middle::ty;\n \n use rustc_index::vec::Idx;\n+use rustc_middle::ty::CanonicalUserTypeAnnotation;\n \n impl<'tcx> Cx<'tcx> {\n     crate fn mirror_block(&mut self, block: &'tcx hir::Block<'tcx>) -> Block {\n@@ -80,13 +81,17 @@ impl<'tcx> Cx<'tcx> {\n                                 self.typeck_results.user_provided_types().get(ty.hir_id)\n                             {\n                                 debug!(\"mirror_stmts: user_ty={:?}\", user_ty);\n+                                let annotation = CanonicalUserTypeAnnotation {\n+                                    user_ty,\n+                                    span: ty.span,\n+                                    inferred_ty: self.typeck_results.node_type(ty.hir_id),\n+                                };\n                                 pattern = Pat {\n                                     ty: pattern.ty,\n                                     span: pattern.span,\n                                     kind: Box::new(PatKind::AscribeUserType {\n                                         ascription: Ascription {\n-                                            user_ty: PatTyProj::from_user_type(user_ty),\n-                                            user_ty_span: ty.span,\n+                                            annotation,\n                                             variance: ty::Variance::Covariant,\n                                         },\n                                         subpattern: pattern,"}, {"sha": "5d7a4215c57d914aade357f0e882a19c501c6e4d", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -19,8 +19,9 @@ use rustc_middle::mir::interpret::{get_slice_bytes, ConstValue};\n use rustc_middle::mir::interpret::{ErrorHandled, LitToConstError, LitToConstInput};\n use rustc_middle::mir::{self, UserTypeProjection};\n use rustc_middle::mir::{BorrowKind, Field, Mutability};\n-use rustc_middle::thir::{Ascription, BindingMode, FieldPat, Pat, PatKind, PatRange, PatTyProj};\n+use rustc_middle::thir::{Ascription, BindingMode, FieldPat, Pat, PatKind, PatRange};\n use rustc_middle::ty::subst::{GenericArg, SubstsRef};\n+use rustc_middle::ty::CanonicalUserTypeAnnotation;\n use rustc_middle::ty::{self, AdtDef, ConstKind, DefIdTree, Region, Ty, TyCtxt, UserType};\n use rustc_span::{Span, Symbol};\n \n@@ -227,7 +228,8 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 for end in &[lo, hi] {\n                     if let Some((_, Some(ascription))) = end {\n                         let subpattern = Pat { span: pat.span, ty, kind: Box::new(kind) };\n-                        kind = PatKind::AscribeUserType { ascription: *ascription, subpattern };\n+                        kind =\n+                            PatKind::AscribeUserType { ascription: ascription.clone(), subpattern };\n                     }\n                 }\n \n@@ -432,13 +434,14 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n         if let Some(user_ty) = self.user_substs_applied_to_ty_of_hir_id(hir_id) {\n             debug!(\"lower_variant_or_leaf: kind={:?} user_ty={:?} span={:?}\", kind, user_ty, span);\n+            let annotation = CanonicalUserTypeAnnotation {\n+                user_ty,\n+                span,\n+                inferred_ty: self.typeck_results.node_type(hir_id),\n+            };\n             kind = PatKind::AscribeUserType {\n                 subpattern: Pat { span, ty, kind: Box::new(kind) },\n-                ascription: Ascription {\n-                    user_ty: PatTyProj::from_user_type(user_ty),\n-                    user_ty_span: span,\n-                    variance: ty::Variance::Covariant,\n-                },\n+                ascription: Ascription { annotation, variance: ty::Variance::Covariant },\n             };\n         }\n \n@@ -499,18 +502,21 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 }\n \n                 let user_provided_types = self.typeck_results().user_provided_types();\n-                if let Some(u_ty) = user_provided_types.get(id) {\n-                    let user_ty = PatTyProj::from_user_type(*u_ty);\n+                if let Some(&user_ty) = user_provided_types.get(id) {\n+                    let annotation = CanonicalUserTypeAnnotation {\n+                        user_ty,\n+                        span,\n+                        inferred_ty: self.typeck_results().node_type(id),\n+                    };\n                     Pat {\n                         span,\n                         kind: Box::new(PatKind::AscribeUserType {\n                             subpattern: pattern,\n                             ascription: Ascription {\n+                                annotation,\n                                 /// Note that use `Contravariant` here. See the\n                                 /// `variance` field documentation for details.\n                                 variance: ty::Variance::Contravariant,\n-                                user_ty,\n-                                user_ty_span: span,\n                             },\n                         }),\n                         ty: const_.ty(),\n@@ -645,7 +651,7 @@ impl<'tcx, T: PatternFoldable<'tcx>> PatternFoldable<'tcx> for Option<T> {\n     }\n }\n \n-macro_rules! CloneImpls {\n+macro_rules! ClonePatternFoldableImpls {\n     (<$lt_tcx:tt> $($ty:ty),+) => {\n         $(\n             impl<$lt_tcx> PatternFoldable<$lt_tcx> for $ty {\n@@ -657,11 +663,11 @@ macro_rules! CloneImpls {\n     }\n }\n \n-CloneImpls! { <'tcx>\n+ClonePatternFoldableImpls! { <'tcx>\n     Span, Field, Mutability, Symbol, hir::HirId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode, AdtDef<'tcx>,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n-    UserTypeProjection, PatTyProj<'tcx>\n+    UserTypeProjection, CanonicalUserTypeAnnotation<'tcx>\n }\n \n impl<'tcx> PatternFoldable<'tcx> for FieldPat<'tcx> {\n@@ -694,14 +700,10 @@ impl<'tcx> PatternFoldable<'tcx> for PatKind<'tcx> {\n             PatKind::Wild => PatKind::Wild,\n             PatKind::AscribeUserType {\n                 ref subpattern,\n-                ascription: Ascription { variance, ref user_ty, user_ty_span },\n+                ascription: Ascription { ref annotation, variance },\n             } => PatKind::AscribeUserType {\n                 subpattern: subpattern.fold_with(folder),\n-                ascription: Ascription {\n-                    user_ty: user_ty.fold_with(folder),\n-                    variance,\n-                    user_ty_span,\n-                },\n+                ascription: Ascription { annotation: annotation.fold_with(folder), variance },\n             },\n             PatKind::Binding { mutability, name, mode, var, ty, ref subpattern, is_primary } => {\n                 PatKind::Binding {"}, {"sha": "3b5b075cb582e450dbdf66bd1fade1a9c8e1b556", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.rs?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -0,0 +1,27 @@\n+// Check that incorrect higher ranked subtyping\n+// causes an error.\n+struct Inv<'a>(fn(&'a ()) -> &'a ());\n+fn hr_subtype<'c>(f: for<'a, 'b> fn(Inv<'a>, Inv<'a>)) {\n+    // ok\n+    let _: for<'a> fn(Inv<'a>, Inv<'a>) = f;\n+    let sub: for<'a> fn(Inv<'a>, Inv<'a>) = f;\n+    // no\n+    let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn simple1<'c>(x: (&'c i32,)) {\n+    let _x: (&'static i32,) = x;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn simple2<'c>(x: (&'c i32,)) {\n+    let _: (&'static i32,) = x;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {\n+    hr_subtype(|_, _| {});\n+    simple1((&3,));\n+    simple2((&3,));\n+}"}, {"sha": "7bd5308052b0fcb06fa23523f2f5b8d568c335f3", "filename": "src/test/ui/hr-subtype/placeholder-pattern-fail.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern-fail.stderr?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -0,0 +1,42 @@\n+error[E0308]: mismatched types\n+  --> $DIR/placeholder-pattern-fail.rs:9:47\n+   |\n+LL |     let _: for<'a, 'b> fn(Inv<'a>, Inv<'b>) = sub;\n+   |                                               ^^^ one type is more general than the other\n+   |\n+   = note: expected fn pointer `for<'a, 'b> fn(Inv<'a>, Inv<'b>)`\n+              found fn pointer `for<'a> fn(Inv<'a>, Inv<'a>)`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/placeholder-pattern-fail.rs:14:31\n+   |\n+LL |     let _x: (&'static i32,) = x;\n+   |                               ^ lifetime mismatch\n+   |\n+   = note: expected tuple `(&'static i32,)`\n+              found tuple `(&'c i32,)`\n+note: the lifetime `'c` as defined here...\n+  --> $DIR/placeholder-pattern-fail.rs:13:12\n+   |\n+LL | fn simple1<'c>(x: (&'c i32,)) {\n+   |            ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error[E0308]: mismatched types\n+  --> $DIR/placeholder-pattern-fail.rs:19:30\n+   |\n+LL |     let _: (&'static i32,) = x;\n+   |                              ^ lifetime mismatch\n+   |\n+   = note: expected tuple `(&'static i32,)`\n+              found tuple `(&'c i32,)`\n+note: the lifetime `'c` as defined here...\n+  --> $DIR/placeholder-pattern-fail.rs:18:12\n+   |\n+LL | fn simple2<'c>(x: (&'c i32,)) {\n+   |            ^^\n+   = note: ...does not necessarily outlive the static lifetime\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "061e66e54d2f442541b8fe8cdf2da5a8916845de", "filename": "src/test/ui/hr-subtype/placeholder-pattern.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fplaceholder-pattern.rs?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+// Check that higher ranked subtyping correctly works when using\n+// placeholder patterns.\n+fn hr_subtype<'c>(f: for<'a, 'b> fn(&'a (), &'b ())) {\n+    let _: for<'a> fn(&'a (), &'a ()) = f;\n+    let _: for<'a, 'b> fn(&'a (), &'b ()) = f;\n+    let _: for<'a> fn(&'a (), &'c ()) = f;\n+    let _: fn(&'c (), &'c ()) = f;\n+}\n+\n+fn simple<'c>(x: (&'static i32,)) {\n+    let _: (&'c i32,) = x;\n+}\n+\n+fn main() {\n+    hr_subtype(|_, _| {});\n+    simple((&3,));\n+}"}, {"sha": "41c3718592deecf9cbb23867662beda645b9f61a", "filename": "src/test/ui/lifetimes/re-empty-in-error.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.rs?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -0,0 +1,10 @@\n+// We didn't have a single test mentioning\n+// `ReEmpty` and this test changes that.\n+fn foo<'a>(_a: &'a u32) where for<'b> &'b (): 'a {\n+    //~^ NOTE type must outlive the empty lifetime as required by this binding\n+}\n+\n+fn main() {\n+    foo(&10);\n+    //~^ ERROR the type `&'b ()` does not fulfill the required lifetime\n+}"}, {"sha": "227e3ca613961a165c1bf635b49169339375d12f", "filename": "src/test/ui/lifetimes/re-empty-in-error.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -0,0 +1,15 @@\n+error[E0477]: the type `&'b ()` does not fulfill the required lifetime\n+  --> $DIR/re-empty-in-error.rs:8:5\n+   |\n+LL |     foo(&10);\n+   |     ^^^\n+   |\n+note: type must outlive the empty lifetime as required by this binding\n+  --> $DIR/re-empty-in-error.rs:3:47\n+   |\n+LL | fn foo<'a>(_a: &'a u32) where for<'b> &'b (): 'a {\n+   |                                               ^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "ad4b8dcfde4325e8f7c0cfb6eacf32cb628e9166", "filename": "src/test/ui/nll/issue-57280-1-flipped.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.rs?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -0,0 +1,23 @@\n+// This test should compile, as the lifetimes\n+// in matches don't really matter.\n+//\n+// We currently use contravariance when checking the\n+// type of match arms.\n+\n+trait Foo<'a> {\n+    const C: &'a u32;\n+}\n+\n+impl<'a, T> Foo<'a> for T {\n+    const C: &'a u32 = &22;\n+}\n+\n+fn foo<'a>(x: &'static u32) {\n+    match x {\n+        <() as Foo<'a>>::C => { }\n+        //~^ ERROR lifetime may not live long enough\n+        &_ => { }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7a2135a2ade837bce45d05242798d7ea953b87b2", "filename": "src/test/ui/nll/issue-57280-1-flipped.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/39a03779f8412c776cebaca7173369dbc0025d50/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-57280-1-flipped.stderr?ref=39a03779f8412c776cebaca7173369dbc0025d50", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-57280-1-flipped.rs:17:9\n+   |\n+LL | fn foo<'a>(x: &'static u32) {\n+   |        -- lifetime `'a` defined here\n+LL |     match x {\n+LL |         <() as Foo<'a>>::C => { }\n+   |         ^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}]}