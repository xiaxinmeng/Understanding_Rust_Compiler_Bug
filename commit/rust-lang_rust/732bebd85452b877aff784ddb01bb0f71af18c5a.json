{"sha": "732bebd85452b877aff784ddb01bb0f71af18c5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMmJlYmQ4NTQ1MmI4NzdhZmY3ODRkZGIwMWJiMGY3MWFmMThjNWE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-18T00:27:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-18T00:27:51Z"}, "message": "Rollup merge of #75629 - EllenNyan:ellen-intra-doc-links, r=jyn514\n\nUse intra-doc links in `std::env`, `std::alloc` and `std::error`\n\nThis is partial fixes for #75080.", "tree": {"sha": "2940ef0c5169b3f200229a25b6d2c77329e5eb3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2940ef0c5169b3f200229a25b6d2c77329e5eb3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/732bebd85452b877aff784ddb01bb0f71af18c5a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfOyCHCRBK7hj4Ov3rIwAAdHIIAJ18qains8Ra9Yk8fsBLHy+c\nlOPG6V9R2avlWzDWFz2JF3xtfLREm0x3mukAUMkTbO62KYgYjI/7rNVUXWLyLEQy\n5p6Ep1dYsHcqkN/EbbEdT4BvzHm9/8nHDDsgd8Utrp8yZF9ixuR6lPioS1dSfjOI\nMdMSJldwcjBQ4dyg+nEyo+zaZR7WANG8AL1ZiAldC3z4+1VMhq8cuZvpC/40C8OZ\nPG2BY4BX5lh4yPnXBzkTpdWJi/56cNGxo1UsqmnYNskIH2fiss1PRXsZi2aaimqQ\npFnO91YN8DL1KERC15dR8TIdERxw2LCa5WatYbiK/KsfA9UtBrFUaT5oRNh/0Pk=\n=/Du4\n-----END PGP SIGNATURE-----\n", "payload": "tree 2940ef0c5169b3f200229a25b6d2c77329e5eb3c\nparent 791768e8f6c0084e0db4fa46f43fb0101b238a38\nparent e7a72797506448b7525c963af2967356958f7e9b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597710471 +0900\ncommitter GitHub <noreply@github.com> 1597710471 +0900\n\nRollup merge of #75629 - EllenNyan:ellen-intra-doc-links, r=jyn514\n\nUse intra-doc links in `std::env`, `std::alloc` and `std::error`\n\nThis is partial fixes for #75080.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/732bebd85452b877aff784ddb01bb0f71af18c5a", "html_url": "https://github.com/rust-lang/rust/commit/732bebd85452b877aff784ddb01bb0f71af18c5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/732bebd85452b877aff784ddb01bb0f71af18c5a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "791768e8f6c0084e0db4fa46f43fb0101b238a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/791768e8f6c0084e0db4fa46f43fb0101b238a38", "html_url": "https://github.com/rust-lang/rust/commit/791768e8f6c0084e0db4fa46f43fb0101b238a38"}, {"sha": "e7a72797506448b7525c963af2967356958f7e9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7a72797506448b7525c963af2967356958f7e9b", "html_url": "https://github.com/rust-lang/rust/commit/e7a72797506448b7525c963af2967356958f7e9b"}], "stats": {"total": 78, "additions": 13, "deletions": 65}, "files": [{"sha": "37a8f514aa1574da0cf12dba6fa0ff095403394b", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/732bebd85452b877aff784ddb01bb0f71af18c5a/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732bebd85452b877aff784ddb01bb0f71af18c5a/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=732bebd85452b877aff784ddb01bb0f71af18c5a", "patch": "@@ -7,8 +7,6 @@\n //! like `cdylib`s and `staticlib`s are guaranteed to use the [`System`] by\n //! default.\n //!\n-//! [`System`]: struct.System.html\n-//!\n //! # The `#[global_allocator]` attribute\n //!\n //! This attribute allows configuring the choice of global allocator.\n@@ -43,8 +41,6 @@\n //! The attribute is used on a `static` item whose type implements the\n //! [`GlobalAlloc`] trait. This type can be provided by an external library:\n //!\n-//! [`GlobalAlloc`]: ../../core/alloc/trait.GlobalAlloc.html\n-//!\n //! ```rust,ignore (demonstrates crates.io usage)\n //! extern crate jemallocator;\n //!\n@@ -284,9 +280,6 @@ static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());\n /// about the allocation that failed.\n ///\n /// The allocation error hook is a global resource.\n-///\n-/// [`set_alloc_error_hook`]: fn.set_alloc_error_hook.html\n-/// [`take_alloc_error_hook`]: fn.take_alloc_error_hook.html\n #[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n pub fn set_alloc_error_hook(hook: fn(Layout)) {\n     HOOK.store(hook as *mut (), Ordering::SeqCst);\n@@ -297,8 +290,6 @@ pub fn set_alloc_error_hook(hook: fn(Layout)) {\n /// *See also the function [`set_alloc_error_hook`].*\n ///\n /// If no custom hook is registered, the default hook will be returned.\n-///\n-/// [`set_alloc_error_hook`]: fn.set_alloc_error_hook.html\n #[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n pub fn take_alloc_error_hook() -> fn(Layout) {\n     let hook = HOOK.swap(ptr::null_mut(), Ordering::SeqCst);"}, {"sha": "387c588f4a061d18f7e1879202ac9f9ce0790395", "filename": "library/std/src/env.rs", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/732bebd85452b877aff784ddb01bb0f71af18c5a/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732bebd85452b877aff784ddb01bb0f71af18c5a/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=732bebd85452b877aff784ddb01bb0f71af18c5a", "patch": "@@ -7,9 +7,6 @@\n //! There are several functions and structs in this module that have a\n //! counterpart ending in `os`. Those ending in `os` will return an [`OsString`]\n //! and those without will return a [`String`].\n-//!\n-//! [`OsString`]: ../../std/ffi/struct.OsString.html\n-//! [`String`]: ../string/struct.String.html\n \n #![stable(feature = \"env\", since = \"1.0.0\")]\n \n@@ -31,9 +28,6 @@ use crate::sys::os as os_imp;\n /// * Current directory does not exist.\n /// * There are insufficient permissions to access the current directory.\n ///\n-/// [`PathBuf`]: ../../std/path/struct.PathBuf.html\n-/// [`Err`]: ../../std/result/enum.Result.html#method.err\n-///\n /// # Examples\n ///\n /// ```\n@@ -54,8 +48,6 @@ pub fn current_dir() -> io::Result<PathBuf> {\n ///\n /// Returns an [`Err`] if the operation fails.\n ///\n-/// [`Err`]: ../../std/result/enum.Result.html#method.err\n-///\n /// # Examples\n ///\n /// ```\n@@ -76,7 +68,7 @@ pub fn set_current_dir<P: AsRef<Path>>(path: P) -> io::Result<()> {\n /// This structure is created by the [`std::env::vars`] function. See its\n /// documentation for more.\n ///\n-/// [`std::env::vars`]: fn.vars.html\n+/// [`std::env::vars`]: vars\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Vars {\n     inner: VarsOs,\n@@ -87,7 +79,7 @@ pub struct Vars {\n /// This structure is created by the [`std::env::vars_os`] function. See\n /// its documentation for more.\n ///\n-/// [`std::env::vars_os`]: fn.vars_os.html\n+/// [`std::env::vars_os`]: vars_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct VarsOs {\n     inner: os_imp::Env,\n@@ -106,7 +98,7 @@ pub struct VarsOs {\n /// environment is not valid unicode. If this is not desired, consider using the\n /// [`env::vars_os`] function.\n ///\n-/// [`env::vars_os`]: fn.vars_os.html\n+/// [`env::vars_os`]: vars_os\n ///\n /// # Examples\n ///\n@@ -222,8 +214,6 @@ fn _var(key: &OsStr) -> Result<String, VarError> {\n /// Fetches the environment variable `key` from the current process, returning\n /// [`None`] if the variable isn't set.\n ///\n-/// [`None`]: ../option/enum.Option.html#variant.None\n-///\n /// # Panics\n ///\n /// This function may panic if `key` is empty, contains an ASCII equals sign\n@@ -254,7 +244,7 @@ fn _var_os(key: &OsStr) -> Option<OsString> {\n /// The error type for operations interacting with environment variables.\n /// Possibly returned from the [`env::var`] function.\n ///\n-/// [`env::var`]: fn.var.html\n+/// [`env::var`]: var\n #[derive(Debug, PartialEq, Eq, Clone)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub enum VarError {\n@@ -382,8 +372,7 @@ fn _remove_var(k: &OsStr) {\n /// This structure is created by the [`std::env::split_paths`] function. See its\n /// documentation for more.\n ///\n-/// [`PathBuf`]: ../../std/path/struct.PathBuf.html\n-/// [`std::env::split_paths`]: fn.split_paths.html\n+/// [`std::env::split_paths`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct SplitPaths<'a> {\n     inner: os_imp::SplitPaths<'a>,\n@@ -410,8 +399,6 @@ pub struct SplitPaths<'a> {\n ///     None => println!(\"{} is not defined in the environment.\", key)\n /// }\n /// ```\n-///\n-/// [`PathBuf`]: ../../std/path/struct.PathBuf.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn split_paths<T: AsRef<OsStr> + ?Sized>(unparsed: &T) -> SplitPaths<'_> {\n     SplitPaths { inner: os_imp::split_paths(unparsed.as_ref()) }\n@@ -438,7 +425,7 @@ impl fmt::Debug for SplitPaths<'_> {\n /// The error type for operations on the `PATH` variable. Possibly returned from\n /// the [`env::join_paths`] function.\n ///\n-/// [`env::join_paths`]: fn.join_paths.html\n+/// [`env::join_paths`]: join_paths\n #[derive(Debug)]\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct JoinPathsError {\n@@ -450,14 +437,10 @@ pub struct JoinPathsError {\n ///\n /// # Errors\n ///\n-/// Returns an [`Err`][err] (containing an error message) if one of the input\n+/// Returns an [`Err`] (containing an error message) if one of the input\n /// [`Path`]s contains an invalid character for constructing the `PATH`\n /// variable (a double quote on Windows or a colon on Unix).\n ///\n-/// [`Path`]: ../../std/path/struct.Path.html\n-/// [`OsString`]: ../../std/ffi/struct.OsString.html\n-/// [err]: ../../std/result/enum.Result.html#variant.Err\n-///\n /// # Examples\n ///\n /// Joining paths on a Unix-like platform:\n@@ -508,7 +491,7 @@ pub struct JoinPathsError {\n /// }\n /// ```\n ///\n-/// [`env::split_paths`]: fn.split_paths.html\n+/// [`env::split_paths`]: split_paths\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn join_paths<I, T>(paths: I) -> Result<OsString, JoinPathsError>\n where\n@@ -688,8 +671,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`String`]: ../string/struct.String.html\n-/// [`std::env::args`]: ./fn.args.html\n+/// [`std::env::args`]: args\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct Args {\n     inner: ArgsOs,\n@@ -705,8 +687,7 @@ pub struct Args {\n /// set to arbitrary text, and may not even exist. This means this property\n /// should not be relied upon for security purposes.\n ///\n-/// [`OsString`]: ../ffi/struct.OsString.html\n-/// [`std::env::args_os`]: ./fn.args_os.html\n+/// [`std::env::args_os`]: args_os\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub struct ArgsOs {\n     inner: sys::args::Args,\n@@ -744,8 +725,6 @@ pub struct ArgsOs {\n ///     println!(\"{}\", argument);\n /// }\n /// ```\n-///\n-/// [`args_os`]: ./fn.args_os.html\n #[stable(feature = \"env\", since = \"1.0.0\")]\n pub fn args() -> Args {\n     Args { inner: args_os() }"}, {"sha": "1b7681bd4bb1de0cc282b2efdc972b81bb842659", "filename": "library/std/src/error.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/732bebd85452b877aff784ddb01bb0f71af18c5a/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/732bebd85452b877aff784ddb01bb0f71af18c5a/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=732bebd85452b877aff784ddb01bb0f71af18c5a", "patch": "@@ -40,10 +40,8 @@ use crate::string;\n /// provide its own errors while also revealing some of the implementation for\n /// debugging via [`source`] chains.\n ///\n-/// [`Result<T, E>`]: ../result/enum.Result.html\n-/// [`Display`]: ../fmt/trait.Display.html\n-/// [`Debug`]: ../fmt/trait.Debug.html\n-/// [`source`]: trait.Error.html#method.source\n+/// [`Result<T, E>`]: Result\n+/// [`source`]: Error::source\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any.\n@@ -164,8 +162,6 @@ mod private {\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     /// Converts a type of [`Error`] into a box of dyn [`Error`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -199,8 +195,6 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of\n     /// dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -238,8 +232,6 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n impl From<String> for Box<dyn Error + Send + Sync> {\n     /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -283,8 +275,6 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n impl From<String> for Box<dyn Error> {\n     /// Converts a [`String`] into a box of dyn [`Error`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -306,8 +296,6 @@ impl From<String> for Box<dyn Error> {\n impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -329,8 +317,6 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n impl From<&str> for Box<dyn Error> {\n     /// Converts a [`str`] into a box of dyn [`Error`].\n     ///\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -350,9 +336,6 @@ impl From<&str> for Box<dyn Error> {\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n-    /// [`Cow`]: ../borrow/enum.Cow.html\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -374,9 +357,6 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`].\n     ///\n-    /// [`Cow`]: ../borrow/enum.Cow.html\n-    /// [`Error`]: ../error/trait.Error.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -703,7 +683,7 @@ impl dyn Error {\n     /// assert!(iter.next().is_none());\n     /// ```\n     ///\n-    /// [`source`]: trait.Error.html#method.source\n+    /// [`source`]: Error::source\n     #[unstable(feature = \"error_iter\", issue = \"58520\")]\n     #[inline]\n     pub fn chain(&self) -> Chain<'_> {\n@@ -715,8 +695,6 @@ impl dyn Error {\n ///\n /// If you want to omit the initial error and only process\n /// its sources, use `skip(1)`.\n-///\n-/// [`Error`]: trait.Error.html\n #[unstable(feature = \"error_iter\", issue = \"58520\")]\n #[derive(Clone, Debug)]\n pub struct Chain<'a> {"}]}