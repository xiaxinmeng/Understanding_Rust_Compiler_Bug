{"sha": "668980d8657bd358b83f74e2f54f5e228f7393ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ODk4MGQ4NjU3YmQzNThiODNmNzRlMmY1NGY1ZTIyOGY3MzkzZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-31T10:41:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-31T10:41:56Z"}, "message": "Merge #3777 #3784\n\n3777: Add basic task support r=matklad a=Timmmm\n\nThis adds basic support for running `cargo build`, `cargo run`, etc.\r\n\r\nFixes #1935\r\n\r\nI have tested this and it seems to work. There are two things I'm not sure about:\r\n\r\n1. The workspace folder handling seems wrong - just get the first workspace folder? Is this just a TODO item? I don't know if it is right to lift `workspaceFolder` up to `activate()` but I couldn't see another way.\r\n2. If you manually add an entry to `tasks.json` like this:\r\n\r\n```\r\n    {\r\n      \"type\": \"cargo\",\r\n      \"command\": \"build\",\r\n      \"problemMatcher\": [\r\n        \"$rustc\"\r\n      ],\r\n      \"group\": \"build\"\r\n    }\r\n```\r\n\r\nthen VSCode somehow magically knows to run `cargo build`. The documentation for `resolveTask` *sounds* like I should have to implement that for it to work:\r\n\r\n```\r\n * Resolves a task that has no [`execution`](#Task.execution) set. Tasks are\r\n * often created from information found in the `tasks.json`-file. Such tasks miss\r\n * the information on how to execute them and a task provider must fill in\r\n * the missing information in the `resolveTask`-method.\r\n```\r\n\r\nBut then it also says this:\r\n\r\n```\r\n* This method will not be\r\n * called for tasks returned from the above `provideTasks` method since those\r\n * tasks are always fully resolved. A valid default implementation for the\r\n * `resolveTask` method is to return `undefined`.\r\n```\r\n\r\nEither way, it works without implementing it so the only thing I can think is that it is doing some kind of crazy pattern matching of the tasks returned by `provideTasks()` and the ones found in `tasks.json`.\n\n3784: Ignore createProgress request in tests r=matklad a=matklad\n\ncloses #3783\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Tim <tdhutt@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "63a9a0ceee7325ff91f32e14302026a7c7cae17f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a9a0ceee7325ff91f32e14302026a7c7cae17f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/668980d8657bd358b83f74e2f54f5e228f7393ed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJegx50CRBK7hj4Ov3rIwAAdHIIAAaZhlDaGauITllxVt1mn1ps\nhizBd59VC5f914PzBG8m6Wcm3rHUuVHHOkiVRT+hDYtFrFWrJ5+Yq0GmHqi1WgsC\njgvS59wuWY9NcXbRGAu9tXMJmAnqIPOeaLEf5/YVWrL8AoHjKI+bjzOdHCtLKvib\np6LxAnF7qolCrupDK1rJm6a/ytQMi9RmwSepQFLyaXUyq0iLc5rbGAMZS2hbYDCe\n6RbiRi1wfVbbLgmbsI47QYnn0zpbMHUt9vV1FP97dSRzBWcgcRSX/i6jr6s+sJeZ\naVSGA06oWLiKQLDvviWQpc7ZRr5mX/RgpRMw3XA2rzGyMdmb7+p52QxU7K4j8gA=\n=lXPW\n-----END PGP SIGNATURE-----\n", "payload": "tree 63a9a0ceee7325ff91f32e14302026a7c7cae17f\nparent 6f0d8db529478ce41b429f06708fa600a97c2151\nparent 3eb45b99223ae6a708d82c52d656c697bc993c3b\nparent 6b2f02fdfd4ad22bc88f6fb2176ff6dd7c66d7e1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585651316 +0000\ncommitter GitHub <noreply@github.com> 1585651316 +0000\n\nMerge #3777 #3784\n\n3777: Add basic task support r=matklad a=Timmmm\n\nThis adds basic support for running `cargo build`, `cargo run`, etc.\r\n\r\nFixes #1935\r\n\r\nI have tested this and it seems to work. There are two things I'm not sure about:\r\n\r\n1. The workspace folder handling seems wrong - just get the first workspace folder? Is this just a TODO item? I don't know if it is right to lift `workspaceFolder` up to `activate()` but I couldn't see another way.\r\n2. If you manually add an entry to `tasks.json` like this:\r\n\r\n```\r\n    {\r\n      \"type\": \"cargo\",\r\n      \"command\": \"build\",\r\n      \"problemMatcher\": [\r\n        \"$rustc\"\r\n      ],\r\n      \"group\": \"build\"\r\n    }\r\n```\r\n\r\nthen VSCode somehow magically knows to run `cargo build`. The documentation for `resolveTask` *sounds* like I should have to implement that for it to work:\r\n\r\n```\r\n * Resolves a task that has no [`execution`](#Task.execution) set. Tasks are\r\n * often created from information found in the `tasks.json`-file. Such tasks miss\r\n * the information on how to execute them and a task provider must fill in\r\n * the missing information in the `resolveTask`-method.\r\n```\r\n\r\nBut then it also says this:\r\n\r\n```\r\n* This method will not be\r\n * called for tasks returned from the above `provideTasks` method since those\r\n * tasks are always fully resolved. A valid default implementation for the\r\n * `resolveTask` method is to return `undefined`.\r\n```\r\n\r\nEither way, it works without implementing it so the only thing I can think is that it is doing some kind of crazy pattern matching of the tasks returned by `provideTasks()` and the ones found in `tasks.json`.\n\n3784: Ignore createProgress request in tests r=matklad a=matklad\n\ncloses #3783\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Tim <tdhutt@gmail.com>\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/668980d8657bd358b83f74e2f54f5e228f7393ed", "html_url": "https://github.com/rust-lang/rust/commit/668980d8657bd358b83f74e2f54f5e228f7393ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/668980d8657bd358b83f74e2f54f5e228f7393ed/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f0d8db529478ce41b429f06708fa600a97c2151", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0d8db529478ce41b429f06708fa600a97c2151", "html_url": "https://github.com/rust-lang/rust/commit/6f0d8db529478ce41b429f06708fa600a97c2151"}, {"sha": "3eb45b99223ae6a708d82c52d656c697bc993c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb45b99223ae6a708d82c52d656c697bc993c3b", "html_url": "https://github.com/rust-lang/rust/commit/3eb45b99223ae6a708d82c52d656c697bc993c3b"}, {"sha": "6b2f02fdfd4ad22bc88f6fb2176ff6dd7c66d7e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b2f02fdfd4ad22bc88f6fb2176ff6dd7c66d7e1", "html_url": "https://github.com/rust-lang/rust/commit/6b2f02fdfd4ad22bc88f6fb2176ff6dd7c66d7e1"}], "stats": {"total": 93, "additions": 80, "deletions": 13}, "files": [{"sha": "d818243e33efafa36a8339cacebf35c33104a776", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/668980d8657bd358b83f74e2f54f5e228f7393ed/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668980d8657bd358b83f74e2f54f5e228f7393ed/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=668980d8657bd358b83f74e2f54f5e228f7393ed", "patch": "@@ -808,14 +808,14 @@ fn send_startup_progress(sender: &Sender<Message>, loop_state: &mut LoopState) {\n         ),\n         _ => {}\n     }\n-}\n \n-fn send_startup_progress_notif(sender: &Sender<Message>, work_done_progress: WorkDoneProgress) {\n-    let notif = notification_new::<req::Progress>(req::ProgressParams {\n-        token: req::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n-        value: req::ProgressParamsValue::WorkDone(work_done_progress),\n-    });\n-    sender.send(notif.into()).unwrap();\n+    fn send_startup_progress_notif(sender: &Sender<Message>, work_done_progress: WorkDoneProgress) {\n+        let notif = notification_new::<req::Progress>(req::ProgressParams {\n+            token: req::ProgressToken::String(\"rustAnalyzer/startup\".into()),\n+            value: req::ProgressParamsValue::WorkDone(work_done_progress),\n+        });\n+        sender.send(notif.into()).unwrap();\n+    }\n }\n \n struct PoolDispatcher<'a> {"}, {"sha": "fc3c65ad9eed1a92163bb849ec285e1cd9f9aa4f", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/668980d8657bd358b83f74e2f54f5e228f7393ed/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/668980d8657bd358b83f74e2f54f5e228f7393ed/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=668980d8657bd358b83f74e2f54f5e228f7393ed", "patch": "@@ -188,6 +188,7 @@ impl Server {\n         self.client.sender.send(r.into()).unwrap();\n         while let Some(msg) = self.recv() {\n             match msg {\n+                Message::Request(req) if req.method == \"window/workDoneProgress/create\" => (),\n                 Message::Request(req) => panic!(\"unexpected request: {:?}\", req),\n                 Message::Notification(_) => (),\n                 Message::Response(res) => {"}, {"sha": "f909f8db26b74d791e57f45e79321879a7c12684", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/668980d8657bd358b83f74e2f54f5e228f7393ed/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/668980d8657bd358b83f74e2f54f5e228f7393ed/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=668980d8657bd358b83f74e2f54f5e228f7393ed", "patch": "@@ -30,15 +30,14 @@ export function configToServerOptions(config: Config) {\n     };\n }\n \n-export async function createClient(config: Config, serverPath: string): Promise<lc.LanguageClient> {\n+export async function createClient(config: Config, serverPath: string, cwd: string): Promise<lc.LanguageClient> {\n     // '.' Is the fallback if no folder is open\n     // TODO?: Workspace folders support Uri's (eg: file://test.txt).\n     // It might be a good idea to test if the uri points to a file.\n-    const workspaceFolderPath = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n     const run: lc.Executable = {\n         command: serverPath,\n-        options: { cwd: workspaceFolderPath },\n+        options: { cwd },\n     };\n     const serverOptions: lc.ServerOptions = {\n         run,"}, {"sha": "86b5f36295468daa13c5bf7bae50256aa40a482d", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/668980d8657bd358b83f74e2f54f5e228f7393ed/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/668980d8657bd358b83f74e2f54f5e228f7393ed/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=668980d8657bd358b83f74e2f54f5e228f7393ed", "patch": "@@ -15,8 +15,13 @@ export class Ctx {\n \n     }\n \n-    static async create(config: Config, extCtx: vscode.ExtensionContext, serverPath: string): Promise<Ctx> {\n-        const client = await createClient(config, serverPath);\n+    static async create(\n+        config: Config,\n+        extCtx: vscode.ExtensionContext,\n+        serverPath: string,\n+        cwd: string,\n+    ): Promise<Ctx> {\n+        const client = await createClient(config, serverPath, cwd);\n         const res = new Ctx(config, extCtx, client, serverPath);\n         res.pushCleanup(client.start());\n         await client.onReady();"}, {"sha": "7ba16120c3ace2979d9b920b12eebfa060ebe2f8", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/668980d8657bd358b83f74e2f54f5e228f7393ed/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/668980d8657bd358b83f74e2f54f5e228f7393ed/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=668980d8657bd358b83f74e2f54f5e228f7393ed", "patch": "@@ -13,6 +13,7 @@ import { log, assert } from './util';\n import { PersistentState } from './persistent_state';\n import { fetchRelease, download } from './net';\n import { spawnSync } from 'child_process';\n+import { activateTaskProvider } from './tasks';\n \n let ctx: Ctx | undefined;\n \n@@ -41,11 +42,18 @@ export async function activate(context: vscode.ExtensionContext) {\n     const state = new PersistentState(context.globalState);\n     const serverPath = await bootstrap(config, state);\n \n+    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n+    if (workspaceFolder === undefined) {\n+        const err = \"Cannot activate rust-analyzer when no folder is opened\";\n+        void vscode.window.showErrorMessage(err);\n+        throw new Error(err);\n+    }\n+\n     // Note: we try to start the server before we activate type hints so that it\n     // registers its `onDidChangeDocument` handler before us.\n     //\n     // This a horribly, horribly wrong way to deal with this problem.\n-    ctx = await Ctx.create(config, context, serverPath);\n+    ctx = await Ctx.create(config, context, serverPath, workspaceFolder.uri.fsPath);\n \n     // Commands which invokes manually via command palette, shortcut, etc.\n \n@@ -85,6 +93,8 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('applySourceChange', commands.applySourceChange);\n     ctx.registerCommand('selectAndApplySourceChange', commands.selectAndApplySourceChange);\n \n+    ctx.pushCleanup(activateTaskProvider(workspaceFolder));\n+\n     activateStatusDisplay(ctx);\n \n     if (!ctx.config.highlightingSemanticTokens) {"}, {"sha": "fa1c4a951ddbb68dfaa45b4ef276d244eb97f15a", "filename": "editors/code/src/tasks.ts", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/668980d8657bd358b83f74e2f54f5e228f7393ed/editors%2Fcode%2Fsrc%2Ftasks.ts", "raw_url": "https://github.com/rust-lang/rust/raw/668980d8657bd358b83f74e2f54f5e228f7393ed/editors%2Fcode%2Fsrc%2Ftasks.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftasks.ts?ref=668980d8657bd358b83f74e2f54f5e228f7393ed", "patch": "@@ -0,0 +1,52 @@\n+import * as vscode from 'vscode';\n+\n+// This ends up as the `type` key in tasks.json. RLS also uses `cargo` and\n+// our configuration should be compatible with it so use the same key.\n+const TASK_TYPE = 'cargo';\n+\n+export function activateTaskProvider(target: vscode.WorkspaceFolder): vscode.Disposable {\n+    const provider: vscode.TaskProvider = {\n+        // Detect Rust tasks. Currently we do not do any actual detection\n+        // of tasks (e.g. aliases in .cargo/config) and just return a fixed\n+        // set of tasks that always exist. These tasks cannot be removed in\n+        // tasks.json - only tweaked.\n+        provideTasks: () => getStandardCargoTasks(target),\n+\n+        // We don't need to implement this.\n+        resolveTask: () => undefined,\n+    };\n+\n+    return vscode.tasks.registerTaskProvider(TASK_TYPE, provider);\n+}\n+\n+function getStandardCargoTasks(target: vscode.WorkspaceFolder): vscode.Task[] {\n+    return [\n+        { command: 'build', group: vscode.TaskGroup.Build },\n+        { command: 'check', group: vscode.TaskGroup.Build },\n+        { command: 'test', group: vscode.TaskGroup.Test },\n+        { command: 'clean', group: vscode.TaskGroup.Clean },\n+        { command: 'run', group: undefined },\n+    ]\n+        .map(({ command, group }) => {\n+            const vscodeTask = new vscode.Task(\n+                // The contents of this object end up in the tasks.json entries.\n+                {\n+                    type: TASK_TYPE,\n+                    command,\n+                },\n+                // The scope of the task - workspace or specific folder (global\n+                // is not supported).\n+                target,\n+                // The task name, and task source. These are shown in the UI as\n+                // `${source}: ${name}`, e.g. `rust: cargo build`.\n+                `cargo ${command}`,\n+                'rust',\n+                // What to do when this command is executed.\n+                new vscode.ShellExecution('cargo', [command]),\n+                // Problem matchers.\n+                ['$rustc'],\n+            );\n+            vscodeTask.group = group;\n+            return vscodeTask;\n+        });\n+}"}]}