{"sha": "a6692b793542291c5bf935d50d9a44982d792719", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NjkyYjc5MzU0MjI5MWM1YmY5MzVkNTBkOWE0NDk4MmQ3OTI3MTk=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-21T13:24:57Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-03-21T19:45:14Z"}, "message": "clarify when we pass () to functions (clippy::unit_arg)", "tree": {"sha": "992ec13790b0dc915cb5586151836432f73959fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/992ec13790b0dc915cb5586151836432f73959fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6692b793542291c5bf935d50d9a44982d792719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6692b793542291c5bf935d50d9a44982d792719", "html_url": "https://github.com/rust-lang/rust/commit/a6692b793542291c5bf935d50d9a44982d792719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6692b793542291c5bf935d50d9a44982d792719/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b4c2f67add84b905f3ad8066846b34e36ee5ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4c2f67add84b905f3ad8066846b34e36ee5ea3", "html_url": "https://github.com/rust-lang/rust/commit/3b4c2f67add84b905f3ad8066846b34e36ee5ea3"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "ac593d0845a7df52051836a3379cc1181d84f888", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6692b793542291c5bf935d50d9a44982d792719/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6692b793542291c5bf935d50d9a44982d792719/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a6692b793542291c5bf935d50d9a44982d792719", "patch": "@@ -581,7 +581,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// If `target` is `None`, that indicates the function cannot return, so we raise UB.\n     pub fn return_to_block(&mut self, target: Option<mir::BasicBlock>) -> InterpResult<'tcx> {\n         if let Some(target) = target {\n-            Ok(self.go_to_block(target))\n+            self.go_to_block(target);\n+            Ok(())\n         } else {\n             throw_ub!(Unreachable)\n         }"}, {"sha": "162387308040dd493dee00132bd3f3e74a96220e", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a6692b793542291c5bf935d50d9a44982d792719/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6692b793542291c5bf935d50d9a44982d792719/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=a6692b793542291c5bf935d50d9a44982d792719", "patch": "@@ -192,7 +192,8 @@ impl PrettyPrinter<'tcx> for AbsolutePathPrinter<'tcx> {\n \n impl Write for AbsolutePathPrinter<'_> {\n     fn write_str(&mut self, s: &str) -> std::fmt::Result {\n-        Ok(self.path.push_str(s))\n+        self.path.push_str(s);\n+        Ok(())\n     }\n }\n "}, {"sha": "6b0bbe4f6e0bbd64c15ee09246cca772f6dd65e3", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6692b793542291c5bf935d50d9a44982d792719/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6692b793542291c5bf935d50d9a44982d792719/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=a6692b793542291c5bf935d50d9a44982d792719", "patch": "@@ -370,7 +370,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         self.stack.pop();\n                         Err(err)\n                     }\n-                    Ok(v) => Ok(v),\n+                    Ok(()) => Ok(()),\n                 }\n             }\n             // cannot use the shim here, because that will only result in infinite recursion"}, {"sha": "7ed828c91679cc98c3222fbdd271e3e3f5376ac7", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6692b793542291c5bf935d50d9a44982d792719/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6692b793542291c5bf935d50d9a44982d792719/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=a6692b793542291c5bf935d50d9a44982d792719", "patch": "@@ -80,11 +80,11 @@ impl AscribeUserTypeCx<'me, 'tcx> {\n     where\n         T: ToTrace<'tcx>,\n     {\n-        Ok(self\n-            .infcx\n+        self.infcx\n             .at(&ObligationCause::dummy(), self.param_env)\n             .relate(a, variance, b)?\n-            .into_value_registering_obligations(self.infcx, self.fulfill_cx))\n+            .into_value_registering_obligations(self.infcx, self.fulfill_cx);\n+        Ok(())\n     }\n \n     fn prove_predicate(&mut self, predicate: Predicate<'tcx>) {\n@@ -165,10 +165,11 @@ fn type_op_eq<'tcx>(\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n         let (param_env, Eq { a, b }) = key.into_parts();\n-        Ok(infcx\n+        infcx\n             .at(&ObligationCause::dummy(), param_env)\n             .eq(a, b)?\n-            .into_value_registering_obligations(infcx, fulfill_cx))\n+            .into_value_registering_obligations(infcx, fulfill_cx);\n+        Ok(())\n     })\n }\n \n@@ -221,10 +222,11 @@ fn type_op_subtype<'tcx>(\n ) -> Result<&'tcx Canonical<'tcx, QueryResponse<'tcx, ()>>, NoSolution> {\n     tcx.infer_ctxt().enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n         let (param_env, Subtype { sub, sup }) = key.into_parts();\n-        Ok(infcx\n+        infcx\n             .at(&ObligationCause::dummy(), param_env)\n             .sup(sup, sub)?\n-            .into_value_registering_obligations(infcx, fulfill_cx))\n+            .into_value_registering_obligations(infcx, fulfill_cx);\n+        Ok(())\n     })\n }\n "}]}