{"sha": "ef5f60285faa6444e293214bd0137511f4e40d0d", "node_id": "C_kwDOAAsO6NoAKGVmNWY2MDI4NWZhYTY0NDRlMjkzMjE0YmQwMTM3NTExZjRlNDBkMGQ", "commit": {"author": {"name": "Samuel Moelius", "email": "samuel.moelius@trailofbits.com", "date": "2022-11-18T18:18:58Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-11-19T10:53:49Z"}, "message": "Move `line_span` to source.rs", "tree": {"sha": "2dc8781d389c057aa108f4e4a5151264a64925f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2dc8781d389c057aa108f4e4a5151264a64925f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef5f60285faa6444e293214bd0137511f4e40d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5f60285faa6444e293214bd0137511f4e40d0d", "html_url": "https://github.com/rust-lang/rust/commit/ef5f60285faa6444e293214bd0137511f4e40d0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef5f60285faa6444e293214bd0137511f4e40d0d/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f60186f35d5f6d77101b21e7c574531d2f366561", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60186f35d5f6d77101b21e7c574531d2f366561", "html_url": "https://github.com/rust-lang/rust/commit/f60186f35d5f6d77101b21e7c574531d2f366561"}], "stats": {"total": 42, "additions": 20, "deletions": 22}, "files": [{"sha": "b0063758dcef01685307cd0713b5af8eb24dca02", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ef5f60285faa6444e293214bd0137511f4e40d0d/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5f60285faa6444e293214bd0137511f4e40d0d/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=ef5f60285faa6444e293214bd0137511f4e40d0d", "patch": "@@ -108,11 +108,10 @@ use rustc_middle::ty::{FloatTy, IntTy, UintTy};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n-use rustc_span::source_map::original_sp;\n use rustc_span::source_map::SourceMap;\n use rustc_span::sym;\n use rustc_span::symbol::{kw, Ident, Symbol};\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n use rustc_target::abi::Integer;\n \n use crate::consts::{constant, Constant};\n@@ -1302,23 +1301,6 @@ pub fn contains_return(expr: &hir::Expr<'_>) -> bool {\n     .is_some()\n }\n \n-/// Extends the span to the beginning of the spans line, incl. whitespaces.\n-///\n-/// ```rust\n-///        let x = ();\n-/// //             ^^\n-/// // will be converted to\n-///        let x = ();\n-/// // ^^^^^^^^^^^^^^\n-/// ```\n-fn line_span<T: LintContext>(cx: &T, span: Span) -> Span {\n-    let span = original_sp(span, DUMMY_SP);\n-    let source_map_and_line = cx.sess().source_map().lookup_line(span.lo()).unwrap();\n-    let line_no = source_map_and_line.line;\n-    let line_start = source_map_and_line.sf.lines(|lines| lines[line_no]);\n-    span.with_lo(line_start)\n-}\n-\n /// Gets the parent node, if any.\n pub fn get_parent_node(tcx: TyCtxt<'_>, id: HirId) -> Option<Node<'_>> {\n     tcx.hir().parent_iter(id).next().map(|(_, node)| node)"}, {"sha": "eacfa91ba556d41d454f2b3a63c5a325ae4311cd", "filename": "clippy_utils/src/source.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef5f60285faa6444e293214bd0137511f4e40d0d/clippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5f60285faa6444e293214bd0137511f4e40d0d/clippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsource.rs?ref=ef5f60285faa6444e293214bd0137511f4e40d0d", "patch": "@@ -2,13 +2,12 @@\n \n #![allow(clippy::module_name_repetitions)]\n \n-use crate::line_span;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_span::hygiene;\n-use rustc_span::source_map::SourceMap;\n-use rustc_span::{BytePos, Pos, Span, SpanData, SyntaxContext};\n+use rustc_span::source_map::{original_sp, SourceMap};\n+use rustc_span::{BytePos, Pos, Span, SpanData, SyntaxContext, DUMMY_SP};\n use std::borrow::Cow;\n \n /// Like `snippet_block`, but add braces if the expr is not an `ExprKind::Block`.\n@@ -55,6 +54,23 @@ fn first_char_in_first_line<T: LintContext>(cx: &T, span: Span) -> Option<BytePo\n     })\n }\n \n+/// Extends the span to the beginning of the spans line, incl. whitespaces.\n+///\n+/// ```rust\n+///        let x = ();\n+/// //             ^^\n+/// // will be converted to\n+///        let x = ();\n+/// // ^^^^^^^^^^^^^^\n+/// ```\n+fn line_span<T: LintContext>(cx: &T, span: Span) -> Span {\n+    let span = original_sp(span, DUMMY_SP);\n+    let source_map_and_line = cx.sess().source_map().lookup_line(span.lo()).unwrap();\n+    let line_no = source_map_and_line.line;\n+    let line_start = source_map_and_line.sf.lines(|lines| lines[line_no]);\n+    span.with_lo(line_start)\n+}\n+\n /// Returns the indentation of the line of a span\n ///\n /// ```rust,ignore"}]}