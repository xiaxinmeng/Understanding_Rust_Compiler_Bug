{"sha": "e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "node_id": "C_kwDOAAsO6NoAKGU0ZjM0MzE5MWFkZjlkOGUzMWEzYjQ1Yzk0MWE5YTUzNjUwZGQ0YTg", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-23T07:27:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-15T17:55:11Z"}, "message": "Flatten aggregates into locals.", "tree": {"sha": "f29575c114fc580e7799d5fe924650ba315eea9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f29575c114fc580e7799d5fe924650ba315eea9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "html_url": "https://github.com/rust-lang/rust/commit/e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b550eabfa6f371270c02644a19ad45415938fd68", "url": "https://api.github.com/repos/rust-lang/rust/commits/b550eabfa6f371270c02644a19ad45415938fd68", "html_url": "https://github.com/rust-lang/rust/commit/b550eabfa6f371270c02644a19ad45415938fd68"}], "stats": {"total": 1084, "additions": 1043, "deletions": 41}, "files": [{"sha": "5e85d1f0db4471cbaf9a7cc099b4e2b285da88c4", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -93,6 +93,7 @@ pub mod simplify;\n mod simplify_branches;\n mod simplify_comparison_integral;\n mod simplify_try;\n+mod sroa;\n mod uninhabited_enum_branching;\n mod unreachable_prop;\n \n@@ -563,6 +564,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &remove_zsts::RemoveZsts,\n             &const_goto::ConstGoto,\n             &remove_unneeded_drops::RemoveUnneededDrops,\n+            &sroa::ScalarReplacementOfAggregates,\n             &match_branches::MatchBranchSimplification,\n             // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)\n             &multiple_return_terminators::MultipleReturnTerminators,"}, {"sha": "0aa9833ada1100c054de9ad663d3b9e0fc9d873e", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "added", "additions": 348, "deletions": 0, "changes": 348, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,348 @@\n+use crate::MirPass;\n+use rustc_data_structures::fx::{FxIndexMap, IndexEntry};\n+use rustc_index::bit_set::BitSet;\n+use rustc_index::vec::IndexVec;\n+use rustc_middle::mir::visit::*;\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::TyCtxt;\n+\n+pub struct ScalarReplacementOfAggregates;\n+\n+impl<'tcx> MirPass<'tcx> for ScalarReplacementOfAggregates {\n+    fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n+        sess.mir_opt_level() >= 4\n+    }\n+\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let escaping = escaping_locals(&*body);\n+        debug!(?escaping);\n+        let replacements = compute_flattening(tcx, body, escaping);\n+        debug!(?replacements);\n+        replace_flattened_locals(tcx, body, replacements);\n+    }\n+}\n+\n+/// Identify all locals that are not eligible for SROA.\n+///\n+/// There are 3 cases:\n+/// - the aggegated local is used or passed to other code (function parameters and arguments);\n+/// - the locals is a union or an enum;\n+/// - the local's address is taken, and thus the relative addresses of the fields are observable to\n+///   client code.\n+fn escaping_locals(body: &Body<'_>) -> BitSet<Local> {\n+    let mut set = BitSet::new_empty(body.local_decls.len());\n+    set.insert_range(RETURN_PLACE..=Local::from_usize(body.arg_count));\n+    for (local, decl) in body.local_decls().iter_enumerated() {\n+        if decl.ty.is_union() || decl.ty.is_enum() {\n+            set.insert(local);\n+        }\n+    }\n+    let mut visitor = EscapeVisitor { set };\n+    visitor.visit_body(body);\n+    return visitor.set;\n+\n+    struct EscapeVisitor {\n+        set: BitSet<Local>,\n+    }\n+\n+    impl<'tcx> Visitor<'tcx> for EscapeVisitor {\n+        fn visit_local(&mut self, local: Local, _: PlaceContext, _: Location) {\n+            self.set.insert(local);\n+        }\n+\n+        fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n+            // Mirror the implementation in PreFlattenVisitor.\n+            if let &[PlaceElem::Field(..), ..] = &place.projection[..] {\n+                return;\n+            }\n+            self.super_place(place, context, location);\n+        }\n+\n+        fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n+            if let Rvalue::AddressOf(.., place) | Rvalue::Ref(.., place) = rvalue {\n+                if !place.is_indirect() {\n+                    // Raw pointers may be used to access anything inside the enclosing place.\n+                    self.set.insert(place.local);\n+                    return;\n+                }\n+            }\n+            self.super_rvalue(rvalue, location)\n+        }\n+\n+        fn visit_statement(&mut self, statement: &Statement<'tcx>, location: Location) {\n+            if let StatementKind::StorageLive(..)\n+            | StatementKind::StorageDead(..)\n+            | StatementKind::Deinit(..) = statement.kind\n+            {\n+                // Storage statements are expanded in run_pass.\n+                return;\n+            }\n+            self.super_statement(statement, location)\n+        }\n+\n+        fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n+            // Drop implicitly calls `drop_in_place`, which takes a `&mut`.\n+            // This implies that `Drop` implicitly takes the address of the place.\n+            if let TerminatorKind::Drop { place, .. }\n+            | TerminatorKind::DropAndReplace { place, .. } = terminator.kind\n+            {\n+                if !place.is_indirect() {\n+                    // Raw pointers may be used to access anything inside the enclosing place.\n+                    self.set.insert(place.local);\n+                    return;\n+                }\n+            }\n+            self.super_terminator(terminator, location);\n+        }\n+\n+        // We ignore anything that happens in debuginfo, since we expand it using\n+        // `VarDebugInfoContents::Composite`.\n+        fn visit_var_debug_info(&mut self, _: &VarDebugInfo<'tcx>) {}\n+    }\n+}\n+\n+#[derive(Default, Debug)]\n+struct ReplacementMap<'tcx> {\n+    fields: FxIndexMap<PlaceRef<'tcx>, Local>,\n+}\n+\n+/// Compute the replacement of flattened places into locals.\n+///\n+/// For each eligible place, we assign a new local to each accessed field.\n+/// The replacement will be done later in `ReplacementVisitor`.\n+fn compute_flattening<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mut Body<'tcx>,\n+    escaping: BitSet<Local>,\n+) -> ReplacementMap<'tcx> {\n+    let mut visitor = PreFlattenVisitor {\n+        tcx,\n+        escaping,\n+        local_decls: &mut body.local_decls,\n+        map: Default::default(),\n+    };\n+    for (block, bbdata) in body.basic_blocks.iter_enumerated() {\n+        visitor.visit_basic_block_data(block, bbdata);\n+    }\n+    return visitor.map;\n+\n+    struct PreFlattenVisitor<'tcx, 'll> {\n+        tcx: TyCtxt<'tcx>,\n+        local_decls: &'ll mut LocalDecls<'tcx>,\n+        escaping: BitSet<Local>,\n+        map: ReplacementMap<'tcx>,\n+    }\n+\n+    impl<'tcx, 'll> PreFlattenVisitor<'tcx, 'll> {\n+        fn create_place(&mut self, place: PlaceRef<'tcx>) {\n+            if self.escaping.contains(place.local) {\n+                return;\n+            }\n+\n+            match self.map.fields.entry(place) {\n+                IndexEntry::Occupied(_) => {}\n+                IndexEntry::Vacant(v) => {\n+                    let ty = place.ty(&*self.local_decls, self.tcx).ty;\n+                    let local = self.local_decls.push(LocalDecl {\n+                        ty,\n+                        user_ty: None,\n+                        ..self.local_decls[place.local].clone()\n+                    });\n+                    v.insert(local);\n+                }\n+            }\n+        }\n+    }\n+\n+    impl<'tcx, 'll> Visitor<'tcx> for PreFlattenVisitor<'tcx, 'll> {\n+        fn visit_place(&mut self, place: &Place<'tcx>, _: PlaceContext, _: Location) {\n+            if let &[PlaceElem::Field(..), ..] = &place.projection[..] {\n+                let pr = PlaceRef { local: place.local, projection: &place.projection[..1] };\n+                self.create_place(pr)\n+            }\n+        }\n+    }\n+}\n+\n+/// Perform the replacement computed by `compute_flattening`.\n+fn replace_flattened_locals<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mut Body<'tcx>,\n+    replacements: ReplacementMap<'tcx>,\n+) {\n+    let mut all_dead_locals = BitSet::new_empty(body.local_decls.len());\n+    for p in replacements.fields.keys() {\n+        all_dead_locals.insert(p.local);\n+    }\n+    debug!(?all_dead_locals);\n+    if all_dead_locals.is_empty() {\n+        return;\n+    }\n+\n+    let mut fragments = IndexVec::new();\n+    for (k, v) in &replacements.fields {\n+        fragments.ensure_contains_elem(k.local, || Vec::new());\n+        fragments[k.local].push((&k.projection[..], *v));\n+    }\n+    debug!(?fragments);\n+\n+    let mut visitor = ReplacementVisitor {\n+        tcx,\n+        local_decls: &body.local_decls,\n+        replacements,\n+        all_dead_locals,\n+        fragments,\n+    };\n+    for (bb, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n+        visitor.visit_basic_block_data(bb, data);\n+    }\n+    for scope in &mut body.source_scopes {\n+        visitor.visit_source_scope_data(scope);\n+    }\n+    for (index, annotation) in body.user_type_annotations.iter_enumerated_mut() {\n+        visitor.visit_user_type_annotation(index, annotation);\n+    }\n+    for var_debug_info in &mut body.var_debug_info {\n+        visitor.visit_var_debug_info(var_debug_info);\n+    }\n+}\n+\n+struct ReplacementVisitor<'tcx, 'll> {\n+    tcx: TyCtxt<'tcx>,\n+    /// This is only used to compute the type for `VarDebugInfoContents::Composite`.\n+    local_decls: &'ll LocalDecls<'tcx>,\n+    /// Work to do.\n+    replacements: ReplacementMap<'tcx>,\n+    /// This is used to check that we are not leaving references to replaced locals behind.\n+    all_dead_locals: BitSet<Local>,\n+    /// Pre-computed list of all \"new\" locals for each \"old\" local.  This is used to expand storage\n+    /// and deinit statement and debuginfo.\n+    fragments: IndexVec<Local, Vec<(&'tcx [PlaceElem<'tcx>], Local)>>,\n+}\n+\n+impl<'tcx, 'll> ReplacementVisitor<'tcx, 'll> {\n+    fn gather_debug_info_fragments(\n+        &self,\n+        place: PlaceRef<'tcx>,\n+    ) -> Vec<VarDebugInfoFragment<'tcx>> {\n+        let mut fragments = Vec::new();\n+        let parts = &self.fragments[place.local];\n+        for (proj, replacement_local) in parts {\n+            if proj.starts_with(place.projection) {\n+                fragments.push(VarDebugInfoFragment {\n+                    projection: proj[place.projection.len()..].to_vec(),\n+                    contents: Place::from(*replacement_local),\n+                });\n+            }\n+        }\n+        fragments\n+    }\n+\n+    fn replace_place(&self, place: PlaceRef<'tcx>) -> Option<Place<'tcx>> {\n+        if let &[PlaceElem::Field(..), ref rest @ ..] = place.projection {\n+            let pr = PlaceRef { local: place.local, projection: &place.projection[..1] };\n+            let local = self.replacements.fields.get(&pr)?;\n+            Some(Place { local: *local, projection: self.tcx.intern_place_elems(&rest) })\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'll> MutVisitor<'tcx> for ReplacementVisitor<'tcx, 'll> {\n+    fn tcx(&self) -> TyCtxt<'tcx> {\n+        self.tcx\n+    }\n+\n+    fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n+        if let StatementKind::StorageLive(..)\n+        | StatementKind::StorageDead(..)\n+        | StatementKind::Deinit(..) = statement.kind\n+        {\n+            // Storage statements are expanded in run_pass.\n+            return;\n+        }\n+        self.super_statement(statement, location)\n+    }\n+\n+    fn visit_place(&mut self, place: &mut Place<'tcx>, context: PlaceContext, location: Location) {\n+        if let Some(repl) = self.replace_place(place.as_ref()) {\n+            *place = repl\n+        } else {\n+            self.super_place(place, context, location)\n+        }\n+    }\n+\n+    fn visit_var_debug_info(&mut self, var_debug_info: &mut VarDebugInfo<'tcx>) {\n+        match &mut var_debug_info.value {\n+            VarDebugInfoContents::Place(ref mut place) => {\n+                if let Some(repl) = self.replace_place(place.as_ref()) {\n+                    *place = repl;\n+                } else if self.all_dead_locals.contains(place.local) {\n+                    let ty = place.ty(self.local_decls, self.tcx).ty;\n+                    let fragments = self.gather_debug_info_fragments(place.as_ref());\n+                    var_debug_info.value = VarDebugInfoContents::Composite { ty, fragments };\n+                }\n+            }\n+            VarDebugInfoContents::Composite { ty: _, ref mut fragments } => {\n+                let mut new_fragments = Vec::new();\n+                fragments\n+                    .drain_filter(|fragment| {\n+                        if let Some(repl) = self.replace_place(fragment.contents.as_ref()) {\n+                            fragment.contents = repl;\n+                            true\n+                        } else if self.all_dead_locals.contains(fragment.contents.local) {\n+                            let frg = self.gather_debug_info_fragments(fragment.contents.as_ref());\n+                            new_fragments.extend(frg.into_iter().map(|mut f| {\n+                                f.projection.splice(0..0, fragment.projection.iter().copied());\n+                                f\n+                            }));\n+                            false\n+                        } else {\n+                            true\n+                        }\n+                    })\n+                    .for_each(drop);\n+                fragments.extend(new_fragments);\n+            }\n+            VarDebugInfoContents::Const(_) => {}\n+        }\n+    }\n+\n+    fn visit_basic_block_data(&mut self, bb: BasicBlock, bbdata: &mut BasicBlockData<'tcx>) {\n+        self.super_basic_block_data(bb, bbdata);\n+\n+        #[derive(Debug)]\n+        enum Stmt {\n+            StorageLive,\n+            StorageDead,\n+            Deinit,\n+        }\n+\n+        bbdata.expand_statements(|stmt| {\n+            let source_info = stmt.source_info;\n+            let (stmt, origin_local) = match &stmt.kind {\n+                StatementKind::StorageLive(l) => (Stmt::StorageLive, *l),\n+                StatementKind::StorageDead(l) => (Stmt::StorageDead, *l),\n+                StatementKind::Deinit(p) if let Some(l) = p.as_local() => (Stmt::Deinit, l),\n+                _ => return None,\n+            };\n+            if !self.all_dead_locals.contains(origin_local) {\n+                return None;\n+            }\n+            let final_locals = self.fragments.get(origin_local)?;\n+            Some(final_locals.iter().map(move |&(_, l)| {\n+                let kind = match stmt {\n+                    Stmt::StorageLive => StatementKind::StorageLive(l),\n+                    Stmt::StorageDead => StatementKind::StorageDead(l),\n+                    Stmt::Deinit => StatementKind::Deinit(Box::new(l.into())),\n+                };\n+                Statement { source_info, kind }\n+            }))\n+        });\n+    }\n+\n+    fn visit_local(&mut self, local: &mut Local, _: PlaceContext, _: Location) {\n+        assert!(!self.all_dead_locals.contains(*local));\n+    }\n+}"}, {"sha": "e959e1b2f2c309dee6b7caf45d22c320c0495745", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -30,14 +30,19 @@\n -                         debug s => _9;   // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n +                         debug s => const \"hello, world!\"; // in scope 5 at $DIR/const_debuginfo.rs:+6:9: +6:10\n                           let _10: (bool, bool, u32); // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _16: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _17: bool;   // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                          let _18: u32;    // in scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n                           scope 6 {\n-                              debug f => _10; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+                              debug f => (bool, bool, u32){ .0 => _16, .1 => _17, .2 => _18, }; // in scope 6 at $DIR/const_debuginfo.rs:+8:9: +8:10\n                               let _11: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n                               scope 7 {\n                                   debug o => _11; // in scope 7 at $DIR/const_debuginfo.rs:+10:9: +10:10\n                                   let _12: Point; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  let _19: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                  let _20: u32; // in scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n                                   scope 8 {\n-                                      debug p => _12; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+                                      debug p => Point{ .0 => _19, .1 => _20, }; // in scope 8 at $DIR/const_debuginfo.rs:+12:9: +12:10\n                                       let _13: u32; // in scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n                                       scope 9 {\n -                                         debug a => _13; // in scope 9 at $DIR/const_debuginfo.rs:+13:9: +13:10\n@@ -78,19 +83,25 @@\n                                            // mir::Constant\n                                            // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n                                            // + literal: Const { ty: &str, val: Value(Slice(..)) }\n-          StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n-          Deinit(_10);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          (_10.0: bool) = const true;      // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          (_10.1: bool) = const false;     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n-          (_10.2: u32) = const 123_u32;    // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          StorageLive(_16);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          StorageLive(_17);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          StorageLive(_18);                // scope 5 at $DIR/const_debuginfo.rs:+8:9: +8:10\n+          Deinit(_16);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          Deinit(_17);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          Deinit(_18);                     // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          _16 = const true;                // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          _17 = const false;               // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n+          _18 = const 123_u32;             // scope 5 at $DIR/const_debuginfo.rs:+8:13: +8:34\n           StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:+10:9: +10:10\n           Deinit(_11);                     // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n           ((_11 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n           discriminant(_11) = 1;           // scope 6 at $DIR/const_debuginfo.rs:+10:13: +10:24\n-          StorageLive(_12);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n-          Deinit(_12);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          (_12.0: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n-          (_12.1: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          StorageLive(_19);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+          StorageLive(_20);                // scope 7 at $DIR/const_debuginfo.rs:+12:9: +12:10\n+          Deinit(_19);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          Deinit(_20);                     // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          _19 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n+          _20 = const 32_u32;              // scope 7 at $DIR/const_debuginfo.rs:+12:13: +12:35\n           StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:+13:9: +13:10\n           StorageLive(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n           _14 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:+13:13: +13:16\n@@ -101,9 +112,12 @@\n           StorageDead(_14);                // scope 8 at $DIR/const_debuginfo.rs:+13:21: +13:22\n           nop;                             // scope 0 at $DIR/const_debuginfo.rs:+0:11: +14:2\n           StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_12);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_19);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_20);                // scope 7 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:+14:1: +14:2\n-          StorageDead(_10);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_16);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_17);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n+          StorageDead(_18);                // scope 5 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:+14:1: +14:2\n           StorageDead(_3);                 // scope 2 at $DIR/const_debuginfo.rs:+14:1: +14:2"}, {"sha": "cfc9a72e3b2287d4a4595a679a93200a796e31a6", "filename": "src/test/mir-opt/const_prop/aggregate.main.PreCodegen.after.mir", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.PreCodegen.after.mir?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,28 @@\n+// MIR for `main` after PreCodegen\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/aggregate.rs:+0:11: +0:11\n+    let _1: i32;                         // in scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+    let mut _2: i32;                     // in scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+    let mut _3: (i32, i32, i32);         // in scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/aggregate.rs:+1:9: +1:10\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+        StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+        Deinit(_3);                      // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+        (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+        (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+        (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:+1:13: +1:22\n+        _2 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:24\n+        _1 = const 1_i32;                // scope 0 at $DIR/aggregate.rs:+1:13: +1:28\n+        StorageDead(_2);                 // scope 0 at $DIR/aggregate.rs:+1:27: +1:28\n+        StorageDead(_3);                 // scope 0 at $DIR/aggregate.rs:+1:28: +1:29\n+        _0 = const ();                   // scope 0 at $DIR/aggregate.rs:+0:11: +2:2\n+        StorageDead(_1);                 // scope 0 at $DIR/aggregate.rs:+2:1: +2:2\n+        return;                          // scope 0 at $DIR/aggregate.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "6a3080384daf4fb0e285d412d331ef59ac258e40", "filename": "src/test/mir-opt/const_prop/aggregate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -O\n \n // EMIT_MIR aggregate.main.ConstProp.diff\n+// EMIT_MIR aggregate.main.PreCodegen.after.mir\n fn main() {\n     let x = (0, 1, 2).1 + 0;\n }"}, {"sha": "2e4b0e79e9f2d355fc142aec38583a648603eaa7", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -8,8 +8,10 @@\n       scope 1 {\n           debug a => _1;                   // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+1:9: +1:10\n           let mut _2: (i32, i32);          // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _6: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          let mut _7: i32;                 // in scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n           scope 2 {\n-              debug x => _2;               // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+              debug x => (i32, i32){ .0 => _6, .1 => _7, }; // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n               let _4: i32;                 // in scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n               scope 3 {\n                   debug y => _4;           // in scope 3 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n@@ -30,23 +32,26 @@\n       }\n   \n       bb1: {\n-          StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n-          Deinit(_2);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          (_2.0: i32) = const 1_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n-          (_2.1: i32) = const 2_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          StorageLive(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          StorageLive(_7);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:9: +2:14\n+          Deinit(_6);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          Deinit(_7);                      // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          _6 = const 1_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n+          _7 = const 2_i32;                // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+2:29: +2:35\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n           _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n-          (_2.1: i32) = move _3;           // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n+          _7 = move _3;                    // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:5: +3:12\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+3:11: +3:12\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:9: +4:10\n-          _4 = (_2.1: i32);                // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n+          _4 = _7;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+4:13: +4:16\n           StorageLive(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:9: +5:10\n--         _5 = (_2.0: i32);                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n+-         _5 = _6;                         // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n +         _5 = const 1_i32;                // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+5:13: +5:16\n           nop;                             // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+0:11: +6:2\n           StorageDead(_5);                 // scope 3 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_4);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n-          StorageDead(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_6);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n+          StorageDead(_7);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           StorageDead(_1);                 // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:1: +6:2\n           return;                          // scope 0 at $DIR/mutable_variable_unprop_assign.rs:+6:2: +6:2\n       }"}, {"sha": "7e8ebd31ad1e94d016711359fea210e54ed62063", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.32bit.diff", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.32bit.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -10,6 +10,8 @@\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -51,13 +53,16 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_10);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_11);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "7e8ebd31ad1e94d016711359fea210e54ed62063", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.64bit.diff", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.64bit.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -10,6 +10,8 @@\n       let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n       let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n           let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n@@ -51,13 +53,16 @@\n           StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n-          StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n-          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n--         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+          StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_10);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          Deinit(_11);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+          _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n +         _8 = const 42_u32;               // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n-          StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n           nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n           StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n           StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2"}, {"sha": "9db87cfc879bbee9fc421a8ba345009ed1acf2ed", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.PreCodegen.after.32bit.mir", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.32bit.mir?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,27 @@\n+// MIR for `main` after PreCodegen\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+            scope 3 {\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "9db87cfc879bbee9fc421a8ba345009ed1acf2ed", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.PreCodegen.after.64bit.mir", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.PreCodegen.after.64bit.mir?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,27 @@\n+// MIR for `main` after PreCodegen\n+\n+fn main() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+    let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+    scope 1 {\n+        debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        let _2: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        scope 2 {\n+            debug y => _2;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+            let _3: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+            scope 3 {\n+                debug z => _3;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+        StorageLive(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+        StorageLive(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+        StorageDead(_3);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_2);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+        return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n+    }\n+}"}, {"sha": "3f9f3b2eac7163c398b49cd36905a8ef5eab870f", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.32bit.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,72 @@\n+- // MIR for `main` before ScalarReplacementOfAggregates\n++ // MIR for `main` after ScalarReplacementOfAggregates\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          scope 2 {\n+              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+          _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      }\n+  \n+      bb1: {\n+          _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _6 = Len(_4);                    // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      }\n+  \n+      bb2: {\n+          _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+-         StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+-         StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         Deinit(_10);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         Deinit(_11);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n+          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "3f9f3b2eac7163c398b49cd36905a8ef5eab870f", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ScalarReplacementOfAggregates.64bit.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,72 @@\n+- // MIR for `main` before ScalarReplacementOfAggregates\n++ // MIR for `main` after ScalarReplacementOfAggregates\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +0:11\n+      let _1: i32;                         // in scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+      let mut _2: (i32, bool);             // in scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      let mut _4: [i32; 6];                // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+      let _5: usize;                       // in scope 0 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+      let mut _6: usize;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _7: bool;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      let mut _9: Point;                   // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _10: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++     let mut _11: u32;                    // in scope 0 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+          let _3: i32;                     // in scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          scope 2 {\n+              debug y => _3;               // in scope 2 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+              let _8: u32;                 // in scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+              scope 3 {\n+                  debug z => _8;           // in scope 3 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+1:9: +1:10\n+          _2 = CheckedAdd(const 2_i32, const 2_i32); // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          assert(!move (_2.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const 2_i32, const 2_i32) -> bb1; // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+      }\n+  \n+      bb1: {\n+          _1 = move (_2.0: i32);           // scope 0 at $DIR/optimizes_into_variable.rs:+1:13: +1:18\n+          StorageLive(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:9: +2:10\n+          StorageLive(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          _4 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:31\n+          StorageLive(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _5 = const 3_usize;              // scope 1 at $DIR/optimizes_into_variable.rs:+2:32: +2:33\n+          _6 = Len(_4);                    // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          _7 = Lt(_5, _6);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          assert(move _7, \"index out of bounds: the length is {} but the index is {}\", move _6, _5) -> bb2; // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+      }\n+  \n+      bb2: {\n+          _3 = _4[_5];                     // scope 1 at $DIR/optimizes_into_variable.rs:+2:13: +2:34\n+          StorageDead(_5);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:+2:34: +2:35\n+          StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:9: +3:10\n+-         StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         Deinit(_9);                      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n+-         _8 = (_9.1: u32);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n+-         StorageDead(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageLive(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         StorageLive(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         Deinit(_10);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         Deinit(_11);                     // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _10 = const 12_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _11 = const 42_u32;              // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:36\n++         _8 = _11;                        // scope 2 at $DIR/optimizes_into_variable.rs:+3:13: +3:38\n++         StorageDead(_10);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n++         StorageDead(_11);                // scope 2 at $DIR/optimizes_into_variable.rs:+3:38: +3:39\n+          nop;                             // scope 0 at $DIR/optimizes_into_variable.rs:+0:11: +4:2\n+          StorageDead(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_3);                 // scope 1 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          StorageDead(_1);                 // scope 0 at $DIR/optimizes_into_variable.rs:+4:1: +4:2\n+          return;                          // scope 0 at $DIR/optimizes_into_variable.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "025666548180bda652f0ce3e439550d37592acc4", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.rs?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -7,8 +7,10 @@ struct Point {\n }\n \n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n+// EMIT_MIR optimizes_into_variable.main.ScalarReplacementOfAggregates.diff\n // EMIT_MIR optimizes_into_variable.main.ConstProp.diff\n // EMIT_MIR optimizes_into_variable.main.SimplifyLocals.after.mir\n+// EMIT_MIR optimizes_into_variable.main.PreCodegen.after.mir\n fn main() {\n     let x = 2 + 2;\n     let y = [0, 1, 2, 3, 4, 5][3];"}, {"sha": "b88cdfcbc96c257f403fef974795d5d0aeaaf627", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -26,6 +26,8 @@\n       let mut _25: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let _26: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _29: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _30: &i32;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _1;               // in scope 1 at $DIR/issue_73223.rs:+1:9: +1:14\n           let _6: std::option::Option<i32>; // in scope 1 at $DIR/issue_73223.rs:+6:9: +6:14\n@@ -83,7 +85,8 @@\n           discriminant(_6) = 1;            // scope 1 at $DIR/issue_73223.rs:+6:17: +6:28\n           StorageDead(_7);                 // scope 1 at $DIR/issue_73223.rs:+6:27: +6:28\n           StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_29);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_30);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _10 = &_1;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -92,15 +95,16 @@\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          Deinit(_9);                      // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_29);                     // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          Deinit(_30);                     // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _29 = move _10;                  // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _30 = move _11;                  // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_11);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_10);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _13 = (_9.0: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _13 = _29;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _14 = (_9.1: &i32);              // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _14 = _30;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_16);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -150,7 +154,8 @@\n           StorageDead(_15);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_14);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_13);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_9);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_29);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageDead(_30);                // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           nop;                             // scope 0 at $DIR/issue_73223.rs:+0:11: +8:2\n           StorageDead(_6);                 // scope 1 at $DIR/issue_73223.rs:+8:1: +8:2"}, {"sha": "0cbd93ea460836c1c1332718f7a29ec25e03e2c9", "filename": "src/test/mir-opt/sroa.dropping.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsroa.dropping.ScalarReplacementOfAggregates.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,66 @@\n+- // MIR for `dropping` before ScalarReplacementOfAggregates\n++ // MIR for `dropping` after ScalarReplacementOfAggregates\n+  \n+  fn dropping() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n+      let _1: Tag;                         // in scope 0 at $DIR/sroa.rs:+1:5: +1:32\n+      let mut _2: S;                       // in scope 0 at $DIR/sroa.rs:+1:5: +1:30\n+      let mut _3: Tag;                     // in scope 0 at $DIR/sroa.rs:+1:7: +1:13\n+      let mut _4: Tag;                     // in scope 0 at $DIR/sroa.rs:+1:15: +1:21\n+      let mut _5: Tag;                     // in scope 0 at $DIR/sroa.rs:+1:23: +1:29\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:32\n+          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n+          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n+          Deinit(_3);                      // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n+          (_3.0: usize) = const 0_usize;   // scope 0 at $DIR/sroa.rs:+1:7: +1:13\n+          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n+          Deinit(_4);                      // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n+          (_4.0: usize) = const 1_usize;   // scope 0 at $DIR/sroa.rs:+1:15: +1:21\n+          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n+          Deinit(_5);                      // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n+          (_5.0: usize) = const 2_usize;   // scope 0 at $DIR/sroa.rs:+1:23: +1:29\n+          Deinit(_2);                      // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n+          (_2.0: Tag) = move _3;           // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n+          (_2.1: Tag) = move _4;           // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n+          (_2.2: Tag) = move _5;           // scope 0 at $DIR/sroa.rs:+1:5: +1:30\n+          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n+          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n+          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+1:29: +1:30\n+          _1 = move (_2.1: Tag);           // scope 0 at $DIR/sroa.rs:+1:5: +1:32\n+          drop(_1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n+      }\n+  \n+      bb1: {\n+          drop((_2.0: Tag)) -> [return: bb6, unwind: bb5]; // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n+      }\n+  \n+      bb2 (cleanup): {\n+          drop((_2.0: Tag)) -> bb7;        // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n+      }\n+  \n+      bb3 (cleanup): {\n+          resume;                          // scope 0 at $DIR/sroa.rs:+0:1: +2:2\n+      }\n+  \n+      bb4: {\n+          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n+          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n+          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +2:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+2:2: +2:2\n+      }\n+  \n+      bb5 (cleanup): {\n+          drop((_2.2: Tag)) -> bb3;        // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n+      }\n+  \n+      bb6: {\n+          drop((_2.2: Tag)) -> [return: bb4, unwind: bb3]; // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n+      }\n+  \n+      bb7 (cleanup): {\n+          drop((_2.2: Tag)) -> bb3;        // scope 0 at $DIR/sroa.rs:+1:32: +1:33\n+      }\n+  }\n+  "}, {"sha": "7c7e87c32a2d311858a93168a5ab864e98b1394e", "filename": "src/test/mir-opt/sroa.enums.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsroa.enums.ScalarReplacementOfAggregates.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `enums` before ScalarReplacementOfAggregates\n++ // MIR for `enums` after ScalarReplacementOfAggregates\n+  \n+  fn enums(_1: usize) -> usize {\n+      debug a => _1;                       // in scope 0 at $DIR/sroa.rs:+0:14: +0:15\n+      let mut _0: usize;                   // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:32\n+      let mut _2: std::option::Option<usize>; // in scope 0 at $DIR/sroa.rs:+1:22: +1:29\n+      let mut _3: usize;                   // in scope 0 at $DIR/sroa.rs:+1:27: +1:28\n+      let mut _4: isize;                   // in scope 0 at $DIR/sroa.rs:+1:12: +1:19\n+      scope 1 {\n+          debug a => _5;                   // in scope 1 at $DIR/sroa.rs:+1:17: +1:18\n+          let _5: usize;                   // in scope 1 at $DIR/sroa.rs:+1:17: +1:18\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n+          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n+          _3 = _1;                         // scope 1 at $DIR/sroa.rs:+1:27: +1:28\n+          Deinit(_2);                      // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n+          ((_2 as Some).0: usize) = move _3; // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n+          discriminant(_2) = 1;            // scope 1 at $DIR/sroa.rs:+1:22: +1:29\n+          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+1:28: +1:29\n+          _4 = discriminant(_2);           // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n+          switchInt(move _4) -> [1_isize: bb1, otherwise: bb2]; // scope 1 at $DIR/sroa.rs:+1:12: +1:19\n+      }\n+  \n+      bb1: {\n+          StorageLive(_5);                 // scope 1 at $DIR/sroa.rs:+1:17: +1:18\n+          _5 = ((_2 as Some).0: usize);    // scope 1 at $DIR/sroa.rs:+1:17: +1:18\n+          _0 = _5;                         // scope 1 at $DIR/sroa.rs:+1:32: +1:33\n+          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:34: +1:35\n+          goto -> bb3;                     // scope 0 at $DIR/sroa.rs:+1:5: +1:46\n+      }\n+  \n+      bb2: {\n+          _0 = const 0_usize;              // scope 0 at $DIR/sroa.rs:+1:43: +1:44\n+          goto -> bb3;                     // scope 0 at $DIR/sroa.rs:+1:5: +1:46\n+      }\n+  \n+      bb3: {\n+          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+2:1: +2:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "917cccdcbee50ca60f3dfb9862d15571beda12f8", "filename": "src/test/mir-opt/sroa.escaping.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsroa.escaping.ScalarReplacementOfAggregates.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,47 @@\n+- // MIR for `escaping` before ScalarReplacementOfAggregates\n++ // MIR for `escaping` after ScalarReplacementOfAggregates\n+  \n+  fn escaping() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:19: +0:19\n+      let _1: ();                          // in scope 0 at $DIR/sroa.rs:+2:5: +2:42\n+      let mut _2: *const u32;              // in scope 0 at $DIR/sroa.rs:+2:7: +2:41\n+      let _3: &u32;                        // in scope 0 at $DIR/sroa.rs:+2:7: +2:41\n+      let _4: Escaping;                    // in scope 0 at $DIR/sroa.rs:+2:8: +2:39\n+      let mut _5: u32;                     // in scope 0 at $DIR/sroa.rs:+2:34: +2:37\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+2:5: +2:42\n+          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n+          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n+          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n+          StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+2:34: +2:37\n+          _5 = g() -> bb1;                 // scope 0 at $DIR/sroa.rs:+2:34: +2:37\n+                                           // mir::Constant\n+                                           // + span: $DIR/sroa.rs:76:34: 76:35\n+                                           // + literal: Const { ty: fn() -> u32 {g}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          Deinit(_4);                      // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n+          (_4.0: u32) = const 1_u32;       // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n+          (_4.1: u32) = const 2_u32;       // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n+          (_4.2: u32) = move _5;           // scope 0 at $DIR/sroa.rs:+2:8: +2:39\n+          StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+2:38: +2:39\n+          _3 = &(_4.0: u32);               // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n+          _2 = &raw const (*_3);           // scope 0 at $DIR/sroa.rs:+2:7: +2:41\n+          _1 = f(move _2) -> bb2;          // scope 0 at $DIR/sroa.rs:+2:5: +2:42\n+                                           // mir::Constant\n+                                           // + span: $DIR/sroa.rs:76:5: 76:6\n+                                           // + literal: Const { ty: fn(*const u32) {f}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+2:41: +2:42\n+          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+2:42: +2:43\n+          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+2:42: +2:43\n+          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+2:42: +2:43\n+          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:19: +3:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "cbae2506658dfd9c9d9913d3ebc821159bd066fa", "filename": "src/test/mir-opt/sroa.flat.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsroa.flat.ScalarReplacementOfAggregates.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,87 @@\n+- // MIR for `flat` before ScalarReplacementOfAggregates\n++ // MIR for `flat` after ScalarReplacementOfAggregates\n+  \n+  fn flat() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/sroa.rs:+0:15: +0:15\n+      let _1: u8;                          // in scope 0 at $DIR/sroa.rs:+1:15: +1:16\n+      let _2: ();                          // in scope 0 at $DIR/sroa.rs:+1:18: +1:19\n+      let _3: &str;                        // in scope 0 at $DIR/sroa.rs:+1:21: +1:22\n+      let _4: std::option::Option<isize>;  // in scope 0 at $DIR/sroa.rs:+1:24: +1:25\n+      let mut _5: Foo;                     // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+      let mut _6: ();                      // in scope 0 at $DIR/sroa.rs:+1:45: +1:47\n+      let mut _7: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:60: +1:68\n++     let mut _8: u8;                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++     let mut _9: ();                      // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++     let mut _10: &str;                   // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++     let mut _11: std::option::Option<isize>; // in scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+      scope 1 {\n+          debug a => _1;                   // in scope 1 at $DIR/sroa.rs:+1:15: +1:16\n+          debug b => _2;                   // in scope 1 at $DIR/sroa.rs:+1:18: +1:19\n+          debug c => _3;                   // in scope 1 at $DIR/sroa.rs:+1:21: +1:22\n+          debug d => _4;                   // in scope 1 at $DIR/sroa.rs:+1:24: +1:25\n+          scope 2 {\n+              scope 3 {\n+                  scope 4 {\n+                      scope 5 {\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_8);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_9);                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_10);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         StorageLive(_11);                // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+          StorageLive(_6);                 // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n+          Deinit(_6);                      // scope 0 at $DIR/sroa.rs:+1:45: +1:47\n+          StorageLive(_7);                 // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n+          Deinit(_7);                      // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n+          ((_7 as Some).0: isize) = const -4_isize; // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n+          discriminant(_7) = 1;            // scope 0 at $DIR/sroa.rs:+1:60: +1:68\n+-         Deinit(_5);                      // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+-         (_5.0: u8) = const 5_u8;         // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+-         (_5.1: ()) = move _6;            // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+-         (_5.2: &str) = const \"a\";        // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         Deinit(_8);                      // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         Deinit(_9);                      // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         Deinit(_10);                     // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         Deinit(_11);                     // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _8 = const 5_u8;                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _9 = move _6;                    // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _10 = const \"a\";                 // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+                                           // mir::Constant\n+                                           // + span: $DIR/sroa.rs:55:52: 55:55\n+                                           // + literal: Const { ty: &str, val: Value(Slice(..)) }\n+-         (_5.3: std::option::Option<isize>) = move _7; // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n++         _11 = move _7;                   // scope 0 at $DIR/sroa.rs:+1:30: +1:70\n+          StorageDead(_7);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n+          StorageDead(_6);                 // scope 0 at $DIR/sroa.rs:+1:69: +1:70\n+          StorageLive(_1);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n+-         _1 = (_5.0: u8);                 // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n++         _1 = _8;                         // scope 0 at $DIR/sroa.rs:+1:15: +1:16\n+          StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n+-         _2 = (_5.1: ());                 // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n++         _2 = _9;                         // scope 0 at $DIR/sroa.rs:+1:18: +1:19\n+          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n+-         _3 = (_5.2: &str);               // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n++         _3 = _10;                        // scope 0 at $DIR/sroa.rs:+1:21: +1:22\n+          StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n+-         _4 = (_5.3: std::option::Option<isize>); // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n+-         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         _4 = _11;                        // scope 0 at $DIR/sroa.rs:+1:24: +1:25\n++         StorageDead(_8);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         StorageDead(_9);                 // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         StorageDead(_10);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n++         StorageDead(_11);                // scope 0 at $DIR/sroa.rs:+1:70: +1:71\n+          _0 = const ();                   // scope 0 at $DIR/sroa.rs:+0:15: +6:2\n+          StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n+          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n+          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n+          StorageDead(_1);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n+      }\n+  }\n+  "}, {"sha": "32d0f120f0266e432b46929ed82d0de03d4575c7", "filename": "src/test/mir-opt/sroa.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsroa.rs?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,86 @@\n+// unit-test: ScalarReplacementOfAggregates\n+\n+struct Tag(usize);\n+\n+#[repr(C)]\n+struct S(Tag, Tag, Tag);\n+\n+impl Drop for Tag {\n+    #[inline(never)]\n+    fn drop(&mut self) {}\n+}\n+\n+// EMIT_MIR sroa.dropping.ScalarReplacementOfAggregates.diff\n+pub fn dropping() {\n+    S(Tag(0), Tag(1), Tag(2)).1;\n+}\n+\n+// EMIT_MIR sroa.enums.ScalarReplacementOfAggregates.diff\n+pub fn enums(a: usize) -> usize {\n+    if let Some(a) = Some(a) { a } else { 0 }\n+}\n+\n+// EMIT_MIR sroa.structs.ScalarReplacementOfAggregates.diff\n+pub fn structs(a: f32) -> f32 {\n+    struct U {\n+        _foo: usize,\n+        a: f32,\n+    }\n+\n+    U { _foo: 0, a }.a\n+}\n+\n+// EMIT_MIR sroa.unions.ScalarReplacementOfAggregates.diff\n+pub fn unions(a: f32) -> u32 {\n+    union Repr {\n+        f: f32,\n+        u: u32,\n+    }\n+    unsafe { Repr { f: a }.u }\n+}\n+\n+struct Foo {\n+    a: u8,\n+    b: (),\n+    c: &'static str,\n+    d: Option<isize>,\n+}\n+\n+fn g() -> u32 {\n+    3\n+}\n+\n+// EMIT_MIR sroa.flat.ScalarReplacementOfAggregates.diff\n+pub fn flat() {\n+    let Foo { a, b, c, d } = Foo { a: 5, b: (), c: \"a\", d: Some(-4) };\n+    let _ = a;\n+    let _ = b;\n+    let _ = c;\n+    let _ = d;\n+}\n+\n+#[repr(C)]\n+struct Escaping {\n+    a: u32,\n+    b: u32,\n+    c: u32,\n+}\n+\n+fn f(a: *const u32) {\n+    println!(\"{}\", unsafe { *a.add(2) });\n+}\n+\n+// EMIT_MIR sroa.escaping.ScalarReplacementOfAggregates.diff\n+pub fn escaping() {\n+    // Verify this struct is not flattened.\n+    f(&Escaping { a: 1, b: 2, c: g() }.a);\n+}\n+\n+fn main() {\n+    dropping();\n+    enums(5);\n+    structs(5.);\n+    unions(5.);\n+    flat();\n+    escaping();\n+}"}, {"sha": "69d74c351deccd5892486423efd4c1fda8a7a0b3", "filename": "src/test/mir-opt/sroa.structs.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsroa.structs.ScalarReplacementOfAggregates.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,34 @@\n+- // MIR for `structs` before ScalarReplacementOfAggregates\n++ // MIR for `structs` after ScalarReplacementOfAggregates\n+  \n+  fn structs(_1: f32) -> f32 {\n+      debug a => _1;                       // in scope 0 at $DIR/sroa.rs:+0:16: +0:17\n+      let mut _0: f32;                     // return place in scope 0 at $DIR/sroa.rs:+0:27: +0:30\n+      let mut _2: structs::U;              // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+      let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+6:18: +6:19\n++     let mut _4: usize;                   // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++     let mut _5: f32;                     // in scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         StorageLive(_4);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         StorageLive(_5);                 // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+          StorageLive(_3);                 // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n+          _3 = _1;                         // scope 0 at $DIR/sroa.rs:+6:18: +6:19\n+-         Deinit(_2);                      // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+-         (_2.0: usize) = const 0_usize;   // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+-         (_2.1: f32) = move _3;           // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         Deinit(_4);                      // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         Deinit(_5);                      // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         _4 = const 0_usize;              // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n++         _5 = move _3;                    // scope 0 at $DIR/sroa.rs:+6:5: +6:21\n+          StorageDead(_3);                 // scope 0 at $DIR/sroa.rs:+6:20: +6:21\n+-         _0 = (_2.1: f32);                // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n+-         StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n++         _0 = _5;                         // scope 0 at $DIR/sroa.rs:+6:5: +6:23\n++         StorageDead(_4);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n++         StorageDead(_5);                 // scope 0 at $DIR/sroa.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "03ca976df7be68d5cd77634408052d1c0fb4fee1", "filename": "src/test/mir-opt/sroa.unions.ScalarReplacementOfAggregates.diff", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e4f343191adf9d8e31a3b45c941a9a53650dd4a8/src%2Ftest%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsroa.unions.ScalarReplacementOfAggregates.diff?ref=e4f343191adf9d8e31a3b45c941a9a53650dd4a8", "patch": "@@ -0,0 +1,24 @@\n+- // MIR for `unions` before ScalarReplacementOfAggregates\n++ // MIR for `unions` after ScalarReplacementOfAggregates\n+  \n+  fn unions(_1: f32) -> u32 {\n+      debug a => _1;                       // in scope 0 at $DIR/sroa.rs:+0:15: +0:16\n+      let mut _0: u32;                     // return place in scope 0 at $DIR/sroa.rs:+0:26: +0:29\n+      let mut _2: unions::Repr;            // in scope 0 at $DIR/sroa.rs:+5:14: +5:27\n+      let mut _3: f32;                     // in scope 0 at $DIR/sroa.rs:+5:24: +5:25\n+      scope 1 {\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n+          StorageLive(_3);                 // scope 1 at $DIR/sroa.rs:+5:24: +5:25\n+          _3 = _1;                         // scope 1 at $DIR/sroa.rs:+5:24: +5:25\n+          Deinit(_2);                      // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n+          (_2.0: f32) = move _3;           // scope 1 at $DIR/sroa.rs:+5:14: +5:27\n+          StorageDead(_3);                 // scope 1 at $DIR/sroa.rs:+5:26: +5:27\n+          _0 = (_2.1: u32);                // scope 1 at $DIR/sroa.rs:+5:14: +5:29\n+          StorageDead(_2);                 // scope 0 at $DIR/sroa.rs:+6:1: +6:2\n+          return;                          // scope 0 at $DIR/sroa.rs:+6:2: +6:2\n+      }\n+  }\n+  "}]}