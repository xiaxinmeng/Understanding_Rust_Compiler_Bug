{"sha": "1ec2b9bce8caf6d132b0fc42affe51b8cac8f458", "node_id": "C_kwDOAAsO6NoAKDFlYzJiOWJjZThjYWY2ZDEzMmIwZmM0MmFmZmU1MWI4Y2FjOGY0NTg", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-08-13T11:49:11Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-08-13T19:04:52Z"}, "message": "wf correctly shallow_resolve consts", "tree": {"sha": "70f7fbc247a26398dd2ee02b14308026f8564b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70f7fbc247a26398dd2ee02b14308026f8564b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ec2b9bce8caf6d132b0fc42affe51b8cac8f458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec2b9bce8caf6d132b0fc42affe51b8cac8f458", "html_url": "https://github.com/rust-lang/rust/commit/1ec2b9bce8caf6d132b0fc42affe51b8cac8f458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ec2b9bce8caf6d132b0fc42affe51b8cac8f458/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "html_url": "https://github.com/rust-lang/rust/commit/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a"}], "stats": {"total": 16, "additions": 7, "deletions": 9}, "files": [{"sha": "7a5e67ff74b32daa78845d419948750b035633eb", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1ec2b9bce8caf6d132b0fc42affe51b8cac8f458/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ec2b9bce8caf6d132b0fc42affe51b8cac8f458/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=1ec2b9bce8caf6d132b0fc42affe51b8cac8f458", "patch": "@@ -31,26 +31,24 @@ pub fn obligations<'a, 'tcx>(\n                     if resolved_ty == ty {\n                         // No progress, bail out to prevent \"livelock\".\n                         return None;\n+                    } else {\n+                        resolved_ty\n                     }\n-\n-                    resolved_ty\n                 }\n                 _ => ty,\n             }\n             .into()\n         }\n         GenericArgKind::Const(ct) => {\n             match ct.kind() {\n-                ty::ConstKind::Infer(infer) => {\n-                    let resolved = infcx.shallow_resolve(infer);\n-                    if resolved == infer {\n+                ty::ConstKind::Infer(_) => {\n+                    let resolved = infcx.shallow_resolve(ct);\n+                    if resolved == ct {\n                         // No progress.\n                         return None;\n+                    } else {\n+                        resolved\n                     }\n-\n-                    infcx\n-                        .tcx\n-                        .mk_const(ty::ConstS { kind: ty::ConstKind::Infer(resolved), ty: ct.ty() })\n                 }\n                 _ => ct,\n             }"}]}