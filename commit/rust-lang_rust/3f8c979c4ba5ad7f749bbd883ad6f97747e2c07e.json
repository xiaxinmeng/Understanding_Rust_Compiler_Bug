{"sha": "3f8c979c4ba5ad7f749bbd883ad6f97747e2c07e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmOGM5NzljNGJhNWFkN2Y3NDliYmQ4ODNhZDZmOTc3NDdlMmMwN2U=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-12-28T13:13:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-28T13:13:10Z"}, "message": "Rollup merge of #80331 - jyn514:docs, r=varkor\n\nAdd more comments to trait queries\n\nThis also adds back a comment that was mistakenly removed in\nac9dfc3e7785c9bba96ebac4fd51726189e1bf91.", "tree": {"sha": "6c4e92c3e3d575573cd827d4cdb9d51b57efd4c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4e92c3e3d575573cd827d4cdb9d51b57efd4c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f8c979c4ba5ad7f749bbd883ad6f97747e2c07e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf6dnnCRBK7hj4Ov3rIwAAdHIIAG9BxTHbh3x8pDuJ+qU59cHi\n+AViHYYTcm44JHMWxsObxs/qpXQm75Ccpaw2C1yYwUtO+VxKZoNg911PSH6HGode\npaLcWkWAc1pYXdWl8m1B+NsZ05T42csehrW/+vWXo6atpgwzQ2jgb6pQIqdfvr2i\n1C86iqozLEXqdd8ZoCm8PXvDPiUWikDthkrXbR9Tcdzp8SBUF+lRZyNwJatiyZb0\nwvG1hedVn0VCZnvFHdMM0vVZxT4nyVNI5cRYgWtoKTVUbJtNbZbbIHn334++rs4n\n+cB6UpN/5loZg+ag9sawgPM1e+CHnFXwT2DJPpQwfq/2qVp/jG+UJLaZcqxbrFc=\n=hhcm\n-----END PGP SIGNATURE-----\n", "payload": "tree 6c4e92c3e3d575573cd827d4cdb9d51b57efd4c4\nparent 12ac31235151bbce00be0e0324904c3803e5083d\nparent 979d3ce6eafa1e9147a1a5282f6eea12126b29c9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1609161190 +0100\ncommitter GitHub <noreply@github.com> 1609161190 +0100\n\nRollup merge of #80331 - jyn514:docs, r=varkor\n\nAdd more comments to trait queries\n\nThis also adds back a comment that was mistakenly removed in\nac9dfc3e7785c9bba96ebac4fd51726189e1bf91.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f8c979c4ba5ad7f749bbd883ad6f97747e2c07e", "html_url": "https://github.com/rust-lang/rust/commit/3f8c979c4ba5ad7f749bbd883ad6f97747e2c07e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f8c979c4ba5ad7f749bbd883ad6f97747e2c07e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12ac31235151bbce00be0e0324904c3803e5083d", "url": "https://api.github.com/repos/rust-lang/rust/commits/12ac31235151bbce00be0e0324904c3803e5083d", "html_url": "https://github.com/rust-lang/rust/commit/12ac31235151bbce00be0e0324904c3803e5083d"}, {"sha": "979d3ce6eafa1e9147a1a5282f6eea12126b29c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/979d3ce6eafa1e9147a1a5282f6eea12126b29c9", "html_url": "https://github.com/rust-lang/rust/commit/979d3ce6eafa1e9147a1a5282f6eea12126b29c9"}], "stats": {"total": 45, "additions": 32, "deletions": 13}, "files": [{"sha": "1e836d0a8425363e3b56ccb158fefa2a71f75920", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3f8c979c4ba5ad7f749bbd883ad6f97747e2c07e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f8c979c4ba5ad7f749bbd883ad6f97747e2c07e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3f8c979c4ba5ad7f749bbd883ad6f97747e2c07e", "patch": "@@ -576,11 +576,13 @@ rustc_queries! {\n             desc { |tcx| \"collecting associated items of {}\", tcx.def_path_str(key) }\n         }\n \n-        query impl_trait_ref(key: DefId) -> Option<ty::TraitRef<'tcx>> {\n-            desc { |tcx| \"computing trait implemented by `{}`\", tcx.def_path_str(key) }\n+        /// Given an `impl_id`, return the trait it implements.\n+        /// Return `None` if this is an inherent impl.\n+        query impl_trait_ref(impl_id: DefId) -> Option<ty::TraitRef<'tcx>> {\n+            desc { |tcx| \"computing trait implemented by `{}`\", tcx.def_path_str(impl_id) }\n         }\n-        query impl_polarity(key: DefId) -> ty::ImplPolarity {\n-            desc { |tcx| \"computing implementation polarity of `{}`\", tcx.def_path_str(key) }\n+        query impl_polarity(impl_id: DefId) -> ty::ImplPolarity {\n+            desc { |tcx| \"computing implementation polarity of `{}`\", tcx.def_path_str(impl_id) }\n         }\n \n         query issue33140_self_ty(key: DefId) -> Option<ty::Ty<'tcx>> {\n@@ -917,8 +919,10 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n-        query trait_of_item(def_id: DefId) -> Option<DefId> {\n-            desc { |tcx| \"finding trait defining `{}`\", tcx.def_path_str(def_id) }\n+        /// Given an `associated_item`, find the trait it belongs to.\n+        /// Return `None` if the `DefId` is not an associated item.\n+        query trait_of_item(associated_item: DefId) -> Option<DefId> {\n+            desc { |tcx| \"finding trait defining `{}`\", tcx.def_path_str(associated_item) }\n         }\n     }\n \n@@ -948,27 +952,37 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n-        query all_local_trait_impls(key: CrateNum) -> &'tcx BTreeMap<DefId, Vec<hir::HirId>> {\n+        /// Return all `impl` blocks in the current crate.\n+        ///\n+        /// To allow caching this between crates, you must pass in [`LOCAL_CRATE`] as the crate number.\n+        /// Passing in any other crate will cause an ICE.\n+        ///\n+        /// [`LOCAL_CRATE`]: rustc_hir::def_id::LOCAL_CRATE\n+        query all_local_trait_impls(local_crate: CrateNum) -> &'tcx BTreeMap<DefId, Vec<hir::HirId>> {\n             desc { \"local trait impls\" }\n         }\n-        query trait_impls_of(key: DefId) -> ty::trait_def::TraitImpls {\n+\n+        /// Given a trait `trait_id`, return all known `impl` blocks.\n+        query trait_impls_of(trait_id: DefId) -> ty::trait_def::TraitImpls {\n             storage(ArenaCacheSelector<'tcx>)\n-            desc { |tcx| \"trait impls of `{}`\", tcx.def_path_str(key) }\n+            desc { |tcx| \"trait impls of `{}`\", tcx.def_path_str(trait_id) }\n         }\n-        query specialization_graph_of(key: DefId) -> specialization_graph::Graph {\n+\n+        query specialization_graph_of(trait_id: DefId) -> specialization_graph::Graph {\n             storage(ArenaCacheSelector<'tcx>)\n-            desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(key) }\n+            desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(trait_id) }\n             cache_on_disk_if { true }\n         }\n-        query object_safety_violations(key: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n-            desc { |tcx| \"determine object safety of trait `{}`\", tcx.def_path_str(key) }\n+        query object_safety_violations(trait_id: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n+            desc { |tcx| \"determine object safety of trait `{}`\", tcx.def_path_str(trait_id) }\n         }\n \n         /// Gets the ParameterEnvironment for a given item; this environment\n         /// will be in \"user-facing\" mode, meaning that it is suitable for\n         /// type-checking etc, and it does not normalize specializable\n         /// associated types. This is almost always what you want,\n         /// unless you are doing MIR optimizations, in which case you\n+        /// might want to use `reveal_all()` method to change modes.\n         query param_env(def_id: DefId) -> ty::ParamEnv<'tcx> {\n             desc { |tcx| \"computing normalized predicates of `{}`\", tcx.def_path_str(def_id) }\n         }\n@@ -1229,10 +1243,15 @@ rustc_queries! {\n     }\n \n     TypeChecking {\n+        /// Given a crate and a trait, look up all impls of that trait in the crate.\n+        /// Return `(impl_id, self_ty)`.\n         query implementations_of_trait(_: (CrateNum, DefId))\n             -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n             desc { \"looking up implementations of a trait in a crate\" }\n         }\n+\n+        /// Given a crate, look up all trait impls in that crate.\n+        /// Return `(impl_id, self_ty)`.\n         query all_trait_implementations(_: CrateNum)\n             -> &'tcx [(DefId, Option<ty::fast_reject::SimplifiedType>)] {\n             desc { \"looking up all (?) trait implementations\" }"}]}