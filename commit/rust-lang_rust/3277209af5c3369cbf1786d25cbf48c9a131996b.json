{"sha": "3277209af5c3369cbf1786d25cbf48c9a131996b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNzcyMDlhZjVjMzM2OWNiZjE3ODZkMjVjYmY0OGM5YTEzMTk5NmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-22T22:21:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-22T22:21:20Z"}, "message": "use catch_panic instead of thread::spawn to catch panics", "tree": {"sha": "5c9aae05e9e4949ed569e0e4519238845084693c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c9aae05e9e4949ed569e0e4519238845084693c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3277209af5c3369cbf1786d25cbf48c9a131996b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3277209af5c3369cbf1786d25cbf48c9a131996b", "html_url": "https://github.com/rust-lang/rust/commit/3277209af5c3369cbf1786d25cbf48c9a131996b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3277209af5c3369cbf1786d25cbf48c9a131996b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e91e4e20a5d6e50e281c6e87a3a61cc735e266f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e91e4e20a5d6e50e281c6e87a3a61cc735e266f", "html_url": "https://github.com/rust-lang/rust/commit/1e91e4e20a5d6e50e281c6e87a3a61cc735e266f"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "62b33c02cae374b14b31393f8ced74c3e349df97", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3277209af5c3369cbf1786d25cbf48c9a131996b/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3277209af5c3369cbf1786d25cbf48c9a131996b/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=3277209af5c3369cbf1786d25cbf48c9a131996b", "patch": "@@ -4,7 +4,6 @@ use std::mem;\n use std::panic;\n use std::rc::Rc;\n use std::sync::atomic::{Ordering::Relaxed, AtomicUsize};\n-use std::thread;\n \n use rand::{Rng, RngCore, thread_rng};\n use rand::seq::SliceRandom;\n@@ -1406,11 +1405,10 @@ fn test_box_slice_clone() {\n #[test]\n #[allow(unused_must_use)] // here, we care about the side effects of `.clone()`\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support threads\n+#[cfg(not(miri))] // Miri does not support catching panics\n fn test_box_slice_clone_panics() {\n     use std::sync::Arc;\n     use std::sync::atomic::{AtomicUsize, Ordering};\n-    use std::thread::spawn;\n \n     struct Canary {\n         count: Arc<AtomicUsize>,\n@@ -1446,15 +1444,14 @@ fn test_box_slice_clone_panics() {\n         panics: true,\n     };\n \n-    spawn(move || {\n+    std::panic::catch_unwind(move || {\n             // When xs is dropped, +5.\n             let xs = vec![canary.clone(), canary.clone(), canary.clone(), panic, canary]\n                 .into_boxed_slice();\n \n             // When panic is cloned, +3.\n             xs.clone();\n         })\n-        .join()\n         .unwrap_err();\n \n     // Total = 8\n@@ -1566,7 +1563,7 @@ macro_rules! test {\n             }\n \n             let v = $input.to_owned();\n-            let _ = thread::spawn(move || {\n+            let _ = std::panic::catch_unwind(move || {\n                 let mut v = v;\n                 let mut panic_countdown = panic_countdown;\n                 v.$func(|a, b| {\n@@ -1577,7 +1574,7 @@ macro_rules! test {\n                     panic_countdown -= 1;\n                     a.cmp(b)\n                 })\n-            }).join();\n+            });\n \n             // Check that the number of things dropped is exactly\n             // what we expect (i.e., the contents of `v`).\n@@ -1598,7 +1595,7 @@ thread_local!(static SILENCE_PANIC: Cell<bool> = Cell::new(false));\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)] // no threads\n-#[cfg(not(miri))] // Miri does not support threads\n+#[cfg(not(miri))] // Miri does not support catching panics\n fn panic_safe() {\n     let prev = panic::take_hook();\n     panic::set_hook(Box::new(move |info| {"}]}