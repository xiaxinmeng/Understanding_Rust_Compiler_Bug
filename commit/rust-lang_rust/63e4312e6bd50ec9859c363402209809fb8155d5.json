{"sha": "63e4312e6bd50ec9859c363402209809fb8155d5", "node_id": "C_kwDOAAsO6NoAKDYzZTQzMTJlNmJkNTBlYzk4NTljMzYzNDAyMjA5ODA5ZmI4MTU1ZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-09T16:39:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-09T16:39:43Z"}, "message": "Auto merge of #99217 - lcnr:implied-bounds-pre-norm, r=lcnr\n\nconsider unnormalized types for implied bounds\n\nextracted, and slightly modified, from #98900\n\nThe idea here is that generally, rustc is split into things which can assume its inputs are well formed[^1], and things which have verify that themselves.\n\nGenerally most predicates should only deal with well formed inputs, e.g. a `&'a &'b (): Trait` predicate should be able to assume that `'b: 'a` holds. Normalization can loosen wf requirements (see #91068) and must therefore not be used in places which still have to check well formedness. The only such place should hopefully be `WellFormed` predicates\n\nfixes #87748 and #98543\n\nr? `@jackh726` cc `@rust-lang/types`\n\n[^1]: These places may still encounter non-wf inputs and have to deal with them without causing an ICE as we may check for well formedness out of order.", "tree": {"sha": "4953dbef9f6b944e18af8388d48adf94a4ce92b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4953dbef9f6b944e18af8388d48adf94a4ce92b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63e4312e6bd50ec9859c363402209809fb8155d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63e4312e6bd50ec9859c363402209809fb8155d5", "html_url": "https://github.com/rust-lang/rust/commit/63e4312e6bd50ec9859c363402209809fb8155d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63e4312e6bd50ec9859c363402209809fb8155d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "html_url": "https://github.com/rust-lang/rust/commit/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e"}, {"sha": "8691b96eee9635756b957ac8d9e5bd963cb73f12", "url": "https://api.github.com/repos/rust-lang/rust/commits/8691b96eee9635756b957ac8d9e5bd963cb73f12", "html_url": "https://github.com/rust-lang/rust/commit/8691b96eee9635756b957ac8d9e5bd963cb73f12"}], "stats": {"total": 370, "additions": 268, "deletions": 102}, "files": [{"sha": "9fab7ad914a847118c4d0a4abf067707141d4f06", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -6,7 +6,7 @@ use rustc_infer::infer::region_constraints::{GenericKind, VerifyBound};\n use rustc_infer::infer::{self, InferCtxt, SubregionOrigin};\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::TypeVisitable;\n+use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -109,23 +109,11 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                 self.add_outlives(r1_vid, r2_vid);\n             }\n \n-            GenericArgKind::Type(mut t1) => {\n+            GenericArgKind::Type(t1) => {\n                 // we don't actually use this for anything, but\n                 // the `TypeOutlives` code needs an origin.\n                 let origin = infer::RelateParamBound(DUMMY_SP, t1, None);\n \n-                // Placeholder regions need to be converted now because it may\n-                // create new region variables, which can't be done later when\n-                // verifying these bounds.\n-                if t1.has_placeholders() {\n-                    t1 = tcx.fold_regions(t1, |r, _| match *r {\n-                        ty::RePlaceholder(placeholder) => {\n-                            self.constraints.placeholder_region(self.infcx, placeholder)\n-                        }\n-                        _ => r,\n-                    });\n-                }\n-\n                 TypeOutlives::new(\n                     &mut *self,\n                     tcx,\n@@ -143,14 +131,32 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         }\n     }\n \n+    /// Placeholder regions need to be converted eagerly because it may\n+    /// create new region variables, which we must not do when verifying\n+    /// our region bounds.\n+    ///\n+    /// FIXME: This should get removed once higher ranked region obligations\n+    /// are dealt with during trait solving.\n+    fn replace_placeholders_with_nll<T: TypeFoldable<'tcx>>(&mut self, value: T) -> T {\n+        if value.has_placeholders() {\n+            self.tcx.fold_regions(value, |r, _| match *r {\n+                ty::RePlaceholder(placeholder) => {\n+                    self.constraints.placeholder_region(self.infcx, placeholder)\n+                }\n+                _ => r,\n+            })\n+        } else {\n+            value\n+        }\n+    }\n+\n     fn verify_to_type_test(\n         &mut self,\n         generic_kind: GenericKind<'tcx>,\n         region: ty::Region<'tcx>,\n         verify_bound: VerifyBound<'tcx>,\n     ) -> TypeTest<'tcx> {\n         let lower_bound = self.to_region_vid(region);\n-\n         TypeTest { generic_kind, lower_bound, locations: self.locations, verify_bound }\n     }\n \n@@ -198,6 +204,8 @@ impl<'a, 'b, 'tcx> TypeOutlivesDelegate<'tcx> for &'a mut ConstraintConversion<'\n         a: ty::Region<'tcx>,\n         bound: VerifyBound<'tcx>,\n     ) {\n+        let kind = self.replace_placeholders_with_nll(kind);\n+        let bound = self.replace_placeholders_with_nll(bound);\n         let type_test = self.verify_to_type_test(kind, a, bound);\n         self.add_type_test(type_test);\n     }"}, {"sha": "74655369faf0388d5872ffae944e3895202f3d4a", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -242,10 +242,9 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n         let constraint_sets: Vec<_> = unnormalized_input_output_tys\n             .flat_map(|ty| {\n                 debug!(\"build: input_or_output={:?}\", ty);\n-                // We only add implied bounds for the normalized type as the unnormalized\n-                // type may not actually get checked by the caller.\n-                //\n-                // Can otherwise be unsound, see #91068.\n+                // We add implied bounds from both the unnormalized and normalized ty.\n+                // See issue #87748\n+                let constraints_implied1 = self.add_implied_bounds(ty);\n                 let TypeOpOutput { output: norm_ty, constraints: constraints1, .. } = self\n                     .param_env\n                     .and(type_op::normalize::Normalize::new(ty))\n@@ -273,9 +272,10 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                 // }\n                 // ```\n                 // Both &Self::Bar and &() are WF\n-                let constraints_implied = self.add_implied_bounds(norm_ty);\n+                let constraints_implied2 =\n+                    if ty != norm_ty { self.add_implied_bounds(norm_ty) } else { None };\n                 normalized_inputs_and_output.push(norm_ty);\n-                constraints1.into_iter().chain(constraints_implied)\n+                constraints1.into_iter().chain(constraints_implied1).chain(constraints_implied2)\n             })\n             .collect();\n "}, {"sha": "7bf7f7357bf4f57c5d4f6d8cb71b447f2434aba2", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -1448,16 +1448,23 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     ))\n                 });\n                 debug!(?sig);\n-                let sig = self.normalize(sig, term_location);\n-                self.check_call_dest(body, term, &sig, *destination, target, term_location);\n-\n+                // IMPORTANT: We have to prove well formed for the function signature before\n+                // we normalize it, as otherwise types like `<&'a &'b () as Trait>::Assoc`\n+                // get normalized away, causing us to ignore the `'b: 'a` bound used by the function.\n+                //\n+                // Normalization results in a well formed type if the input is well formed, so we\n+                // don't have to check it twice.\n+                //\n+                // See #91068 for an example.\n                 self.prove_predicates(\n                     sig.inputs_and_output\n                         .iter()\n                         .map(|ty| ty::Binder::dummy(ty::PredicateKind::WellFormed(ty.into()))),\n                     term_location.to_locations(),\n                     ConstraintCategory::Boring,\n                 );\n+                let sig = self.normalize(sig, term_location);\n+                self.check_call_dest(body, term, &sig, *destination, target, term_location);\n \n                 // The ordinary liveness rules will ensure that all\n                 // regions in the type of the callee are live here. We"}, {"sha": "780e6ead10efa8e6062e8d0fa185735a54db43f1", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -187,7 +187,7 @@ pub enum GenericKind<'tcx> {\n /// }\n /// ```\n /// This is described with an `AnyRegion('a, 'b)` node.\n-#[derive(Debug, Clone)]\n+#[derive(Debug, Clone, TypeFoldable, TypeVisitable)]\n pub enum VerifyBound<'tcx> {\n     /// See [`VerifyIfEq`] docs\n     IfEq(ty::Binder<'tcx, VerifyIfEq<'tcx>>),"}, {"sha": "a7833ab64310fc29513aac6f9c7eb015cc1f29ba", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -594,6 +594,29 @@ impl<'tcx> Predicate<'tcx> {\n         }\n         self\n     }\n+\n+    /// Whether this projection can be soundly normalized.\n+    ///\n+    /// Wf predicates must not be normalized, as normalization\n+    /// can remove required bounds which would cause us to\n+    /// unsoundly accept some programs. See #91068.\n+    #[inline]\n+    pub fn allow_normalization(self) -> bool {\n+        match self.kind().skip_binder() {\n+            PredicateKind::WellFormed(_) => false,\n+            PredicateKind::Trait(_)\n+            | PredicateKind::RegionOutlives(_)\n+            | PredicateKind::TypeOutlives(_)\n+            | PredicateKind::Projection(_)\n+            | PredicateKind::ObjectSafe(_)\n+            | PredicateKind::ClosureKind(_, _, _)\n+            | PredicateKind::Subtype(_)\n+            | PredicateKind::Coerce(_)\n+            | PredicateKind::ConstEvaluatable(_)\n+            | PredicateKind::ConstEquate(_, _)\n+            | PredicateKind::TypeWellFormedFromEnv(_) => true,\n+        }\n+    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Predicate<'tcx> {"}, {"sha": "74625cc7bb750ad97814aebc77b965bd2893e43b", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -619,6 +619,15 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n             constant.eval(self.selcx.tcx(), self.param_env)\n         }\n     }\n+\n+    #[inline]\n+    fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        if p.allow_normalization() && needs_normalization(&p, self.param_env.reveal()) {\n+            p.super_fold_with(self)\n+        } else {\n+            p\n+        }\n+    }\n }\n \n pub struct BoundVarReplacer<'me, 'tcx> {"}, {"sha": "38b3a4b7253daf8f72b61da07842d07bc55a3b32", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -351,4 +351,16 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n             mir::ConstantKind::Val(_, _) => constant.try_super_fold_with(self)?,\n         })\n     }\n+\n+    #[inline]\n+    fn try_fold_predicate(\n+        &mut self,\n+        p: ty::Predicate<'tcx>,\n+    ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n+        if p.allow_normalization() && needs_normalization(&p, self.param_env.reveal()) {\n+            p.try_super_fold_with(self)\n+        } else {\n+            Ok(p)\n+        }\n+    }\n }"}, {"sha": "15a995ae59a8bfd8966a1c7a0bce88d9b2cc1459", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -264,8 +264,13 @@ fn compare_predicate_entailment<'tcx>(\n \n         let trait_sig = tcx.bound_fn_sig(trait_m.def_id).subst(tcx, trait_to_placeholder_substs);\n         let trait_sig = tcx.liberate_late_bound_regions(impl_m.def_id, trait_sig);\n+        // Next, add all inputs and output as well-formed tys. Importantly,\n+        // we have to do this before normalization, since the normalized ty may\n+        // not contain the input parameters. See issue #87748.\n+        wf_tys.extend(trait_sig.inputs_and_output.iter());\n         let trait_sig = ocx.normalize(norm_cause, param_env, trait_sig);\n-        // Add the resulting inputs and output as well-formed.\n+        // We also have to add the normalized trait signature\n+        // as we don't normalize during implied bounds computation.\n         wf_tys.extend(trait_sig.inputs_and_output.iter());\n         let trait_fty = tcx.mk_fn_ptr(ty::Binder::dummy(trait_sig));\n "}, {"sha": "9e68e9e77515bc6633b0ad3e8a603f98c765d587", "filename": "src/test/ui/associated-types/issue-59324.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -15,9 +15,9 @@ pub trait ThriftService<Bug: NotFoo>:\n {\n     fn get_service(\n     //~^ ERROR the trait bound `Bug: Foo` is not satisfied\n+    //~| ERROR the trait bound `Bug: Foo` is not satisfied\n         &self,\n     ) -> Self::AssocType;\n-    //~^ the trait bound `Bug: Foo` is not satisfied\n }\n \n fn with_factory<H>(factory: dyn ThriftService<()>) {}"}, {"sha": "dd5ec7175b5f1aa47ac07db08a3786875027cf4b", "filename": "src/test/ui/associated-types/issue-59324.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -20,7 +20,7 @@ LL | |\n LL | |\n LL | |     Service<AssocType = <Bug as Foo>::OnlyFoo>\n ...  |\n-LL | |\n+LL | |     ) -> Self::AssocType;\n LL | | }\n    | |_^ the trait `Foo` is not implemented for `Bug`\n    |\n@@ -34,6 +34,7 @@ error[E0277]: the trait bound `Bug: Foo` is not satisfied\n    |\n LL | /     fn get_service(\n LL | |\n+LL | |\n LL | |         &self,\n LL | |     ) -> Self::AssocType;\n    | |_________________________^ the trait `Foo` is not implemented for `Bug`\n@@ -50,10 +51,10 @@ LL | fn with_factory<H>(factory: dyn ThriftService<()>) {}\n    |                             ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n \n error[E0277]: the trait bound `Bug: Foo` is not satisfied\n-  --> $DIR/issue-59324.rs:19:10\n+  --> $DIR/issue-59324.rs:16:8\n    |\n-LL |     ) -> Self::AssocType;\n-   |          ^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `Bug`\n+LL |     fn get_service(\n+   |        ^^^^^^^^^^^ the trait `Foo` is not implemented for `Bug`\n    |\n help: consider further restricting this bound\n    |"}, {"sha": "5d924555625cdc408a9a4495e9aba100b62fdc53", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-2.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -1,4 +1,4 @@\n-// check-pass\n+// check-fail\n \n trait Trait {\n     type Type;\n@@ -17,6 +17,7 @@ where\n \n fn g<'a, 'b>() {\n     f::<'a, 'b>(());\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {}"}, {"sha": "0c3df04eabcd23de698f3cb9165be4a53643bf61", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-2.stderr?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -0,0 +1,17 @@\n+error: lifetime may not live long enough\n+  --> $DIR/implied-bounds-unnorm-associated-type-2.rs:19:5\n+   |\n+LL | fn g<'a, 'b>() {\n+   |      --  -- lifetime `'b` defined here\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     f::<'a, 'b>(());\n+   |     ^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n+   |\n+   = help: consider adding the following bound: `'b: 'a`\n+   = note: requirement occurs because of a function pointer to `f`\n+   = note: the function `f` is invariant over the parameter `'a`\n+   = help: see <https://doc.rust-lang.org/nomicon/subtyping.html> for more information about variance\n+\n+error: aborting due to previous error\n+"}, {"sha": "888f74cf6b33745b76e8351f0e1edc03a9de69be", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-3.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -1,6 +1,4 @@\n-// check-fail\n-// See issue #91899. If we treat unnormalized args as WF, `Self` can also be a\n-// source of unsoundness.\n+// check-pass\n \n pub trait Yokeable<'a>: 'static {\n     type Output: 'a;\n@@ -17,7 +15,6 @@ pub trait ZeroCopyFrom<C: ?Sized>: for<'a> Yokeable<'a> {\n \n impl<T> ZeroCopyFrom<[T]> for &'static [T] {\n     fn zero_copy_from<'b>(cart: &'b [T]) -> &'b [T] {\n-        //~^ the parameter\n         cart\n     }\n }"}, {"sha": "95cf4fb168f1e5d25469411e38a2dce09511c059", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-3.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-3.stderr?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -1,14 +0,0 @@\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/implied-bounds-unnorm-associated-type-3.rs:19:5\n-   |\n-LL |     fn zero_copy_from<'b>(cart: &'b [T]) -> &'b [T] {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `[T]` will meet its required lifetime bounds\n-   |\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL | impl<T: 'static> ZeroCopyFrom<[T]> for &'static [T] {\n-   |       +++++++++\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0310`."}, {"sha": "12859252c8794a94157f71ecd81b08ecf870673e", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-4.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-4.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -0,0 +1,24 @@\n+// A regression test for #98543\n+\n+trait Trait {\n+    type Type;\n+}\n+\n+impl<T> Trait for T {\n+    type Type = ();\n+}\n+\n+fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str\n+where\n+    &'a &'b (): Trait, // <- adding this bound is the change from #91068\n+{\n+    s\n+}\n+\n+fn main() {\n+    let x = String::from(\"Hello World!\");\n+    let y = f(&x, ());\n+    drop(x);\n+    //~^ ERROR cannot move out of `x` because it is borrowed\n+    println!(\"{}\", y);\n+}"}, {"sha": "fcbaa91d19f82d1a1833c8eaa96705792003c50b", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-4.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-4.stderr?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -0,0 +1,14 @@\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/implied-bounds-unnorm-associated-type-4.rs:21:10\n+   |\n+LL |     let y = f(&x, ());\n+   |               -- borrow of `x` occurs here\n+LL |     drop(x);\n+   |          ^ move out of `x` occurs here\n+LL |\n+LL |     println!(\"{}\", y);\n+   |                    - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "2a9a6a8cc6c8113278b8fb1df52ad12633b24c6e", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-5.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -0,0 +1,23 @@\n+trait Trait<'a>: 'a {\n+    type Type;\n+}\n+\n+// if the `T: 'a` bound gets implied we would probably get ub here again\n+impl<'a, T> Trait<'a> for T {\n+    //~^ ERROR the parameter type `T` may not live long enough\n+    type Type = ();\n+}\n+\n+fn f<'a, 'b>(s: &'b str, _: <&'b () as Trait<'a>>::Type) -> &'a str\n+where\n+    &'b (): Trait<'a>,\n+{\n+    s\n+}\n+\n+fn main() {\n+    let x = String::from(\"Hello World!\");\n+    let y = f(&x, ());\n+    drop(x);\n+    println!(\"{}\", y);\n+}"}, {"sha": "458756a3dcd9625a62a8393eb61e68c572de2446", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type-5.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type-5.stderr?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -0,0 +1,19 @@\n+error[E0309]: the parameter type `T` may not live long enough\n+  --> $DIR/implied-bounds-unnorm-associated-type-5.rs:6:13\n+   |\n+LL | impl<'a, T> Trait<'a> for T {\n+   |             ^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n+   |\n+note: ...that is required by this bound\n+  --> $DIR/implied-bounds-unnorm-associated-type-5.rs:1:18\n+   |\n+LL | trait Trait<'a>: 'a {\n+   |                  ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Trait<'a> for T {\n+   |           ++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0309`."}, {"sha": "d58d25036c5bb78898587ca026e1d0a44bee1552", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -1,6 +1,6 @@\n // check-fail\n-// See issue #91068. Types in the substs of an associated type can't be implied\n-// to be WF, since they don't actually have to be constructed.\n+// See issue #91068. We check that the unnormalized associated types in\n+// function signatures are implied\n \n trait Trait {\n     type Type;\n@@ -12,12 +12,12 @@ impl<T> Trait for T {\n \n fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n     s\n-    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() {\n     let x = String::from(\"Hello World!\");\n     let y = f(&x, ());\n     drop(x);\n+    //~^ ERROR cannot move out of `x` because it is borrowed\n     println!(\"{}\", y);\n }"}, {"sha": "e35f46e4439a90b1c9e94ac8396b8a2077b9851b", "filename": "src/test/ui/fn/implied-bounds-unnorm-associated-type.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffn%2Fimplied-bounds-unnorm-associated-type.stderr?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -1,14 +1,14 @@\n-error: lifetime may not live long enough\n-  --> $DIR/implied-bounds-unnorm-associated-type.rs:14:5\n+error[E0505]: cannot move out of `x` because it is borrowed\n+  --> $DIR/implied-bounds-unnorm-associated-type.rs:20:10\n    |\n-LL | fn f<'a, 'b>(s: &'b str, _: <&'a &'b () as Trait>::Type) -> &'a str {\n-   |      --  -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-LL |     s\n-   |     ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-   |\n-   = help: consider adding the following bound: `'b: 'a`\n+LL |     let y = f(&x, ());\n+   |               -- borrow of `x` occurs here\n+LL |     drop(x);\n+   |          ^ move out of `x` occurs here\n+LL |\n+LL |     println!(\"{}\", y);\n+   |                    - borrow later used here\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0505`."}, {"sha": "ac197dfe6ff69ec3bcd8b64508b2f658d24af2ed", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr?ref=6d3f1beae1720055e5a30f4dbe7a9e7fb810c65e", "patch": "@@ -1,20 +0,0 @@\n-error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-87748.rs:18:5\n-   |\n-LL |     fn do_sth(_: u32) {}\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-note: lifetime parameter instantiated with the anonymous lifetime as defined here\n-  --> $DIR/issue-87748.rs:18:5\n-   |\n-LL |     fn do_sth(_: u32) {}\n-   |     ^^^^^^^^^^^^^^^^^\n-note: but lifetime parameter must outlive the anonymous lifetime as defined here\n-  --> $DIR/issue-87748.rs:18:5\n-   |\n-LL |     fn do_sth(_: u32) {}\n-   |     ^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0478`."}, {"sha": "1a1ab9bf8a4eb8d8a73edc67dca458e233ba54e4", "filename": "src/test/ui/generic-associated-types/issue-87748.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-87748.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -1,13 +1,14 @@\n-// check-fail\n-// known-bug: #87748\n+// Checks that we properly add implied bounds from unnormalized projections in\n+// inputs when typechecking functions.\n \n-// This should pass, but unnormalized input args aren't treated as implied.\n+// check-pass\n \n #![feature(generic_associated_types)]\n \n trait MyTrait {\n     type Assoc<'a, 'b> where 'b: 'a;\n     fn do_sth(arg: Self::Assoc<'_, '_>);\n+    fn do_sth2(arg: Self::Assoc<'_, '_>) {}\n }\n \n struct Foo;\n@@ -16,8 +17,7 @@ impl MyTrait for Foo {\n     type Assoc<'a, 'b> = u32 where 'b: 'a;\n \n     fn do_sth(_: u32) {}\n-    // fn do_sth(_: Self::Assoc<'static, 'static>) {}\n-    // fn do_sth(_: Self::Assoc<'_, '_>) {}\n+    fn do_sth2(_: Self::Assoc<'static, 'static>) {}\n }\n \n fn main() {}", "previous_filename": "src/test/ui/generic-associated-types/bugs/issue-87748.rs"}, {"sha": "de9348f5397099bf5267a8426b28d084fd7bb47e", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-85455.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -7,7 +7,6 @@ trait SomeTrait<'a> {\n fn give_me_ice<T>() {\n     callee::<fn(&()) -> <T as SomeTrait<'_>>::Associated>();\n     //~^ ERROR the trait bound `for<'r> T: SomeTrait<'r>` is not satisfied [E0277]\n-    //~| ERROR the trait bound `for<'r> T: SomeTrait<'r>` is not satisfied [E0277]\n }\n \n fn callee<T: Fn<(&'static (),)>>() {"}, {"sha": "6a948a116e03bf3bf7477cb94b5060e05bebe960", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-85455.stderr", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-85455.stderr?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -9,17 +9,6 @@ help: consider restricting type parameter `T`\n LL | fn give_me_ice<T: for<'r> SomeTrait<'r>>() {\n    |                 +++++++++++++++++++++++\n \n-error[E0277]: the trait bound `for<'r> T: SomeTrait<'r>` is not satisfied\n-  --> $DIR/issue-85455.rs:8:14\n-   |\n-LL |     callee::<fn(&()) -> <T as SomeTrait<'_>>::Associated>();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for<'r> SomeTrait<'r>` is not implemented for `T`\n-   |\n-help: consider restricting type parameter `T`\n-   |\n-LL | fn give_me_ice<T: for<'r> SomeTrait<'r>>() {\n-   |                 +++++++++++++++++++++++\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "33b746c5edfb2ff7be4fa400bf24783bc05fce59", "filename": "src/test/ui/implied-bounds/assoc-ty-wf-used-to-get-assoc-ty.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -0,0 +1,27 @@\n+// Test for a less than ideal interaction of implied bounds and normalization.\n+trait Tr {\n+    type Ty;\n+}\n+\n+impl<T: 'static> Tr for T {\n+    type Ty = &'static T;\n+}\n+\n+// `<&'a u8 as Tr>::Ty` should cause an error because `&'a u8: Tr` doesn't hold for\n+// all possible 'a. However, we consider normalized types for implied bounds.\n+//\n+// We normalize this projection to `&'static &'a u8` and add a nested `&'a u8: 'static`\n+// bound. This bound is then proven using the implied bounds for `&'static &'a u8` which\n+// we only get by normalizing in the first place.\n+fn test<'a>(x: &'a u8, _wf: <&'a u8 as Tr>::Ty) -> &'static u8 { x }\n+\n+fn main() {\n+    // This works as we have 'static references due to promotion.\n+    let _: &'static u8 = test(&3, &&3);\n+    // This causes an error because the projection requires 'a to be 'static.\n+    // It would be unsound if this compiled.\n+    let x: u8 = 3;\n+    let _: &'static u8 = test(&x, &&3);\n+    //~^ ERROR `x` does not live long enough\n+\n+}"}, {"sha": "d0249e74f39e966939434ac403c5ea4417e2740e", "filename": "src/test/ui/implied-bounds/assoc-ty-wf-used-to-get-assoc-ty.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.stderr?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/assoc-ty-wf-used-to-get-assoc-ty.rs:24:31\n+   |\n+LL |     let _: &'static u8 = test(&x, &&3);\n+   |                          -----^^------\n+   |                          |    |\n+   |                          |    borrowed value does not live long enough\n+   |                          argument requires that `x` is borrowed for `'static`\n+...\n+LL | }\n+   | - `x` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "05e2ea047f65af722c5f6d59cde97252dde32839", "filename": "src/test/ui/nll/relate_tys/impl-fn-ignore-binder-via-bottom.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.rs?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -30,4 +30,5 @@ fn main() {\n     let _x = <fn(&())>::make_f();\n     //~^ ERROR implementation of `Y` is not general enough\n     //~| ERROR implementation of `Y` is not general enough\n+    //~| ERROR implementation of `Y` is not general enough\n }"}, {"sha": "8c47379886d2a8a873b79f0246502b2d055007d5", "filename": "src/test/ui/nll/relate_tys/impl-fn-ignore-binder-via-bottom.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63e4312e6bd50ec9859c363402209809fb8155d5/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Frelate_tys%2Fimpl-fn-ignore-binder-via-bottom.stderr?ref=63e4312e6bd50ec9859c363402209809fb8155d5", "patch": "@@ -16,5 +16,14 @@ LL |     let _x = <fn(&())>::make_f();\n    = note: `Y` would have to be implemented for the type `for<'r> fn(&'r ())`\n    = note: ...but `Y` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n \n-error: aborting due to 2 previous errors\n+error: implementation of `Y` is not general enough\n+  --> $DIR/impl-fn-ignore-binder-via-bottom.rs:30:14\n+   |\n+LL |     let _x = <fn(&())>::make_f();\n+   |              ^^^^^^^^^^^^^^^^^^^ implementation of `Y` is not general enough\n+   |\n+   = note: `Y` would have to be implemented for the type `for<'r> fn(&'r ())`\n+   = note: ...but `Y` is actually implemented for the type `fn(&'0 ())`, for some specific lifetime `'0`\n+\n+error: aborting due to 3 previous errors\n "}]}