{"sha": "21319d135fcea095093f3916272ca2fd5a7fa0cd", "node_id": "C_kwDOAAsO6NoAKDIxMzE5ZDEzNWZjZWEwOTUwOTNmMzkxNjI3MmNhMmZkNWE3ZmEwY2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T21:35:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-10T21:35:07Z"}, "message": "Auto merge of #13329 - Veykril:rustc-proc-macro, r=Veykril\n\nUse $crate instead of std for panic builtin_fn_macro\n\nThis should be closer to the expected output and gets rid of a few type mismatches in rustc/library", "tree": {"sha": "eefda552258dc95887e1ebc7d6df6853d6822405", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eefda552258dc95887e1ebc7d6df6853d6822405"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21319d135fcea095093f3916272ca2fd5a7fa0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21319d135fcea095093f3916272ca2fd5a7fa0cd", "html_url": "https://github.com/rust-lang/rust/commit/21319d135fcea095093f3916272ca2fd5a7fa0cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21319d135fcea095093f3916272ca2fd5a7fa0cd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99c205c70f19eb724153775bf0f61713d61b6d9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/99c205c70f19eb724153775bf0f61713d61b6d9d", "html_url": "https://github.com/rust-lang/rust/commit/99c205c70f19eb724153775bf0f61713d61b6d9d"}, {"sha": "1574fe0d5438f63ddb8c59d7837d5acf3fd77c94", "url": "https://api.github.com/repos/rust-lang/rust/commits/1574fe0d5438f63ddb8c59d7837d5acf3fd77c94", "html_url": "https://github.com/rust-lang/rust/commit/1574fe0d5438f63ddb8c59d7837d5acf3fd77c94"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "c04cd1651926dfb86d412835c2c343e219a40e7f", "filename": "crates/hir-def/src/macro_expansion_tests/builtin_fn_macro.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/21319d135fcea095093f3916272ca2fd5a7fa0cd/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21319d135fcea095093f3916272ca2fd5a7fa0cd/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_fn_macro.rs?ref=21319d135fcea095093f3916272ca2fd5a7fa0cd", "patch": "@@ -93,12 +93,12 @@ macro_rules! option_env {() => {}}\n \n fn main() { option_env!(\"TEST_ENV_VAR\"); }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n #[rustc_builtin_macro]\n macro_rules! option_env {() => {}}\n \n-fn main() { std::option::Option::None:: < &str>; }\n-\"##]],\n+fn main() { $crate::option::Option::None:: < &str>; }\n+\"#]],\n     );\n }\n \n@@ -191,17 +191,17 @@ fn main() {\n     format_args!(\"{} {:?}\", arg1(a, b, c), arg2);\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n #[rustc_builtin_macro]\n macro_rules! format_args {\n     ($fmt:expr) => ({ /* compiler built-in */ });\n     ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n }\n \n fn main() {\n-    std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(arg1(a, b, c)), std::fmt::Display::fmt), std::fmt::ArgumentV1::new(&(arg2), std::fmt::Display::fmt), ]);\n+    $crate::fmt::Arguments::new_v1(&[], &[$crate::fmt::ArgumentV1::new(&(arg1(a, b, c)), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(arg2), $crate::fmt::Display::fmt), ]);\n }\n-\"##]],\n+\"#]],\n     );\n }\n \n@@ -219,17 +219,17 @@ fn main() {\n     format_args!(\"{} {:?}\", a::<A,B>(), b);\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n #[rustc_builtin_macro]\n macro_rules! format_args {\n     ($fmt:expr) => ({ /* compiler built-in */ });\n     ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n }\n \n fn main() {\n-    std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(a::<A, B>()), std::fmt::Display::fmt), std::fmt::ArgumentV1::new(&(b), std::fmt::Display::fmt), ]);\n+    $crate::fmt::Arguments::new_v1(&[], &[$crate::fmt::ArgumentV1::new(&(a::<A, B>()), $crate::fmt::Display::fmt), $crate::fmt::ArgumentV1::new(&(b), $crate::fmt::Display::fmt), ]);\n }\n-\"##]],\n+\"#]],\n     );\n }\n \n@@ -248,7 +248,7 @@ fn main() {\n         format_args!/*+errors*/(\"{} {:?}\", a.);\n }\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n #[rustc_builtin_macro]\n macro_rules! format_args {\n     ($fmt:expr) => ({ /* compiler built-in */ });\n@@ -258,9 +258,9 @@ macro_rules! format_args {\n fn main() {\n     let _ =\n         /* parse error: expected field name or number */\n-std::fmt::Arguments::new_v1(&[], &[std::fmt::ArgumentV1::new(&(a.), std::fmt::Display::fmt), ]);\n+$crate::fmt::Arguments::new_v1(&[], &[$crate::fmt::ArgumentV1::new(&(a.), $crate::fmt::Display::fmt), ]);\n }\n-\"##]],\n+\"#]],\n     );\n }\n "}, {"sha": "7b19518e25a8437a16c302dcb8f9399a2faebd34", "filename": "crates/hir-expand/src/builtin_fn_macro.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/21319d135fcea095093f3916272ca2fd5a7fa0cd/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21319d135fcea095093f3916272ca2fd5a7fa0cd/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_fn_macro.rs?ref=21319d135fcea095093f3916272ca2fd5a7fa0cd", "patch": "@@ -238,9 +238,9 @@ fn format_args_expand(\n ) -> ExpandResult<tt::Subtree> {\n     // We expand `format_args!(\"\", a1, a2)` to\n     // ```\n-    // std::fmt::Arguments::new_v1(&[], &[\n-    //   std::fmt::ArgumentV1::new(&arg1,std::fmt::Display::fmt),\n-    //   std::fmt::ArgumentV1::new(&arg2,std::fmt::Display::fmt),\n+    // $crate::fmt::Arguments::new_v1(&[], &[\n+    //   $crate::fmt::ArgumentV1::new(&arg1,$crate::fmt::Display::fmt),\n+    //   $crate::fmt::ArgumentV1::new(&arg2,$crate::fmt::Display::fmt),\n     // ])\n     // ```,\n     // which is still not really correct, but close enough for now\n@@ -262,10 +262,10 @@ fn format_args_expand(\n     }\n     let _format_string = args.remove(0);\n     let arg_tts = args.into_iter().flat_map(|arg| {\n-        quote! { std::fmt::ArgumentV1::new(&(#arg), std::fmt::Display::fmt), }\n+        quote! { #DOLLAR_CRATE::fmt::ArgumentV1::new(&(#arg), #DOLLAR_CRATE::fmt::Display::fmt), }\n     }.token_trees);\n     let expanded = quote! {\n-        std::fmt::Arguments::new_v1(&[], &[##arg_tts])\n+        #DOLLAR_CRATE::fmt::Arguments::new_v1(&[], &[##arg_tts])\n     };\n     ExpandResult::ok(expanded)\n }\n@@ -675,8 +675,8 @@ fn option_env_expand(\n     };\n \n     let expanded = match get_env_inner(db, arg_id, &key) {\n-        None => quote! { std::option::Option::None::<&str> },\n-        Some(s) => quote! { std::option::Some(#s) },\n+        None => quote! { #DOLLAR_CRATE::option::Option::None::<&str> },\n+        Some(s) => quote! { #DOLLAR_CRATE::option::Some(#s) },\n     };\n \n     ExpandResult::ok(ExpandedEager::new(expanded))"}]}