{"sha": "0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNWMzYmJkYWJjNjBiZDdkZDc0OTFkZmNmNmJlZmI4MjAyZDc1MjE=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-22T10:34:42Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-22T10:34:42Z"}, "message": "handle unevaluated consts after monomophize", "tree": {"sha": "4f0c332f5c6b9d9668d791d6f129636c8c59e77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f0c332f5c6b9d9668d791d6f129636c8c59e77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521", "html_url": "https://github.com/rust-lang/rust/commit/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98803c182b2ba6ef5dccb6bf501958249295eac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/98803c182b2ba6ef5dccb6bf501958249295eac0", "html_url": "https://github.com/rust-lang/rust/commit/98803c182b2ba6ef5dccb6bf501958249295eac0"}], "stats": {"total": 98, "additions": 77, "deletions": 21}, "files": [{"sha": "0fcd11d81001fdcc9ee981c13f9a923355c8769b", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521", "patch": "@@ -40,31 +40,36 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         &mut self,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n-        match constant.literal.val {\n+        let const_ = match constant.literal.val {\n             ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 let substs = self.monomorphize(&substs);\n-                self.cx\n-                    .tcx()\n-                    .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n-                    .map_err(|err| {\n-                        if promoted.is_none() {\n-                            self.cx\n-                                .tcx()\n-                                .sess\n-                                .span_err(constant.span, \"erroneous constant encountered\");\n-                        }\n-                        err\n-                    })\n+                ty::ConstKind::Unevaluated(def_id, substs, promoted)\n             }\n+            ty::ConstKind::Value(value) => ty::ConstKind::Value(value),\n+            ty::ConstKind::Param(_) => self.monomorphize(&constant.literal).val,\n+            _ => span_bug!(constant.span, \"encountered bad Const in codegen: {:?}\", constant),\n+        };\n+\n+        match const_ {\n+            ty::ConstKind::Unevaluated(def_id, substs, promoted) => self\n+                .cx\n+                .tcx()\n+                .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n+                .map_err(|err| {\n+                    if promoted.is_none() {\n+                        self.cx\n+                            .tcx()\n+                            .sess\n+                            .span_err(constant.span, \"erroneous constant encountered\");\n+                    }\n+                    err\n+                }),\n             ty::ConstKind::Value(value) => Ok(value),\n-            _ => {\n-                let const_ = self.monomorphize(&constant.literal);\n-                if let ty::ConstKind::Value(value) = const_.val {\n-                    Ok(value)\n-                } else {\n-                    span_bug!(constant.span, \"encountered bad ConstKind in codegen: {:?}\", const_);\n-                }\n-            }\n+            _ => span_bug!(\n+                constant.span,\n+                \"encountered bad ConstKind after monomorphizing: {:?}\",\n+                const_\n+            ),\n         }\n     }\n "}, {"sha": "8b933c078ff26661ec85da6787ccefac8f9e3493", "filename": "src/test/ui/const-generics/issues/issue-70125.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125.rs?ref=0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+const L: usize = 4;\n+\n+pub trait Print<const N: usize> {\n+    fn print(&self) -> usize {\n+        N\n+    }\n+}\n+\n+pub struct Printer;\n+impl Print<L> for Printer {}\n+\n+fn main() {\n+    let p = Printer;\n+    assert_eq!(p.print(), 4);\n+}"}, {"sha": "878ed7628e833939fa589f9f203cef7fd508bf8f", "filename": "src/test/ui/const-generics/issues/issue-70125.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-70125.stderr?ref=0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-70125.rs:2:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "ea7a68c2f93d9d2075015552ea9156b61d227366", "filename": "src/test/ui/const-generics/normalization_failure.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Ftest%2Fui%2Fconst-generics%2Fnormalization_failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Ftest%2Fui%2Fconst-generics%2Fnormalization_failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnormalization_failure.rs?ref=0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+fn main() {\n+    <()>::foo();\n+}\n+\n+trait Foo<const X: usize> {\n+    fn foo() -> usize {\n+        X\n+    }\n+}\n+\n+impl Foo<{3}> for () {}"}, {"sha": "d5ad39e81ba66d2f89ac26a1e872c1832a4f7642", "filename": "src/test/ui/const-generics/normalization_failure.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Ftest%2Fui%2Fconst-generics%2Fnormalization_failure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521/src%2Ftest%2Fui%2Fconst-generics%2Fnormalization_failure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fnormalization_failure.stderr?ref=0c5c3bbdabc60bd7dd7491dfcf6befb8202d7521", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/normalization_failure.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}