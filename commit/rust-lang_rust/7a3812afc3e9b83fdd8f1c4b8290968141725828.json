{"sha": "7a3812afc3e9b83fdd8f1c4b8290968141725828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMzgxMmFmYzNlOWI4M2ZkZDhmMWM0YjgyOTA5NjgxNDE3MjU4Mjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-18T00:42:23Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-18T00:43:06Z"}, "message": "rustc: Add a typed pretty-printing mode for debugging", "tree": {"sha": "23735c63aee8f9404a8682d92d3225ac3c31c6bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23735c63aee8f9404a8682d92d3225ac3c31c6bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a3812afc3e9b83fdd8f1c4b8290968141725828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a3812afc3e9b83fdd8f1c4b8290968141725828", "html_url": "https://github.com/rust-lang/rust/commit/7a3812afc3e9b83fdd8f1c4b8290968141725828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a3812afc3e9b83fdd8f1c4b8290968141725828/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "376b087f3fb5852fc5d7582558d7717eb19d614d", "url": "https://api.github.com/repos/rust-lang/rust/commits/376b087f3fb5852fc5d7582558d7717eb19d614d", "html_url": "https://github.com/rust-lang/rust/commit/376b087f3fb5852fc5d7582558d7717eb19d614d"}], "stats": {"total": 74, "additions": 60, "deletions": 14}, "files": [{"sha": "5c5bd7ccdda932215fa84c54512bcfb4fa904351", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a3812afc3e9b83fdd8f1c4b8290968141725828/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3812afc3e9b83fdd8f1c4b8290968141725828/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=7a3812afc3e9b83fdd8f1c4b8290968141725828", "patch": "@@ -10,6 +10,7 @@ import middle::resolve;\n import middle::ty;\n import middle::typeck;\n import middle::tstate::ck;\n+import pretty::pprust;\n import back::link;\n import lib::llvm;\n import util::common;\n@@ -117,14 +118,26 @@ fn compile_input(session::session sess,\n              bind link::write::run_passes(sess, llmod, output));\n }\n \n-fn pretty_print_input(session::session sess,\n-                             eval::env env,\n-                             str input) {\n+fn pretty_print_input(session::session sess, eval::env env, str input,\n+                      bool typed) {\n     auto def = tup(ast::local_crate, 0);\n     auto p = front::parser::new_parser(sess, env, def, input, 0u, 0u);\n     auto crate = front::parser::parse_crate_from_source_file(p);\n-    pretty::pprust::print_file(sess, crate.node.module, input,\n-                               std::io::stdout());\n+\n+    auto mode;\n+    if (typed) {\n+        crate = creader::read_crates(sess, crate);\n+        auto def_map = resolve::resolve_crate(sess, crate);\n+        auto ty_cx = ty::mk_ctxt(sess, def_map);\n+        auto typeck_result = typeck::check_crate(ty_cx, crate);\n+        crate = typeck_result._2;\n+        mode = pprust::mo_typed(ty_cx, typeck_result._0, typeck_result._1);\n+    } else {\n+        mode = pprust::mo_untyped;\n+    }\n+\n+    pprust::print_file(sess, crate.node.module, input, std::io::stdout(),\n+                       mode);\n }\n \n fn version(str argv0) {\n@@ -147,6 +160,7 @@ options:\n     --glue             generate glue.bc file\n     --shared           compile a shared-library crate\n     --pretty           pretty-print the input instead of compiling\n+    --typed-pretty     pretty-print the input with types instead of compiling\n     --ls               list the symbols defined by a crate file\n     -L <path>          add a directory to the library search path\n     --noverify         suppress LLVM verification step (slight speedup)\n@@ -214,7 +228,8 @@ fn main(vec[str] args) {\n     auto opts = [optflag(\"h\"), optflag(\"help\"),\n                     optflag(\"v\"), optflag(\"version\"),\n                     optflag(\"glue\"), optflag(\"emit-llvm\"),\n-                    optflag(\"pretty\"), optflag(\"ls\"), optflag(\"parse-only\"),\n+                    optflag(\"pretty\"), optflag(\"typed-pretty\"),\n+                    optflag(\"ls\"), optflag(\"parse-only\"),\n                     optflag(\"O\"), optflag(\"shared\"), optmulti(\"L\"),\n                     optflag(\"S\"), optflag(\"c\"), optopt(\"o\"), optflag(\"g\"),\n                     optflag(\"save-temps\"), optopt(\"sysroot\"),\n@@ -243,6 +258,7 @@ fn main(vec[str] args) {\n     }\n \n     auto pretty = opt_present(match, \"pretty\");\n+    auto typed_pretty = opt_present(match, \"typed-pretty\");\n     auto ls = opt_present(match, \"ls\");\n     auto glue = opt_present(match, \"glue\");\n     auto shared = opt_present(match, \"shared\");\n@@ -318,8 +334,8 @@ fn main(vec[str] args) {\n     auto ifile = match.free.(0);\n     let str saved_out_filename = \"\";\n     auto env = default_environment(sess, args.(0), ifile);\n-    if (pretty) {\n-        pretty_print_input(sess, env, ifile);\n+    if (pretty || typed_pretty) {\n+        pretty_print_input(sess, env, ifile, typed_pretty);\n     } else if (ls) {\n         front::creader::list_file_metadata(ifile, std::io::stdout());\n     } else {"}, {"sha": "b67387d1ddfc1965d3d540f1e36301480a767bc1", "filename": "src/comp/pretty/pprust.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7a3812afc3e9b83fdd8f1c4b8290968141725828/src%2Fcomp%2Fpretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a3812afc3e9b83fdd8f1c4b8290968141725828/src%2Fcomp%2Fpretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fpretty%2Fpprust.rs?ref=7a3812afc3e9b83fdd8f1c4b8290968141725828", "patch": "@@ -5,29 +5,39 @@ import std::option;\n import driver::session::session;\n import front::ast;\n import front::lexer;\n+import middle::ty;\n import util::common;\n import pp::end; import pp::wrd; import pp::space; import pp::line;\n \n const uint indent_unit = 4u;\n const uint default_columns = 78u;\n \n+tag mode {\n+    mo_untyped;\n+    mo_typed(ty::ctxt, ty::node_type_table, ty::type_cache);\n+}\n+\n type ps = @rec(pp::ps s,\n                option::t[vec[lexer::cmnt]] comments,\n-               mutable uint cur_cmnt);\n+               mutable uint cur_cmnt,\n+               mode mode);\n \n-fn print_file(session sess, ast::_mod _mod, str filename, io::writer out) {\n+fn print_file(session sess, ast::_mod _mod, str filename, io::writer out,\n+              mode mode) {\n     auto cmnts = lexer::gather_comments(sess, filename);\n     auto s = @rec(s=pp::mkstate(out, default_columns),\n                   comments=option::some[vec[lexer::cmnt]](cmnts),\n-                  mutable cur_cmnt=0u);\n+                  mutable cur_cmnt=0u,\n+                  mode=mode);\n     print_mod(s, _mod);\n }\n \n fn ty_to_str(&@ast::ty ty) -> str {\n     auto writer = io::string_writer();\n     auto s = @rec(s=pp::mkstate(writer.get_writer(), 0u),\n                   comments=option::none[vec[lexer::cmnt]],\n-                  mutable cur_cmnt=0u);\n+                  mutable cur_cmnt=0u,\n+                  mode=mo_untyped);\n     print_type(s, ty);\n     ret writer.get_str();\n }\n@@ -36,7 +46,8 @@ fn block_to_str(&ast::block blk) -> str {\n     auto writer = io::string_writer();\n     auto s = @rec(s=pp::mkstate(writer.get_writer(), 78u),\n                   comments=option::none[vec[lexer::cmnt]],\n-                  mutable cur_cmnt=0u);\n+                  mutable cur_cmnt=0u,\n+                  mode=mo_untyped);\n     print_block(s, blk);\n     ret writer.get_str();\n }\n@@ -45,7 +56,8 @@ fn pat_to_str(&@ast::pat p) -> str {\n     auto writer = io::string_writer();\n     auto s = @rec(s=pp::mkstate(writer.get_writer(), 78u),\n                   comments=option::none[vec[lexer::cmnt]],\n-                  mutable cur_cmnt=0u);\n+                  mutable cur_cmnt=0u,\n+                  mode=mo_untyped);\n     print_pat(s, p);\n     ret writer.get_str();\n }\n@@ -391,6 +403,12 @@ fn print_literal(ps s, @ast::lit lit) {\n fn print_expr(ps s, &@ast::expr expr) {\n     maybe_print_comment(s, expr.span.lo);\n     hbox(s);\n+\n+    alt (s.mode) {\n+        case (mo_untyped) { /* no-op */ }\n+        case (mo_typed(_, _, _)) { popen(s); }\n+    }\n+\n     alt (expr.node) {\n         case (ast::expr_vec(?exprs,?mut,_)) {\n             if (mut == ast::mut) {\n@@ -697,6 +715,18 @@ fn print_expr(ps s, &@ast::expr expr) {\n             // TODO\n         }\n     }\n+\n+    // Print the type if necessary.\n+    alt (s.mode) {\n+        case (mo_untyped) { /* no-op */ }\n+        case (mo_typed(?tcx, ?ntt, ?tc)) {\n+            space(s.s);\n+            wrd1(s, \"as\");\n+            wrd(s.s, ty::ty_to_str(tcx, ty::expr_ty(tcx, ntt, expr)));\n+            pclose(s);\n+        }\n+    }\n+\n     end(s.s);\n }\n "}]}