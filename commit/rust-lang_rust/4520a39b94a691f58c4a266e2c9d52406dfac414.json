{"sha": "4520a39b94a691f58c4a266e2c9d52406dfac414", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MjBhMzliOTRhNjkxZjU4YzRhMjY2ZTJjOWQ1MjQwNmRmYWM0MTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-02T22:09:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-02T22:09:14Z"}, "message": "Rollup merge of #63215 - gnzlbg:patch-6, r=Centril\n\nClarify semantics of mem::zeroed\n\nClarifies the semantics of `mem::zeroed`.\n\nr? @Centril\n\ncc @RalfJung", "tree": {"sha": "050db2ef3dad2eef7c9851a6cef6c0a4dd99109b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/050db2ef3dad2eef7c9851a6cef6c0a4dd99109b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4520a39b94a691f58c4a266e2c9d52406dfac414", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdRLSKCRBK7hj4Ov3rIwAAdHIIAHbNn5oEKS724b6MVqOd1VQ1\nSuJDhyMTC0mCCbvT86k8N978ewGH5ryaEmtn6bM+OoYi04UNoBLanTPFzUOUDmEX\nZrbmW1VHFQrWkNlbB+wn7lLHVCHBsX03VSVCuHYR/i7VWqDsX2qVDAZSyXw41aXK\naCnqPQAGXO8iVpjDVBX3HvzcipqHGKaAg1wDJ+rPSLqc8WsLS+28N62q5l8xO5rT\niYLKBZ7R5LI9Y30763jtIdiXhXKU/MOhhi31NIDzDYTJ1IjCvdWGWNrh8cBx70eT\nPzd7en3/ic/Nwx9ITFicu/RwUtC2g6OMF3MtrZEj2bL79RGptEzrh39v1F5xp0E=\n=nS6R\n-----END PGP SIGNATURE-----\n", "payload": "tree 050db2ef3dad2eef7c9851a6cef6c0a4dd99109b\nparent f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6\nparent 3725e3542fdf927dabaabf6f6c4bc1352c309da2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564783754 +0200\ncommitter GitHub <noreply@github.com> 1564783754 +0200\n\nRollup merge of #63215 - gnzlbg:patch-6, r=Centril\n\nClarify semantics of mem::zeroed\n\nClarifies the semantics of `mem::zeroed`.\n\nr? @Centril\n\ncc @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4520a39b94a691f58c4a266e2c9d52406dfac414", "html_url": "https://github.com/rust-lang/rust/commit/4520a39b94a691f58c4a266e2c9d52406dfac414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4520a39b94a691f58c4a266e2c9d52406dfac414/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6", "html_url": "https://github.com/rust-lang/rust/commit/f6d8977fbb7a97cb49220a7a9eaa7bd26ee0e4a6"}, {"sha": "3725e3542fdf927dabaabf6f6c4bc1352c309da2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3725e3542fdf927dabaabf6f6c4bc1352c309da2", "html_url": "https://github.com/rust-lang/rust/commit/3725e3542fdf927dabaabf6f6c4bc1352c309da2"}], "stats": {"total": 9, "additions": 6, "deletions": 3}, "files": [{"sha": "86dae985fdb00cc3d6ab67609dd6663de19200b1", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4520a39b94a691f58c4a266e2c9d52406dfac414/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520a39b94a691f58c4a266e2c9d52406dfac414/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=4520a39b94a691f58c4a266e2c9d52406dfac414", "patch": "@@ -414,17 +414,20 @@ pub const fn needs_drop<T>() -> bool {\n     intrinsics::needs_drop::<T>()\n }\n \n-/// Creates a value whose bytes are all zero.\n+/// Returns the value of type `T` represented by the all-zero byte-pattern.\n ///\n-/// This has the same effect as [`MaybeUninit::zeroed().assume_init()`][zeroed].\n-/// It is useful for FFI sometimes, but should generally be avoided.\n+/// This means that, for example, the padding byte in `(u8, u16)` is not\n+/// necessarily zeroed.\n ///\n /// There is no guarantee that an all-zero byte-pattern represents a valid value of\n /// some type `T`. For example, the all-zero byte-pattern is not a valid value\n /// for reference types (`&T` and `&mut T`). Using `zeroed` on such types\n /// causes immediate [undefined behavior][ub] because [the Rust compiler assumes][inv]\n /// that there always is a valid value in a variable it considers initialized.\n ///\n+/// This has the same effect as [`MaybeUninit::zeroed().assume_init()`][zeroed].\n+/// It is useful for FFI sometimes, but should generally be avoided.\n+///\n /// [zeroed]: union.MaybeUninit.html#method.zeroed\n /// [ub]: ../../reference/behavior-considered-undefined.html\n /// [inv]: union.MaybeUninit.html#initialization-invariant"}]}