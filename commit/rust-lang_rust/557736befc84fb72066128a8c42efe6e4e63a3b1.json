{"sha": "557736befc84fb72066128a8c42efe6e4e63a3b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NzczNmJlZmM4NGZiNzIwNjYxMjhhOGM0MmVmZTZlNGU2M2EzYjE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-07-05T21:22:09Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2018-07-05T21:22:09Z"}, "message": "Update scalar pairs per review comments", "tree": {"sha": "1c1b1f3db4dc7a53a04bcca1e42c745f321fc56a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c1b1f3db4dc7a53a04bcca1e42c745f321fc56a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/557736befc84fb72066128a8c42efe6e4e63a3b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/557736befc84fb72066128a8c42efe6e4e63a3b1", "html_url": "https://github.com/rust-lang/rust/commit/557736befc84fb72066128a8c42efe6e4e63a3b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/557736befc84fb72066128a8c42efe6e4e63a3b1/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5789765606baebd983bd9b1c870cb8b57a0627b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5789765606baebd983bd9b1c870cb8b57a0627b", "html_url": "https://github.com/rust-lang/rust/commit/e5789765606baebd983bd9b1c870cb8b57a0627b"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "5d36eef99af2d393c8124c84a2fb31b49dd0552b", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/557736befc84fb72066128a8c42efe6e4e63a3b1/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557736befc84fb72066128a8c42efe6e4e63a3b1/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=557736befc84fb72066128a8c42efe6e4e63a3b1", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::sync::Lrc;\n \n use base;\n-use common::{self, CodegenCx, C_null, C_undef, C_usize};\n+use common::{CodegenCx, C_null, C_undef, C_usize};\n use builder::{Builder, MemFlags};\n use value::Value;\n use type_of::LayoutLlvmExt;\n@@ -310,10 +310,6 @@ impl<'a, 'tcx> OperandValue {\n             OperandValue::Pair(a, b) => {\n                 for (i, &x) in [a, b].iter().enumerate() {\n                     let llptr = bx.struct_gep(dest.llval, i as u64);\n-                    // Make sure to always store i1 as i8.\n-                    if common::val_ty(x) == Type::i1(bx.cx) {\n-                        assert_eq!(common::val_ty(llptr), Type::i8p(bx.cx));\n-                    }\n                     let val = base::from_immediate(bx, x);\n                     bx.store_with_flags(val, llptr, dest.align, flags);\n                 }"}, {"sha": "e7f9457a6a1cac2ed4868790a3b81f736e9fd55a", "filename": "src/librustc_codegen_llvm/mir/place.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/557736befc84fb72066128a8c42efe6e4e63a3b1/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557736befc84fb72066128a8c42efe6e4e63a3b1/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fplace.rs?ref=557736befc84fb72066128a8c42efe6e4e63a3b1", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::tcx::PlaceTy;\n use rustc_data_structures::indexed_vec::Idx;\n use base;\n use builder::Builder;\n-use common::{CodegenCx, C_undef, C_usize, C_u8, C_u32, C_uint, C_null, C_uint_big, val_ty};\n+use common::{CodegenCx, C_undef, C_usize, C_u8, C_u32, C_uint, C_null, C_uint_big};\n use consts;\n use type_of::LayoutLlvmExt;\n use type_::Type;\n@@ -128,10 +128,6 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n         } else if let layout::Abi::ScalarPair(ref a, ref b) = self.layout.abi {\n             let load = |i, scalar: &layout::Scalar| {\n                 let llptr = bx.struct_gep(self.llval, i as u64);\n-                // Make sure to always load i1 as i8.\n-                if scalar.is_bool() {\n-                    assert_eq!(val_ty(llptr), Type::i8p(bx.cx));\n-                }\n                 let load = bx.load(llptr, self.align);\n                 scalar_load_metadata(load, scalar);\n                 if scalar.is_bool() {"}, {"sha": "0175d67803b8167861c9a04375b5af28e296b731", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/557736befc84fb72066128a8c42efe6e4e63a3b1/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557736befc84fb72066128a8c42efe6e4e63a3b1/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=557736befc84fb72066128a8c42efe6e4e63a3b1", "patch": "@@ -363,7 +363,7 @@ impl<'tcx> LayoutLlvmExt<'tcx> for TyLayout<'tcx> {\n \n         // Make sure to return the same type `immediate_llvm_type` would when\n         // dealing with an immediate pair.  This means that `(bool, bool)` is\n-        // effectively represented as `{i8, i8}` in memory and `{i1, i1}` as an\n+        // effectively represented as `{i8, i8}` in memory and two `i1`s as an\n         // immediate, just like `bool` is typically `i8` in memory and only `i1`\n         // when immediate.  We need to load/store `bool` as `i8` to avoid\n         // crippling LLVM optimizations or triggering other LLVM bugs with `i1`."}, {"sha": "f50e032f8e6f2e06eee66bb54c4bfcaebdf50b63", "filename": "src/test/codegen/scalar-pair-bool.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/557736befc84fb72066128a8c42efe6e4e63a3b1/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/557736befc84fb72066128a8c42efe6e4e63a3b1/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fscalar-pair-bool.rs?ref=557736befc84fb72066128a8c42efe6e4e63a3b1", "patch": "@@ -38,3 +38,17 @@ pub fn pair_and_or((a, b): (bool, bool)) -> (bool, bool) {\n     // CHECK: or i1 %arg0.0, %arg0.1\n     (a && b, a || b)\n }\n+\n+// CHECK: define void @pair_branches(i1 zeroext %arg0.0, i1 zeroext %arg0.1)\n+#[no_mangle]\n+pub fn pair_branches((a, b): (bool, bool)) {\n+    // Make sure it can branch directly on the unpacked bool args\n+    // CHECK: br i1 %arg0.0\n+    if a {\n+        println!(\"Hello!\");\n+    }\n+    // CHECK: br i1 %arg0.1\n+    if b {\n+        println!(\"Goodbye!\");\n+    }\n+}"}]}