{"sha": "1366d656605049f2e58525c7cad5433da9977db2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNjZkNjU2NjA1MDQ5ZjJlNTg1MjVjN2NhZDU0MzNkYTk5NzdkYjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-15T03:22:34Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-15T18:10:52Z"}, "message": "rt: Remove remaining uses of rust_kernel::get_task_by_id", "tree": {"sha": "1d2c2593180d038af2b63b4930d9e9636e54e44a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d2c2593180d038af2b63b4930d9e9636e54e44a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1366d656605049f2e58525c7cad5433da9977db2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1366d656605049f2e58525c7cad5433da9977db2", "html_url": "https://github.com/rust-lang/rust/commit/1366d656605049f2e58525c7cad5433da9977db2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1366d656605049f2e58525c7cad5433da9977db2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b278d675a231fdfe825c72e499d59e8a3d07ffaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/b278d675a231fdfe825c72e499d59e8a3d07ffaa", "html_url": "https://github.com/rust-lang/rust/commit/b278d675a231fdfe825c72e499d59e8a3d07ffaa"}], "stats": {"total": 61, "additions": 24, "deletions": 37}, "files": [{"sha": "90208475d9c39659ffc28ea989f37eac15a69277", "filename": "src/libcore/task.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1366d656605049f2e58525c7cad5433da9977db2/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1366d656605049f2e58525c7cad5433da9977db2/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=1366d656605049f2e58525c7cad5433da9977db2", "patch": "@@ -487,7 +487,7 @@ fn spawn_raw(opts: task_opts, +f: fn~()) unsafe {\n     let fptr = ptr::addr_of(f);\n     let closure: *rust_closure = unsafe::reinterpret_cast(fptr);\n \n-    let task_id = alt opts.sched {\n+    let new_task = alt opts.sched {\n       none {\n         rustrt::new_task()\n       }\n@@ -498,13 +498,13 @@ fn spawn_raw(opts: task_opts, +f: fn~()) unsafe {\n \n     option::may(opts.notify_chan) {|c|\n         // FIXME (1087): Would like to do notification in Rust\n-        rustrt::rust_task_config_notify(task_id, c);\n+        rustrt::rust_task_config_notify(new_task, c);\n     }\n \n-    rustrt::start_task(task_id, closure);\n+    rustrt::start_task(new_task, closure);\n     unsafe::leak(f);\n \n-    fn new_task_in_new_sched(opts: sched_opts) -> task_id {\n+    fn new_task_in_new_sched(opts: sched_opts) -> *rust_task {\n         if opts.native_stack_size != none {\n             fail \"native_stack_size scheduler option unimplemented\";\n         }\n@@ -543,13 +543,13 @@ native mod rustrt {\n     fn get_task_id() -> task_id;\n     fn rust_get_task() -> *rust_task;\n \n-    fn new_task() -> task_id;\n-    fn rust_new_task_in_sched(id: sched_id) -> task_id;\n+    fn new_task() -> *rust_task;\n+    fn rust_new_task_in_sched(id: sched_id) -> *rust_task;\n \n     fn rust_task_config_notify(\n-        id: task_id, &&chan: comm::chan<notification>);\n+        task: *rust_task, &&chan: comm::chan<notification>);\n \n-    fn start_task(id: task_id, closure: *rust_closure);\n+    fn start_task(task: *rust_task, closure: *rust_closure);\n \n     fn rust_task_is_unwinding(rt: *rust_task) -> bool;\n     fn unsupervise();"}, {"sha": "3f5f083650fc1c21cb7c7da43caa413a4aed3b3a", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=1366d656605049f2e58525c7cad5433da9977db2", "patch": "@@ -81,9 +81,7 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     rust_kernel *kernel = new rust_kernel(srv);\n     rust_sched_id sched_id = kernel->create_scheduler(env->num_sched_threads);\n     rust_scheduler *sched = kernel->get_scheduler_by_id(sched_id);\n-    rust_task_id root_id = sched->create_task(NULL, \"main\", MAIN_STACK_SIZE);\n-    rust_task *root_task = kernel->get_task_by_id(root_id);\n-    I(kernel, root_task != NULL);\n+    rust_task *root_task = sched->create_task(NULL, \"main\", MAIN_STACK_SIZE);\n     rust_task_thread *thread = root_task->thread;\n     command_line_args *args\n         = new (kernel, \"main command line args\")\n@@ -96,7 +94,6 @@ rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     }\n \n     root_task->start((spawn_fn)main_fn, NULL, args->args);\n-    root_task->deref();\n     root_task = NULL;\n \n     int ret = kernel->wait_for_schedulers();"}, {"sha": "aa5b60f87a9e7237dc7166fa2e3a53929301005a", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=1366d656605049f2e58525c7cad5433da9977db2", "patch": "@@ -424,18 +424,18 @@ get_task_id() {\n     return task->id;\n }\n \n-static rust_task_id\n+static rust_task*\n new_task_common(rust_scheduler *sched, rust_task *parent) {\n     return sched->create_task(parent, NULL);\n }\n \n-extern \"C\" CDECL rust_task_id\n+extern \"C\" CDECL rust_task*\n new_task() {\n     rust_task *task = rust_task_thread::get_task();\n     return new_task_common(task->sched, task);\n }\n \n-extern \"C\" CDECL rust_task_id\n+extern \"C\" CDECL rust_task*\n rust_new_task_in_sched(rust_sched_id id) {\n     rust_task *task = rust_task_thread::get_task();\n     rust_scheduler *sched = task->kernel->get_scheduler_by_id(id);\n@@ -444,13 +444,8 @@ rust_new_task_in_sched(rust_sched_id id) {\n }\n \n extern \"C\" CDECL void\n-rust_task_config_notify(rust_task_id task_id, chan_handle *chan) {\n-    rust_task *task = rust_task_thread::get_task();\n-    rust_task *target = task->kernel->get_task_by_id(task_id);\n-    A(task->thread, target != NULL,\n-      \"This function should only be called when we know the task exists\");\n+rust_task_config_notify(rust_task *target, chan_handle *chan) {\n     target->config_notify(*chan);\n-    target->deref();\n }\n \n extern \"C\" rust_task *\n@@ -459,11 +454,8 @@ rust_get_task() {\n }\n \n extern \"C\" CDECL void\n-start_task(rust_task_id id, fn_env_pair *f) {\n-    rust_task *task = rust_task_thread::get_task();\n-    rust_task *target = task->kernel->get_task_by_id(id);\n+start_task(rust_task *target, fn_env_pair *f) {\n     target->start(f->f, f->env, NULL);\n-    target->deref();\n }\n \n extern \"C\" CDECL int"}, {"sha": "0fc3e78d85e8204d5ef2049b9692b625eaf10b69", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=1366d656605049f2e58525c7cad5433da9977db2", "patch": "@@ -82,7 +82,7 @@ rust_scheduler::kill_all_tasks() {\n     }\n }\n \n-rust_task_id\n+rust_task *\n rust_scheduler::create_task(rust_task *spawner, const char *name,\n \t\t\t    size_t init_stack_sz) {\n     size_t thread_no;\n@@ -95,7 +95,7 @@ rust_scheduler::create_task(rust_task *spawner, const char *name,\n     return thread->create_task(spawner, name, init_stack_sz);\n }\n \n-rust_task_id\n+rust_task *\n rust_scheduler::create_task(rust_task *spawner, const char *name) {\n     return create_task(spawner, name, env->min_stack_size);\n }"}, {"sha": "f12e053e4cf87036e9af3ece543e73aaac865a45", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=1366d656605049f2e58525c7cad5433da9977db2", "patch": "@@ -39,10 +39,10 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     void start_task_threads();\n     void join_task_threads();\n     void kill_all_tasks();\n-    rust_task_id create_task(rust_task *spawner,\n-\t\t\t     const char *name,\n-\t\t\t     size_t init_stack_sz);\n-    rust_task_id create_task(rust_task *spawner, const char *name);\n+    rust_task* create_task(rust_task *spawner,\n+\t\t\t   const char *name,\n+\t\t\t   size_t init_stack_sz);\n+    rust_task* create_task(rust_task *spawner, const char *name);\n \n     void release_task();\n "}, {"sha": "a167c63cfe2c6954e582a74245be9fbc54e4a1f3", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=1366d656605049f2e58525c7cad5433da9977db2", "patch": "@@ -159,8 +159,6 @@ void\n rust_task_thread::release_task(rust_task *task) {\n     // Nobody should have a ref to the task at this point\n     I(this, task->get_ref_count() == 0);\n-    // Kernel should not know about the task any more\n-    I(this, kernel->get_task_by_id(task->id) == NULL);\n     // Now delete the task, which will require using this thread's\n     // memory region.\n     delete task;\n@@ -304,7 +302,7 @@ rust_task_thread::get_cache() {\n     return &cache;\n }\n \n-rust_task_id\n+rust_task *\n rust_task_thread::create_task(rust_task *spawner, const char *name,\n                             size_t init_stack_sz) {\n     rust_task *task =\n@@ -319,7 +317,7 @@ rust_task_thread::create_task(rust_task *spawner, const char *name,\n     }\n \n     kernel->register_task(task);\n-    return task->id;\n+    return task;\n }\n \n void "}, {"sha": "662b767a55251937d15e7d737bcfc6b660235e1d", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/1366d656605049f2e58525c7cad5433da9977db2/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=1366d656605049f2e58525c7cad5433da9977db2", "patch": "@@ -120,8 +120,8 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n \n     void kill_all_tasks();\n \n-    rust_task_id create_task(rust_task *spawner, const char *name,\n-                             size_t init_stack_sz);\n+    rust_task *create_task(rust_task *spawner, const char *name,\n+                           size_t init_stack_sz);\n \n     void transition(rust_task *task,\n                     rust_task_list *src, rust_task_list *dst,"}]}