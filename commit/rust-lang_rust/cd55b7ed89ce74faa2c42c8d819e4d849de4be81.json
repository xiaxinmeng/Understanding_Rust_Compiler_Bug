{"sha": "cd55b7ed89ce74faa2c42c8d819e4d849de4be81", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNTViN2VkODljZTc0ZmFhMmM0MmM4ZDgxOWU0ZDg0OWRlNGJlODE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-15T02:04:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-15T02:04:39Z"}, "message": "Teach typeck.ty, typeck.collect_item_types and typeck.check_expr about obj items.", "tree": {"sha": "b99008db1646b60377ef8f08806e1bcfb877a9a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b99008db1646b60377ef8f08806e1bcfb877a9a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd55b7ed89ce74faa2c42c8d819e4d849de4be81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd55b7ed89ce74faa2c42c8d819e4d849de4be81", "html_url": "https://github.com/rust-lang/rust/commit/cd55b7ed89ce74faa2c42c8d819e4d849de4be81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd55b7ed89ce74faa2c42c8d819e4d849de4be81/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e0c60d6dee3832358be1b4b8303fe6ade6be4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c", "html_url": "https://github.com/rust-lang/rust/commit/b1e0c60d6dee3832358be1b4b8303fe6ade6be4c"}], "stats": {"total": 32, "additions": 31, "deletions": 1}, "files": [{"sha": "b3b066a4314e8148fd483a6199a45159e51f94ee", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cd55b7ed89ce74faa2c42c8d819e4d849de4be81/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd55b7ed89ce74faa2c42c8d819e4d849de4be81/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=cd55b7ed89ce74faa2c42c8d819e4d849de4be81", "patch": "@@ -27,6 +27,7 @@ type fn_ctxt = rec(@ty ret_ty,\n \n type arg = rec(ast.mode mode, @ty ty);\n type field = rec(ast.ident ident, @ty ty);\n+type method = rec(ast.ident ident, vec[arg] inputs, @ty output);\n \n // NB: If you change this, you'll probably want to change the corresponding\n // AST structure in front/ast.rs as well.\n@@ -45,6 +46,7 @@ tag sty {\n     ty_tup(vec[@ty]);\n     ty_rec(vec[field]);\n     ty_fn(vec[arg], @ty);                           // TODO: effect\n+    ty_obj(vec[method]);\n     ty_var(int);                                    // ephemeral type var\n     ty_local(ast.def_id);                           // type of a local var\n     // TODO: ty_param(ast.def_id), for fn type params\n@@ -371,6 +373,17 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n         ret rec(mode=a.mode, ty=ast_ty_to_ty(f, a.ty));\n     }\n \n+    fn ty_of_method(@ty_item_table id_to_ty_item,\n+                    @ty_table item_to_ty,\n+                    &@ast.method m) -> method {\n+        auto get = bind getter(id_to_ty_item, item_to_ty, _);\n+        auto convert = bind ast_ty_to_ty(get, _);\n+        auto f = bind ty_of_arg(id_to_ty_item, item_to_ty, _);\n+        auto inputs = _vec.map[ast.arg,arg](f, m.node.meth.inputs);\n+        auto output = convert(m.node.meth.output);\n+        ret rec(ident=m.node.ident, inputs=inputs, output=output);\n+    }\n+\n     fn ty_of_item(@ty_item_table id_to_ty_item,\n                   @ty_table item_to_ty,\n                   @ast.item it) -> @ty {\n@@ -396,6 +409,18 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n                 ret t_fn;\n             }\n \n+            case (ast.item_obj(?ident, ?obj_info, _, ?def_id, _)) {\n+                // TODO: handle ty-params\n+\n+                auto f = bind ty_of_method(id_to_ty_item, item_to_ty, _);\n+                auto methods =\n+                    _vec.map[@ast.method,method](f, obj_info.methods);\n+\n+                auto t_obj = plain_ty(ty_obj(methods));\n+                item_to_ty.insert(def_id, t_obj);\n+                ret t_obj;\n+            }\n+\n             case (ast.item_ty(?ident, ?ty, _, ?def_id, _)) {\n                 if (item_to_ty.contains_key(def_id)) {\n                     // Avoid repeating work.\n@@ -424,7 +449,7 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n         let vec[ast.variant] result = vec();\n \n         for (ast.variant variant in variants) {\n-            // Nullary tag constructors get turned into constants; n-ary tag\n+            // Nullary tag constructors get truned into constants; n-ary tag\n             // constructors get turned into functions.\n             auto result_ty;\n             if (_vec.len[ast.variant_arg](variant.args) == 0u) {\n@@ -1586,6 +1611,11 @@ fn check_expr(&fn_ctxt fcx, @ast.expr expr) -> @ast.expr {\n                     check (fcx.locals.contains_key(id));\n                     t = fcx.locals.get(id);\n                 }\n+                case (ast.def_obj(?id)) {\n+                    check (fcx.ccx.item_types.contains_key(id));\n+                    t = fcx.ccx.item_types.get(id);\n+                }\n+\n                 case (_) {\n                     // FIXME: handle other names.\n                     fcx.ccx.sess.unimpl(\"definition variant for: \""}]}