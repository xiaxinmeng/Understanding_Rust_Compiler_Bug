{"sha": "cbfa61282fc34204b9b66554e06189c2d0b4d085", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZmE2MTI4MmZjMzQyMDRiOWI2NjU1NGUwNjE4OWMyZDBiNGQwODU=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-22T06:40:15Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-22T09:02:52Z"}, "message": "Simplify on_panic callback handling\n\nThe registration of `panicking::on_panic` as a general-purpose\ncallback is overcomplicated and can fail.\n\nInstead, invoking it explicitly removes the need for locking and paves\nthe way for further improvements.", "tree": {"sha": "ecb04bd1162bfbab84b33fe7d170f3964bcbd966", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecb04bd1162bfbab84b33fe7d170f3964bcbd966"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbfa61282fc34204b9b66554e06189c2d0b4d085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbfa61282fc34204b9b66554e06189c2d0b4d085", "html_url": "https://github.com/rust-lang/rust/commit/cbfa61282fc34204b9b66554e06189c2d0b4d085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbfa61282fc34204b9b66554e06189c2d0b4d085/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f07f4ef74366f70554cb0f2cef590e76bfd55791", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07f4ef74366f70554cb0f2cef590e76bfd55791", "html_url": "https://github.com/rust-lang/rust/commit/f07f4ef74366f70554cb0f2cef590e76bfd55791"}], "stats": {"total": 21, "additions": 5, "deletions": 16}, "files": [{"sha": "47f6bd9315d998124401452b243000f0e4a61523", "filename": "src/libstd/sys/common/unwind/mod.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cbfa61282fc34204b9b66554e06189c2d0b4d085/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbfa61282fc34204b9b66554e06189c2d0b4d085/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Funwind%2Fmod.rs?ref=cbfa61282fc34204b9b66554e06189c2d0b4d085", "patch": "@@ -244,22 +244,12 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, u32)) -> !\n #[inline(never)] #[cold] // this is the slow path, please never inline this\n fn begin_unwind_inner(msg: Box<Any + Send>,\n                       file_line: &(&'static str, u32)) -> ! {\n-    // Make sure the default failure handler is registered before we look at the\n-    // callbacks. We also use a raw sys-based mutex here instead of a\n-    // `std::sync` one as accessing TLS can cause weird recursive problems (and\n-    // we don't need poison checking).\n-    unsafe {\n-        static LOCK: Mutex = Mutex::new();\n-        static mut INIT: bool = false;\n-        LOCK.lock();\n-        if !INIT {\n-            register(panicking::on_panic);\n-            INIT = true;\n-        }\n-        LOCK.unlock();\n-    }\n+    let (file, line) = *file_line;\n+\n+    // First, invoke the default panic handler.\n+    panicking::on_panic(&*msg, file, line);\n \n-    // First, invoke call the user-defined callbacks triggered on thread panic.\n+    // Then, invoke call the user-defined callbacks triggered on thread panic.\n     //\n     // By the time that we see a callback has been registered (by reading\n     // MAX_CALLBACKS), the actual callback itself may have not been stored yet,\n@@ -275,7 +265,6 @@ fn begin_unwind_inner(msg: Box<Any + Send>,\n             0 => {}\n             n => {\n                 let f: Callback = unsafe { mem::transmute(n) };\n-                let (file, line) = *file_line;\n                 f(&*msg, file, line);\n             }\n         }"}]}