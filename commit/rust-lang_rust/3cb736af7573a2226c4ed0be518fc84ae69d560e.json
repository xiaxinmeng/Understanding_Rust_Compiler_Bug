{"sha": "3cb736af7573a2226c4ed0be518fc84ae69d560e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYjczNmFmNzU3M2EyMjI2YzRlZDBiZTUxOGZjODRhZTY5ZDU2MGU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-09T08:06:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-09-09T08:53:36Z"}, "message": "miri loop detector hashing: fix enum hashing to also consider discriminant; do not hash extra machine state\n\nstandalone miri is not interested in loop detection", "tree": {"sha": "f8beca0709c05932d55311b4af12bb3fdf7b22a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8beca0709c05932d55311b4af12bb3fdf7b22a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cb736af7573a2226c4ed0be518fc84ae69d560e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb736af7573a2226c4ed0be518fc84ae69d560e", "html_url": "https://github.com/rust-lang/rust/commit/3cb736af7573a2226c4ed0be518fc84ae69d560e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cb736af7573a2226c4ed0be518fc84ae69d560e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dac76020a5a33fa723d578043e422455e598620b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dac76020a5a33fa723d578043e422455e598620b", "html_url": "https://github.com/rust-lang/rust/commit/dac76020a5a33fa723d578043e422455e598620b"}], "stats": {"total": 64, "additions": 38, "deletions": 26}, "files": [{"sha": "82cc1b7f66166a848597ea814a7f99be8bce9dbd", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=3cb736af7573a2226c4ed0be518fc84ae69d560e", "patch": "@@ -239,6 +239,7 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n     type MemoryKinds = !;\n \n     const MUT_STATIC_KIND: Option<!> = None; // no mutating of statics allowed\n+    const DETECT_LOOPS: bool = true;\n \n     fn find_fn<'a>(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,"}, {"sha": "740d4e038df7ebadf771e2feb0b17652cf361d2d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=3cb736af7573a2226c4ed0be518fc84ae69d560e", "patch": "@@ -65,6 +65,8 @@ pub struct EvalContext<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n     /// detector period.\n     pub(super) steps_since_detector_enabled: isize,\n \n+    /// Extra state to detect loops.\n+    /// FIXME: Move this to the CTFE machine's state, out of the general miri engine.\n     pub(super) loop_detector: InfiniteLoopDetector<'a, 'mir, 'tcx, M>,\n }\n \n@@ -110,6 +112,7 @@ pub struct Frame<'mir, 'tcx: 'mir> {\n     pub stmt: usize,\n }\n \n+// Not using the macro because that does not support types depending on 'tcx\n impl<'a, 'mir, 'tcx: 'mir> HashStable<StableHashingContext<'a>> for Frame<'mir, 'tcx> {\n     fn hash_stable<W: StableHasherResult>(\n         &self,\n@@ -144,11 +147,14 @@ pub enum StackPopCleanup {\n     None { cleanup: bool },\n }\n \n+// Can't use the macro here because that does not support named enum fields.\n impl<'a> HashStable<StableHashingContext<'a>> for StackPopCleanup {\n     fn hash_stable<W: StableHasherResult>(\n         &self,\n         hcx: &mut StableHashingContext<'a>,\n-        hasher: &mut StableHasher<W>) {\n+        hasher: &mut StableHasher<W>)\n+    {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n             StackPopCleanup::Goto(ref block) => block.hash_stable(hcx, hasher),\n             StackPopCleanup::None { cleanup } => cleanup.hash_stable(hcx, hasher),"}, {"sha": "f33cb4791029a8ae9afb3f1259626964e5336868", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=3cb736af7573a2226c4ed0be518fc84ae69d560e", "patch": "@@ -12,29 +12,29 @@\n //! This separation exists to ensure that no fancy miri features like\n //! interpreting common C functions leak into CTFE.\n \n-use std::hash::Hash;\n-\n use rustc::hir::def_id::DefId;\n-use rustc::ich::StableHashingContext;\n use rustc::mir::interpret::{Allocation, EvalResult, Scalar};\n use rustc::mir;\n use rustc::ty::{self, layout::TyLayout, query::TyCtxtAt};\n-use rustc_data_structures::stable_hasher::HashStable;\n \n use super::{EvalContext, PlaceTy, OpTy};\n \n /// Methods of this trait signifies a point where CTFE evaluation would fail\n /// and some use case dependent behaviour can instead be applied\n-pub trait Machine<'mir, 'tcx>: Clone + Eq + Hash + for<'a> HashStable<StableHashingContext<'a>> {\n+pub trait Machine<'mir, 'tcx>: Clone + Eq {\n     /// Additional data that can be accessed via the Memory\n-    type MemoryData: Clone + Eq + Hash + for<'a> HashStable<StableHashingContext<'a>>;\n+    type MemoryData: Clone + Eq;\n \n     /// Additional memory kinds a machine wishes to distinguish from the builtin ones\n-    type MemoryKinds: ::std::fmt::Debug + Copy + Clone + Eq + Hash;\n+    type MemoryKinds: ::std::fmt::Debug + Copy + Clone + Eq;\n \n     /// The memory kind to use for mutated statics -- or None if those are not supported.\n     const MUT_STATIC_KIND: Option<Self::MemoryKinds>;\n \n+    /// Whether to attempt to detect infinite loops (any kind of infinite\n+    /// execution, really).\n+    const DETECT_LOOPS: bool;\n+\n     /// Entry point to all function calls.\n     ///\n     /// Returns either the mir to use for the call, or `None` if execution should"}, {"sha": "64e0aeaaab7f042249f2717a6794a3ae91e0364f", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3cb736af7573a2226c4ed0be518fc84ae69d560e", "patch": "@@ -13,6 +13,7 @@\n //! All high-level functions to write to memory work on places as destinations.\n \n use std::convert::TryFrom;\n+use std::mem;\n \n use rustc::ich::StableHashingContext;\n use rustc::mir;\n@@ -57,11 +58,13 @@ pub enum Place<Id=AllocId> {\n     },\n }\n \n+// Can't use the macro here because that does not support named enum fields.\n impl<'a> HashStable<StableHashingContext<'a>> for Place {\n     fn hash_stable<W: StableHasherResult>(\n         &self, hcx: &mut StableHashingContext<'a>,\n-        hasher: &mut StableHasher<W>) {\n-\n+        hasher: &mut StableHasher<W>)\n+    {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n         match self {\n             Place::Ptr(mem_place) => mem_place.hash_stable(hcx, hasher),\n "}, {"sha": "0e8466905eb767ccc54164dd35770dcfc937f265", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=3cb736af7573a2226c4ed0be518fc84ae69d560e", "patch": "@@ -62,14 +62,13 @@ impl<'a, 'mir, 'tcx, M> InfiniteLoopDetector<'a, 'mir, 'tcx, M>\n     pub fn observe_and_analyze(\n         &mut self,\n         tcx: &TyCtxt<'b, 'tcx, 'tcx>,\n-        machine: &M,\n         memory: &Memory<'a, 'mir, 'tcx, M>,\n         stack: &[Frame<'mir, 'tcx>],\n     ) -> EvalResult<'tcx, ()> {\n \n         let mut hcx = tcx.get_stable_hashing_context();\n         let mut hasher = StableHasher::<u64>::new();\n-        (machine, stack).hash_stable(&mut hcx, &mut hasher);\n+        stack.hash_stable(&mut hcx, &mut hasher);\n         let hash = hasher.finish();\n \n         if self.hashes.insert(hash) {\n@@ -79,7 +78,7 @@ impl<'a, 'mir, 'tcx, M> InfiniteLoopDetector<'a, 'mir, 'tcx, M>\n \n         info!(\"snapshotting the state of the interpreter\");\n \n-        if self.snapshots.insert(EvalSnapshot::new(machine, memory, stack)) {\n+        if self.snapshots.insert(EvalSnapshot::new(memory, stack)) {\n             // Spurious collision or first cycle\n             return Ok(())\n         }\n@@ -345,7 +344,6 @@ impl<'a, 'b, 'mir, 'tcx, M> SnapshotContext<'b> for Memory<'a, 'mir, 'tcx, M>\n \n /// The virtual machine state during const-evaluation at a given point in time.\n struct EvalSnapshot<'a, 'mir, 'tcx: 'a + 'mir, M: Machine<'mir, 'tcx>> {\n-    machine: M,\n     memory: Memory<'a, 'mir, 'tcx, M>,\n     stack: Vec<Frame<'mir, 'tcx>>,\n }\n@@ -354,21 +352,20 @@ impl<'a, 'mir, 'tcx, M> EvalSnapshot<'a, 'mir, 'tcx, M>\n     where M: Machine<'mir, 'tcx>,\n {\n     fn new(\n-        machine: &M,\n         memory: &Memory<'a, 'mir, 'tcx, M>,\n-        stack: &[Frame<'mir, 'tcx>]) -> Self {\n-\n+        stack: &[Frame<'mir, 'tcx>]\n+    ) -> Self {\n         EvalSnapshot {\n-            machine: machine.clone(),\n             memory: memory.clone(),\n             stack: stack.into(),\n         }\n     }\n \n     fn snapshot<'b: 'a>(&'b self)\n-        -> (&'b M, MemorySnapshot<'b, 'mir, 'tcx, M>, Vec<FrameSnapshot<'a, 'tcx>>) {\n-        let EvalSnapshot{ machine, memory, stack } = self;\n-        (&machine, memory.snapshot(), stack.iter().map(|frame| frame.snapshot(memory)).collect())\n+        -> (MemorySnapshot<'b, 'mir, 'tcx, M>, Vec<FrameSnapshot<'a, 'tcx>>)\n+    {\n+        let EvalSnapshot{ memory, stack } = self;\n+        (memory.snapshot(), stack.iter().map(|frame| frame.snapshot(memory)).collect())\n     }\n }\n \n@@ -384,17 +381,19 @@ impl<'a, 'mir, 'tcx, M> Hash for EvalSnapshot<'a, 'mir, 'tcx, M>\n     }\n }\n \n+// Not using the macro because we need special handling for `memory`, which the macro\n+// does not support at the same time as the extra bounds on the type.\n impl<'a, 'b, 'mir, 'tcx, M> HashStable<StableHashingContext<'b>>\n     for EvalSnapshot<'a, 'mir, 'tcx, M>\n     where M: Machine<'mir, 'tcx>,\n {\n     fn hash_stable<W: StableHasherResult>(\n         &self,\n         hcx: &mut StableHashingContext<'b>,\n-        hasher: &mut StableHasher<W>) {\n-\n-        let EvalSnapshot{ machine, memory, stack } = self;\n-        (machine, &memory.data, stack).hash_stable(hcx, hasher);\n+        hasher: &mut StableHasher<W>)\n+    {\n+        let EvalSnapshot{ memory: _, stack } = self;\n+        stack.hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "2835a46e7662d4674979b74694bcfa6ae1e47c83", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb736af7573a2226c4ed0be518fc84ae69d560e/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=3cb736af7573a2226c4ed0be518fc84ae69d560e", "patch": "@@ -65,6 +65,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n             }\n         }\n \n+        if !M::DETECT_LOOPS {\n+            return Ok(());\n+        }\n+\n         if self.loop_detector.is_empty() {\n             // First run of the loop detector\n \n@@ -75,7 +79,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n \n         self.loop_detector.observe_and_analyze(\n             &self.tcx,\n-            &self.machine,\n             &self.memory,\n             &self.stack[..],\n         )"}]}