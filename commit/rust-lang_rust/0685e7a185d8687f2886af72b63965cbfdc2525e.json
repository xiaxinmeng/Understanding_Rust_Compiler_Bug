{"sha": "0685e7a185d8687f2886af72b63965cbfdc2525e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ODVlN2ExODVkODY4N2YyODg2YWY3MmI2Mzk2NWNiZmRjMjUyNWU=", "commit": {"author": {"name": "Alexander Bliskovsky", "email": "alexander.bliskovsky@gmail.com", "date": "2015-02-23T21:06:49Z"}, "committer": {"name": "Alexander Bliskovsky", "email": "alexander.bliskovsky@gmail.com", "date": "2015-02-23T21:29:28Z"}, "message": "Added section on `cargo new` to \"Hello Cargo!\" chapter.", "tree": {"sha": "e625dd3f0e638ba9bad2e2751f1821af6ac52db5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e625dd3f0e638ba9bad2e2751f1821af6ac52db5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0685e7a185d8687f2886af72b63965cbfdc2525e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0685e7a185d8687f2886af72b63965cbfdc2525e", "html_url": "https://github.com/rust-lang/rust/commit/0685e7a185d8687f2886af72b63965cbfdc2525e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0685e7a185d8687f2886af72b63965cbfdc2525e/comments", "author": {"login": "jxcl", "id": 108500, "node_id": "MDQ6VXNlcjEwODUwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/108500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jxcl", "html_url": "https://github.com/jxcl", "followers_url": "https://api.github.com/users/jxcl/followers", "following_url": "https://api.github.com/users/jxcl/following{/other_user}", "gists_url": "https://api.github.com/users/jxcl/gists{/gist_id}", "starred_url": "https://api.github.com/users/jxcl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jxcl/subscriptions", "organizations_url": "https://api.github.com/users/jxcl/orgs", "repos_url": "https://api.github.com/users/jxcl/repos", "events_url": "https://api.github.com/users/jxcl/events{/privacy}", "received_events_url": "https://api.github.com/users/jxcl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jxcl", "id": 108500, "node_id": "MDQ6VXNlcjEwODUwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/108500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jxcl", "html_url": "https://github.com/jxcl", "followers_url": "https://api.github.com/users/jxcl/followers", "following_url": "https://api.github.com/users/jxcl/following{/other_user}", "gists_url": "https://api.github.com/users/jxcl/gists{/gist_id}", "starred_url": "https://api.github.com/users/jxcl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jxcl/subscriptions", "organizations_url": "https://api.github.com/users/jxcl/orgs", "repos_url": "https://api.github.com/users/jxcl/repos", "events_url": "https://api.github.com/users/jxcl/events{/privacy}", "received_events_url": "https://api.github.com/users/jxcl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0f7ca27de6b4e03f30012656dad270cda55a363", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0f7ca27de6b4e03f30012656dad270cda55a363", "html_url": "https://github.com/rust-lang/rust/commit/f0f7ca27de6b4e03f30012656dad270cda55a363"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "de2ce2d9edebf3383efdf361cb12f8b2ae0804a2", "filename": "src/doc/trpl/hello-cargo.md", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/0685e7a185d8687f2886af72b63965cbfdc2525e/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "raw_url": "https://github.com/rust-lang/rust/raw/0685e7a185d8687f2886af72b63965cbfdc2525e/src%2Fdoc%2Ftrpl%2Fhello-cargo.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fhello-cargo.md?ref=0685e7a185d8687f2886af72b63965cbfdc2525e", "patch": "@@ -18,6 +18,8 @@ the Cargo\n README](https://github.com/rust-lang/cargo#installing-cargo-from-nightlies)\n for specific instructions about installing it.\n \n+## Converting to Cargo\n+\n Let's convert Hello World to Cargo.\n \n To Cargo-ify our project, we need to do two things: Make a `Cargo.toml`\n@@ -103,6 +105,62 @@ That's it! We've successfully built `hello_world` with Cargo. Even though our\n program is simple, it's using much of the real tooling that you'll use for the\n rest of your Rust career.\n \n+## A New Project\n+\n+You don't have to go through this whole process every time you want to start a new\n+project! Cargo has the ability to make a bare-bones project directory in which you\n+can start developing right away.\n+\n+To start a new project with Cargo, use `cargo new`:\n+\n+```{bash}\n+$ cargo new hello_world --bin\n+```\n+\n+We're passing `--bin` because we're making a binary program: if we\n+were making a library, we'd leave it off.\n+\n+Let's check out what Cargo has generated for us:\n+\n+```{bash}\n+$ cd hello_world\n+$ tree .\n+.\n+\u251c\u2500\u2500 Cargo.toml\n+\u2514\u2500\u2500 src\n+    \u2514\u2500\u2500 main.rs\n+\n+1 directory, 2 files\n+```\n+\n+If you don't have the `tree` command, you can probably get it from your distro's package\n+manager. It's not necessary, but it's certainly useful.\n+\n+This is all we need to get started. First, let's check out `Cargo.toml`:\n+\n+```{toml}\n+[package]\n+\n+name = \"hello_world\"\n+version = \"0.0.1\"\n+authors = [\"Your Name <you@example.com>\"]\n+```\n+\n+Cargo has populated this file with reasonable defaults based off the arguments\n+you gave it and your Git global config. You may notice that Cargo has also initialized\n+the `hello_world` directory as a Git repository.\n+\n+Here's what's in `src/main.rs`:\n+\n+```{rust}\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+```\n+\n+Cargo has generated a \"Hello World!\" for us, and you're ready to start coding! A\n+much more in-depth guide to Cargo can be found [here](http://doc.crates.io/guide.html).\n+\n Now that you've got the tools down, let's actually learn more about the Rust\n language itself. These are the basics that will serve you well through the rest\n-of your time with Rust.\n+of your time with Rust.\n\\ No newline at end of file"}]}