{"sha": "f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5", "node_id": "C_kwDOAAsO6NoAKGYzMTYyMmE1MGIwNmU0ZTU3NzVjZjcxZDFkZmUzZTU5ZmZjMjFhYTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-12T12:13:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-12T12:13:32Z"}, "message": "Auto merge of #90813 - notriddle:notriddle/vec-extend, r=GuillaumeGomez\n\nUse Vec extend and collect instead of repeatedly calling push", "tree": {"sha": "8202dda112120cd6a08f0b1c2099e572c505509e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8202dda112120cd6a08f0b1c2099e572c505509e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5", "html_url": "https://github.com/rust-lang/rust/commit/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4c23daeb461ac02413eb36c8cefcc5530638a05", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4c23daeb461ac02413eb36c8cefcc5530638a05", "html_url": "https://github.com/rust-lang/rust/commit/e4c23daeb461ac02413eb36c8cefcc5530638a05"}, {"sha": "a82692d6134b228c9d09396ce5e7e58d680e6d4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a82692d6134b228c9d09396ce5e7e58d680e6d4f", "html_url": "https://github.com/rust-lang/rust/commit/a82692d6134b228c9d09396ce5e7e58d680e6d4f"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "3ed434131b292ca5920cfea7a223be4704ec66cb", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5", "patch": "@@ -443,9 +443,7 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n     /// expands it.\n     fn push(&mut self, row: PatStack<'p, 'tcx>) {\n         if !row.is_empty() && row.head().is_or_pat() {\n-            for row in row.expand_or_pat() {\n-                self.patterns.push(row);\n-            }\n+            self.patterns.extend(row.expand_or_pat());\n         } else {\n             self.patterns.push(row);\n         }"}, {"sha": "896c25436086561c75ba8c6b5938b797603efc7a", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=f31622a50b06e4e5775cf71d1dfe3e59ffc21aa5", "patch": "@@ -26,7 +26,6 @@ crate enum ExternalLocation {\n /// Builds the search index from the collected metadata\n crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<'tcx>) -> String {\n     let mut defid_to_pathid = FxHashMap::default();\n-    let mut crate_items = Vec::with_capacity(cache.search_index.len());\n     let mut crate_paths = vec![];\n \n     // Attach all orphan items to the type's definition if the type\n@@ -77,34 +76,38 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n \n     // Reduce `DefId` in paths into smaller sequential numbers,\n     // and prune the paths that do not appear in the index.\n-    let mut lastpath = String::new();\n+    let mut lastpath = \"\";\n     let mut lastpathid = 0usize;\n \n-    for item in search_index {\n-        item.parent_idx = item.parent.and_then(|defid| match defid_to_pathid.entry(defid) {\n-            Entry::Occupied(entry) => Some(*entry.get()),\n-            Entry::Vacant(entry) => {\n-                let pathid = lastpathid;\n-                entry.insert(pathid);\n-                lastpathid += 1;\n+    let crate_items: Vec<&IndexItem> = search_index\n+        .iter_mut()\n+        .map(|item| {\n+            item.parent_idx = item.parent.and_then(|defid| match defid_to_pathid.entry(defid) {\n+                Entry::Occupied(entry) => Some(*entry.get()),\n+                Entry::Vacant(entry) => {\n+                    let pathid = lastpathid;\n+                    entry.insert(pathid);\n+                    lastpathid += 1;\n \n-                if let Some(&(ref fqp, short)) = paths.get(&defid) {\n-                    crate_paths.push((short, fqp.last().unwrap().clone()));\n-                    Some(pathid)\n-                } else {\n-                    None\n+                    if let Some(&(ref fqp, short)) = paths.get(&defid) {\n+                        crate_paths.push((short, fqp.last().unwrap().clone()));\n+                        Some(pathid)\n+                    } else {\n+                        None\n+                    }\n                 }\n+            });\n+\n+            // Omit the parent path if it is same to that of the prior item.\n+            if lastpath == &item.path {\n+                item.path.clear();\n+            } else {\n+                lastpath = &item.path;\n             }\n-        });\n \n-        // Omit the parent path if it is same to that of the prior item.\n-        if lastpath == item.path {\n-            item.path.clear();\n-        } else {\n-            lastpath = item.path.clone();\n-        }\n-        crate_items.push(&*item);\n-    }\n+            &*item\n+        })\n+        .collect();\n \n     struct CrateData<'a> {\n         doc: String,"}]}