{"sha": "5f713da4aa07a722bfb7d704aa0a91c111700dda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNzEzZGE0YWEwN2E3MjJiZmI3ZDcwNGFhMGE5MWMxMTE3MDBkZGE=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-06T02:28:20Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-06T05:49:33Z"}, "message": "Add std::num::Saturating\n\nSaturating is an implementation of saturating math operations (at the\nmoment just add and sub) for integral types.", "tree": {"sha": "9c938123a669c576526735e6e2daa586d70143dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c938123a669c576526735e6e2daa586d70143dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f713da4aa07a722bfb7d704aa0a91c111700dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f713da4aa07a722bfb7d704aa0a91c111700dda", "html_url": "https://github.com/rust-lang/rust/commit/5f713da4aa07a722bfb7d704aa0a91c111700dda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f713da4aa07a722bfb7d704aa0a91c111700dda/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8b299d179653cbde783f62f70b5531dbaa5c5a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b299d179653cbde783f62f70b5531dbaa5c5a6", "html_url": "https://github.com/rust-lang/rust/commit/d8b299d179653cbde783f62f70b5531dbaa5c5a6"}], "stats": {"total": 217, "additions": 157, "deletions": 60}, "files": [{"sha": "bbadf1caca2413c4570460ac9040d28cc1940554", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 157, "deletions": 60, "changes": 217, "blob_url": "https://github.com/rust-lang/rust/blob/5f713da4aa07a722bfb7d704aa0a91c111700dda/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f713da4aa07a722bfb7d704aa0a91c111700dda/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=5f713da4aa07a722bfb7d704aa0a91c111700dda", "patch": "@@ -466,6 +466,56 @@ impl<T: Zero> Zero for ~T {\n     fn is_zero(&self) -> bool { (**self).is_zero() }\n }\n \n+/// Saturating math operations\n+pub trait Saturating: Int {\n+    /// Saturating addition operator.\n+    /// Returns a+b, saturating at the numeric bounds instead of overflowing.\n+    #[inline]\n+    fn saturating_add(self, v: Self) -> Self {\n+        let x = self + v;\n+        if v >= Zero::zero() {\n+            if x < self {\n+                // overflow\n+                Bounded::max_value::<Self>()\n+            } else { x }\n+        } else {\n+            if x > self {\n+                // underflow\n+                Bounded::min_value::<Self>()\n+            } else { x }\n+        }\n+    }\n+\n+    /// Saturating subtraction operator.\n+    /// Returns a-b, saturating at the numeric bounds instead of overflowing.\n+    #[inline]\n+    fn saturating_sub(self, v: Self) -> Self {\n+        let x = self - v;\n+        if v >= Zero::zero() {\n+            if x > self {\n+                // underflow\n+                Bounded::min_value::<Self>()\n+            } else { x }\n+        } else {\n+            if x < self {\n+                // overflow\n+                Bounded::max_value::<Self>()\n+            } else { x }\n+        }\n+    }\n+}\n+\n+impl Saturating for int {}\n+impl Saturating for i8 {}\n+impl Saturating for i16 {}\n+impl Saturating for i32 {}\n+impl Saturating for i64 {}\n+impl Saturating for uint {}\n+impl Saturating for u8 {}\n+impl Saturating for u16 {}\n+impl Saturating for u32 {}\n+impl Saturating for u64 {}\n+\n /// Helper function for testing numeric operations\n #[cfg(test)]\n pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n@@ -482,64 +532,111 @@ pub fn test_num<T:Num + NumCast>(ten: T, two: T) {\n     assert_eq!(ten.rem(&two),  ten % two);\n }\n \n-macro_rules! test_cast_20(\n-    ($_20:expr) => ({\n-        let _20 = $_20;\n-\n-        assert_eq!(20u,   _20.to_uint());\n-        assert_eq!(20u8,  _20.to_u8());\n-        assert_eq!(20u16, _20.to_u16());\n-        assert_eq!(20u32, _20.to_u32());\n-        assert_eq!(20u64, _20.to_u64());\n-        assert_eq!(20i,   _20.to_int());\n-        assert_eq!(20i8,  _20.to_i8());\n-        assert_eq!(20i16, _20.to_i16());\n-        assert_eq!(20i32, _20.to_i32());\n-        assert_eq!(20i64, _20.to_i64());\n-        assert_eq!(20f,   _20.to_float());\n-        assert_eq!(20f32, _20.to_f32());\n-        assert_eq!(20f64, _20.to_f64());\n-\n-        assert_eq!(_20, NumCast::from(20u));\n-        assert_eq!(_20, NumCast::from(20u8));\n-        assert_eq!(_20, NumCast::from(20u16));\n-        assert_eq!(_20, NumCast::from(20u32));\n-        assert_eq!(_20, NumCast::from(20u64));\n-        assert_eq!(_20, NumCast::from(20i));\n-        assert_eq!(_20, NumCast::from(20i8));\n-        assert_eq!(_20, NumCast::from(20i16));\n-        assert_eq!(_20, NumCast::from(20i32));\n-        assert_eq!(_20, NumCast::from(20i64));\n-        assert_eq!(_20, NumCast::from(20f));\n-        assert_eq!(_20, NumCast::from(20f32));\n-        assert_eq!(_20, NumCast::from(20f64));\n-\n-        assert_eq!(_20, cast(20u));\n-        assert_eq!(_20, cast(20u8));\n-        assert_eq!(_20, cast(20u16));\n-        assert_eq!(_20, cast(20u32));\n-        assert_eq!(_20, cast(20u64));\n-        assert_eq!(_20, cast(20i));\n-        assert_eq!(_20, cast(20i8));\n-        assert_eq!(_20, cast(20i16));\n-        assert_eq!(_20, cast(20i32));\n-        assert_eq!(_20, cast(20i64));\n-        assert_eq!(_20, cast(20f));\n-        assert_eq!(_20, cast(20f32));\n-        assert_eq!(_20, cast(20f64));\n-    })\n-)\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    macro_rules! test_cast_20(\n+        ($_20:expr) => ({\n+            let _20 = $_20;\n+\n+            assert_eq!(20u,   _20.to_uint());\n+            assert_eq!(20u8,  _20.to_u8());\n+            assert_eq!(20u16, _20.to_u16());\n+            assert_eq!(20u32, _20.to_u32());\n+            assert_eq!(20u64, _20.to_u64());\n+            assert_eq!(20i,   _20.to_int());\n+            assert_eq!(20i8,  _20.to_i8());\n+            assert_eq!(20i16, _20.to_i16());\n+            assert_eq!(20i32, _20.to_i32());\n+            assert_eq!(20i64, _20.to_i64());\n+            assert_eq!(20f,   _20.to_float());\n+            assert_eq!(20f32, _20.to_f32());\n+            assert_eq!(20f64, _20.to_f64());\n+\n+            assert_eq!(_20, NumCast::from(20u));\n+            assert_eq!(_20, NumCast::from(20u8));\n+            assert_eq!(_20, NumCast::from(20u16));\n+            assert_eq!(_20, NumCast::from(20u32));\n+            assert_eq!(_20, NumCast::from(20u64));\n+            assert_eq!(_20, NumCast::from(20i));\n+            assert_eq!(_20, NumCast::from(20i8));\n+            assert_eq!(_20, NumCast::from(20i16));\n+            assert_eq!(_20, NumCast::from(20i32));\n+            assert_eq!(_20, NumCast::from(20i64));\n+            assert_eq!(_20, NumCast::from(20f));\n+            assert_eq!(_20, NumCast::from(20f32));\n+            assert_eq!(_20, NumCast::from(20f64));\n+\n+            assert_eq!(_20, cast(20u));\n+            assert_eq!(_20, cast(20u8));\n+            assert_eq!(_20, cast(20u16));\n+            assert_eq!(_20, cast(20u32));\n+            assert_eq!(_20, cast(20u64));\n+            assert_eq!(_20, cast(20i));\n+            assert_eq!(_20, cast(20i8));\n+            assert_eq!(_20, cast(20i16));\n+            assert_eq!(_20, cast(20i32));\n+            assert_eq!(_20, cast(20i64));\n+            assert_eq!(_20, cast(20f));\n+            assert_eq!(_20, cast(20f32));\n+            assert_eq!(_20, cast(20f64));\n+        })\n+    )\n+\n+    #[test] fn test_u8_cast()    { test_cast_20!(20u8)  }\n+    #[test] fn test_u16_cast()   { test_cast_20!(20u16) }\n+    #[test] fn test_u32_cast()   { test_cast_20!(20u32) }\n+    #[test] fn test_u64_cast()   { test_cast_20!(20u64) }\n+    #[test] fn test_uint_cast()  { test_cast_20!(20u)   }\n+    #[test] fn test_i8_cast()    { test_cast_20!(20i8)  }\n+    #[test] fn test_i16_cast()   { test_cast_20!(20i16) }\n+    #[test] fn test_i32_cast()   { test_cast_20!(20i32) }\n+    #[test] fn test_i64_cast()   { test_cast_20!(20i64) }\n+    #[test] fn test_int_cast()   { test_cast_20!(20i)   }\n+    #[test] fn test_f32_cast()   { test_cast_20!(20f32) }\n+    #[test] fn test_f64_cast()   { test_cast_20!(20f64) }\n+    #[test] fn test_float_cast() { test_cast_20!(20f)   }\n+\n+    #[test]\n+    fn test_saturating_add_uint() {\n+        use uint::max_value;\n+        assert_eq!(3u.saturating_add(5u), 8u);\n+        assert_eq!(3u.saturating_add(max_value-1), max_value);\n+        assert_eq!(max_value.saturating_add(max_value), max_value);\n+        assert_eq!((max_value-2).saturating_add(1), max_value-1);\n+    }\n+\n+    #[test]\n+    fn test_saturating_sub_uint() {\n+        use uint::max_value;\n+        assert_eq!(5u.saturating_sub(3u), 2u);\n+        assert_eq!(3u.saturating_sub(5u), 0u);\n+        assert_eq!(0u.saturating_sub(1u), 0u);\n+        assert_eq!((max_value-1).saturating_sub(max_value), 0);\n+    }\n \n-#[test] fn test_u8_cast()    { test_cast_20!(20u8)  }\n-#[test] fn test_u16_cast()   { test_cast_20!(20u16) }\n-#[test] fn test_u32_cast()   { test_cast_20!(20u32) }\n-#[test] fn test_u64_cast()   { test_cast_20!(20u64) }\n-#[test] fn test_uint_cast()  { test_cast_20!(20u)   }\n-#[test] fn test_i8_cast()    { test_cast_20!(20i8)  }\n-#[test] fn test_i16_cast()   { test_cast_20!(20i16) }\n-#[test] fn test_i32_cast()   { test_cast_20!(20i32) }\n-#[test] fn test_i64_cast()   { test_cast_20!(20i64) }\n-#[test] fn test_int_cast()   { test_cast_20!(20i)   }\n-#[test] fn test_f32_cast()   { test_cast_20!(20f32) }\n-#[test] fn test_f64_cast()   { test_cast_20!(20f64) }\n-#[test] fn test_float_cast() { test_cast_20!(20f)   }\n+    #[test]\n+    fn test_saturating_add_int() {\n+        use int::{min_value,max_value};\n+        assert_eq!(3i.saturating_add(5i), 8i);\n+        assert_eq!(3i.saturating_add(max_value-1), max_value);\n+        assert_eq!(max_value.saturating_add(max_value), max_value);\n+        assert_eq!((max_value-2).saturating_add(1), max_value-1);\n+        assert_eq!(3i.saturating_add(-5i), -2i);\n+        assert_eq!(min_value.saturating_add(-1i), min_value);\n+        assert_eq!((-2i).saturating_add(-max_value), min_value);\n+    }\n+\n+    #[test]\n+    fn test_saturating_sub_int() {\n+        use int::{min_value,max_value};\n+        assert_eq!(3i.saturating_sub(5i), -2i);\n+        assert_eq!(min_value.saturating_sub(1i), min_value);\n+        assert_eq!((-2i).saturating_sub(max_value), min_value);\n+        assert_eq!(3i.saturating_sub(-5i), 8i);\n+        assert_eq!(3i.saturating_sub(-(max_value-1)), max_value);\n+        assert_eq!(max_value.saturating_sub(-max_value), max_value);\n+        assert_eq!((max_value-2).saturating_sub(-1), max_value-1);\n+    }\n+}"}]}