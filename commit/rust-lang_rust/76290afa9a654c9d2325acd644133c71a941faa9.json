{"sha": "76290afa9a654c9d2325acd644133c71a941faa9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2MjkwYWZhOWE2NTRjOWQyMzI1YWNkNjQ0MTMzYzcxYTk0MWZhYTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-22T20:39:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-09-22T20:39:29Z"}, "message": "minor cleanup", "tree": {"sha": "6f240323481135f996b4d49dbabc06b08a2de5fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f240323481135f996b4d49dbabc06b08a2de5fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76290afa9a654c9d2325acd644133c71a941faa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76290afa9a654c9d2325acd644133c71a941faa9", "html_url": "https://github.com/rust-lang/rust/commit/76290afa9a654c9d2325acd644133c71a941faa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76290afa9a654c9d2325acd644133c71a941faa9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "468e1d14c1a4b3d646207ae919082dc17753cd31", "url": "https://api.github.com/repos/rust-lang/rust/commits/468e1d14c1a4b3d646207ae919082dc17753cd31", "html_url": "https://github.com/rust-lang/rust/commit/468e1d14c1a4b3d646207ae919082dc17753cd31"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "a0904323cbb4949446314089581e7b2307fa37c8", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76290afa9a654c9d2325acd644133c71a941faa9/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76290afa9a654c9d2325acd644133c71a941faa9/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=76290afa9a654c9d2325acd644133c71a941faa9", "patch": "@@ -52,6 +52,9 @@ pub(crate) struct Rule {\n \n impl MacroRules {\n     pub fn parse(tt: &tt::Subtree) -> Result<MacroRules, ParseError> {\n+        // Note: this parsing can be implemented using mbe machinery itself, by\n+        // matching against `$($lhs:tt => $rhs:tt);*` pattern, but implementing\n+        // manually seems easier.\n         let mut src = TtIter::new(tt);\n         let mut rules = Vec::new();\n         while src.len() > 0 {\n@@ -64,6 +67,11 @@ impl MacroRules {\n                 break;\n             }\n         }\n+\n+        for rule in rules.iter() {\n+            validate(&rule.lhs)?;\n+        }\n+\n         Ok(MacroRules { rules })\n     }\n     pub fn expand(&self, tt: &tt::Subtree) -> Result<tt::Subtree, ExpandError> {\n@@ -77,7 +85,6 @@ impl Rule {\n             .expect_subtree()\n             .map_err(|()| ParseError::Expected(\"expected subtree\".to_string()))?\n             .clone();\n-        validate(&lhs)?;\n         lhs.delimiter = tt::Delimiter::None;\n         src.expect_char('=').map_err(|()| ParseError::Expected(\"expected `=`\".to_string()))?;\n         src.expect_char('>').map_err(|()| ParseError::Expected(\"expected `>`\".to_string()))?;"}]}