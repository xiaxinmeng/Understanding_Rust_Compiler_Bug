{"sha": "6950f68870e73251c86f559dbf050ce197a24695", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NTBmNjg4NzBlNzMyNTFjODZmNTU5ZGJmMDUwY2UxOTdhMjQ2OTU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-07T19:20:24Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-04-08T00:54:34Z"}, "message": "rustdoc: Simplify predicates with paren notation\n\nThis change is aimed at improving cross-crate (inlined) notation of generic\nclosures. The change modifies `simplify::where_predicates` to handle\nparenthesized notation as well as starting to handle supertrait bounds as well.\nThis was necessary because all output constraints of closures are bound to\n`FnOnce` but most trait bounds are that of `FnMut`.\n\nClose #21801", "tree": {"sha": "082f558e1129ecdb28aedb0a6990f85e0ae11d55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/082f558e1129ecdb28aedb0a6990f85e0ae11d55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6950f68870e73251c86f559dbf050ce197a24695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6950f68870e73251c86f559dbf050ce197a24695", "html_url": "https://github.com/rust-lang/rust/commit/6950f68870e73251c86f559dbf050ce197a24695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6950f68870e73251c86f559dbf050ce197a24695/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7fcee8347dd9dc7e51bff55291f928d0cb0b2e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7fcee8347dd9dc7e51bff55291f928d0cb0b2e7", "html_url": "https://github.com/rust-lang/rust/commit/d7fcee8347dd9dc7e51bff55291f928d0cb0b2e7"}], "stats": {"total": 103, "additions": 91, "deletions": 12}, "files": [{"sha": "6c243a5d795ec9a58077d7f50684faaa001cddfd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6950f68870e73251c86f559dbf050ce197a24695/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f68870e73251c86f559dbf050ce197a24695/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6950f68870e73251c86f559dbf050ce197a24695", "patch": "@@ -958,7 +958,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n         Generics {\n             type_params: simplify::ty_params(stripped_typarams),\n             lifetimes: stripped_lifetimes,\n-            where_predicates: simplify::where_clauses(where_predicates),\n+            where_predicates: simplify::where_clauses(cx, where_predicates),\n         }\n     }\n }"}, {"sha": "03f056a69232ed5d30a6ea8c77e6a87e95150deb", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6950f68870e73251c86f559dbf050ce197a24695/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f68870e73251c86f559dbf050ce197a24695/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=6950f68870e73251c86f559dbf050ce197a24695", "patch": "@@ -29,11 +29,16 @@\n use std::mem;\n use std::collections::HashMap;\n \n-use clean;\n-use clean::WherePredicate as WP;\n+use rustc::middle::subst;\n+use rustc::middle::ty;\n+use syntax::ast;\n+\n use clean::PathParameters as PP;\n+use clean::WherePredicate as WP;\n+use clean::{self, Clean};\n+use core::DocContext;\n \n-pub fn where_clauses(clauses: Vec<WP>) -> Vec<WP> {\n+pub fn where_clauses(cx: &DocContext, clauses: Vec<WP>) -> Vec<WP> {\n     // First, partition the where clause into its separate components\n     let mut params = HashMap::new();\n     let mut lifetimes = Vec::new();\n@@ -90,16 +95,25 @@ pub fn where_clauses(clauses: Vec<WP>) -> Vec<WP> {\n                 clean::ResolvedPath { did, ref mut path, ..} => (did, path),\n                 _ => return false,\n             };\n-            if did != trait_did { return false }\n+            // If this QPath's trait `trait_did` is the same as, or a supertrait\n+            // of, the bound's trait `did` then we can keep going, otherwise\n+            // this is just a plain old equality bound.\n+            if !trait_is_same_or_supertrait(cx, did, trait_did) {\n+                return false\n+            }\n             let last = path.segments.last_mut().unwrap();\n-            let bindings = match last.params {\n-                PP::AngleBracketed { ref mut bindings, .. } => bindings,\n-                PP::Parenthesized { .. } => return false,\n+            match last.params {\n+                PP::AngleBracketed { ref mut bindings, .. } => {\n+                    bindings.push(clean::TypeBinding {\n+                        name: name.clone(),\n+                        ty: rhs.clone(),\n+                    });\n+                }\n+                PP::Parenthesized { ref mut output, .. } => {\n+                    assert!(output.is_none());\n+                    *output = Some(rhs.clone());\n+                }\n             };\n-            bindings.push(clean::TypeBinding {\n-                name: name.clone(),\n-                ty: rhs.clone(),\n-            });\n             true\n         })\n     });\n@@ -134,3 +148,33 @@ pub fn ty_params(mut params: Vec<clean::TyParam>) -> Vec<clean::TyParam> {\n fn ty_bounds(bounds: Vec<clean::TyParamBound>) -> Vec<clean::TyParamBound> {\n     bounds\n }\n+\n+fn trait_is_same_or_supertrait(cx: &DocContext, child: ast::DefId,\n+                               trait_: ast::DefId) -> bool {\n+    if child == trait_ {\n+        return true\n+    }\n+    let def = ty::lookup_trait_def(cx.tcx(), child);\n+    let predicates = ty::lookup_predicates(cx.tcx(), child);\n+    let generics = (&def.generics, &predicates, subst::TypeSpace).clean(cx);\n+    generics.where_predicates.iter().filter_map(|pred| {\n+        match *pred {\n+            clean::WherePredicate::BoundPredicate {\n+                ty: clean::Generic(ref s),\n+                ref bounds\n+            } if *s == \"Self\" => Some(bounds),\n+            _ => None,\n+        }\n+    }).flat_map(|bounds| bounds.iter()).any(|bound| {\n+        let poly_trait = match *bound {\n+            clean::TraitBound(ref t, _) => t,\n+            _ => return false,\n+        };\n+        match poly_trait.trait_ {\n+            clean::ResolvedPath { did, .. } => {\n+                trait_is_same_or_supertrait(cx, did, trait_)\n+            }\n+            _ => false,\n+        }\n+    })\n+}"}, {"sha": "ada6c6925025de6c81e1f403ea1a28bab0b577c4", "filename": "src/test/auxiliary/issue-21801.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6950f68870e73251c86f559dbf050ce197a24695/src%2Ftest%2Fauxiliary%2Fissue-21801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f68870e73251c86f559dbf050ce197a24695/src%2Ftest%2Fauxiliary%2Fissue-21801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-21801.rs?ref=6950f68870e73251c86f559dbf050ce197a24695", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo;\n+\n+impl Foo {\n+    pub fn new<F>(f: F) -> Foo where F: FnMut() -> i32 {\n+        loop {}\n+    }\n+}"}, {"sha": "00b46638b299c0e93f95b834d09eb1e50e5886f9", "filename": "src/test/rustdoc/issue-21801.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6950f68870e73251c86f559dbf050ce197a24695/src%2Ftest%2Frustdoc%2Fissue-21801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6950f68870e73251c86f559dbf050ce197a24695/src%2Ftest%2Frustdoc%2Fissue-21801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21801.rs?ref=6950f68870e73251c86f559dbf050ce197a24695", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-21801.rs\n+\n+extern crate issue_21801;\n+\n+// @has issue_21801/struct.Foo.html\n+// @has - '//*[@id=\"method.new\"]' \\\n+//        'fn new<F>(f: F) -> Foo where F: FnMut() -> i32'\n+pub use issue_21801::Foo;"}]}