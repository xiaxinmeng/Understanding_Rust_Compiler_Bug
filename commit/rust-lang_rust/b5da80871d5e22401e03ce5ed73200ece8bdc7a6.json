{"sha": "b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "node_id": "C_kwDOAAsO6NoAKGI1ZGE4MDg3MWQ1ZTIyNDAxZTAzY2U1ZWQ3MzIwMGVjZThiZGM3YTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-03T03:49:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-03T03:49:01Z"}, "message": "Auto merge of #92395 - Kobzol:rustdoc-bindings-thin-vec, r=camelid\n\nRustdoc: use ThinVec for GenericArgs bindings\n\nThe bindings are almost always empty. This reduces the size of `PathSegment` and `GenericArgs` by about one fourth.", "tree": {"sha": "9b97e7463597eab896f2db39b9c39413b97aa6a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b97e7463597eab896f2db39b9c39413b97aa6a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "html_url": "https://github.com/rust-lang/rust/commit/b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3238f898163f09726c3d2b2cc9bafb09da26f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3238f898163f09726c3d2b2cc9bafb09da26f3", "html_url": "https://github.com/rust-lang/rust/commit/8f3238f898163f09726c3d2b2cc9bafb09da26f3"}, {"sha": "3d8d3f14356c0bc4d8759dfd59aa4b2b4a104dc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d8d3f14356c0bc4d8759dfd59aa4b2b4a104dc1", "html_url": "https://github.com/rust-lang/rust/commit/3d8d3f14356c0bc4d8759dfd59aa4b2b4a104dc1"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "716259142d18b22062149c4faa2c58de3c0966b6", "filename": "compiler/rustc_data_structures/src/thin_vec.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fthin_vec.rs?ref=b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "patch": "@@ -5,7 +5,7 @@ use std::iter::FromIterator;\n /// A vector type optimized for cases where this size is usually 0 (cf. `SmallVec`).\n /// The `Option<Box<..>>` wrapping allows us to represent a zero sized vector with `None`,\n /// which uses only a single (null) pointer.\n-#[derive(Clone, Encodable, Decodable, Debug)]\n+#[derive(Clone, Encodable, Decodable, Debug, Hash, Eq, PartialEq)]\n pub struct ThinVec<T>(Option<Box<Vec<T>>>);\n \n impl<T> ThinVec<T> {\n@@ -20,6 +20,13 @@ impl<T> ThinVec<T> {\n     pub fn iter_mut(&mut self) -> std::slice::IterMut<'_, T> {\n         self.into_iter()\n     }\n+\n+    pub fn push(&mut self, item: T) {\n+        match *self {\n+            ThinVec(Some(ref mut vec)) => vec.push(item),\n+            ThinVec(None) => *self = vec![item].into(),\n+        }\n+    }\n }\n \n impl<T> From<Vec<T>> for ThinVec<T> {\n@@ -101,10 +108,7 @@ impl<T> Extend<T> for ThinVec<T> {\n     }\n \n     fn extend_one(&mut self, item: T) {\n-        match *self {\n-            ThinVec(Some(ref mut vec)) => vec.push(item),\n-            ThinVec(None) => *self = vec![item].into(),\n-        }\n+        self.push(item)\n     }\n \n     fn extend_reserve(&mut self, additional: usize) {"}, {"sha": "ce0ac322af914e87d69937853950faf7b9f9e9f4", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "patch": "@@ -5,6 +5,7 @@ use std::sync::Arc;\n \n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -540,7 +541,7 @@ fn build_module(\n                                     name: prim_ty.as_sym(),\n                                     args: clean::GenericArgs::AngleBracketed {\n                                         args: Vec::new(),\n-                                        bindings: Vec::new(),\n+                                        bindings: ThinVec::new(),\n                                     },\n                                 }],\n                             },"}, {"sha": "2ee5de24687f17a7aad370987d16abb1f49cbb65", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "patch": "@@ -2060,14 +2060,14 @@ rustc_data_structures::static_assert_size!(GenericArg, 80);\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate enum GenericArgs {\n-    AngleBracketed { args: Vec<GenericArg>, bindings: Vec<TypeBinding> },\n+    AngleBracketed { args: Vec<GenericArg>, bindings: ThinVec<TypeBinding> },\n     Parenthesized { inputs: Vec<Type>, output: Option<Box<Type>> },\n }\n \n // `GenericArgs` is in every `PathSegment`, so its size can significantly\n // affect rustdoc's memory usage.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(GenericArgs, 56);\n+rustc_data_structures::static_assert_size!(GenericArgs, 40);\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n crate struct PathSegment {\n@@ -2078,7 +2078,7 @@ crate struct PathSegment {\n // `PathSegment` usually occurs multiple times in every `Path`, so its size can\n // significantly affect rustdoc's memory usage.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(PathSegment, 64);\n+rustc_data_structures::static_assert_size!(PathSegment, 48);\n \n #[derive(Clone, Debug)]\n crate struct Typedef {"}, {"sha": "43dcb611a377df1a0c75196f4565717b80ff7612", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=b5da80871d5e22401e03ce5ed73200ece8bdc7a6", "patch": "@@ -10,6 +10,7 @@ use crate::visit_lib::LibEmbargoVisitor;\n \n use rustc_ast as ast;\n use rustc_ast::tokenstream::TokenTree;\n+use rustc_data_structures::thin_vec::ThinVec;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -108,7 +109,7 @@ fn external_generic_args(\n     if cx.tcx.fn_trait_kind_from_lang_item(did).is_some() {\n         let inputs = match ty_kind.unwrap() {\n             ty::Tuple(tys) => tys.iter().map(|t| t.expect_ty().clean(cx)).collect(),\n-            _ => return GenericArgs::AngleBracketed { args, bindings },\n+            _ => return GenericArgs::AngleBracketed { args, bindings: bindings.into() },\n         };\n         let output = None;\n         // FIXME(#20299) return type comes from a projection now\n@@ -118,7 +119,7 @@ fn external_generic_args(\n         // };\n         GenericArgs::Parenthesized { inputs, output }\n     } else {\n-        GenericArgs::AngleBracketed { args, bindings }\n+        GenericArgs::AngleBracketed { args, bindings: bindings.into() }\n     }\n }\n \n@@ -143,7 +144,7 @@ pub(super) fn external_path(\n /// Remove the generic arguments from a path.\n crate fn strip_path_generics(mut path: Path) -> Path {\n     for ps in path.segments.iter_mut() {\n-        ps.args = GenericArgs::AngleBracketed { args: vec![], bindings: vec![] }\n+        ps.args = GenericArgs::AngleBracketed { args: vec![], bindings: ThinVec::new() }\n     }\n \n     path"}]}