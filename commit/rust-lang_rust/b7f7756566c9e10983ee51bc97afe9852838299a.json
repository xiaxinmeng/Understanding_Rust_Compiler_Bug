{"sha": "b7f7756566c9e10983ee51bc97afe9852838299a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Zjc3NTY1NjZjOWUxMDk4M2VlNTFiYzk3YWZlOTg1MjgzODI5OWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-08T19:31:24Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T14:18:05Z"}, "message": "Recover parser from `foo(_, _)`", "tree": {"sha": "1a371389c259b917e2d96e45df3c7650b1f5465b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a371389c259b917e2d96e45df3c7650b1f5465b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7f7756566c9e10983ee51bc97afe9852838299a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f7756566c9e10983ee51bc97afe9852838299a", "html_url": "https://github.com/rust-lang/rust/commit/b7f7756566c9e10983ee51bc97afe9852838299a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7f7756566c9e10983ee51bc97afe9852838299a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195d837f18e2efb7d621d6568212a59c29fc184e", "url": "https://api.github.com/repos/rust-lang/rust/commits/195d837f18e2efb7d621d6568212a59c29fc184e", "html_url": "https://github.com/rust-lang/rust/commit/195d837f18e2efb7d621d6568212a59c29fc184e"}], "stats": {"total": 138, "additions": 116, "deletions": 22}, "files": [{"sha": "30e16592113b623a4b0d62d901b57b5234807979", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b7f7756566c9e10983ee51bc97afe9852838299a", "patch": "@@ -2052,9 +2052,23 @@ impl<'a> Parser<'a> {\n                 while self.token != token::CloseDelim(token::Paren) {\n                     es.push(match self.parse_expr() {\n                         Ok(es) => es,\n-                        Err(err) => {\n+                        Err(mut err) => {\n                             // recover from parse error in tuple list\n-                            return Ok(self.recover_seq_parse_error(token::Paren, lo, Err(err)));\n+                            match self.token.kind {\n+                                token::Ident(name, false)\n+                                if name == kw::Underscore && self.look_ahead(1, |t| {\n+                                    t == &token::Comma\n+                                }) => {\n+                                    // Special-case handling of `Foo<(_, _, _)>`\n+                                    err.emit();\n+                                    let sp = self.token.span;\n+                                    self.bump();\n+                                    self.mk_expr(sp, ExprKind::Err, ThinVec::new())\n+                                }\n+                                _ => return Ok(\n+                                    self.recover_seq_parse_error(token::Paren, lo, Err(err)),\n+                                ),\n+                            }\n                         }\n                     });\n                     recovered = self.expect_one_of(\n@@ -2456,37 +2470,35 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses `a.b` or `a(13)` or `a[4]` or just `a`.\n-    fn parse_dot_or_call_expr(&mut self,\n-                                  already_parsed_attrs: Option<ThinVec<Attribute>>)\n-                                  -> PResult<'a, P<Expr>> {\n+    fn parse_dot_or_call_expr(\n+        &mut self,\n+        already_parsed_attrs: Option<ThinVec<Attribute>>,\n+    ) -> PResult<'a, P<Expr>> {\n         let attrs = self.parse_or_use_outer_attributes(already_parsed_attrs)?;\n \n         let b = self.parse_bottom_expr();\n         let (span, b) = self.interpolated_or_expr_span(b)?;\n         self.parse_dot_or_call_expr_with(b, span, attrs)\n     }\n \n-    fn parse_dot_or_call_expr_with(&mut self,\n-                                       e0: P<Expr>,\n-                                       lo: Span,\n-                                       mut attrs: ThinVec<Attribute>)\n-                                       -> PResult<'a, P<Expr>> {\n+    fn parse_dot_or_call_expr_with(\n+        &mut self,\n+        e0: P<Expr>,\n+        lo: Span,\n+        mut attrs: ThinVec<Attribute>,\n+    ) -> PResult<'a, P<Expr>> {\n         // Stitch the list of outer attributes onto the return value.\n         // A little bit ugly, but the best way given the current code\n         // structure\n-        self.parse_dot_or_call_expr_with_(e0, lo)\n-        .map(|expr|\n+        self.parse_dot_or_call_expr_with_(e0, lo).map(|expr|\n             expr.map(|mut expr| {\n                 attrs.extend::<Vec<_>>(expr.attrs.into());\n                 expr.attrs = attrs;\n                 match expr.node {\n                     ExprKind::If(..) if !expr.attrs.is_empty() => {\n                         // Just point to the first attribute in there...\n                         let span = expr.attrs[0].span;\n-\n-                        self.span_err(span,\n-                            \"attributes are not yet allowed on `if` \\\n-                            expressions\");\n+                        self.span_err(span, \"attributes are not yet allowed on `if` expressions\");\n                     }\n                     _ => {}\n                 }\n@@ -2624,7 +2636,24 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_paren_expr_seq(&mut self) -> PResult<'a, Vec<P<Expr>>> {\n-        self.parse_paren_comma_seq(|p| p.parse_expr()).map(|(r, _)| r)\n+        self.parse_paren_comma_seq(|p| {\n+            match p.parse_expr() {\n+                Ok(expr) => Ok(expr),\n+                Err(mut err) => match p.token.kind {\n+                    token::Ident(name, false)\n+                    if name == kw::Underscore && p.look_ahead(1, |t| {\n+                        t == &token::Comma\n+                    }) => {\n+                        // Special-case handling of `foo(_, _, _)`\n+                        err.emit();\n+                        let sp = p.token.span;\n+                        p.bump();\n+                        Ok(p.mk_expr(sp, ExprKind::Err, ThinVec::new()))\n+                    }\n+                    _ => Err(err),\n+                },\n+            }\n+        }).map(|(r, _)| r)\n     }\n \n     crate fn process_potential_macro_variable(&mut self) {\n@@ -2806,9 +2835,10 @@ impl<'a> Parser<'a> {\n     /// This parses an expression accounting for associativity and precedence of the operators in\n     /// the expression.\n     #[inline]\n-    fn parse_assoc_expr(&mut self,\n-                            already_parsed_attrs: Option<ThinVec<Attribute>>)\n-                            -> PResult<'a, P<Expr>> {\n+    fn parse_assoc_expr(\n+        &mut self,\n+        already_parsed_attrs: Option<ThinVec<Attribute>>,\n+    ) -> PResult<'a, P<Expr>> {\n         self.parse_assoc_expr_with(0, already_parsed_attrs.into())\n     }\n "}, {"sha": "4457d71cbb4a7b132df872e73bf31f5ba56cecf7", "filename": "src/test/ui/issues/issue-34334.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.rs?ref=b7f7756566c9e10983ee51bc97afe9852838299a", "patch": "@@ -5,6 +5,7 @@ fn main () {\n     //~| ERROR mismatched types\n     //~| ERROR invalid left-hand side expression\n     //~| ERROR expected expression, found reserved identifier `_`\n+    //~| ERROR expected expression, found reserved identifier `_`\n     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n     //~^ ERROR no method named `iter` found for type `()` in the current scope\n }"}, {"sha": "7f89caf92abe14a0ed945dbe611a50b7c7435328", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=b7f7756566c9e10983ee51bc97afe9852838299a", "patch": "@@ -4,6 +4,12 @@ error: expected expression, found reserved identifier `_`\n LL |     let sr: Vec<(u32, _, _) = vec![];\n    |                       ^ expected expression\n \n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/issue-34334.rs:2:26\n+   |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |                          ^ expected expression\n+\n error: expected one of `,` or `>`, found `=`\n   --> $DIR/issue-34334.rs:2:29\n    |\n@@ -36,12 +42,12 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ left-hand of expression not valid\n \n error[E0599]: no method named `iter` found for type `()` in the current scope\n-  --> $DIR/issue-34334.rs:8:36\n+  --> $DIR/issue-34334.rs:9:36\n    |\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n    |                                    ^^^^\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors have detailed explanations: E0070, E0308, E0423, E0599.\n For more information about an error, try `rustc --explain E0070`."}, {"sha": "a8ea3faefe876a12a5659691b5a542a58e9b5c4a", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-with-underscore-args.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.rs?ref=b7f7756566c9e10983ee51bc97afe9852838299a", "patch": "@@ -0,0 +1,19 @@\n+fn foo(a: usize, b: usize) -> usize { a }\n+\n+struct S(usize, usize);\n+\n+trait T {\n+    fn baz(x: usize, y: usize) -> usize { x }\n+}\n+\n+fn main() {\n+    let _: usize = foo(_, _);\n+    //~^ ERROR expected expression\n+    //~| ERROR expected expression\n+    let _: S = S(_, _);\n+    //~^ ERROR expected expression\n+    //~| ERROR expected expression\n+    let _: usize = T::baz(_, _);\n+    //~^ ERROR expected expression\n+    //~| ERROR expected expression\n+}"}, {"sha": "a6d1c4b859f2f73611763a074a60c07e72de991f", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-with-underscore-args.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b7f7756566c9e10983ee51bc97afe9852838299a/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-with-underscore-args.stderr?ref=b7f7756566c9e10983ee51bc97afe9852838299a", "patch": "@@ -0,0 +1,38 @@\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:10:24\n+   |\n+LL |     let _: usize = foo(_, _);\n+   |                        ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:10:27\n+   |\n+LL |     let _: usize = foo(_, _);\n+   |                           ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:13:18\n+   |\n+LL |     let _: S = S(_, _);\n+   |                  ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:13:21\n+   |\n+LL |     let _: S = S(_, _);\n+   |                     ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:16:27\n+   |\n+LL |     let _: usize = T::baz(_, _);\n+   |                           ^ expected expression\n+\n+error: expected expression, found reserved identifier `_`\n+  --> $DIR/fn-or-tuple-struct-with-underscore-args.rs:16:30\n+   |\n+LL |     let _: usize = T::baz(_, _);\n+   |                              ^ expected expression\n+\n+error: aborting due to 6 previous errors\n+"}]}