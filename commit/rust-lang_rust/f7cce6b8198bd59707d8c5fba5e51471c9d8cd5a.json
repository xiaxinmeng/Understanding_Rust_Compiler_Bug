{"sha": "f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3Y2NlNmI4MTk4YmQ1OTcwN2Q4YzVmYmE1ZTUxNDcxYzlkOGNkNWE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-14T15:31:12Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-14T22:32:26Z"}, "message": "pull out the code from iter_structural_ty for handling functions,\nas we will have to do very careful and non-generic things", "tree": {"sha": "ce0c849c856a70dfe9a2a11577db0636a24b4060", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce0c849c856a70dfe9a2a11577db0636a24b4060"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a", "html_url": "https://github.com/rust-lang/rust/commit/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c7cb264876d0ac75c4428ceeef0b7ef822c1818", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c7cb264876d0ac75c4428ceeef0b7ef822c1818", "html_url": "https://github.com/rust-lang/rust/commit/7c7cb264876d0ac75c4428ceeef0b7ef822c1818"}], "stats": {"total": 84, "additions": 55, "deletions": 29}, "files": [{"sha": "170351a1406a067afe36895138f3ed6851c17f40", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 54, "deletions": 28, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a", "patch": "@@ -349,10 +349,13 @@ fn trans_native_call(cx: @block_ctxt, externs: hashmap<str, ValueRef>,\n     ret Call(cx, llnative, call_args);\n }\n \n-fn trans_non_gc_free(cx: @block_ctxt, v: ValueRef) -> @block_ctxt {\n-    Call(cx, bcx_ccx(cx).upcalls.free,\n-         [PointerCast(cx, v, T_ptr(T_i8())),\n-          C_int(bcx_ccx(cx), 0)]);\n+fn trans_free_if_not_gc(cx: @block_ctxt, v: ValueRef) -> @block_ctxt {\n+    let ccx = bcx_ccx(cx);\n+    if !ccx.sess.get_opts().do_gc {\n+        Call(cx, ccx.upcalls.free,\n+             [PointerCast(cx, v, T_ptr(T_i8())),\n+              C_int(bcx_ccx(cx), 0)]);\n+    }\n     ret cx;\n }\n \n@@ -1291,29 +1294,62 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n }\n \n fn make_take_glue(cx: @block_ctxt, v: ValueRef, t: ty::t) {\n+\n+    fn take_fn_env(cx: @block_ctxt,\n+                   v: ValueRef,\n+                   blk: block(@block_ctxt, ValueRef) -> @block_ctxt)\n+        -> @block_ctxt {\n+        let box_cell_v = GEPi(cx, v, [0, abi::fn_field_box]);\n+        let box_ptr_v = Load(cx, box_cell_v);\n+        let inner_cx = new_sub_block_ctxt(cx, \"iter box\");\n+        let next_cx = new_sub_block_ctxt(cx, \"next\");\n+        let null_test = IsNull(cx, box_ptr_v);\n+        CondBr(cx, null_test, next_cx.llbb, inner_cx.llbb);\n+        inner_cx = blk(inner_cx, box_ptr_v);\n+        Br(inner_cx, next_cx.llbb);\n+        ret next_cx;\n+    }\n+\n+\n     let bcx = cx;\n     let tcx = bcx_tcx(cx);\n     // NB: v is an *alias* of type t here, not a direct value.\n-    alt ty::struct(tcx, t) {\n+    bcx = alt ty::struct(tcx, t) {\n       ty::ty_box(_) {\n-        bcx = incr_refcnt_of_boxed(bcx, Load(bcx, v));\n+        incr_refcnt_of_boxed(bcx, Load(bcx, v))\n       }\n       ty::ty_uniq(_) {\n         check trans_uniq::type_is_unique_box(bcx, t);\n-        let {bcx: cx, val} = trans_uniq::duplicate(bcx, Load(bcx, v), t);\n-        bcx = cx;\n-        Store(bcx, val, v);\n+        let r = trans_uniq::duplicate(bcx, Load(bcx, v), t);\n+        Store(r.bcx, r.val, v);\n+        r.bcx\n       }\n       ty::ty_vec(_) | ty::ty_str. {\n-        let {bcx: cx, val} = tvec::duplicate(bcx, Load(bcx, v), t);\n-        bcx = cx;\n-        Store(bcx, val, v);\n+        let r = tvec::duplicate(bcx, Load(bcx, v), t);\n+        Store(r.bcx, r.val, v);\n+        r.bcx\n+      }\n+      ty::ty_fn(ast::proto_bare., _, _, _, _) {\n+        bcx\n+      }\n+      ty::ty_fn(ast::proto_block., _, _, _, _) {\n+        bcx\n+      }\n+      ty::ty_fn(ast::proto_send., _, _, _, _) {\n+        take_fn_env(bcx, v, { |bcx, _box_ptr_v|\n+            bcx // NDM\n+        })\n+      }\n+      ty::ty_fn(ast::proto_shared(_), _, _, _, _) {\n+        take_fn_env(bcx, v, { |bcx, box_ptr_v|\n+            incr_refcnt_of_boxed(bcx, box_ptr_v)\n+        })\n       }\n       _ when ty::type_is_structural(bcx_tcx(bcx), t) {\n-        bcx = iter_structural_ty(bcx, v, t, take_ty);\n+        iter_structural_ty(bcx, v, t, take_ty)\n       }\n-      _ { /* fallthrough */ }\n-    }\n+      _ { bcx }\n+    };\n \n     build_return(bcx);\n }\n@@ -1350,9 +1386,7 @@ fn make_free_glue(bcx: @block_ctxt, v: ValueRef, t: ty::t) {\n         let v = PointerCast(bcx, v, type_of_1(bcx, t));\n         let body = GEPi(bcx, v, [0, abi::box_rc_field_body]);\n         let bcx = drop_ty(bcx, body, body_mt.ty);\n-        if !bcx_ccx(bcx).sess.get_opts().do_gc {\n-            trans_non_gc_free(bcx, v)\n-        } else { bcx }\n+        trans_free_if_not_gc(bcx, v)\n       }\n       ty::ty_uniq(content_mt) {\n         check trans_uniq::type_is_unique_box(bcx, t);\n@@ -1375,9 +1409,7 @@ fn make_free_glue(bcx: @block_ctxt, v: ValueRef, t: ty::t) {\n         let ti = none;\n         call_tydesc_glue_full(bcx, body, tydesc,\n                               abi::tydesc_field_drop_glue, ti);\n-        if !bcx_ccx(bcx).sess.get_opts().do_gc {\n-            trans_non_gc_free(bcx, b)\n-        } else { bcx }\n+        trans_free_if_not_gc(bcx, b)\n       }\n       ty::ty_fn(ast::proto_bare., _, _, _, _) {\n         bcx\n@@ -1395,9 +1427,7 @@ fn make_free_glue(bcx: @block_ctxt, v: ValueRef, t: ty::t) {\n         // n.b.: When we drop a function, we actually invoke the\n         // free glue only on the environment part.\n         call_bound_data_glue_for_closure(bcx, v, abi::tydesc_field_drop_glue);\n-        if !bcx_ccx(bcx).sess.get_opts().do_gc {\n-            trans_non_gc_free(bcx, v)\n-        } else { bcx }\n+        trans_free_if_not_gc(bcx, v)\n       }\n       _ { bcx }\n     };\n@@ -1728,10 +1758,6 @@ fn iter_structural_ty(cx: @block_ctxt, av: ValueRef, t: ty::t,\n         }\n         ret next_cx;\n       }\n-      ty::ty_fn(_, _, _, _, _) | ty::ty_native_fn(_, _) {\n-        let box_cell_a = GEPi(cx, av, [0, abi::fn_field_box]);\n-        ret iter_boxpp(cx, box_cell_a, f);\n-      }\n       ty::ty_obj(_) {\n         let box_cell_a = GEPi(cx, av, [0, abi::obj_field_box]);\n         ret iter_boxpp(cx, box_cell_a, f);"}, {"sha": "2b2d95fc52f85d67060ea41107f7b8ef7171d89f", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a", "patch": "@@ -275,7 +275,7 @@ fn add_clean_temp_mem(cx: @block_ctxt, val: ValueRef, ty: ty::t) {\n fn add_clean_free(cx: @block_ctxt, ptr: ValueRef, shared: bool) {\n     let scope_cx = find_scope_cx(cx);\n     let free_fn = if shared { bind trans::trans_shared_free(_, ptr) }\n-                  else { bind trans::trans_non_gc_free(_, ptr) };\n+                  else { bind trans::trans_free_if_not_gc(_, ptr) };\n     scope_cx.cleanups += [clean_temp(ptr, free_fn)];\n     scope_cx.lpad_dirty = true;\n }"}]}