{"sha": "6e92f0580b0bfe8433df73a9139eaa72c47258b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOTJmMDU4MGIwYmZlODQzM2RmNzNhOTEzOWVhYTcyYzQ3MjU4YjI=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-03-08T22:30:15Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-03-14T22:26:17Z"}, "message": "Use new io in print and println macroses", "tree": {"sha": "294c43242cbeccf72d1868cbbee366d4af108bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/294c43242cbeccf72d1868cbbee366d4af108bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e92f0580b0bfe8433df73a9139eaa72c47258b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e92f0580b0bfe8433df73a9139eaa72c47258b2", "html_url": "https://github.com/rust-lang/rust/commit/6e92f0580b0bfe8433df73a9139eaa72c47258b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e92f0580b0bfe8433df73a9139eaa72c47258b2/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e4be02b80a3dd27bce20870958fe0aef7e7336d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4be02b80a3dd27bce20870958fe0aef7e7336d", "html_url": "https://github.com/rust-lang/rust/commit/3e4be02b80a3dd27bce20870958fe0aef7e7336d"}], "stats": {"total": 119, "additions": 62, "deletions": 57}, "files": [{"sha": "e132e9833c16df16ce933dade29094acfc85d4bc", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6e92f0580b0bfe8433df73a9139eaa72c47258b2", "patch": "@@ -37,7 +37,7 @@\n #![feature(staged_api)]\n #![feature(exit_status)]\n #![feature(io)]\n-#![feature(set_panic)]\n+#![feature(set_stdio)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "bd4177861dd42f9d53ee6b3d5861fa8a0bc41ae0", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=6e92f0580b0bfe8433df73a9139eaa72c47258b2", "patch": "@@ -26,7 +26,7 @@\n #![feature(core)]\n #![feature(exit_status)]\n #![feature(int_uint)]\n-#![feature(set_panic)]\n+#![feature(set_stdio)]\n #![feature(libc)]\n #![feature(old_path)]\n #![feature(rustc_private)]"}, {"sha": "aadc2dc83af05eaf16d9fa73bbfccd8071ca74b2", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6e92f0580b0bfe8433df73a9139eaa72c47258b2", "patch": "@@ -37,10 +37,10 @@ pub use self::buffered::IntoInnerError;\n pub use self::cursor::Cursor;\n pub use self::error::{Result, Error, ErrorKind};\n pub use self::util::{copy, sink, Sink, empty, Empty, repeat, Repeat};\n-pub use self::stdio::{stdin, stdout, stderr, Stdin, Stdout, Stderr};\n+pub use self::stdio::{stdin, stdout, stderr, _print, Stdin, Stdout, Stderr};\n pub use self::stdio::{StdoutLock, StderrLock, StdinLock};\n #[doc(no_inline, hidden)]\n-pub use self::stdio::set_panic;\n+pub use self::stdio::{set_panic, set_print};\n \n #[macro_use] mod lazy;\n "}, {"sha": "fed58ed4b642282008dd5317a999304ec90c8fb3", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=6e92f0580b0bfe8433df73a9139eaa72c47258b2", "patch": "@@ -11,13 +11,21 @@\n use prelude::v1::*;\n use io::prelude::*;\n \n+use cell::RefCell;\n use cmp;\n use fmt;\n use io::lazy::Lazy;\n use io::{self, BufReader, LineWriter};\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n \n+/// Stdout used by print! and println! macroses\n+thread_local! {\n+    static LOCAL_STDOUT: RefCell<Option<Box<Write + Send>>> = {\n+        RefCell::new(None)\n+    }\n+}\n+\n /// A handle to a raw instance of the standard input stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n@@ -347,15 +355,15 @@ impl<'a> Write for StderrLock<'a> {\n     fn flush(&mut self) -> io::Result<()> { self.inner.flush() }\n }\n \n-/// Resets the task-local stdout handle to the specified writer\n+/// Resets the task-local stderr handle to the specified writer\n ///\n-/// This will replace the current task's stdout handle, returning the old\n-/// handle. All future calls to `print` and friends will emit their output to\n+/// This will replace the current task's stderr handle, returning the old\n+/// handle. All future calls to `panic!` and friends will emit their output to\n /// this specified handle.\n ///\n /// Note that this does not need to be called for all new tasks; the default\n-/// output handle is to the process's stdout stream.\n-#[unstable(feature = \"set_panic\",\n+/// output handle is to the process's stderr stream.\n+#[unstable(feature = \"set_stdio\",\n            reason = \"this function may disappear completely or be replaced \\\n                      with a more general mechanism\")]\n #[doc(hidden)]\n@@ -369,3 +377,37 @@ pub fn set_panic(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n         Some(s)\n     })\n }\n+\n+/// Resets the task-local stdout handle to the specified writer\n+///\n+/// This will replace the current task's stdout handle, returning the old\n+/// handle. All future calls to `print!` and friends will emit their output to\n+/// this specified handle.\n+///\n+/// Note that this does not need to be called for all new tasks; the default\n+/// output handle is to the process's stdout stream.\n+#[unstable(feature = \"set_stdio\",\n+           reason = \"this function may disappear completely or be replaced \\\n+                     with a more general mechanism\")]\n+#[doc(hidden)]\n+pub fn set_print(sink: Box<Write + Send>) -> Option<Box<Write + Send>> {\n+    use mem;\n+    LOCAL_STDOUT.with(move |slot| {\n+        mem::replace(&mut *slot.borrow_mut(), Some(sink))\n+    }).and_then(|mut s| {\n+        let _ = s.flush();\n+        Some(s)\n+    })\n+}\n+\n+#[unstable(feature = \"print\",\n+           reason = \"implementation detail which may disappear or be replaced at any time\")]\n+#[doc(hidden)]\n+pub fn _print(args: fmt::Arguments) {\n+    if let Err(e) = LOCAL_STDOUT.with(|s| match s.borrow_mut().as_mut() {\n+        Some(w) => w.write_fmt(args),\n+        None => stdout().write_fmt(args)\n+    }) {\n+        panic!(\"failed printing to stdout: {}\", e);\n+    }\n+}"}, {"sha": "7378f43f757bf7990c4dc3929bbccdde68ade1e7", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=6e92f0580b0bfe8433df73a9139eaa72c47258b2", "patch": "@@ -60,19 +60,21 @@ macro_rules! panic {\n     });\n }\n \n+/// Macro for printing to the standard output.\n+///\n /// Equivalent to the `println!` macro except that a newline is not printed at\n /// the end of the message.\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n macro_rules! print {\n-    ($($arg:tt)*) => ($crate::old_io::stdio::print_args(format_args!($($arg)*)))\n+    ($($arg:tt)*) => ($crate::io::_print(format_args!($($arg)*)));\n }\n \n-/// Macro for printing to a task's stdout handle.\n+/// Macro for printing to the standard output.\n ///\n-/// Each task can override its stdout handle via `std::old_io::stdio::set_stdout`.\n-/// The syntax of this macro is the same as that used for `format!`. For more\n-/// information, see `std::fmt` and `std::old_io::stdio`.\n+/// Use the `format!` syntax to write data to the standard output.\n+/// See `std::fmt` for more information.\n ///\n /// # Examples\n ///\n@@ -83,7 +85,8 @@ macro_rules! print {\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! println {\n-    ($($arg:tt)*) => ($crate::old_io::stdio::println_args(format_args!($($arg)*)))\n+    ($fmt:expr) => (print!(concat!($fmt, \"\\n\")));\n+    ($fmt:expr, $($arg:tt)*) => (print!(concat!($fmt, \"\\n\"), $($arg)*));\n }\n \n /// Helper macro for unwrapping `Result` values while returning early with an"}, {"sha": "dcc34505730939ad9dc839bbd78a642d6dc0e8a4", "filename": "src/libstd/old_io/stdio.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibstd%2Fold_io%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibstd%2Fold_io%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fstdio.rs?ref=6e92f0580b0bfe8433df73a9139eaa72c47258b2", "patch": "@@ -535,18 +535,4 @@ mod tests {\n         stdout();\n         stderr();\n     }\n-\n-    #[test]\n-    fn capture_stdout() {\n-        use old_io::{ChanReader, ChanWriter};\n-\n-        let (tx, rx) = channel();\n-        let (mut r, w) = (ChanReader::new(rx), ChanWriter::new(tx));\n-        // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n-        let _t = thread::spawn(move|| {\n-            set_stdout(Box::new(w));\n-            println!(\"hello!\");\n-        });\n-        assert_eq!(r.read_to_string().unwrap(), \"hello!\\n\");\n-    }\n }"}, {"sha": "1f6341f49559174061b7f5a5cba55835aa790a9a", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=6e92f0580b0bfe8433df73a9139eaa72c47258b2", "patch": "@@ -39,13 +39,12 @@\n #![feature(collections)]\n #![feature(core)]\n #![feature(int_uint)]\n-#![feature(old_io)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(std_misc)]\n #![feature(io)]\n #![feature(libc)]\n-#![feature(set_panic)]\n+#![feature(set_stdio)]\n \n extern crate getopts;\n extern crate serialize;\n@@ -909,7 +908,6 @@ pub fn run_test(opts: &TestOpts,\n         return;\n     }\n \n-    #[allow(deprecated)] // set_stdout\n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: Sender<MonitorMsg>,\n                       nocapture: bool,\n@@ -921,11 +919,6 @@ pub fn run_test(opts: &TestOpts,\n             }\n             fn flush(&mut self) -> io::Result<()> { Ok(()) }\n         }\n-        impl Writer for Sink {\n-            fn write_all(&mut self, data: &[u8]) -> std::old_io::IoResult<()> {\n-                Writer::write_all(&mut *self.0.lock().unwrap(), data)\n-            }\n-        }\n \n         thread::spawn(move || {\n             let data = Arc::new(Mutex::new(Vec::new()));\n@@ -937,7 +930,7 @@ pub fn run_test(opts: &TestOpts,\n \n             let result_guard = cfg.spawn(move || {\n                 if !nocapture {\n-                    std::old_io::stdio::set_stdout(box Sink(data2.clone()));\n+                    io::set_print(box Sink(data2.clone()));\n                     io::set_panic(box Sink(data2));\n                 }\n                 testfn.invoke(())"}, {"sha": "84d86c5746c0bcfdaa81c9e62b630c5625fbc8fb", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e92f0580b0bfe8433df73a9139eaa72c47258b2/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=6e92f0580b0bfe8433df73a9139eaa72c47258b2", "patch": "@@ -11,9 +11,6 @@\n #![allow(missing_docs)]\n \n use std::cmp::Ordering::{self, Less, Greater, Equal};\n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n-use std::collections::hash_map;\n-use std::hash::Hash;\n use std::mem;\n use std::num::{Float, FromPrimitive};\n \n@@ -330,22 +327,6 @@ pub fn winsorize<T: Float + FromPrimitive>(samples: &mut [T], pct: T) {\n     }\n }\n \n-/// Returns a HashMap with the number of occurrences of every element in the\n-/// sequence that the iterator exposes.\n-#[cfg(not(stage0))]\n-pub fn freq_count<T, U>(iter: T) -> hash_map::HashMap<U, uint>\n-  where T: Iterator<Item=U>, U: Eq + Clone + Hash\n-{\n-    let mut map: hash_map::HashMap<U,uint> = hash_map::HashMap::new();\n-    for elem in iter {\n-        match map.entry(elem) {\n-            Occupied(mut entry) => { *entry.get_mut() += 1; },\n-            Vacant(entry) => { entry.insert(1); },\n-        }\n-    }\n-    map\n-}\n-\n // Test vectors generated from R, using the script src/etc/stat-test-vectors.r.\n \n #[cfg(test)]"}]}