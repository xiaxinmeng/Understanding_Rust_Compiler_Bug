{"sha": "37ad9cb2a59ae7256e722dfa6db82fd0b91eae03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YWQ5Y2IyYTU5YWU3MjU2ZTcyMmRmYTZkYjgyZmQwYjkxZWFlMDM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-14T15:42:06Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-14T15:51:11Z"}, "message": "Don't use non cache syntaxnodes in generate_function for lookups", "tree": {"sha": "e5480db45fc96a3496553da180565cb888c9a61a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5480db45fc96a3496553da180565cb888c9a61a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03", "html_url": "https://github.com/rust-lang/rust/commit/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90", "html_url": "https://github.com/rust-lang/rust/commit/c1a7169bf056b18eeed67e686cf1f6d0f8f3ff90"}], "stats": {"total": 74, "additions": 33, "deletions": 41}, "files": [{"sha": "84563fd892574ab566af00557f5c36ad5bd911aa", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=37ad9cb2a59ae7256e722dfa6db82fd0b91eae03", "patch": "@@ -884,6 +884,7 @@ to_def_impls![\n     (crate::Local, ast::IdentPat, bind_pat_to_def),\n     (crate::Local, ast::SelfParam, self_param_to_def),\n     (crate::Label, ast::Label, label_to_def),\n+    (crate::Adt, ast::Adt, adt_to_def),\n ];\n \n fn find_root(node: &SyntaxNode) -> SyntaxNode {"}, {"sha": "93b78a1a16c7b56a76df39a7e7c9b8c09ca48e52", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=37ad9cb2a59ae7256e722dfa6db82fd0b91eae03", "patch": "@@ -91,9 +91,9 @@ use hir_def::{\n     dyn_map::DynMap,\n     expr::{LabelId, PatId},\n     keys::{self, Key},\n-    ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, FieldId, FunctionId, GenericDefId,\n-    ImplId, LifetimeParamId, ModuleId, StaticId, StructId, TraitId, TypeAliasId, TypeParamId,\n-    UnionId, VariantId,\n+    AdtId, ConstId, ConstParamId, DefWithBodyId, EnumId, EnumVariantId, FieldId, FunctionId,\n+    GenericDefId, ImplId, LifetimeParamId, ModuleId, StaticId, StructId, TraitId, TypeAliasId,\n+    TypeParamId, UnionId, VariantId,\n };\n use hir_expand::{name::AsName, AstId, MacroCallId, MacroDefId, MacroDefKind};\n use rustc_hash::FxHashMap;\n@@ -201,6 +201,18 @@ impl SourceToDefCtx<'_, '_> {\n     ) -> Option<EnumVariantId> {\n         self.to_def(src, keys::VARIANT)\n     }\n+    pub(super) fn adt_to_def(\n+        &mut self,\n+        InFile { file_id, value }: InFile<ast::Adt>,\n+    ) -> Option<AdtId> {\n+        match value {\n+            ast::Adt::Enum(it) => self.enum_to_def(InFile::new(file_id, it)).map(AdtId::EnumId),\n+            ast::Adt::Struct(it) => {\n+                self.struct_to_def(InFile::new(file_id, it)).map(AdtId::StructId)\n+            }\n+            ast::Adt::Union(it) => self.union_to_def(InFile::new(file_id, it)).map(AdtId::UnionId),\n+        }\n+    }\n     pub(super) fn bind_pat_to_def(\n         &mut self,\n         src: InFile<ast::IdentPat>,"}, {"sha": "a0e682c4ce192958ee4b0227e73110ef7e2c68f1", "filename": "crates/ide_assists/src/handlers/generate_function.rs", "status": "modified", "additions": 12, "deletions": 27, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_function.rs?ref=37ad9cb2a59ae7256e722dfa6db82fd0b91eae03", "patch": "@@ -1,4 +1,4 @@\n-use hir::{HasSource, HirDisplay, InFile, Module, TypeInfo};\n+use hir::{HasSource, HirDisplay, Module, TypeInfo};\n use ide_db::{base_db::FileId, helpers::SnippetCap};\n use rustc_hash::{FxHashMap, FxHashSet};\n use stdx::to_lower_snake_case;\n@@ -106,31 +106,28 @@ fn gen_fn(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n-    let fn_name: ast::NameRef = ast::NameRef::cast(\n-        call.syntax().children().find(|child| child.kind() == SyntaxKind::NAME_REF)?,\n-    )?;\n-    let ty = ctx.sema.type_of_expr(&call.receiver()?)?.original().strip_references().as_adt()?;\n+    let fn_name = call.name_ref()?;\n+    let adt = ctx.sema.type_of_expr(&call.receiver()?)?.original().strip_references().as_adt()?;\n \n-    let current_module =\n-        ctx.sema.scope(ctx.find_node_at_offset::<ast::MethodCallExpr>()?.syntax()).module()?;\n-    let target_module = ty.module(ctx.sema.db);\n+    let current_module = ctx.sema.scope(call.syntax()).module()?;\n+    let target_module = adt.module(ctx.sema.db);\n \n     if current_module.krate() != target_module.krate() {\n         return None;\n     }\n \n-    let (impl_, file) = match ty {\n-        hir::Adt::Struct(strukt) => get_impl(strukt.source(ctx.sema.db)?.syntax(), &fn_name, ctx),\n-        hir::Adt::Enum(en) => get_impl(en.source(ctx.sema.db)?.syntax(), &fn_name, ctx),\n-        hir::Adt::Union(union) => get_impl(union.source(ctx.sema.db)?.syntax(), &fn_name, ctx),\n-    }?;\n+    let range = adt.source(ctx.sema.db)?.syntax().original_file_range(ctx.sema.db);\n+    let file = ctx.sema.parse(range.file_id);\n+    let adt_source =\n+        ctx.sema.find_node_at_offset_with_macros(file.syntax(), range.range.start())?;\n+    let impl_ = find_struct_impl(ctx, &adt_source, fn_name.text().as_str())?;\n \n     let function_builder = FunctionBuilder::from_method_call(\n         ctx,\n         &call,\n         &fn_name,\n         &impl_,\n-        file,\n+        range.file_id,\n         target_module,\n         current_module,\n     )?;\n@@ -145,7 +142,7 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n             builder.edit_file(function_template.file);\n             let mut new_fn = function_template.to_string(ctx.config.snippet_cap);\n             if impl_.is_none() {\n-                new_fn = format!(\"\\nimpl {} {{\\n{}\\n}}\", ty.name(ctx.sema.db), new_fn,);\n+                new_fn = format!(\"\\nimpl {} {{\\n{}\\n}}\", adt.name(ctx.sema.db), new_fn,);\n             }\n             match ctx.config.snippet_cap {\n                 Some(cap) => builder.insert_snippet(cap, function_template.insert_offset, new_fn),\n@@ -155,18 +152,6 @@ fn gen_method(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     )\n }\n \n-fn get_impl(\n-    adt: InFile<&SyntaxNode>,\n-    fn_name: &ast::NameRef,\n-    ctx: &AssistContext,\n-) -> Option<(Option<ast::Impl>, FileId)> {\n-    let file = adt.file_id.original_file(ctx.sema.db);\n-    let adt = adt.value;\n-    let adt = ast::Adt::cast(adt.clone())?;\n-    let r = find_struct_impl(ctx, &adt, fn_name.text().as_str())?;\n-    Some((r, file))\n-}\n-\n struct FunctionTemplate {\n     insert_offset: TextSize,\n     leading_ws: String,"}, {"sha": "edbc6dd609128912f945dd46d7819dd5ea673074", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37ad9cb2a59ae7256e722dfa6db82fd0b91eae03/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=37ad9cb2a59ae7256e722dfa6db82fd0b91eae03", "patch": "@@ -5,7 +5,7 @@ mod gen_trait_fn_body;\n \n use std::ops;\n \n-use hir::{Adt, HasSource};\n+use hir::HasSource;\n use ide_db::{helpers::SnippetCap, path_transform::PathTransform, RootDatabase};\n use itertools::Itertools;\n use stdx::format_to;\n@@ -290,19 +290,13 @@ pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n // FIXME: this partially overlaps with `find_impl_block_*`\n pub(crate) fn find_struct_impl(\n     ctx: &AssistContext,\n-    strukt: &ast::Adt,\n+    adt: &ast::Adt,\n     name: &str,\n ) -> Option<Option<ast::Impl>> {\n     let db = ctx.db();\n-    let module = strukt.syntax().ancestors().find(|node| {\n-        ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())\n-    })?;\n-\n-    let struct_def = match strukt {\n-        ast::Adt::Enum(e) => Adt::Enum(ctx.sema.to_def(e)?),\n-        ast::Adt::Struct(s) => Adt::Struct(ctx.sema.to_def(s)?),\n-        ast::Adt::Union(u) => Adt::Union(ctx.sema.to_def(u)?),\n-    };\n+    let module = adt.syntax().parent()?;\n+\n+    let struct_def = ctx.sema.to_def(adt)?;\n \n     let block = module.descendants().filter_map(ast::Impl::cast).find_map(|impl_blk| {\n         let blk = ctx.sema.to_def(&impl_blk)?;"}]}