{"sha": "389fef3b304bd4f196a337797591d9f8db998a62", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4OWZlZjNiMzA0YmQ0ZjE5NmEzMzc3OTc1OTFkOWY4ZGI5OThhNjI=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-14T00:37:36Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-20T18:53:07Z"}, "message": "Replace `Void` with never type", "tree": {"sha": "d702a13530cb7252507f32e26ff3875515d39817", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d702a13530cb7252507f32e26ff3875515d39817"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/389fef3b304bd4f196a337797591d9f8db998a62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/389fef3b304bd4f196a337797591d9f8db998a62", "html_url": "https://github.com/rust-lang/rust/commit/389fef3b304bd4f196a337797591d9f8db998a62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/389fef3b304bd4f196a337797591d9f8db998a62/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62652865b6029b4776a7c03efa13a37b15c9b953", "url": "https://api.github.com/repos/rust-lang/rust/commits/62652865b6029b4776a7c03efa13a37b15c9b953", "html_url": "https://github.com/rust-lang/rust/commit/62652865b6029b4776a7c03efa13a37b15c9b953"}], "stats": {"total": 104, "additions": 44, "deletions": 60}, "files": [{"sha": "fb6b4a8b54eab8c0ddd3718dcec0ed24b8ebe390", "filename": "library/std/src/sys/hermit/fs.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Ffs.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -9,7 +9,7 @@ use crate::sys::hermit::abi;\n use crate::sys::hermit::abi::{O_APPEND, O_CREAT, O_EXCL, O_RDONLY, O_RDWR, O_TRUNC, O_WRONLY};\n use crate::sys::hermit::fd::FileDesc;\n use crate::sys::time::SystemTime;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::os_str_bytes::OsStrExt;\n \n pub use crate::sys_common::fs::copy;\n@@ -22,11 +22,11 @@ fn cstr(path: &Path) -> io::Result<CString> {\n #[derive(Debug)]\n pub struct File(FileDesc);\n \n-pub struct FileAttr(Void);\n+pub struct FileAttr(!);\n \n-pub struct ReadDir(Void);\n+pub struct ReadDir(!);\n \n-pub struct DirEntry(Void);\n+pub struct DirEntry(!);\n \n #[derive(Clone, Debug)]\n pub struct OpenOptions {\n@@ -41,9 +41,9 @@ pub struct OpenOptions {\n     mode: i32,\n }\n \n-pub struct FilePermissions(Void);\n+pub struct FilePermissions(!);\n \n-pub struct FileType(Void);\n+pub struct FileType(!);\n \n #[derive(Debug)]\n pub struct DirBuilder {}"}, {"sha": "56497162c0333478df3f36376897ddb1c4618ba5", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -61,11 +61,6 @@ pub fn unsupported_err() -> crate::io::Error {\n     )\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n pub unsafe fn strlen(start: *const c_char) -> usize {\n     let mut str = start;\n "}, {"sha": "bdb7b81fdc0493412add65ddd2b115ae3244b5cf", "filename": "library/std/src/sys/hermit/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fnet.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -6,7 +6,7 @@ use crate::str;\n use crate::sync::Arc;\n use crate::sys::hermit::abi;\n use crate::sys::hermit::abi::IpAddress::{Ipv4, Ipv6};\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::AsInner;\n use crate::time::Duration;\n \n@@ -411,7 +411,7 @@ impl fmt::Debug for UdpSocket {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {"}, {"sha": "ab5e0ea0bc4ff9d6042c98105c8b429f0b774761", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -9,7 +9,7 @@ use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::Mutex;\n use crate::sys::hermit::abi;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::os_str_bytes::*;\n use crate::vec;\n \n@@ -29,7 +29,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     unsupported()\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(&'a !);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")"}, {"sha": "d6a56830733096d4bca00bc71919871f843a2144", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -115,11 +115,6 @@ pub fn decode_error_kind(code: i32) -> ErrorKind {\n     }\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n pub unsafe fn strlen(mut s: *const c_char) -> usize {\n     let mut n = 0;\n     while unsafe { *s } != 0 {"}, {"sha": "9ddd17303db57e0674f623a8e80d7eed789fd61c", "filename": "library/std/src/sys/sgx/net.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fnet.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -5,7 +5,7 @@ use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr, ToSocketAddrs};\n use crate::sync::Arc;\n use crate::sys::fd::FileDesc;\n-use crate::sys::{sgx_ineffective, unsupported, AsInner, FromInner, IntoInner, TryIntoInner, Void};\n+use crate::sys::{sgx_ineffective, unsupported, AsInner, FromInner, IntoInner, TryIntoInner};\n use crate::time::Duration;\n \n use super::abi::usercalls;\n@@ -310,7 +310,7 @@ impl FromInner<Socket> for TcpListener {\n     }\n }\n \n-pub struct UdpSocket(Void);\n+pub struct UdpSocket(!);\n \n impl UdpSocket {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n@@ -462,7 +462,7 @@ impl fmt::Display for NonIpSockAddr {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     fn new(host: String) -> io::Result<LookupHost> {"}, {"sha": "ff1f9c368a31ed8ee3012a6a543caef65a4ec93d", "filename": "library/std/src/sys/sgx/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fos.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -10,7 +10,7 @@ use crate::str;\n use crate::sync::atomic::{AtomicUsize, Ordering};\n use crate::sync::Mutex;\n use crate::sync::Once;\n-use crate::sys::{decode_error_kind, sgx_ineffective, unsupported, Void};\n+use crate::sys::{decode_error_kind, sgx_ineffective, unsupported};\n use crate::vec;\n \n pub fn errno() -> i32 {\n@@ -35,7 +35,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     sgx_ineffective(())\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(&'a !);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")"}, {"sha": "0ef84c84ee877d6b81e9c68dcdfe7e7bc8aa8341", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -36,11 +36,6 @@ pub fn hashmap_random_keys() -> (u64, u64) {\n     (1, 2)\n }\n \n-// This enum is used as the storage for a bunch of types which can't actually\n-// exist.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n-pub enum Void {}\n-\n pub unsafe fn strlen(mut s: *const c_char) -> usize {\n     // SAFETY: The caller must guarantee `s` points to a valid 0-terminated string.\n     unsafe {"}, {"sha": "f5a0c89fe107b8b955e7dc505c5ce0f19fba1801", "filename": "library/std/src/sys/unsupported/fs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Ffs.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -4,22 +4,22 @@ use crate::hash::{Hash, Hasher};\n use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n use crate::path::{Path, PathBuf};\n use crate::sys::time::SystemTime;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n \n-pub struct File(Void);\n+pub struct File(!);\n \n-pub struct FileAttr(Void);\n+pub struct FileAttr(!);\n \n-pub struct ReadDir(Void);\n+pub struct ReadDir(!);\n \n-pub struct DirEntry(Void);\n+pub struct DirEntry(!);\n \n #[derive(Clone, Debug)]\n pub struct OpenOptions {}\n \n-pub struct FilePermissions(Void);\n+pub struct FilePermissions(!);\n \n-pub struct FileType(Void);\n+pub struct FileType(!);\n \n #[derive(Debug)]\n pub struct DirBuilder {}"}, {"sha": "204a24cfc71cdf108927749f13bd3cf82392f126", "filename": "library/std/src/sys/unsupported/net.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fnet.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -2,10 +2,10 @@ use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::time::Duration;\n \n-pub struct TcpStream(Void);\n+pub struct TcpStream(!);\n \n impl TcpStream {\n     pub fn connect(_: io::Result<&SocketAddr>) -> io::Result<TcpStream> {\n@@ -107,7 +107,7 @@ impl fmt::Debug for TcpStream {\n     }\n }\n \n-pub struct TcpListener(Void);\n+pub struct TcpListener(!);\n \n impl TcpListener {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<TcpListener> {\n@@ -157,7 +157,7 @@ impl fmt::Debug for TcpListener {\n     }\n }\n \n-pub struct UdpSocket(Void);\n+pub struct UdpSocket(!);\n \n impl UdpSocket {\n     pub fn bind(_: io::Result<&SocketAddr>) -> io::Result<UdpSocket> {\n@@ -291,7 +291,7 @@ impl fmt::Debug for UdpSocket {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {"}, {"sha": "11583ae99d6d042e71b03a92120b979e39ce4876", "filename": "library/std/src/sys/unsupported/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fos.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -1,4 +1,4 @@\n-use super::{unsupported, Void};\n+use super::unsupported;\n use crate::error::Error as StdError;\n use crate::ffi::{OsStr, OsString};\n use crate::fmt;\n@@ -21,7 +21,7 @@ pub fn chdir(_: &path::Path) -> io::Result<()> {\n     unsupported()\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(&'a !);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")\n@@ -62,7 +62,7 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     unsupported()\n }\n \n-pub struct Env(Void);\n+pub struct Env(!);\n \n impl Iterator for Env {\n     type Item = (OsString, OsString);"}, {"sha": "7ea46990d77c842e58d503dbc5c8fa965c8f310e", "filename": "library/std/src/sys/unsupported/pipe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpipe.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -1,7 +1,6 @@\n use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::sys::Void;\n \n-pub struct AnonPipe(Void);\n+pub struct AnonPipe(!);\n \n impl AnonPipe {\n     pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {"}, {"sha": "f777e40873fb410ca1e58f023680656246b0a5e6", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -5,7 +5,7 @@ use crate::marker::PhantomData;\n use crate::path::Path;\n use crate::sys::fs::File;\n use crate::sys::pipe::AnonPipe;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::process::{CommandEnv, CommandEnvs};\n \n pub use crate::ffi::OsString as EnvKey;\n@@ -94,7 +94,7 @@ impl fmt::Debug for Command {\n     }\n }\n \n-pub struct ExitStatus(Void);\n+pub struct ExitStatus(!);\n \n impl ExitStatus {\n     pub fn success(&self) -> bool {\n@@ -146,7 +146,7 @@ impl ExitCode {\n     }\n }\n \n-pub struct Process(Void);\n+pub struct Process(!);\n \n impl Process {\n     pub fn id(&self) -> u32 {"}, {"sha": "7d5d2c6115757939fa39728ca092127a5eb143d0", "filename": "library/std/src/sys/unsupported/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -1,9 +1,9 @@\n-use super::{unsupported, Void};\n+use super::unsupported;\n use crate::ffi::CStr;\n use crate::io;\n use crate::time::Duration;\n \n-pub struct Thread(Void);\n+pub struct Thread(!);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n "}, {"sha": "30c21a05a327477dc7773611d664dd69aba88a10", "filename": "library/std/src/sys/wasi/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fnet.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -5,7 +5,7 @@ use crate::convert::TryFrom;\n use crate::fmt;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::net::{Ipv4Addr, Ipv6Addr, Shutdown, SocketAddr};\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::sys_common::FromInner;\n use crate::time::Duration;\n \n@@ -343,7 +343,7 @@ impl fmt::Debug for UdpSocket {\n     }\n }\n \n-pub struct LookupHost(Void);\n+pub struct LookupHost(!);\n \n impl LookupHost {\n     pub fn port(&self) -> u16 {"}, {"sha": "a349c149249f444e0c1572eefb811a588db643a8", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -10,7 +10,7 @@ use crate::os::wasi::prelude::*;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sys::memchr;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::vec;\n \n // Add a few symbols not in upstream `libc` just yet.\n@@ -87,7 +87,7 @@ pub fn chdir(p: &path::Path) -> io::Result<()> {\n     }\n }\n \n-pub struct SplitPaths<'a>(&'a Void);\n+pub struct SplitPaths<'a>(&'a !);\n \n pub fn split_paths(_unparsed: &OsStr) -> SplitPaths<'_> {\n     panic!(\"unsupported\")"}, {"sha": "2efa91f8b701100bbfe33c10231efd08a4441f77", "filename": "library/std/src/sys/wasi/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fthread.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -3,10 +3,10 @@\n use crate::ffi::CStr;\n use crate::io;\n use crate::mem;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::time::Duration;\n \n-pub struct Thread(Void);\n+pub struct Thread(!);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n "}, {"sha": "77f8c79ced9290f3430f7c6555b8ee2d1604fb86", "filename": "library/std/src/sys/wasm/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/389fef3b304bd4f196a337797591d9f8db998a62/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fthread.rs?ref=389fef3b304bd4f196a337797591d9f8db998a62", "patch": "@@ -1,9 +1,9 @@\n use crate::ffi::CStr;\n use crate::io;\n-use crate::sys::{unsupported, Void};\n+use crate::sys::unsupported;\n use crate::time::Duration;\n \n-pub struct Thread(Void);\n+pub struct Thread(!);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n "}]}