{"sha": "01b2379e4902658de68fcdca2a15b48fe4d57875", "node_id": "C_kwDOAAsO6NoAKDAxYjIzNzllNDkwMjY1OGRlNjhmY2RjYTJhMTViNDhmZTRkNTc4NzU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-21T02:25:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-19T03:07:54Z"}, "message": "Mention first and last macro in backtrace", "tree": {"sha": "4870efd0d9315ad6188f1c5f5ee763823ebd1afc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4870efd0d9315ad6188f1c5f5ee763823ebd1afc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b2379e4902658de68fcdca2a15b48fe4d57875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b2379e4902658de68fcdca2a15b48fe4d57875", "html_url": "https://github.com/rust-lang/rust/commit/01b2379e4902658de68fcdca2a15b48fe4d57875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b2379e4902658de68fcdca2a15b48fe4d57875/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "475aec11886250ec93fbb6e8e1e3dbd4b35dfc89", "url": "https://api.github.com/repos/rust-lang/rust/commits/475aec11886250ec93fbb6e8e1e3dbd4b35dfc89", "html_url": "https://github.com/rust-lang/rust/commit/475aec11886250ec93fbb6e8e1e3dbd4b35dfc89"}], "stats": {"total": 301, "additions": 157, "deletions": 144}, "files": [{"sha": "61d953cd6f1ccb71e36f92c96ab40fdd4853f641", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -399,11 +399,11 @@ pub trait Emitter {\n     ) {\n         // Check for spans in macros, before `fix_multispans_in_extern_macros`\n         // has a chance to replace them.\n-        let has_macro_spans = iter::once(&*span)\n+        let has_macro_spans: Vec<_> = iter::once(&*span)\n             .chain(children.iter().map(|child| &child.span))\n             .flat_map(|span| span.primary_spans())\n             .flat_map(|sp| sp.macro_backtrace())\n-            .find_map(|expn_data| {\n+            .filter_map(|expn_data| {\n                 match expn_data.kind {\n                     ExpnKind::Root => None,\n \n@@ -413,7 +413,8 @@ pub trait Emitter {\n \n                     ExpnKind::Macro(macro_kind, name) => Some((macro_kind, name)),\n                 }\n-            });\n+            })\n+            .collect();\n \n         if !backtrace {\n             self.fix_multispans_in_extern_macros(source_map, span, children);\n@@ -422,11 +423,22 @@ pub trait Emitter {\n         self.render_multispans_macro_backtrace(span, children, backtrace);\n \n         if !backtrace {\n-            if let Some((macro_kind, name)) = has_macro_spans {\n-                let descr = macro_kind.descr();\n+            if let Some((macro_kind, name)) = has_macro_spans.first() {\n+                // Mark the actual macro this originates from\n+                let and_then = if let Some((macro_kind, last_name)) = has_macro_spans.last()\n+                    && last_name != name\n+                {\n+                    let descr = macro_kind.descr();\n+                    format!(\n+                        \" which comes from the expansion of the {descr} `{last_name}`\",\n+                    )\n+                } else {\n+                    \"\".to_string()\n+                };\n \n+                let descr = macro_kind.descr();\n                 let msg = format!(\n-                    \"this {level} originates in the {descr} `{name}` \\\n+                    \"this {level} originates in the {descr} `{name}`{and_then} \\\n                     (in Nightly builds, run with -Z macro-backtrace for more info)\",\n                 );\n "}, {"sha": "b173ac0e916b8fd2af682d92643d5bb237cce340", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -6,6 +6,7 @@\n #![feature(drain_filter)]\n #![feature(backtrace)]\n #![feature(if_let_guard)]\n+#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(adt_const_params)]"}, {"sha": "5abf07a3118d814f1a1e8fb28d190e56910a5956", "filename": "src/test/ui/borrowck/borrowck-and-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-and-init.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -9,7 +9,7 @@ LL |     println!(\"{}\", false && { i = 5; true });\n LL |     println!(\"{}\", i);\n    |                    ^ `i` used here but it is possibly-uninitialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "91038b3adca9d0f8dcab38064738bf47cdbe84d6", "filename": "src/test/ui/borrowck/borrowck-break-uninit-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit-2.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -7,7 +7,7 @@ LL |     let x: isize;\n LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8d0c9582fda9259fd87d3513122d9792aaf695f8", "filename": "src/test/ui/borrowck/borrowck-break-uninit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-break-uninit.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -7,7 +7,7 @@ LL |     let x: isize;\n LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "16d66bf40d1097cbcfb7420783f1a421522717dc", "filename": "src/test/ui/borrowck/borrowck-or-init.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-or-init.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -9,7 +9,7 @@ LL |     println!(\"{}\", false || { i = 5; true });\n LL |     println!(\"{}\", i);\n    |                    ^ `i` used here but it is possibly-uninitialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "13143d436df8e6826b89ad7bf862e66abdefe74d", "filename": "src/test/ui/borrowck/borrowck-while-break.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-while-break.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -9,7 +9,7 @@ LL |     while cond {\n LL |     println!(\"{}\", v);\n    |                    ^ `v` used here but it is possibly-uninitialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b85e8f216e5df0e28a3704cb4674f2550fed3077", "filename": "src/test/ui/borrowck/issue-24267-flow-exit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-24267-flow-exit.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -7,7 +7,7 @@ LL |     loop { x = break; }\n LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0381]: used binding `x` isn't initialized\n   --> $DIR/issue-24267-flow-exit.rs:18:20\n@@ -18,7 +18,7 @@ LL |     for _ in 0..10 { x = continue; }\n LL |     println!(\"{}\", x);\n    |                    ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1f8a1acb89f50a8c3afdfc12fcfea516a6b0e5d3", "filename": "src/test/ui/borrowck/issue-64453.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-64453.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -5,7 +5,7 @@ LL | static settings_dir: String = format!(\"\");\n    |                               ^^^^^^^^^^^\n    |\n    = help: add `#![feature(const_fmt_arguments_new)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const fn `format` in statics\n   --> $DIR/issue-64453.rs:4:31"}, {"sha": "fd591c7b563b25b81e2e991ac63e82fc2454a4a9", "filename": "src/test/ui/borrowck/issue-81899.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-81899.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -10,7 +10,7 @@ LL |     panic!()\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-81899.rs:12:5\n    |     inside `f::<[closure@$DIR/issue-81899.rs:4:31: 4:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/issue-81899.rs:4:23"}, {"sha": "a3582e780415771257db41e68ee251ef5d8730d9", "filename": "src/test/ui/borrowck/issue-88434-minimal-example.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-minimal-example.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -10,7 +10,7 @@ LL |     panic!()\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-minimal-example.rs:11:5\n    |     inside `f::<[closure@$DIR/issue-88434-minimal-example.rs:3:25: 3:28]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/issue-88434-minimal-example.rs:3:21"}, {"sha": "a6c65b302db10f6ec74f41c10bb454b7d897033c", "filename": "src/test/ui/borrowck/issue-88434-removal-index-should-be-less.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-88434-removal-index-should-be-less.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -10,7 +10,7 @@ LL |     panic!()\n    |     the evaluated program panicked at 'explicit panic', $DIR/issue-88434-removal-index-should-be-less.rs:11:5\n    |     inside `f::<[closure@$DIR/issue-88434-removal-index-should-be-less.rs:3:31: 3:34]>` at $SRC_DIR/std/src/panic.rs:LL:COL\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/issue-88434-removal-index-should-be-less.rs:3:23"}, {"sha": "984981ce2ea14c85a11b8ed87c03850633082754", "filename": "src/test/ui/borrowck/move-error-snippets.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-error-snippets.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -12,7 +12,7 @@ LL |         let a = $c;\n LL | sss!();\n    | ------ in this macro invocation\n    |\n-   = note: this error originates in the macro `aaa` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `aaa` which comes from the expansion of the macro `sss` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4f41060dc9842c8a304a2ea1bf2d81cec1b61fdb", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/arrays.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Farrays.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -82,7 +82,7 @@ LL |     println!(\"{}\", arr[3]);\n LL |     c();\n    |     - mutable borrow later used here\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0502]: cannot borrow `arr` as immutable because it is also borrowed as mutable\n   --> $DIR/arrays.rs:73:24"}, {"sha": "f8b178752351acbb2bc54d2cdd4953e04c2c40fc", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fbox.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -26,7 +26,7 @@ LL |\n LL |     c();\n    |     - mutable borrow later used here\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0506]: cannot assign to `e.0.0.m.x` because it is borrowed\n   --> $DIR/box.rs:55:5"}, {"sha": "93abbecf4e46d2ec52884165447f6415c290739a", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/repr_packed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Frepr_packed.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -9,7 +9,7 @@ LL |         println!(\"{}\", foo.x);\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n \n@@ -25,5 +25,5 @@ LL |         println!(\"{}\", foo.x);\n    = note: for more information, see issue #82523 <https://github.com/rust-lang/rust/issues/82523>\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n    = help: copy the field contents to a local variable, or replace the reference with a raw pointer and use `read_unaligned`/`write_unaligned` (loads and stores via `*p` must be properly aligned even when using raw pointers)\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "06157b2af7a07311f9c6f6bf9a742b89a45f6d0d", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/simple-struct-min-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fsimple-struct-min-capture.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -14,7 +14,7 @@ LL |\n LL |     c();\n    |     - mutable borrow later used here\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8f79beaa9e1b72fe7c991d6f802ad82fb685d16d", "filename": "src/test/ui/codemap_tests/bad-format-args.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Fbad-format-args.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected `,`, found `1`\n   --> $DIR/bad-format-args.rs:3:16"}, {"sha": "9072cc925ffff62298b68ea87927752fae4a3439", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -14,7 +14,7 @@ note: this function takes ownership of the receiver `self`, which moves `some_ve\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2953406ee4057f5ef832ef5a673add70f250b566", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -26,7 +26,7 @@ LL |     println!(\"{}\", FOO);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error; 2 warnings emitted\n \n@@ -60,5 +60,5 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "0f7be46072df580cc06007c2696b714fc55bd8fa", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,23 +4,23 @@ error[E0080]: evaluation of constant value failed\n LL | const Z: () = std::panic!(\"cheese\");\n    |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:9:16\n    |\n LL | const Z2: () = std::panic!();\n    |                ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:9:16\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:12:15\n    |\n LL | const Y: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` which comes from the expansion of the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:15:15\n@@ -36,39 +36,39 @@ error[E0080]: evaluation of constant value failed\n LL | const W: () = std::panic!(MSG);\n    |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:18:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:21:16\n    |\n LL | const W2: () = std::panic!(\"{}\", MSG);\n    |                ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:21:16\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:24:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n    |                    ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic.rs:24:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:27:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n    |                     ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:27:21\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:30:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:30:20\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` which comes from the expansion of the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:33:20\n@@ -84,15 +84,15 @@ error[E0080]: evaluation of constant value failed\n LL | const W_CORE: () = core::panic!(MSG);\n    |                    ^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:36:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic.rs:39:21\n    |\n LL | const W2_CORE: () = core::panic!(\"{}\", MSG);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic.rs:39:21\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 12 previous errors\n "}, {"sha": "192fa3a12c25c1bb0a13006480e4cba37677be48", "filename": "src/test/ui/consts/const-eval/const_panic_2021.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_2021.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,23 +4,23 @@ error[E0080]: evaluation of constant value failed\n LL | const A: () = std::panic!(\"bl\u00e5haj\");\n    |               ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'bl\u00e5haj', $DIR/const_panic_2021.rs:6:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:9:15\n    |\n LL | const B: () = std::panic!();\n    |               ^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:9:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:12:15\n    |\n LL | const C: () = std::unreachable!();\n    |               ^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:12:15\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2021` which comes from the expansion of the macro `std::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:15:15\n@@ -36,31 +36,31 @@ error[E0080]: evaluation of constant value failed\n LL | const E: () = std::panic!(\"{}\", MSG);\n    |               ^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:18:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `std::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:21:20\n    |\n LL | const A_CORE: () = core::panic!(\"shark\");\n    |                    ^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'shark', $DIR/const_panic_2021.rs:21:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:24:20\n    |\n LL | const B_CORE: () = core::panic!();\n    |                    ^^^^^^^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/const_panic_2021.rs:24:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:27:20\n    |\n LL | const C_CORE: () = core::unreachable!();\n    |                    ^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_2021.rs:27:20\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2021` which comes from the expansion of the macro `core::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_2021.rs:30:20\n@@ -76,7 +76,7 @@ error[E0080]: evaluation of constant value failed\n LL | const E_CORE: () = core::panic!(\"{}\", MSG);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^ the evaluated program panicked at 'hello', $DIR/const_panic_2021.rs:33:20\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `core::panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors\n "}, {"sha": "df19ed4a898612e25230fb2e3df64c55edb52450", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_bin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_bin.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,15 +4,15 @@ error[E0080]: evaluation of constant value failed\n LL | const Z: () = panic!(\"cheese\");\n    |               ^^^^^^^^^^^^^^^^ the evaluated program panicked at 'cheese', $DIR/const_panic_libcore_bin.rs:8:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:11:15\n    |\n LL | const Y: () = unreachable!();\n    |               ^^^^^^^^^^^^^^ the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic_libcore_bin.rs:11:15\n    |\n-   = note: this error originates in the macro `$crate::panic::unreachable_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::unreachable_2015` which comes from the expansion of the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_panic_libcore_bin.rs:14:15"}, {"sha": "a476b0f587fe116f91462f64c81f8716d34499d8", "filename": "src/test/ui/consts/const-eval/format.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fformat.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -5,7 +5,7 @@ LL |     panic!(\"{:?}\", 0);\n    |                    ^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-   = note: this error originates in the macro `$crate::const_format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const formatting macro in constant functions\n   --> $DIR/format.rs:11:22\n@@ -14,7 +14,7 @@ LL |     println!(\"{:?}\", 0);\n    |                      ^\n    |\n    = note: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `Arguments::<'a>::new_v1` is not yet stable as a const fn\n   --> $DIR/format.rs:11:5\n@@ -23,7 +23,7 @@ LL |     println!(\"{:?}\", 0);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: add `#![feature(const_fmt_arguments_new)]` to the crate attributes to enable\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0015]: cannot call non-const fn `_print` in constant functions\n   --> $DIR/format.rs:11:5\n@@ -52,7 +52,7 @@ LL |     panic!(\"{:?}\", 0);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::const_format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: erroneous constant used\n   --> $DIR/format.rs:11:14\n@@ -71,7 +71,7 @@ LL |     println!(\"{:?}\", 0);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n \n@@ -97,7 +97,7 @@ LL |     panic!(\"{:?}\", 0);\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::const_format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::const_format_args` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n error: erroneous constant used\n@@ -120,5 +120,5 @@ LL |     println!(\"{:?}\", 0);\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "3f67c38f82e014598dcc89432b5e124ca34eafc4", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -35,7 +35,7 @@ LL |     println!(\"{} {}\", X, Y);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-43197.rs:16:26\n@@ -51,7 +51,7 @@ LL |     println!(\"{} {}\", X, Y);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors; 4 warnings emitted\n \n@@ -100,7 +100,7 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n Future breakage diagnostic:\n warning: erroneous constant used\n@@ -116,5 +116,5 @@ LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "4c27ceea19bd063fbcf1e29491c1fdae2c3370df", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -36,5 +36,5 @@ LL | #![allow(const_err)]\n    |          ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this warning originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "fd7b40572c1bb7dd31f9294d2e1eedb51c5d4ceb", "filename": "src/test/ui/consts/const-eval/issue-85907.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-85907.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error: argument to `panic!()` in a const context must have type `&str`\n LL |     panic!(123);\n    |     ^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b26286411d2d673848c570267a6f8ce09e4de6e7", "filename": "src/test/ui/consts/const-eval/panic-assoc-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-assoc-never-type.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |     const VOID: ! = panic!();\n    |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-assoc-never-type.rs:10:21\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: erroneous constant used\n   --> $DIR/panic-assoc-never-type.rs:15:13"}, {"sha": "9728aed07223cb9b0e81b9d05de9dac5a6386ed8", "filename": "src/test/ui/consts/const-eval/panic-never-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpanic-never-type.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL | const VOID: ! = panic!();\n    |                 ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/panic-never-type.rs:5:17\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "99178ae8c83d1bddfbcc430d905cd158aee4552a", "filename": "src/test/ui/consts/const-eval/unwind-abort.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funwind-abort.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -10,7 +10,7 @@ LL |     panic!()\n LL | const _: () = foo();\n    |               ----- inside `_` at $DIR/unwind-abort.rs:7:15\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "d6e993a10101d711d6815c50bebf2dc391885255", "filename": "src/test/ui/consts/const-float-bits-reject-conv.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-float-bits-reject-conv.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -25,7 +25,7 @@ LL |     called_in_const.call_once(arg)\n LL |     const MASKED_NAN1: u32 = f32::NAN.to_bits() ^ 0x002A_AAAA;\n    |                              ------------------ inside `f32::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:27:30\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f32.rs:LL:COL\n@@ -54,7 +54,7 @@ LL |     called_in_const.call_once(arg)\n LL |     const MASKED_NAN2: u32 = f32::NAN.to_bits() ^ 0x0055_5555;\n    |                              ------------------ inside `f32::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:28:30\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:30:34\n@@ -132,7 +132,7 @@ LL |     called_in_const.call_once(arg)\n LL |     const MASKED_NAN1: u64 = f64::NAN.to_bits() ^ 0x000A_AAAA_AAAA_AAAA;\n    |                              ------------------ inside `f64::MASKED_NAN1` at $DIR/const-float-bits-reject-conv.rs:54:30\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $SRC_DIR/core/src/num/f64.rs:LL:COL\n@@ -161,7 +161,7 @@ LL |     called_in_const.call_once(arg)\n LL |     const MASKED_NAN2: u64 = f64::NAN.to_bits() ^ 0x0005_5555_5555_5555;\n    |                              ------------------ inside `f64::MASKED_NAN2` at $DIR/const-float-bits-reject-conv.rs:55:30\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n   --> $DIR/const-float-bits-reject-conv.rs:57:34"}, {"sha": "cae5163f0df92d9b33bf5bb2fea707c54d150927", "filename": "src/test/ui/consts/issue-32829.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-32829.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error[E0080]: could not evaluate static initializer\n LL | static S : u64 = { { panic!(\"foo\"); 0 } };\n    |                      ^^^^^^^^^^^^^ the evaluated program panicked at 'foo', $DIR/issue-32829.rs:1:22\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1585ea317d9b168f0450501074ae8713df14f0e6", "filename": "src/test/ui/consts/issue-66693-panic-in-array-len.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693-panic-in-array-len.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,15 +4,15 @@ error: argument to `panic!()` in a const context must have type `&str`\n LL |     let _ = [0i32; panic!(2f32)];\n    |                    ^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-66693-panic-in-array-len.rs:10:21\n    |\n LL |     let _ = [false; panic!()];\n    |                     ^^^^^^^^ the evaluated program panicked at 'explicit panic', $DIR/issue-66693-panic-in-array-len.rs:10:21\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5460cc1ee82a46a0f6e3d017ae3fded61dc25533", "filename": "src/test/ui/consts/issue-66693.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66693.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,23 +4,23 @@ error: argument to `panic!()` in a const context must have type `&str`\n LL | const _: () = panic!(1);\n    |               ^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n   --> $DIR/issue-66693.rs:7:19\n    |\n LL | static _FOO: () = panic!(true);\n    |                   ^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument to `panic!()` in a const context must have type `&str`\n   --> $DIR/issue-66693.rs:11:5\n    |\n LL |     panic!(&1);\n    |     ^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: erroneous constant used\n   --> $DIR/issue-66693.rs:11:12"}, {"sha": "67b2e90db7508a955f1f529d4c0ac467eab912ed", "filename": "src/test/ui/consts/issue-76064.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-76064.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL | struct Bug([u8; panic!(\"panic\")]);\n    |                 ^^^^^^^^^^^^^^^ the evaluated program panicked at 'panic', $DIR/issue-76064.rs:1:17\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "5bd4ea97e9cd299d70ed338abb886c924cf79dad", "filename": "src/test/ui/cross/cross-crate-macro-backtrace/main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcross%2Fcross-crate-macro-backtrace%2Fmain.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error: 1 positional argument in format string, but no arguments were given\n LL |     myprintln!(\"{}\");\n    |     ^^^^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat` which comes from the expansion of the macro `myprintln` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8238b3f0e49712588ec8bb2b7005289b88e7f1c3", "filename": "src/test/ui/expr/if/if-let.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-let.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -27,7 +27,7 @@ LL | |     });\n    |\n    = note: this pattern will always match, so the `if let` is useless\n    = help: consider replacing the `if let` with a `let`\n-   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `foo` which comes from the expansion of the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `if let` pattern\n   --> $DIR/if-let.rs:26:8"}, {"sha": "d181fe14107e74ba29e999b844e42b1e5017942e", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -308,7 +308,7 @@ note: associated function defined here\n    |\n LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n    |            ^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:81:35\n@@ -326,7 +326,7 @@ note: associated function defined here\n    |\n LL |     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n    |            ^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 36 previous errors\n "}, {"sha": "dbcb2eb6693dd9e4cb0577aa09150e0f4a44b27e", "filename": "src/test/ui/fmt/ifmt-unimpl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-unimpl.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -20,7 +20,7 @@ note: required by a bound in `ArgumentV1::<'a>::new_upper_hex`\n    |\n LL |     arg_new!(new_upper_hex, UpperHex);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `ArgumentV1::<'a>::new_upper_hex`\n-   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `arg_new` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "2d23a637361ece9b0d0c236aecf2f49b64346dae", "filename": "src/test/ui/for-loop-while/while-let-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Fwhile-let-2.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -27,7 +27,7 @@ LL | |     });\n    |\n    = note: this pattern will always match, so the loop will never exit\n    = help: consider instead using a `loop { ... }` with a `let` inside it\n-   = note: this warning originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this warning originates in the macro `foo` which comes from the expansion of the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n warning: irrefutable `while let` pattern\n   --> $DIR/while-let-2.rs:27:11"}, {"sha": "47147f9c05d781a52bb521017df91b0a6172ec6d", "filename": "src/test/ui/generator/yield-while-ref-reborrowed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fyield-while-ref-reborrowed.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -11,7 +11,7 @@ LL |     println!(\"{}\", x);\n LL |     Pin::new(&mut b).resume(());\n    |              ------ first borrow later used here\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "f0f9bfb8d234f72d90cdcff0e7036f3b4d104a91", "filename": "src/test/ui/internal/internal-unstable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -40,7 +40,7 @@ LL |     bar!(internal_unstable::unstable());\n    |     ----------------------------------- in this macro invocation\n    |\n    = help: add `#![feature(function)]` to the crate attributes to enable\n-   = note: this error originates in the macro `foo` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `foo` which comes from the expansion of the macro `bar` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 5 previous errors\n "}, {"sha": "8524a62a0a42d2cb750114c81087f487b554b2e6", "filename": "src/test/ui/issues/issue-16966.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16966.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     panic!(std::default::Default::default());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `M` declared on the function `begin_panic`\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2015` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider specifying the generic argument\n   --> $SRC_DIR/std/src/panic.rs:LL:COL\n    |"}, {"sha": "f3e0e7b20a1784644f753ab8dad746a205069144", "filename": "src/test/ui/issues/issue-42796.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -9,7 +9,7 @@ LL |     let mut s_copy = s;\n LL |     println!(\"{}\", s);\n    |                    ^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "84cf9237a56d2848d36c9de184f870bae30d08a4", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -13,7 +13,7 @@ LL |             println!(\"{:?}\", heap);\n LL |     };\n    |      - ... and the mutable borrow might be used here, when that temporary is dropped and runs the destructor for type `(Option<PeekMut<'_, i32>>, ())`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b732df764e57f05289e59850a6dac6654c982729", "filename": "src/test/ui/issues/issue-69455.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69455.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error[E0282]: type annotations needed\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum()));\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the associated function `new_display`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider specifying the generic argument\n    |\n LL |     println!(\"{}\", 23u64.test(xs.iter().sum())::<T>);"}, {"sha": "6c3683d78961df54e34ca1b951a849290ad01bc0", "filename": "src/test/ui/limits/issue-55878.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flimits%2Fissue-55878.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -18,7 +18,7 @@ LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n \n@@ -33,5 +33,5 @@ LL |     println!(\"Size: {}\", std::mem::size_of::<[u8; u64::MAX as usize]>());\n    = note: `#[deny(const_err)]` on by default\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "b04a05fe40906ace4dce7bc37867e8f461fbb224", "filename": "src/test/ui/liveness/liveness-move-in-while.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -29,7 +29,7 @@ LL |         println!(\"{}\", y);\n LL |         while true { while true { while true { x = y; x.clone(); } } }\n    |                                                    - value moved here, in previous iteration of loop\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "218b93c8e4f4517aa69c94fcc7f22dfcf15034ee", "filename": "src/test/ui/liveness/liveness-use-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -9,7 +9,7 @@ LL |\n LL |     println!(\"{}\", *x);\n    |                    ^^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "8edc0463fe57157ce095590f0c4efb10f77bc625", "filename": "src/test/ui/liveness/liveness-use-after-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -8,7 +8,7 @@ LL |     send(ch, message);\n LL |     println!(\"{}\", message);\n    |                    ^^^^^^^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "14e86aee059b2c6f4c6e62fef6071bb86871fd84", "filename": "src/test/ui/loops/loop-proper-liveness.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Floops%2Floop-proper-liveness.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -7,7 +7,7 @@ LL |     let x: i32;\n LL |     println!(\"{:?}\", x);\n    |                      ^ `x` used here but it isn't initialized\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9ed4b3525e1d0f5660a311e6f971c6004161b01a", "filename": "src/test/ui/macro_backtrace/main.default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacro_backtrace%2Fmain.default.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -18,7 +18,7 @@ LL |     () => { syntax error };\n LL |     ping!();\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in the macro `pong` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pong` which comes from the expansion of the macro `ping` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `error`\n   --> $DIR/main.rs:10:20\n@@ -29,7 +29,7 @@ LL |     () => { syntax error };\n LL |     deep!();\n    |     ------- in this macro invocation\n    |\n-   = note: this error originates in the macro `pong` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `pong` which comes from the expansion of the macro `deep` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1a7578e6076eb98bcb386cb4bd22128e5419af7d", "filename": "src/test/ui/macros/format-parse-errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fformat-parse-errors.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error: requires at least a format string argument\n LL |     format!();\n    |     ^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: expected expression, found keyword `struct`\n   --> $DIR/format-parse-errors.rs:5:13"}, {"sha": "dadedfbe8f6714c35ef0bae117845f33dd4b3d74", "filename": "src/test/ui/macros/macro-backtrace-nested.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-nested.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -7,7 +7,7 @@ LL |     () => (fake)\n LL |     1 + call_nested_expr!();\n    |         ------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `nested_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `nested_expr` which comes from the expansion of the macro `call_nested_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `fake` in this scope\n   --> $DIR/macro-backtrace-nested.rs:5:12\n@@ -18,7 +18,7 @@ LL |     () => (fake)\n LL |     call_nested_expr_sum!();\n    |     ----------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `nested_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `nested_expr` which comes from the expansion of the macro `call_nested_expr_sum` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b4e2883e83716660c0716513bae169198877cb33", "filename": "src/test/ui/macros/macro-backtrace-println.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-backtrace-println.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -7,7 +7,7 @@ LL |     ($fmt:expr) => (myprint!(concat!($fmt, \"\\n\")));\n LL |     myprintln!(\"{}\");\n    |     ---------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `concat` which comes from the expansion of the macro `myprintln` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "fb8cab2794bc6952f6d7f23d63ae376ce005e5e9", "filename": "src/test/ui/macros/macro-local-data-key-priv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -9,7 +9,7 @@ note: the constant `baz` is defined here\n    |\n LL |     thread_local!(static baz: f64 = 0.0);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::__thread_local_inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__thread_local_inner` which comes from the expansion of the macro `thread_local` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "b8865112ed52e3b7774e146262dcc271e0f1c6e0", "filename": "src/test/ui/macros/restricted-shadowing-legacy.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-legacy.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -24,7 +24,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-legacy.rs:139:42\n@@ -52,7 +52,7 @@ LL |         macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-legacy.rs:148:9\n@@ -136,7 +136,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-legacy.rs:218:42\n@@ -164,7 +164,7 @@ LL |         macro_rules! m { () => { Wrong } }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-legacy.rs:232:9\n@@ -220,7 +220,7 @@ LL |             macro_rules! m { () => {} }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 8 previous errors\n "}, {"sha": "27665bfc31044f69d3384140a68f0822bfe39ae3", "filename": "src/test/ui/macros/restricted-shadowing-modern.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Frestricted-shadowing-modern.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -24,7 +24,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-modern.rs:147:33\n@@ -52,7 +52,7 @@ LL |         macro m() {}\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-modern.rs:156:13\n@@ -136,7 +136,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_gen_inner_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_gen_inner_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0659]: `m` is ambiguous\n   --> $DIR/restricted-shadowing-modern.rs:233:33\n@@ -164,7 +164,7 @@ LL |         macro m() { Wrong }\n ...\n LL | include!();\n    | ---------- in this macro invocation\n-   = note: this error originates in the macro `gen_invoc` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `gen_invoc` which comes from the expansion of the macro `include` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2cc2e134bfdf658c73ac09732135a29537d070ed", "filename": "src/test/ui/macros/unreachable-format-args.edition_2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funreachable-format-args.edition_2015.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -6,7 +6,7 @@ LL |     unreachable!(\"x is {x} and y is {y}\", y = 0);\n    |\n    = note: did you intend to capture a variable `x` from the surrounding scope?\n    = note: to avoid ambiguity, `format_args!` cannot capture variables when the format string is expanded from a macro\n-   = note: this error originates in the macro `$crate::concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::concat` which comes from the expansion of the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "34b7ea658671872aebd739f2699089ef36c10038", "filename": "src/test/ui/moves/moves-based-on-type-capture-clause-bad.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-capture-clause-bad.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -11,7 +11,7 @@ LL |     });\n LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "1035da54d8a775d98307ddf16e7c0a34d56c16dc", "filename": "src/test/ui/on-unimplemented/no-debug.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -6,7 +6,7 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    |\n    = help: the trait `Debug` is not implemented for `Foo`\n    = note: add `#[derive(Debug)]` to `Foo` or manually `impl Debug for Foo`\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Foo` with `#[derive(Debug)]`\n    |\n LL | #[derive(Debug)]\n@@ -19,7 +19,7 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    |                                ^^^ `Bar` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `Bar`\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Foo` doesn't implement `std::fmt::Display`\n   --> $DIR/no-debug.rs:11:23\n@@ -29,7 +29,7 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Foo`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `Bar` doesn't implement `std::fmt::Display`\n   --> $DIR/no-debug.rs:11:28\n@@ -39,7 +39,7 @@ LL |     println!(\"{} {}\", Foo, Bar);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Bar`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "9a2fffcced553c7fb8a8e189239499e341c1d36d", "filename": "src/test/ui/parser/macro/pub-item-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -24,7 +24,7 @@ LL |         static x: u32 = 0;\n ...\n LL |     pub_x!();\n    |     -------- in this macro invocation\n-   = note: this error originates in the macro `priv_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `priv_x` which comes from the expansion of the macro `pub_x` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "eab4317ded85d7315455be53edc528297769e404", "filename": "src/test/ui/proc-macro/mixed-site-span.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmixed-site-span.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -26,7 +26,7 @@ error[E0412]: cannot find type `ItemUse` in crate `$crate`\n LL | pass_dollar_crate!();\n    | ^^^^^^^^^^^^^^^^^^^^ not found in `$crate`\n    |\n-   = note: this error originates in the macro `proc_macro_rules` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `proc_macro_rules` which comes from the expansion of the macro `pass_dollar_crate` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "65ce24e55229684d72a7d7c01e20b1c9c41afbae", "filename": "src/test/ui/proc-macro/parent-source-spans.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fparent-source-spans.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -7,7 +7,7 @@ LL |     three!($a, $b);\n LL |     one!(\"hello\", \"world\");\n    |     ---------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `two` which comes from the expansion of the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: second final: \"world\"\n   --> $DIR/parent-source-spans.rs:16:16\n@@ -18,7 +18,7 @@ LL |     three!($a, $b);\n LL |     one!(\"hello\", \"world\");\n    |     ---------------------- in this macro invocation\n    |\n-   = note: this error originates in the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `two` which comes from the expansion of the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: first parent: \"hello\"\n   --> $DIR/parent-source-spans.rs:10:5\n@@ -150,7 +150,7 @@ LL |     one!(\"hello\", \"world\");\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     -- similarly named tuple variant `Ok` defined here\n    |\n-   = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `parent_source_spans` which comes from the expansion of the macro `one` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:29:5\n@@ -166,7 +166,7 @@ LL |     two!(\"yay\", \"rust\");\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     -- similarly named tuple variant `Ok` defined here\n    |\n-   = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `parent_source_spans` which comes from the expansion of the macro `two` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `ok` in this scope\n   --> $DIR/parent-source-spans.rs:29:5\n@@ -182,7 +182,7 @@ LL |     three!(\"hip\", \"hop\");\n LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n    |     -- similarly named tuple variant `Ok` defined here\n    |\n-   = note: this error originates in the macro `parent_source_spans` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `parent_source_spans` which comes from the expansion of the macro `three` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 21 previous errors\n "}, {"sha": "256e68e8970e685974a83436fbd64952956f395c", "filename": "src/test/ui/proc-macro/weird-hygiene.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fweird-hygiene.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -7,7 +7,7 @@ LL |             Value = (stringify!($tokens + hidden_ident), 1).1\n LL |     other!(50);\n    |     ---------- in this macro invocation\n    |\n-   = note: this error originates in the macro `inner` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `inner` which comes from the expansion of the macro `other` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0425]: cannot find value `hidden_ident` in this scope\n   --> $DIR/weird-hygiene.rs:34:13"}, {"sha": "d8b5a9e63643d8164d3b458fc38c0e3b6951eb4f", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -6,7 +6,7 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    |\n    = help: the trait `Debug` is not implemented for `NotDebug`\n    = note: add `#[derive(Debug)]` to `NotDebug` or manually `impl Debug for NotDebug`\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `dbg` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `NotDebug` with `#[derive(Debug)]`\n    |\n LL | #[derive(Debug)]"}, {"sha": "d53715937f7d841ed3be7007bfe747c91700d84f", "filename": "src/test/ui/suggestions/bound-suggestions.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -4,7 +4,7 @@ error[E0277]: `impl Sized` doesn't implement `Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `impl Sized` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_impl(t: impl Sized + std::fmt::Debug) {\n@@ -16,7 +16,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider restricting type parameter `T`\n    |\n LL | fn test_no_bounds<T: std::fmt::Debug>(t: T) {\n@@ -28,7 +28,7 @@ error[E0277]: `T` doesn't implement `Debug`\n LL |     println!(\"{:?}\", t);\n    |                      ^ `T` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_one_bound<T: Sized + std::fmt::Debug>(t: T) {\n@@ -40,7 +40,7 @@ error[E0277]: `Y` doesn't implement `Debug`\n LL |     println!(\"{:?} {:?}\", x, y);\n    |                              ^ `Y` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting type parameter `Y`\n    |\n LL | fn test_no_bounds_where<X, Y>(x: X, y: Y) where X: std::fmt::Debug, Y: std::fmt::Debug {\n@@ -52,7 +52,7 @@ error[E0277]: `X` doesn't implement `Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n@@ -64,7 +64,7 @@ error[E0277]: `X` doesn't implement `Debug`\n LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider further restricting this bound\n    |\n LL | fn test_many_bounds_where<X>(x: X) where X: Sized + std::fmt::Debug, X: Sized {"}, {"sha": "5dc4e64446fb279a108c543e53d3df62dd0f1da0", "filename": "src/test/ui/suggestions/dont-suggest-deref-inside-macro-issue-58298.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-suggest-deref-inside-macro-issue-58298.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -6,7 +6,7 @@ LL | |         \"abc\"\n LL | |     };\n    | |_____^ expected `&str`, found struct `String`\n    |\n-   = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `format` which comes from the expansion of the macro `intrinsic_match` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "bbcc3693fff5a3ae477f465d203f8a693e6dfe4a", "filename": "src/test/ui/suggestions/issue-97760.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-97760.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -6,7 +6,7 @@ LL |         println!(\"{x}\");\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `<impl IntoIterator as IntoIterator>::Item`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: introduce a type parameter with a trait bound instead of using `impl Trait`\n    |\n LL ~ pub fn print_values<I: IntoIterator>(values: &I)"}, {"sha": "8359b36588e6bcc9684afb37ccf1455ef8632921", "filename": "src/test/ui/suggestions/path-display.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpath-display.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -6,7 +6,7 @@ LL |     println!(\"{}\", path);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `Path`\n    = note: call `.display()` or `.to_string_lossy()` to safely print paths, as they may contain non-Unicode data\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `PathBuf` doesn't implement `std::fmt::Display`\n   --> $DIR/path-display.rs:9:20\n@@ -16,7 +16,7 @@ LL |     println!(\"{}\", path);\n    |\n    = help: the trait `std::fmt::Display` is not implemented for `PathBuf`\n    = note: call `.display()` or `.to_string_lossy()` to safely print paths, as they may contain non-Unicode data\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c9f2a3ed9f4bf9a19e528ef5d5661c94ba52fb2a", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -22,7 +22,7 @@ LL |         };\n LL |         println!(\"{}\", x);\n    |                        ^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-maybe-bad-lifetime.rs:40:9"}, {"sha": "732af5c0b561f61e05ada9bc24472c1c70dcfe61", "filename": "src/test/ui/type-alias-impl-trait/nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -5,7 +5,7 @@ LL |     println!(\"{:?}\", bar());\n    |                      ^^^^^ `Bar` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = help: the trait `Debug` is not implemented for `Bar`\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "0f90fce3a42b9676d26b661d6340878035a7b8a9", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -10,7 +10,7 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`\n-   = note: this error originates in the macro `$crate::__rust_force_expr` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::__rust_force_expr` which comes from the expansion of the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "445f14d65e3ce74475eb0aeff88fea7458006bc6", "filename": "src/test/ui/use/use-after-move-based-on-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -8,7 +8,7 @@ LL |     let _y = x;\n LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n    |\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "4384e345e85c72cbb24ed3e3e68e1f4e8c237fb7", "filename": "src/test/ui/walk-struct-literal-with.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwalk-struct-literal-with.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -13,7 +13,7 @@ note: this function takes ownership of the receiver `self`, which moves `start`\n    |\n LL |     fn make_string_bar(mut self) -> Mine{\n    |                            ^^^^\n-   = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error\n "}, {"sha": "9c91d935716d893b186f2529ab67261ee73084e3", "filename": "src/tools/clippy/tests/ui/diverging_sub_expression.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdiverging_sub_expression.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -36,7 +36,7 @@ error: sub-expression diverges\n LL |                 _ => true || panic!(\"boo\"),\n    |                              ^^^^^^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: sub-expression diverges\n   --> $DIR/diverging_sub_expression.rs:38:26"}, {"sha": "d637dbce5d79294a603e0d69abe2510e3f47b1cd", "filename": "src/tools/clippy/tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffallible_impl_from.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -38,7 +38,7 @@ note: potential failure(s)\n    |\n LL |             panic!();\n    |             ^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:35:1\n@@ -65,7 +65,7 @@ LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n   --> $DIR/fallible_impl_from.rs:53:1\n@@ -87,7 +87,7 @@ LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n    |             ^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8d8c29f138587858b2bdf5ec63b9c1638c351201", "filename": "src/tools/clippy/tests/ui/issue-7447.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-7447.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01b2379e4902658de68fcdca2a15b48fe4d57875/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-7447.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fissue-7447.stderr?ref=01b2379e4902658de68fcdca2a15b48fe4d57875", "patch": "@@ -5,15 +5,15 @@ LL |     byte_view(panic!());\n    |               ^^^^^^^^\n    |\n    = note: `-D clippy::diverging-sub-expression` implied by `-D warnings`\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: sub-expression diverges\n   --> $DIR/issue-7447.rs:24:19\n    |\n LL |     group_entries(panic!());\n    |                   ^^^^^^^^\n    |\n-   = note: this error originates in the macro `$crate::panic::panic_2021` (in Nightly builds, run with -Z macro-backtrace for more info)\n+   = note: this error originates in the macro `$crate::panic::panic_2021` which comes from the expansion of the macro `panic` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 2 previous errors\n "}]}