{"sha": "f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzN2U2OWViYjA1YWFjOGVlNTNmNGUzMWU4YmJlZjU4OTdmNDRlZTY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-12-30T14:24:24Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-12-30T14:24:24Z"}, "message": "Rollup merge of #30502 - Luke-Nukem:master, r=steveklabnik\n\nRewrite of a paragraph in in the `match` section.\n\nThe colon `:` should be used only when the sentence preceeding it is a\ncomplete sentence. If this is not the case, then a `;` should be used;\nthis denotes that the following fragment is a part of the previous\nfragment.\n\nI got a new bike; it has two wheels. (Similar to I got a new bike, it has two wheels)\nThe ice cream truck has great flavours; blueberry, blackberry, berryberry.\n\nWriting a complete sentence:\n- with a list under it\n- You can join two sentences with it: Much like this.\n\nr? @steveklabnik", "tree": {"sha": "556bb9eef7cc8bc8adbb01b3479bc497865bc54d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/556bb9eef7cc8bc8adbb01b3479bc497865bc54d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6", "html_url": "https://github.com/rust-lang/rust/commit/f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1f854ab771b7fc9beb057989ca2a17c2522c2ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f854ab771b7fc9beb057989ca2a17c2522c2ac", "html_url": "https://github.com/rust-lang/rust/commit/d1f854ab771b7fc9beb057989ca2a17c2522c2ac"}, {"sha": "1522350ecc2e9c9f35ece84919924cb319c0e69e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1522350ecc2e9c9f35ece84919924cb319c0e69e", "html_url": "https://github.com/rust-lang/rust/commit/1522350ecc2e9c9f35ece84919924cb319c0e69e"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "86c07f9cf6c18673d70361c9a3b067e19b8bcf77", "filename": "src/doc/book/documentation.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6/src%2Fdoc%2Fbook%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6/src%2Fdoc%2Fbook%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fdocumentation.md?ref=f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6", "patch": "@@ -73,7 +73,7 @@ hello.rs:4 }\n ```\n \n This [unfortunate error](https://github.com/rust-lang/rust/issues/22547) is\n-correct: documentation comments apply to the thing after them, and there's\n+correct; documentation comments apply to the thing after them, and there's\n nothing after that last comment.\n \n [rc-new]: https://doc.rust-lang.org/nightly/std/rc/struct.Rc.html#method.new\n@@ -385,7 +385,7 @@ error handling. Lets say you want the following,\n \n ```rust,ignore\n /// use std::io;\n-/// let mut input = String::new(); \n+/// let mut input = String::new();\n /// try!(io::stdin().read_line(&mut input));\n ```\n \n@@ -398,7 +398,7 @@ don't return anything so this will give a mismatched types error.\n /// ```\n /// use std::io;\n /// # fn foo() -> io::Result<()> {\n-/// let mut input = String::new(); \n+/// let mut input = String::new();\n /// try!(io::stdin().read_line(&mut input));\n /// # Ok(())\n /// # }"}, {"sha": "acffaf4544b10182466cc619365a42d62015969e", "filename": "src/doc/book/match.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6/src%2Fdoc%2Fbook%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6/src%2Fdoc%2Fbook%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmatch.md?ref=f37e69ebb05aac8ee53f4e31e8bbef5897f44ee6", "patch": "@@ -23,26 +23,24 @@ match x {\n `match` takes an expression and then branches based on its value. Each \u2018arm\u2019 of\n the branch is of the form `val => expression`. When the value matches, that arm\u2019s\n expression will be evaluated. It\u2019s called `match` because of the term \u2018pattern\n-matching\u2019, which `match` is an implementation of. There\u2019s an [entire section on\n+matching\u2019, which `match` is an implementation of. There\u2019s a [separate section on\n patterns][patterns] that covers all the patterns that are possible here.\n \n [patterns]: patterns.html\n \n-So what\u2019s the big advantage? Well, there are a few. First of all, `match`\n-enforces \u2018exhaustiveness checking\u2019. Do you see that last arm, the one with the\n-underscore (`_`)? If we remove that arm, Rust will give us an error:\n+One of the many advantages of `match` is it enforces \u2018exhaustiveness checking\u2019. \n+For example if we remove the last arm with the underscore `_`, the compiler will \n+give us an error:\n \n ```text\n error: non-exhaustive patterns: `_` not covered\n ```\n \n-In other words, Rust is trying to tell us we forgot a value. Because `x` is an\n-integer, Rust knows that it can have a number of different values \u2013 for\n-example, `6`. Without the `_`, however, there is no arm that could match, and\n-so Rust refuses to compile the code. `_` acts like a \u2018catch-all arm\u2019. If none\n-of the other arms match, the arm with `_` will, and since we have this\n-catch-all arm, we now have an arm for every possible value of `x`, and so our\n-program will compile successfully.\n+Rust is telling us that we forgot a value. The compiler infers from `x` that it\n+can have any positive 32bit value; for example 1 to 2,147,483,647. The `_` acts \n+as a 'catch-all', and will catch all possible values that *aren't* specified in \n+an arm of `match`. As you can see with the previous example, we provide `match` \n+arms for integers 1-5, if `x` is 6 or any other value, then it is caught by `_`.\n \n `match` is also an expression, which means we can use it on the right-hand\n side of a `let` binding or directly where an expression is used:\n@@ -60,7 +58,8 @@ let number = match x {\n };\n ```\n \n-Sometimes it\u2019s a nice way of converting something from one type to another.\n+Sometimes it\u2019s a nice way of converting something from one type to another; in \n+this example the integers are converted to `String`.\n \n # Matching on enums\n \n@@ -91,7 +90,8 @@ fn process_message(msg: Message) {\n \n Again, the Rust compiler checks exhaustiveness, so it demands that you\n have a match arm for every variant of the enum. If you leave one off, it\n-will give you a compile-time error unless you use `_`.\n+will give you a compile-time error unless you use `_` or provide all possible \n+arms.\n \n Unlike the previous uses of `match`, you can\u2019t use the normal `if`\n statement to do this. You can use the [`if let`][if-let] statement,"}]}