{"sha": "17dda0972a68dd88a766c223390317dc2cb3ea00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZGRhMDk3MmE2OGRkODhhNzY2YzIyMzM5MDMxN2RjMmNiM2VhMDA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-30T19:25:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-30T19:25:01Z"}, "message": "Merge #2693\n\n2693: Encapsulate inlay hints activation r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "67ef26be75ec5db5fd66761a67b65a09e42d363e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67ef26be75ec5db5fd66761a67b65a09e42d363e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17dda0972a68dd88a766c223390317dc2cb3ea00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCk8NCRBK7hj4Ov3rIwAAdHIIAKkZoX4Klg7DQ52JAqQkFpkX\nP2pU0YoQm4CS9RCQF8HtjqvHM3auzNe2g5E7LOPE1fhmWJXf5QHD3l/OfvKiuO9e\nKOGiJLgLw0lrZkAdf5HUX2Zfb+O2l8XeqbhS2iMRKFiQl31+JpfjQuhZRNQharyf\nwm9b5CDeaTcDTydlInpGixJ0naMu+9uSBAorft2fDJeKavZRwYBoiV84tlNOAPzm\nZFToaxgUYtvIF1UNFTZM+Un+vKVeotnxU1HzJW1M98f1uvpuPS1433QFc0MkDgAb\neu2FyW4t0jc7VQoMkNzjK0rU+01pt8oCki8XjieiGEold4L+j/5Hd2uktjPmJF4=\n=mEb+\n-----END PGP SIGNATURE-----\n", "payload": "tree 67ef26be75ec5db5fd66761a67b65a09e42d363e\nparent 237abb85c40672e8cdafa423db6187c107369a09\nparent 9ead314005afd835ca64b5db9117e1c495814e17\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577733901 +0000\ncommitter GitHub <noreply@github.com> 1577733901 +0000\n\nMerge #2693\n\n2693: Encapsulate inlay hints activation r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17dda0972a68dd88a766c223390317dc2cb3ea00", "html_url": "https://github.com/rust-lang/rust/commit/17dda0972a68dd88a766c223390317dc2cb3ea00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17dda0972a68dd88a766c223390317dc2cb3ea00/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "237abb85c40672e8cdafa423db6187c107369a09", "url": "https://api.github.com/repos/rust-lang/rust/commits/237abb85c40672e8cdafa423db6187c107369a09", "html_url": "https://github.com/rust-lang/rust/commit/237abb85c40672e8cdafa423db6187c107369a09"}, {"sha": "9ead314005afd835ca64b5db9117e1c495814e17", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ead314005afd835ca64b5db9117e1c495814e17", "html_url": "https://github.com/rust-lang/rust/commit/9ead314005afd835ca64b5db9117e1c495814e17"}], "stats": {"total": 294, "additions": 139, "deletions": 155}, "files": [{"sha": "89af4be900c408071e738a3ad05459af1162c58e", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=17dda0972a68dd88a766c223390317dc2cb3ea00", "patch": "@@ -1,3 +1,6 @@\n+import * as vscode from 'vscode';\n+import * as lc from 'vscode-languageclient';\n+\n import { Ctx, Cmd } from '../ctx';\n \n import { analyzerStatus } from './analyzer_status';\n@@ -7,24 +10,35 @@ import { onEnter } from './on_enter';\n import { parentModule } from './parent_module';\n import { syntaxTree } from './syntax_tree';\n import { expandMacro } from './expand_macro';\n-import * as inlayHints from './inlay_hints';\n-import * as runnables from './runnables';\n+import { run, runSingle } from './runnables';\n \n function collectGarbage(ctx: Ctx): Cmd {\n     return async () => {\n         ctx.client.sendRequest<null>('rust-analyzer/collectGarbage', null);\n     };\n }\n \n+function showReferences(ctx: Ctx): Cmd {\n+    return (uri: string, position: lc.Position, locations: lc.Location[]) => {\n+        vscode.commands.executeCommand(\n+            'editor.action.showReferences',\n+            vscode.Uri.parse(uri),\n+            ctx.client.protocol2CodeConverter.asPosition(position),\n+            locations.map(ctx.client.protocol2CodeConverter.asLocation),\n+        );\n+    };\n+}\n+\n export {\n     analyzerStatus,\n     expandMacro,\n     joinLines,\n     matchingBrace,\n     parentModule,\n-    runnables,\n     syntaxTree,\n     onEnter,\n-    inlayHints,\n     collectGarbage,\n+    run,\n+    runSingle,\n+    showReferences,\n };"}, {"sha": "fb5b9f7f2b2a6bb3541ea820ab3dd1125a141c9e", "filename": "editors/code/src/commands/line_buffer.ts", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Fline_buffer.ts", "raw_url": "https://github.com/rust-lang/rust/raw/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Fline_buffer.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fline_buffer.ts?ref=237abb85c40672e8cdafa423db6187c107369a09", "patch": "@@ -1,16 +0,0 @@\n-export class LineBuffer {\n-    private outBuffer: string = '';\n-\n-    public processOutput(chunk: string, cb: (line: string) => void) {\n-        this.outBuffer += chunk;\n-        let eolIndex = this.outBuffer.indexOf('\\n');\n-        while (eolIndex >= 0) {\n-            // line includes the EOL\n-            const line = this.outBuffer.slice(0, eolIndex + 1);\n-            cb(line);\n-            this.outBuffer = this.outBuffer.slice(eolIndex + 1);\n-\n-            eolIndex = this.outBuffer.indexOf('\\n');\n-        }\n-    }\n-}"}, {"sha": "8cd86c21e1d71ba078ae4d8ae29f9b1ea57e713b", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 61, "deletions": 61, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=17dda0972a68dd88a766c223390317dc2cb3ea00", "patch": "@@ -1,7 +1,67 @@\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n-import { Server } from '../server';\n+import { Ctx, Cmd } from '../ctx';\n+\n+export function run(ctx: Ctx): Cmd {\n+    let prevRunnable: RunnableQuickPick | undefined;\n+\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) return;\n+\n+        const textDocument: lc.TextDocumentIdentifier = {\n+            uri: editor.document.uri.toString(),\n+        };\n+        const params: RunnablesParams = {\n+            textDocument,\n+            position: ctx.client.code2ProtocolConverter.asPosition(\n+                editor.selection.active,\n+            ),\n+        };\n+        const runnables = await ctx.client.sendRequest<Runnable[]>(\n+            'rust-analyzer/runnables',\n+            params,\n+        );\n+        const items: RunnableQuickPick[] = [];\n+        if (prevRunnable) {\n+            items.push(prevRunnable);\n+        }\n+        for (const r of runnables) {\n+            if (\n+                prevRunnable &&\n+                JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n+            ) {\n+                continue;\n+            }\n+            items.push(new RunnableQuickPick(r));\n+        }\n+        const item = await vscode.window.showQuickPick(items);\n+        if (!item) return;\n+\n+        item.detail = 'rerun';\n+        prevRunnable = item;\n+        const task = createTask(item.runnable);\n+        return await vscode.tasks.executeTask(task);\n+    };\n+}\n+\n+export function runSingle(ctx: Ctx): Cmd {\n+    return async (runnable: Runnable) => {\n+        const editor = ctx.activeRustEditor;\n+        if (!editor) return;\n+\n+        const task = createTask(runnable);\n+        task.group = vscode.TaskGroup.Build;\n+        task.presentationOptions = {\n+            reveal: vscode.TaskRevealKind.Always,\n+            panel: vscode.TaskPanelKind.Dedicated,\n+            clear: true,\n+        };\n+\n+        return vscode.tasks.executeTask(task);\n+    };\n+}\n \n interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;\n@@ -67,63 +127,3 @@ function createTask(spec: Runnable): vscode.Task {\n     t.presentationOptions.clear = true;\n     return t;\n }\n-\n-let prevRunnable: RunnableQuickPick | undefined;\n-export async function handle(): Promise<vscode.TaskExecution | undefined> {\n-    const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') {\n-        return;\n-    }\n-    const textDocument: lc.TextDocumentIdentifier = {\n-        uri: editor.document.uri.toString(),\n-    };\n-    const params: RunnablesParams = {\n-        textDocument,\n-        position: Server.client.code2ProtocolConverter.asPosition(\n-            editor.selection.active,\n-        ),\n-    };\n-    const runnables = await Server.client.sendRequest<Runnable[]>(\n-        'rust-analyzer/runnables',\n-        params,\n-    );\n-    const items: RunnableQuickPick[] = [];\n-    if (prevRunnable) {\n-        items.push(prevRunnable);\n-    }\n-    for (const r of runnables) {\n-        if (\n-            prevRunnable &&\n-            JSON.stringify(prevRunnable.runnable) === JSON.stringify(r)\n-        ) {\n-            continue;\n-        }\n-        items.push(new RunnableQuickPick(r));\n-    }\n-    const item = await vscode.window.showQuickPick(items);\n-    if (!item) {\n-        return;\n-    }\n-\n-    item.detail = 'rerun';\n-    prevRunnable = item;\n-    const task = createTask(item.runnable);\n-    return await vscode.tasks.executeTask(task);\n-}\n-\n-export async function handleSingle(runnable: Runnable) {\n-    const editor = vscode.window.activeTextEditor;\n-    if (editor == null || editor.document.languageId !== 'rust') {\n-        return;\n-    }\n-\n-    const task = createTask(runnable);\n-    task.group = vscode.TaskGroup.Build;\n-    task.presentationOptions = {\n-        reveal: vscode.TaskRevealKind.Always,\n-        panel: vscode.TaskPanelKind.Dedicated,\n-        clear: true,\n-    };\n-\n-    return vscode.tasks.executeTask(task);\n-}"}, {"sha": "4581e22782f08011d2429753c5b41cc31dc45d83", "filename": "editors/code/src/inlay_hints.ts", "status": "renamed", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=17dda0972a68dd88a766c223390317dc2cb3ea00", "patch": "@@ -1,14 +1,49 @@\n import * as vscode from 'vscode';\n-import { Range, TextDocumentChangeEvent, TextEditor } from 'vscode';\n-import { TextDocumentIdentifier } from 'vscode-languageclient';\n-import { Server } from '../server';\n+import * as lc from 'vscode-languageclient';\n+import { Server } from './server';\n+import { Ctx } from './ctx';\n+\n+export function activateInlayHints(ctx: Ctx) {\n+    const hintsUpdater = new HintsUpdater();\n+    hintsUpdater.refreshHintsForVisibleEditors().then(() => {\n+        // vscode may ignore top level hintsUpdater.refreshHintsForVisibleEditors()\n+        // so update the hints once when the focus changes to guarantee their presence\n+        let editorChangeDisposable: vscode.Disposable | null = null;\n+        editorChangeDisposable = vscode.window.onDidChangeActiveTextEditor(\n+            _ => {\n+                if (editorChangeDisposable !== null) {\n+                    editorChangeDisposable.dispose();\n+                }\n+                return hintsUpdater.refreshHintsForVisibleEditors();\n+            },\n+        );\n+\n+        ctx.pushCleanup(\n+            vscode.window.onDidChangeVisibleTextEditors(_ =>\n+                hintsUpdater.refreshHintsForVisibleEditors(),\n+            ),\n+        );\n+        ctx.pushCleanup(\n+            vscode.workspace.onDidChangeTextDocument(e =>\n+                hintsUpdater.refreshHintsForVisibleEditors(e),\n+            ),\n+        );\n+        ctx.pushCleanup(\n+            vscode.workspace.onDidChangeConfiguration(_ =>\n+                hintsUpdater.toggleHintsDisplay(\n+                    Server.config.displayInlayHints,\n+                ),\n+            ),\n+        );\n+    });\n+}\n \n interface InlayHintsParams {\n-    textDocument: TextDocumentIdentifier;\n+    textDocument: lc.TextDocumentIdentifier;\n }\n \n interface InlayHint {\n-    range: Range;\n+    range: vscode.Range;\n     kind: string;\n     label: string;\n }\n@@ -19,7 +54,7 @@ const typeHintDecorationType = vscode.window.createTextEditorDecorationType({\n     },\n });\n \n-export class HintsUpdater {\n+class HintsUpdater {\n     private displayHints = true;\n \n     public async toggleHintsDisplay(displayHints: boolean): Promise<void> {\n@@ -32,11 +67,10 @@ export class HintsUpdater {\n     }\n \n     public async refreshHintsForVisibleEditors(\n-        cause?: TextDocumentChangeEvent,\n+        cause?: vscode.TextDocumentChangeEvent,\n     ): Promise<void> {\n-        if (!this.displayHints) {\n-            return;\n-        }\n+        if (!this.displayHints) return;\n+\n         if (\n             cause !== undefined &&\n             (cause.contentChanges.length === 0 ||\n@@ -79,7 +113,7 @@ export class HintsUpdater {\n     }\n \n     private async updateDecorationsFromServer(\n-        editor: TextEditor,\n+        editor: vscode.TextEditor,\n     ): Promise<void> {\n         const newHints = await this.queryHints(editor.document.uri.toString());\n         if (newHints !== null) {", "previous_filename": "editors/code/src/commands/inlay_hints.ts"}, {"sha": "7e63a9cac23ef1e130ac153807a0f52fbe6898c6", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 10, "deletions": 58, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=17dda0972a68dd88a766c223390317dc2cb3ea00", "patch": "@@ -2,8 +2,8 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n-import { HintsUpdater } from './commands/inlay_hints';\n-import { StatusDisplay } from './commands/watch_status';\n+import { activateInlayHints } from './inlay_hints';\n+import { StatusDisplay } from './status_display';\n import * as events from './events';\n import * as notifications from './notifications';\n import { Server } from './server';\n@@ -13,37 +13,20 @@ let ctx!: Ctx;\n \n export async function activate(context: vscode.ExtensionContext) {\n     ctx = new Ctx(context);\n+\n+    // Commands which invokes manually via command pallet, shortcut, etc.\n     ctx.registerCommand('analyzerStatus', commands.analyzerStatus);\n     ctx.registerCommand('collectGarbage', commands.collectGarbage);\n     ctx.registerCommand('matchingBrace', commands.matchingBrace);\n     ctx.registerCommand('joinLines', commands.joinLines);\n     ctx.registerCommand('parentModule', commands.parentModule);\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n     ctx.registerCommand('expandMacro', commands.expandMacro);\n+    ctx.registerCommand('run', commands.run);\n \n-    function disposeOnDeactivation(disposable: vscode.Disposable) {\n-        context.subscriptions.push(disposable);\n-    }\n-\n-    function registerCommand(name: string, f: any) {\n-        disposeOnDeactivation(vscode.commands.registerCommand(name, f));\n-    }\n-\n-    // Commands are requests from vscode to the language server\n-    registerCommand('rust-analyzer.run', commands.runnables.handle);\n-    // Unlike the above this does not send requests to the language server\n-    registerCommand('rust-analyzer.runSingle', commands.runnables.handleSingle);\n-    registerCommand(\n-        'rust-analyzer.showReferences',\n-        (uri: string, position: lc.Position, locations: lc.Location[]) => {\n-            vscode.commands.executeCommand(\n-                'editor.action.showReferences',\n-                vscode.Uri.parse(uri),\n-                Server.client.protocol2CodeConverter.asPosition(position),\n-                locations.map(Server.client.protocol2CodeConverter.asLocation),\n-            );\n-        },\n-    );\n+    // Internal commands which are invoked by the server.\n+    ctx.registerCommand('runSingle', commands.runSingle);\n+    ctx.registerCommand('showReferences', commands.showReferences);\n \n     if (Server.config.enableEnhancedTyping) {\n         ctx.overrideCommand('type', commands.onEnter);\n@@ -52,7 +35,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     const watchStatus = new StatusDisplay(\n         Server.config.cargoWatchOptions.command,\n     );\n-    disposeOnDeactivation(watchStatus);\n+    ctx.pushCleanup(watchStatus);\n \n     // Notifications are events triggered by the language server\n     const allNotifications: [string, lc.GenericNotificationHandler][] = [\n@@ -84,38 +67,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     }\n \n     if (Server.config.displayInlayHints) {\n-        const hintsUpdater = new HintsUpdater();\n-        hintsUpdater.refreshHintsForVisibleEditors().then(() => {\n-            // vscode may ignore top level hintsUpdater.refreshHintsForVisibleEditors()\n-            // so update the hints once when the focus changes to guarantee their presence\n-            let editorChangeDisposable: vscode.Disposable | null = null;\n-            editorChangeDisposable = vscode.window.onDidChangeActiveTextEditor(\n-                _ => {\n-                    if (editorChangeDisposable !== null) {\n-                        editorChangeDisposable.dispose();\n-                    }\n-                    return hintsUpdater.refreshHintsForVisibleEditors();\n-                },\n-            );\n-\n-            disposeOnDeactivation(\n-                vscode.window.onDidChangeVisibleTextEditors(_ =>\n-                    hintsUpdater.refreshHintsForVisibleEditors(),\n-                ),\n-            );\n-            disposeOnDeactivation(\n-                vscode.workspace.onDidChangeTextDocument(e =>\n-                    hintsUpdater.refreshHintsForVisibleEditors(e),\n-                ),\n-            );\n-            disposeOnDeactivation(\n-                vscode.workspace.onDidChangeConfiguration(_ =>\n-                    hintsUpdater.toggleHintsDisplay(\n-                        Server.config.displayInlayHints,\n-                    ),\n-                ),\n-            );\n-        });\n+        activateInlayHints(ctx);\n     }\n }\n "}, {"sha": "ed8573f029f2e0dbcd9d4f88f288f9ba935adace", "filename": "editors/code/src/status_display.ts", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "raw_url": "https://github.com/rust-lang/rust/raw/17dda0972a68dd88a766c223390317dc2cb3ea00/editors%2Fcode%2Fsrc%2Fstatus_display.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fstatus_display.ts?ref=17dda0972a68dd88a766c223390317dc2cb3ea00", "patch": "@@ -3,7 +3,7 @@ import * as vscode from 'vscode';\n const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n \n export class StatusDisplay implements vscode.Disposable {\n-    public packageName?: string;\n+    packageName?: string;\n \n     private i = 0;\n     private statusBarItem: vscode.StatusBarItem;\n@@ -19,7 +19,7 @@ export class StatusDisplay implements vscode.Disposable {\n         this.statusBarItem.hide();\n     }\n \n-    public show() {\n+    show() {\n         this.packageName = undefined;\n \n         this.timer =\n@@ -39,7 +39,7 @@ export class StatusDisplay implements vscode.Disposable {\n         this.statusBarItem.show();\n     }\n \n-    public hide() {\n+    hide() {\n         if (this.timer) {\n             clearInterval(this.timer);\n             this.timer = undefined;\n@@ -48,7 +48,7 @@ export class StatusDisplay implements vscode.Disposable {\n         this.statusBarItem.hide();\n     }\n \n-    public dispose() {\n+    dispose() {\n         if (this.timer) {\n             clearInterval(this.timer);\n             this.timer = undefined;\n@@ -57,7 +57,7 @@ export class StatusDisplay implements vscode.Disposable {\n         this.statusBarItem.dispose();\n     }\n \n-    public handleProgressNotification(params: ProgressParams) {\n+    handleProgressNotification(params: ProgressParams) {\n         const { token, value } = params;\n         if (token !== 'rustAnalyzer/cargoWatcher') {\n             return;", "previous_filename": "editors/code/src/commands/watch_status.ts"}]}