{"sha": "a14485b7fd1a8a268a456ee1b47d79b10ccac875", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNDQ4NWI3ZmQxYThhMjY4YTQ1NmVlMWI0N2Q3OWIxMGNjYWM4NzU=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-20T20:36:15Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-20T20:36:15Z"}, "message": "Do vtable resolution for *all* method calls, not just statically resolved ones... Closes #3221.", "tree": {"sha": "b300f02df4d93d8dcdc906ea9b847b4a677b85c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b300f02df4d93d8dcdc906ea9b847b4a677b85c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a14485b7fd1a8a268a456ee1b47d79b10ccac875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a14485b7fd1a8a268a456ee1b47d79b10ccac875", "html_url": "https://github.com/rust-lang/rust/commit/a14485b7fd1a8a268a456ee1b47d79b10ccac875", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a14485b7fd1a8a268a456ee1b47d79b10ccac875/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1300be58d7cb77d230d5269ad4346a069648e5fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1300be58d7cb77d230d5269ad4346a069648e5fc", "html_url": "https://github.com/rust-lang/rust/commit/1300be58d7cb77d230d5269ad4346a069648e5fc"}], "stats": {"total": 76, "additions": 54, "deletions": 22}, "files": [{"sha": "15882d5e9fa6b2ff37068964fbe45c513cd838c1", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a14485b7fd1a8a268a456ee1b47d79b10ccac875/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14485b7fd1a8a268a456ee1b47d79b10ccac875/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=a14485b7fd1a8a268a456ee1b47d79b10ccac875", "patch": "@@ -226,25 +226,8 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n           _ => {\n             // Type substitions should only occur on paths and\n             // method calls, so this needs to be a method call.\n-            match cx.method_map.get(e.id).origin {\n-              typeck::method_static(did) => {\n-                // n.b.: When we encode class/impl methods, the bounds\n-                // that we encode include both the class/impl bounds\n-                // and then the method bounds themselves...\n-                ty::lookup_item_type(cx.tcx, did).bounds\n-              }\n-              typeck::method_param({trait_id:trt_id,\n-                                    method_num:n_mth, _}) |\n-              typeck::method_trait(trt_id, n_mth) => {\n-                // ...trait methods bounds, in contrast, include only the\n-                // method bounds, so we must preprend the tps from the\n-                // trait itself.  This ought to be harmonized.\n-                let trt_bounds =\n-                    ty::lookup_item_type(cx.tcx, trt_id).bounds;\n-                let mth = ty::trait_methods(cx.tcx, trt_id)[n_mth];\n-                @(vec::append(*trt_bounds, *mth.tps))\n-              }\n-            }\n+            ty::method_call_bounds(cx.tcx, cx.method_map, e.id).expect(\n+                ~\"non path/method call expr has type substs??\")\n           }\n         };\n         if vec::len(ts) != vec::len(*bounds) {"}, {"sha": "bc74f654ca84d68b05c281358a62eddfa5af3fd0", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a14485b7fd1a8a268a456ee1b47d79b10ccac875/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14485b7fd1a8a268a456ee1b47d79b10ccac875/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=a14485b7fd1a8a268a456ee1b47d79b10ccac875", "patch": "@@ -178,6 +178,7 @@ export eval_repeat_count;\n export fn_proto, proto_bare, proto_vstore;\n export ast_proto_to_proto;\n export is_blockish;\n+export method_call_bounds;\n \n // Data types\n \n@@ -2414,6 +2415,32 @@ fn expr_has_ty_params(cx: ctxt, expr: @ast::expr) -> bool {\n     return node_id_has_type_params(cx, expr.id);\n }\n \n+fn method_call_bounds(tcx: ctxt, method_map: typeck::method_map,\n+                      id: ast::node_id)\n+    -> option<@~[param_bounds]> {\n+    do method_map.find(id).map |method| {\n+        match method.origin {\n+          typeck::method_static(did) => {\n+            // n.b.: When we encode class/impl methods, the bounds\n+            // that we encode include both the class/impl bounds\n+            // and then the method bounds themselves...\n+            ty::lookup_item_type(tcx, did).bounds\n+          }\n+          typeck::method_param({trait_id:trt_id,\n+                                method_num:n_mth, _}) |\n+          typeck::method_trait(trt_id, n_mth) => {\n+            // ...trait methods bounds, in contrast, include only the\n+            // method bounds, so we must preprend the tps from the\n+            // trait itself.  This ought to be harmonized.\n+            let trt_bounds =\n+                ty::lookup_item_type(tcx, trt_id).bounds;\n+            let mth = ty::trait_methods(tcx, trt_id)[n_mth];\n+            @(vec::append(*trt_bounds, *mth.tps))\n+          }\n+        }\n+    }\n+}\n+\n fn expr_is_lval(method_map: typeck::method_map, e: @ast::expr) -> bool {\n     match e.node {\n       ast::expr_path(_) | ast::expr_unary(ast::deref, _) => true,"}, {"sha": "a3cd3c6c79e371f04224021c75b1ed0d1d634b4b", "filename": "src/rustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a14485b7fd1a8a268a456ee1b47d79b10ccac875/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14485b7fd1a8a268a456ee1b47d79b10ccac875/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=a14485b7fd1a8a268a456ee1b47d79b10ccac875", "patch": "@@ -252,9 +252,8 @@ fn resolve_expr(ex: @ast::expr, &&fcx: @fn_ctxt, v: visit::vt<@fn_ctxt>) {\n       ast::expr_index(*) => {\n         debug!(\"(vtable - resolving expr) resolving field/binary/unary/\\\n                 assign/index expr\");\n-        match cx.method_map.find(ex.id) {\n-          some({origin: method_static(did), _}) => {\n-            let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n+        match ty::method_call_bounds(cx.tcx, cx.method_map, ex.id) {\n+          some(bounds) => {\n             if has_trait_bounds(*bounds) {\n                 let callee_id = match ex.node {\n                   ast::expr_field(_, _, _) => ex.id,"}, {"sha": "550be31d1a4a195e1ebfbdc9b1add3496a134ed8", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a14485b7fd1a8a268a456ee1b47d79b10ccac875/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a14485b7fd1a8a268a456ee1b47d79b10ccac875/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=a14485b7fd1a8a268a456ee1b47d79b10ccac875", "patch": "@@ -0,0 +1,23 @@\n+trait TraitA {\n+    fn method_a() -> int;\n+}\n+\n+trait TraitB {\n+    fn gimme_an_a<A: TraitA>(a: A) -> int;\n+}\n+\n+impl int: TraitB {\n+    fn gimme_an_a<A: TraitA>(a: A) -> int {\n+        a.method_a() + self\n+    }\n+}\n+\n+fn call_it<B: TraitB>(b: B)  -> int {\n+    let y = 4u;\n+    b.gimme_an_a(y) //~ ERROR failed to find an implementation of trait @TraitA for uint\n+}\n+\n+fn main() {\n+    let x = 3i;\n+    assert call_it(x) == 22;\n+}"}]}