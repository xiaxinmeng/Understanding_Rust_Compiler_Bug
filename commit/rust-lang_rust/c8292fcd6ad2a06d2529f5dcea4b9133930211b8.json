{"sha": "c8292fcd6ad2a06d2529f5dcea4b9133930211b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MjkyZmNkNmFkMmEwNmQyNTI5ZjVkY2VhNGI5MTMzOTMwMjExYjg=", "commit": {"author": {"name": "Beno\u00eet CORTIER", "email": "benoit.cortier@fried-world.eu", "date": "2017-02-15T12:44:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-15T12:44:52Z"}, "message": "Correct a typo in procedural macros chapter of the Book.", "tree": {"sha": "cba29fb91cbd2629cf8affa6ea59a6cb6caa6693", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba29fb91cbd2629cf8affa6ea59a6cb6caa6693"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8292fcd6ad2a06d2529f5dcea4b9133930211b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8292fcd6ad2a06d2529f5dcea4b9133930211b8", "html_url": "https://github.com/rust-lang/rust/commit/c8292fcd6ad2a06d2529f5dcea4b9133930211b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8292fcd6ad2a06d2529f5dcea4b9133930211b8/comments", "author": {"login": "CBenoit", "id": 3809077, "node_id": "MDQ6VXNlcjM4MDkwNzc=", "avatar_url": "https://avatars.githubusercontent.com/u/3809077?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CBenoit", "html_url": "https://github.com/CBenoit", "followers_url": "https://api.github.com/users/CBenoit/followers", "following_url": "https://api.github.com/users/CBenoit/following{/other_user}", "gists_url": "https://api.github.com/users/CBenoit/gists{/gist_id}", "starred_url": "https://api.github.com/users/CBenoit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CBenoit/subscriptions", "organizations_url": "https://api.github.com/users/CBenoit/orgs", "repos_url": "https://api.github.com/users/CBenoit/repos", "events_url": "https://api.github.com/users/CBenoit/events{/privacy}", "received_events_url": "https://api.github.com/users/CBenoit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea8c62919e5f0c7e511717f672406536ef94cab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea8c62919e5f0c7e511717f672406536ef94cab1", "html_url": "https://github.com/rust-lang/rust/commit/ea8c62919e5f0c7e511717f672406536ef94cab1"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "334f5e8d6567b1fa4e56876a5fc15f35b61bd4b3", "filename": "src/doc/book/src/procedural-macros.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8292fcd6ad2a06d2529f5dcea4b9133930211b8/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "raw_url": "https://github.com/rust-lang/rust/raw/c8292fcd6ad2a06d2529f5dcea4b9133930211b8/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsrc%2Fprocedural-macros.md?ref=c8292fcd6ad2a06d2529f5dcea4b9133930211b8", "patch": "@@ -169,7 +169,7 @@ So this is where quotes comes in. The `ast` argument is a struct that gives us\n a representation of our type (which can be either a `struct` or an `enum`).\n Check out the [docs](https://docs.rs/syn/0.10.5/syn/struct.MacroInput.html),\n there is some useful information there. We are able to get the name of the\n-type using `ast.ident`. The `quote!` macro let's us write up the Rust code\n+type using `ast.ident`. The `quote!` macro let us write up the Rust code\n that we wish to return and convert it into `Tokens`. `quote!` let's us use some\n really cool templating mechanics; we simply write `#name` and `quote!` will\n replace it with the variable named `name`. You can even do some repetition"}]}