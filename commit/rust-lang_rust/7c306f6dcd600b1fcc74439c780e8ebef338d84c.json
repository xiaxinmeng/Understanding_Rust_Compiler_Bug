{"sha": "7c306f6dcd600b1fcc74439c780e8ebef338d84c", "node_id": "C_kwDOAAsO6NoAKDdjMzA2ZjZkY2Q2MDBiMWZjYzc0NDM5Yzc4MGU4ZWJlZjMzOGQ4NGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T12:33:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-08T12:33:21Z"}, "message": "Auto merge of #108121 - aliemjay:resolve-var-region, r=lcnr\n\nalways resolve to universal regions if possible\n\n`RegionConstraintCollector::opportunistic_resolve_var`, which is used in canonicalization and projection logic, doesn't resolve the region var to an equal universal region. So if we have equated `'static == '1 == '2`, it doesn't resolve `'1` or `'2` to `'static`. Now it does!\n\nAddresses review comment https://github.com/rust-lang/rust/pull/107376#discussion_r1093233687.\n\nr? `@lcnr`", "tree": {"sha": "4c000abdf7f1571a271bab6367af229680b3dd62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c000abdf7f1571a271bab6367af229680b3dd62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c306f6dcd600b1fcc74439c780e8ebef338d84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c306f6dcd600b1fcc74439c780e8ebef338d84c", "html_url": "https://github.com/rust-lang/rust/commit/7c306f6dcd600b1fcc74439c780e8ebef338d84c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c306f6dcd600b1fcc74439c780e8ebef338d84c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60445fda58fc9f9aa413752530d6756ae5570f2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/60445fda58fc9f9aa413752530d6756ae5570f2f", "html_url": "https://github.com/rust-lang/rust/commit/60445fda58fc9f9aa413752530d6756ae5570f2f"}, {"sha": "0b232d022ff283d4c7118c0d205000a937121a02", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b232d022ff283d4c7118c0d205000a937121a02", "html_url": "https://github.com/rust-lang/rust/commit/0b232d022ff283d4c7118c0d205000a937121a02"}], "stats": {"total": 157, "additions": 86, "deletions": 71}, "files": [{"sha": "001b24c31dee3632fdbe39e738d071d6e6e3a9fd", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -352,19 +352,17 @@ impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n             }\n \n             ty::ReVar(vid) => {\n-                let resolved_vid = self\n+                let resolved = self\n                     .infcx\n                     .inner\n                     .borrow_mut()\n                     .unwrap_region_constraints()\n-                    .opportunistic_resolve_var(vid);\n+                    .opportunistic_resolve_var(self.tcx, vid);\n                 debug!(\n-                    \"canonical: region var found with vid {:?}, \\\n-                     opportunistically resolved to {:?}\",\n-                    vid, resolved_vid\n+                    \"canonical: region var found with vid {vid:?}, \\\n+                     opportunistically resolved to {resolved:?}\",\n                 );\n-                let r = self.tcx.mk_re_var(resolved_vid);\n-                self.canonicalize_mode.canonicalize_free_region(self, r)\n+                self.canonicalize_mode.canonicalize_free_region(self, resolved)\n             }\n \n             ty::ReStatic"}, {"sha": "0b86d9c1fb82729a9d8ba444e0b9dcf8841a7b40", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -420,7 +420,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         // `RegionConstraintData` contains the relationship here.\n         if *any_unifications {\n             *any_unifications = false;\n-            self.unification_table().reset_unifications(|_| UnifiedRegion(None));\n+            self.unification_table_mut().reset_unifications(|_| UnifiedRegion::new(None));\n         }\n \n         data\n@@ -447,7 +447,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     ) -> RegionVid {\n         let vid = self.var_infos.push(RegionVariableInfo { origin, universe });\n \n-        let u_vid = self.unification_table().new_key(UnifiedRegion(None));\n+        let u_vid = self.unification_table_mut().new_key(UnifiedRegion::new(None));\n         assert_eq!(vid, u_vid.vid);\n         self.undo_log.push(AddVar(vid));\n         debug!(\"created new region variable {:?} in {:?} with origin {:?}\", vid, universe, origin);\n@@ -516,13 +516,13 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n             match (sub, sup) {\n                 (Region(Interned(ReVar(sub), _)), Region(Interned(ReVar(sup), _))) => {\n                     debug!(\"make_eqregion: unifying {:?} with {:?}\", sub, sup);\n-                    self.unification_table().union(*sub, *sup);\n+                    self.unification_table_mut().union(*sub, *sup);\n                     self.any_unifications = true;\n                 }\n                 (Region(Interned(ReVar(vid), _)), value)\n                 | (value, Region(Interned(ReVar(vid), _))) => {\n                     debug!(\"make_eqregion: unifying {:?} with {:?}\", vid, value);\n-                    self.unification_table().union_value(*vid, UnifiedRegion(Some(value)));\n+                    self.unification_table_mut().union_value(*vid, UnifiedRegion::new(Some(value)));\n                     self.any_unifications = true;\n                 }\n                 (_, _) => {}\n@@ -633,28 +633,25 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n         }\n     }\n \n-    /// Resolves the passed RegionVid to the root RegionVid in the unification table\n-    pub(super) fn opportunistic_resolve_var(&mut self, rid: ty::RegionVid) -> ty::RegionVid {\n-        self.unification_table().find(rid).vid\n-    }\n-\n-    /// If the Region is a `ReVar`, then resolves it either to the root value in\n-    /// the unification table, if it exists, or to the root `ReVar` in the table.\n-    /// If the Region is not a `ReVar`, just returns the Region itself.\n-    pub fn opportunistic_resolve_region(\n+    /// Resolves a region var to its value in the unification table, if it exists.\n+    /// Otherwise, it is resolved to the root `ReVar` in the table.\n+    pub fn opportunistic_resolve_var(\n         &mut self,\n         tcx: TyCtxt<'tcx>,\n-        region: ty::Region<'tcx>,\n+        vid: ty::RegionVid,\n     ) -> ty::Region<'tcx> {\n-        match *region {\n-            ty::ReVar(rid) => {\n-                let unified_region = self.unification_table().probe_value(rid);\n-                unified_region.0.unwrap_or_else(|| {\n-                    let root = self.unification_table().find(rid).vid;\n-                    tcx.mk_re_var(root)\n-                })\n-            }\n-            _ => region,\n+        let mut ut = self.unification_table_mut(); // FIXME(rust-lang/ena#42): unnecessary mut\n+        let root_vid = ut.find(vid).vid;\n+        let resolved = ut\n+            .probe_value(root_vid)\n+            .get_value_ignoring_universes()\n+            .unwrap_or_else(|| tcx.mk_re_var(root_vid));\n+\n+        // Don't resolve a variable to a region that it cannot name.\n+        if self.var_universe(vid).can_name(self.universe(resolved)) {\n+            resolved\n+        } else {\n+            tcx.mk_re_var(vid)\n         }\n     }\n \n@@ -733,7 +730,7 @@ impl<'tcx> RegionConstraintCollector<'_, 'tcx> {\n     }\n \n     #[inline]\n-    fn unification_table(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {\n+    fn unification_table_mut(&mut self) -> super::UnificationTable<'_, 'tcx, RegionVidKey<'tcx>> {\n         ut::UnificationTable::with_log(&mut self.storage.unification_table, self.undo_log)\n     }\n }"}, {"sha": "4f49f4165074fd673c44a94ebdd05fb32f50eb4c", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -85,15 +85,12 @@ impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticRegionResolver<'a, 'tcx\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n-            ty::ReVar(rid) => {\n-                let resolved = self\n-                    .infcx\n-                    .inner\n-                    .borrow_mut()\n-                    .unwrap_region_constraints()\n-                    .opportunistic_resolve_var(rid);\n-                TypeFolder::interner(self).mk_re_var(resolved)\n-            }\n+            ty::ReVar(vid) => self\n+                .infcx\n+                .inner\n+                .borrow_mut()\n+                .unwrap_region_constraints()\n+                .opportunistic_resolve_var(TypeFolder::interner(self), vid),\n             _ => r,\n         }\n     }"}, {"sha": "d83a587a86ae6f4b8f22cfb17f084d59e55981c0", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -1,4 +1,4 @@\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Region, Ty, TyCtxt};\n use rustc_data_structures::unify::{NoError, UnifyKey, UnifyValue};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::Symbol;\n@@ -11,7 +11,20 @@ pub trait ToType {\n }\n \n #[derive(PartialEq, Copy, Clone, Debug)]\n-pub struct UnifiedRegion<'tcx>(pub Option<ty::Region<'tcx>>);\n+pub struct UnifiedRegion<'tcx> {\n+    value: Option<ty::Region<'tcx>>,\n+}\n+\n+impl<'tcx> UnifiedRegion<'tcx> {\n+    pub fn new(value: Option<Region<'tcx>>) -> Self {\n+        Self { value }\n+    }\n+\n+    /// The caller is responsible for checking universe compatibility before using this value.\n+    pub fn get_value_ignoring_universes(self) -> Option<Region<'tcx>> {\n+        self.value\n+    }\n+}\n \n #[derive(PartialEq, Copy, Clone, Debug)]\n pub struct RegionVidKey<'tcx> {\n@@ -44,11 +57,27 @@ impl<'tcx> UnifyValue for UnifiedRegion<'tcx> {\n     type Error = NoError;\n \n     fn unify_values(value1: &Self, value2: &Self) -> Result<Self, NoError> {\n-        Ok(match (value1.0, value2.0) {\n+        // We pick the value of the least universe because it is compatible with more variables.\n+        // This is *not* neccessary for soundness, but it allows more region variables to be\n+        // resolved to the said value.\n+        #[cold]\n+        fn min_universe<'tcx>(r1: Region<'tcx>, r2: Region<'tcx>) -> Region<'tcx> {\n+            cmp::min_by_key(r1, r2, |r| match r.kind() {\n+                ty::ReStatic\n+                | ty::ReErased\n+                | ty::ReFree(..)\n+                | ty::ReEarlyBound(..)\n+                | ty::ReError(_) => ty::UniverseIndex::ROOT,\n+                ty::RePlaceholder(placeholder) => placeholder.universe,\n+                ty::ReVar(..) | ty::ReLateBound(..) => bug!(\"not a universal region\"),\n+            })\n+        }\n+\n+        Ok(match (value1.value, value2.value) {\n             // Here we can just pick one value, because the full constraints graph\n             // will be handled later. Ideally, we might want a `MultipleValues`\n             // variant or something. For now though, this is fine.\n-            (Some(_), Some(_)) => *value1,\n+            (Some(val1), Some(val2)) => Self { value: Some(min_universe(val1, val2)) },\n \n             (Some(_), _) => *value1,\n             (_, Some(_)) => *value2,"}, {"sha": "01075d7c55aee4dae8b1e8a355b93b86a0b5ceb0", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -870,12 +870,12 @@ impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n \n     fn fold_region(&mut self, r0: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         let r1 = match *r0 {\n-            ty::ReVar(_) => self\n+            ty::ReVar(vid) => self\n                 .infcx\n                 .inner\n                 .borrow_mut()\n                 .unwrap_region_constraints()\n-                .opportunistic_resolve_region(self.infcx.tcx, r0),\n+                .opportunistic_resolve_var(self.infcx.tcx, vid),\n             _ => r0,\n         };\n "}, {"sha": "c6fd5e1101ef51e0714da468d46b6e3a72c4cb39", "filename": "tests/rustdoc/normalize-assoc-item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Frustdoc%2Fnormalize-assoc-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnormalize-assoc-item.rs?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -63,12 +63,12 @@ impl<'a> Lifetimes<'a> for usize {\n     type Y = &'a isize;\n }\n \n-// @has 'normalize_assoc_item/fn.g.html' '//pre[@class=\"rust item-decl\"]' \"pub fn g() -> &isize\"\n+// @has 'normalize_assoc_item/fn.g.html' '//pre[@class=\"rust item-decl\"]' \"pub fn g() -> &'static isize\"\n pub fn g() -> <usize as Lifetimes<'static>>::Y {\n     &0\n }\n \n-// @has 'normalize_assoc_item/constant.A.html' '//pre[@class=\"rust item-decl\"]' \"pub const A: &isize\"\n+// @has 'normalize_assoc_item/constant.A.html' '//pre[@class=\"rust item-decl\"]' \"pub const A: &'static isize\"\n pub const A: <usize as Lifetimes<'static>>::Y = &0;\n \n // test cross-crate re-exports"}, {"sha": "2f3c90dcece60334ded0c9cadfc8d79ef5c4c96b", "filename": "tests/ui/traits/inductive-overflow/lifetime.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.rs?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -15,9 +15,9 @@ impl<'a> Y for C<'a> {\n struct C<'a>(&'a ());\n struct X<T: Y>(T::P);\n \n-impl<T: NotAuto> NotAuto for Box<T> {} //~ NOTE: required\n+impl<T: NotAuto> NotAuto for Box<T> {}\n+impl<T: Y> NotAuto for X<T> where T::P: NotAuto {} //~ NOTE: required\n //~^ NOTE unsatisfied trait bound introduced here\n-impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n impl<'a> NotAuto for C<'a> {}\n \n fn is_send<S: NotAuto>() {}\n@@ -28,6 +28,4 @@ fn main() {\n     // Should only be a few notes.\n     is_send::<X<C<'static>>>();\n     //~^ ERROR overflow evaluating\n-    //~| 3 redundant requirements hidden\n-    //~| required for\n }"}, {"sha": "7ab2864a8cfdc38dea7da6bb9e7078027418f1c0", "filename": "tests/ui/traits/inductive-overflow/lifetime.stderr", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finductive-overflow%2Flifetime.stderr?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -1,18 +1,14 @@\n-error[E0275]: overflow evaluating the requirement `X<C<'_>>: NotAuto`\n+error[E0275]: overflow evaluating the requirement `Box<X<C<'static>>>: NotAuto`\n   --> $DIR/lifetime.rs:29:5\n    |\n LL |     is_send::<X<C<'static>>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required for `Box<X<C<'_>>>` to implement `NotAuto`\n-  --> $DIR/lifetime.rs:18:18\n+note: required for `X<C<'static>>` to implement `NotAuto`\n+  --> $DIR/lifetime.rs:19:12\n    |\n-LL | impl<T: NotAuto> NotAuto for Box<T> {}\n-   |         -------  ^^^^^^^     ^^^^^^\n-   |         |\n-   |         unsatisfied trait bound introduced here\n-   = note: 3 redundant requirements hidden\n-   = note: required for `X<C<'static>>` to implement `NotAuto`\n+LL | impl<T: Y> NotAuto for X<T> where T::P: NotAuto {}\n+   |            ^^^^^^^     ^^^^             ------- unsatisfied trait bound introduced here\n note: required by a bound in `is_send`\n   --> $DIR/lifetime.rs:23:15\n    |"}, {"sha": "3855f2c35c1fb5857e1eb2459291529294eb0dc2", "filename": "tests/ui/wf/hir-wf-check-erase-regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.rs?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -4,10 +4,10 @@\n pub struct Table<T, const N: usize>([Option<T>; N]);\n \n impl<'a, T, const N: usize> IntoIterator for &'a Table<T, N> {\n-    type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>; //~ ERROR `&T` is not an iterator\n+    type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>; //~ ERROR `&'a T` is not an iterator\n     type Item = &'a T;\n \n-    fn into_iter(self) -> Self::IntoIter { //~ ERROR `&T` is not an iterator\n+    fn into_iter(self) -> Self::IntoIter { //~ ERROR `&'a T` is not an iterator\n         unimplemented!()\n     }\n }"}, {"sha": "2843983c716a6322eca4b6851ac3e5cd459c1988", "filename": "tests/ui/wf/hir-wf-check-erase-regions.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c306f6dcd600b1fcc74439c780e8ebef338d84c/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fhir-wf-check-erase-regions.stderr?ref=7c306f6dcd600b1fcc74439c780e8ebef338d84c", "patch": "@@ -1,24 +1,24 @@\n-error[E0277]: `&T` is not an iterator\n+error[E0277]: `&'a T` is not an iterator\n   --> $DIR/hir-wf-check-erase-regions.rs:7:21\n    |\n LL |     type IntoIter = std::iter::Flatten<std::slice::Iter<'a, T>>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&T` is not an iterator\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `&'a T` is not an iterator\n    |\n-   = help: the trait `Iterator` is not implemented for `&T`\n+   = help: the trait `Iterator` is not implemented for `&'a T`\n    = help: the trait `Iterator` is implemented for `&mut I`\n-   = note: required for `&T` to implement `IntoIterator`\n+   = note: required for `&'a T` to implement `IntoIterator`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n \n-error[E0277]: `&T` is not an iterator\n+error[E0277]: `&'a T` is not an iterator\n   --> $DIR/hir-wf-check-erase-regions.rs:10:27\n    |\n LL |     fn into_iter(self) -> Self::IntoIter {\n-   |                           ^^^^^^^^^^^^^^ `&T` is not an iterator\n+   |                           ^^^^^^^^^^^^^^ `&'a T` is not an iterator\n    |\n-   = help: the trait `Iterator` is not implemented for `&T`\n+   = help: the trait `Iterator` is not implemented for `&'a T`\n    = help: the trait `Iterator` is implemented for `&mut I`\n-   = note: required for `&T` to implement `IntoIterator`\n+   = note: required for `&'a T` to implement `IntoIterator`\n note: required by a bound in `Flatten`\n   --> $SRC_DIR/core/src/iter/adapters/flatten.rs:LL:COL\n "}]}