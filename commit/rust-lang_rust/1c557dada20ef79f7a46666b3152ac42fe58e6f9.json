{"sha": "1c557dada20ef79f7a46666b3152ac42fe58e6f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNTU3ZGFkYTIwZWY3OWY3YTQ2NjY2YjMxNTJhYzQyZmU1OGU2Zjk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-21T00:24:59Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-06-21T23:49:34Z"}, "message": "Rename cratename -> crate_name\n\nThis makes it consistent with rustc_session::Options.", "tree": {"sha": "9d51c7fd2545251a69e25628b68356c4ab4d026a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d51c7fd2545251a69e25628b68356c4ab4d026a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c557dada20ef79f7a46666b3152ac42fe58e6f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c557dada20ef79f7a46666b3152ac42fe58e6f9", "html_url": "https://github.com/rust-lang/rust/commit/1c557dada20ef79f7a46666b3152ac42fe58e6f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c557dada20ef79f7a46666b3152ac42fe58e6f9/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9224b6fe205e20c6b88570977ad1c27d2c2ecfb3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9224b6fe205e20c6b88570977ad1c27d2c2ecfb3", "html_url": "https://github.com/rust-lang/rust/commit/9224b6fe205e20c6b88570977ad1c27d2c2ecfb3"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "d791a995d863eb1f86f121d22435a0f13c985ac6", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1c557dada20ef79f7a46666b3152ac42fe58e6f9/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c557dada20ef79f7a46666b3152ac42fe58e6f9/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=1c557dada20ef79f7a46666b3152ac42fe58e6f9", "patch": "@@ -292,7 +292,7 @@ struct UnusedExterns {\n \n fn run_test(\n     test: &str,\n-    cratename: &str,\n+    crate_name: &str,\n     line: usize,\n     options: Options,\n     should_panic: bool,\n@@ -311,7 +311,7 @@ fn run_test(\n     report_unused_externs: impl Fn(UnusedExterns),\n ) -> Result<(), TestFailure> {\n     let (test, line_offset, supports_color) =\n-        make_test(test, Some(cratename), as_test_harness, opts, edition, Some(test_id));\n+        make_test(test, Some(crate_name), as_test_harness, opts, edition, Some(test_id));\n \n     let output_file = outdir.path().join(\"rust_out\");\n \n@@ -478,7 +478,7 @@ fn run_test(\n /// lines before the test code begins as well as if the output stream supports colors or not.\n crate fn make_test(\n     s: &str,\n-    cratename: Option<&str>,\n+    crate_name: Option<&str>,\n     dont_insert_main: bool,\n     opts: &TestOptions,\n     edition: Edition,\n@@ -539,7 +539,7 @@ crate fn make_test(\n             let sess = ParseSess::with_span_handler(handler, sm);\n \n             let mut found_main = false;\n-            let mut found_extern_crate = cratename.is_none();\n+            let mut found_extern_crate = crate_name.is_none();\n             let mut found_macro = false;\n \n             let mut parser = match maybe_new_parser_from_source_str(&sess, filename, source) {\n@@ -566,13 +566,13 @@ crate fn make_test(\n \n                         if !found_extern_crate {\n                             if let ast::ItemKind::ExternCrate(original) = item.kind {\n-                                // This code will never be reached if `cratename` is none because\n+                                // This code will never be reached if `crate_name` is none because\n                                 // `found_extern_crate` is initialized to `true` if it is none.\n-                                let cratename = cratename.unwrap();\n+                                let crate_name = crate_name.unwrap();\n \n                                 match original {\n-                                    Some(name) => found_extern_crate = name.as_str() == cratename,\n-                                    None => found_extern_crate = item.ident.as_str() == cratename,\n+                                    Some(name) => found_extern_crate = name.as_str() == crate_name,\n+                                    None => found_extern_crate = item.ident.as_str() == crate_name,\n                                 }\n                             }\n                         }\n@@ -630,14 +630,14 @@ crate fn make_test(\n \n     // Don't inject `extern crate std` because it's already injected by the\n     // compiler.\n-    if !already_has_extern_crate && !opts.no_crate_inject && cratename != Some(\"std\") {\n-        if let Some(cratename) = cratename {\n+    if !already_has_extern_crate && !opts.no_crate_inject && crate_name != Some(\"std\") {\n+        if let Some(crate_name) = crate_name {\n             // Don't inject `extern crate` if the crate is never used.\n             // NOTE: this is terribly inaccurate because it doesn't actually\n             // parse the source, but only has false positives, not false\n             // negatives.\n-            if s.contains(cratename) {\n-                prog.push_str(&format!(\"extern crate r#{};\\n\", cratename));\n+            if s.contains(crate_name) {\n+                prog.push_str(&format!(\"extern crate r#{};\\n\", crate_name));\n                 line_offset += 1;\n             }\n         }\n@@ -796,7 +796,7 @@ crate struct Collector {\n     options: Options,\n     use_headers: bool,\n     enable_per_target_ignores: bool,\n-    cratename: String,\n+    crate_name: String,\n     opts: TestOptions,\n     position: Span,\n     source_map: Option<Lrc<SourceMap>>,\n@@ -808,7 +808,7 @@ crate struct Collector {\n \n impl Collector {\n     crate fn new(\n-        cratename: String,\n+        crate_name: String,\n         options: Options,\n         use_headers: bool,\n         opts: TestOptions,\n@@ -822,7 +822,7 @@ impl Collector {\n             options,\n             use_headers,\n             enable_per_target_ignores,\n-            cratename,\n+            crate_name,\n             opts,\n             position: DUMMY_SP,\n             source_map,\n@@ -870,7 +870,7 @@ impl Tester for Collector {\n     fn add_test(&mut self, test: String, config: LangString, line: usize) {\n         let filename = self.get_filename();\n         let name = self.generate_name(line, &filename);\n-        let cratename = self.cratename.to_string();\n+        let crate_name = self.crate_name.to_string();\n         let opts = self.opts.clone();\n         let edition = config.edition.unwrap_or(self.options.edition);\n         let options = self.options.clone();\n@@ -953,7 +953,7 @@ impl Tester for Collector {\n                 };\n                 let res = run_test(\n                     &test,\n-                    &cratename,\n+                    &crate_name,\n                     line,\n                     options,\n                     config.should_panic,"}]}