{"sha": "7a93beef7f692b34168ad69633f56483d38ad8fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhOTNiZWVmN2Y2OTJiMzQxNjhhZDY5NjMzZjU2NDgzZDM4YWQ4ZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-25T04:31:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-06-25T04:31:19Z"}, "message": "auto merge of #15160 : alexcrichton/rust/remove-f128, r=brson\n\nThe f128 type has very little support in the compiler and the feature is\r\nbasically unusable today. Supporting half-baked features in the compiler can be\r\ndetrimental to the long-term development of the compiler, and hence this feature\r\nis being removed.", "tree": {"sha": "e99530b6eed86ae92bd76f9b0d092ff82763f388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e99530b6eed86ae92bd76f9b0d092ff82763f388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a93beef7f692b34168ad69633f56483d38ad8fc", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a93beef7f692b34168ad69633f56483d38ad8fc", "html_url": "https://github.com/rust-lang/rust/commit/7a93beef7f692b34168ad69633f56483d38ad8fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a93beef7f692b34168ad69633f56483d38ad8fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91be86af0952aebb1f7c1811a6abcccd7bd1c26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/91be86af0952aebb1f7c1811a6abcccd7bd1c26e", "html_url": "https://github.com/rust-lang/rust/commit/91be86af0952aebb1f7c1811a6abcccd7bd1c26e"}, {"sha": "3d308fe65b5aa653b482341a04f301b02f263c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d308fe65b5aa653b482341a04f301b02f263c3b", "html_url": "https://github.com/rust-lang/rust/commit/3d308fe65b5aa653b482341a04f301b02f263c3b"}], "stats": {"total": 78, "additions": 4, "deletions": 74}, "files": [{"sha": "6519d3b749de403913d65cc77519374a73adac4b", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -96,7 +96,6 @@ pub trait TyVisitor {\n \n     fn visit_f32(&mut self) -> bool;\n     fn visit_f64(&mut self) -> bool;\n-    fn visit_f128(&mut self) -> bool;\n \n     fn visit_char(&mut self) -> bool;\n "}, {"sha": "b5afb3381ada92c3219c55c704c2f828ea4e9776", "filename": "src/libdebug/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibdebug%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibdebug%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Flib.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -25,7 +25,7 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/\")]\n #![experimental]\n-#![feature(managed_boxes, macro_rules, quad_precision_float)]\n+#![feature(managed_boxes, macro_rules)]\n #![allow(experimental)]\n \n pub mod fmt;"}, {"sha": "280e8753b34b5f845d12f2d6bb737b0f82158173", "filename": "src/libdebug/reflect.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibdebug%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibdebug%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Freflect.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -179,13 +179,6 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n         true\n     }\n \n-    fn visit_f128(&mut self) -> bool {\n-        self.align_to::<f128>();\n-        if ! self.inner.visit_f128() { return false; }\n-        self.bump_past::<f128>();\n-        true\n-    }\n-\n     fn visit_char(&mut self) -> bool {\n         self.align_to::<char>();\n         if ! self.inner.visit_char() { return false; }"}, {"sha": "6562e2fb6e3829d68f94c03bfb561439c4496db3", "filename": "src/libdebug/repr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -258,7 +258,6 @@ impl<'a> TyVisitor for ReprVisitor<'a> {\n \n     fn visit_f32(&mut self) -> bool { self.write::<f32>() }\n     fn visit_f64(&mut self) -> bool { self.write::<f64>() }\n-    fn visit_f128(&mut self) -> bool { fail!(\"not implemented\") }\n \n     fn visit_char(&mut self) -> bool {\n         self.get::<char>(|this, &ch| {"}, {"sha": "351afc1c5d4e9145caa8ac9223327a352490383d", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -112,7 +112,6 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n         Some(Ident{ident, span}) => match token::get_ident(ident).get() {\n             \"f32\" => Some(ast::TyF32),\n             \"f64\" => Some(ast::TyF64),\n-            \"f128\" => Some(ast::TyF128),\n             _ => {\n                 cx.span_err(span, \"invalid floating point type in hexfloat!\");\n                 None"}, {"sha": "931f0312f579c809686a3e7d76c223c06e7acbd1", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -64,7 +64,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"overloaded_calls\", Active),\n     (\"unboxed_closure_sugar\", Active),\n \n-    (\"quad_precision_float\", Active),\n+    (\"quad_precision_float\", Removed),\n \n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n@@ -91,7 +91,6 @@ enum Status {\n /// A set of features to be used by later passes.\n pub struct Features {\n     pub default_type_params: Cell<bool>,\n-    pub quad_precision_float: Cell<bool>,\n     pub issue_5723_bootstrap: Cell<bool>,\n     pub overloaded_calls: Cell<bool>,\n }\n@@ -100,7 +99,6 @@ impl Features {\n     pub fn new() -> Features {\n         Features {\n             default_type_params: Cell::new(false),\n-            quad_precision_float: Cell::new(false),\n             issue_5723_bootstrap: Cell::new(false),\n             overloaded_calls: Cell::new(false),\n         }\n@@ -425,7 +423,6 @@ pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n     sess.abort_if_errors();\n \n     sess.features.default_type_params.set(cx.has_feature(\"default_type_params\"));\n-    sess.features.quad_precision_float.set(cx.has_feature(\"quad_precision_float\"));\n     sess.features.issue_5723_bootstrap.set(cx.has_feature(\"issue_5723_bootstrap\"));\n     sess.features.overloaded_calls.set(cx.has_feature(\"overloaded_calls\"));\n }"}, {"sha": "4156329331471ffa035f83984c5f1804ca416ce6", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -330,7 +330,6 @@ fn parse_ty(st: &mut PState, conv: conv_did) -> ty::t {\n           'D' => return ty::mk_mach_int(ast::TyI64),\n           'f' => return ty::mk_mach_float(ast::TyF32),\n           'F' => return ty::mk_mach_float(ast::TyF64),\n-          'Q' => return ty::mk_mach_float(ast::TyF128),\n           _ => fail!(\"parse_ty: bad numeric type\")\n         }\n       }"}, {"sha": "1f36c3850cf4b19ddd419b3694c7ee73eba3afe6", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -221,7 +221,6 @@ fn enc_sty(w: &mut MemWriter, cx: &ctxt, st: &ty::sty) {\n             match t {\n                 TyF32 => mywrite!(w, \"Mf\"),\n                 TyF64 => mywrite!(w, \"MF\"),\n-                TyF128 => mywrite!(w, \"MQ\")\n             }\n         }\n         ty::ty_enum(def, ref substs) => {"}, {"sha": "d42befc65421b36bb184bb7f1a3053b1f986eb86", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -770,7 +770,6 @@ impl PrimitiveTypeTable {\n         table.intern(\"char\",    TyChar);\n         table.intern(\"f32\",     TyFloat(TyF32));\n         table.intern(\"f64\",     TyFloat(TyF64));\n-        table.intern(\"f128\",    TyFloat(TyF128));\n         table.intern(\"int\",     TyInt(TyI));\n         table.intern(\"i8\",      TyInt(TyI8));\n         table.intern(\"i16\",     TyInt(TyI16));"}, {"sha": "e7895a1bb9a6dbac4932172c4c41af651988dd3e", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -1621,7 +1621,6 @@ fn basic_type_metadata(cx: &CrateContext, t: ty::t) -> DIType {\n         ty::ty_float(float_ty) => match float_ty {\n             ast::TyF32 => (\"f32\".to_string(), DW_ATE_float),\n             ast::TyF64 => (\"f64\".to_string(), DW_ATE_float),\n-            ast::TyF128 => (\"f128\".to_string(), DW_ATE_float)\n         },\n         _ => cx.sess().bug(\"debuginfo::basic_type_metadata - t is invalid type\")\n     };"}, {"sha": "91148d31423fb59a9e0ee6e560ef4a2ce5123aa3", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -148,7 +148,6 @@ impl<'a, 'b> Reflector<'a, 'b> {\n           ty::ty_uint(ast::TyU64) => self.leaf(\"u64\"),\n           ty::ty_float(ast::TyF32) => self.leaf(\"f32\"),\n           ty::ty_float(ast::TyF64) => self.leaf(\"f64\"),\n-          ty::ty_float(ast::TyF128) => self.leaf(\"f128\"),\n \n           // Should rename to vec_*.\n           ty::ty_vec(ref mt, Some(sz)) => {"}, {"sha": "1ec792182bd1e5171379ca28bbd333ec3637ef04", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -88,10 +88,6 @@ impl Type {\n         ty!(llvm::LLVMDoubleTypeInContext(ccx.llcx))\n     }\n \n-    pub fn f128(ccx: &CrateContext) -> Type {\n-        ty!(llvm::LLVMFP128TypeInContext(ccx.llcx))\n-    }\n-\n     pub fn bool(ccx: &CrateContext) -> Type {\n         Type::i1(ccx)\n     }\n@@ -135,7 +131,6 @@ impl Type {\n         match t {\n             ast::TyF32 => Type::f32(ccx),\n             ast::TyF64 => Type::f64(ccx),\n-            ast::TyF128 => Type::f128(ccx)\n         }\n     }\n "}, {"sha": "01e3af8a3d79fc956ed3eab5e5bccd1daaceceb2", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -694,7 +694,6 @@ mod primitives {\n     def_prim_ty!(TY_U64,    super::ty_uint(ast::TyU64),     12)\n     def_prim_ty!(TY_F32,    super::ty_float(ast::TyF32),    14)\n     def_prim_ty!(TY_F64,    super::ty_float(ast::TyF64),    15)\n-    def_prim_ty!(TY_F128,   super::ty_float(ast::TyF128),   16)\n \n     pub static TY_BOT: t_box_ = t_box_ {\n         sty: super::ty_bot,\n@@ -1272,9 +1271,6 @@ pub fn mk_f32() -> t { mk_prim_t(&primitives::TY_F32) }\n #[inline]\n pub fn mk_f64() -> t { mk_prim_t(&primitives::TY_F64) }\n \n-#[inline]\n-pub fn mk_f128() -> t { mk_prim_t(&primitives::TY_F128) }\n-\n #[inline]\n pub fn mk_uint() -> t { mk_prim_t(&primitives::TY_UINT) }\n \n@@ -1314,7 +1310,6 @@ pub fn mk_mach_float(tm: ast::FloatTy) -> t {\n     match tm {\n         ast::TyF32  => mk_f32(),\n         ast::TyF64  => mk_f64(),\n-        ast::TyF128 => mk_f128()\n     }\n }\n "}, {"sha": "1ad15e536ecc474f5f8cc71ec10a351729f371bf", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -355,13 +355,6 @@ pub fn ast_ty_to_prim_ty(tcx: &ty::ctxt, ast_ty: &ast::Ty) -> Option<ty::t> {\n                             Some(ty::mk_mach_uint(uit))\n                         }\n                         ast::TyFloat(ft) => {\n-                            if ft == ast::TyF128 && !tcx.sess.features.quad_precision_float.get() {\n-                                tcx.sess.span_err(path.span, \"quadruple precision floats are \\\n-                                                              missing complete runtime support\");\n-                                tcx.sess.span_note(path.span, \"add \\\n-                                                               #[feature(quad_precision_float)] \\\n-                                                               to the crate attributes to enable\");\n-                            }\n                             check_path_args(tcx, path, NO_TPS | NO_REGIONS);\n                             Some(ty::mk_mach_float(ft))\n                         }"}, {"sha": "d7bbb439dbb7788f175130fbf9f8a1db2ae771a3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -1072,7 +1072,7 @@ pub enum Type {\n pub enum Primitive {\n     Int, I8, I16, I32, I64,\n     Uint, U8, U16, U32, U64,\n-    F32, F64, F128,\n+    F32, F64,\n     Char,\n     Bool,\n     Nil,\n@@ -1111,7 +1111,6 @@ impl Primitive {\n             \"str\" => Some(Str),\n             \"f32\" => Some(F32),\n             \"f64\" => Some(F64),\n-            \"f128\" => Some(F128),\n             \"slice\" => Some(Slice),\n             \"tuple\" => Some(PrimitiveTuple),\n             _ => None,\n@@ -1153,7 +1152,6 @@ impl Primitive {\n             U64 => \"u64\",\n             F32 => \"f32\",\n             F64 => \"f64\",\n-            F128 => \"f128\",\n             Str => \"str\",\n             Bool => \"bool\",\n             Char => \"char\",\n@@ -1227,7 +1225,6 @@ impl Clean<Type> for ty::t {\n             ty::ty_uint(ast::TyU64) => Primitive(U64),\n             ty::ty_float(ast::TyF32) => Primitive(F32),\n             ty::ty_float(ast::TyF64) => Primitive(F64),\n-            ty::ty_float(ast::TyF128) => Primitive(F128),\n             ty::ty_str => Primitive(Str),\n             ty::ty_box(t) => Managed(box t.clean()),\n             ty::ty_uniq(t) => Unique(box t.clean()),\n@@ -2010,7 +2007,6 @@ fn resolve_type(path: Path, tpbs: Option<Vec<TyParamBound>>,\n             ast::TyUint(ast::TyU64) => return Primitive(U64),\n             ast::TyFloat(ast::TyF32) => return Primitive(F32),\n             ast::TyFloat(ast::TyF64) => return Primitive(F64),\n-            ast::TyFloat(ast::TyF128) => return Primitive(F128),\n         },\n         def::DefTyParam(_, i, _) => return Generic(i),\n         def::DefTyParamBinder(i) => return TyParamBinder(i),"}, {"sha": "418d18d8d348d4656dd7a318954256b112d1ae74", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -698,7 +698,6 @@ impl fmt::Show for UintTy {\n pub enum FloatTy {\n     TyF32,\n     TyF64,\n-    TyF128\n }\n \n impl fmt::Show for FloatTy {"}, {"sha": "df8cb328270fb9110e718a8b071a4c6168f5d78e", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -168,7 +168,6 @@ pub fn float_ty_to_str(t: FloatTy) -> String {\n     match t {\n         TyF32 => \"f32\".to_string(),\n         TyF64 => \"f64\".to_string(),\n-        TyF128 => \"f128\".to_string(),\n     }\n }\n "}, {"sha": "35702b1b3cd46d6dbbc9f714d96ffa30bb78c3f3", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -448,7 +448,6 @@ fn mk_token(cx: &ExtCtxt, sp: Span, tok: &token::Token) -> Gc<ast::Expr> {\n             let s_fty = match fty {\n                 ast::TyF32 => \"TyF32\",\n                 ast::TyF64 => \"TyF64\",\n-                ast::TyF128 => \"TyF128\"\n             };\n             let e_fty = mk_ast_path(cx, sp, s_fty);\n             let e_fident = mk_ident(cx, sp, fident);"}, {"sha": "ac570c888375c4bcf8e15e6f73ab18ab8d7858c3", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -639,16 +639,9 @@ impl<'a> StringReader<'a> {\n                 /* FIXME (#2252): if this is out of range for either a\n                 32-bit or 64-bit float, it won't be noticed till the\n                 back-end.  */\n-            } else if c == '1' && n == '2' && self.nextnextch().unwrap_or('\\x00') == '8' {\n-                self.bump();\n-                self.bump();\n-                self.bump();\n-                let last_bpos = self.last_pos;\n-                self.check_float_base(start_bpos, last_bpos, base);\n-                return token::LIT_FLOAT(str_to_ident(num_str.as_slice()), ast::TyF128);\n             }\n             let last_bpos = self.last_pos;\n-            self.err_span_(start_bpos, last_bpos, \"expected `f32`, `f64` or `f128` suffix\");\n+            self.err_span_(start_bpos, last_bpos, \"expected `f32` or `f64` suffix\");\n         }\n         if is_float {\n             let last_bpos = self.last_pos;"}, {"sha": "d6827666eebb26ae3a5674279e210dec5fa22668", "filename": "src/test/run-pass/quad-precision-float.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91be86af0952aebb1f7c1811a6abcccd7bd1c26e/src%2Ftest%2Frun-pass%2Fquad-precision-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91be86af0952aebb1f7c1811a6abcccd7bd1c26e/src%2Ftest%2Frun-pass%2Fquad-precision-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fquad-precision-float.rs?ref=91be86af0952aebb1f7c1811a6abcccd7bd1c26e", "patch": "@@ -1,20 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![feature(quad_precision_float)]\n-\n-static x: f128 = 1.0 + 2.0;\n-\n-fn foo(a: f128) -> f128 { a }\n-\n-pub fn main() {\n-    let y = x;\n-    foo(y);\n-}"}, {"sha": "9757db9df4cfd1df7b021881cfce629c3f49fec7", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a93beef7f692b34168ad69633f56483d38ad8fc/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=7a93beef7f692b34168ad69633f56483d38ad8fc", "patch": "@@ -58,7 +58,6 @@ impl TyVisitor for MyVisitor {\n \n     fn visit_f32(&mut self) -> bool { true }\n     fn visit_f64(&mut self) -> bool { true }\n-    fn visit_f128(&mut self) -> bool { true }\n \n     fn visit_char(&mut self) -> bool { true }\n "}]}