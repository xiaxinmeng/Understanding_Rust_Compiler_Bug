{"sha": "ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhMmZmZTNhODAzMGUwZmI2NTkzY2I2OTA1YTM3MTQ0MWExMGE0ZTA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-07T11:42:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-07T11:42:19Z"}, "message": "liballoc: ignore tests in Miri instead of removing them entirely", "tree": {"sha": "45b55f5202af5b3582b7f621ac937e1cb8d44dfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45b55f5202af5b3582b7f621ac937e1cb8d44dfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "html_url": "https://github.com/rust-lang/rust/commit/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb", "html_url": "https://github.com/rust-lang/rust/commit/7ba1232b5ea8f6ab011efe2ce3fb97d955342fdb"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "c902971638b8e02615420f38341ab663e2b87077", "filename": "src/liballoc/alloc/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Falloc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Falloc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc%2Ftests.rs?ref=ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "patch": "@@ -22,7 +22,7 @@ fn allocate_zeroed() {\n }\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn alloc_owned_small(b: &mut Bencher) {\n     b.iter(|| {\n         let _: Box<_> = box 10;"}, {"sha": "1b1d8eab39bfc84f97686c629e5e1ef938fee124", "filename": "src/liballoc/collections/linked_list/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list%2Ftests.rs?ref=ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "patch": "@@ -182,7 +182,7 @@ fn test_insert_prev() {\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support threads\n+#[cfg_attr(miri, ignore)] // Miri does not support threads\n fn test_send() {\n     let n = list_from(&[1, 2, 3]);\n     thread::spawn(move || {"}, {"sha": "f2ce5b1d15dde13c94f03c9ef880fe0b7042f31a", "filename": "src/liballoc/collections/vec_deque/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "patch": "@@ -3,7 +3,7 @@ use super::*;\n use ::test;\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn bench_push_back_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -16,7 +16,7 @@ fn bench_push_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn bench_push_front_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::with_capacity(101);\n     b.iter(|| {\n@@ -29,7 +29,7 @@ fn bench_push_front_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn bench_pop_back_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::<i32>::with_capacity(101);\n \n@@ -43,7 +43,7 @@ fn bench_pop_back_100(b: &mut test::Bencher) {\n }\n \n #[bench]\n-#[cfg(not(miri))] // Miri does not support benchmarks\n+#[cfg_attr(miri, ignore)] // Miri does not support benchmarks\n fn bench_pop_front_100(b: &mut test::Bencher) {\n     let mut deq = VecDeque::<i32>::with_capacity(101);\n "}, {"sha": "9ddba495b7e786682b11ae446129a118fbcb8e17", "filename": "src/liballoc/sync/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Fsync%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Fsync%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync%2Ftests.rs?ref=ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "patch": "@@ -29,7 +29,7 @@ impl Drop for Canary {\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support threads\n+#[cfg_attr(miri, ignore)] // Miri does not support threads\n fn manually_share_arc() {\n     let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n     let arc_v = Arc::new(v);\n@@ -334,7 +334,7 @@ fn test_ptr_eq() {\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support threads\n+#[cfg_attr(miri, ignore)] // Miri does not support threads\n fn test_weak_count_locked() {\n     let mut a = Arc::new(atomic::AtomicBool::new(false));\n     let a2 = a.clone();"}, {"sha": "ec45de7c79e28e86bc735cb341e2dd22ac98d628", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "patch": "@@ -388,7 +388,7 @@ fn test_reverse() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_sort() {\n     let mut rng = thread_rng();\n \n@@ -1610,7 +1610,7 @@ fn panic_safe() {\n     let moduli = &[5, 20, 50];\n \n     #[cfg(miri)]\n-    let lens = (1..13);\n+    let lens = 1..13;\n     #[cfg(miri)]\n     let moduli = &[10];\n "}, {"sha": "1b011242d0137fac3790323fe4088ba19d35db48", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "patch": "@@ -166,7 +166,7 @@ fn test_join_for_different_lengths_with_long_separator() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_unsafe_slice() {\n     assert_eq!(\"ab\", unsafe {\"abc\".get_unchecked(0..2)});\n     assert_eq!(\"bc\", unsafe {\"abc\".get_unchecked(1..3)});\n@@ -483,8 +483,8 @@ mod slice_index {\n     }\n \n     #[test]\n-    #[cfg(not(target_os = \"emscripten\"))] // hits an OOM\n-    #[cfg(not(miri))] // Miri is too slow\n+    #[cfg_attr(target_os = \"emscripten\", ignore)] // hits an OOM\n+    #[cfg_attr(miri, ignore)] // Miri is too slow\n     fn simple_big() {\n         fn a_million_letter_x() -> String {\n             let mut i = 0;\n@@ -1069,7 +1069,7 @@ fn test_rev_iterator() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_chars_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(std::char::from_u32) {\n@@ -1081,7 +1081,7 @@ fn test_chars_decoding() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_chars_rev_decoding() {\n     let mut bytes = [0; 4];\n     for c in (0..0x110000).filter_map(std::char::from_u32) {\n@@ -1380,7 +1380,6 @@ fn test_bool_from_str() {\n     assert_eq!(\"not even a boolean\".parse::<bool>().ok(), None);\n }\n \n-#[cfg(not(miri))] // Miri is too slow\n fn check_contains_all_substrings(s: &str) {\n     assert!(s.contains(\"\"));\n     for i in 0..s.len() {\n@@ -1391,7 +1390,7 @@ fn check_contains_all_substrings(s: &str) {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn strslice_issue_16589() {\n     assert!(\"bananas\".contains(\"nana\"));\n \n@@ -1408,7 +1407,7 @@ fn strslice_issue_16878() {\n \n \n #[test]\n-#[cfg(not(miri))] // Miri is too slow\n+#[cfg_attr(miri, ignore)] // Miri is too slow\n fn test_strslice_contains() {\n     let x = \"There are moments, Jeeves, when one asks oneself, 'Do trousers matter?'\";\n     check_contains_all_substrings(x);"}, {"sha": "fe7b4ff24b8c9d2d2476a870375570b44ec2b336", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "patch": "@@ -523,7 +523,7 @@ fn test_reserve_exact() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve() {\n \n     // These are the interesting cases:\n@@ -601,7 +601,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve_exact() {\n \n     // This is exactly the same as test_try_reserve with the method changed."}, {"sha": "5e788d61f84fded8521b6e75e356d031d237f06d", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "patch": "@@ -1080,7 +1080,7 @@ fn test_reserve_exact() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve() {\n \n     // These are the interesting cases:\n@@ -1183,7 +1183,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve_exact() {\n \n     // This is exactly the same as test_try_reserve with the method changed."}, {"sha": "ebcc832017172ed333c6c490b31a7e8b58396e1e", "filename": "src/liballoc/tests/vec_deque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca2ffe3a8030e0fb6593cb6905a371441a10a4e0/src%2Fliballoc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec_deque.rs?ref=ca2ffe3a8030e0fb6593cb6905a371441a10a4e0", "patch": "@@ -1100,7 +1100,7 @@ fn test_reserve_exact_2() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve() {\n     // These are the interesting cases:\n     // * exactly isize::MAX should never trigger a CapacityOverflow (can be OOM)\n@@ -1214,7 +1214,7 @@ fn test_try_reserve() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri does not support signalling OOM\n+#[cfg_attr(miri, ignore)] // Miri does not support signalling OOM\n fn test_try_reserve_exact() {\n     // This is exactly the same as test_try_reserve with the method changed.\n     // See that test for comments."}]}