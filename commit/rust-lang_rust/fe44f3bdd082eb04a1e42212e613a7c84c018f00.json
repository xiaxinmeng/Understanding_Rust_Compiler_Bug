{"sha": "fe44f3bdd082eb04a1e42212e613a7c84c018f00", "node_id": "C_kwDOAAsO6NoAKGZlNDRmM2JkZDA4MmViMDRhMWU0MjIxMmU2MTNhN2M4NGMwMThmMDA", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-01-31T22:38:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-31T22:38:53Z"}, "message": "Rollup merge of #107508 - WaffleLapkin:uneq'15, r=oli-obk\n\n`Edition` micro refactor\n\nr? ``@oli-obk``", "tree": {"sha": "618f7838585584cc40d12f68ce3650d39a7e9d3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/618f7838585584cc40d12f68ce3650d39a7e9d3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe44f3bdd082eb04a1e42212e613a7c84c018f00", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj2Zh9CRBK7hj4Ov3rIwAATG0IAE8KFO2PzCXiUq2TVcZZ4p/g\nRWKiE91MR5gBViq4JDW7bJK2lYI0PD5p3qMFNhgJ6j4N00XAnKWpLCoCT6IXB4Ak\n6R+m/Qq8YBhZ1KHUi92sq8zg4vECPF/IKQoN7Gtr5ppKIWf/k/5HFmV1wrHRftrD\ngsZtYAuTKmt83Hg+2NpvCxCPEyWVpHa/PBw36r0yT2TNP8yCD/fR2xF6+tKd+QP+\nJflRZii4b83DbcNU/FIHaEkO1kJ+QB8BYv63B/Wqboi7Nx09sseXGz5jFiJWVfRA\nMaix0WwYAISmYXO48SyC111c8ZoMpE15aQmm/gYBuOmwgjCUExT0mBst1xSftK4=\n=KNp9\n-----END PGP SIGNATURE-----\n", "payload": "tree 618f7838585584cc40d12f68ce3650d39a7e9d3f\nparent f0e4a1c9cb7890576b22b740867608af43dac714\nparent ef6b583a80495ccbfd378eb19ebec3d633036790\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1675204733 +0100\ncommitter GitHub <noreply@github.com> 1675204733 +0100\n\nRollup merge of #107508 - WaffleLapkin:uneq'15, r=oli-obk\n\n`Edition` micro refactor\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe44f3bdd082eb04a1e42212e613a7c84c018f00", "html_url": "https://github.com/rust-lang/rust/commit/fe44f3bdd082eb04a1e42212e613a7c84c018f00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe44f3bdd082eb04a1e42212e613a7c84c018f00/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0e4a1c9cb7890576b22b740867608af43dac714", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0e4a1c9cb7890576b22b740867608af43dac714", "html_url": "https://github.com/rust-lang/rust/commit/f0e4a1c9cb7890576b22b740867608af43dac714"}, {"sha": "ef6b583a80495ccbfd378eb19ebec3d633036790", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6b583a80495ccbfd378eb19ebec3d633036790", "html_url": "https://github.com/rust-lang/rust/commit/ef6b583a80495ccbfd378eb19ebec3d633036790"}], "stats": {"total": 53, "additions": 27, "deletions": 26}, "files": [{"sha": "fa8567eac609074925d82b465c6bae7feaf21ea9", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=fe44f3bdd082eb04a1e42212e613a7c84c018f00", "patch": "@@ -131,7 +131,7 @@ pub fn print_crate<'a>(\n \n         // Currently, in Rust 2018 we don't have `extern crate std;` at the crate\n         // root, so this is not needed, and actually breaks things.\n-        if edition == Edition::Edition2015 {\n+        if edition.rust_2015() {\n             // `#![no_std]`\n             let fake_attr = attr::mk_attr_word(g, ast::AttrStyle::Inner, sym::no_std, DUMMY_SP);\n             s.print_attribute(&fake_attr);"}, {"sha": "3bf041cebcb88a6996b704dce8f2ce409a304cd9", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=fe44f3bdd082eb04a1e42212e613a7c84c018f00", "patch": "@@ -1717,7 +1717,7 @@ impl<'a> Resolver<'a> {\n                         Applicability::MaybeIncorrect,\n                     )),\n                 )\n-            } else if self.session.edition() == Edition::Edition2015 {\n+            } else if self.session.rust_2015() {\n                 (\n                     format!(\"maybe a missing crate `{ident}`?\"),\n                     Some(("}, {"sha": "1c985d43658ae25f1b66acfedfc1ccde9a75cdfa", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=fe44f3bdd082eb04a1e42212e613a7c84c018f00", "patch": "@@ -7,7 +7,6 @@ use rustc_middle::ty;\n use rustc_session::lint::builtin::PROC_MACRO_DERIVE_RESOLUTION_FALLBACK;\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_span::def_id::LocalDefId;\n-use rustc_span::edition::Edition;\n use rustc_span::hygiene::{ExpnId, ExpnKind, LocalExpnId, MacroKind, SyntaxContext};\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{Span, DUMMY_SP};\n@@ -86,7 +85,7 @@ impl<'a> Resolver<'a> {\n         // 4c. Standard library prelude (de-facto closed, controlled).\n         // 6. Language prelude: builtin attributes (closed, controlled).\n \n-        let rust_2015 = ctxt.edition() == Edition::Edition2015;\n+        let rust_2015 = ctxt.edition().rust_2015();\n         let (ns, macro_kind, is_absolute_path) = match scope_set {\n             ScopeSet::All(ns, _) => (ns, None, false),\n             ScopeSet::AbsolutePath(ns) => (ns, None, true),"}, {"sha": "3b2cd1864c518e1e3dcebba102cf9aa8095412ad", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=fe44f3bdd082eb04a1e42212e613a7c84c018f00", "patch": "@@ -918,23 +918,24 @@ impl Session {\n         ret\n     }\n \n+    /// Is this edition 2015?\n     pub fn rust_2015(&self) -> bool {\n-        self.edition() == Edition::Edition2015\n+        self.edition().rust_2015()\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?\n     pub fn rust_2018(&self) -> bool {\n-        self.edition() >= Edition::Edition2018\n+        self.edition().rust_2018()\n     }\n \n     /// Are we allowed to use features from the Rust 2021 edition?\n     pub fn rust_2021(&self) -> bool {\n-        self.edition() >= Edition::Edition2021\n+        self.edition().rust_2021()\n     }\n \n     /// Are we allowed to use features from the Rust 2024 edition?\n     pub fn rust_2024(&self) -> bool {\n-        self.edition() >= Edition::Edition2024\n+        self.edition().rust_2024()\n     }\n \n     /// Returns `true` if we cannot skip the PLT for shared library calls."}, {"sha": "e66ec07904341b8585d529f82c2d87adc829bbc7", "filename": "compiler/rustc_span/src/edition.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_span%2Fsrc%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedition.rs?ref=fe44f3bdd082eb04a1e42212e613a7c84c018f00", "patch": "@@ -49,50 +49,51 @@ impl fmt::Display for Edition {\n }\n \n impl Edition {\n-    pub fn lint_name(&self) -> &'static str {\n-        match *self {\n+    pub fn lint_name(self) -> &'static str {\n+        match self {\n             Edition::Edition2015 => \"rust_2015_compatibility\",\n             Edition::Edition2018 => \"rust_2018_compatibility\",\n             Edition::Edition2021 => \"rust_2021_compatibility\",\n             Edition::Edition2024 => \"rust_2024_compatibility\",\n         }\n     }\n \n-    pub fn feature_name(&self) -> Symbol {\n-        match *self {\n+    pub fn feature_name(self) -> Symbol {\n+        match self {\n             Edition::Edition2015 => sym::rust_2015_preview,\n             Edition::Edition2018 => sym::rust_2018_preview,\n             Edition::Edition2021 => sym::rust_2021_preview,\n             Edition::Edition2024 => sym::rust_2024_preview,\n         }\n     }\n \n-    pub fn is_stable(&self) -> bool {\n-        match *self {\n+    pub fn is_stable(self) -> bool {\n+        match self {\n             Edition::Edition2015 => true,\n             Edition::Edition2018 => true,\n             Edition::Edition2021 => true,\n             Edition::Edition2024 => false,\n         }\n     }\n \n-    pub fn rust_2015(&self) -> bool {\n-        *self == Edition::Edition2015\n+    /// Is this edition 2015?\n+    pub fn rust_2015(self) -> bool {\n+        self == Edition::Edition2015\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?\n-    pub fn rust_2018(&self) -> bool {\n-        *self >= Edition::Edition2018\n+    pub fn rust_2018(self) -> bool {\n+        self >= Edition::Edition2018\n     }\n \n     /// Are we allowed to use features from the Rust 2021 edition?\n-    pub fn rust_2021(&self) -> bool {\n-        *self >= Edition::Edition2021\n+    pub fn rust_2021(self) -> bool {\n+        self >= Edition::Edition2021\n     }\n \n     /// Are we allowed to use features from the Rust 2024 edition?\n-    pub fn rust_2024(&self) -> bool {\n-        *self >= Edition::Edition2024\n+    pub fn rust_2024(self) -> bool {\n+        self >= Edition::Edition2024\n     }\n }\n "}, {"sha": "006102a5f2fcfc471abf0c1523bd1d1f22c029fc", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe44f3bdd082eb04a1e42212e613a7c84c018f00/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=fe44f3bdd082eb04a1e42212e613a7c84c018f00", "patch": "@@ -706,22 +706,22 @@ impl Span {\n \n     #[inline]\n     pub fn rust_2015(self) -> bool {\n-        self.edition() == edition::Edition::Edition2015\n+        self.edition().rust_2015()\n     }\n \n     #[inline]\n     pub fn rust_2018(self) -> bool {\n-        self.edition() >= edition::Edition::Edition2018\n+        self.edition().rust_2018()\n     }\n \n     #[inline]\n     pub fn rust_2021(self) -> bool {\n-        self.edition() >= edition::Edition::Edition2021\n+        self.edition().rust_2021()\n     }\n \n     #[inline]\n     pub fn rust_2024(self) -> bool {\n-        self.edition() >= edition::Edition::Edition2024\n+        self.edition().rust_2024()\n     }\n \n     /// Returns the source callee."}]}