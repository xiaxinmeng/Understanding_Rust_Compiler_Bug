{"sha": "d862495d191dc432e92015a724780477f743152e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NjI0OTVkMTkxZGM0MzJlOTIwMTVhNzI0NzgwNDc3Zjc0MzE1MmU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-30T18:16:49Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-07T12:26:34Z"}, "message": "Lint ifs with the same then and else blocks", "tree": {"sha": "f8405cf2093b59907d2dac424687d4fa6ec69d21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8405cf2093b59907d2dac424687d4fa6ec69d21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d862495d191dc432e92015a724780477f743152e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d862495d191dc432e92015a724780477f743152e", "html_url": "https://github.com/rust-lang/rust/commit/d862495d191dc432e92015a724780477f743152e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d862495d191dc432e92015a724780477f743152e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432", "html_url": "https://github.com/rust-lang/rust/commit/fe6f2a22ba48f8187ed69cd3d479d7a0dfa3b432"}], "stats": {"total": 133, "additions": 115, "deletions": 18}, "files": [{"sha": "01999cce70b90775a7878dbf43b7d3f51e00d3a1", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d862495d191dc432e92015a724780477f743152e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d862495d191dc432e92015a724780477f743152e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d862495d191dc432e92015a724780477f743152e", "patch": "@@ -47,6 +47,7 @@ name\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                   | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                   | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n+[if_same_then_else](https://github.com/Manishearth/rust-clippy/wiki#if_same_then_else)                         | warn    | if with the same *then* and *else* blocks\n [ifs_same_cond](https://github.com/Manishearth/rust-clippy/wiki#ifs_same_cond)                                 | warn    | consecutive `ifs` with the same condition\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases"}, {"sha": "f8fe09c31335950ef4be8784a3ad8fafccf54e79", "filename": "src/copies.rs", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d862495d191dc432e92015a724780477f743152e/src%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d862495d191dc432e92015a724780477f743152e/src%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcopies.rs?ref=d862495d191dc432e92015a724780477f743152e", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n-use utils::{get_parent_expr, is_exp_equal, span_lint};\n+use utils::{get_parent_expr, in_macro, is_exp_equal, is_stmt_equal, over, span_lint, span_note_and_lint};\n \n /// **What it does:** This lint checks for consecutive `ifs` with the same condition. This lint is\n /// `Warn` by default.\n@@ -16,33 +16,79 @@ declare_lint! {\n     \"consecutive `ifs` with the same condition\"\n }\n \n+/// **What it does:** This lint checks for `if/else` with the same body as the *then* part and the\n+/// *else* part. This lint is `Warn` by default.\n+///\n+/// **Why is this bad?** This is probably a copy & paste error.\n+///\n+/// **Known problems:** Hopefully none.\n+///\n+/// **Example:** `if .. { 42 } else { 42 }`\n+declare_lint! {\n+    pub IF_SAME_THEN_ELSE,\n+    Warn,\n+    \"if with the same *then* and *else* blocks\"\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub struct CopyAndPaste;\n \n impl LintPass for CopyAndPaste {\n     fn get_lints(&self) -> LintArray {\n         lint_array![\n-            IFS_SAME_COND\n+            IFS_SAME_COND,\n+            IF_SAME_THEN_ELSE\n         ]\n     }\n }\n \n impl LateLintPass for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n-        // skip ifs directly in else, it will be checked in the parent if\n-        if let Some(&Expr{node: ExprIf(_, _, Some(ref else_expr)), ..}) = get_parent_expr(cx, expr) {\n-            if else_expr.id == expr.id {\n-                return;\n-            }\n+        if !in_macro(cx, expr.span) {\n+            lint_same_then_else(cx, expr);\n+            lint_same_cond(cx, expr);\n         }\n+    }\n+}\n \n-        let conds = condition_sequence(expr);\n-\n-        for (n, i) in conds.iter().enumerate() {\n-            for j in conds.iter().skip(n+1) {\n-                if is_exp_equal(cx, i, j) {\n-                    span_lint(cx, IFS_SAME_COND, j.span, \"this if as the same condition as a previous if\");\n+/// Implementation of `IF_SAME_THEN_ELSE`.\n+fn lint_same_then_else(cx: &LateContext, expr: &Expr) {\n+    if let ExprIf(_, ref then_block, Some(ref else_expr)) = expr.node {\n+        let must_lint = if let ExprBlock(ref else_block) = else_expr.node {\n+            over(&then_block.stmts, &else_block.stmts, |l, r| is_stmt_equal(cx, l, r)) &&\n+                match (&then_block.expr, &else_block.expr) {\n+                    (&Some(ref then_expr), &Some(ref else_expr)) => {\n+                        is_exp_equal(cx, &then_expr, &else_expr)\n+                    }\n+                    (&None, &None) => true,\n+                    _ => false,\n                 }\n+        }\n+        else {\n+            false\n+        };\n+\n+        if must_lint {\n+            span_lint(cx, IF_SAME_THEN_ELSE, expr.span, \"this if has the same then and else blocks\");\n+        }\n+    }\n+}\n+\n+/// Implementation of `IFS_SAME_COND`.\n+fn lint_same_cond(cx: &LateContext, expr: &Expr) {\n+    // skip ifs directly in else, it will be checked in the parent if\n+    if let Some(&Expr{node: ExprIf(_, _, Some(ref else_expr)), ..}) = get_parent_expr(cx, expr) {\n+        if else_expr.id == expr.id {\n+            return;\n+        }\n+    }\n+\n+    let conds = condition_sequence(expr);\n+\n+    for (n, i) in conds.iter().enumerate() {\n+        for j in conds.iter().skip(n+1) {\n+            if is_exp_equal(cx, i, j) {\n+                span_note_and_lint(cx, IFS_SAME_COND, j.span, \"this if has the same condition as a previous if\", i.span, \"same as this\");\n             }\n         }\n     }"}, {"sha": "35ec0e13c3c17d781778f3bcdaacbeb46f641a4c", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d862495d191dc432e92015a724780477f743152e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d862495d191dc432e92015a724780477f743152e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d862495d191dc432e92015a724780477f743152e", "patch": "@@ -192,6 +192,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_EXPR,\n         block_in_if_condition::BLOCK_IN_IF_CONDITION_STMT,\n         collapsible_if::COLLAPSIBLE_IF,\n+        copies::IF_SAME_THEN_ELSE,\n         copies::IFS_SAME_COND,\n         cyclomatic_complexity::CYCLOMATIC_COMPLEXITY,\n         derive::DERIVE_HASH_NOT_EQ,"}, {"sha": "13fd849993f79b448bbc7c4f1762ee8f656dc6f3", "filename": "src/utils.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d862495d191dc432e92015a724780477f743152e/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d862495d191dc432e92015a724780477f743152e/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=d862495d191dc432e92015a724780477f743152e", "patch": "@@ -589,6 +589,14 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n     }\n }\n \n+pub fn is_stmt_equal(cx: &LateContext, left: &Stmt, right: &Stmt) -> bool {\n+    match (&left.node, &right.node) {\n+        (&StmtExpr(ref l, _), &StmtExpr(ref r, _)) => is_exp_equal(cx, l, r),\n+        (&StmtSemi(ref l, _), &StmtSemi(ref r, _)) => is_exp_equal(cx, l, r),\n+        _ => false,\n+    }\n+}\n+\n pub fn is_exp_equal(cx: &LateContext, left: &Expr, right: &Expr) -> bool {\n     if let (Some(l), Some(r)) = (constant(cx, left), constant(cx, right)) {\n         if l == r {\n@@ -649,7 +657,7 @@ fn is_qself_equal(left: &QSelf, right: &QSelf) -> bool {\n     left.ty.node == right.ty.node && left.position == right.position\n }\n \n-fn over<X, F>(left: &[X], right: &[X], mut eq_fn: F) -> bool\n+pub fn over<X, F>(left: &[X], right: &[X], mut eq_fn: F) -> bool\n     where F: FnMut(&X, &X) -> bool\n {\n     left.len() == right.len() && left.iter().zip(right).all(|(x, y)| eq_fn(x, y))"}, {"sha": "94c5c620f3465420df91f846587f6b43e8a510c3", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 44, "deletions": 4, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d862495d191dc432e92015a724780477f743152e/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d862495d191dc432e92015a724780477f743152e/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=d862495d191dc432e92015a724780477f743152e", "patch": "@@ -1,23 +1,61 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#![allow(dead_code)]\n #![deny(clippy)]\n \n fn foo() -> bool { unimplemented!() }\n \n-fn main() {\n+fn if_same_then_else() {\n+    if true { //~ERROR this if has the same then and else blocks\n+        foo();\n+    }\n+    else {\n+        foo();\n+    }\n+\n+    if true {\n+        foo();\n+        foo();\n+    }\n+    else {\n+        foo();\n+    }\n+\n+    let _ = if true { //~ERROR this if has the same then and else blocks\n+        foo();\n+        42\n+    }\n+    else {\n+        foo();\n+        42\n+    };\n+\n+    if true {\n+        foo();\n+    }\n+\n+    let _ = if true { //~ERROR this if has the same then and else blocks\n+        42\n+    }\n+    else {\n+        42\n+    };\n+}\n+\n+fn ifs_same_cond() {\n     let a = 0;\n \n     if a == 1 {\n     }\n-    else if a == 1 { //~ERROR this if as the same condition as a previous if\n+    else if a == 1 { //~ERROR this if has the same condition as a previous if\n     }\n \n     if 2*a == 1 {\n     }\n     else if 2*a == 2 {\n     }\n-    else if 2*a == 1 { //~ERROR this if as the same condition as a previous if\n+    else if 2*a == 1 { //~ERROR this if has the same condition as a previous if\n     }\n     else if a == 1 {\n     }\n@@ -26,6 +64,8 @@ fn main() {\n     // this to make the intention clearer anyway.\n     if foo() {\n     }\n-    else if foo() { //~ERROR this if as the same condition as a previous if\n+    else if foo() { //~ERROR this if has the same condition as a previous if\n     }\n }\n+\n+fn main() {}"}, {"sha": "c2ad24bc4eeed63a9a17aa63b109e5948c1b21d3", "filename": "tests/compile-fail/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d862495d191dc432e92015a724780477f743152e/tests%2Fcompile-fail%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d862495d191dc432e92015a724780477f743152e/tests%2Fcompile-fail%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_bool.rs?ref=d862495d191dc432e92015a724780477f743152e", "patch": "@@ -1,6 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n+#[allow(if_same_then_else)]\n #[deny(needless_bool)]\n fn main() {\n     let x = true;"}]}