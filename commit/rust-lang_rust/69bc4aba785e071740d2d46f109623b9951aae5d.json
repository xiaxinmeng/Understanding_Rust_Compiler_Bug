{"sha": "69bc4aba785e071740d2d46f109623b9951aae5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YmM0YWJhNzg1ZTA3MTc0MGQyZDQ2ZjEwOTYyM2I5OTUxYWFlNWQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-23T19:40:35Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-11-06T12:01:02Z"}, "message": "Remove unnecessary `Deref` impl for `Attribute`.\n\nThis kind of thing just makes the code harder to read.", "tree": {"sha": "c21cbc01c951ccece7ee9cbef03142811e8ccc78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21cbc01c951ccece7ee9cbef03142811e8ccc78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69bc4aba785e071740d2d46f109623b9951aae5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69bc4aba785e071740d2d46f109623b9951aae5d", "html_url": "https://github.com/rust-lang/rust/commit/69bc4aba785e071740d2d46f109623b9951aae5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69bc4aba785e071740d2d46f109623b9951aae5d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa", "html_url": "https://github.com/rust-lang/rust/commit/e8b190ac4ad79e58d21ee1d573529ff74d8eedaa"}], "stats": {"total": 85, "additions": 41, "deletions": 44}, "files": [{"sha": "067fefd321041e2a8e43feff69b4c0b4d2cd663b", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -999,8 +999,8 @@ impl<'a> LoweringContext<'a> {\n         // the `HirId`s. We don't actually need HIR version of attributes anyway.\n         Attribute {\n             item: AttrItem {\n-                path: attr.path.clone(),\n-                tokens: self.lower_token_stream(attr.tokens.clone()),\n+                path: attr.item.path.clone(),\n+                tokens: self.lower_token_stream(attr.item.tokens.clone()),\n             },\n             id: attr.id,\n             style: attr.style,"}, {"sha": "5bc8a0e16a2a8be6edc367796d250c15a9a78d26", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -706,7 +706,7 @@ impl EarlyLintPass for DeprecatedAttr {\n             }\n         }\n         if attr.check_name(sym::no_start) || attr.check_name(sym::crate_id) {\n-            let path_str = pprust::path_to_string(&attr.path);\n+            let path_str = pprust::path_to_string(&attr.item.path);\n             let msg = format!(\"use of deprecated attribute `{}`: no longer used.\", path_str);\n             lint_deprecated_attr(cx, attr, &msg, None);\n         }"}, {"sha": "1b10cff56898c952aeb643ddfaa4ddd68d225406", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -11,7 +11,7 @@ crate fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n \n     for attr in tcx.hir().krate().attrs.iter() {\n-        if attr.path == sym::link_args {\n+        if attr.item.path == sym::link_args {\n             if let Some(linkarg) = attr.value_str() {\n                 collector.add_link_args(&linkarg.as_str());\n             }"}, {"sha": "4849ec25560bf98fd7b86d40f6e3bae2016c3cfd", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -1230,7 +1230,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n \n     fn visit_attribute(&mut self, attr: &'b ast::Attribute) {\n         if !attr.is_sugared_doc && is_builtin_attr(attr) {\n-            self.r.builtin_attrs.push((attr.path.segments[0].ident, self.parent_scope));\n+            self.r.builtin_attrs.push((attr.item.path.segments[0].ident, self.parent_scope));\n         }\n         visit::walk_attribute(self, attr);\n     }"}, {"sha": "f4338d24629544c9cfdac30db4e1a8bff892c3eb", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -179,7 +179,10 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n         let (path, kind, derives, after_derive) = match invoc.kind {\n             InvocationKind::Attr { ref attr, ref derives, after_derive, .. } =>\n-                (&attr.path, MacroKind::Attr, self.arenas.alloc_ast_paths(derives), after_derive),\n+                (&attr.item.path,\n+                 MacroKind::Attr,\n+                 self.arenas.alloc_ast_paths(derives),\n+                 after_derive),\n             InvocationKind::Bang { ref mac, .. } =>\n                 (&mac.path, MacroKind::Bang, &[][..], false),\n             InvocationKind::Derive { ref path, .. } =>"}, {"sha": "7592df57fc6358903b76558712f6039cfd694656", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -1195,7 +1195,7 @@ fn null_id() -> rls_data::Id {\n fn lower_attributes(attrs: Vec<Attribute>, scx: &SaveContext<'_, '_>) -> Vec<rls_data::Attribute> {\n     attrs.into_iter()\n     // Only retain real attributes. Doc comments are lowered separately.\n-    .filter(|attr| attr.path != sym::doc)\n+    .filter(|attr| attr.item.path != sym::doc)\n     .map(|mut attr| {\n         // Remove the surrounding '#[..]' or '#![..]' of the pretty printed\n         // attribute. First normalize all inner attribute (#![..]) to outer"}, {"sha": "09e372ac8306d9e78b9f1ce307f914cdb44714d4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -2706,7 +2706,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     }\n \n     codegen_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n-        if attr.path != sym::inline {\n+        if attr.item.path != sym::inline {\n             return ia;\n         }\n         match attr.meta().map(|i| i.kind) {\n@@ -2746,7 +2746,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n     });\n \n     codegen_fn_attrs.optimize = attrs.iter().fold(OptimizeAttr::None, |ia, attr| {\n-        if attr.path != sym::optimize {\n+        if attr.item.path != sym::optimize {\n             return ia;\n         }\n         let err = |sp, s| span_err!(tcx.sess.diagnostic(), sp, E0722, \"{}\", s);"}, {"sha": "df1fb5d97d74d32df6d896fbf1bfdc89e81da4b9", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -2202,12 +2202,6 @@ pub struct Attribute {\n     pub span: Span,\n }\n \n-// Compatibility impl to avoid churn, consider removing.\n-impl std::ops::Deref for Attribute {\n-    type Target = AttrItem;\n-    fn deref(&self) -> &Self::Target { &self.item }\n-}\n-\n /// `TraitRef`s appear in impls.\n ///\n /// Resolution maps each `TraitRef`'s `ref_id` to its defining trait; that's all"}, {"sha": "e77d9ef326a64d5061fd238ad1f6681fb1685800", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -228,18 +228,18 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n             sym::stable,\n             sym::rustc_promotable,\n             sym::rustc_allow_const_fn_ptr,\n-        ].iter().any(|&s| attr.path == s) {\n+        ].iter().any(|&s| attr.item.path == s) {\n             continue // not a stability level\n         }\n \n         mark_used(attr);\n \n         let meta = attr.meta();\n \n-        if attr.path == sym::rustc_promotable {\n+        if attr.item.path == sym::rustc_promotable {\n             promotable = true;\n         }\n-        if attr.path == sym::rustc_allow_const_fn_ptr {\n+        if attr.item.path == sym::rustc_allow_const_fn_ptr {\n             allow_const_fn_ptr = true;\n         }\n         // attributes with data\n@@ -778,7 +778,7 @@ pub fn find_repr_attrs(sess: &ParseSess, attr: &Attribute) -> Vec<ReprAttr> {\n \n     let mut acc = Vec::new();\n     let diagnostic = &sess.span_diagnostic;\n-    if attr.path == sym::repr {\n+    if attr.item.path == sym::repr {\n         if let Some(items) = attr.meta_item_list() {\n             mark_used(attr);\n             for item in items {"}, {"sha": "0c46c501be9b75a5947d302a5f4794a4b1986bb5", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -150,7 +150,7 @@ impl Attribute {\n     ///\n     /// To check the attribute name without marking it used, use the `path` field directly.\n     pub fn check_name(&self, name: Symbol) -> bool {\n-        let matches = self.path == name;\n+        let matches = self.item.path == name;\n         if matches {\n             mark_used(self);\n         }\n@@ -159,8 +159,8 @@ impl Attribute {\n \n     /// For a single-segment attribute, returns its name; otherwise, returns `None`.\n     pub fn ident(&self) -> Option<Ident> {\n-        if self.path.segments.len() == 1 {\n-            Some(self.path.segments[0].ident)\n+        if self.item.path.segments.len() == 1 {\n+            Some(self.item.path.segments[0].ident)\n         } else {\n             None\n         }\n@@ -181,7 +181,7 @@ impl Attribute {\n     }\n \n     pub fn is_word(&self) -> bool {\n-        self.tokens.is_empty()\n+        self.item.tokens.is_empty()\n     }\n \n     pub fn is_meta_item_list(&self) -> bool {\n@@ -282,7 +282,7 @@ impl Attribute {\n \n     pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n         Ok(MetaItem {\n-            path: self.path.clone(),\n+            path: self.item.path.clone(),\n             kind: parse::parse_in_attr(sess, self, |p| p.parse_meta_item_kind())?,\n             span: self.span,\n         })"}, {"sha": "682c8f71dc88ac0f7f2cf17a8f043f9e5c681b03", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -93,10 +93,10 @@ impl<'a> StripUnconfigured<'a> {\n     /// is in the original source file. Gives a compiler error if the syntax of\n     /// the attribute is incorrect.\n     fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Vec<ast::Attribute> {\n-        if attr.path != sym::cfg_attr {\n+        if attr.item.path != sym::cfg_attr {\n             return vec![attr];\n         }\n-        if attr.tokens.is_empty() {\n+        if attr.item.tokens.is_empty() {\n             self.sess.span_diagnostic\n                 .struct_span_err(\n                     attr.span,"}, {"sha": "c19ed7745074d8a945d30990d346d6925d2f4693", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -329,7 +329,7 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             // `rustc_dummy` doesn't have any restrictions specific to built-in attributes.\n             Some((name, _, template, _)) if name != sym::rustc_dummy =>\n                 check_builtin_attribute(self.parse_sess, attr, name, template),\n-            _ => if let Some(TokenTree::Token(token)) = attr.tokens.trees().next() {\n+            _ => if let Some(TokenTree::Token(token)) = attr.item.tokens.trees().next() {\n                 if token == token::Eq {\n                     // All key-value attributes are restricted to meta-item syntax.\n                     attr.parse_meta(self.parse_sess).map_err(|mut err| err.emit()).ok();"}, {"sha": "6cfa0dfad8240cba564bc88466e8d4fc60f0b069", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -287,7 +287,7 @@ pub fn parse_in_attr<'a, T>(\n ) -> PResult<'a, T> {\n     let mut parser = Parser::new(\n         sess,\n-        attr.tokens.clone(),\n+        attr.item.tokens.clone(),\n         None,\n         false,\n         false,\n@@ -403,8 +403,8 @@ fn prepend_attrs(\n         let mut brackets = tokenstream::TokenStreamBuilder::new();\n \n         // For simple paths, push the identifier directly\n-        if attr.path.segments.len() == 1 && attr.path.segments[0].args.is_none() {\n-            let ident = attr.path.segments[0].ident;\n+        if attr.item.path.segments.len() == 1 && attr.item.path.segments[0].args.is_none() {\n+            let ident = attr.item.path.segments[0].ident;\n             let token = token::Ident(ident.name, ident.as_str().starts_with(\"r#\"));\n             brackets.push(tokenstream::TokenTree::token(token, ident.span));\n \n@@ -415,7 +415,7 @@ fn prepend_attrs(\n             brackets.push(stream);\n         }\n \n-        brackets.push(attr.tokens.clone());\n+        brackets.push(attr.item.tokens.clone());\n \n         // The span we list here for `#` and for `[ ... ]` are both wrong in\n         // that it encompasses more than each token, but it hopefully is \"good"}, {"sha": "64393a295de4456828c2428f79bcb30fbe50b0fb", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -846,7 +846,7 @@ pub fn walk_vis<'a, V: Visitor<'a>>(visitor: &mut V, vis: &'a Visibility) {\n }\n \n pub fn walk_attribute<'a, V: Visitor<'a>>(visitor: &mut V, attr: &'a Attribute) {\n-    visitor.visit_tts(attr.tokens.clone());\n+    visitor.visit_tts(attr.item.tokens.clone());\n }\n \n pub fn walk_tt<'a, V: Visitor<'a>>(visitor: &mut V, tt: TokenTree) {"}, {"sha": "392563587ba8b8df261d0ba2e5cf6b5785a79ef7", "filename": "src/libsyntax_expand/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fexpand.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -419,7 +419,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     }\n \n                     let mut item = self.fully_configure(item);\n-                    item.visit_attrs(|attrs| attrs.retain(|a| a.path != sym::derive));\n+                    item.visit_attrs(|attrs| attrs.retain(|a| a.item.path != sym::derive));\n                     let mut helper_attrs = Vec::new();\n                     let mut has_copy = false;\n                     for ext in exts {\n@@ -974,15 +974,15 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n                        -> Option<ast::Attribute> {\n         let attr = attrs.iter()\n                         .position(|a| {\n-                            if a.path == sym::derive {\n+                            if a.item.path == sym::derive {\n                                 *after_derive = true;\n                             }\n                             !attr::is_known(a) && !is_builtin_attr(a)\n                         })\n                         .map(|i| attrs.remove(i));\n         if let Some(attr) = &attr {\n             if !self.cx.ecfg.custom_inner_attributes() &&\n-               attr.style == ast::AttrStyle::Inner && attr.path != sym::test {\n+               attr.style == ast::AttrStyle::Inner && attr.item.path != sym::test {\n                 emit_feature_err(&self.cx.parse_sess, sym::custom_inner_attributes,\n                                  attr.span, GateIssue::Language,\n                                  \"non-builtin inner attributes are unstable\");\n@@ -1032,7 +1032,7 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n             feature_gate::check_attribute(attr, self.cx.parse_sess, features);\n \n             // macros are expanded before any lint passes so this warning has to be hardcoded\n-            if attr.path == sym::derive {\n+            if attr.item.path == sym::derive {\n                 self.cx.struct_span_warn(attr.span, \"`#[derive]` does nothing on macro invocations\")\n                     .note(\"this may become a hard error in a future release\")\n                     .emit();"}, {"sha": "53cd4d3519fe0e235fa16211b6002fde756c41db", "filename": "src/libsyntax_expand/proc_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fproc_macro.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -181,7 +181,7 @@ impl<'a> Visitor<'a> for MarkAttrs<'a> {\n crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>) -> Vec<ast::Path> {\n     let mut result = Vec::new();\n     attrs.retain(|attr| {\n-        if attr.path != sym::derive {\n+        if attr.item.path != sym::derive {\n             return true;\n         }\n         if !attr.is_meta_item_list() {\n@@ -196,7 +196,7 @@ crate fn collect_derives(cx: &mut ExtCtxt<'_>, attrs: &mut Vec<ast::Attribute>)\n         }\n \n         let parse_derive_paths = |attr: &ast::Attribute| {\n-            if attr.tokens.is_empty() {\n+            if attr.item.tokens.is_empty() {\n                 return Ok(Vec::new());\n             }\n             parse::parse_in_attr(cx.parse_sess, attr, |p| p.parse_derive_paths())"}, {"sha": "bef913999270f0c9e69e4bb56ddf240d780ba0f9", "filename": "src/libsyntax_ext/proc_macro_harness.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69bc4aba785e071740d2d46f109623b9951aae5d/src%2Flibsyntax_ext%2Fproc_macro_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_harness.rs?ref=69bc4aba785e071740d2d46f109623b9951aae5d", "patch": "@@ -249,9 +249,9 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         for attr in &item.attrs {\n             if is_proc_macro_attr(&attr) {\n                 if let Some(prev_attr) = found_attr {\n-                    let path_str = pprust::path_to_string(&attr.path);\n-                    let msg = if attr.path.segments[0].ident.name ==\n-                                 prev_attr.path.segments[0].ident.name {\n+                    let path_str = pprust::path_to_string(&attr.item.path);\n+                    let msg = if attr.item.path.segments[0].ident.name ==\n+                                 prev_attr.item.path.segments[0].ident.name {\n                         format!(\n                             \"only one `#[{}]` attribute is allowed on any given function\",\n                             path_str,\n@@ -261,7 +261,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n                             \"`#[{}]` and `#[{}]` attributes cannot both be applied\n                             to the same function\",\n                             path_str,\n-                            pprust::path_to_string(&prev_attr.path),\n+                            pprust::path_to_string(&prev_attr.item.path),\n                         )\n                     };\n \n@@ -290,7 +290,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         if !is_fn {\n             let msg = format!(\n                 \"the `#[{}]` attribute may only be used on bare functions\",\n-                pprust::path_to_string(&attr.path),\n+                pprust::path_to_string(&attr.item.path),\n             );\n \n             self.handler.span_err(attr.span, &msg);\n@@ -304,7 +304,7 @@ impl<'a> Visitor<'a> for CollectProcMacros<'a> {\n         if !self.is_proc_macro_crate {\n             let msg = format!(\n                 \"the `#[{}]` attribute is only usable with crates of the `proc-macro` crate type\",\n-                pprust::path_to_string(&attr.path),\n+                pprust::path_to_string(&attr.item.path),\n             );\n \n             self.handler.span_err(attr.span, &msg);"}]}