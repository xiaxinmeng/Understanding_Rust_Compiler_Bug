{"sha": "0b5165e76d2ade4b68ea4712078f7eaa1138d62e", "node_id": "C_kwDOAAsO6NoAKDBiNTE2NWU3NmQyYWRlNGI2OGVhNDcxMjA3OGY3ZWFhMTEzOGQ2MmU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-04T20:11:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-03-04T20:11:34Z"}, "message": "Clean up rustdoc-js tester.js file", "tree": {"sha": "94b797c43fbd6b54622e83b558914fc0eddf4c5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94b797c43fbd6b54622e83b558914fc0eddf4c5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b5165e76d2ade4b68ea4712078f7eaa1138d62e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b5165e76d2ade4b68ea4712078f7eaa1138d62e", "html_url": "https://github.com/rust-lang/rust/commit/0b5165e76d2ade4b68ea4712078f7eaa1138d62e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b5165e76d2ade4b68ea4712078f7eaa1138d62e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "276b75a843af8822ffe4e395266d9445679a57a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/276b75a843af8822ffe4e395266d9445679a57a4", "html_url": "https://github.com/rust-lang/rust/commit/276b75a843af8822ffe4e395266d9445679a57a4"}], "stats": {"total": 113, "additions": 55, "deletions": 58}, "files": [{"sha": "e617ceba3b951f7c005d3640837eb002e39fd263", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 55, "deletions": 58, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/0b5165e76d2ade4b68ea4712078f7eaa1138d62e/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/0b5165e76d2ade4b68ea4712078f7eaa1138d62e/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=0b5165e76d2ade4b68ea4712078f7eaa1138d62e", "patch": "@@ -2,8 +2,8 @@ const fs = require('fs');\n const path = require('path');\n \n function loadContent(content) {\n-    var Module = module.constructor;\n-    var m = new Module();\n+    const Module = module.constructor;\n+    const m = new Module();\n     m._compile(content, \"tmp.js\");\n     m.exports.ignore_order = content.indexOf(\"\\n// ignore-order\\n\") !== -1 ||\n         content.startsWith(\"// ignore-order\\n\");\n@@ -26,16 +26,16 @@ function contentToDiffLine(key, value) {\n // the diff between the two items.\n function betterLookingDiff(entry, data) {\n     let output = ' {\\n';\n-    let spaces = '     ';\n-    for (let key in entry) {\n+    const spaces = '     ';\n+    for (const key in entry) {\n         if (!entry.hasOwnProperty(key)) {\n             continue;\n         }\n         if (!data || !data.hasOwnProperty(key)) {\n             output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n             continue;\n         }\n-        let value = data[key];\n+        const value = data[key];\n         if (value !== entry[key]) {\n             output += '-' + spaces + contentToDiffLine(key, entry[key]) + '\\n';\n             output += '+' + spaces + contentToDiffLine(key, value) + '\\n';\n@@ -47,31 +47,28 @@ function betterLookingDiff(entry, data) {\n }\n \n function lookForEntry(entry, data) {\n-    for (var i = 0; i < data.length; ++i) {\n-        var allGood = true;\n-        for (var key in entry) {\n+    return data.findIndex(data_entry => {\n+        let allGood = true;\n+        for (const key in entry) {\n             if (!entry.hasOwnProperty(key)) {\n                 continue;\n             }\n-            var value = data[i][key];\n+            let value = data_entry[key];\n             // To make our life easier, if there is a \"parent\" type, we add it to the path.\n-            if (key === 'path' && data[i]['parent'] !== undefined) {\n+            if (key === 'path' && data_entry['parent'] !== undefined) {\n                 if (value.length > 0) {\n-                    value += '::' + data[i]['parent']['name'];\n+                    value += '::' + data_entry['parent']['name'];\n                 } else {\n-                    value = data[i]['parent']['name'];\n+                    value = data_entry['parent']['name'];\n                 }\n             }\n             if (value !== entry[key]) {\n                 allGood = false;\n                 break;\n             }\n         }\n-        if (allGood === true) {\n-            return i;\n-        }\n-    }\n-    return null;\n+        return allGood === true;\n+    });\n }\n \n // This function checks if `expected` has all the required fields needed for the checks.\n@@ -97,13 +94,12 @@ function checkNeededFields(fullPath, expected, error_text, queryName, position)\n     } else {\n         fieldsToCheck = [];\n     }\n-    for (var i = 0; i < fieldsToCheck.length; ++i) {\n-        const field = fieldsToCheck[i];\n+    for (const field of fieldsToCheck) {\n         if (!expected.hasOwnProperty(field)) {\n             let text = `${queryName}==> Mandatory key \\`${field}\\` is not present`;\n             if (fullPath.length > 0) {\n                 text += ` in field \\`${fullPath}\\``;\n-                if (position != null) {\n+                if (position !== null) {\n                     text += ` (position ${position})`;\n                 }\n             }\n@@ -114,7 +110,8 @@ function checkNeededFields(fullPath, expected, error_text, queryName, position)\n \n function valueCheck(fullPath, expected, result, error_text, queryName) {\n     if (Array.isArray(expected)) {\n-        for (var i = 0; i < expected.length; ++i) {\n+        let i;\n+        for (i = 0; i < expected.length; ++i) {\n             checkNeededFields(fullPath, expected[i], error_text, queryName, i);\n             if (i >= result.length) {\n                 error_text.push(`${queryName}==> EXPECTED has extra value in array from field ` +\n@@ -154,8 +151,8 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n             valueCheck(obj_path, expected[key], result_v, error_text, queryName);\n         }\n     } else {\n-        expectedValue = JSON.stringify(expected);\n-        resultValue = JSON.stringify(result);\n+        const expectedValue = JSON.stringify(expected);\n+        const resultValue = JSON.stringify(result);\n         if (expectedValue != resultValue) {\n             error_text.push(`${queryName}==> Different values for field \\`${fullPath}\\`:\\n` +\n                 `EXPECTED: \\`${expectedValue}\\`\\nRESULT:   \\`${resultValue}\\``);\n@@ -164,7 +161,7 @@ function valueCheck(fullPath, expected, result, error_text, queryName) {\n }\n \n function runParser(query, expected, parseQuery, queryName) {\n-    var error_text = [];\n+    const error_text = [];\n     checkNeededFields(\"\", expected, error_text, queryName, null);\n     if (error_text.length === 0) {\n         valueCheck('', expected, parseQuery(query), error_text, queryName);\n@@ -176,48 +173,48 @@ function runSearch(query, expected, doSearch, loadedFile, queryName) {\n     const ignore_order = loadedFile.ignore_order;\n     const exact_check = loadedFile.exact_check;\n \n-    var results = doSearch(query, loadedFile.FILTER_CRATE);\n-    var error_text = [];\n+    const results = doSearch(query, loadedFile.FILTER_CRATE);\n+    const error_text = [];\n \n-    for (var key in expected) {\n+    for (const key in expected) {\n         if (!expected.hasOwnProperty(key)) {\n             continue;\n         }\n         if (!results.hasOwnProperty(key)) {\n             error_text.push('==> Unknown key \"' + key + '\"');\n             break;\n         }\n-        var entry = expected[key];\n+        const entry = expected[key];\n \n         if (exact_check == true && entry.length !== results[key].length) {\n             error_text.push(queryName + \"==> Expected exactly \" + entry.length +\n                             \" results but found \" + results[key].length + \" in '\" + key + \"'\");\n         }\n \n-        var prev_pos = -1;\n-        for (var i = 0; i < entry.length; ++i) {\n-            var entry_pos = lookForEntry(entry[i], results[key]);\n-            if (entry_pos === null) {\n+        let prev_pos = -1;\n+        entry.forEach((elem, index) => {\n+            const entry_pos = lookForEntry(elem, results[key]);\n+            if (entry_pos === -1) {\n                 error_text.push(queryName + \"==> Result not found in '\" + key + \"': '\" +\n-                                JSON.stringify(entry[i]) + \"'\");\n+                                JSON.stringify(elem) + \"'\");\n                 // By default, we just compare the two first items.\n                 let item_to_diff = 0;\n-                if ((ignore_order === false || exact_check === true) && i < results[key].length) {\n-                    item_to_diff = i;\n+                if ((!ignore_order || exact_check) && index < results[key].length) {\n+                    item_to_diff = index;\n                 }\n                 error_text.push(\"Diff of first error:\\n\" +\n-                    betterLookingDiff(entry[i], results[key][item_to_diff]));\n+                    betterLookingDiff(elem, results[key][item_to_diff]));\n             } else if (exact_check === true && prev_pos + 1 !== entry_pos) {\n                 error_text.push(queryName + \"==> Exact check failed at position \" + (prev_pos + 1) +\n-                                \": expected '\" + JSON.stringify(entry[i]) + \"' but found '\" +\n-                                JSON.stringify(results[key][i]) + \"'\");\n+                                \": expected '\" + JSON.stringify(elem) + \"' but found '\" +\n+                                JSON.stringify(results[key][index]) + \"'\");\n             } else if (ignore_order === false && entry_pos < prev_pos) {\n-                error_text.push(queryName + \"==> '\" + JSON.stringify(entry[i]) + \"' was supposed \" +\n+                error_text.push(queryName + \"==> '\" + JSON.stringify(elem) + \"' was supposed \" +\n                                 \"to be before '\" + JSON.stringify(results[key][entry_pos]) + \"'\");\n             } else {\n                 prev_pos = entry_pos;\n             }\n-        }\n+        });\n     }\n     return error_text;\n }\n@@ -252,15 +249,15 @@ function runCheck(loadedFile, key, callback) {\n             console.log(`==> QUERY variable should have the same length as ${key}`);\n             return 1;\n         }\n-        for (var i = 0; i < query.length; ++i) {\n-            var error_text = callback(query[i], expected[i], \"[ query `\" + query[i] + \"`]\");\n+        for (let i = 0; i < query.length; ++i) {\n+            const error_text = callback(query[i], expected[i], \"[ query `\" + query[i] + \"`]\");\n             if (checkResult(error_text, loadedFile, false) !== 0) {\n                 return 1;\n             }\n         }\n         console.log(\"OK\");\n     } else {\n-        var error_text = callback(query, expected, \"\");\n+        const error_text = callback(query, expected, \"\");\n         if (checkResult(error_text, loadedFile, true) !== 0) {\n             return 1;\n         }\n@@ -269,9 +266,9 @@ function runCheck(loadedFile, key, callback) {\n }\n \n function runChecks(testFile, doSearch, parseQuery) {\n-    var checkExpected = false;\n-    var checkParsed = false;\n-    var testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;';\n+    let checkExpected = false;\n+    let checkParsed = false;\n+    let testFileContent = readFile(testFile) + 'exports.QUERY = QUERY;';\n \n     if (testFileContent.indexOf(\"FILTER_CRATE\") !== -1) {\n         testFileContent += \"exports.FILTER_CRATE = FILTER_CRATE;\";\n@@ -294,7 +291,7 @@ function runChecks(testFile, doSearch, parseQuery) {\n     }\n \n     const loadedFile = loadContent(testFileContent);\n-    var res = 0;\n+    let res = 0;\n \n     if (checkExpected) {\n         res += runCheck(loadedFile, \"EXPECTED\", (query, expected, text) => {\n@@ -323,8 +320,7 @@ function loadSearchJS(doc_folder, resource_suffix) {\n     const searchIndex = require(searchIndexJs);\n \n     const staticFiles = path.join(doc_folder, \"static.files\");\n-    const searchJs = fs.readdirSync(staticFiles).find(\n-        f => f.match(/search.*\\.js$/));\n+    const searchJs = fs.readdirSync(staticFiles).find(f => f.match(/search.*\\.js$/));\n     const searchModule = require(path.join(staticFiles, searchJs));\n     const searchWords = searchModule.initSearch(searchIndex.searchIndex);\n \n@@ -334,7 +330,7 @@ function loadSearchJS(doc_folder, resource_suffix) {\n                 filterCrate, currentCrate);\n         },\n         parseQuery: searchModule.parseQuery,\n-    }\n+    };\n }\n \n function showHelp() {\n@@ -349,22 +345,22 @@ function showHelp() {\n }\n \n function parseOptions(args) {\n-    var opts = {\n+    const opts = {\n         \"crate_name\": \"\",\n         \"resource_suffix\": \"\",\n         \"doc_folder\": \"\",\n         \"test_folder\": \"\",\n         \"test_file\": [],\n     };\n-    var correspondences = {\n+    const correspondences = {\n         \"--resource-suffix\": \"resource_suffix\",\n         \"--doc-folder\": \"doc_folder\",\n         \"--test-folder\": \"test_folder\",\n         \"--test-file\": \"test_file\",\n         \"--crate-name\": \"crate_name\",\n     };\n \n-    for (var i = 0; i < args.length; ++i) {\n+    for (let i = 0; i < args.length; ++i) {\n         if (correspondences.hasOwnProperty(args[i])) {\n             i += 1;\n             if (i >= args.length) {\n@@ -398,17 +394,18 @@ function parseOptions(args) {\n }\n \n function main(argv) {\n-    var opts = parseOptions(argv.slice(2));\n+    const opts = parseOptions(argv.slice(2));\n     if (opts === null) {\n         return 1;\n     }\n \n-    let parseAndSearch = loadSearchJS(\n+    const parseAndSearch = loadSearchJS(\n         opts[\"doc_folder\"],\n-        opts[\"resource_suffix\"]);\n-    var errors = 0;\n+        opts[\"resource_suffix\"]\n+    );\n+    let errors = 0;\n \n-    let doSearch = function (queryStr, filterCrate) {\n+    const doSearch = function (queryStr, filterCrate) {\n         return parseAndSearch.doSearch(queryStr, filterCrate, opts[\"crate_name\"]);\n     };\n "}]}