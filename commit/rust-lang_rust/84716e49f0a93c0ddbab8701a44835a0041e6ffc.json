{"sha": "84716e49f0a93c0ddbab8701a44835a0041e6ffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NzE2ZTQ5ZjBhOTNjMGRkYmFiODcwMWE0NDgzNWEwMDQxZTZmZmM=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-08-08T19:27:50Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-08-21T05:29:44Z"}, "message": "Add more testcases for redundant_pattern_matching\n\nThese should make sure that, when the suggestions are fixed, they are\nfixed for all these cases.", "tree": {"sha": "2d6bbc4574c00b3137e76a7c5f290a94909984a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d6bbc4574c00b3137e76a7c5f290a94909984a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84716e49f0a93c0ddbab8701a44835a0041e6ffc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAl1c1soQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5pOSD/46a/QK5OgemX7C5Wlx8qOvo+9GCZ/1lnCZ\nYWimnozZlW/Cr+4UcICqUgHc2xFQbL/Bveh4ulMHLm+VaeHhmQWpYTiNtiCXMRCq\nC4tGN2yVPYROFR9N5mIOGlAhtr9d9EPNkgZHhZ4X2EmFwb7n/wzpXXH4HRwXa1MD\nrJ3s88zrAcXb0UMG9PTBUXtuigYPdX4Ka6iw5poqcInE2aGEUnRDLPBJY5YGLeID\n4oKVanY+q9KyT92ckObxfbDg8r3a8YotF/4QfNnVVXmsOpLZoNA80gmFcIjNNori\nQBD2tXIuIrB9q1vOYZgxL9dsL25qen72WXpWLEWQiZzwbQbOqAp3BsFO5n6oR4G4\nwoH+Yjh9ShK4IFzEceaF/WIplM3uB/xT11LtKU7pbJYUC+nRBXbm3Ck+XLeKIbOH\nYBpK+v4rHXc4MjAyk18Y9E1KvWcDY83B+jwjj/0Qxp27nmBdDVZYDvWUBiWpra7S\nPWlwhYFEO0Y5h6lJGcmDONTXg8UcsBpG0QDdYaFGvZCNgmXzcAUah6OB6cyufNNF\n/iEksOax2bGsLqH207xDDo9XrMrXB0/3J+wim5VlIp7I0CBwpPxu9Gmb2fxBsEaM\nGaL9z+vQxDePS54YvxaXKiXDfIHYb7vRueizD8qQtcCZXN1ndaivnRMBSIqL3z6K\noraRBe3UyQ==\n=mRa4\n-----END PGP SIGNATURE-----", "payload": "tree 2d6bbc4574c00b3137e76a7c5f290a94909984a3\nparent 0d85d7e60f393563d717d86fbef05f7309923a08\nauthor Philipp Hansch <dev@phansch.net> 1565292470 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1566365384 +0200\n\nAdd more testcases for redundant_pattern_matching\n\nThese should make sure that, when the suggestions are fixed, they are\nfixed for all these cases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84716e49f0a93c0ddbab8701a44835a0041e6ffc", "html_url": "https://github.com/rust-lang/rust/commit/84716e49f0a93c0ddbab8701a44835a0041e6ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84716e49f0a93c0ddbab8701a44835a0041e6ffc/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d85d7e60f393563d717d86fbef05f7309923a08", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d85d7e60f393563d717d86fbef05f7309923a08", "html_url": "https://github.com/rust-lang/rust/commit/0d85d7e60f393563d717d86fbef05f7309923a08"}], "stats": {"total": 94, "additions": 83, "deletions": 11}, "files": [{"sha": "74dd12edfb6cb0118c99f9be24f80b7e30f6b6f9", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/84716e49f0a93c0ddbab8701a44835a0041e6ffc/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84716e49f0a93c0ddbab8701a44835a0041e6ffc/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=84716e49f0a93c0ddbab8701a44835a0041e6ffc", "patch": "@@ -51,4 +51,30 @@ fn main() {\n         Some(_) => false,\n         None => true,\n     };\n+\n+    let _ = match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+\n+    let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n+\n+    let _ = does_something();\n+    let _ = returns_unit();\n+}\n+\n+fn does_something() -> bool {\n+    if let Ok(_) = Ok::<i32, i32>(4) {\n+        true\n+    } else {\n+        false\n+    }\n+}\n+\n+fn returns_unit() {\n+    if let Ok(_) = Ok::<i32, i32>(4) {\n+        true\n+    } else {\n+        false\n+    };\n }"}, {"sha": "e3ba152d58a9758b2d03860134e838067eb03569", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 57, "deletions": 11, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/84716e49f0a93c0ddbab8701a44835a0041e6ffc/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84716e49f0a93c0ddbab8701a44835a0041e6ffc/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=84716e49f0a93c0ddbab8701a44835a0041e6ffc", "patch": "@@ -1,31 +1,31 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:5:12\n+  --> $DIR/redundant_pattern_matching.rs:6:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^------------------------ help: try this: `Ok::<i32, i32>(42).is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:7:12\n+  --> $DIR/redundant_pattern_matching.rs:8:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^------------------------- help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:9:12\n+  --> $DIR/redundant_pattern_matching.rs:10:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^---------------- help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:11:12\n+  --> $DIR/redundant_pattern_matching.rs:12:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^-------------- help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:25:5\n+  --> $DIR/redundant_pattern_matching.rs:26:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -34,7 +34,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:30:5\n+  --> $DIR/redundant_pattern_matching.rs:31:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -43,7 +43,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:35:5\n+  --> $DIR/redundant_pattern_matching.rs:36:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -52,7 +52,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:40:5\n+  --> $DIR/redundant_pattern_matching.rs:41:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -61,7 +61,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:45:5\n+  --> $DIR/redundant_pattern_matching.rs:46:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -70,13 +70,59 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:50:5\n+  --> $DIR/redundant_pattern_matching.rs:51:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n LL | |         None => true,\n LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n-error: aborting due to 10 previous errors\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/redundant_pattern_matching.rs:56:15\n+   |\n+LL |       let foo = match None::<()> {\n+   |  _______________^\n+LL | |         Some(_) => false,\n+LL | |         None => true,\n+LL | |     };\n+   | |_____^ help: try this: `None::<()>.is_none()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:61:20\n+   |\n+LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n+   |             -------^^^^^--------------------------------------------- help: try this: `Ok::<usize, ()>(4).is_ok()`\n+\n+error: this let-binding has unit value\n+  --> $DIR/redundant_pattern_matching.rs:64:5\n+   |\n+LL |     let _ = returns_unit();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `returns_unit();`\n+   |\n+   = note: `-D clippy::let-unit-value` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:68:12\n+   |\n+LL |       if let Ok(_) = Ok::<i32, i32>(4) {\n+   |  _____-      ^^^^^\n+LL | |         true\n+LL | |     } else {\n+LL | |         false\n+LL | |     }\n+   | |_____- help: try this: `Ok::<i32, i32>(4).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching.rs:76:12\n+   |\n+LL |       if let Ok(_) = Ok::<i32, i32>(4) {\n+   |  _____-      ^^^^^\n+LL | |         true\n+LL | |     } else {\n+LL | |         false\n+LL | |     };\n+   | |_____- help: try this: `Ok::<i32, i32>(4).is_ok()`\n+\n+error: aborting due to 15 previous errors\n "}]}