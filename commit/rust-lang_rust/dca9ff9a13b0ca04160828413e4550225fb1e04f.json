{"sha": "dca9ff9a13b0ca04160828413e4550225fb1e04f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYTlmZjlhMTNiMGNhMDQxNjA4Mjg0MTNlNDU1MDIyNWZiMWUwNGY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-04T03:02:09Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-04T20:32:41Z"}, "message": "std: remove str::NullTerminatedStr", "tree": {"sha": "edf38cfa0066b3eedce2f9975ef1f9da80f7ba12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edf38cfa0066b3eedce2f9975ef1f9da80f7ba12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dca9ff9a13b0ca04160828413e4550225fb1e04f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dca9ff9a13b0ca04160828413e4550225fb1e04f", "html_url": "https://github.com/rust-lang/rust/commit/dca9ff9a13b0ca04160828413e4550225fb1e04f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dca9ff9a13b0ca04160828413e4550225fb1e04f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd293dfb0f97962697a967b2fae12b54225d7a11", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd293dfb0f97962697a967b2fae12b54225d7a11", "html_url": "https://github.com/rust-lang/rust/commit/fd293dfb0f97962697a967b2fae12b54225d7a11"}], "stats": {"total": 78, "additions": 2, "deletions": 76}, "files": [{"sha": "7e21504c1d294825b06f612f6893b03053448b02", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dca9ff9a13b0ca04160828413e4550225fb1e04f/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca9ff9a13b0ca04160828413e4550225fb1e04f/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=dca9ff9a13b0ca04160828413e4550225fb1e04f", "patch": "@@ -63,7 +63,7 @@ pub use path::PosixPath;\n pub use path::WindowsPath;\n pub use ptr::RawPtr;\n pub use ascii::{Ascii, AsciiCast, OwnedAsciiCast, AsciiStr, ToBytesConsume};\n-pub use str::{Str, StrVector, StrSlice, OwnedStr, NullTerminatedStr};\n+pub use str::{Str, StrVector, StrSlice, OwnedStr};\n pub use from_str::{FromStr};\n pub use to_bytes::IterBytes;\n pub use to_str::{ToStr, ToStrConsume};"}, {"sha": "2a24351fff4e26aa4fb7bf395aca9fdd9b081e05", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 54, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/dca9ff9a13b0ca04160828413e4550225fb1e04f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca9ff9a13b0ca04160828413e4550225fb1e04f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=dca9ff9a13b0ca04160828413e4550225fb1e04f", "patch": "@@ -1981,35 +1981,6 @@ impl<'self> StrSlice<'self> for &'self str {\n     }\n }\n \n-#[allow(missing_doc)]\n-pub trait NullTerminatedStr {\n-    fn as_bytes_with_null<'a>(&'a self) -> &'a [u8];\n-}\n-\n-impl NullTerminatedStr for ~str {\n-    /// Work with the byte buffer of a string as a byte slice.\n-    ///\n-    /// The byte slice does include the null terminator.\n-    #[inline]\n-    fn as_bytes_with_null<'a>(&'a self) -> &'a [u8] {\n-        let ptr: &'a ~[u8] = unsafe { cast::transmute(self) };\n-        let slice: &'a [u8] = *ptr;\n-        slice\n-    }\n-}\n-\n-impl NullTerminatedStr for @str {\n-    /// Work with the byte buffer of a string as a byte slice.\n-    ///\n-    /// The byte slice does include the null terminator.\n-    #[inline]\n-    fn as_bytes_with_null<'a>(&'a self) -> &'a [u8] {\n-        let ptr: &'a @[u8] = unsafe { cast::transmute(self) };\n-        let slice: &'a [u8] = *ptr;\n-        slice\n-    }\n-}\n-\n #[allow(missing_doc)]\n pub trait OwnedStr {\n     fn push_str_no_overallocate(&mut self, rhs: &str);\n@@ -2979,30 +2950,6 @@ mod tests {\n         assert_eq!(\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".as_bytes(), v);\n     }\n \n-    #[test]\n-    fn test_as_bytes_with_null() {\n-        // has null\n-        let v = [\n-            224, 184, 168, 224, 185, 132, 224, 184, 151, 224, 184, 162, 228,\n-            184, 173, 229, 141, 142, 86, 105, 225, 187, 135, 116, 32, 78, 97,\n-            109, 0\n-        ];\n-\n-        let s1 = @\"\";\n-        let s2 = @\"abc\";\n-        let s3 = @\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert_eq!(s1.as_bytes_with_null(), &[0]);\n-        assert_eq!(s2.as_bytes_with_null(), &['a' as u8, 'b' as u8, 'c' as u8, 0]);\n-        assert_eq!(s3.as_bytes_with_null(), v);\n-\n-        let s1 = ~\"\";\n-        let s2 = ~\"abc\";\n-        let s3 = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert_eq!(s1.as_bytes_with_null(), &[0]);\n-        assert_eq!(s2.as_bytes_with_null(), &['a' as u8, 'b' as u8, 'c' as u8, 0]);\n-        assert_eq!(s3.as_bytes_with_null(), v);\n-    }\n-\n     #[test]\n     fn test_to_bytes_with_null() {\n         let s = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n@@ -3024,7 +2971,7 @@ mod tests {\n         // Don't double free. (I'm not sure if this exercises the\n         // original problem code path anymore.)\n         let s = ~\"\";\n-        let _bytes = s.as_bytes_with_null();\n+        let _bytes = s.as_bytes();\n         fail!();\n     }\n "}, {"sha": "3cfaa57d540f350a8aa4786ec1a337d834507248", "filename": "src/test/compile-fail/static-slice-not-null-terminated.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd293dfb0f97962697a967b2fae12b54225d7a11/src%2Ftest%2Fcompile-fail%2Fstatic-slice-not-null-terminated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd293dfb0f97962697a967b2fae12b54225d7a11/src%2Ftest%2Fcompile-fail%2Fstatic-slice-not-null-terminated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-slice-not-null-terminated.rs?ref=fd293dfb0f97962697a967b2fae12b54225d7a11", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn main() {\n-    let _ = (~\"foo\").as_bytes_with_null();\n-    let _ = (@\"foo\").as_bytes_with_null();\n-\n-    // a plain static slice is null terminated, but such a slice can\n-    // be sliced shorter (i.e. become non-null terminated) and still\n-    // have the static lifetime\n-    let foo: &'static str = \"foo\";\n-    let _ = foo.as_bytes_with_null();\n-     //~^ ERROR does not implement any method in scope named `as_bytes_with_null`\n-}"}]}