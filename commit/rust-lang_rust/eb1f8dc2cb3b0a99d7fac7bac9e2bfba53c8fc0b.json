{"sha": "eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b", "node_id": "C_kwDOAAsO6NoAKGViMWY4ZGMyY2IzYjBhOTlkN2ZhYzdiYWM5ZTJiZmJhNTNjOGZjMGI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-20T06:10:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-20T06:10:34Z"}, "message": "Rollup merge of #109370 - DaniPopes:issue-109334, r=Nilstrieb\n\nfix ClashingExternDeclarations lint ICE\n\nFixes #109334\n\nFirst \"real\" contribution, please let me know if I did something wrong.\n\nAs I understand it, it's OK if a `#[repr(transparent)]` type has no non-zero sized types (aka is a ZST itself) and the function should just return the type normally instead of panicking\n\nr? `@Nilstrieb`", "tree": {"sha": "fc4669a4aa99a27c7dd9d13e9d477768e7e220b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc4669a4aa99a27c7dd9d13e9d477768e7e220b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkF/jaCRBK7hj4Ov3rIwAAEREIAK6szjSI6mUL5394FSig8R5b\n1Y4O5VKZ+dDEMIoJqzddtEFqLxq+2RwFuiGK5ljlFHHVH6W7UNzlpZRDAqPuPx+y\nuWcnqCwBAMr1uKY/+D5XG/oH4cdsQbmDpGXLEAPJwPM3o9klFFYdl2VL86vi81mX\nUcSWAhLPB3xJnHY0LaOR+t/4HX3ga9Pm4OtO9DtxAdPT1PcOO2Gh+wkNxXo/agYB\ny3LgtjTyhSKyHnJTy722Tea2cQ6sPQG5NZfLbV747X+zZmpu0bILF+K2D391gDC9\nvmOlKXqZUjq4zO0GZeIQw3vAom8AOz0MjXjc483BQ9/H2VDRgAxL11vcBqkQ+pQ=\n=iMMZ\n-----END PGP SIGNATURE-----\n", "payload": "tree fc4669a4aa99a27c7dd9d13e9d477768e7e220b4\nparent cd9fadea5b494c8b8b597289230c7a681089b8a7\nparent 7ab612a7eea5151ed0a47fd7b98aff5e114b3e07\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679292634 +0100\ncommitter GitHub <noreply@github.com> 1679292634 +0100\n\nRollup merge of #109370 - DaniPopes:issue-109334, r=Nilstrieb\n\nfix ClashingExternDeclarations lint ICE\n\nFixes #109334\n\nFirst \"real\" contribution, please let me know if I did something wrong.\n\nAs I understand it, it's OK if a `#[repr(transparent)]` type has no non-zero sized types (aka is a ZST itself) and the function should just return the type normally instead of panicking\n\nr? `@Nilstrieb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b", "html_url": "https://github.com/rust-lang/rust/commit/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd9fadea5b494c8b8b597289230c7a681089b8a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd9fadea5b494c8b8b597289230c7a681089b8a7", "html_url": "https://github.com/rust-lang/rust/commit/cd9fadea5b494c8b8b597289230c7a681089b8a7"}, {"sha": "7ab612a7eea5151ed0a47fd7b98aff5e114b3e07", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab612a7eea5151ed0a47fd7b98aff5e114b3e07", "html_url": "https://github.com/rust-lang/rust/commit/7ab612a7eea5151ed0a47fd7b98aff5e114b3e07"}], "stats": {"total": 74, "additions": 48, "deletions": 26}, "files": [{"sha": "b1ff76865abda729882fc497c557e1a6778eb894", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b", "patch": "@@ -2781,8 +2781,7 @@ impl ClashingExternDeclarations {\n \n             // Given a transparent newtype, reach through and grab the inner\n             // type unless the newtype makes the type non-null.\n-            let non_transparent_ty = |ty: Ty<'tcx>| -> Ty<'tcx> {\n-                let mut ty = ty;\n+            let non_transparent_ty = |mut ty: Ty<'tcx>| -> Ty<'tcx> {\n                 loop {\n                     if let ty::Adt(def, substs) = *ty.kind() {\n                         let is_transparent = def.repr().transparent();\n@@ -2792,14 +2791,14 @@ impl ClashingExternDeclarations {\n                             ty, is_transparent, is_non_null\n                         );\n                         if is_transparent && !is_non_null {\n-                            debug_assert!(def.variants().len() == 1);\n+                            debug_assert_eq!(def.variants().len(), 1);\n                             let v = &def.variant(VariantIdx::new(0));\n-                            ty = transparent_newtype_field(tcx, v)\n-                                .expect(\n-                                    \"single-variant transparent structure with zero-sized field\",\n-                                )\n-                                .ty(tcx, substs);\n-                            continue;\n+                            // continue with `ty`'s non-ZST field,\n+                            // otherwise `ty` is a ZST and we can return\n+                            if let Some(field) = transparent_newtype_field(tcx, v) {\n+                                ty = field.ty(tcx, substs);\n+                                continue;\n+                            }\n                         }\n                     }\n                     debug!(\"non_transparent_ty -> {:?}\", ty);\n@@ -2813,10 +2812,8 @@ impl ClashingExternDeclarations {\n             if !seen_types.insert((a, b)) {\n                 // We've encountered a cycle. There's no point going any further -- the types are\n                 // structurally the same.\n-                return true;\n-            }\n-            let tcx = cx.tcx;\n-            if a == b {\n+                true\n+            } else if a == b {\n                 // All nominally-same types are structurally same, too.\n                 true\n             } else {"}, {"sha": "09fda33dbec5c1c51aee99c2dd1bca45494d78ed", "filename": "tests/ui/lint/clashing-extern-fn.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b/tests%2Fui%2Flint%2Fclashing-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b/tests%2Fui%2Flint%2Fclashing-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fclashing-extern-fn.rs?ref=eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b", "patch": "@@ -122,8 +122,8 @@ mod banana {\n             weight: u32,\n             length: u16,\n         } // note: distinct type\n-          // This should not trigger the lint because two::Banana is structurally equivalent to\n-          // one::Banana.\n+        // This should not trigger the lint because two::Banana is structurally equivalent to\n+        // one::Banana.\n         extern \"C\" {\n             fn weigh_banana(count: *const Banana) -> u64;\n         }\n@@ -223,6 +223,27 @@ mod transparent {\n     }\n }\n \n+#[allow(improper_ctypes)]\n+mod zst {\n+    mod transparent {\n+        #[repr(transparent)]\n+        struct TransparentZst(());\n+        extern \"C\" {\n+            fn zst() -> ();\n+            fn transparent_zst() -> TransparentZst;\n+        }\n+    }\n+\n+    mod not_transparent {\n+        struct NotTransparentZst(());\n+        extern \"C\" {\n+            // These shouldn't warn since all return types are zero sized\n+            fn zst() -> NotTransparentZst;\n+            fn transparent_zst() -> NotTransparentZst;\n+        }\n+    }\n+}\n+\n mod missing_return_type {\n     mod a {\n         extern \"C\" {\n@@ -397,10 +418,14 @@ mod hidden_niche {\n         use std::num::NonZeroUsize;\n \n         #[repr(transparent)]\n-        struct Transparent { x: NonZeroUsize }\n+        struct Transparent {\n+            x: NonZeroUsize,\n+        }\n \n         #[repr(transparent)]\n-        struct TransparentNoNiche { y: UnsafeCell<NonZeroUsize> }\n+        struct TransparentNoNiche {\n+            y: UnsafeCell<NonZeroUsize>,\n+        }\n \n         extern \"C\" {\n             fn hidden_niche_transparent() -> Option<Transparent>;"}, {"sha": "5d457ba0ec7637401eab9505b7ce690fb2e9c494", "filename": "tests/ui/lint/clashing-extern-fn.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b/tests%2Fui%2Flint%2Fclashing-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b/tests%2Fui%2Flint%2Fclashing-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fclashing-extern-fn.stderr?ref=eb1f8dc2cb3b0a99d7fac7bac9e2bfba53c8fc0b", "patch": "@@ -130,7 +130,7 @@ LL |             fn transparent_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `missing_return_type` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:238:13\n+  --> $DIR/clashing-extern-fn.rs:259:13\n    |\n LL |             fn missing_return_type() -> usize;\n    |             ---------------------------------- `missing_return_type` previously declared here\n@@ -142,7 +142,7 @@ LL |             fn missing_return_type();\n               found `unsafe extern \"C\" fn()`\n \n warning: `non_zero_usize` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:256:13\n+  --> $DIR/clashing-extern-fn.rs:277:13\n    |\n LL |             fn non_zero_usize() -> core::num::NonZeroUsize;\n    |             ----------------------------------------------- `non_zero_usize` previously declared here\n@@ -154,7 +154,7 @@ LL |             fn non_zero_usize() -> usize;\n               found `unsafe extern \"C\" fn() -> usize`\n \n warning: `non_null_ptr` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:258:13\n+  --> $DIR/clashing-extern-fn.rs:279:13\n    |\n LL |             fn non_null_ptr() -> core::ptr::NonNull<usize>;\n    |             ----------------------------------------------- `non_null_ptr` previously declared here\n@@ -166,7 +166,7 @@ LL |             fn non_null_ptr() -> *const usize;\n               found `unsafe extern \"C\" fn() -> *const usize`\n \n warning: `option_non_zero_usize_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:356:13\n+  --> $DIR/clashing-extern-fn.rs:377:13\n    |\n LL |             fn option_non_zero_usize_incorrect() -> usize;\n    |             ---------------------------------------------- `option_non_zero_usize_incorrect` previously declared here\n@@ -178,7 +178,7 @@ LL |             fn option_non_zero_usize_incorrect() -> isize;\n               found `unsafe extern \"C\" fn() -> isize`\n \n warning: `option_non_null_ptr_incorrect` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:358:13\n+  --> $DIR/clashing-extern-fn.rs:379:13\n    |\n LL |             fn option_non_null_ptr_incorrect() -> *const usize;\n    |             --------------------------------------------------- `option_non_null_ptr_incorrect` previously declared here\n@@ -190,7 +190,7 @@ LL |             fn option_non_null_ptr_incorrect() -> *const isize;\n               found `unsafe extern \"C\" fn() -> *const isize`\n \n warning: `hidden_niche_transparent_no_niche` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:408:13\n+  --> $DIR/clashing-extern-fn.rs:433:13\n    |\n LL |             fn hidden_niche_transparent_no_niche() -> usize;\n    |             ------------------------------------------------ `hidden_niche_transparent_no_niche` previously declared here\n@@ -202,7 +202,7 @@ LL |             fn hidden_niche_transparent_no_niche() -> Option<TransparentNoN\n               found `unsafe extern \"C\" fn() -> Option<TransparentNoNiche>`\n \n warning: `hidden_niche_unsafe_cell` redeclared with a different signature\n-  --> $DIR/clashing-extern-fn.rs:412:13\n+  --> $DIR/clashing-extern-fn.rs:437:13\n    |\n LL |             fn hidden_niche_unsafe_cell() -> usize;\n    |             --------------------------------------- `hidden_niche_unsafe_cell` previously declared here\n@@ -214,7 +214,7 @@ LL |             fn hidden_niche_unsafe_cell() -> Option<UnsafeCell<NonZeroUsize\n               found `unsafe extern \"C\" fn() -> Option<UnsafeCell<NonZeroUsize>>`\n \n warning: `extern` block uses type `Option<TransparentNoNiche>`, which is not FFI-safe\n-  --> $DIR/clashing-extern-fn.rs:408:55\n+  --> $DIR/clashing-extern-fn.rs:433:55\n    |\n LL |             fn hidden_niche_transparent_no_niche() -> Option<TransparentNoNiche>;\n    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -224,7 +224,7 @@ LL |             fn hidden_niche_transparent_no_niche() -> Option<TransparentNoN\n    = note: `#[warn(improper_ctypes)]` on by default\n \n warning: `extern` block uses type `Option<UnsafeCell<NonZeroUsize>>`, which is not FFI-safe\n-  --> $DIR/clashing-extern-fn.rs:412:46\n+  --> $DIR/clashing-extern-fn.rs:437:46\n    |\n LL |             fn hidden_niche_unsafe_cell() -> Option<UnsafeCell<NonZeroUsize>>;\n    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe"}]}