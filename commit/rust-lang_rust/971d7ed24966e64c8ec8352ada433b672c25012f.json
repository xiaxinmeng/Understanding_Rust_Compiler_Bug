{"sha": "971d7ed24966e64c8ec8352ada433b672c25012f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MWQ3ZWQyNDk2NmU2NGM4ZWM4MzUyYWRhNDMzYjY3MmMyNTAxMmY=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-09T16:33:57Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-22T22:37:03Z"}, "message": "move PinBox into pin module and export through std", "tree": {"sha": "de9aef96a16f24ea3f6461fcd52cb8a5998aa5e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de9aef96a16f24ea3f6461fcd52cb8a5998aa5e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/971d7ed24966e64c8ec8352ada433b672c25012f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/971d7ed24966e64c8ec8352ada433b672c25012f", "html_url": "https://github.com/rust-lang/rust/commit/971d7ed24966e64c8ec8352ada433b672c25012f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/971d7ed24966e64c8ec8352ada433b672c25012f/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13da951868a1b48108592cadbf7627d48322c859", "url": "https://api.github.com/repos/rust-lang/rust/commits/13da951868a1b48108592cadbf7627d48322c859", "html_url": "https://github.com/rust-lang/rust/commit/13da951868a1b48108592cadbf7627d48322c859"}], "stats": {"total": 440, "additions": 233, "deletions": 207}, "files": [{"sha": "b5c2fd7526da1961b16d2f212e4aec86c23ad2e0", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 0, "deletions": 202, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=971d7ed24966e64c8ec8352ada433b672c25012f", "patch": "@@ -759,166 +759,6 @@ impl<T> Generator for Box<T>\n     }\n }\n \n-/// A pinned, heap allocated reference.\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-#[fundamental]\n-#[repr(transparent)]\n-pub struct PinBox<T: ?Sized> {\n-    inner: Box<T>,\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T> PinBox<T> {\n-    /// Allocate memory on the heap, move the data into it and pin it.\n-    #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub fn new(data: T) -> PinBox<T> {\n-        PinBox { inner: Box::new(data) }\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: ?Sized> PinBox<T> {\n-    /// Get a pinned reference to the data in this PinBox.\n-    #[inline]\n-    pub fn as_pin_mut<'a>(&'a mut self) -> PinMut<'a, T> {\n-        unsafe { PinMut::new_unchecked(&mut *self.inner) }\n-    }\n-\n-    /// Constructs a `PinBox` from a raw pointer.\n-    ///\n-    /// After calling this function, the raw pointer is owned by the\n-    /// resulting `PinBox`. Specifically, the `PinBox` destructor will call\n-    /// the destructor of `T` and free the allocated memory. Since the\n-    /// way `PinBox` allocates and releases memory is unspecified, the\n-    /// only valid pointer to pass to this function is the one taken\n-    /// from another `PinBox` via the [`PinBox::into_raw`] function.\n-    ///\n-    /// This function is unsafe because improper use may lead to\n-    /// memory problems. For example, a double-free may occur if the\n-    /// function is called twice on the same raw pointer.\n-    ///\n-    /// [`PinBox::into_raw`]: struct.PinBox.html#method.into_raw\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(pin)]\n-    /// use std::boxed::PinBox;\n-    /// let x = PinBox::new(5);\n-    /// let ptr = PinBox::into_raw(x);\n-    /// let x = unsafe { PinBox::from_raw(ptr) };\n-    /// ```\n-    #[inline]\n-    pub unsafe fn from_raw(raw: *mut T) -> Self {\n-        PinBox { inner: Box::from_raw(raw) }\n-    }\n-\n-    /// Consumes the `PinBox`, returning the wrapped raw pointer.\n-    ///\n-    /// After calling this function, the caller is responsible for the\n-    /// memory previously managed by the `PinBox`. In particular, the\n-    /// caller should properly destroy `T` and release the memory. The\n-    /// proper way to do so is to convert the raw pointer back into a\n-    /// `PinBox` with the [`PinBox::from_raw`] function.\n-    ///\n-    /// Note: this is an associated function, which means that you have\n-    /// to call it as `PinBox::into_raw(b)` instead of `b.into_raw()`. This\n-    /// is so that there is no conflict with a method on the inner type.\n-    ///\n-    /// [`PinBox::from_raw`]: struct.PinBox.html#method.from_raw\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(pin)]\n-    /// use std::boxed::PinBox;\n-    /// let x = PinBox::new(5);\n-    /// let ptr = PinBox::into_raw(x);\n-    /// ```\n-    #[inline]\n-    pub fn into_raw(b: PinBox<T>) -> *mut T {\n-        Box::into_raw(b.inner)\n-    }\n-\n-    /// Get a mutable reference to the data inside this PinBox.\n-    ///\n-    /// This function is unsafe. Users must guarantee that the data is never\n-    /// moved out of this reference.\n-    #[inline]\n-    pub unsafe fn get_mut<'a>(this: &'a mut PinBox<T>) -> &'a mut T {\n-        &mut *this.inner\n-    }\n-\n-    /// Convert this PinBox into an unpinned Box.\n-    ///\n-    /// This function is unsafe. Users must guarantee that the data is never\n-    /// moved out of the box.\n-    #[inline]\n-    pub unsafe fn unpin(this: PinBox<T>) -> Box<T> {\n-        this.inner\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: ?Sized> From<Box<T>> for PinBox<T> {\n-    fn from(boxed: Box<T>) -> PinBox<T> {\n-        PinBox { inner: boxed }\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: Unpin + ?Sized> From<PinBox<T>> for Box<T> {\n-    fn from(pinned: PinBox<T>) -> Box<T> {\n-        pinned.inner\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: ?Sized> Deref for PinBox<T> {\n-    type Target = T;\n-\n-    fn deref(&self) -> &T {\n-        &*self.inner\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: Unpin + ?Sized> DerefMut for PinBox<T> {\n-    fn deref_mut(&mut self) -> &mut T {\n-        &mut *self.inner\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: fmt::Display + ?Sized> fmt::Display for PinBox<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&*self.inner, f)\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: fmt::Debug + ?Sized> fmt::Debug for PinBox<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Debug::fmt(&*self.inner, f)\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: ?Sized> fmt::Pointer for PinBox<T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        // It's not possible to extract the inner Uniq directly from the Box,\n-        // instead we cast it to a *const which aliases the Unique\n-        let ptr: *const T = &*self.inner;\n-        fmt::Pointer::fmt(&ptr, f)\n-    }\n-}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinBox<U>> for PinBox<T> {}\n-\n-#[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<T: ?Sized> Unpin for PinBox<T> {}\n-\n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     type Output = F::Output;\n@@ -928,15 +768,6 @@ impl<F: ?Sized + Future + Unpin> Future for Box<F> {\n     }\n }\n \n-#[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<F: ?Sized + Future> Future for PinBox<F> {\n-    type Output = F::Output;\n-\n-    fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n-        self.as_pin_mut().poll(cx)\n-    }\n-}\n-\n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for Box<F>\n     where F: Future<Output = T> + 'a\n@@ -956,25 +787,6 @@ unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for Box<F>\n     }\n }\n \n-#[unstable(feature = \"futures_api\", issue = \"50547\")]\n-unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinBox<F>\n-    where F: Future<Output = T> + 'a\n-{\n-    fn into_raw(self) -> *mut () {\n-        PinBox::into_raw(self) as *mut ()\n-    }\n-\n-    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n-        let ptr = ptr as *mut F;\n-        let pin: PinMut<F> = PinMut::new_unchecked(&mut *ptr);\n-        pin.poll(cx)\n-    }\n-\n-    unsafe fn drop(ptr: *mut ()) {\n-        drop(PinBox::from_raw(ptr as *mut F))\n-    }\n-}\n-\n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n impl<Sp> Spawn for Box<Sp>\n     where Sp: Spawn + ?Sized\n@@ -991,27 +803,13 @@ impl<Sp> Spawn for Box<Sp>\n     }\n }\n \n-#[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<'a, F: Future<Output = ()> + Send + 'a> From<PinBox<F>> for FutureObj<'a, ()> {\n-    fn from(boxed: PinBox<F>) -> Self {\n-        FutureObj::new(boxed)\n-    }\n-}\n-\n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n impl<'a, F: Future<Output = ()> + Send + 'a> From<Box<F>> for FutureObj<'a, ()> {\n     fn from(boxed: Box<F>) -> Self {\n         FutureObj::new(boxed)\n     }\n }\n \n-#[unstable(feature = \"futures_api\", issue = \"50547\")]\n-impl<'a, F: Future<Output = ()> + 'a> From<PinBox<F>> for LocalFutureObj<'a, ()> {\n-    fn from(boxed: PinBox<F>) -> Self {\n-        LocalFutureObj::new(boxed)\n-    }\n-}\n-\n #[unstable(feature = \"futures_api\", issue = \"50547\")]\n impl<'a, F: Future<Output = ()> + 'a> From<Box<F>> for LocalFutureObj<'a, ()> {\n     fn from(boxed: Box<F>) -> Self {"}, {"sha": "99e8f8df0d9e60c09135c42b665e3b95da69247b", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=971d7ed24966e64c8ec8352ada433b672c25012f", "patch": "@@ -159,6 +159,7 @@ pub mod collections;\n pub mod sync;\n pub mod rc;\n pub mod raw_vec;\n+pub mod pin;\n pub mod prelude;\n pub mod borrow;\n pub mod fmt;"}, {"sha": "221a55472ab08ff4acc4c5c13b08e42c6efca83a", "filename": "src/liballoc/pin.rs", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Fliballoc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Fliballoc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fpin.rs?ref=971d7ed24966e64c8ec8352ada433b672c25012f", "patch": "@@ -0,0 +1,225 @@\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Types which pin data to its location in memory\n+\n+#![unstable(feature = \"pin\", issue = \"49150\")]\n+\n+use core::convert::From;\n+use core::fmt;\n+use core::future::{Future, FutureObj, LocalFutureObj, UnsafeFutureObj};\n+use core::marker::{Unpin, Unsize};\n+use core::pin::PinMut;\n+use core::ops::{CoerceUnsized, Deref, DerefMut};\n+use core::task::{Context, Poll};\n+\n+use boxed::Box;\n+\n+/// A pinned, heap allocated reference.\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+#[fundamental]\n+#[repr(transparent)]\n+pub struct PinBox<T: ?Sized> {\n+    inner: Box<T>,\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T> PinBox<T> {\n+    /// Allocate memory on the heap, move the data into it and pin it.\n+    #[unstable(feature = \"pin\", issue = \"49150\")]\n+    pub fn new(data: T) -> PinBox<T> {\n+        PinBox { inner: Box::new(data) }\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> PinBox<T> {\n+    /// Get a pinned reference to the data in this PinBox.\n+    #[inline]\n+    pub fn as_pin_mut<'a>(&'a mut self) -> PinMut<'a, T> {\n+        unsafe { PinMut::new_unchecked(&mut *self.inner) }\n+    }\n+\n+    /// Constructs a `PinBox` from a raw pointer.\n+    ///\n+    /// After calling this function, the raw pointer is owned by the\n+    /// resulting `PinBox`. Specifically, the `PinBox` destructor will call\n+    /// the destructor of `T` and free the allocated memory. Since the\n+    /// way `PinBox` allocates and releases memory is unspecified, the\n+    /// only valid pointer to pass to this function is the one taken\n+    /// from another `PinBox` via the [`PinBox::into_raw`] function.\n+    ///\n+    /// This function is unsafe because improper use may lead to\n+    /// memory problems. For example, a double-free may occur if the\n+    /// function is called twice on the same raw pointer.\n+    ///\n+    /// [`PinBox::into_raw`]: struct.PinBox.html#method.into_raw\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(pin)]\n+    /// use std::pin::PinBox;\n+    /// let x = PinBox::new(5);\n+    /// let ptr = PinBox::into_raw(x);\n+    /// let x = unsafe { PinBox::from_raw(ptr) };\n+    /// ```\n+    #[inline]\n+    pub unsafe fn from_raw(raw: *mut T) -> Self {\n+        PinBox { inner: Box::from_raw(raw) }\n+    }\n+\n+    /// Consumes the `PinBox`, returning the wrapped raw pointer.\n+    ///\n+    /// After calling this function, the caller is responsible for the\n+    /// memory previously managed by the `PinBox`. In particular, the\n+    /// caller should properly destroy `T` and release the memory. The\n+    /// proper way to do so is to convert the raw pointer back into a\n+    /// `PinBox` with the [`PinBox::from_raw`] function.\n+    ///\n+    /// Note: this is an associated function, which means that you have\n+    /// to call it as `PinBox::into_raw(b)` instead of `b.into_raw()`. This\n+    /// is so that there is no conflict with a method on the inner type.\n+    ///\n+    /// [`PinBox::from_raw`]: struct.PinBox.html#method.from_raw\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(pin)]\n+    /// use std::pin::PinBox;\n+    /// let x = PinBox::new(5);\n+    /// let ptr = PinBox::into_raw(x);\n+    /// ```\n+    #[inline]\n+    pub fn into_raw(b: PinBox<T>) -> *mut T {\n+        Box::into_raw(b.inner)\n+    }\n+\n+    /// Get a mutable reference to the data inside this PinBox.\n+    ///\n+    /// This function is unsafe. Users must guarantee that the data is never\n+    /// moved out of this reference.\n+    #[inline]\n+    pub unsafe fn get_mut<'a>(this: &'a mut PinBox<T>) -> &'a mut T {\n+        &mut *this.inner\n+    }\n+\n+    /// Convert this PinBox into an unpinned Box.\n+    ///\n+    /// This function is unsafe. Users must guarantee that the data is never\n+    /// moved out of the box.\n+    #[inline]\n+    pub unsafe fn unpin(this: PinBox<T>) -> Box<T> {\n+        this.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> From<Box<T>> for PinBox<T> {\n+    fn from(boxed: Box<T>) -> PinBox<T> {\n+        PinBox { inner: boxed }\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: Unpin + ?Sized> From<PinBox<T>> for Box<T> {\n+    fn from(pinned: PinBox<T>) -> Box<T> {\n+        pinned.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> Deref for PinBox<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &T {\n+        &*self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: Unpin + ?Sized> DerefMut for PinBox<T> {\n+    fn deref_mut(&mut self) -> &mut T {\n+        &mut *self.inner\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: fmt::Display + ?Sized> fmt::Display for PinBox<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Display::fmt(&*self.inner, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: fmt::Debug + ?Sized> fmt::Debug for PinBox<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Debug::fmt(&*self.inner, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> fmt::Pointer for PinBox<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        // It's not possible to extract the inner Uniq directly from the Box,\n+        // instead we cast it to a *const which aliases the Unique\n+        let ptr: *const T = &*self.inner;\n+        fmt::Pointer::fmt(&ptr, f)\n+    }\n+}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinBox<U>> for PinBox<T> {}\n+\n+#[unstable(feature = \"pin\", issue = \"49150\")]\n+impl<T: ?Sized> Unpin for PinBox<T> {}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<F: ?Sized + Future> Future for PinBox<F> {\n+    type Output = F::Output;\n+\n+    fn poll(mut self: PinMut<Self>, cx: &mut Context) -> Poll<Self::Output> {\n+        self.as_pin_mut().poll(cx)\n+    }\n+}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+unsafe impl<'a, T, F> UnsafeFutureObj<'a, T> for PinBox<F>\n+    where F: Future<Output = T> + 'a\n+{\n+    fn into_raw(self) -> *mut () {\n+        PinBox::into_raw(self) as *mut ()\n+    }\n+\n+    unsafe fn poll(ptr: *mut (), cx: &mut Context) -> Poll<T> {\n+        let ptr = ptr as *mut F;\n+        let pin: PinMut<F> = PinMut::new_unchecked(&mut *ptr);\n+        pin.poll(cx)\n+    }\n+\n+    unsafe fn drop(ptr: *mut ()) {\n+        drop(PinBox::from_raw(ptr as *mut F))\n+    }\n+}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<'a, F: Future<Output = ()> + Send + 'a> From<PinBox<F>> for FutureObj<'a, ()> {\n+    fn from(boxed: PinBox<F>) -> Self {\n+        FutureObj::new(boxed)\n+    }\n+}\n+\n+#[unstable(feature = \"futures_api\", issue = \"50547\")]\n+impl<'a, F: Future<Output = ()> + 'a> From<PinBox<F>> for LocalFutureObj<'a, ()> {\n+    fn from(boxed: PinBox<F>) -> Self {\n+        LocalFutureObj::new(boxed)\n+    }\n+}"}, {"sha": "b3c5b5feb8c481386aa59a23a5d8a211347edbac", "filename": "src/libstd/pin.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Flibstd%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Flibstd%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpin.rs?ref=971d7ed24966e64c8ec8352ada433b672c25012f", "patch": "@@ -13,3 +13,5 @@\n #![unstable(feature = \"pin\", issue = \"49150\")]\n \n pub use core::pin::*;\n+\n+pub use alloc_crate::pin::*;"}, {"sha": "46f228459079a25806ebd417e607754e52dac171", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=971d7ed24966e64c8ec8352ada433b672c25012f", "patch": "@@ -12,7 +12,7 @@\n \n #![feature(arbitrary_self_types, async_await, await_macro, futures_api, pin)]\n \n-use std::boxed::PinBox;\n+use std::pin::PinBox;\n use std::pin::PinMut;\n use std::future::Future;\n use std::sync::{"}, {"sha": "69a04437691dd3f0a7e4c8654c0954b46fcf0529", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=971d7ed24966e64c8ec8352ada433b672c25012f", "patch": "@@ -11,7 +11,7 @@\n #![feature(arbitrary_self_types, futures_api, pin)]\n #![allow(unused)]\n \n-use std::boxed::PinBox;\n+use std::pin::PinBox;\n use std::future::Future;\n use std::pin::PinMut;\n use std::rc::Rc;"}, {"sha": "55842dc8e45e66d36001e10298f724236b22be0a", "filename": "src/test/rustdoc-js/pinbox-new.js", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Ftest%2Frustdoc-js%2Fpinbox-new.js", "raw_url": "https://github.com/rust-lang/rust/raw/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Ftest%2Frustdoc-js%2Fpinbox-new.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fpinbox-new.js?ref=971d7ed24966e64c8ec8352ada433b672c25012f", "patch": "@@ -14,7 +14,7 @@ const QUERY = 'pinbox::new';\n \n const EXPECTED = {\n     'others': [\n-        { 'path': 'std::boxed::PinBox', 'name': 'new' },\n-        { 'path': 'alloc::boxed::PinBox', 'name': 'new' },\n+        { 'path': 'std::pin::PinBox', 'name': 'new' },\n+        { 'path': 'alloc::pin::PinBox', 'name': 'new' },\n     ],\n };"}, {"sha": "4a654ccb1350351e13fb47a3579fe7d5b3301a66", "filename": "src/test/rustdoc-js/vec-new.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Ftest%2Frustdoc-js%2Fvec-new.js", "raw_url": "https://github.com/rust-lang/rust/raw/971d7ed24966e64c8ec8352ada433b672c25012f/src%2Ftest%2Frustdoc-js%2Fvec-new.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fvec-new.js?ref=971d7ed24966e64c8ec8352ada433b672c25012f", "patch": "@@ -14,6 +14,6 @@ const EXPECTED = {\n     'others': [\n         { 'path': 'std::vec::Vec', 'name': 'new' },\n         { 'path': 'std::vec::Vec', 'name': 'ne' },\n-        { 'path': 'std::boxed::PinBox', 'name': 'new' },\n+        { 'path': 'std::pin::PinBox', 'name': 'new' },\n     ],\n };"}]}