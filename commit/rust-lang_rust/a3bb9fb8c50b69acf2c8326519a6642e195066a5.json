{"sha": "a3bb9fb8c50b69acf2c8326519a6642e195066a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYmI5ZmI4YzUwYjY5YWNmMmM4MzI2NTE5YTY2NDJlMTk1MDY2YTU=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-04-05T02:40:40Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-04T03:49:27Z"}, "message": "Add & bless tests", "tree": {"sha": "137079bed1f66f3e3479c8639ee73b92c364509e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/137079bed1f66f3e3479c8639ee73b92c364509e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3bb9fb8c50b69acf2c8326519a6642e195066a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3bb9fb8c50b69acf2c8326519a6642e195066a5", "html_url": "https://github.com/rust-lang/rust/commit/a3bb9fb8c50b69acf2c8326519a6642e195066a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3bb9fb8c50b69acf2c8326519a6642e195066a5/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91bc117e53bc97cdc60192d16a9ade253d87deb6", "url": "https://api.github.com/repos/rust-lang/rust/commits/91bc117e53bc97cdc60192d16a9ade253d87deb6", "html_url": "https://github.com/rust-lang/rust/commit/91bc117e53bc97cdc60192d16a9ade253d87deb6"}], "stats": {"total": 257, "additions": 221, "deletions": 36}, "files": [{"sha": "9281dda678ddd51ab73bac4675bcce4860065881", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.rs?ref=a3bb9fb8c50b69acf2c8326519a6642e195066a5", "patch": "@@ -11,12 +11,8 @@ fn foo() {\n     //~| ERROR range-to patterns with `...` are not allowed\n     if let ..5 = 0 {}\n     //~^ ERROR half-open range patterns are unstable\n-    if let 5.. = 0 {}\n-    //~^ ERROR half-open range patterns are unstable\n     if let 5..= = 0 {}\n-    //~^ ERROR half-open range patterns are unstable\n-    //~| ERROR inclusive range with no end\n+    //~^ ERROR inclusive range with no end\n     if let 5... = 0 {}\n-    //~^ ERROR half-open range patterns are unstable\n-    //~| ERROR inclusive range with no end\n+    //~^ ERROR inclusive range with no end\n }"}, {"sha": "a04883ae147644643eeee677d5c71606b4312667", "filename": "src/test/ui/half-open-range-patterns/feature-gate-half-open-range-patterns.stderr", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Ffeature-gate-half-open-range-patterns.stderr?ref=a3bb9fb8c50b69acf2c8326519a6642e195066a5", "patch": "@@ -5,15 +5,15 @@ LL |     if let ...5 = 0 {}\n    |            ^^^ help: use `..=` instead\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:16:13\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:14:13\n    |\n LL |     if let 5..= = 0 {}\n    |             ^^^ help: use `..` instead\n    |\n    = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n \n error[E0586]: inclusive range with no end\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:19:13\n+  --> $DIR/feature-gate-half-open-range-patterns.rs:16:13\n    |\n LL |     if let 5... = 0 {}\n    |             ^^^ help: use `..` instead\n@@ -47,34 +47,7 @@ LL |     if let ..5 = 0 {}\n    = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n    = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n \n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:14:12\n-   |\n-LL |     if let 5.. = 0 {}\n-   |            ^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:16:12\n-   |\n-LL |     if let 5..= = 0 {}\n-   |            ^^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n-error[E0658]: half-open range patterns are unstable\n-  --> $DIR/feature-gate-half-open-range-patterns.rs:19:12\n-   |\n-LL |     if let 5... = 0 {}\n-   |            ^^^^\n-   |\n-   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n-   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n-\n-error: aborting due to 9 previous errors\n+error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0586, E0658.\n For more information about an error, try `rustc --explain E0586`."}, {"sha": "4f478a69881429e37e1384c428b0c8db4d01eeb2", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions0.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions0.rs?ref=a3bb9fb8c50b69acf2c8326519a6642e195066a5", "patch": "@@ -0,0 +1,32 @@\n+// run-pass\n+#![allow(incomplete_features)]\n+#![feature(exclusive_range_pattern)]\n+#![feature(half_open_range_patterns)]\n+#![feature(inline_const)]\n+\n+fn main() {\n+    let mut if_lettable = vec![];\n+    let mut first_or = vec![];\n+    let mut or_two = vec![];\n+    let mut range_from = vec![];\n+    let mut bottom = vec![];\n+\n+    for x in -9 + 1..=(9 - 2) {\n+        if let -1..=0 | 2..3 | 4 = x {\n+            if_lettable.push(x)\n+        }\n+        match x {\n+            1 | -3..0 => first_or.push(x),\n+            y @ (0..5 | 6) => or_two.push(y),\n+            y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+            y @ -5.. => range_from.push(y),\n+            y @ ..-7 => assert_eq!(y, -8),\n+            y => bottom.push(y),\n+        }\n+    }\n+    assert_eq!(if_lettable, [-1, 0, 2, 4]);\n+    assert_eq!(first_or, [-3, -2, -1, 1]);\n+    assert_eq!(or_two, [0, 2, 3, 4, 6]);\n+    assert_eq!(range_from, [-5, -4, 7]);\n+    assert_eq!(bottom, [-7, -6]);\n+}"}, {"sha": "55353999b67888f4ad9569858d21edbe1103bfd6", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions1.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.rs?ref=a3bb9fb8c50b69acf2c8326519a6642e195066a5", "patch": "@@ -0,0 +1,29 @@\n+fn main() {\n+    let mut if_lettable = Vec::<i32>::new();\n+    let mut first_or = Vec::<i32>::new();\n+    let mut or_two = Vec::<i32>::new();\n+    let mut range_from = Vec::<i32>::new();\n+    let mut bottom = Vec::<i32>::new();\n+    let mut errors_only = Vec::<i32>::new();\n+\n+    for x in -9 + 1..=(9 - 2) {\n+        if let n @ 2..3|4 = x {\n+            //~^ error: variable `n` is not bound in all patterns\n+            //~| exclusive range pattern syntax is experimental\n+            errors_only.push(x);\n+        } else if let 2..3 | 4 = x {\n+            //~^ exclusive range pattern syntax is experimental\n+            if_lettable.push(x);\n+        }\n+        match x as i32 {\n+            0..5+1 => errors_only.push(x),\n+            //~^ error: expected one of `=>`, `if`, or `|`, found `+`\n+            1 | -3..0 => first_or.push(x),\n+            y @ (0..5 | 6) => or_two.push(y),\n+            y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+            y @ -5.. => range_from.push(y),\n+            y @ ..-7 => assert_eq!(y, -8),\n+            y => bottom.push(y),\n+        }\n+    }\n+}"}, {"sha": "19ebcaf0f3699871343f032b02b755529d487b2f", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions1.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions1.stderr?ref=a3bb9fb8c50b69acf2c8326519a6642e195066a5", "patch": "@@ -0,0 +1,36 @@\n+error: expected one of `=>`, `if`, or `|`, found `+`\n+  --> $DIR/range_pat_interactions1.rs:19:17\n+   |\n+LL |             0..5+1 => errors_only.push(x),\n+   |                 ^ expected one of `=>`, `if`, or `|`\n+\n+error[E0408]: variable `n` is not bound in all patterns\n+  --> $DIR/range_pat_interactions1.rs:10:25\n+   |\n+LL |         if let n @ 2..3|4 = x {\n+   |                -        ^ pattern doesn't bind `n`\n+   |                |\n+   |                variable not in all patterns\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions1.rs:10:20\n+   |\n+LL |         if let n @ 2..3|4 = x {\n+   |                    ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions1.rs:14:23\n+   |\n+LL |         } else if let 2..3 | 4 = x {\n+   |                       ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0408, E0658.\n+For more information about an error, try `rustc --explain E0408`."}, {"sha": "4615ebd688a9c3f2cef06fa1781284cbd1a26709", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.rs?ref=a3bb9fb8c50b69acf2c8326519a6642e195066a5", "patch": "@@ -0,0 +1,21 @@\n+fn main() {\n+    let mut first_or = Vec::<i32>::new();\n+    let mut or_two = Vec::<i32>::new();\n+    let mut range_from = Vec::<i32>::new();\n+    let mut bottom = Vec::<i32>::new();\n+    let mut errors_only = Vec::<i32>::new();\n+\n+    for x in -9 + 1..=(9 - 2) {\n+        match x as i32 {\n+            0..=(5+1) => errors_only.push(x),\n+            //~^ error: inclusive range with no end\n+            //~| error: expected one of `=>`, `if`, or `|`, found `(`\n+            1 | -3..0 => first_or.push(x),\n+            y @ (0..5 | 6) => or_two.push(y),\n+            y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+            y @ -5.. => range_from.push(y),\n+            y @ ..-7 => assert_eq!(y, -8),\n+            y => bottom.push(y),\n+        }\n+    }\n+}"}, {"sha": "13a5542a4741ff13574c1f0d22b19d97e54f0d94", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions2.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions2.stderr?ref=a3bb9fb8c50b69acf2c8326519a6642e195066a5", "patch": "@@ -0,0 +1,17 @@\n+error[E0586]: inclusive range with no end\n+  --> $DIR/range_pat_interactions2.rs:10:14\n+   |\n+LL |             0..=(5+1) => errors_only.push(x),\n+   |              ^^^ help: use `..` instead\n+   |\n+   = note: inclusive ranges must be bounded at the end (`..=b` or `a..=b`)\n+\n+error: expected one of `=>`, `if`, or `|`, found `(`\n+  --> $DIR/range_pat_interactions2.rs:10:17\n+   |\n+LL |             0..=(5+1) => errors_only.push(x),\n+   |                 ^ expected one of `=>`, `if`, or `|`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0586`."}, {"sha": "0afb51260591228bae8900f87cd1401ac4a3b32f", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.rs?ref=a3bb9fb8c50b69acf2c8326519a6642e195066a5", "patch": "@@ -0,0 +1,24 @@\n+fn main() {\n+    let mut first_or = Vec::<i32>::new();\n+    let mut or_two = Vec::<i32>::new();\n+    let mut range_from = Vec::<i32>::new();\n+    let mut bottom = Vec::<i32>::new();\n+\n+    for x in -9 + 1..=(9 - 2) {\n+        match x as i32 {\n+            8.. => bottom.push(x),\n+            1 | -3..0 => first_or.push(x),\n+            //~^ exclusive range pattern syntax is experimental\n+            y @ (0..5 | 6) => or_two.push(y),\n+            //~^ exclusive range pattern syntax is experimental\n+            y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+            //~^ inline-const is experimental\n+            //~| exclusive range pattern syntax is experimental\n+            y @ -5.. => range_from.push(y),\n+            y @ ..-7 => assert_eq!(y, -8),\n+            //~^ half-open range patterns are unstable\n+            //~| exclusive range pattern syntax is experimental\n+            y => bottom.push(y),\n+        }\n+    }\n+}"}, {"sha": "8278e7cc6cfde785b3a3994219900f1f4ff043f9", "filename": "src/test/ui/half-open-range-patterns/range_pat_interactions3.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3bb9fb8c50b69acf2c8326519a6642e195066a5/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Frange_pat_interactions3.stderr?ref=a3bb9fb8c50b69acf2c8326519a6642e195066a5", "patch": "@@ -0,0 +1,57 @@\n+error[E0658]: half-open range patterns are unstable\n+  --> $DIR/range_pat_interactions3.rs:18:17\n+   |\n+LL |             y @ ..-7 => assert_eq!(y, -8),\n+   |                 ^^^^\n+   |\n+   = note: see issue #67264 <https://github.com/rust-lang/rust/issues/67264> for more information\n+   = help: add `#![feature(half_open_range_patterns)]` to the crate attributes to enable\n+\n+error[E0658]: inline-const is experimental\n+  --> $DIR/range_pat_interactions3.rs:14:20\n+   |\n+LL |             y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+   |                    ^^^^^\n+   |\n+   = note: see issue #76001 <https://github.com/rust-lang/rust/issues/76001> for more information\n+   = help: add `#![feature(inline_const)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions3.rs:10:17\n+   |\n+LL |             1 | -3..0 => first_or.push(x),\n+   |                 ^^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions3.rs:12:18\n+   |\n+LL |             y @ (0..5 | 6) => or_two.push(y),\n+   |                  ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions3.rs:14:17\n+   |\n+LL |             y @ 0..const { 5 + 1 } => assert_eq!(y, 5),\n+   |                 ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error[E0658]: exclusive range pattern syntax is experimental\n+  --> $DIR/range_pat_interactions3.rs:18:17\n+   |\n+LL |             y @ ..-7 => assert_eq!(y, -8),\n+   |                 ^^^^\n+   |\n+   = note: see issue #37854 <https://github.com/rust-lang/rust/issues/37854> for more information\n+   = help: add `#![feature(exclusive_range_pattern)]` to the crate attributes to enable\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}