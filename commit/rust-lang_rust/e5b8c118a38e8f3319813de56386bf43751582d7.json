{"sha": "e5b8c118a38e8f3319813de56386bf43751582d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YjhjMTE4YTM4ZThmMzMxOTgxM2RlNTYzODZiZjQzNzUxNTgyZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-19T08:59:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-19T08:59:39Z"}, "message": "Auto merge of #64890 - wesleywiser:const_prop_rvalue, r=oli-obk\n\n[const-prop] Handle remaining MIR Rvalue cases\n\nr? @oli-obk", "tree": {"sha": "e15c94d0c43f1dba0e5c95efc1e00333ff7c6360", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15c94d0c43f1dba0e5c95efc1e00333ff7c6360"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5b8c118a38e8f3319813de56386bf43751582d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5b8c118a38e8f3319813de56386bf43751582d7", "html_url": "https://github.com/rust-lang/rust/commit/e5b8c118a38e8f3319813de56386bf43751582d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5b8c118a38e8f3319813de56386bf43751582d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9578272d681c8691ca2ff3f5c4230b491bc1c694", "url": "https://api.github.com/repos/rust-lang/rust/commits/9578272d681c8691ca2ff3f5c4230b491bc1c694", "html_url": "https://github.com/rust-lang/rust/commit/9578272d681c8691ca2ff3f5c4230b491bc1c694"}, {"sha": "fd20dbed004c5c84fe846e04255608dc78b60a0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd20dbed004c5c84fe846e04255608dc78b60a0d", "html_url": "https://github.com/rust-lang/rust/commit/fd20dbed004c5c84fe846e04255608dc78b60a0d"}], "stats": {"total": 448, "additions": 354, "deletions": 94}, "files": [{"sha": "d918b9ee67347e8ef4be0409e75c1c35a78da0e4", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -363,6 +363,8 @@ pub enum UndefinedBehaviorInfo {\n     UbExperimental(String),\n     /// Unreachable code was executed.\n     Unreachable,\n+    /// An enum discriminant was set to a value which was outside the range of valid values.\n+    InvalidDiscriminant(ScalarMaybeUndef),\n }\n \n impl fmt::Debug for UndefinedBehaviorInfo {\n@@ -373,6 +375,8 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 write!(f, \"{}\", msg),\n             Unreachable =>\n                 write!(f, \"entered unreachable code\"),\n+            InvalidDiscriminant(val) =>\n+                write!(f, \"encountered invalid enum discriminant {}\", val),\n         }\n     }\n }\n@@ -400,7 +404,6 @@ pub enum UnsupportedOpInfo<'tcx> {\n     InvalidMemoryAccess,\n     InvalidFunctionPointer,\n     InvalidBool,\n-    InvalidDiscriminant(ScalarMaybeUndef),\n     PointerOutOfBounds {\n         ptr: Pointer,\n         msg: CheckInAllocMsg,\n@@ -485,8 +488,6 @@ impl fmt::Debug for UnsupportedOpInfo<'tcx> {\n                 write!(f, \"incorrect alloc info: expected size {} and align {}, \\\n                            got size {} and align {}\",\n                     size.bytes(), align.bytes(), size2.bytes(), align2.bytes()),\n-            InvalidDiscriminant(val) =>\n-                write!(f, \"encountered invalid enum discriminant {}\", val),\n             InvalidMemoryAccess =>\n                 write!(f, \"tried to access memory through an invalid pointer\"),\n             DanglingPointerDeref =>"}, {"sha": "4d9be55945e0279ef3acfb4ec0ced2efd156f9b3", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -647,7 +647,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let bits_discr = raw_discr\n                     .not_undef()\n                     .and_then(|raw_discr| self.force_bits(raw_discr, discr_val.layout.size))\n-                    .map_err(|_| err_unsup!(InvalidDiscriminant(raw_discr.erase_tag())))?;\n+                    .map_err(|_| err_ub!(InvalidDiscriminant(raw_discr.erase_tag())))?;\n                 let real_discr = if discr_val.layout.ty.is_signed() {\n                     // going from layout tag type to typeck discriminant type\n                     // requires first sign extending with the discriminant layout\n@@ -677,7 +677,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     _ => bug!(\"tagged layout for non-adt non-generator\"),\n \n                 }.ok_or_else(\n-                    || err_unsup!(InvalidDiscriminant(raw_discr.erase_tag()))\n+                    || err_ub!(InvalidDiscriminant(raw_discr.erase_tag()))\n                 )?;\n                 (real_discr, index.0)\n             },\n@@ -689,15 +689,15 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let variants_start = niche_variants.start().as_u32();\n                 let variants_end = niche_variants.end().as_u32();\n                 let raw_discr = raw_discr.not_undef().map_err(|_| {\n-                    err_unsup!(InvalidDiscriminant(ScalarMaybeUndef::Undef))\n+                    err_ub!(InvalidDiscriminant(ScalarMaybeUndef::Undef))\n                 })?;\n                 match raw_discr.to_bits_or_ptr(discr_val.layout.size, self) {\n                     Err(ptr) => {\n                         // The niche must be just 0 (which an inbounds pointer value never is)\n                         let ptr_valid = niche_start == 0 && variants_start == variants_end &&\n                             !self.memory.ptr_may_be_null(ptr);\n                         if !ptr_valid {\n-                            throw_unsup!(InvalidDiscriminant(raw_discr.erase_tag().into()))\n+                            throw_ub!(InvalidDiscriminant(raw_discr.erase_tag().into()))\n                         }\n                         (dataful_variant.as_u32() as u128, dataful_variant)\n                     },"}, {"sha": "0289c52fd37446bbd7578bbc3865786618170369", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -1031,17 +1031,23 @@ where\n         variant_index: VariantIdx,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n+        let variant_scalar = Scalar::from_u32(variant_index.as_u32()).into();\n+\n         match dest.layout.variants {\n             layout::Variants::Single { index } => {\n-                assert_eq!(index, variant_index);\n+                if index != variant_index {\n+                    throw_ub!(InvalidDiscriminant(variant_scalar));\n+                }\n             }\n             layout::Variants::Multiple {\n                 discr_kind: layout::DiscriminantKind::Tag,\n                 discr: ref discr_layout,\n                 discr_index,\n                 ..\n             } => {\n-                assert!(dest.layout.ty.variant_range(*self.tcx).unwrap().contains(&variant_index));\n+                if !dest.layout.ty.variant_range(*self.tcx).unwrap().contains(&variant_index) {\n+                    throw_ub!(InvalidDiscriminant(variant_scalar));\n+                }\n                 let discr_val =\n                     dest.layout.ty.discriminant_for_variant(*self.tcx, variant_index).unwrap().val;\n \n@@ -1064,9 +1070,9 @@ where\n                 discr_index,\n                 ..\n             } => {\n-                assert!(\n-                    variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len(),\n-                );\n+                if !variant_index.as_usize() < dest.layout.ty.ty_adt_def().unwrap().variants.len() {\n+                    throw_ub!(InvalidDiscriminant(variant_scalar));\n+                }\n                 if variant_index != dataful_variant {\n                     let variants_start = niche_variants.start().as_u32();\n                     let variant_index_relative = variant_index.as_u32()"}, {"sha": "3444fb60f333b9d35fcf5c33cbe2f7bfbb265065", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -344,7 +344,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         match self.walk_value(op) {\n             Ok(()) => Ok(()),\n             Err(err) => match err.kind {\n-                err_unsup!(InvalidDiscriminant(val)) =>\n+                err_ub!(InvalidDiscriminant(val)) =>\n                     throw_validation_failure!(\n                         val, self.path, \"a valid enum discriminant\"\n                     ),"}, {"sha": "f0c0e57344388f8e09d410c118a099e5158a7e82", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 84, "deletions": 74, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue,\n-    Local, NullOp, UnOp, StatementKind, Statement, LocalKind,\n+    Local, UnOp, StatementKind, Statement, LocalKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp,\n     SourceScope, SourceScopeLocalData, LocalDecl, BasicBlock,\n };\n@@ -118,7 +118,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n struct ConstPropMachine;\n \n impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n-    type MemoryKinds= !;\n+    type MemoryKinds = !;\n     type PointerTag = ();\n     type ExtraFnVal = !;\n \n@@ -434,32 +434,23 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     ) -> Option<Const<'tcx>> {\n         let span = source_info.span;\n \n-        // if this isn't a supported operation, then return None\n-        match rvalue {\n-            Rvalue::Repeat(..) |\n-            Rvalue::Aggregate(..) |\n-            Rvalue::NullaryOp(NullOp::Box, _) |\n-            Rvalue::Discriminant(..) => return None,\n-\n-            Rvalue::Use(_) |\n-            Rvalue::Len(_) |\n-            Rvalue::Cast(..) |\n-            Rvalue::NullaryOp(..) |\n-            Rvalue::CheckedBinaryOp(..) |\n-            Rvalue::Ref(..) |\n-            Rvalue::UnaryOp(..) |\n-            Rvalue::BinaryOp(..) => { }\n-        }\n+        let overflow_check = self.tcx.sess.overflow_checks();\n \n-        // perform any special checking for specific Rvalue types\n-        if let Rvalue::UnaryOp(op, arg) = rvalue {\n-            trace!(\"checking UnaryOp(op = {:?}, arg = {:?})\", op, arg);\n-            let overflow_check = self.tcx.sess.overflow_checks();\n+        // Perform any special handling for specific Rvalue types.\n+        // Generally, checks here fall into one of two categories:\n+        //   1. Additional checking to provide useful lints to the user\n+        //        - In this case, we will do some validation and then fall through to the\n+        //          end of the function which evals the assignment.\n+        //   2. Working around bugs in other parts of the compiler\n+        //        - In this case, we'll return `None` from this function to stop evaluation.\n+        match rvalue {\n+            // Additional checking: if overflow checks are disabled (which is usually the case in\n+            // release mode), then we need to do additional checking here to give lints to the user\n+            // if an overflow would occur.\n+            Rvalue::UnaryOp(UnOp::Neg, arg) if !overflow_check => {\n+                trace!(\"checking UnaryOp(op = Neg, arg = {:?})\", arg);\n \n-            self.use_ecx(source_info, |this| {\n-                // We check overflow in debug mode already\n-                // so should only check in release mode.\n-                if *op == UnOp::Neg && !overflow_check {\n+                self.use_ecx(source_info, |this| {\n                     let ty = arg.ty(&this.local_decls, this.tcx);\n \n                     if ty.is_integral() {\n@@ -471,60 +462,70 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                             throw_panic!(OverflowNeg)\n                         }\n                     }\n+\n+                    Ok(())\n+                })?;\n+            }\n+\n+            // Additional checking: check for overflows on integer binary operations and report\n+            // them to the user as lints.\n+            Rvalue::BinaryOp(op, left, right) => {\n+                trace!(\"checking BinaryOp(op = {:?}, left = {:?}, right = {:?})\", op, left, right);\n+\n+                let r = self.use_ecx(source_info, |this| {\n+                    this.ecx.read_immediate(this.ecx.eval_operand(right, None)?)\n+                })?;\n+                if *op == BinOp::Shr || *op == BinOp::Shl {\n+                    let left_bits = place_layout.size.bits();\n+                    let right_size = r.layout.size;\n+                    let r_bits = r.to_scalar().and_then(|r| r.to_bits(right_size));\n+                    if r_bits.ok().map_or(false, |b| b >= left_bits as u128) {\n+                        let source_scope_local_data = match self.source_scope_local_data {\n+                            ClearCrossCrate::Set(ref data) => data,\n+                            ClearCrossCrate::Clear => return None,\n+                        };\n+                        let dir = if *op == BinOp::Shr {\n+                            \"right\"\n+                        } else {\n+                            \"left\"\n+                        };\n+                        let hir_id = source_scope_local_data[source_info.scope].lint_root;\n+                        self.tcx.lint_hir(\n+                            ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n+                            hir_id,\n+                            span,\n+                            &format!(\"attempt to shift {} with overflow\", dir));\n+                        return None;\n+                    }\n                 }\n \n-                Ok(())\n-            })?;\n-        } else if let Rvalue::BinaryOp(op, left, right) = rvalue {\n-            trace!(\"checking BinaryOp(op = {:?}, left = {:?}, right = {:?})\", op, left, right);\n-\n-            let r = self.use_ecx(source_info, |this| {\n-                this.ecx.read_immediate(this.ecx.eval_operand(right, None)?)\n-            })?;\n-            if *op == BinOp::Shr || *op == BinOp::Shl {\n-                let left_bits = place_layout.size.bits();\n-                let right_size = r.layout.size;\n-                let r_bits = r.to_scalar().and_then(|r| r.to_bits(right_size));\n-                if r_bits.ok().map_or(false, |b| b >= left_bits as u128) {\n-                    let source_scope_local_data = match self.source_scope_local_data {\n-                        ClearCrossCrate::Set(ref data) => data,\n-                        ClearCrossCrate::Clear => return None,\n-                    };\n-                    let dir = if *op == BinOp::Shr {\n-                        \"right\"\n-                    } else {\n-                        \"left\"\n-                    };\n-                    let hir_id = source_scope_local_data[source_info.scope].lint_root;\n-                    self.tcx.lint_hir(\n-                        ::rustc::lint::builtin::EXCEEDING_BITSHIFTS,\n-                        hir_id,\n-                        span,\n-                        &format!(\"attempt to shift {} with overflow\", dir));\n-                    return None;\n+                // If overflow checking is enabled (like in debug mode by default),\n+                // then we'll already catch overflow when we evaluate the `Assert` statement\n+                // in MIR. However, if overflow checking is disabled, then there won't be any\n+                // `Assert` statement and so we have to do additional checking here.\n+                if !overflow_check {\n+                    self.use_ecx(source_info, |this| {\n+                        let l = this.ecx.read_immediate(this.ecx.eval_operand(left, None)?)?;\n+                        let (_, overflow, _ty) = this.ecx.overflowing_binary_op(*op, l, r)?;\n+\n+                        if overflow {\n+                            let err = err_panic!(Overflow(*op)).into();\n+                            return Err(err);\n+                        }\n+\n+                        Ok(())\n+                    })?;\n                 }\n             }\n-            self.use_ecx(source_info, |this| {\n-                let l = this.ecx.read_immediate(this.ecx.eval_operand(left, None)?)?;\n-                let (_, overflow, _ty) = this.ecx.overflowing_binary_op(*op, l, r)?;\n-\n-                // We check overflow in debug mode already\n-                // so should only check in release mode.\n-                if !this.tcx.sess.overflow_checks() && overflow {\n-                    let err = err_panic!(Overflow(*op)).into();\n-                    return Err(err);\n-                }\n \n-                Ok(())\n-            })?;\n-        } else if let Rvalue::Ref(_, _, place) = rvalue {\n-            trace!(\"checking Ref({:?})\", place);\n+            // Work around: avoid ICE in miri.\n             // FIXME(wesleywiser) we don't currently handle the case where we try to make a ref\n-            // from a function argument that hasn't been assigned to in this function.\n-            if let Place {\n-                base: PlaceBase::Local(local),\n-                projection: box []\n-            } = place {\n+            // from a function argument that hasn't been assigned to in this function. The main\n+            // issue is if an arg is a fat-pointer, miri `expects()` to be able to read the value\n+            // of that pointer to get size info. However, since this is `ConstProp`, that argument\n+            // doesn't actually have a backing value and so this causes an ICE.\n+            Rvalue::Ref(_, _, Place { base: PlaceBase::Local(local), projection: box [] }) => {\n+                trace!(\"checking Ref({:?})\", place);\n                 let alive =\n                     if let LocalValue::Live(_) = self.ecx.frame().locals[*local].value {\n                         true\n@@ -535,6 +536,15 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     return None;\n                 }\n             }\n+\n+            // Work around: avoid extra unnecessary locals.\n+            // FIXME(wesleywiser): const eval will turn this into a `const Scalar(<ZST>)` that\n+            // `SimplifyLocals` doesn't know it can remove.\n+            Rvalue::Aggregate(_, operands) if operands.len() == 0 => {\n+                return None;\n+            }\n+\n+            _ => { }\n         }\n \n         self.use_ecx(source_info, |this| {"}, {"sha": "add4eef13c78477d73172764b8fc3365d671d624", "filename": "src/test/compile-fail/consts/const-err3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconsts%2Fconst-err3.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -14,6 +14,7 @@ fn main() {\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n     //~^ ERROR const_err\n+    //~| ERROR this expression will panic at runtime\n     black_box(b);\n     black_box(c);\n     black_box(d);"}, {"sha": "0937d37be6b6e083c5bb89e26df8518d49891bca", "filename": "src/test/mir-opt/const_prop/aggregate.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -0,0 +1,25 @@\n+// compile-flags: -O\n+\n+fn main() {\n+    let x = (0, 1, 2).1 + 0;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _3 = (const 0i32, const 1i32, const 2i32);\n+//      _2 = (_3.1: i32);\n+//      _1 = Add(move _2, const 0i32);\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _3 = (const 0i32, const 1i32, const 2i32);\n+//      _2 = const 1i32;\n+//      _1 = Add(move _2, const 0i32);\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "cf134dadf27890ea552083929b28b6c00817ef43", "filename": "src/test/mir-opt/const_prop/boxes.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fboxes.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -0,0 +1,56 @@\n+// compile-flags: -O\n+// ignore-emscripten compiled with panic=abort by default\n+// ignore-wasm32\n+// ignore-wasm64\n+\n+#![feature(box_syntax)]\n+\n+// Note: this test verifies that we, in fact, do not const prop `box`\n+\n+fn main() {\n+    let x = *(box 42) + 0;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _4 = Box(i32);\n+//      (*_4) = const 42i32;\n+//      _3 = move _4;\n+//      ...\n+//      _2 = (*_3);\n+//      _1 = Add(move _2, const 0i32);\n+//      ...\n+//      drop(_3) -> [return: bb2, unwind: bb1];\n+//  }\n+//  bb1 (cleanup): {\n+//      resume;\n+//  }\n+//  bb2: {\n+//      ...\n+//      _0 = ();\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _4 = Box(i32);\n+//      (*_4) = const 42i32;\n+//      _3 = move _4;\n+//      ...\n+//      _2 = (*_3);\n+//      _1 = Add(move _2, const 0i32);\n+//      ...\n+//      drop(_3) -> [return: bb2, unwind: bb1];\n+//  }\n+//  bb1 (cleanup): {\n+//      resume;\n+//  }\n+//  bb2: {\n+//      ...\n+//      _0 = ();\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "07bbd9202b9408316ef42b1a3750c059962be14d", "filename": "src/test/mir-opt/const_prop/discriminant.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -0,0 +1,53 @@\n+// compile-flags: -O\n+\n+fn main() {\n+    let x = (if let Some(true) = Some(true) { 42 } else { 10 }) + 0;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _3 = std::option::Option::<bool>::Some(const true,);\n+//      _4 = discriminant(_3);\n+//      switchInt(move _4) -> [1isize: bb3, otherwise: bb2];\n+//  }\n+//  bb1: {\n+//      _2 = const 42i32;\n+//      goto -> bb4;\n+//  }\n+//  bb2: {\n+//      _2 = const 10i32;\n+//      goto -> bb4;\n+//  }\n+//  bb3: {\n+//      switchInt(((_3 as Some).0: bool)) -> [false: bb2, otherwise: bb1];\n+//  }\n+//  bb4: {\n+//      _1 = Add(move _2, const 0i32);\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _3 = const Scalar(0x01) : std::option::Option<bool>;\n+//      _4 = const 1isize;\n+//      switchInt(const 1isize) -> [1isize: bb3, otherwise: bb2];\n+//  }\n+//  bb1: {\n+//      _2 = const 42i32;\n+//      goto -> bb4;\n+//  }\n+//  bb2: {\n+//      _2 = const 10i32;\n+//      goto -> bb4;\n+//  }\n+//  bb3: {\n+//      switchInt(const true) -> [false: bb2, otherwise: bb1];\n+//  }\n+//  bb4: {\n+//      _1 = Add(move _2, const 0i32);\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "fb091ad2a3d5342d26f25343296b1e7ccea386fd", "filename": "src/test/mir-opt/const_prop/repeat.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -0,0 +1,37 @@\n+// compile-flags: -O\n+\n+fn main() {\n+    let x: u32 = [42; 8][2] + 0;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _3 = [const 42u32; 8];\n+//      ...\n+//      _4 = const 2usize;\n+//      _5 = const 8usize;\n+//      _6 = Lt(_4, _5);\n+//      assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1;\n+//  }\n+//  bb1: {\n+//      _2 = _3[_4];\n+//      _1 = Add(move _2, const 0u32);\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _6 = const true;\n+//      assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1;\n+//  }\n+//  bb1: {\n+//      _2 = const 42u32;\n+//      _1 = Add(move _2, const 0u32);\n+//      ...\n+//      return;\n+//  }\n+// END rustc.main.ConstProp.after.mir"}, {"sha": "58dfc5710ae4e3d7a619f6c1ffe2598a2f79ec5f", "filename": "src/test/run-fail/overflowing-rsh-5.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-5.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n \n fn main() {\n     let _n = 1i64 >> [64][0];"}, {"sha": "c2fec5e4860af772e9449b5e997c563c54027f8c", "filename": "src/test/run-fail/overflowing-rsh-6.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Foverflowing-rsh-6.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -C debug-assertions\n \n #![warn(exceeding_bitshifts)]\n+#![warn(const_err)]\n #![feature(const_indexing)]\n \n fn main() {"}, {"sha": "e5ee90fc9f11f00b84eea165de12dadab70be07f", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -23,6 +23,7 @@ fn main() {\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n     //~^ ERROR index out of bounds\n+    //~| ERROR this expression will panic at runtime\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "0a09a7213dabc8f6596c2351ddaacf9521d69570", "filename": "src/test/ui/consts/const-err2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -34,5 +34,11 @@ error: index out of bounds: the len is 1 but the index is 1\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: this expression will panic at runtime\n+  --> $DIR/const-err2.rs:24:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "89373f99f75c235ac7017ade4ce3679565d2a0c6", "filename": "src/test/ui/consts/const-err3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -23,6 +23,7 @@ fn main() {\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n     //~^ ERROR const_err\n+    //~| ERROR this expression will panic at runtime\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "42de247c8f7e074d6a9e139cae02d89e99d5104f", "filename": "src/test/ui/consts/const-err3.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -34,5 +34,11 @@ error: index out of bounds: the len is 1 but the index is 1\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: this expression will panic at runtime\n+  --> $DIR/const-err3.rs:24:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 6 previous errors\n "}, {"sha": "cccb7879fc0fbe5c8d464b46cc3e91bbe7915a4d", "filename": "src/test/ui/consts/const-eval/write-to-uninhabited-enum-variant.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fwrite-to-uninhabited-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fwrite-to-uninhabited-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fwrite-to-uninhabited-enum-variant.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+\n+#![allow(dead_code)]\n+\n+enum Empty { }\n+enum Test1 {\n+    A(u8),\n+    B(Empty),\n+}\n+enum Test2 {\n+    A(u8),\n+    B(Empty),\n+    C,\n+}\n+\n+fn bar() -> Option<Empty> {\n+    None\n+}\n+\n+fn main() {\n+    if let Some(x) = bar() {\n+        Test1::B(x);\n+    }\n+\n+    if let Some(x) = bar() {\n+        Test2::B(x);\n+    }\n+}"}, {"sha": "48c4b7da942e4a8b33e35e0e8aac36d9094271dd", "filename": "src/test/ui/consts/const-prop-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -1,3 +1,4 @@\n fn main() {\n     [0; 3][3u64 as usize]; //~ ERROR the len is 3 but the index is 3\n+    //~| ERROR this expression will panic at runtime\n }"}, {"sha": "8ecc6f4bc6b120c977e50b97ac3c2b30d3978b3f", "filename": "src/test/ui/consts/const-prop-ice.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-prop-ice.stderr?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -6,5 +6,11 @@ LL |     [0; 3][3u64 as usize];\n    |\n    = note: `#[deny(const_err)]` on by default\n \n-error: aborting due to previous error\n+error: this expression will panic at runtime\n+  --> $DIR/const-prop-ice.rs:2:5\n+   |\n+LL |     [0; 3][3u64 as usize];\n+   |     ^^^^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 3 but the index is 3\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "e7221e2cbb1e134463c78a65c114b36d227bfb43", "filename": "src/test/ui/issues/issue-54348.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -1,5 +1,7 @@\n fn main() {\n     [1][0u64 as usize];\n     [1][1.5 as usize]; //~ ERROR index out of bounds\n+    //~| ERROR this expression will panic at runtime\n     [1][1u64 as usize]; //~ ERROR index out of bounds\n+    //~| ERROR this expression will panic at runtime\n }"}, {"sha": "79320ef4f31c788bdf58fc00895b38811fea695c", "filename": "src/test/ui/issues/issue-54348.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54348.stderr?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -6,11 +6,23 @@ LL |     [1][1.5 as usize];\n    |\n    = note: `#[deny(const_err)]` on by default\n \n+error: this expression will panic at runtime\n+  --> $DIR/issue-54348.rs:3:5\n+   |\n+LL |     [1][1.5 as usize];\n+   |     ^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/issue-54348.rs:4:5\n+  --> $DIR/issue-54348.rs:5:5\n    |\n LL |     [1][1u64 as usize];\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: this expression will panic at runtime\n+  --> $DIR/issue-54348.rs:5:5\n+   |\n+LL |     [1][1u64 as usize];\n+   |     ^^^^^^^^^^^^^^^^^^ index out of bounds: the len is 1 but the index is 1\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "2c213daddd7527a74470d02b5a2531fad6f34241", "filename": "src/test/ui/lint/lint-exceeding-bitshifts2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.rs?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -8,7 +8,7 @@ fn main() {\n       let n = 1u8 << (4+3);\n       let n = 1u8 << (4+4); //~ ERROR: attempt to shift left with overflow\n       let n = 1i64 >> [63][0];\n-      let n = 1i64 >> [64][0]; // should be linting, needs to wait for const propagation\n+      let n = 1i64 >> [64][0]; //~ ERROR: attempt to shift right with overflow\n \n       #[cfg(target_pointer_width = \"32\")]\n       const BITS: usize = 32;"}, {"sha": "d9c76d233d03eb01186e402865639ccd49d85107", "filename": "src/test/ui/lint/lint-exceeding-bitshifts2.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e5b8c118a38e8f3319813de56386bf43751582d7/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-exceeding-bitshifts2.stderr?ref=e5b8c118a38e8f3319813de56386bf43751582d7", "patch": "@@ -10,6 +10,12 @@ note: lint level defined here\n LL | #![deny(exceeding_bitshifts, const_err)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n+error: attempt to shift right with overflow\n+  --> $DIR/lint-exceeding-bitshifts2.rs:11:15\n+   |\n+LL |       let n = 1i64 >> [64][0];\n+   |               ^^^^^^^^^^^^^^^\n+\n error: attempt to shift left with overflow\n   --> $DIR/lint-exceeding-bitshifts2.rs:17:15\n    |\n@@ -22,5 +28,5 @@ error: attempt to shift left with overflow\n LL |       let n = 1_usize << BITS;\n    |               ^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}]}