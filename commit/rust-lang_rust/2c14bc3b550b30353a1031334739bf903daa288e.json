{"sha": "2c14bc3b550b30353a1031334739bf903daa288e", "node_id": "C_kwDOAAsO6NoAKDJjMTRiYzNiNTUwYjMwMzUzYTEwMzEzMzQ3MzliZjkwM2RhYTI4OGU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-31T12:06:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-31T12:06:41Z"}, "message": "Rollup merge of #99741 - compiler-errors:copy-impl-impl-generics, r=fee1-dead\n\nUse `impl`'s generics when suggesting fix on bad `impl Copy`\n\nSee the UI test for a more complicated example, but we weren't correctly suggesting to add bounds given a manual `impl` whose generics didn't match the struct generics.\n\n```rust\n#[derive(Clone)]\nstruct Wrapper<T>(T);\n\nimpl<S> Copy for Wrapper<S> {}\n```\n\nCoincidentally this fix didn't cause any regressions for `derive(Copy)` impls, I think because those use the same spans in the impl generics as the struct generics, so the machinery still applies the same change.", "tree": {"sha": "049e0dd0d9cd50ebbe79cc331d1d897945886e8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/049e0dd0d9cd50ebbe79cc331d1d897945886e8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c14bc3b550b30353a1031334739bf903daa288e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5nBRCRBK7hj4Ov3rIwAAGGYIAEtT7G3AiWw0vGaBa1XIwEI1\nyn/fs1RKOVZPC0skikBOq52TzyD8tbaIydfTTewo75MGrtnqhFNVTHmPOFnc5y4B\nglblEFpVr0LXSgo19lltHubjbAYsgDhn4S9CTvsDp3GztshI6ieUj1vUc/rWUBp6\n6e7jmqMyaxvGnrt+s+bJ8sniKnvkggzNj+Cq9b/vk2aORrk1k6o6oBKb9HyKmVjw\nA9SjJcWqA0FWWZLs9XC5oNpajpk+ZPfTBGvxbxlJCrBj4kedem3lWSqklnl0i2oH\nbRDo19IFjl5khS0KpCDinLi1Ah2atUJEjOSUNawo8RRd+ENrHVLE1bqXJjUjOTQ=\n=LK3s\n-----END PGP SIGNATURE-----\n", "payload": "tree 049e0dd0d9cd50ebbe79cc331d1d897945886e8c\nparent 403c1b3802b3e3fd6fe6fecf835dbefa07fed2d7\nparent 1390220ff25d61a36795eacdab3ea104dac6d957\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659269201 +0530\ncommitter GitHub <noreply@github.com> 1659269201 +0530\n\nRollup merge of #99741 - compiler-errors:copy-impl-impl-generics, r=fee1-dead\n\nUse `impl`'s generics when suggesting fix on bad `impl Copy`\n\nSee the UI test for a more complicated example, but we weren't correctly suggesting to add bounds given a manual `impl` whose generics didn't match the struct generics.\n\n```rust\n#[derive(Clone)]\nstruct Wrapper<T>(T);\n\nimpl<S> Copy for Wrapper<S> {}\n```\n\nCoincidentally this fix didn't cause any regressions for `derive(Copy)` impls, I think because those use the same spans in the impl generics as the struct generics, so the machinery still applies the same change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c14bc3b550b30353a1031334739bf903daa288e", "html_url": "https://github.com/rust-lang/rust/commit/2c14bc3b550b30353a1031334739bf903daa288e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c14bc3b550b30353a1031334739bf903daa288e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "403c1b3802b3e3fd6fe6fecf835dbefa07fed2d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/403c1b3802b3e3fd6fe6fecf835dbefa07fed2d7", "html_url": "https://github.com/rust-lang/rust/commit/403c1b3802b3e3fd6fe6fecf835dbefa07fed2d7"}, {"sha": "1390220ff25d61a36795eacdab3ea104dac6d957", "url": "https://api.github.com/repos/rust-lang/rust/commits/1390220ff25d61a36795eacdab3ea104dac6d957", "html_url": "https://github.com/rust-lang/rust/commit/1390220ff25d61a36795eacdab3ea104dac6d957"}], "stats": {"total": 121, "additions": 103, "deletions": 18}, "files": [{"sha": "c23cbd71723a060194add68f932c104ba3fb8975", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2c14bc3b550b30353a1031334739bf903daa288e/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c14bc3b550b30353a1031334739bf903daa288e/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=2c14bc3b550b30353a1031334739bf903daa288e", "patch": "@@ -94,14 +94,6 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n \n             // We'll try to suggest constraining type parameters to fulfill the requirements of\n             // their `Copy` implementation.\n-            let mut generics = None;\n-            if let ty::Adt(def, _substs) = self_type.kind() {\n-                let self_def_id = def.did();\n-                if let Some(local) = self_def_id.as_local() {\n-                    let self_item = tcx.hir().expect_item(local);\n-                    generics = self_item.kind.generics();\n-                }\n-            }\n             let mut errors: BTreeMap<_, Vec<_>> = Default::default();\n             let mut bounds = vec![];\n \n@@ -163,16 +155,14 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                     &format!(\"the `Copy` impl for `{}` requires that `{}`\", ty, error_predicate),\n                 );\n             }\n-            if let Some(generics) = generics {\n-                suggest_constraining_type_params(\n-                    tcx,\n-                    generics,\n-                    &mut err,\n-                    bounds.iter().map(|(param, constraint, def_id)| {\n-                        (param.as_str(), constraint.as_str(), *def_id)\n-                    }),\n-                );\n-            }\n+            suggest_constraining_type_params(\n+                tcx,\n+                tcx.hir().get_generics(impl_did).expect(\"impls always have generics\"),\n+                &mut err,\n+                bounds.iter().map(|(param, constraint, def_id)| {\n+                    (param.as_str(), constraint.as_str(), *def_id)\n+                }),\n+            );\n             err.emit();\n         }\n         Err(CopyImplementationError::NotAnAdt) => {"}, {"sha": "691e7553a0952ef5e1bf8807ffb975130d0056ca", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl-2.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.fixed?ref=2c14bc3b550b30353a1031334739bf903daa288e", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Wrapper<T>(T);\n+\n+struct OnlyCopyIfDisplay<T>(std::marker::PhantomData<T>);\n+\n+impl<T: std::fmt::Display> Clone for OnlyCopyIfDisplay<T> {\n+    fn clone(&self) -> Self {\n+        OnlyCopyIfDisplay(std::marker::PhantomData)\n+    }\n+}\n+\n+impl<T: std::fmt::Display> Copy for OnlyCopyIfDisplay<T> {}\n+\n+impl<S: std::fmt::Display> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}"}, {"sha": "e3185e7eff8551677d1da311b70b6c7a9f311544", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.rs?ref=2c14bc3b550b30353a1031334739bf903daa288e", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Wrapper<T>(T);\n+\n+struct OnlyCopyIfDisplay<T>(std::marker::PhantomData<T>);\n+\n+impl<T: std::fmt::Display> Clone for OnlyCopyIfDisplay<T> {\n+    fn clone(&self) -> Self {\n+        OnlyCopyIfDisplay(std::marker::PhantomData)\n+    }\n+}\n+\n+impl<T: std::fmt::Display> Copy for OnlyCopyIfDisplay<T> {}\n+\n+impl<S> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}"}, {"sha": "e0f405eedfa6947009c26f4000e653b4eaf22225", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl-2.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl-2.stderr?ref=2c14bc3b550b30353a1031334739bf903daa288e", "patch": "@@ -0,0 +1,22 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/missing-bound-in-manual-copy-impl-2.rs:16:9\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                   - this field does not implement `Copy`\n+...\n+LL | impl<S> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n+   |         ^^^^\n+   |\n+note: the `Copy` impl for `OnlyCopyIfDisplay<S>` requires that `S: std::fmt::Display`\n+  --> $DIR/missing-bound-in-manual-copy-impl-2.rs:4:19\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                   ^\n+help: consider restricting type parameter `S`\n+   |\n+LL | impl<S: std::fmt::Display> Copy for Wrapper<OnlyCopyIfDisplay<S>> {}\n+   |       +++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}, {"sha": "32a7215c5bdc3ef0ecaff5f10762ce8e420f8024", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl.fixed", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.fixed?ref=2c14bc3b550b30353a1031334739bf903daa288e", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Wrapper<T>(T);\n+\n+impl<S: Copy> Copy for Wrapper<S> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}"}, {"sha": "c688f4d41ee9b3ee232d4d26848f7df8f0abac04", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.rs?ref=2c14bc3b550b30353a1031334739bf903daa288e", "patch": "@@ -0,0 +1,9 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Wrapper<T>(T);\n+\n+impl<S> Copy for Wrapper<S> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}"}, {"sha": "218988511dbc34f98a45130334f013b95f31eb29", "filename": "src/test/ui/suggestions/missing-bound-in-manual-copy-impl.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2c14bc3b550b30353a1031334739bf903daa288e/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-bound-in-manual-copy-impl.stderr?ref=2c14bc3b550b30353a1031334739bf903daa288e", "patch": "@@ -0,0 +1,17 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/missing-bound-in-manual-copy-impl.rs:6:9\n+   |\n+LL | struct Wrapper<T>(T);\n+   |                   - this field does not implement `Copy`\n+LL |\n+LL | impl<S> Copy for Wrapper<S> {}\n+   |         ^^^^\n+   |\n+help: consider restricting type parameter `S`\n+   |\n+LL | impl<S: Copy> Copy for Wrapper<S> {}\n+   |       ++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}]}