{"sha": "34a63d336419e80d3afec16c730d1ad5fa11dc73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YTYzZDMzNjQxOWU4MGQzYWZlYzE2YzczMGQxYWQ1ZmExMWRjNzM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T23:41:13Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T23:41:13Z"}, "message": "rollup merge of #20656: japaric/at-clean", "tree": {"sha": "72d2aab377cb107ed926e7c35a87a5a1f6401b67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d2aab377cb107ed926e7c35a87a5a1f6401b67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34a63d336419e80d3afec16c730d1ad5fa11dc73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34a63d336419e80d3afec16c730d1ad5fa11dc73", "html_url": "https://github.com/rust-lang/rust/commit/34a63d336419e80d3afec16c730d1ad5fa11dc73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34a63d336419e80d3afec16c730d1ad5fa11dc73/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7840499a7571f467e50895b9cc86627b823c739d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7840499a7571f467e50895b9cc86627b823c739d", "html_url": "https://github.com/rust-lang/rust/commit/7840499a7571f467e50895b9cc86627b823c739d"}, {"sha": "ec133fed409d41569485a689fe07c6da035000bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec133fed409d41569485a689fe07c6da035000bd", "html_url": "https://github.com/rust-lang/rust/commit/ec133fed409d41569485a689fe07c6da035000bd"}], "stats": {"total": 171, "additions": 84, "deletions": 87}, "files": [{"sha": "a34008d0e934a66237889775fc4286ec84d8ea29", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=34a63d336419e80d3afec16c730d1ad5fa11dc73", "patch": "@@ -933,7 +933,7 @@ enum StackOp<T> {\n }\n \n impl<K, V, E, T> Iterator for AbsIter<T> where\n-    T: DoubleEndedIterator + Iterator<Item=TraversalItem<K, V, E>> + Traverse<E>,\n+    T: DoubleEndedIterator<Item=TraversalItem<K, V, E>> + Traverse<E>,\n {\n     type Item = (K, V);\n \n@@ -1002,7 +1002,7 @@ impl<K, V, E, T> Iterator for AbsIter<T> where\n }\n \n impl<K, V, E, T> DoubleEndedIterator for AbsIter<T> where\n-    T: DoubleEndedIterator + Iterator<Item=TraversalItem<K, V, E>> + Traverse<E>,\n+    T: DoubleEndedIterator<Item=TraversalItem<K, V, E>> + Traverse<E>,\n {\n     // next_back is totally symmetric to next\n     fn next_back(&mut self) -> Option<(K, V)> {"}, {"sha": "d30cfc405a1fface3eba57e663748b2f505869e4", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 75, "deletions": 78, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=34a63d336419e80d3afec16c730d1ad5fa11dc73", "patch": "@@ -142,7 +142,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn last(mut self) -> Option< <Self as Iterator>::Item> {\n+    fn last(mut self) -> Option<Self::Item> {\n         let mut last = None;\n         for x in self { last = Some(x); }\n         last\n@@ -161,7 +161,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn nth(&mut self, mut n: uint) -> Option< <Self as Iterator>::Item> {\n+    fn nth(&mut self, mut n: uint) -> Option<Self::Item> {\n         for x in *self {\n             if n == 0 { return Some(x) }\n             n -= 1;\n@@ -186,7 +186,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable]\n     fn chain<U>(self, other: U) -> Chain<Self, U> where\n-        U: Iterator<Item=<Self as Iterator>::Item>,\n+        U: Iterator<Item=Self::Item>,\n     {\n         Chain{a: self, b: other, flag: false}\n     }\n@@ -228,8 +228,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn map<B, F>(self, f: F) -> Map< <Self as Iterator>::Item, B, Self, F> where\n-        F: FnMut(<Self as Iterator>::Item) -> B,\n+    fn map<B, F>(self, f: F) -> Map<Self::Item, B, Self, F> where\n+        F: FnMut(Self::Item) -> B,\n     {\n         Map{iter: self, f: f}\n     }\n@@ -248,8 +248,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn filter<P>(self, predicate: P) -> Filter< <Self as Iterator>::Item, Self, P> where\n-        P: FnMut(&<Self as Iterator>::Item) -> bool,\n+    fn filter<P>(self, predicate: P) -> Filter<Self::Item, Self, P> where\n+        P: FnMut(&Self::Item) -> bool,\n     {\n         Filter{iter: self, predicate: predicate}\n     }\n@@ -268,8 +268,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn filter_map<B, F>(self, f: F) -> FilterMap< <Self as Iterator>::Item, B, Self, F> where\n-        F: FnMut(<Self as Iterator>::Item) -> Option<B>,\n+    fn filter_map<B, F>(self, f: F) -> FilterMap<Self::Item, B, Self, F> where\n+        F: FnMut(Self::Item) -> Option<B>,\n     {\n         FilterMap { iter: self, f: f }\n     }\n@@ -312,7 +312,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn peekable(self) -> Peekable< <Self as Iterator>::Item, Self> {\n+    fn peekable(self) -> Peekable<Self::Item, Self> {\n         Peekable{iter: self, peeked: None}\n     }\n \n@@ -332,8 +332,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn skip_while<P>(self, predicate: P) -> SkipWhile< <Self as Iterator>::Item, Self, P> where\n-        P: FnMut(&<Self as Iterator>::Item) -> bool,\n+    fn skip_while<P>(self, predicate: P) -> SkipWhile<Self::Item, Self, P> where\n+        P: FnMut(&Self::Item) -> bool,\n     {\n         SkipWhile{iter: self, flag: false, predicate: predicate}\n     }\n@@ -353,8 +353,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn take_while<P>(self, predicate: P) -> TakeWhile< <Self as Iterator>::Item, Self, P> where\n-        P: FnMut(&<Self as Iterator>::Item) -> bool,\n+    fn take_while<P>(self, predicate: P) -> TakeWhile<Self::Item, Self, P> where\n+        P: FnMut(&Self::Item) -> bool,\n     {\n         TakeWhile{iter: self, flag: false, predicate: predicate}\n     }\n@@ -422,8 +422,8 @@ pub trait IteratorExt: Iterator + Sized {\n         self,\n         initial_state: St,\n         f: F,\n-    ) -> Scan< <Self as Iterator>::Item, B, Self, St, F> where\n-        F: FnMut(&mut St, <Self as Iterator>::Item) -> Option<B>,\n+    ) -> Scan<Self::Item, B, Self, St, F> where\n+        F: FnMut(&mut St, Self::Item) -> Option<B>,\n     {\n         Scan{iter: self, f: f, state: initial_state}\n     }\n@@ -448,9 +448,9 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn flat_map<B, U, F>(self, f: F) -> FlatMap< <Self as Iterator>::Item, B, Self, U, F> where\n+    fn flat_map<B, U, F>(self, f: F) -> FlatMap<Self::Item, B, Self, U, F> where\n         U: Iterator<Item=B>,\n-        F: FnMut(<Self as Iterator>::Item) -> U,\n+        F: FnMut(Self::Item) -> U,\n     {\n         FlatMap{iter: self, f: f, frontiter: None, backiter: None }\n     }\n@@ -508,8 +508,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn inspect<F>(self, f: F) -> Inspect< <Self as Iterator>::Item, Self, F> where\n-        F: FnMut(&<Self as Iterator>::Item),\n+    fn inspect<F>(self, f: F) -> Inspect<Self::Item, Self, F> where\n+        F: FnMut(&Self::Item),\n     {\n         Inspect{iter: self, f: f}\n     }\n@@ -546,7 +546,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn collect<B: FromIterator< <Self as Iterator>::Item>>(self) -> B {\n+    fn collect<B: FromIterator<Self::Item>>(self) -> B {\n         FromIterator::from_iter(self)\n     }\n \n@@ -563,8 +563,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[unstable = \"recently added as part of collections reform\"]\n     fn partition<B, F>(mut self, mut f: F) -> (B, B) where\n-        B: Default + Extend< <Self as Iterator>::Item>,\n-        F: FnMut(&<Self as Iterator>::Item) -> bool\n+        B: Default + Extend<Self::Item>,\n+        F: FnMut(&Self::Item) -> bool\n     {\n         let mut left: B = Default::default();\n         let mut right: B = Default::default();\n@@ -592,7 +592,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable]\n     fn fold<B, F>(mut self, init: B, mut f: F) -> B where\n-        F: FnMut(B, <Self as Iterator>::Item) -> B,\n+        F: FnMut(B, Self::Item) -> B,\n     {\n         let mut accum = init;\n         for x in self {\n@@ -612,7 +612,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn all<F>(mut self, mut f: F) -> bool where F: FnMut(<Self as Iterator>::Item) -> bool {\n+    fn all<F>(mut self, mut f: F) -> bool where F: FnMut(Self::Item) -> bool {\n         for x in self { if !f(x) { return false; } }\n         true\n     }\n@@ -630,7 +630,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn any<F>(&mut self, mut f: F) -> bool where F: FnMut(<Self as Iterator>::Item) -> bool {\n+    fn any<F>(&mut self, mut f: F) -> bool where F: FnMut(Self::Item) -> bool {\n         for x in *self { if f(x) { return true; } }\n         false\n     }\n@@ -640,8 +640,8 @@ pub trait IteratorExt: Iterator + Sized {\n     /// Does not consume the iterator past the first found element.\n     #[inline]\n     #[stable]\n-    fn find<P>(&mut self, mut predicate: P) -> Option< <Self as Iterator>::Item> where\n-        P: FnMut(&<Self as Iterator>::Item) -> bool,\n+    fn find<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n+        P: FnMut(&Self::Item) -> bool,\n     {\n         for x in *self {\n             if predicate(&x) { return Some(x) }\n@@ -653,7 +653,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable]\n     fn position<P>(&mut self, mut predicate: P) -> Option<uint> where\n-        P: FnMut(<Self as Iterator>::Item) -> bool,\n+        P: FnMut(Self::Item) -> bool,\n     {\n         let mut i = 0;\n         for x in *self {\n@@ -671,7 +671,7 @@ pub trait IteratorExt: Iterator + Sized {\n     #[inline]\n     #[stable]\n     fn rposition<P>(&mut self, mut predicate: P) -> Option<uint> where\n-        P: FnMut(<Self as Iterator>::Item) -> bool,\n+        P: FnMut(Self::Item) -> bool,\n         Self: ExactSizeIterator + DoubleEndedIterator\n     {\n         let len = self.len();\n@@ -693,8 +693,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn max(self) -> Option< <Self as Iterator>::Item> where\n-        <Self as Iterator>::Item: Ord\n+    fn max(self) -> Option<Self::Item> where Self::Item: Ord\n     {\n         self.fold(None, |max, x| {\n             match max {\n@@ -714,8 +713,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable]\n-    fn min(self) -> Option< <Self as Iterator>::Item> where\n-        <Self as Iterator>::Item: Ord\n+    fn min(self) -> Option<Self::Item> where Self::Item: Ord\n     {\n         self.fold(None, |min, x| {\n             match min {\n@@ -759,8 +757,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// assert!(v.iter().min_max() == MinMax(&1, &1));\n     /// ```\n     #[unstable = \"return type may change\"]\n-    fn min_max(mut self) -> MinMaxResult< <Self as Iterator>::Item> where\n-        <Self as Iterator>::Item: Ord\n+    fn min_max(mut self) -> MinMaxResult<Self::Item> where Self::Item: Ord\n     {\n         let (mut min, mut max) = match self.next() {\n             None => return NoElements,\n@@ -817,10 +814,10 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[unstable = \"may want to produce an Ordering directly; see #15311\"]\n-    fn max_by<B: Ord, F>(self, mut f: F) -> Option< <Self as Iterator>::Item> where\n-        F: FnMut(&<Self as Iterator>::Item) -> B,\n+    fn max_by<B: Ord, F>(self, mut f: F) -> Option<Self::Item> where\n+        F: FnMut(&Self::Item) -> B,\n     {\n-        self.fold(None, |max: Option<(<Self as Iterator>::Item, B)>, x| {\n+        self.fold(None, |max: Option<(Self::Item, B)>, x| {\n             let x_val = f(&x);\n             match max {\n                 None             => Some((x, x_val)),\n@@ -846,10 +843,10 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[unstable = \"may want to produce an Ordering directly; see #15311\"]\n-    fn min_by<B: Ord, F>(self, mut f: F) -> Option< <Self as Iterator>::Item> where\n-        F: FnMut(&<Self as Iterator>::Item) -> B,\n+    fn min_by<B: Ord, F>(self, mut f: F) -> Option<Self::Item> where\n+        F: FnMut(&Self::Item) -> B,\n     {\n-        self.fold(None, |min: Option<(<Self as Iterator>::Item, B)>, x| {\n+        self.fold(None, |min: Option<(Self::Item, B)>, x| {\n             let x_val = f(&x);\n             match min {\n                 None             => Some((x, x_val)),\n@@ -968,7 +965,7 @@ impl<I> IteratorExt for I where I: Iterator {}\n #[stable]\n pub trait DoubleEndedIterator: Iterator {\n     /// Yield an element from the end of the range, returning `None` if the range is empty.\n-    fn next_back(&mut self) -> Option< <Self as Iterator>::Item>;\n+    fn next_back(&mut self) -> Option<Self::Item>;\n }\n \n /// An object implementing random access indexing by `uint`\n@@ -984,7 +981,7 @@ pub trait RandomAccessIterator: Iterator {\n     fn indexable(&self) -> uint;\n \n     /// Return an element at an index, or `None` if the index is out of bounds\n-    fn idx(&mut self, index: uint) -> Option< <Self as Iterator>::Item>;\n+    fn idx(&mut self, index: uint) -> Option<Self::Item>;\n }\n \n /// An iterator that knows its exact length\n@@ -1015,14 +1012,14 @@ pub trait ExactSizeIterator: Iterator {\n impl<I> ExactSizeIterator for Enumerate<I> where I: ExactSizeIterator {}\n #[stable]\n impl<A, I, F> ExactSizeIterator for Inspect<A, I, F> where\n-    I: ExactSizeIterator + Iterator<Item=A>,\n+    I: ExactSizeIterator<Item=A>,\n     F: FnMut(&A),\n {}\n #[stable]\n impl<I> ExactSizeIterator for Rev<I> where I: ExactSizeIterator + DoubleEndedIterator {}\n #[stable]\n impl<A, B, I, F> ExactSizeIterator for Map<A, B, I, F> where\n-    I: ExactSizeIterator + Iterator<Item=A>,\n+    I: ExactSizeIterator<Item=A>,\n     F: FnMut(A) -> B,\n {}\n #[stable]\n@@ -1041,23 +1038,23 @@ impl<I> Iterator for Rev<I> where I: DoubleEndedIterator {\n     type Item = <I as Iterator>::Item;\n \n     #[inline]\n-    fn next(&mut self) -> Option< <I as Iterator>::Item> { self.iter.next_back() }\n+    fn next(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next_back() }\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n #[stable]\n impl<I> DoubleEndedIterator for Rev<I> where I: DoubleEndedIterator {\n     #[inline]\n-    fn next_back(&mut self) -> Option< <I as Iterator>::Item> { self.iter.next() }\n+    fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n }\n \n #[experimental = \"trait is experimental\"]\n impl<I> RandomAccessIterator for Rev<I> where I: DoubleEndedIterator + RandomAccessIterator {\n     #[inline]\n     fn indexable(&self) -> uint { self.iter.indexable() }\n     #[inline]\n-    fn idx(&mut self, index: uint) -> Option< <I as Iterator>::Item> {\n+    fn idx(&mut self, index: uint) -> Option<<I as Iterator>::Item> {\n         let amt = self.indexable();\n         self.iter.idx(amt - index - 1)\n     }\n@@ -1075,15 +1072,15 @@ impl<'a, I> Iterator for ByRef<'a, I> where I: 'a + Iterator {\n     type Item = <I as Iterator>::Item;\n \n     #[inline]\n-    fn next(&mut self) -> Option< <I as Iterator>::Item> { self.iter.next() }\n+    fn next(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next() }\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n #[stable]\n impl<'a, I> DoubleEndedIterator for ByRef<'a, I> where I: 'a + DoubleEndedIterator {\n     #[inline]\n-    fn next_back(&mut self) -> Option< <I as Iterator>::Item> { self.iter.next_back() }\n+    fn next_back(&mut self) -> Option<<I as Iterator>::Item> { self.iter.next_back() }\n }\n \n /// A trait for iterators over elements which can be added together\n@@ -1244,7 +1241,7 @@ impl<T, D, I> Iterator for Cloned<I> where\n impl<T, D, I> DoubleEndedIterator for Cloned<I> where\n     T: Clone,\n     D: Deref<Target=T>,\n-    I: DoubleEndedIterator + Iterator<Item=D>,\n+    I: DoubleEndedIterator<Item=D>,\n {\n     fn next_back(&mut self) -> Option<T> {\n         self.it.next_back().cloned()\n@@ -1255,7 +1252,7 @@ impl<T, D, I> DoubleEndedIterator for Cloned<I> where\n impl<T, D, I> ExactSizeIterator for Cloned<I> where\n     T: Clone,\n     D: Deref<Target=T>,\n-    I: ExactSizeIterator + Iterator<Item=D>,\n+    I: ExactSizeIterator<Item=D>,\n {}\n \n /// An iterator that repeats endlessly\n@@ -1272,7 +1269,7 @@ impl<I> Iterator for Cycle<I> where I: Clone + Iterator {\n     type Item = <I as Iterator>::Item;\n \n     #[inline]\n-    fn next(&mut self) -> Option< <I as Iterator>::Item> {\n+    fn next(&mut self) -> Option<<I as Iterator>::Item> {\n         match self.iter.next() {\n             None => { self.iter = self.orig.clone(); self.iter.next() }\n             y => y\n@@ -1304,7 +1301,7 @@ impl<I> RandomAccessIterator for Cycle<I> where\n     }\n \n     #[inline]\n-    fn idx(&mut self, index: uint) -> Option< <I as Iterator>::Item> {\n+    fn idx(&mut self, index: uint) -> Option<<I as Iterator>::Item> {\n         let liter = self.iter.indexable();\n         let lorig = self.orig.indexable();\n         if lorig == 0 {\n@@ -1363,8 +1360,8 @@ impl<T, A, B> Iterator for Chain<A, B> where A: Iterator<Item=T>, B: Iterator<It\n \n #[stable]\n impl<T, A, B> DoubleEndedIterator for Chain<A, B> where\n-    A: DoubleEndedIterator + Iterator<Item=T>,\n-    B: DoubleEndedIterator + Iterator<Item=T>,\n+    A: DoubleEndedIterator<Item=T>,\n+    B: DoubleEndedIterator<Item=T>,\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<T> {\n@@ -1377,8 +1374,8 @@ impl<T, A, B> DoubleEndedIterator for Chain<A, B> where\n \n #[experimental = \"trait is experimental\"]\n impl<T, A, B> RandomAccessIterator for Chain<A, B> where\n-    A: RandomAccessIterator + Iterator<Item=T>,\n-    B: RandomAccessIterator + Iterator<Item=T>,\n+    A: RandomAccessIterator<Item=T>,\n+    B: RandomAccessIterator<Item=T>,\n {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1444,8 +1441,8 @@ impl<T, U, A, B> Iterator for Zip<A, B> where\n \n #[stable]\n impl<T, U, A, B> DoubleEndedIterator for Zip<A, B> where\n-    A: ExactSizeIterator + Iterator<Item=T> + DoubleEndedIterator,\n-    B: ExactSizeIterator + Iterator<Item=U> + DoubleEndedIterator,\n+    A: DoubleEndedIterator + ExactSizeIterator<Item=T>,\n+    B: DoubleEndedIterator + ExactSizeIterator<Item=U>,\n {\n     #[inline]\n     fn next_back(&mut self) -> Option<(T, U)> {\n@@ -1469,8 +1466,8 @@ impl<T, U, A, B> DoubleEndedIterator for Zip<A, B> where\n \n #[experimental = \"trait is experimental\"]\n impl<T, U, A, B> RandomAccessIterator for Zip<A, B> where\n-    A: RandomAccessIterator + Iterator<Item=T>,\n-    B: RandomAccessIterator + Iterator<Item=U>,\n+    A: RandomAccessIterator<Item=T>,\n+    B: RandomAccessIterator<Item=U>,\n {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1539,7 +1536,7 @@ impl<A, B, I, F> Iterator for Map<A, B, I, F> where I: Iterator<Item=A>, F: FnMu\n \n #[stable]\n impl<A, B, I, F> DoubleEndedIterator for Map<A, B, I, F> where\n-    I: DoubleEndedIterator + Iterator<Item=A>,\n+    I: DoubleEndedIterator<Item=A>,\n     F: FnMut(A) -> B,\n {\n     #[inline]\n@@ -1551,7 +1548,7 @@ impl<A, B, I, F> DoubleEndedIterator for Map<A, B, I, F> where\n \n #[experimental = \"trait is experimental\"]\n impl<A, B, I, F> RandomAccessIterator for Map<A, B, I, F> where\n-    I: RandomAccessIterator + Iterator<Item=A>,\n+    I: RandomAccessIterator<Item=A>,\n     F: FnMut(A) -> B,\n {\n     #[inline]\n@@ -1613,7 +1610,7 @@ impl<A, I, P> Iterator for Filter<A, I, P> where I: Iterator<Item=A>, P: FnMut(&\n \n #[stable]\n impl<A, I, P> DoubleEndedIterator for Filter<A, I, P> where\n-    I: DoubleEndedIterator + Iterator<Item=A>,\n+    I: DoubleEndedIterator<Item=A>,\n     P: FnMut(&A) -> bool,\n {\n     #[inline]\n@@ -1676,7 +1673,7 @@ impl<A, B, I, F> Iterator for FilterMap<A, B, I, F> where\n \n #[stable]\n impl<A, B, I, F> DoubleEndedIterator for FilterMap<A, B, I, F> where\n-    I: DoubleEndedIterator + Iterator<Item=A>,\n+    I: DoubleEndedIterator<Item=A>,\n     F: FnMut(A) -> Option<B>,\n {\n     #[inline]\n@@ -1925,7 +1922,7 @@ impl<I> Iterator for Skip<I> where I: Iterator {\n     type Item = <I as Iterator>::Item;\n \n     #[inline]\n-    fn next(&mut self) -> Option< <I as Iterator>::Item> {\n+    fn next(&mut self) -> Option<<I as Iterator>::Item> {\n         let mut next = self.iter.next();\n         if self.n == 0 {\n             next\n@@ -1972,7 +1969,7 @@ impl<I> RandomAccessIterator for Skip<I> where I: RandomAccessIterator{\n     }\n \n     #[inline]\n-    fn idx(&mut self, index: uint) -> Option< <I as Iterator>::Item> {\n+    fn idx(&mut self, index: uint) -> Option<<I as Iterator>::Item> {\n         if index >= self.indexable() {\n             None\n         } else {\n@@ -1995,7 +1992,7 @@ impl<I> Iterator for Take<I> where I: Iterator{\n     type Item = <I as Iterator>::Item;\n \n     #[inline]\n-    fn next(&mut self) -> Option< <I as Iterator>::Item> {\n+    fn next(&mut self) -> Option<<I as Iterator>::Item> {\n         if self.n != 0 {\n             self.n -= 1;\n             self.iter.next()\n@@ -2027,7 +2024,7 @@ impl<I> RandomAccessIterator for Take<I> where I: RandomAccessIterator{\n     }\n \n     #[inline]\n-    fn idx(&mut self, index: uint) -> Option< <I as Iterator>::Item> {\n+    fn idx(&mut self, index: uint) -> Option<<I as Iterator>::Item> {\n         if index >= self.n {\n             None\n         } else {\n@@ -2153,8 +2150,8 @@ impl<A, B, I, U, F> Iterator for FlatMap<A, B, I, U, F> where\n \n #[stable]\n impl<A, B, I, U, F> DoubleEndedIterator for FlatMap<A, B, I, U, F> where\n-    I: DoubleEndedIterator + Iterator<Item=A>,\n-    U: DoubleEndedIterator + Iterator<Item=B>,\n+    I: DoubleEndedIterator<Item=A>,\n+    U: DoubleEndedIterator<Item=B>,\n     F: FnMut(A) -> U,\n {\n     #[inline]\n@@ -2189,7 +2186,7 @@ impl<I> Iterator for Fuse<I> where I: Iterator {\n     type Item = <I as Iterator>::Item;\n \n     #[inline]\n-    fn next(&mut self) -> Option< <I as Iterator>::Item> {\n+    fn next(&mut self) -> Option<<I as Iterator>::Item> {\n         if self.done {\n             None\n         } else {\n@@ -2216,7 +2213,7 @@ impl<I> Iterator for Fuse<I> where I: Iterator {\n #[stable]\n impl<I> DoubleEndedIterator for Fuse<I> where I: DoubleEndedIterator {\n     #[inline]\n-    fn next_back(&mut self) -> Option< <I as Iterator>::Item> {\n+    fn next_back(&mut self) -> Option<<I as Iterator>::Item> {\n         if self.done {\n             None\n         } else {\n@@ -2240,7 +2237,7 @@ impl<I> RandomAccessIterator for Fuse<I> where I: RandomAccessIterator {\n     }\n \n     #[inline]\n-    fn idx(&mut self, index: uint) -> Option< <I as Iterator>::Item> {\n+    fn idx(&mut self, index: uint) -> Option<<I as Iterator>::Item> {\n         self.iter.idx(index)\n     }\n }\n@@ -2308,7 +2305,7 @@ impl<A, I, F> Iterator for Inspect<A, I, F> where I: Iterator<Item=A>, F: FnMut(\n \n #[stable]\n impl<A, I, F> DoubleEndedIterator for Inspect<A, I, F> where\n-    I: DoubleEndedIterator + Iterator<Item=A>,\n+    I: DoubleEndedIterator<Item=A>,\n     F: FnMut(&A),\n {\n     #[inline]\n@@ -2320,7 +2317,7 @@ impl<A, I, F> DoubleEndedIterator for Inspect<A, I, F> where\n \n #[experimental = \"trait is experimental\"]\n impl<A, I, F> RandomAccessIterator for Inspect<A, I, F> where\n-    I: RandomAccessIterator + Iterator<Item=A>,\n+    I: RandomAccessIterator<Item=A>,\n     F: FnMut(&A),\n {\n     #[inline]"}, {"sha": "5500d41e8204224f7f4c5a080b2d846a5020243a", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=34a63d336419e80d3afec16c730d1ad5fa11dc73", "patch": "@@ -1033,7 +1033,7 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n pub trait DerefMut: Deref {\n     /// The method called to mutably dereference a value\n     #[stable]\n-    fn deref_mut<'a>(&'a mut self) -> &'a mut <Self as Deref>::Target;\n+    fn deref_mut<'a>(&'a mut self) -> &'a mut Self::Target;\n }\n \n #[stable]"}, {"sha": "7fb08ceb61024e603d43b1a8f7a1fd5eb388d486", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=34a63d336419e80d3afec16c730d1ad5fa11dc73", "patch": "@@ -937,7 +937,7 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {}\n trait SplitIter: DoubleEndedIterator {\n     /// Mark the underlying iterator as complete, extracting the remaining\n     /// portion of the slice.\n-    fn finish(&mut self) -> Option< <Self as Iterator>::Item>;\n+    fn finish(&mut self) -> Option<Self::Item>;\n }\n \n /// An iterator over subslices separated by elements that match a predicate\n@@ -1102,7 +1102,7 @@ struct GenericSplitN<I> {\n     invert: bool\n }\n \n-impl<T, I: SplitIter + Iterator<Item=T>> Iterator for GenericSplitN<I> {\n+impl<T, I: SplitIter<Item=T>> Iterator for GenericSplitN<I> {\n     type Item = T;\n \n     #[inline]"}, {"sha": "d80a14422e940328aec7c0d0fcc1e4adb6057458", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34a63d336419e80d3afec16c730d1ad5fa11dc73/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=34a63d336419e80d3afec16c730d1ad5fa11dc73", "patch": "@@ -610,8 +610,8 @@ impl<T:Decodable+Send+Sync> Decodable for Arc<T> {\n \n pub trait EncoderHelpers: Encoder {\n     fn emit_from_vec<T, F>(&mut self, v: &[T], f: F)\n-                           -> Result<(), <Self as Encoder>::Error>\n-        where F: FnMut(&mut Self, &T) -> Result<(), <Self as Encoder>::Error>;\n+                           -> Result<(), Self::Error>\n+        where F: FnMut(&mut Self, &T) -> Result<(), Self::Error>;\n }\n \n impl<S:Encoder> EncoderHelpers for S {\n@@ -631,8 +631,8 @@ impl<S:Encoder> EncoderHelpers for S {\n \n pub trait DecoderHelpers: Decoder {\n     fn read_to_vec<T, F>(&mut self, f: F)\n-                         -> Result<Vec<T>, <Self as Decoder>::Error> where\n-        F: FnMut(&mut Self) -> Result<T, <Self as Decoder>::Error>;\n+                         -> Result<Vec<T>, Self::Error> where\n+        F: FnMut(&mut Self) -> Result<T, Self::Error>;\n }\n \n impl<D: Decoder> DecoderHelpers for D {"}]}