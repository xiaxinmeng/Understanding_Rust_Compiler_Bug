{"sha": "056951d6289e3fbba444cbadec8b4eea7f92928e", "node_id": "C_kwDOAAsO6NoAKDA1Njk1MWQ2Mjg5ZTNmYmJhNDQ0Y2JhZGVjOGI0ZWVhN2Y5MjkyOGU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-20T17:26:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-20T19:36:08Z"}, "message": "Take &mut Diagnostic in emit_diagnostic.\n\nTaking a Diagnostic by move would break the usual pattern\n`diag.label(..).emit()`.", "tree": {"sha": "a346f55814756096537d9572dabbc264b02309ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a346f55814756096537d9572dabbc264b02309ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/056951d6289e3fbba444cbadec8b4eea7f92928e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/056951d6289e3fbba444cbadec8b4eea7f92928e", "html_url": "https://github.com/rust-lang/rust/commit/056951d6289e3fbba444cbadec8b4eea7f92928e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/056951d6289e3fbba444cbadec8b4eea7f92928e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4767ccec935824fa5d08ce3502b233d7a66adec1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4767ccec935824fa5d08ce3502b233d7a66adec1", "html_url": "https://github.com/rust-lang/rust/commit/4767ccec935824fa5d08ce3502b233d7a66adec1"}], "stats": {"total": 84, "additions": 43, "deletions": 41}, "files": [{"sha": "6f78c8160932a60b8715a30176eacac3ed643b41", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -2361,8 +2361,8 @@ mod error {\n             if !self.errors.buffered.is_empty() {\n                 self.errors.buffered.sort_by_key(|diag| diag.sort_span);\n \n-                for diag in self.errors.buffered.drain(..) {\n-                    self.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);\n+                for mut diag in self.errors.buffered.drain(..) {\n+                    self.infcx.tcx.sess.diagnostic().emit_diagnostic(&mut diag);\n                 }\n             }\n "}, {"sha": "1d11e6dfbd25f42f58b23b3f61aebd7517fb628c", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -1748,7 +1748,7 @@ impl SharedEmitterMain {\n                     if let Some(code) = diag.code {\n                         d.code(code);\n                     }\n-                    handler.emit_diagnostic(&d);\n+                    handler.emit_diagnostic(&mut d);\n                 }\n                 Ok(SharedEmitterMessage::InlineAsmError(cookie, msg, level, source)) => {\n                     let msg = msg.strip_prefix(\"error: \").unwrap_or(&msg);"}, {"sha": "223b3ad0cf9ce99a4e75506f69e82d67542b2789", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -255,8 +255,8 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n         // \"secondary\" errors if they occurred.\n         let secondary_errors = mem::take(&mut self.secondary_errors);\n         if self.error_emitted.is_none() {\n-            for error in secondary_errors {\n-                self.tcx.sess.diagnostic().emit_diagnostic(&error);\n+            for mut error in secondary_errors {\n+                self.tcx.sess.diagnostic().emit_diagnostic(&mut error);\n             }\n         } else {\n             assert!(self.tcx.sess.has_errors().is_some());"}, {"sha": "667c63b709b76220e73603686c86ef98c66d66e2", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -1181,8 +1181,8 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n     if !info.payload().is::<rustc_errors::ExplicitBug>() {\n-        let d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n-        handler.emit_diagnostic(&d);\n+        let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n+        handler.emit_diagnostic(&mut d);\n     }\n \n     let mut xs: Vec<Cow<'static, str>> = vec!["}, {"sha": "34236d3603558ae467cd3926037b8146fe110897", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -128,7 +128,7 @@ impl EmissionGuarantee for ErrorGuaranteed {\n             DiagnosticBuilderState::Emittable(handler) => {\n                 db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n \n-                let guar = handler.emit_diagnostic(&db.inner.diagnostic);\n+                let guar = handler.emit_diagnostic(&mut db.inner.diagnostic);\n \n                 // Only allow a guarantee if the `level` wasn't switched to a\n                 // non-error - the field isn't `pub`, but the whole `Diagnostic`\n@@ -190,7 +190,7 @@ impl EmissionGuarantee for () {\n             DiagnosticBuilderState::Emittable(handler) => {\n                 db.inner.state = DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation;\n \n-                handler.emit_diagnostic(&db.inner.diagnostic);\n+                handler.emit_diagnostic(&mut db.inner.diagnostic);\n             }\n             // `.emit()` was previously called, disallowed from repeating it.\n             DiagnosticBuilderState::AlreadyEmittedOrDuringCancellation => {}\n@@ -500,11 +500,11 @@ impl Drop for DiagnosticBuilderInner<'_> {\n             // No `.emit()` or `.cancel()` calls.\n             DiagnosticBuilderState::Emittable(handler) => {\n                 if !panicking() {\n-                    handler.emit_diagnostic(&Diagnostic::new(\n+                    handler.emit_diagnostic(&mut Diagnostic::new(\n                         Level::Bug,\n                         \"the following error was constructed but not emitted\",\n                     ));\n-                    handler.emit_diagnostic(&self.diagnostic);\n+                    handler.emit_diagnostic(&mut self.diagnostic);\n                     panic!();\n                 }\n             }"}, {"sha": "93b7201023a496290c77b74e549e16fc58c45cbc", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -542,7 +542,7 @@ impl Emitter for SilentEmitter {\n             if let Some(ref note) = self.fatal_note {\n                 d.note(note);\n             }\n-            self.fatal_handler.emit_diagnostic(&d);\n+            self.fatal_handler.emit_diagnostic(&mut d);\n         }\n     }\n }"}, {"sha": "7cfb332d69d895403dabb6f94b5e28613a001892", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -919,7 +919,7 @@ impl Handler {\n         self.inner.borrow_mut().force_print_diagnostic(db)\n     }\n \n-    pub fn emit_diagnostic(&self, diagnostic: &Diagnostic) -> Option<ErrorGuaranteed> {\n+    pub fn emit_diagnostic(&self, diagnostic: &mut Diagnostic) -> Option<ErrorGuaranteed> {\n         self.inner.borrow_mut().emit_diagnostic(diagnostic)\n     }\n \n@@ -993,25 +993,25 @@ impl HandlerInner {\n         self.taught_diagnostics.insert(code.clone())\n     }\n \n-    fn force_print_diagnostic(&mut self, db: Diagnostic) {\n-        self.emitter.emit_diagnostic(&db);\n+    fn force_print_diagnostic(&mut self, mut db: Diagnostic) {\n+        self.emitter.emit_diagnostic(&mut db);\n     }\n \n     /// Emit all stashed diagnostics.\n     fn emit_stashed_diagnostics(&mut self) -> Option<ErrorGuaranteed> {\n         let diags = self.stashed_diagnostics.drain(..).map(|x| x.1).collect::<Vec<_>>();\n         let mut reported = None;\n-        diags.iter().for_each(|diag| {\n+        for mut diag in diags {\n             if diag.is_error() {\n                 reported = Some(ErrorGuaranteed(()));\n             }\n-            self.emit_diagnostic(diag);\n-        });\n+            self.emit_diagnostic(&mut diag);\n+        }\n         reported\n     }\n \n     // FIXME(eddyb) this should ideally take `diagnostic` by value.\n-    fn emit_diagnostic(&mut self, diagnostic: &Diagnostic) -> Option<ErrorGuaranteed> {\n+    fn emit_diagnostic(&mut self, diagnostic: &mut Diagnostic) -> Option<ErrorGuaranteed> {\n         if diagnostic.level == Level::DelayedBug {\n             // FIXME(eddyb) this should check for `has_errors` and stop pushing\n             // once *any* errors were emitted (and truncate `delayed_span_bugs`\n@@ -1221,22 +1221,22 @@ impl HandlerInner {\n         let mut diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n         diagnostic.set_span(sp.into());\n         diagnostic.note(&format!(\"delayed at {}\", std::panic::Location::caller()));\n-        self.emit_diagnostic(&diagnostic).unwrap()\n+        self.emit_diagnostic(&mut diagnostic).unwrap()\n     }\n \n     // FIXME(eddyb) note the comment inside `impl Drop for HandlerInner`, that's\n     // where the explanation of what \"good path\" is (also, it should be renamed).\n     fn delay_good_path_bug(&mut self, msg: &str) {\n-        let diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n+        let mut diagnostic = Diagnostic::new(Level::DelayedBug, msg);\n         if self.flags.report_delayed_bugs {\n-            self.emit_diagnostic(&diagnostic);\n+            self.emit_diagnostic(&mut diagnostic);\n         }\n         let backtrace = std::backtrace::Backtrace::force_capture();\n         self.delayed_good_path_bugs.push(DelayedDiagnostic::with_backtrace(diagnostic, backtrace));\n     }\n \n     fn failure(&mut self, msg: &str) {\n-        self.emit_diagnostic(&Diagnostic::new(FailureNote, msg));\n+        self.emit_diagnostic(&mut Diagnostic::new(FailureNote, msg));\n     }\n \n     fn fatal(&mut self, msg: &str) -> FatalError {\n@@ -1253,11 +1253,11 @@ impl HandlerInner {\n         if self.treat_err_as_bug() {\n             self.bug(msg);\n         }\n-        self.emit_diagnostic(&Diagnostic::new(level, msg)).unwrap()\n+        self.emit_diagnostic(&mut Diagnostic::new(level, msg)).unwrap()\n     }\n \n     fn bug(&mut self, msg: &str) -> ! {\n-        self.emit_diagnostic(&Diagnostic::new(Bug, msg));\n+        self.emit_diagnostic(&mut Diagnostic::new(Bug, msg));\n         panic::panic_any(ExplicitBug);\n     }\n \n@@ -1267,7 +1267,7 @@ impl HandlerInner {\n             if no_bugs {\n                 // Put the overall explanation before the `DelayedBug`s, to\n                 // frame them better (e.g. separate warnings from them).\n-                self.emit_diagnostic(&Diagnostic::new(Bug, explanation));\n+                self.emit_diagnostic(&mut Diagnostic::new(Bug, explanation));\n                 no_bugs = false;\n             }\n \n@@ -1283,7 +1283,7 @@ impl HandlerInner {\n             }\n             bug.level = Level::Bug;\n \n-            self.emit_diagnostic(&bug);\n+            self.emit_diagnostic(&mut bug);\n         }\n \n         // Panic with `ExplicitBug` to avoid \"unexpected panic\" messages."}, {"sha": "5bd4bee3adfca58e50c6f7c2bfe036da96303726", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -771,8 +771,8 @@ impl server::Diagnostic for Rustc<'_, '_> {\n     ) {\n         diag.sub(level.to_internal(), msg, MultiSpan::from_spans(spans), None);\n     }\n-    fn emit(&mut self, diag: Self::Diagnostic) {\n-        self.sess().span_diagnostic.emit_diagnostic(&diag);\n+    fn emit(&mut self, mut diag: Self::Diagnostic) {\n+        self.sess().span_diagnostic.emit_diagnostic(&mut diag);\n     }\n }\n "}, {"sha": "0ce86a764f417a1d5843198fb424bc4666859d7f", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -49,8 +49,8 @@ macro_rules! panictry_buffer {\n         match $e {\n             Ok(e) => e,\n             Err(errs) => {\n-                for e in errs {\n-                    $handler.emit_diagnostic(&e);\n+                for mut e in errs {\n+                    $handler.emit_diagnostic(&mut e);\n                 }\n                 FatalError.raise()\n             }\n@@ -167,8 +167,8 @@ fn try_file_to_source_file(\n fn file_to_source_file(sess: &ParseSess, path: &Path, spanopt: Option<Span>) -> Lrc<SourceFile> {\n     match try_file_to_source_file(sess, path, spanopt) {\n         Ok(source_file) => source_file,\n-        Err(d) => {\n-            sess.span_diagnostic.emit_diagnostic(&d);\n+        Err(mut d) => {\n+            sess.span_diagnostic.emit_diagnostic(&mut d);\n             FatalError.raise();\n         }\n     }"}, {"sha": "f7655e55d34859a248871090b0f589857ec27a81", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -784,8 +784,8 @@ impl<K: DepKind> DepGraph<K> {\n \n             let handle = tcx.dep_context().sess().diagnostic();\n \n-            for diagnostic in side_effects.diagnostics {\n-                handle.emit_diagnostic(&diagnostic);\n+            for mut diagnostic in side_effects.diagnostics {\n+                handle.emit_diagnostic(&mut diagnostic);\n             }\n         }\n     }"}, {"sha": "c1cb9a1a8d1394ebdafe272674556f9635628ad2", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -467,8 +467,8 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n         if !errors_buffer.is_empty() {\n             errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n-            for diag in errors_buffer.drain(..) {\n-                self.tcx().sess.diagnostic().emit_diagnostic(&diag);\n+            for mut diag in errors_buffer.drain(..) {\n+                self.tcx().sess.diagnostic().emit_diagnostic(&mut diag);\n             }\n         }\n     }"}, {"sha": "855a6a6ef6adafd4aaa2dd5441189dce22e7b60d", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -178,8 +178,8 @@ fn report_clippy_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n     // a .span_bug or .bug call has already printed what\n     // it wants to print.\n     if !info.payload().is::<rustc_errors::ExplicitBug>() {\n-        let d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n-        handler.emit_diagnostic(&d);\n+        let mut d = rustc_errors::Diagnostic::new(rustc_errors::Level::Bug, \"unexpected panic\");\n+        handler.emit_diagnostic(&mut d);\n     }\n \n     let version_info = rustc_tools_util::get_version_info!();"}, {"sha": "412f4434b9ead51f2ea5412ab16df06266aa11e9", "filename": "src/tools/rustfmt/src/parse/session.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/056951d6289e3fbba444cbadec8b4eea7f92928e/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/056951d6289e3fbba444cbadec8b4eea7f92928e/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fsession.rs?ref=056951d6289e3fbba444cbadec8b4eea7f92928e", "patch": "@@ -225,8 +225,10 @@ impl ParseSess {\n // Methods that should be restricted within the parse module.\n impl ParseSess {\n     pub(super) fn emit_diagnostics(&self, diagnostics: Vec<Diagnostic>) {\n-        for diagnostic in diagnostics {\n-            self.parse_sess.span_diagnostic.emit_diagnostic(&diagnostic);\n+        for mut diagnostic in diagnostics {\n+            self.parse_sess\n+                .span_diagnostic\n+                .emit_diagnostic(&mut diagnostic);\n         }\n     }\n "}]}