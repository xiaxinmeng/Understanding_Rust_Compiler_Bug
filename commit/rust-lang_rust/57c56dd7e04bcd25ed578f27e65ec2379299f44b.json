{"sha": "57c56dd7e04bcd25ed578f27e65ec2379299f44b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzU2ZGQ3ZTA0YmNkMjVlZDU3OGYyN2U2NWVjMjM3OTI5OWY0NGI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-02T09:32:23Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-12T04:31:39Z"}, "message": "Parse macro-expanded statements like ordinary statements.", "tree": {"sha": "6d09ab6a92444ccb10516eae30964f183a4cc848", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d09ab6a92444ccb10516eae30964f183a4cc848"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c56dd7e04bcd25ed578f27e65ec2379299f44b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c56dd7e04bcd25ed578f27e65ec2379299f44b", "html_url": "https://github.com/rust-lang/rust/commit/57c56dd7e04bcd25ed578f27e65ec2379299f44b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c56dd7e04bcd25ed578f27e65ec2379299f44b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6189e6cdba6d12ab65baafd95c5f8a6e0cc37937", "url": "https://api.github.com/repos/rust-lang/rust/commits/6189e6cdba6d12ab65baafd95c5f8a6e0cc37937", "html_url": "https://github.com/rust-lang/rust/commit/6189e6cdba6d12ab65baafd95c5f8a6e0cc37937"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "7b09a44b814ffd5244d6f0361d18829eea679be4", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/57c56dd7e04bcd25ed578f27e65ec2379299f44b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c56dd7e04bcd25ed578f27e65ec2379299f44b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=57c56dd7e04bcd25ed578f27e65ec2379299f44b", "patch": "@@ -118,12 +118,18 @@ impl<'a> MacResult for ParserAnyMacro<'a> {\n \n     fn make_stmts(self: Box<ParserAnyMacro<'a>>)\n                  -> Option<SmallVector<ast::Stmt>> {\n+        let parse_stmt = |parser: &mut Parser<'a>| -> ::parse::PResult<'a, _> {\n+            Ok(match parser.parse_stmt()? {\n+                Some(stmt) => Some(parser.finish_parsing_statement(stmt)?),\n+                None => None,\n+            })\n+        };\n         let mut ret = SmallVector::zero();\n         loop {\n             let mut parser = self.parser.borrow_mut();\n             match parser.token {\n                 token::Eof => break,\n-                _ => match parser.parse_stmt() {\n+                _ => match parse_stmt(&mut parser) {\n                     Ok(maybe_stmt) => match maybe_stmt {\n                         Some(stmt) => ret.push(stmt),\n                         None => (),"}, {"sha": "b2cbe252344f778a8a01e1e61b32b2ee3b0802ce", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c56dd7e04bcd25ed578f27e65ec2379299f44b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c56dd7e04bcd25ed578f27e65ec2379299f44b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=57c56dd7e04bcd25ed578f27e65ec2379299f44b", "patch": "@@ -4064,7 +4064,7 @@ impl<'a> Parser<'a> {\n \n     /// Finish parsing expressions that start with macros and handle trailing semicolons\n     /// (or the lack thereof) -- c.f. `parse_stmt`.\n-    fn finish_parsing_statement(&mut self, mut stmt: Stmt) -> PResult<'a, Stmt> {\n+    pub fn finish_parsing_statement(&mut self, mut stmt: Stmt) -> PResult<'a, Stmt> {\n         if let StmtKind::Mac(mac) = stmt.node {\n             if mac.1 != MacStmtStyle::NoBraces || self.token == token::Semi {\n                 stmt.node = StmtKind::Mac(mac);\n@@ -4082,7 +4082,7 @@ impl<'a> Parser<'a> {\n \n     fn handle_trailing_semicolon(&mut self, mut stmt: Stmt) -> PResult<'a, Stmt> {\n         match stmt.node {\n-            StmtKind::Expr(ref expr) => {\n+            StmtKind::Expr(ref expr) if self.token != token::Eof => {\n                 // expression without semicolon\n                 if classify::expr_requires_semi_to_be_stmt(expr) {\n                     // Just check for errors and recover; do not eat semicolon yet."}]}