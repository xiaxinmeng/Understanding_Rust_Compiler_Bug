{"sha": "728f92604abc9603a211ddb2818ef7ce0b1c7a5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyOGY5MjYwNGFiYzk2MDNhMjExZGRiMjgxOGVmN2NlMGIxYzdhNWY=", "commit": {"author": {"name": "Jeff Olson", "email": "olson.jeffery@gmail.com", "date": "2012-04-17T05:40:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-20T22:23:22Z"}, "message": "fix a race in global loop test; unref_handle now takes a close_cb", "tree": {"sha": "99d1351e67f8b480f4c7c36bc49399628f6957a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99d1351e67f8b480f4c7c36bc49399628f6957a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/728f92604abc9603a211ddb2818ef7ce0b1c7a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/728f92604abc9603a211ddb2818ef7ce0b1c7a5f", "html_url": "https://github.com/rust-lang/rust/commit/728f92604abc9603a211ddb2818ef7ce0b1c7a5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/728f92604abc9603a211ddb2818ef7ce0b1c7a5f/comments", "author": {"login": "olsonjeffery", "id": 10408, "node_id": "MDQ6VXNlcjEwNDA4", "avatar_url": "https://avatars.githubusercontent.com/u/10408?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olsonjeffery", "html_url": "https://github.com/olsonjeffery", "followers_url": "https://api.github.com/users/olsonjeffery/followers", "following_url": "https://api.github.com/users/olsonjeffery/following{/other_user}", "gists_url": "https://api.github.com/users/olsonjeffery/gists{/gist_id}", "starred_url": "https://api.github.com/users/olsonjeffery/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olsonjeffery/subscriptions", "organizations_url": "https://api.github.com/users/olsonjeffery/orgs", "repos_url": "https://api.github.com/users/olsonjeffery/repos", "events_url": "https://api.github.com/users/olsonjeffery/events{/privacy}", "received_events_url": "https://api.github.com/users/olsonjeffery/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5d1974dc5114d6990db47cfd1d1edaabe01ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5d1974dc5114d6990db47cfd1d1edaabe01ce8", "html_url": "https://github.com/rust-lang/rust/commit/9a5d1974dc5114d6990db47cfd1d1edaabe01ce8"}], "stats": {"total": 34, "additions": 15, "deletions": 19}, "files": [{"sha": "507ac14d68acae124c18be3fa11062fc442a64ea", "filename": "src/libstd/uv_hl.rs", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/728f92604abc9603a211ddb2818ef7ce0b1c7a5f/src%2Flibstd%2Fuv_hl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/728f92604abc9603a211ddb2818ef7ce0b1c7a5f/src%2Flibstd%2Fuv_hl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_hl.rs?ref=728f92604abc9603a211ddb2818ef7ce0b1c7a5f", "patch": "@@ -166,8 +166,10 @@ fn ref_handle<T>(hl_loop: high_level_loop, handle: *T) unsafe {\n }\n #[doc=\"\n \"]\n-fn unref_handle<T>(hl_loop: high_level_loop, handle: *T) unsafe {\n-    send_high_level_msg(hl_loop, auto_unref_handle(handle as *libc::c_void));\n+fn unref_handle<T>(hl_loop: high_level_loop, handle: *T,\n+                   user_close_cb: *u8) unsafe {\n+    send_high_level_msg(hl_loop, auto_unref_handle(handle as *libc::c_void,\n+                                                   user_close_cb));\n }\n \n /////////////////////\n@@ -232,8 +234,8 @@ crust fn high_level_wake_up_cb(async_handle: *libc::c_void,\n                       auto_ref_handle(handle) {\n                         high_level_ref(data, handle);\n                       }\n-                      auto_unref_handle(handle) {\n-                        high_level_unref(data, handle, false);\n+                      auto_unref_handle(handle, user_close_cb) {\n+                        high_level_unref(data, handle, false, user_close_cb);\n                       }\n                       tear_down {\n                         log(debug,\"incoming hl_msg: got tear_down\");\n@@ -277,12 +279,8 @@ unsafe fn high_level_ref(data: *global_loop_data, handle: *libc::c_void) {\n     (*data).refd_handles = refd_handles;\n }\n \n-crust fn auto_unref_close_cb(handle: *libc::c_void) {\n-    log(debug, \"closing handle via high_level_unref\");\n-}\n-\n unsafe fn high_level_unref(data: *global_loop_data, handle: *libc::c_void,\n-                   manual_unref: bool) {\n+                   manual_unref: bool, user_close_cb: *u8) {\n     log(debug,\"incoming hl_msg: got auto_unref_handle\");\n     let mut refd_handles = (*data).refd_handles;\n     let mut unrefd_handles = (*data).unrefd_handles;\n@@ -299,7 +297,7 @@ unsafe fn high_level_unref(data: *global_loop_data, handle: *libc::c_void,\n         }\n     }\n     else {\n-        ll::close(handle, auto_unref_close_cb);\n+        ll::close(handle, user_close_cb);\n         let last_idx = vec::len(refd_handles) - 1u;\n         let handle_idx = vec::position_elem(refd_handles, handle);\n         alt handle_idx {\n@@ -328,7 +326,7 @@ unsafe fn high_level_unref(data: *global_loop_data, handle: *libc::c_void,\n enum high_level_msg {\n     interaction (fn~(*libc::c_void)),\n     auto_ref_handle (*libc::c_void),\n-    auto_unref_handle (*libc::c_void),\n+    auto_unref_handle (*libc::c_void, *u8),\n     tear_down\n }\n \n@@ -384,8 +382,6 @@ unsafe fn outer_global_loop_body(msg_po: comm::port<high_level_msg>) {\n     };\n \n     ll::loop_delete(loop_ptr);\n-    // once we get here, show's over.\n-    rustrt::rust_uv_free_kernel_global_async_handle();\n }\n \n unsafe fn inner_global_loop_body(weak_exit_po_in: comm::port<()>,\n@@ -437,22 +433,22 @@ unsafe fn inner_global_loop_body(weak_exit_po_in: comm::port<()>,\n #[cfg(test)]\n mod test {\n     crust fn simple_timer_close_cb(timer_ptr: *ll::uv_timer_t) unsafe {\n-        log(debug, \"UNUSED...\");\n+        log(debug, \"user close cb for timer_ptr\");\n+        let exit_ch_ptr = ll::get_data_for_uv_handle(\n+            timer_ptr as *libc::c_void) as *comm::chan<bool>;\n+        let exit_ch = *exit_ch_ptr;\n+        comm::send(exit_ch, true);\n     }\n     crust fn simple_timer_cb(timer_ptr: *ll::uv_timer_t,\n                              status: libc::c_int) unsafe {\n         log(debug, \"in simple timer cb\");\n-        let exit_ch_ptr = ll::get_data_for_uv_handle(\n-            timer_ptr as *libc::c_void) as *comm::chan<bool>;\n         ll::timer_stop(timer_ptr);\n         let hl_loop = get_global_loop();\n         interact(hl_loop) {|loop_ptr|\n             log(debug, \"closing timer\");\n             //ll::close(timer_ptr as *libc::c_void, simple_timer_close_cb);\n-            unref_handle(hl_loop, timer_ptr);\n+            unref_handle(hl_loop, timer_ptr, simple_timer_close_cb);\n             log(debug, \"about to deref exit_ch_ptr\");\n-            let exit_ch = *exit_ch_ptr;\n-            comm::send(exit_ch, true);\n             log(debug, \"after msg sent on deref'd exit_ch\");\n         };\n         log(debug, \"exiting simple timer cb\");"}]}