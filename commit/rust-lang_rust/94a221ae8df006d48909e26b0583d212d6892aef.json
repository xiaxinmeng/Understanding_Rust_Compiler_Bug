{"sha": "94a221ae8df006d48909e26b0583d212d6892aef", "node_id": "C_kwDOAAsO6NoAKDk0YTIyMWFlOGRmMDA2ZDQ4OTA5ZTI2YjA1ODNkMjEyZDY4OTJhZWY", "commit": {"author": {"name": "Ole Strohm", "email": "strohm99@gmail.com", "date": "2022-02-22T22:41:03Z"}, "committer": {"name": "Ole Strohm", "email": "strohm99@gmail.com", "date": "2022-02-22T22:41:03Z"}, "message": "Dedup code", "tree": {"sha": "bea6fd7b203e80407a720a686268e129491891ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea6fd7b203e80407a720a686268e129491891ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94a221ae8df006d48909e26b0583d212d6892aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94a221ae8df006d48909e26b0583d212d6892aef", "html_url": "https://github.com/rust-lang/rust/commit/94a221ae8df006d48909e26b0583d212d6892aef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94a221ae8df006d48909e26b0583d212d6892aef/comments", "author": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "OleStrohm", "id": 6892524, "node_id": "MDQ6VXNlcjY4OTI1MjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6892524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/OleStrohm", "html_url": "https://github.com/OleStrohm", "followers_url": "https://api.github.com/users/OleStrohm/followers", "following_url": "https://api.github.com/users/OleStrohm/following{/other_user}", "gists_url": "https://api.github.com/users/OleStrohm/gists{/gist_id}", "starred_url": "https://api.github.com/users/OleStrohm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/OleStrohm/subscriptions", "organizations_url": "https://api.github.com/users/OleStrohm/orgs", "repos_url": "https://api.github.com/users/OleStrohm/repos", "events_url": "https://api.github.com/users/OleStrohm/events{/privacy}", "received_events_url": "https://api.github.com/users/OleStrohm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a4c45ede74f04ec4c86363f9158e6b6f1efc00", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a4c45ede74f04ec4c86363f9158e6b6f1efc00", "html_url": "https://github.com/rust-lang/rust/commit/43a4c45ede74f04ec4c86363f9158e6b6f1efc00"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "202e79ec60a507d39e6af58bade3656a115d22b1", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/94a221ae8df006d48909e26b0583d212d6892aef/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94a221ae8df006d48909e26b0583d212d6892aef/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=94a221ae8df006d48909e26b0583d212d6892aef", "patch": "@@ -81,19 +81,12 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     ) = if let Some(enum_def) = resolve_enum_def(&ctx.sema, &expr) {\n         let variants = enum_def.variants(ctx.db());\n \n-        let is_non_exhaustive = match enum_def {\n-            ExtendedEnum::Enum(e) => e.attrs(ctx.db()).by_key(\"non_exhaustive\").exists(),\n-            _ => false,\n-        };\n+        let is_non_exhaustive = enum_def.is_non_exhaustive(ctx.db());\n \n         let missing_pats = variants\n             .into_iter()\n             .filter_map(|variant| {\n-                let is_hidden = match variant {\n-                    ExtendedVariant::Variant(var) => var.attrs(ctx.db()).has_doc_hidden(),\n-                    _ => false,\n-                };\n-                Some((build_pat(ctx.db(), module, variant)?, is_hidden))\n+                Some((build_pat(ctx.db(), module, variant)?, variant.has_doc_hidden(ctx.db())))\n             })\n             .filter(|(variant_pat, _)| is_variant_missing(&top_lvl_pats, variant_pat));\n \n@@ -108,10 +101,8 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         };\n         (missing_pats.peekable(), is_non_exhaustive)\n     } else if let Some(enum_defs) = resolve_tuple_of_enum_def(&ctx.sema, &expr) {\n-        let is_non_exhaustive = enum_defs.iter().any(|enum_def| match enum_def {\n-            ExtendedEnum::Enum(e) => e.attrs(ctx.db()).by_key(\"non_exhaustive\").exists(),\n-            _ => false,\n-        });\n+        let is_non_exhaustive =\n+            enum_defs.iter().any(|enum_def| enum_def.is_non_exhaustive(ctx.db()));\n \n         let mut n_arms = 1;\n         let variants_of_enums: Vec<Vec<ExtendedVariant>> = enum_defs\n@@ -136,10 +127,7 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n             .multi_cartesian_product()\n             .inspect(|_| cov_mark::hit!(add_missing_match_arms_lazy_computation))\n             .map(|variants| {\n-                let is_hidden = variants.iter().any(|variant| match variant {\n-                    ExtendedVariant::Variant(var) => var.attrs(ctx.db()).has_doc_hidden(),\n-                    _ => false,\n-                });\n+                let is_hidden = variants.iter().any(|variant| variant.has_doc_hidden(ctx.db()));\n                 let patterns =\n                     variants.into_iter().filter_map(|variant| build_pat(ctx.db(), module, variant));\n \n@@ -293,11 +281,27 @@ enum ExtendedVariant {\n     Variant(hir::Variant),\n }\n \n+impl ExtendedVariant {\n+    fn has_doc_hidden(self, db: &RootDatabase) -> bool {\n+        match self {\n+            ExtendedVariant::Variant(var) => var.attrs(db).has_doc_hidden(),\n+            _ => false,\n+        }\n+    }\n+}\n+\n fn lift_enum(e: hir::Enum) -> ExtendedEnum {\n     ExtendedEnum::Enum(e)\n }\n \n impl ExtendedEnum {\n+    fn is_non_exhaustive(self, db: &RootDatabase) -> bool {\n+        match self {\n+            ExtendedEnum::Enum(e) => e.attrs(db).by_key(\"non_exhaustive\").exists(),\n+            _ => false,\n+        }\n+    }\n+\n     fn variants(self, db: &RootDatabase) -> Vec<ExtendedVariant> {\n         match self {\n             ExtendedEnum::Enum(e) => {"}]}