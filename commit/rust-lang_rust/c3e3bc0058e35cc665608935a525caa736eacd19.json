{"sha": "c3e3bc0058e35cc665608935a525caa736eacd19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZTNiYzAwNThlMzVjYzY2NTYwODkzNWE1MjVjYWE3MzZlYWNkMTk=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-14T03:19:45Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:29Z"}, "message": "Fix another windows ABI mistake\n\n...this time with the float intrinsics.", "tree": {"sha": "0f2646eb37bfa6e3538700596e5c4a59b3a514fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f2646eb37bfa6e3538700596e5c4a59b3a514fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3e3bc0058e35cc665608935a525caa736eacd19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3e3bc0058e35cc665608935a525caa736eacd19", "html_url": "https://github.com/rust-lang/rust/commit/c3e3bc0058e35cc665608935a525caa736eacd19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3e3bc0058e35cc665608935a525caa736eacd19/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d71223a6c54cd80392c7141b0f081fffb8dee628", "url": "https://api.github.com/repos/rust-lang/rust/commits/d71223a6c54cd80392c7141b0f081fffb8dee628", "html_url": "https://github.com/rust-lang/rust/commit/d71223a6c54cd80392c7141b0f081fffb8dee628"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "8a1f02d661e2403dc392e35afd602b088f5b5f55", "filename": "src/libcompiler_builtins/lib.rs", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c3e3bc0058e35cc665608935a525caa736eacd19/src%2Flibcompiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3e3bc0058e35cc665608935a525caa736eacd19/src%2Flibcompiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Flib.rs?ref=c3e3bc0058e35cc665608935a525caa736eacd19", "patch": "@@ -689,7 +689,33 @@ pub mod reimpls {\n         float_as_signed!(a, f32, i128_)\n     }\n \n-    #[export_name=\"__floattidf\"]\n+    // LLVM expectations for ABI on windows are pure madness.\n+\n+    #[cfg(not(stage0))]\n+    #[cfg_attr(windows, export_name=\"__floattidf\")]\n+    pub extern \"C\" fn i128_as_f64_win(alow: u64, ahigh: i64) -> f64 {\n+        i128_as_f64(i128_::from_parts(alow, ahigh))\n+    }\n+\n+    #[cfg(not(stage0))]\n+    #[cfg_attr(windows, export_name=\"__floattisf\")]\n+    pub extern \"C\" fn i128_as_f32_win(alow: u64, ahigh: i64) -> f32 {\n+        i128_as_f32(i128_::from_parts(alow, ahigh))\n+    }\n+\n+    #[cfg(not(stage0))]\n+    #[cfg_attr(windows, export_name=\"__floatuntidf\")]\n+    pub extern \"C\" fn u128_as_f64_win(alow: u64, ahigh: u64) -> f64 {\n+        u128_as_f64(u128_::from_parts(alow, ahigh))\n+    }\n+\n+    #[cfg(not(stage0))]\n+    #[cfg_attr(windows, export_name=\"__floatuntisf\")]\n+    pub extern \"C\" fn u128_as_f32_win(alow: u64, ahigh: u64) -> f32 {\n+        u128_as_f32(u128_::from_parts(alow, ahigh))\n+    }\n+\n+    #[cfg_attr(any(not(windows),stage0),export_name=\"__floattidf\")]\n     pub extern \"C\" fn i128_as_f64(a: i128_) -> f64 {\n         match a.signum() {\n             1 => u128_as_f64(a.uabs()),\n@@ -698,7 +724,7 @@ pub mod reimpls {\n         }\n     }\n \n-    #[export_name=\"__floattisf\"]\n+    #[cfg_attr(any(not(windows),stage0),export_name=\"__floattisf\")]\n     pub extern \"C\" fn i128_as_f32(a: i128_) -> f32 {\n         match a.signum() {\n             1 => u128_as_f32(a.uabs()),\n@@ -707,7 +733,7 @@ pub mod reimpls {\n         }\n     }\n \n-    #[export_name=\"__floatuntidf\"]\n+    #[cfg_attr(any(not(windows),stage0),export_name=\"__floatuntidf\")]\n     pub extern \"C\" fn u128_as_f64(mut a: u128_) -> f64 {\n         use ::core::f64::MANTISSA_DIGITS;\n         if a == 0 { return 0.0; }\n@@ -743,7 +769,7 @@ pub mod reimpls {\n         }\n     }\n \n-    #[export_name=\"__floatuntisf\"]\n+    #[cfg_attr(any(not(windows),stage0),export_name=\"__floatuntisf\")]\n     pub extern \"C\" fn u128_as_f32(mut a: u128_) -> f32 {\n         use ::core::f32::MANTISSA_DIGITS;\n         if a == 0 { return 0.0; }"}]}