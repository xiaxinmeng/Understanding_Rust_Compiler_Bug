{"sha": "76857fb3fb1bffb2a9b43735ad70620f0f4f7253", "node_id": "C_kwDOAAsO6NoAKDc2ODU3ZmIzZmIxYmZmYjJhOWI0MzczNWFkNzA2MjBmMGY0ZjcyNTM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-31T05:58:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-31T05:58:31Z"}, "message": "Rollup merge of #93347 - WaffleLapkin:better_char_decode_utf16_size_hint, r=dtolnay\n\nMake `char::DecodeUtf16::size_hist` more precise\n\nNew implementation takes into account contents of `self.buf` and rounds lower bound up instead of down.\n\nFixes #88762\nRevival of #88763", "tree": {"sha": "373b056863b2d6fdfeec0febdc1829e8be7dd7dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/373b056863b2d6fdfeec0febdc1829e8be7dd7dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76857fb3fb1bffb2a9b43735ad70620f0f4f7253", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh93qHCRBK7hj4Ov3rIwAAG+cIABXWeT+W5n3CTuTL8q/p81Y1\ni3kzUsDHP2VqvqNA0TSQJJPSJ++cdGlSb7ez/g9XMxZycRwYxXUDO+/PbVa9utRF\nlhVV8H59fDY7Z96ZRHXyIrso1k70OO4ekNp1zXsGbaia1Cm+t9PenZKereNp2sOc\nfgxHF0lremEv/zynGUhP5pkZeZQXBDmDfoAUdwsdGHvYBQoXXM9mQhUFPRX8kvRy\nvmc+ORTs6EqqOwI4Q5K+V/QaqKW3S9MMe6D3/77737uy8ZOwiHYxRQxYVAXdNwM0\nLNmpRhssohBTjDMTG3G27t+VYzPJrOkxqxMCLy7QB6qLozMHisTdcoge6rvRy/w=\n=5kVR\n-----END PGP SIGNATURE-----\n", "payload": "tree 373b056863b2d6fdfeec0febdc1829e8be7dd7dd\nparent 7de90d5b6506f702c36ea20f46f92c3f8808668a\nparent 17cd2cd5927cf1075efbd0f4a859182eb102b920\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1643608711 +0100\ncommitter GitHub <noreply@github.com> 1643608711 +0100\n\nRollup merge of #93347 - WaffleLapkin:better_char_decode_utf16_size_hint, r=dtolnay\n\nMake `char::DecodeUtf16::size_hist` more precise\n\nNew implementation takes into account contents of `self.buf` and rounds lower bound up instead of down.\n\nFixes #88762\nRevival of #88763\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76857fb3fb1bffb2a9b43735ad70620f0f4f7253", "html_url": "https://github.com/rust-lang/rust/commit/76857fb3fb1bffb2a9b43735ad70620f0f4f7253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76857fb3fb1bffb2a9b43735ad70620f0f4f7253/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7de90d5b6506f702c36ea20f46f92c3f8808668a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7de90d5b6506f702c36ea20f46f92c3f8808668a", "html_url": "https://github.com/rust-lang/rust/commit/7de90d5b6506f702c36ea20f46f92c3f8808668a"}, {"sha": "17cd2cd5927cf1075efbd0f4a859182eb102b920", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cd2cd5927cf1075efbd0f4a859182eb102b920", "html_url": "https://github.com/rust-lang/rust/commit/17cd2cd5927cf1075efbd0f4a859182eb102b920"}], "stats": {"total": 58, "additions": 55, "deletions": 3}, "files": [{"sha": "8b9f979b573f70830930452c21fc94a724fbc651", "filename": "library/core/src/char/decode.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/76857fb3fb1bffb2a9b43735ad70620f0f4f7253/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76857fb3fb1bffb2a9b43735ad70620f0f4f7253/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fdecode.rs?ref=76857fb3fb1bffb2a9b43735ad70620f0f4f7253", "patch": "@@ -120,9 +120,34 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         let (low, high) = self.iter.size_hint();\n-        // we could be entirely valid surrogates (2 elements per\n-        // char), or entirely non-surrogates (1 element per char)\n-        (low / 2, high)\n+\n+        let (low_buf, high_buf) = match self.buf {\n+            // buf is empty, no additional elements from it.\n+            None => (0, 0),\n+            // `u` is a non surrogate, so it's always an additional character.\n+            Some(u) if u < 0xD800 || 0xDFFF < u => (1, 1),\n+            // `u` is a leading surrogate (it can never be a trailing surrogate and\n+            // it's a surrogate due to the previous branch) and `self.iter` is empty.\n+            //\n+            // `u` can't be paired, since the `self.iter` is empty,\n+            // so it will always become an additional element (error).\n+            Some(_u) if high == Some(0) => (1, 1),\n+            // `u` is a leading surrogate and `iter` may be non-empty.\n+            //\n+            // `u` can either pair with a trailing surrogate, in which case no additional elements\n+            // are produced, or it can become an error, in which case it's an additional character (error).\n+            Some(_u) => (0, 1),\n+        };\n+\n+        // `self.iter` could contain entirely valid surrogates (2 elements per\n+        // char), or entirely non-surrogates (1 element per char).\n+        //\n+        // On odd lower bound, at least one element must stay unpaired\n+        // (with other elements from `self.iter`), so we round up.\n+        let low = low.div_ceil(2) + low_buf;\n+        let high = high.and_then(|h| h.checked_add(high_buf));\n+\n+        (low, high)\n     }\n }\n "}, {"sha": "4c899b6eb43d0c5b1e1934b16edffc825d3a8a82", "filename": "library/core/tests/char.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/76857fb3fb1bffb2a9b43735ad70620f0f4f7253/library%2Fcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76857fb3fb1bffb2a9b43735ad70620f0f4f7253/library%2Fcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fchar.rs?ref=76857fb3fb1bffb2a9b43735ad70620f0f4f7253", "patch": "@@ -308,6 +308,33 @@ fn test_decode_utf16() {\n     check(&[0xD800, 0], &[Err(0xD800), Ok('\\0')]);\n }\n \n+#[test]\n+fn test_decode_utf16_size_hint() {\n+    fn check(s: &[u16]) {\n+        let mut iter = char::decode_utf16(s.iter().cloned());\n+\n+        loop {\n+            let count = iter.clone().count();\n+            let (lower, upper) = iter.size_hint();\n+\n+            assert!(\n+                lower <= count && count <= upper.unwrap(),\n+                \"lower = {lower}, count = {count}, upper = {upper:?}\"\n+            );\n+\n+            if let None = iter.next() {\n+                break;\n+            }\n+        }\n+    }\n+\n+    check(&[0xD800, 0xD800, 0xDC00]);\n+    check(&[0xD800, 0xD800, 0x0]);\n+    check(&[0xD800, 0x41, 0x42]);\n+    check(&[0xD800, 0]);\n+    check(&[0xD834, 0x006d]);\n+}\n+\n #[test]\n fn ed_iterator_specializations() {\n     // Check counting"}]}