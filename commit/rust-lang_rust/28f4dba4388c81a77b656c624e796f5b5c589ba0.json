{"sha": "28f4dba4388c81a77b656c624e796f5b5c589ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZjRkYmE0Mzg4YzgxYTc3YjY1NmM2MjRlNzk2ZjViNWM1ODliYTA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-10T19:14:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-07-10T20:03:35Z"}, "message": "rustc_span: Revert addition of `proc_macro` field to `ExpnKind::Macro`\n\nThe flag has a vague meaning and is used for a single diagnostic change that is low benefit and appears only under `-Z macro_backtrace`.", "tree": {"sha": "6c8ba083e4d0b1d915c345981c56532be4e8cafb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c8ba083e4d0b1d915c345981c56532be4e8cafb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28f4dba4388c81a77b656c624e796f5b5c589ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28f4dba4388c81a77b656c624e796f5b5c589ba0", "html_url": "https://github.com/rust-lang/rust/commit/28f4dba4388c81a77b656c624e796f5b5c589ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28f4dba4388c81a77b656c624e796f5b5c589ba0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a31431fce770ff90a347fd6114ac294e4568cbd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a31431fce770ff90a347fd6114ac294e4568cbd8", "html_url": "https://github.com/rust-lang/rust/commit/a31431fce770ff90a347fd6114ac294e4568cbd8"}], "stats": {"total": 155, "additions": 37, "deletions": 118}, "files": [{"sha": "fd024a8ecfa4a8ee09cbc85e3a14021df86045f5", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -309,9 +309,7 @@ pub trait Emitter {\n                     // are some which do actually involve macros.\n                     ExpnKind::Inlined | ExpnKind::Desugaring(..) | ExpnKind::AstPass(..) => None,\n \n-                    ExpnKind::Macro { kind: macro_kind, name, proc_macro: _ } => {\n-                        Some((macro_kind, name))\n-                    }\n+                    ExpnKind::Macro(macro_kind, name) => Some((macro_kind, name)),\n                 }\n             });\n \n@@ -372,19 +370,10 @@ pub trait Emitter {\n                     new_labels\n                         .push((trace.call_site, \"in the inlined copy of this code\".to_string()));\n                 } else if always_backtrace {\n-                    let proc_macro = if let ExpnKind::Macro { kind: _, name: _, proc_macro: true } =\n-                        trace.kind\n-                    {\n-                        \"procedural macro \"\n-                    } else {\n-                        \"\"\n-                    };\n-\n                     new_labels.push((\n                         trace.def_site,\n                         format!(\n-                            \"in this expansion of {}`{}`{}\",\n-                            proc_macro,\n+                            \"in this expansion of `{}`{}\",\n                             trace.kind.descr(),\n                             if macro_backtrace.len() > 1 {\n                                 // if macro_backtrace.len() == 1 it'll be\n@@ -410,11 +399,7 @@ pub trait Emitter {\n                 // and it needs an \"in this macro invocation\" label to match that.\n                 let redundant_span = trace.call_site.contains(sp);\n \n-                if !redundant_span\n-                    && matches!(\n-                        trace.kind,\n-                        ExpnKind::Macro { kind: MacroKind::Bang, name: _, proc_macro: _ }\n-                    )\n+                if !redundant_span && matches!(trace.kind, ExpnKind::Macro(MacroKind::Bang, _))\n                     || always_backtrace\n                 {\n                     new_labels.push(("}, {"sha": "b3e52502b0739245b962c190a53de2db75ddc199", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -811,16 +811,8 @@ impl SyntaxExtension {\n         macro_def_id: Option<DefId>,\n         parent_module: Option<DefId>,\n     ) -> ExpnData {\n-        use SyntaxExtensionKind::*;\n-        let proc_macro = match self.kind {\n-            // User-defined proc macro\n-            Bang(..) | Attr(..) | Derive(..) => true,\n-            // Consider everthing else to be not a proc\n-            // macro for diagnostic purposes\n-            LegacyBang(..) | LegacyAttr(..) | NonMacroAttr { .. } | LegacyDerive(..) => false,\n-        };\n         ExpnData::new(\n-            ExpnKind::Macro { kind: self.macro_kind(), name: descr, proc_macro },\n+            ExpnKind::Macro(self.macro_kind(), descr),\n             parent,\n             call_site,\n             self.span,"}, {"sha": "81b42055530f339eda68bf32681974585d46df23", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -812,7 +812,7 @@ fn ident_name_compatibility_hack(\n     rustc: &mut Rustc<'_>,\n ) -> Option<(rustc_span::symbol::Ident, bool)> {\n     if let NtIdent(ident, is_raw) = nt {\n-        if let ExpnKind::Macro { name: macro_name, .. } = orig_span.ctxt().outer_expn_data().kind {\n+        if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n             let source_map = rustc.sess.source_map();\n             let filename = source_map.span_to_filename(orig_span);\n             if let FileName::Real(RealFileName::LocalPath(path)) = filename {"}, {"sha": "9b1a339572ec3cfe5b9fde1709d72415c3aba51a", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -248,21 +248,10 @@ impl EarlyLintPass for LintPassImpl {\n                 if last.ident.name == sym::LintPass {\n                     let expn_data = lint_pass.path.span.ctxt().outer_expn_data();\n                     let call_site = expn_data.call_site;\n-                    if !matches!(\n-                        expn_data.kind,\n-                        ExpnKind::Macro {\n-                            kind: MacroKind::Bang,\n-                            name: sym::impl_lint_pass,\n-                            proc_macro: _\n-                        }\n-                    ) && !matches!(\n-                        call_site.ctxt().outer_expn_data().kind,\n-                        ExpnKind::Macro {\n-                            kind: MacroKind::Bang,\n-                            name: sym::declare_lint_pass,\n-                            proc_macro: _\n-                        }\n-                    ) {\n+                    if expn_data.kind != ExpnKind::Macro(MacroKind::Bang, sym::impl_lint_pass)\n+                        && call_site.ctxt().outer_expn_data().kind\n+                            != ExpnKind::Macro(MacroKind::Bang, sym::declare_lint_pass)\n+                    {\n                         cx.struct_span_lint(\n                             LINT_PASS_IMPL_WITHOUT_MACRO,\n                             lint_pass.path.span,"}, {"sha": "a32caf1bc433df1cbf94ffa4f3d7322f2ff43ed5", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -256,10 +256,6 @@ fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span,\n     }\n \n     let macro_symbol =\n-        if let hygiene::ExpnKind::Macro { kind: _, name: symbol, proc_macro: _ } = expn.kind {\n-            symbol\n-        } else {\n-            Symbol::intern(\"panic\")\n-        };\n+        if let hygiene::ExpnKind::Macro(_, symbol) = expn.kind { symbol } else { sym::panic };\n     (expn.call_site, panic_macro, macro_symbol.as_str())\n }"}, {"sha": "63872ca9017668c0015993b0347d816bce958b6d", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -387,7 +387,7 @@ pub fn in_external_macro(sess: &Session, span: Span) -> bool {\n             false\n         }\n         ExpnKind::AstPass(_) | ExpnKind::Desugaring(_) => true, // well, it's \"external\"\n-        ExpnKind::Macro { kind: MacroKind::Bang, name: _, proc_macro: _ } => {\n+        ExpnKind::Macro(MacroKind::Bang, _) => {\n             // Dummy span for the `def_site` means it's an external macro.\n             expn_data.def_site.is_dummy() || sess.source_map().is_imported(expn_data.def_site)\n         }"}, {"sha": "08cc87ccc349d5c51068e5203bb3b0c710c64675", "filename": "compiler/rustc_mir/src/transform/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Fspans.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -184,11 +184,8 @@ impl CoverageSpan {\n         self.current_macro_or_none\n             .borrow_mut()\n             .get_or_insert_with(|| {\n-                if let ExpnKind::Macro {\n-                    kind: MacroKind::Bang,\n-                    name: current_macro,\n-                    proc_macro: _,\n-                } = self.expn_span.ctxt().outer_expn_data().kind\n+                if let ExpnKind::Macro(MacroKind::Bang, current_macro) =\n+                    self.expn_span.ctxt().outer_expn_data().kind\n                 {\n                     return Some(current_macro);\n                 }"}, {"sha": "bcdae1cb43dbdfd8804643b4803e5f514561f48c", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -1775,11 +1775,9 @@ impl<'a> Resolver<'a> {\n                     let expn_data = expn_id.expn_data();\n                     match expn_data.kind {\n                         ExpnKind::Root\n-                        | ExpnKind::Macro {\n-                            kind: MacroKind::Bang | MacroKind::Derive,\n-                            name: _,\n-                            proc_macro: _,\n-                        } => Scope::DeriveHelpersCompat,\n+                        | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {\n+                            Scope::DeriveHelpersCompat\n+                        }\n                         _ => Scope::DeriveHelpers(expn_data.parent),\n                     }\n                 }"}, {"sha": "e024ade7b3c844a383df7e957ebf3b7efb115a52", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -319,11 +319,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                         let expn_data = expn_id.expn_data();\n                         match expn_data.kind {\n                             ExpnKind::Root\n-                            | ExpnKind::Macro {\n-                                name: _,\n-                                kind: MacroKind::Bang | MacroKind::Derive,\n-                                proc_macro: _,\n-                            } => {\n+                            | ExpnKind::Macro(MacroKind::Bang | MacroKind::Derive, _) => {\n                                 break;\n                             }\n                             _ => expn_id = expn_data.parent,"}, {"sha": "0a8a88132e33de65849e710a2d069da135a1c5d6", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -788,7 +788,7 @@ impl<'tcx> SaveContext<'tcx> {\n         let callee = span.source_callee()?;\n \n         let mac_name = match callee.kind {\n-            ExpnKind::Macro { kind, name, proc_macro: _ } => match kind {\n+            ExpnKind::Macro(kind, name) => match kind {\n                 MacroKind::Bang => name,\n \n                 // Ignore attribute macros, their spans are usually mangled"}, {"sha": "fe25ba4f9caca832ddc06965735a3b9b980daba7", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -144,10 +144,7 @@ impl ExpnId {\n             let expn_data = self.expn_data();\n             // Stop going up the backtrace once include! is encountered\n             if expn_data.is_root()\n-                || matches!(\n-                    expn_data.kind,\n-                    ExpnKind::Macro { kind: MacroKind::Bang, name: sym::include, proc_macro: _ }\n-                )\n+                || expn_data.kind == ExpnKind::Macro(MacroKind::Bang, sym::include)\n             {\n                 break;\n             }\n@@ -850,13 +847,7 @@ pub enum ExpnKind {\n     /// No expansion, aka root expansion. Only `ExpnId::root()` has this kind.\n     Root,\n     /// Expansion produced by a macro.\n-    Macro {\n-        kind: MacroKind,\n-        name: Symbol,\n-        /// If `true`, this macro is a procedural macro. This\n-        /// flag is only used for diagnostic purposes\n-        proc_macro: bool,\n-    },\n+    Macro(MacroKind, Symbol),\n     /// Transform done by the compiler on the AST.\n     AstPass(AstPass),\n     /// Desugaring done by the compiler during HIR lowering.\n@@ -869,7 +860,7 @@ impl ExpnKind {\n     pub fn descr(&self) -> String {\n         match *self {\n             ExpnKind::Root => kw::PathRoot.to_string(),\n-            ExpnKind::Macro { kind, name, proc_macro: _ } => match kind {\n+            ExpnKind::Macro(macro_kind, name) => match macro_kind {\n                 MacroKind::Bang => format!(\"{}!\", name),\n                 MacroKind::Attr => format!(\"#[{}]\", name),\n                 MacroKind::Derive => format!(\"#[derive({})]\", name),"}, {"sha": "84bef4b113c1532f4f435178be523e2c5d633fab", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -520,10 +520,7 @@ impl Span {\n \n     /// Returns `true` if `span` originates in a derive-macro's expansion.\n     pub fn in_derive_expansion(self) -> bool {\n-        matches!(\n-            self.ctxt().outer_expn_data().kind,\n-            ExpnKind::Macro { kind: MacroKind::Derive, name: _, proc_macro: _ }\n-        )\n+        matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))\n     }\n \n     #[inline]"}, {"sha": "84ca046212dc556395a75a1070cc2143b192836f", "filename": "src/test/ui/hygiene/unpretty-debug.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Funpretty-debug.stdout?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -20,7 +20,7 @@ fn y /* 0#0 */() { }\n /*\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n-1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"foo\", proc_macro: false }\n+1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"foo\")\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)"}, {"sha": "dc63d014451db8b1f5705b297de01fbc938ca36a", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -45,10 +45,10 @@ fn main /* 0#0 */() { ; }\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n 1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"produce_it\", proc_macro: false }\n+2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"produce_it\")\n 3: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"meta_macro::print_def_site\", proc_macro: true }\n-5: parent: ExpnId(4), call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"$crate::dummy\", proc_macro: true }\n+4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n+5: parent: ExpnId(4), call_site_ctxt: #5, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::dummy\")\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)"}, {"sha": "75e6a49b314dfe56f65ef616aaef13c6b4acb604", "filename": "src/test/ui/proc-macro/nonterminal-token-hygiene.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnonterminal-token-hygiene.stdout?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -69,10 +69,10 @@ fn main /* 0#0 */() { }\n Expansions:\n 0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n 1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"outer\", proc_macro: false }\n+2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"outer\")\n 3: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n-4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #4, kind: Macro { kind: Bang, name: \"inner\", proc_macro: false }\n-5: parent: ExpnId(4), call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro { kind: Bang, name: \"print_bang\", proc_macro: true }\n+4: parent: ExpnId(2), call_site_ctxt: #4, def_site_ctxt: #4, kind: Macro(Bang, \"inner\")\n+5: parent: ExpnId(4), call_site_ctxt: #6, def_site_ctxt: #0, kind: Macro(Bang, \"print_bang\")\n \n SyntaxContexts:\n #0: parent: #0, outer_mark: (ExpnId(0), Opaque)"}, {"sha": "9152ee60a7ed46a51d127250f69a7e9f9ad1442f", "filename": "src/test/ui/proc-macro/span-from-proc-macro.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-from-proc-macro.stderr?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -2,7 +2,7 @@ error[E0412]: cannot find type `MissingType` in this scope\n   --> $DIR/auxiliary/span-from-proc-macro.rs:37:20\n    |\n LL | pub fn error_from_attribute(_args: TokenStream, _input: TokenStream) -> TokenStream {\n-   | ----------------------------------------------------------------------------------- in this expansion of procedural macro `#[error_from_attribute]`\n+   | ----------------------------------------------------------------------------------- in this expansion of `#[error_from_attribute]`\n ...\n LL |             field: MissingType\n    |                    ^^^^^^^^^^^ not found in this scope\n@@ -16,7 +16,7 @@ error[E0412]: cannot find type `OtherMissingType` in this scope\n   --> $DIR/auxiliary/span-from-proc-macro.rs:46:21\n    |\n LL | pub fn error_from_derive(_input: TokenStream) -> TokenStream {\n-   | ------------------------------------------------------------ in this expansion of procedural macro `#[derive(ErrorFromDerive)]`\n+   | ------------------------------------------------------------ in this expansion of `#[derive(ErrorFromDerive)]`\n ...\n LL |             Variant(OtherMissingType)\n    |                     ^^^^^^^^^^^^^^^^ not found in this scope\n@@ -30,7 +30,7 @@ error[E0425]: cannot find value `my_ident` in this scope\n   --> $DIR/auxiliary/span-from-proc-macro.rs:29:9\n    |\n LL | pub fn other_error_from_bang(_input: TokenStream) -> TokenStream {\n-   | ---------------------------------------------------------------- in this expansion of procedural macro `other_error_from_bang!`\n+   | ---------------------------------------------------------------- in this expansion of `other_error_from_bang!`\n LL |     custom_quote::custom_quote! {\n LL |         my_ident\n    |         ^^^^^^^^ not found in this scope\n@@ -49,7 +49,7 @@ LL |             let bang_error: bool = 25;\n    |                             expected due to this\n ...\n LL | pub fn error_from_bang(_input: TokenStream) -> TokenStream {\n-   | ---------------------------------------------------------- in this expansion of procedural macro `error_from_bang!`\n+   | ---------------------------------------------------------- in this expansion of `error_from_bang!`\n    | \n   ::: $DIR/span-from-proc-macro.rs:15:5\n    |"}, {"sha": "7cfce2e61cca59e153cf08caf4c40fb08880cd99", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -662,14 +662,7 @@ fn in_attributes_expansion(expr: &Expr<'_>) -> bool {\n     use rustc_span::hygiene::MacroKind;\n     if expr.span.from_expansion() {\n         let data = expr.span.ctxt().outer_expn_data();\n-        matches!(\n-            data.kind,\n-            ExpnKind::Macro {\n-                kind: MacroKind::Attr,\n-                name: _,\n-                proc_macro: _\n-            }\n-        )\n+        matches!(data.kind, ExpnKind::Macro(MacroKind::Attr, _))\n     } else {\n         false\n     }"}, {"sha": "85257f3113cb774adc43f326707c0182b1eac616", "filename": "src/tools/clippy/clippy_lints/src/unit_types/unit_cmp.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Funit_cmp.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -8,12 +8,7 @@ use super::UNIT_CMP;\n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>) {\n     if expr.span.from_expansion() {\n         if let Some(callee) = expr.span.source_callee() {\n-            if let ExpnKind::Macro {\n-                kind: MacroKind::Bang,\n-                name: symbol,\n-                proc_macro: _,\n-            } = callee.kind\n-            {\n+            if let ExpnKind::Macro(MacroKind::Bang, symbol) = callee.kind {\n                 if let ExprKind::Binary(ref cmp, left, _) = expr.kind {\n                     let op = cmp.node;\n                     if op.is_comparison() && cx.typeck_results().expr_ty(left).is_unit() {"}, {"sha": "2f10472180f5e4f56b00177a927df3aab30dec31", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28f4dba4388c81a77b656c624e796f5b5c589ba0/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=28f4dba4388c81a77b656c624e796f5b5c589ba0", "patch": "@@ -953,12 +953,7 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n             let data = span.ctxt().outer_expn_data();\n             let new_span = data.call_site;\n \n-            if let ExpnKind::Macro {\n-                kind: MacroKind::Bang,\n-                name: mac_name,\n-                proc_macro: _,\n-            } = data.kind\n-            {\n+            if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n                 if mac_name.as_str() == name {\n                     return Some(new_span);\n                 }\n@@ -986,12 +981,7 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n         let data = span.ctxt().outer_expn_data();\n         let new_span = data.call_site;\n \n-        if let ExpnKind::Macro {\n-            kind: MacroKind::Bang,\n-            name: mac_name,\n-            proc_macro: _,\n-        } = data.kind\n-        {\n+        if let ExpnKind::Macro(MacroKind::Bang, mac_name) = data.kind {\n             if mac_name.as_str() == name {\n                 return Some(new_span);\n             }"}]}