{"sha": "7a02ebd828c8d9c68e8e972326ede8696fb3f6b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMDJlYmQ4MjhjOGQ5YzY4ZThlOTcyMzI2ZWRlODY5NmZiM2Y2Yjc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-21T19:50:00Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-21T19:50:00Z"}, "message": "bless tests", "tree": {"sha": "27afdbc406f21e7543a2a40d37b5c8eee3501d7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27afdbc406f21e7543a2a40d37b5c8eee3501d7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a02ebd828c8d9c68e8e972326ede8696fb3f6b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a02ebd828c8d9c68e8e972326ede8696fb3f6b7", "html_url": "https://github.com/rust-lang/rust/commit/7a02ebd828c8d9c68e8e972326ede8696fb3f6b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a02ebd828c8d9c68e8e972326ede8696fb3f6b7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30cbc9729654c66b9f54779d18f023e47112cdf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/30cbc9729654c66b9f54779d18f023e47112cdf2", "html_url": "https://github.com/rust-lang/rust/commit/30cbc9729654c66b9f54779d18f023e47112cdf2"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "a6bb39208a42d9d2b16a0c0ec4013d652ac18f20", "filename": "src/test/ui/const-generics/const_evaluatable_checked/let-bindings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a02ebd828c8d9c68e8e972326ede8696fb3f6b7/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a02ebd828c8d9c68e8e972326ede8696fb3f6b7/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.rs?ref=7a02ebd828c8d9c68e8e972326ede8696fb3f6b7", "patch": "@@ -4,8 +4,8 @@\n // We do not yet want to support let-bindings in abstract consts,\n // so this test should keep failing for now.\n fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-    //~^ ERROR constant expression depends\n-    //~| ERROR constant expression depends\n+    //~^ ERROR overly complex generic constant\n+    //~| ERROR overly complex generic constant\n     Default::default()\n }\n "}, {"sha": "95fcde52af820e06c94e043b198ab85b170e8daa", "filename": "src/test/ui/const-generics/const_evaluatable_checked/let-bindings.stderr", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a02ebd828c8d9c68e8e972326ede8696fb3f6b7/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a02ebd828c8d9c68e8e972326ede8696fb3f6b7/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Flet-bindings.stderr?ref=7a02ebd828c8d9c68e8e972326ede8696fb3f6b7", "patch": "@@ -1,18 +1,28 @@\n-error: constant expression depends on a generic parameter\n-  --> $DIR/let-bindings.rs:6:91\n+error: overly complex generic constant\n+  --> $DIR/let-bindings.rs:6:68\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                                                                                           ^^^^^^^ required by this bound in `test::{{constant}}#0`\n+   |                                                                    ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this may fail depending on what value the parameter takes\n+note: unsupported statement\n+  --> $DIR/let-bindings.rs:6:74\n+   |\n+LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n+   |                                                                          ^\n+   = help: consider moving this anonymous constant into a `const` function\n \n-error: constant expression depends on a generic parameter\n-  --> $DIR/let-bindings.rs:6:30\n+error: overly complex generic constant\n+  --> $DIR/let-bindings.rs:6:35\n    |\n LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this may fail depending on what value the parameter takes\n+note: unsupported statement\n+  --> $DIR/let-bindings.rs:6:41\n+   |\n+LL | fn test<const N: usize>() -> [u8; { let x = N; N + 1 }] where [u8; { let x = N; N + 1 }]: Default {\n+   |                                         ^\n+   = help: consider moving this anonymous constant into a `const` function\n \n error: aborting due to 2 previous errors\n "}]}