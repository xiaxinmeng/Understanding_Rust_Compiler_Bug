{"sha": "c3b904704031047ef9e1f7906d3faee15778ffe5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYjkwNDcwNDAzMTA0N2VmOWUxZjc5MDZkM2ZhZWUxNTc3OGZmZTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-03T07:41:47Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-03T11:48:42Z"}, "message": "syntax: make match arms store the expr directly.\n\nPreviously `ast::Arm` was always storing a single `ast::Expr` wrapped in an\n`ast::Block` (for historical reasons, AIUI), so we might as just store\nthat expr directly.\n\nCloses #3085.", "tree": {"sha": "c5effad359313654e966bdac21a1b6767010c94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5effad359313654e966bdac21a1b6767010c94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3b904704031047ef9e1f7906d3faee15778ffe5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3b904704031047ef9e1f7906d3faee15778ffe5", "html_url": "https://github.com/rust-lang/rust/commit/c3b904704031047ef9e1f7906d3faee15778ffe5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3b904704031047ef9e1f7906d3faee15778ffe5/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f3425a5550e7d8b58d782425b09eab20b91c1c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3425a5550e7d8b58d782425b09eab20b91c1c0", "html_url": "https://github.com/rust-lang/rust/commit/3f3425a5550e7d8b58d782425b09eab20b91c1c0"}], "stats": {"total": 87, "additions": 30, "deletions": 57}, "files": [{"sha": "8a83147facebc39b3fa39111e3fae89588ce8833", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -300,7 +300,7 @@ impl CFGBuilder {\n                     guard_exit = self.opt_expr(arm.guard, guard_exit); // 2\n                     let pats_exit = self.pats_any(arm.pats.as_slice(),\n                                                   guard_exit); // 3\n-                    let body_exit = self.block(arm.body, pats_exit);    // 4\n+                    let body_exit = self.expr(arm.body, pats_exit);      // 4\n                     self.add_contained_edge(body_exit, expr_exit);       // 5\n                 }\n                 expr_exit"}, {"sha": "74acc10abc030eccb7f6f878d9c41eb66ce67635", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -534,7 +534,7 @@ impl<'a, O:DataFlowOperator> PropagationContext<'a, O> {\n                     self.walk_pat_alternatives(arm.pats.as_slice(),\n                                                body,\n                                                loop_scopes);\n-                    self.walk_block(arm.body, body, loop_scopes);\n+                    self.walk_expr(arm.body, body, loop_scopes);\n                     join_bits(&self.dfcx.oper, body, in_out);\n                 }\n             }\n@@ -915,4 +915,3 @@ fn bit_str(bit: uint) -> ~str {\n     let lobits = 1 << (bit & 0xFF);\n     format!(\"[{}:{}-{:02x}]\", bit, byte, lobits)\n }\n-"}, {"sha": "f12c8ad0c829c305ffcd2395a49758decccc1653", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -1125,7 +1125,7 @@ impl Liveness {\n             let mut first_merge = true;\n             for arm in arms.iter() {\n                 let body_succ =\n-                    self.propagate_through_block(arm.body, succ);\n+                    self.propagate_through_expr(arm.body, succ);\n                 let guard_succ =\n                     self.propagate_through_opt_expr(arm.guard, body_succ);\n                 let arm_succ ="}, {"sha": "dc4325fdd72ae8f895298bcd45bc5948f1d0cbe1", "filename": "src/librustc/middle/moves.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fmoves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmoves.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -632,7 +632,7 @@ impl VisitContext {\n             self.consume_expr(*guard);\n         }\n \n-        self.consume_block(arm.body);\n+        self.consume_expr(arm.body);\n     }\n \n     pub fn use_pat(&mut self, pat: @Pat) {"}, {"sha": "07d0758c555c574c62df247472c7929f71e00bd0", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -4248,7 +4248,7 @@ impl Resolver {\n         self.check_consistent_bindings(arm);\n \n         visit::walk_expr_opt(self, arm.guard, ());\n-        self.resolve_block(arm.body);\n+        self.resolve_expr(arm.body);\n \n         let mut value_ribs = self.value_ribs.borrow_mut();\n         value_ribs.get().pop();"}, {"sha": "6247577c1a3c406d0407a8c2ae1a804d09bec007", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -1939,7 +1939,7 @@ fn trans_match_inner<'a>(scope_cx: &'a Block<'a>,\n         let cleanup_scope = fcx.push_custom_cleanup_scope();\n         bcx = insert_lllocals(bcx, arm_data.bindings_map,\n                               cleanup::CustomScope(cleanup_scope));\n-        bcx = controlflow::trans_block(bcx, arm_data.arm.body, dest);\n+        bcx = expr::trans_into(bcx, arm_data.arm.body, dest);\n         bcx = fcx.pop_and_trans_custom_cleanup_scope(bcx, cleanup_scope);\n         arm_cxs.push(bcx);\n     }"}, {"sha": "b76de7a6b8ae942156e725f54ae2ce08f67b0558", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -2665,7 +2665,7 @@ fn populate_scope_map(cx: &CrateContext,\n                             walk_expr(cx, *guard_exp, scope_stack, scope_map)\n                         }\n \n-                        walk_block(cx, arm_ref.body, scope_stack, scope_map);\n+                        walk_expr(cx, arm_ref.body, scope_stack, scope_map);\n                     })\n                 }\n             }"}, {"sha": "827acec30a38902f302d06edaed787cfce33966e", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -13,7 +13,7 @@\n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n use middle::ty;\n use middle::typeck::check::demand;\n-use middle::typeck::check::{check_block, check_expr_has_type, FnCtxt};\n+use middle::typeck::check::{check_expr, check_expr_has_type, FnCtxt};\n use middle::typeck::check::{instantiate_path, lookup_def};\n use middle::typeck::check::{structure_of, valid_range_bounds};\n use middle::typeck::infer;\n@@ -74,7 +74,7 @@ pub fn check_match(fcx: @FnCtxt,\n           },\n           None => ()\n         }\n-        check_block(fcx, arm.body);\n+        check_expr(fcx, arm.body);\n         let bty = fcx.node_ty(arm.body.id);\n         saw_err = saw_err || ty::type_is_error(bty);\n         if guard_err {"}, {"sha": "7efae9305e408e20df0bd6cc7c9ba8475500c011", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -491,7 +491,7 @@ pub enum Decl_ {\n pub struct Arm {\n     pats: Vec<@Pat> ,\n     guard: Option<@Expr>,\n-    body: P<Block>,\n+    body: @Expr,\n }\n \n #[deriving(Clone, Eq, Encodable, Decodable, Hash)]"}, {"sha": "8296ee34c5452690bf31552368afcfc6e4f4a881", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -679,7 +679,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         ast::Arm {\n             pats: pats,\n             guard: None,\n-            body: self.block_expr(expr)\n+            body: expr\n         }\n     }\n "}, {"sha": "190f009103f5f67a833969acbd324f74dc0a6cdf", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -110,7 +110,7 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n                         let arm = ast::Arm {\n                             pats: vec!(cx.pat_wild(span)),\n                             guard: Some(guard),\n-                            body: cx.block_expr(body),\n+                            body: body,\n                         };\n \n                         arms.push(arm);\n@@ -129,7 +129,7 @@ fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure\n             let arm = ast::Arm {\n                 pats: vec!(cx.pat_wild(trait_span)),\n                 guard: None,\n-                body: cx.block_expr(cx.expr_none(trait_span)),\n+                body: cx.expr_none(trait_span),\n             };\n             arms.push(arm);\n "}, {"sha": "e5b90393e0ad388db0e36adae35499082aa06a00", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -117,7 +117,7 @@ pub trait Folder {\n         Arm {\n             pats: a.pats.map(|x| self.fold_pat(*x)),\n             guard: a.guard.map(|x| self.fold_expr(x)),\n-            body: self.fold_block(a.body),\n+            body: self.fold_expr(a.body),\n         }\n     }\n \n@@ -933,4 +933,3 @@ mod test {\n                      ~\"zz!zz((zz$zz:zz$(zz $zz:zz)zz+=>(zz$(zz$zz$zz)+)))\");\n     }\n }\n-"}, {"sha": "341151117f0eccabcc59b518c22af32ebf4b6fbe", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -2634,16 +2634,7 @@ impl Parser {\n                 self.eat(&token::COMMA);\n             }\n \n-            let blk = P(ast::Block {\n-                view_items: Vec::new(),\n-                stmts: Vec::new(),\n-                expr: Some(expr),\n-                id: ast::DUMMY_NODE_ID,\n-                rules: DefaultBlock,\n-                span: expr.span,\n-            });\n-\n-            arms.push(ast::Arm { pats: pats, guard: guard, body: blk });\n+            arms.push(ast::Arm { pats: pats, guard: guard, body: expr });\n         }\n         let hi = self.span.hi;\n         self.bump();"}, {"sha": "e8c32d07c749874ec76170ad770d6a6986739b9a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -1352,38 +1352,22 @@ pub fn print_expr(s: &mut State, expr: &ast::Expr) -> io::IoResult<()> {\n             }\n             try!(word_space(s, \"=>\"));\n \n-            // Extract the expression from the extra block the parser adds\n-            // in the case of foo => expr\n-            if arm.body.view_items.is_empty() &&\n-                arm.body.stmts.is_empty() &&\n-                arm.body.rules == ast::DefaultBlock &&\n-                arm.body.expr.is_some()\n-            {\n-                match arm.body.expr {\n-                    Some(expr) => {\n-                        match expr.node {\n-                            ast::ExprBlock(blk) => {\n-                                // the block will close the pattern's ibox\n-                                try!(print_block_unclosed_indent(\n-                                    s, blk, indent_unit));\n-                            }\n-                            _ => {\n-                                try!(end(s)); // close the ibox for the pattern\n-                                try!(print_expr(s, expr));\n-                            }\n-                        }\n-                        if !expr_is_simple_block(expr)\n-                            && i < len - 1 {\n-                            try!(word(&mut s.s, \",\"));\n-                        }\n-                        try!(end(s)); // close enclosing cbox\n-                    }\n-                    None => fail!()\n+            match arm.body.node {\n+                ast::ExprBlock(blk) => {\n+                    // the block will close the pattern's ibox\n+                    try!(print_block_unclosed_indent(\n+                                s, blk, indent_unit));\n                 }\n-            } else {\n-                // the block will close the pattern's ibox\n-                try!(print_block_unclosed_indent(s, arm.body, indent_unit));\n+                _ => {\n+                    try!(end(s)); // close the ibox for the pattern\n+                    try!(print_expr(s, arm.body));\n+                }\n+            }\n+            if !expr_is_simple_block(expr)\n+                && i < len - 1 {\n+                try!(word(&mut s.s, \",\"));\n             }\n+            try!(end(s)); // close enclosing cbox\n         }\n         try!(bclose_(s, expr.span, indent_unit));\n       }"}, {"sha": "d25d1a8cc35d91c605c1c585dbc60dffbf1ccc86", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3b904704031047ef9e1f7906d3faee15778ffe5/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c3b904704031047ef9e1f7906d3faee15778ffe5", "patch": "@@ -765,5 +765,5 @@ pub fn walk_arm<E: Clone, V: Visitor<E>>(visitor: &mut V, arm: &Arm, env: E) {\n         visitor.visit_pat(*pattern, env.clone())\n     }\n     walk_expr_opt(visitor, arm.guard, env.clone());\n-    visitor.visit_block(arm.body, env)\n+    visitor.visit_expr(arm.body, env)\n }"}]}