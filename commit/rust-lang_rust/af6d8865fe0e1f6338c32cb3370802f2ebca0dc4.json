{"sha": "af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNmQ4ODY1ZmUwZTFmNjMzOGMzMmNiMzM3MDgwMmYyZWJjYTBkYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-14T12:28:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-14T12:28:23Z"}, "message": "Auto merge of #72187 - RalfJung:rollup-a7a9jdi, r=RalfJung\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #71525 (`prefix` should not be mutable.)\n - #71741 (Pointer printing: do not print 0 offset)\n - #71870 (Be slightly more precise about any::type_name()'s guarantees.)\n - #71909 (Document From trait for Option implementations)\n - #71964 (Fix bootstrap failing on win32)\n - #72137 (Clean up E0581 explanation)\n - #72138 (Add doc comment for `rustc_middle::mir::mono::Linkage`)\n - #72150 (Remove UnnormalizedProjection)\n - #72151 (Update books)\n - #72163 (docs: remove comment referencing non-existent method)\n - #72169 (Clean up E0582 explanation)\n - #72183 (Fix Arc::decr_strong_count doc test)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2fd89879edd8b151150a11ebfca69825885616d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fd89879edd8b151150a11ebfca69825885616d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "html_url": "https://github.com/rust-lang/rust/commit/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c34d8d6629506a596215886e5fc4bb2b04b00ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c34d8d6629506a596215886e5fc4bb2b04b00ae", "html_url": "https://github.com/rust-lang/rust/commit/7c34d8d6629506a596215886e5fc4bb2b04b00ae"}, {"sha": "56986bebc23788146dc46606d5af39b6354d6ad3", "url": "https://api.github.com/repos/rust-lang/rust/commits/56986bebc23788146dc46606d5af39b6354d6ad3", "html_url": "https://github.com/rust-lang/rust/commit/56986bebc23788146dc46606d5af39b6354d6ad3"}], "stats": {"total": 467, "additions": 228, "deletions": 239}, "files": [{"sha": "b7d0fac5be31fdca554d690289ce8756c0df6fac", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -180,13 +180,16 @@ def format_build_time(duration):\n def default_build_triple():\n     \"\"\"Build triple as in LLVM\"\"\"\n     default_encoding = sys.getdefaultencoding()\n-    required = not sys.platform == 'win32'\n-    ostype = require([\"uname\", \"-s\"], exit=required).decode(default_encoding)\n-    cputype = require(['uname', '-m'], exit=required).decode(default_encoding)\n+    required = sys.platform != 'win32'\n+    ostype = require([\"uname\", \"-s\"], exit=required)\n+    cputype = require(['uname', '-m'], exit=required)\n \n     if ostype is None or cputype is None:\n         return 'x86_64-pc-windows-msvc'\n \n+    ostype = ostype.decode(default_encoding)\n+    cputype = cputype.decode(default_encoding)\n+\n     # The goal here is to come up with the same triple as LLVM would,\n     # at least for the subset of platforms we're willing to target.\n     ostype_mapper = {"}, {"sha": "6247be15a7f7509559f7981ee2209b9e0cc121df", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1 +1 @@\n-Subproject commit e37c0e84e2ef73d3a4ebffda8011db6814a3b02d\n+Subproject commit 6247be15a7f7509559f7981ee2209b9e0cc121df"}, {"sha": "49270740c7a4bff2763e6bc730b191d45b7d5167", "filename": "src/doc/edition-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fedition-guide?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1 +1 @@\n-Subproject commit 8204c1d123472cd17f0c1c5c77300ae802eb0271\n+Subproject commit 49270740c7a4bff2763e6bc730b191d45b7d5167"}, {"sha": "366c50a03bed928589771eba8a6f18e0c0c01d23", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1 +1 @@\n-Subproject commit 40beccdf1bb8eb9184a2e3b42db8b8c6e394247f\n+Subproject commit 366c50a03bed928589771eba8a6f18e0c0c01d23"}, {"sha": "d1517d4e3f29264c5c67bce2658516bb5202c800", "filename": "src/doc/nomicon", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1 +1 @@\n-Subproject commit 4d2d275997746d35eabfc4d992dfbdcce2f626ed\n+Subproject commit d1517d4e3f29264c5c67bce2658516bb5202c800"}, {"sha": "892b928b565e35d25b6f9c47faee03b94bc41489", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1 +1 @@\n-Subproject commit ed22e6fbfcb6ce436e9ea3b4bb4a55b2fb50a57e\n+Subproject commit 892b928b565e35d25b6f9c47faee03b94bc41489"}, {"sha": "ab072b14393cbd9e8a1d1d75879bf51e27217bbb", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1 +1 @@\n-Subproject commit ffc99581689fe2455908aaef5f5cf50dd03bb8f5\n+Subproject commit ab072b14393cbd9e8a1d1d75879bf51e27217bbb"}, {"sha": "dbee9d27d8ac2043c744665ab713f35681accc9f", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -835,12 +835,14 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// unsafe {\n     ///     let ptr = Arc::into_raw(five);\n-    ///     Arc::decr_strong_count(ptr);\n+    ///     Arc::incr_strong_count(ptr);\n     ///\n-    ///     // This assertion is deterministic because we haven't shared\n+    ///     // Those assertions are deterministic because we haven't shared\n     ///     // the `Arc` between threads.\n     ///     let five = Arc::from_raw(ptr);\n-    ///     assert_eq!(0, Arc::strong_count(&five));\n+    ///     assert_eq!(2, Arc::strong_count(&five));\n+    ///     Arc::decr_strong_count(ptr);\n+    ///     assert_eq!(1, Arc::strong_count(&five));\n     /// }\n     /// ```\n     #[inline]"}, {"sha": "79b6304958d51332af85ff9987ba5c8740feb385", "filename": "src/libcore/any.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -446,14 +446,16 @@ impl TypeId {\n /// # Note\n ///\n /// This is intended for diagnostic use. The exact contents and format of the\n-/// string are not specified, other than being a best-effort description of the\n-/// type. For example, `type_name::<Option<String>>()` could return the\n-/// `\"Option<String>\"` or `\"std::option::Option<std::string::String>\"`, but not\n-/// `\"foobar\"`. In addition, the output may change between versions of the\n-/// compiler.\n+/// string returned are not specified, other than being a best-effort\n+/// description of the type. For example, amongst the strings\n+/// that `type_name::<Option<String>>()` might return are `\"Option<String>\"` and\n+/// `\"std::option::Option<std::string::String>\"`.\n ///\n-/// The type name should not be considered a unique identifier of a type;\n-/// multiple types may share the same type name.\n+/// The returned string must not be considered to be a unique identifier of a\n+/// type as multiple types may map to the same type name. Similarly, there is no\n+/// guarantee that all parts of a type will appear in the returned string: for\n+/// example, lifetime specifiers are currently not included. In addition, the\n+/// output may change between versions of the compiler.\n ///\n /// The current implementation uses the same infrastructure as compiler\n /// diagnostics and debuginfo, but this is not guaranteed."}, {"sha": "e8483875c97e5b87eebea50b5b4bd253ab6914d5", "filename": "src/libcore/option.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1357,20 +1357,65 @@ impl<'a, T> IntoIterator for &'a mut Option<T> {\n \n #[stable(since = \"1.12.0\", feature = \"option_from\")]\n impl<T> From<T> for Option<T> {\n+    /// Copies `val` into a new `Some`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let o: Option<u8> = Option::from(67);\n+    ///\n+    /// assert_eq!(Some(67), o);\n+    /// ```\n     fn from(val: T) -> Option<T> {\n         Some(val)\n     }\n }\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n impl<'a, T> From<&'a Option<T>> for Option<&'a T> {\n+    /// Converts from `&Option<T>` to `Option<&T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Converts an `Option<`[`String`]`>` into an `Option<`[`usize`]`>`, preserving the original.\n+    /// The [`map`] method takes the `self` argument by value, consuming the original,\n+    /// so this technique uses `as_ref` to first take an `Option` to a reference\n+    /// to the value inside the original.\n+    ///\n+    /// [`map`]: ../../std/option/enum.Option.html#method.map\n+    /// [`String`]: ../../std/string/struct.String.html\n+    /// [`usize`]: ../../std/primitive.usize.html\n+    ///\n+    /// ```\n+    /// let s: Option<String> = Some(String::from(\"Hello, Rustaceans!\"));\n+    /// let o: Option<usize> = Option::from(&s).map(|ss: &String| ss.len());\n+    ///\n+    /// println!(\"Can still print s: {:?}\", s);\n+    ///\n+    /// assert_eq!(o, Some(18));\n+    /// ```\n     fn from(o: &'a Option<T>) -> Option<&'a T> {\n         o.as_ref()\n     }\n }\n \n #[stable(feature = \"option_ref_from_ref_option\", since = \"1.30.0\")]\n impl<'a, T> From<&'a mut Option<T>> for Option<&'a mut T> {\n+    /// Converts from `&mut Option<T>` to `Option<&mut T>`\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut s = Some(String::from(\"Hello\"));\n+    /// let o: Option<&mut String> = Option::from(&mut s);\n+    ///\n+    /// match o {\n+    ///     Some(t) => *t = String::from(\"Hello, Rustaceans!\"),\n+    ///     None => (),\n+    /// }\n+    ///\n+    /// assert_eq!(s, Some(String::from(\"Hello, Rustaceans!\")));\n+    /// ```\n     fn from(o: &'a mut Option<T>) -> Option<&'a mut T> {\n         o.as_mut()\n     }"}, {"sha": "1d8730db546029ef23b339c6e8791bf25cc3be36", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -198,7 +198,6 @@ pub fn push_debuginfo_type_name<'tcx>(\n         ty::Error\n         | ty::Infer(_)\n         | ty::Placeholder(..)\n-        | ty::UnnormalizedProjection(..)\n         | ty::Projection(..)\n         | ty::Bound(..)\n         | ty::Opaque(..)"}, {"sha": "89f6e3269ec36856a83a5cd23a72d39e0950ce33", "filename": "src/librustc_error_codes/error_codes/E0581.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_error_codes%2Ferror_codes%2FE0581.md", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_error_codes%2Ferror_codes%2FE0581.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0581.md?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1,4 +1,4 @@\n-In a `fn` type, a lifetime appears only in the return type,\n+In a `fn` type, a lifetime appears only in the return type\n and not in the arguments types.\n \n Erroneous code example:\n@@ -10,8 +10,11 @@ fn main() {\n }\n ```\n \n-To fix this issue, either use the lifetime in the arguments, or use\n-`'static`. Example:\n+The problem here is that the lifetime isn't contrained by any of the arguments,\n+making it impossible to determine how long it's supposed to live.\n+\n+To fix this issue, either use the lifetime in the arguments, or use the\n+`'static` lifetime. Example:\n \n ```\n fn main() {"}, {"sha": "e50cc60ea33023881673071ea0b6e8bf21351a54", "filename": "src/librustc_error_codes/error_codes/E0582.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_error_codes%2Ferror_codes%2FE0582.md", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_error_codes%2Ferror_codes%2FE0582.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0582.md?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1,5 +1,5 @@\n-A lifetime appears only in an associated-type binding,\n-and not in the input types to the trait.\n+A lifetime is only present in an associated-type binding, and not in the input\n+types to the trait.\n \n Erroneous code example:\n "}, {"sha": "5551b56ab797b02e23df7566836d2f156b5daa08", "filename": "src/librustc_infer/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -415,7 +415,6 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n             | ty::Never\n             | ty::Tuple(..)\n             | ty::Projection(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Foreign(..)\n             | ty::Param(..)\n             | ty::Opaque(..) => {"}, {"sha": "0141ba8273775aa1b20b8ecdb155d400ca24dcad", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -554,7 +554,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     let output = bound_output.skip_binder();\n                     err.span_label(e.span, &format!(\"this method call resolves to `{:?}`\", output));\n                     let kind = &output.kind;\n-                    if let ty::Projection(proj) | ty::UnnormalizedProjection(proj) = kind {\n+                    if let ty::Projection(proj) = kind {\n                         if let Some(span) = self.tcx.hir().span_if_local(proj.item_def_id) {\n                             err.span_label(span, &format!(\"`{:?}` defined here\", output));\n                         }"}, {"sha": "c9ed687eaf2567ef8fa34077de3875dffc388479", "filename": "src/librustc_infer/infer/freshen.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ffreshen.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -204,7 +204,6 @@ impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n             | ty::Never\n             | ty::Tuple(..)\n             | ty::Projection(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Foreign(..)\n             | ty::Param(..)\n             | ty::Closure(..)"}, {"sha": "703c2a7a443a9721a1dfca6a0fa1b35bd8b54f5e", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -888,7 +888,6 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n             | ty::Placeholder(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Projection(..)\n             | ty::Opaque(..)\n             | ty::FnDef(..) => bug!(\"unexpected type in foreign function: {:?}\", ty),"}, {"sha": "70cc546199b79e31c6db9b9cfac976769e884c6c", "filename": "src/librustc_middle/mir/interpret/pointer.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -89,27 +89,35 @@ pub struct Pointer<Tag = ()> {\n \n static_assert_size!(Pointer, 16);\n \n+/// Print the address of a pointer (without the tag)\n+fn print_ptr_addr<Tag>(ptr: &Pointer<Tag>, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    // Forward `alternate` flag to `alloc_id` printing.\n+    if f.alternate() {\n+        write!(f, \"{:#?}\", ptr.alloc_id)?;\n+    } else {\n+        write!(f, \"{:?}\", ptr.alloc_id)?;\n+    }\n+    // Print offset only if it is non-zero.\n+    if ptr.offset.bytes() > 0 {\n+        write!(f, \"+0x{:x}\", ptr.offset.bytes())?;\n+    }\n+    Ok(())\n+}\n+\n // We want the `Debug` output to be readable as it is used by `derive(Debug)` for\n // all the Miri types.\n // We have to use `Debug` output for the tag, because `()` does not implement\n // `Display` so we cannot specialize that.\n impl<Tag: fmt::Debug> fmt::Debug for Pointer<Tag> {\n     default fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if f.alternate() {\n-            write!(f, \"{:#?}+0x{:x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n-        } else {\n-            write!(f, \"{:?}+0x{:x}[{:?}]\", self.alloc_id, self.offset.bytes(), self.tag)\n-        }\n+        print_ptr_addr(self, f)?;\n+        write!(f, \"[{:?}]\", self.tag)\n     }\n }\n // Specialization for no tag\n impl fmt::Debug for Pointer<()> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if f.alternate() {\n-            write!(f, \"{:#?}+0x{:x}\", self.alloc_id, self.offset.bytes())\n-        } else {\n-            write!(f, \"{:?}+0x{:x}\", self.alloc_id, self.offset.bytes())\n-        }\n+        print_ptr_addr(self, f)\n     }\n }\n "}, {"sha": "c889dbc0a449848603e6c7901b209fb374376982", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -239,6 +239,9 @@ pub struct CodegenUnit<'tcx> {\n     size_estimate: Option<usize>,\n }\n \n+/// Specifies the linkage type for a `MonoItem`.\n+///\n+/// See https://llvm.org/docs/LangRef.html#linkage-types for more details about these variants.\n #[derive(Copy, Clone, PartialEq, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub enum Linkage {\n     External,"}, {"sha": "e030125b5b15c3adbb27d46f4bf6a80d1e717046", "filename": "src/librustc_middle/traits/query.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Ftraits%2Fquery.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -255,8 +255,6 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::Infer(_)\n         | ty::Bound(..)\n         | ty::Generator(..) => false,\n-\n-        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n     }\n }\n "}, {"sha": "7feb080d4b8d421d844090ae8eb8e8f754e727b0", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1878,7 +1878,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             Bound,\n             Param,\n             Infer,\n-            UnnormalizedProjection,\n             Projection,\n             Opaque,\n             Foreign"}, {"sha": "cf63a659e6c0f652e656c8300e1e01f0e73a5e21", "filename": "src/librustc_middle/ty/error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ferror.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -284,7 +284,6 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::FreshIntTy(_)) => \"fresh integral type\".into(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"fresh floating-point type\".into(),\n             ty::Projection(_) => \"associated type\".into(),\n-            ty::UnnormalizedProjection(_) => \"non-normalized associated type\".into(),\n             ty::Param(p) => format!(\"type parameter `{}`\", p).into(),\n             ty::Opaque(..) => \"opaque type\".into(),\n             ty::Error => \"type error\".into(),\n@@ -323,7 +322,6 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Placeholder(..) => \"higher-ranked type\".into(),\n             ty::Bound(..) => \"bound type variable\".into(),\n             ty::Projection(_) => \"associated type\".into(),\n-            ty::UnnormalizedProjection(_) => \"associated type\".into(),\n             ty::Param(_) => \"type parameter\".into(),\n             ty::Opaque(..) => \"opaque type\".into(),\n         }"}, {"sha": "16d8e37940763646d83655fae5b3d63da737319e", "filename": "src/librustc_middle/ty/fast_reject.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ffast_reject.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -90,7 +90,6 @@ pub fn simplify_type(\n         ty::Never => Some(NeverSimplifiedType),\n         ty::Tuple(ref tys) => Some(TupleSimplifiedType(tys.len())),\n         ty::FnPtr(ref f) => Some(FunctionSimplifiedType(f.skip_binder().inputs().len())),\n-        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n         ty::Projection(_) | ty::Param(_) => {\n             if can_simplify_params {\n                 // In normalized types, projections don't unify with"}, {"sha": "042ffc4d1e55013a5fbd29c2b754af459234b38a", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -121,11 +121,6 @@ impl FlagComputation {\n                 self.add_projection_ty(data);\n             }\n \n-            &ty::UnnormalizedProjection(ref data) => {\n-                self.add_flags(TypeFlags::HAS_TY_PROJECTION);\n-                self.add_projection_ty(data);\n-            }\n-\n             &ty::Opaque(_, substs) => {\n                 self.add_flags(TypeFlags::HAS_TY_OPAQUE);\n                 self.add_substs(substs);"}, {"sha": "1339281667e7d933e6ff6b62793c5bebecad5ddb", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1241,11 +1241,9 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                 tcx.layout_raw(param_env.and(normalized))?\n             }\n \n-            ty::Bound(..)\n-            | ty::Placeholder(..)\n-            | ty::UnnormalizedProjection(..)\n-            | ty::GeneratorWitness(..)\n-            | ty::Infer(_) => bug!(\"Layout::compute: unexpected type `{}`\", ty),\n+            ty::Bound(..) | ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {\n+                bug!(\"Layout::compute: unexpected type `{}`\", ty)\n+            }\n \n             ty::Param(_) | ty::Error => {\n                 return Err(LayoutError::Unknown(ty));\n@@ -2138,7 +2136,6 @@ where\n             }\n \n             ty::Projection(_)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Bound(..)\n             | ty::Placeholder(..)\n             | ty::Opaque(..)"}, {"sha": "4f9b87997dbb9fcb25df92e79e4ffe09217d4c42", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -555,7 +555,7 @@ bitflags! {\n                                           | TypeFlags::HAS_CT_PLACEHOLDER.bits\n                                           | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n \n-        /// Does this have [Projection] or [UnnormalizedProjection]?\n+        /// Does this have [Projection]?\n         const HAS_TY_PROJECTION           = 1 << 10;\n         /// Does this have [Opaque]?\n         const HAS_TY_OPAQUE               = 1 << 11;"}, {"sha": "afd670b85775b2de643c31cca6c93dda8ab3d06c", "filename": "src/librustc_middle/ty/outlives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Foutlives.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -135,8 +135,6 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n                 }\n             }\n \n-            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n             // We assume that inference variables are fully resolved.\n             // So, if we encounter an inference variable, just record\n             // the unresolved variable as a component."}, {"sha": "69b36980bd73cee0f711682982bd12385fdd0fd4", "filename": "src/librustc_middle/ty/print/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fmod.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -294,7 +294,6 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         | ty::FnPtr(_)\n         | ty::Projection(_)\n         | ty::Placeholder(..)\n-        | ty::UnnormalizedProjection(..)\n         | ty::Param(_)\n         | ty::Opaque(..)\n         | ty::Infer(_)"}, {"sha": "41a6cd5466f5efc2956a9efab95f32dd80332db4", "filename": "src/librustc_middle/ty/print/obsolete.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -148,7 +148,6 @@ impl DefPathBasedNames<'tcx> {\n             | ty::Bound(..)\n             | ty::Infer(_)\n             | ty::Placeholder(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Projection(..)\n             | ty::Param(_)\n             | ty::GeneratorWitness(_)"}, {"sha": "64909cd0c467afb2d71a73280a4e8431c0a9e897", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -540,9 +540,6 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(print_def_path(def_id, &[]));\n             }\n             ty::Projection(ref data) => p!(print(data)),\n-            ty::UnnormalizedProjection(ref data) => {\n-                p!(write(\"Unnormalized(\"), print(data), write(\")\"))\n-            }\n             ty::Placeholder(placeholder) => p!(write(\"Placeholder({:?})\", placeholder)),\n             ty::Opaque(def_id, substs) => {\n                 // FIXME(eddyb) print this with `print_def_path`."}, {"sha": "d68bc7221f92dd5e692daaea025edad1bff4fdac", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -477,11 +477,6 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             Ok(tcx.mk_fn_ptr(fty))\n         }\n \n-        (ty::UnnormalizedProjection(a_data), ty::UnnormalizedProjection(b_data)) => {\n-            let projection_ty = relation.relate(a_data, b_data)?;\n-            Ok(tcx.mk_ty(ty::UnnormalizedProjection(projection_ty)))\n-        }\n-\n         // these two are already handled downstream in case of lazy normalization\n         (ty::Projection(a_data), ty::Projection(b_data)) => {\n             let projection_ty = relation.relate(a_data, b_data)?;"}, {"sha": "680b718792199605cf420ffbaafdd4094ded0399", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -888,9 +888,6 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.fold_with(folder)),\n             ty::Closure(did, substs) => ty::Closure(did, substs.fold_with(folder)),\n             ty::Projection(ref data) => ty::Projection(data.fold_with(folder)),\n-            ty::UnnormalizedProjection(ref data) => {\n-                ty::UnnormalizedProjection(data.fold_with(folder))\n-            }\n             ty::Opaque(did, substs) => ty::Opaque(did, substs.fold_with(folder)),\n \n             ty::Bool\n@@ -931,9 +928,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::Generator(_did, ref substs, _) => substs.visit_with(visitor),\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n-            ty::Projection(ref data) | ty::UnnormalizedProjection(ref data) => {\n-                data.visit_with(visitor)\n-            }\n+            ty::Projection(ref data) => data.visit_with(visitor),\n             ty::Opaque(_, ref substs) => substs.visit_with(visitor),\n \n             ty::Bool"}, {"sha": "2ad673b2c194379cc77d6a532287b61b0e5be3d1", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -181,11 +181,6 @@ pub enum TyKind<'tcx> {\n     /// `<T as Trait<..>>::N`.\n     Projection(ProjectionTy<'tcx>),\n \n-    /// A placeholder type used when we do not have enough information\n-    /// to normalize the projection of an associated type to an\n-    /// existing concrete type. Currently only used with chalk-engine.\n-    UnnormalizedProjection(ProjectionTy<'tcx>),\n-\n     /// Opaque (`impl Trait`) type found in a return type.\n     /// The `DefId` comes either from\n     /// * the `impl Trait` ast::Ty node,\n@@ -2186,8 +2181,6 @@ impl<'tcx> TyS<'tcx> {\n \n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,\n \n-            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n             ty::Infer(ty::TyVar(_)) => false,\n \n             ty::Bound(..)"}, {"sha": "f9c10488ffbc0350bafac6e154ba0be381063b0b", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -745,8 +745,7 @@ impl<'tcx> ty::TyS<'tcx> {\n             | ty::Opaque(..)\n             | ty::Param(_)\n             | ty::Placeholder(_)\n-            | ty::Projection(_)\n-            | ty::UnnormalizedProjection(_) => false,\n+            | ty::Projection(_) => false,\n         }\n     }\n \n@@ -1077,7 +1076,6 @@ pub fn needs_drop_components(\n         // These require checking for `Copy` bounds or `Adt` destructors.\n         ty::Adt(..)\n         | ty::Projection(..)\n-        | ty::UnnormalizedProjection(..)\n         | ty::Param(_)\n         | ty::Bound(..)\n         | ty::Placeholder(..)"}, {"sha": "0093c60d7689b6d09dc6871154fc3c3b08dd4443", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -127,7 +127,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 stack.push(ty.into());\n                 stack.push(lt.into());\n             }\n-            ty::Projection(data) | ty::UnnormalizedProjection(data) => {\n+            ty::Projection(data) => {\n                 stack.extend(data.substs.iter().copied().rev());\n             }\n             ty::Dynamic(obj, lt) => {"}, {"sha": "71cca725982f5bdd4ec16e6e4ca085c089a403f8", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -60,7 +60,6 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n             | ty::FnDef(def_id, substs)\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n-            | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             ty::Foreign(def_id) => self.print_def_path(def_id, &[]),"}, {"sha": "f6020641d3e28ea4a3198cba7075403c89b86165", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -566,7 +566,6 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n             | ty::Bound(..)\n             | ty::Param(..)\n             | ty::Opaque(..)\n-            | ty::UnnormalizedProjection(..)\n             | ty::Projection(..)\n             | ty::GeneratorWitness(..) => bug!(\"Encountered invalid type {:?}\", ty),\n         }"}, {"sha": "19b983018c958e362fa32f37c85eb740ad6f4214", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -223,7 +223,7 @@ impl Scope {\n     }\n }\n \n-/// A trait that determined how [DropTree::lower_to_mir] creates its blocks and\n+/// A trait that determined how [DropTree::build_mir] creates its blocks and\n /// links to any entry nodes.\n trait DropTreeBuilder<'tcx> {\n     /// Create a new block for the tree. This should call either"}, {"sha": "b474b23ac4f5ce1a5f1bb5d0c6b49d99a3aeaa0b", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -160,7 +160,7 @@ where\n                     }\n                 }\n             }\n-            ty::Projection(proj) | ty::UnnormalizedProjection(proj) => {\n+            ty::Projection(proj) => {\n                 if self.def_id_visitor.skip_assoc_tys() {\n                     // Visitors searching for minimal visibility/reachability want to\n                     // conservatively approximate associated types like `<Type as Trait>::Alias`"}, {"sha": "3038b0c6bd7eb26062d824e718fc07b16381f881", "filename": "src/librustc_symbol_mangling/legacy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flegacy.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -216,7 +216,6 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             ty::FnDef(def_id, substs)\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n-            | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => self.print_def_path(def_id, substs),\n             _ => self.pretty_print_type(ty),\n@@ -264,7 +263,6 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n             ty::FnDef(..)\n             | ty::Opaque(..)\n             | ty::Projection(_)\n-            | ty::UnnormalizedProjection(_)\n             | ty::Closure(..)\n             | ty::Generator(..)\n                 if trait_ref.is_none() =>"}, {"sha": "3b439e09a9d150f2fc18b3554fad069f59f167aa", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -413,7 +413,6 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n             | ty::FnDef(def_id, substs)\n             | ty::Opaque(def_id, substs)\n             | ty::Projection(ty::ProjectionTy { item_def_id: def_id, substs })\n-            | ty::UnnormalizedProjection(ty::ProjectionTy { item_def_id: def_id, substs })\n             | ty::Closure(def_id, substs)\n             | ty::Generator(def_id, substs, _) => {\n                 self = self.print_def_path(def_id, substs)?;"}, {"sha": "85c2f9246afcc6e92b8d2d07136414fb9511c2b0", "filename": "src/librustc_trait_selection/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -567,9 +567,8 @@ fn ty_is_non_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> Option<Ty<'_>>\n \n         ty::Error => None,\n \n-        ty::UnnormalizedProjection(..)\n-        | ty::Closure(..)\n-        | ty::Generator(..)\n-        | ty::GeneratorWitness(..) => bug!(\"ty_is_local invoked on unexpected type: {:?}\", ty),\n+        ty::Closure(..) | ty::Generator(..) | ty::GeneratorWitness(..) => {\n+            bug!(\"ty_is_local invoked on unexpected type: {:?}\", ty)\n+        }\n     }\n }"}, {"sha": "1620bdfa66e1b531cf996b7e6ef3a144b7552a75", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1194,7 +1194,6 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ty::Foreign(..) => Some(19),\n                 ty::GeneratorWitness(..) => Some(20),\n                 ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => None,\n-                ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             }\n         }\n "}, {"sha": "856a2111fc82c8da116de604909a7ddef4f4b789", "filename": "src/librustc_trait_selection/traits/query/dropck_outlives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -135,7 +135,5 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         | ty::Infer(_)\n         | ty::Bound(..)\n         | ty::Generator(..) => false,\n-\n-        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n     }\n }"}, {"sha": "f0ff30232b96dea78c6e7ef88cae76afcddb4acd", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -2178,8 +2178,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n-            ty::UnnormalizedProjection(..)\n-            | ty::Placeholder(..)\n+            ty::Placeholder(..)\n             | ty::Bound(..)\n             | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n@@ -2250,8 +2249,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ambiguous\n             }\n \n-            ty::UnnormalizedProjection(..)\n-            | ty::Placeholder(..)\n+            ty::Placeholder(..)\n             | ty::Bound(..)\n             | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n                 bug!(\"asked to assemble builtin bounds of unexpected type: {:?}\", self_ty);\n@@ -2284,8 +2282,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Never\n             | ty::Char => Vec::new(),\n \n-            ty::UnnormalizedProjection(..)\n-            | ty::Placeholder(..)\n+            ty::Placeholder(..)\n             | ty::Dynamic(..)\n             | ty::Param(..)\n             | ty::Foreign(..)"}, {"sha": "ba7ec96775c047dd5688c55627480955dadd6987", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -389,8 +389,6 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     self.compute_projection(data);\n                 }\n \n-                ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n                 ty::Adt(def, substs) => {\n                     // WfNominalType\n                     let obligations = self.nominal_obligations(def.did, substs);"}, {"sha": "aacbd311d1deca3ffb491e037c6ae1782d344f11", "filename": "src/librustc_traits/chalk/lowering.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_traits%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk%2Flowering.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -353,7 +353,6 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Ty<RustInterner<'tcx>>> for Ty<'tcx> {\n                 apply(chalk_ir::TypeName::Tuple(substs.len()), substs.lower_into(interner))\n             }\n             Projection(proj) => TyData::Alias(proj.lower_into(interner)).intern(interner),\n-            UnnormalizedProjection(_proj) => unimplemented!(),\n             Opaque(_def_id, _substs) => unimplemented!(),\n             // This should have been done eagerly prior to this, and all Params\n             // should have been substituted to placeholders"}, {"sha": "08475d6a09db14d4b1c2ec8835ab6a659334ba8c", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -271,8 +271,6 @@ fn dtorck_constraint_for_ty<'tcx>(\n             constraints.dtorck_types.push(ty);\n         }\n \n-        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n         ty::Placeholder(..) | ty::Bound(..) | ty::Infer(..) | ty::Error => {\n             // By the time this code runs, all type variables ought to\n             // be fully resolved."}, {"sha": "1aa11a761c821eb4fca286be48bd534c3f8d3d15", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -47,8 +47,6 @@ fn sized_constraint_for_ty<'tcx>(\n             vec![ty]\n         }\n \n-        UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n-\n         Param(..) => {\n             // perf hack: if there is a `T: Sized` bound, then\n             // we know that `T` is Sized and do not need to check"}, {"sha": "46d6706cbf42925e674fb8d71c4b05ba94ea6e44", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -115,7 +115,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty::Foreign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n             ty::Projection(ref pi) => Some(PointerKind::OfProjection(pi)),\n-            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             ty::Opaque(def_id, substs) => Some(PointerKind::OfOpaque(def_id, substs)),\n             ty::Param(ref p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information."}, {"sha": "6831a995df574d5624f656eb82af3150e8b3e25a", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -708,24 +708,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // For now, don't suggest casting with `as`.\n         let can_cast = false;\n \n-        let mut prefix = String::new();\n-        if let Some(hir::Node::Expr(hir::Expr {\n-            kind: hir::ExprKind::Struct(_, fields, _), ..\n+        let prefix = if let Some(hir::Node::Expr(hir::Expr {\n+            kind: hir::ExprKind::Struct(_, fields, _),\n+            ..\n         })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n         {\n             // `expr` is a literal field for a struct, only suggest if appropriate\n-            for field in *fields {\n-                if field.expr.hir_id == expr.hir_id && field.is_shorthand {\n-                    // This is a field literal\n-                    prefix = format!(\"{}: \", field.ident);\n-                    break;\n-                }\n-            }\n-            if &prefix == \"\" {\n+            match (*fields)\n+                .iter()\n+                .find(|field| field.expr.hir_id == expr.hir_id && field.is_shorthand)\n+            {\n+                // This is a field literal\n+                Some(field) => format!(\"{}: \", field.ident),\n                 // Likely a field was meant, but this field wasn't found. Do not suggest anything.\n-                return false;\n+                None => return false,\n             }\n-        }\n+        } else {\n+            String::new()\n+        };\n         if let hir::ExprKind::Call(path, args) = &expr.kind {\n             if let (hir::ExprKind::Path(hir::QPath::TypeRelative(base_ty, path_segment)), 1) =\n                 (&path.kind, args.len())\n@@ -817,7 +817,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             let suggest_to_change_suffix_or_into =\n                 |err: &mut DiagnosticBuilder<'_>, is_fallible: bool| {\n-                    let into_sugg = into_suggestion.clone();\n                     err.span_suggestion(\n                         expr.span,\n                         if literal_is_ty_suffixed(expr) {\n@@ -832,7 +831,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         } else if is_fallible {\n                             try_into_suggestion\n                         } else {\n-                            into_sugg\n+                            into_suggestion.clone()\n                         },\n                         Applicability::MachineApplicable,\n                     );"}, {"sha": "3a680f55c8c309146ce40738571d529294217cf2", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -344,11 +344,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // types, where we use Error as the Self type\n             }\n \n-            ty::Placeholder(..)\n-            | ty::UnnormalizedProjection(..)\n-            | ty::GeneratorWitness(..)\n-            | ty::Bound(..)\n-            | ty::Infer(..) => {\n+            ty::Placeholder(..) | ty::GeneratorWitness(..) | ty::Bound(..) | ty::Infer(..) => {\n                 bug!(\n                     \"unexpected type encountered in \\\n                       variance inference: {}\","}, {"sha": "6c001bc548410670f9825e0d1920b9eae77e2f62", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -1722,7 +1722,6 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n             ty::Bound(..) => panic!(\"Bound\"),\n             ty::Placeholder(..) => panic!(\"Placeholder\"),\n-            ty::UnnormalizedProjection(..) => panic!(\"UnnormalizedProjection\"),\n             ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n             ty::Infer(..) => panic!(\"Infer\"),\n             ty::Error => panic!(\"Error\"),"}, {"sha": "88cb09ac15a9cc030a6f4f602e58189605aad2a1", "filename": "src/test/mir-opt/byte_slice/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbyte_slice%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -16,10 +16,10 @@ fn main() -> () {\n         _1 = const b\"foo\";               // scope 0 at $DIR/byte_slice.rs:5:13: 5:19\n                                          // ty::Const\n                                          // + ty: &[u8; 3]\n-                                         // + val: Value(Scalar(alloc0+0x0))\n+                                         // + val: Value(Scalar(alloc0))\n                                          // mir::Constant\n                                          // + span: $DIR/byte_slice.rs:5:13: 5:19\n-                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0+0x0)) }\n+                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc0)) }\n         StorageLive(_2);                 // scope 1 at $DIR/byte_slice.rs:6:9: 6:10\n         _2 = [const 5u8, const 120u8];   // scope 1 at $DIR/byte_slice.rs:6:13: 6:24\n                                          // ty::Const"}, {"sha": "509947071b0c1bb927378b100d544ad6c5a56591", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR-promoted[0].ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR-promoted%5B0%5D.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR-promoted%5B0%5D.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR-promoted%5B0%5D.ConstProp.after.mir?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -7,13 +7,13 @@ promoted[0] in BAR: &[&i32; 1] = {\n     let mut _3: &i32;                    // in scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n \n     bb0: {\n-        _3 = const {alloc0+0x0: &i32};   // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+        _3 = const {alloc0: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Value(Scalar(alloc0+0x0))\n+                                         // + val: Value(Scalar(alloc0))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc0+0x0)) }\n+                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }\n         _2 = _3;                         // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n         _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35"}, {"sha": "8eb8d4c667b1ceb1cedd6304cbf90e92cf70a85c", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.BAR.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.BAR.PromoteTemps.diff?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -16,16 +16,16 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         StorageLive(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n--         _5 = const {alloc0+0x0: &i32};   // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n+-         _5 = const {alloc0: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:9:33: 9:34\n +         _6 = const BAR::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n                                            // ty::Const\n -                                          // + ty: &i32\n--                                          // + val: Value(Scalar(alloc0+0x0))\n+-                                          // + val: Value(Scalar(alloc0))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(DefId(0:6 ~ const_promotion_extern_static[317d]::BAR[0]), [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:9:33: 9:34\n--                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0+0x0)) }\n+-                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc0)) }\n -         _4 = &(*_5);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:32: 9:34\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35"}, {"sha": "d9c6b4f0029a34b6ed773ddb522531933d107799", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO-promoted[0].ConstProp.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO-promoted%5B0%5D.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO-promoted%5B0%5D.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO-promoted%5B0%5D.ConstProp.after.mir?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -9,13 +9,13 @@ promoted[0] in FOO: &[&i32; 1] = {\n     }\n \n     bb0: {\n-        _3 = const {alloc2+0x0: &i32};   // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+        _3 = const {alloc2: &i32};       // scope 0 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n                                          // ty::Const\n                                          // + ty: &i32\n-                                         // + val: Value(Scalar(alloc2+0x0))\n+                                         // + val: Value(Scalar(alloc2))\n                                          // mir::Constant\n                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n-                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc2+0x0)) }\n+                                         // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n         _2 = _3;                         // scope 0 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n         _1 = [move _2];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n         _0 = &_1;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}, {"sha": "781aa3c5500c0b10273512eb60d253d6d4c1becc", "filename": "src/test/mir-opt/const-promotion-extern-static/rustc.FOO.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static%2Frustc.FOO.PromoteTemps.diff?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -18,16 +18,16 @@\n -         StorageLive(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         StorageLive(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:32: 13:45\n -         StorageLive(_5);                 // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--         _5 = const {alloc2+0x0: &i32};   // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n+-         _5 = const {alloc2: &i32};       // scope 1 at $DIR/const-promotion-extern-static.rs:13:42: 13:43\n +         _6 = const FOO::promoted[0];     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n                                            // ty::Const\n -                                          // + ty: &i32\n--                                          // + val: Value(Scalar(alloc2+0x0))\n+-                                          // + val: Value(Scalar(alloc2))\n +                                          // + ty: &[&i32; 1]\n +                                          // + val: Unevaluated(DefId(0:7 ~ const_promotion_extern_static[317d]::FOO[0]), [], Some(promoted[0]))\n                                            // mir::Constant\n -                                          // + span: $DIR/const-promotion-extern-static.rs:13:42: 13:43\n--                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2+0x0)) }\n+-                                          // + literal: Const { ty: &i32, val: Value(Scalar(alloc2)) }\n -         _4 = &(*_5);                     // scope 1 at $DIR/const-promotion-extern-static.rs:13:41: 13:43\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46"}, {"sha": "30a383fd162b2aa7fa52ca1340ff56f80422164b", "filename": "src/test/mir-opt/const_allocation/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F32bit%2Frustc.main.ConstProp.after.mir?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc0: &&[(std::option::Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc0+0x0))\n+                                         // + val: Value(Scalar(alloc0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0+0x0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n@@ -30,19 +30,19 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500a17+0x0\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500alloc17\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n alloc17 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500a4+0x0\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500a8+0x0\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500a13+0x0\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc4\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc8\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc13\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n alloc4 (size: 0, align: 4) {}\n \n alloc8 (size: 16, align: 4) {\n-    \u257e\u2500a7+0x0\u2500\u2500\u257c 03 00 00 00 \u257e\u2500a9+0x0\u2500\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+    \u257e\u2500alloc7\u2500\u2500\u257c 03 00 00 00 \u257e\u2500alloc9\u2500\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n }\n \n alloc7 (size: 3, align: 1) {\n@@ -54,8 +54,8 @@ alloc9 (size: 3, align: 1) {\n }\n \n alloc13 (size: 24, align: 4) {\n-    0x00 \u2502 \u257e\u2500a12+0x0\u2500\u257c 03 00 00 00 \u257e\u2500a14+0x0\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 \u257e\u2500a15+0x0\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    0x00 \u2502 \u257e\u2500alloc12\u2500\u257c 03 00 00 00 \u257e\u2500alloc14\u2500\u257c 03 00 00 00 \u2502 \u257e\u2500\u2500\u257c....\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 \u257e\u2500alloc15\u2500\u257c 04 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n alloc12 (size: 3, align: 1) {"}, {"sha": "5fa54ae5a58ec6f5d20bf9fd546487314b0c0edc", "filename": "src/test/mir-opt/const_allocation/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation%2F64bit%2Frustc.main.ConstProp.after.mir?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n-        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n+        _2 = const {alloc0: &&[(std::option::Option<i32>, &[&str])]}; // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&str])]\n-                                         // + val: Value(Scalar(alloc0+0x0))\n+                                         // + val: Value(Scalar(alloc0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation.rs:8:5: 8:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0+0x0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&str])], val: Value(Scalar(alloc0)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation.rs:8:5: 8:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation.rs:8:8: 8:9\n@@ -30,22 +30,22 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500alloc17+0x0\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc17\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n alloc17 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500alloc4+0x0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc8+0x0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc13+0x0\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc13\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n alloc4 (size: 0, align: 8) {}\n \n alloc8 (size: 32, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc7+0x0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc9+0x0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n alloc7 (size: 3, align: 1) {\n@@ -57,9 +57,9 @@ alloc9 (size: 3, align: 1) {\n }\n \n alloc13 (size: 48, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc12+0x0\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc14+0x0\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc15+0x0\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc12\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc14\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc15\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 04 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n alloc12 (size: 3, align: 1) {"}, {"sha": "d386d2478292690ac72823e3546c006c97cdc29a", "filename": "src/test/mir-opt/const_allocation2/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F32bit%2Frustc.main.ConstProp.after.mir?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc0: &&[(std::option::Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc0+0x0))\n+                                         // + val: Value(Scalar(alloc0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0+0x0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n@@ -30,19 +30,19 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 4) {\n-    \u257e\u2500a21+0x0\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n+    \u257e\u2500alloc21\u2500\u257c 03 00 00 00                         \u2502 \u257e\u2500\u2500\u257c....\n }\n \n alloc21 (size: 48, align: 4) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500a4+0x0\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500a9+0x0\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n-    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500a19+0x0\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc4\u2500\u2500\u257c 00 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x10 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500alloc9\u2500\u2500\u257c 02 00 00 00 \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u257c....\n+    0x20 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500alloc19\u2500\u257c 03 00 00 00 \u2502 ....*...\u257e\u2500\u2500\u257c....\n }\n \n alloc4 (size: 0, align: 4) {}\n \n alloc9 (size: 8, align: 4) {\n-    \u257e\u2500a7+0x0\u2500\u2500\u257c \u257e\u2500a8+0x0\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+    \u257e\u2500alloc7\u2500\u2500\u257c \u257e\u2500alloc8\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n alloc7 (size: 1, align: 1) {\n@@ -54,7 +54,7 @@ alloc8 (size: 1, align: 1) {\n }\n \n alloc19 (size: 12, align: 4) {\n-    \u257e\u2500a15+0x3\u2500\u257c \u257e\u2500a16+0x0\u2500\u257c \u257e\u2500a18+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n+    \u257e\u2500a15+0x3\u2500\u257c \u257e\u2500alloc16\u2500\u257c \u257e\u2500a18+0x2\u2500\u257c             \u2502 \u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\u257e\u2500\u2500\u257c\n }\n \n alloc15 (size: 4, align: 1) {"}, {"sha": "d7acd0f0f4335a8e042af3b854f7f976f9976919", "filename": "src/test/mir-opt/const_allocation2/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation2%2F64bit%2Frustc.main.ConstProp.after.mir?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n-        _2 = const {alloc0+0x0: &&[(std::option::Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n+        _2 = const {alloc0: &&[(std::option::Option<i32>, &[&u8])]}; // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&[(std::option::Option<i32>, &[&u8])]\n-                                         // + val: Value(Scalar(alloc0+0x0))\n+                                         // + val: Value(Scalar(alloc0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation2.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0+0x0)) }\n+                                         // + literal: Const { ty: &&[(std::option::Option<i32>, &[&u8])], val: Value(Scalar(alloc0)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation2.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation2.rs:5:8: 5:9\n@@ -30,21 +30,21 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500alloc21+0x0\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc21\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 03 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n }\n \n alloc21 (size: 72, align: 8) {\n-    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500alloc4+0x0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x00 \u2502 00 00 00 00 __ __ __ __ \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....\u2591\u2591\u2591\u2591\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 __ __ __ __ \u2502 ............\u2591\u2591\u2591\u2591\n-    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc9+0x0\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n-    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc19+0x0\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x20 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 02 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c........\n+    0x30 \u2502 01 00 00 00 2a 00 00 00 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc19\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 ....*...\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x40 \u2502 03 00 00 00 00 00 00 00                         \u2502 ........\n }\n \n alloc4 (size: 0, align: 8) {}\n \n alloc9 (size: 16, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500alloc7+0x0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500alloc8+0x0\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc7\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n alloc7 (size: 1, align: 1) {\n@@ -56,7 +56,7 @@ alloc8 (size: 1, align: 1) {\n }\n \n alloc19 (size: 24, align: 8) {\n-    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc15+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500alloc16+0x0\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x00 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc15+0x3\u2500\u2500\u2500\u2500\u2500\u257c \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc16\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0x10 \u2502 \u257e\u2500\u2500\u2500\u2500\u2500alloc18+0x2\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n "}, {"sha": "39c60ad987a6f36fa5dc5f79a376a43a70b330e2", "filename": "src/test/mir-opt/const_allocation3/32bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F32bit%2Frustc.main.ConstProp.after.mir?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc0+0x0: &&Packed}; // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        _2 = const {alloc0: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc0+0x0))\n+                                         // + val: Value(Scalar(alloc0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0+0x0)) }\n+                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n@@ -30,19 +30,19 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 4, align: 4) {\n-    \u257e\u2500a9+0x0\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n+    \u257e\u2500alloc9\u2500\u2500\u257c                                     \u2502 \u257e\u2500\u2500\u257c\n }\n \n alloc9 (size: 168, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500a4+0x0\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500alloc4\u2500\u2500\u257c \u2502 ............\u257e\u2500\u2500\u257c\n     0x20 \u2502 01 ef cd ab 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n-    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500a6+0x0\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n+    0x80 \u2502 00 00 00 00 00 00 00 00 00 00 \u257e\u2500alloc6\u2500\u2500\u257c 00 00 \u2502 ..........\u257e\u2500\u2500\u257c..\n     0x90 \u2502 \u257e\u2500a7+0x63\u2500\u257c 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 \u257e\u2500\u2500\u257c............\n     0xa0 \u2502 00 00 00 00 00 00 00 00                         \u2502 ........\n }"}, {"sha": "96024f1c82caaa808186a880a9b2c8ad3a8b24e1", "filename": "src/test/mir-opt/const_allocation3/64bit/rustc.main.ConstProp.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_allocation3%2F64bit%2Frustc.main.ConstProp.after.mir?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -8,13 +8,13 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageLive(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n-        _2 = const {alloc0+0x0: &&Packed}; // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n+        _2 = const {alloc0: &&Packed};   // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n                                          // ty::Const\n                                          // + ty: &&Packed\n-                                         // + val: Value(Scalar(alloc0+0x0))\n+                                         // + val: Value(Scalar(alloc0))\n                                          // mir::Constant\n                                          // + span: $DIR/const_allocation3.rs:5:5: 5:8\n-                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0+0x0)) }\n+                                         // + literal: Const { ty: &&Packed, val: Value(Scalar(alloc0)) }\n         _1 = (*_2);                      // scope 0 at $DIR/const_allocation3.rs:5:5: 5:8\n         StorageDead(_2);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n         StorageDead(_1);                 // scope 0 at $DIR/const_allocation3.rs:5:8: 5:9\n@@ -30,20 +30,20 @@ fn main() -> () {\n }\n \n alloc0 (static: FOO, size: 8, align: 8) {\n-    \u257e\u2500\u2500\u2500\u2500\u2500alloc9+0x0\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u2500alloc9\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c                         \u2502 \u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n }\n \n alloc9 (size: 180, align: 1) {\n     0x00 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab ab \u2502 ................\n-    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257ealloc4+0x0 \u2502 ............\u257e\u2500\u2500\u2500\n+    0x10 \u2502 ab ab ab ab ab ab ab ab ab ab ab ab \u257e\u2500\u2500alloc4\u2500\u2500 \u2502 ............\u257e\u2500\u2500\u2500\n     0x20 \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u257c 01 ef cd ab 00 00 00 00 00 00 00 00 \u2502 \u2500\u2500\u2500\u257c............\n     0x30 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x40 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x50 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x60 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x70 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0x80 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u257e\u2500\u2500\u2500\u2500 \u2502 ..............\u257e\u2500\n-    0x90 \u2502 \u2500\u2500\u2500alloc6+0x0\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc7+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+    0x90 \u2502 \u2500\u2500\u2500\u2500\u2500alloc6\u2500\u2500\u2500\u2500\u2500\u257c 00 00 \u257e\u2500\u2500\u2500\u2500\u2500alloc7+0x63\u2500\u2500\u2500\u2500\u2500\u257c \u2502 \u2500\u2500\u2500\u2500\u2500\u257c..\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n     0xa0 \u2502 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \u2502 ................\n     0xb0 \u2502 00 00 00 00                                     \u2502 ....\n }"}, {"sha": "b7f1242d8d125de9ebed9cd96fef14a80e119bab", "filename": "src/test/mir-opt/const_prop/mutable_variable_no_prop/rustc.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_no_prop%2Frustc.main.ConstProp.diff?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -29,13 +29,13 @@\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_no_prop.rs:8:5: 10:6\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           StorageLive(_4);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-          _4 = const {alloc0+0x0: *mut u32}; // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n+          _4 = const {alloc0: *mut u32};   // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n                                            // ty::Const\n                                            // + ty: *mut u32\n-                                           // + val: Value(Scalar(alloc0+0x0))\n+                                           // + val: Value(Scalar(alloc0))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n-                                           // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc0+0x0)) }\n+                                           // + literal: Const { ty: *mut u32, val: Value(Scalar(alloc0)) }\n           _3 = (*_4);                      // scope 2 at $DIR/mutable_variable_no_prop.rs:9:13: 9:19\n           _1 = move _3;                    // scope 2 at $DIR/mutable_variable_no_prop.rs:9:9: 9:19\n           StorageDead(_3);                 // scope 2 at $DIR/mutable_variable_no_prop.rs:9:18: 9:19"}, {"sha": "103444f796ec64c48e6b288cca32217c9d7ebe65", "filename": "src/test/mir-opt/const_prop/read_immutable_static/rustc.main.ConstProp.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static%2Frustc.main.ConstProp.diff?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -16,13 +16,13 @@\n           StorageLive(_1);                 // scope 0 at $DIR/read_immutable_static.rs:7:9: 7:10\n           StorageLive(_2);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n           StorageLive(_3);                 // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n-          _3 = const {alloc0+0x0: &u8};    // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n+          _3 = const {alloc0: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n                                            // ty::Const\n                                            // + ty: &u8\n-                                           // + val: Value(Scalar(alloc0+0x0))\n+                                           // + val: Value(Scalar(alloc0))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0x0)) }\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0)) }\n -         _2 = (*_3);                      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n +         _2 = const 2u8;                  // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:16\n +                                          // ty::Const\n@@ -33,13 +33,13 @@\n +                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n           StorageLive(_4);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n           StorageLive(_5);                 // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n-          _5 = const {alloc0+0x0: &u8};    // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n+          _5 = const {alloc0: &u8};        // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n                                            // ty::Const\n                                            // + ty: &u8\n-                                           // + val: Value(Scalar(alloc0+0x0))\n+                                           // + val: Value(Scalar(alloc0))\n                                            // mir::Constant\n                                            // + span: $DIR/read_immutable_static.rs:7:19: 7:22\n-                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0+0x0)) }\n+                                           // + literal: Const { ty: &u8, val: Value(Scalar(alloc0)) }\n -         _4 = (*_5);                      // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22\n -         _1 = Add(move _2, move _4);      // scope 0 at $DIR/read_immutable_static.rs:7:13: 7:22\n +         _4 = const 2u8;                  // scope 0 at $DIR/read_immutable_static.rs:7:19: 7:22"}, {"sha": "27fe432e96ded03ca64ece5361602bc91363b0be", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.rs?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -32,7 +32,6 @@ fn main() {\n         TyKind::Never => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Tuple(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Projection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n-        TyKind::UnnormalizedProjection(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Opaque(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Param(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`\n         TyKind::Bound(..) => (), //~ ERROR usage of `ty::TyKind::<kind>`"}, {"sha": "0486c90a5a07a4a995601902dfe3c18bc297cb97", "filename": "src/test/ui-fulldeps/internal-lints/ty_tykind_usage.stderr", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fty_tykind_usage.stderr?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -139,58 +139,52 @@ LL |         TyKind::Projection(..) => (),\n error: usage of `ty::TyKind::<kind>`\n   --> $DIR/ty_tykind_usage.rs:35:9\n    |\n-LL |         TyKind::UnnormalizedProjection(..) => (),\n-   |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n-\n-error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:36:9\n-   |\n LL |         TyKind::Opaque(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:37:9\n+  --> $DIR/ty_tykind_usage.rs:36:9\n    |\n LL |         TyKind::Param(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:38:9\n+  --> $DIR/ty_tykind_usage.rs:37:9\n    |\n LL |         TyKind::Bound(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:39:9\n+  --> $DIR/ty_tykind_usage.rs:38:9\n    |\n LL |         TyKind::Placeholder(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:40:9\n+  --> $DIR/ty_tykind_usage.rs:39:9\n    |\n LL |         TyKind::Infer(..) => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:41:9\n+  --> $DIR/ty_tykind_usage.rs:40:9\n    |\n LL |         TyKind::Error => (),\n    |         ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind::<kind>`\n-  --> $DIR/ty_tykind_usage.rs:46:12\n+  --> $DIR/ty_tykind_usage.rs:45:12\n    |\n LL |     if let TyKind::Int(int_ty) = kind {}\n    |            ^^^^^^ help: try using ty::<kind> directly: `ty`\n \n error: usage of `ty::TyKind`\n-  --> $DIR/ty_tykind_usage.rs:48:24\n+  --> $DIR/ty_tykind_usage.rs:47:24\n    |\n LL |     fn ty_kind(ty_bad: TyKind<'_>, ty_good: Ty<'_>) {}\n    |                        ^^^^^^^^^^\n    |\n    = help: try using `Ty` instead\n \n-error: aborting due to 31 previous errors\n+error: aborting due to 30 previous errors\n "}, {"sha": "d24491e1bc5cbf70e8dc1f61e3fbc3b2babde5be", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.stderr?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:25:5\n    |\n LL |     const I32_REF_USIZE_UNION: usize = unsafe { Nonsense { int_32_ref: &3 }.u };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc2+0x0, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc2, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -36,7 +36,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:37:5\n    |\n LL |     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc22+0x0, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc22, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -76,7 +76,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:52:5\n    |\n LL |     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc47+0x0, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc47, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -100,7 +100,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:61:5\n    |\n LL |     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc62+0x0, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc62, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -148,7 +148,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:79:5\n    |\n LL |     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc86+0x0, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc86, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -188,7 +188,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:94:5\n    |\n LL |     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc101+0x0, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc101, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -212,7 +212,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const-pointer-values-in-various-types.rs:103:5\n    |\n LL |     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc110+0x0, but expected initialized plain (non-pointer) bytes\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc110, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "cb0ba5d9929b982f5c656b4ee75d131bd783d02f", "filename": "src/test/ui/consts/const-eval/ref_to_int_match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fref_to_int_match.stderr?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ref_to_int_match.rs:25:1\n    |\n LL | const BAR: Int = unsafe { Foo { r: &42 }.f };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc2+0x0, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc2, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "d8dafac3e70a116414e7de525525654356e5ce15", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -10,15 +10,15 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:27:1\n    |\n LL | const BAD_ENUM_PTR: Enum = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc8+0x0 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc8 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:30:1\n    |\n LL | const BAD_ENUM_WRAPPED: Wrap<Enum> = unsafe { mem::transmute(&1) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc13+0x0 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc13 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -34,15 +34,15 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:44:1\n    |\n LL | const BAD_ENUM2_PTR: Enum2 = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc20+0x0 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc20 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:47:1\n    |\n LL | const BAD_ENUM2_WRAPPED: Wrap<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc25+0x0 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc25 at .0.<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -58,7 +58,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:60:1\n    |\n LL | const BAD_ENUM2_OPTION_PTR: Option<Enum2> = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc32+0x0 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc32 at .<enum-tag>, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "a219679f182649427657d92e4e7f534388bc70c0", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/af6d8865fe0e1f6338c32cb3370802f2ebca0dc4/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=af6d8865fe0e1f6338c32cb3370802f2ebca0dc4", "patch": "@@ -34,7 +34,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:24:1\n    |\n LL | const REF_AS_USIZE: usize = unsafe { mem::transmute(&0) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc16+0x0, but expected initialized plain (non-pointer) bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered pointer to alloc16, but expected initialized plain (non-pointer) bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}]}