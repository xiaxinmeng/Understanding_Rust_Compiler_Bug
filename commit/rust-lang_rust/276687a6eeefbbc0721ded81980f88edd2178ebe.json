{"sha": "276687a6eeefbbc0721ded81980f88edd2178ebe", "node_id": "C_kwDOAAsO6NoAKDI3NjY4N2E2ZWVlZmJiYzA3MjFkZWQ4MTk4MGY4OGVkZDIxNzhlYmU", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T23:18:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T23:18:39Z"}, "message": "internal: Directly use self param in completions instead of searching", "tree": {"sha": "1777ba4e14367998f2f2e0e995a2b44f78ec9acd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1777ba4e14367998f2f2e0e995a2b44f78ec9acd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276687a6eeefbbc0721ded81980f88edd2178ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276687a6eeefbbc0721ded81980f88edd2178ebe", "html_url": "https://github.com/rust-lang/rust/commit/276687a6eeefbbc0721ded81980f88edd2178ebe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276687a6eeefbbc0721ded81980f88edd2178ebe/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60dfe8ceed39f7c89c1153655e17a5c6c0f56155", "url": "https://api.github.com/repos/rust-lang/rust/commits/60dfe8ceed39f7c89c1153655e17a5c6c0f56155", "html_url": "https://github.com/rust-lang/rust/commit/60dfe8ceed39f7c89c1153655e17a5c6c0f56155"}], "stats": {"total": 46, "additions": 28, "deletions": 18}, "files": [{"sha": "0ced029b84d3064d60bb9f3c6199f1ccd93fe064", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/276687a6eeefbbc0721ded81980f88edd2178ebe/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276687a6eeefbbc0721ded81980f88edd2178ebe/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=276687a6eeefbbc0721ded81980f88edd2178ebe", "patch": "@@ -1483,6 +1483,19 @@ impl SelfParam {\n             .and_then(|params| params.self_param())\n             .map(|value| InFile { file_id, value })\n     }\n+\n+    pub fn ty(&self, db: &dyn HirDatabase) -> Type {\n+        let resolver = self.func.resolver(db.upcast());\n+        let krate = self.func.lookup(db.upcast()).container.module(db.upcast()).krate();\n+        let ctx = hir_ty::TyLoweringContext::new(db, &resolver);\n+        let environment = db.trait_environment(self.func.into());\n+\n+        Type {\n+            krate,\n+            env: environment.clone(),\n+            ty: ctx.lower_ty(&db.function_data(self.func).params[0].1),\n+        }\n+    }\n }\n \n impl HasVisibility for Function {"}, {"sha": "e08a70ac7eb79a06243783f2270e1eeddeaa66da", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/276687a6eeefbbc0721ded81980f88edd2178ebe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276687a6eeefbbc0721ded81980f88edd2178ebe/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=276687a6eeefbbc0721ded81980f88edd2178ebe", "patch": "@@ -1,7 +1,6 @@\n //! Completes references after dot (fields and method calls).\n \n use either::Either;\n-use hir::ScopeDef;\n use rustc_hash::FxHashSet;\n \n use crate::{context::CompletionContext, patterns::ImmediateLocation, Completions};\n@@ -36,24 +35,22 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path() || ctx.is_path_disallowed() || !ctx.expects_expression() {\n         return;\n     }\n-    ctx.scope.process_all_names(&mut |name, def| {\n-        if let ScopeDef::Local(local) = &def {\n-            if local.is_self(ctx.db) {\n-                let ty = local.ty(ctx.db);\n-                complete_fields(ctx, &ty, |field, ty| match field {\n-                    either::Either::Left(field) => {\n-                        acc.add_field(ctx, Some(name.clone()), field, &ty)\n-                    }\n-                    either::Either::Right(tuple_idx) => {\n-                        acc.add_tuple_field(ctx, Some(name.clone()), tuple_idx, &ty)\n-                    }\n-                });\n-                complete_methods(ctx, &ty, |func| {\n-                    acc.add_method(ctx, func, Some(name.clone()), None)\n-                });\n-            }\n+    if let Some(func) = ctx.function_def.as_ref().and_then(|fn_| ctx.sema.to_def(fn_)) {\n+        if let Some(self_) = func.self_param(ctx.db) {\n+            let ty = self_.ty(ctx.db);\n+            complete_fields(ctx, &ty, |field, ty| match field {\n+                either::Either::Left(field) => {\n+                    acc.add_field(ctx, Some(hir::known::SELF_PARAM), field, &ty)\n+                }\n+                either::Either::Right(tuple_idx) => {\n+                    acc.add_tuple_field(ctx, Some(hir::known::SELF_PARAM), tuple_idx, &ty)\n+                }\n+            });\n+            complete_methods(ctx, &ty, |func| {\n+                acc.add_method(ctx, func, Some(hir::known::SELF_PARAM), None)\n+            });\n         }\n-    });\n+    }\n }\n \n fn complete_fields("}]}