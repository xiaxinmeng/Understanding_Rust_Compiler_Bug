{"sha": "e37d012a0629a20ea9a79efc8434d636f37487d9", "node_id": "C_kwDOAAsO6NoAKGUzN2QwMTJhMDYyOWEyMGVhOWE3OWVmYzg0MzRkNjM2ZjM3NDg3ZDk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-27T22:10:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2021-12-28T07:34:52Z"}, "message": "Tighten span when suggesting lifetime on path", "tree": {"sha": "2737a79d8a0ac80682f7f6311008c50e6d965ce8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2737a79d8a0ac80682f7f6311008c50e6d965ce8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e37d012a0629a20ea9a79efc8434d636f37487d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e37d012a0629a20ea9a79efc8434d636f37487d9", "html_url": "https://github.com/rust-lang/rust/commit/e37d012a0629a20ea9a79efc8434d636f37487d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e37d012a0629a20ea9a79efc8434d636f37487d9/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51e8031e14a899477a5e2d78ce461cab31123354", "url": "https://api.github.com/repos/rust-lang/rust/commits/51e8031e14a899477a5e2d78ce461cab31123354", "html_url": "https://github.com/rust-lang/rust/commit/51e8031e14a899477a5e2d78ce461cab31123354"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "46928a1846540f13859f74c2f6df5ce4023dd67b", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37d012a0629a20ea9a79efc8434d636f37487d9/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37d012a0629a20ea9a79efc8434d636f37487d9/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=e37d012a0629a20ea9a79efc8434d636f37487d9", "patch": "@@ -277,7 +277,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             // See rustc_resolve::late::lifetimes::LifetimeContext::add_missing_lifetime_specifiers_label\n             let elided_lifetime_span = if generic_args.span.is_empty() {\n                 // If there are no brackets, use the identifier span.\n-                path_span\n+                // HACK: we use find_ancestor_inside to properly suggest elided spans in paths\n+                // originating from macros, since the segment's span might be from a macro arg.\n+                segment.ident.span.find_ancestor_inside(path_span).unwrap_or(path_span)\n             } else if generic_args.is_empty() {\n                 // If there are brackets, but not generic arguments, then use the opening bracket\n                 generic_args.span.with_hi(generic_args.span.lo() + BytePos(1))"}, {"sha": "4cd1b34bedc95a55f5fc30a9f07a89dadadd92d9", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e37d012a0629a20ea9a79efc8434d636f37487d9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37d012a0629a20ea9a79efc8434d636f37487d9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=e37d012a0629a20ea9a79efc8434d636f37487d9", "patch": "@@ -2115,10 +2115,13 @@ impl<'tcx> LifetimeContext<'_, 'tcx> {\n                 let spans_suggs: Vec<_> = formatters\n                     .into_iter()\n                     .zip(spans_with_counts.iter())\n-                    .filter_map(|(fmt, (span, _))| {\n-                        if let Some(formatter) = fmt { Some((formatter, span)) } else { None }\n+                    .filter_map(|(formatter, (span, _))| {\n+                        if let Some(formatter) = formatter {\n+                            Some((*span, formatter(name)))\n+                        } else {\n+                            None\n+                        }\n                     })\n-                    .map(|(formatter, span)| (*span, formatter(name)))\n                     .collect();\n                 if spans_suggs.is_empty() {\n                     // If all the spans come from macros, we cannot extract snippets and then"}, {"sha": "800f03302ed38adfde8daaca51530f81eb79e2d9", "filename": "src/test/ui/in-band-lifetimes/missing-lifetime-in-alias.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e37d012a0629a20ea9a79efc8434d636f37487d9/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmissing-lifetime-in-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37d012a0629a20ea9a79efc8434d636f37487d9/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmissing-lifetime-in-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmissing-lifetime-in-alias.rs?ref=e37d012a0629a20ea9a79efc8434d636f37487d9", "patch": "@@ -0,0 +1,34 @@\n+#![feature(generic_associated_types)]\n+#![allow(unused)]\n+\n+trait Trait<'a> {\n+    type Foo;\n+\n+    type Bar<'b>\n+    //~^ NOTE associated type defined here, with 1 lifetime parameter\n+    //~| NOTE\n+    where\n+        Self: 'b;\n+}\n+\n+struct Impl<'a>(&'a ());\n+\n+impl<'a> Trait<'a> for Impl<'a> {\n+    type Foo = &'a ();\n+    type Bar<'b> = &'b ();\n+}\n+\n+type A<'a> = Impl<'a>;\n+\n+type B<'a> = <A<'a> as Trait>::Foo;\n+//~^ ERROR missing lifetime specifier\n+//~| NOTE expected named lifetime parameter\n+\n+type C<'a, 'b> = <A<'a> as Trait>::Bar;\n+//~^ ERROR missing lifetime specifier\n+//~| ERROR missing generics for associated type\n+//~| NOTE expected named lifetime parameter\n+//~| NOTE these named lifetimes are available to use\n+//~| NOTE expected 1 lifetime argument\n+\n+fn main() {}"}, {"sha": "f1b951fc82632475c215cffc36871dca54e0571c", "filename": "src/test/ui/in-band-lifetimes/missing-lifetime-in-alias.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e37d012a0629a20ea9a79efc8434d636f37487d9/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmissing-lifetime-in-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37d012a0629a20ea9a79efc8434d636f37487d9/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmissing-lifetime-in-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmissing-lifetime-in-alias.stderr?ref=e37d012a0629a20ea9a79efc8434d636f37487d9", "patch": "@@ -0,0 +1,43 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-in-alias.rs:23:24\n+   |\n+LL | type B<'a> = <A<'a> as Trait>::Foo;\n+   |                        ^^^^^ expected named lifetime parameter\n+   |\n+help: consider using the `'a` lifetime\n+   |\n+LL | type B<'a> = <A<'a> as Trait<'a>>::Foo;\n+   |                        ~~~~~~~~~\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/missing-lifetime-in-alias.rs:27:28\n+   |\n+LL | type C<'a, 'b> = <A<'a> as Trait>::Bar;\n+   |                            ^^^^^ expected named lifetime parameter\n+   |\n+note: these named lifetimes are available to use\n+  --> $DIR/missing-lifetime-in-alias.rs:27:8\n+   |\n+LL | type C<'a, 'b> = <A<'a> as Trait>::Bar;\n+   |        ^^  ^^\n+\n+error[E0107]: missing generics for associated type `Trait::Bar`\n+  --> $DIR/missing-lifetime-in-alias.rs:27:36\n+   |\n+LL | type C<'a, 'b> = <A<'a> as Trait>::Bar;\n+   |                                    ^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'b`\n+  --> $DIR/missing-lifetime-in-alias.rs:7:10\n+   |\n+LL |     type Bar<'b>\n+   |          ^^^ --\n+help: add missing lifetime argument\n+   |\n+LL | type C<'a, 'b> = <A<'a> as Trait>::Bar<'a>;\n+   |                                    ~~~~~~~\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0106, E0107.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "a692d6af703ea6104c2281f42d68cc5e4928b647", "filename": "src/test/ui/lint/reasons.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e37d012a0629a20ea9a79efc8434d636f37487d9/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e37d012a0629a20ea9a79efc8434d636f37487d9/src%2Ftest%2Fui%2Flint%2Freasons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Freasons.stderr?ref=e37d012a0629a20ea9a79efc8434d636f37487d9", "patch": "@@ -1,8 +1,8 @@\n warning: hidden lifetime parameters in types are deprecated\n-  --> $DIR/reasons.rs:20:29\n+  --> $DIR/reasons.rs:20:34\n    |\n LL |     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-   |                             ^^^^^^^^^^^^^^ expected named lifetime parameter\n+   |                                  ^^^^^^^^^ expected named lifetime parameter\n    |\n    = note: explicit anonymous lifetimes aid reasoning about ownership\n note: the lint level is defined here\n@@ -13,7 +13,7 @@ LL | #![warn(elided_lifetimes_in_paths,\n help: consider using the `'_` lifetime\n    |\n LL |     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-   |                             ~~~~~~~~~~~~~~~~~~\n+   |                                  ~~~~~~~~~~~~~\n \n warning: variable `Social_exchange_psychology` should have a snake case name\n   --> $DIR/reasons.rs:30:9"}]}