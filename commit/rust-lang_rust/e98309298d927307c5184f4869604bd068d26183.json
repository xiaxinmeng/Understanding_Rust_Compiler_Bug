{"sha": "e98309298d927307c5184f4869604bd068d26183", "node_id": "C_kwDOAAsO6NoAKGU5ODMwOTI5OGQ5MjczMDdjNTE4NGY0ODY5NjA0YmQwNjhkMjYxODM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-22T22:33:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-22T22:33:11Z"}, "message": "Auto merge of #90408 - pierwill:untrack-localdefid-90317, r=cjgillot\n\nRemove `PartialOrd`, `Ord` from `LocalDefId`\n\nPart of work on https://github.com/rust-lang/rust/issues/90317.", "tree": {"sha": "6aca509102b36b8fa83b4f36e299e15b2ff9e937", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6aca509102b36b8fa83b4f36e299e15b2ff9e937"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e98309298d927307c5184f4869604bd068d26183", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e98309298d927307c5184f4869604bd068d26183", "html_url": "https://github.com/rust-lang/rust/commit/e98309298d927307c5184f4869604bd068d26183", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e98309298d927307c5184f4869604bd068d26183/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34926f0a1681458588a2d4240c0715ef9eff7d35", "url": "https://api.github.com/repos/rust-lang/rust/commits/34926f0a1681458588a2d4240c0715ef9eff7d35", "html_url": "https://github.com/rust-lang/rust/commit/34926f0a1681458588a2d4240c0715ef9eff7d35"}, {"sha": "e6ff0bac1ec1271439ed6a7dd35f861e293cd025", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6ff0bac1ec1271439ed6a7dd35f861e293cd025", "html_url": "https://github.com/rust-lang/rust/commit/e6ff0bac1ec1271439ed6a7dd35f861e293cd025"}], "stats": {"total": 118, "additions": 87, "deletions": 31}, "files": [{"sha": "7099ca7eb88c2db01f8b5ed0af656a99e6bca869", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -9,6 +9,7 @@ use crate::fx::FxHashSet;\n use crate::graph::vec_graph::VecGraph;\n use crate::graph::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};\n use rustc_index::vec::{Idx, IndexVec};\n+use std::cmp::Ord;\n use std::ops::Range;\n \n #[cfg(test)]\n@@ -38,7 +39,7 @@ struct SccData<S: Idx> {\n     all_successors: Vec<S>,\n }\n \n-impl<N: Idx, S: Idx> Sccs<N, S> {\n+impl<N: Idx, S: Idx + Ord> Sccs<N, S> {\n     pub fn new(graph: &(impl DirectedGraph<Node = N> + WithNumNodes + WithSuccessors)) -> Self {\n         SccsConstruction::construct(graph)\n     }\n@@ -85,7 +86,7 @@ impl<N: Idx, S: Idx> DirectedGraph for Sccs<N, S> {\n     type Node = S;\n }\n \n-impl<N: Idx, S: Idx> WithNumNodes for Sccs<N, S> {\n+impl<N: Idx, S: Idx + Ord> WithNumNodes for Sccs<N, S> {\n     fn num_nodes(&self) -> usize {\n         self.num_sccs()\n     }\n@@ -103,7 +104,7 @@ impl<'graph, N: Idx, S: Idx> GraphSuccessors<'graph> for Sccs<N, S> {\n     type Iter = std::iter::Cloned<std::slice::Iter<'graph, S>>;\n }\n \n-impl<N: Idx, S: Idx> WithSuccessors for Sccs<N, S> {\n+impl<N: Idx, S: Idx + Ord> WithSuccessors for Sccs<N, S> {\n     fn successors(&self, node: S) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.successors(node).iter().cloned()\n     }"}, {"sha": "3d91bcade59a46818c93cce96127fd7e6a573b53", "filename": "compiler/rustc_data_structures/src/graph/vec_graph/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -1,3 +1,5 @@\n+use std::cmp::Ord;\n+\n use crate::graph::{DirectedGraph, GraphSuccessors, WithNumEdges, WithNumNodes, WithSuccessors};\n use rustc_index::vec::{Idx, IndexVec};\n \n@@ -17,7 +19,7 @@ pub struct VecGraph<N: Idx> {\n     edge_targets: Vec<N>,\n }\n \n-impl<N: Idx> VecGraph<N> {\n+impl<N: Idx + Ord> VecGraph<N> {\n     pub fn new(num_nodes: usize, mut edge_pairs: Vec<(N, N)>) -> Self {\n         // Sort the edges by the source -- this is important.\n         edge_pairs.sort();\n@@ -100,7 +102,7 @@ impl<'graph, N: Idx> GraphSuccessors<'graph> for VecGraph<N> {\n     type Iter = std::iter::Cloned<std::slice::Iter<'graph, N>>;\n }\n \n-impl<N: Idx> WithSuccessors for VecGraph<N> {\n+impl<N: Idx + Ord> WithSuccessors for VecGraph<N> {\n     fn successors(&self, node: N) -> <Self as GraphSuccessors<'_>>::Iter {\n         self.successors(node).iter().cloned()\n     }"}, {"sha": "d813c887eee9a9a91e3617cf2176141eff249cc0", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -101,7 +101,11 @@ impl DefPathTable {\n pub struct Definitions {\n     table: DefPathTable,\n \n-    // FIXME(eddyb) ideally all `LocalDefId`s would be HIR owners.\n+    /// Only [`LocalDefId`]s for items and item-like are HIR owners.\n+    /// The associated `HirId` has a `local_id` of `0`.\n+    /// Generic parameters and closures are also assigned a `LocalDefId` but are not HIR owners.\n+    /// Their `HirId`s are defined by their position while lowering the enclosing owner.\n+    // FIXME(cjgillot) Some `LocalDefId`s from `use` items are dropped during lowering and lack a `HirId`.\n     pub(super) def_id_to_hir_id: IndexVec<LocalDefId, Option<hir::HirId>>,\n     /// The reverse mapping of `def_id_to_hir_id`.\n     pub(super) hir_id_to_def_id: FxHashMap<hir::HirId, LocalDefId>,"}, {"sha": "69572807e7c9d6cf87853dfa842bbe52849dec64", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -1203,7 +1203,7 @@ pub enum UnsafeSource {\n     UserProvided,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Hash, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Hash, Debug)]\n pub struct BodyId {\n     pub hir_id: HirId,\n }\n@@ -1980,7 +1980,7 @@ pub struct FnSig<'hir> {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug)]\n pub struct TraitItemId {\n     pub def_id: LocalDefId,\n }\n@@ -2043,7 +2043,7 @@ pub enum TraitItemKind<'hir> {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug)]\n pub struct ImplItemId {\n     pub def_id: LocalDefId,\n }\n@@ -2644,7 +2644,7 @@ impl<'hir> VariantData<'hir> {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, Hash)]\n pub struct ItemId {\n     pub def_id: LocalDefId,\n }\n@@ -2883,7 +2883,7 @@ pub enum AssocItemKind {\n // The bodies for items are stored \"out of line\", in a separate\n // hashmap in the `Crate`. Here we just record the hir-id of the item\n // so it can fetched later.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug)]\n pub struct ForeignItemId {\n     pub def_id: LocalDefId,\n }"}, {"sha": "1482a96cae3165b289c2a4a31ea8fde86ed1f8c6", "filename": "compiler/rustc_hir/src/hir_id.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir_id.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -11,7 +11,7 @@ use std::fmt;\n /// the `local_id` part of the `HirId` changing, which is a very useful property in\n /// incremental compilation where we have to persist things through changes to\n /// the code base.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n #[derive(Encodable, Decodable)]\n pub struct HirId {\n     pub owner: LocalDefId,\n@@ -32,6 +32,10 @@ impl HirId {\n     pub fn make_owner(owner: LocalDefId) -> Self {\n         Self { owner, local_id: ItemLocalId::from_u32(0) }\n     }\n+\n+    pub fn index(self) -> (usize, usize) {\n+        (rustc_index::vec::Idx::index(self.owner), rustc_index::vec::Idx::index(self.local_id))\n+    }\n }\n \n impl fmt::Display for HirId {\n@@ -40,6 +44,18 @@ impl fmt::Display for HirId {\n     }\n }\n \n+impl Ord for HirId {\n+    fn cmp(&self, other: &Self) -> std::cmp::Ordering {\n+        (self.index()).cmp(&(other.index()))\n+    }\n+}\n+\n+impl PartialOrd for HirId {\n+    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\n+        Some(self.cmp(&other))\n+    }\n+}\n+\n rustc_data_structures::define_id_collections!(HirIdMap, HirIdSet, HirId);\n rustc_data_structures::define_id_collections!(ItemLocalMap, ItemLocalSet, ItemLocalId);\n "}, {"sha": "5aa213cb70134bef0404ac7388cf1ff225b7a757", "filename": "compiler/rustc_index/src/bit_set.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fbit_set.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -675,7 +675,7 @@ impl<T: Idx> SparseBitSet<T> {\n \n     fn insert(&mut self, elem: T) -> bool {\n         assert!(elem.index() < self.domain_size);\n-        let changed = if let Some(i) = self.elems.iter().position(|&e| e >= elem) {\n+        let changed = if let Some(i) = self.elems.iter().position(|&e| e.index() >= elem.index()) {\n             if self.elems[i] == elem {\n                 // `elem` is already in the set.\n                 false\n@@ -715,6 +715,10 @@ impl<T: Idx> SparseBitSet<T> {\n         self.elems.iter()\n     }\n \n+    bit_relations_inherent_impls! {}\n+}\n+\n+impl<T: Idx + Ord> SparseBitSet<T> {\n     fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {\n         let mut last_leq = None;\n         for e in self.iter() {\n@@ -724,8 +728,6 @@ impl<T: Idx> SparseBitSet<T> {\n         }\n         last_leq\n     }\n-\n-    bit_relations_inherent_impls! {}\n }\n \n /// A fixed-size bitset type with a hybrid representation: sparse when there\n@@ -802,7 +804,10 @@ impl<T: Idx> HybridBitSet<T> {\n     /// Returns the previous element present in the bitset from `elem`,\n     /// inclusively of elem. That is, will return `Some(elem)` if elem is in the\n     /// bitset.\n-    pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T> {\n+    pub fn last_set_in(&self, range: impl RangeBounds<T>) -> Option<T>\n+    where\n+        T: Ord,\n+    {\n         match self {\n             HybridBitSet::Sparse(sparse) => sparse.last_set_in(range),\n             HybridBitSet::Dense(dense) => dense.last_set_in(range),"}, {"sha": "e3c6528b21885672f9baef1206070a04450a43d8", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -12,7 +12,7 @@ use std::vec;\n /// Represents some newtyped `usize` wrapper.\n ///\n /// Purpose: avoid mixing indexes for different bitvector domains.\n-pub trait Idx: Copy + 'static + Ord + Debug + Hash {\n+pub trait Idx: Copy + 'static + Eq + PartialEq + Debug + Hash {\n     fn new(idx: usize) -> Self;\n \n     fn index(self) -> usize;"}, {"sha": "eeb907d01148b7454f38027997f8b71228dadf27", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -1306,7 +1306,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             })\n             .collect::<Vec<_>>();\n         // Sort everything to ensure a stable order for diagnotics.\n-        keys_and_jobs.sort_by_key(|&(def_id, _, _)| def_id);\n+        keys_and_jobs.sort_by_key(|&(def_id, _, _)| def_id.index());\n         for (def_id, encode_const, encode_opt) in keys_and_jobs.into_iter() {\n             debug_assert!(encode_const || encode_opt);\n "}, {"sha": "1422537cd50609dfe37719ecd0d2c11ca0440b7e", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc_hir::{HirId, ItemId};\n+use rustc_hir::ItemId;\n use rustc_query_system::ich::{NodeIdHashingMode, StableHashingContext};\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n@@ -355,7 +355,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n         // The codegen tests rely on items being process in the same order as\n         // they appear in the file, so for local items, we sort by node_id first\n         #[derive(PartialEq, Eq, PartialOrd, Ord)]\n-        pub struct ItemSortKey<'tcx>(Option<HirId>, SymbolName<'tcx>);\n+        pub struct ItemSortKey<'tcx>(Option<usize>, SymbolName<'tcx>);\n \n         fn item_sort_key<'tcx>(tcx: TyCtxt<'tcx>, item: MonoItem<'tcx>) -> ItemSortKey<'tcx> {\n             ItemSortKey(\n@@ -366,10 +366,7 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             // instances into account. The others don't matter for\n                             // the codegen tests and can even make item order\n                             // unstable.\n-                            InstanceDef::Item(def) => def\n-                                .did\n-                                .as_local()\n-                                .map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id)),\n+                            InstanceDef::Item(def) => Some(def.did.index.as_usize()),\n                             InstanceDef::VtableShim(..)\n                             | InstanceDef::ReifyShim(..)\n                             | InstanceDef::Intrinsic(..)\n@@ -380,10 +377,10 @@ impl<'tcx> CodegenUnit<'tcx> {\n                             | InstanceDef::CloneShim(..) => None,\n                         }\n                     }\n-                    MonoItem::Static(def_id) => {\n-                        def_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n+                    MonoItem::Static(def_id) => Some(def_id.index.as_usize()),\n+                    MonoItem::GlobalAsm(item_id) => {\n+                        Some(item_id.def_id.to_def_id().index.as_usize())\n                     }\n-                    MonoItem::GlobalAsm(item_id) => Some(item_id.hir_id()),\n                 },\n                 item.symbol_name(tcx),\n             )"}, {"sha": "04011552e31edc61cc5bb17852dd76f26787d722", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -20,7 +20,7 @@ pub type SimplifiedType = SimplifiedTypeGen<DefId>;\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]\n pub enum SimplifiedTypeGen<D>\n where\n-    D: Copy + Debug + Ord + Eq,\n+    D: Copy + Debug + Eq,\n {\n     BoolSimplifiedType,\n     CharSimplifiedType,"}, {"sha": "e1f30fef44f99ebecfda746406e1f2b10af6d570", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -212,7 +212,8 @@ impl<'tcx> Inliner<'tcx> {\n             // a lower `HirId` than the callee. This ensures that the callee will\n             // not inline us. This trick only works without incremental compilation.\n             // So don't do it if that is enabled.\n-            if !self.tcx.dep_graph.is_fully_enabled() && self.hir_id < callee_hir_id {\n+            if !self.tcx.dep_graph.is_fully_enabled() && self.hir_id.index() < callee_hir_id.index()\n+            {\n                 return Ok(());\n             }\n "}, {"sha": "d15befbf28730f17a7da2e09bf5367f15d3ff728", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -322,7 +322,7 @@ rustc_data_structures::define_id_collections!(DefIdMap, DefIdSet, DefId);\n /// few cases where we know that only DefIds from the local crate are expected\n /// and a DefId from a different crate would signify a bug somewhere. This\n /// is when LocalDefId comes in handy.\n-#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n pub struct LocalDefId {\n     pub local_def_index: DefIndex,\n }"}, {"sha": "3bbf2a0e45666f8339d9889e466899fac892a67c", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e98309298d927307c5184f4869604bd068d26183/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=e98309298d927307c5184f4869604bd068d26183", "patch": "@@ -424,7 +424,7 @@ impl FileName {\n /// `SpanData` is public because `Span` uses a thread-local interner and can't be\n /// sent to other threads, but some pieces of performance infra run in a separate thread.\n /// Using `Span` is generally preferred.\n-#[derive(Clone, Copy, Hash, PartialEq, Eq, Ord, PartialOrd)]\n+#[derive(Clone, Copy, Hash, PartialEq, Eq)]\n pub struct SpanData {\n     pub lo: BytePos,\n     pub hi: BytePos,\n@@ -434,6 +434,36 @@ pub struct SpanData {\n     pub parent: Option<LocalDefId>,\n }\n \n+// Order spans by position in the file.\n+impl Ord for SpanData {\n+    fn cmp(&self, other: &Self) -> Ordering {\n+        let SpanData {\n+            lo: s_lo,\n+            hi: s_hi,\n+            ctxt: s_ctxt,\n+            // `LocalDefId` does not implement `Ord`.\n+            // The other fields are enough to determine in-file order.\n+            parent: _,\n+        } = self;\n+        let SpanData {\n+            lo: o_lo,\n+            hi: o_hi,\n+            ctxt: o_ctxt,\n+            // `LocalDefId` does not implement `Ord`.\n+            // The other fields are enough to determine in-file order.\n+            parent: _,\n+        } = other;\n+\n+        (s_lo, s_hi, s_ctxt).cmp(&(o_lo, o_hi, o_ctxt))\n+    }\n+}\n+\n+impl PartialOrd for SpanData {\n+    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n+        Some(self.cmp(other))\n+    }\n+}\n+\n impl SpanData {\n     #[inline]\n     pub fn span(&self) -> Span {"}]}