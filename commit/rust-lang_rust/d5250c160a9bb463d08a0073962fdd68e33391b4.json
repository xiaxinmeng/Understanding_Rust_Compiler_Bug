{"sha": "d5250c160a9bb463d08a0073962fdd68e33391b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1MjUwYzE2MGE5YmI0NjNkMDhhMDA3Mzk2MmZkZDY4ZTMzMzkxYjQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-25T16:07:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-25T16:07:42Z"}, "message": "Rollup merge of #72153 - lcnr:exhaustively-match, r=pnkfelix\n\nexhaustively check `ty::Kind` during structural match checking\n\nThis was prone to errors as we may forget new kinds in the future.\n\nI am also not yet sure about some kinds.\n\n`ty::GeneratorWitness(..) | ty::Infer(_) | ty::Placeholder(_) | ty::UnnormalizedProjection(..)  | ty::Bound(..)` might be unreachable here.\n\nWe may want to forbid `ty::Projection`, similar to `ty::Param`.\n\n`ty::Opaque` seems fine afaict, should not be possible in a match atm.\n\nI believe `ty::Foreign` should not be structurally match, as I don't even know what\nthat would actually mean.\n\nr? @pnkfelix cc @eddyb", "tree": {"sha": "cf5c67e1bf484b8713ea3ca0c07ba09a7b65c25d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf5c67e1bf484b8713ea3ca0c07ba09a7b65c25d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5250c160a9bb463d08a0073962fdd68e33391b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJey+1OCRBK7hj4Ov3rIwAAdHIIAHeVua47iCFjbyv5DwelPxZ9\nJ7k1A76p4uEOvi2CtBgjVpat8A1jS4HODEdPHmC9ME/5A/9thubep7Lqldosxl3m\nDv+5DxWTj/CJJueFRIT/J4yRQEvaMBu7pgjFITfx026YTAuwezyS6vRVV3f9+46g\nYQWM8t9QrRDdlK+vepV7qIvvqp2uBjJm70WwRqiU5DwjAk36jhQ1gDEalN6HY/50\nlKmyuYebhHVBZw8jNaLdyHz0FZqlNje6VEMjNaIaHOR095JCqEWDQ7ysM8VGLxSm\n+as+eg0KcfH9iUexPJqR+iIEI0dReZo88XdshQVajuOnUScA9nMFsDvked8J+/s=\n=Q2w0\n-----END PGP SIGNATURE-----\n", "payload": "tree cf5c67e1bf484b8713ea3ca0c07ba09a7b65c25d\nparent ee6c0dae394f67b5286909704f8f0a608696c96c\nparent a5a4ec98e20e4b863cfb2f6c44faa15824fce9f3\nauthor Dylan DPC <dylan.dpc@gmail.com> 1590422862 +0200\ncommitter GitHub <noreply@github.com> 1590422862 +0200\n\nRollup merge of #72153 - lcnr:exhaustively-match, r=pnkfelix\n\nexhaustively check `ty::Kind` during structural match checking\n\nThis was prone to errors as we may forget new kinds in the future.\n\nI am also not yet sure about some kinds.\n\n`ty::GeneratorWitness(..) | ty::Infer(_) | ty::Placeholder(_) | ty::UnnormalizedProjection(..)  | ty::Bound(..)` might be unreachable here.\n\nWe may want to forbid `ty::Projection`, similar to `ty::Param`.\n\n`ty::Opaque` seems fine afaict, should not be possible in a match atm.\n\nI believe `ty::Foreign` should not be structurally match, as I don't even know what\nthat would actually mean.\n\nr? @pnkfelix cc @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5250c160a9bb463d08a0073962fdd68e33391b4", "html_url": "https://github.com/rust-lang/rust/commit/d5250c160a9bb463d08a0073962fdd68e33391b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5250c160a9bb463d08a0073962fdd68e33391b4/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee6c0dae394f67b5286909704f8f0a608696c96c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6c0dae394f67b5286909704f8f0a608696c96c", "html_url": "https://github.com/rust-lang/rust/commit/ee6c0dae394f67b5286909704f8f0a608696c96c"}, {"sha": "a5a4ec98e20e4b863cfb2f6c44faa15824fce9f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a4ec98e20e4b863cfb2f6c44faa15824fce9f3", "html_url": "https://github.com/rust-lang/rust/commit/a5a4ec98e20e4b863cfb2f6c44faa15824fce9f3"}], "stats": {"total": 124, "additions": 118, "deletions": 6}, "files": [{"sha": "9e3f75fdc078c41fffc64006e2b9821a7bc20b7a", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=d5250c160a9bb463d08a0073962fdd68e33391b4", "patch": "@@ -124,8 +124,20 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n                     traits::NonStructuralMatchTy::Dynamic => {\n                         \"trait objects cannot be used in patterns\".to_string()\n                     }\n+                    traits::NonStructuralMatchTy::Opaque => {\n+                        \"opaque types cannot be used in patterns\".to_string()\n+                    }\n+                    traits::NonStructuralMatchTy::Generator => {\n+                        \"generators cannot be used in patterns\".to_string()\n+                    }\n                     traits::NonStructuralMatchTy::Param => {\n-                        bug!(\"use of constant whose type is a parameter inside a pattern\")\n+                        bug!(\"use of a constant whose type is a parameter inside a pattern\")\n+                    }\n+                    traits::NonStructuralMatchTy::Projection => {\n+                        bug!(\"use of a constant whose type is a projection inside a pattern\")\n+                    }\n+                    traits::NonStructuralMatchTy::Foreign => {\n+                        bug!(\"use of a value of a foreign type inside a pattern\")\n                     }\n                 };\n "}, {"sha": "b877049fcf667b4ea76ce20629bcc475c3835ae8", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=d5250c160a9bb463d08a0073962fdd68e33391b4", "patch": "@@ -13,6 +13,10 @@ pub enum NonStructuralMatchTy<'tcx> {\n     Adt(&'tcx AdtDef),\n     Param,\n     Dynamic,\n+    Foreign,\n+    Opaque,\n+    Generator,\n+    Projection,\n }\n \n /// This method traverses the structure of `ty`, trying to find an\n@@ -143,6 +147,22 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 self.found = Some(NonStructuralMatchTy::Dynamic);\n                 return true; // Stop visiting.\n             }\n+            ty::Foreign(_) => {\n+                self.found = Some(NonStructuralMatchTy::Foreign);\n+                return true; // Stop visiting.\n+            }\n+            ty::Opaque(..) => {\n+                self.found = Some(NonStructuralMatchTy::Opaque);\n+                return true; // Stop visiting.\n+            }\n+            ty::Projection(..) => {\n+                self.found = Some(NonStructuralMatchTy::Projection);\n+                return true; // Stop visiting.\n+            }\n+            ty::Generator(..) | ty::GeneratorWitness(..) => {\n+                self.found = Some(NonStructuralMatchTy::Generator);\n+                return true; // Stop visiting.\n+            }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n                 // `*const _`/`*mut _`, so skip `super_visit_with`.\n@@ -159,32 +179,55 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 // structural equality on `T` does not recur into the raw\n                 // pointer. Therefore, one can still use `C` in a pattern.\n \n-                // (But still tell caller to continue search.)\n+                // (But still tell the caller to continue search.)\n                 return false;\n             }\n             ty::FnDef(..) | ty::FnPtr(..) => {\n-                // types of formals and return in `fn(_) -> _` are also irrelevant;\n+                // Types of formals and return in `fn(_) -> _` are also irrelevant;\n                 // so we do not recur into them via `super_visit_with`\n                 //\n-                // (But still tell caller to continue search.)\n+                // (But still tell the caller to continue search.)\n                 return false;\n             }\n             ty::Array(_, n)\n                 if { n.try_eval_usize(self.tcx(), ty::ParamEnv::reveal_all()) == Some(0) } =>\n             {\n                 // rust-lang/rust#62336: ignore type of contents\n                 // for empty array.\n+                //\n+                // (But still tell the caller to continue search.)\n                 return false;\n             }\n-            _ => {\n+            ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str | ty::Never => {\n+                // These primitive types are always structural match.\n+                //\n+                // `Never` is kind of special here, but as it is not inhabitable, this should be fine.\n+                //\n+                // (But still tell the caller to continue search.)\n+                return false;\n+            }\n+\n+            ty::Array(..) | ty::Slice(_) | ty::Ref(..) | ty::Tuple(..) => {\n+                // First check all contained types and then tell the caller to continue searching.\n                 ty.super_visit_with(self);\n                 return false;\n             }\n+            ty::Closure(..) | ty::Infer(_) | ty::Placeholder(_) | ty::Bound(..) => {\n+                bug!(\"unexpected type during structural-match checking: {:?}\", ty);\n+            }\n+            ty::Error => {\n+                self.tcx().sess.delay_span_bug(self.span, \"ty::Error in structural-match check\");\n+                // We still want to check other types after encountering an error,\n+                // as this may still emit relevant errors.\n+                //\n+                // So we continue searching here.\n+                return false;\n+            }\n         };\n \n         if !self.seen.insert(adt_def.did) {\n             debug!(\"Search already seen adt_def: {:?}\", adt_def);\n-            // let caller continue its search\n+            // Let caller continue its search.\n             return false;\n         }\n "}, {"sha": "479d6cd9af765b9bf4eae241faa4d67e3d7456c0", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.rs?ref=d5250c160a9bb463d08a0073962fdd68e33391b4", "patch": "@@ -0,0 +1,20 @@\n+#![feature(const_fn, type_alias_impl_trait)]\n+\n+type Bar = impl Send;\n+\n+// While i32 is structural-match, we do not want to leak this information.\n+// (See https://github.com/rust-lang/rust/issues/72156)\n+const fn leak_free() -> Bar {\n+    7i32\n+}\n+const LEAK_FREE: Bar = leak_free();\n+\n+fn leak_free_test() {\n+    match todo!() {\n+        LEAK_FREE => (),\n+        //~^ opaque types cannot be used in patterns\n+        _ => (),\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "ae0d8e8d4239c4a772bbdcc11fb1726670659a35", "filename": "src/test/ui/type-alias-impl-trait/structural-match-no-leak.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match-no-leak.stderr?ref=d5250c160a9bb463d08a0073962fdd68e33391b4", "patch": "@@ -0,0 +1,8 @@\n+error: opaque types cannot be used in patterns\n+  --> $DIR/structural-match-no-leak.rs:14:9\n+   |\n+LL |         LEAK_FREE => (),\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "481448d64b1aab64458e874deb5cbdbbc23c10a5", "filename": "src/test/ui/type-alias-impl-trait/structural-match.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.rs?ref=d5250c160a9bb463d08a0073962fdd68e33391b4", "patch": "@@ -0,0 +1,21 @@\n+#![feature(const_fn, type_alias_impl_trait)]\n+\n+type Foo = impl Send;\n+\n+// This is not structural-match\n+struct A;\n+\n+const fn value() -> Foo {\n+    A\n+}\n+const VALUE: Foo = value();\n+\n+fn test() {\n+    match todo!() {\n+        VALUE => (),\n+        //~^ opaque types cannot be used in patterns\n+        _ => (),\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "ad9036a87d1d950071ccc8a0a024edec123244e4", "filename": "src/test/ui/type-alias-impl-trait/structural-match.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5250c160a9bb463d08a0073962fdd68e33391b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fstructural-match.stderr?ref=d5250c160a9bb463d08a0073962fdd68e33391b4", "patch": "@@ -0,0 +1,8 @@\n+error: opaque types cannot be used in patterns\n+  --> $DIR/structural-match.rs:15:9\n+   |\n+LL |         VALUE => (),\n+   |         ^^^^^\n+\n+error: aborting due to previous error\n+"}]}